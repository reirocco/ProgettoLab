
Ballbot_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf14  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0810c1b8  0810c1b8  0001c1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c6f4  0810c6f4  0001c6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c6fc  0810c6fc  0001c6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c700  0810c700  0001c700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  0810c704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d0  100001e4  0810c8e8  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100004b4  0810c8e8  000204b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b66b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c9f  00000000  00000000  0003b87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  0003e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013a0  00000000  00000000  0003f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bf78  00000000  00000000  00040d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a94f  00000000  00000000  0007ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018b7b7  00000000  00000000  0009763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00222df6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e7c  00000000  00000000  00222e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810c19c 	.word	0x0810c19c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	0810c19c 	.word	0x0810c19c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <IMU_MPU6050_Init>:
//65.5 LSB/°/s for ± 500 °/s
float Acc_LSB_Sensitivity = 8192.0;
float Gyro_LSB_Sensitivity = 65.5;


int8_t IMU_MPU6050_Init (void){
 8101138:	b580      	push	{r7, lr}
 810113a:	b086      	sub	sp, #24
 810113c:	af04      	add	r7, sp, #16
	uint8_t Data;
	HAL_StatusTypeDef ret;

	//Double check I2C communication
	ret = HAL_I2C_IsDeviceReady (&hi2c1,MPU6050_ADDR, 2, 1000); //2 trials, 1000ms each
 810113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101142:	2202      	movs	r2, #2
 8101144:	21d0      	movs	r1, #208	; 0xd0
 8101146:	485f      	ldr	r0, [pc, #380]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101148:	f001 fe46 	bl	8102dd8 <HAL_I2C_IsDeviceReady>
 810114c:	4603      	mov	r3, r0
 810114e:	71fb      	strb	r3, [r7, #7]
	if(ret!=HAL_OK){
 8101150:	79fb      	ldrb	r3, [r7, #7]
 8101152:	2b00      	cmp	r3, #0
 8101154:	d002      	beq.n	810115c <IMU_MPU6050_Init+0x24>
		return -1;
 8101156:	f04f 33ff 	mov.w	r3, #4294967295
 810115a:	e0af      	b.n	81012bc <IMU_MPU6050_Init+0x184>
	}
	uint8_t check;
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 810115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101160:	9302      	str	r3, [sp, #8]
 8101162:	2301      	movs	r3, #1
 8101164:	9301      	str	r3, [sp, #4]
 8101166:	1d7b      	adds	r3, r7, #5
 8101168:	9300      	str	r3, [sp, #0]
 810116a:	2301      	movs	r3, #1
 810116c:	2275      	movs	r2, #117	; 0x75
 810116e:	21d0      	movs	r1, #208	; 0xd0
 8101170:	4854      	ldr	r0, [pc, #336]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101172:	f001 fd17 	bl	8102ba4 <HAL_I2C_Mem_Read>
 8101176:	4603      	mov	r3, r0
 8101178:	71fb      	strb	r3, [r7, #7]
	if((ret!=HAL_OK) || (check!=0x68)){
 810117a:	79fb      	ldrb	r3, [r7, #7]
 810117c:	2b00      	cmp	r3, #0
 810117e:	d102      	bne.n	8101186 <IMU_MPU6050_Init+0x4e>
 8101180:	797b      	ldrb	r3, [r7, #5]
 8101182:	2b68      	cmp	r3, #104	; 0x68
 8101184:	d002      	beq.n	810118c <IMU_MPU6050_Init+0x54>
		return -1;
 8101186:	f04f 33ff 	mov.w	r3, #4294967295
 810118a:	e097      	b.n	81012bc <IMU_MPU6050_Init+0x184>

	//Initialize

	//Power Management 1 register
	//sensor's normal operation
	Data = 0;
 810118c:	2300      	movs	r3, #0
 810118e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8101190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101194:	9302      	str	r3, [sp, #8]
 8101196:	2301      	movs	r3, #1
 8101198:	9301      	str	r3, [sp, #4]
 810119a:	1dbb      	adds	r3, r7, #6
 810119c:	9300      	str	r3, [sp, #0]
 810119e:	2301      	movs	r3, #1
 81011a0:	226b      	movs	r2, #107	; 0x6b
 81011a2:	21d0      	movs	r1, #208	; 0xd0
 81011a4:	4847      	ldr	r0, [pc, #284]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011a6:	f001 fbe9 	bl	810297c <HAL_I2C_Mem_Write>
 81011aa:	4603      	mov	r3, r0
 81011ac:	71fb      	strb	r3, [r7, #7]

	//Accelerometer Configuration register
	//set accelerometer's full scale range to ± 4g (AFS_SEL=1)
	//no self-test
	Data = 0x08;
 81011ae:	2308      	movs	r3, #8
 81011b0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 81011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011b6:	9302      	str	r3, [sp, #8]
 81011b8:	2301      	movs	r3, #1
 81011ba:	9301      	str	r3, [sp, #4]
 81011bc:	1dbb      	adds	r3, r7, #6
 81011be:	9300      	str	r3, [sp, #0]
 81011c0:	2301      	movs	r3, #1
 81011c2:	221c      	movs	r2, #28
 81011c4:	21d0      	movs	r1, #208	; 0xd0
 81011c6:	483f      	ldr	r0, [pc, #252]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011c8:	f001 fbd8 	bl	810297c <HAL_I2C_Mem_Write>
 81011cc:	4603      	mov	r3, r0
 81011ce:	71fb      	strb	r3, [r7, #7]

	//Gyroscope Configuration register
	//set gyroscope's full scale range to ± 500 °/s (FS_SEL=1)
	//no self-test
	Data = 0x08;
 81011d0:	2308      	movs	r3, #8
 81011d2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 81011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011d8:	9302      	str	r3, [sp, #8]
 81011da:	2301      	movs	r3, #1
 81011dc:	9301      	str	r3, [sp, #4]
 81011de:	1dbb      	adds	r3, r7, #6
 81011e0:	9300      	str	r3, [sp, #0]
 81011e2:	2301      	movs	r3, #1
 81011e4:	221b      	movs	r2, #27
 81011e6:	21d0      	movs	r1, #208	; 0xd0
 81011e8:	4836      	ldr	r0, [pc, #216]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011ea:	f001 fbc7 	bl	810297c <HAL_I2C_Mem_Write>
	//enable Digital Low Pass Filter(DLPF) with the highest bandwidth (DLPF_CFG=1):
	//Acc: 184Hz bandwidth, 2.0ms delay
	//Gyro: 188Hz bandwidth, 1.9ms delay
	//Note with DLPF gyroscope frequency reduces to 1kHz
	//Note acc max frequency is 1KHz
	Data = 0x01;
 81011ee:	2301      	movs	r3, #1
 81011f0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 81011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011f6:	9302      	str	r3, [sp, #8]
 81011f8:	2301      	movs	r3, #1
 81011fa:	9301      	str	r3, [sp, #4]
 81011fc:	1dbb      	adds	r3, r7, #6
 81011fe:	9300      	str	r3, [sp, #0]
 8101200:	2301      	movs	r3, #1
 8101202:	221a      	movs	r2, #26
 8101204:	21d0      	movs	r1, #208	; 0xd0
 8101206:	482f      	ldr	r0, [pc, #188]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101208:	f001 fbb8 	bl	810297c <HAL_I2C_Mem_Write>
 810120c:	4603      	mov	r3, r0
 810120e:	71fb      	strb	r3, [r7, #7]

	//Sample Rate Divider register
	//Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
	//set sample rate to 20Hz, 50ms (SMPLRT_DIV=49)
	Data = 0x31;
 8101210:	2331      	movs	r3, #49	; 0x31
 8101212:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8101214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101218:	9302      	str	r3, [sp, #8]
 810121a:	2301      	movs	r3, #1
 810121c:	9301      	str	r3, [sp, #4]
 810121e:	1dbb      	adds	r3, r7, #6
 8101220:	9300      	str	r3, [sp, #0]
 8101222:	2301      	movs	r3, #1
 8101224:	2219      	movs	r2, #25
 8101226:	21d0      	movs	r1, #208	; 0xd0
 8101228:	4826      	ldr	r0, [pc, #152]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810122a:	f001 fba7 	bl	810297c <HAL_I2C_Mem_Write>
 810122e:	4603      	mov	r3, r0
 8101230:	71fb      	strb	r3, [r7, #7]

	//User Control register
	//enable FIFO buffer
	Data = 0x40;
 8101232:	2340      	movs	r3, #64	; 0x40
 8101234:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810123a:	9302      	str	r3, [sp, #8]
 810123c:	2301      	movs	r3, #1
 810123e:	9301      	str	r3, [sp, #4]
 8101240:	1dbb      	adds	r3, r7, #6
 8101242:	9300      	str	r3, [sp, #0]
 8101244:	2301      	movs	r3, #1
 8101246:	226a      	movs	r2, #106	; 0x6a
 8101248:	21d0      	movs	r1, #208	; 0xd0
 810124a:	481e      	ldr	r0, [pc, #120]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810124c:	f001 fb96 	bl	810297c <HAL_I2C_Mem_Write>
 8101250:	4603      	mov	r3, r0
 8101252:	71fb      	strb	r3, [r7, #7]

	//FIFO Enable register
	//select accelerometer's and gyroscope's data for FIFO buffer
	Data = 0x78;
 8101254:	2378      	movs	r3, #120	; 0x78
 8101256:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8101258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810125c:	9302      	str	r3, [sp, #8]
 810125e:	2301      	movs	r3, #1
 8101260:	9301      	str	r3, [sp, #4]
 8101262:	1dbb      	adds	r3, r7, #6
 8101264:	9300      	str	r3, [sp, #0]
 8101266:	2301      	movs	r3, #1
 8101268:	2223      	movs	r2, #35	; 0x23
 810126a:	21d0      	movs	r1, #208	; 0xd0
 810126c:	4815      	ldr	r0, [pc, #84]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810126e:	f001 fb85 	bl	810297c <HAL_I2C_Mem_Write>
 8101272:	4603      	mov	r3, r0
 8101274:	71fb      	strb	r3, [r7, #7]

	//INT Pin / Bypass Enable Configuration register
	//configure interrupt signal (default)
	Data = 0x00;
 8101276:	2300      	movs	r3, #0
 8101278:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 810127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810127e:	9302      	str	r3, [sp, #8]
 8101280:	2301      	movs	r3, #1
 8101282:	9301      	str	r3, [sp, #4]
 8101284:	1dbb      	adds	r3, r7, #6
 8101286:	9300      	str	r3, [sp, #0]
 8101288:	2301      	movs	r3, #1
 810128a:	2237      	movs	r2, #55	; 0x37
 810128c:	21d0      	movs	r1, #208	; 0xd0
 810128e:	480d      	ldr	r0, [pc, #52]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101290:	f001 fb74 	bl	810297c <HAL_I2C_Mem_Write>
 8101294:	4603      	mov	r3, r0
 8101296:	71fb      	strb	r3, [r7, #7]

	//Interrupt Enable register
	//enable Data Ready interrupt (DATA_RDY_EN=1)
	//(write operation to all of the sensor registers has been completed)
	Data = 0x01;
 8101298:	2301      	movs	r3, #1
 810129a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, 1000);
 810129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012a0:	9302      	str	r3, [sp, #8]
 81012a2:	2301      	movs	r3, #1
 81012a4:	9301      	str	r3, [sp, #4]
 81012a6:	1dbb      	adds	r3, r7, #6
 81012a8:	9300      	str	r3, [sp, #0]
 81012aa:	2301      	movs	r3, #1
 81012ac:	2238      	movs	r2, #56	; 0x38
 81012ae:	21d0      	movs	r1, #208	; 0xd0
 81012b0:	4804      	ldr	r0, [pc, #16]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81012b2:	f001 fb63 	bl	810297c <HAL_I2C_Mem_Write>
 81012b6:	4603      	mov	r3, r0
 81012b8:	71fb      	strb	r3, [r7, #7]

	return 0;
 81012ba:	2300      	movs	r3, #0
}
 81012bc:	4618      	mov	r0, r3
 81012be:	3708      	adds	r7, #8
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	10000200 	.word	0x10000200

081012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b08a      	sub	sp, #40	; 0x28
 81012cc:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81012ce:	4b35      	ldr	r3, [pc, #212]	; (81013a4 <main+0xdc>)
 81012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d4:	4a33      	ldr	r2, [pc, #204]	; (81013a4 <main+0xdc>)
 81012d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012de:	4b31      	ldr	r3, [pc, #196]	; (81013a4 <main+0xdc>)
 81012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81012e8:	603b      	str	r3, [r7, #0]
 81012ea:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81012ec:	2001      	movs	r0, #1
 81012ee:	f001 faa3 	bl	8102838 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81012f2:	f002 fa31 	bl	8103758 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81012f6:	2201      	movs	r2, #1
 81012f8:	2102      	movs	r1, #2
 81012fa:	2000      	movs	r0, #0
 81012fc:	f002 f9b2 	bl	8103664 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101300:	4b29      	ldr	r3, [pc, #164]	; (81013a8 <main+0xe0>)
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	091b      	lsrs	r3, r3, #4
 8101306:	f003 030f 	and.w	r3, r3, #15
 810130a:	2b07      	cmp	r3, #7
 810130c:	d108      	bne.n	8101320 <main+0x58>
 810130e:	4b27      	ldr	r3, [pc, #156]	; (81013ac <main+0xe4>)
 8101310:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101314:	4a25      	ldr	r2, [pc, #148]	; (81013ac <main+0xe4>)
 8101316:	f043 0301 	orr.w	r3, r3, #1
 810131a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810131e:	e007      	b.n	8101330 <main+0x68>
 8101320:	4b22      	ldr	r3, [pc, #136]	; (81013ac <main+0xe4>)
 8101322:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101326:	4a21      	ldr	r2, [pc, #132]	; (81013ac <main+0xe4>)
 8101328:	f043 0301 	orr.w	r3, r3, #1
 810132c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101330:	f000 fee8 	bl	8102104 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101334:	f000 fa94 	bl	8101860 <MX_GPIO_Init>
  MX_TIM1_Init();
 8101338:	f000 f882 	bl	8101440 <MX_TIM1_Init>
  MX_I2C1_Init();
 810133c:	f000 f840 	bl	81013c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8101340:	f000 f942 	bl	81015c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8101344:	f000 f994 	bl	8101670 <MX_TIM3_Init>
  MX_TIM4_Init();
 8101348:	f000 f9e8 	bl	810171c <MX_TIM4_Init>
  MX_UART4_Init();
 810134c:	f000 fa3c 	bl	81017c8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

    // IMU SETTINGS
	IMU_MPU6050_Init();
 8101350:	f7ff fef2 	bl	8101138 <IMU_MPU6050_Init>
	printf("Start\r\n");
 8101354:	4816      	ldr	r0, [pc, #88]	; (81013b0 <main+0xe8>)
 8101356:	f007 f923 	bl	81085a0 <puts>

	// TIMERS START
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 810135a:	2100      	movs	r1, #0
 810135c:	4815      	ldr	r0, [pc, #84]	; (81013b4 <main+0xec>)
 810135e:	f004 f801 	bl	8105364 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101362:	2104      	movs	r1, #4
 8101364:	4813      	ldr	r0, [pc, #76]	; (81013b4 <main+0xec>)
 8101366:	f003 fffd 	bl	8105364 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 810136a:	2108      	movs	r1, #8
 810136c:	4811      	ldr	r0, [pc, #68]	; (81013b4 <main+0xec>)
 810136e:	f003 fff9 	bl	8105364 <HAL_TIM_PWM_Start>
	/* UART 4 MSG INIT */
	uint8_t MSG[35] = {'\0'};
 8101372:	2300      	movs	r3, #0
 8101374:	607b      	str	r3, [r7, #4]
 8101376:	f107 0308 	add.w	r3, r7, #8
 810137a:	221f      	movs	r2, #31
 810137c:	2100      	movs	r1, #0
 810137e:	4618      	mov	r0, r3
 8101380:	f006 fa1e 	bl	81077c0 <memset>
	uint8_t X = 0;
 8101384:	2300      	movs	r3, #0
 8101386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	*/

	/* INVIO TRAMITE UART4 */

	HAL_UART_Transmit(&huart4, "ciao\r", sizeof("ciao\r"), 0xFFFF);
 810138a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810138e:	2206      	movs	r2, #6
 8101390:	4909      	ldr	r1, [pc, #36]	; (81013b8 <main+0xf0>)
 8101392:	480a      	ldr	r0, [pc, #40]	; (81013bc <main+0xf4>)
 8101394:	f005 f934 	bl	8106600 <HAL_UART_Transmit>
	HAL_Delay(500);
 8101398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810139c:	f000 ff66 	bl	810226c <HAL_Delay>
	HAL_UART_Transmit(&huart4, "ciao\r", sizeof("ciao\r"), 0xFFFF);
 81013a0:	e7f3      	b.n	810138a <main+0xc2>
 81013a2:	bf00      	nop
 81013a4:	58024400 	.word	0x58024400
 81013a8:	e000ed00 	.word	0xe000ed00
 81013ac:	58026400 	.word	0x58026400
 81013b0:	0810c1b8 	.word	0x0810c1b8
 81013b4:	1000024c 	.word	0x1000024c
 81013b8:	0810c1c0 	.word	0x0810c1c0
 81013bc:	1000037c 	.word	0x1000037c

081013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81013c0:	b580      	push	{r7, lr}
 81013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81013c4:	4b1b      	ldr	r3, [pc, #108]	; (8101434 <MX_I2C1_Init+0x74>)
 81013c6:	4a1c      	ldr	r2, [pc, #112]	; (8101438 <MX_I2C1_Init+0x78>)
 81013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 81013ca:	4b1a      	ldr	r3, [pc, #104]	; (8101434 <MX_I2C1_Init+0x74>)
 81013cc:	4a1b      	ldr	r2, [pc, #108]	; (810143c <MX_I2C1_Init+0x7c>)
 81013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81013d0:	4b18      	ldr	r3, [pc, #96]	; (8101434 <MX_I2C1_Init+0x74>)
 81013d2:	2200      	movs	r2, #0
 81013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81013d6:	4b17      	ldr	r3, [pc, #92]	; (8101434 <MX_I2C1_Init+0x74>)
 81013d8:	2201      	movs	r2, #1
 81013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013dc:	4b15      	ldr	r3, [pc, #84]	; (8101434 <MX_I2C1_Init+0x74>)
 81013de:	2200      	movs	r2, #0
 81013e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81013e2:	4b14      	ldr	r3, [pc, #80]	; (8101434 <MX_I2C1_Init+0x74>)
 81013e4:	2200      	movs	r2, #0
 81013e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013e8:	4b12      	ldr	r3, [pc, #72]	; (8101434 <MX_I2C1_Init+0x74>)
 81013ea:	2200      	movs	r2, #0
 81013ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013ee:	4b11      	ldr	r3, [pc, #68]	; (8101434 <MX_I2C1_Init+0x74>)
 81013f0:	2200      	movs	r2, #0
 81013f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013f4:	4b0f      	ldr	r3, [pc, #60]	; (8101434 <MX_I2C1_Init+0x74>)
 81013f6:	2200      	movs	r2, #0
 81013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81013fa:	480e      	ldr	r0, [pc, #56]	; (8101434 <MX_I2C1_Init+0x74>)
 81013fc:	f001 fa2e 	bl	810285c <HAL_I2C_Init>
 8101400:	4603      	mov	r3, r0
 8101402:	2b00      	cmp	r3, #0
 8101404:	d001      	beq.n	810140a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101406:	f000 fad5 	bl	81019b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810140a:	2100      	movs	r1, #0
 810140c:	4809      	ldr	r0, [pc, #36]	; (8101434 <MX_I2C1_Init+0x74>)
 810140e:	f002 f891 	bl	8103534 <HAL_I2CEx_ConfigAnalogFilter>
 8101412:	4603      	mov	r3, r0
 8101414:	2b00      	cmp	r3, #0
 8101416:	d001      	beq.n	810141c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101418:	f000 facc 	bl	81019b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810141c:	2100      	movs	r1, #0
 810141e:	4805      	ldr	r0, [pc, #20]	; (8101434 <MX_I2C1_Init+0x74>)
 8101420:	f002 f8d3 	bl	81035ca <HAL_I2CEx_ConfigDigitalFilter>
 8101424:	4603      	mov	r3, r0
 8101426:	2b00      	cmp	r3, #0
 8101428:	d001      	beq.n	810142e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810142a:	f000 fac3 	bl	81019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810142e:	bf00      	nop
 8101430:	bd80      	pop	{r7, pc}
 8101432:	bf00      	nop
 8101434:	10000200 	.word	0x10000200
 8101438:	40005400 	.word	0x40005400
 810143c:	307075b1 	.word	0x307075b1

08101440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101440:	b580      	push	{r7, lr}
 8101442:	b09a      	sub	sp, #104	; 0x68
 8101444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810144a:	2200      	movs	r2, #0
 810144c:	601a      	str	r2, [r3, #0]
 810144e:	605a      	str	r2, [r3, #4]
 8101450:	609a      	str	r2, [r3, #8]
 8101452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101454:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101458:	2200      	movs	r2, #0
 810145a:	601a      	str	r2, [r3, #0]
 810145c:	605a      	str	r2, [r3, #4]
 810145e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101464:	2200      	movs	r2, #0
 8101466:	601a      	str	r2, [r3, #0]
 8101468:	605a      	str	r2, [r3, #4]
 810146a:	609a      	str	r2, [r3, #8]
 810146c:	60da      	str	r2, [r3, #12]
 810146e:	611a      	str	r2, [r3, #16]
 8101470:	615a      	str	r2, [r3, #20]
 8101472:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101474:	1d3b      	adds	r3, r7, #4
 8101476:	222c      	movs	r2, #44	; 0x2c
 8101478:	2100      	movs	r1, #0
 810147a:	4618      	mov	r0, r3
 810147c:	f006 f9a0 	bl	81077c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101480:	4b4f      	ldr	r3, [pc, #316]	; (81015c0 <MX_TIM1_Init+0x180>)
 8101482:	4a50      	ldr	r2, [pc, #320]	; (81015c4 <MX_TIM1_Init+0x184>)
 8101484:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8101486:	4b4e      	ldr	r3, [pc, #312]	; (81015c0 <MX_TIM1_Init+0x180>)
 8101488:	22ef      	movs	r2, #239	; 0xef
 810148a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810148c:	4b4c      	ldr	r3, [pc, #304]	; (81015c0 <MX_TIM1_Init+0x180>)
 810148e:	2200      	movs	r2, #0
 8101490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8101492:	4b4b      	ldr	r3, [pc, #300]	; (81015c0 <MX_TIM1_Init+0x180>)
 8101494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101498:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810149a:	4b49      	ldr	r3, [pc, #292]	; (81015c0 <MX_TIM1_Init+0x180>)
 810149c:	2200      	movs	r2, #0
 810149e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81014a0:	4b47      	ldr	r3, [pc, #284]	; (81015c0 <MX_TIM1_Init+0x180>)
 81014a2:	2200      	movs	r2, #0
 81014a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81014a6:	4b46      	ldr	r3, [pc, #280]	; (81015c0 <MX_TIM1_Init+0x180>)
 81014a8:	2200      	movs	r2, #0
 81014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81014ac:	4844      	ldr	r0, [pc, #272]	; (81015c0 <MX_TIM1_Init+0x180>)
 81014ae:	f003 fea1 	bl	81051f4 <HAL_TIM_Base_Init>
 81014b2:	4603      	mov	r3, r0
 81014b4:	2b00      	cmp	r3, #0
 81014b6:	d001      	beq.n	81014bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 81014b8:	f000 fa7c 	bl	81019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81014c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 81014c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81014c6:	4619      	mov	r1, r3
 81014c8:	483d      	ldr	r0, [pc, #244]	; (81015c0 <MX_TIM1_Init+0x180>)
 81014ca:	f004 fa13 	bl	81058f4 <HAL_TIM_ConfigClockSource>
 81014ce:	4603      	mov	r3, r0
 81014d0:	2b00      	cmp	r3, #0
 81014d2:	d001      	beq.n	81014d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 81014d4:	f000 fa6e 	bl	81019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81014d8:	4839      	ldr	r0, [pc, #228]	; (81015c0 <MX_TIM1_Init+0x180>)
 81014da:	f003 fee2 	bl	81052a2 <HAL_TIM_PWM_Init>
 81014de:	4603      	mov	r3, r0
 81014e0:	2b00      	cmp	r3, #0
 81014e2:	d001      	beq.n	81014e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 81014e4:	f000 fa66 	bl	81019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81014e8:	2300      	movs	r3, #0
 81014ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81014ec:	2300      	movs	r3, #0
 81014ee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81014f0:	2300      	movs	r3, #0
 81014f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81014f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81014f8:	4619      	mov	r1, r3
 81014fa:	4831      	ldr	r0, [pc, #196]	; (81015c0 <MX_TIM1_Init+0x180>)
 81014fc:	f004 ff24 	bl	8106348 <HAL_TIMEx_MasterConfigSynchronization>
 8101500:	4603      	mov	r3, r0
 8101502:	2b00      	cmp	r3, #0
 8101504:	d001      	beq.n	810150a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101506:	f000 fa55 	bl	81019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810150a:	2360      	movs	r3, #96	; 0x60
 810150c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 810150e:	2300      	movs	r3, #0
 8101510:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101512:	2300      	movs	r3, #0
 8101514:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101516:	2300      	movs	r3, #0
 8101518:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810151a:	2300      	movs	r3, #0
 810151c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810151e:	2300      	movs	r3, #0
 8101520:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101522:	2300      	movs	r3, #0
 8101524:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810152a:	2200      	movs	r2, #0
 810152c:	4619      	mov	r1, r3
 810152e:	4824      	ldr	r0, [pc, #144]	; (81015c0 <MX_TIM1_Init+0x180>)
 8101530:	f004 f8cc 	bl	81056cc <HAL_TIM_PWM_ConfigChannel>
 8101534:	4603      	mov	r3, r0
 8101536:	2b00      	cmp	r3, #0
 8101538:	d001      	beq.n	810153e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810153a:	f000 fa3b 	bl	81019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810153e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101542:	2204      	movs	r2, #4
 8101544:	4619      	mov	r1, r3
 8101546:	481e      	ldr	r0, [pc, #120]	; (81015c0 <MX_TIM1_Init+0x180>)
 8101548:	f004 f8c0 	bl	81056cc <HAL_TIM_PWM_ConfigChannel>
 810154c:	4603      	mov	r3, r0
 810154e:	2b00      	cmp	r3, #0
 8101550:	d001      	beq.n	8101556 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101552:	f000 fa2f 	bl	81019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810155a:	2208      	movs	r2, #8
 810155c:	4619      	mov	r1, r3
 810155e:	4818      	ldr	r0, [pc, #96]	; (81015c0 <MX_TIM1_Init+0x180>)
 8101560:	f004 f8b4 	bl	81056cc <HAL_TIM_PWM_ConfigChannel>
 8101564:	4603      	mov	r3, r0
 8101566:	2b00      	cmp	r3, #0
 8101568:	d001      	beq.n	810156e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 810156a:	f000 fa23 	bl	81019b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810156e:	2300      	movs	r3, #0
 8101570:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101572:	2300      	movs	r3, #0
 8101574:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101576:	2300      	movs	r3, #0
 8101578:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810157a:	2300      	movs	r3, #0
 810157c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810157e:	2300      	movs	r3, #0
 8101580:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101586:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101588:	2300      	movs	r3, #0
 810158a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810158c:	2300      	movs	r3, #0
 810158e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101594:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101596:	2300      	movs	r3, #0
 8101598:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810159a:	2300      	movs	r3, #0
 810159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810159e:	1d3b      	adds	r3, r7, #4
 81015a0:	4619      	mov	r1, r3
 81015a2:	4807      	ldr	r0, [pc, #28]	; (81015c0 <MX_TIM1_Init+0x180>)
 81015a4:	f004 ff5e 	bl	8106464 <HAL_TIMEx_ConfigBreakDeadTime>
 81015a8:	4603      	mov	r3, r0
 81015aa:	2b00      	cmp	r3, #0
 81015ac:	d001      	beq.n	81015b2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 81015ae:	f000 fa01 	bl	81019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81015b2:	4803      	ldr	r0, [pc, #12]	; (81015c0 <MX_TIM1_Init+0x180>)
 81015b4:	f000 fb9e 	bl	8101cf4 <HAL_TIM_MspPostInit>

}
 81015b8:	bf00      	nop
 81015ba:	3768      	adds	r7, #104	; 0x68
 81015bc:	46bd      	mov	sp, r7
 81015be:	bd80      	pop	{r7, pc}
 81015c0:	1000024c 	.word	0x1000024c
 81015c4:	40010000 	.word	0x40010000

081015c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81015c8:	b580      	push	{r7, lr}
 81015ca:	b08c      	sub	sp, #48	; 0x30
 81015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81015ce:	f107 030c 	add.w	r3, r7, #12
 81015d2:	2224      	movs	r2, #36	; 0x24
 81015d4:	2100      	movs	r1, #0
 81015d6:	4618      	mov	r0, r3
 81015d8:	f006 f8f2 	bl	81077c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81015dc:	463b      	mov	r3, r7
 81015de:	2200      	movs	r2, #0
 81015e0:	601a      	str	r2, [r3, #0]
 81015e2:	605a      	str	r2, [r3, #4]
 81015e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81015e6:	4b21      	ldr	r3, [pc, #132]	; (810166c <MX_TIM2_Init+0xa4>)
 81015e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81015ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 81015ee:	4b1f      	ldr	r3, [pc, #124]	; (810166c <MX_TIM2_Init+0xa4>)
 81015f0:	2200      	movs	r2, #0
 81015f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81015f4:	4b1d      	ldr	r3, [pc, #116]	; (810166c <MX_TIM2_Init+0xa4>)
 81015f6:	2200      	movs	r2, #0
 81015f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2652 - 1;
 81015fa:	4b1c      	ldr	r3, [pc, #112]	; (810166c <MX_TIM2_Init+0xa4>)
 81015fc:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101602:	4b1a      	ldr	r3, [pc, #104]	; (810166c <MX_TIM2_Init+0xa4>)
 8101604:	2200      	movs	r2, #0
 8101606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101608:	4b18      	ldr	r3, [pc, #96]	; (810166c <MX_TIM2_Init+0xa4>)
 810160a:	2200      	movs	r2, #0
 810160c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 810160e:	2303      	movs	r3, #3
 8101610:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101612:	2300      	movs	r3, #0
 8101614:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101616:	2301      	movs	r3, #1
 8101618:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810161a:	2300      	movs	r3, #0
 810161c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 810161e:	230a      	movs	r3, #10
 8101620:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101622:	2300      	movs	r3, #0
 8101624:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101626:	2301      	movs	r3, #1
 8101628:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810162a:	2300      	movs	r3, #0
 810162c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810162e:	2300      	movs	r3, #0
 8101630:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8101632:	f107 030c 	add.w	r3, r7, #12
 8101636:	4619      	mov	r1, r3
 8101638:	480c      	ldr	r0, [pc, #48]	; (810166c <MX_TIM2_Init+0xa4>)
 810163a:	f003 ffa1 	bl	8105580 <HAL_TIM_Encoder_Init>
 810163e:	4603      	mov	r3, r0
 8101640:	2b00      	cmp	r3, #0
 8101642:	d001      	beq.n	8101648 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8101644:	f000 f9b6 	bl	81019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101648:	2300      	movs	r3, #0
 810164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810164c:	2300      	movs	r3, #0
 810164e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101650:	463b      	mov	r3, r7
 8101652:	4619      	mov	r1, r3
 8101654:	4805      	ldr	r0, [pc, #20]	; (810166c <MX_TIM2_Init+0xa4>)
 8101656:	f004 fe77 	bl	8106348 <HAL_TIMEx_MasterConfigSynchronization>
 810165a:	4603      	mov	r3, r0
 810165c:	2b00      	cmp	r3, #0
 810165e:	d001      	beq.n	8101664 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8101660:	f000 f9a8 	bl	81019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8101664:	bf00      	nop
 8101666:	3730      	adds	r7, #48	; 0x30
 8101668:	46bd      	mov	sp, r7
 810166a:	bd80      	pop	{r7, pc}
 810166c:	10000298 	.word	0x10000298

08101670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8101670:	b580      	push	{r7, lr}
 8101672:	b08c      	sub	sp, #48	; 0x30
 8101674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101676:	f107 030c 	add.w	r3, r7, #12
 810167a:	2224      	movs	r2, #36	; 0x24
 810167c:	2100      	movs	r1, #0
 810167e:	4618      	mov	r0, r3
 8101680:	f006 f89e 	bl	81077c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101684:	463b      	mov	r3, r7
 8101686:	2200      	movs	r2, #0
 8101688:	601a      	str	r2, [r3, #0]
 810168a:	605a      	str	r2, [r3, #4]
 810168c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810168e:	4b21      	ldr	r3, [pc, #132]	; (8101714 <MX_TIM3_Init+0xa4>)
 8101690:	4a21      	ldr	r2, [pc, #132]	; (8101718 <MX_TIM3_Init+0xa8>)
 8101692:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8101694:	4b1f      	ldr	r3, [pc, #124]	; (8101714 <MX_TIM3_Init+0xa4>)
 8101696:	2200      	movs	r2, #0
 8101698:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810169a:	4b1e      	ldr	r3, [pc, #120]	; (8101714 <MX_TIM3_Init+0xa4>)
 810169c:	2200      	movs	r2, #0
 810169e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2652 - 1;
 81016a0:	4b1c      	ldr	r3, [pc, #112]	; (8101714 <MX_TIM3_Init+0xa4>)
 81016a2:	f640 225b 	movw	r2, #2651	; 0xa5b
 81016a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81016a8:	4b1a      	ldr	r3, [pc, #104]	; (8101714 <MX_TIM3_Init+0xa4>)
 81016aa:	2200      	movs	r2, #0
 81016ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81016ae:	4b19      	ldr	r3, [pc, #100]	; (8101714 <MX_TIM3_Init+0xa4>)
 81016b0:	2200      	movs	r2, #0
 81016b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81016b4:	2303      	movs	r3, #3
 81016b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81016b8:	2300      	movs	r3, #0
 81016ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81016bc:	2301      	movs	r3, #1
 81016be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81016c0:	2300      	movs	r3, #0
 81016c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 81016c4:	230a      	movs	r3, #10
 81016c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81016c8:	2300      	movs	r3, #0
 81016ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81016cc:	2301      	movs	r3, #1
 81016ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81016d0:	2300      	movs	r3, #0
 81016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 81016d4:	2300      	movs	r3, #0
 81016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 81016d8:	f107 030c 	add.w	r3, r7, #12
 81016dc:	4619      	mov	r1, r3
 81016de:	480d      	ldr	r0, [pc, #52]	; (8101714 <MX_TIM3_Init+0xa4>)
 81016e0:	f003 ff4e 	bl	8105580 <HAL_TIM_Encoder_Init>
 81016e4:	4603      	mov	r3, r0
 81016e6:	2b00      	cmp	r3, #0
 81016e8:	d001      	beq.n	81016ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 81016ea:	f000 f963 	bl	81019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81016ee:	2300      	movs	r3, #0
 81016f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81016f2:	2300      	movs	r3, #0
 81016f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81016f6:	463b      	mov	r3, r7
 81016f8:	4619      	mov	r1, r3
 81016fa:	4806      	ldr	r0, [pc, #24]	; (8101714 <MX_TIM3_Init+0xa4>)
 81016fc:	f004 fe24 	bl	8106348 <HAL_TIMEx_MasterConfigSynchronization>
 8101700:	4603      	mov	r3, r0
 8101702:	2b00      	cmp	r3, #0
 8101704:	d001      	beq.n	810170a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8101706:	f000 f955 	bl	81019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 810170a:	bf00      	nop
 810170c:	3730      	adds	r7, #48	; 0x30
 810170e:	46bd      	mov	sp, r7
 8101710:	bd80      	pop	{r7, pc}
 8101712:	bf00      	nop
 8101714:	100002e4 	.word	0x100002e4
 8101718:	40000400 	.word	0x40000400

0810171c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 810171c:	b580      	push	{r7, lr}
 810171e:	b08c      	sub	sp, #48	; 0x30
 8101720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101722:	f107 030c 	add.w	r3, r7, #12
 8101726:	2224      	movs	r2, #36	; 0x24
 8101728:	2100      	movs	r1, #0
 810172a:	4618      	mov	r0, r3
 810172c:	f006 f848 	bl	81077c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101730:	463b      	mov	r3, r7
 8101732:	2200      	movs	r2, #0
 8101734:	601a      	str	r2, [r3, #0]
 8101736:	605a      	str	r2, [r3, #4]
 8101738:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810173a:	4b21      	ldr	r3, [pc, #132]	; (81017c0 <MX_TIM4_Init+0xa4>)
 810173c:	4a21      	ldr	r2, [pc, #132]	; (81017c4 <MX_TIM4_Init+0xa8>)
 810173e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8101740:	4b1f      	ldr	r3, [pc, #124]	; (81017c0 <MX_TIM4_Init+0xa4>)
 8101742:	2200      	movs	r2, #0
 8101744:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101746:	4b1e      	ldr	r3, [pc, #120]	; (81017c0 <MX_TIM4_Init+0xa4>)
 8101748:	2200      	movs	r2, #0
 810174a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2652 - 1;
 810174c:	4b1c      	ldr	r3, [pc, #112]	; (81017c0 <MX_TIM4_Init+0xa4>)
 810174e:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101754:	4b1a      	ldr	r3, [pc, #104]	; (81017c0 <MX_TIM4_Init+0xa4>)
 8101756:	2200      	movs	r2, #0
 8101758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810175a:	4b19      	ldr	r3, [pc, #100]	; (81017c0 <MX_TIM4_Init+0xa4>)
 810175c:	2200      	movs	r2, #0
 810175e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101760:	2303      	movs	r3, #3
 8101762:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101764:	2300      	movs	r3, #0
 8101766:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101768:	2301      	movs	r3, #1
 810176a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810176c:	2300      	movs	r3, #0
 810176e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101770:	230a      	movs	r3, #10
 8101772:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101774:	2300      	movs	r3, #0
 8101776:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101778:	2301      	movs	r3, #1
 810177a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810177c:	2300      	movs	r3, #0
 810177e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101780:	2300      	movs	r3, #0
 8101782:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8101784:	f107 030c 	add.w	r3, r7, #12
 8101788:	4619      	mov	r1, r3
 810178a:	480d      	ldr	r0, [pc, #52]	; (81017c0 <MX_TIM4_Init+0xa4>)
 810178c:	f003 fef8 	bl	8105580 <HAL_TIM_Encoder_Init>
 8101790:	4603      	mov	r3, r0
 8101792:	2b00      	cmp	r3, #0
 8101794:	d001      	beq.n	810179a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8101796:	f000 f90d 	bl	81019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810179a:	2300      	movs	r3, #0
 810179c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810179e:	2300      	movs	r3, #0
 81017a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81017a2:	463b      	mov	r3, r7
 81017a4:	4619      	mov	r1, r3
 81017a6:	4806      	ldr	r0, [pc, #24]	; (81017c0 <MX_TIM4_Init+0xa4>)
 81017a8:	f004 fdce 	bl	8106348 <HAL_TIMEx_MasterConfigSynchronization>
 81017ac:	4603      	mov	r3, r0
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	d001      	beq.n	81017b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 81017b2:	f000 f8ff 	bl	81019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 81017b6:	bf00      	nop
 81017b8:	3730      	adds	r7, #48	; 0x30
 81017ba:	46bd      	mov	sp, r7
 81017bc:	bd80      	pop	{r7, pc}
 81017be:	bf00      	nop
 81017c0:	10000330 	.word	0x10000330
 81017c4:	40000800 	.word	0x40000800

081017c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 81017c8:	b580      	push	{r7, lr}
 81017ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 81017cc:	4b22      	ldr	r3, [pc, #136]	; (8101858 <MX_UART4_Init+0x90>)
 81017ce:	4a23      	ldr	r2, [pc, #140]	; (810185c <MX_UART4_Init+0x94>)
 81017d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 81017d2:	4b21      	ldr	r3, [pc, #132]	; (8101858 <MX_UART4_Init+0x90>)
 81017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81017d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 81017da:	4b1f      	ldr	r3, [pc, #124]	; (8101858 <MX_UART4_Init+0x90>)
 81017dc:	2200      	movs	r2, #0
 81017de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 81017e0:	4b1d      	ldr	r3, [pc, #116]	; (8101858 <MX_UART4_Init+0x90>)
 81017e2:	2200      	movs	r2, #0
 81017e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 81017e6:	4b1c      	ldr	r3, [pc, #112]	; (8101858 <MX_UART4_Init+0x90>)
 81017e8:	2200      	movs	r2, #0
 81017ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 81017ec:	4b1a      	ldr	r3, [pc, #104]	; (8101858 <MX_UART4_Init+0x90>)
 81017ee:	220c      	movs	r2, #12
 81017f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81017f2:	4b19      	ldr	r3, [pc, #100]	; (8101858 <MX_UART4_Init+0x90>)
 81017f4:	2200      	movs	r2, #0
 81017f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 81017f8:	4b17      	ldr	r3, [pc, #92]	; (8101858 <MX_UART4_Init+0x90>)
 81017fa:	2200      	movs	r2, #0
 81017fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81017fe:	4b16      	ldr	r3, [pc, #88]	; (8101858 <MX_UART4_Init+0x90>)
 8101800:	2200      	movs	r2, #0
 8101802:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101804:	4b14      	ldr	r3, [pc, #80]	; (8101858 <MX_UART4_Init+0x90>)
 8101806:	2200      	movs	r2, #0
 8101808:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810180a:	4b13      	ldr	r3, [pc, #76]	; (8101858 <MX_UART4_Init+0x90>)
 810180c:	2200      	movs	r2, #0
 810180e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8101810:	4811      	ldr	r0, [pc, #68]	; (8101858 <MX_UART4_Init+0x90>)
 8101812:	f004 fea5 	bl	8106560 <HAL_UART_Init>
 8101816:	4603      	mov	r3, r0
 8101818:	2b00      	cmp	r3, #0
 810181a:	d001      	beq.n	8101820 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 810181c:	f000 f8ca 	bl	81019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101820:	2100      	movs	r1, #0
 8101822:	480d      	ldr	r0, [pc, #52]	; (8101858 <MX_UART4_Init+0x90>)
 8101824:	f005 fed8 	bl	81075d8 <HAL_UARTEx_SetTxFifoThreshold>
 8101828:	4603      	mov	r3, r0
 810182a:	2b00      	cmp	r3, #0
 810182c:	d001      	beq.n	8101832 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 810182e:	f000 f8c1 	bl	81019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101832:	2100      	movs	r1, #0
 8101834:	4808      	ldr	r0, [pc, #32]	; (8101858 <MX_UART4_Init+0x90>)
 8101836:	f005 ff0d 	bl	8107654 <HAL_UARTEx_SetRxFifoThreshold>
 810183a:	4603      	mov	r3, r0
 810183c:	2b00      	cmp	r3, #0
 810183e:	d001      	beq.n	8101844 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8101840:	f000 f8b8 	bl	81019b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8101844:	4804      	ldr	r0, [pc, #16]	; (8101858 <MX_UART4_Init+0x90>)
 8101846:	f005 fe8e 	bl	8107566 <HAL_UARTEx_DisableFifoMode>
 810184a:	4603      	mov	r3, r0
 810184c:	2b00      	cmp	r3, #0
 810184e:	d001      	beq.n	8101854 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8101850:	f000 f8b0 	bl	81019b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8101854:	bf00      	nop
 8101856:	bd80      	pop	{r7, pc}
 8101858:	1000037c 	.word	0x1000037c
 810185c:	40004c00 	.word	0x40004c00

08101860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101860:	b580      	push	{r7, lr}
 8101862:	b08a      	sub	sp, #40	; 0x28
 8101864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101866:	f107 0314 	add.w	r3, r7, #20
 810186a:	2200      	movs	r2, #0
 810186c:	601a      	str	r2, [r3, #0]
 810186e:	605a      	str	r2, [r3, #4]
 8101870:	609a      	str	r2, [r3, #8]
 8101872:	60da      	str	r2, [r3, #12]
 8101874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101876:	4b42      	ldr	r3, [pc, #264]	; (8101980 <MX_GPIO_Init+0x120>)
 8101878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810187c:	4a40      	ldr	r2, [pc, #256]	; (8101980 <MX_GPIO_Init+0x120>)
 810187e:	f043 0301 	orr.w	r3, r3, #1
 8101882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101886:	4b3e      	ldr	r3, [pc, #248]	; (8101980 <MX_GPIO_Init+0x120>)
 8101888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810188c:	f003 0301 	and.w	r3, r3, #1
 8101890:	613b      	str	r3, [r7, #16]
 8101892:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101894:	4b3a      	ldr	r3, [pc, #232]	; (8101980 <MX_GPIO_Init+0x120>)
 8101896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810189a:	4a39      	ldr	r2, [pc, #228]	; (8101980 <MX_GPIO_Init+0x120>)
 810189c:	f043 0310 	orr.w	r3, r3, #16
 81018a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018a4:	4b36      	ldr	r3, [pc, #216]	; (8101980 <MX_GPIO_Init+0x120>)
 81018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018aa:	f003 0310 	and.w	r3, r3, #16
 81018ae:	60fb      	str	r3, [r7, #12]
 81018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81018b2:	4b33      	ldr	r3, [pc, #204]	; (8101980 <MX_GPIO_Init+0x120>)
 81018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018b8:	4a31      	ldr	r2, [pc, #196]	; (8101980 <MX_GPIO_Init+0x120>)
 81018ba:	f043 0308 	orr.w	r3, r3, #8
 81018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018c2:	4b2f      	ldr	r3, [pc, #188]	; (8101980 <MX_GPIO_Init+0x120>)
 81018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018c8:	f003 0308 	and.w	r3, r3, #8
 81018cc:	60bb      	str	r3, [r7, #8]
 81018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81018d0:	4b2b      	ldr	r3, [pc, #172]	; (8101980 <MX_GPIO_Init+0x120>)
 81018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018d6:	4a2a      	ldr	r2, [pc, #168]	; (8101980 <MX_GPIO_Init+0x120>)
 81018d8:	f043 0304 	orr.w	r3, r3, #4
 81018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018e0:	4b27      	ldr	r3, [pc, #156]	; (8101980 <MX_GPIO_Init+0x120>)
 81018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018e6:	f003 0304 	and.w	r3, r3, #4
 81018ea:	607b      	str	r3, [r7, #4]
 81018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81018ee:	4b24      	ldr	r3, [pc, #144]	; (8101980 <MX_GPIO_Init+0x120>)
 81018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018f4:	4a22      	ldr	r2, [pc, #136]	; (8101980 <MX_GPIO_Init+0x120>)
 81018f6:	f043 0302 	orr.w	r3, r3, #2
 81018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018fe:	4b20      	ldr	r3, [pc, #128]	; (8101980 <MX_GPIO_Init+0x120>)
 8101900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101904:	f003 0302 	and.w	r3, r3, #2
 8101908:	603b      	str	r3, [r7, #0]
 810190a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_2_Pin|DIR_3_Pin, GPIO_PIN_RESET);
 810190c:	2200      	movs	r2, #0
 810190e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8101912:	481c      	ldr	r0, [pc, #112]	; (8101984 <MX_GPIO_Init+0x124>)
 8101914:	f000 ff76 	bl	8102804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8101918:	2200      	movs	r2, #0
 810191a:	2180      	movs	r1, #128	; 0x80
 810191c:	481a      	ldr	r0, [pc, #104]	; (8101988 <MX_GPIO_Init+0x128>)
 810191e:	f000 ff71 	bl	8102804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8101922:	2308      	movs	r3, #8
 8101924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 810192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810192c:	2300      	movs	r3, #0
 810192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8101930:	f107 0314 	add.w	r3, r7, #20
 8101934:	4619      	mov	r1, r3
 8101936:	4815      	ldr	r0, [pc, #84]	; (810198c <MX_GPIO_Init+0x12c>)
 8101938:	f000 fdb4 	bl	81024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|DIR_3_Pin;
 810193c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8101940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101942:	2301      	movs	r3, #1
 8101944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101946:	2300      	movs	r3, #0
 8101948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810194a:	2300      	movs	r3, #0
 810194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810194e:	f107 0314 	add.w	r3, r7, #20
 8101952:	4619      	mov	r1, r3
 8101954:	480b      	ldr	r0, [pc, #44]	; (8101984 <MX_GPIO_Init+0x124>)
 8101956:	f000 fda5 	bl	81024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 810195a:	2380      	movs	r3, #128	; 0x80
 810195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810195e:	2301      	movs	r3, #1
 8101960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101962:	2300      	movs	r3, #0
 8101964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101966:	2300      	movs	r3, #0
 8101968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 810196a:	f107 0314 	add.w	r3, r7, #20
 810196e:	4619      	mov	r1, r3
 8101970:	4805      	ldr	r0, [pc, #20]	; (8101988 <MX_GPIO_Init+0x128>)
 8101972:	f000 fd97 	bl	81024a4 <HAL_GPIO_Init>

}
 8101976:	bf00      	nop
 8101978:	3728      	adds	r7, #40	; 0x28
 810197a:	46bd      	mov	sp, r7
 810197c:	bd80      	pop	{r7, pc}
 810197e:	bf00      	nop
 8101980:	58024400 	.word	0x58024400
 8101984:	58021000 	.word	0x58021000
 8101988:	58020400 	.word	0x58020400
 810198c:	58020000 	.word	0x58020000

08101990 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8101990:	b580      	push	{r7, lr}
 8101992:	b082      	sub	sp, #8
 8101994:	af00      	add	r7, sp, #0
 8101996:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101998:	1d39      	adds	r1, r7, #4
 810199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810199e:	2201      	movs	r2, #1
 81019a0:	4803      	ldr	r0, [pc, #12]	; (81019b0 <__io_putchar+0x20>)
 81019a2:	f004 fe2d 	bl	8106600 <HAL_UART_Transmit>
	return ch;
 81019a6:	687b      	ldr	r3, [r7, #4]
}
 81019a8:	4618      	mov	r0, r3
 81019aa:	3708      	adds	r7, #8
 81019ac:	46bd      	mov	sp, r7
 81019ae:	bd80      	pop	{r7, pc}
 81019b0:	1000040c 	.word	0x1000040c

081019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81019b4:	b480      	push	{r7}
 81019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81019b8:	b672      	cpsid	i
}
 81019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81019bc:	e7fe      	b.n	81019bc <Error_Handler+0x8>
	...

081019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81019c0:	b480      	push	{r7}
 81019c2:	b083      	sub	sp, #12
 81019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81019c6:	4b0a      	ldr	r3, [pc, #40]	; (81019f0 <HAL_MspInit+0x30>)
 81019c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019cc:	4a08      	ldr	r2, [pc, #32]	; (81019f0 <HAL_MspInit+0x30>)
 81019ce:	f043 0302 	orr.w	r3, r3, #2
 81019d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81019d6:	4b06      	ldr	r3, [pc, #24]	; (81019f0 <HAL_MspInit+0x30>)
 81019d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019dc:	f003 0302 	and.w	r3, r3, #2
 81019e0:	607b      	str	r3, [r7, #4]
 81019e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81019e4:	bf00      	nop
 81019e6:	370c      	adds	r7, #12
 81019e8:	46bd      	mov	sp, r7
 81019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ee:	4770      	bx	lr
 81019f0:	58024400 	.word	0x58024400

081019f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81019f4:	b580      	push	{r7, lr}
 81019f6:	b0b8      	sub	sp, #224	; 0xe0
 81019f8:	af00      	add	r7, sp, #0
 81019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a00:	2200      	movs	r2, #0
 8101a02:	601a      	str	r2, [r3, #0]
 8101a04:	605a      	str	r2, [r3, #4]
 8101a06:	609a      	str	r2, [r3, #8]
 8101a08:	60da      	str	r2, [r3, #12]
 8101a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a0c:	f107 0310 	add.w	r3, r7, #16
 8101a10:	22bc      	movs	r2, #188	; 0xbc
 8101a12:	2100      	movs	r1, #0
 8101a14:	4618      	mov	r0, r3
 8101a16:	f005 fed3 	bl	81077c0 <memset>
  if(hi2c->Instance==I2C1)
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	681b      	ldr	r3, [r3, #0]
 8101a1e:	4a25      	ldr	r2, [pc, #148]	; (8101ab4 <HAL_I2C_MspInit+0xc0>)
 8101a20:	4293      	cmp	r3, r2
 8101a22:	d142      	bne.n	8101aaa <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101a24:	2308      	movs	r3, #8
 8101a26:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101a28:	2300      	movs	r3, #0
 8101a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a2e:	f107 0310 	add.w	r3, r7, #16
 8101a32:	4618      	mov	r0, r3
 8101a34:	f002 f876 	bl	8103b24 <HAL_RCCEx_PeriphCLKConfig>
 8101a38:	4603      	mov	r3, r0
 8101a3a:	2b00      	cmp	r3, #0
 8101a3c:	d001      	beq.n	8101a42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101a3e:	f7ff ffb9 	bl	81019b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101a42:	4b1d      	ldr	r3, [pc, #116]	; (8101ab8 <HAL_I2C_MspInit+0xc4>)
 8101a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a48:	4a1b      	ldr	r2, [pc, #108]	; (8101ab8 <HAL_I2C_MspInit+0xc4>)
 8101a4a:	f043 0302 	orr.w	r3, r3, #2
 8101a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a52:	4b19      	ldr	r3, [pc, #100]	; (8101ab8 <HAL_I2C_MspInit+0xc4>)
 8101a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a58:	f003 0302 	and.w	r3, r3, #2
 8101a5c:	60fb      	str	r3, [r7, #12]
 8101a5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8101a60:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101a68:	2312      	movs	r3, #18
 8101a6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a6e:	2300      	movs	r3, #0
 8101a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a74:	2300      	movs	r3, #0
 8101a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101a7a:	2304      	movs	r3, #4
 8101a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a84:	4619      	mov	r1, r3
 8101a86:	480d      	ldr	r0, [pc, #52]	; (8101abc <HAL_I2C_MspInit+0xc8>)
 8101a88:	f000 fd0c 	bl	81024a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101a8c:	4b0a      	ldr	r3, [pc, #40]	; (8101ab8 <HAL_I2C_MspInit+0xc4>)
 8101a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a92:	4a09      	ldr	r2, [pc, #36]	; (8101ab8 <HAL_I2C_MspInit+0xc4>)
 8101a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101a98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101a9c:	4b06      	ldr	r3, [pc, #24]	; (8101ab8 <HAL_I2C_MspInit+0xc4>)
 8101a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101aa6:	60bb      	str	r3, [r7, #8]
 8101aa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101aaa:	bf00      	nop
 8101aac:	37e0      	adds	r7, #224	; 0xe0
 8101aae:	46bd      	mov	sp, r7
 8101ab0:	bd80      	pop	{r7, pc}
 8101ab2:	bf00      	nop
 8101ab4:	40005400 	.word	0x40005400
 8101ab8:	58024400 	.word	0x58024400
 8101abc:	58020400 	.word	0x58020400

08101ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101ac0:	b480      	push	{r7}
 8101ac2:	b085      	sub	sp, #20
 8101ac4:	af00      	add	r7, sp, #0
 8101ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	681b      	ldr	r3, [r3, #0]
 8101acc:	4a0b      	ldr	r2, [pc, #44]	; (8101afc <HAL_TIM_Base_MspInit+0x3c>)
 8101ace:	4293      	cmp	r3, r2
 8101ad0:	d10e      	bne.n	8101af0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101ad2:	4b0b      	ldr	r3, [pc, #44]	; (8101b00 <HAL_TIM_Base_MspInit+0x40>)
 8101ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ad8:	4a09      	ldr	r2, [pc, #36]	; (8101b00 <HAL_TIM_Base_MspInit+0x40>)
 8101ada:	f043 0301 	orr.w	r3, r3, #1
 8101ade:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ae2:	4b07      	ldr	r3, [pc, #28]	; (8101b00 <HAL_TIM_Base_MspInit+0x40>)
 8101ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ae8:	f003 0301 	and.w	r3, r3, #1
 8101aec:	60fb      	str	r3, [r7, #12]
 8101aee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101af0:	bf00      	nop
 8101af2:	3714      	adds	r7, #20
 8101af4:	46bd      	mov	sp, r7
 8101af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101afa:	4770      	bx	lr
 8101afc:	40010000 	.word	0x40010000
 8101b00:	58024400 	.word	0x58024400

08101b04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8101b04:	b580      	push	{r7, lr}
 8101b06:	b090      	sub	sp, #64	; 0x40
 8101b08:	af00      	add	r7, sp, #0
 8101b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b10:	2200      	movs	r2, #0
 8101b12:	601a      	str	r2, [r3, #0]
 8101b14:	605a      	str	r2, [r3, #4]
 8101b16:	609a      	str	r2, [r3, #8]
 8101b18:	60da      	str	r2, [r3, #12]
 8101b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b24:	d14d      	bne.n	8101bc2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101b26:	4b6c      	ldr	r3, [pc, #432]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b2c:	4a6a      	ldr	r2, [pc, #424]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b2e:	f043 0301 	orr.w	r3, r3, #1
 8101b32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b36:	4b68      	ldr	r3, [pc, #416]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b3c:	f003 0301 	and.w	r3, r3, #1
 8101b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8101b42:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b44:	4b64      	ldr	r3, [pc, #400]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b4a:	4a63      	ldr	r2, [pc, #396]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b4c:	f043 0301 	orr.w	r3, r3, #1
 8101b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b54:	4b60      	ldr	r3, [pc, #384]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b5a:	f003 0301 	and.w	r3, r3, #1
 8101b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8101b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b62:	4b5d      	ldr	r3, [pc, #372]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b68:	4a5b      	ldr	r2, [pc, #364]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b6a:	f043 0302 	orr.w	r3, r3, #2
 8101b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b72:	4b59      	ldr	r3, [pc, #356]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b78:	f003 0302 	and.w	r3, r3, #2
 8101b7c:	623b      	str	r3, [r7, #32]
 8101b7e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101b80:	2301      	movs	r3, #1
 8101b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b84:	2302      	movs	r3, #2
 8101b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b88:	2300      	movs	r3, #0
 8101b8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b8c:	2300      	movs	r3, #0
 8101b8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101b90:	2301      	movs	r3, #1
 8101b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b98:	4619      	mov	r1, r3
 8101b9a:	4850      	ldr	r0, [pc, #320]	; (8101cdc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8101b9c:	f000 fc82 	bl	81024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101ba0:	2308      	movs	r3, #8
 8101ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ba4:	2302      	movs	r3, #2
 8101ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ba8:	2300      	movs	r3, #0
 8101baa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bac:	2300      	movs	r3, #0
 8101bae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101bb0:	2301      	movs	r3, #1
 8101bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bb8:	4619      	mov	r1, r3
 8101bba:	4849      	ldr	r0, [pc, #292]	; (8101ce0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8101bbc:	f000 fc72 	bl	81024a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8101bc0:	e086      	b.n	8101cd0 <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM3)
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	4a47      	ldr	r2, [pc, #284]	; (8101ce4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8101bc8:	4293      	cmp	r3, r2
 8101bca:	d14d      	bne.n	8101c68 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101bcc:	4b42      	ldr	r3, [pc, #264]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bd2:	4a41      	ldr	r2, [pc, #260]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101bd4:	f043 0302 	orr.w	r3, r3, #2
 8101bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101bdc:	4b3e      	ldr	r3, [pc, #248]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101be2:	f003 0302 	and.w	r3, r3, #2
 8101be6:	61fb      	str	r3, [r7, #28]
 8101be8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bea:	4b3b      	ldr	r3, [pc, #236]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf0:	4a39      	ldr	r2, [pc, #228]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101bf2:	f043 0301 	orr.w	r3, r3, #1
 8101bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bfa:	4b37      	ldr	r3, [pc, #220]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c00:	f003 0301 	and.w	r3, r3, #1
 8101c04:	61bb      	str	r3, [r7, #24]
 8101c06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c08:	4b33      	ldr	r3, [pc, #204]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c0e:	4a32      	ldr	r2, [pc, #200]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c10:	f043 0304 	orr.w	r3, r3, #4
 8101c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c18:	4b2f      	ldr	r3, [pc, #188]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c1e:	f003 0304 	and.w	r3, r3, #4
 8101c22:	617b      	str	r3, [r7, #20]
 8101c24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101c26:	2340      	movs	r3, #64	; 0x40
 8101c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c2a:	2302      	movs	r3, #2
 8101c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c2e:	2300      	movs	r3, #0
 8101c30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c32:	2300      	movs	r3, #0
 8101c34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101c36:	2302      	movs	r3, #2
 8101c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101c3e:	4619      	mov	r1, r3
 8101c40:	4826      	ldr	r0, [pc, #152]	; (8101cdc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8101c42:	f000 fc2f 	bl	81024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101c46:	2380      	movs	r3, #128	; 0x80
 8101c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c4a:	2302      	movs	r3, #2
 8101c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c4e:	2300      	movs	r3, #0
 8101c50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c52:	2300      	movs	r3, #0
 8101c54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101c56:	2302      	movs	r3, #2
 8101c58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101c5e:	4619      	mov	r1, r3
 8101c60:	4821      	ldr	r0, [pc, #132]	; (8101ce8 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8101c62:	f000 fc1f 	bl	81024a4 <HAL_GPIO_Init>
}
 8101c66:	e033      	b.n	8101cd0 <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM4)
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	4a1f      	ldr	r2, [pc, #124]	; (8101cec <HAL_TIM_Encoder_MspInit+0x1e8>)
 8101c6e:	4293      	cmp	r3, r2
 8101c70:	d12e      	bne.n	8101cd0 <HAL_TIM_Encoder_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8101c72:	4b19      	ldr	r3, [pc, #100]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c78:	4a17      	ldr	r2, [pc, #92]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c7a:	f043 0304 	orr.w	r3, r3, #4
 8101c7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c82:	4b15      	ldr	r3, [pc, #84]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c88:	f003 0304 	and.w	r3, r3, #4
 8101c8c:	613b      	str	r3, [r7, #16]
 8101c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c90:	4b11      	ldr	r3, [pc, #68]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c96:	4a10      	ldr	r2, [pc, #64]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101c98:	f043 0308 	orr.w	r3, r3, #8
 8101c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ca0:	4b0d      	ldr	r3, [pc, #52]	; (8101cd8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ca6:	f003 0308 	and.w	r3, r3, #8
 8101caa:	60fb      	str	r3, [r7, #12]
 8101cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8101cae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8101cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cb4:	2302      	movs	r3, #2
 8101cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cb8:	2300      	movs	r3, #0
 8101cba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cbc:	2300      	movs	r3, #0
 8101cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101cc0:	2302      	movs	r3, #2
 8101cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101cc8:	4619      	mov	r1, r3
 8101cca:	4809      	ldr	r0, [pc, #36]	; (8101cf0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8101ccc:	f000 fbea 	bl	81024a4 <HAL_GPIO_Init>
}
 8101cd0:	bf00      	nop
 8101cd2:	3740      	adds	r7, #64	; 0x40
 8101cd4:	46bd      	mov	sp, r7
 8101cd6:	bd80      	pop	{r7, pc}
 8101cd8:	58024400 	.word	0x58024400
 8101cdc:	58020000 	.word	0x58020000
 8101ce0:	58020400 	.word	0x58020400
 8101ce4:	40000400 	.word	0x40000400
 8101ce8:	58020800 	.word	0x58020800
 8101cec:	40000800 	.word	0x40000800
 8101cf0:	58020c00 	.word	0x58020c00

08101cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101cf4:	b580      	push	{r7, lr}
 8101cf6:	b088      	sub	sp, #32
 8101cf8:	af00      	add	r7, sp, #0
 8101cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cfc:	f107 030c 	add.w	r3, r7, #12
 8101d00:	2200      	movs	r2, #0
 8101d02:	601a      	str	r2, [r3, #0]
 8101d04:	605a      	str	r2, [r3, #4]
 8101d06:	609a      	str	r2, [r3, #8]
 8101d08:	60da      	str	r2, [r3, #12]
 8101d0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	681b      	ldr	r3, [r3, #0]
 8101d10:	4a13      	ldr	r2, [pc, #76]	; (8101d60 <HAL_TIM_MspPostInit+0x6c>)
 8101d12:	4293      	cmp	r3, r2
 8101d14:	d11f      	bne.n	8101d56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101d16:	4b13      	ldr	r3, [pc, #76]	; (8101d64 <HAL_TIM_MspPostInit+0x70>)
 8101d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d1c:	4a11      	ldr	r2, [pc, #68]	; (8101d64 <HAL_TIM_MspPostInit+0x70>)
 8101d1e:	f043 0310 	orr.w	r3, r3, #16
 8101d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d26:	4b0f      	ldr	r3, [pc, #60]	; (8101d64 <HAL_TIM_MspPostInit+0x70>)
 8101d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d2c:	f003 0310 	and.w	r3, r3, #16
 8101d30:	60bb      	str	r3, [r7, #8]
 8101d32:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8101d34:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8101d38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d3a:	2302      	movs	r3, #2
 8101d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d3e:	2300      	movs	r3, #0
 8101d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d42:	2300      	movs	r3, #0
 8101d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101d46:	2301      	movs	r3, #1
 8101d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101d4a:	f107 030c 	add.w	r3, r7, #12
 8101d4e:	4619      	mov	r1, r3
 8101d50:	4805      	ldr	r0, [pc, #20]	; (8101d68 <HAL_TIM_MspPostInit+0x74>)
 8101d52:	f000 fba7 	bl	81024a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101d56:	bf00      	nop
 8101d58:	3720      	adds	r7, #32
 8101d5a:	46bd      	mov	sp, r7
 8101d5c:	bd80      	pop	{r7, pc}
 8101d5e:	bf00      	nop
 8101d60:	40010000 	.word	0x40010000
 8101d64:	58024400 	.word	0x58024400
 8101d68:	58021000 	.word	0x58021000

08101d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101d6c:	b580      	push	{r7, lr}
 8101d6e:	b0ba      	sub	sp, #232	; 0xe8
 8101d70:	af00      	add	r7, sp, #0
 8101d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d78:	2200      	movs	r2, #0
 8101d7a:	601a      	str	r2, [r3, #0]
 8101d7c:	605a      	str	r2, [r3, #4]
 8101d7e:	609a      	str	r2, [r3, #8]
 8101d80:	60da      	str	r2, [r3, #12]
 8101d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d84:	f107 0318 	add.w	r3, r7, #24
 8101d88:	22bc      	movs	r2, #188	; 0xbc
 8101d8a:	2100      	movs	r1, #0
 8101d8c:	4618      	mov	r0, r3
 8101d8e:	f005 fd17 	bl	81077c0 <memset>
  if(huart->Instance==UART4)
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	681b      	ldr	r3, [r3, #0]
 8101d96:	4a49      	ldr	r2, [pc, #292]	; (8101ebc <HAL_UART_MspInit+0x150>)
 8101d98:	4293      	cmp	r3, r2
 8101d9a:	d143      	bne.n	8101e24 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8101d9c:	2302      	movs	r3, #2
 8101d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101da0:	2300      	movs	r3, #0
 8101da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101da6:	f107 0318 	add.w	r3, r7, #24
 8101daa:	4618      	mov	r0, r3
 8101dac:	f001 feba 	bl	8103b24 <HAL_RCCEx_PeriphCLKConfig>
 8101db0:	4603      	mov	r3, r0
 8101db2:	2b00      	cmp	r3, #0
 8101db4:	d001      	beq.n	8101dba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101db6:	f7ff fdfd 	bl	81019b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8101dba:	4b41      	ldr	r3, [pc, #260]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dc0:	4a3f      	ldr	r2, [pc, #252]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8101dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101dca:	4b3d      	ldr	r3, [pc, #244]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8101dd4:	617b      	str	r3, [r7, #20]
 8101dd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101dd8:	4b39      	ldr	r3, [pc, #228]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dde:	4a38      	ldr	r2, [pc, #224]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101de0:	f043 0304 	orr.w	r3, r3, #4
 8101de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101de8:	4b35      	ldr	r3, [pc, #212]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dee:	f003 0304 	and.w	r3, r3, #4
 8101df2:	613b      	str	r3, [r7, #16]
 8101df4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101df6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dfe:	2302      	movs	r3, #2
 8101e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e04:	2300      	movs	r3, #0
 8101e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e0a:	2300      	movs	r3, #0
 8101e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8101e10:	2308      	movs	r3, #8
 8101e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101e16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101e1a:	4619      	mov	r1, r3
 8101e1c:	4829      	ldr	r0, [pc, #164]	; (8101ec4 <HAL_UART_MspInit+0x158>)
 8101e1e:	f000 fb41 	bl	81024a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101e22:	e047      	b.n	8101eb4 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8101e24:	687b      	ldr	r3, [r7, #4]
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	4a27      	ldr	r2, [pc, #156]	; (8101ec8 <HAL_UART_MspInit+0x15c>)
 8101e2a:	4293      	cmp	r3, r2
 8101e2c:	d142      	bne.n	8101eb4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101e2e:	2302      	movs	r3, #2
 8101e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101e32:	2300      	movs	r3, #0
 8101e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e38:	f107 0318 	add.w	r3, r7, #24
 8101e3c:	4618      	mov	r0, r3
 8101e3e:	f001 fe71 	bl	8103b24 <HAL_RCCEx_PeriphCLKConfig>
 8101e42:	4603      	mov	r3, r0
 8101e44:	2b00      	cmp	r3, #0
 8101e46:	d001      	beq.n	8101e4c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8101e48:	f7ff fdb4 	bl	81019b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8101e4c:	4b1c      	ldr	r3, [pc, #112]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e52:	4a1b      	ldr	r2, [pc, #108]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101e58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e5c:	4b18      	ldr	r3, [pc, #96]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101e66:	60fb      	str	r3, [r7, #12]
 8101e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101e6a:	4b15      	ldr	r3, [pc, #84]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e70:	4a13      	ldr	r2, [pc, #76]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101e72:	f043 0308 	orr.w	r3, r3, #8
 8101e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e7a:	4b11      	ldr	r3, [pc, #68]	; (8101ec0 <HAL_UART_MspInit+0x154>)
 8101e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e80:	f003 0308 	and.w	r3, r3, #8
 8101e84:	60bb      	str	r3, [r7, #8]
 8101e86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101e88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e90:	2302      	movs	r3, #2
 8101e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e96:	2300      	movs	r3, #0
 8101e98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e9c:	2300      	movs	r3, #0
 8101e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101ea2:	2307      	movs	r3, #7
 8101ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101ea8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101eac:	4619      	mov	r1, r3
 8101eae:	4807      	ldr	r0, [pc, #28]	; (8101ecc <HAL_UART_MspInit+0x160>)
 8101eb0:	f000 faf8 	bl	81024a4 <HAL_GPIO_Init>
}
 8101eb4:	bf00      	nop
 8101eb6:	37e8      	adds	r7, #232	; 0xe8
 8101eb8:	46bd      	mov	sp, r7
 8101eba:	bd80      	pop	{r7, pc}
 8101ebc:	40004c00 	.word	0x40004c00
 8101ec0:	58024400 	.word	0x58024400
 8101ec4:	58020800 	.word	0x58020800
 8101ec8:	40004800 	.word	0x40004800
 8101ecc:	58020c00 	.word	0x58020c00

08101ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101ed0:	b480      	push	{r7}
 8101ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101ed4:	e7fe      	b.n	8101ed4 <NMI_Handler+0x4>

08101ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101ed6:	b480      	push	{r7}
 8101ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101eda:	e7fe      	b.n	8101eda <HardFault_Handler+0x4>

08101edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101edc:	b480      	push	{r7}
 8101ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101ee0:	e7fe      	b.n	8101ee0 <MemManage_Handler+0x4>

08101ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101ee2:	b480      	push	{r7}
 8101ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101ee6:	e7fe      	b.n	8101ee6 <BusFault_Handler+0x4>

08101ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101ee8:	b480      	push	{r7}
 8101eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101eec:	e7fe      	b.n	8101eec <UsageFault_Handler+0x4>

08101eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101eee:	b480      	push	{r7}
 8101ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101ef2:	bf00      	nop
 8101ef4:	46bd      	mov	sp, r7
 8101ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101efa:	4770      	bx	lr

08101efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101efc:	b480      	push	{r7}
 8101efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101f00:	bf00      	nop
 8101f02:	46bd      	mov	sp, r7
 8101f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f08:	4770      	bx	lr

08101f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101f0a:	b480      	push	{r7}
 8101f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101f0e:	bf00      	nop
 8101f10:	46bd      	mov	sp, r7
 8101f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f16:	4770      	bx	lr

08101f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101f1c:	f000 f986 	bl	810222c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101f20:	bf00      	nop
 8101f22:	bd80      	pop	{r7, pc}

08101f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101f24:	b480      	push	{r7}
 8101f26:	af00      	add	r7, sp, #0
	return 1;
 8101f28:	2301      	movs	r3, #1
}
 8101f2a:	4618      	mov	r0, r3
 8101f2c:	46bd      	mov	sp, r7
 8101f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f32:	4770      	bx	lr

08101f34 <_kill>:

int _kill(int pid, int sig)
{
 8101f34:	b580      	push	{r7, lr}
 8101f36:	b082      	sub	sp, #8
 8101f38:	af00      	add	r7, sp, #0
 8101f3a:	6078      	str	r0, [r7, #4]
 8101f3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101f3e:	f005 fc15 	bl	810776c <__errno>
 8101f42:	4603      	mov	r3, r0
 8101f44:	2216      	movs	r2, #22
 8101f46:	601a      	str	r2, [r3, #0]
	return -1;
 8101f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	3708      	adds	r7, #8
 8101f50:	46bd      	mov	sp, r7
 8101f52:	bd80      	pop	{r7, pc}

08101f54 <_exit>:

void _exit (int status)
{
 8101f54:	b580      	push	{r7, lr}
 8101f56:	b082      	sub	sp, #8
 8101f58:	af00      	add	r7, sp, #0
 8101f5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8101f60:	6878      	ldr	r0, [r7, #4]
 8101f62:	f7ff ffe7 	bl	8101f34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101f66:	e7fe      	b.n	8101f66 <_exit+0x12>

08101f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101f68:	b580      	push	{r7, lr}
 8101f6a:	b086      	sub	sp, #24
 8101f6c:	af00      	add	r7, sp, #0
 8101f6e:	60f8      	str	r0, [r7, #12]
 8101f70:	60b9      	str	r1, [r7, #8]
 8101f72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f74:	2300      	movs	r3, #0
 8101f76:	617b      	str	r3, [r7, #20]
 8101f78:	e00a      	b.n	8101f90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101f7a:	f3af 8000 	nop.w
 8101f7e:	4601      	mov	r1, r0
 8101f80:	68bb      	ldr	r3, [r7, #8]
 8101f82:	1c5a      	adds	r2, r3, #1
 8101f84:	60ba      	str	r2, [r7, #8]
 8101f86:	b2ca      	uxtb	r2, r1
 8101f88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f8a:	697b      	ldr	r3, [r7, #20]
 8101f8c:	3301      	adds	r3, #1
 8101f8e:	617b      	str	r3, [r7, #20]
 8101f90:	697a      	ldr	r2, [r7, #20]
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	429a      	cmp	r2, r3
 8101f96:	dbf0      	blt.n	8101f7a <_read+0x12>
	}

return len;
 8101f98:	687b      	ldr	r3, [r7, #4]
}
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	3718      	adds	r7, #24
 8101f9e:	46bd      	mov	sp, r7
 8101fa0:	bd80      	pop	{r7, pc}

08101fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101fa2:	b580      	push	{r7, lr}
 8101fa4:	b086      	sub	sp, #24
 8101fa6:	af00      	add	r7, sp, #0
 8101fa8:	60f8      	str	r0, [r7, #12]
 8101faa:	60b9      	str	r1, [r7, #8]
 8101fac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101fae:	2300      	movs	r3, #0
 8101fb0:	617b      	str	r3, [r7, #20]
 8101fb2:	e009      	b.n	8101fc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101fb4:	68bb      	ldr	r3, [r7, #8]
 8101fb6:	1c5a      	adds	r2, r3, #1
 8101fb8:	60ba      	str	r2, [r7, #8]
 8101fba:	781b      	ldrb	r3, [r3, #0]
 8101fbc:	4618      	mov	r0, r3
 8101fbe:	f7ff fce7 	bl	8101990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101fc2:	697b      	ldr	r3, [r7, #20]
 8101fc4:	3301      	adds	r3, #1
 8101fc6:	617b      	str	r3, [r7, #20]
 8101fc8:	697a      	ldr	r2, [r7, #20]
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	429a      	cmp	r2, r3
 8101fce:	dbf1      	blt.n	8101fb4 <_write+0x12>
	}
	return len;
 8101fd0:	687b      	ldr	r3, [r7, #4]
}
 8101fd2:	4618      	mov	r0, r3
 8101fd4:	3718      	adds	r7, #24
 8101fd6:	46bd      	mov	sp, r7
 8101fd8:	bd80      	pop	{r7, pc}

08101fda <_close>:

int _close(int file)
{
 8101fda:	b480      	push	{r7}
 8101fdc:	b083      	sub	sp, #12
 8101fde:	af00      	add	r7, sp, #0
 8101fe0:	6078      	str	r0, [r7, #4]
	return -1;
 8101fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101fe6:	4618      	mov	r0, r3
 8101fe8:	370c      	adds	r7, #12
 8101fea:	46bd      	mov	sp, r7
 8101fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff0:	4770      	bx	lr

08101ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101ff2:	b480      	push	{r7}
 8101ff4:	b083      	sub	sp, #12
 8101ff6:	af00      	add	r7, sp, #0
 8101ff8:	6078      	str	r0, [r7, #4]
 8101ffa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101ffc:	683b      	ldr	r3, [r7, #0]
 8101ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102002:	605a      	str	r2, [r3, #4]
	return 0;
 8102004:	2300      	movs	r3, #0
}
 8102006:	4618      	mov	r0, r3
 8102008:	370c      	adds	r7, #12
 810200a:	46bd      	mov	sp, r7
 810200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102010:	4770      	bx	lr

08102012 <_isatty>:

int _isatty(int file)
{
 8102012:	b480      	push	{r7}
 8102014:	b083      	sub	sp, #12
 8102016:	af00      	add	r7, sp, #0
 8102018:	6078      	str	r0, [r7, #4]
	return 1;
 810201a:	2301      	movs	r3, #1
}
 810201c:	4618      	mov	r0, r3
 810201e:	370c      	adds	r7, #12
 8102020:	46bd      	mov	sp, r7
 8102022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102026:	4770      	bx	lr

08102028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102028:	b480      	push	{r7}
 810202a:	b085      	sub	sp, #20
 810202c:	af00      	add	r7, sp, #0
 810202e:	60f8      	str	r0, [r7, #12]
 8102030:	60b9      	str	r1, [r7, #8]
 8102032:	607a      	str	r2, [r7, #4]
	return 0;
 8102034:	2300      	movs	r3, #0
}
 8102036:	4618      	mov	r0, r3
 8102038:	3714      	adds	r7, #20
 810203a:	46bd      	mov	sp, r7
 810203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102040:	4770      	bx	lr
	...

08102044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102044:	b580      	push	{r7, lr}
 8102046:	b086      	sub	sp, #24
 8102048:	af00      	add	r7, sp, #0
 810204a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810204c:	4a14      	ldr	r2, [pc, #80]	; (81020a0 <_sbrk+0x5c>)
 810204e:	4b15      	ldr	r3, [pc, #84]	; (81020a4 <_sbrk+0x60>)
 8102050:	1ad3      	subs	r3, r2, r3
 8102052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102054:	697b      	ldr	r3, [r7, #20]
 8102056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102058:	4b13      	ldr	r3, [pc, #76]	; (81020a8 <_sbrk+0x64>)
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	2b00      	cmp	r3, #0
 810205e:	d102      	bne.n	8102066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102060:	4b11      	ldr	r3, [pc, #68]	; (81020a8 <_sbrk+0x64>)
 8102062:	4a12      	ldr	r2, [pc, #72]	; (81020ac <_sbrk+0x68>)
 8102064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102066:	4b10      	ldr	r3, [pc, #64]	; (81020a8 <_sbrk+0x64>)
 8102068:	681a      	ldr	r2, [r3, #0]
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	4413      	add	r3, r2
 810206e:	693a      	ldr	r2, [r7, #16]
 8102070:	429a      	cmp	r2, r3
 8102072:	d207      	bcs.n	8102084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102074:	f005 fb7a 	bl	810776c <__errno>
 8102078:	4603      	mov	r3, r0
 810207a:	220c      	movs	r2, #12
 810207c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810207e:	f04f 33ff 	mov.w	r3, #4294967295
 8102082:	e009      	b.n	8102098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102084:	4b08      	ldr	r3, [pc, #32]	; (81020a8 <_sbrk+0x64>)
 8102086:	681b      	ldr	r3, [r3, #0]
 8102088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810208a:	4b07      	ldr	r3, [pc, #28]	; (81020a8 <_sbrk+0x64>)
 810208c:	681a      	ldr	r2, [r3, #0]
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	4413      	add	r3, r2
 8102092:	4a05      	ldr	r2, [pc, #20]	; (81020a8 <_sbrk+0x64>)
 8102094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102096:	68fb      	ldr	r3, [r7, #12]
}
 8102098:	4618      	mov	r0, r3
 810209a:	3718      	adds	r7, #24
 810209c:	46bd      	mov	sp, r7
 810209e:	bd80      	pop	{r7, pc}
 81020a0:	10048000 	.word	0x10048000
 81020a4:	00000400 	.word	0x00000400
 81020a8:	1000049c 	.word	0x1000049c
 81020ac:	100004b8 	.word	0x100004b8

081020b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81020e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81020b4:	f7ff f828 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81020b8:	480c      	ldr	r0, [pc, #48]	; (81020ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81020ba:	490d      	ldr	r1, [pc, #52]	; (81020f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81020bc:	4a0d      	ldr	r2, [pc, #52]	; (81020f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81020c0:	e002      	b.n	81020c8 <LoopCopyDataInit>

081020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81020c6:	3304      	adds	r3, #4

081020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81020cc:	d3f9      	bcc.n	81020c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81020ce:	4a0a      	ldr	r2, [pc, #40]	; (81020f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81020d0:	4c0a      	ldr	r4, [pc, #40]	; (81020fc <LoopFillZerobss+0x22>)
  movs r3, #0
 81020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81020d4:	e001      	b.n	81020da <LoopFillZerobss>

081020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81020d8:	3204      	adds	r2, #4

081020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81020dc:	d3fb      	bcc.n	81020d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81020de:	f005 fb4b 	bl	8107778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81020e2:	f7ff f8f1 	bl	81012c8 <main>
  bx  lr
 81020e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81020e8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81020ec:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81020f0:	100001e4 	.word	0x100001e4
  ldr r2, =_sidata
 81020f4:	0810c704 	.word	0x0810c704
  ldr r2, =_sbss
 81020f8:	100001e4 	.word	0x100001e4
  ldr r4, =_ebss
 81020fc:	100004b4 	.word	0x100004b4

08102100 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102100:	e7fe      	b.n	8102100 <ADC3_IRQHandler>
	...

08102104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102104:	b580      	push	{r7, lr}
 8102106:	b082      	sub	sp, #8
 8102108:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810210a:	4b28      	ldr	r3, [pc, #160]	; (81021ac <HAL_Init+0xa8>)
 810210c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102110:	4a26      	ldr	r2, [pc, #152]	; (81021ac <HAL_Init+0xa8>)
 8102112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102116:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810211a:	4b24      	ldr	r3, [pc, #144]	; (81021ac <HAL_Init+0xa8>)
 810211c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102124:	603b      	str	r3, [r7, #0]
 8102126:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102128:	4b21      	ldr	r3, [pc, #132]	; (81021b0 <HAL_Init+0xac>)
 810212a:	681b      	ldr	r3, [r3, #0]
 810212c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102130:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102134:	4a1e      	ldr	r2, [pc, #120]	; (81021b0 <HAL_Init+0xac>)
 8102136:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810213a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810213c:	4b1c      	ldr	r3, [pc, #112]	; (81021b0 <HAL_Init+0xac>)
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	4a1b      	ldr	r2, [pc, #108]	; (81021b0 <HAL_Init+0xac>)
 8102142:	f043 0301 	orr.w	r3, r3, #1
 8102146:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102148:	2003      	movs	r0, #3
 810214a:	f000 f965 	bl	8102418 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810214e:	f001 fb11 	bl	8103774 <HAL_RCC_GetSysClockFreq>
 8102152:	4602      	mov	r2, r0
 8102154:	4b15      	ldr	r3, [pc, #84]	; (81021ac <HAL_Init+0xa8>)
 8102156:	699b      	ldr	r3, [r3, #24]
 8102158:	0a1b      	lsrs	r3, r3, #8
 810215a:	f003 030f 	and.w	r3, r3, #15
 810215e:	4915      	ldr	r1, [pc, #84]	; (81021b4 <HAL_Init+0xb0>)
 8102160:	5ccb      	ldrb	r3, [r1, r3]
 8102162:	f003 031f 	and.w	r3, r3, #31
 8102166:	fa22 f303 	lsr.w	r3, r2, r3
 810216a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810216c:	4b0f      	ldr	r3, [pc, #60]	; (81021ac <HAL_Init+0xa8>)
 810216e:	699b      	ldr	r3, [r3, #24]
 8102170:	f003 030f 	and.w	r3, r3, #15
 8102174:	4a0f      	ldr	r2, [pc, #60]	; (81021b4 <HAL_Init+0xb0>)
 8102176:	5cd3      	ldrb	r3, [r2, r3]
 8102178:	f003 031f 	and.w	r3, r3, #31
 810217c:	687a      	ldr	r2, [r7, #4]
 810217e:	fa22 f303 	lsr.w	r3, r2, r3
 8102182:	4a0d      	ldr	r2, [pc, #52]	; (81021b8 <HAL_Init+0xb4>)
 8102184:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102186:	4b0c      	ldr	r3, [pc, #48]	; (81021b8 <HAL_Init+0xb4>)
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	4a0c      	ldr	r2, [pc, #48]	; (81021bc <HAL_Init+0xb8>)
 810218c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810218e:	2000      	movs	r0, #0
 8102190:	f000 f816 	bl	81021c0 <HAL_InitTick>
 8102194:	4603      	mov	r3, r0
 8102196:	2b00      	cmp	r3, #0
 8102198:	d001      	beq.n	810219e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810219a:	2301      	movs	r3, #1
 810219c:	e002      	b.n	81021a4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810219e:	f7ff fc0f 	bl	81019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81021a2:	2300      	movs	r3, #0
}
 81021a4:	4618      	mov	r0, r3
 81021a6:	3708      	adds	r7, #8
 81021a8:	46bd      	mov	sp, r7
 81021aa:	bd80      	pop	{r7, pc}
 81021ac:	58024400 	.word	0x58024400
 81021b0:	40024400 	.word	0x40024400
 81021b4:	0810c210 	.word	0x0810c210
 81021b8:	10000004 	.word	0x10000004
 81021bc:	10000000 	.word	0x10000000

081021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81021c0:	b580      	push	{r7, lr}
 81021c2:	b082      	sub	sp, #8
 81021c4:	af00      	add	r7, sp, #0
 81021c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81021c8:	4b15      	ldr	r3, [pc, #84]	; (8102220 <HAL_InitTick+0x60>)
 81021ca:	781b      	ldrb	r3, [r3, #0]
 81021cc:	2b00      	cmp	r3, #0
 81021ce:	d101      	bne.n	81021d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81021d0:	2301      	movs	r3, #1
 81021d2:	e021      	b.n	8102218 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81021d4:	4b13      	ldr	r3, [pc, #76]	; (8102224 <HAL_InitTick+0x64>)
 81021d6:	681a      	ldr	r2, [r3, #0]
 81021d8:	4b11      	ldr	r3, [pc, #68]	; (8102220 <HAL_InitTick+0x60>)
 81021da:	781b      	ldrb	r3, [r3, #0]
 81021dc:	4619      	mov	r1, r3
 81021de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81021e2:	fbb3 f3f1 	udiv	r3, r3, r1
 81021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81021ea:	4618      	mov	r0, r3
 81021ec:	f000 f939 	bl	8102462 <HAL_SYSTICK_Config>
 81021f0:	4603      	mov	r3, r0
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d001      	beq.n	81021fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81021f6:	2301      	movs	r3, #1
 81021f8:	e00e      	b.n	8102218 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	2b0f      	cmp	r3, #15
 81021fe:	d80a      	bhi.n	8102216 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102200:	2200      	movs	r2, #0
 8102202:	6879      	ldr	r1, [r7, #4]
 8102204:	f04f 30ff 	mov.w	r0, #4294967295
 8102208:	f000 f911 	bl	810242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810220c:	4a06      	ldr	r2, [pc, #24]	; (8102228 <HAL_InitTick+0x68>)
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102212:	2300      	movs	r3, #0
 8102214:	e000      	b.n	8102218 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102216:	2301      	movs	r3, #1
}
 8102218:	4618      	mov	r0, r3
 810221a:	3708      	adds	r7, #8
 810221c:	46bd      	mov	sp, r7
 810221e:	bd80      	pop	{r7, pc}
 8102220:	1000000c 	.word	0x1000000c
 8102224:	10000000 	.word	0x10000000
 8102228:	10000008 	.word	0x10000008

0810222c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810222c:	b480      	push	{r7}
 810222e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102230:	4b06      	ldr	r3, [pc, #24]	; (810224c <HAL_IncTick+0x20>)
 8102232:	781b      	ldrb	r3, [r3, #0]
 8102234:	461a      	mov	r2, r3
 8102236:	4b06      	ldr	r3, [pc, #24]	; (8102250 <HAL_IncTick+0x24>)
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	4413      	add	r3, r2
 810223c:	4a04      	ldr	r2, [pc, #16]	; (8102250 <HAL_IncTick+0x24>)
 810223e:	6013      	str	r3, [r2, #0]
}
 8102240:	bf00      	nop
 8102242:	46bd      	mov	sp, r7
 8102244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102248:	4770      	bx	lr
 810224a:	bf00      	nop
 810224c:	1000000c 	.word	0x1000000c
 8102250:	100004a0 	.word	0x100004a0

08102254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102254:	b480      	push	{r7}
 8102256:	af00      	add	r7, sp, #0
  return uwTick;
 8102258:	4b03      	ldr	r3, [pc, #12]	; (8102268 <HAL_GetTick+0x14>)
 810225a:	681b      	ldr	r3, [r3, #0]
}
 810225c:	4618      	mov	r0, r3
 810225e:	46bd      	mov	sp, r7
 8102260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102264:	4770      	bx	lr
 8102266:	bf00      	nop
 8102268:	100004a0 	.word	0x100004a0

0810226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810226c:	b580      	push	{r7, lr}
 810226e:	b084      	sub	sp, #16
 8102270:	af00      	add	r7, sp, #0
 8102272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102274:	f7ff ffee 	bl	8102254 <HAL_GetTick>
 8102278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810227e:	68fb      	ldr	r3, [r7, #12]
 8102280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102284:	d005      	beq.n	8102292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102286:	4b0a      	ldr	r3, [pc, #40]	; (81022b0 <HAL_Delay+0x44>)
 8102288:	781b      	ldrb	r3, [r3, #0]
 810228a:	461a      	mov	r2, r3
 810228c:	68fb      	ldr	r3, [r7, #12]
 810228e:	4413      	add	r3, r2
 8102290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102292:	bf00      	nop
 8102294:	f7ff ffde 	bl	8102254 <HAL_GetTick>
 8102298:	4602      	mov	r2, r0
 810229a:	68bb      	ldr	r3, [r7, #8]
 810229c:	1ad3      	subs	r3, r2, r3
 810229e:	68fa      	ldr	r2, [r7, #12]
 81022a0:	429a      	cmp	r2, r3
 81022a2:	d8f7      	bhi.n	8102294 <HAL_Delay+0x28>
  {
  }
}
 81022a4:	bf00      	nop
 81022a6:	bf00      	nop
 81022a8:	3710      	adds	r7, #16
 81022aa:	46bd      	mov	sp, r7
 81022ac:	bd80      	pop	{r7, pc}
 81022ae:	bf00      	nop
 81022b0:	1000000c 	.word	0x1000000c

081022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81022b4:	b480      	push	{r7}
 81022b6:	b085      	sub	sp, #20
 81022b8:	af00      	add	r7, sp, #0
 81022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	f003 0307 	and.w	r3, r3, #7
 81022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81022c4:	4b0c      	ldr	r3, [pc, #48]	; (81022f8 <__NVIC_SetPriorityGrouping+0x44>)
 81022c6:	68db      	ldr	r3, [r3, #12]
 81022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81022ca:	68ba      	ldr	r2, [r7, #8]
 81022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81022d0:	4013      	ands	r3, r2
 81022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81022d8:	68bb      	ldr	r3, [r7, #8]
 81022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81022e6:	4a04      	ldr	r2, [pc, #16]	; (81022f8 <__NVIC_SetPriorityGrouping+0x44>)
 81022e8:	68bb      	ldr	r3, [r7, #8]
 81022ea:	60d3      	str	r3, [r2, #12]
}
 81022ec:	bf00      	nop
 81022ee:	3714      	adds	r7, #20
 81022f0:	46bd      	mov	sp, r7
 81022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f6:	4770      	bx	lr
 81022f8:	e000ed00 	.word	0xe000ed00

081022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022fc:	b480      	push	{r7}
 81022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102300:	4b04      	ldr	r3, [pc, #16]	; (8102314 <__NVIC_GetPriorityGrouping+0x18>)
 8102302:	68db      	ldr	r3, [r3, #12]
 8102304:	0a1b      	lsrs	r3, r3, #8
 8102306:	f003 0307 	and.w	r3, r3, #7
}
 810230a:	4618      	mov	r0, r3
 810230c:	46bd      	mov	sp, r7
 810230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102312:	4770      	bx	lr
 8102314:	e000ed00 	.word	0xe000ed00

08102318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102318:	b480      	push	{r7}
 810231a:	b083      	sub	sp, #12
 810231c:	af00      	add	r7, sp, #0
 810231e:	4603      	mov	r3, r0
 8102320:	6039      	str	r1, [r7, #0]
 8102322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102328:	2b00      	cmp	r3, #0
 810232a:	db0a      	blt.n	8102342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	b2da      	uxtb	r2, r3
 8102330:	490c      	ldr	r1, [pc, #48]	; (8102364 <__NVIC_SetPriority+0x4c>)
 8102332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102336:	0112      	lsls	r2, r2, #4
 8102338:	b2d2      	uxtb	r2, r2
 810233a:	440b      	add	r3, r1
 810233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102340:	e00a      	b.n	8102358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102342:	683b      	ldr	r3, [r7, #0]
 8102344:	b2da      	uxtb	r2, r3
 8102346:	4908      	ldr	r1, [pc, #32]	; (8102368 <__NVIC_SetPriority+0x50>)
 8102348:	88fb      	ldrh	r3, [r7, #6]
 810234a:	f003 030f 	and.w	r3, r3, #15
 810234e:	3b04      	subs	r3, #4
 8102350:	0112      	lsls	r2, r2, #4
 8102352:	b2d2      	uxtb	r2, r2
 8102354:	440b      	add	r3, r1
 8102356:	761a      	strb	r2, [r3, #24]
}
 8102358:	bf00      	nop
 810235a:	370c      	adds	r7, #12
 810235c:	46bd      	mov	sp, r7
 810235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102362:	4770      	bx	lr
 8102364:	e000e100 	.word	0xe000e100
 8102368:	e000ed00 	.word	0xe000ed00

0810236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810236c:	b480      	push	{r7}
 810236e:	b089      	sub	sp, #36	; 0x24
 8102370:	af00      	add	r7, sp, #0
 8102372:	60f8      	str	r0, [r7, #12]
 8102374:	60b9      	str	r1, [r7, #8]
 8102376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102378:	68fb      	ldr	r3, [r7, #12]
 810237a:	f003 0307 	and.w	r3, r3, #7
 810237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102380:	69fb      	ldr	r3, [r7, #28]
 8102382:	f1c3 0307 	rsb	r3, r3, #7
 8102386:	2b04      	cmp	r3, #4
 8102388:	bf28      	it	cs
 810238a:	2304      	movcs	r3, #4
 810238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810238e:	69fb      	ldr	r3, [r7, #28]
 8102390:	3304      	adds	r3, #4
 8102392:	2b06      	cmp	r3, #6
 8102394:	d902      	bls.n	810239c <NVIC_EncodePriority+0x30>
 8102396:	69fb      	ldr	r3, [r7, #28]
 8102398:	3b03      	subs	r3, #3
 810239a:	e000      	b.n	810239e <NVIC_EncodePriority+0x32>
 810239c:	2300      	movs	r3, #0
 810239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023a0:	f04f 32ff 	mov.w	r2, #4294967295
 81023a4:	69bb      	ldr	r3, [r7, #24]
 81023a6:	fa02 f303 	lsl.w	r3, r2, r3
 81023aa:	43da      	mvns	r2, r3
 81023ac:	68bb      	ldr	r3, [r7, #8]
 81023ae:	401a      	ands	r2, r3
 81023b0:	697b      	ldr	r3, [r7, #20]
 81023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023b4:	f04f 31ff 	mov.w	r1, #4294967295
 81023b8:	697b      	ldr	r3, [r7, #20]
 81023ba:	fa01 f303 	lsl.w	r3, r1, r3
 81023be:	43d9      	mvns	r1, r3
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023c4:	4313      	orrs	r3, r2
         );
}
 81023c6:	4618      	mov	r0, r3
 81023c8:	3724      	adds	r7, #36	; 0x24
 81023ca:	46bd      	mov	sp, r7
 81023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023d0:	4770      	bx	lr
	...

081023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81023d4:	b580      	push	{r7, lr}
 81023d6:	b082      	sub	sp, #8
 81023d8:	af00      	add	r7, sp, #0
 81023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	3b01      	subs	r3, #1
 81023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81023e4:	d301      	bcc.n	81023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81023e6:	2301      	movs	r3, #1
 81023e8:	e00f      	b.n	810240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81023ea:	4a0a      	ldr	r2, [pc, #40]	; (8102414 <SysTick_Config+0x40>)
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	3b01      	subs	r3, #1
 81023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81023f2:	210f      	movs	r1, #15
 81023f4:	f04f 30ff 	mov.w	r0, #4294967295
 81023f8:	f7ff ff8e 	bl	8102318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81023fc:	4b05      	ldr	r3, [pc, #20]	; (8102414 <SysTick_Config+0x40>)
 81023fe:	2200      	movs	r2, #0
 8102400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102402:	4b04      	ldr	r3, [pc, #16]	; (8102414 <SysTick_Config+0x40>)
 8102404:	2207      	movs	r2, #7
 8102406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102408:	2300      	movs	r3, #0
}
 810240a:	4618      	mov	r0, r3
 810240c:	3708      	adds	r7, #8
 810240e:	46bd      	mov	sp, r7
 8102410:	bd80      	pop	{r7, pc}
 8102412:	bf00      	nop
 8102414:	e000e010 	.word	0xe000e010

08102418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102418:	b580      	push	{r7, lr}
 810241a:	b082      	sub	sp, #8
 810241c:	af00      	add	r7, sp, #0
 810241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102420:	6878      	ldr	r0, [r7, #4]
 8102422:	f7ff ff47 	bl	81022b4 <__NVIC_SetPriorityGrouping>
}
 8102426:	bf00      	nop
 8102428:	3708      	adds	r7, #8
 810242a:	46bd      	mov	sp, r7
 810242c:	bd80      	pop	{r7, pc}

0810242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810242e:	b580      	push	{r7, lr}
 8102430:	b086      	sub	sp, #24
 8102432:	af00      	add	r7, sp, #0
 8102434:	4603      	mov	r3, r0
 8102436:	60b9      	str	r1, [r7, #8]
 8102438:	607a      	str	r2, [r7, #4]
 810243a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810243c:	f7ff ff5e 	bl	81022fc <__NVIC_GetPriorityGrouping>
 8102440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102442:	687a      	ldr	r2, [r7, #4]
 8102444:	68b9      	ldr	r1, [r7, #8]
 8102446:	6978      	ldr	r0, [r7, #20]
 8102448:	f7ff ff90 	bl	810236c <NVIC_EncodePriority>
 810244c:	4602      	mov	r2, r0
 810244e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102452:	4611      	mov	r1, r2
 8102454:	4618      	mov	r0, r3
 8102456:	f7ff ff5f 	bl	8102318 <__NVIC_SetPriority>
}
 810245a:	bf00      	nop
 810245c:	3718      	adds	r7, #24
 810245e:	46bd      	mov	sp, r7
 8102460:	bd80      	pop	{r7, pc}

08102462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102462:	b580      	push	{r7, lr}
 8102464:	b082      	sub	sp, #8
 8102466:	af00      	add	r7, sp, #0
 8102468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810246a:	6878      	ldr	r0, [r7, #4]
 810246c:	f7ff ffb2 	bl	81023d4 <SysTick_Config>
 8102470:	4603      	mov	r3, r0
}
 8102472:	4618      	mov	r0, r3
 8102474:	3708      	adds	r7, #8
 8102476:	46bd      	mov	sp, r7
 8102478:	bd80      	pop	{r7, pc}
	...

0810247c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810247c:	b480      	push	{r7}
 810247e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102480:	4b07      	ldr	r3, [pc, #28]	; (81024a0 <HAL_GetCurrentCPUID+0x24>)
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	091b      	lsrs	r3, r3, #4
 8102486:	f003 030f 	and.w	r3, r3, #15
 810248a:	2b07      	cmp	r3, #7
 810248c:	d101      	bne.n	8102492 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810248e:	2303      	movs	r3, #3
 8102490:	e000      	b.n	8102494 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102492:	2301      	movs	r3, #1
  }
}
 8102494:	4618      	mov	r0, r3
 8102496:	46bd      	mov	sp, r7
 8102498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810249c:	4770      	bx	lr
 810249e:	bf00      	nop
 81024a0:	e000ed00 	.word	0xe000ed00

081024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81024a4:	b480      	push	{r7}
 81024a6:	b089      	sub	sp, #36	; 0x24
 81024a8:	af00      	add	r7, sp, #0
 81024aa:	6078      	str	r0, [r7, #4]
 81024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81024ae:	2300      	movs	r3, #0
 81024b0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81024b2:	4b89      	ldr	r3, [pc, #548]	; (81026d8 <HAL_GPIO_Init+0x234>)
 81024b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81024b6:	e194      	b.n	81027e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81024b8:	683b      	ldr	r3, [r7, #0]
 81024ba:	681a      	ldr	r2, [r3, #0]
 81024bc:	2101      	movs	r1, #1
 81024be:	69fb      	ldr	r3, [r7, #28]
 81024c0:	fa01 f303 	lsl.w	r3, r1, r3
 81024c4:	4013      	ands	r3, r2
 81024c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81024c8:	693b      	ldr	r3, [r7, #16]
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	f000 8186 	beq.w	81027dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81024d0:	683b      	ldr	r3, [r7, #0]
 81024d2:	685b      	ldr	r3, [r3, #4]
 81024d4:	f003 0303 	and.w	r3, r3, #3
 81024d8:	2b01      	cmp	r3, #1
 81024da:	d005      	beq.n	81024e8 <HAL_GPIO_Init+0x44>
 81024dc:	683b      	ldr	r3, [r7, #0]
 81024de:	685b      	ldr	r3, [r3, #4]
 81024e0:	f003 0303 	and.w	r3, r3, #3
 81024e4:	2b02      	cmp	r3, #2
 81024e6:	d130      	bne.n	810254a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	689b      	ldr	r3, [r3, #8]
 81024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81024ee:	69fb      	ldr	r3, [r7, #28]
 81024f0:	005b      	lsls	r3, r3, #1
 81024f2:	2203      	movs	r2, #3
 81024f4:	fa02 f303 	lsl.w	r3, r2, r3
 81024f8:	43db      	mvns	r3, r3
 81024fa:	69ba      	ldr	r2, [r7, #24]
 81024fc:	4013      	ands	r3, r2
 81024fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102500:	683b      	ldr	r3, [r7, #0]
 8102502:	68da      	ldr	r2, [r3, #12]
 8102504:	69fb      	ldr	r3, [r7, #28]
 8102506:	005b      	lsls	r3, r3, #1
 8102508:	fa02 f303 	lsl.w	r3, r2, r3
 810250c:	69ba      	ldr	r2, [r7, #24]
 810250e:	4313      	orrs	r3, r2
 8102510:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	69ba      	ldr	r2, [r7, #24]
 8102516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	685b      	ldr	r3, [r3, #4]
 810251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810251e:	2201      	movs	r2, #1
 8102520:	69fb      	ldr	r3, [r7, #28]
 8102522:	fa02 f303 	lsl.w	r3, r2, r3
 8102526:	43db      	mvns	r3, r3
 8102528:	69ba      	ldr	r2, [r7, #24]
 810252a:	4013      	ands	r3, r2
 810252c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810252e:	683b      	ldr	r3, [r7, #0]
 8102530:	685b      	ldr	r3, [r3, #4]
 8102532:	091b      	lsrs	r3, r3, #4
 8102534:	f003 0201 	and.w	r2, r3, #1
 8102538:	69fb      	ldr	r3, [r7, #28]
 810253a:	fa02 f303 	lsl.w	r3, r2, r3
 810253e:	69ba      	ldr	r2, [r7, #24]
 8102540:	4313      	orrs	r3, r2
 8102542:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	69ba      	ldr	r2, [r7, #24]
 8102548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810254a:	683b      	ldr	r3, [r7, #0]
 810254c:	685b      	ldr	r3, [r3, #4]
 810254e:	f003 0303 	and.w	r3, r3, #3
 8102552:	2b03      	cmp	r3, #3
 8102554:	d017      	beq.n	8102586 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	68db      	ldr	r3, [r3, #12]
 810255a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810255c:	69fb      	ldr	r3, [r7, #28]
 810255e:	005b      	lsls	r3, r3, #1
 8102560:	2203      	movs	r2, #3
 8102562:	fa02 f303 	lsl.w	r3, r2, r3
 8102566:	43db      	mvns	r3, r3
 8102568:	69ba      	ldr	r2, [r7, #24]
 810256a:	4013      	ands	r3, r2
 810256c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810256e:	683b      	ldr	r3, [r7, #0]
 8102570:	689a      	ldr	r2, [r3, #8]
 8102572:	69fb      	ldr	r3, [r7, #28]
 8102574:	005b      	lsls	r3, r3, #1
 8102576:	fa02 f303 	lsl.w	r3, r2, r3
 810257a:	69ba      	ldr	r2, [r7, #24]
 810257c:	4313      	orrs	r3, r2
 810257e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	69ba      	ldr	r2, [r7, #24]
 8102584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102586:	683b      	ldr	r3, [r7, #0]
 8102588:	685b      	ldr	r3, [r3, #4]
 810258a:	f003 0303 	and.w	r3, r3, #3
 810258e:	2b02      	cmp	r3, #2
 8102590:	d123      	bne.n	81025da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102592:	69fb      	ldr	r3, [r7, #28]
 8102594:	08da      	lsrs	r2, r3, #3
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	3208      	adds	r2, #8
 810259a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81025a0:	69fb      	ldr	r3, [r7, #28]
 81025a2:	f003 0307 	and.w	r3, r3, #7
 81025a6:	009b      	lsls	r3, r3, #2
 81025a8:	220f      	movs	r2, #15
 81025aa:	fa02 f303 	lsl.w	r3, r2, r3
 81025ae:	43db      	mvns	r3, r3
 81025b0:	69ba      	ldr	r2, [r7, #24]
 81025b2:	4013      	ands	r3, r2
 81025b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81025b6:	683b      	ldr	r3, [r7, #0]
 81025b8:	691a      	ldr	r2, [r3, #16]
 81025ba:	69fb      	ldr	r3, [r7, #28]
 81025bc:	f003 0307 	and.w	r3, r3, #7
 81025c0:	009b      	lsls	r3, r3, #2
 81025c2:	fa02 f303 	lsl.w	r3, r2, r3
 81025c6:	69ba      	ldr	r2, [r7, #24]
 81025c8:	4313      	orrs	r3, r2
 81025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81025cc:	69fb      	ldr	r3, [r7, #28]
 81025ce:	08da      	lsrs	r2, r3, #3
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	3208      	adds	r2, #8
 81025d4:	69b9      	ldr	r1, [r7, #24]
 81025d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	681b      	ldr	r3, [r3, #0]
 81025de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81025e0:	69fb      	ldr	r3, [r7, #28]
 81025e2:	005b      	lsls	r3, r3, #1
 81025e4:	2203      	movs	r2, #3
 81025e6:	fa02 f303 	lsl.w	r3, r2, r3
 81025ea:	43db      	mvns	r3, r3
 81025ec:	69ba      	ldr	r2, [r7, #24]
 81025ee:	4013      	ands	r3, r2
 81025f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81025f2:	683b      	ldr	r3, [r7, #0]
 81025f4:	685b      	ldr	r3, [r3, #4]
 81025f6:	f003 0203 	and.w	r2, r3, #3
 81025fa:	69fb      	ldr	r3, [r7, #28]
 81025fc:	005b      	lsls	r3, r3, #1
 81025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102602:	69ba      	ldr	r2, [r7, #24]
 8102604:	4313      	orrs	r3, r2
 8102606:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	69ba      	ldr	r2, [r7, #24]
 810260c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810260e:	683b      	ldr	r3, [r7, #0]
 8102610:	685b      	ldr	r3, [r3, #4]
 8102612:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102616:	2b00      	cmp	r3, #0
 8102618:	f000 80e0 	beq.w	81027dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810261c:	4b2f      	ldr	r3, [pc, #188]	; (81026dc <HAL_GPIO_Init+0x238>)
 810261e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102622:	4a2e      	ldr	r2, [pc, #184]	; (81026dc <HAL_GPIO_Init+0x238>)
 8102624:	f043 0302 	orr.w	r3, r3, #2
 8102628:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810262c:	4b2b      	ldr	r3, [pc, #172]	; (81026dc <HAL_GPIO_Init+0x238>)
 810262e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102632:	f003 0302 	and.w	r3, r3, #2
 8102636:	60fb      	str	r3, [r7, #12]
 8102638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810263a:	4a29      	ldr	r2, [pc, #164]	; (81026e0 <HAL_GPIO_Init+0x23c>)
 810263c:	69fb      	ldr	r3, [r7, #28]
 810263e:	089b      	lsrs	r3, r3, #2
 8102640:	3302      	adds	r3, #2
 8102642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102648:	69fb      	ldr	r3, [r7, #28]
 810264a:	f003 0303 	and.w	r3, r3, #3
 810264e:	009b      	lsls	r3, r3, #2
 8102650:	220f      	movs	r2, #15
 8102652:	fa02 f303 	lsl.w	r3, r2, r3
 8102656:	43db      	mvns	r3, r3
 8102658:	69ba      	ldr	r2, [r7, #24]
 810265a:	4013      	ands	r3, r2
 810265c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	4a20      	ldr	r2, [pc, #128]	; (81026e4 <HAL_GPIO_Init+0x240>)
 8102662:	4293      	cmp	r3, r2
 8102664:	d052      	beq.n	810270c <HAL_GPIO_Init+0x268>
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	4a1f      	ldr	r2, [pc, #124]	; (81026e8 <HAL_GPIO_Init+0x244>)
 810266a:	4293      	cmp	r3, r2
 810266c:	d031      	beq.n	81026d2 <HAL_GPIO_Init+0x22e>
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	4a1e      	ldr	r2, [pc, #120]	; (81026ec <HAL_GPIO_Init+0x248>)
 8102672:	4293      	cmp	r3, r2
 8102674:	d02b      	beq.n	81026ce <HAL_GPIO_Init+0x22a>
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	4a1d      	ldr	r2, [pc, #116]	; (81026f0 <HAL_GPIO_Init+0x24c>)
 810267a:	4293      	cmp	r3, r2
 810267c:	d025      	beq.n	81026ca <HAL_GPIO_Init+0x226>
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	4a1c      	ldr	r2, [pc, #112]	; (81026f4 <HAL_GPIO_Init+0x250>)
 8102682:	4293      	cmp	r3, r2
 8102684:	d01f      	beq.n	81026c6 <HAL_GPIO_Init+0x222>
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	4a1b      	ldr	r2, [pc, #108]	; (81026f8 <HAL_GPIO_Init+0x254>)
 810268a:	4293      	cmp	r3, r2
 810268c:	d019      	beq.n	81026c2 <HAL_GPIO_Init+0x21e>
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	4a1a      	ldr	r2, [pc, #104]	; (81026fc <HAL_GPIO_Init+0x258>)
 8102692:	4293      	cmp	r3, r2
 8102694:	d013      	beq.n	81026be <HAL_GPIO_Init+0x21a>
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	4a19      	ldr	r2, [pc, #100]	; (8102700 <HAL_GPIO_Init+0x25c>)
 810269a:	4293      	cmp	r3, r2
 810269c:	d00d      	beq.n	81026ba <HAL_GPIO_Init+0x216>
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	4a18      	ldr	r2, [pc, #96]	; (8102704 <HAL_GPIO_Init+0x260>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d007      	beq.n	81026b6 <HAL_GPIO_Init+0x212>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	4a17      	ldr	r2, [pc, #92]	; (8102708 <HAL_GPIO_Init+0x264>)
 81026aa:	4293      	cmp	r3, r2
 81026ac:	d101      	bne.n	81026b2 <HAL_GPIO_Init+0x20e>
 81026ae:	2309      	movs	r3, #9
 81026b0:	e02d      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026b2:	230a      	movs	r3, #10
 81026b4:	e02b      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026b6:	2308      	movs	r3, #8
 81026b8:	e029      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026ba:	2307      	movs	r3, #7
 81026bc:	e027      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026be:	2306      	movs	r3, #6
 81026c0:	e025      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026c2:	2305      	movs	r3, #5
 81026c4:	e023      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026c6:	2304      	movs	r3, #4
 81026c8:	e021      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026ca:	2303      	movs	r3, #3
 81026cc:	e01f      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026ce:	2302      	movs	r3, #2
 81026d0:	e01d      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026d2:	2301      	movs	r3, #1
 81026d4:	e01b      	b.n	810270e <HAL_GPIO_Init+0x26a>
 81026d6:	bf00      	nop
 81026d8:	580000c0 	.word	0x580000c0
 81026dc:	58024400 	.word	0x58024400
 81026e0:	58000400 	.word	0x58000400
 81026e4:	58020000 	.word	0x58020000
 81026e8:	58020400 	.word	0x58020400
 81026ec:	58020800 	.word	0x58020800
 81026f0:	58020c00 	.word	0x58020c00
 81026f4:	58021000 	.word	0x58021000
 81026f8:	58021400 	.word	0x58021400
 81026fc:	58021800 	.word	0x58021800
 8102700:	58021c00 	.word	0x58021c00
 8102704:	58022000 	.word	0x58022000
 8102708:	58022400 	.word	0x58022400
 810270c:	2300      	movs	r3, #0
 810270e:	69fa      	ldr	r2, [r7, #28]
 8102710:	f002 0203 	and.w	r2, r2, #3
 8102714:	0092      	lsls	r2, r2, #2
 8102716:	4093      	lsls	r3, r2
 8102718:	69ba      	ldr	r2, [r7, #24]
 810271a:	4313      	orrs	r3, r2
 810271c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810271e:	4938      	ldr	r1, [pc, #224]	; (8102800 <HAL_GPIO_Init+0x35c>)
 8102720:	69fb      	ldr	r3, [r7, #28]
 8102722:	089b      	lsrs	r3, r3, #2
 8102724:	3302      	adds	r3, #2
 8102726:	69ba      	ldr	r2, [r7, #24]
 8102728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102734:	693b      	ldr	r3, [r7, #16]
 8102736:	43db      	mvns	r3, r3
 8102738:	69ba      	ldr	r2, [r7, #24]
 810273a:	4013      	ands	r3, r2
 810273c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810273e:	683b      	ldr	r3, [r7, #0]
 8102740:	685b      	ldr	r3, [r3, #4]
 8102742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102746:	2b00      	cmp	r3, #0
 8102748:	d003      	beq.n	8102752 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810274a:	69ba      	ldr	r2, [r7, #24]
 810274c:	693b      	ldr	r3, [r7, #16]
 810274e:	4313      	orrs	r3, r2
 8102750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102756:	69bb      	ldr	r3, [r7, #24]
 8102758:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810275e:	685b      	ldr	r3, [r3, #4]
 8102760:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102762:	693b      	ldr	r3, [r7, #16]
 8102764:	43db      	mvns	r3, r3
 8102766:	69ba      	ldr	r2, [r7, #24]
 8102768:	4013      	ands	r3, r2
 810276a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810276c:	683b      	ldr	r3, [r7, #0]
 810276e:	685b      	ldr	r3, [r3, #4]
 8102770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102774:	2b00      	cmp	r3, #0
 8102776:	d003      	beq.n	8102780 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102778:	69ba      	ldr	r2, [r7, #24]
 810277a:	693b      	ldr	r3, [r7, #16]
 810277c:	4313      	orrs	r3, r2
 810277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102784:	69bb      	ldr	r3, [r7, #24]
 8102786:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102788:	697b      	ldr	r3, [r7, #20]
 810278a:	685b      	ldr	r3, [r3, #4]
 810278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810278e:	693b      	ldr	r3, [r7, #16]
 8102790:	43db      	mvns	r3, r3
 8102792:	69ba      	ldr	r2, [r7, #24]
 8102794:	4013      	ands	r3, r2
 8102796:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102798:	683b      	ldr	r3, [r7, #0]
 810279a:	685b      	ldr	r3, [r3, #4]
 810279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81027a0:	2b00      	cmp	r3, #0
 81027a2:	d003      	beq.n	81027ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81027a4:	69ba      	ldr	r2, [r7, #24]
 81027a6:	693b      	ldr	r3, [r7, #16]
 81027a8:	4313      	orrs	r3, r2
 81027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81027ac:	697b      	ldr	r3, [r7, #20]
 81027ae:	69ba      	ldr	r2, [r7, #24]
 81027b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81027b2:	697b      	ldr	r3, [r7, #20]
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81027b8:	693b      	ldr	r3, [r7, #16]
 81027ba:	43db      	mvns	r3, r3
 81027bc:	69ba      	ldr	r2, [r7, #24]
 81027be:	4013      	ands	r3, r2
 81027c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81027c2:	683b      	ldr	r3, [r7, #0]
 81027c4:	685b      	ldr	r3, [r3, #4]
 81027c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81027ca:	2b00      	cmp	r3, #0
 81027cc:	d003      	beq.n	81027d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81027ce:	69ba      	ldr	r2, [r7, #24]
 81027d0:	693b      	ldr	r3, [r7, #16]
 81027d2:	4313      	orrs	r3, r2
 81027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81027d6:	697b      	ldr	r3, [r7, #20]
 81027d8:	69ba      	ldr	r2, [r7, #24]
 81027da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81027dc:	69fb      	ldr	r3, [r7, #28]
 81027de:	3301      	adds	r3, #1
 81027e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81027e2:	683b      	ldr	r3, [r7, #0]
 81027e4:	681a      	ldr	r2, [r3, #0]
 81027e6:	69fb      	ldr	r3, [r7, #28]
 81027e8:	fa22 f303 	lsr.w	r3, r2, r3
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	f47f ae63 	bne.w	81024b8 <HAL_GPIO_Init+0x14>
  }
}
 81027f2:	bf00      	nop
 81027f4:	bf00      	nop
 81027f6:	3724      	adds	r7, #36	; 0x24
 81027f8:	46bd      	mov	sp, r7
 81027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027fe:	4770      	bx	lr
 8102800:	58000400 	.word	0x58000400

08102804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102804:	b480      	push	{r7}
 8102806:	b083      	sub	sp, #12
 8102808:	af00      	add	r7, sp, #0
 810280a:	6078      	str	r0, [r7, #4]
 810280c:	460b      	mov	r3, r1
 810280e:	807b      	strh	r3, [r7, #2]
 8102810:	4613      	mov	r3, r2
 8102812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102814:	787b      	ldrb	r3, [r7, #1]
 8102816:	2b00      	cmp	r3, #0
 8102818:	d003      	beq.n	8102822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810281a:	887a      	ldrh	r2, [r7, #2]
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102820:	e003      	b.n	810282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102822:	887b      	ldrh	r3, [r7, #2]
 8102824:	041a      	lsls	r2, r3, #16
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	619a      	str	r2, [r3, #24]
}
 810282a:	bf00      	nop
 810282c:	370c      	adds	r7, #12
 810282e:	46bd      	mov	sp, r7
 8102830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102834:	4770      	bx	lr
	...

08102838 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102838:	b480      	push	{r7}
 810283a:	b083      	sub	sp, #12
 810283c:	af00      	add	r7, sp, #0
 810283e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102840:	4b05      	ldr	r3, [pc, #20]	; (8102858 <HAL_HSEM_ActivateNotification+0x20>)
 8102842:	681a      	ldr	r2, [r3, #0]
 8102844:	4904      	ldr	r1, [pc, #16]	; (8102858 <HAL_HSEM_ActivateNotification+0x20>)
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	4313      	orrs	r3, r2
 810284a:	600b      	str	r3, [r1, #0]
#endif
}
 810284c:	bf00      	nop
 810284e:	370c      	adds	r7, #12
 8102850:	46bd      	mov	sp, r7
 8102852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102856:	4770      	bx	lr
 8102858:	58026510 	.word	0x58026510

0810285c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810285c:	b580      	push	{r7, lr}
 810285e:	b082      	sub	sp, #8
 8102860:	af00      	add	r7, sp, #0
 8102862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	2b00      	cmp	r3, #0
 8102868:	d101      	bne.n	810286e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810286a:	2301      	movs	r3, #1
 810286c:	e081      	b.n	8102972 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102874:	b2db      	uxtb	r3, r3
 8102876:	2b00      	cmp	r3, #0
 8102878:	d106      	bne.n	8102888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	2200      	movs	r2, #0
 810287e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102882:	6878      	ldr	r0, [r7, #4]
 8102884:	f7ff f8b6 	bl	81019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	2224      	movs	r2, #36	; 0x24
 810288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	681a      	ldr	r2, [r3, #0]
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	f022 0201 	bic.w	r2, r2, #1
 810289e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	685a      	ldr	r2, [r3, #4]
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81028ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	681b      	ldr	r3, [r3, #0]
 81028b2:	689a      	ldr	r2, [r3, #8]
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81028bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	68db      	ldr	r3, [r3, #12]
 81028c2:	2b01      	cmp	r3, #1
 81028c4:	d107      	bne.n	81028d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	689a      	ldr	r2, [r3, #8]
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81028d2:	609a      	str	r2, [r3, #8]
 81028d4:	e006      	b.n	81028e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	689a      	ldr	r2, [r3, #8]
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	681b      	ldr	r3, [r3, #0]
 81028de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81028e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	68db      	ldr	r3, [r3, #12]
 81028e8:	2b02      	cmp	r3, #2
 81028ea:	d104      	bne.n	81028f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81028f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	681b      	ldr	r3, [r3, #0]
 81028fa:	685b      	ldr	r3, [r3, #4]
 81028fc:	687a      	ldr	r2, [r7, #4]
 81028fe:	6812      	ldr	r2, [r2, #0]
 8102900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	68da      	ldr	r2, [r3, #12]
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	691a      	ldr	r2, [r3, #16]
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	695b      	ldr	r3, [r3, #20]
 8102922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	699b      	ldr	r3, [r3, #24]
 810292a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	430a      	orrs	r2, r1
 8102932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	69d9      	ldr	r1, [r3, #28]
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	6a1a      	ldr	r2, [r3, #32]
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	430a      	orrs	r2, r1
 8102942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	681a      	ldr	r2, [r3, #0]
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	681b      	ldr	r3, [r3, #0]
 810294e:	f042 0201 	orr.w	r2, r2, #1
 8102952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	2200      	movs	r2, #0
 8102958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	2220      	movs	r2, #32
 810295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	2200      	movs	r2, #0
 8102966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	2200      	movs	r2, #0
 810296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102970:	2300      	movs	r3, #0
}
 8102972:	4618      	mov	r0, r3
 8102974:	3708      	adds	r7, #8
 8102976:	46bd      	mov	sp, r7
 8102978:	bd80      	pop	{r7, pc}
	...

0810297c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810297c:	b580      	push	{r7, lr}
 810297e:	b088      	sub	sp, #32
 8102980:	af02      	add	r7, sp, #8
 8102982:	60f8      	str	r0, [r7, #12]
 8102984:	4608      	mov	r0, r1
 8102986:	4611      	mov	r1, r2
 8102988:	461a      	mov	r2, r3
 810298a:	4603      	mov	r3, r0
 810298c:	817b      	strh	r3, [r7, #10]
 810298e:	460b      	mov	r3, r1
 8102990:	813b      	strh	r3, [r7, #8]
 8102992:	4613      	mov	r3, r2
 8102994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102996:	68fb      	ldr	r3, [r7, #12]
 8102998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810299c:	b2db      	uxtb	r3, r3
 810299e:	2b20      	cmp	r3, #32
 81029a0:	f040 80f9 	bne.w	8102b96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81029a4:	6a3b      	ldr	r3, [r7, #32]
 81029a6:	2b00      	cmp	r3, #0
 81029a8:	d002      	beq.n	81029b0 <HAL_I2C_Mem_Write+0x34>
 81029aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81029ac:	2b00      	cmp	r3, #0
 81029ae:	d105      	bne.n	81029bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81029b0:	68fb      	ldr	r3, [r7, #12]
 81029b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81029b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81029b8:	2301      	movs	r3, #1
 81029ba:	e0ed      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81029bc:	68fb      	ldr	r3, [r7, #12]
 81029be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81029c2:	2b01      	cmp	r3, #1
 81029c4:	d101      	bne.n	81029ca <HAL_I2C_Mem_Write+0x4e>
 81029c6:	2302      	movs	r3, #2
 81029c8:	e0e6      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	2201      	movs	r2, #1
 81029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81029d2:	f7ff fc3f 	bl	8102254 <HAL_GetTick>
 81029d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81029d8:	697b      	ldr	r3, [r7, #20]
 81029da:	9300      	str	r3, [sp, #0]
 81029dc:	2319      	movs	r3, #25
 81029de:	2201      	movs	r2, #1
 81029e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81029e4:	68f8      	ldr	r0, [r7, #12]
 81029e6:	f000 fbcb 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 81029ea:	4603      	mov	r3, r0
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d001      	beq.n	81029f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81029f0:	2301      	movs	r3, #1
 81029f2:	e0d1      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	2221      	movs	r2, #33	; 0x21
 81029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	2240      	movs	r2, #64	; 0x40
 8102a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102a04:	68fb      	ldr	r3, [r7, #12]
 8102a06:	2200      	movs	r2, #0
 8102a08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102a0a:	68fb      	ldr	r3, [r7, #12]
 8102a0c:	6a3a      	ldr	r2, [r7, #32]
 8102a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102a10:	68fb      	ldr	r3, [r7, #12]
 8102a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102a16:	68fb      	ldr	r3, [r7, #12]
 8102a18:	2200      	movs	r2, #0
 8102a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102a1c:	88f8      	ldrh	r0, [r7, #6]
 8102a1e:	893a      	ldrh	r2, [r7, #8]
 8102a20:	8979      	ldrh	r1, [r7, #10]
 8102a22:	697b      	ldr	r3, [r7, #20]
 8102a24:	9301      	str	r3, [sp, #4]
 8102a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a28:	9300      	str	r3, [sp, #0]
 8102a2a:	4603      	mov	r3, r0
 8102a2c:	68f8      	ldr	r0, [r7, #12]
 8102a2e:	f000 fadb 	bl	8102fe8 <I2C_RequestMemoryWrite>
 8102a32:	4603      	mov	r3, r0
 8102a34:	2b00      	cmp	r3, #0
 8102a36:	d005      	beq.n	8102a44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102a38:	68fb      	ldr	r3, [r7, #12]
 8102a3a:	2200      	movs	r2, #0
 8102a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102a40:	2301      	movs	r3, #1
 8102a42:	e0a9      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102a48:	b29b      	uxth	r3, r3
 8102a4a:	2bff      	cmp	r3, #255	; 0xff
 8102a4c:	d90e      	bls.n	8102a6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102a4e:	68fb      	ldr	r3, [r7, #12]
 8102a50:	22ff      	movs	r2, #255	; 0xff
 8102a52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102a54:	68fb      	ldr	r3, [r7, #12]
 8102a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102a58:	b2da      	uxtb	r2, r3
 8102a5a:	8979      	ldrh	r1, [r7, #10]
 8102a5c:	2300      	movs	r3, #0
 8102a5e:	9300      	str	r3, [sp, #0]
 8102a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102a64:	68f8      	ldr	r0, [r7, #12]
 8102a66:	f000 fd33 	bl	81034d0 <I2C_TransferConfig>
 8102a6a:	e00f      	b.n	8102a8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102a6c:	68fb      	ldr	r3, [r7, #12]
 8102a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102a70:	b29a      	uxth	r2, r3
 8102a72:	68fb      	ldr	r3, [r7, #12]
 8102a74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102a7a:	b2da      	uxtb	r2, r3
 8102a7c:	8979      	ldrh	r1, [r7, #10]
 8102a7e:	2300      	movs	r3, #0
 8102a80:	9300      	str	r3, [sp, #0]
 8102a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102a86:	68f8      	ldr	r0, [r7, #12]
 8102a88:	f000 fd22 	bl	81034d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102a8c:	697a      	ldr	r2, [r7, #20]
 8102a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102a90:	68f8      	ldr	r0, [r7, #12]
 8102a92:	f000 fbb5 	bl	8103200 <I2C_WaitOnTXISFlagUntilTimeout>
 8102a96:	4603      	mov	r3, r0
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d001      	beq.n	8102aa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102a9c:	2301      	movs	r3, #1
 8102a9e:	e07b      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102aa4:	781a      	ldrb	r2, [r3, #0]
 8102aa6:	68fb      	ldr	r3, [r7, #12]
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102aac:	68fb      	ldr	r3, [r7, #12]
 8102aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ab0:	1c5a      	adds	r2, r3, #1
 8102ab2:	68fb      	ldr	r3, [r7, #12]
 8102ab4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102ab6:	68fb      	ldr	r3, [r7, #12]
 8102ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102aba:	b29b      	uxth	r3, r3
 8102abc:	3b01      	subs	r3, #1
 8102abe:	b29a      	uxth	r2, r3
 8102ac0:	68fb      	ldr	r3, [r7, #12]
 8102ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102ac4:	68fb      	ldr	r3, [r7, #12]
 8102ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ac8:	3b01      	subs	r3, #1
 8102aca:	b29a      	uxth	r2, r3
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102ad0:	68fb      	ldr	r3, [r7, #12]
 8102ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ad4:	b29b      	uxth	r3, r3
 8102ad6:	2b00      	cmp	r3, #0
 8102ad8:	d034      	beq.n	8102b44 <HAL_I2C_Mem_Write+0x1c8>
 8102ada:	68fb      	ldr	r3, [r7, #12]
 8102adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ade:	2b00      	cmp	r3, #0
 8102ae0:	d130      	bne.n	8102b44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102ae2:	697b      	ldr	r3, [r7, #20]
 8102ae4:	9300      	str	r3, [sp, #0]
 8102ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ae8:	2200      	movs	r2, #0
 8102aea:	2180      	movs	r1, #128	; 0x80
 8102aec:	68f8      	ldr	r0, [r7, #12]
 8102aee:	f000 fb47 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102af2:	4603      	mov	r3, r0
 8102af4:	2b00      	cmp	r3, #0
 8102af6:	d001      	beq.n	8102afc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8102af8:	2301      	movs	r3, #1
 8102afa:	e04d      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102afc:	68fb      	ldr	r3, [r7, #12]
 8102afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b00:	b29b      	uxth	r3, r3
 8102b02:	2bff      	cmp	r3, #255	; 0xff
 8102b04:	d90e      	bls.n	8102b24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	22ff      	movs	r2, #255	; 0xff
 8102b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102b0c:	68fb      	ldr	r3, [r7, #12]
 8102b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b10:	b2da      	uxtb	r2, r3
 8102b12:	8979      	ldrh	r1, [r7, #10]
 8102b14:	2300      	movs	r3, #0
 8102b16:	9300      	str	r3, [sp, #0]
 8102b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102b1c:	68f8      	ldr	r0, [r7, #12]
 8102b1e:	f000 fcd7 	bl	81034d0 <I2C_TransferConfig>
 8102b22:	e00f      	b.n	8102b44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b28:	b29a      	uxth	r2, r3
 8102b2a:	68fb      	ldr	r3, [r7, #12]
 8102b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b32:	b2da      	uxtb	r2, r3
 8102b34:	8979      	ldrh	r1, [r7, #10]
 8102b36:	2300      	movs	r3, #0
 8102b38:	9300      	str	r3, [sp, #0]
 8102b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102b3e:	68f8      	ldr	r0, [r7, #12]
 8102b40:	f000 fcc6 	bl	81034d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8102b44:	68fb      	ldr	r3, [r7, #12]
 8102b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b48:	b29b      	uxth	r3, r3
 8102b4a:	2b00      	cmp	r3, #0
 8102b4c:	d19e      	bne.n	8102a8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102b4e:	697a      	ldr	r2, [r7, #20]
 8102b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102b52:	68f8      	ldr	r0, [r7, #12]
 8102b54:	f000 fb94 	bl	8103280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102b58:	4603      	mov	r3, r0
 8102b5a:	2b00      	cmp	r3, #0
 8102b5c:	d001      	beq.n	8102b62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102b5e:	2301      	movs	r3, #1
 8102b60:	e01a      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b62:	68fb      	ldr	r3, [r7, #12]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	2220      	movs	r2, #32
 8102b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	6859      	ldr	r1, [r3, #4]
 8102b70:	68fb      	ldr	r3, [r7, #12]
 8102b72:	681a      	ldr	r2, [r3, #0]
 8102b74:	4b0a      	ldr	r3, [pc, #40]	; (8102ba0 <HAL_I2C_Mem_Write+0x224>)
 8102b76:	400b      	ands	r3, r1
 8102b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102b7a:	68fb      	ldr	r3, [r7, #12]
 8102b7c:	2220      	movs	r2, #32
 8102b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102b82:	68fb      	ldr	r3, [r7, #12]
 8102b84:	2200      	movs	r2, #0
 8102b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102b8a:	68fb      	ldr	r3, [r7, #12]
 8102b8c:	2200      	movs	r2, #0
 8102b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102b92:	2300      	movs	r3, #0
 8102b94:	e000      	b.n	8102b98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102b96:	2302      	movs	r3, #2
  }
}
 8102b98:	4618      	mov	r0, r3
 8102b9a:	3718      	adds	r7, #24
 8102b9c:	46bd      	mov	sp, r7
 8102b9e:	bd80      	pop	{r7, pc}
 8102ba0:	fe00e800 	.word	0xfe00e800

08102ba4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102ba4:	b580      	push	{r7, lr}
 8102ba6:	b088      	sub	sp, #32
 8102ba8:	af02      	add	r7, sp, #8
 8102baa:	60f8      	str	r0, [r7, #12]
 8102bac:	4608      	mov	r0, r1
 8102bae:	4611      	mov	r1, r2
 8102bb0:	461a      	mov	r2, r3
 8102bb2:	4603      	mov	r3, r0
 8102bb4:	817b      	strh	r3, [r7, #10]
 8102bb6:	460b      	mov	r3, r1
 8102bb8:	813b      	strh	r3, [r7, #8]
 8102bba:	4613      	mov	r3, r2
 8102bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102bbe:	68fb      	ldr	r3, [r7, #12]
 8102bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102bc4:	b2db      	uxtb	r3, r3
 8102bc6:	2b20      	cmp	r3, #32
 8102bc8:	f040 80fd 	bne.w	8102dc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102bcc:	6a3b      	ldr	r3, [r7, #32]
 8102bce:	2b00      	cmp	r3, #0
 8102bd0:	d002      	beq.n	8102bd8 <HAL_I2C_Mem_Read+0x34>
 8102bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102bd4:	2b00      	cmp	r3, #0
 8102bd6:	d105      	bne.n	8102be4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102bde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102be0:	2301      	movs	r3, #1
 8102be2:	e0f1      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102bea:	2b01      	cmp	r3, #1
 8102bec:	d101      	bne.n	8102bf2 <HAL_I2C_Mem_Read+0x4e>
 8102bee:	2302      	movs	r3, #2
 8102bf0:	e0ea      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
 8102bf2:	68fb      	ldr	r3, [r7, #12]
 8102bf4:	2201      	movs	r2, #1
 8102bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102bfa:	f7ff fb2b 	bl	8102254 <HAL_GetTick>
 8102bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102c00:	697b      	ldr	r3, [r7, #20]
 8102c02:	9300      	str	r3, [sp, #0]
 8102c04:	2319      	movs	r3, #25
 8102c06:	2201      	movs	r2, #1
 8102c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102c0c:	68f8      	ldr	r0, [r7, #12]
 8102c0e:	f000 fab7 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102c12:	4603      	mov	r3, r0
 8102c14:	2b00      	cmp	r3, #0
 8102c16:	d001      	beq.n	8102c1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102c18:	2301      	movs	r3, #1
 8102c1a:	e0d5      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102c1c:	68fb      	ldr	r3, [r7, #12]
 8102c1e:	2222      	movs	r2, #34	; 0x22
 8102c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102c24:	68fb      	ldr	r3, [r7, #12]
 8102c26:	2240      	movs	r2, #64	; 0x40
 8102c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102c2c:	68fb      	ldr	r3, [r7, #12]
 8102c2e:	2200      	movs	r2, #0
 8102c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102c32:	68fb      	ldr	r3, [r7, #12]
 8102c34:	6a3a      	ldr	r2, [r7, #32]
 8102c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	2200      	movs	r2, #0
 8102c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102c44:	88f8      	ldrh	r0, [r7, #6]
 8102c46:	893a      	ldrh	r2, [r7, #8]
 8102c48:	8979      	ldrh	r1, [r7, #10]
 8102c4a:	697b      	ldr	r3, [r7, #20]
 8102c4c:	9301      	str	r3, [sp, #4]
 8102c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102c50:	9300      	str	r3, [sp, #0]
 8102c52:	4603      	mov	r3, r0
 8102c54:	68f8      	ldr	r0, [r7, #12]
 8102c56:	f000 fa1b 	bl	8103090 <I2C_RequestMemoryRead>
 8102c5a:	4603      	mov	r3, r0
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d005      	beq.n	8102c6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	2200      	movs	r2, #0
 8102c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102c68:	2301      	movs	r3, #1
 8102c6a:	e0ad      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102c70:	b29b      	uxth	r3, r3
 8102c72:	2bff      	cmp	r3, #255	; 0xff
 8102c74:	d90e      	bls.n	8102c94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	22ff      	movs	r2, #255	; 0xff
 8102c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102c7c:	68fb      	ldr	r3, [r7, #12]
 8102c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102c80:	b2da      	uxtb	r2, r3
 8102c82:	8979      	ldrh	r1, [r7, #10]
 8102c84:	4b52      	ldr	r3, [pc, #328]	; (8102dd0 <HAL_I2C_Mem_Read+0x22c>)
 8102c86:	9300      	str	r3, [sp, #0]
 8102c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102c8c:	68f8      	ldr	r0, [r7, #12]
 8102c8e:	f000 fc1f 	bl	81034d0 <I2C_TransferConfig>
 8102c92:	e00f      	b.n	8102cb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102c98:	b29a      	uxth	r2, r3
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ca2:	b2da      	uxtb	r2, r3
 8102ca4:	8979      	ldrh	r1, [r7, #10]
 8102ca6:	4b4a      	ldr	r3, [pc, #296]	; (8102dd0 <HAL_I2C_Mem_Read+0x22c>)
 8102ca8:	9300      	str	r3, [sp, #0]
 8102caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102cae:	68f8      	ldr	r0, [r7, #12]
 8102cb0:	f000 fc0e 	bl	81034d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102cb4:	697b      	ldr	r3, [r7, #20]
 8102cb6:	9300      	str	r3, [sp, #0]
 8102cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102cba:	2200      	movs	r2, #0
 8102cbc:	2104      	movs	r1, #4
 8102cbe:	68f8      	ldr	r0, [r7, #12]
 8102cc0:	f000 fa5e 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102cc4:	4603      	mov	r3, r0
 8102cc6:	2b00      	cmp	r3, #0
 8102cc8:	d001      	beq.n	8102cce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102cca:	2301      	movs	r3, #1
 8102ccc:	e07c      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102cd4:	68fb      	ldr	r3, [r7, #12]
 8102cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102cd8:	b2d2      	uxtb	r2, r2
 8102cda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102cdc:	68fb      	ldr	r3, [r7, #12]
 8102cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ce0:	1c5a      	adds	r2, r3, #1
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102ce6:	68fb      	ldr	r3, [r7, #12]
 8102ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102cea:	3b01      	subs	r3, #1
 8102cec:	b29a      	uxth	r2, r3
 8102cee:	68fb      	ldr	r3, [r7, #12]
 8102cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102cf2:	68fb      	ldr	r3, [r7, #12]
 8102cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102cf6:	b29b      	uxth	r3, r3
 8102cf8:	3b01      	subs	r3, #1
 8102cfa:	b29a      	uxth	r2, r3
 8102cfc:	68fb      	ldr	r3, [r7, #12]
 8102cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d04:	b29b      	uxth	r3, r3
 8102d06:	2b00      	cmp	r3, #0
 8102d08:	d034      	beq.n	8102d74 <HAL_I2C_Mem_Read+0x1d0>
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102d0e:	2b00      	cmp	r3, #0
 8102d10:	d130      	bne.n	8102d74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102d12:	697b      	ldr	r3, [r7, #20]
 8102d14:	9300      	str	r3, [sp, #0]
 8102d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d18:	2200      	movs	r2, #0
 8102d1a:	2180      	movs	r1, #128	; 0x80
 8102d1c:	68f8      	ldr	r0, [r7, #12]
 8102d1e:	f000 fa2f 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102d22:	4603      	mov	r3, r0
 8102d24:	2b00      	cmp	r3, #0
 8102d26:	d001      	beq.n	8102d2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102d28:	2301      	movs	r3, #1
 8102d2a:	e04d      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d30:	b29b      	uxth	r3, r3
 8102d32:	2bff      	cmp	r3, #255	; 0xff
 8102d34:	d90e      	bls.n	8102d54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	22ff      	movs	r2, #255	; 0xff
 8102d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102d3c:	68fb      	ldr	r3, [r7, #12]
 8102d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102d40:	b2da      	uxtb	r2, r3
 8102d42:	8979      	ldrh	r1, [r7, #10]
 8102d44:	2300      	movs	r3, #0
 8102d46:	9300      	str	r3, [sp, #0]
 8102d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102d4c:	68f8      	ldr	r0, [r7, #12]
 8102d4e:	f000 fbbf 	bl	81034d0 <I2C_TransferConfig>
 8102d52:	e00f      	b.n	8102d74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d58:	b29a      	uxth	r2, r3
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102d62:	b2da      	uxtb	r2, r3
 8102d64:	8979      	ldrh	r1, [r7, #10]
 8102d66:	2300      	movs	r3, #0
 8102d68:	9300      	str	r3, [sp, #0]
 8102d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102d6e:	68f8      	ldr	r0, [r7, #12]
 8102d70:	f000 fbae 	bl	81034d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102d74:	68fb      	ldr	r3, [r7, #12]
 8102d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d78:	b29b      	uxth	r3, r3
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	d19a      	bne.n	8102cb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102d7e:	697a      	ldr	r2, [r7, #20]
 8102d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102d82:	68f8      	ldr	r0, [r7, #12]
 8102d84:	f000 fa7c 	bl	8103280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102d88:	4603      	mov	r3, r0
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d001      	beq.n	8102d92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102d8e:	2301      	movs	r3, #1
 8102d90:	e01a      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102d92:	68fb      	ldr	r3, [r7, #12]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	2220      	movs	r2, #32
 8102d98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	6859      	ldr	r1, [r3, #4]
 8102da0:	68fb      	ldr	r3, [r7, #12]
 8102da2:	681a      	ldr	r2, [r3, #0]
 8102da4:	4b0b      	ldr	r3, [pc, #44]	; (8102dd4 <HAL_I2C_Mem_Read+0x230>)
 8102da6:	400b      	ands	r3, r1
 8102da8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102daa:	68fb      	ldr	r3, [r7, #12]
 8102dac:	2220      	movs	r2, #32
 8102dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102db2:	68fb      	ldr	r3, [r7, #12]
 8102db4:	2200      	movs	r2, #0
 8102db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102dba:	68fb      	ldr	r3, [r7, #12]
 8102dbc:	2200      	movs	r2, #0
 8102dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102dc2:	2300      	movs	r3, #0
 8102dc4:	e000      	b.n	8102dc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102dc6:	2302      	movs	r3, #2
  }
}
 8102dc8:	4618      	mov	r0, r3
 8102dca:	3718      	adds	r7, #24
 8102dcc:	46bd      	mov	sp, r7
 8102dce:	bd80      	pop	{r7, pc}
 8102dd0:	80002400 	.word	0x80002400
 8102dd4:	fe00e800 	.word	0xfe00e800

08102dd8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8102dd8:	b580      	push	{r7, lr}
 8102dda:	b08a      	sub	sp, #40	; 0x28
 8102ddc:	af02      	add	r7, sp, #8
 8102dde:	60f8      	str	r0, [r7, #12]
 8102de0:	607a      	str	r2, [r7, #4]
 8102de2:	603b      	str	r3, [r7, #0]
 8102de4:	460b      	mov	r3, r1
 8102de6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8102de8:	2300      	movs	r3, #0
 8102dea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102df2:	b2db      	uxtb	r3, r3
 8102df4:	2b20      	cmp	r3, #32
 8102df6:	f040 80f1 	bne.w	8102fdc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8102dfa:	68fb      	ldr	r3, [r7, #12]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	699b      	ldr	r3, [r3, #24]
 8102e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102e08:	d101      	bne.n	8102e0e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8102e0a:	2302      	movs	r3, #2
 8102e0c:	e0e7      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102e0e:	68fb      	ldr	r3, [r7, #12]
 8102e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102e14:	2b01      	cmp	r3, #1
 8102e16:	d101      	bne.n	8102e1c <HAL_I2C_IsDeviceReady+0x44>
 8102e18:	2302      	movs	r3, #2
 8102e1a:	e0e0      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	2201      	movs	r2, #1
 8102e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	2224      	movs	r2, #36	; 0x24
 8102e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102e2c:	68fb      	ldr	r3, [r7, #12]
 8102e2e:	2200      	movs	r2, #0
 8102e30:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8102e32:	68fb      	ldr	r3, [r7, #12]
 8102e34:	68db      	ldr	r3, [r3, #12]
 8102e36:	2b01      	cmp	r3, #1
 8102e38:	d107      	bne.n	8102e4a <HAL_I2C_IsDeviceReady+0x72>
 8102e3a:	897b      	ldrh	r3, [r7, #10]
 8102e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102e44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8102e48:	e004      	b.n	8102e54 <HAL_I2C_IsDeviceReady+0x7c>
 8102e4a:	897b      	ldrh	r3, [r7, #10]
 8102e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102e50:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8102e54:	68fa      	ldr	r2, [r7, #12]
 8102e56:	6812      	ldr	r2, [r2, #0]
 8102e58:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8102e5a:	f7ff f9fb 	bl	8102254 <HAL_GetTick>
 8102e5e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	699b      	ldr	r3, [r3, #24]
 8102e66:	f003 0320 	and.w	r3, r3, #32
 8102e6a:	2b20      	cmp	r3, #32
 8102e6c:	bf0c      	ite	eq
 8102e6e:	2301      	moveq	r3, #1
 8102e70:	2300      	movne	r3, #0
 8102e72:	b2db      	uxtb	r3, r3
 8102e74:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	699b      	ldr	r3, [r3, #24]
 8102e7c:	f003 0310 	and.w	r3, r3, #16
 8102e80:	2b10      	cmp	r3, #16
 8102e82:	bf0c      	ite	eq
 8102e84:	2301      	moveq	r3, #1
 8102e86:	2300      	movne	r3, #0
 8102e88:	b2db      	uxtb	r3, r3
 8102e8a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102e8c:	e034      	b.n	8102ef8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8102e8e:	683b      	ldr	r3, [r7, #0]
 8102e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e94:	d01a      	beq.n	8102ecc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102e96:	f7ff f9dd 	bl	8102254 <HAL_GetTick>
 8102e9a:	4602      	mov	r2, r0
 8102e9c:	69bb      	ldr	r3, [r7, #24]
 8102e9e:	1ad3      	subs	r3, r2, r3
 8102ea0:	683a      	ldr	r2, [r7, #0]
 8102ea2:	429a      	cmp	r2, r3
 8102ea4:	d302      	bcc.n	8102eac <HAL_I2C_IsDeviceReady+0xd4>
 8102ea6:	683b      	ldr	r3, [r7, #0]
 8102ea8:	2b00      	cmp	r3, #0
 8102eaa:	d10f      	bne.n	8102ecc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8102eac:	68fb      	ldr	r3, [r7, #12]
 8102eae:	2220      	movs	r2, #32
 8102eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102eb4:	68fb      	ldr	r3, [r7, #12]
 8102eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102eb8:	f043 0220 	orr.w	r2, r3, #32
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	2200      	movs	r2, #0
 8102ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8102ec8:	2301      	movs	r3, #1
 8102eca:	e088      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102ecc:	68fb      	ldr	r3, [r7, #12]
 8102ece:	681b      	ldr	r3, [r3, #0]
 8102ed0:	699b      	ldr	r3, [r3, #24]
 8102ed2:	f003 0320 	and.w	r3, r3, #32
 8102ed6:	2b20      	cmp	r3, #32
 8102ed8:	bf0c      	ite	eq
 8102eda:	2301      	moveq	r3, #1
 8102edc:	2300      	movne	r3, #0
 8102ede:	b2db      	uxtb	r3, r3
 8102ee0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102ee2:	68fb      	ldr	r3, [r7, #12]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	699b      	ldr	r3, [r3, #24]
 8102ee8:	f003 0310 	and.w	r3, r3, #16
 8102eec:	2b10      	cmp	r3, #16
 8102eee:	bf0c      	ite	eq
 8102ef0:	2301      	moveq	r3, #1
 8102ef2:	2300      	movne	r3, #0
 8102ef4:	b2db      	uxtb	r3, r3
 8102ef6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102ef8:	7ffb      	ldrb	r3, [r7, #31]
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d102      	bne.n	8102f04 <HAL_I2C_IsDeviceReady+0x12c>
 8102efe:	7fbb      	ldrb	r3, [r7, #30]
 8102f00:	2b00      	cmp	r3, #0
 8102f02:	d0c4      	beq.n	8102e8e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	699b      	ldr	r3, [r3, #24]
 8102f0a:	f003 0310 	and.w	r3, r3, #16
 8102f0e:	2b10      	cmp	r3, #16
 8102f10:	d01a      	beq.n	8102f48 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102f12:	69bb      	ldr	r3, [r7, #24]
 8102f14:	9300      	str	r3, [sp, #0]
 8102f16:	683b      	ldr	r3, [r7, #0]
 8102f18:	2200      	movs	r2, #0
 8102f1a:	2120      	movs	r1, #32
 8102f1c:	68f8      	ldr	r0, [r7, #12]
 8102f1e:	f000 f92f 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102f22:	4603      	mov	r3, r0
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d001      	beq.n	8102f2c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8102f28:	2301      	movs	r3, #1
 8102f2a:	e058      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102f2c:	68fb      	ldr	r3, [r7, #12]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	2220      	movs	r2, #32
 8102f32:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8102f34:	68fb      	ldr	r3, [r7, #12]
 8102f36:	2220      	movs	r2, #32
 8102f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102f3c:	68fb      	ldr	r3, [r7, #12]
 8102f3e:	2200      	movs	r2, #0
 8102f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8102f44:	2300      	movs	r3, #0
 8102f46:	e04a      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102f48:	69bb      	ldr	r3, [r7, #24]
 8102f4a:	9300      	str	r3, [sp, #0]
 8102f4c:	683b      	ldr	r3, [r7, #0]
 8102f4e:	2200      	movs	r2, #0
 8102f50:	2120      	movs	r1, #32
 8102f52:	68f8      	ldr	r0, [r7, #12]
 8102f54:	f000 f914 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102f58:	4603      	mov	r3, r0
 8102f5a:	2b00      	cmp	r3, #0
 8102f5c:	d001      	beq.n	8102f62 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8102f5e:	2301      	movs	r3, #1
 8102f60:	e03d      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102f62:	68fb      	ldr	r3, [r7, #12]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	2210      	movs	r2, #16
 8102f68:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	2220      	movs	r2, #32
 8102f70:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8102f72:	697b      	ldr	r3, [r7, #20]
 8102f74:	687a      	ldr	r2, [r7, #4]
 8102f76:	429a      	cmp	r2, r3
 8102f78:	d118      	bne.n	8102fac <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102f7a:	68fb      	ldr	r3, [r7, #12]
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	685a      	ldr	r2, [r3, #4]
 8102f80:	68fb      	ldr	r3, [r7, #12]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102f88:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102f8a:	69bb      	ldr	r3, [r7, #24]
 8102f8c:	9300      	str	r3, [sp, #0]
 8102f8e:	683b      	ldr	r3, [r7, #0]
 8102f90:	2200      	movs	r2, #0
 8102f92:	2120      	movs	r1, #32
 8102f94:	68f8      	ldr	r0, [r7, #12]
 8102f96:	f000 f8f3 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8102f9a:	4603      	mov	r3, r0
 8102f9c:	2b00      	cmp	r3, #0
 8102f9e:	d001      	beq.n	8102fa4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8102fa0:	2301      	movs	r3, #1
 8102fa2:	e01c      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	2220      	movs	r2, #32
 8102faa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102fac:	697b      	ldr	r3, [r7, #20]
 8102fae:	3301      	adds	r3, #1
 8102fb0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102fb2:	697b      	ldr	r3, [r7, #20]
 8102fb4:	687a      	ldr	r2, [r7, #4]
 8102fb6:	429a      	cmp	r2, r3
 8102fb8:	f63f af3b 	bhi.w	8102e32 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102fbc:	68fb      	ldr	r3, [r7, #12]
 8102fbe:	2220      	movs	r2, #32
 8102fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102fc4:	68fb      	ldr	r3, [r7, #12]
 8102fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102fc8:	f043 0220 	orr.w	r2, r3, #32
 8102fcc:	68fb      	ldr	r3, [r7, #12]
 8102fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102fd0:	68fb      	ldr	r3, [r7, #12]
 8102fd2:	2200      	movs	r2, #0
 8102fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102fd8:	2301      	movs	r3, #1
 8102fda:	e000      	b.n	8102fde <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8102fdc:	2302      	movs	r3, #2
  }
}
 8102fde:	4618      	mov	r0, r3
 8102fe0:	3720      	adds	r7, #32
 8102fe2:	46bd      	mov	sp, r7
 8102fe4:	bd80      	pop	{r7, pc}
	...

08102fe8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8102fe8:	b580      	push	{r7, lr}
 8102fea:	b086      	sub	sp, #24
 8102fec:	af02      	add	r7, sp, #8
 8102fee:	60f8      	str	r0, [r7, #12]
 8102ff0:	4608      	mov	r0, r1
 8102ff2:	4611      	mov	r1, r2
 8102ff4:	461a      	mov	r2, r3
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	817b      	strh	r3, [r7, #10]
 8102ffa:	460b      	mov	r3, r1
 8102ffc:	813b      	strh	r3, [r7, #8]
 8102ffe:	4613      	mov	r3, r2
 8103000:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8103002:	88fb      	ldrh	r3, [r7, #6]
 8103004:	b2da      	uxtb	r2, r3
 8103006:	8979      	ldrh	r1, [r7, #10]
 8103008:	4b20      	ldr	r3, [pc, #128]	; (810308c <I2C_RequestMemoryWrite+0xa4>)
 810300a:	9300      	str	r3, [sp, #0]
 810300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103010:	68f8      	ldr	r0, [r7, #12]
 8103012:	f000 fa5d 	bl	81034d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103016:	69fa      	ldr	r2, [r7, #28]
 8103018:	69b9      	ldr	r1, [r7, #24]
 810301a:	68f8      	ldr	r0, [r7, #12]
 810301c:	f000 f8f0 	bl	8103200 <I2C_WaitOnTXISFlagUntilTimeout>
 8103020:	4603      	mov	r3, r0
 8103022:	2b00      	cmp	r3, #0
 8103024:	d001      	beq.n	810302a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8103026:	2301      	movs	r3, #1
 8103028:	e02c      	b.n	8103084 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810302a:	88fb      	ldrh	r3, [r7, #6]
 810302c:	2b01      	cmp	r3, #1
 810302e:	d105      	bne.n	810303c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103030:	893b      	ldrh	r3, [r7, #8]
 8103032:	b2da      	uxtb	r2, r3
 8103034:	68fb      	ldr	r3, [r7, #12]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	629a      	str	r2, [r3, #40]	; 0x28
 810303a:	e015      	b.n	8103068 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810303c:	893b      	ldrh	r3, [r7, #8]
 810303e:	0a1b      	lsrs	r3, r3, #8
 8103040:	b29b      	uxth	r3, r3
 8103042:	b2da      	uxtb	r2, r3
 8103044:	68fb      	ldr	r3, [r7, #12]
 8103046:	681b      	ldr	r3, [r3, #0]
 8103048:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810304a:	69fa      	ldr	r2, [r7, #28]
 810304c:	69b9      	ldr	r1, [r7, #24]
 810304e:	68f8      	ldr	r0, [r7, #12]
 8103050:	f000 f8d6 	bl	8103200 <I2C_WaitOnTXISFlagUntilTimeout>
 8103054:	4603      	mov	r3, r0
 8103056:	2b00      	cmp	r3, #0
 8103058:	d001      	beq.n	810305e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810305a:	2301      	movs	r3, #1
 810305c:	e012      	b.n	8103084 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810305e:	893b      	ldrh	r3, [r7, #8]
 8103060:	b2da      	uxtb	r2, r3
 8103062:	68fb      	ldr	r3, [r7, #12]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8103068:	69fb      	ldr	r3, [r7, #28]
 810306a:	9300      	str	r3, [sp, #0]
 810306c:	69bb      	ldr	r3, [r7, #24]
 810306e:	2200      	movs	r2, #0
 8103070:	2180      	movs	r1, #128	; 0x80
 8103072:	68f8      	ldr	r0, [r7, #12]
 8103074:	f000 f884 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 8103078:	4603      	mov	r3, r0
 810307a:	2b00      	cmp	r3, #0
 810307c:	d001      	beq.n	8103082 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810307e:	2301      	movs	r3, #1
 8103080:	e000      	b.n	8103084 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8103082:	2300      	movs	r3, #0
}
 8103084:	4618      	mov	r0, r3
 8103086:	3710      	adds	r7, #16
 8103088:	46bd      	mov	sp, r7
 810308a:	bd80      	pop	{r7, pc}
 810308c:	80002000 	.word	0x80002000

08103090 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8103090:	b580      	push	{r7, lr}
 8103092:	b086      	sub	sp, #24
 8103094:	af02      	add	r7, sp, #8
 8103096:	60f8      	str	r0, [r7, #12]
 8103098:	4608      	mov	r0, r1
 810309a:	4611      	mov	r1, r2
 810309c:	461a      	mov	r2, r3
 810309e:	4603      	mov	r3, r0
 81030a0:	817b      	strh	r3, [r7, #10]
 81030a2:	460b      	mov	r3, r1
 81030a4:	813b      	strh	r3, [r7, #8]
 81030a6:	4613      	mov	r3, r2
 81030a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81030aa:	88fb      	ldrh	r3, [r7, #6]
 81030ac:	b2da      	uxtb	r2, r3
 81030ae:	8979      	ldrh	r1, [r7, #10]
 81030b0:	4b20      	ldr	r3, [pc, #128]	; (8103134 <I2C_RequestMemoryRead+0xa4>)
 81030b2:	9300      	str	r3, [sp, #0]
 81030b4:	2300      	movs	r3, #0
 81030b6:	68f8      	ldr	r0, [r7, #12]
 81030b8:	f000 fa0a 	bl	81034d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81030bc:	69fa      	ldr	r2, [r7, #28]
 81030be:	69b9      	ldr	r1, [r7, #24]
 81030c0:	68f8      	ldr	r0, [r7, #12]
 81030c2:	f000 f89d 	bl	8103200 <I2C_WaitOnTXISFlagUntilTimeout>
 81030c6:	4603      	mov	r3, r0
 81030c8:	2b00      	cmp	r3, #0
 81030ca:	d001      	beq.n	81030d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81030cc:	2301      	movs	r3, #1
 81030ce:	e02c      	b.n	810312a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81030d0:	88fb      	ldrh	r3, [r7, #6]
 81030d2:	2b01      	cmp	r3, #1
 81030d4:	d105      	bne.n	81030e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81030d6:	893b      	ldrh	r3, [r7, #8]
 81030d8:	b2da      	uxtb	r2, r3
 81030da:	68fb      	ldr	r3, [r7, #12]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	629a      	str	r2, [r3, #40]	; 0x28
 81030e0:	e015      	b.n	810310e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81030e2:	893b      	ldrh	r3, [r7, #8]
 81030e4:	0a1b      	lsrs	r3, r3, #8
 81030e6:	b29b      	uxth	r3, r3
 81030e8:	b2da      	uxtb	r2, r3
 81030ea:	68fb      	ldr	r3, [r7, #12]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81030f0:	69fa      	ldr	r2, [r7, #28]
 81030f2:	69b9      	ldr	r1, [r7, #24]
 81030f4:	68f8      	ldr	r0, [r7, #12]
 81030f6:	f000 f883 	bl	8103200 <I2C_WaitOnTXISFlagUntilTimeout>
 81030fa:	4603      	mov	r3, r0
 81030fc:	2b00      	cmp	r3, #0
 81030fe:	d001      	beq.n	8103104 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8103100:	2301      	movs	r3, #1
 8103102:	e012      	b.n	810312a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103104:	893b      	ldrh	r3, [r7, #8]
 8103106:	b2da      	uxtb	r2, r3
 8103108:	68fb      	ldr	r3, [r7, #12]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810310e:	69fb      	ldr	r3, [r7, #28]
 8103110:	9300      	str	r3, [sp, #0]
 8103112:	69bb      	ldr	r3, [r7, #24]
 8103114:	2200      	movs	r2, #0
 8103116:	2140      	movs	r1, #64	; 0x40
 8103118:	68f8      	ldr	r0, [r7, #12]
 810311a:	f000 f831 	bl	8103180 <I2C_WaitOnFlagUntilTimeout>
 810311e:	4603      	mov	r3, r0
 8103120:	2b00      	cmp	r3, #0
 8103122:	d001      	beq.n	8103128 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8103124:	2301      	movs	r3, #1
 8103126:	e000      	b.n	810312a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8103128:	2300      	movs	r3, #0
}
 810312a:	4618      	mov	r0, r3
 810312c:	3710      	adds	r7, #16
 810312e:	46bd      	mov	sp, r7
 8103130:	bd80      	pop	{r7, pc}
 8103132:	bf00      	nop
 8103134:	80002000 	.word	0x80002000

08103138 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103138:	b480      	push	{r7}
 810313a:	b083      	sub	sp, #12
 810313c:	af00      	add	r7, sp, #0
 810313e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	699b      	ldr	r3, [r3, #24]
 8103146:	f003 0302 	and.w	r3, r3, #2
 810314a:	2b02      	cmp	r3, #2
 810314c:	d103      	bne.n	8103156 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	2200      	movs	r2, #0
 8103154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	699b      	ldr	r3, [r3, #24]
 810315c:	f003 0301 	and.w	r3, r3, #1
 8103160:	2b01      	cmp	r3, #1
 8103162:	d007      	beq.n	8103174 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	699a      	ldr	r2, [r3, #24]
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	f042 0201 	orr.w	r2, r2, #1
 8103172:	619a      	str	r2, [r3, #24]
  }
}
 8103174:	bf00      	nop
 8103176:	370c      	adds	r7, #12
 8103178:	46bd      	mov	sp, r7
 810317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810317e:	4770      	bx	lr

08103180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103180:	b580      	push	{r7, lr}
 8103182:	b084      	sub	sp, #16
 8103184:	af00      	add	r7, sp, #0
 8103186:	60f8      	str	r0, [r7, #12]
 8103188:	60b9      	str	r1, [r7, #8]
 810318a:	603b      	str	r3, [r7, #0]
 810318c:	4613      	mov	r3, r2
 810318e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103190:	e022      	b.n	81031d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103192:	683b      	ldr	r3, [r7, #0]
 8103194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103198:	d01e      	beq.n	81031d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810319a:	f7ff f85b 	bl	8102254 <HAL_GetTick>
 810319e:	4602      	mov	r2, r0
 81031a0:	69bb      	ldr	r3, [r7, #24]
 81031a2:	1ad3      	subs	r3, r2, r3
 81031a4:	683a      	ldr	r2, [r7, #0]
 81031a6:	429a      	cmp	r2, r3
 81031a8:	d302      	bcc.n	81031b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 81031aa:	683b      	ldr	r3, [r7, #0]
 81031ac:	2b00      	cmp	r3, #0
 81031ae:	d113      	bne.n	81031d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81031b0:	68fb      	ldr	r3, [r7, #12]
 81031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031b4:	f043 0220 	orr.w	r2, r3, #32
 81031b8:	68fb      	ldr	r3, [r7, #12]
 81031ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81031bc:	68fb      	ldr	r3, [r7, #12]
 81031be:	2220      	movs	r2, #32
 81031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81031c4:	68fb      	ldr	r3, [r7, #12]
 81031c6:	2200      	movs	r2, #0
 81031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81031cc:	68fb      	ldr	r3, [r7, #12]
 81031ce:	2200      	movs	r2, #0
 81031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81031d4:	2301      	movs	r3, #1
 81031d6:	e00f      	b.n	81031f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81031d8:	68fb      	ldr	r3, [r7, #12]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	699a      	ldr	r2, [r3, #24]
 81031de:	68bb      	ldr	r3, [r7, #8]
 81031e0:	4013      	ands	r3, r2
 81031e2:	68ba      	ldr	r2, [r7, #8]
 81031e4:	429a      	cmp	r2, r3
 81031e6:	bf0c      	ite	eq
 81031e8:	2301      	moveq	r3, #1
 81031ea:	2300      	movne	r3, #0
 81031ec:	b2db      	uxtb	r3, r3
 81031ee:	461a      	mov	r2, r3
 81031f0:	79fb      	ldrb	r3, [r7, #7]
 81031f2:	429a      	cmp	r2, r3
 81031f4:	d0cd      	beq.n	8103192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81031f6:	2300      	movs	r3, #0
}
 81031f8:	4618      	mov	r0, r3
 81031fa:	3710      	adds	r7, #16
 81031fc:	46bd      	mov	sp, r7
 81031fe:	bd80      	pop	{r7, pc}

08103200 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103200:	b580      	push	{r7, lr}
 8103202:	b084      	sub	sp, #16
 8103204:	af00      	add	r7, sp, #0
 8103206:	60f8      	str	r0, [r7, #12]
 8103208:	60b9      	str	r1, [r7, #8]
 810320a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810320c:	e02c      	b.n	8103268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810320e:	687a      	ldr	r2, [r7, #4]
 8103210:	68b9      	ldr	r1, [r7, #8]
 8103212:	68f8      	ldr	r0, [r7, #12]
 8103214:	f000 f870 	bl	81032f8 <I2C_IsErrorOccurred>
 8103218:	4603      	mov	r3, r0
 810321a:	2b00      	cmp	r3, #0
 810321c:	d001      	beq.n	8103222 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810321e:	2301      	movs	r3, #1
 8103220:	e02a      	b.n	8103278 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103222:	68bb      	ldr	r3, [r7, #8]
 8103224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103228:	d01e      	beq.n	8103268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810322a:	f7ff f813 	bl	8102254 <HAL_GetTick>
 810322e:	4602      	mov	r2, r0
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	1ad3      	subs	r3, r2, r3
 8103234:	68ba      	ldr	r2, [r7, #8]
 8103236:	429a      	cmp	r2, r3
 8103238:	d302      	bcc.n	8103240 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810323a:	68bb      	ldr	r3, [r7, #8]
 810323c:	2b00      	cmp	r3, #0
 810323e:	d113      	bne.n	8103268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103240:	68fb      	ldr	r3, [r7, #12]
 8103242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103244:	f043 0220 	orr.w	r2, r3, #32
 8103248:	68fb      	ldr	r3, [r7, #12]
 810324a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810324c:	68fb      	ldr	r3, [r7, #12]
 810324e:	2220      	movs	r2, #32
 8103250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103254:	68fb      	ldr	r3, [r7, #12]
 8103256:	2200      	movs	r2, #0
 8103258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810325c:	68fb      	ldr	r3, [r7, #12]
 810325e:	2200      	movs	r2, #0
 8103260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103264:	2301      	movs	r3, #1
 8103266:	e007      	b.n	8103278 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103268:	68fb      	ldr	r3, [r7, #12]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	699b      	ldr	r3, [r3, #24]
 810326e:	f003 0302 	and.w	r3, r3, #2
 8103272:	2b02      	cmp	r3, #2
 8103274:	d1cb      	bne.n	810320e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103276:	2300      	movs	r3, #0
}
 8103278:	4618      	mov	r0, r3
 810327a:	3710      	adds	r7, #16
 810327c:	46bd      	mov	sp, r7
 810327e:	bd80      	pop	{r7, pc}

08103280 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103280:	b580      	push	{r7, lr}
 8103282:	b084      	sub	sp, #16
 8103284:	af00      	add	r7, sp, #0
 8103286:	60f8      	str	r0, [r7, #12]
 8103288:	60b9      	str	r1, [r7, #8]
 810328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810328c:	e028      	b.n	81032e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810328e:	687a      	ldr	r2, [r7, #4]
 8103290:	68b9      	ldr	r1, [r7, #8]
 8103292:	68f8      	ldr	r0, [r7, #12]
 8103294:	f000 f830 	bl	81032f8 <I2C_IsErrorOccurred>
 8103298:	4603      	mov	r3, r0
 810329a:	2b00      	cmp	r3, #0
 810329c:	d001      	beq.n	81032a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810329e:	2301      	movs	r3, #1
 81032a0:	e026      	b.n	81032f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81032a2:	f7fe ffd7 	bl	8102254 <HAL_GetTick>
 81032a6:	4602      	mov	r2, r0
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	1ad3      	subs	r3, r2, r3
 81032ac:	68ba      	ldr	r2, [r7, #8]
 81032ae:	429a      	cmp	r2, r3
 81032b0:	d302      	bcc.n	81032b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81032b2:	68bb      	ldr	r3, [r7, #8]
 81032b4:	2b00      	cmp	r3, #0
 81032b6:	d113      	bne.n	81032e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032bc:	f043 0220 	orr.w	r2, r3, #32
 81032c0:	68fb      	ldr	r3, [r7, #12]
 81032c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81032c4:	68fb      	ldr	r3, [r7, #12]
 81032c6:	2220      	movs	r2, #32
 81032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81032cc:	68fb      	ldr	r3, [r7, #12]
 81032ce:	2200      	movs	r2, #0
 81032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81032d4:	68fb      	ldr	r3, [r7, #12]
 81032d6:	2200      	movs	r2, #0
 81032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81032dc:	2301      	movs	r3, #1
 81032de:	e007      	b.n	81032f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81032e0:	68fb      	ldr	r3, [r7, #12]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	699b      	ldr	r3, [r3, #24]
 81032e6:	f003 0320 	and.w	r3, r3, #32
 81032ea:	2b20      	cmp	r3, #32
 81032ec:	d1cf      	bne.n	810328e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81032ee:	2300      	movs	r3, #0
}
 81032f0:	4618      	mov	r0, r3
 81032f2:	3710      	adds	r7, #16
 81032f4:	46bd      	mov	sp, r7
 81032f6:	bd80      	pop	{r7, pc}

081032f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81032f8:	b580      	push	{r7, lr}
 81032fa:	b08a      	sub	sp, #40	; 0x28
 81032fc:	af00      	add	r7, sp, #0
 81032fe:	60f8      	str	r0, [r7, #12]
 8103300:	60b9      	str	r1, [r7, #8]
 8103302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103304:	2300      	movs	r3, #0
 8103306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810330a:	68fb      	ldr	r3, [r7, #12]
 810330c:	681b      	ldr	r3, [r3, #0]
 810330e:	699b      	ldr	r3, [r3, #24]
 8103310:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103312:	2300      	movs	r3, #0
 8103314:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810331a:	69bb      	ldr	r3, [r7, #24]
 810331c:	f003 0310 	and.w	r3, r3, #16
 8103320:	2b00      	cmp	r3, #0
 8103322:	d075      	beq.n	8103410 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103324:	68fb      	ldr	r3, [r7, #12]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	2210      	movs	r2, #16
 810332a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810332c:	e056      	b.n	81033dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810332e:	68bb      	ldr	r3, [r7, #8]
 8103330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103334:	d052      	beq.n	81033dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103336:	f7fe ff8d 	bl	8102254 <HAL_GetTick>
 810333a:	4602      	mov	r2, r0
 810333c:	69fb      	ldr	r3, [r7, #28]
 810333e:	1ad3      	subs	r3, r2, r3
 8103340:	68ba      	ldr	r2, [r7, #8]
 8103342:	429a      	cmp	r2, r3
 8103344:	d302      	bcc.n	810334c <I2C_IsErrorOccurred+0x54>
 8103346:	68bb      	ldr	r3, [r7, #8]
 8103348:	2b00      	cmp	r3, #0
 810334a:	d147      	bne.n	81033dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810334c:	68fb      	ldr	r3, [r7, #12]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	685b      	ldr	r3, [r3, #4]
 8103352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103356:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103358:	68fb      	ldr	r3, [r7, #12]
 810335a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810335e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103360:	68fb      	ldr	r3, [r7, #12]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	699b      	ldr	r3, [r3, #24]
 8103366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810336a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810336e:	d12e      	bne.n	81033ce <I2C_IsErrorOccurred+0xd6>
 8103370:	697b      	ldr	r3, [r7, #20]
 8103372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103376:	d02a      	beq.n	81033ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8103378:	7cfb      	ldrb	r3, [r7, #19]
 810337a:	2b20      	cmp	r3, #32
 810337c:	d027      	beq.n	81033ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810337e:	68fb      	ldr	r3, [r7, #12]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	685a      	ldr	r2, [r3, #4]
 8103384:	68fb      	ldr	r3, [r7, #12]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810338c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810338e:	f7fe ff61 	bl	8102254 <HAL_GetTick>
 8103392:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103394:	e01b      	b.n	81033ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8103396:	f7fe ff5d 	bl	8102254 <HAL_GetTick>
 810339a:	4602      	mov	r2, r0
 810339c:	69fb      	ldr	r3, [r7, #28]
 810339e:	1ad3      	subs	r3, r2, r3
 81033a0:	2b19      	cmp	r3, #25
 81033a2:	d914      	bls.n	81033ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81033a8:	f043 0220 	orr.w	r2, r3, #32
 81033ac:	68fb      	ldr	r3, [r7, #12]
 81033ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 81033b0:	68fb      	ldr	r3, [r7, #12]
 81033b2:	2220      	movs	r2, #32
 81033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	2200      	movs	r2, #0
 81033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 81033c0:	68fb      	ldr	r3, [r7, #12]
 81033c2:	2200      	movs	r2, #0
 81033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 81033c8:	2301      	movs	r3, #1
 81033ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81033ce:	68fb      	ldr	r3, [r7, #12]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	699b      	ldr	r3, [r3, #24]
 81033d4:	f003 0320 	and.w	r3, r3, #32
 81033d8:	2b20      	cmp	r3, #32
 81033da:	d1dc      	bne.n	8103396 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81033dc:	68fb      	ldr	r3, [r7, #12]
 81033de:	681b      	ldr	r3, [r3, #0]
 81033e0:	699b      	ldr	r3, [r3, #24]
 81033e2:	f003 0320 	and.w	r3, r3, #32
 81033e6:	2b20      	cmp	r3, #32
 81033e8:	d003      	beq.n	81033f2 <I2C_IsErrorOccurred+0xfa>
 81033ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d09d      	beq.n	810332e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81033f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	d103      	bne.n	8103402 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81033fa:	68fb      	ldr	r3, [r7, #12]
 81033fc:	681b      	ldr	r3, [r3, #0]
 81033fe:	2220      	movs	r2, #32
 8103400:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8103402:	6a3b      	ldr	r3, [r7, #32]
 8103404:	f043 0304 	orr.w	r3, r3, #4
 8103408:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810340a:	2301      	movs	r3, #1
 810340c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8103410:	68fb      	ldr	r3, [r7, #12]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	699b      	ldr	r3, [r3, #24]
 8103416:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103418:	69bb      	ldr	r3, [r7, #24]
 810341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810341e:	2b00      	cmp	r3, #0
 8103420:	d00b      	beq.n	810343a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8103422:	6a3b      	ldr	r3, [r7, #32]
 8103424:	f043 0301 	orr.w	r3, r3, #1
 8103428:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810342a:	68fb      	ldr	r3, [r7, #12]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103432:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103434:	2301      	movs	r3, #1
 8103436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810343a:	69bb      	ldr	r3, [r7, #24]
 810343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103440:	2b00      	cmp	r3, #0
 8103442:	d00b      	beq.n	810345c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8103444:	6a3b      	ldr	r3, [r7, #32]
 8103446:	f043 0308 	orr.w	r3, r3, #8
 810344a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103456:	2301      	movs	r3, #1
 8103458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810345c:	69bb      	ldr	r3, [r7, #24]
 810345e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103462:	2b00      	cmp	r3, #0
 8103464:	d00b      	beq.n	810347e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8103466:	6a3b      	ldr	r3, [r7, #32]
 8103468:	f043 0302 	orr.w	r3, r3, #2
 810346c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810346e:	68fb      	ldr	r3, [r7, #12]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103476:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103478:	2301      	movs	r3, #1
 810347a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 810347e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103482:	2b00      	cmp	r3, #0
 8103484:	d01c      	beq.n	81034c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8103486:	68f8      	ldr	r0, [r7, #12]
 8103488:	f7ff fe56 	bl	8103138 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810348c:	68fb      	ldr	r3, [r7, #12]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	6859      	ldr	r1, [r3, #4]
 8103492:	68fb      	ldr	r3, [r7, #12]
 8103494:	681a      	ldr	r2, [r3, #0]
 8103496:	4b0d      	ldr	r3, [pc, #52]	; (81034cc <I2C_IsErrorOccurred+0x1d4>)
 8103498:	400b      	ands	r3, r1
 810349a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810349c:	68fb      	ldr	r3, [r7, #12]
 810349e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81034a0:	6a3b      	ldr	r3, [r7, #32]
 81034a2:	431a      	orrs	r2, r3
 81034a4:	68fb      	ldr	r3, [r7, #12]
 81034a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81034a8:	68fb      	ldr	r3, [r7, #12]
 81034aa:	2220      	movs	r2, #32
 81034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81034b0:	68fb      	ldr	r3, [r7, #12]
 81034b2:	2200      	movs	r2, #0
 81034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81034b8:	68fb      	ldr	r3, [r7, #12]
 81034ba:	2200      	movs	r2, #0
 81034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81034c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81034c4:	4618      	mov	r0, r3
 81034c6:	3728      	adds	r7, #40	; 0x28
 81034c8:	46bd      	mov	sp, r7
 81034ca:	bd80      	pop	{r7, pc}
 81034cc:	fe00e800 	.word	0xfe00e800

081034d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81034d0:	b480      	push	{r7}
 81034d2:	b087      	sub	sp, #28
 81034d4:	af00      	add	r7, sp, #0
 81034d6:	60f8      	str	r0, [r7, #12]
 81034d8:	607b      	str	r3, [r7, #4]
 81034da:	460b      	mov	r3, r1
 81034dc:	817b      	strh	r3, [r7, #10]
 81034de:	4613      	mov	r3, r2
 81034e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81034e2:	897b      	ldrh	r3, [r7, #10]
 81034e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81034e8:	7a7b      	ldrb	r3, [r7, #9]
 81034ea:	041b      	lsls	r3, r3, #16
 81034ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81034f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81034f6:	6a3b      	ldr	r3, [r7, #32]
 81034f8:	4313      	orrs	r3, r2
 81034fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81034fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8103500:	68fb      	ldr	r3, [r7, #12]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	685a      	ldr	r2, [r3, #4]
 8103506:	6a3b      	ldr	r3, [r7, #32]
 8103508:	0d5b      	lsrs	r3, r3, #21
 810350a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810350e:	4b08      	ldr	r3, [pc, #32]	; (8103530 <I2C_TransferConfig+0x60>)
 8103510:	430b      	orrs	r3, r1
 8103512:	43db      	mvns	r3, r3
 8103514:	ea02 0103 	and.w	r1, r2, r3
 8103518:	68fb      	ldr	r3, [r7, #12]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	697a      	ldr	r2, [r7, #20]
 810351e:	430a      	orrs	r2, r1
 8103520:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8103522:	bf00      	nop
 8103524:	371c      	adds	r7, #28
 8103526:	46bd      	mov	sp, r7
 8103528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810352c:	4770      	bx	lr
 810352e:	bf00      	nop
 8103530:	03ff63ff 	.word	0x03ff63ff

08103534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103534:	b480      	push	{r7}
 8103536:	b083      	sub	sp, #12
 8103538:	af00      	add	r7, sp, #0
 810353a:	6078      	str	r0, [r7, #4]
 810353c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103544:	b2db      	uxtb	r3, r3
 8103546:	2b20      	cmp	r3, #32
 8103548:	d138      	bne.n	81035bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103550:	2b01      	cmp	r3, #1
 8103552:	d101      	bne.n	8103558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103554:	2302      	movs	r3, #2
 8103556:	e032      	b.n	81035be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	2201      	movs	r2, #1
 810355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	2224      	movs	r2, #36	; 0x24
 8103564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	681a      	ldr	r2, [r3, #0]
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	f022 0201 	bic.w	r2, r2, #1
 8103576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	681a      	ldr	r2, [r3, #0]
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8103586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	6819      	ldr	r1, [r3, #0]
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	683a      	ldr	r2, [r7, #0]
 8103594:	430a      	orrs	r2, r1
 8103596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	681a      	ldr	r2, [r3, #0]
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	681b      	ldr	r3, [r3, #0]
 81035a2:	f042 0201 	orr.w	r2, r2, #1
 81035a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	2220      	movs	r2, #32
 81035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81035b0:	687b      	ldr	r3, [r7, #4]
 81035b2:	2200      	movs	r2, #0
 81035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81035b8:	2300      	movs	r3, #0
 81035ba:	e000      	b.n	81035be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81035bc:	2302      	movs	r3, #2
  }
}
 81035be:	4618      	mov	r0, r3
 81035c0:	370c      	adds	r7, #12
 81035c2:	46bd      	mov	sp, r7
 81035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035c8:	4770      	bx	lr

081035ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81035ca:	b480      	push	{r7}
 81035cc:	b085      	sub	sp, #20
 81035ce:	af00      	add	r7, sp, #0
 81035d0:	6078      	str	r0, [r7, #4]
 81035d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81035da:	b2db      	uxtb	r3, r3
 81035dc:	2b20      	cmp	r3, #32
 81035de:	d139      	bne.n	8103654 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81035e6:	2b01      	cmp	r3, #1
 81035e8:	d101      	bne.n	81035ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81035ea:	2302      	movs	r3, #2
 81035ec:	e033      	b.n	8103656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	2201      	movs	r2, #1
 81035f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	2224      	movs	r2, #36	; 0x24
 81035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	681a      	ldr	r2, [r3, #0]
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	f022 0201 	bic.w	r2, r2, #1
 810360c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	681b      	ldr	r3, [r3, #0]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103616:	68fb      	ldr	r3, [r7, #12]
 8103618:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810361c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810361e:	683b      	ldr	r3, [r7, #0]
 8103620:	021b      	lsls	r3, r3, #8
 8103622:	68fa      	ldr	r2, [r7, #12]
 8103624:	4313      	orrs	r3, r2
 8103626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	68fa      	ldr	r2, [r7, #12]
 810362e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	681a      	ldr	r2, [r3, #0]
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	f042 0201 	orr.w	r2, r2, #1
 810363e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	2220      	movs	r2, #32
 8103644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	2200      	movs	r2, #0
 810364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103650:	2300      	movs	r3, #0
 8103652:	e000      	b.n	8103656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103654:	2302      	movs	r3, #2
  }
}
 8103656:	4618      	mov	r0, r3
 8103658:	3714      	adds	r7, #20
 810365a:	46bd      	mov	sp, r7
 810365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103660:	4770      	bx	lr
	...

08103664 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103664:	b580      	push	{r7, lr}
 8103666:	b084      	sub	sp, #16
 8103668:	af00      	add	r7, sp, #0
 810366a:	60f8      	str	r0, [r7, #12]
 810366c:	460b      	mov	r3, r1
 810366e:	607a      	str	r2, [r7, #4]
 8103670:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103672:	4b37      	ldr	r3, [pc, #220]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	f023 0201 	bic.w	r2, r3, #1
 810367a:	4935      	ldr	r1, [pc, #212]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 810367c:	68fb      	ldr	r3, [r7, #12]
 810367e:	4313      	orrs	r3, r2
 8103680:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	2b00      	cmp	r3, #0
 8103686:	d123      	bne.n	81036d0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103688:	f7fe fef8 	bl	810247c <HAL_GetCurrentCPUID>
 810368c:	4603      	mov	r3, r0
 810368e:	2b03      	cmp	r3, #3
 8103690:	d158      	bne.n	8103744 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103692:	4b2f      	ldr	r3, [pc, #188]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103694:	691b      	ldr	r3, [r3, #16]
 8103696:	4a2e      	ldr	r2, [pc, #184]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103698:	f023 0301 	bic.w	r3, r3, #1
 810369c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810369e:	4b2d      	ldr	r3, [pc, #180]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036a0:	691b      	ldr	r3, [r3, #16]
 81036a2:	4a2c      	ldr	r2, [pc, #176]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036a4:	f043 0304 	orr.w	r3, r3, #4
 81036a8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81036aa:	f3bf 8f4f 	dsb	sy
}
 81036ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81036b0:	f3bf 8f6f 	isb	sy
}
 81036b4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81036b6:	7afb      	ldrb	r3, [r7, #11]
 81036b8:	2b01      	cmp	r3, #1
 81036ba:	d101      	bne.n	81036c0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81036bc:	bf30      	wfi
 81036be:	e000      	b.n	81036c2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81036c0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036c2:	4b24      	ldr	r3, [pc, #144]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036c4:	691b      	ldr	r3, [r3, #16]
 81036c6:	4a23      	ldr	r2, [pc, #140]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036c8:	f023 0304 	bic.w	r3, r3, #4
 81036cc:	6113      	str	r3, [r2, #16]
 81036ce:	e03c      	b.n	810374a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	2b01      	cmp	r3, #1
 81036d4:	d123      	bne.n	810371e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81036d6:	f7fe fed1 	bl	810247c <HAL_GetCurrentCPUID>
 81036da:	4603      	mov	r3, r0
 81036dc:	2b01      	cmp	r3, #1
 81036de:	d133      	bne.n	8103748 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81036e0:	4b1b      	ldr	r3, [pc, #108]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036e2:	695b      	ldr	r3, [r3, #20]
 81036e4:	4a1a      	ldr	r2, [pc, #104]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036e6:	f023 0302 	bic.w	r3, r3, #2
 81036ea:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036ec:	4b19      	ldr	r3, [pc, #100]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036ee:	691b      	ldr	r3, [r3, #16]
 81036f0:	4a18      	ldr	r2, [pc, #96]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036f2:	f043 0304 	orr.w	r3, r3, #4
 81036f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81036f8:	f3bf 8f4f 	dsb	sy
}
 81036fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81036fe:	f3bf 8f6f 	isb	sy
}
 8103702:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103704:	7afb      	ldrb	r3, [r7, #11]
 8103706:	2b01      	cmp	r3, #1
 8103708:	d101      	bne.n	810370e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810370a:	bf30      	wfi
 810370c:	e000      	b.n	8103710 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810370e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103710:	4b10      	ldr	r3, [pc, #64]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103712:	691b      	ldr	r3, [r3, #16]
 8103714:	4a0f      	ldr	r2, [pc, #60]	; (8103754 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103716:	f023 0304 	bic.w	r3, r3, #4
 810371a:	6113      	str	r3, [r2, #16]
 810371c:	e015      	b.n	810374a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810371e:	f7fe fead 	bl	810247c <HAL_GetCurrentCPUID>
 8103722:	4603      	mov	r3, r0
 8103724:	2b03      	cmp	r3, #3
 8103726:	d106      	bne.n	8103736 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103728:	4b09      	ldr	r3, [pc, #36]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 810372a:	691b      	ldr	r3, [r3, #16]
 810372c:	4a08      	ldr	r2, [pc, #32]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 810372e:	f023 0304 	bic.w	r3, r3, #4
 8103732:	6113      	str	r3, [r2, #16]
 8103734:	e009      	b.n	810374a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103736:	4b06      	ldr	r3, [pc, #24]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103738:	695b      	ldr	r3, [r3, #20]
 810373a:	4a05      	ldr	r2, [pc, #20]	; (8103750 <HAL_PWREx_EnterSTOPMode+0xec>)
 810373c:	f023 0304 	bic.w	r3, r3, #4
 8103740:	6153      	str	r3, [r2, #20]
 8103742:	e002      	b.n	810374a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103744:	bf00      	nop
 8103746:	e000      	b.n	810374a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103748:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810374a:	3710      	adds	r7, #16
 810374c:	46bd      	mov	sp, r7
 810374e:	bd80      	pop	{r7, pc}
 8103750:	58024800 	.word	0x58024800
 8103754:	e000ed00 	.word	0xe000ed00

08103758 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103758:	b580      	push	{r7, lr}
 810375a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810375c:	f7fe fe8e 	bl	810247c <HAL_GetCurrentCPUID>
 8103760:	4603      	mov	r3, r0
 8103762:	2b03      	cmp	r3, #3
 8103764:	d101      	bne.n	810376a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103766:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103768:	e001      	b.n	810376e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810376a:	bf40      	sev
    __WFE ();
 810376c:	bf20      	wfe
}
 810376e:	bf00      	nop
 8103770:	bd80      	pop	{r7, pc}
	...

08103774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103774:	b480      	push	{r7}
 8103776:	b089      	sub	sp, #36	; 0x24
 8103778:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810377a:	4bb3      	ldr	r3, [pc, #716]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810377c:	691b      	ldr	r3, [r3, #16]
 810377e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103782:	2b18      	cmp	r3, #24
 8103784:	f200 8155 	bhi.w	8103a32 <HAL_RCC_GetSysClockFreq+0x2be>
 8103788:	a201      	add	r2, pc, #4	; (adr r2, 8103790 <HAL_RCC_GetSysClockFreq+0x1c>)
 810378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810378e:	bf00      	nop
 8103790:	081037f5 	.word	0x081037f5
 8103794:	08103a33 	.word	0x08103a33
 8103798:	08103a33 	.word	0x08103a33
 810379c:	08103a33 	.word	0x08103a33
 81037a0:	08103a33 	.word	0x08103a33
 81037a4:	08103a33 	.word	0x08103a33
 81037a8:	08103a33 	.word	0x08103a33
 81037ac:	08103a33 	.word	0x08103a33
 81037b0:	0810381b 	.word	0x0810381b
 81037b4:	08103a33 	.word	0x08103a33
 81037b8:	08103a33 	.word	0x08103a33
 81037bc:	08103a33 	.word	0x08103a33
 81037c0:	08103a33 	.word	0x08103a33
 81037c4:	08103a33 	.word	0x08103a33
 81037c8:	08103a33 	.word	0x08103a33
 81037cc:	08103a33 	.word	0x08103a33
 81037d0:	08103821 	.word	0x08103821
 81037d4:	08103a33 	.word	0x08103a33
 81037d8:	08103a33 	.word	0x08103a33
 81037dc:	08103a33 	.word	0x08103a33
 81037e0:	08103a33 	.word	0x08103a33
 81037e4:	08103a33 	.word	0x08103a33
 81037e8:	08103a33 	.word	0x08103a33
 81037ec:	08103a33 	.word	0x08103a33
 81037f0:	08103827 	.word	0x08103827
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81037f4:	4b94      	ldr	r3, [pc, #592]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	f003 0320 	and.w	r3, r3, #32
 81037fc:	2b00      	cmp	r3, #0
 81037fe:	d009      	beq.n	8103814 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103800:	4b91      	ldr	r3, [pc, #580]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	08db      	lsrs	r3, r3, #3
 8103806:	f003 0303 	and.w	r3, r3, #3
 810380a:	4a90      	ldr	r2, [pc, #576]	; (8103a4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810380c:	fa22 f303 	lsr.w	r3, r2, r3
 8103810:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103812:	e111      	b.n	8103a38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103814:	4b8d      	ldr	r3, [pc, #564]	; (8103a4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103816:	61bb      	str	r3, [r7, #24]
    break;
 8103818:	e10e      	b.n	8103a38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810381a:	4b8d      	ldr	r3, [pc, #564]	; (8103a50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810381c:	61bb      	str	r3, [r7, #24]
    break;
 810381e:	e10b      	b.n	8103a38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103820:	4b8c      	ldr	r3, [pc, #560]	; (8103a54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103822:	61bb      	str	r3, [r7, #24]
    break;
 8103824:	e108      	b.n	8103a38 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103826:	4b88      	ldr	r3, [pc, #544]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810382a:	f003 0303 	and.w	r3, r3, #3
 810382e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103830:	4b85      	ldr	r3, [pc, #532]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103834:	091b      	lsrs	r3, r3, #4
 8103836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810383a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810383c:	4b82      	ldr	r3, [pc, #520]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103840:	f003 0301 	and.w	r3, r3, #1
 8103844:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103846:	4b80      	ldr	r3, [pc, #512]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810384a:	08db      	lsrs	r3, r3, #3
 810384c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103850:	68fa      	ldr	r2, [r7, #12]
 8103852:	fb02 f303 	mul.w	r3, r2, r3
 8103856:	ee07 3a90 	vmov	s15, r3
 810385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810385e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103862:	693b      	ldr	r3, [r7, #16]
 8103864:	2b00      	cmp	r3, #0
 8103866:	f000 80e1 	beq.w	8103a2c <HAL_RCC_GetSysClockFreq+0x2b8>
 810386a:	697b      	ldr	r3, [r7, #20]
 810386c:	2b02      	cmp	r3, #2
 810386e:	f000 8083 	beq.w	8103978 <HAL_RCC_GetSysClockFreq+0x204>
 8103872:	697b      	ldr	r3, [r7, #20]
 8103874:	2b02      	cmp	r3, #2
 8103876:	f200 80a1 	bhi.w	81039bc <HAL_RCC_GetSysClockFreq+0x248>
 810387a:	697b      	ldr	r3, [r7, #20]
 810387c:	2b00      	cmp	r3, #0
 810387e:	d003      	beq.n	8103888 <HAL_RCC_GetSysClockFreq+0x114>
 8103880:	697b      	ldr	r3, [r7, #20]
 8103882:	2b01      	cmp	r3, #1
 8103884:	d056      	beq.n	8103934 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103886:	e099      	b.n	81039bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103888:	4b6f      	ldr	r3, [pc, #444]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	f003 0320 	and.w	r3, r3, #32
 8103890:	2b00      	cmp	r3, #0
 8103892:	d02d      	beq.n	81038f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103894:	4b6c      	ldr	r3, [pc, #432]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	08db      	lsrs	r3, r3, #3
 810389a:	f003 0303 	and.w	r3, r3, #3
 810389e:	4a6b      	ldr	r2, [pc, #428]	; (8103a4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81038a0:	fa22 f303 	lsr.w	r3, r2, r3
 81038a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	ee07 3a90 	vmov	s15, r3
 81038ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038b0:	693b      	ldr	r3, [r7, #16]
 81038b2:	ee07 3a90 	vmov	s15, r3
 81038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038be:	4b62      	ldr	r3, [pc, #392]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038c6:	ee07 3a90 	vmov	s15, r3
 81038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81038d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81038ee:	e087      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81038f0:	693b      	ldr	r3, [r7, #16]
 81038f2:	ee07 3a90 	vmov	s15, r3
 81038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103a5c <HAL_RCC_GetSysClockFreq+0x2e8>
 81038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103902:	4b51      	ldr	r3, [pc, #324]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810390a:	ee07 3a90 	vmov	s15, r3
 810390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103912:	ed97 6a02 	vldr	s12, [r7, #8]
 8103916:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 810391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810392e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103932:	e065      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103934:	693b      	ldr	r3, [r7, #16]
 8103936:	ee07 3a90 	vmov	s15, r3
 810393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810393e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103a60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103946:	4b40      	ldr	r3, [pc, #256]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810394e:	ee07 3a90 	vmov	s15, r3
 8103952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103956:	ed97 6a02 	vldr	s12, [r7, #8]
 810395a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 810395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103976:	e043      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103978:	693b      	ldr	r3, [r7, #16]
 810397a:	ee07 3a90 	vmov	s15, r3
 810397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103982:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103a64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810398a:	4b2f      	ldr	r3, [pc, #188]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103992:	ee07 3a90 	vmov	s15, r3
 8103996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810399a:	ed97 6a02 	vldr	s12, [r7, #8]
 810399e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039ba:	e021      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81039bc:	693b      	ldr	r3, [r7, #16]
 81039be:	ee07 3a90 	vmov	s15, r3
 81039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103a60 <HAL_RCC_GetSysClockFreq+0x2ec>
 81039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039ce:	4b1e      	ldr	r3, [pc, #120]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039d6:	ee07 3a90 	vmov	s15, r3
 81039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039de:	ed97 6a02 	vldr	s12, [r7, #8]
 81039e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103a00:	4b11      	ldr	r3, [pc, #68]	; (8103a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a04:	0a5b      	lsrs	r3, r3, #9
 8103a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103a0a:	3301      	adds	r3, #1
 8103a0c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103a0e:	683b      	ldr	r3, [r7, #0]
 8103a10:	ee07 3a90 	vmov	s15, r3
 8103a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8103a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103a24:	ee17 3a90 	vmov	r3, s15
 8103a28:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103a2a:	e005      	b.n	8103a38 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103a2c:	2300      	movs	r3, #0
 8103a2e:	61bb      	str	r3, [r7, #24]
    break;
 8103a30:	e002      	b.n	8103a38 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103a32:	4b07      	ldr	r3, [pc, #28]	; (8103a50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103a34:	61bb      	str	r3, [r7, #24]
    break;
 8103a36:	bf00      	nop
  }

  return sysclockfreq;
 8103a38:	69bb      	ldr	r3, [r7, #24]
}
 8103a3a:	4618      	mov	r0, r3
 8103a3c:	3724      	adds	r7, #36	; 0x24
 8103a3e:	46bd      	mov	sp, r7
 8103a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a44:	4770      	bx	lr
 8103a46:	bf00      	nop
 8103a48:	58024400 	.word	0x58024400
 8103a4c:	03d09000 	.word	0x03d09000
 8103a50:	003d0900 	.word	0x003d0900
 8103a54:	007a1200 	.word	0x007a1200
 8103a58:	46000000 	.word	0x46000000
 8103a5c:	4c742400 	.word	0x4c742400
 8103a60:	4a742400 	.word	0x4a742400
 8103a64:	4af42400 	.word	0x4af42400

08103a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103a68:	b580      	push	{r7, lr}
 8103a6a:	b082      	sub	sp, #8
 8103a6c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103a6e:	f7ff fe81 	bl	8103774 <HAL_RCC_GetSysClockFreq>
 8103a72:	4602      	mov	r2, r0
 8103a74:	4b11      	ldr	r3, [pc, #68]	; (8103abc <HAL_RCC_GetHCLKFreq+0x54>)
 8103a76:	699b      	ldr	r3, [r3, #24]
 8103a78:	0a1b      	lsrs	r3, r3, #8
 8103a7a:	f003 030f 	and.w	r3, r3, #15
 8103a7e:	4910      	ldr	r1, [pc, #64]	; (8103ac0 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a80:	5ccb      	ldrb	r3, [r1, r3]
 8103a82:	f003 031f 	and.w	r3, r3, #31
 8103a86:	fa22 f303 	lsr.w	r3, r2, r3
 8103a8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a8c:	4b0b      	ldr	r3, [pc, #44]	; (8103abc <HAL_RCC_GetHCLKFreq+0x54>)
 8103a8e:	699b      	ldr	r3, [r3, #24]
 8103a90:	f003 030f 	and.w	r3, r3, #15
 8103a94:	4a0a      	ldr	r2, [pc, #40]	; (8103ac0 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a96:	5cd3      	ldrb	r3, [r2, r3]
 8103a98:	f003 031f 	and.w	r3, r3, #31
 8103a9c:	687a      	ldr	r2, [r7, #4]
 8103a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8103aa2:	4a08      	ldr	r2, [pc, #32]	; (8103ac4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103aa4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103aa6:	4b07      	ldr	r3, [pc, #28]	; (8103ac4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	4a07      	ldr	r2, [pc, #28]	; (8103ac8 <HAL_RCC_GetHCLKFreq+0x60>)
 8103aac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103aae:	4b05      	ldr	r3, [pc, #20]	; (8103ac4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103ab0:	681b      	ldr	r3, [r3, #0]
}
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	3708      	adds	r7, #8
 8103ab6:	46bd      	mov	sp, r7
 8103ab8:	bd80      	pop	{r7, pc}
 8103aba:	bf00      	nop
 8103abc:	58024400 	.word	0x58024400
 8103ac0:	0810c210 	.word	0x0810c210
 8103ac4:	10000004 	.word	0x10000004
 8103ac8:	10000000 	.word	0x10000000

08103acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103acc:	b580      	push	{r7, lr}
 8103ace:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103ad0:	f7ff ffca 	bl	8103a68 <HAL_RCC_GetHCLKFreq>
 8103ad4:	4602      	mov	r2, r0
 8103ad6:	4b06      	ldr	r3, [pc, #24]	; (8103af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103ad8:	69db      	ldr	r3, [r3, #28]
 8103ada:	091b      	lsrs	r3, r3, #4
 8103adc:	f003 0307 	and.w	r3, r3, #7
 8103ae0:	4904      	ldr	r1, [pc, #16]	; (8103af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103ae2:	5ccb      	ldrb	r3, [r1, r3]
 8103ae4:	f003 031f 	and.w	r3, r3, #31
 8103ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103aec:	4618      	mov	r0, r3
 8103aee:	bd80      	pop	{r7, pc}
 8103af0:	58024400 	.word	0x58024400
 8103af4:	0810c210 	.word	0x0810c210

08103af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103af8:	b580      	push	{r7, lr}
 8103afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103afc:	f7ff ffb4 	bl	8103a68 <HAL_RCC_GetHCLKFreq>
 8103b00:	4602      	mov	r2, r0
 8103b02:	4b06      	ldr	r3, [pc, #24]	; (8103b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8103b04:	69db      	ldr	r3, [r3, #28]
 8103b06:	0a1b      	lsrs	r3, r3, #8
 8103b08:	f003 0307 	and.w	r3, r3, #7
 8103b0c:	4904      	ldr	r1, [pc, #16]	; (8103b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8103b0e:	5ccb      	ldrb	r3, [r1, r3]
 8103b10:	f003 031f 	and.w	r3, r3, #31
 8103b14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103b18:	4618      	mov	r0, r3
 8103b1a:	bd80      	pop	{r7, pc}
 8103b1c:	58024400 	.word	0x58024400
 8103b20:	0810c210 	.word	0x0810c210

08103b24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103b24:	b580      	push	{r7, lr}
 8103b26:	b086      	sub	sp, #24
 8103b28:	af00      	add	r7, sp, #0
 8103b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103b2c:	2300      	movs	r3, #0
 8103b2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103b30:	2300      	movs	r3, #0
 8103b32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d03f      	beq.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b48:	d02a      	beq.n	8103ba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b4e:	d824      	bhi.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b54:	d018      	beq.n	8103b88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b5a:	d81e      	bhi.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	d003      	beq.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103b64:	d007      	beq.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103b66:	e018      	b.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b68:	4ba3      	ldr	r3, [pc, #652]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b6c:	4aa2      	ldr	r2, [pc, #648]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103b74:	e015      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	3304      	adds	r3, #4
 8103b7a:	2102      	movs	r1, #2
 8103b7c:	4618      	mov	r0, r3
 8103b7e:	f001 f9d5 	bl	8104f2c <RCCEx_PLL2_Config>
 8103b82:	4603      	mov	r3, r0
 8103b84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103b86:	e00c      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	3324      	adds	r3, #36	; 0x24
 8103b8c:	2102      	movs	r1, #2
 8103b8e:	4618      	mov	r0, r3
 8103b90:	f001 fa7e 	bl	8105090 <RCCEx_PLL3_Config>
 8103b94:	4603      	mov	r3, r0
 8103b96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103b98:	e003      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b9a:	2301      	movs	r3, #1
 8103b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8103b9e:	e000      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ba2:	7dfb      	ldrb	r3, [r7, #23]
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	d109      	bne.n	8103bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103ba8:	4b93      	ldr	r3, [pc, #588]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103bb4:	4990      	ldr	r1, [pc, #576]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bb6:	4313      	orrs	r3, r2
 8103bb8:	650b      	str	r3, [r1, #80]	; 0x50
 8103bba:	e001      	b.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bbc:	7dfb      	ldrb	r3, [r7, #23]
 8103bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	681b      	ldr	r3, [r3, #0]
 8103bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103bc8:	2b00      	cmp	r3, #0
 8103bca:	d03d      	beq.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bd0:	2b04      	cmp	r3, #4
 8103bd2:	d826      	bhi.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103bd4:	a201      	add	r2, pc, #4	; (adr r2, 8103bdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bda:	bf00      	nop
 8103bdc:	08103bf1 	.word	0x08103bf1
 8103be0:	08103bff 	.word	0x08103bff
 8103be4:	08103c11 	.word	0x08103c11
 8103be8:	08103c29 	.word	0x08103c29
 8103bec:	08103c29 	.word	0x08103c29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bf0:	4b81      	ldr	r3, [pc, #516]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bf4:	4a80      	ldr	r2, [pc, #512]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103bfc:	e015      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	3304      	adds	r3, #4
 8103c02:	2100      	movs	r1, #0
 8103c04:	4618      	mov	r0, r3
 8103c06:	f001 f991 	bl	8104f2c <RCCEx_PLL2_Config>
 8103c0a:	4603      	mov	r3, r0
 8103c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c0e:	e00c      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	3324      	adds	r3, #36	; 0x24
 8103c14:	2100      	movs	r1, #0
 8103c16:	4618      	mov	r0, r3
 8103c18:	f001 fa3a 	bl	8105090 <RCCEx_PLL3_Config>
 8103c1c:	4603      	mov	r3, r0
 8103c1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c20:	e003      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c22:	2301      	movs	r3, #1
 8103c24:	75fb      	strb	r3, [r7, #23]
      break;
 8103c26:	e000      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c2a:	7dfb      	ldrb	r3, [r7, #23]
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d109      	bne.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103c30:	4b71      	ldr	r3, [pc, #452]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c34:	f023 0207 	bic.w	r2, r3, #7
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c3c:	496e      	ldr	r1, [pc, #440]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c3e:	4313      	orrs	r3, r2
 8103c40:	650b      	str	r3, [r1, #80]	; 0x50
 8103c42:	e001      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c44:	7dfb      	ldrb	r3, [r7, #23]
 8103c46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103c50:	2b00      	cmp	r3, #0
 8103c52:	d042      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c5c:	d02b      	beq.n	8103cb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c62:	d825      	bhi.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103c64:	2bc0      	cmp	r3, #192	; 0xc0
 8103c66:	d028      	beq.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103c68:	2bc0      	cmp	r3, #192	; 0xc0
 8103c6a:	d821      	bhi.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103c6c:	2b80      	cmp	r3, #128	; 0x80
 8103c6e:	d016      	beq.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103c70:	2b80      	cmp	r3, #128	; 0x80
 8103c72:	d81d      	bhi.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103c74:	2b00      	cmp	r3, #0
 8103c76:	d002      	beq.n	8103c7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103c78:	2b40      	cmp	r3, #64	; 0x40
 8103c7a:	d007      	beq.n	8103c8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103c7c:	e018      	b.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c7e:	4b5e      	ldr	r3, [pc, #376]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c82:	4a5d      	ldr	r2, [pc, #372]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103c8a:	e017      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	3304      	adds	r3, #4
 8103c90:	2100      	movs	r1, #0
 8103c92:	4618      	mov	r0, r3
 8103c94:	f001 f94a 	bl	8104f2c <RCCEx_PLL2_Config>
 8103c98:	4603      	mov	r3, r0
 8103c9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103c9c:	e00e      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	3324      	adds	r3, #36	; 0x24
 8103ca2:	2100      	movs	r1, #0
 8103ca4:	4618      	mov	r0, r3
 8103ca6:	f001 f9f3 	bl	8105090 <RCCEx_PLL3_Config>
 8103caa:	4603      	mov	r3, r0
 8103cac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103cae:	e005      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cb0:	2301      	movs	r3, #1
 8103cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8103cb4:	e002      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103cb6:	bf00      	nop
 8103cb8:	e000      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cbc:	7dfb      	ldrb	r3, [r7, #23]
 8103cbe:	2b00      	cmp	r3, #0
 8103cc0:	d109      	bne.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103cc2:	4b4d      	ldr	r3, [pc, #308]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cce:	494a      	ldr	r1, [pc, #296]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103cd0:	4313      	orrs	r3, r2
 8103cd2:	650b      	str	r3, [r1, #80]	; 0x50
 8103cd4:	e001      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cd6:	7dfb      	ldrb	r3, [r7, #23]
 8103cd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	681b      	ldr	r3, [r3, #0]
 8103cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103ce2:	2b00      	cmp	r3, #0
 8103ce4:	d049      	beq.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103cf0:	d030      	beq.n	8103d54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103cf6:	d82a      	bhi.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103cf8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103cfc:	d02c      	beq.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103cfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103d02:	d824      	bhi.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d08:	d018      	beq.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d0e:	d81e      	bhi.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d003      	beq.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d18:	d007      	beq.n	8103d2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103d1a:	e018      	b.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d1c:	4b36      	ldr	r3, [pc, #216]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d20:	4a35      	ldr	r2, [pc, #212]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103d28:	e017      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	3304      	adds	r3, #4
 8103d2e:	2100      	movs	r1, #0
 8103d30:	4618      	mov	r0, r3
 8103d32:	f001 f8fb 	bl	8104f2c <RCCEx_PLL2_Config>
 8103d36:	4603      	mov	r3, r0
 8103d38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103d3a:	e00e      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	3324      	adds	r3, #36	; 0x24
 8103d40:	2100      	movs	r1, #0
 8103d42:	4618      	mov	r0, r3
 8103d44:	f001 f9a4 	bl	8105090 <RCCEx_PLL3_Config>
 8103d48:	4603      	mov	r3, r0
 8103d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103d4c:	e005      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103d4e:	2301      	movs	r3, #1
 8103d50:	75fb      	strb	r3, [r7, #23]
      break;
 8103d52:	e002      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103d54:	bf00      	nop
 8103d56:	e000      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d5a:	7dfb      	ldrb	r3, [r7, #23]
 8103d5c:	2b00      	cmp	r3, #0
 8103d5e:	d10a      	bne.n	8103d76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103d60:	4b25      	ldr	r3, [pc, #148]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103d6e:	4922      	ldr	r1, [pc, #136]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103d70:	4313      	orrs	r3, r2
 8103d72:	658b      	str	r3, [r1, #88]	; 0x58
 8103d74:	e001      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d76:	7dfb      	ldrb	r3, [r7, #23]
 8103d78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103d82:	2b00      	cmp	r3, #0
 8103d84:	d04b      	beq.n	8103e1e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103d90:	d030      	beq.n	8103df4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103d96:	d82a      	bhi.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103d98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103d9c:	d02e      	beq.n	8103dfc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103d9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103da2:	d824      	bhi.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103da8:	d018      	beq.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103dae:	d81e      	bhi.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d003      	beq.n	8103dbc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103db8:	d007      	beq.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103dba:	e018      	b.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103dbc:	4b0e      	ldr	r3, [pc, #56]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dc0:	4a0d      	ldr	r2, [pc, #52]	; (8103df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103dc8:	e019      	b.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	3304      	adds	r3, #4
 8103dce:	2100      	movs	r1, #0
 8103dd0:	4618      	mov	r0, r3
 8103dd2:	f001 f8ab 	bl	8104f2c <RCCEx_PLL2_Config>
 8103dd6:	4603      	mov	r3, r0
 8103dd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103dda:	e010      	b.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	3324      	adds	r3, #36	; 0x24
 8103de0:	2100      	movs	r1, #0
 8103de2:	4618      	mov	r0, r3
 8103de4:	f001 f954 	bl	8105090 <RCCEx_PLL3_Config>
 8103de8:	4603      	mov	r3, r0
 8103dea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103dec:	e007      	b.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103dee:	2301      	movs	r3, #1
 8103df0:	75fb      	strb	r3, [r7, #23]
      break;
 8103df2:	e004      	b.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103df4:	bf00      	nop
 8103df6:	e002      	b.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103df8:	58024400 	.word	0x58024400
      break;
 8103dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dfe:	7dfb      	ldrb	r3, [r7, #23]
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	d10a      	bne.n	8103e1a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103e04:	4b99      	ldr	r3, [pc, #612]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103e12:	4996      	ldr	r1, [pc, #600]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e14:	4313      	orrs	r3, r2
 8103e16:	658b      	str	r3, [r1, #88]	; 0x58
 8103e18:	e001      	b.n	8103e1e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e1a:	7dfb      	ldrb	r3, [r7, #23]
 8103e1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103e26:	2b00      	cmp	r3, #0
 8103e28:	d032      	beq.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103e2e:	2b30      	cmp	r3, #48	; 0x30
 8103e30:	d01c      	beq.n	8103e6c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103e32:	2b30      	cmp	r3, #48	; 0x30
 8103e34:	d817      	bhi.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103e36:	2b20      	cmp	r3, #32
 8103e38:	d00c      	beq.n	8103e54 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103e3a:	2b20      	cmp	r3, #32
 8103e3c:	d813      	bhi.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d016      	beq.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103e42:	2b10      	cmp	r3, #16
 8103e44:	d10f      	bne.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e46:	4b89      	ldr	r3, [pc, #548]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e4a:	4a88      	ldr	r2, [pc, #544]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103e52:	e00e      	b.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	3304      	adds	r3, #4
 8103e58:	2102      	movs	r1, #2
 8103e5a:	4618      	mov	r0, r3
 8103e5c:	f001 f866 	bl	8104f2c <RCCEx_PLL2_Config>
 8103e60:	4603      	mov	r3, r0
 8103e62:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103e64:	e005      	b.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103e66:	2301      	movs	r3, #1
 8103e68:	75fb      	strb	r3, [r7, #23]
      break;
 8103e6a:	e002      	b.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103e6c:	bf00      	nop
 8103e6e:	e000      	b.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e72:	7dfb      	ldrb	r3, [r7, #23]
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d109      	bne.n	8103e8c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103e78:	4b7c      	ldr	r3, [pc, #496]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103e84:	4979      	ldr	r1, [pc, #484]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e86:	4313      	orrs	r3, r2
 8103e88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103e8a:	e001      	b.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e8c:	7dfb      	ldrb	r3, [r7, #23]
 8103e8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	d047      	beq.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ea4:	d030      	beq.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103eaa:	d82a      	bhi.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103eac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103eb0:	d02c      	beq.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103eb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103eb6:	d824      	bhi.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ebc:	d018      	beq.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ec2:	d81e      	bhi.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d003      	beq.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103ecc:	d007      	beq.n	8103ede <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103ece:	e018      	b.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ed0:	4b66      	ldr	r3, [pc, #408]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ed4:	4a65      	ldr	r2, [pc, #404]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103edc:	e017      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	3304      	adds	r3, #4
 8103ee2:	2100      	movs	r1, #0
 8103ee4:	4618      	mov	r0, r3
 8103ee6:	f001 f821 	bl	8104f2c <RCCEx_PLL2_Config>
 8103eea:	4603      	mov	r3, r0
 8103eec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103eee:	e00e      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	3324      	adds	r3, #36	; 0x24
 8103ef4:	2100      	movs	r1, #0
 8103ef6:	4618      	mov	r0, r3
 8103ef8:	f001 f8ca 	bl	8105090 <RCCEx_PLL3_Config>
 8103efc:	4603      	mov	r3, r0
 8103efe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103f00:	e005      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f02:	2301      	movs	r3, #1
 8103f04:	75fb      	strb	r3, [r7, #23]
      break;
 8103f06:	e002      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103f08:	bf00      	nop
 8103f0a:	e000      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f0e:	7dfb      	ldrb	r3, [r7, #23]
 8103f10:	2b00      	cmp	r3, #0
 8103f12:	d109      	bne.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103f14:	4b55      	ldr	r3, [pc, #340]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f20:	4952      	ldr	r1, [pc, #328]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f22:	4313      	orrs	r3, r2
 8103f24:	650b      	str	r3, [r1, #80]	; 0x50
 8103f26:	e001      	b.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f28:	7dfb      	ldrb	r3, [r7, #23]
 8103f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103f34:	2b00      	cmp	r3, #0
 8103f36:	d049      	beq.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103f40:	d02e      	beq.n	8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103f46:	d828      	bhi.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103f4c:	d02a      	beq.n	8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103f52:	d822      	bhi.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103f54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103f58:	d026      	beq.n	8103fa8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103f5e:	d81c      	bhi.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103f64:	d010      	beq.n	8103f88 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103f6a:	d816      	bhi.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103f6c:	2b00      	cmp	r3, #0
 8103f6e:	d01d      	beq.n	8103fac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103f74:	d111      	bne.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	3304      	adds	r3, #4
 8103f7a:	2101      	movs	r1, #1
 8103f7c:	4618      	mov	r0, r3
 8103f7e:	f000 ffd5 	bl	8104f2c <RCCEx_PLL2_Config>
 8103f82:	4603      	mov	r3, r0
 8103f84:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103f86:	e012      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	3324      	adds	r3, #36	; 0x24
 8103f8c:	2101      	movs	r1, #1
 8103f8e:	4618      	mov	r0, r3
 8103f90:	f001 f87e 	bl	8105090 <RCCEx_PLL3_Config>
 8103f94:	4603      	mov	r3, r0
 8103f96:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103f98:	e009      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f9a:	2301      	movs	r3, #1
 8103f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8103f9e:	e006      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103fa0:	bf00      	nop
 8103fa2:	e004      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103fa4:	bf00      	nop
 8103fa6:	e002      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103fa8:	bf00      	nop
 8103faa:	e000      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fae:	7dfb      	ldrb	r3, [r7, #23]
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	d109      	bne.n	8103fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103fb4:	4b2d      	ldr	r3, [pc, #180]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103fc0:	492a      	ldr	r1, [pc, #168]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103fc2:	4313      	orrs	r3, r2
 8103fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8103fc6:	e001      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fc8:	7dfb      	ldrb	r3, [r7, #23]
 8103fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	d04d      	beq.n	8104074 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103fe2:	d02e      	beq.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103fe8:	d828      	bhi.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103fee:	d02a      	beq.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ff4:	d822      	bhi.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103ff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103ffa:	d026      	beq.n	810404a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104000:	d81c      	bhi.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104006:	d010      	beq.n	810402a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8104008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810400c:	d816      	bhi.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810400e:	2b00      	cmp	r3, #0
 8104010:	d01d      	beq.n	810404e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8104012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104016:	d111      	bne.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	3304      	adds	r3, #4
 810401c:	2101      	movs	r1, #1
 810401e:	4618      	mov	r0, r3
 8104020:	f000 ff84 	bl	8104f2c <RCCEx_PLL2_Config>
 8104024:	4603      	mov	r3, r0
 8104026:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104028:	e012      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	3324      	adds	r3, #36	; 0x24
 810402e:	2101      	movs	r1, #1
 8104030:	4618      	mov	r0, r3
 8104032:	f001 f82d 	bl	8105090 <RCCEx_PLL3_Config>
 8104036:	4603      	mov	r3, r0
 8104038:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810403a:	e009      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810403c:	2301      	movs	r3, #1
 810403e:	75fb      	strb	r3, [r7, #23]
      break;
 8104040:	e006      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104042:	bf00      	nop
 8104044:	e004      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104046:	bf00      	nop
 8104048:	e002      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810404a:	bf00      	nop
 810404c:	e000      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810404e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104050:	7dfb      	ldrb	r3, [r7, #23]
 8104052:	2b00      	cmp	r3, #0
 8104054:	d10c      	bne.n	8104070 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104056:	4b05      	ldr	r3, [pc, #20]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810405a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104064:	4901      	ldr	r1, [pc, #4]	; (810406c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104066:	4313      	orrs	r3, r2
 8104068:	658b      	str	r3, [r1, #88]	; 0x58
 810406a:	e003      	b.n	8104074 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810406c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104070:	7dfb      	ldrb	r3, [r7, #23]
 8104072:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810407c:	2b00      	cmp	r3, #0
 810407e:	d02f      	beq.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104088:	d00e      	beq.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 810408a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810408e:	d814      	bhi.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8104090:	2b00      	cmp	r3, #0
 8104092:	d015      	beq.n	81040c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104098:	d10f      	bne.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810409a:	4bb0      	ldr	r3, [pc, #704]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810409e:	4aaf      	ldr	r2, [pc, #700]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81040a6:	e00c      	b.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	3304      	adds	r3, #4
 81040ac:	2101      	movs	r1, #1
 81040ae:	4618      	mov	r0, r3
 81040b0:	f000 ff3c 	bl	8104f2c <RCCEx_PLL2_Config>
 81040b4:	4603      	mov	r3, r0
 81040b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81040b8:	e003      	b.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81040ba:	2301      	movs	r3, #1
 81040bc:	75fb      	strb	r3, [r7, #23]
      break;
 81040be:	e000      	b.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81040c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040c2:	7dfb      	ldrb	r3, [r7, #23]
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d109      	bne.n	81040dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81040c8:	4ba4      	ldr	r3, [pc, #656]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81040d4:	49a1      	ldr	r1, [pc, #644]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040d6:	4313      	orrs	r3, r2
 81040d8:	650b      	str	r3, [r1, #80]	; 0x50
 81040da:	e001      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040dc:	7dfb      	ldrb	r3, [r7, #23]
 81040de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81040e8:	2b00      	cmp	r3, #0
 81040ea:	d032      	beq.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040f0:	2b03      	cmp	r3, #3
 81040f2:	d81b      	bhi.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x608>
 81040f4:	a201      	add	r2, pc, #4	; (adr r2, 81040fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040fa:	bf00      	nop
 81040fc:	08104133 	.word	0x08104133
 8104100:	0810410d 	.word	0x0810410d
 8104104:	0810411b 	.word	0x0810411b
 8104108:	08104133 	.word	0x08104133
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810410c:	4b93      	ldr	r3, [pc, #588]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104110:	4a92      	ldr	r2, [pc, #584]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104118:	e00c      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	3304      	adds	r3, #4
 810411e:	2102      	movs	r1, #2
 8104120:	4618      	mov	r0, r3
 8104122:	f000 ff03 	bl	8104f2c <RCCEx_PLL2_Config>
 8104126:	4603      	mov	r3, r0
 8104128:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810412a:	e003      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810412c:	2301      	movs	r3, #1
 810412e:	75fb      	strb	r3, [r7, #23]
      break;
 8104130:	e000      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8104132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104134:	7dfb      	ldrb	r3, [r7, #23]
 8104136:	2b00      	cmp	r3, #0
 8104138:	d109      	bne.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810413a:	4b88      	ldr	r3, [pc, #544]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810413e:	f023 0203 	bic.w	r2, r3, #3
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104146:	4985      	ldr	r1, [pc, #532]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104148:	4313      	orrs	r3, r2
 810414a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810414c:	e001      	b.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810414e:	7dfb      	ldrb	r3, [r7, #23]
 8104150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810415a:	2b00      	cmp	r3, #0
 810415c:	f000 8088 	beq.w	8104270 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104160:	4b7f      	ldr	r3, [pc, #508]	; (8104360 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	4a7e      	ldr	r2, [pc, #504]	; (8104360 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810416a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810416c:	f7fe f872 	bl	8102254 <HAL_GetTick>
 8104170:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104172:	e009      	b.n	8104188 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104174:	f7fe f86e 	bl	8102254 <HAL_GetTick>
 8104178:	4602      	mov	r2, r0
 810417a:	693b      	ldr	r3, [r7, #16]
 810417c:	1ad3      	subs	r3, r2, r3
 810417e:	2b64      	cmp	r3, #100	; 0x64
 8104180:	d902      	bls.n	8104188 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104182:	2303      	movs	r3, #3
 8104184:	75fb      	strb	r3, [r7, #23]
        break;
 8104186:	e005      	b.n	8104194 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104188:	4b75      	ldr	r3, [pc, #468]	; (8104360 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104190:	2b00      	cmp	r3, #0
 8104192:	d0ef      	beq.n	8104174 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104194:	7dfb      	ldrb	r3, [r7, #23]
 8104196:	2b00      	cmp	r3, #0
 8104198:	d168      	bne.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810419a:	4b70      	ldr	r3, [pc, #448]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810419c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81041a4:	4053      	eors	r3, r2
 81041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d013      	beq.n	81041d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81041ae:	4b6b      	ldr	r3, [pc, #428]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81041b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81041b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81041b8:	4b68      	ldr	r3, [pc, #416]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81041bc:	4a67      	ldr	r2, [pc, #412]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81041c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81041c4:	4b65      	ldr	r3, [pc, #404]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81041c8:	4a64      	ldr	r2, [pc, #400]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81041ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81041ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81041d0:	4a62      	ldr	r2, [pc, #392]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81041d2:	68fb      	ldr	r3, [r7, #12]
 81041d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81041dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81041e0:	d115      	bne.n	810420e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81041e2:	f7fe f837 	bl	8102254 <HAL_GetTick>
 81041e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81041e8:	e00b      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81041ea:	f7fe f833 	bl	8102254 <HAL_GetTick>
 81041ee:	4602      	mov	r2, r0
 81041f0:	693b      	ldr	r3, [r7, #16]
 81041f2:	1ad3      	subs	r3, r2, r3
 81041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 81041f8:	4293      	cmp	r3, r2
 81041fa:	d902      	bls.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81041fc:	2303      	movs	r3, #3
 81041fe:	75fb      	strb	r3, [r7, #23]
            break;
 8104200:	e005      	b.n	810420e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104202:	4b56      	ldr	r3, [pc, #344]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104206:	f003 0302 	and.w	r3, r3, #2
 810420a:	2b00      	cmp	r3, #0
 810420c:	d0ed      	beq.n	81041ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810420e:	7dfb      	ldrb	r3, [r7, #23]
 8104210:	2b00      	cmp	r3, #0
 8104212:	d128      	bne.n	8104266 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104214:	687b      	ldr	r3, [r7, #4]
 8104216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810421e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104222:	d10f      	bne.n	8104244 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104224:	4b4d      	ldr	r3, [pc, #308]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104226:	691b      	ldr	r3, [r3, #16]
 8104228:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104232:	091b      	lsrs	r3, r3, #4
 8104234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104238:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810423c:	4947      	ldr	r1, [pc, #284]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810423e:	4313      	orrs	r3, r2
 8104240:	610b      	str	r3, [r1, #16]
 8104242:	e005      	b.n	8104250 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104244:	4b45      	ldr	r3, [pc, #276]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104246:	691b      	ldr	r3, [r3, #16]
 8104248:	4a44      	ldr	r2, [pc, #272]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810424a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810424e:	6113      	str	r3, [r2, #16]
 8104250:	4b42      	ldr	r3, [pc, #264]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810425a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810425e:	493f      	ldr	r1, [pc, #252]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104260:	4313      	orrs	r3, r2
 8104262:	670b      	str	r3, [r1, #112]	; 0x70
 8104264:	e004      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104266:	7dfb      	ldrb	r3, [r7, #23]
 8104268:	75bb      	strb	r3, [r7, #22]
 810426a:	e001      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810426c:	7dfb      	ldrb	r3, [r7, #23]
 810426e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	f003 0301 	and.w	r3, r3, #1
 8104278:	2b00      	cmp	r3, #0
 810427a:	f000 8083 	beq.w	8104384 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104282:	2b28      	cmp	r3, #40	; 0x28
 8104284:	d866      	bhi.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104286:	a201      	add	r2, pc, #4	; (adr r2, 810428c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810428c:	08104365 	.word	0x08104365
 8104290:	08104355 	.word	0x08104355
 8104294:	08104355 	.word	0x08104355
 8104298:	08104355 	.word	0x08104355
 810429c:	08104355 	.word	0x08104355
 81042a0:	08104355 	.word	0x08104355
 81042a4:	08104355 	.word	0x08104355
 81042a8:	08104355 	.word	0x08104355
 81042ac:	08104331 	.word	0x08104331
 81042b0:	08104355 	.word	0x08104355
 81042b4:	08104355 	.word	0x08104355
 81042b8:	08104355 	.word	0x08104355
 81042bc:	08104355 	.word	0x08104355
 81042c0:	08104355 	.word	0x08104355
 81042c4:	08104355 	.word	0x08104355
 81042c8:	08104355 	.word	0x08104355
 81042cc:	08104343 	.word	0x08104343
 81042d0:	08104355 	.word	0x08104355
 81042d4:	08104355 	.word	0x08104355
 81042d8:	08104355 	.word	0x08104355
 81042dc:	08104355 	.word	0x08104355
 81042e0:	08104355 	.word	0x08104355
 81042e4:	08104355 	.word	0x08104355
 81042e8:	08104355 	.word	0x08104355
 81042ec:	08104365 	.word	0x08104365
 81042f0:	08104355 	.word	0x08104355
 81042f4:	08104355 	.word	0x08104355
 81042f8:	08104355 	.word	0x08104355
 81042fc:	08104355 	.word	0x08104355
 8104300:	08104355 	.word	0x08104355
 8104304:	08104355 	.word	0x08104355
 8104308:	08104355 	.word	0x08104355
 810430c:	08104365 	.word	0x08104365
 8104310:	08104355 	.word	0x08104355
 8104314:	08104355 	.word	0x08104355
 8104318:	08104355 	.word	0x08104355
 810431c:	08104355 	.word	0x08104355
 8104320:	08104355 	.word	0x08104355
 8104324:	08104355 	.word	0x08104355
 8104328:	08104355 	.word	0x08104355
 810432c:	08104365 	.word	0x08104365
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	3304      	adds	r3, #4
 8104334:	2101      	movs	r1, #1
 8104336:	4618      	mov	r0, r3
 8104338:	f000 fdf8 	bl	8104f2c <RCCEx_PLL2_Config>
 810433c:	4603      	mov	r3, r0
 810433e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104340:	e011      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	3324      	adds	r3, #36	; 0x24
 8104346:	2101      	movs	r1, #1
 8104348:	4618      	mov	r0, r3
 810434a:	f000 fea1 	bl	8105090 <RCCEx_PLL3_Config>
 810434e:	4603      	mov	r3, r0
 8104350:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104352:	e008      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104354:	2301      	movs	r3, #1
 8104356:	75fb      	strb	r3, [r7, #23]
      break;
 8104358:	e005      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x842>
 810435a:	bf00      	nop
 810435c:	58024400 	.word	0x58024400
 8104360:	58024800 	.word	0x58024800
      break;
 8104364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104366:	7dfb      	ldrb	r3, [r7, #23]
 8104368:	2b00      	cmp	r3, #0
 810436a:	d109      	bne.n	8104380 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810436c:	4b96      	ldr	r3, [pc, #600]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104370:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104378:	4993      	ldr	r1, [pc, #588]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810437a:	4313      	orrs	r3, r2
 810437c:	654b      	str	r3, [r1, #84]	; 0x54
 810437e:	e001      	b.n	8104384 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104380:	7dfb      	ldrb	r3, [r7, #23]
 8104382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	f003 0302 	and.w	r3, r3, #2
 810438c:	2b00      	cmp	r3, #0
 810438e:	d038      	beq.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104394:	2b05      	cmp	r3, #5
 8104396:	d821      	bhi.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104398:	a201      	add	r2, pc, #4	; (adr r2, 81043a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810439e:	bf00      	nop
 81043a0:	081043e3 	.word	0x081043e3
 81043a4:	081043b9 	.word	0x081043b9
 81043a8:	081043cb 	.word	0x081043cb
 81043ac:	081043e3 	.word	0x081043e3
 81043b0:	081043e3 	.word	0x081043e3
 81043b4:	081043e3 	.word	0x081043e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	3304      	adds	r3, #4
 81043bc:	2101      	movs	r1, #1
 81043be:	4618      	mov	r0, r3
 81043c0:	f000 fdb4 	bl	8104f2c <RCCEx_PLL2_Config>
 81043c4:	4603      	mov	r3, r0
 81043c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81043c8:	e00c      	b.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	3324      	adds	r3, #36	; 0x24
 81043ce:	2101      	movs	r1, #1
 81043d0:	4618      	mov	r0, r3
 81043d2:	f000 fe5d 	bl	8105090 <RCCEx_PLL3_Config>
 81043d6:	4603      	mov	r3, r0
 81043d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81043da:	e003      	b.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043dc:	2301      	movs	r3, #1
 81043de:	75fb      	strb	r3, [r7, #23]
      break;
 81043e0:	e000      	b.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81043e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043e4:	7dfb      	ldrb	r3, [r7, #23]
 81043e6:	2b00      	cmp	r3, #0
 81043e8:	d109      	bne.n	81043fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81043ea:	4b77      	ldr	r3, [pc, #476]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043ee:	f023 0207 	bic.w	r2, r3, #7
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81043f6:	4974      	ldr	r1, [pc, #464]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043f8:	4313      	orrs	r3, r2
 81043fa:	654b      	str	r3, [r1, #84]	; 0x54
 81043fc:	e001      	b.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043fe:	7dfb      	ldrb	r3, [r7, #23]
 8104400:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	f003 0304 	and.w	r3, r3, #4
 810440a:	2b00      	cmp	r3, #0
 810440c:	d03a      	beq.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104414:	2b05      	cmp	r3, #5
 8104416:	d821      	bhi.n	810445c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8104418:	a201      	add	r2, pc, #4	; (adr r2, 8104420 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 810441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810441e:	bf00      	nop
 8104420:	08104463 	.word	0x08104463
 8104424:	08104439 	.word	0x08104439
 8104428:	0810444b 	.word	0x0810444b
 810442c:	08104463 	.word	0x08104463
 8104430:	08104463 	.word	0x08104463
 8104434:	08104463 	.word	0x08104463
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	3304      	adds	r3, #4
 810443c:	2101      	movs	r1, #1
 810443e:	4618      	mov	r0, r3
 8104440:	f000 fd74 	bl	8104f2c <RCCEx_PLL2_Config>
 8104444:	4603      	mov	r3, r0
 8104446:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104448:	e00c      	b.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	3324      	adds	r3, #36	; 0x24
 810444e:	2101      	movs	r1, #1
 8104450:	4618      	mov	r0, r3
 8104452:	f000 fe1d 	bl	8105090 <RCCEx_PLL3_Config>
 8104456:	4603      	mov	r3, r0
 8104458:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810445a:	e003      	b.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810445c:	2301      	movs	r3, #1
 810445e:	75fb      	strb	r3, [r7, #23]
      break;
 8104460:	e000      	b.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104464:	7dfb      	ldrb	r3, [r7, #23]
 8104466:	2b00      	cmp	r3, #0
 8104468:	d10a      	bne.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810446a:	4b57      	ldr	r3, [pc, #348]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810446e:	f023 0207 	bic.w	r2, r3, #7
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104478:	4953      	ldr	r1, [pc, #332]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810447a:	4313      	orrs	r3, r2
 810447c:	658b      	str	r3, [r1, #88]	; 0x58
 810447e:	e001      	b.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104480:	7dfb      	ldrb	r3, [r7, #23]
 8104482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	f003 0320 	and.w	r3, r3, #32
 810448c:	2b00      	cmp	r3, #0
 810448e:	d04b      	beq.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810449a:	d02e      	beq.n	81044fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810449c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81044a0:	d828      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044a6:	d02a      	beq.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044ac:	d822      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81044ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044b2:	d026      	beq.n	8104502 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81044b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044b8:	d81c      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81044ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044be:	d010      	beq.n	81044e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81044c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044c4:	d816      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d01d      	beq.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81044ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81044ce:	d111      	bne.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	3304      	adds	r3, #4
 81044d4:	2100      	movs	r1, #0
 81044d6:	4618      	mov	r0, r3
 81044d8:	f000 fd28 	bl	8104f2c <RCCEx_PLL2_Config>
 81044dc:	4603      	mov	r3, r0
 81044de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81044e0:	e012      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	3324      	adds	r3, #36	; 0x24
 81044e6:	2102      	movs	r1, #2
 81044e8:	4618      	mov	r0, r3
 81044ea:	f000 fdd1 	bl	8105090 <RCCEx_PLL3_Config>
 81044ee:	4603      	mov	r3, r0
 81044f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81044f2:	e009      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044f4:	2301      	movs	r3, #1
 81044f6:	75fb      	strb	r3, [r7, #23]
      break;
 81044f8:	e006      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81044fa:	bf00      	nop
 81044fc:	e004      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81044fe:	bf00      	nop
 8104500:	e002      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104502:	bf00      	nop
 8104504:	e000      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104508:	7dfb      	ldrb	r3, [r7, #23]
 810450a:	2b00      	cmp	r3, #0
 810450c:	d10a      	bne.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810450e:	4b2e      	ldr	r3, [pc, #184]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104512:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810451c:	492a      	ldr	r1, [pc, #168]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810451e:	4313      	orrs	r3, r2
 8104520:	654b      	str	r3, [r1, #84]	; 0x54
 8104522:	e001      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104524:	7dfb      	ldrb	r3, [r7, #23]
 8104526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104530:	2b00      	cmp	r3, #0
 8104532:	d04d      	beq.n	81045d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810453a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810453e:	d02e      	beq.n	810459e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104540:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104544:	d828      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810454a:	d02a      	beq.n	81045a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104550:	d822      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104556:	d026      	beq.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810455c:	d81c      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104562:	d010      	beq.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104568:	d816      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810456a:	2b00      	cmp	r3, #0
 810456c:	d01d      	beq.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104572:	d111      	bne.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	3304      	adds	r3, #4
 8104578:	2100      	movs	r1, #0
 810457a:	4618      	mov	r0, r3
 810457c:	f000 fcd6 	bl	8104f2c <RCCEx_PLL2_Config>
 8104580:	4603      	mov	r3, r0
 8104582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104584:	e012      	b.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	3324      	adds	r3, #36	; 0x24
 810458a:	2102      	movs	r1, #2
 810458c:	4618      	mov	r0, r3
 810458e:	f000 fd7f 	bl	8105090 <RCCEx_PLL3_Config>
 8104592:	4603      	mov	r3, r0
 8104594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104596:	e009      	b.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104598:	2301      	movs	r3, #1
 810459a:	75fb      	strb	r3, [r7, #23]
      break;
 810459c:	e006      	b.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810459e:	bf00      	nop
 81045a0:	e004      	b.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81045a2:	bf00      	nop
 81045a4:	e002      	b.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81045a6:	bf00      	nop
 81045a8:	e000      	b.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81045aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045ac:	7dfb      	ldrb	r3, [r7, #23]
 81045ae:	2b00      	cmp	r3, #0
 81045b0:	d10c      	bne.n	81045cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81045b2:	4b05      	ldr	r3, [pc, #20]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81045c0:	4901      	ldr	r1, [pc, #4]	; (81045c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81045c2:	4313      	orrs	r3, r2
 81045c4:	658b      	str	r3, [r1, #88]	; 0x58
 81045c6:	e003      	b.n	81045d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81045c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045cc:	7dfb      	ldrb	r3, [r7, #23]
 81045ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81045d8:	2b00      	cmp	r3, #0
 81045da:	d04b      	beq.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81045e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81045e6:	d02e      	beq.n	8104646 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81045e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81045ec:	d828      	bhi.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81045ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81045f2:	d02a      	beq.n	810464a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81045f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81045f8:	d822      	bhi.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81045fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81045fe:	d026      	beq.n	810464e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8104600:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104604:	d81c      	bhi.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810460a:	d010      	beq.n	810462e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 810460c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104610:	d816      	bhi.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104612:	2b00      	cmp	r3, #0
 8104614:	d01d      	beq.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810461a:	d111      	bne.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	3304      	adds	r3, #4
 8104620:	2100      	movs	r1, #0
 8104622:	4618      	mov	r0, r3
 8104624:	f000 fc82 	bl	8104f2c <RCCEx_PLL2_Config>
 8104628:	4603      	mov	r3, r0
 810462a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810462c:	e012      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	3324      	adds	r3, #36	; 0x24
 8104632:	2102      	movs	r1, #2
 8104634:	4618      	mov	r0, r3
 8104636:	f000 fd2b 	bl	8105090 <RCCEx_PLL3_Config>
 810463a:	4603      	mov	r3, r0
 810463c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810463e:	e009      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104640:	2301      	movs	r3, #1
 8104642:	75fb      	strb	r3, [r7, #23]
      break;
 8104644:	e006      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104646:	bf00      	nop
 8104648:	e004      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810464a:	bf00      	nop
 810464c:	e002      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810464e:	bf00      	nop
 8104650:	e000      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104654:	7dfb      	ldrb	r3, [r7, #23]
 8104656:	2b00      	cmp	r3, #0
 8104658:	d10a      	bne.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810465a:	4b9d      	ldr	r3, [pc, #628]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810465e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104668:	4999      	ldr	r1, [pc, #612]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810466a:	4313      	orrs	r3, r2
 810466c:	658b      	str	r3, [r1, #88]	; 0x58
 810466e:	e001      	b.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104670:	7dfb      	ldrb	r3, [r7, #23]
 8104672:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	f003 0308 	and.w	r3, r3, #8
 810467c:	2b00      	cmp	r3, #0
 810467e:	d01a      	beq.n	81046b6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810468a:	d10a      	bne.n	81046a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	3324      	adds	r3, #36	; 0x24
 8104690:	2102      	movs	r1, #2
 8104692:	4618      	mov	r0, r3
 8104694:	f000 fcfc 	bl	8105090 <RCCEx_PLL3_Config>
 8104698:	4603      	mov	r3, r0
 810469a:	2b00      	cmp	r3, #0
 810469c:	d001      	beq.n	81046a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810469e:	2301      	movs	r3, #1
 81046a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81046a2:	4b8b      	ldr	r3, [pc, #556]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81046a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81046b0:	4987      	ldr	r1, [pc, #540]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046b2:	4313      	orrs	r3, r2
 81046b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	f003 0310 	and.w	r3, r3, #16
 81046be:	2b00      	cmp	r3, #0
 81046c0:	d01a      	beq.n	81046f8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81046c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81046cc:	d10a      	bne.n	81046e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	3324      	adds	r3, #36	; 0x24
 81046d2:	2102      	movs	r1, #2
 81046d4:	4618      	mov	r0, r3
 81046d6:	f000 fcdb 	bl	8105090 <RCCEx_PLL3_Config>
 81046da:	4603      	mov	r3, r0
 81046dc:	2b00      	cmp	r3, #0
 81046de:	d001      	beq.n	81046e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81046e0:	2301      	movs	r3, #1
 81046e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81046e4:	4b7a      	ldr	r3, [pc, #488]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81046f2:	4977      	ldr	r1, [pc, #476]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046f4:	4313      	orrs	r3, r2
 81046f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	681b      	ldr	r3, [r3, #0]
 81046fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104700:	2b00      	cmp	r3, #0
 8104702:	d034      	beq.n	810476e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810470a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810470e:	d01d      	beq.n	810474c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8104710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104714:	d817      	bhi.n	8104746 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104716:	2b00      	cmp	r3, #0
 8104718:	d003      	beq.n	8104722 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810471e:	d009      	beq.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104720:	e011      	b.n	8104746 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	3304      	adds	r3, #4
 8104726:	2100      	movs	r1, #0
 8104728:	4618      	mov	r0, r3
 810472a:	f000 fbff 	bl	8104f2c <RCCEx_PLL2_Config>
 810472e:	4603      	mov	r3, r0
 8104730:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104732:	e00c      	b.n	810474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	3324      	adds	r3, #36	; 0x24
 8104738:	2102      	movs	r1, #2
 810473a:	4618      	mov	r0, r3
 810473c:	f000 fca8 	bl	8105090 <RCCEx_PLL3_Config>
 8104740:	4603      	mov	r3, r0
 8104742:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104744:	e003      	b.n	810474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104746:	2301      	movs	r3, #1
 8104748:	75fb      	strb	r3, [r7, #23]
      break;
 810474a:	e000      	b.n	810474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 810474c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810474e:	7dfb      	ldrb	r3, [r7, #23]
 8104750:	2b00      	cmp	r3, #0
 8104752:	d10a      	bne.n	810476a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104754:	4b5e      	ldr	r3, [pc, #376]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104762:	495b      	ldr	r1, [pc, #364]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104764:	4313      	orrs	r3, r2
 8104766:	658b      	str	r3, [r1, #88]	; 0x58
 8104768:	e001      	b.n	810476e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810476a:	7dfb      	ldrb	r3, [r7, #23]
 810476c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104776:	2b00      	cmp	r3, #0
 8104778:	d033      	beq.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104780:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104784:	d01c      	beq.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810478a:	d816      	bhi.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 810478c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104790:	d003      	beq.n	810479a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8104792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104796:	d007      	beq.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104798:	e00f      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810479a:	4b4d      	ldr	r3, [pc, #308]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810479e:	4a4c      	ldr	r2, [pc, #304]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81047a6:	e00c      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	3324      	adds	r3, #36	; 0x24
 81047ac:	2101      	movs	r1, #1
 81047ae:	4618      	mov	r0, r3
 81047b0:	f000 fc6e 	bl	8105090 <RCCEx_PLL3_Config>
 81047b4:	4603      	mov	r3, r0
 81047b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81047b8:	e003      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81047ba:	2301      	movs	r3, #1
 81047bc:	75fb      	strb	r3, [r7, #23]
      break;
 81047be:	e000      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81047c2:	7dfb      	ldrb	r3, [r7, #23]
 81047c4:	2b00      	cmp	r3, #0
 81047c6:	d10a      	bne.n	81047de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81047c8:	4b41      	ldr	r3, [pc, #260]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047d6:	493e      	ldr	r1, [pc, #248]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047d8:	4313      	orrs	r3, r2
 81047da:	654b      	str	r3, [r1, #84]	; 0x54
 81047dc:	e001      	b.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047de:	7dfb      	ldrb	r3, [r7, #23]
 81047e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	681b      	ldr	r3, [r3, #0]
 81047e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81047ea:	2b00      	cmp	r3, #0
 81047ec:	d029      	beq.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81047f2:	2b00      	cmp	r3, #0
 81047f4:	d003      	beq.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81047fa:	d007      	beq.n	810480c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81047fc:	e00f      	b.n	810481e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047fe:	4b34      	ldr	r3, [pc, #208]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104802:	4a33      	ldr	r2, [pc, #204]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810480a:	e00b      	b.n	8104824 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	3304      	adds	r3, #4
 8104810:	2102      	movs	r1, #2
 8104812:	4618      	mov	r0, r3
 8104814:	f000 fb8a 	bl	8104f2c <RCCEx_PLL2_Config>
 8104818:	4603      	mov	r3, r0
 810481a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810481c:	e002      	b.n	8104824 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810481e:	2301      	movs	r3, #1
 8104820:	75fb      	strb	r3, [r7, #23]
      break;
 8104822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104824:	7dfb      	ldrb	r3, [r7, #23]
 8104826:	2b00      	cmp	r3, #0
 8104828:	d109      	bne.n	810483e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810482a:	4b29      	ldr	r3, [pc, #164]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810482e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104836:	4926      	ldr	r1, [pc, #152]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104838:	4313      	orrs	r3, r2
 810483a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810483c:	e001      	b.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810483e:	7dfb      	ldrb	r3, [r7, #23]
 8104840:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810484a:	2b00      	cmp	r3, #0
 810484c:	d00a      	beq.n	8104864 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	3324      	adds	r3, #36	; 0x24
 8104852:	2102      	movs	r1, #2
 8104854:	4618      	mov	r0, r3
 8104856:	f000 fc1b 	bl	8105090 <RCCEx_PLL3_Config>
 810485a:	4603      	mov	r3, r0
 810485c:	2b00      	cmp	r3, #0
 810485e:	d001      	beq.n	8104864 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104860:	2301      	movs	r3, #1
 8104862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810486c:	2b00      	cmp	r3, #0
 810486e:	d033      	beq.n	81048d8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104878:	d017      	beq.n	81048aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810487a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810487e:	d811      	bhi.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104884:	d013      	beq.n	81048ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810488a:	d80b      	bhi.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810488c:	2b00      	cmp	r3, #0
 810488e:	d010      	beq.n	81048b2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8104890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104894:	d106      	bne.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104896:	4b0e      	ldr	r3, [pc, #56]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810489a:	4a0d      	ldr	r2, [pc, #52]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810489c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81048a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81048a2:	e007      	b.n	81048b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81048a4:	2301      	movs	r3, #1
 81048a6:	75fb      	strb	r3, [r7, #23]
      break;
 81048a8:	e004      	b.n	81048b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81048aa:	bf00      	nop
 81048ac:	e002      	b.n	81048b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81048ae:	bf00      	nop
 81048b0:	e000      	b.n	81048b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81048b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81048b4:	7dfb      	ldrb	r3, [r7, #23]
 81048b6:	2b00      	cmp	r3, #0
 81048b8:	d10c      	bne.n	81048d4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81048ba:	4b05      	ldr	r3, [pc, #20]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81048c6:	4902      	ldr	r1, [pc, #8]	; (81048d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81048c8:	4313      	orrs	r3, r2
 81048ca:	654b      	str	r3, [r1, #84]	; 0x54
 81048cc:	e004      	b.n	81048d8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81048ce:	bf00      	nop
 81048d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048d4:	7dfb      	ldrb	r3, [r7, #23]
 81048d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81048e0:	2b00      	cmp	r3, #0
 81048e2:	d008      	beq.n	81048f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81048e4:	4b31      	ldr	r3, [pc, #196]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81048f0:	492e      	ldr	r1, [pc, #184]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81048f2:	4313      	orrs	r3, r2
 81048f4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81048fe:	2b00      	cmp	r3, #0
 8104900:	d009      	beq.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104902:	4b2a      	ldr	r3, [pc, #168]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104904:	691b      	ldr	r3, [r3, #16]
 8104906:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104910:	4926      	ldr	r1, [pc, #152]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104912:	4313      	orrs	r3, r2
 8104914:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810491e:	2b00      	cmp	r3, #0
 8104920:	d008      	beq.n	8104934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104922:	4b22      	ldr	r3, [pc, #136]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104926:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810492e:	491f      	ldr	r1, [pc, #124]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104930:	4313      	orrs	r3, r2
 8104932:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810493c:	2b00      	cmp	r3, #0
 810493e:	d00d      	beq.n	810495c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104940:	4b1a      	ldr	r3, [pc, #104]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104942:	691b      	ldr	r3, [r3, #16]
 8104944:	4a19      	ldr	r2, [pc, #100]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104946:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810494a:	6113      	str	r3, [r2, #16]
 810494c:	4b17      	ldr	r3, [pc, #92]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810494e:	691a      	ldr	r2, [r3, #16]
 8104950:	687b      	ldr	r3, [r7, #4]
 8104952:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104956:	4915      	ldr	r1, [pc, #84]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104958:	4313      	orrs	r3, r2
 810495a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	2b00      	cmp	r3, #0
 8104962:	da08      	bge.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104964:	4b11      	ldr	r3, [pc, #68]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104968:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104970:	490e      	ldr	r1, [pc, #56]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104972:	4313      	orrs	r3, r2
 8104974:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810497e:	2b00      	cmp	r3, #0
 8104980:	d009      	beq.n	8104996 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104982:	4b0a      	ldr	r3, [pc, #40]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104986:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104990:	4906      	ldr	r1, [pc, #24]	; (81049ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104992:	4313      	orrs	r3, r2
 8104994:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104996:	7dbb      	ldrb	r3, [r7, #22]
 8104998:	2b00      	cmp	r3, #0
 810499a:	d101      	bne.n	81049a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 810499c:	2300      	movs	r3, #0
 810499e:	e000      	b.n	81049a2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81049a0:	2301      	movs	r3, #1
}
 81049a2:	4618      	mov	r0, r3
 81049a4:	3718      	adds	r7, #24
 81049a6:	46bd      	mov	sp, r7
 81049a8:	bd80      	pop	{r7, pc}
 81049aa:	bf00      	nop
 81049ac:	58024400 	.word	0x58024400

081049b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81049b0:	b580      	push	{r7, lr}
 81049b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81049b4:	f7ff f858 	bl	8103a68 <HAL_RCC_GetHCLKFreq>
 81049b8:	4602      	mov	r2, r0
 81049ba:	4b06      	ldr	r3, [pc, #24]	; (81049d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81049bc:	6a1b      	ldr	r3, [r3, #32]
 81049be:	091b      	lsrs	r3, r3, #4
 81049c0:	f003 0307 	and.w	r3, r3, #7
 81049c4:	4904      	ldr	r1, [pc, #16]	; (81049d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81049c6:	5ccb      	ldrb	r3, [r1, r3]
 81049c8:	f003 031f 	and.w	r3, r3, #31
 81049cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81049d0:	4618      	mov	r0, r3
 81049d2:	bd80      	pop	{r7, pc}
 81049d4:	58024400 	.word	0x58024400
 81049d8:	0810c210 	.word	0x0810c210

081049dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81049dc:	b480      	push	{r7}
 81049de:	b089      	sub	sp, #36	; 0x24
 81049e0:	af00      	add	r7, sp, #0
 81049e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049e4:	4ba1      	ldr	r3, [pc, #644]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049e8:	f003 0303 	and.w	r3, r3, #3
 81049ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81049ee:	4b9f      	ldr	r3, [pc, #636]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049f2:	0b1b      	lsrs	r3, r3, #12
 81049f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81049f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81049fa:	4b9c      	ldr	r3, [pc, #624]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049fe:	091b      	lsrs	r3, r3, #4
 8104a00:	f003 0301 	and.w	r3, r3, #1
 8104a04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8104a06:	4b99      	ldr	r3, [pc, #612]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104a0a:	08db      	lsrs	r3, r3, #3
 8104a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104a10:	693a      	ldr	r2, [r7, #16]
 8104a12:	fb02 f303 	mul.w	r3, r2, r3
 8104a16:	ee07 3a90 	vmov	s15, r3
 8104a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104a22:	697b      	ldr	r3, [r7, #20]
 8104a24:	2b00      	cmp	r3, #0
 8104a26:	f000 8111 	beq.w	8104c4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104a2a:	69bb      	ldr	r3, [r7, #24]
 8104a2c:	2b02      	cmp	r3, #2
 8104a2e:	f000 8083 	beq.w	8104b38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104a32:	69bb      	ldr	r3, [r7, #24]
 8104a34:	2b02      	cmp	r3, #2
 8104a36:	f200 80a1 	bhi.w	8104b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104a3a:	69bb      	ldr	r3, [r7, #24]
 8104a3c:	2b00      	cmp	r3, #0
 8104a3e:	d003      	beq.n	8104a48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104a40:	69bb      	ldr	r3, [r7, #24]
 8104a42:	2b01      	cmp	r3, #1
 8104a44:	d056      	beq.n	8104af4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104a46:	e099      	b.n	8104b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a48:	4b88      	ldr	r3, [pc, #544]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	f003 0320 	and.w	r3, r3, #32
 8104a50:	2b00      	cmp	r3, #0
 8104a52:	d02d      	beq.n	8104ab0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104a54:	4b85      	ldr	r3, [pc, #532]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	08db      	lsrs	r3, r3, #3
 8104a5a:	f003 0303 	and.w	r3, r3, #3
 8104a5e:	4a84      	ldr	r2, [pc, #528]	; (8104c70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104a60:	fa22 f303 	lsr.w	r3, r2, r3
 8104a64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a66:	68bb      	ldr	r3, [r7, #8]
 8104a68:	ee07 3a90 	vmov	s15, r3
 8104a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a70:	697b      	ldr	r3, [r7, #20]
 8104a72:	ee07 3a90 	vmov	s15, r3
 8104a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a7e:	4b7b      	ldr	r3, [pc, #492]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a86:	ee07 3a90 	vmov	s15, r3
 8104a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104aae:	e087      	b.n	8104bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104ab0:	697b      	ldr	r3, [r7, #20]
 8104ab2:	ee07 3a90 	vmov	s15, r3
 8104ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104c78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ac2:	4b6a      	ldr	r3, [pc, #424]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104aca:	ee07 3a90 	vmov	s15, r3
 8104ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ad6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104af2:	e065      	b.n	8104bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104af4:	697b      	ldr	r3, [r7, #20]
 8104af6:	ee07 3a90 	vmov	s15, r3
 8104afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104afe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b06:	4b59      	ldr	r3, [pc, #356]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b0e:	ee07 3a90 	vmov	s15, r3
 8104b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104b36:	e043      	b.n	8104bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104b38:	697b      	ldr	r3, [r7, #20]
 8104b3a:	ee07 3a90 	vmov	s15, r3
 8104b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b4a:	4b48      	ldr	r3, [pc, #288]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b52:	ee07 3a90 	vmov	s15, r3
 8104b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104b7a:	e021      	b.n	8104bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104b7c:	697b      	ldr	r3, [r7, #20]
 8104b7e:	ee07 3a90 	vmov	s15, r3
 8104b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b8e:	4b37      	ldr	r3, [pc, #220]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b96:	ee07 3a90 	vmov	s15, r3
 8104b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ba2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104bbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104bc0:	4b2a      	ldr	r3, [pc, #168]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104bc4:	0a5b      	lsrs	r3, r3, #9
 8104bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104bca:	ee07 3a90 	vmov	s15, r3
 8104bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8104bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104be6:	ee17 2a90 	vmov	r2, s15
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104bee:	4b1f      	ldr	r3, [pc, #124]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104bf2:	0c1b      	lsrs	r3, r3, #16
 8104bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104bf8:	ee07 3a90 	vmov	s15, r3
 8104bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c14:	ee17 2a90 	vmov	r2, s15
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104c1c:	4b13      	ldr	r3, [pc, #76]	; (8104c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c20:	0e1b      	lsrs	r3, r3, #24
 8104c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c26:	ee07 3a90 	vmov	s15, r3
 8104c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c42:	ee17 2a90 	vmov	r2, s15
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104c4a:	e008      	b.n	8104c5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	2200      	movs	r2, #0
 8104c50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	2200      	movs	r2, #0
 8104c56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	2200      	movs	r2, #0
 8104c5c:	609a      	str	r2, [r3, #8]
}
 8104c5e:	bf00      	nop
 8104c60:	3724      	adds	r7, #36	; 0x24
 8104c62:	46bd      	mov	sp, r7
 8104c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c68:	4770      	bx	lr
 8104c6a:	bf00      	nop
 8104c6c:	58024400 	.word	0x58024400
 8104c70:	03d09000 	.word	0x03d09000
 8104c74:	46000000 	.word	0x46000000
 8104c78:	4c742400 	.word	0x4c742400
 8104c7c:	4a742400 	.word	0x4a742400
 8104c80:	4af42400 	.word	0x4af42400

08104c84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104c84:	b480      	push	{r7}
 8104c86:	b089      	sub	sp, #36	; 0x24
 8104c88:	af00      	add	r7, sp, #0
 8104c8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104c8c:	4ba1      	ldr	r3, [pc, #644]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c90:	f003 0303 	and.w	r3, r3, #3
 8104c94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104c96:	4b9f      	ldr	r3, [pc, #636]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c9a:	0d1b      	lsrs	r3, r3, #20
 8104c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104ca0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104ca2:	4b9c      	ldr	r3, [pc, #624]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ca6:	0a1b      	lsrs	r3, r3, #8
 8104ca8:	f003 0301 	and.w	r3, r3, #1
 8104cac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104cae:	4b99      	ldr	r3, [pc, #612]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104cb2:	08db      	lsrs	r3, r3, #3
 8104cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104cb8:	693a      	ldr	r2, [r7, #16]
 8104cba:	fb02 f303 	mul.w	r3, r2, r3
 8104cbe:	ee07 3a90 	vmov	s15, r3
 8104cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104cca:	697b      	ldr	r3, [r7, #20]
 8104ccc:	2b00      	cmp	r3, #0
 8104cce:	f000 8111 	beq.w	8104ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104cd2:	69bb      	ldr	r3, [r7, #24]
 8104cd4:	2b02      	cmp	r3, #2
 8104cd6:	f000 8083 	beq.w	8104de0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104cda:	69bb      	ldr	r3, [r7, #24]
 8104cdc:	2b02      	cmp	r3, #2
 8104cde:	f200 80a1 	bhi.w	8104e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104ce2:	69bb      	ldr	r3, [r7, #24]
 8104ce4:	2b00      	cmp	r3, #0
 8104ce6:	d003      	beq.n	8104cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104ce8:	69bb      	ldr	r3, [r7, #24]
 8104cea:	2b01      	cmp	r3, #1
 8104cec:	d056      	beq.n	8104d9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104cee:	e099      	b.n	8104e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104cf0:	4b88      	ldr	r3, [pc, #544]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	f003 0320 	and.w	r3, r3, #32
 8104cf8:	2b00      	cmp	r3, #0
 8104cfa:	d02d      	beq.n	8104d58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104cfc:	4b85      	ldr	r3, [pc, #532]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	08db      	lsrs	r3, r3, #3
 8104d02:	f003 0303 	and.w	r3, r3, #3
 8104d06:	4a84      	ldr	r2, [pc, #528]	; (8104f18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104d08:	fa22 f303 	lsr.w	r3, r2, r3
 8104d0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104d0e:	68bb      	ldr	r3, [r7, #8]
 8104d10:	ee07 3a90 	vmov	s15, r3
 8104d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d18:	697b      	ldr	r3, [r7, #20]
 8104d1a:	ee07 3a90 	vmov	s15, r3
 8104d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d26:	4b7b      	ldr	r3, [pc, #492]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d2e:	ee07 3a90 	vmov	s15, r3
 8104d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104d56:	e087      	b.n	8104e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104d58:	697b      	ldr	r3, [r7, #20]
 8104d5a:	ee07 3a90 	vmov	s15, r3
 8104d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104f20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d6a:	4b6a      	ldr	r3, [pc, #424]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d72:	ee07 3a90 	vmov	s15, r3
 8104d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d9a:	e065      	b.n	8104e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104d9c:	697b      	ldr	r3, [r7, #20]
 8104d9e:	ee07 3a90 	vmov	s15, r3
 8104da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104da6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dae:	4b59      	ldr	r3, [pc, #356]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104db6:	ee07 3a90 	vmov	s15, r3
 8104dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8104dc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104dde:	e043      	b.n	8104e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104de0:	697b      	ldr	r3, [r7, #20]
 8104de2:	ee07 3a90 	vmov	s15, r3
 8104de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104df2:	4b48      	ldr	r3, [pc, #288]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104dfa:	ee07 3a90 	vmov	s15, r3
 8104dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104e22:	e021      	b.n	8104e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104e24:	697b      	ldr	r3, [r7, #20]
 8104e26:	ee07 3a90 	vmov	s15, r3
 8104e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e36:	4b37      	ldr	r3, [pc, #220]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e3e:	ee07 3a90 	vmov	s15, r3
 8104e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104e66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104e68:	4b2a      	ldr	r3, [pc, #168]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e6c:	0a5b      	lsrs	r3, r3, #9
 8104e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104e72:	ee07 3a90 	vmov	s15, r3
 8104e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8104e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104e8e:	ee17 2a90 	vmov	r2, s15
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104e96:	4b1f      	ldr	r3, [pc, #124]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e9a:	0c1b      	lsrs	r3, r3, #16
 8104e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ea0:	ee07 3a90 	vmov	s15, r3
 8104ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8104eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ebc:	ee17 2a90 	vmov	r2, s15
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104ec4:	4b13      	ldr	r3, [pc, #76]	; (8104f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ec8:	0e1b      	lsrs	r3, r3, #24
 8104eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ece:	ee07 3a90 	vmov	s15, r3
 8104ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104eea:	ee17 2a90 	vmov	r2, s15
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104ef2:	e008      	b.n	8104f06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	2200      	movs	r2, #0
 8104ef8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	2200      	movs	r2, #0
 8104efe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	2200      	movs	r2, #0
 8104f04:	609a      	str	r2, [r3, #8]
}
 8104f06:	bf00      	nop
 8104f08:	3724      	adds	r7, #36	; 0x24
 8104f0a:	46bd      	mov	sp, r7
 8104f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f10:	4770      	bx	lr
 8104f12:	bf00      	nop
 8104f14:	58024400 	.word	0x58024400
 8104f18:	03d09000 	.word	0x03d09000
 8104f1c:	46000000 	.word	0x46000000
 8104f20:	4c742400 	.word	0x4c742400
 8104f24:	4a742400 	.word	0x4a742400
 8104f28:	4af42400 	.word	0x4af42400

08104f2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104f2c:	b580      	push	{r7, lr}
 8104f2e:	b084      	sub	sp, #16
 8104f30:	af00      	add	r7, sp, #0
 8104f32:	6078      	str	r0, [r7, #4]
 8104f34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104f36:	2300      	movs	r3, #0
 8104f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104f3a:	4b54      	ldr	r3, [pc, #336]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f3e:	f003 0303 	and.w	r3, r3, #3
 8104f42:	2b03      	cmp	r3, #3
 8104f44:	d101      	bne.n	8104f4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104f46:	2301      	movs	r3, #1
 8104f48:	e09b      	b.n	8105082 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104f4a:	4b50      	ldr	r3, [pc, #320]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	4a4f      	ldr	r2, [pc, #316]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104f50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f56:	f7fd f97d 	bl	8102254 <HAL_GetTick>
 8104f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104f5c:	e008      	b.n	8104f70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104f5e:	f7fd f979 	bl	8102254 <HAL_GetTick>
 8104f62:	4602      	mov	r2, r0
 8104f64:	68bb      	ldr	r3, [r7, #8]
 8104f66:	1ad3      	subs	r3, r2, r3
 8104f68:	2b02      	cmp	r3, #2
 8104f6a:	d901      	bls.n	8104f70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104f6c:	2303      	movs	r3, #3
 8104f6e:	e088      	b.n	8105082 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104f70:	4b46      	ldr	r3, [pc, #280]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d1f0      	bne.n	8104f5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104f7c:	4b43      	ldr	r3, [pc, #268]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	031b      	lsls	r3, r3, #12
 8104f8a:	4940      	ldr	r1, [pc, #256]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104f8c:	4313      	orrs	r3, r2
 8104f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	685b      	ldr	r3, [r3, #4]
 8104f94:	3b01      	subs	r3, #1
 8104f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	689b      	ldr	r3, [r3, #8]
 8104f9e:	3b01      	subs	r3, #1
 8104fa0:	025b      	lsls	r3, r3, #9
 8104fa2:	b29b      	uxth	r3, r3
 8104fa4:	431a      	orrs	r2, r3
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	68db      	ldr	r3, [r3, #12]
 8104faa:	3b01      	subs	r3, #1
 8104fac:	041b      	lsls	r3, r3, #16
 8104fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104fb2:	431a      	orrs	r2, r3
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	691b      	ldr	r3, [r3, #16]
 8104fb8:	3b01      	subs	r3, #1
 8104fba:	061b      	lsls	r3, r3, #24
 8104fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104fc0:	4932      	ldr	r1, [pc, #200]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104fc2:	4313      	orrs	r3, r2
 8104fc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104fc6:	4b31      	ldr	r3, [pc, #196]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	695b      	ldr	r3, [r3, #20]
 8104fd2:	492e      	ldr	r1, [pc, #184]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104fd4:	4313      	orrs	r3, r2
 8104fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104fd8:	4b2c      	ldr	r3, [pc, #176]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fdc:	f023 0220 	bic.w	r2, r3, #32
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	699b      	ldr	r3, [r3, #24]
 8104fe4:	4929      	ldr	r1, [pc, #164]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104fe6:	4313      	orrs	r3, r2
 8104fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104fea:	4b28      	ldr	r3, [pc, #160]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fee:	4a27      	ldr	r2, [pc, #156]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104ff0:	f023 0310 	bic.w	r3, r3, #16
 8104ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104ff6:	4b25      	ldr	r3, [pc, #148]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8104ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104ffe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105002:	687a      	ldr	r2, [r7, #4]
 8105004:	69d2      	ldr	r2, [r2, #28]
 8105006:	00d2      	lsls	r2, r2, #3
 8105008:	4920      	ldr	r1, [pc, #128]	; (810508c <RCCEx_PLL2_Config+0x160>)
 810500a:	4313      	orrs	r3, r2
 810500c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810500e:	4b1f      	ldr	r3, [pc, #124]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105012:	4a1e      	ldr	r2, [pc, #120]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105014:	f043 0310 	orr.w	r3, r3, #16
 8105018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810501a:	683b      	ldr	r3, [r7, #0]
 810501c:	2b00      	cmp	r3, #0
 810501e:	d106      	bne.n	810502e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105020:	4b1a      	ldr	r3, [pc, #104]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105024:	4a19      	ldr	r2, [pc, #100]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810502a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810502c:	e00f      	b.n	810504e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810502e:	683b      	ldr	r3, [r7, #0]
 8105030:	2b01      	cmp	r3, #1
 8105032:	d106      	bne.n	8105042 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105034:	4b15      	ldr	r3, [pc, #84]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105038:	4a14      	ldr	r2, [pc, #80]	; (810508c <RCCEx_PLL2_Config+0x160>)
 810503a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810503e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105040:	e005      	b.n	810504e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105042:	4b12      	ldr	r3, [pc, #72]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105046:	4a11      	ldr	r2, [pc, #68]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810504c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810504e:	4b0f      	ldr	r3, [pc, #60]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	4a0e      	ldr	r2, [pc, #56]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105054:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810505a:	f7fd f8fb 	bl	8102254 <HAL_GetTick>
 810505e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105060:	e008      	b.n	8105074 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105062:	f7fd f8f7 	bl	8102254 <HAL_GetTick>
 8105066:	4602      	mov	r2, r0
 8105068:	68bb      	ldr	r3, [r7, #8]
 810506a:	1ad3      	subs	r3, r2, r3
 810506c:	2b02      	cmp	r3, #2
 810506e:	d901      	bls.n	8105074 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105070:	2303      	movs	r3, #3
 8105072:	e006      	b.n	8105082 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105074:	4b05      	ldr	r3, [pc, #20]	; (810508c <RCCEx_PLL2_Config+0x160>)
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810507c:	2b00      	cmp	r3, #0
 810507e:	d0f0      	beq.n	8105062 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105080:	7bfb      	ldrb	r3, [r7, #15]
}
 8105082:	4618      	mov	r0, r3
 8105084:	3710      	adds	r7, #16
 8105086:	46bd      	mov	sp, r7
 8105088:	bd80      	pop	{r7, pc}
 810508a:	bf00      	nop
 810508c:	58024400 	.word	0x58024400

08105090 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105090:	b580      	push	{r7, lr}
 8105092:	b084      	sub	sp, #16
 8105094:	af00      	add	r7, sp, #0
 8105096:	6078      	str	r0, [r7, #4]
 8105098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810509a:	2300      	movs	r3, #0
 810509c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810509e:	4b54      	ldr	r3, [pc, #336]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050a2:	f003 0303 	and.w	r3, r3, #3
 81050a6:	2b03      	cmp	r3, #3
 81050a8:	d101      	bne.n	81050ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81050aa:	2301      	movs	r3, #1
 81050ac:	e09b      	b.n	81051e6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81050ae:	4b50      	ldr	r3, [pc, #320]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81050b0:	681b      	ldr	r3, [r3, #0]
 81050b2:	4a4f      	ldr	r2, [pc, #316]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81050b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81050ba:	f7fd f8cb 	bl	8102254 <HAL_GetTick>
 81050be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81050c0:	e008      	b.n	81050d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81050c2:	f7fd f8c7 	bl	8102254 <HAL_GetTick>
 81050c6:	4602      	mov	r2, r0
 81050c8:	68bb      	ldr	r3, [r7, #8]
 81050ca:	1ad3      	subs	r3, r2, r3
 81050cc:	2b02      	cmp	r3, #2
 81050ce:	d901      	bls.n	81050d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81050d0:	2303      	movs	r3, #3
 81050d2:	e088      	b.n	81051e6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81050d4:	4b46      	ldr	r3, [pc, #280]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81050dc:	2b00      	cmp	r3, #0
 81050de:	d1f0      	bne.n	81050c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81050e0:	4b43      	ldr	r3, [pc, #268]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	051b      	lsls	r3, r3, #20
 81050ee:	4940      	ldr	r1, [pc, #256]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81050f0:	4313      	orrs	r3, r2
 81050f2:	628b      	str	r3, [r1, #40]	; 0x28
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	685b      	ldr	r3, [r3, #4]
 81050f8:	3b01      	subs	r3, #1
 81050fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	689b      	ldr	r3, [r3, #8]
 8105102:	3b01      	subs	r3, #1
 8105104:	025b      	lsls	r3, r3, #9
 8105106:	b29b      	uxth	r3, r3
 8105108:	431a      	orrs	r2, r3
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	68db      	ldr	r3, [r3, #12]
 810510e:	3b01      	subs	r3, #1
 8105110:	041b      	lsls	r3, r3, #16
 8105112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105116:	431a      	orrs	r2, r3
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	691b      	ldr	r3, [r3, #16]
 810511c:	3b01      	subs	r3, #1
 810511e:	061b      	lsls	r3, r3, #24
 8105120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105124:	4932      	ldr	r1, [pc, #200]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105126:	4313      	orrs	r3, r2
 8105128:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810512a:	4b31      	ldr	r3, [pc, #196]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810512e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	695b      	ldr	r3, [r3, #20]
 8105136:	492e      	ldr	r1, [pc, #184]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105138:	4313      	orrs	r3, r2
 810513a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810513c:	4b2c      	ldr	r3, [pc, #176]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	699b      	ldr	r3, [r3, #24]
 8105148:	4929      	ldr	r1, [pc, #164]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810514a:	4313      	orrs	r3, r2
 810514c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810514e:	4b28      	ldr	r3, [pc, #160]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105152:	4a27      	ldr	r2, [pc, #156]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810515a:	4b25      	ldr	r3, [pc, #148]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810515e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105162:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105166:	687a      	ldr	r2, [r7, #4]
 8105168:	69d2      	ldr	r2, [r2, #28]
 810516a:	00d2      	lsls	r2, r2, #3
 810516c:	4920      	ldr	r1, [pc, #128]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810516e:	4313      	orrs	r3, r2
 8105170:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105172:	4b1f      	ldr	r3, [pc, #124]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105176:	4a1e      	ldr	r2, [pc, #120]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810517c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810517e:	683b      	ldr	r3, [r7, #0]
 8105180:	2b00      	cmp	r3, #0
 8105182:	d106      	bne.n	8105192 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105184:	4b1a      	ldr	r3, [pc, #104]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 8105186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105188:	4a19      	ldr	r2, [pc, #100]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810518a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810518e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105190:	e00f      	b.n	81051b2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105192:	683b      	ldr	r3, [r7, #0]
 8105194:	2b01      	cmp	r3, #1
 8105196:	d106      	bne.n	81051a6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105198:	4b15      	ldr	r3, [pc, #84]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810519c:	4a14      	ldr	r2, [pc, #80]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 810519e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81051a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81051a4:	e005      	b.n	81051b2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81051a6:	4b12      	ldr	r3, [pc, #72]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051aa:	4a11      	ldr	r2, [pc, #68]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81051ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81051b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81051b2:	4b0f      	ldr	r3, [pc, #60]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	4a0e      	ldr	r2, [pc, #56]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81051bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81051be:	f7fd f849 	bl	8102254 <HAL_GetTick>
 81051c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81051c4:	e008      	b.n	81051d8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81051c6:	f7fd f845 	bl	8102254 <HAL_GetTick>
 81051ca:	4602      	mov	r2, r0
 81051cc:	68bb      	ldr	r3, [r7, #8]
 81051ce:	1ad3      	subs	r3, r2, r3
 81051d0:	2b02      	cmp	r3, #2
 81051d2:	d901      	bls.n	81051d8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81051d4:	2303      	movs	r3, #3
 81051d6:	e006      	b.n	81051e6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81051d8:	4b05      	ldr	r3, [pc, #20]	; (81051f0 <RCCEx_PLL3_Config+0x160>)
 81051da:	681b      	ldr	r3, [r3, #0]
 81051dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81051e0:	2b00      	cmp	r3, #0
 81051e2:	d0f0      	beq.n	81051c6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 81051e6:	4618      	mov	r0, r3
 81051e8:	3710      	adds	r7, #16
 81051ea:	46bd      	mov	sp, r7
 81051ec:	bd80      	pop	{r7, pc}
 81051ee:	bf00      	nop
 81051f0:	58024400 	.word	0x58024400

081051f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81051f4:	b580      	push	{r7, lr}
 81051f6:	b082      	sub	sp, #8
 81051f8:	af00      	add	r7, sp, #0
 81051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	2b00      	cmp	r3, #0
 8105200:	d101      	bne.n	8105206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105202:	2301      	movs	r3, #1
 8105204:	e049      	b.n	810529a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810520c:	b2db      	uxtb	r3, r3
 810520e:	2b00      	cmp	r3, #0
 8105210:	d106      	bne.n	8105220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	2200      	movs	r2, #0
 8105216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810521a:	6878      	ldr	r0, [r7, #4]
 810521c:	f7fc fc50 	bl	8101ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	2202      	movs	r2, #2
 8105224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	681a      	ldr	r2, [r3, #0]
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	3304      	adds	r3, #4
 8105230:	4619      	mov	r1, r3
 8105232:	4610      	mov	r0, r2
 8105234:	f000 fc56 	bl	8105ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	2201      	movs	r2, #1
 810523c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	2201      	movs	r2, #1
 8105244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	2201      	movs	r2, #1
 810524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	2201      	movs	r2, #1
 8105254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	2201      	movs	r2, #1
 810525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	2201      	movs	r2, #1
 8105264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	2201      	movs	r2, #1
 810526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	2201      	movs	r2, #1
 8105274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	2201      	movs	r2, #1
 810527c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	2201      	movs	r2, #1
 8105284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	2201      	movs	r2, #1
 810528c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	2201      	movs	r2, #1
 8105294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105298:	2300      	movs	r3, #0
}
 810529a:	4618      	mov	r0, r3
 810529c:	3708      	adds	r7, #8
 810529e:	46bd      	mov	sp, r7
 81052a0:	bd80      	pop	{r7, pc}

081052a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81052a2:	b580      	push	{r7, lr}
 81052a4:	b082      	sub	sp, #8
 81052a6:	af00      	add	r7, sp, #0
 81052a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	2b00      	cmp	r3, #0
 81052ae:	d101      	bne.n	81052b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81052b0:	2301      	movs	r3, #1
 81052b2:	e049      	b.n	8105348 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81052ba:	b2db      	uxtb	r3, r3
 81052bc:	2b00      	cmp	r3, #0
 81052be:	d106      	bne.n	81052ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	2200      	movs	r2, #0
 81052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81052c8:	6878      	ldr	r0, [r7, #4]
 81052ca:	f000 f841 	bl	8105350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	2202      	movs	r2, #2
 81052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681a      	ldr	r2, [r3, #0]
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	3304      	adds	r3, #4
 81052de:	4619      	mov	r1, r3
 81052e0:	4610      	mov	r0, r2
 81052e2:	f000 fbff 	bl	8105ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	2201      	movs	r2, #1
 81052ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	2201      	movs	r2, #1
 81052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	2201      	movs	r2, #1
 81052fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	2201      	movs	r2, #1
 8105302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	2201      	movs	r2, #1
 810530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	2201      	movs	r2, #1
 8105312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	2201      	movs	r2, #1
 810531a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810531e:	687b      	ldr	r3, [r7, #4]
 8105320:	2201      	movs	r2, #1
 8105322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	2201      	movs	r2, #1
 810532a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	2201      	movs	r2, #1
 8105332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	2201      	movs	r2, #1
 810533a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	2201      	movs	r2, #1
 8105342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105346:	2300      	movs	r3, #0
}
 8105348:	4618      	mov	r0, r3
 810534a:	3708      	adds	r7, #8
 810534c:	46bd      	mov	sp, r7
 810534e:	bd80      	pop	{r7, pc}

08105350 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8105350:	b480      	push	{r7}
 8105352:	b083      	sub	sp, #12
 8105354:	af00      	add	r7, sp, #0
 8105356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105358:	bf00      	nop
 810535a:	370c      	adds	r7, #12
 810535c:	46bd      	mov	sp, r7
 810535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105362:	4770      	bx	lr

08105364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105364:	b580      	push	{r7, lr}
 8105366:	b084      	sub	sp, #16
 8105368:	af00      	add	r7, sp, #0
 810536a:	6078      	str	r0, [r7, #4]
 810536c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810536e:	683b      	ldr	r3, [r7, #0]
 8105370:	2b00      	cmp	r3, #0
 8105372:	d109      	bne.n	8105388 <HAL_TIM_PWM_Start+0x24>
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810537a:	b2db      	uxtb	r3, r3
 810537c:	2b01      	cmp	r3, #1
 810537e:	bf14      	ite	ne
 8105380:	2301      	movne	r3, #1
 8105382:	2300      	moveq	r3, #0
 8105384:	b2db      	uxtb	r3, r3
 8105386:	e03c      	b.n	8105402 <HAL_TIM_PWM_Start+0x9e>
 8105388:	683b      	ldr	r3, [r7, #0]
 810538a:	2b04      	cmp	r3, #4
 810538c:	d109      	bne.n	81053a2 <HAL_TIM_PWM_Start+0x3e>
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105394:	b2db      	uxtb	r3, r3
 8105396:	2b01      	cmp	r3, #1
 8105398:	bf14      	ite	ne
 810539a:	2301      	movne	r3, #1
 810539c:	2300      	moveq	r3, #0
 810539e:	b2db      	uxtb	r3, r3
 81053a0:	e02f      	b.n	8105402 <HAL_TIM_PWM_Start+0x9e>
 81053a2:	683b      	ldr	r3, [r7, #0]
 81053a4:	2b08      	cmp	r3, #8
 81053a6:	d109      	bne.n	81053bc <HAL_TIM_PWM_Start+0x58>
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81053ae:	b2db      	uxtb	r3, r3
 81053b0:	2b01      	cmp	r3, #1
 81053b2:	bf14      	ite	ne
 81053b4:	2301      	movne	r3, #1
 81053b6:	2300      	moveq	r3, #0
 81053b8:	b2db      	uxtb	r3, r3
 81053ba:	e022      	b.n	8105402 <HAL_TIM_PWM_Start+0x9e>
 81053bc:	683b      	ldr	r3, [r7, #0]
 81053be:	2b0c      	cmp	r3, #12
 81053c0:	d109      	bne.n	81053d6 <HAL_TIM_PWM_Start+0x72>
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81053c8:	b2db      	uxtb	r3, r3
 81053ca:	2b01      	cmp	r3, #1
 81053cc:	bf14      	ite	ne
 81053ce:	2301      	movne	r3, #1
 81053d0:	2300      	moveq	r3, #0
 81053d2:	b2db      	uxtb	r3, r3
 81053d4:	e015      	b.n	8105402 <HAL_TIM_PWM_Start+0x9e>
 81053d6:	683b      	ldr	r3, [r7, #0]
 81053d8:	2b10      	cmp	r3, #16
 81053da:	d109      	bne.n	81053f0 <HAL_TIM_PWM_Start+0x8c>
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81053e2:	b2db      	uxtb	r3, r3
 81053e4:	2b01      	cmp	r3, #1
 81053e6:	bf14      	ite	ne
 81053e8:	2301      	movne	r3, #1
 81053ea:	2300      	moveq	r3, #0
 81053ec:	b2db      	uxtb	r3, r3
 81053ee:	e008      	b.n	8105402 <HAL_TIM_PWM_Start+0x9e>
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81053f6:	b2db      	uxtb	r3, r3
 81053f8:	2b01      	cmp	r3, #1
 81053fa:	bf14      	ite	ne
 81053fc:	2301      	movne	r3, #1
 81053fe:	2300      	moveq	r3, #0
 8105400:	b2db      	uxtb	r3, r3
 8105402:	2b00      	cmp	r3, #0
 8105404:	d001      	beq.n	810540a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8105406:	2301      	movs	r3, #1
 8105408:	e0a1      	b.n	810554e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810540a:	683b      	ldr	r3, [r7, #0]
 810540c:	2b00      	cmp	r3, #0
 810540e:	d104      	bne.n	810541a <HAL_TIM_PWM_Start+0xb6>
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	2202      	movs	r2, #2
 8105414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105418:	e023      	b.n	8105462 <HAL_TIM_PWM_Start+0xfe>
 810541a:	683b      	ldr	r3, [r7, #0]
 810541c:	2b04      	cmp	r3, #4
 810541e:	d104      	bne.n	810542a <HAL_TIM_PWM_Start+0xc6>
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	2202      	movs	r2, #2
 8105424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105428:	e01b      	b.n	8105462 <HAL_TIM_PWM_Start+0xfe>
 810542a:	683b      	ldr	r3, [r7, #0]
 810542c:	2b08      	cmp	r3, #8
 810542e:	d104      	bne.n	810543a <HAL_TIM_PWM_Start+0xd6>
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	2202      	movs	r2, #2
 8105434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105438:	e013      	b.n	8105462 <HAL_TIM_PWM_Start+0xfe>
 810543a:	683b      	ldr	r3, [r7, #0]
 810543c:	2b0c      	cmp	r3, #12
 810543e:	d104      	bne.n	810544a <HAL_TIM_PWM_Start+0xe6>
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	2202      	movs	r2, #2
 8105444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105448:	e00b      	b.n	8105462 <HAL_TIM_PWM_Start+0xfe>
 810544a:	683b      	ldr	r3, [r7, #0]
 810544c:	2b10      	cmp	r3, #16
 810544e:	d104      	bne.n	810545a <HAL_TIM_PWM_Start+0xf6>
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	2202      	movs	r2, #2
 8105454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105458:	e003      	b.n	8105462 <HAL_TIM_PWM_Start+0xfe>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	2202      	movs	r2, #2
 810545e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	2201      	movs	r2, #1
 8105468:	6839      	ldr	r1, [r7, #0]
 810546a:	4618      	mov	r0, r3
 810546c:	f000 ff46 	bl	81062fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	681b      	ldr	r3, [r3, #0]
 8105474:	4a38      	ldr	r2, [pc, #224]	; (8105558 <HAL_TIM_PWM_Start+0x1f4>)
 8105476:	4293      	cmp	r3, r2
 8105478:	d013      	beq.n	81054a2 <HAL_TIM_PWM_Start+0x13e>
 810547a:	687b      	ldr	r3, [r7, #4]
 810547c:	681b      	ldr	r3, [r3, #0]
 810547e:	4a37      	ldr	r2, [pc, #220]	; (810555c <HAL_TIM_PWM_Start+0x1f8>)
 8105480:	4293      	cmp	r3, r2
 8105482:	d00e      	beq.n	81054a2 <HAL_TIM_PWM_Start+0x13e>
 8105484:	687b      	ldr	r3, [r7, #4]
 8105486:	681b      	ldr	r3, [r3, #0]
 8105488:	4a35      	ldr	r2, [pc, #212]	; (8105560 <HAL_TIM_PWM_Start+0x1fc>)
 810548a:	4293      	cmp	r3, r2
 810548c:	d009      	beq.n	81054a2 <HAL_TIM_PWM_Start+0x13e>
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	4a34      	ldr	r2, [pc, #208]	; (8105564 <HAL_TIM_PWM_Start+0x200>)
 8105494:	4293      	cmp	r3, r2
 8105496:	d004      	beq.n	81054a2 <HAL_TIM_PWM_Start+0x13e>
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	681b      	ldr	r3, [r3, #0]
 810549c:	4a32      	ldr	r2, [pc, #200]	; (8105568 <HAL_TIM_PWM_Start+0x204>)
 810549e:	4293      	cmp	r3, r2
 81054a0:	d101      	bne.n	81054a6 <HAL_TIM_PWM_Start+0x142>
 81054a2:	2301      	movs	r3, #1
 81054a4:	e000      	b.n	81054a8 <HAL_TIM_PWM_Start+0x144>
 81054a6:	2300      	movs	r3, #0
 81054a8:	2b00      	cmp	r3, #0
 81054aa:	d007      	beq.n	81054bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81054ac:	687b      	ldr	r3, [r7, #4]
 81054ae:	681b      	ldr	r3, [r3, #0]
 81054b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81054ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	4a25      	ldr	r2, [pc, #148]	; (8105558 <HAL_TIM_PWM_Start+0x1f4>)
 81054c2:	4293      	cmp	r3, r2
 81054c4:	d022      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81054ce:	d01d      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	4a25      	ldr	r2, [pc, #148]	; (810556c <HAL_TIM_PWM_Start+0x208>)
 81054d6:	4293      	cmp	r3, r2
 81054d8:	d018      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	4a24      	ldr	r2, [pc, #144]	; (8105570 <HAL_TIM_PWM_Start+0x20c>)
 81054e0:	4293      	cmp	r3, r2
 81054e2:	d013      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	4a22      	ldr	r2, [pc, #136]	; (8105574 <HAL_TIM_PWM_Start+0x210>)
 81054ea:	4293      	cmp	r3, r2
 81054ec:	d00e      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	4a1a      	ldr	r2, [pc, #104]	; (810555c <HAL_TIM_PWM_Start+0x1f8>)
 81054f4:	4293      	cmp	r3, r2
 81054f6:	d009      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	681b      	ldr	r3, [r3, #0]
 81054fc:	4a1e      	ldr	r2, [pc, #120]	; (8105578 <HAL_TIM_PWM_Start+0x214>)
 81054fe:	4293      	cmp	r3, r2
 8105500:	d004      	beq.n	810550c <HAL_TIM_PWM_Start+0x1a8>
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	4a16      	ldr	r2, [pc, #88]	; (8105560 <HAL_TIM_PWM_Start+0x1fc>)
 8105508:	4293      	cmp	r3, r2
 810550a:	d115      	bne.n	8105538 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	689a      	ldr	r2, [r3, #8]
 8105512:	4b1a      	ldr	r3, [pc, #104]	; (810557c <HAL_TIM_PWM_Start+0x218>)
 8105514:	4013      	ands	r3, r2
 8105516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	2b06      	cmp	r3, #6
 810551c:	d015      	beq.n	810554a <HAL_TIM_PWM_Start+0x1e6>
 810551e:	68fb      	ldr	r3, [r7, #12]
 8105520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105524:	d011      	beq.n	810554a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	681a      	ldr	r2, [r3, #0]
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	681b      	ldr	r3, [r3, #0]
 8105530:	f042 0201 	orr.w	r2, r2, #1
 8105534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105536:	e008      	b.n	810554a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	681a      	ldr	r2, [r3, #0]
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	f042 0201 	orr.w	r2, r2, #1
 8105546:	601a      	str	r2, [r3, #0]
 8105548:	e000      	b.n	810554c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810554a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810554c:	2300      	movs	r3, #0
}
 810554e:	4618      	mov	r0, r3
 8105550:	3710      	adds	r7, #16
 8105552:	46bd      	mov	sp, r7
 8105554:	bd80      	pop	{r7, pc}
 8105556:	bf00      	nop
 8105558:	40010000 	.word	0x40010000
 810555c:	40010400 	.word	0x40010400
 8105560:	40014000 	.word	0x40014000
 8105564:	40014400 	.word	0x40014400
 8105568:	40014800 	.word	0x40014800
 810556c:	40000400 	.word	0x40000400
 8105570:	40000800 	.word	0x40000800
 8105574:	40000c00 	.word	0x40000c00
 8105578:	40001800 	.word	0x40001800
 810557c:	00010007 	.word	0x00010007

08105580 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8105580:	b580      	push	{r7, lr}
 8105582:	b086      	sub	sp, #24
 8105584:	af00      	add	r7, sp, #0
 8105586:	6078      	str	r0, [r7, #4]
 8105588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	2b00      	cmp	r3, #0
 810558e:	d101      	bne.n	8105594 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8105590:	2301      	movs	r3, #1
 8105592:	e097      	b.n	81056c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810559a:	b2db      	uxtb	r3, r3
 810559c:	2b00      	cmp	r3, #0
 810559e:	d106      	bne.n	81055ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	2200      	movs	r2, #0
 81055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 81055a8:	6878      	ldr	r0, [r7, #4]
 81055aa:	f7fc faab 	bl	8101b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	2202      	movs	r2, #2
 81055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	689b      	ldr	r3, [r3, #8]
 81055bc:	687a      	ldr	r2, [r7, #4]
 81055be:	6812      	ldr	r2, [r2, #0]
 81055c0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 81055c4:	f023 0307 	bic.w	r3, r3, #7
 81055c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681a      	ldr	r2, [r3, #0]
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	3304      	adds	r3, #4
 81055d2:	4619      	mov	r1, r3
 81055d4:	4610      	mov	r0, r2
 81055d6:	f000 fa85 	bl	8105ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	681b      	ldr	r3, [r3, #0]
 81055de:	689b      	ldr	r3, [r3, #8]
 81055e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	699b      	ldr	r3, [r3, #24]
 81055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	681b      	ldr	r3, [r3, #0]
 81055ee:	6a1b      	ldr	r3, [r3, #32]
 81055f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 81055f2:	683b      	ldr	r3, [r7, #0]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	697a      	ldr	r2, [r7, #20]
 81055f8:	4313      	orrs	r3, r2
 81055fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81055fc:	693b      	ldr	r3, [r7, #16]
 81055fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105602:	f023 0303 	bic.w	r3, r3, #3
 8105606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8105608:	683b      	ldr	r3, [r7, #0]
 810560a:	689a      	ldr	r2, [r3, #8]
 810560c:	683b      	ldr	r3, [r7, #0]
 810560e:	699b      	ldr	r3, [r3, #24]
 8105610:	021b      	lsls	r3, r3, #8
 8105612:	4313      	orrs	r3, r2
 8105614:	693a      	ldr	r2, [r7, #16]
 8105616:	4313      	orrs	r3, r2
 8105618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810561a:	693b      	ldr	r3, [r7, #16]
 810561c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8105620:	f023 030c 	bic.w	r3, r3, #12
 8105624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8105626:	693b      	ldr	r3, [r7, #16]
 8105628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810562c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8105630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8105632:	683b      	ldr	r3, [r7, #0]
 8105634:	68da      	ldr	r2, [r3, #12]
 8105636:	683b      	ldr	r3, [r7, #0]
 8105638:	69db      	ldr	r3, [r3, #28]
 810563a:	021b      	lsls	r3, r3, #8
 810563c:	4313      	orrs	r3, r2
 810563e:	693a      	ldr	r2, [r7, #16]
 8105640:	4313      	orrs	r3, r2
 8105642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8105644:	683b      	ldr	r3, [r7, #0]
 8105646:	691b      	ldr	r3, [r3, #16]
 8105648:	011a      	lsls	r2, r3, #4
 810564a:	683b      	ldr	r3, [r7, #0]
 810564c:	6a1b      	ldr	r3, [r3, #32]
 810564e:	031b      	lsls	r3, r3, #12
 8105650:	4313      	orrs	r3, r2
 8105652:	693a      	ldr	r2, [r7, #16]
 8105654:	4313      	orrs	r3, r2
 8105656:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8105658:	68fb      	ldr	r3, [r7, #12]
 810565a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 810565e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8105660:	68fb      	ldr	r3, [r7, #12]
 8105662:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8105666:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8105668:	683b      	ldr	r3, [r7, #0]
 810566a:	685a      	ldr	r2, [r3, #4]
 810566c:	683b      	ldr	r3, [r7, #0]
 810566e:	695b      	ldr	r3, [r3, #20]
 8105670:	011b      	lsls	r3, r3, #4
 8105672:	4313      	orrs	r3, r2
 8105674:	68fa      	ldr	r2, [r7, #12]
 8105676:	4313      	orrs	r3, r2
 8105678:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	697a      	ldr	r2, [r7, #20]
 8105680:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	693a      	ldr	r2, [r7, #16]
 8105688:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	68fa      	ldr	r2, [r7, #12]
 8105690:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	2201      	movs	r2, #1
 8105696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	2201      	movs	r2, #1
 810569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	2201      	movs	r2, #1
 81056a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	2201      	movs	r2, #1
 81056ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	2201      	movs	r2, #1
 81056b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	2201      	movs	r2, #1
 81056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81056c2:	2300      	movs	r3, #0
}
 81056c4:	4618      	mov	r0, r3
 81056c6:	3718      	adds	r7, #24
 81056c8:	46bd      	mov	sp, r7
 81056ca:	bd80      	pop	{r7, pc}

081056cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81056cc:	b580      	push	{r7, lr}
 81056ce:	b086      	sub	sp, #24
 81056d0:	af00      	add	r7, sp, #0
 81056d2:	60f8      	str	r0, [r7, #12]
 81056d4:	60b9      	str	r1, [r7, #8]
 81056d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81056d8:	2300      	movs	r3, #0
 81056da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81056dc:	68fb      	ldr	r3, [r7, #12]
 81056de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81056e2:	2b01      	cmp	r3, #1
 81056e4:	d101      	bne.n	81056ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 81056e6:	2302      	movs	r3, #2
 81056e8:	e0ff      	b.n	81058ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 81056ea:	68fb      	ldr	r3, [r7, #12]
 81056ec:	2201      	movs	r2, #1
 81056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	2b14      	cmp	r3, #20
 81056f6:	f200 80f0 	bhi.w	81058da <HAL_TIM_PWM_ConfigChannel+0x20e>
 81056fa:	a201      	add	r2, pc, #4	; (adr r2, 8105700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105700:	08105755 	.word	0x08105755
 8105704:	081058db 	.word	0x081058db
 8105708:	081058db 	.word	0x081058db
 810570c:	081058db 	.word	0x081058db
 8105710:	08105795 	.word	0x08105795
 8105714:	081058db 	.word	0x081058db
 8105718:	081058db 	.word	0x081058db
 810571c:	081058db 	.word	0x081058db
 8105720:	081057d7 	.word	0x081057d7
 8105724:	081058db 	.word	0x081058db
 8105728:	081058db 	.word	0x081058db
 810572c:	081058db 	.word	0x081058db
 8105730:	08105817 	.word	0x08105817
 8105734:	081058db 	.word	0x081058db
 8105738:	081058db 	.word	0x081058db
 810573c:	081058db 	.word	0x081058db
 8105740:	08105859 	.word	0x08105859
 8105744:	081058db 	.word	0x081058db
 8105748:	081058db 	.word	0x081058db
 810574c:	081058db 	.word	0x081058db
 8105750:	08105899 	.word	0x08105899
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105754:	68fb      	ldr	r3, [r7, #12]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	68b9      	ldr	r1, [r7, #8]
 810575a:	4618      	mov	r0, r3
 810575c:	f000 fa5c 	bl	8105c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105760:	68fb      	ldr	r3, [r7, #12]
 8105762:	681b      	ldr	r3, [r3, #0]
 8105764:	699a      	ldr	r2, [r3, #24]
 8105766:	68fb      	ldr	r3, [r7, #12]
 8105768:	681b      	ldr	r3, [r3, #0]
 810576a:	f042 0208 	orr.w	r2, r2, #8
 810576e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	699a      	ldr	r2, [r3, #24]
 8105776:	68fb      	ldr	r3, [r7, #12]
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	f022 0204 	bic.w	r2, r2, #4
 810577e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105780:	68fb      	ldr	r3, [r7, #12]
 8105782:	681b      	ldr	r3, [r3, #0]
 8105784:	6999      	ldr	r1, [r3, #24]
 8105786:	68bb      	ldr	r3, [r7, #8]
 8105788:	691a      	ldr	r2, [r3, #16]
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	430a      	orrs	r2, r1
 8105790:	619a      	str	r2, [r3, #24]
      break;
 8105792:	e0a5      	b.n	81058e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	681b      	ldr	r3, [r3, #0]
 8105798:	68b9      	ldr	r1, [r7, #8]
 810579a:	4618      	mov	r0, r3
 810579c:	f000 facc 	bl	8105d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	699a      	ldr	r2, [r3, #24]
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81057ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81057b0:	68fb      	ldr	r3, [r7, #12]
 81057b2:	681b      	ldr	r3, [r3, #0]
 81057b4:	699a      	ldr	r2, [r3, #24]
 81057b6:	68fb      	ldr	r3, [r7, #12]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81057be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81057c0:	68fb      	ldr	r3, [r7, #12]
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	6999      	ldr	r1, [r3, #24]
 81057c6:	68bb      	ldr	r3, [r7, #8]
 81057c8:	691b      	ldr	r3, [r3, #16]
 81057ca:	021a      	lsls	r2, r3, #8
 81057cc:	68fb      	ldr	r3, [r7, #12]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	430a      	orrs	r2, r1
 81057d2:	619a      	str	r2, [r3, #24]
      break;
 81057d4:	e084      	b.n	81058e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	68b9      	ldr	r1, [r7, #8]
 81057dc:	4618      	mov	r0, r3
 81057de:	f000 fb35 	bl	8105e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81057e2:	68fb      	ldr	r3, [r7, #12]
 81057e4:	681b      	ldr	r3, [r3, #0]
 81057e6:	69da      	ldr	r2, [r3, #28]
 81057e8:	68fb      	ldr	r3, [r7, #12]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	f042 0208 	orr.w	r2, r2, #8
 81057f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	69da      	ldr	r2, [r3, #28]
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	f022 0204 	bic.w	r2, r2, #4
 8105800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105802:	68fb      	ldr	r3, [r7, #12]
 8105804:	681b      	ldr	r3, [r3, #0]
 8105806:	69d9      	ldr	r1, [r3, #28]
 8105808:	68bb      	ldr	r3, [r7, #8]
 810580a:	691a      	ldr	r2, [r3, #16]
 810580c:	68fb      	ldr	r3, [r7, #12]
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	430a      	orrs	r2, r1
 8105812:	61da      	str	r2, [r3, #28]
      break;
 8105814:	e064      	b.n	81058e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8105816:	68fb      	ldr	r3, [r7, #12]
 8105818:	681b      	ldr	r3, [r3, #0]
 810581a:	68b9      	ldr	r1, [r7, #8]
 810581c:	4618      	mov	r0, r3
 810581e:	f000 fb9d 	bl	8105f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105822:	68fb      	ldr	r3, [r7, #12]
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	69da      	ldr	r2, [r3, #28]
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	69da      	ldr	r2, [r3, #28]
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	69d9      	ldr	r1, [r3, #28]
 8105848:	68bb      	ldr	r3, [r7, #8]
 810584a:	691b      	ldr	r3, [r3, #16]
 810584c:	021a      	lsls	r2, r3, #8
 810584e:	68fb      	ldr	r3, [r7, #12]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	430a      	orrs	r2, r1
 8105854:	61da      	str	r2, [r3, #28]
      break;
 8105856:	e043      	b.n	81058e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8105858:	68fb      	ldr	r3, [r7, #12]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	68b9      	ldr	r1, [r7, #8]
 810585e:	4618      	mov	r0, r3
 8105860:	f000 fbe6 	bl	8106030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105864:	68fb      	ldr	r3, [r7, #12]
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810586a:	68fb      	ldr	r3, [r7, #12]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	f042 0208 	orr.w	r2, r2, #8
 8105872:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105874:	68fb      	ldr	r3, [r7, #12]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	f022 0204 	bic.w	r2, r2, #4
 8105882:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810588a:	68bb      	ldr	r3, [r7, #8]
 810588c:	691a      	ldr	r2, [r3, #16]
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	681b      	ldr	r3, [r3, #0]
 8105892:	430a      	orrs	r2, r1
 8105894:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105896:	e023      	b.n	81058e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8105898:	68fb      	ldr	r3, [r7, #12]
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	68b9      	ldr	r1, [r7, #8]
 810589e:	4618      	mov	r0, r3
 81058a0:	f000 fc2a 	bl	81060f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81058a4:	68fb      	ldr	r3, [r7, #12]
 81058a6:	681b      	ldr	r3, [r3, #0]
 81058a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81058b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81058b4:	68fb      	ldr	r3, [r7, #12]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81058ba:	68fb      	ldr	r3, [r7, #12]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81058c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81058c4:	68fb      	ldr	r3, [r7, #12]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81058ca:	68bb      	ldr	r3, [r7, #8]
 81058cc:	691b      	ldr	r3, [r3, #16]
 81058ce:	021a      	lsls	r2, r3, #8
 81058d0:	68fb      	ldr	r3, [r7, #12]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	430a      	orrs	r2, r1
 81058d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81058d8:	e002      	b.n	81058e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81058da:	2301      	movs	r3, #1
 81058dc:	75fb      	strb	r3, [r7, #23]
      break;
 81058de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81058e0:	68fb      	ldr	r3, [r7, #12]
 81058e2:	2200      	movs	r2, #0
 81058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81058e8:	7dfb      	ldrb	r3, [r7, #23]
}
 81058ea:	4618      	mov	r0, r3
 81058ec:	3718      	adds	r7, #24
 81058ee:	46bd      	mov	sp, r7
 81058f0:	bd80      	pop	{r7, pc}
 81058f2:	bf00      	nop

081058f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81058f4:	b580      	push	{r7, lr}
 81058f6:	b084      	sub	sp, #16
 81058f8:	af00      	add	r7, sp, #0
 81058fa:	6078      	str	r0, [r7, #4]
 81058fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81058fe:	2300      	movs	r3, #0
 8105900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105908:	2b01      	cmp	r3, #1
 810590a:	d101      	bne.n	8105910 <HAL_TIM_ConfigClockSource+0x1c>
 810590c:	2302      	movs	r3, #2
 810590e:	e0de      	b.n	8105ace <HAL_TIM_ConfigClockSource+0x1da>
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	2201      	movs	r2, #1
 8105914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	2202      	movs	r2, #2
 810591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	689b      	ldr	r3, [r3, #8]
 8105926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8105928:	68bb      	ldr	r3, [r7, #8]
 810592a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810592e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8105932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105934:	68bb      	ldr	r3, [r7, #8]
 8105936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810593a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	68ba      	ldr	r2, [r7, #8]
 8105942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8105944:	683b      	ldr	r3, [r7, #0]
 8105946:	681b      	ldr	r3, [r3, #0]
 8105948:	4a63      	ldr	r2, [pc, #396]	; (8105ad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810594a:	4293      	cmp	r3, r2
 810594c:	f000 80a9 	beq.w	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 8105950:	4a61      	ldr	r2, [pc, #388]	; (8105ad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105952:	4293      	cmp	r3, r2
 8105954:	f200 80ae 	bhi.w	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 8105958:	4a60      	ldr	r2, [pc, #384]	; (8105adc <HAL_TIM_ConfigClockSource+0x1e8>)
 810595a:	4293      	cmp	r3, r2
 810595c:	f000 80a1 	beq.w	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 8105960:	4a5e      	ldr	r2, [pc, #376]	; (8105adc <HAL_TIM_ConfigClockSource+0x1e8>)
 8105962:	4293      	cmp	r3, r2
 8105964:	f200 80a6 	bhi.w	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 8105968:	4a5d      	ldr	r2, [pc, #372]	; (8105ae0 <HAL_TIM_ConfigClockSource+0x1ec>)
 810596a:	4293      	cmp	r3, r2
 810596c:	f000 8099 	beq.w	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 8105970:	4a5b      	ldr	r2, [pc, #364]	; (8105ae0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105972:	4293      	cmp	r3, r2
 8105974:	f200 809e 	bhi.w	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 8105978:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810597c:	f000 8091 	beq.w	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 8105980:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105984:	f200 8096 	bhi.w	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 8105988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810598c:	f000 8089 	beq.w	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 8105990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105994:	f200 808e 	bhi.w	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 8105998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810599c:	d03e      	beq.n	8105a1c <HAL_TIM_ConfigClockSource+0x128>
 810599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81059a2:	f200 8087 	bhi.w	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81059aa:	f000 8086 	beq.w	8105aba <HAL_TIM_ConfigClockSource+0x1c6>
 81059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81059b2:	d87f      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059b4:	2b70      	cmp	r3, #112	; 0x70
 81059b6:	d01a      	beq.n	81059ee <HAL_TIM_ConfigClockSource+0xfa>
 81059b8:	2b70      	cmp	r3, #112	; 0x70
 81059ba:	d87b      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059bc:	2b60      	cmp	r3, #96	; 0x60
 81059be:	d050      	beq.n	8105a62 <HAL_TIM_ConfigClockSource+0x16e>
 81059c0:	2b60      	cmp	r3, #96	; 0x60
 81059c2:	d877      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059c4:	2b50      	cmp	r3, #80	; 0x50
 81059c6:	d03c      	beq.n	8105a42 <HAL_TIM_ConfigClockSource+0x14e>
 81059c8:	2b50      	cmp	r3, #80	; 0x50
 81059ca:	d873      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059cc:	2b40      	cmp	r3, #64	; 0x40
 81059ce:	d058      	beq.n	8105a82 <HAL_TIM_ConfigClockSource+0x18e>
 81059d0:	2b40      	cmp	r3, #64	; 0x40
 81059d2:	d86f      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059d4:	2b30      	cmp	r3, #48	; 0x30
 81059d6:	d064      	beq.n	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 81059d8:	2b30      	cmp	r3, #48	; 0x30
 81059da:	d86b      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059dc:	2b20      	cmp	r3, #32
 81059de:	d060      	beq.n	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 81059e0:	2b20      	cmp	r3, #32
 81059e2:	d867      	bhi.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
 81059e4:	2b00      	cmp	r3, #0
 81059e6:	d05c      	beq.n	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 81059e8:	2b10      	cmp	r3, #16
 81059ea:	d05a      	beq.n	8105aa2 <HAL_TIM_ConfigClockSource+0x1ae>
 81059ec:	e062      	b.n	8105ab4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	6818      	ldr	r0, [r3, #0]
 81059f2:	683b      	ldr	r3, [r7, #0]
 81059f4:	6899      	ldr	r1, [r3, #8]
 81059f6:	683b      	ldr	r3, [r7, #0]
 81059f8:	685a      	ldr	r2, [r3, #4]
 81059fa:	683b      	ldr	r3, [r7, #0]
 81059fc:	68db      	ldr	r3, [r3, #12]
 81059fe:	f000 fc5d 	bl	81062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	689b      	ldr	r3, [r3, #8]
 8105a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105a0a:	68bb      	ldr	r3, [r7, #8]
 8105a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	68ba      	ldr	r2, [r7, #8]
 8105a18:	609a      	str	r2, [r3, #8]
      break;
 8105a1a:	e04f      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	6818      	ldr	r0, [r3, #0]
 8105a20:	683b      	ldr	r3, [r7, #0]
 8105a22:	6899      	ldr	r1, [r3, #8]
 8105a24:	683b      	ldr	r3, [r7, #0]
 8105a26:	685a      	ldr	r2, [r3, #4]
 8105a28:	683b      	ldr	r3, [r7, #0]
 8105a2a:	68db      	ldr	r3, [r3, #12]
 8105a2c:	f000 fc46 	bl	81062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	681b      	ldr	r3, [r3, #0]
 8105a34:	689a      	ldr	r2, [r3, #8]
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105a3e:	609a      	str	r2, [r3, #8]
      break;
 8105a40:	e03c      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	6818      	ldr	r0, [r3, #0]
 8105a46:	683b      	ldr	r3, [r7, #0]
 8105a48:	6859      	ldr	r1, [r3, #4]
 8105a4a:	683b      	ldr	r3, [r7, #0]
 8105a4c:	68db      	ldr	r3, [r3, #12]
 8105a4e:	461a      	mov	r2, r3
 8105a50:	f000 fbb8 	bl	81061c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	681b      	ldr	r3, [r3, #0]
 8105a58:	2150      	movs	r1, #80	; 0x50
 8105a5a:	4618      	mov	r0, r3
 8105a5c:	f000 fc11 	bl	8106282 <TIM_ITRx_SetConfig>
      break;
 8105a60:	e02c      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	6818      	ldr	r0, [r3, #0]
 8105a66:	683b      	ldr	r3, [r7, #0]
 8105a68:	6859      	ldr	r1, [r3, #4]
 8105a6a:	683b      	ldr	r3, [r7, #0]
 8105a6c:	68db      	ldr	r3, [r3, #12]
 8105a6e:	461a      	mov	r2, r3
 8105a70:	f000 fbd7 	bl	8106222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	2160      	movs	r1, #96	; 0x60
 8105a7a:	4618      	mov	r0, r3
 8105a7c:	f000 fc01 	bl	8106282 <TIM_ITRx_SetConfig>
      break;
 8105a80:	e01c      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	6818      	ldr	r0, [r3, #0]
 8105a86:	683b      	ldr	r3, [r7, #0]
 8105a88:	6859      	ldr	r1, [r3, #4]
 8105a8a:	683b      	ldr	r3, [r7, #0]
 8105a8c:	68db      	ldr	r3, [r3, #12]
 8105a8e:	461a      	mov	r2, r3
 8105a90:	f000 fb98 	bl	81061c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	2140      	movs	r1, #64	; 0x40
 8105a9a:	4618      	mov	r0, r3
 8105a9c:	f000 fbf1 	bl	8106282 <TIM_ITRx_SetConfig>
      break;
 8105aa0:	e00c      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	681a      	ldr	r2, [r3, #0]
 8105aa6:	683b      	ldr	r3, [r7, #0]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4619      	mov	r1, r3
 8105aac:	4610      	mov	r0, r2
 8105aae:	f000 fbe8 	bl	8106282 <TIM_ITRx_SetConfig>
      break;
 8105ab2:	e003      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105ab4:	2301      	movs	r3, #1
 8105ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8105ab8:	e000      	b.n	8105abc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	2201      	movs	r2, #1
 8105ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	2200      	movs	r2, #0
 8105ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ace:	4618      	mov	r0, r3
 8105ad0:	3710      	adds	r7, #16
 8105ad2:	46bd      	mov	sp, r7
 8105ad4:	bd80      	pop	{r7, pc}
 8105ad6:	bf00      	nop
 8105ad8:	00100040 	.word	0x00100040
 8105adc:	00100030 	.word	0x00100030
 8105ae0:	00100020 	.word	0x00100020

08105ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105ae4:	b480      	push	{r7}
 8105ae6:	b085      	sub	sp, #20
 8105ae8:	af00      	add	r7, sp, #0
 8105aea:	6078      	str	r0, [r7, #4]
 8105aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	4a40      	ldr	r2, [pc, #256]	; (8105bf8 <TIM_Base_SetConfig+0x114>)
 8105af8:	4293      	cmp	r3, r2
 8105afa:	d013      	beq.n	8105b24 <TIM_Base_SetConfig+0x40>
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105b02:	d00f      	beq.n	8105b24 <TIM_Base_SetConfig+0x40>
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	4a3d      	ldr	r2, [pc, #244]	; (8105bfc <TIM_Base_SetConfig+0x118>)
 8105b08:	4293      	cmp	r3, r2
 8105b0a:	d00b      	beq.n	8105b24 <TIM_Base_SetConfig+0x40>
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	4a3c      	ldr	r2, [pc, #240]	; (8105c00 <TIM_Base_SetConfig+0x11c>)
 8105b10:	4293      	cmp	r3, r2
 8105b12:	d007      	beq.n	8105b24 <TIM_Base_SetConfig+0x40>
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	4a3b      	ldr	r2, [pc, #236]	; (8105c04 <TIM_Base_SetConfig+0x120>)
 8105b18:	4293      	cmp	r3, r2
 8105b1a:	d003      	beq.n	8105b24 <TIM_Base_SetConfig+0x40>
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	4a3a      	ldr	r2, [pc, #232]	; (8105c08 <TIM_Base_SetConfig+0x124>)
 8105b20:	4293      	cmp	r3, r2
 8105b22:	d108      	bne.n	8105b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105b2c:	683b      	ldr	r3, [r7, #0]
 8105b2e:	685b      	ldr	r3, [r3, #4]
 8105b30:	68fa      	ldr	r2, [r7, #12]
 8105b32:	4313      	orrs	r3, r2
 8105b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	4a2f      	ldr	r2, [pc, #188]	; (8105bf8 <TIM_Base_SetConfig+0x114>)
 8105b3a:	4293      	cmp	r3, r2
 8105b3c:	d01f      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105b44:	d01b      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	4a2c      	ldr	r2, [pc, #176]	; (8105bfc <TIM_Base_SetConfig+0x118>)
 8105b4a:	4293      	cmp	r3, r2
 8105b4c:	d017      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	4a2b      	ldr	r2, [pc, #172]	; (8105c00 <TIM_Base_SetConfig+0x11c>)
 8105b52:	4293      	cmp	r3, r2
 8105b54:	d013      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	4a2a      	ldr	r2, [pc, #168]	; (8105c04 <TIM_Base_SetConfig+0x120>)
 8105b5a:	4293      	cmp	r3, r2
 8105b5c:	d00f      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	4a29      	ldr	r2, [pc, #164]	; (8105c08 <TIM_Base_SetConfig+0x124>)
 8105b62:	4293      	cmp	r3, r2
 8105b64:	d00b      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	4a28      	ldr	r2, [pc, #160]	; (8105c0c <TIM_Base_SetConfig+0x128>)
 8105b6a:	4293      	cmp	r3, r2
 8105b6c:	d007      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	4a27      	ldr	r2, [pc, #156]	; (8105c10 <TIM_Base_SetConfig+0x12c>)
 8105b72:	4293      	cmp	r3, r2
 8105b74:	d003      	beq.n	8105b7e <TIM_Base_SetConfig+0x9a>
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	4a26      	ldr	r2, [pc, #152]	; (8105c14 <TIM_Base_SetConfig+0x130>)
 8105b7a:	4293      	cmp	r3, r2
 8105b7c:	d108      	bne.n	8105b90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105b7e:	68fb      	ldr	r3, [r7, #12]
 8105b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105b86:	683b      	ldr	r3, [r7, #0]
 8105b88:	68db      	ldr	r3, [r3, #12]
 8105b8a:	68fa      	ldr	r2, [r7, #12]
 8105b8c:	4313      	orrs	r3, r2
 8105b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105b96:	683b      	ldr	r3, [r7, #0]
 8105b98:	695b      	ldr	r3, [r3, #20]
 8105b9a:	4313      	orrs	r3, r2
 8105b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	68fa      	ldr	r2, [r7, #12]
 8105ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105ba4:	683b      	ldr	r3, [r7, #0]
 8105ba6:	689a      	ldr	r2, [r3, #8]
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105bac:	683b      	ldr	r3, [r7, #0]
 8105bae:	681a      	ldr	r2, [r3, #0]
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	4a10      	ldr	r2, [pc, #64]	; (8105bf8 <TIM_Base_SetConfig+0x114>)
 8105bb8:	4293      	cmp	r3, r2
 8105bba:	d00f      	beq.n	8105bdc <TIM_Base_SetConfig+0xf8>
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	4a12      	ldr	r2, [pc, #72]	; (8105c08 <TIM_Base_SetConfig+0x124>)
 8105bc0:	4293      	cmp	r3, r2
 8105bc2:	d00b      	beq.n	8105bdc <TIM_Base_SetConfig+0xf8>
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	4a11      	ldr	r2, [pc, #68]	; (8105c0c <TIM_Base_SetConfig+0x128>)
 8105bc8:	4293      	cmp	r3, r2
 8105bca:	d007      	beq.n	8105bdc <TIM_Base_SetConfig+0xf8>
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	4a10      	ldr	r2, [pc, #64]	; (8105c10 <TIM_Base_SetConfig+0x12c>)
 8105bd0:	4293      	cmp	r3, r2
 8105bd2:	d003      	beq.n	8105bdc <TIM_Base_SetConfig+0xf8>
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	4a0f      	ldr	r2, [pc, #60]	; (8105c14 <TIM_Base_SetConfig+0x130>)
 8105bd8:	4293      	cmp	r3, r2
 8105bda:	d103      	bne.n	8105be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105bdc:	683b      	ldr	r3, [r7, #0]
 8105bde:	691a      	ldr	r2, [r3, #16]
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	2201      	movs	r2, #1
 8105be8:	615a      	str	r2, [r3, #20]
}
 8105bea:	bf00      	nop
 8105bec:	3714      	adds	r7, #20
 8105bee:	46bd      	mov	sp, r7
 8105bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf4:	4770      	bx	lr
 8105bf6:	bf00      	nop
 8105bf8:	40010000 	.word	0x40010000
 8105bfc:	40000400 	.word	0x40000400
 8105c00:	40000800 	.word	0x40000800
 8105c04:	40000c00 	.word	0x40000c00
 8105c08:	40010400 	.word	0x40010400
 8105c0c:	40014000 	.word	0x40014000
 8105c10:	40014400 	.word	0x40014400
 8105c14:	40014800 	.word	0x40014800

08105c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105c18:	b480      	push	{r7}
 8105c1a:	b087      	sub	sp, #28
 8105c1c:	af00      	add	r7, sp, #0
 8105c1e:	6078      	str	r0, [r7, #4]
 8105c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	6a1b      	ldr	r3, [r3, #32]
 8105c26:	f023 0201 	bic.w	r2, r3, #1
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	6a1b      	ldr	r3, [r3, #32]
 8105c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	685b      	ldr	r3, [r3, #4]
 8105c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	699b      	ldr	r3, [r3, #24]
 8105c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105c40:	68fb      	ldr	r3, [r7, #12]
 8105c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105c4c:	68fb      	ldr	r3, [r7, #12]
 8105c4e:	f023 0303 	bic.w	r3, r3, #3
 8105c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105c54:	683b      	ldr	r3, [r7, #0]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	68fa      	ldr	r2, [r7, #12]
 8105c5a:	4313      	orrs	r3, r2
 8105c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8105c5e:	697b      	ldr	r3, [r7, #20]
 8105c60:	f023 0302 	bic.w	r3, r3, #2
 8105c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105c66:	683b      	ldr	r3, [r7, #0]
 8105c68:	689b      	ldr	r3, [r3, #8]
 8105c6a:	697a      	ldr	r2, [r7, #20]
 8105c6c:	4313      	orrs	r3, r2
 8105c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	4a2c      	ldr	r2, [pc, #176]	; (8105d24 <TIM_OC1_SetConfig+0x10c>)
 8105c74:	4293      	cmp	r3, r2
 8105c76:	d00f      	beq.n	8105c98 <TIM_OC1_SetConfig+0x80>
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	4a2b      	ldr	r2, [pc, #172]	; (8105d28 <TIM_OC1_SetConfig+0x110>)
 8105c7c:	4293      	cmp	r3, r2
 8105c7e:	d00b      	beq.n	8105c98 <TIM_OC1_SetConfig+0x80>
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	4a2a      	ldr	r2, [pc, #168]	; (8105d2c <TIM_OC1_SetConfig+0x114>)
 8105c84:	4293      	cmp	r3, r2
 8105c86:	d007      	beq.n	8105c98 <TIM_OC1_SetConfig+0x80>
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	4a29      	ldr	r2, [pc, #164]	; (8105d30 <TIM_OC1_SetConfig+0x118>)
 8105c8c:	4293      	cmp	r3, r2
 8105c8e:	d003      	beq.n	8105c98 <TIM_OC1_SetConfig+0x80>
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	4a28      	ldr	r2, [pc, #160]	; (8105d34 <TIM_OC1_SetConfig+0x11c>)
 8105c94:	4293      	cmp	r3, r2
 8105c96:	d10c      	bne.n	8105cb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8105c98:	697b      	ldr	r3, [r7, #20]
 8105c9a:	f023 0308 	bic.w	r3, r3, #8
 8105c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105ca0:	683b      	ldr	r3, [r7, #0]
 8105ca2:	68db      	ldr	r3, [r3, #12]
 8105ca4:	697a      	ldr	r2, [r7, #20]
 8105ca6:	4313      	orrs	r3, r2
 8105ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8105caa:	697b      	ldr	r3, [r7, #20]
 8105cac:	f023 0304 	bic.w	r3, r3, #4
 8105cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	4a1b      	ldr	r2, [pc, #108]	; (8105d24 <TIM_OC1_SetConfig+0x10c>)
 8105cb6:	4293      	cmp	r3, r2
 8105cb8:	d00f      	beq.n	8105cda <TIM_OC1_SetConfig+0xc2>
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	4a1a      	ldr	r2, [pc, #104]	; (8105d28 <TIM_OC1_SetConfig+0x110>)
 8105cbe:	4293      	cmp	r3, r2
 8105cc0:	d00b      	beq.n	8105cda <TIM_OC1_SetConfig+0xc2>
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	4a19      	ldr	r2, [pc, #100]	; (8105d2c <TIM_OC1_SetConfig+0x114>)
 8105cc6:	4293      	cmp	r3, r2
 8105cc8:	d007      	beq.n	8105cda <TIM_OC1_SetConfig+0xc2>
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	4a18      	ldr	r2, [pc, #96]	; (8105d30 <TIM_OC1_SetConfig+0x118>)
 8105cce:	4293      	cmp	r3, r2
 8105cd0:	d003      	beq.n	8105cda <TIM_OC1_SetConfig+0xc2>
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	4a17      	ldr	r2, [pc, #92]	; (8105d34 <TIM_OC1_SetConfig+0x11c>)
 8105cd6:	4293      	cmp	r3, r2
 8105cd8:	d111      	bne.n	8105cfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8105cda:	693b      	ldr	r3, [r7, #16]
 8105cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105ce2:	693b      	ldr	r3, [r7, #16]
 8105ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8105cea:	683b      	ldr	r3, [r7, #0]
 8105cec:	695b      	ldr	r3, [r3, #20]
 8105cee:	693a      	ldr	r2, [r7, #16]
 8105cf0:	4313      	orrs	r3, r2
 8105cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105cf4:	683b      	ldr	r3, [r7, #0]
 8105cf6:	699b      	ldr	r3, [r3, #24]
 8105cf8:	693a      	ldr	r2, [r7, #16]
 8105cfa:	4313      	orrs	r3, r2
 8105cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	693a      	ldr	r2, [r7, #16]
 8105d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	68fa      	ldr	r2, [r7, #12]
 8105d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105d0a:	683b      	ldr	r3, [r7, #0]
 8105d0c:	685a      	ldr	r2, [r3, #4]
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	697a      	ldr	r2, [r7, #20]
 8105d16:	621a      	str	r2, [r3, #32]
}
 8105d18:	bf00      	nop
 8105d1a:	371c      	adds	r7, #28
 8105d1c:	46bd      	mov	sp, r7
 8105d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d22:	4770      	bx	lr
 8105d24:	40010000 	.word	0x40010000
 8105d28:	40010400 	.word	0x40010400
 8105d2c:	40014000 	.word	0x40014000
 8105d30:	40014400 	.word	0x40014400
 8105d34:	40014800 	.word	0x40014800

08105d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105d38:	b480      	push	{r7}
 8105d3a:	b087      	sub	sp, #28
 8105d3c:	af00      	add	r7, sp, #0
 8105d3e:	6078      	str	r0, [r7, #4]
 8105d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	6a1b      	ldr	r3, [r3, #32]
 8105d46:	f023 0210 	bic.w	r2, r3, #16
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105d4e:	687b      	ldr	r3, [r7, #4]
 8105d50:	6a1b      	ldr	r3, [r3, #32]
 8105d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	685b      	ldr	r3, [r3, #4]
 8105d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105d5a:	687b      	ldr	r3, [r7, #4]
 8105d5c:	699b      	ldr	r3, [r3, #24]
 8105d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8105d60:	68fb      	ldr	r3, [r7, #12]
 8105d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105d6c:	68fb      	ldr	r3, [r7, #12]
 8105d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105d74:	683b      	ldr	r3, [r7, #0]
 8105d76:	681b      	ldr	r3, [r3, #0]
 8105d78:	021b      	lsls	r3, r3, #8
 8105d7a:	68fa      	ldr	r2, [r7, #12]
 8105d7c:	4313      	orrs	r3, r2
 8105d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8105d80:	697b      	ldr	r3, [r7, #20]
 8105d82:	f023 0320 	bic.w	r3, r3, #32
 8105d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105d88:	683b      	ldr	r3, [r7, #0]
 8105d8a:	689b      	ldr	r3, [r3, #8]
 8105d8c:	011b      	lsls	r3, r3, #4
 8105d8e:	697a      	ldr	r2, [r7, #20]
 8105d90:	4313      	orrs	r3, r2
 8105d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	4a28      	ldr	r2, [pc, #160]	; (8105e38 <TIM_OC2_SetConfig+0x100>)
 8105d98:	4293      	cmp	r3, r2
 8105d9a:	d003      	beq.n	8105da4 <TIM_OC2_SetConfig+0x6c>
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	4a27      	ldr	r2, [pc, #156]	; (8105e3c <TIM_OC2_SetConfig+0x104>)
 8105da0:	4293      	cmp	r3, r2
 8105da2:	d10d      	bne.n	8105dc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105da4:	697b      	ldr	r3, [r7, #20]
 8105da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105dac:	683b      	ldr	r3, [r7, #0]
 8105dae:	68db      	ldr	r3, [r3, #12]
 8105db0:	011b      	lsls	r3, r3, #4
 8105db2:	697a      	ldr	r2, [r7, #20]
 8105db4:	4313      	orrs	r3, r2
 8105db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105db8:	697b      	ldr	r3, [r7, #20]
 8105dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105dbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	4a1d      	ldr	r2, [pc, #116]	; (8105e38 <TIM_OC2_SetConfig+0x100>)
 8105dc4:	4293      	cmp	r3, r2
 8105dc6:	d00f      	beq.n	8105de8 <TIM_OC2_SetConfig+0xb0>
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	4a1c      	ldr	r2, [pc, #112]	; (8105e3c <TIM_OC2_SetConfig+0x104>)
 8105dcc:	4293      	cmp	r3, r2
 8105dce:	d00b      	beq.n	8105de8 <TIM_OC2_SetConfig+0xb0>
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	4a1b      	ldr	r2, [pc, #108]	; (8105e40 <TIM_OC2_SetConfig+0x108>)
 8105dd4:	4293      	cmp	r3, r2
 8105dd6:	d007      	beq.n	8105de8 <TIM_OC2_SetConfig+0xb0>
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	4a1a      	ldr	r2, [pc, #104]	; (8105e44 <TIM_OC2_SetConfig+0x10c>)
 8105ddc:	4293      	cmp	r3, r2
 8105dde:	d003      	beq.n	8105de8 <TIM_OC2_SetConfig+0xb0>
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	4a19      	ldr	r2, [pc, #100]	; (8105e48 <TIM_OC2_SetConfig+0x110>)
 8105de4:	4293      	cmp	r3, r2
 8105de6:	d113      	bne.n	8105e10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8105de8:	693b      	ldr	r3, [r7, #16]
 8105dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105df0:	693b      	ldr	r3, [r7, #16]
 8105df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8105df8:	683b      	ldr	r3, [r7, #0]
 8105dfa:	695b      	ldr	r3, [r3, #20]
 8105dfc:	009b      	lsls	r3, r3, #2
 8105dfe:	693a      	ldr	r2, [r7, #16]
 8105e00:	4313      	orrs	r3, r2
 8105e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105e04:	683b      	ldr	r3, [r7, #0]
 8105e06:	699b      	ldr	r3, [r3, #24]
 8105e08:	009b      	lsls	r3, r3, #2
 8105e0a:	693a      	ldr	r2, [r7, #16]
 8105e0c:	4313      	orrs	r3, r2
 8105e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	693a      	ldr	r2, [r7, #16]
 8105e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	68fa      	ldr	r2, [r7, #12]
 8105e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8105e1c:	683b      	ldr	r3, [r7, #0]
 8105e1e:	685a      	ldr	r2, [r3, #4]
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	697a      	ldr	r2, [r7, #20]
 8105e28:	621a      	str	r2, [r3, #32]
}
 8105e2a:	bf00      	nop
 8105e2c:	371c      	adds	r7, #28
 8105e2e:	46bd      	mov	sp, r7
 8105e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e34:	4770      	bx	lr
 8105e36:	bf00      	nop
 8105e38:	40010000 	.word	0x40010000
 8105e3c:	40010400 	.word	0x40010400
 8105e40:	40014000 	.word	0x40014000
 8105e44:	40014400 	.word	0x40014400
 8105e48:	40014800 	.word	0x40014800

08105e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105e4c:	b480      	push	{r7}
 8105e4e:	b087      	sub	sp, #28
 8105e50:	af00      	add	r7, sp, #0
 8105e52:	6078      	str	r0, [r7, #4]
 8105e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	6a1b      	ldr	r3, [r3, #32]
 8105e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	6a1b      	ldr	r3, [r3, #32]
 8105e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	685b      	ldr	r3, [r3, #4]
 8105e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	69db      	ldr	r3, [r3, #28]
 8105e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8105e74:	68fb      	ldr	r3, [r7, #12]
 8105e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	f023 0303 	bic.w	r3, r3, #3
 8105e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105e88:	683b      	ldr	r3, [r7, #0]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	68fa      	ldr	r2, [r7, #12]
 8105e8e:	4313      	orrs	r3, r2
 8105e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8105e92:	697b      	ldr	r3, [r7, #20]
 8105e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105e9a:	683b      	ldr	r3, [r7, #0]
 8105e9c:	689b      	ldr	r3, [r3, #8]
 8105e9e:	021b      	lsls	r3, r3, #8
 8105ea0:	697a      	ldr	r2, [r7, #20]
 8105ea2:	4313      	orrs	r3, r2
 8105ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	4a27      	ldr	r2, [pc, #156]	; (8105f48 <TIM_OC3_SetConfig+0xfc>)
 8105eaa:	4293      	cmp	r3, r2
 8105eac:	d003      	beq.n	8105eb6 <TIM_OC3_SetConfig+0x6a>
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	4a26      	ldr	r2, [pc, #152]	; (8105f4c <TIM_OC3_SetConfig+0x100>)
 8105eb2:	4293      	cmp	r3, r2
 8105eb4:	d10d      	bne.n	8105ed2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8105eb6:	697b      	ldr	r3, [r7, #20]
 8105eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105ebe:	683b      	ldr	r3, [r7, #0]
 8105ec0:	68db      	ldr	r3, [r3, #12]
 8105ec2:	021b      	lsls	r3, r3, #8
 8105ec4:	697a      	ldr	r2, [r7, #20]
 8105ec6:	4313      	orrs	r3, r2
 8105ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8105eca:	697b      	ldr	r3, [r7, #20]
 8105ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	4a1c      	ldr	r2, [pc, #112]	; (8105f48 <TIM_OC3_SetConfig+0xfc>)
 8105ed6:	4293      	cmp	r3, r2
 8105ed8:	d00f      	beq.n	8105efa <TIM_OC3_SetConfig+0xae>
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	4a1b      	ldr	r2, [pc, #108]	; (8105f4c <TIM_OC3_SetConfig+0x100>)
 8105ede:	4293      	cmp	r3, r2
 8105ee0:	d00b      	beq.n	8105efa <TIM_OC3_SetConfig+0xae>
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	4a1a      	ldr	r2, [pc, #104]	; (8105f50 <TIM_OC3_SetConfig+0x104>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d007      	beq.n	8105efa <TIM_OC3_SetConfig+0xae>
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	4a19      	ldr	r2, [pc, #100]	; (8105f54 <TIM_OC3_SetConfig+0x108>)
 8105eee:	4293      	cmp	r3, r2
 8105ef0:	d003      	beq.n	8105efa <TIM_OC3_SetConfig+0xae>
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	4a18      	ldr	r2, [pc, #96]	; (8105f58 <TIM_OC3_SetConfig+0x10c>)
 8105ef6:	4293      	cmp	r3, r2
 8105ef8:	d113      	bne.n	8105f22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8105efa:	693b      	ldr	r3, [r7, #16]
 8105efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105f02:	693b      	ldr	r3, [r7, #16]
 8105f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8105f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8105f0a:	683b      	ldr	r3, [r7, #0]
 8105f0c:	695b      	ldr	r3, [r3, #20]
 8105f0e:	011b      	lsls	r3, r3, #4
 8105f10:	693a      	ldr	r2, [r7, #16]
 8105f12:	4313      	orrs	r3, r2
 8105f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8105f16:	683b      	ldr	r3, [r7, #0]
 8105f18:	699b      	ldr	r3, [r3, #24]
 8105f1a:	011b      	lsls	r3, r3, #4
 8105f1c:	693a      	ldr	r2, [r7, #16]
 8105f1e:	4313      	orrs	r3, r2
 8105f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	693a      	ldr	r2, [r7, #16]
 8105f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	68fa      	ldr	r2, [r7, #12]
 8105f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105f2e:	683b      	ldr	r3, [r7, #0]
 8105f30:	685a      	ldr	r2, [r3, #4]
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105f36:	687b      	ldr	r3, [r7, #4]
 8105f38:	697a      	ldr	r2, [r7, #20]
 8105f3a:	621a      	str	r2, [r3, #32]
}
 8105f3c:	bf00      	nop
 8105f3e:	371c      	adds	r7, #28
 8105f40:	46bd      	mov	sp, r7
 8105f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f46:	4770      	bx	lr
 8105f48:	40010000 	.word	0x40010000
 8105f4c:	40010400 	.word	0x40010400
 8105f50:	40014000 	.word	0x40014000
 8105f54:	40014400 	.word	0x40014400
 8105f58:	40014800 	.word	0x40014800

08105f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105f5c:	b480      	push	{r7}
 8105f5e:	b087      	sub	sp, #28
 8105f60:	af00      	add	r7, sp, #0
 8105f62:	6078      	str	r0, [r7, #4]
 8105f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	6a1b      	ldr	r3, [r3, #32]
 8105f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	6a1b      	ldr	r3, [r3, #32]
 8105f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	685b      	ldr	r3, [r3, #4]
 8105f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	69db      	ldr	r3, [r3, #28]
 8105f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8105f84:	68fb      	ldr	r3, [r7, #12]
 8105f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105f98:	683b      	ldr	r3, [r7, #0]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	021b      	lsls	r3, r3, #8
 8105f9e:	68fa      	ldr	r2, [r7, #12]
 8105fa0:	4313      	orrs	r3, r2
 8105fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8105fa4:	693b      	ldr	r3, [r7, #16]
 8105fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8105faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105fac:	683b      	ldr	r3, [r7, #0]
 8105fae:	689b      	ldr	r3, [r3, #8]
 8105fb0:	031b      	lsls	r3, r3, #12
 8105fb2:	693a      	ldr	r2, [r7, #16]
 8105fb4:	4313      	orrs	r3, r2
 8105fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	4a18      	ldr	r2, [pc, #96]	; (810601c <TIM_OC4_SetConfig+0xc0>)
 8105fbc:	4293      	cmp	r3, r2
 8105fbe:	d00f      	beq.n	8105fe0 <TIM_OC4_SetConfig+0x84>
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	4a17      	ldr	r2, [pc, #92]	; (8106020 <TIM_OC4_SetConfig+0xc4>)
 8105fc4:	4293      	cmp	r3, r2
 8105fc6:	d00b      	beq.n	8105fe0 <TIM_OC4_SetConfig+0x84>
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	4a16      	ldr	r2, [pc, #88]	; (8106024 <TIM_OC4_SetConfig+0xc8>)
 8105fcc:	4293      	cmp	r3, r2
 8105fce:	d007      	beq.n	8105fe0 <TIM_OC4_SetConfig+0x84>
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	4a15      	ldr	r2, [pc, #84]	; (8106028 <TIM_OC4_SetConfig+0xcc>)
 8105fd4:	4293      	cmp	r3, r2
 8105fd6:	d003      	beq.n	8105fe0 <TIM_OC4_SetConfig+0x84>
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	4a14      	ldr	r2, [pc, #80]	; (810602c <TIM_OC4_SetConfig+0xd0>)
 8105fdc:	4293      	cmp	r3, r2
 8105fde:	d109      	bne.n	8105ff4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8105fe0:	697b      	ldr	r3, [r7, #20]
 8105fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8105fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105fe8:	683b      	ldr	r3, [r7, #0]
 8105fea:	695b      	ldr	r3, [r3, #20]
 8105fec:	019b      	lsls	r3, r3, #6
 8105fee:	697a      	ldr	r2, [r7, #20]
 8105ff0:	4313      	orrs	r3, r2
 8105ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	697a      	ldr	r2, [r7, #20]
 8105ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	68fa      	ldr	r2, [r7, #12]
 8105ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106000:	683b      	ldr	r3, [r7, #0]
 8106002:	685a      	ldr	r2, [r3, #4]
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	693a      	ldr	r2, [r7, #16]
 810600c:	621a      	str	r2, [r3, #32]
}
 810600e:	bf00      	nop
 8106010:	371c      	adds	r7, #28
 8106012:	46bd      	mov	sp, r7
 8106014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106018:	4770      	bx	lr
 810601a:	bf00      	nop
 810601c:	40010000 	.word	0x40010000
 8106020:	40010400 	.word	0x40010400
 8106024:	40014000 	.word	0x40014000
 8106028:	40014400 	.word	0x40014400
 810602c:	40014800 	.word	0x40014800

08106030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106030:	b480      	push	{r7}
 8106032:	b087      	sub	sp, #28
 8106034:	af00      	add	r7, sp, #0
 8106036:	6078      	str	r0, [r7, #4]
 8106038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	6a1b      	ldr	r3, [r3, #32]
 810603e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	6a1b      	ldr	r3, [r3, #32]
 810604a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	685b      	ldr	r3, [r3, #4]
 8106050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106058:	68fb      	ldr	r3, [r7, #12]
 810605a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106064:	683b      	ldr	r3, [r7, #0]
 8106066:	681b      	ldr	r3, [r3, #0]
 8106068:	68fa      	ldr	r2, [r7, #12]
 810606a:	4313      	orrs	r3, r2
 810606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810606e:	693b      	ldr	r3, [r7, #16]
 8106070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106076:	683b      	ldr	r3, [r7, #0]
 8106078:	689b      	ldr	r3, [r3, #8]
 810607a:	041b      	lsls	r3, r3, #16
 810607c:	693a      	ldr	r2, [r7, #16]
 810607e:	4313      	orrs	r3, r2
 8106080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	4a17      	ldr	r2, [pc, #92]	; (81060e4 <TIM_OC5_SetConfig+0xb4>)
 8106086:	4293      	cmp	r3, r2
 8106088:	d00f      	beq.n	81060aa <TIM_OC5_SetConfig+0x7a>
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	4a16      	ldr	r2, [pc, #88]	; (81060e8 <TIM_OC5_SetConfig+0xb8>)
 810608e:	4293      	cmp	r3, r2
 8106090:	d00b      	beq.n	81060aa <TIM_OC5_SetConfig+0x7a>
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	4a15      	ldr	r2, [pc, #84]	; (81060ec <TIM_OC5_SetConfig+0xbc>)
 8106096:	4293      	cmp	r3, r2
 8106098:	d007      	beq.n	81060aa <TIM_OC5_SetConfig+0x7a>
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	4a14      	ldr	r2, [pc, #80]	; (81060f0 <TIM_OC5_SetConfig+0xc0>)
 810609e:	4293      	cmp	r3, r2
 81060a0:	d003      	beq.n	81060aa <TIM_OC5_SetConfig+0x7a>
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	4a13      	ldr	r2, [pc, #76]	; (81060f4 <TIM_OC5_SetConfig+0xc4>)
 81060a6:	4293      	cmp	r3, r2
 81060a8:	d109      	bne.n	81060be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81060aa:	697b      	ldr	r3, [r7, #20]
 81060ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81060b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81060b2:	683b      	ldr	r3, [r7, #0]
 81060b4:	695b      	ldr	r3, [r3, #20]
 81060b6:	021b      	lsls	r3, r3, #8
 81060b8:	697a      	ldr	r2, [r7, #20]
 81060ba:	4313      	orrs	r3, r2
 81060bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	697a      	ldr	r2, [r7, #20]
 81060c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	68fa      	ldr	r2, [r7, #12]
 81060c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81060ca:	683b      	ldr	r3, [r7, #0]
 81060cc:	685a      	ldr	r2, [r3, #4]
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	693a      	ldr	r2, [r7, #16]
 81060d6:	621a      	str	r2, [r3, #32]
}
 81060d8:	bf00      	nop
 81060da:	371c      	adds	r7, #28
 81060dc:	46bd      	mov	sp, r7
 81060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060e2:	4770      	bx	lr
 81060e4:	40010000 	.word	0x40010000
 81060e8:	40010400 	.word	0x40010400
 81060ec:	40014000 	.word	0x40014000
 81060f0:	40014400 	.word	0x40014400
 81060f4:	40014800 	.word	0x40014800

081060f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81060f8:	b480      	push	{r7}
 81060fa:	b087      	sub	sp, #28
 81060fc:	af00      	add	r7, sp, #0
 81060fe:	6078      	str	r0, [r7, #4]
 8106100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	6a1b      	ldr	r3, [r3, #32]
 8106106:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	6a1b      	ldr	r3, [r3, #32]
 8106112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	685b      	ldr	r3, [r3, #4]
 8106118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106120:	68fb      	ldr	r3, [r7, #12]
 8106122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810612c:	683b      	ldr	r3, [r7, #0]
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	021b      	lsls	r3, r3, #8
 8106132:	68fa      	ldr	r2, [r7, #12]
 8106134:	4313      	orrs	r3, r2
 8106136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106138:	693b      	ldr	r3, [r7, #16]
 810613a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106140:	683b      	ldr	r3, [r7, #0]
 8106142:	689b      	ldr	r3, [r3, #8]
 8106144:	051b      	lsls	r3, r3, #20
 8106146:	693a      	ldr	r2, [r7, #16]
 8106148:	4313      	orrs	r3, r2
 810614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	4a18      	ldr	r2, [pc, #96]	; (81061b0 <TIM_OC6_SetConfig+0xb8>)
 8106150:	4293      	cmp	r3, r2
 8106152:	d00f      	beq.n	8106174 <TIM_OC6_SetConfig+0x7c>
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	4a17      	ldr	r2, [pc, #92]	; (81061b4 <TIM_OC6_SetConfig+0xbc>)
 8106158:	4293      	cmp	r3, r2
 810615a:	d00b      	beq.n	8106174 <TIM_OC6_SetConfig+0x7c>
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	4a16      	ldr	r2, [pc, #88]	; (81061b8 <TIM_OC6_SetConfig+0xc0>)
 8106160:	4293      	cmp	r3, r2
 8106162:	d007      	beq.n	8106174 <TIM_OC6_SetConfig+0x7c>
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	4a15      	ldr	r2, [pc, #84]	; (81061bc <TIM_OC6_SetConfig+0xc4>)
 8106168:	4293      	cmp	r3, r2
 810616a:	d003      	beq.n	8106174 <TIM_OC6_SetConfig+0x7c>
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	4a14      	ldr	r2, [pc, #80]	; (81061c0 <TIM_OC6_SetConfig+0xc8>)
 8106170:	4293      	cmp	r3, r2
 8106172:	d109      	bne.n	8106188 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106174:	697b      	ldr	r3, [r7, #20]
 8106176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810617a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810617c:	683b      	ldr	r3, [r7, #0]
 810617e:	695b      	ldr	r3, [r3, #20]
 8106180:	029b      	lsls	r3, r3, #10
 8106182:	697a      	ldr	r2, [r7, #20]
 8106184:	4313      	orrs	r3, r2
 8106186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	697a      	ldr	r2, [r7, #20]
 810618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	68fa      	ldr	r2, [r7, #12]
 8106192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106194:	683b      	ldr	r3, [r7, #0]
 8106196:	685a      	ldr	r2, [r3, #4]
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	693a      	ldr	r2, [r7, #16]
 81061a0:	621a      	str	r2, [r3, #32]
}
 81061a2:	bf00      	nop
 81061a4:	371c      	adds	r7, #28
 81061a6:	46bd      	mov	sp, r7
 81061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ac:	4770      	bx	lr
 81061ae:	bf00      	nop
 81061b0:	40010000 	.word	0x40010000
 81061b4:	40010400 	.word	0x40010400
 81061b8:	40014000 	.word	0x40014000
 81061bc:	40014400 	.word	0x40014400
 81061c0:	40014800 	.word	0x40014800

081061c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81061c4:	b480      	push	{r7}
 81061c6:	b087      	sub	sp, #28
 81061c8:	af00      	add	r7, sp, #0
 81061ca:	60f8      	str	r0, [r7, #12]
 81061cc:	60b9      	str	r1, [r7, #8]
 81061ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81061d0:	68fb      	ldr	r3, [r7, #12]
 81061d2:	6a1b      	ldr	r3, [r3, #32]
 81061d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81061d6:	68fb      	ldr	r3, [r7, #12]
 81061d8:	6a1b      	ldr	r3, [r3, #32]
 81061da:	f023 0201 	bic.w	r2, r3, #1
 81061de:	68fb      	ldr	r3, [r7, #12]
 81061e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81061e2:	68fb      	ldr	r3, [r7, #12]
 81061e4:	699b      	ldr	r3, [r3, #24]
 81061e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81061e8:	693b      	ldr	r3, [r7, #16]
 81061ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81061ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	011b      	lsls	r3, r3, #4
 81061f4:	693a      	ldr	r2, [r7, #16]
 81061f6:	4313      	orrs	r3, r2
 81061f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81061fa:	697b      	ldr	r3, [r7, #20]
 81061fc:	f023 030a 	bic.w	r3, r3, #10
 8106200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106202:	697a      	ldr	r2, [r7, #20]
 8106204:	68bb      	ldr	r3, [r7, #8]
 8106206:	4313      	orrs	r3, r2
 8106208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810620a:	68fb      	ldr	r3, [r7, #12]
 810620c:	693a      	ldr	r2, [r7, #16]
 810620e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106210:	68fb      	ldr	r3, [r7, #12]
 8106212:	697a      	ldr	r2, [r7, #20]
 8106214:	621a      	str	r2, [r3, #32]
}
 8106216:	bf00      	nop
 8106218:	371c      	adds	r7, #28
 810621a:	46bd      	mov	sp, r7
 810621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106220:	4770      	bx	lr

08106222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106222:	b480      	push	{r7}
 8106224:	b087      	sub	sp, #28
 8106226:	af00      	add	r7, sp, #0
 8106228:	60f8      	str	r0, [r7, #12]
 810622a:	60b9      	str	r1, [r7, #8]
 810622c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810622e:	68fb      	ldr	r3, [r7, #12]
 8106230:	6a1b      	ldr	r3, [r3, #32]
 8106232:	f023 0210 	bic.w	r2, r3, #16
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810623a:	68fb      	ldr	r3, [r7, #12]
 810623c:	699b      	ldr	r3, [r3, #24]
 810623e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106240:	68fb      	ldr	r3, [r7, #12]
 8106242:	6a1b      	ldr	r3, [r3, #32]
 8106244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106246:	697b      	ldr	r3, [r7, #20]
 8106248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810624c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810624e:	687b      	ldr	r3, [r7, #4]
 8106250:	031b      	lsls	r3, r3, #12
 8106252:	697a      	ldr	r2, [r7, #20]
 8106254:	4313      	orrs	r3, r2
 8106256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106258:	693b      	ldr	r3, [r7, #16]
 810625a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810625e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8106260:	68bb      	ldr	r3, [r7, #8]
 8106262:	011b      	lsls	r3, r3, #4
 8106264:	693a      	ldr	r2, [r7, #16]
 8106266:	4313      	orrs	r3, r2
 8106268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810626a:	68fb      	ldr	r3, [r7, #12]
 810626c:	697a      	ldr	r2, [r7, #20]
 810626e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106270:	68fb      	ldr	r3, [r7, #12]
 8106272:	693a      	ldr	r2, [r7, #16]
 8106274:	621a      	str	r2, [r3, #32]
}
 8106276:	bf00      	nop
 8106278:	371c      	adds	r7, #28
 810627a:	46bd      	mov	sp, r7
 810627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106280:	4770      	bx	lr

08106282 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8106282:	b480      	push	{r7}
 8106284:	b085      	sub	sp, #20
 8106286:	af00      	add	r7, sp, #0
 8106288:	6078      	str	r0, [r7, #4]
 810628a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	689b      	ldr	r3, [r3, #8]
 8106290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8106292:	68fb      	ldr	r3, [r7, #12]
 8106294:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810629c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810629e:	683a      	ldr	r2, [r7, #0]
 81062a0:	68fb      	ldr	r3, [r7, #12]
 81062a2:	4313      	orrs	r3, r2
 81062a4:	f043 0307 	orr.w	r3, r3, #7
 81062a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81062aa:	687b      	ldr	r3, [r7, #4]
 81062ac:	68fa      	ldr	r2, [r7, #12]
 81062ae:	609a      	str	r2, [r3, #8]
}
 81062b0:	bf00      	nop
 81062b2:	3714      	adds	r7, #20
 81062b4:	46bd      	mov	sp, r7
 81062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ba:	4770      	bx	lr

081062bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81062bc:	b480      	push	{r7}
 81062be:	b087      	sub	sp, #28
 81062c0:	af00      	add	r7, sp, #0
 81062c2:	60f8      	str	r0, [r7, #12]
 81062c4:	60b9      	str	r1, [r7, #8]
 81062c6:	607a      	str	r2, [r7, #4]
 81062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	689b      	ldr	r3, [r3, #8]
 81062ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81062d0:	697b      	ldr	r3, [r7, #20]
 81062d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81062d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81062d8:	683b      	ldr	r3, [r7, #0]
 81062da:	021a      	lsls	r2, r3, #8
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	431a      	orrs	r2, r3
 81062e0:	68bb      	ldr	r3, [r7, #8]
 81062e2:	4313      	orrs	r3, r2
 81062e4:	697a      	ldr	r2, [r7, #20]
 81062e6:	4313      	orrs	r3, r2
 81062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81062ea:	68fb      	ldr	r3, [r7, #12]
 81062ec:	697a      	ldr	r2, [r7, #20]
 81062ee:	609a      	str	r2, [r3, #8]
}
 81062f0:	bf00      	nop
 81062f2:	371c      	adds	r7, #28
 81062f4:	46bd      	mov	sp, r7
 81062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062fa:	4770      	bx	lr

081062fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81062fc:	b480      	push	{r7}
 81062fe:	b087      	sub	sp, #28
 8106300:	af00      	add	r7, sp, #0
 8106302:	60f8      	str	r0, [r7, #12]
 8106304:	60b9      	str	r1, [r7, #8]
 8106306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8106308:	68bb      	ldr	r3, [r7, #8]
 810630a:	f003 031f 	and.w	r3, r3, #31
 810630e:	2201      	movs	r2, #1
 8106310:	fa02 f303 	lsl.w	r3, r2, r3
 8106314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106316:	68fb      	ldr	r3, [r7, #12]
 8106318:	6a1a      	ldr	r2, [r3, #32]
 810631a:	697b      	ldr	r3, [r7, #20]
 810631c:	43db      	mvns	r3, r3
 810631e:	401a      	ands	r2, r3
 8106320:	68fb      	ldr	r3, [r7, #12]
 8106322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106324:	68fb      	ldr	r3, [r7, #12]
 8106326:	6a1a      	ldr	r2, [r3, #32]
 8106328:	68bb      	ldr	r3, [r7, #8]
 810632a:	f003 031f 	and.w	r3, r3, #31
 810632e:	6879      	ldr	r1, [r7, #4]
 8106330:	fa01 f303 	lsl.w	r3, r1, r3
 8106334:	431a      	orrs	r2, r3
 8106336:	68fb      	ldr	r3, [r7, #12]
 8106338:	621a      	str	r2, [r3, #32]
}
 810633a:	bf00      	nop
 810633c:	371c      	adds	r7, #28
 810633e:	46bd      	mov	sp, r7
 8106340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106344:	4770      	bx	lr
	...

08106348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106348:	b480      	push	{r7}
 810634a:	b085      	sub	sp, #20
 810634c:	af00      	add	r7, sp, #0
 810634e:	6078      	str	r0, [r7, #4]
 8106350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106358:	2b01      	cmp	r3, #1
 810635a:	d101      	bne.n	8106360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810635c:	2302      	movs	r3, #2
 810635e:	e06d      	b.n	810643c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	2201      	movs	r2, #1
 8106364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	2202      	movs	r2, #2
 810636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	681b      	ldr	r3, [r3, #0]
 8106374:	685b      	ldr	r3, [r3, #4]
 8106376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	689b      	ldr	r3, [r3, #8]
 810637e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	4a30      	ldr	r2, [pc, #192]	; (8106448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106386:	4293      	cmp	r3, r2
 8106388:	d004      	beq.n	8106394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	4a2f      	ldr	r2, [pc, #188]	; (810644c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106390:	4293      	cmp	r3, r2
 8106392:	d108      	bne.n	81063a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106394:	68fb      	ldr	r3, [r7, #12]
 8106396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810639a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810639c:	683b      	ldr	r3, [r7, #0]
 810639e:	685b      	ldr	r3, [r3, #4]
 81063a0:	68fa      	ldr	r2, [r7, #12]
 81063a2:	4313      	orrs	r3, r2
 81063a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81063a6:	68fb      	ldr	r3, [r7, #12]
 81063a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81063ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81063ae:	683b      	ldr	r3, [r7, #0]
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	68fa      	ldr	r2, [r7, #12]
 81063b4:	4313      	orrs	r3, r2
 81063b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	681b      	ldr	r3, [r3, #0]
 81063bc:	68fa      	ldr	r2, [r7, #12]
 81063be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	4a20      	ldr	r2, [pc, #128]	; (8106448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81063c6:	4293      	cmp	r3, r2
 81063c8:	d022      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	681b      	ldr	r3, [r3, #0]
 81063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81063d2:	d01d      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	4a1d      	ldr	r2, [pc, #116]	; (8106450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81063da:	4293      	cmp	r3, r2
 81063dc:	d018      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	4a1c      	ldr	r2, [pc, #112]	; (8106454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81063e4:	4293      	cmp	r3, r2
 81063e6:	d013      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	4a1a      	ldr	r2, [pc, #104]	; (8106458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81063ee:	4293      	cmp	r3, r2
 81063f0:	d00e      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	4a15      	ldr	r2, [pc, #84]	; (810644c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81063f8:	4293      	cmp	r3, r2
 81063fa:	d009      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	4a16      	ldr	r2, [pc, #88]	; (810645c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106402:	4293      	cmp	r3, r2
 8106404:	d004      	beq.n	8106410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	4a15      	ldr	r2, [pc, #84]	; (8106460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810640c:	4293      	cmp	r3, r2
 810640e:	d10c      	bne.n	810642a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106410:	68bb      	ldr	r3, [r7, #8]
 8106412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106418:	683b      	ldr	r3, [r7, #0]
 810641a:	689b      	ldr	r3, [r3, #8]
 810641c:	68ba      	ldr	r2, [r7, #8]
 810641e:	4313      	orrs	r3, r2
 8106420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	68ba      	ldr	r2, [r7, #8]
 8106428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	2201      	movs	r2, #1
 810642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	2200      	movs	r2, #0
 8106436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810643a:	2300      	movs	r3, #0
}
 810643c:	4618      	mov	r0, r3
 810643e:	3714      	adds	r7, #20
 8106440:	46bd      	mov	sp, r7
 8106442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106446:	4770      	bx	lr
 8106448:	40010000 	.word	0x40010000
 810644c:	40010400 	.word	0x40010400
 8106450:	40000400 	.word	0x40000400
 8106454:	40000800 	.word	0x40000800
 8106458:	40000c00 	.word	0x40000c00
 810645c:	40001800 	.word	0x40001800
 8106460:	40014000 	.word	0x40014000

08106464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8106464:	b480      	push	{r7}
 8106466:	b085      	sub	sp, #20
 8106468:	af00      	add	r7, sp, #0
 810646a:	6078      	str	r0, [r7, #4]
 810646c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810646e:	2300      	movs	r3, #0
 8106470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106478:	2b01      	cmp	r3, #1
 810647a:	d101      	bne.n	8106480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810647c:	2302      	movs	r3, #2
 810647e:	e065      	b.n	810654c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	2201      	movs	r2, #1
 8106484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8106488:	68fb      	ldr	r3, [r7, #12]
 810648a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810648e:	683b      	ldr	r3, [r7, #0]
 8106490:	68db      	ldr	r3, [r3, #12]
 8106492:	4313      	orrs	r3, r2
 8106494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8106496:	68fb      	ldr	r3, [r7, #12]
 8106498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810649c:	683b      	ldr	r3, [r7, #0]
 810649e:	689b      	ldr	r3, [r3, #8]
 81064a0:	4313      	orrs	r3, r2
 81064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81064a4:	68fb      	ldr	r3, [r7, #12]
 81064a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81064aa:	683b      	ldr	r3, [r7, #0]
 81064ac:	685b      	ldr	r3, [r3, #4]
 81064ae:	4313      	orrs	r3, r2
 81064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81064b2:	68fb      	ldr	r3, [r7, #12]
 81064b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 81064b8:	683b      	ldr	r3, [r7, #0]
 81064ba:	681b      	ldr	r3, [r3, #0]
 81064bc:	4313      	orrs	r3, r2
 81064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 81064c0:	68fb      	ldr	r3, [r7, #12]
 81064c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81064c6:	683b      	ldr	r3, [r7, #0]
 81064c8:	691b      	ldr	r3, [r3, #16]
 81064ca:	4313      	orrs	r3, r2
 81064cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81064ce:	68fb      	ldr	r3, [r7, #12]
 81064d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81064d4:	683b      	ldr	r3, [r7, #0]
 81064d6:	695b      	ldr	r3, [r3, #20]
 81064d8:	4313      	orrs	r3, r2
 81064da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81064dc:	68fb      	ldr	r3, [r7, #12]
 81064de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81064e2:	683b      	ldr	r3, [r7, #0]
 81064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064e6:	4313      	orrs	r3, r2
 81064e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81064ea:	68fb      	ldr	r3, [r7, #12]
 81064ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 81064f0:	683b      	ldr	r3, [r7, #0]
 81064f2:	699b      	ldr	r3, [r3, #24]
 81064f4:	041b      	lsls	r3, r3, #16
 81064f6:	4313      	orrs	r3, r2
 81064f8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	4a16      	ldr	r2, [pc, #88]	; (8106558 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8106500:	4293      	cmp	r3, r2
 8106502:	d004      	beq.n	810650e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	4a14      	ldr	r2, [pc, #80]	; (810655c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810650a:	4293      	cmp	r3, r2
 810650c:	d115      	bne.n	810653a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810650e:	68fb      	ldr	r3, [r7, #12]
 8106510:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8106514:	683b      	ldr	r3, [r7, #0]
 8106516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106518:	051b      	lsls	r3, r3, #20
 810651a:	4313      	orrs	r3, r2
 810651c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106524:	683b      	ldr	r3, [r7, #0]
 8106526:	69db      	ldr	r3, [r3, #28]
 8106528:	4313      	orrs	r3, r2
 810652a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810652c:	68fb      	ldr	r3, [r7, #12]
 810652e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8106532:	683b      	ldr	r3, [r7, #0]
 8106534:	6a1b      	ldr	r3, [r3, #32]
 8106536:	4313      	orrs	r3, r2
 8106538:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	68fa      	ldr	r2, [r7, #12]
 8106540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	2200      	movs	r2, #0
 8106546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810654a:	2300      	movs	r3, #0
}
 810654c:	4618      	mov	r0, r3
 810654e:	3714      	adds	r7, #20
 8106550:	46bd      	mov	sp, r7
 8106552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106556:	4770      	bx	lr
 8106558:	40010000 	.word	0x40010000
 810655c:	40010400 	.word	0x40010400

08106560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106560:	b580      	push	{r7, lr}
 8106562:	b082      	sub	sp, #8
 8106564:	af00      	add	r7, sp, #0
 8106566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	2b00      	cmp	r3, #0
 810656c:	d101      	bne.n	8106572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810656e:	2301      	movs	r3, #1
 8106570:	e042      	b.n	81065f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106578:	2b00      	cmp	r3, #0
 810657a:	d106      	bne.n	810658a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	2200      	movs	r2, #0
 8106580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106584:	6878      	ldr	r0, [r7, #4]
 8106586:	f7fb fbf1 	bl	8101d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	2224      	movs	r2, #36	; 0x24
 810658e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	681a      	ldr	r2, [r3, #0]
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	681b      	ldr	r3, [r3, #0]
 810659c:	f022 0201 	bic.w	r2, r2, #1
 81065a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81065a2:	6878      	ldr	r0, [r7, #4]
 81065a4:	f000 f8c2 	bl	810672c <UART_SetConfig>
 81065a8:	4603      	mov	r3, r0
 81065aa:	2b01      	cmp	r3, #1
 81065ac:	d101      	bne.n	81065b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81065ae:	2301      	movs	r3, #1
 81065b0:	e022      	b.n	81065f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065b6:	2b00      	cmp	r3, #0
 81065b8:	d002      	beq.n	81065c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81065ba:	6878      	ldr	r0, [r7, #4]
 81065bc:	f000 fe1e 	bl	81071fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	685a      	ldr	r2, [r3, #4]
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81065ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	689a      	ldr	r2, [r3, #8]
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	681b      	ldr	r3, [r3, #0]
 81065da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81065de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	681a      	ldr	r2, [r3, #0]
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	f042 0201 	orr.w	r2, r2, #1
 81065ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81065f0:	6878      	ldr	r0, [r7, #4]
 81065f2:	f000 fea5 	bl	8107340 <UART_CheckIdleState>
 81065f6:	4603      	mov	r3, r0
}
 81065f8:	4618      	mov	r0, r3
 81065fa:	3708      	adds	r7, #8
 81065fc:	46bd      	mov	sp, r7
 81065fe:	bd80      	pop	{r7, pc}

08106600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106600:	b580      	push	{r7, lr}
 8106602:	b08a      	sub	sp, #40	; 0x28
 8106604:	af02      	add	r7, sp, #8
 8106606:	60f8      	str	r0, [r7, #12]
 8106608:	60b9      	str	r1, [r7, #8]
 810660a:	603b      	str	r3, [r7, #0]
 810660c:	4613      	mov	r3, r2
 810660e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106610:	68fb      	ldr	r3, [r7, #12]
 8106612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106616:	2b20      	cmp	r3, #32
 8106618:	f040 8083 	bne.w	8106722 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 810661c:	68bb      	ldr	r3, [r7, #8]
 810661e:	2b00      	cmp	r3, #0
 8106620:	d002      	beq.n	8106628 <HAL_UART_Transmit+0x28>
 8106622:	88fb      	ldrh	r3, [r7, #6]
 8106624:	2b00      	cmp	r3, #0
 8106626:	d101      	bne.n	810662c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8106628:	2301      	movs	r3, #1
 810662a:	e07b      	b.n	8106724 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 810662c:	68fb      	ldr	r3, [r7, #12]
 810662e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106632:	2b01      	cmp	r3, #1
 8106634:	d101      	bne.n	810663a <HAL_UART_Transmit+0x3a>
 8106636:	2302      	movs	r3, #2
 8106638:	e074      	b.n	8106724 <HAL_UART_Transmit+0x124>
 810663a:	68fb      	ldr	r3, [r7, #12]
 810663c:	2201      	movs	r2, #1
 810663e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106642:	68fb      	ldr	r3, [r7, #12]
 8106644:	2200      	movs	r2, #0
 8106646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810664a:	68fb      	ldr	r3, [r7, #12]
 810664c:	2221      	movs	r2, #33	; 0x21
 810664e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106652:	f7fb fdff 	bl	8102254 <HAL_GetTick>
 8106656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106658:	68fb      	ldr	r3, [r7, #12]
 810665a:	88fa      	ldrh	r2, [r7, #6]
 810665c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106660:	68fb      	ldr	r3, [r7, #12]
 8106662:	88fa      	ldrh	r2, [r7, #6]
 8106664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106668:	68fb      	ldr	r3, [r7, #12]
 810666a:	689b      	ldr	r3, [r3, #8]
 810666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106670:	d108      	bne.n	8106684 <HAL_UART_Transmit+0x84>
 8106672:	68fb      	ldr	r3, [r7, #12]
 8106674:	691b      	ldr	r3, [r3, #16]
 8106676:	2b00      	cmp	r3, #0
 8106678:	d104      	bne.n	8106684 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810667a:	2300      	movs	r3, #0
 810667c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810667e:	68bb      	ldr	r3, [r7, #8]
 8106680:	61bb      	str	r3, [r7, #24]
 8106682:	e003      	b.n	810668c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8106684:	68bb      	ldr	r3, [r7, #8]
 8106686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106688:	2300      	movs	r3, #0
 810668a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810668c:	68fb      	ldr	r3, [r7, #12]
 810668e:	2200      	movs	r2, #0
 8106690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8106694:	e02c      	b.n	81066f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106696:	683b      	ldr	r3, [r7, #0]
 8106698:	9300      	str	r3, [sp, #0]
 810669a:	697b      	ldr	r3, [r7, #20]
 810669c:	2200      	movs	r2, #0
 810669e:	2180      	movs	r1, #128	; 0x80
 81066a0:	68f8      	ldr	r0, [r7, #12]
 81066a2:	f000 fe98 	bl	81073d6 <UART_WaitOnFlagUntilTimeout>
 81066a6:	4603      	mov	r3, r0
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d001      	beq.n	81066b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81066ac:	2303      	movs	r3, #3
 81066ae:	e039      	b.n	8106724 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81066b0:	69fb      	ldr	r3, [r7, #28]
 81066b2:	2b00      	cmp	r3, #0
 81066b4:	d10b      	bne.n	81066ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81066b6:	69bb      	ldr	r3, [r7, #24]
 81066b8:	881b      	ldrh	r3, [r3, #0]
 81066ba:	461a      	mov	r2, r3
 81066bc:	68fb      	ldr	r3, [r7, #12]
 81066be:	681b      	ldr	r3, [r3, #0]
 81066c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81066c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81066c6:	69bb      	ldr	r3, [r7, #24]
 81066c8:	3302      	adds	r3, #2
 81066ca:	61bb      	str	r3, [r7, #24]
 81066cc:	e007      	b.n	81066de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81066ce:	69fb      	ldr	r3, [r7, #28]
 81066d0:	781a      	ldrb	r2, [r3, #0]
 81066d2:	68fb      	ldr	r3, [r7, #12]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81066d8:	69fb      	ldr	r3, [r7, #28]
 81066da:	3301      	adds	r3, #1
 81066dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81066de:	68fb      	ldr	r3, [r7, #12]
 81066e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81066e4:	b29b      	uxth	r3, r3
 81066e6:	3b01      	subs	r3, #1
 81066e8:	b29a      	uxth	r2, r3
 81066ea:	68fb      	ldr	r3, [r7, #12]
 81066ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81066f0:	68fb      	ldr	r3, [r7, #12]
 81066f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81066f6:	b29b      	uxth	r3, r3
 81066f8:	2b00      	cmp	r3, #0
 81066fa:	d1cc      	bne.n	8106696 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81066fc:	683b      	ldr	r3, [r7, #0]
 81066fe:	9300      	str	r3, [sp, #0]
 8106700:	697b      	ldr	r3, [r7, #20]
 8106702:	2200      	movs	r2, #0
 8106704:	2140      	movs	r1, #64	; 0x40
 8106706:	68f8      	ldr	r0, [r7, #12]
 8106708:	f000 fe65 	bl	81073d6 <UART_WaitOnFlagUntilTimeout>
 810670c:	4603      	mov	r3, r0
 810670e:	2b00      	cmp	r3, #0
 8106710:	d001      	beq.n	8106716 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8106712:	2303      	movs	r3, #3
 8106714:	e006      	b.n	8106724 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106716:	68fb      	ldr	r3, [r7, #12]
 8106718:	2220      	movs	r2, #32
 810671a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810671e:	2300      	movs	r3, #0
 8106720:	e000      	b.n	8106724 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8106722:	2302      	movs	r3, #2
  }
}
 8106724:	4618      	mov	r0, r3
 8106726:	3720      	adds	r7, #32
 8106728:	46bd      	mov	sp, r7
 810672a:	bd80      	pop	{r7, pc}

0810672c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810672c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106730:	b092      	sub	sp, #72	; 0x48
 8106732:	af00      	add	r7, sp, #0
 8106734:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106736:	2300      	movs	r3, #0
 8106738:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810673c:	697b      	ldr	r3, [r7, #20]
 810673e:	689a      	ldr	r2, [r3, #8]
 8106740:	697b      	ldr	r3, [r7, #20]
 8106742:	691b      	ldr	r3, [r3, #16]
 8106744:	431a      	orrs	r2, r3
 8106746:	697b      	ldr	r3, [r7, #20]
 8106748:	695b      	ldr	r3, [r3, #20]
 810674a:	431a      	orrs	r2, r3
 810674c:	697b      	ldr	r3, [r7, #20]
 810674e:	69db      	ldr	r3, [r3, #28]
 8106750:	4313      	orrs	r3, r2
 8106752:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106754:	697b      	ldr	r3, [r7, #20]
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	681a      	ldr	r2, [r3, #0]
 810675a:	4bbd      	ldr	r3, [pc, #756]	; (8106a50 <UART_SetConfig+0x324>)
 810675c:	4013      	ands	r3, r2
 810675e:	697a      	ldr	r2, [r7, #20]
 8106760:	6812      	ldr	r2, [r2, #0]
 8106762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106764:	430b      	orrs	r3, r1
 8106766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106768:	697b      	ldr	r3, [r7, #20]
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	685b      	ldr	r3, [r3, #4]
 810676e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106772:	697b      	ldr	r3, [r7, #20]
 8106774:	68da      	ldr	r2, [r3, #12]
 8106776:	697b      	ldr	r3, [r7, #20]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	430a      	orrs	r2, r1
 810677c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810677e:	697b      	ldr	r3, [r7, #20]
 8106780:	699b      	ldr	r3, [r3, #24]
 8106782:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106784:	697b      	ldr	r3, [r7, #20]
 8106786:	681b      	ldr	r3, [r3, #0]
 8106788:	4ab2      	ldr	r2, [pc, #712]	; (8106a54 <UART_SetConfig+0x328>)
 810678a:	4293      	cmp	r3, r2
 810678c:	d004      	beq.n	8106798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810678e:	697b      	ldr	r3, [r7, #20]
 8106790:	6a1b      	ldr	r3, [r3, #32]
 8106792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106794:	4313      	orrs	r3, r2
 8106796:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106798:	697b      	ldr	r3, [r7, #20]
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	689b      	ldr	r3, [r3, #8]
 810679e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81067a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81067a6:	697a      	ldr	r2, [r7, #20]
 81067a8:	6812      	ldr	r2, [r2, #0]
 81067aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81067ac:	430b      	orrs	r3, r1
 81067ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81067b0:	697b      	ldr	r3, [r7, #20]
 81067b2:	681b      	ldr	r3, [r3, #0]
 81067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81067b6:	f023 010f 	bic.w	r1, r3, #15
 81067ba:	697b      	ldr	r3, [r7, #20]
 81067bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81067be:	697b      	ldr	r3, [r7, #20]
 81067c0:	681b      	ldr	r3, [r3, #0]
 81067c2:	430a      	orrs	r2, r1
 81067c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81067c6:	697b      	ldr	r3, [r7, #20]
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	4aa3      	ldr	r2, [pc, #652]	; (8106a58 <UART_SetConfig+0x32c>)
 81067cc:	4293      	cmp	r3, r2
 81067ce:	d177      	bne.n	81068c0 <UART_SetConfig+0x194>
 81067d0:	4ba2      	ldr	r3, [pc, #648]	; (8106a5c <UART_SetConfig+0x330>)
 81067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81067d8:	2b28      	cmp	r3, #40	; 0x28
 81067da:	d86d      	bhi.n	81068b8 <UART_SetConfig+0x18c>
 81067dc:	a201      	add	r2, pc, #4	; (adr r2, 81067e4 <UART_SetConfig+0xb8>)
 81067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067e2:	bf00      	nop
 81067e4:	08106889 	.word	0x08106889
 81067e8:	081068b9 	.word	0x081068b9
 81067ec:	081068b9 	.word	0x081068b9
 81067f0:	081068b9 	.word	0x081068b9
 81067f4:	081068b9 	.word	0x081068b9
 81067f8:	081068b9 	.word	0x081068b9
 81067fc:	081068b9 	.word	0x081068b9
 8106800:	081068b9 	.word	0x081068b9
 8106804:	08106891 	.word	0x08106891
 8106808:	081068b9 	.word	0x081068b9
 810680c:	081068b9 	.word	0x081068b9
 8106810:	081068b9 	.word	0x081068b9
 8106814:	081068b9 	.word	0x081068b9
 8106818:	081068b9 	.word	0x081068b9
 810681c:	081068b9 	.word	0x081068b9
 8106820:	081068b9 	.word	0x081068b9
 8106824:	08106899 	.word	0x08106899
 8106828:	081068b9 	.word	0x081068b9
 810682c:	081068b9 	.word	0x081068b9
 8106830:	081068b9 	.word	0x081068b9
 8106834:	081068b9 	.word	0x081068b9
 8106838:	081068b9 	.word	0x081068b9
 810683c:	081068b9 	.word	0x081068b9
 8106840:	081068b9 	.word	0x081068b9
 8106844:	081068a1 	.word	0x081068a1
 8106848:	081068b9 	.word	0x081068b9
 810684c:	081068b9 	.word	0x081068b9
 8106850:	081068b9 	.word	0x081068b9
 8106854:	081068b9 	.word	0x081068b9
 8106858:	081068b9 	.word	0x081068b9
 810685c:	081068b9 	.word	0x081068b9
 8106860:	081068b9 	.word	0x081068b9
 8106864:	081068a9 	.word	0x081068a9
 8106868:	081068b9 	.word	0x081068b9
 810686c:	081068b9 	.word	0x081068b9
 8106870:	081068b9 	.word	0x081068b9
 8106874:	081068b9 	.word	0x081068b9
 8106878:	081068b9 	.word	0x081068b9
 810687c:	081068b9 	.word	0x081068b9
 8106880:	081068b9 	.word	0x081068b9
 8106884:	081068b1 	.word	0x081068b1
 8106888:	2301      	movs	r3, #1
 810688a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810688e:	e220      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106890:	2304      	movs	r3, #4
 8106892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106896:	e21c      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106898:	2308      	movs	r3, #8
 810689a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810689e:	e218      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81068a0:	2310      	movs	r3, #16
 81068a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81068a6:	e214      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81068a8:	2320      	movs	r3, #32
 81068aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81068ae:	e210      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81068b0:	2340      	movs	r3, #64	; 0x40
 81068b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81068b6:	e20c      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81068b8:	2380      	movs	r3, #128	; 0x80
 81068ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81068be:	e208      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81068c0:	697b      	ldr	r3, [r7, #20]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	4a66      	ldr	r2, [pc, #408]	; (8106a60 <UART_SetConfig+0x334>)
 81068c6:	4293      	cmp	r3, r2
 81068c8:	d130      	bne.n	810692c <UART_SetConfig+0x200>
 81068ca:	4b64      	ldr	r3, [pc, #400]	; (8106a5c <UART_SetConfig+0x330>)
 81068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068ce:	f003 0307 	and.w	r3, r3, #7
 81068d2:	2b05      	cmp	r3, #5
 81068d4:	d826      	bhi.n	8106924 <UART_SetConfig+0x1f8>
 81068d6:	a201      	add	r2, pc, #4	; (adr r2, 81068dc <UART_SetConfig+0x1b0>)
 81068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068dc:	081068f5 	.word	0x081068f5
 81068e0:	081068fd 	.word	0x081068fd
 81068e4:	08106905 	.word	0x08106905
 81068e8:	0810690d 	.word	0x0810690d
 81068ec:	08106915 	.word	0x08106915
 81068f0:	0810691d 	.word	0x0810691d
 81068f4:	2300      	movs	r3, #0
 81068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81068fa:	e1ea      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81068fc:	2304      	movs	r3, #4
 81068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106902:	e1e6      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106904:	2308      	movs	r3, #8
 8106906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810690a:	e1e2      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 810690c:	2310      	movs	r3, #16
 810690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106912:	e1de      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106914:	2320      	movs	r3, #32
 8106916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810691a:	e1da      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 810691c:	2340      	movs	r3, #64	; 0x40
 810691e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106922:	e1d6      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106924:	2380      	movs	r3, #128	; 0x80
 8106926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810692a:	e1d2      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 810692c:	697b      	ldr	r3, [r7, #20]
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	4a4c      	ldr	r2, [pc, #304]	; (8106a64 <UART_SetConfig+0x338>)
 8106932:	4293      	cmp	r3, r2
 8106934:	d130      	bne.n	8106998 <UART_SetConfig+0x26c>
 8106936:	4b49      	ldr	r3, [pc, #292]	; (8106a5c <UART_SetConfig+0x330>)
 8106938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810693a:	f003 0307 	and.w	r3, r3, #7
 810693e:	2b05      	cmp	r3, #5
 8106940:	d826      	bhi.n	8106990 <UART_SetConfig+0x264>
 8106942:	a201      	add	r2, pc, #4	; (adr r2, 8106948 <UART_SetConfig+0x21c>)
 8106944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106948:	08106961 	.word	0x08106961
 810694c:	08106969 	.word	0x08106969
 8106950:	08106971 	.word	0x08106971
 8106954:	08106979 	.word	0x08106979
 8106958:	08106981 	.word	0x08106981
 810695c:	08106989 	.word	0x08106989
 8106960:	2300      	movs	r3, #0
 8106962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106966:	e1b4      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106968:	2304      	movs	r3, #4
 810696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810696e:	e1b0      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106970:	2308      	movs	r3, #8
 8106972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106976:	e1ac      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106978:	2310      	movs	r3, #16
 810697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810697e:	e1a8      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106980:	2320      	movs	r3, #32
 8106982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106986:	e1a4      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106988:	2340      	movs	r3, #64	; 0x40
 810698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810698e:	e1a0      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106990:	2380      	movs	r3, #128	; 0x80
 8106992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106996:	e19c      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106998:	697b      	ldr	r3, [r7, #20]
 810699a:	681b      	ldr	r3, [r3, #0]
 810699c:	4a32      	ldr	r2, [pc, #200]	; (8106a68 <UART_SetConfig+0x33c>)
 810699e:	4293      	cmp	r3, r2
 81069a0:	d130      	bne.n	8106a04 <UART_SetConfig+0x2d8>
 81069a2:	4b2e      	ldr	r3, [pc, #184]	; (8106a5c <UART_SetConfig+0x330>)
 81069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81069a6:	f003 0307 	and.w	r3, r3, #7
 81069aa:	2b05      	cmp	r3, #5
 81069ac:	d826      	bhi.n	81069fc <UART_SetConfig+0x2d0>
 81069ae:	a201      	add	r2, pc, #4	; (adr r2, 81069b4 <UART_SetConfig+0x288>)
 81069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069b4:	081069cd 	.word	0x081069cd
 81069b8:	081069d5 	.word	0x081069d5
 81069bc:	081069dd 	.word	0x081069dd
 81069c0:	081069e5 	.word	0x081069e5
 81069c4:	081069ed 	.word	0x081069ed
 81069c8:	081069f5 	.word	0x081069f5
 81069cc:	2300      	movs	r3, #0
 81069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81069d2:	e17e      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81069d4:	2304      	movs	r3, #4
 81069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81069da:	e17a      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81069dc:	2308      	movs	r3, #8
 81069de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81069e2:	e176      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81069e4:	2310      	movs	r3, #16
 81069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81069ea:	e172      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81069ec:	2320      	movs	r3, #32
 81069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81069f2:	e16e      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81069f4:	2340      	movs	r3, #64	; 0x40
 81069f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81069fa:	e16a      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 81069fc:	2380      	movs	r3, #128	; 0x80
 81069fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a02:	e166      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a04:	697b      	ldr	r3, [r7, #20]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	4a18      	ldr	r2, [pc, #96]	; (8106a6c <UART_SetConfig+0x340>)
 8106a0a:	4293      	cmp	r3, r2
 8106a0c:	d140      	bne.n	8106a90 <UART_SetConfig+0x364>
 8106a0e:	4b13      	ldr	r3, [pc, #76]	; (8106a5c <UART_SetConfig+0x330>)
 8106a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a12:	f003 0307 	and.w	r3, r3, #7
 8106a16:	2b05      	cmp	r3, #5
 8106a18:	d836      	bhi.n	8106a88 <UART_SetConfig+0x35c>
 8106a1a:	a201      	add	r2, pc, #4	; (adr r2, 8106a20 <UART_SetConfig+0x2f4>)
 8106a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a20:	08106a39 	.word	0x08106a39
 8106a24:	08106a41 	.word	0x08106a41
 8106a28:	08106a49 	.word	0x08106a49
 8106a2c:	08106a71 	.word	0x08106a71
 8106a30:	08106a79 	.word	0x08106a79
 8106a34:	08106a81 	.word	0x08106a81
 8106a38:	2300      	movs	r3, #0
 8106a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a3e:	e148      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a40:	2304      	movs	r3, #4
 8106a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a46:	e144      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a48:	2308      	movs	r3, #8
 8106a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a4e:	e140      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a50:	cfff69f3 	.word	0xcfff69f3
 8106a54:	58000c00 	.word	0x58000c00
 8106a58:	40011000 	.word	0x40011000
 8106a5c:	58024400 	.word	0x58024400
 8106a60:	40004400 	.word	0x40004400
 8106a64:	40004800 	.word	0x40004800
 8106a68:	40004c00 	.word	0x40004c00
 8106a6c:	40005000 	.word	0x40005000
 8106a70:	2310      	movs	r3, #16
 8106a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a76:	e12c      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a78:	2320      	movs	r3, #32
 8106a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a7e:	e128      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a80:	2340      	movs	r3, #64	; 0x40
 8106a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a86:	e124      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a88:	2380      	movs	r3, #128	; 0x80
 8106a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106a8e:	e120      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106a90:	697b      	ldr	r3, [r7, #20]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	4acb      	ldr	r2, [pc, #812]	; (8106dc4 <UART_SetConfig+0x698>)
 8106a96:	4293      	cmp	r3, r2
 8106a98:	d176      	bne.n	8106b88 <UART_SetConfig+0x45c>
 8106a9a:	4bcb      	ldr	r3, [pc, #812]	; (8106dc8 <UART_SetConfig+0x69c>)
 8106a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106aa2:	2b28      	cmp	r3, #40	; 0x28
 8106aa4:	d86c      	bhi.n	8106b80 <UART_SetConfig+0x454>
 8106aa6:	a201      	add	r2, pc, #4	; (adr r2, 8106aac <UART_SetConfig+0x380>)
 8106aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106aac:	08106b51 	.word	0x08106b51
 8106ab0:	08106b81 	.word	0x08106b81
 8106ab4:	08106b81 	.word	0x08106b81
 8106ab8:	08106b81 	.word	0x08106b81
 8106abc:	08106b81 	.word	0x08106b81
 8106ac0:	08106b81 	.word	0x08106b81
 8106ac4:	08106b81 	.word	0x08106b81
 8106ac8:	08106b81 	.word	0x08106b81
 8106acc:	08106b59 	.word	0x08106b59
 8106ad0:	08106b81 	.word	0x08106b81
 8106ad4:	08106b81 	.word	0x08106b81
 8106ad8:	08106b81 	.word	0x08106b81
 8106adc:	08106b81 	.word	0x08106b81
 8106ae0:	08106b81 	.word	0x08106b81
 8106ae4:	08106b81 	.word	0x08106b81
 8106ae8:	08106b81 	.word	0x08106b81
 8106aec:	08106b61 	.word	0x08106b61
 8106af0:	08106b81 	.word	0x08106b81
 8106af4:	08106b81 	.word	0x08106b81
 8106af8:	08106b81 	.word	0x08106b81
 8106afc:	08106b81 	.word	0x08106b81
 8106b00:	08106b81 	.word	0x08106b81
 8106b04:	08106b81 	.word	0x08106b81
 8106b08:	08106b81 	.word	0x08106b81
 8106b0c:	08106b69 	.word	0x08106b69
 8106b10:	08106b81 	.word	0x08106b81
 8106b14:	08106b81 	.word	0x08106b81
 8106b18:	08106b81 	.word	0x08106b81
 8106b1c:	08106b81 	.word	0x08106b81
 8106b20:	08106b81 	.word	0x08106b81
 8106b24:	08106b81 	.word	0x08106b81
 8106b28:	08106b81 	.word	0x08106b81
 8106b2c:	08106b71 	.word	0x08106b71
 8106b30:	08106b81 	.word	0x08106b81
 8106b34:	08106b81 	.word	0x08106b81
 8106b38:	08106b81 	.word	0x08106b81
 8106b3c:	08106b81 	.word	0x08106b81
 8106b40:	08106b81 	.word	0x08106b81
 8106b44:	08106b81 	.word	0x08106b81
 8106b48:	08106b81 	.word	0x08106b81
 8106b4c:	08106b79 	.word	0x08106b79
 8106b50:	2301      	movs	r3, #1
 8106b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b56:	e0bc      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b58:	2304      	movs	r3, #4
 8106b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b5e:	e0b8      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b60:	2308      	movs	r3, #8
 8106b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b66:	e0b4      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b68:	2310      	movs	r3, #16
 8106b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b6e:	e0b0      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b70:	2320      	movs	r3, #32
 8106b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b76:	e0ac      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b78:	2340      	movs	r3, #64	; 0x40
 8106b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b7e:	e0a8      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b80:	2380      	movs	r3, #128	; 0x80
 8106b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106b86:	e0a4      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106b88:	697b      	ldr	r3, [r7, #20]
 8106b8a:	681b      	ldr	r3, [r3, #0]
 8106b8c:	4a8f      	ldr	r2, [pc, #572]	; (8106dcc <UART_SetConfig+0x6a0>)
 8106b8e:	4293      	cmp	r3, r2
 8106b90:	d130      	bne.n	8106bf4 <UART_SetConfig+0x4c8>
 8106b92:	4b8d      	ldr	r3, [pc, #564]	; (8106dc8 <UART_SetConfig+0x69c>)
 8106b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b96:	f003 0307 	and.w	r3, r3, #7
 8106b9a:	2b05      	cmp	r3, #5
 8106b9c:	d826      	bhi.n	8106bec <UART_SetConfig+0x4c0>
 8106b9e:	a201      	add	r2, pc, #4	; (adr r2, 8106ba4 <UART_SetConfig+0x478>)
 8106ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ba4:	08106bbd 	.word	0x08106bbd
 8106ba8:	08106bc5 	.word	0x08106bc5
 8106bac:	08106bcd 	.word	0x08106bcd
 8106bb0:	08106bd5 	.word	0x08106bd5
 8106bb4:	08106bdd 	.word	0x08106bdd
 8106bb8:	08106be5 	.word	0x08106be5
 8106bbc:	2300      	movs	r3, #0
 8106bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bc2:	e086      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106bc4:	2304      	movs	r3, #4
 8106bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bca:	e082      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106bcc:	2308      	movs	r3, #8
 8106bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bd2:	e07e      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106bd4:	2310      	movs	r3, #16
 8106bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bda:	e07a      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106bdc:	2320      	movs	r3, #32
 8106bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106be2:	e076      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106be4:	2340      	movs	r3, #64	; 0x40
 8106be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bea:	e072      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106bec:	2380      	movs	r3, #128	; 0x80
 8106bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bf2:	e06e      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106bf4:	697b      	ldr	r3, [r7, #20]
 8106bf6:	681b      	ldr	r3, [r3, #0]
 8106bf8:	4a75      	ldr	r2, [pc, #468]	; (8106dd0 <UART_SetConfig+0x6a4>)
 8106bfa:	4293      	cmp	r3, r2
 8106bfc:	d130      	bne.n	8106c60 <UART_SetConfig+0x534>
 8106bfe:	4b72      	ldr	r3, [pc, #456]	; (8106dc8 <UART_SetConfig+0x69c>)
 8106c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c02:	f003 0307 	and.w	r3, r3, #7
 8106c06:	2b05      	cmp	r3, #5
 8106c08:	d826      	bhi.n	8106c58 <UART_SetConfig+0x52c>
 8106c0a:	a201      	add	r2, pc, #4	; (adr r2, 8106c10 <UART_SetConfig+0x4e4>)
 8106c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c10:	08106c29 	.word	0x08106c29
 8106c14:	08106c31 	.word	0x08106c31
 8106c18:	08106c39 	.word	0x08106c39
 8106c1c:	08106c41 	.word	0x08106c41
 8106c20:	08106c49 	.word	0x08106c49
 8106c24:	08106c51 	.word	0x08106c51
 8106c28:	2300      	movs	r3, #0
 8106c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c2e:	e050      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c30:	2304      	movs	r3, #4
 8106c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c36:	e04c      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c38:	2308      	movs	r3, #8
 8106c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c3e:	e048      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c40:	2310      	movs	r3, #16
 8106c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c46:	e044      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c48:	2320      	movs	r3, #32
 8106c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c4e:	e040      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c50:	2340      	movs	r3, #64	; 0x40
 8106c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c56:	e03c      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c58:	2380      	movs	r3, #128	; 0x80
 8106c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c5e:	e038      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c60:	697b      	ldr	r3, [r7, #20]
 8106c62:	681b      	ldr	r3, [r3, #0]
 8106c64:	4a5b      	ldr	r2, [pc, #364]	; (8106dd4 <UART_SetConfig+0x6a8>)
 8106c66:	4293      	cmp	r3, r2
 8106c68:	d130      	bne.n	8106ccc <UART_SetConfig+0x5a0>
 8106c6a:	4b57      	ldr	r3, [pc, #348]	; (8106dc8 <UART_SetConfig+0x69c>)
 8106c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106c6e:	f003 0307 	and.w	r3, r3, #7
 8106c72:	2b05      	cmp	r3, #5
 8106c74:	d826      	bhi.n	8106cc4 <UART_SetConfig+0x598>
 8106c76:	a201      	add	r2, pc, #4	; (adr r2, 8106c7c <UART_SetConfig+0x550>)
 8106c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c7c:	08106c95 	.word	0x08106c95
 8106c80:	08106c9d 	.word	0x08106c9d
 8106c84:	08106ca5 	.word	0x08106ca5
 8106c88:	08106cad 	.word	0x08106cad
 8106c8c:	08106cb5 	.word	0x08106cb5
 8106c90:	08106cbd 	.word	0x08106cbd
 8106c94:	2302      	movs	r3, #2
 8106c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c9a:	e01a      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106c9c:	2304      	movs	r3, #4
 8106c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106ca2:	e016      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106ca4:	2308      	movs	r3, #8
 8106ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106caa:	e012      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106cac:	2310      	movs	r3, #16
 8106cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cb2:	e00e      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106cb4:	2320      	movs	r3, #32
 8106cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cba:	e00a      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106cbc:	2340      	movs	r3, #64	; 0x40
 8106cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cc2:	e006      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106cc4:	2380      	movs	r3, #128	; 0x80
 8106cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cca:	e002      	b.n	8106cd2 <UART_SetConfig+0x5a6>
 8106ccc:	2380      	movs	r3, #128	; 0x80
 8106cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8106cd2:	697b      	ldr	r3, [r7, #20]
 8106cd4:	681b      	ldr	r3, [r3, #0]
 8106cd6:	4a3f      	ldr	r2, [pc, #252]	; (8106dd4 <UART_SetConfig+0x6a8>)
 8106cd8:	4293      	cmp	r3, r2
 8106cda:	f040 80f8 	bne.w	8106ece <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106cde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8106ce2:	2b20      	cmp	r3, #32
 8106ce4:	dc46      	bgt.n	8106d74 <UART_SetConfig+0x648>
 8106ce6:	2b02      	cmp	r3, #2
 8106ce8:	f2c0 8082 	blt.w	8106df0 <UART_SetConfig+0x6c4>
 8106cec:	3b02      	subs	r3, #2
 8106cee:	2b1e      	cmp	r3, #30
 8106cf0:	d87e      	bhi.n	8106df0 <UART_SetConfig+0x6c4>
 8106cf2:	a201      	add	r2, pc, #4	; (adr r2, 8106cf8 <UART_SetConfig+0x5cc>)
 8106cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cf8:	08106d7b 	.word	0x08106d7b
 8106cfc:	08106df1 	.word	0x08106df1
 8106d00:	08106d83 	.word	0x08106d83
 8106d04:	08106df1 	.word	0x08106df1
 8106d08:	08106df1 	.word	0x08106df1
 8106d0c:	08106df1 	.word	0x08106df1
 8106d10:	08106d93 	.word	0x08106d93
 8106d14:	08106df1 	.word	0x08106df1
 8106d18:	08106df1 	.word	0x08106df1
 8106d1c:	08106df1 	.word	0x08106df1
 8106d20:	08106df1 	.word	0x08106df1
 8106d24:	08106df1 	.word	0x08106df1
 8106d28:	08106df1 	.word	0x08106df1
 8106d2c:	08106df1 	.word	0x08106df1
 8106d30:	08106da3 	.word	0x08106da3
 8106d34:	08106df1 	.word	0x08106df1
 8106d38:	08106df1 	.word	0x08106df1
 8106d3c:	08106df1 	.word	0x08106df1
 8106d40:	08106df1 	.word	0x08106df1
 8106d44:	08106df1 	.word	0x08106df1
 8106d48:	08106df1 	.word	0x08106df1
 8106d4c:	08106df1 	.word	0x08106df1
 8106d50:	08106df1 	.word	0x08106df1
 8106d54:	08106df1 	.word	0x08106df1
 8106d58:	08106df1 	.word	0x08106df1
 8106d5c:	08106df1 	.word	0x08106df1
 8106d60:	08106df1 	.word	0x08106df1
 8106d64:	08106df1 	.word	0x08106df1
 8106d68:	08106df1 	.word	0x08106df1
 8106d6c:	08106df1 	.word	0x08106df1
 8106d70:	08106de3 	.word	0x08106de3
 8106d74:	2b40      	cmp	r3, #64	; 0x40
 8106d76:	d037      	beq.n	8106de8 <UART_SetConfig+0x6bc>
 8106d78:	e03a      	b.n	8106df0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106d7a:	f7fd fe19 	bl	81049b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8106d7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106d80:	e03c      	b.n	8106dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106d86:	4618      	mov	r0, r3
 8106d88:	f7fd fe28 	bl	81049dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106d90:	e034      	b.n	8106dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106d92:	f107 0318 	add.w	r3, r7, #24
 8106d96:	4618      	mov	r0, r3
 8106d98:	f7fd ff74 	bl	8104c84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106d9c:	69fb      	ldr	r3, [r7, #28]
 8106d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106da0:	e02c      	b.n	8106dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106da2:	4b09      	ldr	r3, [pc, #36]	; (8106dc8 <UART_SetConfig+0x69c>)
 8106da4:	681b      	ldr	r3, [r3, #0]
 8106da6:	f003 0320 	and.w	r3, r3, #32
 8106daa:	2b00      	cmp	r3, #0
 8106dac:	d016      	beq.n	8106ddc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106dae:	4b06      	ldr	r3, [pc, #24]	; (8106dc8 <UART_SetConfig+0x69c>)
 8106db0:	681b      	ldr	r3, [r3, #0]
 8106db2:	08db      	lsrs	r3, r3, #3
 8106db4:	f003 0303 	and.w	r3, r3, #3
 8106db8:	4a07      	ldr	r2, [pc, #28]	; (8106dd8 <UART_SetConfig+0x6ac>)
 8106dba:	fa22 f303 	lsr.w	r3, r2, r3
 8106dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106dc0:	e01c      	b.n	8106dfc <UART_SetConfig+0x6d0>
 8106dc2:	bf00      	nop
 8106dc4:	40011400 	.word	0x40011400
 8106dc8:	58024400 	.word	0x58024400
 8106dcc:	40007800 	.word	0x40007800
 8106dd0:	40007c00 	.word	0x40007c00
 8106dd4:	58000c00 	.word	0x58000c00
 8106dd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8106ddc:	4b9d      	ldr	r3, [pc, #628]	; (8107054 <UART_SetConfig+0x928>)
 8106dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106de0:	e00c      	b.n	8106dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106de2:	4b9d      	ldr	r3, [pc, #628]	; (8107058 <UART_SetConfig+0x92c>)
 8106de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106de6:	e009      	b.n	8106dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106dee:	e005      	b.n	8106dfc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8106df0:	2300      	movs	r3, #0
 8106df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106df4:	2301      	movs	r3, #1
 8106df6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106dfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8106dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106dfe:	2b00      	cmp	r3, #0
 8106e00:	f000 81de 	beq.w	81071c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106e04:	697b      	ldr	r3, [r7, #20]
 8106e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e08:	4a94      	ldr	r2, [pc, #592]	; (810705c <UART_SetConfig+0x930>)
 8106e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106e0e:	461a      	mov	r2, r3
 8106e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8106e16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106e18:	697b      	ldr	r3, [r7, #20]
 8106e1a:	685a      	ldr	r2, [r3, #4]
 8106e1c:	4613      	mov	r3, r2
 8106e1e:	005b      	lsls	r3, r3, #1
 8106e20:	4413      	add	r3, r2
 8106e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106e24:	429a      	cmp	r2, r3
 8106e26:	d305      	bcc.n	8106e34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8106e28:	697b      	ldr	r3, [r7, #20]
 8106e2a:	685b      	ldr	r3, [r3, #4]
 8106e2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106e30:	429a      	cmp	r2, r3
 8106e32:	d903      	bls.n	8106e3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8106e34:	2301      	movs	r3, #1
 8106e36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8106e3a:	e1c1      	b.n	81071c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106e3e:	2200      	movs	r2, #0
 8106e40:	60bb      	str	r3, [r7, #8]
 8106e42:	60fa      	str	r2, [r7, #12]
 8106e44:	697b      	ldr	r3, [r7, #20]
 8106e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e48:	4a84      	ldr	r2, [pc, #528]	; (810705c <UART_SetConfig+0x930>)
 8106e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106e4e:	b29b      	uxth	r3, r3
 8106e50:	2200      	movs	r2, #0
 8106e52:	603b      	str	r3, [r7, #0]
 8106e54:	607a      	str	r2, [r7, #4]
 8106e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8106e5e:	f7f9 ff9b 	bl	8100d98 <__aeabi_uldivmod>
 8106e62:	4602      	mov	r2, r0
 8106e64:	460b      	mov	r3, r1
 8106e66:	4610      	mov	r0, r2
 8106e68:	4619      	mov	r1, r3
 8106e6a:	f04f 0200 	mov.w	r2, #0
 8106e6e:	f04f 0300 	mov.w	r3, #0
 8106e72:	020b      	lsls	r3, r1, #8
 8106e74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8106e78:	0202      	lsls	r2, r0, #8
 8106e7a:	6979      	ldr	r1, [r7, #20]
 8106e7c:	6849      	ldr	r1, [r1, #4]
 8106e7e:	0849      	lsrs	r1, r1, #1
 8106e80:	2000      	movs	r0, #0
 8106e82:	460c      	mov	r4, r1
 8106e84:	4605      	mov	r5, r0
 8106e86:	eb12 0804 	adds.w	r8, r2, r4
 8106e8a:	eb43 0905 	adc.w	r9, r3, r5
 8106e8e:	697b      	ldr	r3, [r7, #20]
 8106e90:	685b      	ldr	r3, [r3, #4]
 8106e92:	2200      	movs	r2, #0
 8106e94:	469a      	mov	sl, r3
 8106e96:	4693      	mov	fp, r2
 8106e98:	4652      	mov	r2, sl
 8106e9a:	465b      	mov	r3, fp
 8106e9c:	4640      	mov	r0, r8
 8106e9e:	4649      	mov	r1, r9
 8106ea0:	f7f9 ff7a 	bl	8100d98 <__aeabi_uldivmod>
 8106ea4:	4602      	mov	r2, r0
 8106ea6:	460b      	mov	r3, r1
 8106ea8:	4613      	mov	r3, r2
 8106eaa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106eb2:	d308      	bcc.n	8106ec6 <UART_SetConfig+0x79a>
 8106eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106eba:	d204      	bcs.n	8106ec6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8106ebc:	697b      	ldr	r3, [r7, #20]
 8106ebe:	681b      	ldr	r3, [r3, #0]
 8106ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106ec2:	60da      	str	r2, [r3, #12]
 8106ec4:	e17c      	b.n	81071c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8106ec6:	2301      	movs	r3, #1
 8106ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8106ecc:	e178      	b.n	81071c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106ece:	697b      	ldr	r3, [r7, #20]
 8106ed0:	69db      	ldr	r3, [r3, #28]
 8106ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106ed6:	f040 80c5 	bne.w	8107064 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8106eda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8106ede:	2b20      	cmp	r3, #32
 8106ee0:	dc48      	bgt.n	8106f74 <UART_SetConfig+0x848>
 8106ee2:	2b00      	cmp	r3, #0
 8106ee4:	db7b      	blt.n	8106fde <UART_SetConfig+0x8b2>
 8106ee6:	2b20      	cmp	r3, #32
 8106ee8:	d879      	bhi.n	8106fde <UART_SetConfig+0x8b2>
 8106eea:	a201      	add	r2, pc, #4	; (adr r2, 8106ef0 <UART_SetConfig+0x7c4>)
 8106eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ef0:	08106f7b 	.word	0x08106f7b
 8106ef4:	08106f83 	.word	0x08106f83
 8106ef8:	08106fdf 	.word	0x08106fdf
 8106efc:	08106fdf 	.word	0x08106fdf
 8106f00:	08106f8b 	.word	0x08106f8b
 8106f04:	08106fdf 	.word	0x08106fdf
 8106f08:	08106fdf 	.word	0x08106fdf
 8106f0c:	08106fdf 	.word	0x08106fdf
 8106f10:	08106f9b 	.word	0x08106f9b
 8106f14:	08106fdf 	.word	0x08106fdf
 8106f18:	08106fdf 	.word	0x08106fdf
 8106f1c:	08106fdf 	.word	0x08106fdf
 8106f20:	08106fdf 	.word	0x08106fdf
 8106f24:	08106fdf 	.word	0x08106fdf
 8106f28:	08106fdf 	.word	0x08106fdf
 8106f2c:	08106fdf 	.word	0x08106fdf
 8106f30:	08106fab 	.word	0x08106fab
 8106f34:	08106fdf 	.word	0x08106fdf
 8106f38:	08106fdf 	.word	0x08106fdf
 8106f3c:	08106fdf 	.word	0x08106fdf
 8106f40:	08106fdf 	.word	0x08106fdf
 8106f44:	08106fdf 	.word	0x08106fdf
 8106f48:	08106fdf 	.word	0x08106fdf
 8106f4c:	08106fdf 	.word	0x08106fdf
 8106f50:	08106fdf 	.word	0x08106fdf
 8106f54:	08106fdf 	.word	0x08106fdf
 8106f58:	08106fdf 	.word	0x08106fdf
 8106f5c:	08106fdf 	.word	0x08106fdf
 8106f60:	08106fdf 	.word	0x08106fdf
 8106f64:	08106fdf 	.word	0x08106fdf
 8106f68:	08106fdf 	.word	0x08106fdf
 8106f6c:	08106fdf 	.word	0x08106fdf
 8106f70:	08106fd1 	.word	0x08106fd1
 8106f74:	2b40      	cmp	r3, #64	; 0x40
 8106f76:	d02e      	beq.n	8106fd6 <UART_SetConfig+0x8aa>
 8106f78:	e031      	b.n	8106fde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106f7a:	f7fc fda7 	bl	8103acc <HAL_RCC_GetPCLK1Freq>
 8106f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106f80:	e033      	b.n	8106fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106f82:	f7fc fdb9 	bl	8103af8 <HAL_RCC_GetPCLK2Freq>
 8106f86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106f88:	e02f      	b.n	8106fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106f8e:	4618      	mov	r0, r3
 8106f90:	f7fd fd24 	bl	81049dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f98:	e027      	b.n	8106fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f9a:	f107 0318 	add.w	r3, r7, #24
 8106f9e:	4618      	mov	r0, r3
 8106fa0:	f7fd fe70 	bl	8104c84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106fa4:	69fb      	ldr	r3, [r7, #28]
 8106fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fa8:	e01f      	b.n	8106fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106faa:	4b2d      	ldr	r3, [pc, #180]	; (8107060 <UART_SetConfig+0x934>)
 8106fac:	681b      	ldr	r3, [r3, #0]
 8106fae:	f003 0320 	and.w	r3, r3, #32
 8106fb2:	2b00      	cmp	r3, #0
 8106fb4:	d009      	beq.n	8106fca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106fb6:	4b2a      	ldr	r3, [pc, #168]	; (8107060 <UART_SetConfig+0x934>)
 8106fb8:	681b      	ldr	r3, [r3, #0]
 8106fba:	08db      	lsrs	r3, r3, #3
 8106fbc:	f003 0303 	and.w	r3, r3, #3
 8106fc0:	4a24      	ldr	r2, [pc, #144]	; (8107054 <UART_SetConfig+0x928>)
 8106fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8106fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106fc8:	e00f      	b.n	8106fea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8106fca:	4b22      	ldr	r3, [pc, #136]	; (8107054 <UART_SetConfig+0x928>)
 8106fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fce:	e00c      	b.n	8106fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106fd0:	4b21      	ldr	r3, [pc, #132]	; (8107058 <UART_SetConfig+0x92c>)
 8106fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fd4:	e009      	b.n	8106fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fdc:	e005      	b.n	8106fea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8106fde:	2300      	movs	r3, #0
 8106fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106fe2:	2301      	movs	r3, #1
 8106fe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106fec:	2b00      	cmp	r3, #0
 8106fee:	f000 80e7 	beq.w	81071c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106ff2:	697b      	ldr	r3, [r7, #20]
 8106ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106ff6:	4a19      	ldr	r2, [pc, #100]	; (810705c <UART_SetConfig+0x930>)
 8106ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106ffc:	461a      	mov	r2, r3
 8106ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107000:	fbb3 f3f2 	udiv	r3, r3, r2
 8107004:	005a      	lsls	r2, r3, #1
 8107006:	697b      	ldr	r3, [r7, #20]
 8107008:	685b      	ldr	r3, [r3, #4]
 810700a:	085b      	lsrs	r3, r3, #1
 810700c:	441a      	add	r2, r3
 810700e:	697b      	ldr	r3, [r7, #20]
 8107010:	685b      	ldr	r3, [r3, #4]
 8107012:	fbb2 f3f3 	udiv	r3, r2, r3
 8107016:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810701a:	2b0f      	cmp	r3, #15
 810701c:	d916      	bls.n	810704c <UART_SetConfig+0x920>
 810701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107024:	d212      	bcs.n	810704c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107028:	b29b      	uxth	r3, r3
 810702a:	f023 030f 	bic.w	r3, r3, #15
 810702e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107032:	085b      	lsrs	r3, r3, #1
 8107034:	b29b      	uxth	r3, r3
 8107036:	f003 0307 	and.w	r3, r3, #7
 810703a:	b29a      	uxth	r2, r3
 810703c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810703e:	4313      	orrs	r3, r2
 8107040:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8107042:	697b      	ldr	r3, [r7, #20]
 8107044:	681b      	ldr	r3, [r3, #0]
 8107046:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8107048:	60da      	str	r2, [r3, #12]
 810704a:	e0b9      	b.n	81071c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810704c:	2301      	movs	r3, #1
 810704e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107052:	e0b5      	b.n	81071c0 <UART_SetConfig+0xa94>
 8107054:	03d09000 	.word	0x03d09000
 8107058:	003d0900 	.word	0x003d0900
 810705c:	0810c220 	.word	0x0810c220
 8107060:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8107064:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107068:	2b20      	cmp	r3, #32
 810706a:	dc49      	bgt.n	8107100 <UART_SetConfig+0x9d4>
 810706c:	2b00      	cmp	r3, #0
 810706e:	db7c      	blt.n	810716a <UART_SetConfig+0xa3e>
 8107070:	2b20      	cmp	r3, #32
 8107072:	d87a      	bhi.n	810716a <UART_SetConfig+0xa3e>
 8107074:	a201      	add	r2, pc, #4	; (adr r2, 810707c <UART_SetConfig+0x950>)
 8107076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810707a:	bf00      	nop
 810707c:	08107107 	.word	0x08107107
 8107080:	0810710f 	.word	0x0810710f
 8107084:	0810716b 	.word	0x0810716b
 8107088:	0810716b 	.word	0x0810716b
 810708c:	08107117 	.word	0x08107117
 8107090:	0810716b 	.word	0x0810716b
 8107094:	0810716b 	.word	0x0810716b
 8107098:	0810716b 	.word	0x0810716b
 810709c:	08107127 	.word	0x08107127
 81070a0:	0810716b 	.word	0x0810716b
 81070a4:	0810716b 	.word	0x0810716b
 81070a8:	0810716b 	.word	0x0810716b
 81070ac:	0810716b 	.word	0x0810716b
 81070b0:	0810716b 	.word	0x0810716b
 81070b4:	0810716b 	.word	0x0810716b
 81070b8:	0810716b 	.word	0x0810716b
 81070bc:	08107137 	.word	0x08107137
 81070c0:	0810716b 	.word	0x0810716b
 81070c4:	0810716b 	.word	0x0810716b
 81070c8:	0810716b 	.word	0x0810716b
 81070cc:	0810716b 	.word	0x0810716b
 81070d0:	0810716b 	.word	0x0810716b
 81070d4:	0810716b 	.word	0x0810716b
 81070d8:	0810716b 	.word	0x0810716b
 81070dc:	0810716b 	.word	0x0810716b
 81070e0:	0810716b 	.word	0x0810716b
 81070e4:	0810716b 	.word	0x0810716b
 81070e8:	0810716b 	.word	0x0810716b
 81070ec:	0810716b 	.word	0x0810716b
 81070f0:	0810716b 	.word	0x0810716b
 81070f4:	0810716b 	.word	0x0810716b
 81070f8:	0810716b 	.word	0x0810716b
 81070fc:	0810715d 	.word	0x0810715d
 8107100:	2b40      	cmp	r3, #64	; 0x40
 8107102:	d02e      	beq.n	8107162 <UART_SetConfig+0xa36>
 8107104:	e031      	b.n	810716a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107106:	f7fc fce1 	bl	8103acc <HAL_RCC_GetPCLK1Freq>
 810710a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810710c:	e033      	b.n	8107176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810710e:	f7fc fcf3 	bl	8103af8 <HAL_RCC_GetPCLK2Freq>
 8107112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107114:	e02f      	b.n	8107176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810711a:	4618      	mov	r0, r3
 810711c:	f7fd fc5e 	bl	81049dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107124:	e027      	b.n	8107176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107126:	f107 0318 	add.w	r3, r7, #24
 810712a:	4618      	mov	r0, r3
 810712c:	f7fd fdaa 	bl	8104c84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107130:	69fb      	ldr	r3, [r7, #28]
 8107132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107134:	e01f      	b.n	8107176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107136:	4b2d      	ldr	r3, [pc, #180]	; (81071ec <UART_SetConfig+0xac0>)
 8107138:	681b      	ldr	r3, [r3, #0]
 810713a:	f003 0320 	and.w	r3, r3, #32
 810713e:	2b00      	cmp	r3, #0
 8107140:	d009      	beq.n	8107156 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107142:	4b2a      	ldr	r3, [pc, #168]	; (81071ec <UART_SetConfig+0xac0>)
 8107144:	681b      	ldr	r3, [r3, #0]
 8107146:	08db      	lsrs	r3, r3, #3
 8107148:	f003 0303 	and.w	r3, r3, #3
 810714c:	4a28      	ldr	r2, [pc, #160]	; (81071f0 <UART_SetConfig+0xac4>)
 810714e:	fa22 f303 	lsr.w	r3, r2, r3
 8107152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107154:	e00f      	b.n	8107176 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8107156:	4b26      	ldr	r3, [pc, #152]	; (81071f0 <UART_SetConfig+0xac4>)
 8107158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810715a:	e00c      	b.n	8107176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810715c:	4b25      	ldr	r3, [pc, #148]	; (81071f4 <UART_SetConfig+0xac8>)
 810715e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107160:	e009      	b.n	8107176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107168:	e005      	b.n	8107176 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810716a:	2300      	movs	r3, #0
 810716c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810716e:	2301      	movs	r3, #1
 8107170:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107174:	bf00      	nop
    }

    if (pclk != 0U)
 8107176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107178:	2b00      	cmp	r3, #0
 810717a:	d021      	beq.n	81071c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810717c:	697b      	ldr	r3, [r7, #20]
 810717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107180:	4a1d      	ldr	r2, [pc, #116]	; (81071f8 <UART_SetConfig+0xacc>)
 8107182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107186:	461a      	mov	r2, r3
 8107188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810718a:	fbb3 f2f2 	udiv	r2, r3, r2
 810718e:	697b      	ldr	r3, [r7, #20]
 8107190:	685b      	ldr	r3, [r3, #4]
 8107192:	085b      	lsrs	r3, r3, #1
 8107194:	441a      	add	r2, r3
 8107196:	697b      	ldr	r3, [r7, #20]
 8107198:	685b      	ldr	r3, [r3, #4]
 810719a:	fbb2 f3f3 	udiv	r3, r2, r3
 810719e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071a2:	2b0f      	cmp	r3, #15
 81071a4:	d909      	bls.n	81071ba <UART_SetConfig+0xa8e>
 81071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81071ac:	d205      	bcs.n	81071ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071b0:	b29a      	uxth	r2, r3
 81071b2:	697b      	ldr	r3, [r7, #20]
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	60da      	str	r2, [r3, #12]
 81071b8:	e002      	b.n	81071c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81071ba:	2301      	movs	r3, #1
 81071bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81071c0:	697b      	ldr	r3, [r7, #20]
 81071c2:	2201      	movs	r2, #1
 81071c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81071c8:	697b      	ldr	r3, [r7, #20]
 81071ca:	2201      	movs	r2, #1
 81071cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81071d0:	697b      	ldr	r3, [r7, #20]
 81071d2:	2200      	movs	r2, #0
 81071d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81071d6:	697b      	ldr	r3, [r7, #20]
 81071d8:	2200      	movs	r2, #0
 81071da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81071dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81071e0:	4618      	mov	r0, r3
 81071e2:	3748      	adds	r7, #72	; 0x48
 81071e4:	46bd      	mov	sp, r7
 81071e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81071ea:	bf00      	nop
 81071ec:	58024400 	.word	0x58024400
 81071f0:	03d09000 	.word	0x03d09000
 81071f4:	003d0900 	.word	0x003d0900
 81071f8:	0810c220 	.word	0x0810c220

081071fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81071fc:	b480      	push	{r7}
 81071fe:	b083      	sub	sp, #12
 8107200:	af00      	add	r7, sp, #0
 8107202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107204:	687b      	ldr	r3, [r7, #4]
 8107206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107208:	f003 0301 	and.w	r3, r3, #1
 810720c:	2b00      	cmp	r3, #0
 810720e:	d00a      	beq.n	8107226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	681b      	ldr	r3, [r3, #0]
 8107214:	685b      	ldr	r3, [r3, #4]
 8107216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	681b      	ldr	r3, [r3, #0]
 8107222:	430a      	orrs	r2, r1
 8107224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810722a:	f003 0302 	and.w	r3, r3, #2
 810722e:	2b00      	cmp	r3, #0
 8107230:	d00a      	beq.n	8107248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107232:	687b      	ldr	r3, [r7, #4]
 8107234:	681b      	ldr	r3, [r3, #0]
 8107236:	685b      	ldr	r3, [r3, #4]
 8107238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	430a      	orrs	r2, r1
 8107246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107248:	687b      	ldr	r3, [r7, #4]
 810724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810724c:	f003 0304 	and.w	r3, r3, #4
 8107250:	2b00      	cmp	r3, #0
 8107252:	d00a      	beq.n	810726a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107254:	687b      	ldr	r3, [r7, #4]
 8107256:	681b      	ldr	r3, [r3, #0]
 8107258:	685b      	ldr	r3, [r3, #4]
 810725a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810725e:	687b      	ldr	r3, [r7, #4]
 8107260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107262:	687b      	ldr	r3, [r7, #4]
 8107264:	681b      	ldr	r3, [r3, #0]
 8107266:	430a      	orrs	r2, r1
 8107268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810726e:	f003 0308 	and.w	r3, r3, #8
 8107272:	2b00      	cmp	r3, #0
 8107274:	d00a      	beq.n	810728c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	681b      	ldr	r3, [r3, #0]
 810727a:	685b      	ldr	r3, [r3, #4]
 810727c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107280:	687b      	ldr	r3, [r7, #4]
 8107282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	681b      	ldr	r3, [r3, #0]
 8107288:	430a      	orrs	r2, r1
 810728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810728c:	687b      	ldr	r3, [r7, #4]
 810728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107290:	f003 0310 	and.w	r3, r3, #16
 8107294:	2b00      	cmp	r3, #0
 8107296:	d00a      	beq.n	81072ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	689b      	ldr	r3, [r3, #8]
 810729e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81072a6:	687b      	ldr	r3, [r7, #4]
 81072a8:	681b      	ldr	r3, [r3, #0]
 81072aa:	430a      	orrs	r2, r1
 81072ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81072ae:	687b      	ldr	r3, [r7, #4]
 81072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81072b2:	f003 0320 	and.w	r3, r3, #32
 81072b6:	2b00      	cmp	r3, #0
 81072b8:	d00a      	beq.n	81072d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81072ba:	687b      	ldr	r3, [r7, #4]
 81072bc:	681b      	ldr	r3, [r3, #0]
 81072be:	689b      	ldr	r3, [r3, #8]
 81072c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81072c4:	687b      	ldr	r3, [r7, #4]
 81072c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	430a      	orrs	r2, r1
 81072ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81072d8:	2b00      	cmp	r3, #0
 81072da:	d01a      	beq.n	8107312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81072dc:	687b      	ldr	r3, [r7, #4]
 81072de:	681b      	ldr	r3, [r3, #0]
 81072e0:	685b      	ldr	r3, [r3, #4]
 81072e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	430a      	orrs	r2, r1
 81072f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81072fa:	d10a      	bne.n	8107312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	685b      	ldr	r3, [r3, #4]
 8107302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	681b      	ldr	r3, [r3, #0]
 810730e:	430a      	orrs	r2, r1
 8107310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107312:	687b      	ldr	r3, [r7, #4]
 8107314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810731a:	2b00      	cmp	r3, #0
 810731c:	d00a      	beq.n	8107334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	681b      	ldr	r3, [r3, #0]
 8107322:	685b      	ldr	r3, [r3, #4]
 8107324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	430a      	orrs	r2, r1
 8107332:	605a      	str	r2, [r3, #4]
  }
}
 8107334:	bf00      	nop
 8107336:	370c      	adds	r7, #12
 8107338:	46bd      	mov	sp, r7
 810733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810733e:	4770      	bx	lr

08107340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107340:	b580      	push	{r7, lr}
 8107342:	b086      	sub	sp, #24
 8107344:	af02      	add	r7, sp, #8
 8107346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	2200      	movs	r2, #0
 810734c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107350:	f7fa ff80 	bl	8102254 <HAL_GetTick>
 8107354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	f003 0308 	and.w	r3, r3, #8
 8107360:	2b08      	cmp	r3, #8
 8107362:	d10e      	bne.n	8107382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107368:	9300      	str	r3, [sp, #0]
 810736a:	68fb      	ldr	r3, [r7, #12]
 810736c:	2200      	movs	r2, #0
 810736e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107372:	6878      	ldr	r0, [r7, #4]
 8107374:	f000 f82f 	bl	81073d6 <UART_WaitOnFlagUntilTimeout>
 8107378:	4603      	mov	r3, r0
 810737a:	2b00      	cmp	r3, #0
 810737c:	d001      	beq.n	8107382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810737e:	2303      	movs	r3, #3
 8107380:	e025      	b.n	81073ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107382:	687b      	ldr	r3, [r7, #4]
 8107384:	681b      	ldr	r3, [r3, #0]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	f003 0304 	and.w	r3, r3, #4
 810738c:	2b04      	cmp	r3, #4
 810738e:	d10e      	bne.n	81073ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107394:	9300      	str	r3, [sp, #0]
 8107396:	68fb      	ldr	r3, [r7, #12]
 8107398:	2200      	movs	r2, #0
 810739a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810739e:	6878      	ldr	r0, [r7, #4]
 81073a0:	f000 f819 	bl	81073d6 <UART_WaitOnFlagUntilTimeout>
 81073a4:	4603      	mov	r3, r0
 81073a6:	2b00      	cmp	r3, #0
 81073a8:	d001      	beq.n	81073ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81073aa:	2303      	movs	r3, #3
 81073ac:	e00f      	b.n	81073ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81073ae:	687b      	ldr	r3, [r7, #4]
 81073b0:	2220      	movs	r2, #32
 81073b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	2220      	movs	r2, #32
 81073ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81073be:	687b      	ldr	r3, [r7, #4]
 81073c0:	2200      	movs	r2, #0
 81073c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	2200      	movs	r2, #0
 81073c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81073cc:	2300      	movs	r3, #0
}
 81073ce:	4618      	mov	r0, r3
 81073d0:	3710      	adds	r7, #16
 81073d2:	46bd      	mov	sp, r7
 81073d4:	bd80      	pop	{r7, pc}

081073d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81073d6:	b580      	push	{r7, lr}
 81073d8:	b09c      	sub	sp, #112	; 0x70
 81073da:	af00      	add	r7, sp, #0
 81073dc:	60f8      	str	r0, [r7, #12]
 81073de:	60b9      	str	r1, [r7, #8]
 81073e0:	603b      	str	r3, [r7, #0]
 81073e2:	4613      	mov	r3, r2
 81073e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81073e6:	e0a9      	b.n	810753c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81073e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 81073ee:	f000 80a5 	beq.w	810753c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81073f2:	f7fa ff2f 	bl	8102254 <HAL_GetTick>
 81073f6:	4602      	mov	r2, r0
 81073f8:	683b      	ldr	r3, [r7, #0]
 81073fa:	1ad3      	subs	r3, r2, r3
 81073fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81073fe:	429a      	cmp	r2, r3
 8107400:	d302      	bcc.n	8107408 <UART_WaitOnFlagUntilTimeout+0x32>
 8107402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107404:	2b00      	cmp	r3, #0
 8107406:	d140      	bne.n	810748a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810740e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107410:	e853 3f00 	ldrex	r3, [r3]
 8107414:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810741c:	667b      	str	r3, [r7, #100]	; 0x64
 810741e:	68fb      	ldr	r3, [r7, #12]
 8107420:	681b      	ldr	r3, [r3, #0]
 8107422:	461a      	mov	r2, r3
 8107424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107428:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810742a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810742c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810742e:	e841 2300 	strex	r3, r2, [r1]
 8107432:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107436:	2b00      	cmp	r3, #0
 8107438:	d1e6      	bne.n	8107408 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	681b      	ldr	r3, [r3, #0]
 810743e:	3308      	adds	r3, #8
 8107440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107444:	e853 3f00 	ldrex	r3, [r3]
 8107448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810744c:	f023 0301 	bic.w	r3, r3, #1
 8107450:	663b      	str	r3, [r7, #96]	; 0x60
 8107452:	68fb      	ldr	r3, [r7, #12]
 8107454:	681b      	ldr	r3, [r3, #0]
 8107456:	3308      	adds	r3, #8
 8107458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810745a:	64ba      	str	r2, [r7, #72]	; 0x48
 810745c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810745e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107462:	e841 2300 	strex	r3, r2, [r1]
 8107466:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810746a:	2b00      	cmp	r3, #0
 810746c:	d1e5      	bne.n	810743a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	2220      	movs	r2, #32
 8107472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8107476:	68fb      	ldr	r3, [r7, #12]
 8107478:	2220      	movs	r2, #32
 810747a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810747e:	68fb      	ldr	r3, [r7, #12]
 8107480:	2200      	movs	r2, #0
 8107482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8107486:	2303      	movs	r3, #3
 8107488:	e069      	b.n	810755e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810748a:	68fb      	ldr	r3, [r7, #12]
 810748c:	681b      	ldr	r3, [r3, #0]
 810748e:	681b      	ldr	r3, [r3, #0]
 8107490:	f003 0304 	and.w	r3, r3, #4
 8107494:	2b00      	cmp	r3, #0
 8107496:	d051      	beq.n	810753c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107498:	68fb      	ldr	r3, [r7, #12]
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	69db      	ldr	r3, [r3, #28]
 810749e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81074a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81074a6:	d149      	bne.n	810753c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81074a8:	68fb      	ldr	r3, [r7, #12]
 81074aa:	681b      	ldr	r3, [r3, #0]
 81074ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81074b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81074ba:	e853 3f00 	ldrex	r3, [r3]
 81074be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81074c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81074c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 81074c8:	68fb      	ldr	r3, [r7, #12]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	461a      	mov	r2, r3
 81074ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81074d0:	637b      	str	r3, [r7, #52]	; 0x34
 81074d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81074d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81074d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81074d8:	e841 2300 	strex	r3, r2, [r1]
 81074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81074e0:	2b00      	cmp	r3, #0
 81074e2:	d1e6      	bne.n	81074b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81074e4:	68fb      	ldr	r3, [r7, #12]
 81074e6:	681b      	ldr	r3, [r3, #0]
 81074e8:	3308      	adds	r3, #8
 81074ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81074ec:	697b      	ldr	r3, [r7, #20]
 81074ee:	e853 3f00 	ldrex	r3, [r3]
 81074f2:	613b      	str	r3, [r7, #16]
   return(result);
 81074f4:	693b      	ldr	r3, [r7, #16]
 81074f6:	f023 0301 	bic.w	r3, r3, #1
 81074fa:	66bb      	str	r3, [r7, #104]	; 0x68
 81074fc:	68fb      	ldr	r3, [r7, #12]
 81074fe:	681b      	ldr	r3, [r3, #0]
 8107500:	3308      	adds	r3, #8
 8107502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107504:	623a      	str	r2, [r7, #32]
 8107506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107508:	69f9      	ldr	r1, [r7, #28]
 810750a:	6a3a      	ldr	r2, [r7, #32]
 810750c:	e841 2300 	strex	r3, r2, [r1]
 8107510:	61bb      	str	r3, [r7, #24]
   return(result);
 8107512:	69bb      	ldr	r3, [r7, #24]
 8107514:	2b00      	cmp	r3, #0
 8107516:	d1e5      	bne.n	81074e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107518:	68fb      	ldr	r3, [r7, #12]
 810751a:	2220      	movs	r2, #32
 810751c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107520:	68fb      	ldr	r3, [r7, #12]
 8107522:	2220      	movs	r2, #32
 8107524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	2220      	movs	r2, #32
 810752c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107530:	68fb      	ldr	r3, [r7, #12]
 8107532:	2200      	movs	r2, #0
 8107534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107538:	2303      	movs	r3, #3
 810753a:	e010      	b.n	810755e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810753c:	68fb      	ldr	r3, [r7, #12]
 810753e:	681b      	ldr	r3, [r3, #0]
 8107540:	69da      	ldr	r2, [r3, #28]
 8107542:	68bb      	ldr	r3, [r7, #8]
 8107544:	4013      	ands	r3, r2
 8107546:	68ba      	ldr	r2, [r7, #8]
 8107548:	429a      	cmp	r2, r3
 810754a:	bf0c      	ite	eq
 810754c:	2301      	moveq	r3, #1
 810754e:	2300      	movne	r3, #0
 8107550:	b2db      	uxtb	r3, r3
 8107552:	461a      	mov	r2, r3
 8107554:	79fb      	ldrb	r3, [r7, #7]
 8107556:	429a      	cmp	r2, r3
 8107558:	f43f af46 	beq.w	81073e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810755c:	2300      	movs	r3, #0
}
 810755e:	4618      	mov	r0, r3
 8107560:	3770      	adds	r7, #112	; 0x70
 8107562:	46bd      	mov	sp, r7
 8107564:	bd80      	pop	{r7, pc}

08107566 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8107566:	b480      	push	{r7}
 8107568:	b085      	sub	sp, #20
 810756a:	af00      	add	r7, sp, #0
 810756c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107574:	2b01      	cmp	r3, #1
 8107576:	d101      	bne.n	810757c <HAL_UARTEx_DisableFifoMode+0x16>
 8107578:	2302      	movs	r3, #2
 810757a:	e027      	b.n	81075cc <HAL_UARTEx_DisableFifoMode+0x66>
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	2201      	movs	r2, #1
 8107580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	2224      	movs	r2, #36	; 0x24
 8107588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810758c:	687b      	ldr	r3, [r7, #4]
 810758e:	681b      	ldr	r3, [r3, #0]
 8107590:	681b      	ldr	r3, [r3, #0]
 8107592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	681b      	ldr	r3, [r3, #0]
 8107598:	681a      	ldr	r2, [r3, #0]
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	681b      	ldr	r3, [r3, #0]
 810759e:	f022 0201 	bic.w	r2, r2, #1
 81075a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81075a4:	68fb      	ldr	r3, [r7, #12]
 81075a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81075aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	2200      	movs	r2, #0
 81075b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	681b      	ldr	r3, [r3, #0]
 81075b6:	68fa      	ldr	r2, [r7, #12]
 81075b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	2220      	movs	r2, #32
 81075be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	2200      	movs	r2, #0
 81075c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81075ca:	2300      	movs	r3, #0
}
 81075cc:	4618      	mov	r0, r3
 81075ce:	3714      	adds	r7, #20
 81075d0:	46bd      	mov	sp, r7
 81075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075d6:	4770      	bx	lr

081075d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81075d8:	b580      	push	{r7, lr}
 81075da:	b084      	sub	sp, #16
 81075dc:	af00      	add	r7, sp, #0
 81075de:	6078      	str	r0, [r7, #4]
 81075e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81075e8:	2b01      	cmp	r3, #1
 81075ea:	d101      	bne.n	81075f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81075ec:	2302      	movs	r3, #2
 81075ee:	e02d      	b.n	810764c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	2201      	movs	r2, #1
 81075f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	2224      	movs	r2, #36	; 0x24
 81075fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	681b      	ldr	r3, [r3, #0]
 8107604:	681b      	ldr	r3, [r3, #0]
 8107606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	681a      	ldr	r2, [r3, #0]
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	681b      	ldr	r3, [r3, #0]
 8107612:	f022 0201 	bic.w	r2, r2, #1
 8107616:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	689b      	ldr	r3, [r3, #8]
 810761e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8107622:	687b      	ldr	r3, [r7, #4]
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	683a      	ldr	r2, [r7, #0]
 8107628:	430a      	orrs	r2, r1
 810762a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810762c:	6878      	ldr	r0, [r7, #4]
 810762e:	f000 f84f 	bl	81076d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107632:	687b      	ldr	r3, [r7, #4]
 8107634:	681b      	ldr	r3, [r3, #0]
 8107636:	68fa      	ldr	r2, [r7, #12]
 8107638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	2220      	movs	r2, #32
 810763e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107642:	687b      	ldr	r3, [r7, #4]
 8107644:	2200      	movs	r2, #0
 8107646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810764a:	2300      	movs	r3, #0
}
 810764c:	4618      	mov	r0, r3
 810764e:	3710      	adds	r7, #16
 8107650:	46bd      	mov	sp, r7
 8107652:	bd80      	pop	{r7, pc}

08107654 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107654:	b580      	push	{r7, lr}
 8107656:	b084      	sub	sp, #16
 8107658:	af00      	add	r7, sp, #0
 810765a:	6078      	str	r0, [r7, #4]
 810765c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107664:	2b01      	cmp	r3, #1
 8107666:	d101      	bne.n	810766c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107668:	2302      	movs	r3, #2
 810766a:	e02d      	b.n	81076c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810766c:	687b      	ldr	r3, [r7, #4]
 810766e:	2201      	movs	r2, #1
 8107670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107674:	687b      	ldr	r3, [r7, #4]
 8107676:	2224      	movs	r2, #36	; 0x24
 8107678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810767c:	687b      	ldr	r3, [r7, #4]
 810767e:	681b      	ldr	r3, [r3, #0]
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	681b      	ldr	r3, [r3, #0]
 8107688:	681a      	ldr	r2, [r3, #0]
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	681b      	ldr	r3, [r3, #0]
 810768e:	f022 0201 	bic.w	r2, r2, #1
 8107692:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	689b      	ldr	r3, [r3, #8]
 810769a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	681b      	ldr	r3, [r3, #0]
 81076a2:	683a      	ldr	r2, [r7, #0]
 81076a4:	430a      	orrs	r2, r1
 81076a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81076a8:	6878      	ldr	r0, [r7, #4]
 81076aa:	f000 f811 	bl	81076d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	681b      	ldr	r3, [r3, #0]
 81076b2:	68fa      	ldr	r2, [r7, #12]
 81076b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	2220      	movs	r2, #32
 81076ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	2200      	movs	r2, #0
 81076c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81076c6:	2300      	movs	r3, #0
}
 81076c8:	4618      	mov	r0, r3
 81076ca:	3710      	adds	r7, #16
 81076cc:	46bd      	mov	sp, r7
 81076ce:	bd80      	pop	{r7, pc}

081076d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81076d0:	b480      	push	{r7}
 81076d2:	b085      	sub	sp, #20
 81076d4:	af00      	add	r7, sp, #0
 81076d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81076d8:	687b      	ldr	r3, [r7, #4]
 81076da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81076dc:	2b00      	cmp	r3, #0
 81076de:	d108      	bne.n	81076f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	2201      	movs	r2, #1
 81076e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	2201      	movs	r2, #1
 81076ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81076f0:	e031      	b.n	8107756 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81076f2:	2310      	movs	r3, #16
 81076f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81076f6:	2310      	movs	r3, #16
 81076f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81076fa:	687b      	ldr	r3, [r7, #4]
 81076fc:	681b      	ldr	r3, [r3, #0]
 81076fe:	689b      	ldr	r3, [r3, #8]
 8107700:	0e5b      	lsrs	r3, r3, #25
 8107702:	b2db      	uxtb	r3, r3
 8107704:	f003 0307 	and.w	r3, r3, #7
 8107708:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810770a:	687b      	ldr	r3, [r7, #4]
 810770c:	681b      	ldr	r3, [r3, #0]
 810770e:	689b      	ldr	r3, [r3, #8]
 8107710:	0f5b      	lsrs	r3, r3, #29
 8107712:	b2db      	uxtb	r3, r3
 8107714:	f003 0307 	and.w	r3, r3, #7
 8107718:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810771a:	7bbb      	ldrb	r3, [r7, #14]
 810771c:	7b3a      	ldrb	r2, [r7, #12]
 810771e:	4911      	ldr	r1, [pc, #68]	; (8107764 <UARTEx_SetNbDataToProcess+0x94>)
 8107720:	5c8a      	ldrb	r2, [r1, r2]
 8107722:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8107726:	7b3a      	ldrb	r2, [r7, #12]
 8107728:	490f      	ldr	r1, [pc, #60]	; (8107768 <UARTEx_SetNbDataToProcess+0x98>)
 810772a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810772c:	fb93 f3f2 	sdiv	r3, r3, r2
 8107730:	b29a      	uxth	r2, r3
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107738:	7bfb      	ldrb	r3, [r7, #15]
 810773a:	7b7a      	ldrb	r2, [r7, #13]
 810773c:	4909      	ldr	r1, [pc, #36]	; (8107764 <UARTEx_SetNbDataToProcess+0x94>)
 810773e:	5c8a      	ldrb	r2, [r1, r2]
 8107740:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8107744:	7b7a      	ldrb	r2, [r7, #13]
 8107746:	4908      	ldr	r1, [pc, #32]	; (8107768 <UARTEx_SetNbDataToProcess+0x98>)
 8107748:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810774a:	fb93 f3f2 	sdiv	r3, r3, r2
 810774e:	b29a      	uxth	r2, r3
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8107756:	bf00      	nop
 8107758:	3714      	adds	r7, #20
 810775a:	46bd      	mov	sp, r7
 810775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107760:	4770      	bx	lr
 8107762:	bf00      	nop
 8107764:	0810c238 	.word	0x0810c238
 8107768:	0810c240 	.word	0x0810c240

0810776c <__errno>:
 810776c:	4b01      	ldr	r3, [pc, #4]	; (8107774 <__errno+0x8>)
 810776e:	6818      	ldr	r0, [r3, #0]
 8107770:	4770      	bx	lr
 8107772:	bf00      	nop
 8107774:	10000010 	.word	0x10000010

08107778 <__libc_init_array>:
 8107778:	b570      	push	{r4, r5, r6, lr}
 810777a:	4d0d      	ldr	r5, [pc, #52]	; (81077b0 <__libc_init_array+0x38>)
 810777c:	4c0d      	ldr	r4, [pc, #52]	; (81077b4 <__libc_init_array+0x3c>)
 810777e:	1b64      	subs	r4, r4, r5
 8107780:	10a4      	asrs	r4, r4, #2
 8107782:	2600      	movs	r6, #0
 8107784:	42a6      	cmp	r6, r4
 8107786:	d109      	bne.n	810779c <__libc_init_array+0x24>
 8107788:	4d0b      	ldr	r5, [pc, #44]	; (81077b8 <__libc_init_array+0x40>)
 810778a:	4c0c      	ldr	r4, [pc, #48]	; (81077bc <__libc_init_array+0x44>)
 810778c:	f004 fd06 	bl	810c19c <_init>
 8107790:	1b64      	subs	r4, r4, r5
 8107792:	10a4      	asrs	r4, r4, #2
 8107794:	2600      	movs	r6, #0
 8107796:	42a6      	cmp	r6, r4
 8107798:	d105      	bne.n	81077a6 <__libc_init_array+0x2e>
 810779a:	bd70      	pop	{r4, r5, r6, pc}
 810779c:	f855 3b04 	ldr.w	r3, [r5], #4
 81077a0:	4798      	blx	r3
 81077a2:	3601      	adds	r6, #1
 81077a4:	e7ee      	b.n	8107784 <__libc_init_array+0xc>
 81077a6:	f855 3b04 	ldr.w	r3, [r5], #4
 81077aa:	4798      	blx	r3
 81077ac:	3601      	adds	r6, #1
 81077ae:	e7f2      	b.n	8107796 <__libc_init_array+0x1e>
 81077b0:	0810c6fc 	.word	0x0810c6fc
 81077b4:	0810c6fc 	.word	0x0810c6fc
 81077b8:	0810c6fc 	.word	0x0810c6fc
 81077bc:	0810c700 	.word	0x0810c700

081077c0 <memset>:
 81077c0:	4402      	add	r2, r0
 81077c2:	4603      	mov	r3, r0
 81077c4:	4293      	cmp	r3, r2
 81077c6:	d100      	bne.n	81077ca <memset+0xa>
 81077c8:	4770      	bx	lr
 81077ca:	f803 1b01 	strb.w	r1, [r3], #1
 81077ce:	e7f9      	b.n	81077c4 <memset+0x4>

081077d0 <__cvt>:
 81077d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81077d4:	ec55 4b10 	vmov	r4, r5, d0
 81077d8:	2d00      	cmp	r5, #0
 81077da:	460e      	mov	r6, r1
 81077dc:	4619      	mov	r1, r3
 81077de:	462b      	mov	r3, r5
 81077e0:	bfbb      	ittet	lt
 81077e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81077e6:	461d      	movlt	r5, r3
 81077e8:	2300      	movge	r3, #0
 81077ea:	232d      	movlt	r3, #45	; 0x2d
 81077ec:	700b      	strb	r3, [r1, #0]
 81077ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81077f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81077f4:	4691      	mov	r9, r2
 81077f6:	f023 0820 	bic.w	r8, r3, #32
 81077fa:	bfbc      	itt	lt
 81077fc:	4622      	movlt	r2, r4
 81077fe:	4614      	movlt	r4, r2
 8107800:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107804:	d005      	beq.n	8107812 <__cvt+0x42>
 8107806:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810780a:	d100      	bne.n	810780e <__cvt+0x3e>
 810780c:	3601      	adds	r6, #1
 810780e:	2102      	movs	r1, #2
 8107810:	e000      	b.n	8107814 <__cvt+0x44>
 8107812:	2103      	movs	r1, #3
 8107814:	ab03      	add	r3, sp, #12
 8107816:	9301      	str	r3, [sp, #4]
 8107818:	ab02      	add	r3, sp, #8
 810781a:	9300      	str	r3, [sp, #0]
 810781c:	ec45 4b10 	vmov	d0, r4, r5
 8107820:	4653      	mov	r3, sl
 8107822:	4632      	mov	r2, r6
 8107824:	f001 fee4 	bl	81095f0 <_dtoa_r>
 8107828:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810782c:	4607      	mov	r7, r0
 810782e:	d102      	bne.n	8107836 <__cvt+0x66>
 8107830:	f019 0f01 	tst.w	r9, #1
 8107834:	d022      	beq.n	810787c <__cvt+0xac>
 8107836:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810783a:	eb07 0906 	add.w	r9, r7, r6
 810783e:	d110      	bne.n	8107862 <__cvt+0x92>
 8107840:	783b      	ldrb	r3, [r7, #0]
 8107842:	2b30      	cmp	r3, #48	; 0x30
 8107844:	d10a      	bne.n	810785c <__cvt+0x8c>
 8107846:	2200      	movs	r2, #0
 8107848:	2300      	movs	r3, #0
 810784a:	4620      	mov	r0, r4
 810784c:	4629      	mov	r1, r5
 810784e:	f7f9 f9c3 	bl	8100bd8 <__aeabi_dcmpeq>
 8107852:	b918      	cbnz	r0, 810785c <__cvt+0x8c>
 8107854:	f1c6 0601 	rsb	r6, r6, #1
 8107858:	f8ca 6000 	str.w	r6, [sl]
 810785c:	f8da 3000 	ldr.w	r3, [sl]
 8107860:	4499      	add	r9, r3
 8107862:	2200      	movs	r2, #0
 8107864:	2300      	movs	r3, #0
 8107866:	4620      	mov	r0, r4
 8107868:	4629      	mov	r1, r5
 810786a:	f7f9 f9b5 	bl	8100bd8 <__aeabi_dcmpeq>
 810786e:	b108      	cbz	r0, 8107874 <__cvt+0xa4>
 8107870:	f8cd 900c 	str.w	r9, [sp, #12]
 8107874:	2230      	movs	r2, #48	; 0x30
 8107876:	9b03      	ldr	r3, [sp, #12]
 8107878:	454b      	cmp	r3, r9
 810787a:	d307      	bcc.n	810788c <__cvt+0xbc>
 810787c:	9b03      	ldr	r3, [sp, #12]
 810787e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107880:	1bdb      	subs	r3, r3, r7
 8107882:	4638      	mov	r0, r7
 8107884:	6013      	str	r3, [r2, #0]
 8107886:	b004      	add	sp, #16
 8107888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810788c:	1c59      	adds	r1, r3, #1
 810788e:	9103      	str	r1, [sp, #12]
 8107890:	701a      	strb	r2, [r3, #0]
 8107892:	e7f0      	b.n	8107876 <__cvt+0xa6>

08107894 <__exponent>:
 8107894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107896:	4603      	mov	r3, r0
 8107898:	2900      	cmp	r1, #0
 810789a:	bfb8      	it	lt
 810789c:	4249      	neglt	r1, r1
 810789e:	f803 2b02 	strb.w	r2, [r3], #2
 81078a2:	bfb4      	ite	lt
 81078a4:	222d      	movlt	r2, #45	; 0x2d
 81078a6:	222b      	movge	r2, #43	; 0x2b
 81078a8:	2909      	cmp	r1, #9
 81078aa:	7042      	strb	r2, [r0, #1]
 81078ac:	dd2a      	ble.n	8107904 <__exponent+0x70>
 81078ae:	f10d 0407 	add.w	r4, sp, #7
 81078b2:	46a4      	mov	ip, r4
 81078b4:	270a      	movs	r7, #10
 81078b6:	46a6      	mov	lr, r4
 81078b8:	460a      	mov	r2, r1
 81078ba:	fb91 f6f7 	sdiv	r6, r1, r7
 81078be:	fb07 1516 	mls	r5, r7, r6, r1
 81078c2:	3530      	adds	r5, #48	; 0x30
 81078c4:	2a63      	cmp	r2, #99	; 0x63
 81078c6:	f104 34ff 	add.w	r4, r4, #4294967295
 81078ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 81078ce:	4631      	mov	r1, r6
 81078d0:	dcf1      	bgt.n	81078b6 <__exponent+0x22>
 81078d2:	3130      	adds	r1, #48	; 0x30
 81078d4:	f1ae 0502 	sub.w	r5, lr, #2
 81078d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 81078dc:	1c44      	adds	r4, r0, #1
 81078de:	4629      	mov	r1, r5
 81078e0:	4561      	cmp	r1, ip
 81078e2:	d30a      	bcc.n	81078fa <__exponent+0x66>
 81078e4:	f10d 0209 	add.w	r2, sp, #9
 81078e8:	eba2 020e 	sub.w	r2, r2, lr
 81078ec:	4565      	cmp	r5, ip
 81078ee:	bf88      	it	hi
 81078f0:	2200      	movhi	r2, #0
 81078f2:	4413      	add	r3, r2
 81078f4:	1a18      	subs	r0, r3, r0
 81078f6:	b003      	add	sp, #12
 81078f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81078fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 81078fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107902:	e7ed      	b.n	81078e0 <__exponent+0x4c>
 8107904:	2330      	movs	r3, #48	; 0x30
 8107906:	3130      	adds	r1, #48	; 0x30
 8107908:	7083      	strb	r3, [r0, #2]
 810790a:	70c1      	strb	r1, [r0, #3]
 810790c:	1d03      	adds	r3, r0, #4
 810790e:	e7f1      	b.n	81078f4 <__exponent+0x60>

08107910 <_printf_float>:
 8107910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107914:	ed2d 8b02 	vpush	{d8}
 8107918:	b08d      	sub	sp, #52	; 0x34
 810791a:	460c      	mov	r4, r1
 810791c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107920:	4616      	mov	r6, r2
 8107922:	461f      	mov	r7, r3
 8107924:	4605      	mov	r5, r0
 8107926:	f003 f977 	bl	810ac18 <_localeconv_r>
 810792a:	f8d0 a000 	ldr.w	sl, [r0]
 810792e:	4650      	mov	r0, sl
 8107930:	f7f8 fcd6 	bl	81002e0 <strlen>
 8107934:	2300      	movs	r3, #0
 8107936:	930a      	str	r3, [sp, #40]	; 0x28
 8107938:	6823      	ldr	r3, [r4, #0]
 810793a:	9305      	str	r3, [sp, #20]
 810793c:	f8d8 3000 	ldr.w	r3, [r8]
 8107940:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107944:	3307      	adds	r3, #7
 8107946:	f023 0307 	bic.w	r3, r3, #7
 810794a:	f103 0208 	add.w	r2, r3, #8
 810794e:	f8c8 2000 	str.w	r2, [r8]
 8107952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107956:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810795a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810795e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107962:	9307      	str	r3, [sp, #28]
 8107964:	f8cd 8018 	str.w	r8, [sp, #24]
 8107968:	ee08 0a10 	vmov	s16, r0
 810796c:	4b9f      	ldr	r3, [pc, #636]	; (8107bec <_printf_float+0x2dc>)
 810796e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107972:	f04f 32ff 	mov.w	r2, #4294967295
 8107976:	f7f9 f961 	bl	8100c3c <__aeabi_dcmpun>
 810797a:	bb88      	cbnz	r0, 81079e0 <_printf_float+0xd0>
 810797c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107980:	4b9a      	ldr	r3, [pc, #616]	; (8107bec <_printf_float+0x2dc>)
 8107982:	f04f 32ff 	mov.w	r2, #4294967295
 8107986:	f7f9 f93b 	bl	8100c00 <__aeabi_dcmple>
 810798a:	bb48      	cbnz	r0, 81079e0 <_printf_float+0xd0>
 810798c:	2200      	movs	r2, #0
 810798e:	2300      	movs	r3, #0
 8107990:	4640      	mov	r0, r8
 8107992:	4649      	mov	r1, r9
 8107994:	f7f9 f92a 	bl	8100bec <__aeabi_dcmplt>
 8107998:	b110      	cbz	r0, 81079a0 <_printf_float+0x90>
 810799a:	232d      	movs	r3, #45	; 0x2d
 810799c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81079a0:	4b93      	ldr	r3, [pc, #588]	; (8107bf0 <_printf_float+0x2e0>)
 81079a2:	4894      	ldr	r0, [pc, #592]	; (8107bf4 <_printf_float+0x2e4>)
 81079a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81079a8:	bf94      	ite	ls
 81079aa:	4698      	movls	r8, r3
 81079ac:	4680      	movhi	r8, r0
 81079ae:	2303      	movs	r3, #3
 81079b0:	6123      	str	r3, [r4, #16]
 81079b2:	9b05      	ldr	r3, [sp, #20]
 81079b4:	f023 0204 	bic.w	r2, r3, #4
 81079b8:	6022      	str	r2, [r4, #0]
 81079ba:	f04f 0900 	mov.w	r9, #0
 81079be:	9700      	str	r7, [sp, #0]
 81079c0:	4633      	mov	r3, r6
 81079c2:	aa0b      	add	r2, sp, #44	; 0x2c
 81079c4:	4621      	mov	r1, r4
 81079c6:	4628      	mov	r0, r5
 81079c8:	f000 f9d8 	bl	8107d7c <_printf_common>
 81079cc:	3001      	adds	r0, #1
 81079ce:	f040 8090 	bne.w	8107af2 <_printf_float+0x1e2>
 81079d2:	f04f 30ff 	mov.w	r0, #4294967295
 81079d6:	b00d      	add	sp, #52	; 0x34
 81079d8:	ecbd 8b02 	vpop	{d8}
 81079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81079e0:	4642      	mov	r2, r8
 81079e2:	464b      	mov	r3, r9
 81079e4:	4640      	mov	r0, r8
 81079e6:	4649      	mov	r1, r9
 81079e8:	f7f9 f928 	bl	8100c3c <__aeabi_dcmpun>
 81079ec:	b140      	cbz	r0, 8107a00 <_printf_float+0xf0>
 81079ee:	464b      	mov	r3, r9
 81079f0:	2b00      	cmp	r3, #0
 81079f2:	bfbc      	itt	lt
 81079f4:	232d      	movlt	r3, #45	; 0x2d
 81079f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81079fa:	487f      	ldr	r0, [pc, #508]	; (8107bf8 <_printf_float+0x2e8>)
 81079fc:	4b7f      	ldr	r3, [pc, #508]	; (8107bfc <_printf_float+0x2ec>)
 81079fe:	e7d1      	b.n	81079a4 <_printf_float+0x94>
 8107a00:	6863      	ldr	r3, [r4, #4]
 8107a02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107a06:	9206      	str	r2, [sp, #24]
 8107a08:	1c5a      	adds	r2, r3, #1
 8107a0a:	d13f      	bne.n	8107a8c <_printf_float+0x17c>
 8107a0c:	2306      	movs	r3, #6
 8107a0e:	6063      	str	r3, [r4, #4]
 8107a10:	9b05      	ldr	r3, [sp, #20]
 8107a12:	6861      	ldr	r1, [r4, #4]
 8107a14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107a18:	2300      	movs	r3, #0
 8107a1a:	9303      	str	r3, [sp, #12]
 8107a1c:	ab0a      	add	r3, sp, #40	; 0x28
 8107a1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107a22:	ab09      	add	r3, sp, #36	; 0x24
 8107a24:	ec49 8b10 	vmov	d0, r8, r9
 8107a28:	9300      	str	r3, [sp, #0]
 8107a2a:	6022      	str	r2, [r4, #0]
 8107a2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107a30:	4628      	mov	r0, r5
 8107a32:	f7ff fecd 	bl	81077d0 <__cvt>
 8107a36:	9b06      	ldr	r3, [sp, #24]
 8107a38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107a3a:	2b47      	cmp	r3, #71	; 0x47
 8107a3c:	4680      	mov	r8, r0
 8107a3e:	d108      	bne.n	8107a52 <_printf_float+0x142>
 8107a40:	1cc8      	adds	r0, r1, #3
 8107a42:	db02      	blt.n	8107a4a <_printf_float+0x13a>
 8107a44:	6863      	ldr	r3, [r4, #4]
 8107a46:	4299      	cmp	r1, r3
 8107a48:	dd41      	ble.n	8107ace <_printf_float+0x1be>
 8107a4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8107a4e:	fa5f fb8b 	uxtb.w	fp, fp
 8107a52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107a56:	d820      	bhi.n	8107a9a <_printf_float+0x18a>
 8107a58:	3901      	subs	r1, #1
 8107a5a:	465a      	mov	r2, fp
 8107a5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107a60:	9109      	str	r1, [sp, #36]	; 0x24
 8107a62:	f7ff ff17 	bl	8107894 <__exponent>
 8107a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107a68:	1813      	adds	r3, r2, r0
 8107a6a:	2a01      	cmp	r2, #1
 8107a6c:	4681      	mov	r9, r0
 8107a6e:	6123      	str	r3, [r4, #16]
 8107a70:	dc02      	bgt.n	8107a78 <_printf_float+0x168>
 8107a72:	6822      	ldr	r2, [r4, #0]
 8107a74:	07d2      	lsls	r2, r2, #31
 8107a76:	d501      	bpl.n	8107a7c <_printf_float+0x16c>
 8107a78:	3301      	adds	r3, #1
 8107a7a:	6123      	str	r3, [r4, #16]
 8107a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107a80:	2b00      	cmp	r3, #0
 8107a82:	d09c      	beq.n	81079be <_printf_float+0xae>
 8107a84:	232d      	movs	r3, #45	; 0x2d
 8107a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107a8a:	e798      	b.n	81079be <_printf_float+0xae>
 8107a8c:	9a06      	ldr	r2, [sp, #24]
 8107a8e:	2a47      	cmp	r2, #71	; 0x47
 8107a90:	d1be      	bne.n	8107a10 <_printf_float+0x100>
 8107a92:	2b00      	cmp	r3, #0
 8107a94:	d1bc      	bne.n	8107a10 <_printf_float+0x100>
 8107a96:	2301      	movs	r3, #1
 8107a98:	e7b9      	b.n	8107a0e <_printf_float+0xfe>
 8107a9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107a9e:	d118      	bne.n	8107ad2 <_printf_float+0x1c2>
 8107aa0:	2900      	cmp	r1, #0
 8107aa2:	6863      	ldr	r3, [r4, #4]
 8107aa4:	dd0b      	ble.n	8107abe <_printf_float+0x1ae>
 8107aa6:	6121      	str	r1, [r4, #16]
 8107aa8:	b913      	cbnz	r3, 8107ab0 <_printf_float+0x1a0>
 8107aaa:	6822      	ldr	r2, [r4, #0]
 8107aac:	07d0      	lsls	r0, r2, #31
 8107aae:	d502      	bpl.n	8107ab6 <_printf_float+0x1a6>
 8107ab0:	3301      	adds	r3, #1
 8107ab2:	440b      	add	r3, r1
 8107ab4:	6123      	str	r3, [r4, #16]
 8107ab6:	65a1      	str	r1, [r4, #88]	; 0x58
 8107ab8:	f04f 0900 	mov.w	r9, #0
 8107abc:	e7de      	b.n	8107a7c <_printf_float+0x16c>
 8107abe:	b913      	cbnz	r3, 8107ac6 <_printf_float+0x1b6>
 8107ac0:	6822      	ldr	r2, [r4, #0]
 8107ac2:	07d2      	lsls	r2, r2, #31
 8107ac4:	d501      	bpl.n	8107aca <_printf_float+0x1ba>
 8107ac6:	3302      	adds	r3, #2
 8107ac8:	e7f4      	b.n	8107ab4 <_printf_float+0x1a4>
 8107aca:	2301      	movs	r3, #1
 8107acc:	e7f2      	b.n	8107ab4 <_printf_float+0x1a4>
 8107ace:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107ad4:	4299      	cmp	r1, r3
 8107ad6:	db05      	blt.n	8107ae4 <_printf_float+0x1d4>
 8107ad8:	6823      	ldr	r3, [r4, #0]
 8107ada:	6121      	str	r1, [r4, #16]
 8107adc:	07d8      	lsls	r0, r3, #31
 8107ade:	d5ea      	bpl.n	8107ab6 <_printf_float+0x1a6>
 8107ae0:	1c4b      	adds	r3, r1, #1
 8107ae2:	e7e7      	b.n	8107ab4 <_printf_float+0x1a4>
 8107ae4:	2900      	cmp	r1, #0
 8107ae6:	bfd4      	ite	le
 8107ae8:	f1c1 0202 	rsble	r2, r1, #2
 8107aec:	2201      	movgt	r2, #1
 8107aee:	4413      	add	r3, r2
 8107af0:	e7e0      	b.n	8107ab4 <_printf_float+0x1a4>
 8107af2:	6823      	ldr	r3, [r4, #0]
 8107af4:	055a      	lsls	r2, r3, #21
 8107af6:	d407      	bmi.n	8107b08 <_printf_float+0x1f8>
 8107af8:	6923      	ldr	r3, [r4, #16]
 8107afa:	4642      	mov	r2, r8
 8107afc:	4631      	mov	r1, r6
 8107afe:	4628      	mov	r0, r5
 8107b00:	47b8      	blx	r7
 8107b02:	3001      	adds	r0, #1
 8107b04:	d12c      	bne.n	8107b60 <_printf_float+0x250>
 8107b06:	e764      	b.n	81079d2 <_printf_float+0xc2>
 8107b08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107b0c:	f240 80e0 	bls.w	8107cd0 <_printf_float+0x3c0>
 8107b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107b14:	2200      	movs	r2, #0
 8107b16:	2300      	movs	r3, #0
 8107b18:	f7f9 f85e 	bl	8100bd8 <__aeabi_dcmpeq>
 8107b1c:	2800      	cmp	r0, #0
 8107b1e:	d034      	beq.n	8107b8a <_printf_float+0x27a>
 8107b20:	4a37      	ldr	r2, [pc, #220]	; (8107c00 <_printf_float+0x2f0>)
 8107b22:	2301      	movs	r3, #1
 8107b24:	4631      	mov	r1, r6
 8107b26:	4628      	mov	r0, r5
 8107b28:	47b8      	blx	r7
 8107b2a:	3001      	adds	r0, #1
 8107b2c:	f43f af51 	beq.w	81079d2 <_printf_float+0xc2>
 8107b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107b34:	429a      	cmp	r2, r3
 8107b36:	db02      	blt.n	8107b3e <_printf_float+0x22e>
 8107b38:	6823      	ldr	r3, [r4, #0]
 8107b3a:	07d8      	lsls	r0, r3, #31
 8107b3c:	d510      	bpl.n	8107b60 <_printf_float+0x250>
 8107b3e:	ee18 3a10 	vmov	r3, s16
 8107b42:	4652      	mov	r2, sl
 8107b44:	4631      	mov	r1, r6
 8107b46:	4628      	mov	r0, r5
 8107b48:	47b8      	blx	r7
 8107b4a:	3001      	adds	r0, #1
 8107b4c:	f43f af41 	beq.w	81079d2 <_printf_float+0xc2>
 8107b50:	f04f 0800 	mov.w	r8, #0
 8107b54:	f104 091a 	add.w	r9, r4, #26
 8107b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107b5a:	3b01      	subs	r3, #1
 8107b5c:	4543      	cmp	r3, r8
 8107b5e:	dc09      	bgt.n	8107b74 <_printf_float+0x264>
 8107b60:	6823      	ldr	r3, [r4, #0]
 8107b62:	079b      	lsls	r3, r3, #30
 8107b64:	f100 8105 	bmi.w	8107d72 <_printf_float+0x462>
 8107b68:	68e0      	ldr	r0, [r4, #12]
 8107b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107b6c:	4298      	cmp	r0, r3
 8107b6e:	bfb8      	it	lt
 8107b70:	4618      	movlt	r0, r3
 8107b72:	e730      	b.n	81079d6 <_printf_float+0xc6>
 8107b74:	2301      	movs	r3, #1
 8107b76:	464a      	mov	r2, r9
 8107b78:	4631      	mov	r1, r6
 8107b7a:	4628      	mov	r0, r5
 8107b7c:	47b8      	blx	r7
 8107b7e:	3001      	adds	r0, #1
 8107b80:	f43f af27 	beq.w	81079d2 <_printf_float+0xc2>
 8107b84:	f108 0801 	add.w	r8, r8, #1
 8107b88:	e7e6      	b.n	8107b58 <_printf_float+0x248>
 8107b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107b8c:	2b00      	cmp	r3, #0
 8107b8e:	dc39      	bgt.n	8107c04 <_printf_float+0x2f4>
 8107b90:	4a1b      	ldr	r2, [pc, #108]	; (8107c00 <_printf_float+0x2f0>)
 8107b92:	2301      	movs	r3, #1
 8107b94:	4631      	mov	r1, r6
 8107b96:	4628      	mov	r0, r5
 8107b98:	47b8      	blx	r7
 8107b9a:	3001      	adds	r0, #1
 8107b9c:	f43f af19 	beq.w	81079d2 <_printf_float+0xc2>
 8107ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107ba4:	4313      	orrs	r3, r2
 8107ba6:	d102      	bne.n	8107bae <_printf_float+0x29e>
 8107ba8:	6823      	ldr	r3, [r4, #0]
 8107baa:	07d9      	lsls	r1, r3, #31
 8107bac:	d5d8      	bpl.n	8107b60 <_printf_float+0x250>
 8107bae:	ee18 3a10 	vmov	r3, s16
 8107bb2:	4652      	mov	r2, sl
 8107bb4:	4631      	mov	r1, r6
 8107bb6:	4628      	mov	r0, r5
 8107bb8:	47b8      	blx	r7
 8107bba:	3001      	adds	r0, #1
 8107bbc:	f43f af09 	beq.w	81079d2 <_printf_float+0xc2>
 8107bc0:	f04f 0900 	mov.w	r9, #0
 8107bc4:	f104 0a1a 	add.w	sl, r4, #26
 8107bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107bca:	425b      	negs	r3, r3
 8107bcc:	454b      	cmp	r3, r9
 8107bce:	dc01      	bgt.n	8107bd4 <_printf_float+0x2c4>
 8107bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107bd2:	e792      	b.n	8107afa <_printf_float+0x1ea>
 8107bd4:	2301      	movs	r3, #1
 8107bd6:	4652      	mov	r2, sl
 8107bd8:	4631      	mov	r1, r6
 8107bda:	4628      	mov	r0, r5
 8107bdc:	47b8      	blx	r7
 8107bde:	3001      	adds	r0, #1
 8107be0:	f43f aef7 	beq.w	81079d2 <_printf_float+0xc2>
 8107be4:	f109 0901 	add.w	r9, r9, #1
 8107be8:	e7ee      	b.n	8107bc8 <_printf_float+0x2b8>
 8107bea:	bf00      	nop
 8107bec:	7fefffff 	.word	0x7fefffff
 8107bf0:	0810c24c 	.word	0x0810c24c
 8107bf4:	0810c250 	.word	0x0810c250
 8107bf8:	0810c258 	.word	0x0810c258
 8107bfc:	0810c254 	.word	0x0810c254
 8107c00:	0810c25c 	.word	0x0810c25c
 8107c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107c08:	429a      	cmp	r2, r3
 8107c0a:	bfa8      	it	ge
 8107c0c:	461a      	movge	r2, r3
 8107c0e:	2a00      	cmp	r2, #0
 8107c10:	4691      	mov	r9, r2
 8107c12:	dc37      	bgt.n	8107c84 <_printf_float+0x374>
 8107c14:	f04f 0b00 	mov.w	fp, #0
 8107c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107c1c:	f104 021a 	add.w	r2, r4, #26
 8107c20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107c22:	9305      	str	r3, [sp, #20]
 8107c24:	eba3 0309 	sub.w	r3, r3, r9
 8107c28:	455b      	cmp	r3, fp
 8107c2a:	dc33      	bgt.n	8107c94 <_printf_float+0x384>
 8107c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107c30:	429a      	cmp	r2, r3
 8107c32:	db3b      	blt.n	8107cac <_printf_float+0x39c>
 8107c34:	6823      	ldr	r3, [r4, #0]
 8107c36:	07da      	lsls	r2, r3, #31
 8107c38:	d438      	bmi.n	8107cac <_printf_float+0x39c>
 8107c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c3c:	9a05      	ldr	r2, [sp, #20]
 8107c3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107c40:	1a9a      	subs	r2, r3, r2
 8107c42:	eba3 0901 	sub.w	r9, r3, r1
 8107c46:	4591      	cmp	r9, r2
 8107c48:	bfa8      	it	ge
 8107c4a:	4691      	movge	r9, r2
 8107c4c:	f1b9 0f00 	cmp.w	r9, #0
 8107c50:	dc35      	bgt.n	8107cbe <_printf_float+0x3ae>
 8107c52:	f04f 0800 	mov.w	r8, #0
 8107c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107c5a:	f104 0a1a 	add.w	sl, r4, #26
 8107c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107c62:	1a9b      	subs	r3, r3, r2
 8107c64:	eba3 0309 	sub.w	r3, r3, r9
 8107c68:	4543      	cmp	r3, r8
 8107c6a:	f77f af79 	ble.w	8107b60 <_printf_float+0x250>
 8107c6e:	2301      	movs	r3, #1
 8107c70:	4652      	mov	r2, sl
 8107c72:	4631      	mov	r1, r6
 8107c74:	4628      	mov	r0, r5
 8107c76:	47b8      	blx	r7
 8107c78:	3001      	adds	r0, #1
 8107c7a:	f43f aeaa 	beq.w	81079d2 <_printf_float+0xc2>
 8107c7e:	f108 0801 	add.w	r8, r8, #1
 8107c82:	e7ec      	b.n	8107c5e <_printf_float+0x34e>
 8107c84:	4613      	mov	r3, r2
 8107c86:	4631      	mov	r1, r6
 8107c88:	4642      	mov	r2, r8
 8107c8a:	4628      	mov	r0, r5
 8107c8c:	47b8      	blx	r7
 8107c8e:	3001      	adds	r0, #1
 8107c90:	d1c0      	bne.n	8107c14 <_printf_float+0x304>
 8107c92:	e69e      	b.n	81079d2 <_printf_float+0xc2>
 8107c94:	2301      	movs	r3, #1
 8107c96:	4631      	mov	r1, r6
 8107c98:	4628      	mov	r0, r5
 8107c9a:	9205      	str	r2, [sp, #20]
 8107c9c:	47b8      	blx	r7
 8107c9e:	3001      	adds	r0, #1
 8107ca0:	f43f ae97 	beq.w	81079d2 <_printf_float+0xc2>
 8107ca4:	9a05      	ldr	r2, [sp, #20]
 8107ca6:	f10b 0b01 	add.w	fp, fp, #1
 8107caa:	e7b9      	b.n	8107c20 <_printf_float+0x310>
 8107cac:	ee18 3a10 	vmov	r3, s16
 8107cb0:	4652      	mov	r2, sl
 8107cb2:	4631      	mov	r1, r6
 8107cb4:	4628      	mov	r0, r5
 8107cb6:	47b8      	blx	r7
 8107cb8:	3001      	adds	r0, #1
 8107cba:	d1be      	bne.n	8107c3a <_printf_float+0x32a>
 8107cbc:	e689      	b.n	81079d2 <_printf_float+0xc2>
 8107cbe:	9a05      	ldr	r2, [sp, #20]
 8107cc0:	464b      	mov	r3, r9
 8107cc2:	4442      	add	r2, r8
 8107cc4:	4631      	mov	r1, r6
 8107cc6:	4628      	mov	r0, r5
 8107cc8:	47b8      	blx	r7
 8107cca:	3001      	adds	r0, #1
 8107ccc:	d1c1      	bne.n	8107c52 <_printf_float+0x342>
 8107cce:	e680      	b.n	81079d2 <_printf_float+0xc2>
 8107cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107cd2:	2a01      	cmp	r2, #1
 8107cd4:	dc01      	bgt.n	8107cda <_printf_float+0x3ca>
 8107cd6:	07db      	lsls	r3, r3, #31
 8107cd8:	d538      	bpl.n	8107d4c <_printf_float+0x43c>
 8107cda:	2301      	movs	r3, #1
 8107cdc:	4642      	mov	r2, r8
 8107cde:	4631      	mov	r1, r6
 8107ce0:	4628      	mov	r0, r5
 8107ce2:	47b8      	blx	r7
 8107ce4:	3001      	adds	r0, #1
 8107ce6:	f43f ae74 	beq.w	81079d2 <_printf_float+0xc2>
 8107cea:	ee18 3a10 	vmov	r3, s16
 8107cee:	4652      	mov	r2, sl
 8107cf0:	4631      	mov	r1, r6
 8107cf2:	4628      	mov	r0, r5
 8107cf4:	47b8      	blx	r7
 8107cf6:	3001      	adds	r0, #1
 8107cf8:	f43f ae6b 	beq.w	81079d2 <_printf_float+0xc2>
 8107cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107d00:	2200      	movs	r2, #0
 8107d02:	2300      	movs	r3, #0
 8107d04:	f7f8 ff68 	bl	8100bd8 <__aeabi_dcmpeq>
 8107d08:	b9d8      	cbnz	r0, 8107d42 <_printf_float+0x432>
 8107d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107d0c:	f108 0201 	add.w	r2, r8, #1
 8107d10:	3b01      	subs	r3, #1
 8107d12:	4631      	mov	r1, r6
 8107d14:	4628      	mov	r0, r5
 8107d16:	47b8      	blx	r7
 8107d18:	3001      	adds	r0, #1
 8107d1a:	d10e      	bne.n	8107d3a <_printf_float+0x42a>
 8107d1c:	e659      	b.n	81079d2 <_printf_float+0xc2>
 8107d1e:	2301      	movs	r3, #1
 8107d20:	4652      	mov	r2, sl
 8107d22:	4631      	mov	r1, r6
 8107d24:	4628      	mov	r0, r5
 8107d26:	47b8      	blx	r7
 8107d28:	3001      	adds	r0, #1
 8107d2a:	f43f ae52 	beq.w	81079d2 <_printf_float+0xc2>
 8107d2e:	f108 0801 	add.w	r8, r8, #1
 8107d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107d34:	3b01      	subs	r3, #1
 8107d36:	4543      	cmp	r3, r8
 8107d38:	dcf1      	bgt.n	8107d1e <_printf_float+0x40e>
 8107d3a:	464b      	mov	r3, r9
 8107d3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107d40:	e6dc      	b.n	8107afc <_printf_float+0x1ec>
 8107d42:	f04f 0800 	mov.w	r8, #0
 8107d46:	f104 0a1a 	add.w	sl, r4, #26
 8107d4a:	e7f2      	b.n	8107d32 <_printf_float+0x422>
 8107d4c:	2301      	movs	r3, #1
 8107d4e:	4642      	mov	r2, r8
 8107d50:	e7df      	b.n	8107d12 <_printf_float+0x402>
 8107d52:	2301      	movs	r3, #1
 8107d54:	464a      	mov	r2, r9
 8107d56:	4631      	mov	r1, r6
 8107d58:	4628      	mov	r0, r5
 8107d5a:	47b8      	blx	r7
 8107d5c:	3001      	adds	r0, #1
 8107d5e:	f43f ae38 	beq.w	81079d2 <_printf_float+0xc2>
 8107d62:	f108 0801 	add.w	r8, r8, #1
 8107d66:	68e3      	ldr	r3, [r4, #12]
 8107d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107d6a:	1a5b      	subs	r3, r3, r1
 8107d6c:	4543      	cmp	r3, r8
 8107d6e:	dcf0      	bgt.n	8107d52 <_printf_float+0x442>
 8107d70:	e6fa      	b.n	8107b68 <_printf_float+0x258>
 8107d72:	f04f 0800 	mov.w	r8, #0
 8107d76:	f104 0919 	add.w	r9, r4, #25
 8107d7a:	e7f4      	b.n	8107d66 <_printf_float+0x456>

08107d7c <_printf_common>:
 8107d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107d80:	4616      	mov	r6, r2
 8107d82:	4699      	mov	r9, r3
 8107d84:	688a      	ldr	r2, [r1, #8]
 8107d86:	690b      	ldr	r3, [r1, #16]
 8107d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107d8c:	4293      	cmp	r3, r2
 8107d8e:	bfb8      	it	lt
 8107d90:	4613      	movlt	r3, r2
 8107d92:	6033      	str	r3, [r6, #0]
 8107d94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107d98:	4607      	mov	r7, r0
 8107d9a:	460c      	mov	r4, r1
 8107d9c:	b10a      	cbz	r2, 8107da2 <_printf_common+0x26>
 8107d9e:	3301      	adds	r3, #1
 8107da0:	6033      	str	r3, [r6, #0]
 8107da2:	6823      	ldr	r3, [r4, #0]
 8107da4:	0699      	lsls	r1, r3, #26
 8107da6:	bf42      	ittt	mi
 8107da8:	6833      	ldrmi	r3, [r6, #0]
 8107daa:	3302      	addmi	r3, #2
 8107dac:	6033      	strmi	r3, [r6, #0]
 8107dae:	6825      	ldr	r5, [r4, #0]
 8107db0:	f015 0506 	ands.w	r5, r5, #6
 8107db4:	d106      	bne.n	8107dc4 <_printf_common+0x48>
 8107db6:	f104 0a19 	add.w	sl, r4, #25
 8107dba:	68e3      	ldr	r3, [r4, #12]
 8107dbc:	6832      	ldr	r2, [r6, #0]
 8107dbe:	1a9b      	subs	r3, r3, r2
 8107dc0:	42ab      	cmp	r3, r5
 8107dc2:	dc26      	bgt.n	8107e12 <_printf_common+0x96>
 8107dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107dc8:	1e13      	subs	r3, r2, #0
 8107dca:	6822      	ldr	r2, [r4, #0]
 8107dcc:	bf18      	it	ne
 8107dce:	2301      	movne	r3, #1
 8107dd0:	0692      	lsls	r2, r2, #26
 8107dd2:	d42b      	bmi.n	8107e2c <_printf_common+0xb0>
 8107dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107dd8:	4649      	mov	r1, r9
 8107dda:	4638      	mov	r0, r7
 8107ddc:	47c0      	blx	r8
 8107dde:	3001      	adds	r0, #1
 8107de0:	d01e      	beq.n	8107e20 <_printf_common+0xa4>
 8107de2:	6823      	ldr	r3, [r4, #0]
 8107de4:	68e5      	ldr	r5, [r4, #12]
 8107de6:	6832      	ldr	r2, [r6, #0]
 8107de8:	f003 0306 	and.w	r3, r3, #6
 8107dec:	2b04      	cmp	r3, #4
 8107dee:	bf08      	it	eq
 8107df0:	1aad      	subeq	r5, r5, r2
 8107df2:	68a3      	ldr	r3, [r4, #8]
 8107df4:	6922      	ldr	r2, [r4, #16]
 8107df6:	bf0c      	ite	eq
 8107df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107dfc:	2500      	movne	r5, #0
 8107dfe:	4293      	cmp	r3, r2
 8107e00:	bfc4      	itt	gt
 8107e02:	1a9b      	subgt	r3, r3, r2
 8107e04:	18ed      	addgt	r5, r5, r3
 8107e06:	2600      	movs	r6, #0
 8107e08:	341a      	adds	r4, #26
 8107e0a:	42b5      	cmp	r5, r6
 8107e0c:	d11a      	bne.n	8107e44 <_printf_common+0xc8>
 8107e0e:	2000      	movs	r0, #0
 8107e10:	e008      	b.n	8107e24 <_printf_common+0xa8>
 8107e12:	2301      	movs	r3, #1
 8107e14:	4652      	mov	r2, sl
 8107e16:	4649      	mov	r1, r9
 8107e18:	4638      	mov	r0, r7
 8107e1a:	47c0      	blx	r8
 8107e1c:	3001      	adds	r0, #1
 8107e1e:	d103      	bne.n	8107e28 <_printf_common+0xac>
 8107e20:	f04f 30ff 	mov.w	r0, #4294967295
 8107e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107e28:	3501      	adds	r5, #1
 8107e2a:	e7c6      	b.n	8107dba <_printf_common+0x3e>
 8107e2c:	18e1      	adds	r1, r4, r3
 8107e2e:	1c5a      	adds	r2, r3, #1
 8107e30:	2030      	movs	r0, #48	; 0x30
 8107e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107e36:	4422      	add	r2, r4
 8107e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8107e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8107e40:	3302      	adds	r3, #2
 8107e42:	e7c7      	b.n	8107dd4 <_printf_common+0x58>
 8107e44:	2301      	movs	r3, #1
 8107e46:	4622      	mov	r2, r4
 8107e48:	4649      	mov	r1, r9
 8107e4a:	4638      	mov	r0, r7
 8107e4c:	47c0      	blx	r8
 8107e4e:	3001      	adds	r0, #1
 8107e50:	d0e6      	beq.n	8107e20 <_printf_common+0xa4>
 8107e52:	3601      	adds	r6, #1
 8107e54:	e7d9      	b.n	8107e0a <_printf_common+0x8e>
	...

08107e58 <_printf_i>:
 8107e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107e5c:	7e0f      	ldrb	r7, [r1, #24]
 8107e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8107e60:	2f78      	cmp	r7, #120	; 0x78
 8107e62:	4691      	mov	r9, r2
 8107e64:	4680      	mov	r8, r0
 8107e66:	460c      	mov	r4, r1
 8107e68:	469a      	mov	sl, r3
 8107e6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8107e6e:	d807      	bhi.n	8107e80 <_printf_i+0x28>
 8107e70:	2f62      	cmp	r7, #98	; 0x62
 8107e72:	d80a      	bhi.n	8107e8a <_printf_i+0x32>
 8107e74:	2f00      	cmp	r7, #0
 8107e76:	f000 80d8 	beq.w	810802a <_printf_i+0x1d2>
 8107e7a:	2f58      	cmp	r7, #88	; 0x58
 8107e7c:	f000 80a3 	beq.w	8107fc6 <_printf_i+0x16e>
 8107e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8107e84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107e88:	e03a      	b.n	8107f00 <_printf_i+0xa8>
 8107e8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107e8e:	2b15      	cmp	r3, #21
 8107e90:	d8f6      	bhi.n	8107e80 <_printf_i+0x28>
 8107e92:	a101      	add	r1, pc, #4	; (adr r1, 8107e98 <_printf_i+0x40>)
 8107e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8107e98:	08107ef1 	.word	0x08107ef1
 8107e9c:	08107f05 	.word	0x08107f05
 8107ea0:	08107e81 	.word	0x08107e81
 8107ea4:	08107e81 	.word	0x08107e81
 8107ea8:	08107e81 	.word	0x08107e81
 8107eac:	08107e81 	.word	0x08107e81
 8107eb0:	08107f05 	.word	0x08107f05
 8107eb4:	08107e81 	.word	0x08107e81
 8107eb8:	08107e81 	.word	0x08107e81
 8107ebc:	08107e81 	.word	0x08107e81
 8107ec0:	08107e81 	.word	0x08107e81
 8107ec4:	08108011 	.word	0x08108011
 8107ec8:	08107f35 	.word	0x08107f35
 8107ecc:	08107ff3 	.word	0x08107ff3
 8107ed0:	08107e81 	.word	0x08107e81
 8107ed4:	08107e81 	.word	0x08107e81
 8107ed8:	08108033 	.word	0x08108033
 8107edc:	08107e81 	.word	0x08107e81
 8107ee0:	08107f35 	.word	0x08107f35
 8107ee4:	08107e81 	.word	0x08107e81
 8107ee8:	08107e81 	.word	0x08107e81
 8107eec:	08107ffb 	.word	0x08107ffb
 8107ef0:	682b      	ldr	r3, [r5, #0]
 8107ef2:	1d1a      	adds	r2, r3, #4
 8107ef4:	681b      	ldr	r3, [r3, #0]
 8107ef6:	602a      	str	r2, [r5, #0]
 8107ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8107efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8107f00:	2301      	movs	r3, #1
 8107f02:	e0a3      	b.n	810804c <_printf_i+0x1f4>
 8107f04:	6820      	ldr	r0, [r4, #0]
 8107f06:	6829      	ldr	r1, [r5, #0]
 8107f08:	0606      	lsls	r6, r0, #24
 8107f0a:	f101 0304 	add.w	r3, r1, #4
 8107f0e:	d50a      	bpl.n	8107f26 <_printf_i+0xce>
 8107f10:	680e      	ldr	r6, [r1, #0]
 8107f12:	602b      	str	r3, [r5, #0]
 8107f14:	2e00      	cmp	r6, #0
 8107f16:	da03      	bge.n	8107f20 <_printf_i+0xc8>
 8107f18:	232d      	movs	r3, #45	; 0x2d
 8107f1a:	4276      	negs	r6, r6
 8107f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107f20:	485e      	ldr	r0, [pc, #376]	; (810809c <_printf_i+0x244>)
 8107f22:	230a      	movs	r3, #10
 8107f24:	e019      	b.n	8107f5a <_printf_i+0x102>
 8107f26:	680e      	ldr	r6, [r1, #0]
 8107f28:	602b      	str	r3, [r5, #0]
 8107f2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8107f2e:	bf18      	it	ne
 8107f30:	b236      	sxthne	r6, r6
 8107f32:	e7ef      	b.n	8107f14 <_printf_i+0xbc>
 8107f34:	682b      	ldr	r3, [r5, #0]
 8107f36:	6820      	ldr	r0, [r4, #0]
 8107f38:	1d19      	adds	r1, r3, #4
 8107f3a:	6029      	str	r1, [r5, #0]
 8107f3c:	0601      	lsls	r1, r0, #24
 8107f3e:	d501      	bpl.n	8107f44 <_printf_i+0xec>
 8107f40:	681e      	ldr	r6, [r3, #0]
 8107f42:	e002      	b.n	8107f4a <_printf_i+0xf2>
 8107f44:	0646      	lsls	r6, r0, #25
 8107f46:	d5fb      	bpl.n	8107f40 <_printf_i+0xe8>
 8107f48:	881e      	ldrh	r6, [r3, #0]
 8107f4a:	4854      	ldr	r0, [pc, #336]	; (810809c <_printf_i+0x244>)
 8107f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8107f4e:	bf0c      	ite	eq
 8107f50:	2308      	moveq	r3, #8
 8107f52:	230a      	movne	r3, #10
 8107f54:	2100      	movs	r1, #0
 8107f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107f5a:	6865      	ldr	r5, [r4, #4]
 8107f5c:	60a5      	str	r5, [r4, #8]
 8107f5e:	2d00      	cmp	r5, #0
 8107f60:	bfa2      	ittt	ge
 8107f62:	6821      	ldrge	r1, [r4, #0]
 8107f64:	f021 0104 	bicge.w	r1, r1, #4
 8107f68:	6021      	strge	r1, [r4, #0]
 8107f6a:	b90e      	cbnz	r6, 8107f70 <_printf_i+0x118>
 8107f6c:	2d00      	cmp	r5, #0
 8107f6e:	d04d      	beq.n	810800c <_printf_i+0x1b4>
 8107f70:	4615      	mov	r5, r2
 8107f72:	fbb6 f1f3 	udiv	r1, r6, r3
 8107f76:	fb03 6711 	mls	r7, r3, r1, r6
 8107f7a:	5dc7      	ldrb	r7, [r0, r7]
 8107f7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8107f80:	4637      	mov	r7, r6
 8107f82:	42bb      	cmp	r3, r7
 8107f84:	460e      	mov	r6, r1
 8107f86:	d9f4      	bls.n	8107f72 <_printf_i+0x11a>
 8107f88:	2b08      	cmp	r3, #8
 8107f8a:	d10b      	bne.n	8107fa4 <_printf_i+0x14c>
 8107f8c:	6823      	ldr	r3, [r4, #0]
 8107f8e:	07de      	lsls	r6, r3, #31
 8107f90:	d508      	bpl.n	8107fa4 <_printf_i+0x14c>
 8107f92:	6923      	ldr	r3, [r4, #16]
 8107f94:	6861      	ldr	r1, [r4, #4]
 8107f96:	4299      	cmp	r1, r3
 8107f98:	bfde      	ittt	le
 8107f9a:	2330      	movle	r3, #48	; 0x30
 8107f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8107fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8107fa4:	1b52      	subs	r2, r2, r5
 8107fa6:	6122      	str	r2, [r4, #16]
 8107fa8:	f8cd a000 	str.w	sl, [sp]
 8107fac:	464b      	mov	r3, r9
 8107fae:	aa03      	add	r2, sp, #12
 8107fb0:	4621      	mov	r1, r4
 8107fb2:	4640      	mov	r0, r8
 8107fb4:	f7ff fee2 	bl	8107d7c <_printf_common>
 8107fb8:	3001      	adds	r0, #1
 8107fba:	d14c      	bne.n	8108056 <_printf_i+0x1fe>
 8107fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8107fc0:	b004      	add	sp, #16
 8107fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107fc6:	4835      	ldr	r0, [pc, #212]	; (810809c <_printf_i+0x244>)
 8107fc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8107fcc:	6829      	ldr	r1, [r5, #0]
 8107fce:	6823      	ldr	r3, [r4, #0]
 8107fd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8107fd4:	6029      	str	r1, [r5, #0]
 8107fd6:	061d      	lsls	r5, r3, #24
 8107fd8:	d514      	bpl.n	8108004 <_printf_i+0x1ac>
 8107fda:	07df      	lsls	r7, r3, #31
 8107fdc:	bf44      	itt	mi
 8107fde:	f043 0320 	orrmi.w	r3, r3, #32
 8107fe2:	6023      	strmi	r3, [r4, #0]
 8107fe4:	b91e      	cbnz	r6, 8107fee <_printf_i+0x196>
 8107fe6:	6823      	ldr	r3, [r4, #0]
 8107fe8:	f023 0320 	bic.w	r3, r3, #32
 8107fec:	6023      	str	r3, [r4, #0]
 8107fee:	2310      	movs	r3, #16
 8107ff0:	e7b0      	b.n	8107f54 <_printf_i+0xfc>
 8107ff2:	6823      	ldr	r3, [r4, #0]
 8107ff4:	f043 0320 	orr.w	r3, r3, #32
 8107ff8:	6023      	str	r3, [r4, #0]
 8107ffa:	2378      	movs	r3, #120	; 0x78
 8107ffc:	4828      	ldr	r0, [pc, #160]	; (81080a0 <_printf_i+0x248>)
 8107ffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108002:	e7e3      	b.n	8107fcc <_printf_i+0x174>
 8108004:	0659      	lsls	r1, r3, #25
 8108006:	bf48      	it	mi
 8108008:	b2b6      	uxthmi	r6, r6
 810800a:	e7e6      	b.n	8107fda <_printf_i+0x182>
 810800c:	4615      	mov	r5, r2
 810800e:	e7bb      	b.n	8107f88 <_printf_i+0x130>
 8108010:	682b      	ldr	r3, [r5, #0]
 8108012:	6826      	ldr	r6, [r4, #0]
 8108014:	6961      	ldr	r1, [r4, #20]
 8108016:	1d18      	adds	r0, r3, #4
 8108018:	6028      	str	r0, [r5, #0]
 810801a:	0635      	lsls	r5, r6, #24
 810801c:	681b      	ldr	r3, [r3, #0]
 810801e:	d501      	bpl.n	8108024 <_printf_i+0x1cc>
 8108020:	6019      	str	r1, [r3, #0]
 8108022:	e002      	b.n	810802a <_printf_i+0x1d2>
 8108024:	0670      	lsls	r0, r6, #25
 8108026:	d5fb      	bpl.n	8108020 <_printf_i+0x1c8>
 8108028:	8019      	strh	r1, [r3, #0]
 810802a:	2300      	movs	r3, #0
 810802c:	6123      	str	r3, [r4, #16]
 810802e:	4615      	mov	r5, r2
 8108030:	e7ba      	b.n	8107fa8 <_printf_i+0x150>
 8108032:	682b      	ldr	r3, [r5, #0]
 8108034:	1d1a      	adds	r2, r3, #4
 8108036:	602a      	str	r2, [r5, #0]
 8108038:	681d      	ldr	r5, [r3, #0]
 810803a:	6862      	ldr	r2, [r4, #4]
 810803c:	2100      	movs	r1, #0
 810803e:	4628      	mov	r0, r5
 8108040:	f7f8 f956 	bl	81002f0 <memchr>
 8108044:	b108      	cbz	r0, 810804a <_printf_i+0x1f2>
 8108046:	1b40      	subs	r0, r0, r5
 8108048:	6060      	str	r0, [r4, #4]
 810804a:	6863      	ldr	r3, [r4, #4]
 810804c:	6123      	str	r3, [r4, #16]
 810804e:	2300      	movs	r3, #0
 8108050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108054:	e7a8      	b.n	8107fa8 <_printf_i+0x150>
 8108056:	6923      	ldr	r3, [r4, #16]
 8108058:	462a      	mov	r2, r5
 810805a:	4649      	mov	r1, r9
 810805c:	4640      	mov	r0, r8
 810805e:	47d0      	blx	sl
 8108060:	3001      	adds	r0, #1
 8108062:	d0ab      	beq.n	8107fbc <_printf_i+0x164>
 8108064:	6823      	ldr	r3, [r4, #0]
 8108066:	079b      	lsls	r3, r3, #30
 8108068:	d413      	bmi.n	8108092 <_printf_i+0x23a>
 810806a:	68e0      	ldr	r0, [r4, #12]
 810806c:	9b03      	ldr	r3, [sp, #12]
 810806e:	4298      	cmp	r0, r3
 8108070:	bfb8      	it	lt
 8108072:	4618      	movlt	r0, r3
 8108074:	e7a4      	b.n	8107fc0 <_printf_i+0x168>
 8108076:	2301      	movs	r3, #1
 8108078:	4632      	mov	r2, r6
 810807a:	4649      	mov	r1, r9
 810807c:	4640      	mov	r0, r8
 810807e:	47d0      	blx	sl
 8108080:	3001      	adds	r0, #1
 8108082:	d09b      	beq.n	8107fbc <_printf_i+0x164>
 8108084:	3501      	adds	r5, #1
 8108086:	68e3      	ldr	r3, [r4, #12]
 8108088:	9903      	ldr	r1, [sp, #12]
 810808a:	1a5b      	subs	r3, r3, r1
 810808c:	42ab      	cmp	r3, r5
 810808e:	dcf2      	bgt.n	8108076 <_printf_i+0x21e>
 8108090:	e7eb      	b.n	810806a <_printf_i+0x212>
 8108092:	2500      	movs	r5, #0
 8108094:	f104 0619 	add.w	r6, r4, #25
 8108098:	e7f5      	b.n	8108086 <_printf_i+0x22e>
 810809a:	bf00      	nop
 810809c:	0810c25e 	.word	0x0810c25e
 81080a0:	0810c26f 	.word	0x0810c26f

081080a4 <_scanf_float>:
 81080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81080a8:	b087      	sub	sp, #28
 81080aa:	4617      	mov	r7, r2
 81080ac:	9303      	str	r3, [sp, #12]
 81080ae:	688b      	ldr	r3, [r1, #8]
 81080b0:	1e5a      	subs	r2, r3, #1
 81080b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81080b6:	bf83      	ittte	hi
 81080b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81080bc:	195b      	addhi	r3, r3, r5
 81080be:	9302      	strhi	r3, [sp, #8]
 81080c0:	2300      	movls	r3, #0
 81080c2:	bf86      	itte	hi
 81080c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 81080c8:	608b      	strhi	r3, [r1, #8]
 81080ca:	9302      	strls	r3, [sp, #8]
 81080cc:	680b      	ldr	r3, [r1, #0]
 81080ce:	468b      	mov	fp, r1
 81080d0:	2500      	movs	r5, #0
 81080d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81080d6:	f84b 3b1c 	str.w	r3, [fp], #28
 81080da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81080de:	4680      	mov	r8, r0
 81080e0:	460c      	mov	r4, r1
 81080e2:	465e      	mov	r6, fp
 81080e4:	46aa      	mov	sl, r5
 81080e6:	46a9      	mov	r9, r5
 81080e8:	9501      	str	r5, [sp, #4]
 81080ea:	68a2      	ldr	r2, [r4, #8]
 81080ec:	b152      	cbz	r2, 8108104 <_scanf_float+0x60>
 81080ee:	683b      	ldr	r3, [r7, #0]
 81080f0:	781b      	ldrb	r3, [r3, #0]
 81080f2:	2b4e      	cmp	r3, #78	; 0x4e
 81080f4:	d864      	bhi.n	81081c0 <_scanf_float+0x11c>
 81080f6:	2b40      	cmp	r3, #64	; 0x40
 81080f8:	d83c      	bhi.n	8108174 <_scanf_float+0xd0>
 81080fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81080fe:	b2c8      	uxtb	r0, r1
 8108100:	280e      	cmp	r0, #14
 8108102:	d93a      	bls.n	810817a <_scanf_float+0xd6>
 8108104:	f1b9 0f00 	cmp.w	r9, #0
 8108108:	d003      	beq.n	8108112 <_scanf_float+0x6e>
 810810a:	6823      	ldr	r3, [r4, #0]
 810810c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108110:	6023      	str	r3, [r4, #0]
 8108112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108116:	f1ba 0f01 	cmp.w	sl, #1
 810811a:	f200 8113 	bhi.w	8108344 <_scanf_float+0x2a0>
 810811e:	455e      	cmp	r6, fp
 8108120:	f200 8105 	bhi.w	810832e <_scanf_float+0x28a>
 8108124:	2501      	movs	r5, #1
 8108126:	4628      	mov	r0, r5
 8108128:	b007      	add	sp, #28
 810812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810812e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8108132:	2a0d      	cmp	r2, #13
 8108134:	d8e6      	bhi.n	8108104 <_scanf_float+0x60>
 8108136:	a101      	add	r1, pc, #4	; (adr r1, 810813c <_scanf_float+0x98>)
 8108138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810813c:	0810827b 	.word	0x0810827b
 8108140:	08108105 	.word	0x08108105
 8108144:	08108105 	.word	0x08108105
 8108148:	08108105 	.word	0x08108105
 810814c:	081082db 	.word	0x081082db
 8108150:	081082b3 	.word	0x081082b3
 8108154:	08108105 	.word	0x08108105
 8108158:	08108105 	.word	0x08108105
 810815c:	08108289 	.word	0x08108289
 8108160:	08108105 	.word	0x08108105
 8108164:	08108105 	.word	0x08108105
 8108168:	08108105 	.word	0x08108105
 810816c:	08108105 	.word	0x08108105
 8108170:	08108241 	.word	0x08108241
 8108174:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8108178:	e7db      	b.n	8108132 <_scanf_float+0x8e>
 810817a:	290e      	cmp	r1, #14
 810817c:	d8c2      	bhi.n	8108104 <_scanf_float+0x60>
 810817e:	a001      	add	r0, pc, #4	; (adr r0, 8108184 <_scanf_float+0xe0>)
 8108180:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108184:	08108233 	.word	0x08108233
 8108188:	08108105 	.word	0x08108105
 810818c:	08108233 	.word	0x08108233
 8108190:	081082c7 	.word	0x081082c7
 8108194:	08108105 	.word	0x08108105
 8108198:	081081e1 	.word	0x081081e1
 810819c:	0810821d 	.word	0x0810821d
 81081a0:	0810821d 	.word	0x0810821d
 81081a4:	0810821d 	.word	0x0810821d
 81081a8:	0810821d 	.word	0x0810821d
 81081ac:	0810821d 	.word	0x0810821d
 81081b0:	0810821d 	.word	0x0810821d
 81081b4:	0810821d 	.word	0x0810821d
 81081b8:	0810821d 	.word	0x0810821d
 81081bc:	0810821d 	.word	0x0810821d
 81081c0:	2b6e      	cmp	r3, #110	; 0x6e
 81081c2:	d809      	bhi.n	81081d8 <_scanf_float+0x134>
 81081c4:	2b60      	cmp	r3, #96	; 0x60
 81081c6:	d8b2      	bhi.n	810812e <_scanf_float+0x8a>
 81081c8:	2b54      	cmp	r3, #84	; 0x54
 81081ca:	d077      	beq.n	81082bc <_scanf_float+0x218>
 81081cc:	2b59      	cmp	r3, #89	; 0x59
 81081ce:	d199      	bne.n	8108104 <_scanf_float+0x60>
 81081d0:	2d07      	cmp	r5, #7
 81081d2:	d197      	bne.n	8108104 <_scanf_float+0x60>
 81081d4:	2508      	movs	r5, #8
 81081d6:	e029      	b.n	810822c <_scanf_float+0x188>
 81081d8:	2b74      	cmp	r3, #116	; 0x74
 81081da:	d06f      	beq.n	81082bc <_scanf_float+0x218>
 81081dc:	2b79      	cmp	r3, #121	; 0x79
 81081de:	e7f6      	b.n	81081ce <_scanf_float+0x12a>
 81081e0:	6821      	ldr	r1, [r4, #0]
 81081e2:	05c8      	lsls	r0, r1, #23
 81081e4:	d51a      	bpl.n	810821c <_scanf_float+0x178>
 81081e6:	9b02      	ldr	r3, [sp, #8]
 81081e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81081ec:	6021      	str	r1, [r4, #0]
 81081ee:	f109 0901 	add.w	r9, r9, #1
 81081f2:	b11b      	cbz	r3, 81081fc <_scanf_float+0x158>
 81081f4:	3b01      	subs	r3, #1
 81081f6:	3201      	adds	r2, #1
 81081f8:	9302      	str	r3, [sp, #8]
 81081fa:	60a2      	str	r2, [r4, #8]
 81081fc:	68a3      	ldr	r3, [r4, #8]
 81081fe:	3b01      	subs	r3, #1
 8108200:	60a3      	str	r3, [r4, #8]
 8108202:	6923      	ldr	r3, [r4, #16]
 8108204:	3301      	adds	r3, #1
 8108206:	6123      	str	r3, [r4, #16]
 8108208:	687b      	ldr	r3, [r7, #4]
 810820a:	3b01      	subs	r3, #1
 810820c:	2b00      	cmp	r3, #0
 810820e:	607b      	str	r3, [r7, #4]
 8108210:	f340 8084 	ble.w	810831c <_scanf_float+0x278>
 8108214:	683b      	ldr	r3, [r7, #0]
 8108216:	3301      	adds	r3, #1
 8108218:	603b      	str	r3, [r7, #0]
 810821a:	e766      	b.n	81080ea <_scanf_float+0x46>
 810821c:	eb1a 0f05 	cmn.w	sl, r5
 8108220:	f47f af70 	bne.w	8108104 <_scanf_float+0x60>
 8108224:	6822      	ldr	r2, [r4, #0]
 8108226:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810822a:	6022      	str	r2, [r4, #0]
 810822c:	f806 3b01 	strb.w	r3, [r6], #1
 8108230:	e7e4      	b.n	81081fc <_scanf_float+0x158>
 8108232:	6822      	ldr	r2, [r4, #0]
 8108234:	0610      	lsls	r0, r2, #24
 8108236:	f57f af65 	bpl.w	8108104 <_scanf_float+0x60>
 810823a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810823e:	e7f4      	b.n	810822a <_scanf_float+0x186>
 8108240:	f1ba 0f00 	cmp.w	sl, #0
 8108244:	d10e      	bne.n	8108264 <_scanf_float+0x1c0>
 8108246:	f1b9 0f00 	cmp.w	r9, #0
 810824a:	d10e      	bne.n	810826a <_scanf_float+0x1c6>
 810824c:	6822      	ldr	r2, [r4, #0]
 810824e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108252:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108256:	d108      	bne.n	810826a <_scanf_float+0x1c6>
 8108258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810825c:	6022      	str	r2, [r4, #0]
 810825e:	f04f 0a01 	mov.w	sl, #1
 8108262:	e7e3      	b.n	810822c <_scanf_float+0x188>
 8108264:	f1ba 0f02 	cmp.w	sl, #2
 8108268:	d055      	beq.n	8108316 <_scanf_float+0x272>
 810826a:	2d01      	cmp	r5, #1
 810826c:	d002      	beq.n	8108274 <_scanf_float+0x1d0>
 810826e:	2d04      	cmp	r5, #4
 8108270:	f47f af48 	bne.w	8108104 <_scanf_float+0x60>
 8108274:	3501      	adds	r5, #1
 8108276:	b2ed      	uxtb	r5, r5
 8108278:	e7d8      	b.n	810822c <_scanf_float+0x188>
 810827a:	f1ba 0f01 	cmp.w	sl, #1
 810827e:	f47f af41 	bne.w	8108104 <_scanf_float+0x60>
 8108282:	f04f 0a02 	mov.w	sl, #2
 8108286:	e7d1      	b.n	810822c <_scanf_float+0x188>
 8108288:	b97d      	cbnz	r5, 81082aa <_scanf_float+0x206>
 810828a:	f1b9 0f00 	cmp.w	r9, #0
 810828e:	f47f af3c 	bne.w	810810a <_scanf_float+0x66>
 8108292:	6822      	ldr	r2, [r4, #0]
 8108294:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108298:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810829c:	f47f af39 	bne.w	8108112 <_scanf_float+0x6e>
 81082a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81082a4:	6022      	str	r2, [r4, #0]
 81082a6:	2501      	movs	r5, #1
 81082a8:	e7c0      	b.n	810822c <_scanf_float+0x188>
 81082aa:	2d03      	cmp	r5, #3
 81082ac:	d0e2      	beq.n	8108274 <_scanf_float+0x1d0>
 81082ae:	2d05      	cmp	r5, #5
 81082b0:	e7de      	b.n	8108270 <_scanf_float+0x1cc>
 81082b2:	2d02      	cmp	r5, #2
 81082b4:	f47f af26 	bne.w	8108104 <_scanf_float+0x60>
 81082b8:	2503      	movs	r5, #3
 81082ba:	e7b7      	b.n	810822c <_scanf_float+0x188>
 81082bc:	2d06      	cmp	r5, #6
 81082be:	f47f af21 	bne.w	8108104 <_scanf_float+0x60>
 81082c2:	2507      	movs	r5, #7
 81082c4:	e7b2      	b.n	810822c <_scanf_float+0x188>
 81082c6:	6822      	ldr	r2, [r4, #0]
 81082c8:	0591      	lsls	r1, r2, #22
 81082ca:	f57f af1b 	bpl.w	8108104 <_scanf_float+0x60>
 81082ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81082d2:	6022      	str	r2, [r4, #0]
 81082d4:	f8cd 9004 	str.w	r9, [sp, #4]
 81082d8:	e7a8      	b.n	810822c <_scanf_float+0x188>
 81082da:	6822      	ldr	r2, [r4, #0]
 81082dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81082e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81082e4:	d006      	beq.n	81082f4 <_scanf_float+0x250>
 81082e6:	0550      	lsls	r0, r2, #21
 81082e8:	f57f af0c 	bpl.w	8108104 <_scanf_float+0x60>
 81082ec:	f1b9 0f00 	cmp.w	r9, #0
 81082f0:	f43f af0f 	beq.w	8108112 <_scanf_float+0x6e>
 81082f4:	0591      	lsls	r1, r2, #22
 81082f6:	bf58      	it	pl
 81082f8:	9901      	ldrpl	r1, [sp, #4]
 81082fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81082fe:	bf58      	it	pl
 8108300:	eba9 0101 	subpl.w	r1, r9, r1
 8108304:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8108308:	bf58      	it	pl
 810830a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810830e:	6022      	str	r2, [r4, #0]
 8108310:	f04f 0900 	mov.w	r9, #0
 8108314:	e78a      	b.n	810822c <_scanf_float+0x188>
 8108316:	f04f 0a03 	mov.w	sl, #3
 810831a:	e787      	b.n	810822c <_scanf_float+0x188>
 810831c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8108320:	4639      	mov	r1, r7
 8108322:	4640      	mov	r0, r8
 8108324:	4798      	blx	r3
 8108326:	2800      	cmp	r0, #0
 8108328:	f43f aedf 	beq.w	81080ea <_scanf_float+0x46>
 810832c:	e6ea      	b.n	8108104 <_scanf_float+0x60>
 810832e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108336:	463a      	mov	r2, r7
 8108338:	4640      	mov	r0, r8
 810833a:	4798      	blx	r3
 810833c:	6923      	ldr	r3, [r4, #16]
 810833e:	3b01      	subs	r3, #1
 8108340:	6123      	str	r3, [r4, #16]
 8108342:	e6ec      	b.n	810811e <_scanf_float+0x7a>
 8108344:	1e6b      	subs	r3, r5, #1
 8108346:	2b06      	cmp	r3, #6
 8108348:	d825      	bhi.n	8108396 <_scanf_float+0x2f2>
 810834a:	2d02      	cmp	r5, #2
 810834c:	d836      	bhi.n	81083bc <_scanf_float+0x318>
 810834e:	455e      	cmp	r6, fp
 8108350:	f67f aee8 	bls.w	8108124 <_scanf_float+0x80>
 8108354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108358:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810835c:	463a      	mov	r2, r7
 810835e:	4640      	mov	r0, r8
 8108360:	4798      	blx	r3
 8108362:	6923      	ldr	r3, [r4, #16]
 8108364:	3b01      	subs	r3, #1
 8108366:	6123      	str	r3, [r4, #16]
 8108368:	e7f1      	b.n	810834e <_scanf_float+0x2aa>
 810836a:	9802      	ldr	r0, [sp, #8]
 810836c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108370:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8108374:	9002      	str	r0, [sp, #8]
 8108376:	463a      	mov	r2, r7
 8108378:	4640      	mov	r0, r8
 810837a:	4798      	blx	r3
 810837c:	6923      	ldr	r3, [r4, #16]
 810837e:	3b01      	subs	r3, #1
 8108380:	6123      	str	r3, [r4, #16]
 8108382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108386:	fa5f fa8a 	uxtb.w	sl, sl
 810838a:	f1ba 0f02 	cmp.w	sl, #2
 810838e:	d1ec      	bne.n	810836a <_scanf_float+0x2c6>
 8108390:	3d03      	subs	r5, #3
 8108392:	b2ed      	uxtb	r5, r5
 8108394:	1b76      	subs	r6, r6, r5
 8108396:	6823      	ldr	r3, [r4, #0]
 8108398:	05da      	lsls	r2, r3, #23
 810839a:	d52f      	bpl.n	81083fc <_scanf_float+0x358>
 810839c:	055b      	lsls	r3, r3, #21
 810839e:	d510      	bpl.n	81083c2 <_scanf_float+0x31e>
 81083a0:	455e      	cmp	r6, fp
 81083a2:	f67f aebf 	bls.w	8108124 <_scanf_float+0x80>
 81083a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81083aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81083ae:	463a      	mov	r2, r7
 81083b0:	4640      	mov	r0, r8
 81083b2:	4798      	blx	r3
 81083b4:	6923      	ldr	r3, [r4, #16]
 81083b6:	3b01      	subs	r3, #1
 81083b8:	6123      	str	r3, [r4, #16]
 81083ba:	e7f1      	b.n	81083a0 <_scanf_float+0x2fc>
 81083bc:	46aa      	mov	sl, r5
 81083be:	9602      	str	r6, [sp, #8]
 81083c0:	e7df      	b.n	8108382 <_scanf_float+0x2de>
 81083c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81083c6:	6923      	ldr	r3, [r4, #16]
 81083c8:	2965      	cmp	r1, #101	; 0x65
 81083ca:	f103 33ff 	add.w	r3, r3, #4294967295
 81083ce:	f106 35ff 	add.w	r5, r6, #4294967295
 81083d2:	6123      	str	r3, [r4, #16]
 81083d4:	d00c      	beq.n	81083f0 <_scanf_float+0x34c>
 81083d6:	2945      	cmp	r1, #69	; 0x45
 81083d8:	d00a      	beq.n	81083f0 <_scanf_float+0x34c>
 81083da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81083de:	463a      	mov	r2, r7
 81083e0:	4640      	mov	r0, r8
 81083e2:	4798      	blx	r3
 81083e4:	6923      	ldr	r3, [r4, #16]
 81083e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81083ea:	3b01      	subs	r3, #1
 81083ec:	1eb5      	subs	r5, r6, #2
 81083ee:	6123      	str	r3, [r4, #16]
 81083f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81083f4:	463a      	mov	r2, r7
 81083f6:	4640      	mov	r0, r8
 81083f8:	4798      	blx	r3
 81083fa:	462e      	mov	r6, r5
 81083fc:	6825      	ldr	r5, [r4, #0]
 81083fe:	f015 0510 	ands.w	r5, r5, #16
 8108402:	d159      	bne.n	81084b8 <_scanf_float+0x414>
 8108404:	7035      	strb	r5, [r6, #0]
 8108406:	6823      	ldr	r3, [r4, #0]
 8108408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810840c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108410:	d11b      	bne.n	810844a <_scanf_float+0x3a6>
 8108412:	9b01      	ldr	r3, [sp, #4]
 8108414:	454b      	cmp	r3, r9
 8108416:	eba3 0209 	sub.w	r2, r3, r9
 810841a:	d123      	bne.n	8108464 <_scanf_float+0x3c0>
 810841c:	2200      	movs	r2, #0
 810841e:	4659      	mov	r1, fp
 8108420:	4640      	mov	r0, r8
 8108422:	f000 ff0f 	bl	8109244 <_strtod_r>
 8108426:	6822      	ldr	r2, [r4, #0]
 8108428:	9b03      	ldr	r3, [sp, #12]
 810842a:	f012 0f02 	tst.w	r2, #2
 810842e:	ec57 6b10 	vmov	r6, r7, d0
 8108432:	681b      	ldr	r3, [r3, #0]
 8108434:	d021      	beq.n	810847a <_scanf_float+0x3d6>
 8108436:	9903      	ldr	r1, [sp, #12]
 8108438:	1d1a      	adds	r2, r3, #4
 810843a:	600a      	str	r2, [r1, #0]
 810843c:	681b      	ldr	r3, [r3, #0]
 810843e:	e9c3 6700 	strd	r6, r7, [r3]
 8108442:	68e3      	ldr	r3, [r4, #12]
 8108444:	3301      	adds	r3, #1
 8108446:	60e3      	str	r3, [r4, #12]
 8108448:	e66d      	b.n	8108126 <_scanf_float+0x82>
 810844a:	9b04      	ldr	r3, [sp, #16]
 810844c:	2b00      	cmp	r3, #0
 810844e:	d0e5      	beq.n	810841c <_scanf_float+0x378>
 8108450:	9905      	ldr	r1, [sp, #20]
 8108452:	230a      	movs	r3, #10
 8108454:	462a      	mov	r2, r5
 8108456:	3101      	adds	r1, #1
 8108458:	4640      	mov	r0, r8
 810845a:	f000 ff7b 	bl	8109354 <_strtol_r>
 810845e:	9b04      	ldr	r3, [sp, #16]
 8108460:	9e05      	ldr	r6, [sp, #20]
 8108462:	1ac2      	subs	r2, r0, r3
 8108464:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8108468:	429e      	cmp	r6, r3
 810846a:	bf28      	it	cs
 810846c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8108470:	4912      	ldr	r1, [pc, #72]	; (81084bc <_scanf_float+0x418>)
 8108472:	4630      	mov	r0, r6
 8108474:	f000 f8a2 	bl	81085bc <siprintf>
 8108478:	e7d0      	b.n	810841c <_scanf_float+0x378>
 810847a:	9903      	ldr	r1, [sp, #12]
 810847c:	f012 0f04 	tst.w	r2, #4
 8108480:	f103 0204 	add.w	r2, r3, #4
 8108484:	600a      	str	r2, [r1, #0]
 8108486:	d1d9      	bne.n	810843c <_scanf_float+0x398>
 8108488:	f8d3 8000 	ldr.w	r8, [r3]
 810848c:	ee10 2a10 	vmov	r2, s0
 8108490:	ee10 0a10 	vmov	r0, s0
 8108494:	463b      	mov	r3, r7
 8108496:	4639      	mov	r1, r7
 8108498:	f7f8 fbd0 	bl	8100c3c <__aeabi_dcmpun>
 810849c:	b128      	cbz	r0, 81084aa <_scanf_float+0x406>
 810849e:	4808      	ldr	r0, [pc, #32]	; (81084c0 <_scanf_float+0x41c>)
 81084a0:	f000 f886 	bl	81085b0 <nanf>
 81084a4:	ed88 0a00 	vstr	s0, [r8]
 81084a8:	e7cb      	b.n	8108442 <_scanf_float+0x39e>
 81084aa:	4630      	mov	r0, r6
 81084ac:	4639      	mov	r1, r7
 81084ae:	f7f8 fc23 	bl	8100cf8 <__aeabi_d2f>
 81084b2:	f8c8 0000 	str.w	r0, [r8]
 81084b6:	e7c4      	b.n	8108442 <_scanf_float+0x39e>
 81084b8:	2500      	movs	r5, #0
 81084ba:	e634      	b.n	8108126 <_scanf_float+0x82>
 81084bc:	0810c280 	.word	0x0810c280
 81084c0:	0810c6f0 	.word	0x0810c6f0

081084c4 <_puts_r>:
 81084c4:	b570      	push	{r4, r5, r6, lr}
 81084c6:	460e      	mov	r6, r1
 81084c8:	4605      	mov	r5, r0
 81084ca:	b118      	cbz	r0, 81084d4 <_puts_r+0x10>
 81084cc:	6983      	ldr	r3, [r0, #24]
 81084ce:	b90b      	cbnz	r3, 81084d4 <_puts_r+0x10>
 81084d0:	f001 ff96 	bl	810a400 <__sinit>
 81084d4:	69ab      	ldr	r3, [r5, #24]
 81084d6:	68ac      	ldr	r4, [r5, #8]
 81084d8:	b913      	cbnz	r3, 81084e0 <_puts_r+0x1c>
 81084da:	4628      	mov	r0, r5
 81084dc:	f001 ff90 	bl	810a400 <__sinit>
 81084e0:	4b2c      	ldr	r3, [pc, #176]	; (8108594 <_puts_r+0xd0>)
 81084e2:	429c      	cmp	r4, r3
 81084e4:	d120      	bne.n	8108528 <_puts_r+0x64>
 81084e6:	686c      	ldr	r4, [r5, #4]
 81084e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81084ea:	07db      	lsls	r3, r3, #31
 81084ec:	d405      	bmi.n	81084fa <_puts_r+0x36>
 81084ee:	89a3      	ldrh	r3, [r4, #12]
 81084f0:	0598      	lsls	r0, r3, #22
 81084f2:	d402      	bmi.n	81084fa <_puts_r+0x36>
 81084f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81084f6:	f002 fb94 	bl	810ac22 <__retarget_lock_acquire_recursive>
 81084fa:	89a3      	ldrh	r3, [r4, #12]
 81084fc:	0719      	lsls	r1, r3, #28
 81084fe:	d51d      	bpl.n	810853c <_puts_r+0x78>
 8108500:	6923      	ldr	r3, [r4, #16]
 8108502:	b1db      	cbz	r3, 810853c <_puts_r+0x78>
 8108504:	3e01      	subs	r6, #1
 8108506:	68a3      	ldr	r3, [r4, #8]
 8108508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810850c:	3b01      	subs	r3, #1
 810850e:	60a3      	str	r3, [r4, #8]
 8108510:	bb39      	cbnz	r1, 8108562 <_puts_r+0x9e>
 8108512:	2b00      	cmp	r3, #0
 8108514:	da38      	bge.n	8108588 <_puts_r+0xc4>
 8108516:	4622      	mov	r2, r4
 8108518:	210a      	movs	r1, #10
 810851a:	4628      	mov	r0, r5
 810851c:	f000 ff1c 	bl	8109358 <__swbuf_r>
 8108520:	3001      	adds	r0, #1
 8108522:	d011      	beq.n	8108548 <_puts_r+0x84>
 8108524:	250a      	movs	r5, #10
 8108526:	e011      	b.n	810854c <_puts_r+0x88>
 8108528:	4b1b      	ldr	r3, [pc, #108]	; (8108598 <_puts_r+0xd4>)
 810852a:	429c      	cmp	r4, r3
 810852c:	d101      	bne.n	8108532 <_puts_r+0x6e>
 810852e:	68ac      	ldr	r4, [r5, #8]
 8108530:	e7da      	b.n	81084e8 <_puts_r+0x24>
 8108532:	4b1a      	ldr	r3, [pc, #104]	; (810859c <_puts_r+0xd8>)
 8108534:	429c      	cmp	r4, r3
 8108536:	bf08      	it	eq
 8108538:	68ec      	ldreq	r4, [r5, #12]
 810853a:	e7d5      	b.n	81084e8 <_puts_r+0x24>
 810853c:	4621      	mov	r1, r4
 810853e:	4628      	mov	r0, r5
 8108540:	f000 ff5c 	bl	81093fc <__swsetup_r>
 8108544:	2800      	cmp	r0, #0
 8108546:	d0dd      	beq.n	8108504 <_puts_r+0x40>
 8108548:	f04f 35ff 	mov.w	r5, #4294967295
 810854c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810854e:	07da      	lsls	r2, r3, #31
 8108550:	d405      	bmi.n	810855e <_puts_r+0x9a>
 8108552:	89a3      	ldrh	r3, [r4, #12]
 8108554:	059b      	lsls	r3, r3, #22
 8108556:	d402      	bmi.n	810855e <_puts_r+0x9a>
 8108558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810855a:	f002 fb63 	bl	810ac24 <__retarget_lock_release_recursive>
 810855e:	4628      	mov	r0, r5
 8108560:	bd70      	pop	{r4, r5, r6, pc}
 8108562:	2b00      	cmp	r3, #0
 8108564:	da04      	bge.n	8108570 <_puts_r+0xac>
 8108566:	69a2      	ldr	r2, [r4, #24]
 8108568:	429a      	cmp	r2, r3
 810856a:	dc06      	bgt.n	810857a <_puts_r+0xb6>
 810856c:	290a      	cmp	r1, #10
 810856e:	d004      	beq.n	810857a <_puts_r+0xb6>
 8108570:	6823      	ldr	r3, [r4, #0]
 8108572:	1c5a      	adds	r2, r3, #1
 8108574:	6022      	str	r2, [r4, #0]
 8108576:	7019      	strb	r1, [r3, #0]
 8108578:	e7c5      	b.n	8108506 <_puts_r+0x42>
 810857a:	4622      	mov	r2, r4
 810857c:	4628      	mov	r0, r5
 810857e:	f000 feeb 	bl	8109358 <__swbuf_r>
 8108582:	3001      	adds	r0, #1
 8108584:	d1bf      	bne.n	8108506 <_puts_r+0x42>
 8108586:	e7df      	b.n	8108548 <_puts_r+0x84>
 8108588:	6823      	ldr	r3, [r4, #0]
 810858a:	250a      	movs	r5, #10
 810858c:	1c5a      	adds	r2, r3, #1
 810858e:	6022      	str	r2, [r4, #0]
 8108590:	701d      	strb	r5, [r3, #0]
 8108592:	e7db      	b.n	810854c <_puts_r+0x88>
 8108594:	0810c48c 	.word	0x0810c48c
 8108598:	0810c4ac 	.word	0x0810c4ac
 810859c:	0810c46c 	.word	0x0810c46c

081085a0 <puts>:
 81085a0:	4b02      	ldr	r3, [pc, #8]	; (81085ac <puts+0xc>)
 81085a2:	4601      	mov	r1, r0
 81085a4:	6818      	ldr	r0, [r3, #0]
 81085a6:	f7ff bf8d 	b.w	81084c4 <_puts_r>
 81085aa:	bf00      	nop
 81085ac:	10000010 	.word	0x10000010

081085b0 <nanf>:
 81085b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 81085b8 <nanf+0x8>
 81085b4:	4770      	bx	lr
 81085b6:	bf00      	nop
 81085b8:	7fc00000 	.word	0x7fc00000

081085bc <siprintf>:
 81085bc:	b40e      	push	{r1, r2, r3}
 81085be:	b500      	push	{lr}
 81085c0:	b09c      	sub	sp, #112	; 0x70
 81085c2:	ab1d      	add	r3, sp, #116	; 0x74
 81085c4:	9002      	str	r0, [sp, #8]
 81085c6:	9006      	str	r0, [sp, #24]
 81085c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81085cc:	4809      	ldr	r0, [pc, #36]	; (81085f4 <siprintf+0x38>)
 81085ce:	9107      	str	r1, [sp, #28]
 81085d0:	9104      	str	r1, [sp, #16]
 81085d2:	4909      	ldr	r1, [pc, #36]	; (81085f8 <siprintf+0x3c>)
 81085d4:	f853 2b04 	ldr.w	r2, [r3], #4
 81085d8:	9105      	str	r1, [sp, #20]
 81085da:	6800      	ldr	r0, [r0, #0]
 81085dc:	9301      	str	r3, [sp, #4]
 81085de:	a902      	add	r1, sp, #8
 81085e0:	f003 f9c2 	bl	810b968 <_svfiprintf_r>
 81085e4:	9b02      	ldr	r3, [sp, #8]
 81085e6:	2200      	movs	r2, #0
 81085e8:	701a      	strb	r2, [r3, #0]
 81085ea:	b01c      	add	sp, #112	; 0x70
 81085ec:	f85d eb04 	ldr.w	lr, [sp], #4
 81085f0:	b003      	add	sp, #12
 81085f2:	4770      	bx	lr
 81085f4:	10000010 	.word	0x10000010
 81085f8:	ffff0208 	.word	0xffff0208

081085fc <sulp>:
 81085fc:	b570      	push	{r4, r5, r6, lr}
 81085fe:	4604      	mov	r4, r0
 8108600:	460d      	mov	r5, r1
 8108602:	ec45 4b10 	vmov	d0, r4, r5
 8108606:	4616      	mov	r6, r2
 8108608:	f002 ff0c 	bl	810b424 <__ulp>
 810860c:	ec51 0b10 	vmov	r0, r1, d0
 8108610:	b17e      	cbz	r6, 8108632 <sulp+0x36>
 8108612:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8108616:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810861a:	2b00      	cmp	r3, #0
 810861c:	dd09      	ble.n	8108632 <sulp+0x36>
 810861e:	051b      	lsls	r3, r3, #20
 8108620:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8108624:	2400      	movs	r4, #0
 8108626:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810862a:	4622      	mov	r2, r4
 810862c:	462b      	mov	r3, r5
 810862e:	f7f8 f86b 	bl	8100708 <__aeabi_dmul>
 8108632:	bd70      	pop	{r4, r5, r6, pc}
 8108634:	0000      	movs	r0, r0
	...

08108638 <_strtod_l>:
 8108638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810863c:	ed2d 8b02 	vpush	{d8}
 8108640:	b09d      	sub	sp, #116	; 0x74
 8108642:	461f      	mov	r7, r3
 8108644:	2300      	movs	r3, #0
 8108646:	9318      	str	r3, [sp, #96]	; 0x60
 8108648:	4ba2      	ldr	r3, [pc, #648]	; (81088d4 <_strtod_l+0x29c>)
 810864a:	9213      	str	r2, [sp, #76]	; 0x4c
 810864c:	681b      	ldr	r3, [r3, #0]
 810864e:	9305      	str	r3, [sp, #20]
 8108650:	4604      	mov	r4, r0
 8108652:	4618      	mov	r0, r3
 8108654:	4688      	mov	r8, r1
 8108656:	f7f7 fe43 	bl	81002e0 <strlen>
 810865a:	f04f 0a00 	mov.w	sl, #0
 810865e:	4605      	mov	r5, r0
 8108660:	f04f 0b00 	mov.w	fp, #0
 8108664:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8108668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810866a:	781a      	ldrb	r2, [r3, #0]
 810866c:	2a2b      	cmp	r2, #43	; 0x2b
 810866e:	d04e      	beq.n	810870e <_strtod_l+0xd6>
 8108670:	d83b      	bhi.n	81086ea <_strtod_l+0xb2>
 8108672:	2a0d      	cmp	r2, #13
 8108674:	d834      	bhi.n	81086e0 <_strtod_l+0xa8>
 8108676:	2a08      	cmp	r2, #8
 8108678:	d834      	bhi.n	81086e4 <_strtod_l+0xac>
 810867a:	2a00      	cmp	r2, #0
 810867c:	d03e      	beq.n	81086fc <_strtod_l+0xc4>
 810867e:	2300      	movs	r3, #0
 8108680:	930a      	str	r3, [sp, #40]	; 0x28
 8108682:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8108684:	7833      	ldrb	r3, [r6, #0]
 8108686:	2b30      	cmp	r3, #48	; 0x30
 8108688:	f040 80b0 	bne.w	81087ec <_strtod_l+0x1b4>
 810868c:	7873      	ldrb	r3, [r6, #1]
 810868e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8108692:	2b58      	cmp	r3, #88	; 0x58
 8108694:	d168      	bne.n	8108768 <_strtod_l+0x130>
 8108696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108698:	9301      	str	r3, [sp, #4]
 810869a:	ab18      	add	r3, sp, #96	; 0x60
 810869c:	9702      	str	r7, [sp, #8]
 810869e:	9300      	str	r3, [sp, #0]
 81086a0:	4a8d      	ldr	r2, [pc, #564]	; (81088d8 <_strtod_l+0x2a0>)
 81086a2:	ab19      	add	r3, sp, #100	; 0x64
 81086a4:	a917      	add	r1, sp, #92	; 0x5c
 81086a6:	4620      	mov	r0, r4
 81086a8:	f001 ffae 	bl	810a608 <__gethex>
 81086ac:	f010 0707 	ands.w	r7, r0, #7
 81086b0:	4605      	mov	r5, r0
 81086b2:	d005      	beq.n	81086c0 <_strtod_l+0x88>
 81086b4:	2f06      	cmp	r7, #6
 81086b6:	d12c      	bne.n	8108712 <_strtod_l+0xda>
 81086b8:	3601      	adds	r6, #1
 81086ba:	2300      	movs	r3, #0
 81086bc:	9617      	str	r6, [sp, #92]	; 0x5c
 81086be:	930a      	str	r3, [sp, #40]	; 0x28
 81086c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 81086c2:	2b00      	cmp	r3, #0
 81086c4:	f040 8590 	bne.w	81091e8 <_strtod_l+0xbb0>
 81086c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81086ca:	b1eb      	cbz	r3, 8108708 <_strtod_l+0xd0>
 81086cc:	4652      	mov	r2, sl
 81086ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 81086d2:	ec43 2b10 	vmov	d0, r2, r3
 81086d6:	b01d      	add	sp, #116	; 0x74
 81086d8:	ecbd 8b02 	vpop	{d8}
 81086dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81086e0:	2a20      	cmp	r2, #32
 81086e2:	d1cc      	bne.n	810867e <_strtod_l+0x46>
 81086e4:	3301      	adds	r3, #1
 81086e6:	9317      	str	r3, [sp, #92]	; 0x5c
 81086e8:	e7be      	b.n	8108668 <_strtod_l+0x30>
 81086ea:	2a2d      	cmp	r2, #45	; 0x2d
 81086ec:	d1c7      	bne.n	810867e <_strtod_l+0x46>
 81086ee:	2201      	movs	r2, #1
 81086f0:	920a      	str	r2, [sp, #40]	; 0x28
 81086f2:	1c5a      	adds	r2, r3, #1
 81086f4:	9217      	str	r2, [sp, #92]	; 0x5c
 81086f6:	785b      	ldrb	r3, [r3, #1]
 81086f8:	2b00      	cmp	r3, #0
 81086fa:	d1c2      	bne.n	8108682 <_strtod_l+0x4a>
 81086fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 81086fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8108702:	2b00      	cmp	r3, #0
 8108704:	f040 856e 	bne.w	81091e4 <_strtod_l+0xbac>
 8108708:	4652      	mov	r2, sl
 810870a:	465b      	mov	r3, fp
 810870c:	e7e1      	b.n	81086d2 <_strtod_l+0x9a>
 810870e:	2200      	movs	r2, #0
 8108710:	e7ee      	b.n	81086f0 <_strtod_l+0xb8>
 8108712:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108714:	b13a      	cbz	r2, 8108726 <_strtod_l+0xee>
 8108716:	2135      	movs	r1, #53	; 0x35
 8108718:	a81a      	add	r0, sp, #104	; 0x68
 810871a:	f002 ff8e 	bl	810b63a <__copybits>
 810871e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108720:	4620      	mov	r0, r4
 8108722:	f002 fb4d 	bl	810adc0 <_Bfree>
 8108726:	3f01      	subs	r7, #1
 8108728:	2f04      	cmp	r7, #4
 810872a:	d806      	bhi.n	810873a <_strtod_l+0x102>
 810872c:	e8df f007 	tbb	[pc, r7]
 8108730:	1714030a 	.word	0x1714030a
 8108734:	0a          	.byte	0x0a
 8108735:	00          	.byte	0x00
 8108736:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810873a:	0728      	lsls	r0, r5, #28
 810873c:	d5c0      	bpl.n	81086c0 <_strtod_l+0x88>
 810873e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8108742:	e7bd      	b.n	81086c0 <_strtod_l+0x88>
 8108744:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8108748:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810874a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810874e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8108752:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8108756:	e7f0      	b.n	810873a <_strtod_l+0x102>
 8108758:	f8df b180 	ldr.w	fp, [pc, #384]	; 81088dc <_strtod_l+0x2a4>
 810875c:	e7ed      	b.n	810873a <_strtod_l+0x102>
 810875e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8108762:	f04f 3aff 	mov.w	sl, #4294967295
 8108766:	e7e8      	b.n	810873a <_strtod_l+0x102>
 8108768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810876a:	1c5a      	adds	r2, r3, #1
 810876c:	9217      	str	r2, [sp, #92]	; 0x5c
 810876e:	785b      	ldrb	r3, [r3, #1]
 8108770:	2b30      	cmp	r3, #48	; 0x30
 8108772:	d0f9      	beq.n	8108768 <_strtod_l+0x130>
 8108774:	2b00      	cmp	r3, #0
 8108776:	d0a3      	beq.n	81086c0 <_strtod_l+0x88>
 8108778:	2301      	movs	r3, #1
 810877a:	f04f 0900 	mov.w	r9, #0
 810877e:	9304      	str	r3, [sp, #16]
 8108780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108782:	9308      	str	r3, [sp, #32]
 8108784:	f8cd 901c 	str.w	r9, [sp, #28]
 8108788:	464f      	mov	r7, r9
 810878a:	220a      	movs	r2, #10
 810878c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810878e:	7806      	ldrb	r6, [r0, #0]
 8108790:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8108794:	b2d9      	uxtb	r1, r3
 8108796:	2909      	cmp	r1, #9
 8108798:	d92a      	bls.n	81087f0 <_strtod_l+0x1b8>
 810879a:	9905      	ldr	r1, [sp, #20]
 810879c:	462a      	mov	r2, r5
 810879e:	f003 fb9a 	bl	810bed6 <strncmp>
 81087a2:	b398      	cbz	r0, 810880c <_strtod_l+0x1d4>
 81087a4:	2000      	movs	r0, #0
 81087a6:	4632      	mov	r2, r6
 81087a8:	463d      	mov	r5, r7
 81087aa:	9005      	str	r0, [sp, #20]
 81087ac:	4603      	mov	r3, r0
 81087ae:	2a65      	cmp	r2, #101	; 0x65
 81087b0:	d001      	beq.n	81087b6 <_strtod_l+0x17e>
 81087b2:	2a45      	cmp	r2, #69	; 0x45
 81087b4:	d118      	bne.n	81087e8 <_strtod_l+0x1b0>
 81087b6:	b91d      	cbnz	r5, 81087c0 <_strtod_l+0x188>
 81087b8:	9a04      	ldr	r2, [sp, #16]
 81087ba:	4302      	orrs	r2, r0
 81087bc:	d09e      	beq.n	81086fc <_strtod_l+0xc4>
 81087be:	2500      	movs	r5, #0
 81087c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 81087c4:	f108 0201 	add.w	r2, r8, #1
 81087c8:	9217      	str	r2, [sp, #92]	; 0x5c
 81087ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 81087ce:	2a2b      	cmp	r2, #43	; 0x2b
 81087d0:	d075      	beq.n	81088be <_strtod_l+0x286>
 81087d2:	2a2d      	cmp	r2, #45	; 0x2d
 81087d4:	d07b      	beq.n	81088ce <_strtod_l+0x296>
 81087d6:	f04f 0c00 	mov.w	ip, #0
 81087da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 81087de:	2909      	cmp	r1, #9
 81087e0:	f240 8082 	bls.w	81088e8 <_strtod_l+0x2b0>
 81087e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 81087e8:	2600      	movs	r6, #0
 81087ea:	e09d      	b.n	8108928 <_strtod_l+0x2f0>
 81087ec:	2300      	movs	r3, #0
 81087ee:	e7c4      	b.n	810877a <_strtod_l+0x142>
 81087f0:	2f08      	cmp	r7, #8
 81087f2:	bfd8      	it	le
 81087f4:	9907      	ldrle	r1, [sp, #28]
 81087f6:	f100 0001 	add.w	r0, r0, #1
 81087fa:	bfda      	itte	le
 81087fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8108800:	9307      	strle	r3, [sp, #28]
 8108802:	fb02 3909 	mlagt	r9, r2, r9, r3
 8108806:	3701      	adds	r7, #1
 8108808:	9017      	str	r0, [sp, #92]	; 0x5c
 810880a:	e7bf      	b.n	810878c <_strtod_l+0x154>
 810880c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810880e:	195a      	adds	r2, r3, r5
 8108810:	9217      	str	r2, [sp, #92]	; 0x5c
 8108812:	5d5a      	ldrb	r2, [r3, r5]
 8108814:	2f00      	cmp	r7, #0
 8108816:	d037      	beq.n	8108888 <_strtod_l+0x250>
 8108818:	9005      	str	r0, [sp, #20]
 810881a:	463d      	mov	r5, r7
 810881c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8108820:	2b09      	cmp	r3, #9
 8108822:	d912      	bls.n	810884a <_strtod_l+0x212>
 8108824:	2301      	movs	r3, #1
 8108826:	e7c2      	b.n	81087ae <_strtod_l+0x176>
 8108828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810882a:	1c5a      	adds	r2, r3, #1
 810882c:	9217      	str	r2, [sp, #92]	; 0x5c
 810882e:	785a      	ldrb	r2, [r3, #1]
 8108830:	3001      	adds	r0, #1
 8108832:	2a30      	cmp	r2, #48	; 0x30
 8108834:	d0f8      	beq.n	8108828 <_strtod_l+0x1f0>
 8108836:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810883a:	2b08      	cmp	r3, #8
 810883c:	f200 84d9 	bhi.w	81091f2 <_strtod_l+0xbba>
 8108840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108842:	9005      	str	r0, [sp, #20]
 8108844:	2000      	movs	r0, #0
 8108846:	9308      	str	r3, [sp, #32]
 8108848:	4605      	mov	r5, r0
 810884a:	3a30      	subs	r2, #48	; 0x30
 810884c:	f100 0301 	add.w	r3, r0, #1
 8108850:	d014      	beq.n	810887c <_strtod_l+0x244>
 8108852:	9905      	ldr	r1, [sp, #20]
 8108854:	4419      	add	r1, r3
 8108856:	9105      	str	r1, [sp, #20]
 8108858:	462b      	mov	r3, r5
 810885a:	eb00 0e05 	add.w	lr, r0, r5
 810885e:	210a      	movs	r1, #10
 8108860:	4573      	cmp	r3, lr
 8108862:	d113      	bne.n	810888c <_strtod_l+0x254>
 8108864:	182b      	adds	r3, r5, r0
 8108866:	2b08      	cmp	r3, #8
 8108868:	f105 0501 	add.w	r5, r5, #1
 810886c:	4405      	add	r5, r0
 810886e:	dc1c      	bgt.n	81088aa <_strtod_l+0x272>
 8108870:	9907      	ldr	r1, [sp, #28]
 8108872:	230a      	movs	r3, #10
 8108874:	fb03 2301 	mla	r3, r3, r1, r2
 8108878:	9307      	str	r3, [sp, #28]
 810887a:	2300      	movs	r3, #0
 810887c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810887e:	1c51      	adds	r1, r2, #1
 8108880:	9117      	str	r1, [sp, #92]	; 0x5c
 8108882:	7852      	ldrb	r2, [r2, #1]
 8108884:	4618      	mov	r0, r3
 8108886:	e7c9      	b.n	810881c <_strtod_l+0x1e4>
 8108888:	4638      	mov	r0, r7
 810888a:	e7d2      	b.n	8108832 <_strtod_l+0x1fa>
 810888c:	2b08      	cmp	r3, #8
 810888e:	dc04      	bgt.n	810889a <_strtod_l+0x262>
 8108890:	9e07      	ldr	r6, [sp, #28]
 8108892:	434e      	muls	r6, r1
 8108894:	9607      	str	r6, [sp, #28]
 8108896:	3301      	adds	r3, #1
 8108898:	e7e2      	b.n	8108860 <_strtod_l+0x228>
 810889a:	f103 0c01 	add.w	ip, r3, #1
 810889e:	f1bc 0f10 	cmp.w	ip, #16
 81088a2:	bfd8      	it	le
 81088a4:	fb01 f909 	mulle.w	r9, r1, r9
 81088a8:	e7f5      	b.n	8108896 <_strtod_l+0x25e>
 81088aa:	2d10      	cmp	r5, #16
 81088ac:	bfdc      	itt	le
 81088ae:	230a      	movle	r3, #10
 81088b0:	fb03 2909 	mlale	r9, r3, r9, r2
 81088b4:	e7e1      	b.n	810887a <_strtod_l+0x242>
 81088b6:	2300      	movs	r3, #0
 81088b8:	9305      	str	r3, [sp, #20]
 81088ba:	2301      	movs	r3, #1
 81088bc:	e77c      	b.n	81087b8 <_strtod_l+0x180>
 81088be:	f04f 0c00 	mov.w	ip, #0
 81088c2:	f108 0202 	add.w	r2, r8, #2
 81088c6:	9217      	str	r2, [sp, #92]	; 0x5c
 81088c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 81088cc:	e785      	b.n	81087da <_strtod_l+0x1a2>
 81088ce:	f04f 0c01 	mov.w	ip, #1
 81088d2:	e7f6      	b.n	81088c2 <_strtod_l+0x28a>
 81088d4:	0810c534 	.word	0x0810c534
 81088d8:	0810c288 	.word	0x0810c288
 81088dc:	7ff00000 	.word	0x7ff00000
 81088e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81088e2:	1c51      	adds	r1, r2, #1
 81088e4:	9117      	str	r1, [sp, #92]	; 0x5c
 81088e6:	7852      	ldrb	r2, [r2, #1]
 81088e8:	2a30      	cmp	r2, #48	; 0x30
 81088ea:	d0f9      	beq.n	81088e0 <_strtod_l+0x2a8>
 81088ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 81088f0:	2908      	cmp	r1, #8
 81088f2:	f63f af79 	bhi.w	81087e8 <_strtod_l+0x1b0>
 81088f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 81088fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81088fc:	9206      	str	r2, [sp, #24]
 81088fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8108900:	1c51      	adds	r1, r2, #1
 8108902:	9117      	str	r1, [sp, #92]	; 0x5c
 8108904:	7852      	ldrb	r2, [r2, #1]
 8108906:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810890a:	2e09      	cmp	r6, #9
 810890c:	d937      	bls.n	810897e <_strtod_l+0x346>
 810890e:	9e06      	ldr	r6, [sp, #24]
 8108910:	1b89      	subs	r1, r1, r6
 8108912:	2908      	cmp	r1, #8
 8108914:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108918:	dc02      	bgt.n	8108920 <_strtod_l+0x2e8>
 810891a:	4576      	cmp	r6, lr
 810891c:	bfa8      	it	ge
 810891e:	4676      	movge	r6, lr
 8108920:	f1bc 0f00 	cmp.w	ip, #0
 8108924:	d000      	beq.n	8108928 <_strtod_l+0x2f0>
 8108926:	4276      	negs	r6, r6
 8108928:	2d00      	cmp	r5, #0
 810892a:	d14d      	bne.n	81089c8 <_strtod_l+0x390>
 810892c:	9904      	ldr	r1, [sp, #16]
 810892e:	4301      	orrs	r1, r0
 8108930:	f47f aec6 	bne.w	81086c0 <_strtod_l+0x88>
 8108934:	2b00      	cmp	r3, #0
 8108936:	f47f aee1 	bne.w	81086fc <_strtod_l+0xc4>
 810893a:	2a69      	cmp	r2, #105	; 0x69
 810893c:	d027      	beq.n	810898e <_strtod_l+0x356>
 810893e:	dc24      	bgt.n	810898a <_strtod_l+0x352>
 8108940:	2a49      	cmp	r2, #73	; 0x49
 8108942:	d024      	beq.n	810898e <_strtod_l+0x356>
 8108944:	2a4e      	cmp	r2, #78	; 0x4e
 8108946:	f47f aed9 	bne.w	81086fc <_strtod_l+0xc4>
 810894a:	499f      	ldr	r1, [pc, #636]	; (8108bc8 <_strtod_l+0x590>)
 810894c:	a817      	add	r0, sp, #92	; 0x5c
 810894e:	f002 f8b3 	bl	810aab8 <__match>
 8108952:	2800      	cmp	r0, #0
 8108954:	f43f aed2 	beq.w	81086fc <_strtod_l+0xc4>
 8108958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810895a:	781b      	ldrb	r3, [r3, #0]
 810895c:	2b28      	cmp	r3, #40	; 0x28
 810895e:	d12d      	bne.n	81089bc <_strtod_l+0x384>
 8108960:	499a      	ldr	r1, [pc, #616]	; (8108bcc <_strtod_l+0x594>)
 8108962:	aa1a      	add	r2, sp, #104	; 0x68
 8108964:	a817      	add	r0, sp, #92	; 0x5c
 8108966:	f002 f8bb 	bl	810aae0 <__hexnan>
 810896a:	2805      	cmp	r0, #5
 810896c:	d126      	bne.n	81089bc <_strtod_l+0x384>
 810896e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8108970:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8108974:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108978:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810897c:	e6a0      	b.n	81086c0 <_strtod_l+0x88>
 810897e:	210a      	movs	r1, #10
 8108980:	fb01 2e0e 	mla	lr, r1, lr, r2
 8108984:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8108988:	e7b9      	b.n	81088fe <_strtod_l+0x2c6>
 810898a:	2a6e      	cmp	r2, #110	; 0x6e
 810898c:	e7db      	b.n	8108946 <_strtod_l+0x30e>
 810898e:	4990      	ldr	r1, [pc, #576]	; (8108bd0 <_strtod_l+0x598>)
 8108990:	a817      	add	r0, sp, #92	; 0x5c
 8108992:	f002 f891 	bl	810aab8 <__match>
 8108996:	2800      	cmp	r0, #0
 8108998:	f43f aeb0 	beq.w	81086fc <_strtod_l+0xc4>
 810899c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810899e:	498d      	ldr	r1, [pc, #564]	; (8108bd4 <_strtod_l+0x59c>)
 81089a0:	3b01      	subs	r3, #1
 81089a2:	a817      	add	r0, sp, #92	; 0x5c
 81089a4:	9317      	str	r3, [sp, #92]	; 0x5c
 81089a6:	f002 f887 	bl	810aab8 <__match>
 81089aa:	b910      	cbnz	r0, 81089b2 <_strtod_l+0x37a>
 81089ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81089ae:	3301      	adds	r3, #1
 81089b0:	9317      	str	r3, [sp, #92]	; 0x5c
 81089b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8108be4 <_strtod_l+0x5ac>
 81089b6:	f04f 0a00 	mov.w	sl, #0
 81089ba:	e681      	b.n	81086c0 <_strtod_l+0x88>
 81089bc:	4886      	ldr	r0, [pc, #536]	; (8108bd8 <_strtod_l+0x5a0>)
 81089be:	f003 fa2f 	bl	810be20 <nan>
 81089c2:	ec5b ab10 	vmov	sl, fp, d0
 81089c6:	e67b      	b.n	81086c0 <_strtod_l+0x88>
 81089c8:	9b05      	ldr	r3, [sp, #20]
 81089ca:	9807      	ldr	r0, [sp, #28]
 81089cc:	1af3      	subs	r3, r6, r3
 81089ce:	2f00      	cmp	r7, #0
 81089d0:	bf08      	it	eq
 81089d2:	462f      	moveq	r7, r5
 81089d4:	2d10      	cmp	r5, #16
 81089d6:	9306      	str	r3, [sp, #24]
 81089d8:	46a8      	mov	r8, r5
 81089da:	bfa8      	it	ge
 81089dc:	f04f 0810 	movge.w	r8, #16
 81089e0:	f7f7 fe18 	bl	8100614 <__aeabi_ui2d>
 81089e4:	2d09      	cmp	r5, #9
 81089e6:	4682      	mov	sl, r0
 81089e8:	468b      	mov	fp, r1
 81089ea:	dd13      	ble.n	8108a14 <_strtod_l+0x3dc>
 81089ec:	4b7b      	ldr	r3, [pc, #492]	; (8108bdc <_strtod_l+0x5a4>)
 81089ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 81089f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 81089f6:	f7f7 fe87 	bl	8100708 <__aeabi_dmul>
 81089fa:	4682      	mov	sl, r0
 81089fc:	4648      	mov	r0, r9
 81089fe:	468b      	mov	fp, r1
 8108a00:	f7f7 fe08 	bl	8100614 <__aeabi_ui2d>
 8108a04:	4602      	mov	r2, r0
 8108a06:	460b      	mov	r3, r1
 8108a08:	4650      	mov	r0, sl
 8108a0a:	4659      	mov	r1, fp
 8108a0c:	f7f7 fcc6 	bl	810039c <__adddf3>
 8108a10:	4682      	mov	sl, r0
 8108a12:	468b      	mov	fp, r1
 8108a14:	2d0f      	cmp	r5, #15
 8108a16:	dc38      	bgt.n	8108a8a <_strtod_l+0x452>
 8108a18:	9b06      	ldr	r3, [sp, #24]
 8108a1a:	2b00      	cmp	r3, #0
 8108a1c:	f43f ae50 	beq.w	81086c0 <_strtod_l+0x88>
 8108a20:	dd24      	ble.n	8108a6c <_strtod_l+0x434>
 8108a22:	2b16      	cmp	r3, #22
 8108a24:	dc0b      	bgt.n	8108a3e <_strtod_l+0x406>
 8108a26:	496d      	ldr	r1, [pc, #436]	; (8108bdc <_strtod_l+0x5a4>)
 8108a28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8108a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108a30:	4652      	mov	r2, sl
 8108a32:	465b      	mov	r3, fp
 8108a34:	f7f7 fe68 	bl	8100708 <__aeabi_dmul>
 8108a38:	4682      	mov	sl, r0
 8108a3a:	468b      	mov	fp, r1
 8108a3c:	e640      	b.n	81086c0 <_strtod_l+0x88>
 8108a3e:	9a06      	ldr	r2, [sp, #24]
 8108a40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108a44:	4293      	cmp	r3, r2
 8108a46:	db20      	blt.n	8108a8a <_strtod_l+0x452>
 8108a48:	4c64      	ldr	r4, [pc, #400]	; (8108bdc <_strtod_l+0x5a4>)
 8108a4a:	f1c5 050f 	rsb	r5, r5, #15
 8108a4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108a52:	4652      	mov	r2, sl
 8108a54:	465b      	mov	r3, fp
 8108a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108a5a:	f7f7 fe55 	bl	8100708 <__aeabi_dmul>
 8108a5e:	9b06      	ldr	r3, [sp, #24]
 8108a60:	1b5d      	subs	r5, r3, r5
 8108a62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108a66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108a6a:	e7e3      	b.n	8108a34 <_strtod_l+0x3fc>
 8108a6c:	9b06      	ldr	r3, [sp, #24]
 8108a6e:	3316      	adds	r3, #22
 8108a70:	db0b      	blt.n	8108a8a <_strtod_l+0x452>
 8108a72:	9b05      	ldr	r3, [sp, #20]
 8108a74:	1b9e      	subs	r6, r3, r6
 8108a76:	4b59      	ldr	r3, [pc, #356]	; (8108bdc <_strtod_l+0x5a4>)
 8108a78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8108a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108a80:	4650      	mov	r0, sl
 8108a82:	4659      	mov	r1, fp
 8108a84:	f7f7 ff6a 	bl	810095c <__aeabi_ddiv>
 8108a88:	e7d6      	b.n	8108a38 <_strtod_l+0x400>
 8108a8a:	9b06      	ldr	r3, [sp, #24]
 8108a8c:	eba5 0808 	sub.w	r8, r5, r8
 8108a90:	4498      	add	r8, r3
 8108a92:	f1b8 0f00 	cmp.w	r8, #0
 8108a96:	dd74      	ble.n	8108b82 <_strtod_l+0x54a>
 8108a98:	f018 030f 	ands.w	r3, r8, #15
 8108a9c:	d00a      	beq.n	8108ab4 <_strtod_l+0x47c>
 8108a9e:	494f      	ldr	r1, [pc, #316]	; (8108bdc <_strtod_l+0x5a4>)
 8108aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8108aa4:	4652      	mov	r2, sl
 8108aa6:	465b      	mov	r3, fp
 8108aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108aac:	f7f7 fe2c 	bl	8100708 <__aeabi_dmul>
 8108ab0:	4682      	mov	sl, r0
 8108ab2:	468b      	mov	fp, r1
 8108ab4:	f038 080f 	bics.w	r8, r8, #15
 8108ab8:	d04f      	beq.n	8108b5a <_strtod_l+0x522>
 8108aba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8108abe:	dd22      	ble.n	8108b06 <_strtod_l+0x4ce>
 8108ac0:	2500      	movs	r5, #0
 8108ac2:	462e      	mov	r6, r5
 8108ac4:	9507      	str	r5, [sp, #28]
 8108ac6:	9505      	str	r5, [sp, #20]
 8108ac8:	2322      	movs	r3, #34	; 0x22
 8108aca:	f8df b118 	ldr.w	fp, [pc, #280]	; 8108be4 <_strtod_l+0x5ac>
 8108ace:	6023      	str	r3, [r4, #0]
 8108ad0:	f04f 0a00 	mov.w	sl, #0
 8108ad4:	9b07      	ldr	r3, [sp, #28]
 8108ad6:	2b00      	cmp	r3, #0
 8108ad8:	f43f adf2 	beq.w	81086c0 <_strtod_l+0x88>
 8108adc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108ade:	4620      	mov	r0, r4
 8108ae0:	f002 f96e 	bl	810adc0 <_Bfree>
 8108ae4:	9905      	ldr	r1, [sp, #20]
 8108ae6:	4620      	mov	r0, r4
 8108ae8:	f002 f96a 	bl	810adc0 <_Bfree>
 8108aec:	4631      	mov	r1, r6
 8108aee:	4620      	mov	r0, r4
 8108af0:	f002 f966 	bl	810adc0 <_Bfree>
 8108af4:	9907      	ldr	r1, [sp, #28]
 8108af6:	4620      	mov	r0, r4
 8108af8:	f002 f962 	bl	810adc0 <_Bfree>
 8108afc:	4629      	mov	r1, r5
 8108afe:	4620      	mov	r0, r4
 8108b00:	f002 f95e 	bl	810adc0 <_Bfree>
 8108b04:	e5dc      	b.n	81086c0 <_strtod_l+0x88>
 8108b06:	4b36      	ldr	r3, [pc, #216]	; (8108be0 <_strtod_l+0x5a8>)
 8108b08:	9304      	str	r3, [sp, #16]
 8108b0a:	2300      	movs	r3, #0
 8108b0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108b10:	4650      	mov	r0, sl
 8108b12:	4659      	mov	r1, fp
 8108b14:	4699      	mov	r9, r3
 8108b16:	f1b8 0f01 	cmp.w	r8, #1
 8108b1a:	dc21      	bgt.n	8108b60 <_strtod_l+0x528>
 8108b1c:	b10b      	cbz	r3, 8108b22 <_strtod_l+0x4ea>
 8108b1e:	4682      	mov	sl, r0
 8108b20:	468b      	mov	fp, r1
 8108b22:	4b2f      	ldr	r3, [pc, #188]	; (8108be0 <_strtod_l+0x5a8>)
 8108b24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108b28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108b2c:	4652      	mov	r2, sl
 8108b2e:	465b      	mov	r3, fp
 8108b30:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108b34:	f7f7 fde8 	bl	8100708 <__aeabi_dmul>
 8108b38:	4b2a      	ldr	r3, [pc, #168]	; (8108be4 <_strtod_l+0x5ac>)
 8108b3a:	460a      	mov	r2, r1
 8108b3c:	400b      	ands	r3, r1
 8108b3e:	492a      	ldr	r1, [pc, #168]	; (8108be8 <_strtod_l+0x5b0>)
 8108b40:	428b      	cmp	r3, r1
 8108b42:	4682      	mov	sl, r0
 8108b44:	d8bc      	bhi.n	8108ac0 <_strtod_l+0x488>
 8108b46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108b4a:	428b      	cmp	r3, r1
 8108b4c:	bf86      	itte	hi
 8108b4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8108bec <_strtod_l+0x5b4>
 8108b52:	f04f 3aff 	movhi.w	sl, #4294967295
 8108b56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108b5a:	2300      	movs	r3, #0
 8108b5c:	9304      	str	r3, [sp, #16]
 8108b5e:	e084      	b.n	8108c6a <_strtod_l+0x632>
 8108b60:	f018 0f01 	tst.w	r8, #1
 8108b64:	d005      	beq.n	8108b72 <_strtod_l+0x53a>
 8108b66:	9b04      	ldr	r3, [sp, #16]
 8108b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b6c:	f7f7 fdcc 	bl	8100708 <__aeabi_dmul>
 8108b70:	2301      	movs	r3, #1
 8108b72:	9a04      	ldr	r2, [sp, #16]
 8108b74:	3208      	adds	r2, #8
 8108b76:	f109 0901 	add.w	r9, r9, #1
 8108b7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108b7e:	9204      	str	r2, [sp, #16]
 8108b80:	e7c9      	b.n	8108b16 <_strtod_l+0x4de>
 8108b82:	d0ea      	beq.n	8108b5a <_strtod_l+0x522>
 8108b84:	f1c8 0800 	rsb	r8, r8, #0
 8108b88:	f018 020f 	ands.w	r2, r8, #15
 8108b8c:	d00a      	beq.n	8108ba4 <_strtod_l+0x56c>
 8108b8e:	4b13      	ldr	r3, [pc, #76]	; (8108bdc <_strtod_l+0x5a4>)
 8108b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108b94:	4650      	mov	r0, sl
 8108b96:	4659      	mov	r1, fp
 8108b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b9c:	f7f7 fede 	bl	810095c <__aeabi_ddiv>
 8108ba0:	4682      	mov	sl, r0
 8108ba2:	468b      	mov	fp, r1
 8108ba4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8108ba8:	d0d7      	beq.n	8108b5a <_strtod_l+0x522>
 8108baa:	f1b8 0f1f 	cmp.w	r8, #31
 8108bae:	dd1f      	ble.n	8108bf0 <_strtod_l+0x5b8>
 8108bb0:	2500      	movs	r5, #0
 8108bb2:	462e      	mov	r6, r5
 8108bb4:	9507      	str	r5, [sp, #28]
 8108bb6:	9505      	str	r5, [sp, #20]
 8108bb8:	2322      	movs	r3, #34	; 0x22
 8108bba:	f04f 0a00 	mov.w	sl, #0
 8108bbe:	f04f 0b00 	mov.w	fp, #0
 8108bc2:	6023      	str	r3, [r4, #0]
 8108bc4:	e786      	b.n	8108ad4 <_strtod_l+0x49c>
 8108bc6:	bf00      	nop
 8108bc8:	0810c259 	.word	0x0810c259
 8108bcc:	0810c29c 	.word	0x0810c29c
 8108bd0:	0810c251 	.word	0x0810c251
 8108bd4:	0810c3dc 	.word	0x0810c3dc
 8108bd8:	0810c6f0 	.word	0x0810c6f0
 8108bdc:	0810c5d0 	.word	0x0810c5d0
 8108be0:	0810c5a8 	.word	0x0810c5a8
 8108be4:	7ff00000 	.word	0x7ff00000
 8108be8:	7ca00000 	.word	0x7ca00000
 8108bec:	7fefffff 	.word	0x7fefffff
 8108bf0:	f018 0310 	ands.w	r3, r8, #16
 8108bf4:	bf18      	it	ne
 8108bf6:	236a      	movne	r3, #106	; 0x6a
 8108bf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8108fa8 <_strtod_l+0x970>
 8108bfc:	9304      	str	r3, [sp, #16]
 8108bfe:	4650      	mov	r0, sl
 8108c00:	4659      	mov	r1, fp
 8108c02:	2300      	movs	r3, #0
 8108c04:	f018 0f01 	tst.w	r8, #1
 8108c08:	d004      	beq.n	8108c14 <_strtod_l+0x5dc>
 8108c0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108c0e:	f7f7 fd7b 	bl	8100708 <__aeabi_dmul>
 8108c12:	2301      	movs	r3, #1
 8108c14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108c18:	f109 0908 	add.w	r9, r9, #8
 8108c1c:	d1f2      	bne.n	8108c04 <_strtod_l+0x5cc>
 8108c1e:	b10b      	cbz	r3, 8108c24 <_strtod_l+0x5ec>
 8108c20:	4682      	mov	sl, r0
 8108c22:	468b      	mov	fp, r1
 8108c24:	9b04      	ldr	r3, [sp, #16]
 8108c26:	b1c3      	cbz	r3, 8108c5a <_strtod_l+0x622>
 8108c28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8108c2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108c30:	2b00      	cmp	r3, #0
 8108c32:	4659      	mov	r1, fp
 8108c34:	dd11      	ble.n	8108c5a <_strtod_l+0x622>
 8108c36:	2b1f      	cmp	r3, #31
 8108c38:	f340 8124 	ble.w	8108e84 <_strtod_l+0x84c>
 8108c3c:	2b34      	cmp	r3, #52	; 0x34
 8108c3e:	bfde      	ittt	le
 8108c40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8108c44:	f04f 33ff 	movle.w	r3, #4294967295
 8108c48:	fa03 f202 	lslle.w	r2, r3, r2
 8108c4c:	f04f 0a00 	mov.w	sl, #0
 8108c50:	bfcc      	ite	gt
 8108c52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108c56:	ea02 0b01 	andle.w	fp, r2, r1
 8108c5a:	2200      	movs	r2, #0
 8108c5c:	2300      	movs	r3, #0
 8108c5e:	4650      	mov	r0, sl
 8108c60:	4659      	mov	r1, fp
 8108c62:	f7f7 ffb9 	bl	8100bd8 <__aeabi_dcmpeq>
 8108c66:	2800      	cmp	r0, #0
 8108c68:	d1a2      	bne.n	8108bb0 <_strtod_l+0x578>
 8108c6a:	9b07      	ldr	r3, [sp, #28]
 8108c6c:	9300      	str	r3, [sp, #0]
 8108c6e:	9908      	ldr	r1, [sp, #32]
 8108c70:	462b      	mov	r3, r5
 8108c72:	463a      	mov	r2, r7
 8108c74:	4620      	mov	r0, r4
 8108c76:	f002 f90b 	bl	810ae90 <__s2b>
 8108c7a:	9007      	str	r0, [sp, #28]
 8108c7c:	2800      	cmp	r0, #0
 8108c7e:	f43f af1f 	beq.w	8108ac0 <_strtod_l+0x488>
 8108c82:	9b05      	ldr	r3, [sp, #20]
 8108c84:	1b9e      	subs	r6, r3, r6
 8108c86:	9b06      	ldr	r3, [sp, #24]
 8108c88:	2b00      	cmp	r3, #0
 8108c8a:	bfb4      	ite	lt
 8108c8c:	4633      	movlt	r3, r6
 8108c8e:	2300      	movge	r3, #0
 8108c90:	930c      	str	r3, [sp, #48]	; 0x30
 8108c92:	9b06      	ldr	r3, [sp, #24]
 8108c94:	2500      	movs	r5, #0
 8108c96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108c9a:	9312      	str	r3, [sp, #72]	; 0x48
 8108c9c:	462e      	mov	r6, r5
 8108c9e:	9b07      	ldr	r3, [sp, #28]
 8108ca0:	4620      	mov	r0, r4
 8108ca2:	6859      	ldr	r1, [r3, #4]
 8108ca4:	f002 f84c 	bl	810ad40 <_Balloc>
 8108ca8:	9005      	str	r0, [sp, #20]
 8108caa:	2800      	cmp	r0, #0
 8108cac:	f43f af0c 	beq.w	8108ac8 <_strtod_l+0x490>
 8108cb0:	9b07      	ldr	r3, [sp, #28]
 8108cb2:	691a      	ldr	r2, [r3, #16]
 8108cb4:	3202      	adds	r2, #2
 8108cb6:	f103 010c 	add.w	r1, r3, #12
 8108cba:	0092      	lsls	r2, r2, #2
 8108cbc:	300c      	adds	r0, #12
 8108cbe:	f002 f831 	bl	810ad24 <memcpy>
 8108cc2:	ec4b ab10 	vmov	d0, sl, fp
 8108cc6:	aa1a      	add	r2, sp, #104	; 0x68
 8108cc8:	a919      	add	r1, sp, #100	; 0x64
 8108cca:	4620      	mov	r0, r4
 8108ccc:	f002 fc26 	bl	810b51c <__d2b>
 8108cd0:	ec4b ab18 	vmov	d8, sl, fp
 8108cd4:	9018      	str	r0, [sp, #96]	; 0x60
 8108cd6:	2800      	cmp	r0, #0
 8108cd8:	f43f aef6 	beq.w	8108ac8 <_strtod_l+0x490>
 8108cdc:	2101      	movs	r1, #1
 8108cde:	4620      	mov	r0, r4
 8108ce0:	f002 f970 	bl	810afc4 <__i2b>
 8108ce4:	4606      	mov	r6, r0
 8108ce6:	2800      	cmp	r0, #0
 8108ce8:	f43f aeee 	beq.w	8108ac8 <_strtod_l+0x490>
 8108cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108cee:	9904      	ldr	r1, [sp, #16]
 8108cf0:	2b00      	cmp	r3, #0
 8108cf2:	bfab      	itete	ge
 8108cf4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8108cf6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8108cf8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8108cfa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8108cfe:	bfac      	ite	ge
 8108d00:	eb03 0902 	addge.w	r9, r3, r2
 8108d04:	1ad7      	sublt	r7, r2, r3
 8108d06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8108d08:	eba3 0801 	sub.w	r8, r3, r1
 8108d0c:	4490      	add	r8, r2
 8108d0e:	4ba1      	ldr	r3, [pc, #644]	; (8108f94 <_strtod_l+0x95c>)
 8108d10:	f108 38ff 	add.w	r8, r8, #4294967295
 8108d14:	4598      	cmp	r8, r3
 8108d16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108d1a:	f280 80c7 	bge.w	8108eac <_strtod_l+0x874>
 8108d1e:	eba3 0308 	sub.w	r3, r3, r8
 8108d22:	2b1f      	cmp	r3, #31
 8108d24:	eba2 0203 	sub.w	r2, r2, r3
 8108d28:	f04f 0101 	mov.w	r1, #1
 8108d2c:	f300 80b1 	bgt.w	8108e92 <_strtod_l+0x85a>
 8108d30:	fa01 f303 	lsl.w	r3, r1, r3
 8108d34:	930d      	str	r3, [sp, #52]	; 0x34
 8108d36:	2300      	movs	r3, #0
 8108d38:	9308      	str	r3, [sp, #32]
 8108d3a:	eb09 0802 	add.w	r8, r9, r2
 8108d3e:	9b04      	ldr	r3, [sp, #16]
 8108d40:	45c1      	cmp	r9, r8
 8108d42:	4417      	add	r7, r2
 8108d44:	441f      	add	r7, r3
 8108d46:	464b      	mov	r3, r9
 8108d48:	bfa8      	it	ge
 8108d4a:	4643      	movge	r3, r8
 8108d4c:	42bb      	cmp	r3, r7
 8108d4e:	bfa8      	it	ge
 8108d50:	463b      	movge	r3, r7
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	bfc2      	ittt	gt
 8108d56:	eba8 0803 	subgt.w	r8, r8, r3
 8108d5a:	1aff      	subgt	r7, r7, r3
 8108d5c:	eba9 0903 	subgt.w	r9, r9, r3
 8108d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108d62:	2b00      	cmp	r3, #0
 8108d64:	dd17      	ble.n	8108d96 <_strtod_l+0x75e>
 8108d66:	4631      	mov	r1, r6
 8108d68:	461a      	mov	r2, r3
 8108d6a:	4620      	mov	r0, r4
 8108d6c:	f002 f9ea 	bl	810b144 <__pow5mult>
 8108d70:	4606      	mov	r6, r0
 8108d72:	2800      	cmp	r0, #0
 8108d74:	f43f aea8 	beq.w	8108ac8 <_strtod_l+0x490>
 8108d78:	4601      	mov	r1, r0
 8108d7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108d7c:	4620      	mov	r0, r4
 8108d7e:	f002 f937 	bl	810aff0 <__multiply>
 8108d82:	900b      	str	r0, [sp, #44]	; 0x2c
 8108d84:	2800      	cmp	r0, #0
 8108d86:	f43f ae9f 	beq.w	8108ac8 <_strtod_l+0x490>
 8108d8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108d8c:	4620      	mov	r0, r4
 8108d8e:	f002 f817 	bl	810adc0 <_Bfree>
 8108d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108d94:	9318      	str	r3, [sp, #96]	; 0x60
 8108d96:	f1b8 0f00 	cmp.w	r8, #0
 8108d9a:	f300 808c 	bgt.w	8108eb6 <_strtod_l+0x87e>
 8108d9e:	9b06      	ldr	r3, [sp, #24]
 8108da0:	2b00      	cmp	r3, #0
 8108da2:	dd08      	ble.n	8108db6 <_strtod_l+0x77e>
 8108da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8108da6:	9905      	ldr	r1, [sp, #20]
 8108da8:	4620      	mov	r0, r4
 8108daa:	f002 f9cb 	bl	810b144 <__pow5mult>
 8108dae:	9005      	str	r0, [sp, #20]
 8108db0:	2800      	cmp	r0, #0
 8108db2:	f43f ae89 	beq.w	8108ac8 <_strtod_l+0x490>
 8108db6:	2f00      	cmp	r7, #0
 8108db8:	dd08      	ble.n	8108dcc <_strtod_l+0x794>
 8108dba:	9905      	ldr	r1, [sp, #20]
 8108dbc:	463a      	mov	r2, r7
 8108dbe:	4620      	mov	r0, r4
 8108dc0:	f002 fa1a 	bl	810b1f8 <__lshift>
 8108dc4:	9005      	str	r0, [sp, #20]
 8108dc6:	2800      	cmp	r0, #0
 8108dc8:	f43f ae7e 	beq.w	8108ac8 <_strtod_l+0x490>
 8108dcc:	f1b9 0f00 	cmp.w	r9, #0
 8108dd0:	dd08      	ble.n	8108de4 <_strtod_l+0x7ac>
 8108dd2:	4631      	mov	r1, r6
 8108dd4:	464a      	mov	r2, r9
 8108dd6:	4620      	mov	r0, r4
 8108dd8:	f002 fa0e 	bl	810b1f8 <__lshift>
 8108ddc:	4606      	mov	r6, r0
 8108dde:	2800      	cmp	r0, #0
 8108de0:	f43f ae72 	beq.w	8108ac8 <_strtod_l+0x490>
 8108de4:	9a05      	ldr	r2, [sp, #20]
 8108de6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108de8:	4620      	mov	r0, r4
 8108dea:	f002 fa91 	bl	810b310 <__mdiff>
 8108dee:	4605      	mov	r5, r0
 8108df0:	2800      	cmp	r0, #0
 8108df2:	f43f ae69 	beq.w	8108ac8 <_strtod_l+0x490>
 8108df6:	68c3      	ldr	r3, [r0, #12]
 8108df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8108dfa:	2300      	movs	r3, #0
 8108dfc:	60c3      	str	r3, [r0, #12]
 8108dfe:	4631      	mov	r1, r6
 8108e00:	f002 fa6a 	bl	810b2d8 <__mcmp>
 8108e04:	2800      	cmp	r0, #0
 8108e06:	da60      	bge.n	8108eca <_strtod_l+0x892>
 8108e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108e0a:	ea53 030a 	orrs.w	r3, r3, sl
 8108e0e:	f040 8082 	bne.w	8108f16 <_strtod_l+0x8de>
 8108e12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108e16:	2b00      	cmp	r3, #0
 8108e18:	d17d      	bne.n	8108f16 <_strtod_l+0x8de>
 8108e1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108e1e:	0d1b      	lsrs	r3, r3, #20
 8108e20:	051b      	lsls	r3, r3, #20
 8108e22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108e26:	d976      	bls.n	8108f16 <_strtod_l+0x8de>
 8108e28:	696b      	ldr	r3, [r5, #20]
 8108e2a:	b913      	cbnz	r3, 8108e32 <_strtod_l+0x7fa>
 8108e2c:	692b      	ldr	r3, [r5, #16]
 8108e2e:	2b01      	cmp	r3, #1
 8108e30:	dd71      	ble.n	8108f16 <_strtod_l+0x8de>
 8108e32:	4629      	mov	r1, r5
 8108e34:	2201      	movs	r2, #1
 8108e36:	4620      	mov	r0, r4
 8108e38:	f002 f9de 	bl	810b1f8 <__lshift>
 8108e3c:	4631      	mov	r1, r6
 8108e3e:	4605      	mov	r5, r0
 8108e40:	f002 fa4a 	bl	810b2d8 <__mcmp>
 8108e44:	2800      	cmp	r0, #0
 8108e46:	dd66      	ble.n	8108f16 <_strtod_l+0x8de>
 8108e48:	9904      	ldr	r1, [sp, #16]
 8108e4a:	4a53      	ldr	r2, [pc, #332]	; (8108f98 <_strtod_l+0x960>)
 8108e4c:	465b      	mov	r3, fp
 8108e4e:	2900      	cmp	r1, #0
 8108e50:	f000 8081 	beq.w	8108f56 <_strtod_l+0x91e>
 8108e54:	ea02 010b 	and.w	r1, r2, fp
 8108e58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108e5c:	dc7b      	bgt.n	8108f56 <_strtod_l+0x91e>
 8108e5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8108e62:	f77f aea9 	ble.w	8108bb8 <_strtod_l+0x580>
 8108e66:	4b4d      	ldr	r3, [pc, #308]	; (8108f9c <_strtod_l+0x964>)
 8108e68:	4650      	mov	r0, sl
 8108e6a:	4659      	mov	r1, fp
 8108e6c:	2200      	movs	r2, #0
 8108e6e:	f7f7 fc4b 	bl	8100708 <__aeabi_dmul>
 8108e72:	460b      	mov	r3, r1
 8108e74:	4303      	orrs	r3, r0
 8108e76:	bf08      	it	eq
 8108e78:	2322      	moveq	r3, #34	; 0x22
 8108e7a:	4682      	mov	sl, r0
 8108e7c:	468b      	mov	fp, r1
 8108e7e:	bf08      	it	eq
 8108e80:	6023      	streq	r3, [r4, #0]
 8108e82:	e62b      	b.n	8108adc <_strtod_l+0x4a4>
 8108e84:	f04f 32ff 	mov.w	r2, #4294967295
 8108e88:	fa02 f303 	lsl.w	r3, r2, r3
 8108e8c:	ea03 0a0a 	and.w	sl, r3, sl
 8108e90:	e6e3      	b.n	8108c5a <_strtod_l+0x622>
 8108e92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8108e96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108e9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108e9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8108ea2:	fa01 f308 	lsl.w	r3, r1, r8
 8108ea6:	9308      	str	r3, [sp, #32]
 8108ea8:	910d      	str	r1, [sp, #52]	; 0x34
 8108eaa:	e746      	b.n	8108d3a <_strtod_l+0x702>
 8108eac:	2300      	movs	r3, #0
 8108eae:	9308      	str	r3, [sp, #32]
 8108eb0:	2301      	movs	r3, #1
 8108eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8108eb4:	e741      	b.n	8108d3a <_strtod_l+0x702>
 8108eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108eb8:	4642      	mov	r2, r8
 8108eba:	4620      	mov	r0, r4
 8108ebc:	f002 f99c 	bl	810b1f8 <__lshift>
 8108ec0:	9018      	str	r0, [sp, #96]	; 0x60
 8108ec2:	2800      	cmp	r0, #0
 8108ec4:	f47f af6b 	bne.w	8108d9e <_strtod_l+0x766>
 8108ec8:	e5fe      	b.n	8108ac8 <_strtod_l+0x490>
 8108eca:	465f      	mov	r7, fp
 8108ecc:	d16e      	bne.n	8108fac <_strtod_l+0x974>
 8108ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8108ed0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108ed4:	b342      	cbz	r2, 8108f28 <_strtod_l+0x8f0>
 8108ed6:	4a32      	ldr	r2, [pc, #200]	; (8108fa0 <_strtod_l+0x968>)
 8108ed8:	4293      	cmp	r3, r2
 8108eda:	d128      	bne.n	8108f2e <_strtod_l+0x8f6>
 8108edc:	9b04      	ldr	r3, [sp, #16]
 8108ede:	4651      	mov	r1, sl
 8108ee0:	b1eb      	cbz	r3, 8108f1e <_strtod_l+0x8e6>
 8108ee2:	4b2d      	ldr	r3, [pc, #180]	; (8108f98 <_strtod_l+0x960>)
 8108ee4:	403b      	ands	r3, r7
 8108ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8108eea:	f04f 32ff 	mov.w	r2, #4294967295
 8108eee:	d819      	bhi.n	8108f24 <_strtod_l+0x8ec>
 8108ef0:	0d1b      	lsrs	r3, r3, #20
 8108ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8108efa:	4299      	cmp	r1, r3
 8108efc:	d117      	bne.n	8108f2e <_strtod_l+0x8f6>
 8108efe:	4b29      	ldr	r3, [pc, #164]	; (8108fa4 <_strtod_l+0x96c>)
 8108f00:	429f      	cmp	r7, r3
 8108f02:	d102      	bne.n	8108f0a <_strtod_l+0x8d2>
 8108f04:	3101      	adds	r1, #1
 8108f06:	f43f addf 	beq.w	8108ac8 <_strtod_l+0x490>
 8108f0a:	4b23      	ldr	r3, [pc, #140]	; (8108f98 <_strtod_l+0x960>)
 8108f0c:	403b      	ands	r3, r7
 8108f0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108f12:	f04f 0a00 	mov.w	sl, #0
 8108f16:	9b04      	ldr	r3, [sp, #16]
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d1a4      	bne.n	8108e66 <_strtod_l+0x82e>
 8108f1c:	e5de      	b.n	8108adc <_strtod_l+0x4a4>
 8108f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8108f22:	e7ea      	b.n	8108efa <_strtod_l+0x8c2>
 8108f24:	4613      	mov	r3, r2
 8108f26:	e7e8      	b.n	8108efa <_strtod_l+0x8c2>
 8108f28:	ea53 030a 	orrs.w	r3, r3, sl
 8108f2c:	d08c      	beq.n	8108e48 <_strtod_l+0x810>
 8108f2e:	9b08      	ldr	r3, [sp, #32]
 8108f30:	b1db      	cbz	r3, 8108f6a <_strtod_l+0x932>
 8108f32:	423b      	tst	r3, r7
 8108f34:	d0ef      	beq.n	8108f16 <_strtod_l+0x8de>
 8108f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108f38:	9a04      	ldr	r2, [sp, #16]
 8108f3a:	4650      	mov	r0, sl
 8108f3c:	4659      	mov	r1, fp
 8108f3e:	b1c3      	cbz	r3, 8108f72 <_strtod_l+0x93a>
 8108f40:	f7ff fb5c 	bl	81085fc <sulp>
 8108f44:	4602      	mov	r2, r0
 8108f46:	460b      	mov	r3, r1
 8108f48:	ec51 0b18 	vmov	r0, r1, d8
 8108f4c:	f7f7 fa26 	bl	810039c <__adddf3>
 8108f50:	4682      	mov	sl, r0
 8108f52:	468b      	mov	fp, r1
 8108f54:	e7df      	b.n	8108f16 <_strtod_l+0x8de>
 8108f56:	4013      	ands	r3, r2
 8108f58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8108f5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108f60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108f64:	f04f 3aff 	mov.w	sl, #4294967295
 8108f68:	e7d5      	b.n	8108f16 <_strtod_l+0x8de>
 8108f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108f6c:	ea13 0f0a 	tst.w	r3, sl
 8108f70:	e7e0      	b.n	8108f34 <_strtod_l+0x8fc>
 8108f72:	f7ff fb43 	bl	81085fc <sulp>
 8108f76:	4602      	mov	r2, r0
 8108f78:	460b      	mov	r3, r1
 8108f7a:	ec51 0b18 	vmov	r0, r1, d8
 8108f7e:	f7f7 fa0b 	bl	8100398 <__aeabi_dsub>
 8108f82:	2200      	movs	r2, #0
 8108f84:	2300      	movs	r3, #0
 8108f86:	4682      	mov	sl, r0
 8108f88:	468b      	mov	fp, r1
 8108f8a:	f7f7 fe25 	bl	8100bd8 <__aeabi_dcmpeq>
 8108f8e:	2800      	cmp	r0, #0
 8108f90:	d0c1      	beq.n	8108f16 <_strtod_l+0x8de>
 8108f92:	e611      	b.n	8108bb8 <_strtod_l+0x580>
 8108f94:	fffffc02 	.word	0xfffffc02
 8108f98:	7ff00000 	.word	0x7ff00000
 8108f9c:	39500000 	.word	0x39500000
 8108fa0:	000fffff 	.word	0x000fffff
 8108fa4:	7fefffff 	.word	0x7fefffff
 8108fa8:	0810c2b0 	.word	0x0810c2b0
 8108fac:	4631      	mov	r1, r6
 8108fae:	4628      	mov	r0, r5
 8108fb0:	f002 fb10 	bl	810b5d4 <__ratio>
 8108fb4:	ec59 8b10 	vmov	r8, r9, d0
 8108fb8:	ee10 0a10 	vmov	r0, s0
 8108fbc:	2200      	movs	r2, #0
 8108fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8108fc2:	4649      	mov	r1, r9
 8108fc4:	f7f7 fe1c 	bl	8100c00 <__aeabi_dcmple>
 8108fc8:	2800      	cmp	r0, #0
 8108fca:	d07a      	beq.n	81090c2 <_strtod_l+0xa8a>
 8108fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108fce:	2b00      	cmp	r3, #0
 8108fd0:	d04a      	beq.n	8109068 <_strtod_l+0xa30>
 8108fd2:	4b95      	ldr	r3, [pc, #596]	; (8109228 <_strtod_l+0xbf0>)
 8108fd4:	2200      	movs	r2, #0
 8108fd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8108fda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109228 <_strtod_l+0xbf0>
 8108fde:	f04f 0800 	mov.w	r8, #0
 8108fe2:	4b92      	ldr	r3, [pc, #584]	; (810922c <_strtod_l+0xbf4>)
 8108fe4:	403b      	ands	r3, r7
 8108fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8108fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8108fea:	4b91      	ldr	r3, [pc, #580]	; (8109230 <_strtod_l+0xbf8>)
 8108fec:	429a      	cmp	r2, r3
 8108fee:	f040 80b0 	bne.w	8109152 <_strtod_l+0xb1a>
 8108ff2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8108ff6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8108ffa:	ec4b ab10 	vmov	d0, sl, fp
 8108ffe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109002:	f002 fa0f 	bl	810b424 <__ulp>
 8109006:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810900a:	ec53 2b10 	vmov	r2, r3, d0
 810900e:	f7f7 fb7b 	bl	8100708 <__aeabi_dmul>
 8109012:	4652      	mov	r2, sl
 8109014:	465b      	mov	r3, fp
 8109016:	f7f7 f9c1 	bl	810039c <__adddf3>
 810901a:	460b      	mov	r3, r1
 810901c:	4983      	ldr	r1, [pc, #524]	; (810922c <_strtod_l+0xbf4>)
 810901e:	4a85      	ldr	r2, [pc, #532]	; (8109234 <_strtod_l+0xbfc>)
 8109020:	4019      	ands	r1, r3
 8109022:	4291      	cmp	r1, r2
 8109024:	4682      	mov	sl, r0
 8109026:	d960      	bls.n	81090ea <_strtod_l+0xab2>
 8109028:	ee18 3a90 	vmov	r3, s17
 810902c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8109030:	4293      	cmp	r3, r2
 8109032:	d104      	bne.n	810903e <_strtod_l+0xa06>
 8109034:	ee18 3a10 	vmov	r3, s16
 8109038:	3301      	adds	r3, #1
 810903a:	f43f ad45 	beq.w	8108ac8 <_strtod_l+0x490>
 810903e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8109240 <_strtod_l+0xc08>
 8109042:	f04f 3aff 	mov.w	sl, #4294967295
 8109046:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109048:	4620      	mov	r0, r4
 810904a:	f001 feb9 	bl	810adc0 <_Bfree>
 810904e:	9905      	ldr	r1, [sp, #20]
 8109050:	4620      	mov	r0, r4
 8109052:	f001 feb5 	bl	810adc0 <_Bfree>
 8109056:	4631      	mov	r1, r6
 8109058:	4620      	mov	r0, r4
 810905a:	f001 feb1 	bl	810adc0 <_Bfree>
 810905e:	4629      	mov	r1, r5
 8109060:	4620      	mov	r0, r4
 8109062:	f001 fead 	bl	810adc0 <_Bfree>
 8109066:	e61a      	b.n	8108c9e <_strtod_l+0x666>
 8109068:	f1ba 0f00 	cmp.w	sl, #0
 810906c:	d11b      	bne.n	81090a6 <_strtod_l+0xa6e>
 810906e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109072:	b9f3      	cbnz	r3, 81090b2 <_strtod_l+0xa7a>
 8109074:	4b6c      	ldr	r3, [pc, #432]	; (8109228 <_strtod_l+0xbf0>)
 8109076:	2200      	movs	r2, #0
 8109078:	4640      	mov	r0, r8
 810907a:	4649      	mov	r1, r9
 810907c:	f7f7 fdb6 	bl	8100bec <__aeabi_dcmplt>
 8109080:	b9d0      	cbnz	r0, 81090b8 <_strtod_l+0xa80>
 8109082:	4640      	mov	r0, r8
 8109084:	4649      	mov	r1, r9
 8109086:	4b6c      	ldr	r3, [pc, #432]	; (8109238 <_strtod_l+0xc00>)
 8109088:	2200      	movs	r2, #0
 810908a:	f7f7 fb3d 	bl	8100708 <__aeabi_dmul>
 810908e:	4680      	mov	r8, r0
 8109090:	4689      	mov	r9, r1
 8109092:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109096:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810909a:	9315      	str	r3, [sp, #84]	; 0x54
 810909c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81090a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81090a4:	e79d      	b.n	8108fe2 <_strtod_l+0x9aa>
 81090a6:	f1ba 0f01 	cmp.w	sl, #1
 81090aa:	d102      	bne.n	81090b2 <_strtod_l+0xa7a>
 81090ac:	2f00      	cmp	r7, #0
 81090ae:	f43f ad83 	beq.w	8108bb8 <_strtod_l+0x580>
 81090b2:	4b62      	ldr	r3, [pc, #392]	; (810923c <_strtod_l+0xc04>)
 81090b4:	2200      	movs	r2, #0
 81090b6:	e78e      	b.n	8108fd6 <_strtod_l+0x99e>
 81090b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8109238 <_strtod_l+0xc00>
 81090bc:	f04f 0800 	mov.w	r8, #0
 81090c0:	e7e7      	b.n	8109092 <_strtod_l+0xa5a>
 81090c2:	4b5d      	ldr	r3, [pc, #372]	; (8109238 <_strtod_l+0xc00>)
 81090c4:	4640      	mov	r0, r8
 81090c6:	4649      	mov	r1, r9
 81090c8:	2200      	movs	r2, #0
 81090ca:	f7f7 fb1d 	bl	8100708 <__aeabi_dmul>
 81090ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81090d0:	4680      	mov	r8, r0
 81090d2:	4689      	mov	r9, r1
 81090d4:	b933      	cbnz	r3, 81090e4 <_strtod_l+0xaac>
 81090d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81090da:	900e      	str	r0, [sp, #56]	; 0x38
 81090dc:	930f      	str	r3, [sp, #60]	; 0x3c
 81090de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 81090e2:	e7dd      	b.n	81090a0 <_strtod_l+0xa68>
 81090e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 81090e8:	e7f9      	b.n	81090de <_strtod_l+0xaa6>
 81090ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 81090ee:	9b04      	ldr	r3, [sp, #16]
 81090f0:	2b00      	cmp	r3, #0
 81090f2:	d1a8      	bne.n	8109046 <_strtod_l+0xa0e>
 81090f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81090f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81090fa:	0d1b      	lsrs	r3, r3, #20
 81090fc:	051b      	lsls	r3, r3, #20
 81090fe:	429a      	cmp	r2, r3
 8109100:	d1a1      	bne.n	8109046 <_strtod_l+0xa0e>
 8109102:	4640      	mov	r0, r8
 8109104:	4649      	mov	r1, r9
 8109106:	f7f7 fe5f 	bl	8100dc8 <__aeabi_d2lz>
 810910a:	f7f7 facf 	bl	81006ac <__aeabi_l2d>
 810910e:	4602      	mov	r2, r0
 8109110:	460b      	mov	r3, r1
 8109112:	4640      	mov	r0, r8
 8109114:	4649      	mov	r1, r9
 8109116:	f7f7 f93f 	bl	8100398 <__aeabi_dsub>
 810911a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810911c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109120:	ea43 030a 	orr.w	r3, r3, sl
 8109124:	4313      	orrs	r3, r2
 8109126:	4680      	mov	r8, r0
 8109128:	4689      	mov	r9, r1
 810912a:	d055      	beq.n	81091d8 <_strtod_l+0xba0>
 810912c:	a336      	add	r3, pc, #216	; (adr r3, 8109208 <_strtod_l+0xbd0>)
 810912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109132:	f7f7 fd5b 	bl	8100bec <__aeabi_dcmplt>
 8109136:	2800      	cmp	r0, #0
 8109138:	f47f acd0 	bne.w	8108adc <_strtod_l+0x4a4>
 810913c:	a334      	add	r3, pc, #208	; (adr r3, 8109210 <_strtod_l+0xbd8>)
 810913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109142:	4640      	mov	r0, r8
 8109144:	4649      	mov	r1, r9
 8109146:	f7f7 fd6f 	bl	8100c28 <__aeabi_dcmpgt>
 810914a:	2800      	cmp	r0, #0
 810914c:	f43f af7b 	beq.w	8109046 <_strtod_l+0xa0e>
 8109150:	e4c4      	b.n	8108adc <_strtod_l+0x4a4>
 8109152:	9b04      	ldr	r3, [sp, #16]
 8109154:	b333      	cbz	r3, 81091a4 <_strtod_l+0xb6c>
 8109156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109158:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810915c:	d822      	bhi.n	81091a4 <_strtod_l+0xb6c>
 810915e:	a32e      	add	r3, pc, #184	; (adr r3, 8109218 <_strtod_l+0xbe0>)
 8109160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109164:	4640      	mov	r0, r8
 8109166:	4649      	mov	r1, r9
 8109168:	f7f7 fd4a 	bl	8100c00 <__aeabi_dcmple>
 810916c:	b1a0      	cbz	r0, 8109198 <_strtod_l+0xb60>
 810916e:	4649      	mov	r1, r9
 8109170:	4640      	mov	r0, r8
 8109172:	f7f7 fda1 	bl	8100cb8 <__aeabi_d2uiz>
 8109176:	2801      	cmp	r0, #1
 8109178:	bf38      	it	cc
 810917a:	2001      	movcc	r0, #1
 810917c:	f7f7 fa4a 	bl	8100614 <__aeabi_ui2d>
 8109180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109182:	4680      	mov	r8, r0
 8109184:	4689      	mov	r9, r1
 8109186:	bb23      	cbnz	r3, 81091d2 <_strtod_l+0xb9a>
 8109188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810918c:	9010      	str	r0, [sp, #64]	; 0x40
 810918e:	9311      	str	r3, [sp, #68]	; 0x44
 8109190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8109194:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810919a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810919c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81091a0:	1a9b      	subs	r3, r3, r2
 81091a2:	9309      	str	r3, [sp, #36]	; 0x24
 81091a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81091a8:	eeb0 0a48 	vmov.f32	s0, s16
 81091ac:	eef0 0a68 	vmov.f32	s1, s17
 81091b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81091b4:	f002 f936 	bl	810b424 <__ulp>
 81091b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81091bc:	ec53 2b10 	vmov	r2, r3, d0
 81091c0:	f7f7 faa2 	bl	8100708 <__aeabi_dmul>
 81091c4:	ec53 2b18 	vmov	r2, r3, d8
 81091c8:	f7f7 f8e8 	bl	810039c <__adddf3>
 81091cc:	4682      	mov	sl, r0
 81091ce:	468b      	mov	fp, r1
 81091d0:	e78d      	b.n	81090ee <_strtod_l+0xab6>
 81091d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 81091d6:	e7db      	b.n	8109190 <_strtod_l+0xb58>
 81091d8:	a311      	add	r3, pc, #68	; (adr r3, 8109220 <_strtod_l+0xbe8>)
 81091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091de:	f7f7 fd05 	bl	8100bec <__aeabi_dcmplt>
 81091e2:	e7b2      	b.n	810914a <_strtod_l+0xb12>
 81091e4:	2300      	movs	r3, #0
 81091e6:	930a      	str	r3, [sp, #40]	; 0x28
 81091e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 81091ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81091ec:	6013      	str	r3, [r2, #0]
 81091ee:	f7ff ba6b 	b.w	81086c8 <_strtod_l+0x90>
 81091f2:	2a65      	cmp	r2, #101	; 0x65
 81091f4:	f43f ab5f 	beq.w	81088b6 <_strtod_l+0x27e>
 81091f8:	2a45      	cmp	r2, #69	; 0x45
 81091fa:	f43f ab5c 	beq.w	81088b6 <_strtod_l+0x27e>
 81091fe:	2301      	movs	r3, #1
 8109200:	f7ff bb94 	b.w	810892c <_strtod_l+0x2f4>
 8109204:	f3af 8000 	nop.w
 8109208:	94a03595 	.word	0x94a03595
 810920c:	3fdfffff 	.word	0x3fdfffff
 8109210:	35afe535 	.word	0x35afe535
 8109214:	3fe00000 	.word	0x3fe00000
 8109218:	ffc00000 	.word	0xffc00000
 810921c:	41dfffff 	.word	0x41dfffff
 8109220:	94a03595 	.word	0x94a03595
 8109224:	3fcfffff 	.word	0x3fcfffff
 8109228:	3ff00000 	.word	0x3ff00000
 810922c:	7ff00000 	.word	0x7ff00000
 8109230:	7fe00000 	.word	0x7fe00000
 8109234:	7c9fffff 	.word	0x7c9fffff
 8109238:	3fe00000 	.word	0x3fe00000
 810923c:	bff00000 	.word	0xbff00000
 8109240:	7fefffff 	.word	0x7fefffff

08109244 <_strtod_r>:
 8109244:	4b01      	ldr	r3, [pc, #4]	; (810924c <_strtod_r+0x8>)
 8109246:	f7ff b9f7 	b.w	8108638 <_strtod_l>
 810924a:	bf00      	nop
 810924c:	10000078 	.word	0x10000078

08109250 <_strtol_l.constprop.0>:
 8109250:	2b01      	cmp	r3, #1
 8109252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109256:	d001      	beq.n	810925c <_strtol_l.constprop.0+0xc>
 8109258:	2b24      	cmp	r3, #36	; 0x24
 810925a:	d906      	bls.n	810926a <_strtol_l.constprop.0+0x1a>
 810925c:	f7fe fa86 	bl	810776c <__errno>
 8109260:	2316      	movs	r3, #22
 8109262:	6003      	str	r3, [r0, #0]
 8109264:	2000      	movs	r0, #0
 8109266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810926a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8109350 <_strtol_l.constprop.0+0x100>
 810926e:	460d      	mov	r5, r1
 8109270:	462e      	mov	r6, r5
 8109272:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109276:	f814 700c 	ldrb.w	r7, [r4, ip]
 810927a:	f017 0708 	ands.w	r7, r7, #8
 810927e:	d1f7      	bne.n	8109270 <_strtol_l.constprop.0+0x20>
 8109280:	2c2d      	cmp	r4, #45	; 0x2d
 8109282:	d132      	bne.n	81092ea <_strtol_l.constprop.0+0x9a>
 8109284:	782c      	ldrb	r4, [r5, #0]
 8109286:	2701      	movs	r7, #1
 8109288:	1cb5      	adds	r5, r6, #2
 810928a:	2b00      	cmp	r3, #0
 810928c:	d05b      	beq.n	8109346 <_strtol_l.constprop.0+0xf6>
 810928e:	2b10      	cmp	r3, #16
 8109290:	d109      	bne.n	81092a6 <_strtol_l.constprop.0+0x56>
 8109292:	2c30      	cmp	r4, #48	; 0x30
 8109294:	d107      	bne.n	81092a6 <_strtol_l.constprop.0+0x56>
 8109296:	782c      	ldrb	r4, [r5, #0]
 8109298:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810929c:	2c58      	cmp	r4, #88	; 0x58
 810929e:	d14d      	bne.n	810933c <_strtol_l.constprop.0+0xec>
 81092a0:	786c      	ldrb	r4, [r5, #1]
 81092a2:	2310      	movs	r3, #16
 81092a4:	3502      	adds	r5, #2
 81092a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 81092aa:	f108 38ff 	add.w	r8, r8, #4294967295
 81092ae:	f04f 0c00 	mov.w	ip, #0
 81092b2:	fbb8 f9f3 	udiv	r9, r8, r3
 81092b6:	4666      	mov	r6, ip
 81092b8:	fb03 8a19 	mls	sl, r3, r9, r8
 81092bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 81092c0:	f1be 0f09 	cmp.w	lr, #9
 81092c4:	d816      	bhi.n	81092f4 <_strtol_l.constprop.0+0xa4>
 81092c6:	4674      	mov	r4, lr
 81092c8:	42a3      	cmp	r3, r4
 81092ca:	dd24      	ble.n	8109316 <_strtol_l.constprop.0+0xc6>
 81092cc:	f1bc 0f00 	cmp.w	ip, #0
 81092d0:	db1e      	blt.n	8109310 <_strtol_l.constprop.0+0xc0>
 81092d2:	45b1      	cmp	r9, r6
 81092d4:	d31c      	bcc.n	8109310 <_strtol_l.constprop.0+0xc0>
 81092d6:	d101      	bne.n	81092dc <_strtol_l.constprop.0+0x8c>
 81092d8:	45a2      	cmp	sl, r4
 81092da:	db19      	blt.n	8109310 <_strtol_l.constprop.0+0xc0>
 81092dc:	fb06 4603 	mla	r6, r6, r3, r4
 81092e0:	f04f 0c01 	mov.w	ip, #1
 81092e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 81092e8:	e7e8      	b.n	81092bc <_strtol_l.constprop.0+0x6c>
 81092ea:	2c2b      	cmp	r4, #43	; 0x2b
 81092ec:	bf04      	itt	eq
 81092ee:	782c      	ldrbeq	r4, [r5, #0]
 81092f0:	1cb5      	addeq	r5, r6, #2
 81092f2:	e7ca      	b.n	810928a <_strtol_l.constprop.0+0x3a>
 81092f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 81092f8:	f1be 0f19 	cmp.w	lr, #25
 81092fc:	d801      	bhi.n	8109302 <_strtol_l.constprop.0+0xb2>
 81092fe:	3c37      	subs	r4, #55	; 0x37
 8109300:	e7e2      	b.n	81092c8 <_strtol_l.constprop.0+0x78>
 8109302:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8109306:	f1be 0f19 	cmp.w	lr, #25
 810930a:	d804      	bhi.n	8109316 <_strtol_l.constprop.0+0xc6>
 810930c:	3c57      	subs	r4, #87	; 0x57
 810930e:	e7db      	b.n	81092c8 <_strtol_l.constprop.0+0x78>
 8109310:	f04f 3cff 	mov.w	ip, #4294967295
 8109314:	e7e6      	b.n	81092e4 <_strtol_l.constprop.0+0x94>
 8109316:	f1bc 0f00 	cmp.w	ip, #0
 810931a:	da05      	bge.n	8109328 <_strtol_l.constprop.0+0xd8>
 810931c:	2322      	movs	r3, #34	; 0x22
 810931e:	6003      	str	r3, [r0, #0]
 8109320:	4646      	mov	r6, r8
 8109322:	b942      	cbnz	r2, 8109336 <_strtol_l.constprop.0+0xe6>
 8109324:	4630      	mov	r0, r6
 8109326:	e79e      	b.n	8109266 <_strtol_l.constprop.0+0x16>
 8109328:	b107      	cbz	r7, 810932c <_strtol_l.constprop.0+0xdc>
 810932a:	4276      	negs	r6, r6
 810932c:	2a00      	cmp	r2, #0
 810932e:	d0f9      	beq.n	8109324 <_strtol_l.constprop.0+0xd4>
 8109330:	f1bc 0f00 	cmp.w	ip, #0
 8109334:	d000      	beq.n	8109338 <_strtol_l.constprop.0+0xe8>
 8109336:	1e69      	subs	r1, r5, #1
 8109338:	6011      	str	r1, [r2, #0]
 810933a:	e7f3      	b.n	8109324 <_strtol_l.constprop.0+0xd4>
 810933c:	2430      	movs	r4, #48	; 0x30
 810933e:	2b00      	cmp	r3, #0
 8109340:	d1b1      	bne.n	81092a6 <_strtol_l.constprop.0+0x56>
 8109342:	2308      	movs	r3, #8
 8109344:	e7af      	b.n	81092a6 <_strtol_l.constprop.0+0x56>
 8109346:	2c30      	cmp	r4, #48	; 0x30
 8109348:	d0a5      	beq.n	8109296 <_strtol_l.constprop.0+0x46>
 810934a:	230a      	movs	r3, #10
 810934c:	e7ab      	b.n	81092a6 <_strtol_l.constprop.0+0x56>
 810934e:	bf00      	nop
 8109350:	0810c2d9 	.word	0x0810c2d9

08109354 <_strtol_r>:
 8109354:	f7ff bf7c 	b.w	8109250 <_strtol_l.constprop.0>

08109358 <__swbuf_r>:
 8109358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810935a:	460e      	mov	r6, r1
 810935c:	4614      	mov	r4, r2
 810935e:	4605      	mov	r5, r0
 8109360:	b118      	cbz	r0, 810936a <__swbuf_r+0x12>
 8109362:	6983      	ldr	r3, [r0, #24]
 8109364:	b90b      	cbnz	r3, 810936a <__swbuf_r+0x12>
 8109366:	f001 f84b 	bl	810a400 <__sinit>
 810936a:	4b21      	ldr	r3, [pc, #132]	; (81093f0 <__swbuf_r+0x98>)
 810936c:	429c      	cmp	r4, r3
 810936e:	d12b      	bne.n	81093c8 <__swbuf_r+0x70>
 8109370:	686c      	ldr	r4, [r5, #4]
 8109372:	69a3      	ldr	r3, [r4, #24]
 8109374:	60a3      	str	r3, [r4, #8]
 8109376:	89a3      	ldrh	r3, [r4, #12]
 8109378:	071a      	lsls	r2, r3, #28
 810937a:	d52f      	bpl.n	81093dc <__swbuf_r+0x84>
 810937c:	6923      	ldr	r3, [r4, #16]
 810937e:	b36b      	cbz	r3, 81093dc <__swbuf_r+0x84>
 8109380:	6923      	ldr	r3, [r4, #16]
 8109382:	6820      	ldr	r0, [r4, #0]
 8109384:	1ac0      	subs	r0, r0, r3
 8109386:	6963      	ldr	r3, [r4, #20]
 8109388:	b2f6      	uxtb	r6, r6
 810938a:	4283      	cmp	r3, r0
 810938c:	4637      	mov	r7, r6
 810938e:	dc04      	bgt.n	810939a <__swbuf_r+0x42>
 8109390:	4621      	mov	r1, r4
 8109392:	4628      	mov	r0, r5
 8109394:	f000 ffa0 	bl	810a2d8 <_fflush_r>
 8109398:	bb30      	cbnz	r0, 81093e8 <__swbuf_r+0x90>
 810939a:	68a3      	ldr	r3, [r4, #8]
 810939c:	3b01      	subs	r3, #1
 810939e:	60a3      	str	r3, [r4, #8]
 81093a0:	6823      	ldr	r3, [r4, #0]
 81093a2:	1c5a      	adds	r2, r3, #1
 81093a4:	6022      	str	r2, [r4, #0]
 81093a6:	701e      	strb	r6, [r3, #0]
 81093a8:	6963      	ldr	r3, [r4, #20]
 81093aa:	3001      	adds	r0, #1
 81093ac:	4283      	cmp	r3, r0
 81093ae:	d004      	beq.n	81093ba <__swbuf_r+0x62>
 81093b0:	89a3      	ldrh	r3, [r4, #12]
 81093b2:	07db      	lsls	r3, r3, #31
 81093b4:	d506      	bpl.n	81093c4 <__swbuf_r+0x6c>
 81093b6:	2e0a      	cmp	r6, #10
 81093b8:	d104      	bne.n	81093c4 <__swbuf_r+0x6c>
 81093ba:	4621      	mov	r1, r4
 81093bc:	4628      	mov	r0, r5
 81093be:	f000 ff8b 	bl	810a2d8 <_fflush_r>
 81093c2:	b988      	cbnz	r0, 81093e8 <__swbuf_r+0x90>
 81093c4:	4638      	mov	r0, r7
 81093c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81093c8:	4b0a      	ldr	r3, [pc, #40]	; (81093f4 <__swbuf_r+0x9c>)
 81093ca:	429c      	cmp	r4, r3
 81093cc:	d101      	bne.n	81093d2 <__swbuf_r+0x7a>
 81093ce:	68ac      	ldr	r4, [r5, #8]
 81093d0:	e7cf      	b.n	8109372 <__swbuf_r+0x1a>
 81093d2:	4b09      	ldr	r3, [pc, #36]	; (81093f8 <__swbuf_r+0xa0>)
 81093d4:	429c      	cmp	r4, r3
 81093d6:	bf08      	it	eq
 81093d8:	68ec      	ldreq	r4, [r5, #12]
 81093da:	e7ca      	b.n	8109372 <__swbuf_r+0x1a>
 81093dc:	4621      	mov	r1, r4
 81093de:	4628      	mov	r0, r5
 81093e0:	f000 f80c 	bl	81093fc <__swsetup_r>
 81093e4:	2800      	cmp	r0, #0
 81093e6:	d0cb      	beq.n	8109380 <__swbuf_r+0x28>
 81093e8:	f04f 37ff 	mov.w	r7, #4294967295
 81093ec:	e7ea      	b.n	81093c4 <__swbuf_r+0x6c>
 81093ee:	bf00      	nop
 81093f0:	0810c48c 	.word	0x0810c48c
 81093f4:	0810c4ac 	.word	0x0810c4ac
 81093f8:	0810c46c 	.word	0x0810c46c

081093fc <__swsetup_r>:
 81093fc:	4b32      	ldr	r3, [pc, #200]	; (81094c8 <__swsetup_r+0xcc>)
 81093fe:	b570      	push	{r4, r5, r6, lr}
 8109400:	681d      	ldr	r5, [r3, #0]
 8109402:	4606      	mov	r6, r0
 8109404:	460c      	mov	r4, r1
 8109406:	b125      	cbz	r5, 8109412 <__swsetup_r+0x16>
 8109408:	69ab      	ldr	r3, [r5, #24]
 810940a:	b913      	cbnz	r3, 8109412 <__swsetup_r+0x16>
 810940c:	4628      	mov	r0, r5
 810940e:	f000 fff7 	bl	810a400 <__sinit>
 8109412:	4b2e      	ldr	r3, [pc, #184]	; (81094cc <__swsetup_r+0xd0>)
 8109414:	429c      	cmp	r4, r3
 8109416:	d10f      	bne.n	8109438 <__swsetup_r+0x3c>
 8109418:	686c      	ldr	r4, [r5, #4]
 810941a:	89a3      	ldrh	r3, [r4, #12]
 810941c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109420:	0719      	lsls	r1, r3, #28
 8109422:	d42c      	bmi.n	810947e <__swsetup_r+0x82>
 8109424:	06dd      	lsls	r5, r3, #27
 8109426:	d411      	bmi.n	810944c <__swsetup_r+0x50>
 8109428:	2309      	movs	r3, #9
 810942a:	6033      	str	r3, [r6, #0]
 810942c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8109430:	81a3      	strh	r3, [r4, #12]
 8109432:	f04f 30ff 	mov.w	r0, #4294967295
 8109436:	e03e      	b.n	81094b6 <__swsetup_r+0xba>
 8109438:	4b25      	ldr	r3, [pc, #148]	; (81094d0 <__swsetup_r+0xd4>)
 810943a:	429c      	cmp	r4, r3
 810943c:	d101      	bne.n	8109442 <__swsetup_r+0x46>
 810943e:	68ac      	ldr	r4, [r5, #8]
 8109440:	e7eb      	b.n	810941a <__swsetup_r+0x1e>
 8109442:	4b24      	ldr	r3, [pc, #144]	; (81094d4 <__swsetup_r+0xd8>)
 8109444:	429c      	cmp	r4, r3
 8109446:	bf08      	it	eq
 8109448:	68ec      	ldreq	r4, [r5, #12]
 810944a:	e7e6      	b.n	810941a <__swsetup_r+0x1e>
 810944c:	0758      	lsls	r0, r3, #29
 810944e:	d512      	bpl.n	8109476 <__swsetup_r+0x7a>
 8109450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8109452:	b141      	cbz	r1, 8109466 <__swsetup_r+0x6a>
 8109454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109458:	4299      	cmp	r1, r3
 810945a:	d002      	beq.n	8109462 <__swsetup_r+0x66>
 810945c:	4630      	mov	r0, r6
 810945e:	f002 f947 	bl	810b6f0 <_free_r>
 8109462:	2300      	movs	r3, #0
 8109464:	6363      	str	r3, [r4, #52]	; 0x34
 8109466:	89a3      	ldrh	r3, [r4, #12]
 8109468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810946c:	81a3      	strh	r3, [r4, #12]
 810946e:	2300      	movs	r3, #0
 8109470:	6063      	str	r3, [r4, #4]
 8109472:	6923      	ldr	r3, [r4, #16]
 8109474:	6023      	str	r3, [r4, #0]
 8109476:	89a3      	ldrh	r3, [r4, #12]
 8109478:	f043 0308 	orr.w	r3, r3, #8
 810947c:	81a3      	strh	r3, [r4, #12]
 810947e:	6923      	ldr	r3, [r4, #16]
 8109480:	b94b      	cbnz	r3, 8109496 <__swsetup_r+0x9a>
 8109482:	89a3      	ldrh	r3, [r4, #12]
 8109484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810948c:	d003      	beq.n	8109496 <__swsetup_r+0x9a>
 810948e:	4621      	mov	r1, r4
 8109490:	4630      	mov	r0, r6
 8109492:	f001 fbed 	bl	810ac70 <__smakebuf_r>
 8109496:	89a0      	ldrh	r0, [r4, #12]
 8109498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810949c:	f010 0301 	ands.w	r3, r0, #1
 81094a0:	d00a      	beq.n	81094b8 <__swsetup_r+0xbc>
 81094a2:	2300      	movs	r3, #0
 81094a4:	60a3      	str	r3, [r4, #8]
 81094a6:	6963      	ldr	r3, [r4, #20]
 81094a8:	425b      	negs	r3, r3
 81094aa:	61a3      	str	r3, [r4, #24]
 81094ac:	6923      	ldr	r3, [r4, #16]
 81094ae:	b943      	cbnz	r3, 81094c2 <__swsetup_r+0xc6>
 81094b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81094b4:	d1ba      	bne.n	810942c <__swsetup_r+0x30>
 81094b6:	bd70      	pop	{r4, r5, r6, pc}
 81094b8:	0781      	lsls	r1, r0, #30
 81094ba:	bf58      	it	pl
 81094bc:	6963      	ldrpl	r3, [r4, #20]
 81094be:	60a3      	str	r3, [r4, #8]
 81094c0:	e7f4      	b.n	81094ac <__swsetup_r+0xb0>
 81094c2:	2000      	movs	r0, #0
 81094c4:	e7f7      	b.n	81094b6 <__swsetup_r+0xba>
 81094c6:	bf00      	nop
 81094c8:	10000010 	.word	0x10000010
 81094cc:	0810c48c 	.word	0x0810c48c
 81094d0:	0810c4ac 	.word	0x0810c4ac
 81094d4:	0810c46c 	.word	0x0810c46c

081094d8 <quorem>:
 81094d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81094dc:	6903      	ldr	r3, [r0, #16]
 81094de:	690c      	ldr	r4, [r1, #16]
 81094e0:	42a3      	cmp	r3, r4
 81094e2:	4607      	mov	r7, r0
 81094e4:	f2c0 8081 	blt.w	81095ea <quorem+0x112>
 81094e8:	3c01      	subs	r4, #1
 81094ea:	f101 0814 	add.w	r8, r1, #20
 81094ee:	f100 0514 	add.w	r5, r0, #20
 81094f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81094f6:	9301      	str	r3, [sp, #4]
 81094f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81094fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109500:	3301      	adds	r3, #1
 8109502:	429a      	cmp	r2, r3
 8109504:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8109508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810950c:	fbb2 f6f3 	udiv	r6, r2, r3
 8109510:	d331      	bcc.n	8109576 <quorem+0x9e>
 8109512:	f04f 0e00 	mov.w	lr, #0
 8109516:	4640      	mov	r0, r8
 8109518:	46ac      	mov	ip, r5
 810951a:	46f2      	mov	sl, lr
 810951c:	f850 2b04 	ldr.w	r2, [r0], #4
 8109520:	b293      	uxth	r3, r2
 8109522:	fb06 e303 	mla	r3, r6, r3, lr
 8109526:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810952a:	b29b      	uxth	r3, r3
 810952c:	ebaa 0303 	sub.w	r3, sl, r3
 8109530:	f8dc a000 	ldr.w	sl, [ip]
 8109534:	0c12      	lsrs	r2, r2, #16
 8109536:	fa13 f38a 	uxtah	r3, r3, sl
 810953a:	fb06 e202 	mla	r2, r6, r2, lr
 810953e:	9300      	str	r3, [sp, #0]
 8109540:	9b00      	ldr	r3, [sp, #0]
 8109542:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8109546:	b292      	uxth	r2, r2
 8109548:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810954c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109550:	f8bd 3000 	ldrh.w	r3, [sp]
 8109554:	4581      	cmp	r9, r0
 8109556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810955a:	f84c 3b04 	str.w	r3, [ip], #4
 810955e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8109562:	d2db      	bcs.n	810951c <quorem+0x44>
 8109564:	f855 300b 	ldr.w	r3, [r5, fp]
 8109568:	b92b      	cbnz	r3, 8109576 <quorem+0x9e>
 810956a:	9b01      	ldr	r3, [sp, #4]
 810956c:	3b04      	subs	r3, #4
 810956e:	429d      	cmp	r5, r3
 8109570:	461a      	mov	r2, r3
 8109572:	d32e      	bcc.n	81095d2 <quorem+0xfa>
 8109574:	613c      	str	r4, [r7, #16]
 8109576:	4638      	mov	r0, r7
 8109578:	f001 feae 	bl	810b2d8 <__mcmp>
 810957c:	2800      	cmp	r0, #0
 810957e:	db24      	blt.n	81095ca <quorem+0xf2>
 8109580:	3601      	adds	r6, #1
 8109582:	4628      	mov	r0, r5
 8109584:	f04f 0c00 	mov.w	ip, #0
 8109588:	f858 2b04 	ldr.w	r2, [r8], #4
 810958c:	f8d0 e000 	ldr.w	lr, [r0]
 8109590:	b293      	uxth	r3, r2
 8109592:	ebac 0303 	sub.w	r3, ip, r3
 8109596:	0c12      	lsrs	r2, r2, #16
 8109598:	fa13 f38e 	uxtah	r3, r3, lr
 810959c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 81095a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81095a4:	b29b      	uxth	r3, r3
 81095a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81095aa:	45c1      	cmp	r9, r8
 81095ac:	f840 3b04 	str.w	r3, [r0], #4
 81095b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81095b4:	d2e8      	bcs.n	8109588 <quorem+0xb0>
 81095b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81095ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81095be:	b922      	cbnz	r2, 81095ca <quorem+0xf2>
 81095c0:	3b04      	subs	r3, #4
 81095c2:	429d      	cmp	r5, r3
 81095c4:	461a      	mov	r2, r3
 81095c6:	d30a      	bcc.n	81095de <quorem+0x106>
 81095c8:	613c      	str	r4, [r7, #16]
 81095ca:	4630      	mov	r0, r6
 81095cc:	b003      	add	sp, #12
 81095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81095d2:	6812      	ldr	r2, [r2, #0]
 81095d4:	3b04      	subs	r3, #4
 81095d6:	2a00      	cmp	r2, #0
 81095d8:	d1cc      	bne.n	8109574 <quorem+0x9c>
 81095da:	3c01      	subs	r4, #1
 81095dc:	e7c7      	b.n	810956e <quorem+0x96>
 81095de:	6812      	ldr	r2, [r2, #0]
 81095e0:	3b04      	subs	r3, #4
 81095e2:	2a00      	cmp	r2, #0
 81095e4:	d1f0      	bne.n	81095c8 <quorem+0xf0>
 81095e6:	3c01      	subs	r4, #1
 81095e8:	e7eb      	b.n	81095c2 <quorem+0xea>
 81095ea:	2000      	movs	r0, #0
 81095ec:	e7ee      	b.n	81095cc <quorem+0xf4>
	...

081095f0 <_dtoa_r>:
 81095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81095f4:	ed2d 8b04 	vpush	{d8-d9}
 81095f8:	ec57 6b10 	vmov	r6, r7, d0
 81095fc:	b093      	sub	sp, #76	; 0x4c
 81095fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109600:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8109604:	9106      	str	r1, [sp, #24]
 8109606:	ee10 aa10 	vmov	sl, s0
 810960a:	4604      	mov	r4, r0
 810960c:	9209      	str	r2, [sp, #36]	; 0x24
 810960e:	930c      	str	r3, [sp, #48]	; 0x30
 8109610:	46bb      	mov	fp, r7
 8109612:	b975      	cbnz	r5, 8109632 <_dtoa_r+0x42>
 8109614:	2010      	movs	r0, #16
 8109616:	f001 fb6b 	bl	810acf0 <malloc>
 810961a:	4602      	mov	r2, r0
 810961c:	6260      	str	r0, [r4, #36]	; 0x24
 810961e:	b920      	cbnz	r0, 810962a <_dtoa_r+0x3a>
 8109620:	4ba7      	ldr	r3, [pc, #668]	; (81098c0 <_dtoa_r+0x2d0>)
 8109622:	21ea      	movs	r1, #234	; 0xea
 8109624:	48a7      	ldr	r0, [pc, #668]	; (81098c4 <_dtoa_r+0x2d4>)
 8109626:	f002 fc89 	bl	810bf3c <__assert_func>
 810962a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810962e:	6005      	str	r5, [r0, #0]
 8109630:	60c5      	str	r5, [r0, #12]
 8109632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109634:	6819      	ldr	r1, [r3, #0]
 8109636:	b151      	cbz	r1, 810964e <_dtoa_r+0x5e>
 8109638:	685a      	ldr	r2, [r3, #4]
 810963a:	604a      	str	r2, [r1, #4]
 810963c:	2301      	movs	r3, #1
 810963e:	4093      	lsls	r3, r2
 8109640:	608b      	str	r3, [r1, #8]
 8109642:	4620      	mov	r0, r4
 8109644:	f001 fbbc 	bl	810adc0 <_Bfree>
 8109648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810964a:	2200      	movs	r2, #0
 810964c:	601a      	str	r2, [r3, #0]
 810964e:	1e3b      	subs	r3, r7, #0
 8109650:	bfaa      	itet	ge
 8109652:	2300      	movge	r3, #0
 8109654:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8109658:	f8c8 3000 	strge.w	r3, [r8]
 810965c:	4b9a      	ldr	r3, [pc, #616]	; (81098c8 <_dtoa_r+0x2d8>)
 810965e:	bfbc      	itt	lt
 8109660:	2201      	movlt	r2, #1
 8109662:	f8c8 2000 	strlt.w	r2, [r8]
 8109666:	ea33 030b 	bics.w	r3, r3, fp
 810966a:	d11b      	bne.n	81096a4 <_dtoa_r+0xb4>
 810966c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810966e:	f242 730f 	movw	r3, #9999	; 0x270f
 8109672:	6013      	str	r3, [r2, #0]
 8109674:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109678:	4333      	orrs	r3, r6
 810967a:	f000 8592 	beq.w	810a1a2 <_dtoa_r+0xbb2>
 810967e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109680:	b963      	cbnz	r3, 810969c <_dtoa_r+0xac>
 8109682:	4b92      	ldr	r3, [pc, #584]	; (81098cc <_dtoa_r+0x2dc>)
 8109684:	e022      	b.n	81096cc <_dtoa_r+0xdc>
 8109686:	4b92      	ldr	r3, [pc, #584]	; (81098d0 <_dtoa_r+0x2e0>)
 8109688:	9301      	str	r3, [sp, #4]
 810968a:	3308      	adds	r3, #8
 810968c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810968e:	6013      	str	r3, [r2, #0]
 8109690:	9801      	ldr	r0, [sp, #4]
 8109692:	b013      	add	sp, #76	; 0x4c
 8109694:	ecbd 8b04 	vpop	{d8-d9}
 8109698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810969c:	4b8b      	ldr	r3, [pc, #556]	; (81098cc <_dtoa_r+0x2dc>)
 810969e:	9301      	str	r3, [sp, #4]
 81096a0:	3303      	adds	r3, #3
 81096a2:	e7f3      	b.n	810968c <_dtoa_r+0x9c>
 81096a4:	2200      	movs	r2, #0
 81096a6:	2300      	movs	r3, #0
 81096a8:	4650      	mov	r0, sl
 81096aa:	4659      	mov	r1, fp
 81096ac:	f7f7 fa94 	bl	8100bd8 <__aeabi_dcmpeq>
 81096b0:	ec4b ab19 	vmov	d9, sl, fp
 81096b4:	4680      	mov	r8, r0
 81096b6:	b158      	cbz	r0, 81096d0 <_dtoa_r+0xe0>
 81096b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81096ba:	2301      	movs	r3, #1
 81096bc:	6013      	str	r3, [r2, #0]
 81096be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81096c0:	2b00      	cmp	r3, #0
 81096c2:	f000 856b 	beq.w	810a19c <_dtoa_r+0xbac>
 81096c6:	4883      	ldr	r0, [pc, #524]	; (81098d4 <_dtoa_r+0x2e4>)
 81096c8:	6018      	str	r0, [r3, #0]
 81096ca:	1e43      	subs	r3, r0, #1
 81096cc:	9301      	str	r3, [sp, #4]
 81096ce:	e7df      	b.n	8109690 <_dtoa_r+0xa0>
 81096d0:	ec4b ab10 	vmov	d0, sl, fp
 81096d4:	aa10      	add	r2, sp, #64	; 0x40
 81096d6:	a911      	add	r1, sp, #68	; 0x44
 81096d8:	4620      	mov	r0, r4
 81096da:	f001 ff1f 	bl	810b51c <__d2b>
 81096de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 81096e2:	ee08 0a10 	vmov	s16, r0
 81096e6:	2d00      	cmp	r5, #0
 81096e8:	f000 8084 	beq.w	81097f4 <_dtoa_r+0x204>
 81096ec:	ee19 3a90 	vmov	r3, s19
 81096f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81096f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81096f8:	4656      	mov	r6, sl
 81096fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81096fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8109702:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8109706:	4b74      	ldr	r3, [pc, #464]	; (81098d8 <_dtoa_r+0x2e8>)
 8109708:	2200      	movs	r2, #0
 810970a:	4630      	mov	r0, r6
 810970c:	4639      	mov	r1, r7
 810970e:	f7f6 fe43 	bl	8100398 <__aeabi_dsub>
 8109712:	a365      	add	r3, pc, #404	; (adr r3, 81098a8 <_dtoa_r+0x2b8>)
 8109714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109718:	f7f6 fff6 	bl	8100708 <__aeabi_dmul>
 810971c:	a364      	add	r3, pc, #400	; (adr r3, 81098b0 <_dtoa_r+0x2c0>)
 810971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109722:	f7f6 fe3b 	bl	810039c <__adddf3>
 8109726:	4606      	mov	r6, r0
 8109728:	4628      	mov	r0, r5
 810972a:	460f      	mov	r7, r1
 810972c:	f7f6 ff82 	bl	8100634 <__aeabi_i2d>
 8109730:	a361      	add	r3, pc, #388	; (adr r3, 81098b8 <_dtoa_r+0x2c8>)
 8109732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109736:	f7f6 ffe7 	bl	8100708 <__aeabi_dmul>
 810973a:	4602      	mov	r2, r0
 810973c:	460b      	mov	r3, r1
 810973e:	4630      	mov	r0, r6
 8109740:	4639      	mov	r1, r7
 8109742:	f7f6 fe2b 	bl	810039c <__adddf3>
 8109746:	4606      	mov	r6, r0
 8109748:	460f      	mov	r7, r1
 810974a:	f7f7 fa8d 	bl	8100c68 <__aeabi_d2iz>
 810974e:	2200      	movs	r2, #0
 8109750:	9000      	str	r0, [sp, #0]
 8109752:	2300      	movs	r3, #0
 8109754:	4630      	mov	r0, r6
 8109756:	4639      	mov	r1, r7
 8109758:	f7f7 fa48 	bl	8100bec <__aeabi_dcmplt>
 810975c:	b150      	cbz	r0, 8109774 <_dtoa_r+0x184>
 810975e:	9800      	ldr	r0, [sp, #0]
 8109760:	f7f6 ff68 	bl	8100634 <__aeabi_i2d>
 8109764:	4632      	mov	r2, r6
 8109766:	463b      	mov	r3, r7
 8109768:	f7f7 fa36 	bl	8100bd8 <__aeabi_dcmpeq>
 810976c:	b910      	cbnz	r0, 8109774 <_dtoa_r+0x184>
 810976e:	9b00      	ldr	r3, [sp, #0]
 8109770:	3b01      	subs	r3, #1
 8109772:	9300      	str	r3, [sp, #0]
 8109774:	9b00      	ldr	r3, [sp, #0]
 8109776:	2b16      	cmp	r3, #22
 8109778:	d85a      	bhi.n	8109830 <_dtoa_r+0x240>
 810977a:	9a00      	ldr	r2, [sp, #0]
 810977c:	4b57      	ldr	r3, [pc, #348]	; (81098dc <_dtoa_r+0x2ec>)
 810977e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109786:	ec51 0b19 	vmov	r0, r1, d9
 810978a:	f7f7 fa2f 	bl	8100bec <__aeabi_dcmplt>
 810978e:	2800      	cmp	r0, #0
 8109790:	d050      	beq.n	8109834 <_dtoa_r+0x244>
 8109792:	9b00      	ldr	r3, [sp, #0]
 8109794:	3b01      	subs	r3, #1
 8109796:	9300      	str	r3, [sp, #0]
 8109798:	2300      	movs	r3, #0
 810979a:	930b      	str	r3, [sp, #44]	; 0x2c
 810979c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810979e:	1b5d      	subs	r5, r3, r5
 81097a0:	1e6b      	subs	r3, r5, #1
 81097a2:	9305      	str	r3, [sp, #20]
 81097a4:	bf45      	ittet	mi
 81097a6:	f1c5 0301 	rsbmi	r3, r5, #1
 81097aa:	9304      	strmi	r3, [sp, #16]
 81097ac:	2300      	movpl	r3, #0
 81097ae:	2300      	movmi	r3, #0
 81097b0:	bf4c      	ite	mi
 81097b2:	9305      	strmi	r3, [sp, #20]
 81097b4:	9304      	strpl	r3, [sp, #16]
 81097b6:	9b00      	ldr	r3, [sp, #0]
 81097b8:	2b00      	cmp	r3, #0
 81097ba:	db3d      	blt.n	8109838 <_dtoa_r+0x248>
 81097bc:	9b05      	ldr	r3, [sp, #20]
 81097be:	9a00      	ldr	r2, [sp, #0]
 81097c0:	920a      	str	r2, [sp, #40]	; 0x28
 81097c2:	4413      	add	r3, r2
 81097c4:	9305      	str	r3, [sp, #20]
 81097c6:	2300      	movs	r3, #0
 81097c8:	9307      	str	r3, [sp, #28]
 81097ca:	9b06      	ldr	r3, [sp, #24]
 81097cc:	2b09      	cmp	r3, #9
 81097ce:	f200 8089 	bhi.w	81098e4 <_dtoa_r+0x2f4>
 81097d2:	2b05      	cmp	r3, #5
 81097d4:	bfc4      	itt	gt
 81097d6:	3b04      	subgt	r3, #4
 81097d8:	9306      	strgt	r3, [sp, #24]
 81097da:	9b06      	ldr	r3, [sp, #24]
 81097dc:	f1a3 0302 	sub.w	r3, r3, #2
 81097e0:	bfcc      	ite	gt
 81097e2:	2500      	movgt	r5, #0
 81097e4:	2501      	movle	r5, #1
 81097e6:	2b03      	cmp	r3, #3
 81097e8:	f200 8087 	bhi.w	81098fa <_dtoa_r+0x30a>
 81097ec:	e8df f003 	tbb	[pc, r3]
 81097f0:	59383a2d 	.word	0x59383a2d
 81097f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 81097f8:	441d      	add	r5, r3
 81097fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81097fe:	2b20      	cmp	r3, #32
 8109800:	bfc1      	itttt	gt
 8109802:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109806:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810980a:	fa0b f303 	lslgt.w	r3, fp, r3
 810980e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109812:	bfda      	itte	le
 8109814:	f1c3 0320 	rsble	r3, r3, #32
 8109818:	fa06 f003 	lslle.w	r0, r6, r3
 810981c:	4318      	orrgt	r0, r3
 810981e:	f7f6 fef9 	bl	8100614 <__aeabi_ui2d>
 8109822:	2301      	movs	r3, #1
 8109824:	4606      	mov	r6, r0
 8109826:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810982a:	3d01      	subs	r5, #1
 810982c:	930e      	str	r3, [sp, #56]	; 0x38
 810982e:	e76a      	b.n	8109706 <_dtoa_r+0x116>
 8109830:	2301      	movs	r3, #1
 8109832:	e7b2      	b.n	810979a <_dtoa_r+0x1aa>
 8109834:	900b      	str	r0, [sp, #44]	; 0x2c
 8109836:	e7b1      	b.n	810979c <_dtoa_r+0x1ac>
 8109838:	9b04      	ldr	r3, [sp, #16]
 810983a:	9a00      	ldr	r2, [sp, #0]
 810983c:	1a9b      	subs	r3, r3, r2
 810983e:	9304      	str	r3, [sp, #16]
 8109840:	4253      	negs	r3, r2
 8109842:	9307      	str	r3, [sp, #28]
 8109844:	2300      	movs	r3, #0
 8109846:	930a      	str	r3, [sp, #40]	; 0x28
 8109848:	e7bf      	b.n	81097ca <_dtoa_r+0x1da>
 810984a:	2300      	movs	r3, #0
 810984c:	9308      	str	r3, [sp, #32]
 810984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109850:	2b00      	cmp	r3, #0
 8109852:	dc55      	bgt.n	8109900 <_dtoa_r+0x310>
 8109854:	2301      	movs	r3, #1
 8109856:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810985a:	461a      	mov	r2, r3
 810985c:	9209      	str	r2, [sp, #36]	; 0x24
 810985e:	e00c      	b.n	810987a <_dtoa_r+0x28a>
 8109860:	2301      	movs	r3, #1
 8109862:	e7f3      	b.n	810984c <_dtoa_r+0x25c>
 8109864:	2300      	movs	r3, #0
 8109866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109868:	9308      	str	r3, [sp, #32]
 810986a:	9b00      	ldr	r3, [sp, #0]
 810986c:	4413      	add	r3, r2
 810986e:	9302      	str	r3, [sp, #8]
 8109870:	3301      	adds	r3, #1
 8109872:	2b01      	cmp	r3, #1
 8109874:	9303      	str	r3, [sp, #12]
 8109876:	bfb8      	it	lt
 8109878:	2301      	movlt	r3, #1
 810987a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810987c:	2200      	movs	r2, #0
 810987e:	6042      	str	r2, [r0, #4]
 8109880:	2204      	movs	r2, #4
 8109882:	f102 0614 	add.w	r6, r2, #20
 8109886:	429e      	cmp	r6, r3
 8109888:	6841      	ldr	r1, [r0, #4]
 810988a:	d93d      	bls.n	8109908 <_dtoa_r+0x318>
 810988c:	4620      	mov	r0, r4
 810988e:	f001 fa57 	bl	810ad40 <_Balloc>
 8109892:	9001      	str	r0, [sp, #4]
 8109894:	2800      	cmp	r0, #0
 8109896:	d13b      	bne.n	8109910 <_dtoa_r+0x320>
 8109898:	4b11      	ldr	r3, [pc, #68]	; (81098e0 <_dtoa_r+0x2f0>)
 810989a:	4602      	mov	r2, r0
 810989c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 81098a0:	e6c0      	b.n	8109624 <_dtoa_r+0x34>
 81098a2:	2301      	movs	r3, #1
 81098a4:	e7df      	b.n	8109866 <_dtoa_r+0x276>
 81098a6:	bf00      	nop
 81098a8:	636f4361 	.word	0x636f4361
 81098ac:	3fd287a7 	.word	0x3fd287a7
 81098b0:	8b60c8b3 	.word	0x8b60c8b3
 81098b4:	3fc68a28 	.word	0x3fc68a28
 81098b8:	509f79fb 	.word	0x509f79fb
 81098bc:	3fd34413 	.word	0x3fd34413
 81098c0:	0810c3e6 	.word	0x0810c3e6
 81098c4:	0810c3fd 	.word	0x0810c3fd
 81098c8:	7ff00000 	.word	0x7ff00000
 81098cc:	0810c3e2 	.word	0x0810c3e2
 81098d0:	0810c3d9 	.word	0x0810c3d9
 81098d4:	0810c25d 	.word	0x0810c25d
 81098d8:	3ff80000 	.word	0x3ff80000
 81098dc:	0810c5d0 	.word	0x0810c5d0
 81098e0:	0810c458 	.word	0x0810c458
 81098e4:	2501      	movs	r5, #1
 81098e6:	2300      	movs	r3, #0
 81098e8:	9306      	str	r3, [sp, #24]
 81098ea:	9508      	str	r5, [sp, #32]
 81098ec:	f04f 33ff 	mov.w	r3, #4294967295
 81098f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 81098f4:	2200      	movs	r2, #0
 81098f6:	2312      	movs	r3, #18
 81098f8:	e7b0      	b.n	810985c <_dtoa_r+0x26c>
 81098fa:	2301      	movs	r3, #1
 81098fc:	9308      	str	r3, [sp, #32]
 81098fe:	e7f5      	b.n	81098ec <_dtoa_r+0x2fc>
 8109900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109902:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8109906:	e7b8      	b.n	810987a <_dtoa_r+0x28a>
 8109908:	3101      	adds	r1, #1
 810990a:	6041      	str	r1, [r0, #4]
 810990c:	0052      	lsls	r2, r2, #1
 810990e:	e7b8      	b.n	8109882 <_dtoa_r+0x292>
 8109910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109912:	9a01      	ldr	r2, [sp, #4]
 8109914:	601a      	str	r2, [r3, #0]
 8109916:	9b03      	ldr	r3, [sp, #12]
 8109918:	2b0e      	cmp	r3, #14
 810991a:	f200 809d 	bhi.w	8109a58 <_dtoa_r+0x468>
 810991e:	2d00      	cmp	r5, #0
 8109920:	f000 809a 	beq.w	8109a58 <_dtoa_r+0x468>
 8109924:	9b00      	ldr	r3, [sp, #0]
 8109926:	2b00      	cmp	r3, #0
 8109928:	dd32      	ble.n	8109990 <_dtoa_r+0x3a0>
 810992a:	4ab7      	ldr	r2, [pc, #732]	; (8109c08 <_dtoa_r+0x618>)
 810992c:	f003 030f 	and.w	r3, r3, #15
 8109930:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109938:	9b00      	ldr	r3, [sp, #0]
 810993a:	05d8      	lsls	r0, r3, #23
 810993c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8109940:	d516      	bpl.n	8109970 <_dtoa_r+0x380>
 8109942:	4bb2      	ldr	r3, [pc, #712]	; (8109c0c <_dtoa_r+0x61c>)
 8109944:	ec51 0b19 	vmov	r0, r1, d9
 8109948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810994c:	f7f7 f806 	bl	810095c <__aeabi_ddiv>
 8109950:	f007 070f 	and.w	r7, r7, #15
 8109954:	4682      	mov	sl, r0
 8109956:	468b      	mov	fp, r1
 8109958:	2503      	movs	r5, #3
 810995a:	4eac      	ldr	r6, [pc, #688]	; (8109c0c <_dtoa_r+0x61c>)
 810995c:	b957      	cbnz	r7, 8109974 <_dtoa_r+0x384>
 810995e:	4642      	mov	r2, r8
 8109960:	464b      	mov	r3, r9
 8109962:	4650      	mov	r0, sl
 8109964:	4659      	mov	r1, fp
 8109966:	f7f6 fff9 	bl	810095c <__aeabi_ddiv>
 810996a:	4682      	mov	sl, r0
 810996c:	468b      	mov	fp, r1
 810996e:	e028      	b.n	81099c2 <_dtoa_r+0x3d2>
 8109970:	2502      	movs	r5, #2
 8109972:	e7f2      	b.n	810995a <_dtoa_r+0x36a>
 8109974:	07f9      	lsls	r1, r7, #31
 8109976:	d508      	bpl.n	810998a <_dtoa_r+0x39a>
 8109978:	4640      	mov	r0, r8
 810997a:	4649      	mov	r1, r9
 810997c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109980:	f7f6 fec2 	bl	8100708 <__aeabi_dmul>
 8109984:	3501      	adds	r5, #1
 8109986:	4680      	mov	r8, r0
 8109988:	4689      	mov	r9, r1
 810998a:	107f      	asrs	r7, r7, #1
 810998c:	3608      	adds	r6, #8
 810998e:	e7e5      	b.n	810995c <_dtoa_r+0x36c>
 8109990:	f000 809b 	beq.w	8109aca <_dtoa_r+0x4da>
 8109994:	9b00      	ldr	r3, [sp, #0]
 8109996:	4f9d      	ldr	r7, [pc, #628]	; (8109c0c <_dtoa_r+0x61c>)
 8109998:	425e      	negs	r6, r3
 810999a:	4b9b      	ldr	r3, [pc, #620]	; (8109c08 <_dtoa_r+0x618>)
 810999c:	f006 020f 	and.w	r2, r6, #15
 81099a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099a8:	ec51 0b19 	vmov	r0, r1, d9
 81099ac:	f7f6 feac 	bl	8100708 <__aeabi_dmul>
 81099b0:	1136      	asrs	r6, r6, #4
 81099b2:	4682      	mov	sl, r0
 81099b4:	468b      	mov	fp, r1
 81099b6:	2300      	movs	r3, #0
 81099b8:	2502      	movs	r5, #2
 81099ba:	2e00      	cmp	r6, #0
 81099bc:	d17a      	bne.n	8109ab4 <_dtoa_r+0x4c4>
 81099be:	2b00      	cmp	r3, #0
 81099c0:	d1d3      	bne.n	810996a <_dtoa_r+0x37a>
 81099c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81099c4:	2b00      	cmp	r3, #0
 81099c6:	f000 8082 	beq.w	8109ace <_dtoa_r+0x4de>
 81099ca:	4b91      	ldr	r3, [pc, #580]	; (8109c10 <_dtoa_r+0x620>)
 81099cc:	2200      	movs	r2, #0
 81099ce:	4650      	mov	r0, sl
 81099d0:	4659      	mov	r1, fp
 81099d2:	f7f7 f90b 	bl	8100bec <__aeabi_dcmplt>
 81099d6:	2800      	cmp	r0, #0
 81099d8:	d079      	beq.n	8109ace <_dtoa_r+0x4de>
 81099da:	9b03      	ldr	r3, [sp, #12]
 81099dc:	2b00      	cmp	r3, #0
 81099de:	d076      	beq.n	8109ace <_dtoa_r+0x4de>
 81099e0:	9b02      	ldr	r3, [sp, #8]
 81099e2:	2b00      	cmp	r3, #0
 81099e4:	dd36      	ble.n	8109a54 <_dtoa_r+0x464>
 81099e6:	9b00      	ldr	r3, [sp, #0]
 81099e8:	4650      	mov	r0, sl
 81099ea:	4659      	mov	r1, fp
 81099ec:	1e5f      	subs	r7, r3, #1
 81099ee:	2200      	movs	r2, #0
 81099f0:	4b88      	ldr	r3, [pc, #544]	; (8109c14 <_dtoa_r+0x624>)
 81099f2:	f7f6 fe89 	bl	8100708 <__aeabi_dmul>
 81099f6:	9e02      	ldr	r6, [sp, #8]
 81099f8:	4682      	mov	sl, r0
 81099fa:	468b      	mov	fp, r1
 81099fc:	3501      	adds	r5, #1
 81099fe:	4628      	mov	r0, r5
 8109a00:	f7f6 fe18 	bl	8100634 <__aeabi_i2d>
 8109a04:	4652      	mov	r2, sl
 8109a06:	465b      	mov	r3, fp
 8109a08:	f7f6 fe7e 	bl	8100708 <__aeabi_dmul>
 8109a0c:	4b82      	ldr	r3, [pc, #520]	; (8109c18 <_dtoa_r+0x628>)
 8109a0e:	2200      	movs	r2, #0
 8109a10:	f7f6 fcc4 	bl	810039c <__adddf3>
 8109a14:	46d0      	mov	r8, sl
 8109a16:	46d9      	mov	r9, fp
 8109a18:	4682      	mov	sl, r0
 8109a1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8109a1e:	2e00      	cmp	r6, #0
 8109a20:	d158      	bne.n	8109ad4 <_dtoa_r+0x4e4>
 8109a22:	4b7e      	ldr	r3, [pc, #504]	; (8109c1c <_dtoa_r+0x62c>)
 8109a24:	2200      	movs	r2, #0
 8109a26:	4640      	mov	r0, r8
 8109a28:	4649      	mov	r1, r9
 8109a2a:	f7f6 fcb5 	bl	8100398 <__aeabi_dsub>
 8109a2e:	4652      	mov	r2, sl
 8109a30:	465b      	mov	r3, fp
 8109a32:	4680      	mov	r8, r0
 8109a34:	4689      	mov	r9, r1
 8109a36:	f7f7 f8f7 	bl	8100c28 <__aeabi_dcmpgt>
 8109a3a:	2800      	cmp	r0, #0
 8109a3c:	f040 8295 	bne.w	8109f6a <_dtoa_r+0x97a>
 8109a40:	4652      	mov	r2, sl
 8109a42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8109a46:	4640      	mov	r0, r8
 8109a48:	4649      	mov	r1, r9
 8109a4a:	f7f7 f8cf 	bl	8100bec <__aeabi_dcmplt>
 8109a4e:	2800      	cmp	r0, #0
 8109a50:	f040 8289 	bne.w	8109f66 <_dtoa_r+0x976>
 8109a54:	ec5b ab19 	vmov	sl, fp, d9
 8109a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109a5a:	2b00      	cmp	r3, #0
 8109a5c:	f2c0 8148 	blt.w	8109cf0 <_dtoa_r+0x700>
 8109a60:	9a00      	ldr	r2, [sp, #0]
 8109a62:	2a0e      	cmp	r2, #14
 8109a64:	f300 8144 	bgt.w	8109cf0 <_dtoa_r+0x700>
 8109a68:	4b67      	ldr	r3, [pc, #412]	; (8109c08 <_dtoa_r+0x618>)
 8109a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109a6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109a74:	2b00      	cmp	r3, #0
 8109a76:	f280 80d5 	bge.w	8109c24 <_dtoa_r+0x634>
 8109a7a:	9b03      	ldr	r3, [sp, #12]
 8109a7c:	2b00      	cmp	r3, #0
 8109a7e:	f300 80d1 	bgt.w	8109c24 <_dtoa_r+0x634>
 8109a82:	f040 826f 	bne.w	8109f64 <_dtoa_r+0x974>
 8109a86:	4b65      	ldr	r3, [pc, #404]	; (8109c1c <_dtoa_r+0x62c>)
 8109a88:	2200      	movs	r2, #0
 8109a8a:	4640      	mov	r0, r8
 8109a8c:	4649      	mov	r1, r9
 8109a8e:	f7f6 fe3b 	bl	8100708 <__aeabi_dmul>
 8109a92:	4652      	mov	r2, sl
 8109a94:	465b      	mov	r3, fp
 8109a96:	f7f7 f8bd 	bl	8100c14 <__aeabi_dcmpge>
 8109a9a:	9e03      	ldr	r6, [sp, #12]
 8109a9c:	4637      	mov	r7, r6
 8109a9e:	2800      	cmp	r0, #0
 8109aa0:	f040 8245 	bne.w	8109f2e <_dtoa_r+0x93e>
 8109aa4:	9d01      	ldr	r5, [sp, #4]
 8109aa6:	2331      	movs	r3, #49	; 0x31
 8109aa8:	f805 3b01 	strb.w	r3, [r5], #1
 8109aac:	9b00      	ldr	r3, [sp, #0]
 8109aae:	3301      	adds	r3, #1
 8109ab0:	9300      	str	r3, [sp, #0]
 8109ab2:	e240      	b.n	8109f36 <_dtoa_r+0x946>
 8109ab4:	07f2      	lsls	r2, r6, #31
 8109ab6:	d505      	bpl.n	8109ac4 <_dtoa_r+0x4d4>
 8109ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109abc:	f7f6 fe24 	bl	8100708 <__aeabi_dmul>
 8109ac0:	3501      	adds	r5, #1
 8109ac2:	2301      	movs	r3, #1
 8109ac4:	1076      	asrs	r6, r6, #1
 8109ac6:	3708      	adds	r7, #8
 8109ac8:	e777      	b.n	81099ba <_dtoa_r+0x3ca>
 8109aca:	2502      	movs	r5, #2
 8109acc:	e779      	b.n	81099c2 <_dtoa_r+0x3d2>
 8109ace:	9f00      	ldr	r7, [sp, #0]
 8109ad0:	9e03      	ldr	r6, [sp, #12]
 8109ad2:	e794      	b.n	81099fe <_dtoa_r+0x40e>
 8109ad4:	9901      	ldr	r1, [sp, #4]
 8109ad6:	4b4c      	ldr	r3, [pc, #304]	; (8109c08 <_dtoa_r+0x618>)
 8109ad8:	4431      	add	r1, r6
 8109ada:	910d      	str	r1, [sp, #52]	; 0x34
 8109adc:	9908      	ldr	r1, [sp, #32]
 8109ade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8109ae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8109ae6:	2900      	cmp	r1, #0
 8109ae8:	d043      	beq.n	8109b72 <_dtoa_r+0x582>
 8109aea:	494d      	ldr	r1, [pc, #308]	; (8109c20 <_dtoa_r+0x630>)
 8109aec:	2000      	movs	r0, #0
 8109aee:	f7f6 ff35 	bl	810095c <__aeabi_ddiv>
 8109af2:	4652      	mov	r2, sl
 8109af4:	465b      	mov	r3, fp
 8109af6:	f7f6 fc4f 	bl	8100398 <__aeabi_dsub>
 8109afa:	9d01      	ldr	r5, [sp, #4]
 8109afc:	4682      	mov	sl, r0
 8109afe:	468b      	mov	fp, r1
 8109b00:	4649      	mov	r1, r9
 8109b02:	4640      	mov	r0, r8
 8109b04:	f7f7 f8b0 	bl	8100c68 <__aeabi_d2iz>
 8109b08:	4606      	mov	r6, r0
 8109b0a:	f7f6 fd93 	bl	8100634 <__aeabi_i2d>
 8109b0e:	4602      	mov	r2, r0
 8109b10:	460b      	mov	r3, r1
 8109b12:	4640      	mov	r0, r8
 8109b14:	4649      	mov	r1, r9
 8109b16:	f7f6 fc3f 	bl	8100398 <__aeabi_dsub>
 8109b1a:	3630      	adds	r6, #48	; 0x30
 8109b1c:	f805 6b01 	strb.w	r6, [r5], #1
 8109b20:	4652      	mov	r2, sl
 8109b22:	465b      	mov	r3, fp
 8109b24:	4680      	mov	r8, r0
 8109b26:	4689      	mov	r9, r1
 8109b28:	f7f7 f860 	bl	8100bec <__aeabi_dcmplt>
 8109b2c:	2800      	cmp	r0, #0
 8109b2e:	d163      	bne.n	8109bf8 <_dtoa_r+0x608>
 8109b30:	4642      	mov	r2, r8
 8109b32:	464b      	mov	r3, r9
 8109b34:	4936      	ldr	r1, [pc, #216]	; (8109c10 <_dtoa_r+0x620>)
 8109b36:	2000      	movs	r0, #0
 8109b38:	f7f6 fc2e 	bl	8100398 <__aeabi_dsub>
 8109b3c:	4652      	mov	r2, sl
 8109b3e:	465b      	mov	r3, fp
 8109b40:	f7f7 f854 	bl	8100bec <__aeabi_dcmplt>
 8109b44:	2800      	cmp	r0, #0
 8109b46:	f040 80b5 	bne.w	8109cb4 <_dtoa_r+0x6c4>
 8109b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109b4c:	429d      	cmp	r5, r3
 8109b4e:	d081      	beq.n	8109a54 <_dtoa_r+0x464>
 8109b50:	4b30      	ldr	r3, [pc, #192]	; (8109c14 <_dtoa_r+0x624>)
 8109b52:	2200      	movs	r2, #0
 8109b54:	4650      	mov	r0, sl
 8109b56:	4659      	mov	r1, fp
 8109b58:	f7f6 fdd6 	bl	8100708 <__aeabi_dmul>
 8109b5c:	4b2d      	ldr	r3, [pc, #180]	; (8109c14 <_dtoa_r+0x624>)
 8109b5e:	4682      	mov	sl, r0
 8109b60:	468b      	mov	fp, r1
 8109b62:	4640      	mov	r0, r8
 8109b64:	4649      	mov	r1, r9
 8109b66:	2200      	movs	r2, #0
 8109b68:	f7f6 fdce 	bl	8100708 <__aeabi_dmul>
 8109b6c:	4680      	mov	r8, r0
 8109b6e:	4689      	mov	r9, r1
 8109b70:	e7c6      	b.n	8109b00 <_dtoa_r+0x510>
 8109b72:	4650      	mov	r0, sl
 8109b74:	4659      	mov	r1, fp
 8109b76:	f7f6 fdc7 	bl	8100708 <__aeabi_dmul>
 8109b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109b7c:	9d01      	ldr	r5, [sp, #4]
 8109b7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8109b80:	4682      	mov	sl, r0
 8109b82:	468b      	mov	fp, r1
 8109b84:	4649      	mov	r1, r9
 8109b86:	4640      	mov	r0, r8
 8109b88:	f7f7 f86e 	bl	8100c68 <__aeabi_d2iz>
 8109b8c:	4606      	mov	r6, r0
 8109b8e:	f7f6 fd51 	bl	8100634 <__aeabi_i2d>
 8109b92:	3630      	adds	r6, #48	; 0x30
 8109b94:	4602      	mov	r2, r0
 8109b96:	460b      	mov	r3, r1
 8109b98:	4640      	mov	r0, r8
 8109b9a:	4649      	mov	r1, r9
 8109b9c:	f7f6 fbfc 	bl	8100398 <__aeabi_dsub>
 8109ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8109ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109ba6:	429d      	cmp	r5, r3
 8109ba8:	4680      	mov	r8, r0
 8109baa:	4689      	mov	r9, r1
 8109bac:	f04f 0200 	mov.w	r2, #0
 8109bb0:	d124      	bne.n	8109bfc <_dtoa_r+0x60c>
 8109bb2:	4b1b      	ldr	r3, [pc, #108]	; (8109c20 <_dtoa_r+0x630>)
 8109bb4:	4650      	mov	r0, sl
 8109bb6:	4659      	mov	r1, fp
 8109bb8:	f7f6 fbf0 	bl	810039c <__adddf3>
 8109bbc:	4602      	mov	r2, r0
 8109bbe:	460b      	mov	r3, r1
 8109bc0:	4640      	mov	r0, r8
 8109bc2:	4649      	mov	r1, r9
 8109bc4:	f7f7 f830 	bl	8100c28 <__aeabi_dcmpgt>
 8109bc8:	2800      	cmp	r0, #0
 8109bca:	d173      	bne.n	8109cb4 <_dtoa_r+0x6c4>
 8109bcc:	4652      	mov	r2, sl
 8109bce:	465b      	mov	r3, fp
 8109bd0:	4913      	ldr	r1, [pc, #76]	; (8109c20 <_dtoa_r+0x630>)
 8109bd2:	2000      	movs	r0, #0
 8109bd4:	f7f6 fbe0 	bl	8100398 <__aeabi_dsub>
 8109bd8:	4602      	mov	r2, r0
 8109bda:	460b      	mov	r3, r1
 8109bdc:	4640      	mov	r0, r8
 8109bde:	4649      	mov	r1, r9
 8109be0:	f7f7 f804 	bl	8100bec <__aeabi_dcmplt>
 8109be4:	2800      	cmp	r0, #0
 8109be6:	f43f af35 	beq.w	8109a54 <_dtoa_r+0x464>
 8109bea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8109bec:	1e6b      	subs	r3, r5, #1
 8109bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8109bf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109bf4:	2b30      	cmp	r3, #48	; 0x30
 8109bf6:	d0f8      	beq.n	8109bea <_dtoa_r+0x5fa>
 8109bf8:	9700      	str	r7, [sp, #0]
 8109bfa:	e049      	b.n	8109c90 <_dtoa_r+0x6a0>
 8109bfc:	4b05      	ldr	r3, [pc, #20]	; (8109c14 <_dtoa_r+0x624>)
 8109bfe:	f7f6 fd83 	bl	8100708 <__aeabi_dmul>
 8109c02:	4680      	mov	r8, r0
 8109c04:	4689      	mov	r9, r1
 8109c06:	e7bd      	b.n	8109b84 <_dtoa_r+0x594>
 8109c08:	0810c5d0 	.word	0x0810c5d0
 8109c0c:	0810c5a8 	.word	0x0810c5a8
 8109c10:	3ff00000 	.word	0x3ff00000
 8109c14:	40240000 	.word	0x40240000
 8109c18:	401c0000 	.word	0x401c0000
 8109c1c:	40140000 	.word	0x40140000
 8109c20:	3fe00000 	.word	0x3fe00000
 8109c24:	9d01      	ldr	r5, [sp, #4]
 8109c26:	4656      	mov	r6, sl
 8109c28:	465f      	mov	r7, fp
 8109c2a:	4642      	mov	r2, r8
 8109c2c:	464b      	mov	r3, r9
 8109c2e:	4630      	mov	r0, r6
 8109c30:	4639      	mov	r1, r7
 8109c32:	f7f6 fe93 	bl	810095c <__aeabi_ddiv>
 8109c36:	f7f7 f817 	bl	8100c68 <__aeabi_d2iz>
 8109c3a:	4682      	mov	sl, r0
 8109c3c:	f7f6 fcfa 	bl	8100634 <__aeabi_i2d>
 8109c40:	4642      	mov	r2, r8
 8109c42:	464b      	mov	r3, r9
 8109c44:	f7f6 fd60 	bl	8100708 <__aeabi_dmul>
 8109c48:	4602      	mov	r2, r0
 8109c4a:	460b      	mov	r3, r1
 8109c4c:	4630      	mov	r0, r6
 8109c4e:	4639      	mov	r1, r7
 8109c50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8109c54:	f7f6 fba0 	bl	8100398 <__aeabi_dsub>
 8109c58:	f805 6b01 	strb.w	r6, [r5], #1
 8109c5c:	9e01      	ldr	r6, [sp, #4]
 8109c5e:	9f03      	ldr	r7, [sp, #12]
 8109c60:	1bae      	subs	r6, r5, r6
 8109c62:	42b7      	cmp	r7, r6
 8109c64:	4602      	mov	r2, r0
 8109c66:	460b      	mov	r3, r1
 8109c68:	d135      	bne.n	8109cd6 <_dtoa_r+0x6e6>
 8109c6a:	f7f6 fb97 	bl	810039c <__adddf3>
 8109c6e:	4642      	mov	r2, r8
 8109c70:	464b      	mov	r3, r9
 8109c72:	4606      	mov	r6, r0
 8109c74:	460f      	mov	r7, r1
 8109c76:	f7f6 ffd7 	bl	8100c28 <__aeabi_dcmpgt>
 8109c7a:	b9d0      	cbnz	r0, 8109cb2 <_dtoa_r+0x6c2>
 8109c7c:	4642      	mov	r2, r8
 8109c7e:	464b      	mov	r3, r9
 8109c80:	4630      	mov	r0, r6
 8109c82:	4639      	mov	r1, r7
 8109c84:	f7f6 ffa8 	bl	8100bd8 <__aeabi_dcmpeq>
 8109c88:	b110      	cbz	r0, 8109c90 <_dtoa_r+0x6a0>
 8109c8a:	f01a 0f01 	tst.w	sl, #1
 8109c8e:	d110      	bne.n	8109cb2 <_dtoa_r+0x6c2>
 8109c90:	4620      	mov	r0, r4
 8109c92:	ee18 1a10 	vmov	r1, s16
 8109c96:	f001 f893 	bl	810adc0 <_Bfree>
 8109c9a:	2300      	movs	r3, #0
 8109c9c:	9800      	ldr	r0, [sp, #0]
 8109c9e:	702b      	strb	r3, [r5, #0]
 8109ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109ca2:	3001      	adds	r0, #1
 8109ca4:	6018      	str	r0, [r3, #0]
 8109ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109ca8:	2b00      	cmp	r3, #0
 8109caa:	f43f acf1 	beq.w	8109690 <_dtoa_r+0xa0>
 8109cae:	601d      	str	r5, [r3, #0]
 8109cb0:	e4ee      	b.n	8109690 <_dtoa_r+0xa0>
 8109cb2:	9f00      	ldr	r7, [sp, #0]
 8109cb4:	462b      	mov	r3, r5
 8109cb6:	461d      	mov	r5, r3
 8109cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109cbc:	2a39      	cmp	r2, #57	; 0x39
 8109cbe:	d106      	bne.n	8109cce <_dtoa_r+0x6de>
 8109cc0:	9a01      	ldr	r2, [sp, #4]
 8109cc2:	429a      	cmp	r2, r3
 8109cc4:	d1f7      	bne.n	8109cb6 <_dtoa_r+0x6c6>
 8109cc6:	9901      	ldr	r1, [sp, #4]
 8109cc8:	2230      	movs	r2, #48	; 0x30
 8109cca:	3701      	adds	r7, #1
 8109ccc:	700a      	strb	r2, [r1, #0]
 8109cce:	781a      	ldrb	r2, [r3, #0]
 8109cd0:	3201      	adds	r2, #1
 8109cd2:	701a      	strb	r2, [r3, #0]
 8109cd4:	e790      	b.n	8109bf8 <_dtoa_r+0x608>
 8109cd6:	4ba6      	ldr	r3, [pc, #664]	; (8109f70 <_dtoa_r+0x980>)
 8109cd8:	2200      	movs	r2, #0
 8109cda:	f7f6 fd15 	bl	8100708 <__aeabi_dmul>
 8109cde:	2200      	movs	r2, #0
 8109ce0:	2300      	movs	r3, #0
 8109ce2:	4606      	mov	r6, r0
 8109ce4:	460f      	mov	r7, r1
 8109ce6:	f7f6 ff77 	bl	8100bd8 <__aeabi_dcmpeq>
 8109cea:	2800      	cmp	r0, #0
 8109cec:	d09d      	beq.n	8109c2a <_dtoa_r+0x63a>
 8109cee:	e7cf      	b.n	8109c90 <_dtoa_r+0x6a0>
 8109cf0:	9a08      	ldr	r2, [sp, #32]
 8109cf2:	2a00      	cmp	r2, #0
 8109cf4:	f000 80d7 	beq.w	8109ea6 <_dtoa_r+0x8b6>
 8109cf8:	9a06      	ldr	r2, [sp, #24]
 8109cfa:	2a01      	cmp	r2, #1
 8109cfc:	f300 80ba 	bgt.w	8109e74 <_dtoa_r+0x884>
 8109d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109d02:	2a00      	cmp	r2, #0
 8109d04:	f000 80b2 	beq.w	8109e6c <_dtoa_r+0x87c>
 8109d08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109d0c:	9e07      	ldr	r6, [sp, #28]
 8109d0e:	9d04      	ldr	r5, [sp, #16]
 8109d10:	9a04      	ldr	r2, [sp, #16]
 8109d12:	441a      	add	r2, r3
 8109d14:	9204      	str	r2, [sp, #16]
 8109d16:	9a05      	ldr	r2, [sp, #20]
 8109d18:	2101      	movs	r1, #1
 8109d1a:	441a      	add	r2, r3
 8109d1c:	4620      	mov	r0, r4
 8109d1e:	9205      	str	r2, [sp, #20]
 8109d20:	f001 f950 	bl	810afc4 <__i2b>
 8109d24:	4607      	mov	r7, r0
 8109d26:	2d00      	cmp	r5, #0
 8109d28:	dd0c      	ble.n	8109d44 <_dtoa_r+0x754>
 8109d2a:	9b05      	ldr	r3, [sp, #20]
 8109d2c:	2b00      	cmp	r3, #0
 8109d2e:	dd09      	ble.n	8109d44 <_dtoa_r+0x754>
 8109d30:	42ab      	cmp	r3, r5
 8109d32:	9a04      	ldr	r2, [sp, #16]
 8109d34:	bfa8      	it	ge
 8109d36:	462b      	movge	r3, r5
 8109d38:	1ad2      	subs	r2, r2, r3
 8109d3a:	9204      	str	r2, [sp, #16]
 8109d3c:	9a05      	ldr	r2, [sp, #20]
 8109d3e:	1aed      	subs	r5, r5, r3
 8109d40:	1ad3      	subs	r3, r2, r3
 8109d42:	9305      	str	r3, [sp, #20]
 8109d44:	9b07      	ldr	r3, [sp, #28]
 8109d46:	b31b      	cbz	r3, 8109d90 <_dtoa_r+0x7a0>
 8109d48:	9b08      	ldr	r3, [sp, #32]
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	f000 80af 	beq.w	8109eae <_dtoa_r+0x8be>
 8109d50:	2e00      	cmp	r6, #0
 8109d52:	dd13      	ble.n	8109d7c <_dtoa_r+0x78c>
 8109d54:	4639      	mov	r1, r7
 8109d56:	4632      	mov	r2, r6
 8109d58:	4620      	mov	r0, r4
 8109d5a:	f001 f9f3 	bl	810b144 <__pow5mult>
 8109d5e:	ee18 2a10 	vmov	r2, s16
 8109d62:	4601      	mov	r1, r0
 8109d64:	4607      	mov	r7, r0
 8109d66:	4620      	mov	r0, r4
 8109d68:	f001 f942 	bl	810aff0 <__multiply>
 8109d6c:	ee18 1a10 	vmov	r1, s16
 8109d70:	4680      	mov	r8, r0
 8109d72:	4620      	mov	r0, r4
 8109d74:	f001 f824 	bl	810adc0 <_Bfree>
 8109d78:	ee08 8a10 	vmov	s16, r8
 8109d7c:	9b07      	ldr	r3, [sp, #28]
 8109d7e:	1b9a      	subs	r2, r3, r6
 8109d80:	d006      	beq.n	8109d90 <_dtoa_r+0x7a0>
 8109d82:	ee18 1a10 	vmov	r1, s16
 8109d86:	4620      	mov	r0, r4
 8109d88:	f001 f9dc 	bl	810b144 <__pow5mult>
 8109d8c:	ee08 0a10 	vmov	s16, r0
 8109d90:	2101      	movs	r1, #1
 8109d92:	4620      	mov	r0, r4
 8109d94:	f001 f916 	bl	810afc4 <__i2b>
 8109d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109d9a:	2b00      	cmp	r3, #0
 8109d9c:	4606      	mov	r6, r0
 8109d9e:	f340 8088 	ble.w	8109eb2 <_dtoa_r+0x8c2>
 8109da2:	461a      	mov	r2, r3
 8109da4:	4601      	mov	r1, r0
 8109da6:	4620      	mov	r0, r4
 8109da8:	f001 f9cc 	bl	810b144 <__pow5mult>
 8109dac:	9b06      	ldr	r3, [sp, #24]
 8109dae:	2b01      	cmp	r3, #1
 8109db0:	4606      	mov	r6, r0
 8109db2:	f340 8081 	ble.w	8109eb8 <_dtoa_r+0x8c8>
 8109db6:	f04f 0800 	mov.w	r8, #0
 8109dba:	6933      	ldr	r3, [r6, #16]
 8109dbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109dc0:	6918      	ldr	r0, [r3, #16]
 8109dc2:	f001 f8af 	bl	810af24 <__hi0bits>
 8109dc6:	f1c0 0020 	rsb	r0, r0, #32
 8109dca:	9b05      	ldr	r3, [sp, #20]
 8109dcc:	4418      	add	r0, r3
 8109dce:	f010 001f 	ands.w	r0, r0, #31
 8109dd2:	f000 8092 	beq.w	8109efa <_dtoa_r+0x90a>
 8109dd6:	f1c0 0320 	rsb	r3, r0, #32
 8109dda:	2b04      	cmp	r3, #4
 8109ddc:	f340 808a 	ble.w	8109ef4 <_dtoa_r+0x904>
 8109de0:	f1c0 001c 	rsb	r0, r0, #28
 8109de4:	9b04      	ldr	r3, [sp, #16]
 8109de6:	4403      	add	r3, r0
 8109de8:	9304      	str	r3, [sp, #16]
 8109dea:	9b05      	ldr	r3, [sp, #20]
 8109dec:	4403      	add	r3, r0
 8109dee:	4405      	add	r5, r0
 8109df0:	9305      	str	r3, [sp, #20]
 8109df2:	9b04      	ldr	r3, [sp, #16]
 8109df4:	2b00      	cmp	r3, #0
 8109df6:	dd07      	ble.n	8109e08 <_dtoa_r+0x818>
 8109df8:	ee18 1a10 	vmov	r1, s16
 8109dfc:	461a      	mov	r2, r3
 8109dfe:	4620      	mov	r0, r4
 8109e00:	f001 f9fa 	bl	810b1f8 <__lshift>
 8109e04:	ee08 0a10 	vmov	s16, r0
 8109e08:	9b05      	ldr	r3, [sp, #20]
 8109e0a:	2b00      	cmp	r3, #0
 8109e0c:	dd05      	ble.n	8109e1a <_dtoa_r+0x82a>
 8109e0e:	4631      	mov	r1, r6
 8109e10:	461a      	mov	r2, r3
 8109e12:	4620      	mov	r0, r4
 8109e14:	f001 f9f0 	bl	810b1f8 <__lshift>
 8109e18:	4606      	mov	r6, r0
 8109e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109e1c:	2b00      	cmp	r3, #0
 8109e1e:	d06e      	beq.n	8109efe <_dtoa_r+0x90e>
 8109e20:	ee18 0a10 	vmov	r0, s16
 8109e24:	4631      	mov	r1, r6
 8109e26:	f001 fa57 	bl	810b2d8 <__mcmp>
 8109e2a:	2800      	cmp	r0, #0
 8109e2c:	da67      	bge.n	8109efe <_dtoa_r+0x90e>
 8109e2e:	9b00      	ldr	r3, [sp, #0]
 8109e30:	3b01      	subs	r3, #1
 8109e32:	ee18 1a10 	vmov	r1, s16
 8109e36:	9300      	str	r3, [sp, #0]
 8109e38:	220a      	movs	r2, #10
 8109e3a:	2300      	movs	r3, #0
 8109e3c:	4620      	mov	r0, r4
 8109e3e:	f000 ffe1 	bl	810ae04 <__multadd>
 8109e42:	9b08      	ldr	r3, [sp, #32]
 8109e44:	ee08 0a10 	vmov	s16, r0
 8109e48:	2b00      	cmp	r3, #0
 8109e4a:	f000 81b1 	beq.w	810a1b0 <_dtoa_r+0xbc0>
 8109e4e:	2300      	movs	r3, #0
 8109e50:	4639      	mov	r1, r7
 8109e52:	220a      	movs	r2, #10
 8109e54:	4620      	mov	r0, r4
 8109e56:	f000 ffd5 	bl	810ae04 <__multadd>
 8109e5a:	9b02      	ldr	r3, [sp, #8]
 8109e5c:	2b00      	cmp	r3, #0
 8109e5e:	4607      	mov	r7, r0
 8109e60:	f300 808e 	bgt.w	8109f80 <_dtoa_r+0x990>
 8109e64:	9b06      	ldr	r3, [sp, #24]
 8109e66:	2b02      	cmp	r3, #2
 8109e68:	dc51      	bgt.n	8109f0e <_dtoa_r+0x91e>
 8109e6a:	e089      	b.n	8109f80 <_dtoa_r+0x990>
 8109e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8109e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109e72:	e74b      	b.n	8109d0c <_dtoa_r+0x71c>
 8109e74:	9b03      	ldr	r3, [sp, #12]
 8109e76:	1e5e      	subs	r6, r3, #1
 8109e78:	9b07      	ldr	r3, [sp, #28]
 8109e7a:	42b3      	cmp	r3, r6
 8109e7c:	bfbf      	itttt	lt
 8109e7e:	9b07      	ldrlt	r3, [sp, #28]
 8109e80:	9607      	strlt	r6, [sp, #28]
 8109e82:	1af2      	sublt	r2, r6, r3
 8109e84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8109e86:	bfb6      	itet	lt
 8109e88:	189b      	addlt	r3, r3, r2
 8109e8a:	1b9e      	subge	r6, r3, r6
 8109e8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8109e8e:	9b03      	ldr	r3, [sp, #12]
 8109e90:	bfb8      	it	lt
 8109e92:	2600      	movlt	r6, #0
 8109e94:	2b00      	cmp	r3, #0
 8109e96:	bfb7      	itett	lt
 8109e98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8109e9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8109ea0:	1a9d      	sublt	r5, r3, r2
 8109ea2:	2300      	movlt	r3, #0
 8109ea4:	e734      	b.n	8109d10 <_dtoa_r+0x720>
 8109ea6:	9e07      	ldr	r6, [sp, #28]
 8109ea8:	9d04      	ldr	r5, [sp, #16]
 8109eaa:	9f08      	ldr	r7, [sp, #32]
 8109eac:	e73b      	b.n	8109d26 <_dtoa_r+0x736>
 8109eae:	9a07      	ldr	r2, [sp, #28]
 8109eb0:	e767      	b.n	8109d82 <_dtoa_r+0x792>
 8109eb2:	9b06      	ldr	r3, [sp, #24]
 8109eb4:	2b01      	cmp	r3, #1
 8109eb6:	dc18      	bgt.n	8109eea <_dtoa_r+0x8fa>
 8109eb8:	f1ba 0f00 	cmp.w	sl, #0
 8109ebc:	d115      	bne.n	8109eea <_dtoa_r+0x8fa>
 8109ebe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109ec2:	b993      	cbnz	r3, 8109eea <_dtoa_r+0x8fa>
 8109ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109ec8:	0d1b      	lsrs	r3, r3, #20
 8109eca:	051b      	lsls	r3, r3, #20
 8109ecc:	b183      	cbz	r3, 8109ef0 <_dtoa_r+0x900>
 8109ece:	9b04      	ldr	r3, [sp, #16]
 8109ed0:	3301      	adds	r3, #1
 8109ed2:	9304      	str	r3, [sp, #16]
 8109ed4:	9b05      	ldr	r3, [sp, #20]
 8109ed6:	3301      	adds	r3, #1
 8109ed8:	9305      	str	r3, [sp, #20]
 8109eda:	f04f 0801 	mov.w	r8, #1
 8109ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109ee0:	2b00      	cmp	r3, #0
 8109ee2:	f47f af6a 	bne.w	8109dba <_dtoa_r+0x7ca>
 8109ee6:	2001      	movs	r0, #1
 8109ee8:	e76f      	b.n	8109dca <_dtoa_r+0x7da>
 8109eea:	f04f 0800 	mov.w	r8, #0
 8109eee:	e7f6      	b.n	8109ede <_dtoa_r+0x8ee>
 8109ef0:	4698      	mov	r8, r3
 8109ef2:	e7f4      	b.n	8109ede <_dtoa_r+0x8ee>
 8109ef4:	f43f af7d 	beq.w	8109df2 <_dtoa_r+0x802>
 8109ef8:	4618      	mov	r0, r3
 8109efa:	301c      	adds	r0, #28
 8109efc:	e772      	b.n	8109de4 <_dtoa_r+0x7f4>
 8109efe:	9b03      	ldr	r3, [sp, #12]
 8109f00:	2b00      	cmp	r3, #0
 8109f02:	dc37      	bgt.n	8109f74 <_dtoa_r+0x984>
 8109f04:	9b06      	ldr	r3, [sp, #24]
 8109f06:	2b02      	cmp	r3, #2
 8109f08:	dd34      	ble.n	8109f74 <_dtoa_r+0x984>
 8109f0a:	9b03      	ldr	r3, [sp, #12]
 8109f0c:	9302      	str	r3, [sp, #8]
 8109f0e:	9b02      	ldr	r3, [sp, #8]
 8109f10:	b96b      	cbnz	r3, 8109f2e <_dtoa_r+0x93e>
 8109f12:	4631      	mov	r1, r6
 8109f14:	2205      	movs	r2, #5
 8109f16:	4620      	mov	r0, r4
 8109f18:	f000 ff74 	bl	810ae04 <__multadd>
 8109f1c:	4601      	mov	r1, r0
 8109f1e:	4606      	mov	r6, r0
 8109f20:	ee18 0a10 	vmov	r0, s16
 8109f24:	f001 f9d8 	bl	810b2d8 <__mcmp>
 8109f28:	2800      	cmp	r0, #0
 8109f2a:	f73f adbb 	bgt.w	8109aa4 <_dtoa_r+0x4b4>
 8109f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109f30:	9d01      	ldr	r5, [sp, #4]
 8109f32:	43db      	mvns	r3, r3
 8109f34:	9300      	str	r3, [sp, #0]
 8109f36:	f04f 0800 	mov.w	r8, #0
 8109f3a:	4631      	mov	r1, r6
 8109f3c:	4620      	mov	r0, r4
 8109f3e:	f000 ff3f 	bl	810adc0 <_Bfree>
 8109f42:	2f00      	cmp	r7, #0
 8109f44:	f43f aea4 	beq.w	8109c90 <_dtoa_r+0x6a0>
 8109f48:	f1b8 0f00 	cmp.w	r8, #0
 8109f4c:	d005      	beq.n	8109f5a <_dtoa_r+0x96a>
 8109f4e:	45b8      	cmp	r8, r7
 8109f50:	d003      	beq.n	8109f5a <_dtoa_r+0x96a>
 8109f52:	4641      	mov	r1, r8
 8109f54:	4620      	mov	r0, r4
 8109f56:	f000 ff33 	bl	810adc0 <_Bfree>
 8109f5a:	4639      	mov	r1, r7
 8109f5c:	4620      	mov	r0, r4
 8109f5e:	f000 ff2f 	bl	810adc0 <_Bfree>
 8109f62:	e695      	b.n	8109c90 <_dtoa_r+0x6a0>
 8109f64:	2600      	movs	r6, #0
 8109f66:	4637      	mov	r7, r6
 8109f68:	e7e1      	b.n	8109f2e <_dtoa_r+0x93e>
 8109f6a:	9700      	str	r7, [sp, #0]
 8109f6c:	4637      	mov	r7, r6
 8109f6e:	e599      	b.n	8109aa4 <_dtoa_r+0x4b4>
 8109f70:	40240000 	.word	0x40240000
 8109f74:	9b08      	ldr	r3, [sp, #32]
 8109f76:	2b00      	cmp	r3, #0
 8109f78:	f000 80ca 	beq.w	810a110 <_dtoa_r+0xb20>
 8109f7c:	9b03      	ldr	r3, [sp, #12]
 8109f7e:	9302      	str	r3, [sp, #8]
 8109f80:	2d00      	cmp	r5, #0
 8109f82:	dd05      	ble.n	8109f90 <_dtoa_r+0x9a0>
 8109f84:	4639      	mov	r1, r7
 8109f86:	462a      	mov	r2, r5
 8109f88:	4620      	mov	r0, r4
 8109f8a:	f001 f935 	bl	810b1f8 <__lshift>
 8109f8e:	4607      	mov	r7, r0
 8109f90:	f1b8 0f00 	cmp.w	r8, #0
 8109f94:	d05b      	beq.n	810a04e <_dtoa_r+0xa5e>
 8109f96:	6879      	ldr	r1, [r7, #4]
 8109f98:	4620      	mov	r0, r4
 8109f9a:	f000 fed1 	bl	810ad40 <_Balloc>
 8109f9e:	4605      	mov	r5, r0
 8109fa0:	b928      	cbnz	r0, 8109fae <_dtoa_r+0x9be>
 8109fa2:	4b87      	ldr	r3, [pc, #540]	; (810a1c0 <_dtoa_r+0xbd0>)
 8109fa4:	4602      	mov	r2, r0
 8109fa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109faa:	f7ff bb3b 	b.w	8109624 <_dtoa_r+0x34>
 8109fae:	693a      	ldr	r2, [r7, #16]
 8109fb0:	3202      	adds	r2, #2
 8109fb2:	0092      	lsls	r2, r2, #2
 8109fb4:	f107 010c 	add.w	r1, r7, #12
 8109fb8:	300c      	adds	r0, #12
 8109fba:	f000 feb3 	bl	810ad24 <memcpy>
 8109fbe:	2201      	movs	r2, #1
 8109fc0:	4629      	mov	r1, r5
 8109fc2:	4620      	mov	r0, r4
 8109fc4:	f001 f918 	bl	810b1f8 <__lshift>
 8109fc8:	9b01      	ldr	r3, [sp, #4]
 8109fca:	f103 0901 	add.w	r9, r3, #1
 8109fce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8109fd2:	4413      	add	r3, r2
 8109fd4:	9305      	str	r3, [sp, #20]
 8109fd6:	f00a 0301 	and.w	r3, sl, #1
 8109fda:	46b8      	mov	r8, r7
 8109fdc:	9304      	str	r3, [sp, #16]
 8109fde:	4607      	mov	r7, r0
 8109fe0:	4631      	mov	r1, r6
 8109fe2:	ee18 0a10 	vmov	r0, s16
 8109fe6:	f7ff fa77 	bl	81094d8 <quorem>
 8109fea:	4641      	mov	r1, r8
 8109fec:	9002      	str	r0, [sp, #8]
 8109fee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8109ff2:	ee18 0a10 	vmov	r0, s16
 8109ff6:	f001 f96f 	bl	810b2d8 <__mcmp>
 8109ffa:	463a      	mov	r2, r7
 8109ffc:	9003      	str	r0, [sp, #12]
 8109ffe:	4631      	mov	r1, r6
 810a000:	4620      	mov	r0, r4
 810a002:	f001 f985 	bl	810b310 <__mdiff>
 810a006:	68c2      	ldr	r2, [r0, #12]
 810a008:	f109 3bff 	add.w	fp, r9, #4294967295
 810a00c:	4605      	mov	r5, r0
 810a00e:	bb02      	cbnz	r2, 810a052 <_dtoa_r+0xa62>
 810a010:	4601      	mov	r1, r0
 810a012:	ee18 0a10 	vmov	r0, s16
 810a016:	f001 f95f 	bl	810b2d8 <__mcmp>
 810a01a:	4602      	mov	r2, r0
 810a01c:	4629      	mov	r1, r5
 810a01e:	4620      	mov	r0, r4
 810a020:	9207      	str	r2, [sp, #28]
 810a022:	f000 fecd 	bl	810adc0 <_Bfree>
 810a026:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810a02a:	ea43 0102 	orr.w	r1, r3, r2
 810a02e:	9b04      	ldr	r3, [sp, #16]
 810a030:	430b      	orrs	r3, r1
 810a032:	464d      	mov	r5, r9
 810a034:	d10f      	bne.n	810a056 <_dtoa_r+0xa66>
 810a036:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810a03a:	d02a      	beq.n	810a092 <_dtoa_r+0xaa2>
 810a03c:	9b03      	ldr	r3, [sp, #12]
 810a03e:	2b00      	cmp	r3, #0
 810a040:	dd02      	ble.n	810a048 <_dtoa_r+0xa58>
 810a042:	9b02      	ldr	r3, [sp, #8]
 810a044:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810a048:	f88b a000 	strb.w	sl, [fp]
 810a04c:	e775      	b.n	8109f3a <_dtoa_r+0x94a>
 810a04e:	4638      	mov	r0, r7
 810a050:	e7ba      	b.n	8109fc8 <_dtoa_r+0x9d8>
 810a052:	2201      	movs	r2, #1
 810a054:	e7e2      	b.n	810a01c <_dtoa_r+0xa2c>
 810a056:	9b03      	ldr	r3, [sp, #12]
 810a058:	2b00      	cmp	r3, #0
 810a05a:	db04      	blt.n	810a066 <_dtoa_r+0xa76>
 810a05c:	9906      	ldr	r1, [sp, #24]
 810a05e:	430b      	orrs	r3, r1
 810a060:	9904      	ldr	r1, [sp, #16]
 810a062:	430b      	orrs	r3, r1
 810a064:	d122      	bne.n	810a0ac <_dtoa_r+0xabc>
 810a066:	2a00      	cmp	r2, #0
 810a068:	ddee      	ble.n	810a048 <_dtoa_r+0xa58>
 810a06a:	ee18 1a10 	vmov	r1, s16
 810a06e:	2201      	movs	r2, #1
 810a070:	4620      	mov	r0, r4
 810a072:	f001 f8c1 	bl	810b1f8 <__lshift>
 810a076:	4631      	mov	r1, r6
 810a078:	ee08 0a10 	vmov	s16, r0
 810a07c:	f001 f92c 	bl	810b2d8 <__mcmp>
 810a080:	2800      	cmp	r0, #0
 810a082:	dc03      	bgt.n	810a08c <_dtoa_r+0xa9c>
 810a084:	d1e0      	bne.n	810a048 <_dtoa_r+0xa58>
 810a086:	f01a 0f01 	tst.w	sl, #1
 810a08a:	d0dd      	beq.n	810a048 <_dtoa_r+0xa58>
 810a08c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810a090:	d1d7      	bne.n	810a042 <_dtoa_r+0xa52>
 810a092:	2339      	movs	r3, #57	; 0x39
 810a094:	f88b 3000 	strb.w	r3, [fp]
 810a098:	462b      	mov	r3, r5
 810a09a:	461d      	mov	r5, r3
 810a09c:	3b01      	subs	r3, #1
 810a09e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810a0a2:	2a39      	cmp	r2, #57	; 0x39
 810a0a4:	d071      	beq.n	810a18a <_dtoa_r+0xb9a>
 810a0a6:	3201      	adds	r2, #1
 810a0a8:	701a      	strb	r2, [r3, #0]
 810a0aa:	e746      	b.n	8109f3a <_dtoa_r+0x94a>
 810a0ac:	2a00      	cmp	r2, #0
 810a0ae:	dd07      	ble.n	810a0c0 <_dtoa_r+0xad0>
 810a0b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810a0b4:	d0ed      	beq.n	810a092 <_dtoa_r+0xaa2>
 810a0b6:	f10a 0301 	add.w	r3, sl, #1
 810a0ba:	f88b 3000 	strb.w	r3, [fp]
 810a0be:	e73c      	b.n	8109f3a <_dtoa_r+0x94a>
 810a0c0:	9b05      	ldr	r3, [sp, #20]
 810a0c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 810a0c6:	4599      	cmp	r9, r3
 810a0c8:	d047      	beq.n	810a15a <_dtoa_r+0xb6a>
 810a0ca:	ee18 1a10 	vmov	r1, s16
 810a0ce:	2300      	movs	r3, #0
 810a0d0:	220a      	movs	r2, #10
 810a0d2:	4620      	mov	r0, r4
 810a0d4:	f000 fe96 	bl	810ae04 <__multadd>
 810a0d8:	45b8      	cmp	r8, r7
 810a0da:	ee08 0a10 	vmov	s16, r0
 810a0de:	f04f 0300 	mov.w	r3, #0
 810a0e2:	f04f 020a 	mov.w	r2, #10
 810a0e6:	4641      	mov	r1, r8
 810a0e8:	4620      	mov	r0, r4
 810a0ea:	d106      	bne.n	810a0fa <_dtoa_r+0xb0a>
 810a0ec:	f000 fe8a 	bl	810ae04 <__multadd>
 810a0f0:	4680      	mov	r8, r0
 810a0f2:	4607      	mov	r7, r0
 810a0f4:	f109 0901 	add.w	r9, r9, #1
 810a0f8:	e772      	b.n	8109fe0 <_dtoa_r+0x9f0>
 810a0fa:	f000 fe83 	bl	810ae04 <__multadd>
 810a0fe:	4639      	mov	r1, r7
 810a100:	4680      	mov	r8, r0
 810a102:	2300      	movs	r3, #0
 810a104:	220a      	movs	r2, #10
 810a106:	4620      	mov	r0, r4
 810a108:	f000 fe7c 	bl	810ae04 <__multadd>
 810a10c:	4607      	mov	r7, r0
 810a10e:	e7f1      	b.n	810a0f4 <_dtoa_r+0xb04>
 810a110:	9b03      	ldr	r3, [sp, #12]
 810a112:	9302      	str	r3, [sp, #8]
 810a114:	9d01      	ldr	r5, [sp, #4]
 810a116:	ee18 0a10 	vmov	r0, s16
 810a11a:	4631      	mov	r1, r6
 810a11c:	f7ff f9dc 	bl	81094d8 <quorem>
 810a120:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810a124:	9b01      	ldr	r3, [sp, #4]
 810a126:	f805 ab01 	strb.w	sl, [r5], #1
 810a12a:	1aea      	subs	r2, r5, r3
 810a12c:	9b02      	ldr	r3, [sp, #8]
 810a12e:	4293      	cmp	r3, r2
 810a130:	dd09      	ble.n	810a146 <_dtoa_r+0xb56>
 810a132:	ee18 1a10 	vmov	r1, s16
 810a136:	2300      	movs	r3, #0
 810a138:	220a      	movs	r2, #10
 810a13a:	4620      	mov	r0, r4
 810a13c:	f000 fe62 	bl	810ae04 <__multadd>
 810a140:	ee08 0a10 	vmov	s16, r0
 810a144:	e7e7      	b.n	810a116 <_dtoa_r+0xb26>
 810a146:	9b02      	ldr	r3, [sp, #8]
 810a148:	2b00      	cmp	r3, #0
 810a14a:	bfc8      	it	gt
 810a14c:	461d      	movgt	r5, r3
 810a14e:	9b01      	ldr	r3, [sp, #4]
 810a150:	bfd8      	it	le
 810a152:	2501      	movle	r5, #1
 810a154:	441d      	add	r5, r3
 810a156:	f04f 0800 	mov.w	r8, #0
 810a15a:	ee18 1a10 	vmov	r1, s16
 810a15e:	2201      	movs	r2, #1
 810a160:	4620      	mov	r0, r4
 810a162:	f001 f849 	bl	810b1f8 <__lshift>
 810a166:	4631      	mov	r1, r6
 810a168:	ee08 0a10 	vmov	s16, r0
 810a16c:	f001 f8b4 	bl	810b2d8 <__mcmp>
 810a170:	2800      	cmp	r0, #0
 810a172:	dc91      	bgt.n	810a098 <_dtoa_r+0xaa8>
 810a174:	d102      	bne.n	810a17c <_dtoa_r+0xb8c>
 810a176:	f01a 0f01 	tst.w	sl, #1
 810a17a:	d18d      	bne.n	810a098 <_dtoa_r+0xaa8>
 810a17c:	462b      	mov	r3, r5
 810a17e:	461d      	mov	r5, r3
 810a180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a184:	2a30      	cmp	r2, #48	; 0x30
 810a186:	d0fa      	beq.n	810a17e <_dtoa_r+0xb8e>
 810a188:	e6d7      	b.n	8109f3a <_dtoa_r+0x94a>
 810a18a:	9a01      	ldr	r2, [sp, #4]
 810a18c:	429a      	cmp	r2, r3
 810a18e:	d184      	bne.n	810a09a <_dtoa_r+0xaaa>
 810a190:	9b00      	ldr	r3, [sp, #0]
 810a192:	3301      	adds	r3, #1
 810a194:	9300      	str	r3, [sp, #0]
 810a196:	2331      	movs	r3, #49	; 0x31
 810a198:	7013      	strb	r3, [r2, #0]
 810a19a:	e6ce      	b.n	8109f3a <_dtoa_r+0x94a>
 810a19c:	4b09      	ldr	r3, [pc, #36]	; (810a1c4 <_dtoa_r+0xbd4>)
 810a19e:	f7ff ba95 	b.w	81096cc <_dtoa_r+0xdc>
 810a1a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a1a4:	2b00      	cmp	r3, #0
 810a1a6:	f47f aa6e 	bne.w	8109686 <_dtoa_r+0x96>
 810a1aa:	4b07      	ldr	r3, [pc, #28]	; (810a1c8 <_dtoa_r+0xbd8>)
 810a1ac:	f7ff ba8e 	b.w	81096cc <_dtoa_r+0xdc>
 810a1b0:	9b02      	ldr	r3, [sp, #8]
 810a1b2:	2b00      	cmp	r3, #0
 810a1b4:	dcae      	bgt.n	810a114 <_dtoa_r+0xb24>
 810a1b6:	9b06      	ldr	r3, [sp, #24]
 810a1b8:	2b02      	cmp	r3, #2
 810a1ba:	f73f aea8 	bgt.w	8109f0e <_dtoa_r+0x91e>
 810a1be:	e7a9      	b.n	810a114 <_dtoa_r+0xb24>
 810a1c0:	0810c458 	.word	0x0810c458
 810a1c4:	0810c25c 	.word	0x0810c25c
 810a1c8:	0810c3d9 	.word	0x0810c3d9

0810a1cc <__sflush_r>:
 810a1cc:	898a      	ldrh	r2, [r1, #12]
 810a1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a1d2:	4605      	mov	r5, r0
 810a1d4:	0710      	lsls	r0, r2, #28
 810a1d6:	460c      	mov	r4, r1
 810a1d8:	d458      	bmi.n	810a28c <__sflush_r+0xc0>
 810a1da:	684b      	ldr	r3, [r1, #4]
 810a1dc:	2b00      	cmp	r3, #0
 810a1de:	dc05      	bgt.n	810a1ec <__sflush_r+0x20>
 810a1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a1e2:	2b00      	cmp	r3, #0
 810a1e4:	dc02      	bgt.n	810a1ec <__sflush_r+0x20>
 810a1e6:	2000      	movs	r0, #0
 810a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a1ee:	2e00      	cmp	r6, #0
 810a1f0:	d0f9      	beq.n	810a1e6 <__sflush_r+0x1a>
 810a1f2:	2300      	movs	r3, #0
 810a1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a1f8:	682f      	ldr	r7, [r5, #0]
 810a1fa:	602b      	str	r3, [r5, #0]
 810a1fc:	d032      	beq.n	810a264 <__sflush_r+0x98>
 810a1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a200:	89a3      	ldrh	r3, [r4, #12]
 810a202:	075a      	lsls	r2, r3, #29
 810a204:	d505      	bpl.n	810a212 <__sflush_r+0x46>
 810a206:	6863      	ldr	r3, [r4, #4]
 810a208:	1ac0      	subs	r0, r0, r3
 810a20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a20c:	b10b      	cbz	r3, 810a212 <__sflush_r+0x46>
 810a20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a210:	1ac0      	subs	r0, r0, r3
 810a212:	2300      	movs	r3, #0
 810a214:	4602      	mov	r2, r0
 810a216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a218:	6a21      	ldr	r1, [r4, #32]
 810a21a:	4628      	mov	r0, r5
 810a21c:	47b0      	blx	r6
 810a21e:	1c43      	adds	r3, r0, #1
 810a220:	89a3      	ldrh	r3, [r4, #12]
 810a222:	d106      	bne.n	810a232 <__sflush_r+0x66>
 810a224:	6829      	ldr	r1, [r5, #0]
 810a226:	291d      	cmp	r1, #29
 810a228:	d82c      	bhi.n	810a284 <__sflush_r+0xb8>
 810a22a:	4a2a      	ldr	r2, [pc, #168]	; (810a2d4 <__sflush_r+0x108>)
 810a22c:	40ca      	lsrs	r2, r1
 810a22e:	07d6      	lsls	r6, r2, #31
 810a230:	d528      	bpl.n	810a284 <__sflush_r+0xb8>
 810a232:	2200      	movs	r2, #0
 810a234:	6062      	str	r2, [r4, #4]
 810a236:	04d9      	lsls	r1, r3, #19
 810a238:	6922      	ldr	r2, [r4, #16]
 810a23a:	6022      	str	r2, [r4, #0]
 810a23c:	d504      	bpl.n	810a248 <__sflush_r+0x7c>
 810a23e:	1c42      	adds	r2, r0, #1
 810a240:	d101      	bne.n	810a246 <__sflush_r+0x7a>
 810a242:	682b      	ldr	r3, [r5, #0]
 810a244:	b903      	cbnz	r3, 810a248 <__sflush_r+0x7c>
 810a246:	6560      	str	r0, [r4, #84]	; 0x54
 810a248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a24a:	602f      	str	r7, [r5, #0]
 810a24c:	2900      	cmp	r1, #0
 810a24e:	d0ca      	beq.n	810a1e6 <__sflush_r+0x1a>
 810a250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a254:	4299      	cmp	r1, r3
 810a256:	d002      	beq.n	810a25e <__sflush_r+0x92>
 810a258:	4628      	mov	r0, r5
 810a25a:	f001 fa49 	bl	810b6f0 <_free_r>
 810a25e:	2000      	movs	r0, #0
 810a260:	6360      	str	r0, [r4, #52]	; 0x34
 810a262:	e7c1      	b.n	810a1e8 <__sflush_r+0x1c>
 810a264:	6a21      	ldr	r1, [r4, #32]
 810a266:	2301      	movs	r3, #1
 810a268:	4628      	mov	r0, r5
 810a26a:	47b0      	blx	r6
 810a26c:	1c41      	adds	r1, r0, #1
 810a26e:	d1c7      	bne.n	810a200 <__sflush_r+0x34>
 810a270:	682b      	ldr	r3, [r5, #0]
 810a272:	2b00      	cmp	r3, #0
 810a274:	d0c4      	beq.n	810a200 <__sflush_r+0x34>
 810a276:	2b1d      	cmp	r3, #29
 810a278:	d001      	beq.n	810a27e <__sflush_r+0xb2>
 810a27a:	2b16      	cmp	r3, #22
 810a27c:	d101      	bne.n	810a282 <__sflush_r+0xb6>
 810a27e:	602f      	str	r7, [r5, #0]
 810a280:	e7b1      	b.n	810a1e6 <__sflush_r+0x1a>
 810a282:	89a3      	ldrh	r3, [r4, #12]
 810a284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a288:	81a3      	strh	r3, [r4, #12]
 810a28a:	e7ad      	b.n	810a1e8 <__sflush_r+0x1c>
 810a28c:	690f      	ldr	r7, [r1, #16]
 810a28e:	2f00      	cmp	r7, #0
 810a290:	d0a9      	beq.n	810a1e6 <__sflush_r+0x1a>
 810a292:	0793      	lsls	r3, r2, #30
 810a294:	680e      	ldr	r6, [r1, #0]
 810a296:	bf08      	it	eq
 810a298:	694b      	ldreq	r3, [r1, #20]
 810a29a:	600f      	str	r7, [r1, #0]
 810a29c:	bf18      	it	ne
 810a29e:	2300      	movne	r3, #0
 810a2a0:	eba6 0807 	sub.w	r8, r6, r7
 810a2a4:	608b      	str	r3, [r1, #8]
 810a2a6:	f1b8 0f00 	cmp.w	r8, #0
 810a2aa:	dd9c      	ble.n	810a1e6 <__sflush_r+0x1a>
 810a2ac:	6a21      	ldr	r1, [r4, #32]
 810a2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a2b0:	4643      	mov	r3, r8
 810a2b2:	463a      	mov	r2, r7
 810a2b4:	4628      	mov	r0, r5
 810a2b6:	47b0      	blx	r6
 810a2b8:	2800      	cmp	r0, #0
 810a2ba:	dc06      	bgt.n	810a2ca <__sflush_r+0xfe>
 810a2bc:	89a3      	ldrh	r3, [r4, #12]
 810a2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a2c2:	81a3      	strh	r3, [r4, #12]
 810a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 810a2c8:	e78e      	b.n	810a1e8 <__sflush_r+0x1c>
 810a2ca:	4407      	add	r7, r0
 810a2cc:	eba8 0800 	sub.w	r8, r8, r0
 810a2d0:	e7e9      	b.n	810a2a6 <__sflush_r+0xda>
 810a2d2:	bf00      	nop
 810a2d4:	20400001 	.word	0x20400001

0810a2d8 <_fflush_r>:
 810a2d8:	b538      	push	{r3, r4, r5, lr}
 810a2da:	690b      	ldr	r3, [r1, #16]
 810a2dc:	4605      	mov	r5, r0
 810a2de:	460c      	mov	r4, r1
 810a2e0:	b913      	cbnz	r3, 810a2e8 <_fflush_r+0x10>
 810a2e2:	2500      	movs	r5, #0
 810a2e4:	4628      	mov	r0, r5
 810a2e6:	bd38      	pop	{r3, r4, r5, pc}
 810a2e8:	b118      	cbz	r0, 810a2f2 <_fflush_r+0x1a>
 810a2ea:	6983      	ldr	r3, [r0, #24]
 810a2ec:	b90b      	cbnz	r3, 810a2f2 <_fflush_r+0x1a>
 810a2ee:	f000 f887 	bl	810a400 <__sinit>
 810a2f2:	4b14      	ldr	r3, [pc, #80]	; (810a344 <_fflush_r+0x6c>)
 810a2f4:	429c      	cmp	r4, r3
 810a2f6:	d11b      	bne.n	810a330 <_fflush_r+0x58>
 810a2f8:	686c      	ldr	r4, [r5, #4]
 810a2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a2fe:	2b00      	cmp	r3, #0
 810a300:	d0ef      	beq.n	810a2e2 <_fflush_r+0xa>
 810a302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a304:	07d0      	lsls	r0, r2, #31
 810a306:	d404      	bmi.n	810a312 <_fflush_r+0x3a>
 810a308:	0599      	lsls	r1, r3, #22
 810a30a:	d402      	bmi.n	810a312 <_fflush_r+0x3a>
 810a30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a30e:	f000 fc88 	bl	810ac22 <__retarget_lock_acquire_recursive>
 810a312:	4628      	mov	r0, r5
 810a314:	4621      	mov	r1, r4
 810a316:	f7ff ff59 	bl	810a1cc <__sflush_r>
 810a31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a31c:	07da      	lsls	r2, r3, #31
 810a31e:	4605      	mov	r5, r0
 810a320:	d4e0      	bmi.n	810a2e4 <_fflush_r+0xc>
 810a322:	89a3      	ldrh	r3, [r4, #12]
 810a324:	059b      	lsls	r3, r3, #22
 810a326:	d4dd      	bmi.n	810a2e4 <_fflush_r+0xc>
 810a328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a32a:	f000 fc7b 	bl	810ac24 <__retarget_lock_release_recursive>
 810a32e:	e7d9      	b.n	810a2e4 <_fflush_r+0xc>
 810a330:	4b05      	ldr	r3, [pc, #20]	; (810a348 <_fflush_r+0x70>)
 810a332:	429c      	cmp	r4, r3
 810a334:	d101      	bne.n	810a33a <_fflush_r+0x62>
 810a336:	68ac      	ldr	r4, [r5, #8]
 810a338:	e7df      	b.n	810a2fa <_fflush_r+0x22>
 810a33a:	4b04      	ldr	r3, [pc, #16]	; (810a34c <_fflush_r+0x74>)
 810a33c:	429c      	cmp	r4, r3
 810a33e:	bf08      	it	eq
 810a340:	68ec      	ldreq	r4, [r5, #12]
 810a342:	e7da      	b.n	810a2fa <_fflush_r+0x22>
 810a344:	0810c48c 	.word	0x0810c48c
 810a348:	0810c4ac 	.word	0x0810c4ac
 810a34c:	0810c46c 	.word	0x0810c46c

0810a350 <std>:
 810a350:	2300      	movs	r3, #0
 810a352:	b510      	push	{r4, lr}
 810a354:	4604      	mov	r4, r0
 810a356:	e9c0 3300 	strd	r3, r3, [r0]
 810a35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a35e:	6083      	str	r3, [r0, #8]
 810a360:	8181      	strh	r1, [r0, #12]
 810a362:	6643      	str	r3, [r0, #100]	; 0x64
 810a364:	81c2      	strh	r2, [r0, #14]
 810a366:	6183      	str	r3, [r0, #24]
 810a368:	4619      	mov	r1, r3
 810a36a:	2208      	movs	r2, #8
 810a36c:	305c      	adds	r0, #92	; 0x5c
 810a36e:	f7fd fa27 	bl	81077c0 <memset>
 810a372:	4b05      	ldr	r3, [pc, #20]	; (810a388 <std+0x38>)
 810a374:	6263      	str	r3, [r4, #36]	; 0x24
 810a376:	4b05      	ldr	r3, [pc, #20]	; (810a38c <std+0x3c>)
 810a378:	62a3      	str	r3, [r4, #40]	; 0x28
 810a37a:	4b05      	ldr	r3, [pc, #20]	; (810a390 <std+0x40>)
 810a37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a37e:	4b05      	ldr	r3, [pc, #20]	; (810a394 <std+0x44>)
 810a380:	6224      	str	r4, [r4, #32]
 810a382:	6323      	str	r3, [r4, #48]	; 0x30
 810a384:	bd10      	pop	{r4, pc}
 810a386:	bf00      	nop
 810a388:	0810be51 	.word	0x0810be51
 810a38c:	0810be73 	.word	0x0810be73
 810a390:	0810beab 	.word	0x0810beab
 810a394:	0810becf 	.word	0x0810becf

0810a398 <_cleanup_r>:
 810a398:	4901      	ldr	r1, [pc, #4]	; (810a3a0 <_cleanup_r+0x8>)
 810a39a:	f000 b8af 	b.w	810a4fc <_fwalk_reent>
 810a39e:	bf00      	nop
 810a3a0:	0810a2d9 	.word	0x0810a2d9

0810a3a4 <__sfmoreglue>:
 810a3a4:	b570      	push	{r4, r5, r6, lr}
 810a3a6:	2268      	movs	r2, #104	; 0x68
 810a3a8:	1e4d      	subs	r5, r1, #1
 810a3aa:	4355      	muls	r5, r2
 810a3ac:	460e      	mov	r6, r1
 810a3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a3b2:	f001 fa09 	bl	810b7c8 <_malloc_r>
 810a3b6:	4604      	mov	r4, r0
 810a3b8:	b140      	cbz	r0, 810a3cc <__sfmoreglue+0x28>
 810a3ba:	2100      	movs	r1, #0
 810a3bc:	e9c0 1600 	strd	r1, r6, [r0]
 810a3c0:	300c      	adds	r0, #12
 810a3c2:	60a0      	str	r0, [r4, #8]
 810a3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a3c8:	f7fd f9fa 	bl	81077c0 <memset>
 810a3cc:	4620      	mov	r0, r4
 810a3ce:	bd70      	pop	{r4, r5, r6, pc}

0810a3d0 <__sfp_lock_acquire>:
 810a3d0:	4801      	ldr	r0, [pc, #4]	; (810a3d8 <__sfp_lock_acquire+0x8>)
 810a3d2:	f000 bc26 	b.w	810ac22 <__retarget_lock_acquire_recursive>
 810a3d6:	bf00      	nop
 810a3d8:	100004a5 	.word	0x100004a5

0810a3dc <__sfp_lock_release>:
 810a3dc:	4801      	ldr	r0, [pc, #4]	; (810a3e4 <__sfp_lock_release+0x8>)
 810a3de:	f000 bc21 	b.w	810ac24 <__retarget_lock_release_recursive>
 810a3e2:	bf00      	nop
 810a3e4:	100004a5 	.word	0x100004a5

0810a3e8 <__sinit_lock_acquire>:
 810a3e8:	4801      	ldr	r0, [pc, #4]	; (810a3f0 <__sinit_lock_acquire+0x8>)
 810a3ea:	f000 bc1a 	b.w	810ac22 <__retarget_lock_acquire_recursive>
 810a3ee:	bf00      	nop
 810a3f0:	100004a6 	.word	0x100004a6

0810a3f4 <__sinit_lock_release>:
 810a3f4:	4801      	ldr	r0, [pc, #4]	; (810a3fc <__sinit_lock_release+0x8>)
 810a3f6:	f000 bc15 	b.w	810ac24 <__retarget_lock_release_recursive>
 810a3fa:	bf00      	nop
 810a3fc:	100004a6 	.word	0x100004a6

0810a400 <__sinit>:
 810a400:	b510      	push	{r4, lr}
 810a402:	4604      	mov	r4, r0
 810a404:	f7ff fff0 	bl	810a3e8 <__sinit_lock_acquire>
 810a408:	69a3      	ldr	r3, [r4, #24]
 810a40a:	b11b      	cbz	r3, 810a414 <__sinit+0x14>
 810a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a410:	f7ff bff0 	b.w	810a3f4 <__sinit_lock_release>
 810a414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a418:	6523      	str	r3, [r4, #80]	; 0x50
 810a41a:	4b13      	ldr	r3, [pc, #76]	; (810a468 <__sinit+0x68>)
 810a41c:	4a13      	ldr	r2, [pc, #76]	; (810a46c <__sinit+0x6c>)
 810a41e:	681b      	ldr	r3, [r3, #0]
 810a420:	62a2      	str	r2, [r4, #40]	; 0x28
 810a422:	42a3      	cmp	r3, r4
 810a424:	bf04      	itt	eq
 810a426:	2301      	moveq	r3, #1
 810a428:	61a3      	streq	r3, [r4, #24]
 810a42a:	4620      	mov	r0, r4
 810a42c:	f000 f820 	bl	810a470 <__sfp>
 810a430:	6060      	str	r0, [r4, #4]
 810a432:	4620      	mov	r0, r4
 810a434:	f000 f81c 	bl	810a470 <__sfp>
 810a438:	60a0      	str	r0, [r4, #8]
 810a43a:	4620      	mov	r0, r4
 810a43c:	f000 f818 	bl	810a470 <__sfp>
 810a440:	2200      	movs	r2, #0
 810a442:	60e0      	str	r0, [r4, #12]
 810a444:	2104      	movs	r1, #4
 810a446:	6860      	ldr	r0, [r4, #4]
 810a448:	f7ff ff82 	bl	810a350 <std>
 810a44c:	68a0      	ldr	r0, [r4, #8]
 810a44e:	2201      	movs	r2, #1
 810a450:	2109      	movs	r1, #9
 810a452:	f7ff ff7d 	bl	810a350 <std>
 810a456:	68e0      	ldr	r0, [r4, #12]
 810a458:	2202      	movs	r2, #2
 810a45a:	2112      	movs	r1, #18
 810a45c:	f7ff ff78 	bl	810a350 <std>
 810a460:	2301      	movs	r3, #1
 810a462:	61a3      	str	r3, [r4, #24]
 810a464:	e7d2      	b.n	810a40c <__sinit+0xc>
 810a466:	bf00      	nop
 810a468:	0810c248 	.word	0x0810c248
 810a46c:	0810a399 	.word	0x0810a399

0810a470 <__sfp>:
 810a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a472:	4607      	mov	r7, r0
 810a474:	f7ff ffac 	bl	810a3d0 <__sfp_lock_acquire>
 810a478:	4b1e      	ldr	r3, [pc, #120]	; (810a4f4 <__sfp+0x84>)
 810a47a:	681e      	ldr	r6, [r3, #0]
 810a47c:	69b3      	ldr	r3, [r6, #24]
 810a47e:	b913      	cbnz	r3, 810a486 <__sfp+0x16>
 810a480:	4630      	mov	r0, r6
 810a482:	f7ff ffbd 	bl	810a400 <__sinit>
 810a486:	3648      	adds	r6, #72	; 0x48
 810a488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a48c:	3b01      	subs	r3, #1
 810a48e:	d503      	bpl.n	810a498 <__sfp+0x28>
 810a490:	6833      	ldr	r3, [r6, #0]
 810a492:	b30b      	cbz	r3, 810a4d8 <__sfp+0x68>
 810a494:	6836      	ldr	r6, [r6, #0]
 810a496:	e7f7      	b.n	810a488 <__sfp+0x18>
 810a498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a49c:	b9d5      	cbnz	r5, 810a4d4 <__sfp+0x64>
 810a49e:	4b16      	ldr	r3, [pc, #88]	; (810a4f8 <__sfp+0x88>)
 810a4a0:	60e3      	str	r3, [r4, #12]
 810a4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a4a6:	6665      	str	r5, [r4, #100]	; 0x64
 810a4a8:	f000 fbba 	bl	810ac20 <__retarget_lock_init_recursive>
 810a4ac:	f7ff ff96 	bl	810a3dc <__sfp_lock_release>
 810a4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a4b8:	6025      	str	r5, [r4, #0]
 810a4ba:	61a5      	str	r5, [r4, #24]
 810a4bc:	2208      	movs	r2, #8
 810a4be:	4629      	mov	r1, r5
 810a4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a4c4:	f7fd f97c 	bl	81077c0 <memset>
 810a4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a4d0:	4620      	mov	r0, r4
 810a4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a4d4:	3468      	adds	r4, #104	; 0x68
 810a4d6:	e7d9      	b.n	810a48c <__sfp+0x1c>
 810a4d8:	2104      	movs	r1, #4
 810a4da:	4638      	mov	r0, r7
 810a4dc:	f7ff ff62 	bl	810a3a4 <__sfmoreglue>
 810a4e0:	4604      	mov	r4, r0
 810a4e2:	6030      	str	r0, [r6, #0]
 810a4e4:	2800      	cmp	r0, #0
 810a4e6:	d1d5      	bne.n	810a494 <__sfp+0x24>
 810a4e8:	f7ff ff78 	bl	810a3dc <__sfp_lock_release>
 810a4ec:	230c      	movs	r3, #12
 810a4ee:	603b      	str	r3, [r7, #0]
 810a4f0:	e7ee      	b.n	810a4d0 <__sfp+0x60>
 810a4f2:	bf00      	nop
 810a4f4:	0810c248 	.word	0x0810c248
 810a4f8:	ffff0001 	.word	0xffff0001

0810a4fc <_fwalk_reent>:
 810a4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a500:	4606      	mov	r6, r0
 810a502:	4688      	mov	r8, r1
 810a504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a508:	2700      	movs	r7, #0
 810a50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a50e:	f1b9 0901 	subs.w	r9, r9, #1
 810a512:	d505      	bpl.n	810a520 <_fwalk_reent+0x24>
 810a514:	6824      	ldr	r4, [r4, #0]
 810a516:	2c00      	cmp	r4, #0
 810a518:	d1f7      	bne.n	810a50a <_fwalk_reent+0xe>
 810a51a:	4638      	mov	r0, r7
 810a51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a520:	89ab      	ldrh	r3, [r5, #12]
 810a522:	2b01      	cmp	r3, #1
 810a524:	d907      	bls.n	810a536 <_fwalk_reent+0x3a>
 810a526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a52a:	3301      	adds	r3, #1
 810a52c:	d003      	beq.n	810a536 <_fwalk_reent+0x3a>
 810a52e:	4629      	mov	r1, r5
 810a530:	4630      	mov	r0, r6
 810a532:	47c0      	blx	r8
 810a534:	4307      	orrs	r7, r0
 810a536:	3568      	adds	r5, #104	; 0x68
 810a538:	e7e9      	b.n	810a50e <_fwalk_reent+0x12>

0810a53a <rshift>:
 810a53a:	6903      	ldr	r3, [r0, #16]
 810a53c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a544:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a548:	f100 0414 	add.w	r4, r0, #20
 810a54c:	dd45      	ble.n	810a5da <rshift+0xa0>
 810a54e:	f011 011f 	ands.w	r1, r1, #31
 810a552:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a556:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a55a:	d10c      	bne.n	810a576 <rshift+0x3c>
 810a55c:	f100 0710 	add.w	r7, r0, #16
 810a560:	4629      	mov	r1, r5
 810a562:	42b1      	cmp	r1, r6
 810a564:	d334      	bcc.n	810a5d0 <rshift+0x96>
 810a566:	1a9b      	subs	r3, r3, r2
 810a568:	009b      	lsls	r3, r3, #2
 810a56a:	1eea      	subs	r2, r5, #3
 810a56c:	4296      	cmp	r6, r2
 810a56e:	bf38      	it	cc
 810a570:	2300      	movcc	r3, #0
 810a572:	4423      	add	r3, r4
 810a574:	e015      	b.n	810a5a2 <rshift+0x68>
 810a576:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a57a:	f1c1 0820 	rsb	r8, r1, #32
 810a57e:	40cf      	lsrs	r7, r1
 810a580:	f105 0e04 	add.w	lr, r5, #4
 810a584:	46a1      	mov	r9, r4
 810a586:	4576      	cmp	r6, lr
 810a588:	46f4      	mov	ip, lr
 810a58a:	d815      	bhi.n	810a5b8 <rshift+0x7e>
 810a58c:	1a9a      	subs	r2, r3, r2
 810a58e:	0092      	lsls	r2, r2, #2
 810a590:	3a04      	subs	r2, #4
 810a592:	3501      	adds	r5, #1
 810a594:	42ae      	cmp	r6, r5
 810a596:	bf38      	it	cc
 810a598:	2200      	movcc	r2, #0
 810a59a:	18a3      	adds	r3, r4, r2
 810a59c:	50a7      	str	r7, [r4, r2]
 810a59e:	b107      	cbz	r7, 810a5a2 <rshift+0x68>
 810a5a0:	3304      	adds	r3, #4
 810a5a2:	1b1a      	subs	r2, r3, r4
 810a5a4:	42a3      	cmp	r3, r4
 810a5a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a5aa:	bf08      	it	eq
 810a5ac:	2300      	moveq	r3, #0
 810a5ae:	6102      	str	r2, [r0, #16]
 810a5b0:	bf08      	it	eq
 810a5b2:	6143      	streq	r3, [r0, #20]
 810a5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a5b8:	f8dc c000 	ldr.w	ip, [ip]
 810a5bc:	fa0c fc08 	lsl.w	ip, ip, r8
 810a5c0:	ea4c 0707 	orr.w	r7, ip, r7
 810a5c4:	f849 7b04 	str.w	r7, [r9], #4
 810a5c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a5cc:	40cf      	lsrs	r7, r1
 810a5ce:	e7da      	b.n	810a586 <rshift+0x4c>
 810a5d0:	f851 cb04 	ldr.w	ip, [r1], #4
 810a5d4:	f847 cf04 	str.w	ip, [r7, #4]!
 810a5d8:	e7c3      	b.n	810a562 <rshift+0x28>
 810a5da:	4623      	mov	r3, r4
 810a5dc:	e7e1      	b.n	810a5a2 <rshift+0x68>

0810a5de <__hexdig_fun>:
 810a5de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a5e2:	2b09      	cmp	r3, #9
 810a5e4:	d802      	bhi.n	810a5ec <__hexdig_fun+0xe>
 810a5e6:	3820      	subs	r0, #32
 810a5e8:	b2c0      	uxtb	r0, r0
 810a5ea:	4770      	bx	lr
 810a5ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a5f0:	2b05      	cmp	r3, #5
 810a5f2:	d801      	bhi.n	810a5f8 <__hexdig_fun+0x1a>
 810a5f4:	3847      	subs	r0, #71	; 0x47
 810a5f6:	e7f7      	b.n	810a5e8 <__hexdig_fun+0xa>
 810a5f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a5fc:	2b05      	cmp	r3, #5
 810a5fe:	d801      	bhi.n	810a604 <__hexdig_fun+0x26>
 810a600:	3827      	subs	r0, #39	; 0x27
 810a602:	e7f1      	b.n	810a5e8 <__hexdig_fun+0xa>
 810a604:	2000      	movs	r0, #0
 810a606:	4770      	bx	lr

0810a608 <__gethex>:
 810a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a60c:	ed2d 8b02 	vpush	{d8}
 810a610:	b089      	sub	sp, #36	; 0x24
 810a612:	ee08 0a10 	vmov	s16, r0
 810a616:	9304      	str	r3, [sp, #16]
 810a618:	4bb4      	ldr	r3, [pc, #720]	; (810a8ec <__gethex+0x2e4>)
 810a61a:	681b      	ldr	r3, [r3, #0]
 810a61c:	9301      	str	r3, [sp, #4]
 810a61e:	4618      	mov	r0, r3
 810a620:	468b      	mov	fp, r1
 810a622:	4690      	mov	r8, r2
 810a624:	f7f5 fe5c 	bl	81002e0 <strlen>
 810a628:	9b01      	ldr	r3, [sp, #4]
 810a62a:	f8db 2000 	ldr.w	r2, [fp]
 810a62e:	4403      	add	r3, r0
 810a630:	4682      	mov	sl, r0
 810a632:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a636:	9305      	str	r3, [sp, #20]
 810a638:	1c93      	adds	r3, r2, #2
 810a63a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a63e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a642:	32fe      	adds	r2, #254	; 0xfe
 810a644:	18d1      	adds	r1, r2, r3
 810a646:	461f      	mov	r7, r3
 810a648:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a64c:	9100      	str	r1, [sp, #0]
 810a64e:	2830      	cmp	r0, #48	; 0x30
 810a650:	d0f8      	beq.n	810a644 <__gethex+0x3c>
 810a652:	f7ff ffc4 	bl	810a5de <__hexdig_fun>
 810a656:	4604      	mov	r4, r0
 810a658:	2800      	cmp	r0, #0
 810a65a:	d13a      	bne.n	810a6d2 <__gethex+0xca>
 810a65c:	9901      	ldr	r1, [sp, #4]
 810a65e:	4652      	mov	r2, sl
 810a660:	4638      	mov	r0, r7
 810a662:	f001 fc38 	bl	810bed6 <strncmp>
 810a666:	4605      	mov	r5, r0
 810a668:	2800      	cmp	r0, #0
 810a66a:	d168      	bne.n	810a73e <__gethex+0x136>
 810a66c:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a670:	eb07 060a 	add.w	r6, r7, sl
 810a674:	f7ff ffb3 	bl	810a5de <__hexdig_fun>
 810a678:	2800      	cmp	r0, #0
 810a67a:	d062      	beq.n	810a742 <__gethex+0x13a>
 810a67c:	4633      	mov	r3, r6
 810a67e:	7818      	ldrb	r0, [r3, #0]
 810a680:	2830      	cmp	r0, #48	; 0x30
 810a682:	461f      	mov	r7, r3
 810a684:	f103 0301 	add.w	r3, r3, #1
 810a688:	d0f9      	beq.n	810a67e <__gethex+0x76>
 810a68a:	f7ff ffa8 	bl	810a5de <__hexdig_fun>
 810a68e:	2301      	movs	r3, #1
 810a690:	fab0 f480 	clz	r4, r0
 810a694:	0964      	lsrs	r4, r4, #5
 810a696:	4635      	mov	r5, r6
 810a698:	9300      	str	r3, [sp, #0]
 810a69a:	463a      	mov	r2, r7
 810a69c:	4616      	mov	r6, r2
 810a69e:	3201      	adds	r2, #1
 810a6a0:	7830      	ldrb	r0, [r6, #0]
 810a6a2:	f7ff ff9c 	bl	810a5de <__hexdig_fun>
 810a6a6:	2800      	cmp	r0, #0
 810a6a8:	d1f8      	bne.n	810a69c <__gethex+0x94>
 810a6aa:	9901      	ldr	r1, [sp, #4]
 810a6ac:	4652      	mov	r2, sl
 810a6ae:	4630      	mov	r0, r6
 810a6b0:	f001 fc11 	bl	810bed6 <strncmp>
 810a6b4:	b980      	cbnz	r0, 810a6d8 <__gethex+0xd0>
 810a6b6:	b94d      	cbnz	r5, 810a6cc <__gethex+0xc4>
 810a6b8:	eb06 050a 	add.w	r5, r6, sl
 810a6bc:	462a      	mov	r2, r5
 810a6be:	4616      	mov	r6, r2
 810a6c0:	3201      	adds	r2, #1
 810a6c2:	7830      	ldrb	r0, [r6, #0]
 810a6c4:	f7ff ff8b 	bl	810a5de <__hexdig_fun>
 810a6c8:	2800      	cmp	r0, #0
 810a6ca:	d1f8      	bne.n	810a6be <__gethex+0xb6>
 810a6cc:	1bad      	subs	r5, r5, r6
 810a6ce:	00ad      	lsls	r5, r5, #2
 810a6d0:	e004      	b.n	810a6dc <__gethex+0xd4>
 810a6d2:	2400      	movs	r4, #0
 810a6d4:	4625      	mov	r5, r4
 810a6d6:	e7e0      	b.n	810a69a <__gethex+0x92>
 810a6d8:	2d00      	cmp	r5, #0
 810a6da:	d1f7      	bne.n	810a6cc <__gethex+0xc4>
 810a6dc:	7833      	ldrb	r3, [r6, #0]
 810a6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a6e2:	2b50      	cmp	r3, #80	; 0x50
 810a6e4:	d13b      	bne.n	810a75e <__gethex+0x156>
 810a6e6:	7873      	ldrb	r3, [r6, #1]
 810a6e8:	2b2b      	cmp	r3, #43	; 0x2b
 810a6ea:	d02c      	beq.n	810a746 <__gethex+0x13e>
 810a6ec:	2b2d      	cmp	r3, #45	; 0x2d
 810a6ee:	d02e      	beq.n	810a74e <__gethex+0x146>
 810a6f0:	1c71      	adds	r1, r6, #1
 810a6f2:	f04f 0900 	mov.w	r9, #0
 810a6f6:	7808      	ldrb	r0, [r1, #0]
 810a6f8:	f7ff ff71 	bl	810a5de <__hexdig_fun>
 810a6fc:	1e43      	subs	r3, r0, #1
 810a6fe:	b2db      	uxtb	r3, r3
 810a700:	2b18      	cmp	r3, #24
 810a702:	d82c      	bhi.n	810a75e <__gethex+0x156>
 810a704:	f1a0 0210 	sub.w	r2, r0, #16
 810a708:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a70c:	f7ff ff67 	bl	810a5de <__hexdig_fun>
 810a710:	1e43      	subs	r3, r0, #1
 810a712:	b2db      	uxtb	r3, r3
 810a714:	2b18      	cmp	r3, #24
 810a716:	d91d      	bls.n	810a754 <__gethex+0x14c>
 810a718:	f1b9 0f00 	cmp.w	r9, #0
 810a71c:	d000      	beq.n	810a720 <__gethex+0x118>
 810a71e:	4252      	negs	r2, r2
 810a720:	4415      	add	r5, r2
 810a722:	f8cb 1000 	str.w	r1, [fp]
 810a726:	b1e4      	cbz	r4, 810a762 <__gethex+0x15a>
 810a728:	9b00      	ldr	r3, [sp, #0]
 810a72a:	2b00      	cmp	r3, #0
 810a72c:	bf14      	ite	ne
 810a72e:	2700      	movne	r7, #0
 810a730:	2706      	moveq	r7, #6
 810a732:	4638      	mov	r0, r7
 810a734:	b009      	add	sp, #36	; 0x24
 810a736:	ecbd 8b02 	vpop	{d8}
 810a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a73e:	463e      	mov	r6, r7
 810a740:	4625      	mov	r5, r4
 810a742:	2401      	movs	r4, #1
 810a744:	e7ca      	b.n	810a6dc <__gethex+0xd4>
 810a746:	f04f 0900 	mov.w	r9, #0
 810a74a:	1cb1      	adds	r1, r6, #2
 810a74c:	e7d3      	b.n	810a6f6 <__gethex+0xee>
 810a74e:	f04f 0901 	mov.w	r9, #1
 810a752:	e7fa      	b.n	810a74a <__gethex+0x142>
 810a754:	230a      	movs	r3, #10
 810a756:	fb03 0202 	mla	r2, r3, r2, r0
 810a75a:	3a10      	subs	r2, #16
 810a75c:	e7d4      	b.n	810a708 <__gethex+0x100>
 810a75e:	4631      	mov	r1, r6
 810a760:	e7df      	b.n	810a722 <__gethex+0x11a>
 810a762:	1bf3      	subs	r3, r6, r7
 810a764:	3b01      	subs	r3, #1
 810a766:	4621      	mov	r1, r4
 810a768:	2b07      	cmp	r3, #7
 810a76a:	dc0b      	bgt.n	810a784 <__gethex+0x17c>
 810a76c:	ee18 0a10 	vmov	r0, s16
 810a770:	f000 fae6 	bl	810ad40 <_Balloc>
 810a774:	4604      	mov	r4, r0
 810a776:	b940      	cbnz	r0, 810a78a <__gethex+0x182>
 810a778:	4b5d      	ldr	r3, [pc, #372]	; (810a8f0 <__gethex+0x2e8>)
 810a77a:	4602      	mov	r2, r0
 810a77c:	21de      	movs	r1, #222	; 0xde
 810a77e:	485d      	ldr	r0, [pc, #372]	; (810a8f4 <__gethex+0x2ec>)
 810a780:	f001 fbdc 	bl	810bf3c <__assert_func>
 810a784:	3101      	adds	r1, #1
 810a786:	105b      	asrs	r3, r3, #1
 810a788:	e7ee      	b.n	810a768 <__gethex+0x160>
 810a78a:	f100 0914 	add.w	r9, r0, #20
 810a78e:	f04f 0b00 	mov.w	fp, #0
 810a792:	f1ca 0301 	rsb	r3, sl, #1
 810a796:	f8cd 9008 	str.w	r9, [sp, #8]
 810a79a:	f8cd b000 	str.w	fp, [sp]
 810a79e:	9306      	str	r3, [sp, #24]
 810a7a0:	42b7      	cmp	r7, r6
 810a7a2:	d340      	bcc.n	810a826 <__gethex+0x21e>
 810a7a4:	9802      	ldr	r0, [sp, #8]
 810a7a6:	9b00      	ldr	r3, [sp, #0]
 810a7a8:	f840 3b04 	str.w	r3, [r0], #4
 810a7ac:	eba0 0009 	sub.w	r0, r0, r9
 810a7b0:	1080      	asrs	r0, r0, #2
 810a7b2:	0146      	lsls	r6, r0, #5
 810a7b4:	6120      	str	r0, [r4, #16]
 810a7b6:	4618      	mov	r0, r3
 810a7b8:	f000 fbb4 	bl	810af24 <__hi0bits>
 810a7bc:	1a30      	subs	r0, r6, r0
 810a7be:	f8d8 6000 	ldr.w	r6, [r8]
 810a7c2:	42b0      	cmp	r0, r6
 810a7c4:	dd63      	ble.n	810a88e <__gethex+0x286>
 810a7c6:	1b87      	subs	r7, r0, r6
 810a7c8:	4639      	mov	r1, r7
 810a7ca:	4620      	mov	r0, r4
 810a7cc:	f000 ff58 	bl	810b680 <__any_on>
 810a7d0:	4682      	mov	sl, r0
 810a7d2:	b1a8      	cbz	r0, 810a800 <__gethex+0x1f8>
 810a7d4:	1e7b      	subs	r3, r7, #1
 810a7d6:	1159      	asrs	r1, r3, #5
 810a7d8:	f003 021f 	and.w	r2, r3, #31
 810a7dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810a7e0:	f04f 0a01 	mov.w	sl, #1
 810a7e4:	fa0a f202 	lsl.w	r2, sl, r2
 810a7e8:	420a      	tst	r2, r1
 810a7ea:	d009      	beq.n	810a800 <__gethex+0x1f8>
 810a7ec:	4553      	cmp	r3, sl
 810a7ee:	dd05      	ble.n	810a7fc <__gethex+0x1f4>
 810a7f0:	1eb9      	subs	r1, r7, #2
 810a7f2:	4620      	mov	r0, r4
 810a7f4:	f000 ff44 	bl	810b680 <__any_on>
 810a7f8:	2800      	cmp	r0, #0
 810a7fa:	d145      	bne.n	810a888 <__gethex+0x280>
 810a7fc:	f04f 0a02 	mov.w	sl, #2
 810a800:	4639      	mov	r1, r7
 810a802:	4620      	mov	r0, r4
 810a804:	f7ff fe99 	bl	810a53a <rshift>
 810a808:	443d      	add	r5, r7
 810a80a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a80e:	42ab      	cmp	r3, r5
 810a810:	da4c      	bge.n	810a8ac <__gethex+0x2a4>
 810a812:	ee18 0a10 	vmov	r0, s16
 810a816:	4621      	mov	r1, r4
 810a818:	f000 fad2 	bl	810adc0 <_Bfree>
 810a81c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a81e:	2300      	movs	r3, #0
 810a820:	6013      	str	r3, [r2, #0]
 810a822:	27a3      	movs	r7, #163	; 0xa3
 810a824:	e785      	b.n	810a732 <__gethex+0x12a>
 810a826:	1e73      	subs	r3, r6, #1
 810a828:	9a05      	ldr	r2, [sp, #20]
 810a82a:	9303      	str	r3, [sp, #12]
 810a82c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810a830:	4293      	cmp	r3, r2
 810a832:	d019      	beq.n	810a868 <__gethex+0x260>
 810a834:	f1bb 0f20 	cmp.w	fp, #32
 810a838:	d107      	bne.n	810a84a <__gethex+0x242>
 810a83a:	9b02      	ldr	r3, [sp, #8]
 810a83c:	9a00      	ldr	r2, [sp, #0]
 810a83e:	f843 2b04 	str.w	r2, [r3], #4
 810a842:	9302      	str	r3, [sp, #8]
 810a844:	2300      	movs	r3, #0
 810a846:	9300      	str	r3, [sp, #0]
 810a848:	469b      	mov	fp, r3
 810a84a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810a84e:	f7ff fec6 	bl	810a5de <__hexdig_fun>
 810a852:	9b00      	ldr	r3, [sp, #0]
 810a854:	f000 000f 	and.w	r0, r0, #15
 810a858:	fa00 f00b 	lsl.w	r0, r0, fp
 810a85c:	4303      	orrs	r3, r0
 810a85e:	9300      	str	r3, [sp, #0]
 810a860:	f10b 0b04 	add.w	fp, fp, #4
 810a864:	9b03      	ldr	r3, [sp, #12]
 810a866:	e00d      	b.n	810a884 <__gethex+0x27c>
 810a868:	9b03      	ldr	r3, [sp, #12]
 810a86a:	9a06      	ldr	r2, [sp, #24]
 810a86c:	4413      	add	r3, r2
 810a86e:	42bb      	cmp	r3, r7
 810a870:	d3e0      	bcc.n	810a834 <__gethex+0x22c>
 810a872:	4618      	mov	r0, r3
 810a874:	9901      	ldr	r1, [sp, #4]
 810a876:	9307      	str	r3, [sp, #28]
 810a878:	4652      	mov	r2, sl
 810a87a:	f001 fb2c 	bl	810bed6 <strncmp>
 810a87e:	9b07      	ldr	r3, [sp, #28]
 810a880:	2800      	cmp	r0, #0
 810a882:	d1d7      	bne.n	810a834 <__gethex+0x22c>
 810a884:	461e      	mov	r6, r3
 810a886:	e78b      	b.n	810a7a0 <__gethex+0x198>
 810a888:	f04f 0a03 	mov.w	sl, #3
 810a88c:	e7b8      	b.n	810a800 <__gethex+0x1f8>
 810a88e:	da0a      	bge.n	810a8a6 <__gethex+0x29e>
 810a890:	1a37      	subs	r7, r6, r0
 810a892:	4621      	mov	r1, r4
 810a894:	ee18 0a10 	vmov	r0, s16
 810a898:	463a      	mov	r2, r7
 810a89a:	f000 fcad 	bl	810b1f8 <__lshift>
 810a89e:	1bed      	subs	r5, r5, r7
 810a8a0:	4604      	mov	r4, r0
 810a8a2:	f100 0914 	add.w	r9, r0, #20
 810a8a6:	f04f 0a00 	mov.w	sl, #0
 810a8aa:	e7ae      	b.n	810a80a <__gethex+0x202>
 810a8ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810a8b0:	42a8      	cmp	r0, r5
 810a8b2:	dd72      	ble.n	810a99a <__gethex+0x392>
 810a8b4:	1b45      	subs	r5, r0, r5
 810a8b6:	42ae      	cmp	r6, r5
 810a8b8:	dc36      	bgt.n	810a928 <__gethex+0x320>
 810a8ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a8be:	2b02      	cmp	r3, #2
 810a8c0:	d02a      	beq.n	810a918 <__gethex+0x310>
 810a8c2:	2b03      	cmp	r3, #3
 810a8c4:	d02c      	beq.n	810a920 <__gethex+0x318>
 810a8c6:	2b01      	cmp	r3, #1
 810a8c8:	d11c      	bne.n	810a904 <__gethex+0x2fc>
 810a8ca:	42ae      	cmp	r6, r5
 810a8cc:	d11a      	bne.n	810a904 <__gethex+0x2fc>
 810a8ce:	2e01      	cmp	r6, #1
 810a8d0:	d112      	bne.n	810a8f8 <__gethex+0x2f0>
 810a8d2:	9a04      	ldr	r2, [sp, #16]
 810a8d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810a8d8:	6013      	str	r3, [r2, #0]
 810a8da:	2301      	movs	r3, #1
 810a8dc:	6123      	str	r3, [r4, #16]
 810a8de:	f8c9 3000 	str.w	r3, [r9]
 810a8e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a8e4:	2762      	movs	r7, #98	; 0x62
 810a8e6:	601c      	str	r4, [r3, #0]
 810a8e8:	e723      	b.n	810a732 <__gethex+0x12a>
 810a8ea:	bf00      	nop
 810a8ec:	0810c534 	.word	0x0810c534
 810a8f0:	0810c458 	.word	0x0810c458
 810a8f4:	0810c4cc 	.word	0x0810c4cc
 810a8f8:	1e71      	subs	r1, r6, #1
 810a8fa:	4620      	mov	r0, r4
 810a8fc:	f000 fec0 	bl	810b680 <__any_on>
 810a900:	2800      	cmp	r0, #0
 810a902:	d1e6      	bne.n	810a8d2 <__gethex+0x2ca>
 810a904:	ee18 0a10 	vmov	r0, s16
 810a908:	4621      	mov	r1, r4
 810a90a:	f000 fa59 	bl	810adc0 <_Bfree>
 810a90e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a910:	2300      	movs	r3, #0
 810a912:	6013      	str	r3, [r2, #0]
 810a914:	2750      	movs	r7, #80	; 0x50
 810a916:	e70c      	b.n	810a732 <__gethex+0x12a>
 810a918:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a91a:	2b00      	cmp	r3, #0
 810a91c:	d1f2      	bne.n	810a904 <__gethex+0x2fc>
 810a91e:	e7d8      	b.n	810a8d2 <__gethex+0x2ca>
 810a920:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a922:	2b00      	cmp	r3, #0
 810a924:	d1d5      	bne.n	810a8d2 <__gethex+0x2ca>
 810a926:	e7ed      	b.n	810a904 <__gethex+0x2fc>
 810a928:	1e6f      	subs	r7, r5, #1
 810a92a:	f1ba 0f00 	cmp.w	sl, #0
 810a92e:	d131      	bne.n	810a994 <__gethex+0x38c>
 810a930:	b127      	cbz	r7, 810a93c <__gethex+0x334>
 810a932:	4639      	mov	r1, r7
 810a934:	4620      	mov	r0, r4
 810a936:	f000 fea3 	bl	810b680 <__any_on>
 810a93a:	4682      	mov	sl, r0
 810a93c:	117b      	asrs	r3, r7, #5
 810a93e:	2101      	movs	r1, #1
 810a940:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810a944:	f007 071f 	and.w	r7, r7, #31
 810a948:	fa01 f707 	lsl.w	r7, r1, r7
 810a94c:	421f      	tst	r7, r3
 810a94e:	4629      	mov	r1, r5
 810a950:	4620      	mov	r0, r4
 810a952:	bf18      	it	ne
 810a954:	f04a 0a02 	orrne.w	sl, sl, #2
 810a958:	1b76      	subs	r6, r6, r5
 810a95a:	f7ff fdee 	bl	810a53a <rshift>
 810a95e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810a962:	2702      	movs	r7, #2
 810a964:	f1ba 0f00 	cmp.w	sl, #0
 810a968:	d048      	beq.n	810a9fc <__gethex+0x3f4>
 810a96a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a96e:	2b02      	cmp	r3, #2
 810a970:	d015      	beq.n	810a99e <__gethex+0x396>
 810a972:	2b03      	cmp	r3, #3
 810a974:	d017      	beq.n	810a9a6 <__gethex+0x39e>
 810a976:	2b01      	cmp	r3, #1
 810a978:	d109      	bne.n	810a98e <__gethex+0x386>
 810a97a:	f01a 0f02 	tst.w	sl, #2
 810a97e:	d006      	beq.n	810a98e <__gethex+0x386>
 810a980:	f8d9 0000 	ldr.w	r0, [r9]
 810a984:	ea4a 0a00 	orr.w	sl, sl, r0
 810a988:	f01a 0f01 	tst.w	sl, #1
 810a98c:	d10e      	bne.n	810a9ac <__gethex+0x3a4>
 810a98e:	f047 0710 	orr.w	r7, r7, #16
 810a992:	e033      	b.n	810a9fc <__gethex+0x3f4>
 810a994:	f04f 0a01 	mov.w	sl, #1
 810a998:	e7d0      	b.n	810a93c <__gethex+0x334>
 810a99a:	2701      	movs	r7, #1
 810a99c:	e7e2      	b.n	810a964 <__gethex+0x35c>
 810a99e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a9a0:	f1c3 0301 	rsb	r3, r3, #1
 810a9a4:	9315      	str	r3, [sp, #84]	; 0x54
 810a9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a9a8:	2b00      	cmp	r3, #0
 810a9aa:	d0f0      	beq.n	810a98e <__gethex+0x386>
 810a9ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810a9b0:	f104 0314 	add.w	r3, r4, #20
 810a9b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810a9b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810a9bc:	f04f 0c00 	mov.w	ip, #0
 810a9c0:	4618      	mov	r0, r3
 810a9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 810a9c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 810a9ca:	d01c      	beq.n	810aa06 <__gethex+0x3fe>
 810a9cc:	3201      	adds	r2, #1
 810a9ce:	6002      	str	r2, [r0, #0]
 810a9d0:	2f02      	cmp	r7, #2
 810a9d2:	f104 0314 	add.w	r3, r4, #20
 810a9d6:	d13f      	bne.n	810aa58 <__gethex+0x450>
 810a9d8:	f8d8 2000 	ldr.w	r2, [r8]
 810a9dc:	3a01      	subs	r2, #1
 810a9de:	42b2      	cmp	r2, r6
 810a9e0:	d10a      	bne.n	810a9f8 <__gethex+0x3f0>
 810a9e2:	1171      	asrs	r1, r6, #5
 810a9e4:	2201      	movs	r2, #1
 810a9e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810a9ea:	f006 061f 	and.w	r6, r6, #31
 810a9ee:	fa02 f606 	lsl.w	r6, r2, r6
 810a9f2:	421e      	tst	r6, r3
 810a9f4:	bf18      	it	ne
 810a9f6:	4617      	movne	r7, r2
 810a9f8:	f047 0720 	orr.w	r7, r7, #32
 810a9fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a9fe:	601c      	str	r4, [r3, #0]
 810aa00:	9b04      	ldr	r3, [sp, #16]
 810aa02:	601d      	str	r5, [r3, #0]
 810aa04:	e695      	b.n	810a732 <__gethex+0x12a>
 810aa06:	4299      	cmp	r1, r3
 810aa08:	f843 cc04 	str.w	ip, [r3, #-4]
 810aa0c:	d8d8      	bhi.n	810a9c0 <__gethex+0x3b8>
 810aa0e:	68a3      	ldr	r3, [r4, #8]
 810aa10:	459b      	cmp	fp, r3
 810aa12:	db19      	blt.n	810aa48 <__gethex+0x440>
 810aa14:	6861      	ldr	r1, [r4, #4]
 810aa16:	ee18 0a10 	vmov	r0, s16
 810aa1a:	3101      	adds	r1, #1
 810aa1c:	f000 f990 	bl	810ad40 <_Balloc>
 810aa20:	4681      	mov	r9, r0
 810aa22:	b918      	cbnz	r0, 810aa2c <__gethex+0x424>
 810aa24:	4b1a      	ldr	r3, [pc, #104]	; (810aa90 <__gethex+0x488>)
 810aa26:	4602      	mov	r2, r0
 810aa28:	2184      	movs	r1, #132	; 0x84
 810aa2a:	e6a8      	b.n	810a77e <__gethex+0x176>
 810aa2c:	6922      	ldr	r2, [r4, #16]
 810aa2e:	3202      	adds	r2, #2
 810aa30:	f104 010c 	add.w	r1, r4, #12
 810aa34:	0092      	lsls	r2, r2, #2
 810aa36:	300c      	adds	r0, #12
 810aa38:	f000 f974 	bl	810ad24 <memcpy>
 810aa3c:	4621      	mov	r1, r4
 810aa3e:	ee18 0a10 	vmov	r0, s16
 810aa42:	f000 f9bd 	bl	810adc0 <_Bfree>
 810aa46:	464c      	mov	r4, r9
 810aa48:	6923      	ldr	r3, [r4, #16]
 810aa4a:	1c5a      	adds	r2, r3, #1
 810aa4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810aa50:	6122      	str	r2, [r4, #16]
 810aa52:	2201      	movs	r2, #1
 810aa54:	615a      	str	r2, [r3, #20]
 810aa56:	e7bb      	b.n	810a9d0 <__gethex+0x3c8>
 810aa58:	6922      	ldr	r2, [r4, #16]
 810aa5a:	455a      	cmp	r2, fp
 810aa5c:	dd0b      	ble.n	810aa76 <__gethex+0x46e>
 810aa5e:	2101      	movs	r1, #1
 810aa60:	4620      	mov	r0, r4
 810aa62:	f7ff fd6a 	bl	810a53a <rshift>
 810aa66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810aa6a:	3501      	adds	r5, #1
 810aa6c:	42ab      	cmp	r3, r5
 810aa6e:	f6ff aed0 	blt.w	810a812 <__gethex+0x20a>
 810aa72:	2701      	movs	r7, #1
 810aa74:	e7c0      	b.n	810a9f8 <__gethex+0x3f0>
 810aa76:	f016 061f 	ands.w	r6, r6, #31
 810aa7a:	d0fa      	beq.n	810aa72 <__gethex+0x46a>
 810aa7c:	4453      	add	r3, sl
 810aa7e:	f1c6 0620 	rsb	r6, r6, #32
 810aa82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810aa86:	f000 fa4d 	bl	810af24 <__hi0bits>
 810aa8a:	42b0      	cmp	r0, r6
 810aa8c:	dbe7      	blt.n	810aa5e <__gethex+0x456>
 810aa8e:	e7f0      	b.n	810aa72 <__gethex+0x46a>
 810aa90:	0810c458 	.word	0x0810c458

0810aa94 <L_shift>:
 810aa94:	f1c2 0208 	rsb	r2, r2, #8
 810aa98:	0092      	lsls	r2, r2, #2
 810aa9a:	b570      	push	{r4, r5, r6, lr}
 810aa9c:	f1c2 0620 	rsb	r6, r2, #32
 810aaa0:	6843      	ldr	r3, [r0, #4]
 810aaa2:	6804      	ldr	r4, [r0, #0]
 810aaa4:	fa03 f506 	lsl.w	r5, r3, r6
 810aaa8:	432c      	orrs	r4, r5
 810aaaa:	40d3      	lsrs	r3, r2
 810aaac:	6004      	str	r4, [r0, #0]
 810aaae:	f840 3f04 	str.w	r3, [r0, #4]!
 810aab2:	4288      	cmp	r0, r1
 810aab4:	d3f4      	bcc.n	810aaa0 <L_shift+0xc>
 810aab6:	bd70      	pop	{r4, r5, r6, pc}

0810aab8 <__match>:
 810aab8:	b530      	push	{r4, r5, lr}
 810aaba:	6803      	ldr	r3, [r0, #0]
 810aabc:	3301      	adds	r3, #1
 810aabe:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aac2:	b914      	cbnz	r4, 810aaca <__match+0x12>
 810aac4:	6003      	str	r3, [r0, #0]
 810aac6:	2001      	movs	r0, #1
 810aac8:	bd30      	pop	{r4, r5, pc}
 810aaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 810aace:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810aad2:	2d19      	cmp	r5, #25
 810aad4:	bf98      	it	ls
 810aad6:	3220      	addls	r2, #32
 810aad8:	42a2      	cmp	r2, r4
 810aada:	d0f0      	beq.n	810aabe <__match+0x6>
 810aadc:	2000      	movs	r0, #0
 810aade:	e7f3      	b.n	810aac8 <__match+0x10>

0810aae0 <__hexnan>:
 810aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aae4:	680b      	ldr	r3, [r1, #0]
 810aae6:	115e      	asrs	r6, r3, #5
 810aae8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810aaec:	f013 031f 	ands.w	r3, r3, #31
 810aaf0:	b087      	sub	sp, #28
 810aaf2:	bf18      	it	ne
 810aaf4:	3604      	addne	r6, #4
 810aaf6:	2500      	movs	r5, #0
 810aaf8:	1f37      	subs	r7, r6, #4
 810aafa:	4690      	mov	r8, r2
 810aafc:	6802      	ldr	r2, [r0, #0]
 810aafe:	9301      	str	r3, [sp, #4]
 810ab00:	4682      	mov	sl, r0
 810ab02:	f846 5c04 	str.w	r5, [r6, #-4]
 810ab06:	46b9      	mov	r9, r7
 810ab08:	463c      	mov	r4, r7
 810ab0a:	9502      	str	r5, [sp, #8]
 810ab0c:	46ab      	mov	fp, r5
 810ab0e:	7851      	ldrb	r1, [r2, #1]
 810ab10:	1c53      	adds	r3, r2, #1
 810ab12:	9303      	str	r3, [sp, #12]
 810ab14:	b341      	cbz	r1, 810ab68 <__hexnan+0x88>
 810ab16:	4608      	mov	r0, r1
 810ab18:	9205      	str	r2, [sp, #20]
 810ab1a:	9104      	str	r1, [sp, #16]
 810ab1c:	f7ff fd5f 	bl	810a5de <__hexdig_fun>
 810ab20:	2800      	cmp	r0, #0
 810ab22:	d14f      	bne.n	810abc4 <__hexnan+0xe4>
 810ab24:	9904      	ldr	r1, [sp, #16]
 810ab26:	9a05      	ldr	r2, [sp, #20]
 810ab28:	2920      	cmp	r1, #32
 810ab2a:	d818      	bhi.n	810ab5e <__hexnan+0x7e>
 810ab2c:	9b02      	ldr	r3, [sp, #8]
 810ab2e:	459b      	cmp	fp, r3
 810ab30:	dd13      	ble.n	810ab5a <__hexnan+0x7a>
 810ab32:	454c      	cmp	r4, r9
 810ab34:	d206      	bcs.n	810ab44 <__hexnan+0x64>
 810ab36:	2d07      	cmp	r5, #7
 810ab38:	dc04      	bgt.n	810ab44 <__hexnan+0x64>
 810ab3a:	462a      	mov	r2, r5
 810ab3c:	4649      	mov	r1, r9
 810ab3e:	4620      	mov	r0, r4
 810ab40:	f7ff ffa8 	bl	810aa94 <L_shift>
 810ab44:	4544      	cmp	r4, r8
 810ab46:	d950      	bls.n	810abea <__hexnan+0x10a>
 810ab48:	2300      	movs	r3, #0
 810ab4a:	f1a4 0904 	sub.w	r9, r4, #4
 810ab4e:	f844 3c04 	str.w	r3, [r4, #-4]
 810ab52:	f8cd b008 	str.w	fp, [sp, #8]
 810ab56:	464c      	mov	r4, r9
 810ab58:	461d      	mov	r5, r3
 810ab5a:	9a03      	ldr	r2, [sp, #12]
 810ab5c:	e7d7      	b.n	810ab0e <__hexnan+0x2e>
 810ab5e:	2929      	cmp	r1, #41	; 0x29
 810ab60:	d156      	bne.n	810ac10 <__hexnan+0x130>
 810ab62:	3202      	adds	r2, #2
 810ab64:	f8ca 2000 	str.w	r2, [sl]
 810ab68:	f1bb 0f00 	cmp.w	fp, #0
 810ab6c:	d050      	beq.n	810ac10 <__hexnan+0x130>
 810ab6e:	454c      	cmp	r4, r9
 810ab70:	d206      	bcs.n	810ab80 <__hexnan+0xa0>
 810ab72:	2d07      	cmp	r5, #7
 810ab74:	dc04      	bgt.n	810ab80 <__hexnan+0xa0>
 810ab76:	462a      	mov	r2, r5
 810ab78:	4649      	mov	r1, r9
 810ab7a:	4620      	mov	r0, r4
 810ab7c:	f7ff ff8a 	bl	810aa94 <L_shift>
 810ab80:	4544      	cmp	r4, r8
 810ab82:	d934      	bls.n	810abee <__hexnan+0x10e>
 810ab84:	f1a8 0204 	sub.w	r2, r8, #4
 810ab88:	4623      	mov	r3, r4
 810ab8a:	f853 1b04 	ldr.w	r1, [r3], #4
 810ab8e:	f842 1f04 	str.w	r1, [r2, #4]!
 810ab92:	429f      	cmp	r7, r3
 810ab94:	d2f9      	bcs.n	810ab8a <__hexnan+0xaa>
 810ab96:	1b3b      	subs	r3, r7, r4
 810ab98:	f023 0303 	bic.w	r3, r3, #3
 810ab9c:	3304      	adds	r3, #4
 810ab9e:	3401      	adds	r4, #1
 810aba0:	3e03      	subs	r6, #3
 810aba2:	42b4      	cmp	r4, r6
 810aba4:	bf88      	it	hi
 810aba6:	2304      	movhi	r3, #4
 810aba8:	4443      	add	r3, r8
 810abaa:	2200      	movs	r2, #0
 810abac:	f843 2b04 	str.w	r2, [r3], #4
 810abb0:	429f      	cmp	r7, r3
 810abb2:	d2fb      	bcs.n	810abac <__hexnan+0xcc>
 810abb4:	683b      	ldr	r3, [r7, #0]
 810abb6:	b91b      	cbnz	r3, 810abc0 <__hexnan+0xe0>
 810abb8:	4547      	cmp	r7, r8
 810abba:	d127      	bne.n	810ac0c <__hexnan+0x12c>
 810abbc:	2301      	movs	r3, #1
 810abbe:	603b      	str	r3, [r7, #0]
 810abc0:	2005      	movs	r0, #5
 810abc2:	e026      	b.n	810ac12 <__hexnan+0x132>
 810abc4:	3501      	adds	r5, #1
 810abc6:	2d08      	cmp	r5, #8
 810abc8:	f10b 0b01 	add.w	fp, fp, #1
 810abcc:	dd06      	ble.n	810abdc <__hexnan+0xfc>
 810abce:	4544      	cmp	r4, r8
 810abd0:	d9c3      	bls.n	810ab5a <__hexnan+0x7a>
 810abd2:	2300      	movs	r3, #0
 810abd4:	f844 3c04 	str.w	r3, [r4, #-4]
 810abd8:	2501      	movs	r5, #1
 810abda:	3c04      	subs	r4, #4
 810abdc:	6822      	ldr	r2, [r4, #0]
 810abde:	f000 000f 	and.w	r0, r0, #15
 810abe2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810abe6:	6022      	str	r2, [r4, #0]
 810abe8:	e7b7      	b.n	810ab5a <__hexnan+0x7a>
 810abea:	2508      	movs	r5, #8
 810abec:	e7b5      	b.n	810ab5a <__hexnan+0x7a>
 810abee:	9b01      	ldr	r3, [sp, #4]
 810abf0:	2b00      	cmp	r3, #0
 810abf2:	d0df      	beq.n	810abb4 <__hexnan+0xd4>
 810abf4:	f04f 32ff 	mov.w	r2, #4294967295
 810abf8:	f1c3 0320 	rsb	r3, r3, #32
 810abfc:	fa22 f303 	lsr.w	r3, r2, r3
 810ac00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ac04:	401a      	ands	r2, r3
 810ac06:	f846 2c04 	str.w	r2, [r6, #-4]
 810ac0a:	e7d3      	b.n	810abb4 <__hexnan+0xd4>
 810ac0c:	3f04      	subs	r7, #4
 810ac0e:	e7d1      	b.n	810abb4 <__hexnan+0xd4>
 810ac10:	2004      	movs	r0, #4
 810ac12:	b007      	add	sp, #28
 810ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ac18 <_localeconv_r>:
 810ac18:	4800      	ldr	r0, [pc, #0]	; (810ac1c <_localeconv_r+0x4>)
 810ac1a:	4770      	bx	lr
 810ac1c:	10000168 	.word	0x10000168

0810ac20 <__retarget_lock_init_recursive>:
 810ac20:	4770      	bx	lr

0810ac22 <__retarget_lock_acquire_recursive>:
 810ac22:	4770      	bx	lr

0810ac24 <__retarget_lock_release_recursive>:
 810ac24:	4770      	bx	lr

0810ac26 <__swhatbuf_r>:
 810ac26:	b570      	push	{r4, r5, r6, lr}
 810ac28:	460e      	mov	r6, r1
 810ac2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ac2e:	2900      	cmp	r1, #0
 810ac30:	b096      	sub	sp, #88	; 0x58
 810ac32:	4614      	mov	r4, r2
 810ac34:	461d      	mov	r5, r3
 810ac36:	da08      	bge.n	810ac4a <__swhatbuf_r+0x24>
 810ac38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810ac3c:	2200      	movs	r2, #0
 810ac3e:	602a      	str	r2, [r5, #0]
 810ac40:	061a      	lsls	r2, r3, #24
 810ac42:	d410      	bmi.n	810ac66 <__swhatbuf_r+0x40>
 810ac44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810ac48:	e00e      	b.n	810ac68 <__swhatbuf_r+0x42>
 810ac4a:	466a      	mov	r2, sp
 810ac4c:	f001 f9b6 	bl	810bfbc <_fstat_r>
 810ac50:	2800      	cmp	r0, #0
 810ac52:	dbf1      	blt.n	810ac38 <__swhatbuf_r+0x12>
 810ac54:	9a01      	ldr	r2, [sp, #4]
 810ac56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810ac5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810ac5e:	425a      	negs	r2, r3
 810ac60:	415a      	adcs	r2, r3
 810ac62:	602a      	str	r2, [r5, #0]
 810ac64:	e7ee      	b.n	810ac44 <__swhatbuf_r+0x1e>
 810ac66:	2340      	movs	r3, #64	; 0x40
 810ac68:	2000      	movs	r0, #0
 810ac6a:	6023      	str	r3, [r4, #0]
 810ac6c:	b016      	add	sp, #88	; 0x58
 810ac6e:	bd70      	pop	{r4, r5, r6, pc}

0810ac70 <__smakebuf_r>:
 810ac70:	898b      	ldrh	r3, [r1, #12]
 810ac72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810ac74:	079d      	lsls	r5, r3, #30
 810ac76:	4606      	mov	r6, r0
 810ac78:	460c      	mov	r4, r1
 810ac7a:	d507      	bpl.n	810ac8c <__smakebuf_r+0x1c>
 810ac7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810ac80:	6023      	str	r3, [r4, #0]
 810ac82:	6123      	str	r3, [r4, #16]
 810ac84:	2301      	movs	r3, #1
 810ac86:	6163      	str	r3, [r4, #20]
 810ac88:	b002      	add	sp, #8
 810ac8a:	bd70      	pop	{r4, r5, r6, pc}
 810ac8c:	ab01      	add	r3, sp, #4
 810ac8e:	466a      	mov	r2, sp
 810ac90:	f7ff ffc9 	bl	810ac26 <__swhatbuf_r>
 810ac94:	9900      	ldr	r1, [sp, #0]
 810ac96:	4605      	mov	r5, r0
 810ac98:	4630      	mov	r0, r6
 810ac9a:	f000 fd95 	bl	810b7c8 <_malloc_r>
 810ac9e:	b948      	cbnz	r0, 810acb4 <__smakebuf_r+0x44>
 810aca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810aca4:	059a      	lsls	r2, r3, #22
 810aca6:	d4ef      	bmi.n	810ac88 <__smakebuf_r+0x18>
 810aca8:	f023 0303 	bic.w	r3, r3, #3
 810acac:	f043 0302 	orr.w	r3, r3, #2
 810acb0:	81a3      	strh	r3, [r4, #12]
 810acb2:	e7e3      	b.n	810ac7c <__smakebuf_r+0xc>
 810acb4:	4b0d      	ldr	r3, [pc, #52]	; (810acec <__smakebuf_r+0x7c>)
 810acb6:	62b3      	str	r3, [r6, #40]	; 0x28
 810acb8:	89a3      	ldrh	r3, [r4, #12]
 810acba:	6020      	str	r0, [r4, #0]
 810acbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810acc0:	81a3      	strh	r3, [r4, #12]
 810acc2:	9b00      	ldr	r3, [sp, #0]
 810acc4:	6163      	str	r3, [r4, #20]
 810acc6:	9b01      	ldr	r3, [sp, #4]
 810acc8:	6120      	str	r0, [r4, #16]
 810acca:	b15b      	cbz	r3, 810ace4 <__smakebuf_r+0x74>
 810accc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810acd0:	4630      	mov	r0, r6
 810acd2:	f001 f985 	bl	810bfe0 <_isatty_r>
 810acd6:	b128      	cbz	r0, 810ace4 <__smakebuf_r+0x74>
 810acd8:	89a3      	ldrh	r3, [r4, #12]
 810acda:	f023 0303 	bic.w	r3, r3, #3
 810acde:	f043 0301 	orr.w	r3, r3, #1
 810ace2:	81a3      	strh	r3, [r4, #12]
 810ace4:	89a0      	ldrh	r0, [r4, #12]
 810ace6:	4305      	orrs	r5, r0
 810ace8:	81a5      	strh	r5, [r4, #12]
 810acea:	e7cd      	b.n	810ac88 <__smakebuf_r+0x18>
 810acec:	0810a399 	.word	0x0810a399

0810acf0 <malloc>:
 810acf0:	4b02      	ldr	r3, [pc, #8]	; (810acfc <malloc+0xc>)
 810acf2:	4601      	mov	r1, r0
 810acf4:	6818      	ldr	r0, [r3, #0]
 810acf6:	f000 bd67 	b.w	810b7c8 <_malloc_r>
 810acfa:	bf00      	nop
 810acfc:	10000010 	.word	0x10000010

0810ad00 <__ascii_mbtowc>:
 810ad00:	b082      	sub	sp, #8
 810ad02:	b901      	cbnz	r1, 810ad06 <__ascii_mbtowc+0x6>
 810ad04:	a901      	add	r1, sp, #4
 810ad06:	b142      	cbz	r2, 810ad1a <__ascii_mbtowc+0x1a>
 810ad08:	b14b      	cbz	r3, 810ad1e <__ascii_mbtowc+0x1e>
 810ad0a:	7813      	ldrb	r3, [r2, #0]
 810ad0c:	600b      	str	r3, [r1, #0]
 810ad0e:	7812      	ldrb	r2, [r2, #0]
 810ad10:	1e10      	subs	r0, r2, #0
 810ad12:	bf18      	it	ne
 810ad14:	2001      	movne	r0, #1
 810ad16:	b002      	add	sp, #8
 810ad18:	4770      	bx	lr
 810ad1a:	4610      	mov	r0, r2
 810ad1c:	e7fb      	b.n	810ad16 <__ascii_mbtowc+0x16>
 810ad1e:	f06f 0001 	mvn.w	r0, #1
 810ad22:	e7f8      	b.n	810ad16 <__ascii_mbtowc+0x16>

0810ad24 <memcpy>:
 810ad24:	440a      	add	r2, r1
 810ad26:	4291      	cmp	r1, r2
 810ad28:	f100 33ff 	add.w	r3, r0, #4294967295
 810ad2c:	d100      	bne.n	810ad30 <memcpy+0xc>
 810ad2e:	4770      	bx	lr
 810ad30:	b510      	push	{r4, lr}
 810ad32:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ad36:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ad3a:	4291      	cmp	r1, r2
 810ad3c:	d1f9      	bne.n	810ad32 <memcpy+0xe>
 810ad3e:	bd10      	pop	{r4, pc}

0810ad40 <_Balloc>:
 810ad40:	b570      	push	{r4, r5, r6, lr}
 810ad42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ad44:	4604      	mov	r4, r0
 810ad46:	460d      	mov	r5, r1
 810ad48:	b976      	cbnz	r6, 810ad68 <_Balloc+0x28>
 810ad4a:	2010      	movs	r0, #16
 810ad4c:	f7ff ffd0 	bl	810acf0 <malloc>
 810ad50:	4602      	mov	r2, r0
 810ad52:	6260      	str	r0, [r4, #36]	; 0x24
 810ad54:	b920      	cbnz	r0, 810ad60 <_Balloc+0x20>
 810ad56:	4b18      	ldr	r3, [pc, #96]	; (810adb8 <_Balloc+0x78>)
 810ad58:	4818      	ldr	r0, [pc, #96]	; (810adbc <_Balloc+0x7c>)
 810ad5a:	2166      	movs	r1, #102	; 0x66
 810ad5c:	f001 f8ee 	bl	810bf3c <__assert_func>
 810ad60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ad64:	6006      	str	r6, [r0, #0]
 810ad66:	60c6      	str	r6, [r0, #12]
 810ad68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810ad6a:	68f3      	ldr	r3, [r6, #12]
 810ad6c:	b183      	cbz	r3, 810ad90 <_Balloc+0x50>
 810ad6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ad70:	68db      	ldr	r3, [r3, #12]
 810ad72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810ad76:	b9b8      	cbnz	r0, 810ada8 <_Balloc+0x68>
 810ad78:	2101      	movs	r1, #1
 810ad7a:	fa01 f605 	lsl.w	r6, r1, r5
 810ad7e:	1d72      	adds	r2, r6, #5
 810ad80:	0092      	lsls	r2, r2, #2
 810ad82:	4620      	mov	r0, r4
 810ad84:	f000 fc9d 	bl	810b6c2 <_calloc_r>
 810ad88:	b160      	cbz	r0, 810ada4 <_Balloc+0x64>
 810ad8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810ad8e:	e00e      	b.n	810adae <_Balloc+0x6e>
 810ad90:	2221      	movs	r2, #33	; 0x21
 810ad92:	2104      	movs	r1, #4
 810ad94:	4620      	mov	r0, r4
 810ad96:	f000 fc94 	bl	810b6c2 <_calloc_r>
 810ad9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ad9c:	60f0      	str	r0, [r6, #12]
 810ad9e:	68db      	ldr	r3, [r3, #12]
 810ada0:	2b00      	cmp	r3, #0
 810ada2:	d1e4      	bne.n	810ad6e <_Balloc+0x2e>
 810ada4:	2000      	movs	r0, #0
 810ada6:	bd70      	pop	{r4, r5, r6, pc}
 810ada8:	6802      	ldr	r2, [r0, #0]
 810adaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810adae:	2300      	movs	r3, #0
 810adb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810adb4:	e7f7      	b.n	810ada6 <_Balloc+0x66>
 810adb6:	bf00      	nop
 810adb8:	0810c3e6 	.word	0x0810c3e6
 810adbc:	0810c548 	.word	0x0810c548

0810adc0 <_Bfree>:
 810adc0:	b570      	push	{r4, r5, r6, lr}
 810adc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810adc4:	4605      	mov	r5, r0
 810adc6:	460c      	mov	r4, r1
 810adc8:	b976      	cbnz	r6, 810ade8 <_Bfree+0x28>
 810adca:	2010      	movs	r0, #16
 810adcc:	f7ff ff90 	bl	810acf0 <malloc>
 810add0:	4602      	mov	r2, r0
 810add2:	6268      	str	r0, [r5, #36]	; 0x24
 810add4:	b920      	cbnz	r0, 810ade0 <_Bfree+0x20>
 810add6:	4b09      	ldr	r3, [pc, #36]	; (810adfc <_Bfree+0x3c>)
 810add8:	4809      	ldr	r0, [pc, #36]	; (810ae00 <_Bfree+0x40>)
 810adda:	218a      	movs	r1, #138	; 0x8a
 810addc:	f001 f8ae 	bl	810bf3c <__assert_func>
 810ade0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ade4:	6006      	str	r6, [r0, #0]
 810ade6:	60c6      	str	r6, [r0, #12]
 810ade8:	b13c      	cbz	r4, 810adfa <_Bfree+0x3a>
 810adea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810adec:	6862      	ldr	r2, [r4, #4]
 810adee:	68db      	ldr	r3, [r3, #12]
 810adf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810adf4:	6021      	str	r1, [r4, #0]
 810adf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810adfa:	bd70      	pop	{r4, r5, r6, pc}
 810adfc:	0810c3e6 	.word	0x0810c3e6
 810ae00:	0810c548 	.word	0x0810c548

0810ae04 <__multadd>:
 810ae04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ae08:	690d      	ldr	r5, [r1, #16]
 810ae0a:	4607      	mov	r7, r0
 810ae0c:	460c      	mov	r4, r1
 810ae0e:	461e      	mov	r6, r3
 810ae10:	f101 0c14 	add.w	ip, r1, #20
 810ae14:	2000      	movs	r0, #0
 810ae16:	f8dc 3000 	ldr.w	r3, [ip]
 810ae1a:	b299      	uxth	r1, r3
 810ae1c:	fb02 6101 	mla	r1, r2, r1, r6
 810ae20:	0c1e      	lsrs	r6, r3, #16
 810ae22:	0c0b      	lsrs	r3, r1, #16
 810ae24:	fb02 3306 	mla	r3, r2, r6, r3
 810ae28:	b289      	uxth	r1, r1
 810ae2a:	3001      	adds	r0, #1
 810ae2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810ae30:	4285      	cmp	r5, r0
 810ae32:	f84c 1b04 	str.w	r1, [ip], #4
 810ae36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810ae3a:	dcec      	bgt.n	810ae16 <__multadd+0x12>
 810ae3c:	b30e      	cbz	r6, 810ae82 <__multadd+0x7e>
 810ae3e:	68a3      	ldr	r3, [r4, #8]
 810ae40:	42ab      	cmp	r3, r5
 810ae42:	dc19      	bgt.n	810ae78 <__multadd+0x74>
 810ae44:	6861      	ldr	r1, [r4, #4]
 810ae46:	4638      	mov	r0, r7
 810ae48:	3101      	adds	r1, #1
 810ae4a:	f7ff ff79 	bl	810ad40 <_Balloc>
 810ae4e:	4680      	mov	r8, r0
 810ae50:	b928      	cbnz	r0, 810ae5e <__multadd+0x5a>
 810ae52:	4602      	mov	r2, r0
 810ae54:	4b0c      	ldr	r3, [pc, #48]	; (810ae88 <__multadd+0x84>)
 810ae56:	480d      	ldr	r0, [pc, #52]	; (810ae8c <__multadd+0x88>)
 810ae58:	21b5      	movs	r1, #181	; 0xb5
 810ae5a:	f001 f86f 	bl	810bf3c <__assert_func>
 810ae5e:	6922      	ldr	r2, [r4, #16]
 810ae60:	3202      	adds	r2, #2
 810ae62:	f104 010c 	add.w	r1, r4, #12
 810ae66:	0092      	lsls	r2, r2, #2
 810ae68:	300c      	adds	r0, #12
 810ae6a:	f7ff ff5b 	bl	810ad24 <memcpy>
 810ae6e:	4621      	mov	r1, r4
 810ae70:	4638      	mov	r0, r7
 810ae72:	f7ff ffa5 	bl	810adc0 <_Bfree>
 810ae76:	4644      	mov	r4, r8
 810ae78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810ae7c:	3501      	adds	r5, #1
 810ae7e:	615e      	str	r6, [r3, #20]
 810ae80:	6125      	str	r5, [r4, #16]
 810ae82:	4620      	mov	r0, r4
 810ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ae88:	0810c458 	.word	0x0810c458
 810ae8c:	0810c548 	.word	0x0810c548

0810ae90 <__s2b>:
 810ae90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ae94:	460c      	mov	r4, r1
 810ae96:	4615      	mov	r5, r2
 810ae98:	461f      	mov	r7, r3
 810ae9a:	2209      	movs	r2, #9
 810ae9c:	3308      	adds	r3, #8
 810ae9e:	4606      	mov	r6, r0
 810aea0:	fb93 f3f2 	sdiv	r3, r3, r2
 810aea4:	2100      	movs	r1, #0
 810aea6:	2201      	movs	r2, #1
 810aea8:	429a      	cmp	r2, r3
 810aeaa:	db09      	blt.n	810aec0 <__s2b+0x30>
 810aeac:	4630      	mov	r0, r6
 810aeae:	f7ff ff47 	bl	810ad40 <_Balloc>
 810aeb2:	b940      	cbnz	r0, 810aec6 <__s2b+0x36>
 810aeb4:	4602      	mov	r2, r0
 810aeb6:	4b19      	ldr	r3, [pc, #100]	; (810af1c <__s2b+0x8c>)
 810aeb8:	4819      	ldr	r0, [pc, #100]	; (810af20 <__s2b+0x90>)
 810aeba:	21ce      	movs	r1, #206	; 0xce
 810aebc:	f001 f83e 	bl	810bf3c <__assert_func>
 810aec0:	0052      	lsls	r2, r2, #1
 810aec2:	3101      	adds	r1, #1
 810aec4:	e7f0      	b.n	810aea8 <__s2b+0x18>
 810aec6:	9b08      	ldr	r3, [sp, #32]
 810aec8:	6143      	str	r3, [r0, #20]
 810aeca:	2d09      	cmp	r5, #9
 810aecc:	f04f 0301 	mov.w	r3, #1
 810aed0:	6103      	str	r3, [r0, #16]
 810aed2:	dd16      	ble.n	810af02 <__s2b+0x72>
 810aed4:	f104 0909 	add.w	r9, r4, #9
 810aed8:	46c8      	mov	r8, r9
 810aeda:	442c      	add	r4, r5
 810aedc:	f818 3b01 	ldrb.w	r3, [r8], #1
 810aee0:	4601      	mov	r1, r0
 810aee2:	3b30      	subs	r3, #48	; 0x30
 810aee4:	220a      	movs	r2, #10
 810aee6:	4630      	mov	r0, r6
 810aee8:	f7ff ff8c 	bl	810ae04 <__multadd>
 810aeec:	45a0      	cmp	r8, r4
 810aeee:	d1f5      	bne.n	810aedc <__s2b+0x4c>
 810aef0:	f1a5 0408 	sub.w	r4, r5, #8
 810aef4:	444c      	add	r4, r9
 810aef6:	1b2d      	subs	r5, r5, r4
 810aef8:	1963      	adds	r3, r4, r5
 810aefa:	42bb      	cmp	r3, r7
 810aefc:	db04      	blt.n	810af08 <__s2b+0x78>
 810aefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810af02:	340a      	adds	r4, #10
 810af04:	2509      	movs	r5, #9
 810af06:	e7f6      	b.n	810aef6 <__s2b+0x66>
 810af08:	f814 3b01 	ldrb.w	r3, [r4], #1
 810af0c:	4601      	mov	r1, r0
 810af0e:	3b30      	subs	r3, #48	; 0x30
 810af10:	220a      	movs	r2, #10
 810af12:	4630      	mov	r0, r6
 810af14:	f7ff ff76 	bl	810ae04 <__multadd>
 810af18:	e7ee      	b.n	810aef8 <__s2b+0x68>
 810af1a:	bf00      	nop
 810af1c:	0810c458 	.word	0x0810c458
 810af20:	0810c548 	.word	0x0810c548

0810af24 <__hi0bits>:
 810af24:	0c03      	lsrs	r3, r0, #16
 810af26:	041b      	lsls	r3, r3, #16
 810af28:	b9d3      	cbnz	r3, 810af60 <__hi0bits+0x3c>
 810af2a:	0400      	lsls	r0, r0, #16
 810af2c:	2310      	movs	r3, #16
 810af2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810af32:	bf04      	itt	eq
 810af34:	0200      	lsleq	r0, r0, #8
 810af36:	3308      	addeq	r3, #8
 810af38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810af3c:	bf04      	itt	eq
 810af3e:	0100      	lsleq	r0, r0, #4
 810af40:	3304      	addeq	r3, #4
 810af42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810af46:	bf04      	itt	eq
 810af48:	0080      	lsleq	r0, r0, #2
 810af4a:	3302      	addeq	r3, #2
 810af4c:	2800      	cmp	r0, #0
 810af4e:	db05      	blt.n	810af5c <__hi0bits+0x38>
 810af50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810af54:	f103 0301 	add.w	r3, r3, #1
 810af58:	bf08      	it	eq
 810af5a:	2320      	moveq	r3, #32
 810af5c:	4618      	mov	r0, r3
 810af5e:	4770      	bx	lr
 810af60:	2300      	movs	r3, #0
 810af62:	e7e4      	b.n	810af2e <__hi0bits+0xa>

0810af64 <__lo0bits>:
 810af64:	6803      	ldr	r3, [r0, #0]
 810af66:	f013 0207 	ands.w	r2, r3, #7
 810af6a:	4601      	mov	r1, r0
 810af6c:	d00b      	beq.n	810af86 <__lo0bits+0x22>
 810af6e:	07da      	lsls	r2, r3, #31
 810af70:	d423      	bmi.n	810afba <__lo0bits+0x56>
 810af72:	0798      	lsls	r0, r3, #30
 810af74:	bf49      	itett	mi
 810af76:	085b      	lsrmi	r3, r3, #1
 810af78:	089b      	lsrpl	r3, r3, #2
 810af7a:	2001      	movmi	r0, #1
 810af7c:	600b      	strmi	r3, [r1, #0]
 810af7e:	bf5c      	itt	pl
 810af80:	600b      	strpl	r3, [r1, #0]
 810af82:	2002      	movpl	r0, #2
 810af84:	4770      	bx	lr
 810af86:	b298      	uxth	r0, r3
 810af88:	b9a8      	cbnz	r0, 810afb6 <__lo0bits+0x52>
 810af8a:	0c1b      	lsrs	r3, r3, #16
 810af8c:	2010      	movs	r0, #16
 810af8e:	b2da      	uxtb	r2, r3
 810af90:	b90a      	cbnz	r2, 810af96 <__lo0bits+0x32>
 810af92:	3008      	adds	r0, #8
 810af94:	0a1b      	lsrs	r3, r3, #8
 810af96:	071a      	lsls	r2, r3, #28
 810af98:	bf04      	itt	eq
 810af9a:	091b      	lsreq	r3, r3, #4
 810af9c:	3004      	addeq	r0, #4
 810af9e:	079a      	lsls	r2, r3, #30
 810afa0:	bf04      	itt	eq
 810afa2:	089b      	lsreq	r3, r3, #2
 810afa4:	3002      	addeq	r0, #2
 810afa6:	07da      	lsls	r2, r3, #31
 810afa8:	d403      	bmi.n	810afb2 <__lo0bits+0x4e>
 810afaa:	085b      	lsrs	r3, r3, #1
 810afac:	f100 0001 	add.w	r0, r0, #1
 810afb0:	d005      	beq.n	810afbe <__lo0bits+0x5a>
 810afb2:	600b      	str	r3, [r1, #0]
 810afb4:	4770      	bx	lr
 810afb6:	4610      	mov	r0, r2
 810afb8:	e7e9      	b.n	810af8e <__lo0bits+0x2a>
 810afba:	2000      	movs	r0, #0
 810afbc:	4770      	bx	lr
 810afbe:	2020      	movs	r0, #32
 810afc0:	4770      	bx	lr
	...

0810afc4 <__i2b>:
 810afc4:	b510      	push	{r4, lr}
 810afc6:	460c      	mov	r4, r1
 810afc8:	2101      	movs	r1, #1
 810afca:	f7ff feb9 	bl	810ad40 <_Balloc>
 810afce:	4602      	mov	r2, r0
 810afd0:	b928      	cbnz	r0, 810afde <__i2b+0x1a>
 810afd2:	4b05      	ldr	r3, [pc, #20]	; (810afe8 <__i2b+0x24>)
 810afd4:	4805      	ldr	r0, [pc, #20]	; (810afec <__i2b+0x28>)
 810afd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810afda:	f000 ffaf 	bl	810bf3c <__assert_func>
 810afde:	2301      	movs	r3, #1
 810afe0:	6144      	str	r4, [r0, #20]
 810afe2:	6103      	str	r3, [r0, #16]
 810afe4:	bd10      	pop	{r4, pc}
 810afe6:	bf00      	nop
 810afe8:	0810c458 	.word	0x0810c458
 810afec:	0810c548 	.word	0x0810c548

0810aff0 <__multiply>:
 810aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aff4:	4691      	mov	r9, r2
 810aff6:	690a      	ldr	r2, [r1, #16]
 810aff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810affc:	429a      	cmp	r2, r3
 810affe:	bfb8      	it	lt
 810b000:	460b      	movlt	r3, r1
 810b002:	460c      	mov	r4, r1
 810b004:	bfbc      	itt	lt
 810b006:	464c      	movlt	r4, r9
 810b008:	4699      	movlt	r9, r3
 810b00a:	6927      	ldr	r7, [r4, #16]
 810b00c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810b010:	68a3      	ldr	r3, [r4, #8]
 810b012:	6861      	ldr	r1, [r4, #4]
 810b014:	eb07 060a 	add.w	r6, r7, sl
 810b018:	42b3      	cmp	r3, r6
 810b01a:	b085      	sub	sp, #20
 810b01c:	bfb8      	it	lt
 810b01e:	3101      	addlt	r1, #1
 810b020:	f7ff fe8e 	bl	810ad40 <_Balloc>
 810b024:	b930      	cbnz	r0, 810b034 <__multiply+0x44>
 810b026:	4602      	mov	r2, r0
 810b028:	4b44      	ldr	r3, [pc, #272]	; (810b13c <__multiply+0x14c>)
 810b02a:	4845      	ldr	r0, [pc, #276]	; (810b140 <__multiply+0x150>)
 810b02c:	f240 115d 	movw	r1, #349	; 0x15d
 810b030:	f000 ff84 	bl	810bf3c <__assert_func>
 810b034:	f100 0514 	add.w	r5, r0, #20
 810b038:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810b03c:	462b      	mov	r3, r5
 810b03e:	2200      	movs	r2, #0
 810b040:	4543      	cmp	r3, r8
 810b042:	d321      	bcc.n	810b088 <__multiply+0x98>
 810b044:	f104 0314 	add.w	r3, r4, #20
 810b048:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810b04c:	f109 0314 	add.w	r3, r9, #20
 810b050:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810b054:	9202      	str	r2, [sp, #8]
 810b056:	1b3a      	subs	r2, r7, r4
 810b058:	3a15      	subs	r2, #21
 810b05a:	f022 0203 	bic.w	r2, r2, #3
 810b05e:	3204      	adds	r2, #4
 810b060:	f104 0115 	add.w	r1, r4, #21
 810b064:	428f      	cmp	r7, r1
 810b066:	bf38      	it	cc
 810b068:	2204      	movcc	r2, #4
 810b06a:	9201      	str	r2, [sp, #4]
 810b06c:	9a02      	ldr	r2, [sp, #8]
 810b06e:	9303      	str	r3, [sp, #12]
 810b070:	429a      	cmp	r2, r3
 810b072:	d80c      	bhi.n	810b08e <__multiply+0x9e>
 810b074:	2e00      	cmp	r6, #0
 810b076:	dd03      	ble.n	810b080 <__multiply+0x90>
 810b078:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b07c:	2b00      	cmp	r3, #0
 810b07e:	d05a      	beq.n	810b136 <__multiply+0x146>
 810b080:	6106      	str	r6, [r0, #16]
 810b082:	b005      	add	sp, #20
 810b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b088:	f843 2b04 	str.w	r2, [r3], #4
 810b08c:	e7d8      	b.n	810b040 <__multiply+0x50>
 810b08e:	f8b3 a000 	ldrh.w	sl, [r3]
 810b092:	f1ba 0f00 	cmp.w	sl, #0
 810b096:	d024      	beq.n	810b0e2 <__multiply+0xf2>
 810b098:	f104 0e14 	add.w	lr, r4, #20
 810b09c:	46a9      	mov	r9, r5
 810b09e:	f04f 0c00 	mov.w	ip, #0
 810b0a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 810b0a6:	f8d9 1000 	ldr.w	r1, [r9]
 810b0aa:	fa1f fb82 	uxth.w	fp, r2
 810b0ae:	b289      	uxth	r1, r1
 810b0b0:	fb0a 110b 	mla	r1, sl, fp, r1
 810b0b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810b0b8:	f8d9 2000 	ldr.w	r2, [r9]
 810b0bc:	4461      	add	r1, ip
 810b0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810b0c2:	fb0a c20b 	mla	r2, sl, fp, ip
 810b0c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810b0ca:	b289      	uxth	r1, r1
 810b0cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810b0d0:	4577      	cmp	r7, lr
 810b0d2:	f849 1b04 	str.w	r1, [r9], #4
 810b0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810b0da:	d8e2      	bhi.n	810b0a2 <__multiply+0xb2>
 810b0dc:	9a01      	ldr	r2, [sp, #4]
 810b0de:	f845 c002 	str.w	ip, [r5, r2]
 810b0e2:	9a03      	ldr	r2, [sp, #12]
 810b0e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b0e8:	3304      	adds	r3, #4
 810b0ea:	f1b9 0f00 	cmp.w	r9, #0
 810b0ee:	d020      	beq.n	810b132 <__multiply+0x142>
 810b0f0:	6829      	ldr	r1, [r5, #0]
 810b0f2:	f104 0c14 	add.w	ip, r4, #20
 810b0f6:	46ae      	mov	lr, r5
 810b0f8:	f04f 0a00 	mov.w	sl, #0
 810b0fc:	f8bc b000 	ldrh.w	fp, [ip]
 810b100:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810b104:	fb09 220b 	mla	r2, r9, fp, r2
 810b108:	4492      	add	sl, r2
 810b10a:	b289      	uxth	r1, r1
 810b10c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810b110:	f84e 1b04 	str.w	r1, [lr], #4
 810b114:	f85c 2b04 	ldr.w	r2, [ip], #4
 810b118:	f8be 1000 	ldrh.w	r1, [lr]
 810b11c:	0c12      	lsrs	r2, r2, #16
 810b11e:	fb09 1102 	mla	r1, r9, r2, r1
 810b122:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810b126:	4567      	cmp	r7, ip
 810b128:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810b12c:	d8e6      	bhi.n	810b0fc <__multiply+0x10c>
 810b12e:	9a01      	ldr	r2, [sp, #4]
 810b130:	50a9      	str	r1, [r5, r2]
 810b132:	3504      	adds	r5, #4
 810b134:	e79a      	b.n	810b06c <__multiply+0x7c>
 810b136:	3e01      	subs	r6, #1
 810b138:	e79c      	b.n	810b074 <__multiply+0x84>
 810b13a:	bf00      	nop
 810b13c:	0810c458 	.word	0x0810c458
 810b140:	0810c548 	.word	0x0810c548

0810b144 <__pow5mult>:
 810b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b148:	4615      	mov	r5, r2
 810b14a:	f012 0203 	ands.w	r2, r2, #3
 810b14e:	4606      	mov	r6, r0
 810b150:	460f      	mov	r7, r1
 810b152:	d007      	beq.n	810b164 <__pow5mult+0x20>
 810b154:	4c25      	ldr	r4, [pc, #148]	; (810b1ec <__pow5mult+0xa8>)
 810b156:	3a01      	subs	r2, #1
 810b158:	2300      	movs	r3, #0
 810b15a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b15e:	f7ff fe51 	bl	810ae04 <__multadd>
 810b162:	4607      	mov	r7, r0
 810b164:	10ad      	asrs	r5, r5, #2
 810b166:	d03d      	beq.n	810b1e4 <__pow5mult+0xa0>
 810b168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b16a:	b97c      	cbnz	r4, 810b18c <__pow5mult+0x48>
 810b16c:	2010      	movs	r0, #16
 810b16e:	f7ff fdbf 	bl	810acf0 <malloc>
 810b172:	4602      	mov	r2, r0
 810b174:	6270      	str	r0, [r6, #36]	; 0x24
 810b176:	b928      	cbnz	r0, 810b184 <__pow5mult+0x40>
 810b178:	4b1d      	ldr	r3, [pc, #116]	; (810b1f0 <__pow5mult+0xac>)
 810b17a:	481e      	ldr	r0, [pc, #120]	; (810b1f4 <__pow5mult+0xb0>)
 810b17c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b180:	f000 fedc 	bl	810bf3c <__assert_func>
 810b184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b188:	6004      	str	r4, [r0, #0]
 810b18a:	60c4      	str	r4, [r0, #12]
 810b18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b194:	b94c      	cbnz	r4, 810b1aa <__pow5mult+0x66>
 810b196:	f240 2171 	movw	r1, #625	; 0x271
 810b19a:	4630      	mov	r0, r6
 810b19c:	f7ff ff12 	bl	810afc4 <__i2b>
 810b1a0:	2300      	movs	r3, #0
 810b1a2:	f8c8 0008 	str.w	r0, [r8, #8]
 810b1a6:	4604      	mov	r4, r0
 810b1a8:	6003      	str	r3, [r0, #0]
 810b1aa:	f04f 0900 	mov.w	r9, #0
 810b1ae:	07eb      	lsls	r3, r5, #31
 810b1b0:	d50a      	bpl.n	810b1c8 <__pow5mult+0x84>
 810b1b2:	4639      	mov	r1, r7
 810b1b4:	4622      	mov	r2, r4
 810b1b6:	4630      	mov	r0, r6
 810b1b8:	f7ff ff1a 	bl	810aff0 <__multiply>
 810b1bc:	4639      	mov	r1, r7
 810b1be:	4680      	mov	r8, r0
 810b1c0:	4630      	mov	r0, r6
 810b1c2:	f7ff fdfd 	bl	810adc0 <_Bfree>
 810b1c6:	4647      	mov	r7, r8
 810b1c8:	106d      	asrs	r5, r5, #1
 810b1ca:	d00b      	beq.n	810b1e4 <__pow5mult+0xa0>
 810b1cc:	6820      	ldr	r0, [r4, #0]
 810b1ce:	b938      	cbnz	r0, 810b1e0 <__pow5mult+0x9c>
 810b1d0:	4622      	mov	r2, r4
 810b1d2:	4621      	mov	r1, r4
 810b1d4:	4630      	mov	r0, r6
 810b1d6:	f7ff ff0b 	bl	810aff0 <__multiply>
 810b1da:	6020      	str	r0, [r4, #0]
 810b1dc:	f8c0 9000 	str.w	r9, [r0]
 810b1e0:	4604      	mov	r4, r0
 810b1e2:	e7e4      	b.n	810b1ae <__pow5mult+0x6a>
 810b1e4:	4638      	mov	r0, r7
 810b1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b1ea:	bf00      	nop
 810b1ec:	0810c698 	.word	0x0810c698
 810b1f0:	0810c3e6 	.word	0x0810c3e6
 810b1f4:	0810c548 	.word	0x0810c548

0810b1f8 <__lshift>:
 810b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b1fc:	460c      	mov	r4, r1
 810b1fe:	6849      	ldr	r1, [r1, #4]
 810b200:	6923      	ldr	r3, [r4, #16]
 810b202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b206:	68a3      	ldr	r3, [r4, #8]
 810b208:	4607      	mov	r7, r0
 810b20a:	4691      	mov	r9, r2
 810b20c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b210:	f108 0601 	add.w	r6, r8, #1
 810b214:	42b3      	cmp	r3, r6
 810b216:	db0b      	blt.n	810b230 <__lshift+0x38>
 810b218:	4638      	mov	r0, r7
 810b21a:	f7ff fd91 	bl	810ad40 <_Balloc>
 810b21e:	4605      	mov	r5, r0
 810b220:	b948      	cbnz	r0, 810b236 <__lshift+0x3e>
 810b222:	4602      	mov	r2, r0
 810b224:	4b2a      	ldr	r3, [pc, #168]	; (810b2d0 <__lshift+0xd8>)
 810b226:	482b      	ldr	r0, [pc, #172]	; (810b2d4 <__lshift+0xdc>)
 810b228:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b22c:	f000 fe86 	bl	810bf3c <__assert_func>
 810b230:	3101      	adds	r1, #1
 810b232:	005b      	lsls	r3, r3, #1
 810b234:	e7ee      	b.n	810b214 <__lshift+0x1c>
 810b236:	2300      	movs	r3, #0
 810b238:	f100 0114 	add.w	r1, r0, #20
 810b23c:	f100 0210 	add.w	r2, r0, #16
 810b240:	4618      	mov	r0, r3
 810b242:	4553      	cmp	r3, sl
 810b244:	db37      	blt.n	810b2b6 <__lshift+0xbe>
 810b246:	6920      	ldr	r0, [r4, #16]
 810b248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b24c:	f104 0314 	add.w	r3, r4, #20
 810b250:	f019 091f 	ands.w	r9, r9, #31
 810b254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b258:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810b25c:	d02f      	beq.n	810b2be <__lshift+0xc6>
 810b25e:	f1c9 0e20 	rsb	lr, r9, #32
 810b262:	468a      	mov	sl, r1
 810b264:	f04f 0c00 	mov.w	ip, #0
 810b268:	681a      	ldr	r2, [r3, #0]
 810b26a:	fa02 f209 	lsl.w	r2, r2, r9
 810b26e:	ea42 020c 	orr.w	r2, r2, ip
 810b272:	f84a 2b04 	str.w	r2, [sl], #4
 810b276:	f853 2b04 	ldr.w	r2, [r3], #4
 810b27a:	4298      	cmp	r0, r3
 810b27c:	fa22 fc0e 	lsr.w	ip, r2, lr
 810b280:	d8f2      	bhi.n	810b268 <__lshift+0x70>
 810b282:	1b03      	subs	r3, r0, r4
 810b284:	3b15      	subs	r3, #21
 810b286:	f023 0303 	bic.w	r3, r3, #3
 810b28a:	3304      	adds	r3, #4
 810b28c:	f104 0215 	add.w	r2, r4, #21
 810b290:	4290      	cmp	r0, r2
 810b292:	bf38      	it	cc
 810b294:	2304      	movcc	r3, #4
 810b296:	f841 c003 	str.w	ip, [r1, r3]
 810b29a:	f1bc 0f00 	cmp.w	ip, #0
 810b29e:	d001      	beq.n	810b2a4 <__lshift+0xac>
 810b2a0:	f108 0602 	add.w	r6, r8, #2
 810b2a4:	3e01      	subs	r6, #1
 810b2a6:	4638      	mov	r0, r7
 810b2a8:	612e      	str	r6, [r5, #16]
 810b2aa:	4621      	mov	r1, r4
 810b2ac:	f7ff fd88 	bl	810adc0 <_Bfree>
 810b2b0:	4628      	mov	r0, r5
 810b2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b2b6:	f842 0f04 	str.w	r0, [r2, #4]!
 810b2ba:	3301      	adds	r3, #1
 810b2bc:	e7c1      	b.n	810b242 <__lshift+0x4a>
 810b2be:	3904      	subs	r1, #4
 810b2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 810b2c4:	f841 2f04 	str.w	r2, [r1, #4]!
 810b2c8:	4298      	cmp	r0, r3
 810b2ca:	d8f9      	bhi.n	810b2c0 <__lshift+0xc8>
 810b2cc:	e7ea      	b.n	810b2a4 <__lshift+0xac>
 810b2ce:	bf00      	nop
 810b2d0:	0810c458 	.word	0x0810c458
 810b2d4:	0810c548 	.word	0x0810c548

0810b2d8 <__mcmp>:
 810b2d8:	b530      	push	{r4, r5, lr}
 810b2da:	6902      	ldr	r2, [r0, #16]
 810b2dc:	690c      	ldr	r4, [r1, #16]
 810b2de:	1b12      	subs	r2, r2, r4
 810b2e0:	d10e      	bne.n	810b300 <__mcmp+0x28>
 810b2e2:	f100 0314 	add.w	r3, r0, #20
 810b2e6:	3114      	adds	r1, #20
 810b2e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b2ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b2f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b2f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b2f8:	42a5      	cmp	r5, r4
 810b2fa:	d003      	beq.n	810b304 <__mcmp+0x2c>
 810b2fc:	d305      	bcc.n	810b30a <__mcmp+0x32>
 810b2fe:	2201      	movs	r2, #1
 810b300:	4610      	mov	r0, r2
 810b302:	bd30      	pop	{r4, r5, pc}
 810b304:	4283      	cmp	r3, r0
 810b306:	d3f3      	bcc.n	810b2f0 <__mcmp+0x18>
 810b308:	e7fa      	b.n	810b300 <__mcmp+0x28>
 810b30a:	f04f 32ff 	mov.w	r2, #4294967295
 810b30e:	e7f7      	b.n	810b300 <__mcmp+0x28>

0810b310 <__mdiff>:
 810b310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b314:	460c      	mov	r4, r1
 810b316:	4606      	mov	r6, r0
 810b318:	4611      	mov	r1, r2
 810b31a:	4620      	mov	r0, r4
 810b31c:	4690      	mov	r8, r2
 810b31e:	f7ff ffdb 	bl	810b2d8 <__mcmp>
 810b322:	1e05      	subs	r5, r0, #0
 810b324:	d110      	bne.n	810b348 <__mdiff+0x38>
 810b326:	4629      	mov	r1, r5
 810b328:	4630      	mov	r0, r6
 810b32a:	f7ff fd09 	bl	810ad40 <_Balloc>
 810b32e:	b930      	cbnz	r0, 810b33e <__mdiff+0x2e>
 810b330:	4b3a      	ldr	r3, [pc, #232]	; (810b41c <__mdiff+0x10c>)
 810b332:	4602      	mov	r2, r0
 810b334:	f240 2132 	movw	r1, #562	; 0x232
 810b338:	4839      	ldr	r0, [pc, #228]	; (810b420 <__mdiff+0x110>)
 810b33a:	f000 fdff 	bl	810bf3c <__assert_func>
 810b33e:	2301      	movs	r3, #1
 810b340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b348:	bfa4      	itt	ge
 810b34a:	4643      	movge	r3, r8
 810b34c:	46a0      	movge	r8, r4
 810b34e:	4630      	mov	r0, r6
 810b350:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810b354:	bfa6      	itte	ge
 810b356:	461c      	movge	r4, r3
 810b358:	2500      	movge	r5, #0
 810b35a:	2501      	movlt	r5, #1
 810b35c:	f7ff fcf0 	bl	810ad40 <_Balloc>
 810b360:	b920      	cbnz	r0, 810b36c <__mdiff+0x5c>
 810b362:	4b2e      	ldr	r3, [pc, #184]	; (810b41c <__mdiff+0x10c>)
 810b364:	4602      	mov	r2, r0
 810b366:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b36a:	e7e5      	b.n	810b338 <__mdiff+0x28>
 810b36c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810b370:	6926      	ldr	r6, [r4, #16]
 810b372:	60c5      	str	r5, [r0, #12]
 810b374:	f104 0914 	add.w	r9, r4, #20
 810b378:	f108 0514 	add.w	r5, r8, #20
 810b37c:	f100 0e14 	add.w	lr, r0, #20
 810b380:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810b384:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810b388:	f108 0210 	add.w	r2, r8, #16
 810b38c:	46f2      	mov	sl, lr
 810b38e:	2100      	movs	r1, #0
 810b390:	f859 3b04 	ldr.w	r3, [r9], #4
 810b394:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b398:	fa1f f883 	uxth.w	r8, r3
 810b39c:	fa11 f18b 	uxtah	r1, r1, fp
 810b3a0:	0c1b      	lsrs	r3, r3, #16
 810b3a2:	eba1 0808 	sub.w	r8, r1, r8
 810b3a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b3aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b3ae:	fa1f f888 	uxth.w	r8, r8
 810b3b2:	1419      	asrs	r1, r3, #16
 810b3b4:	454e      	cmp	r6, r9
 810b3b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b3ba:	f84a 3b04 	str.w	r3, [sl], #4
 810b3be:	d8e7      	bhi.n	810b390 <__mdiff+0x80>
 810b3c0:	1b33      	subs	r3, r6, r4
 810b3c2:	3b15      	subs	r3, #21
 810b3c4:	f023 0303 	bic.w	r3, r3, #3
 810b3c8:	3304      	adds	r3, #4
 810b3ca:	3415      	adds	r4, #21
 810b3cc:	42a6      	cmp	r6, r4
 810b3ce:	bf38      	it	cc
 810b3d0:	2304      	movcc	r3, #4
 810b3d2:	441d      	add	r5, r3
 810b3d4:	4473      	add	r3, lr
 810b3d6:	469e      	mov	lr, r3
 810b3d8:	462e      	mov	r6, r5
 810b3da:	4566      	cmp	r6, ip
 810b3dc:	d30e      	bcc.n	810b3fc <__mdiff+0xec>
 810b3de:	f10c 0203 	add.w	r2, ip, #3
 810b3e2:	1b52      	subs	r2, r2, r5
 810b3e4:	f022 0203 	bic.w	r2, r2, #3
 810b3e8:	3d03      	subs	r5, #3
 810b3ea:	45ac      	cmp	ip, r5
 810b3ec:	bf38      	it	cc
 810b3ee:	2200      	movcc	r2, #0
 810b3f0:	441a      	add	r2, r3
 810b3f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b3f6:	b17b      	cbz	r3, 810b418 <__mdiff+0x108>
 810b3f8:	6107      	str	r7, [r0, #16]
 810b3fa:	e7a3      	b.n	810b344 <__mdiff+0x34>
 810b3fc:	f856 8b04 	ldr.w	r8, [r6], #4
 810b400:	fa11 f288 	uxtah	r2, r1, r8
 810b404:	1414      	asrs	r4, r2, #16
 810b406:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810b40a:	b292      	uxth	r2, r2
 810b40c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810b410:	f84e 2b04 	str.w	r2, [lr], #4
 810b414:	1421      	asrs	r1, r4, #16
 810b416:	e7e0      	b.n	810b3da <__mdiff+0xca>
 810b418:	3f01      	subs	r7, #1
 810b41a:	e7ea      	b.n	810b3f2 <__mdiff+0xe2>
 810b41c:	0810c458 	.word	0x0810c458
 810b420:	0810c548 	.word	0x0810c548

0810b424 <__ulp>:
 810b424:	b082      	sub	sp, #8
 810b426:	ed8d 0b00 	vstr	d0, [sp]
 810b42a:	9b01      	ldr	r3, [sp, #4]
 810b42c:	4912      	ldr	r1, [pc, #72]	; (810b478 <__ulp+0x54>)
 810b42e:	4019      	ands	r1, r3
 810b430:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b434:	2900      	cmp	r1, #0
 810b436:	dd05      	ble.n	810b444 <__ulp+0x20>
 810b438:	2200      	movs	r2, #0
 810b43a:	460b      	mov	r3, r1
 810b43c:	ec43 2b10 	vmov	d0, r2, r3
 810b440:	b002      	add	sp, #8
 810b442:	4770      	bx	lr
 810b444:	4249      	negs	r1, r1
 810b446:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b44a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b44e:	f04f 0200 	mov.w	r2, #0
 810b452:	f04f 0300 	mov.w	r3, #0
 810b456:	da04      	bge.n	810b462 <__ulp+0x3e>
 810b458:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b45c:	fa41 f300 	asr.w	r3, r1, r0
 810b460:	e7ec      	b.n	810b43c <__ulp+0x18>
 810b462:	f1a0 0114 	sub.w	r1, r0, #20
 810b466:	291e      	cmp	r1, #30
 810b468:	bfda      	itte	le
 810b46a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b46e:	fa20 f101 	lsrle.w	r1, r0, r1
 810b472:	2101      	movgt	r1, #1
 810b474:	460a      	mov	r2, r1
 810b476:	e7e1      	b.n	810b43c <__ulp+0x18>
 810b478:	7ff00000 	.word	0x7ff00000

0810b47c <__b2d>:
 810b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b47e:	6905      	ldr	r5, [r0, #16]
 810b480:	f100 0714 	add.w	r7, r0, #20
 810b484:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b488:	1f2e      	subs	r6, r5, #4
 810b48a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b48e:	4620      	mov	r0, r4
 810b490:	f7ff fd48 	bl	810af24 <__hi0bits>
 810b494:	f1c0 0320 	rsb	r3, r0, #32
 810b498:	280a      	cmp	r0, #10
 810b49a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b518 <__b2d+0x9c>
 810b49e:	600b      	str	r3, [r1, #0]
 810b4a0:	dc14      	bgt.n	810b4cc <__b2d+0x50>
 810b4a2:	f1c0 0e0b 	rsb	lr, r0, #11
 810b4a6:	fa24 f10e 	lsr.w	r1, r4, lr
 810b4aa:	42b7      	cmp	r7, r6
 810b4ac:	ea41 030c 	orr.w	r3, r1, ip
 810b4b0:	bf34      	ite	cc
 810b4b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b4b6:	2100      	movcs	r1, #0
 810b4b8:	3015      	adds	r0, #21
 810b4ba:	fa04 f000 	lsl.w	r0, r4, r0
 810b4be:	fa21 f10e 	lsr.w	r1, r1, lr
 810b4c2:	ea40 0201 	orr.w	r2, r0, r1
 810b4c6:	ec43 2b10 	vmov	d0, r2, r3
 810b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b4cc:	42b7      	cmp	r7, r6
 810b4ce:	bf3a      	itte	cc
 810b4d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b4d4:	f1a5 0608 	subcc.w	r6, r5, #8
 810b4d8:	2100      	movcs	r1, #0
 810b4da:	380b      	subs	r0, #11
 810b4dc:	d017      	beq.n	810b50e <__b2d+0x92>
 810b4de:	f1c0 0c20 	rsb	ip, r0, #32
 810b4e2:	fa04 f500 	lsl.w	r5, r4, r0
 810b4e6:	42be      	cmp	r6, r7
 810b4e8:	fa21 f40c 	lsr.w	r4, r1, ip
 810b4ec:	ea45 0504 	orr.w	r5, r5, r4
 810b4f0:	bf8c      	ite	hi
 810b4f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b4f6:	2400      	movls	r4, #0
 810b4f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b4fc:	fa01 f000 	lsl.w	r0, r1, r0
 810b500:	fa24 f40c 	lsr.w	r4, r4, ip
 810b504:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b508:	ea40 0204 	orr.w	r2, r0, r4
 810b50c:	e7db      	b.n	810b4c6 <__b2d+0x4a>
 810b50e:	ea44 030c 	orr.w	r3, r4, ip
 810b512:	460a      	mov	r2, r1
 810b514:	e7d7      	b.n	810b4c6 <__b2d+0x4a>
 810b516:	bf00      	nop
 810b518:	3ff00000 	.word	0x3ff00000

0810b51c <__d2b>:
 810b51c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b520:	4689      	mov	r9, r1
 810b522:	2101      	movs	r1, #1
 810b524:	ec57 6b10 	vmov	r6, r7, d0
 810b528:	4690      	mov	r8, r2
 810b52a:	f7ff fc09 	bl	810ad40 <_Balloc>
 810b52e:	4604      	mov	r4, r0
 810b530:	b930      	cbnz	r0, 810b540 <__d2b+0x24>
 810b532:	4602      	mov	r2, r0
 810b534:	4b25      	ldr	r3, [pc, #148]	; (810b5cc <__d2b+0xb0>)
 810b536:	4826      	ldr	r0, [pc, #152]	; (810b5d0 <__d2b+0xb4>)
 810b538:	f240 310a 	movw	r1, #778	; 0x30a
 810b53c:	f000 fcfe 	bl	810bf3c <__assert_func>
 810b540:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b544:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b548:	bb35      	cbnz	r5, 810b598 <__d2b+0x7c>
 810b54a:	2e00      	cmp	r6, #0
 810b54c:	9301      	str	r3, [sp, #4]
 810b54e:	d028      	beq.n	810b5a2 <__d2b+0x86>
 810b550:	4668      	mov	r0, sp
 810b552:	9600      	str	r6, [sp, #0]
 810b554:	f7ff fd06 	bl	810af64 <__lo0bits>
 810b558:	9900      	ldr	r1, [sp, #0]
 810b55a:	b300      	cbz	r0, 810b59e <__d2b+0x82>
 810b55c:	9a01      	ldr	r2, [sp, #4]
 810b55e:	f1c0 0320 	rsb	r3, r0, #32
 810b562:	fa02 f303 	lsl.w	r3, r2, r3
 810b566:	430b      	orrs	r3, r1
 810b568:	40c2      	lsrs	r2, r0
 810b56a:	6163      	str	r3, [r4, #20]
 810b56c:	9201      	str	r2, [sp, #4]
 810b56e:	9b01      	ldr	r3, [sp, #4]
 810b570:	61a3      	str	r3, [r4, #24]
 810b572:	2b00      	cmp	r3, #0
 810b574:	bf14      	ite	ne
 810b576:	2202      	movne	r2, #2
 810b578:	2201      	moveq	r2, #1
 810b57a:	6122      	str	r2, [r4, #16]
 810b57c:	b1d5      	cbz	r5, 810b5b4 <__d2b+0x98>
 810b57e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b582:	4405      	add	r5, r0
 810b584:	f8c9 5000 	str.w	r5, [r9]
 810b588:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b58c:	f8c8 0000 	str.w	r0, [r8]
 810b590:	4620      	mov	r0, r4
 810b592:	b003      	add	sp, #12
 810b594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b59c:	e7d5      	b.n	810b54a <__d2b+0x2e>
 810b59e:	6161      	str	r1, [r4, #20]
 810b5a0:	e7e5      	b.n	810b56e <__d2b+0x52>
 810b5a2:	a801      	add	r0, sp, #4
 810b5a4:	f7ff fcde 	bl	810af64 <__lo0bits>
 810b5a8:	9b01      	ldr	r3, [sp, #4]
 810b5aa:	6163      	str	r3, [r4, #20]
 810b5ac:	2201      	movs	r2, #1
 810b5ae:	6122      	str	r2, [r4, #16]
 810b5b0:	3020      	adds	r0, #32
 810b5b2:	e7e3      	b.n	810b57c <__d2b+0x60>
 810b5b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b5b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b5bc:	f8c9 0000 	str.w	r0, [r9]
 810b5c0:	6918      	ldr	r0, [r3, #16]
 810b5c2:	f7ff fcaf 	bl	810af24 <__hi0bits>
 810b5c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b5ca:	e7df      	b.n	810b58c <__d2b+0x70>
 810b5cc:	0810c458 	.word	0x0810c458
 810b5d0:	0810c548 	.word	0x0810c548

0810b5d4 <__ratio>:
 810b5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b5d8:	4688      	mov	r8, r1
 810b5da:	4669      	mov	r1, sp
 810b5dc:	4681      	mov	r9, r0
 810b5de:	f7ff ff4d 	bl	810b47c <__b2d>
 810b5e2:	a901      	add	r1, sp, #4
 810b5e4:	4640      	mov	r0, r8
 810b5e6:	ec55 4b10 	vmov	r4, r5, d0
 810b5ea:	f7ff ff47 	bl	810b47c <__b2d>
 810b5ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b5f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b5f6:	eba3 0c02 	sub.w	ip, r3, r2
 810b5fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b5fe:	1a9b      	subs	r3, r3, r2
 810b600:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b604:	ec51 0b10 	vmov	r0, r1, d0
 810b608:	2b00      	cmp	r3, #0
 810b60a:	bfd6      	itet	le
 810b60c:	460a      	movle	r2, r1
 810b60e:	462a      	movgt	r2, r5
 810b610:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b614:	468b      	mov	fp, r1
 810b616:	462f      	mov	r7, r5
 810b618:	bfd4      	ite	le
 810b61a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b61e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b622:	4620      	mov	r0, r4
 810b624:	ee10 2a10 	vmov	r2, s0
 810b628:	465b      	mov	r3, fp
 810b62a:	4639      	mov	r1, r7
 810b62c:	f7f5 f996 	bl	810095c <__aeabi_ddiv>
 810b630:	ec41 0b10 	vmov	d0, r0, r1
 810b634:	b003      	add	sp, #12
 810b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b63a <__copybits>:
 810b63a:	3901      	subs	r1, #1
 810b63c:	b570      	push	{r4, r5, r6, lr}
 810b63e:	1149      	asrs	r1, r1, #5
 810b640:	6914      	ldr	r4, [r2, #16]
 810b642:	3101      	adds	r1, #1
 810b644:	f102 0314 	add.w	r3, r2, #20
 810b648:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b64c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b650:	1f05      	subs	r5, r0, #4
 810b652:	42a3      	cmp	r3, r4
 810b654:	d30c      	bcc.n	810b670 <__copybits+0x36>
 810b656:	1aa3      	subs	r3, r4, r2
 810b658:	3b11      	subs	r3, #17
 810b65a:	f023 0303 	bic.w	r3, r3, #3
 810b65e:	3211      	adds	r2, #17
 810b660:	42a2      	cmp	r2, r4
 810b662:	bf88      	it	hi
 810b664:	2300      	movhi	r3, #0
 810b666:	4418      	add	r0, r3
 810b668:	2300      	movs	r3, #0
 810b66a:	4288      	cmp	r0, r1
 810b66c:	d305      	bcc.n	810b67a <__copybits+0x40>
 810b66e:	bd70      	pop	{r4, r5, r6, pc}
 810b670:	f853 6b04 	ldr.w	r6, [r3], #4
 810b674:	f845 6f04 	str.w	r6, [r5, #4]!
 810b678:	e7eb      	b.n	810b652 <__copybits+0x18>
 810b67a:	f840 3b04 	str.w	r3, [r0], #4
 810b67e:	e7f4      	b.n	810b66a <__copybits+0x30>

0810b680 <__any_on>:
 810b680:	f100 0214 	add.w	r2, r0, #20
 810b684:	6900      	ldr	r0, [r0, #16]
 810b686:	114b      	asrs	r3, r1, #5
 810b688:	4298      	cmp	r0, r3
 810b68a:	b510      	push	{r4, lr}
 810b68c:	db11      	blt.n	810b6b2 <__any_on+0x32>
 810b68e:	dd0a      	ble.n	810b6a6 <__any_on+0x26>
 810b690:	f011 011f 	ands.w	r1, r1, #31
 810b694:	d007      	beq.n	810b6a6 <__any_on+0x26>
 810b696:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b69a:	fa24 f001 	lsr.w	r0, r4, r1
 810b69e:	fa00 f101 	lsl.w	r1, r0, r1
 810b6a2:	428c      	cmp	r4, r1
 810b6a4:	d10b      	bne.n	810b6be <__any_on+0x3e>
 810b6a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b6aa:	4293      	cmp	r3, r2
 810b6ac:	d803      	bhi.n	810b6b6 <__any_on+0x36>
 810b6ae:	2000      	movs	r0, #0
 810b6b0:	bd10      	pop	{r4, pc}
 810b6b2:	4603      	mov	r3, r0
 810b6b4:	e7f7      	b.n	810b6a6 <__any_on+0x26>
 810b6b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b6ba:	2900      	cmp	r1, #0
 810b6bc:	d0f5      	beq.n	810b6aa <__any_on+0x2a>
 810b6be:	2001      	movs	r0, #1
 810b6c0:	e7f6      	b.n	810b6b0 <__any_on+0x30>

0810b6c2 <_calloc_r>:
 810b6c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810b6c4:	fba1 2402 	umull	r2, r4, r1, r2
 810b6c8:	b94c      	cbnz	r4, 810b6de <_calloc_r+0x1c>
 810b6ca:	4611      	mov	r1, r2
 810b6cc:	9201      	str	r2, [sp, #4]
 810b6ce:	f000 f87b 	bl	810b7c8 <_malloc_r>
 810b6d2:	9a01      	ldr	r2, [sp, #4]
 810b6d4:	4605      	mov	r5, r0
 810b6d6:	b930      	cbnz	r0, 810b6e6 <_calloc_r+0x24>
 810b6d8:	4628      	mov	r0, r5
 810b6da:	b003      	add	sp, #12
 810b6dc:	bd30      	pop	{r4, r5, pc}
 810b6de:	220c      	movs	r2, #12
 810b6e0:	6002      	str	r2, [r0, #0]
 810b6e2:	2500      	movs	r5, #0
 810b6e4:	e7f8      	b.n	810b6d8 <_calloc_r+0x16>
 810b6e6:	4621      	mov	r1, r4
 810b6e8:	f7fc f86a 	bl	81077c0 <memset>
 810b6ec:	e7f4      	b.n	810b6d8 <_calloc_r+0x16>
	...

0810b6f0 <_free_r>:
 810b6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810b6f2:	2900      	cmp	r1, #0
 810b6f4:	d044      	beq.n	810b780 <_free_r+0x90>
 810b6f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b6fa:	9001      	str	r0, [sp, #4]
 810b6fc:	2b00      	cmp	r3, #0
 810b6fe:	f1a1 0404 	sub.w	r4, r1, #4
 810b702:	bfb8      	it	lt
 810b704:	18e4      	addlt	r4, r4, r3
 810b706:	f000 fca7 	bl	810c058 <__malloc_lock>
 810b70a:	4a1e      	ldr	r2, [pc, #120]	; (810b784 <_free_r+0x94>)
 810b70c:	9801      	ldr	r0, [sp, #4]
 810b70e:	6813      	ldr	r3, [r2, #0]
 810b710:	b933      	cbnz	r3, 810b720 <_free_r+0x30>
 810b712:	6063      	str	r3, [r4, #4]
 810b714:	6014      	str	r4, [r2, #0]
 810b716:	b003      	add	sp, #12
 810b718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810b71c:	f000 bca2 	b.w	810c064 <__malloc_unlock>
 810b720:	42a3      	cmp	r3, r4
 810b722:	d908      	bls.n	810b736 <_free_r+0x46>
 810b724:	6825      	ldr	r5, [r4, #0]
 810b726:	1961      	adds	r1, r4, r5
 810b728:	428b      	cmp	r3, r1
 810b72a:	bf01      	itttt	eq
 810b72c:	6819      	ldreq	r1, [r3, #0]
 810b72e:	685b      	ldreq	r3, [r3, #4]
 810b730:	1949      	addeq	r1, r1, r5
 810b732:	6021      	streq	r1, [r4, #0]
 810b734:	e7ed      	b.n	810b712 <_free_r+0x22>
 810b736:	461a      	mov	r2, r3
 810b738:	685b      	ldr	r3, [r3, #4]
 810b73a:	b10b      	cbz	r3, 810b740 <_free_r+0x50>
 810b73c:	42a3      	cmp	r3, r4
 810b73e:	d9fa      	bls.n	810b736 <_free_r+0x46>
 810b740:	6811      	ldr	r1, [r2, #0]
 810b742:	1855      	adds	r5, r2, r1
 810b744:	42a5      	cmp	r5, r4
 810b746:	d10b      	bne.n	810b760 <_free_r+0x70>
 810b748:	6824      	ldr	r4, [r4, #0]
 810b74a:	4421      	add	r1, r4
 810b74c:	1854      	adds	r4, r2, r1
 810b74e:	42a3      	cmp	r3, r4
 810b750:	6011      	str	r1, [r2, #0]
 810b752:	d1e0      	bne.n	810b716 <_free_r+0x26>
 810b754:	681c      	ldr	r4, [r3, #0]
 810b756:	685b      	ldr	r3, [r3, #4]
 810b758:	6053      	str	r3, [r2, #4]
 810b75a:	4421      	add	r1, r4
 810b75c:	6011      	str	r1, [r2, #0]
 810b75e:	e7da      	b.n	810b716 <_free_r+0x26>
 810b760:	d902      	bls.n	810b768 <_free_r+0x78>
 810b762:	230c      	movs	r3, #12
 810b764:	6003      	str	r3, [r0, #0]
 810b766:	e7d6      	b.n	810b716 <_free_r+0x26>
 810b768:	6825      	ldr	r5, [r4, #0]
 810b76a:	1961      	adds	r1, r4, r5
 810b76c:	428b      	cmp	r3, r1
 810b76e:	bf04      	itt	eq
 810b770:	6819      	ldreq	r1, [r3, #0]
 810b772:	685b      	ldreq	r3, [r3, #4]
 810b774:	6063      	str	r3, [r4, #4]
 810b776:	bf04      	itt	eq
 810b778:	1949      	addeq	r1, r1, r5
 810b77a:	6021      	streq	r1, [r4, #0]
 810b77c:	6054      	str	r4, [r2, #4]
 810b77e:	e7ca      	b.n	810b716 <_free_r+0x26>
 810b780:	b003      	add	sp, #12
 810b782:	bd30      	pop	{r4, r5, pc}
 810b784:	100004a8 	.word	0x100004a8

0810b788 <sbrk_aligned>:
 810b788:	b570      	push	{r4, r5, r6, lr}
 810b78a:	4e0e      	ldr	r6, [pc, #56]	; (810b7c4 <sbrk_aligned+0x3c>)
 810b78c:	460c      	mov	r4, r1
 810b78e:	6831      	ldr	r1, [r6, #0]
 810b790:	4605      	mov	r5, r0
 810b792:	b911      	cbnz	r1, 810b79a <sbrk_aligned+0x12>
 810b794:	f000 fb4c 	bl	810be30 <_sbrk_r>
 810b798:	6030      	str	r0, [r6, #0]
 810b79a:	4621      	mov	r1, r4
 810b79c:	4628      	mov	r0, r5
 810b79e:	f000 fb47 	bl	810be30 <_sbrk_r>
 810b7a2:	1c43      	adds	r3, r0, #1
 810b7a4:	d00a      	beq.n	810b7bc <sbrk_aligned+0x34>
 810b7a6:	1cc4      	adds	r4, r0, #3
 810b7a8:	f024 0403 	bic.w	r4, r4, #3
 810b7ac:	42a0      	cmp	r0, r4
 810b7ae:	d007      	beq.n	810b7c0 <sbrk_aligned+0x38>
 810b7b0:	1a21      	subs	r1, r4, r0
 810b7b2:	4628      	mov	r0, r5
 810b7b4:	f000 fb3c 	bl	810be30 <_sbrk_r>
 810b7b8:	3001      	adds	r0, #1
 810b7ba:	d101      	bne.n	810b7c0 <sbrk_aligned+0x38>
 810b7bc:	f04f 34ff 	mov.w	r4, #4294967295
 810b7c0:	4620      	mov	r0, r4
 810b7c2:	bd70      	pop	{r4, r5, r6, pc}
 810b7c4:	100004ac 	.word	0x100004ac

0810b7c8 <_malloc_r>:
 810b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b7cc:	1ccd      	adds	r5, r1, #3
 810b7ce:	f025 0503 	bic.w	r5, r5, #3
 810b7d2:	3508      	adds	r5, #8
 810b7d4:	2d0c      	cmp	r5, #12
 810b7d6:	bf38      	it	cc
 810b7d8:	250c      	movcc	r5, #12
 810b7da:	2d00      	cmp	r5, #0
 810b7dc:	4607      	mov	r7, r0
 810b7de:	db01      	blt.n	810b7e4 <_malloc_r+0x1c>
 810b7e0:	42a9      	cmp	r1, r5
 810b7e2:	d905      	bls.n	810b7f0 <_malloc_r+0x28>
 810b7e4:	230c      	movs	r3, #12
 810b7e6:	603b      	str	r3, [r7, #0]
 810b7e8:	2600      	movs	r6, #0
 810b7ea:	4630      	mov	r0, r6
 810b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b7f0:	4e2e      	ldr	r6, [pc, #184]	; (810b8ac <_malloc_r+0xe4>)
 810b7f2:	f000 fc31 	bl	810c058 <__malloc_lock>
 810b7f6:	6833      	ldr	r3, [r6, #0]
 810b7f8:	461c      	mov	r4, r3
 810b7fa:	bb34      	cbnz	r4, 810b84a <_malloc_r+0x82>
 810b7fc:	4629      	mov	r1, r5
 810b7fe:	4638      	mov	r0, r7
 810b800:	f7ff ffc2 	bl	810b788 <sbrk_aligned>
 810b804:	1c43      	adds	r3, r0, #1
 810b806:	4604      	mov	r4, r0
 810b808:	d14d      	bne.n	810b8a6 <_malloc_r+0xde>
 810b80a:	6834      	ldr	r4, [r6, #0]
 810b80c:	4626      	mov	r6, r4
 810b80e:	2e00      	cmp	r6, #0
 810b810:	d140      	bne.n	810b894 <_malloc_r+0xcc>
 810b812:	6823      	ldr	r3, [r4, #0]
 810b814:	4631      	mov	r1, r6
 810b816:	4638      	mov	r0, r7
 810b818:	eb04 0803 	add.w	r8, r4, r3
 810b81c:	f000 fb08 	bl	810be30 <_sbrk_r>
 810b820:	4580      	cmp	r8, r0
 810b822:	d13a      	bne.n	810b89a <_malloc_r+0xd2>
 810b824:	6821      	ldr	r1, [r4, #0]
 810b826:	3503      	adds	r5, #3
 810b828:	1a6d      	subs	r5, r5, r1
 810b82a:	f025 0503 	bic.w	r5, r5, #3
 810b82e:	3508      	adds	r5, #8
 810b830:	2d0c      	cmp	r5, #12
 810b832:	bf38      	it	cc
 810b834:	250c      	movcc	r5, #12
 810b836:	4629      	mov	r1, r5
 810b838:	4638      	mov	r0, r7
 810b83a:	f7ff ffa5 	bl	810b788 <sbrk_aligned>
 810b83e:	3001      	adds	r0, #1
 810b840:	d02b      	beq.n	810b89a <_malloc_r+0xd2>
 810b842:	6823      	ldr	r3, [r4, #0]
 810b844:	442b      	add	r3, r5
 810b846:	6023      	str	r3, [r4, #0]
 810b848:	e00e      	b.n	810b868 <_malloc_r+0xa0>
 810b84a:	6822      	ldr	r2, [r4, #0]
 810b84c:	1b52      	subs	r2, r2, r5
 810b84e:	d41e      	bmi.n	810b88e <_malloc_r+0xc6>
 810b850:	2a0b      	cmp	r2, #11
 810b852:	d916      	bls.n	810b882 <_malloc_r+0xba>
 810b854:	1961      	adds	r1, r4, r5
 810b856:	42a3      	cmp	r3, r4
 810b858:	6025      	str	r5, [r4, #0]
 810b85a:	bf18      	it	ne
 810b85c:	6059      	strne	r1, [r3, #4]
 810b85e:	6863      	ldr	r3, [r4, #4]
 810b860:	bf08      	it	eq
 810b862:	6031      	streq	r1, [r6, #0]
 810b864:	5162      	str	r2, [r4, r5]
 810b866:	604b      	str	r3, [r1, #4]
 810b868:	4638      	mov	r0, r7
 810b86a:	f104 060b 	add.w	r6, r4, #11
 810b86e:	f000 fbf9 	bl	810c064 <__malloc_unlock>
 810b872:	f026 0607 	bic.w	r6, r6, #7
 810b876:	1d23      	adds	r3, r4, #4
 810b878:	1af2      	subs	r2, r6, r3
 810b87a:	d0b6      	beq.n	810b7ea <_malloc_r+0x22>
 810b87c:	1b9b      	subs	r3, r3, r6
 810b87e:	50a3      	str	r3, [r4, r2]
 810b880:	e7b3      	b.n	810b7ea <_malloc_r+0x22>
 810b882:	6862      	ldr	r2, [r4, #4]
 810b884:	42a3      	cmp	r3, r4
 810b886:	bf0c      	ite	eq
 810b888:	6032      	streq	r2, [r6, #0]
 810b88a:	605a      	strne	r2, [r3, #4]
 810b88c:	e7ec      	b.n	810b868 <_malloc_r+0xa0>
 810b88e:	4623      	mov	r3, r4
 810b890:	6864      	ldr	r4, [r4, #4]
 810b892:	e7b2      	b.n	810b7fa <_malloc_r+0x32>
 810b894:	4634      	mov	r4, r6
 810b896:	6876      	ldr	r6, [r6, #4]
 810b898:	e7b9      	b.n	810b80e <_malloc_r+0x46>
 810b89a:	230c      	movs	r3, #12
 810b89c:	603b      	str	r3, [r7, #0]
 810b89e:	4638      	mov	r0, r7
 810b8a0:	f000 fbe0 	bl	810c064 <__malloc_unlock>
 810b8a4:	e7a1      	b.n	810b7ea <_malloc_r+0x22>
 810b8a6:	6025      	str	r5, [r4, #0]
 810b8a8:	e7de      	b.n	810b868 <_malloc_r+0xa0>
 810b8aa:	bf00      	nop
 810b8ac:	100004a8 	.word	0x100004a8

0810b8b0 <__ssputs_r>:
 810b8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b8b4:	688e      	ldr	r6, [r1, #8]
 810b8b6:	429e      	cmp	r6, r3
 810b8b8:	4682      	mov	sl, r0
 810b8ba:	460c      	mov	r4, r1
 810b8bc:	4690      	mov	r8, r2
 810b8be:	461f      	mov	r7, r3
 810b8c0:	d838      	bhi.n	810b934 <__ssputs_r+0x84>
 810b8c2:	898a      	ldrh	r2, [r1, #12]
 810b8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b8c8:	d032      	beq.n	810b930 <__ssputs_r+0x80>
 810b8ca:	6825      	ldr	r5, [r4, #0]
 810b8cc:	6909      	ldr	r1, [r1, #16]
 810b8ce:	eba5 0901 	sub.w	r9, r5, r1
 810b8d2:	6965      	ldr	r5, [r4, #20]
 810b8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b8d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b8dc:	3301      	adds	r3, #1
 810b8de:	444b      	add	r3, r9
 810b8e0:	106d      	asrs	r5, r5, #1
 810b8e2:	429d      	cmp	r5, r3
 810b8e4:	bf38      	it	cc
 810b8e6:	461d      	movcc	r5, r3
 810b8e8:	0553      	lsls	r3, r2, #21
 810b8ea:	d531      	bpl.n	810b950 <__ssputs_r+0xa0>
 810b8ec:	4629      	mov	r1, r5
 810b8ee:	f7ff ff6b 	bl	810b7c8 <_malloc_r>
 810b8f2:	4606      	mov	r6, r0
 810b8f4:	b950      	cbnz	r0, 810b90c <__ssputs_r+0x5c>
 810b8f6:	230c      	movs	r3, #12
 810b8f8:	f8ca 3000 	str.w	r3, [sl]
 810b8fc:	89a3      	ldrh	r3, [r4, #12]
 810b8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b902:	81a3      	strh	r3, [r4, #12]
 810b904:	f04f 30ff 	mov.w	r0, #4294967295
 810b908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b90c:	6921      	ldr	r1, [r4, #16]
 810b90e:	464a      	mov	r2, r9
 810b910:	f7ff fa08 	bl	810ad24 <memcpy>
 810b914:	89a3      	ldrh	r3, [r4, #12]
 810b916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b91e:	81a3      	strh	r3, [r4, #12]
 810b920:	6126      	str	r6, [r4, #16]
 810b922:	6165      	str	r5, [r4, #20]
 810b924:	444e      	add	r6, r9
 810b926:	eba5 0509 	sub.w	r5, r5, r9
 810b92a:	6026      	str	r6, [r4, #0]
 810b92c:	60a5      	str	r5, [r4, #8]
 810b92e:	463e      	mov	r6, r7
 810b930:	42be      	cmp	r6, r7
 810b932:	d900      	bls.n	810b936 <__ssputs_r+0x86>
 810b934:	463e      	mov	r6, r7
 810b936:	6820      	ldr	r0, [r4, #0]
 810b938:	4632      	mov	r2, r6
 810b93a:	4641      	mov	r1, r8
 810b93c:	f000 fb72 	bl	810c024 <memmove>
 810b940:	68a3      	ldr	r3, [r4, #8]
 810b942:	1b9b      	subs	r3, r3, r6
 810b944:	60a3      	str	r3, [r4, #8]
 810b946:	6823      	ldr	r3, [r4, #0]
 810b948:	4433      	add	r3, r6
 810b94a:	6023      	str	r3, [r4, #0]
 810b94c:	2000      	movs	r0, #0
 810b94e:	e7db      	b.n	810b908 <__ssputs_r+0x58>
 810b950:	462a      	mov	r2, r5
 810b952:	f000 fb8d 	bl	810c070 <_realloc_r>
 810b956:	4606      	mov	r6, r0
 810b958:	2800      	cmp	r0, #0
 810b95a:	d1e1      	bne.n	810b920 <__ssputs_r+0x70>
 810b95c:	6921      	ldr	r1, [r4, #16]
 810b95e:	4650      	mov	r0, sl
 810b960:	f7ff fec6 	bl	810b6f0 <_free_r>
 810b964:	e7c7      	b.n	810b8f6 <__ssputs_r+0x46>
	...

0810b968 <_svfiprintf_r>:
 810b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b96c:	4698      	mov	r8, r3
 810b96e:	898b      	ldrh	r3, [r1, #12]
 810b970:	061b      	lsls	r3, r3, #24
 810b972:	b09d      	sub	sp, #116	; 0x74
 810b974:	4607      	mov	r7, r0
 810b976:	460d      	mov	r5, r1
 810b978:	4614      	mov	r4, r2
 810b97a:	d50e      	bpl.n	810b99a <_svfiprintf_r+0x32>
 810b97c:	690b      	ldr	r3, [r1, #16]
 810b97e:	b963      	cbnz	r3, 810b99a <_svfiprintf_r+0x32>
 810b980:	2140      	movs	r1, #64	; 0x40
 810b982:	f7ff ff21 	bl	810b7c8 <_malloc_r>
 810b986:	6028      	str	r0, [r5, #0]
 810b988:	6128      	str	r0, [r5, #16]
 810b98a:	b920      	cbnz	r0, 810b996 <_svfiprintf_r+0x2e>
 810b98c:	230c      	movs	r3, #12
 810b98e:	603b      	str	r3, [r7, #0]
 810b990:	f04f 30ff 	mov.w	r0, #4294967295
 810b994:	e0d1      	b.n	810bb3a <_svfiprintf_r+0x1d2>
 810b996:	2340      	movs	r3, #64	; 0x40
 810b998:	616b      	str	r3, [r5, #20]
 810b99a:	2300      	movs	r3, #0
 810b99c:	9309      	str	r3, [sp, #36]	; 0x24
 810b99e:	2320      	movs	r3, #32
 810b9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 810b9a8:	2330      	movs	r3, #48	; 0x30
 810b9aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810bb54 <_svfiprintf_r+0x1ec>
 810b9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b9b2:	f04f 0901 	mov.w	r9, #1
 810b9b6:	4623      	mov	r3, r4
 810b9b8:	469a      	mov	sl, r3
 810b9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b9be:	b10a      	cbz	r2, 810b9c4 <_svfiprintf_r+0x5c>
 810b9c0:	2a25      	cmp	r2, #37	; 0x25
 810b9c2:	d1f9      	bne.n	810b9b8 <_svfiprintf_r+0x50>
 810b9c4:	ebba 0b04 	subs.w	fp, sl, r4
 810b9c8:	d00b      	beq.n	810b9e2 <_svfiprintf_r+0x7a>
 810b9ca:	465b      	mov	r3, fp
 810b9cc:	4622      	mov	r2, r4
 810b9ce:	4629      	mov	r1, r5
 810b9d0:	4638      	mov	r0, r7
 810b9d2:	f7ff ff6d 	bl	810b8b0 <__ssputs_r>
 810b9d6:	3001      	adds	r0, #1
 810b9d8:	f000 80aa 	beq.w	810bb30 <_svfiprintf_r+0x1c8>
 810b9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b9de:	445a      	add	r2, fp
 810b9e0:	9209      	str	r2, [sp, #36]	; 0x24
 810b9e2:	f89a 3000 	ldrb.w	r3, [sl]
 810b9e6:	2b00      	cmp	r3, #0
 810b9e8:	f000 80a2 	beq.w	810bb30 <_svfiprintf_r+0x1c8>
 810b9ec:	2300      	movs	r3, #0
 810b9ee:	f04f 32ff 	mov.w	r2, #4294967295
 810b9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b9f6:	f10a 0a01 	add.w	sl, sl, #1
 810b9fa:	9304      	str	r3, [sp, #16]
 810b9fc:	9307      	str	r3, [sp, #28]
 810b9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ba02:	931a      	str	r3, [sp, #104]	; 0x68
 810ba04:	4654      	mov	r4, sl
 810ba06:	2205      	movs	r2, #5
 810ba08:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ba0c:	4851      	ldr	r0, [pc, #324]	; (810bb54 <_svfiprintf_r+0x1ec>)
 810ba0e:	f7f4 fc6f 	bl	81002f0 <memchr>
 810ba12:	9a04      	ldr	r2, [sp, #16]
 810ba14:	b9d8      	cbnz	r0, 810ba4e <_svfiprintf_r+0xe6>
 810ba16:	06d0      	lsls	r0, r2, #27
 810ba18:	bf44      	itt	mi
 810ba1a:	2320      	movmi	r3, #32
 810ba1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ba20:	0711      	lsls	r1, r2, #28
 810ba22:	bf44      	itt	mi
 810ba24:	232b      	movmi	r3, #43	; 0x2b
 810ba26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ba2a:	f89a 3000 	ldrb.w	r3, [sl]
 810ba2e:	2b2a      	cmp	r3, #42	; 0x2a
 810ba30:	d015      	beq.n	810ba5e <_svfiprintf_r+0xf6>
 810ba32:	9a07      	ldr	r2, [sp, #28]
 810ba34:	4654      	mov	r4, sl
 810ba36:	2000      	movs	r0, #0
 810ba38:	f04f 0c0a 	mov.w	ip, #10
 810ba3c:	4621      	mov	r1, r4
 810ba3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ba42:	3b30      	subs	r3, #48	; 0x30
 810ba44:	2b09      	cmp	r3, #9
 810ba46:	d94e      	bls.n	810bae6 <_svfiprintf_r+0x17e>
 810ba48:	b1b0      	cbz	r0, 810ba78 <_svfiprintf_r+0x110>
 810ba4a:	9207      	str	r2, [sp, #28]
 810ba4c:	e014      	b.n	810ba78 <_svfiprintf_r+0x110>
 810ba4e:	eba0 0308 	sub.w	r3, r0, r8
 810ba52:	fa09 f303 	lsl.w	r3, r9, r3
 810ba56:	4313      	orrs	r3, r2
 810ba58:	9304      	str	r3, [sp, #16]
 810ba5a:	46a2      	mov	sl, r4
 810ba5c:	e7d2      	b.n	810ba04 <_svfiprintf_r+0x9c>
 810ba5e:	9b03      	ldr	r3, [sp, #12]
 810ba60:	1d19      	adds	r1, r3, #4
 810ba62:	681b      	ldr	r3, [r3, #0]
 810ba64:	9103      	str	r1, [sp, #12]
 810ba66:	2b00      	cmp	r3, #0
 810ba68:	bfbb      	ittet	lt
 810ba6a:	425b      	neglt	r3, r3
 810ba6c:	f042 0202 	orrlt.w	r2, r2, #2
 810ba70:	9307      	strge	r3, [sp, #28]
 810ba72:	9307      	strlt	r3, [sp, #28]
 810ba74:	bfb8      	it	lt
 810ba76:	9204      	strlt	r2, [sp, #16]
 810ba78:	7823      	ldrb	r3, [r4, #0]
 810ba7a:	2b2e      	cmp	r3, #46	; 0x2e
 810ba7c:	d10c      	bne.n	810ba98 <_svfiprintf_r+0x130>
 810ba7e:	7863      	ldrb	r3, [r4, #1]
 810ba80:	2b2a      	cmp	r3, #42	; 0x2a
 810ba82:	d135      	bne.n	810baf0 <_svfiprintf_r+0x188>
 810ba84:	9b03      	ldr	r3, [sp, #12]
 810ba86:	1d1a      	adds	r2, r3, #4
 810ba88:	681b      	ldr	r3, [r3, #0]
 810ba8a:	9203      	str	r2, [sp, #12]
 810ba8c:	2b00      	cmp	r3, #0
 810ba8e:	bfb8      	it	lt
 810ba90:	f04f 33ff 	movlt.w	r3, #4294967295
 810ba94:	3402      	adds	r4, #2
 810ba96:	9305      	str	r3, [sp, #20]
 810ba98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810bb64 <_svfiprintf_r+0x1fc>
 810ba9c:	7821      	ldrb	r1, [r4, #0]
 810ba9e:	2203      	movs	r2, #3
 810baa0:	4650      	mov	r0, sl
 810baa2:	f7f4 fc25 	bl	81002f0 <memchr>
 810baa6:	b140      	cbz	r0, 810baba <_svfiprintf_r+0x152>
 810baa8:	2340      	movs	r3, #64	; 0x40
 810baaa:	eba0 000a 	sub.w	r0, r0, sl
 810baae:	fa03 f000 	lsl.w	r0, r3, r0
 810bab2:	9b04      	ldr	r3, [sp, #16]
 810bab4:	4303      	orrs	r3, r0
 810bab6:	3401      	adds	r4, #1
 810bab8:	9304      	str	r3, [sp, #16]
 810baba:	f814 1b01 	ldrb.w	r1, [r4], #1
 810babe:	4826      	ldr	r0, [pc, #152]	; (810bb58 <_svfiprintf_r+0x1f0>)
 810bac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bac4:	2206      	movs	r2, #6
 810bac6:	f7f4 fc13 	bl	81002f0 <memchr>
 810baca:	2800      	cmp	r0, #0
 810bacc:	d038      	beq.n	810bb40 <_svfiprintf_r+0x1d8>
 810bace:	4b23      	ldr	r3, [pc, #140]	; (810bb5c <_svfiprintf_r+0x1f4>)
 810bad0:	bb1b      	cbnz	r3, 810bb1a <_svfiprintf_r+0x1b2>
 810bad2:	9b03      	ldr	r3, [sp, #12]
 810bad4:	3307      	adds	r3, #7
 810bad6:	f023 0307 	bic.w	r3, r3, #7
 810bada:	3308      	adds	r3, #8
 810badc:	9303      	str	r3, [sp, #12]
 810bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bae0:	4433      	add	r3, r6
 810bae2:	9309      	str	r3, [sp, #36]	; 0x24
 810bae4:	e767      	b.n	810b9b6 <_svfiprintf_r+0x4e>
 810bae6:	fb0c 3202 	mla	r2, ip, r2, r3
 810baea:	460c      	mov	r4, r1
 810baec:	2001      	movs	r0, #1
 810baee:	e7a5      	b.n	810ba3c <_svfiprintf_r+0xd4>
 810baf0:	2300      	movs	r3, #0
 810baf2:	3401      	adds	r4, #1
 810baf4:	9305      	str	r3, [sp, #20]
 810baf6:	4619      	mov	r1, r3
 810baf8:	f04f 0c0a 	mov.w	ip, #10
 810bafc:	4620      	mov	r0, r4
 810bafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bb02:	3a30      	subs	r2, #48	; 0x30
 810bb04:	2a09      	cmp	r2, #9
 810bb06:	d903      	bls.n	810bb10 <_svfiprintf_r+0x1a8>
 810bb08:	2b00      	cmp	r3, #0
 810bb0a:	d0c5      	beq.n	810ba98 <_svfiprintf_r+0x130>
 810bb0c:	9105      	str	r1, [sp, #20]
 810bb0e:	e7c3      	b.n	810ba98 <_svfiprintf_r+0x130>
 810bb10:	fb0c 2101 	mla	r1, ip, r1, r2
 810bb14:	4604      	mov	r4, r0
 810bb16:	2301      	movs	r3, #1
 810bb18:	e7f0      	b.n	810bafc <_svfiprintf_r+0x194>
 810bb1a:	ab03      	add	r3, sp, #12
 810bb1c:	9300      	str	r3, [sp, #0]
 810bb1e:	462a      	mov	r2, r5
 810bb20:	4b0f      	ldr	r3, [pc, #60]	; (810bb60 <_svfiprintf_r+0x1f8>)
 810bb22:	a904      	add	r1, sp, #16
 810bb24:	4638      	mov	r0, r7
 810bb26:	f7fb fef3 	bl	8107910 <_printf_float>
 810bb2a:	1c42      	adds	r2, r0, #1
 810bb2c:	4606      	mov	r6, r0
 810bb2e:	d1d6      	bne.n	810bade <_svfiprintf_r+0x176>
 810bb30:	89ab      	ldrh	r3, [r5, #12]
 810bb32:	065b      	lsls	r3, r3, #25
 810bb34:	f53f af2c 	bmi.w	810b990 <_svfiprintf_r+0x28>
 810bb38:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bb3a:	b01d      	add	sp, #116	; 0x74
 810bb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bb40:	ab03      	add	r3, sp, #12
 810bb42:	9300      	str	r3, [sp, #0]
 810bb44:	462a      	mov	r2, r5
 810bb46:	4b06      	ldr	r3, [pc, #24]	; (810bb60 <_svfiprintf_r+0x1f8>)
 810bb48:	a904      	add	r1, sp, #16
 810bb4a:	4638      	mov	r0, r7
 810bb4c:	f7fc f984 	bl	8107e58 <_printf_i>
 810bb50:	e7eb      	b.n	810bb2a <_svfiprintf_r+0x1c2>
 810bb52:	bf00      	nop
 810bb54:	0810c6a4 	.word	0x0810c6a4
 810bb58:	0810c6ae 	.word	0x0810c6ae
 810bb5c:	08107911 	.word	0x08107911
 810bb60:	0810b8b1 	.word	0x0810b8b1
 810bb64:	0810c6aa 	.word	0x0810c6aa

0810bb68 <__sfputc_r>:
 810bb68:	6893      	ldr	r3, [r2, #8]
 810bb6a:	3b01      	subs	r3, #1
 810bb6c:	2b00      	cmp	r3, #0
 810bb6e:	b410      	push	{r4}
 810bb70:	6093      	str	r3, [r2, #8]
 810bb72:	da08      	bge.n	810bb86 <__sfputc_r+0x1e>
 810bb74:	6994      	ldr	r4, [r2, #24]
 810bb76:	42a3      	cmp	r3, r4
 810bb78:	db01      	blt.n	810bb7e <__sfputc_r+0x16>
 810bb7a:	290a      	cmp	r1, #10
 810bb7c:	d103      	bne.n	810bb86 <__sfputc_r+0x1e>
 810bb7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bb82:	f7fd bbe9 	b.w	8109358 <__swbuf_r>
 810bb86:	6813      	ldr	r3, [r2, #0]
 810bb88:	1c58      	adds	r0, r3, #1
 810bb8a:	6010      	str	r0, [r2, #0]
 810bb8c:	7019      	strb	r1, [r3, #0]
 810bb8e:	4608      	mov	r0, r1
 810bb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bb94:	4770      	bx	lr

0810bb96 <__sfputs_r>:
 810bb96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb98:	4606      	mov	r6, r0
 810bb9a:	460f      	mov	r7, r1
 810bb9c:	4614      	mov	r4, r2
 810bb9e:	18d5      	adds	r5, r2, r3
 810bba0:	42ac      	cmp	r4, r5
 810bba2:	d101      	bne.n	810bba8 <__sfputs_r+0x12>
 810bba4:	2000      	movs	r0, #0
 810bba6:	e007      	b.n	810bbb8 <__sfputs_r+0x22>
 810bba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bbac:	463a      	mov	r2, r7
 810bbae:	4630      	mov	r0, r6
 810bbb0:	f7ff ffda 	bl	810bb68 <__sfputc_r>
 810bbb4:	1c43      	adds	r3, r0, #1
 810bbb6:	d1f3      	bne.n	810bba0 <__sfputs_r+0xa>
 810bbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810bbbc <_vfiprintf_r>:
 810bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bbc0:	460d      	mov	r5, r1
 810bbc2:	b09d      	sub	sp, #116	; 0x74
 810bbc4:	4614      	mov	r4, r2
 810bbc6:	4698      	mov	r8, r3
 810bbc8:	4606      	mov	r6, r0
 810bbca:	b118      	cbz	r0, 810bbd4 <_vfiprintf_r+0x18>
 810bbcc:	6983      	ldr	r3, [r0, #24]
 810bbce:	b90b      	cbnz	r3, 810bbd4 <_vfiprintf_r+0x18>
 810bbd0:	f7fe fc16 	bl	810a400 <__sinit>
 810bbd4:	4b89      	ldr	r3, [pc, #548]	; (810bdfc <_vfiprintf_r+0x240>)
 810bbd6:	429d      	cmp	r5, r3
 810bbd8:	d11b      	bne.n	810bc12 <_vfiprintf_r+0x56>
 810bbda:	6875      	ldr	r5, [r6, #4]
 810bbdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bbde:	07d9      	lsls	r1, r3, #31
 810bbe0:	d405      	bmi.n	810bbee <_vfiprintf_r+0x32>
 810bbe2:	89ab      	ldrh	r3, [r5, #12]
 810bbe4:	059a      	lsls	r2, r3, #22
 810bbe6:	d402      	bmi.n	810bbee <_vfiprintf_r+0x32>
 810bbe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bbea:	f7ff f81a 	bl	810ac22 <__retarget_lock_acquire_recursive>
 810bbee:	89ab      	ldrh	r3, [r5, #12]
 810bbf0:	071b      	lsls	r3, r3, #28
 810bbf2:	d501      	bpl.n	810bbf8 <_vfiprintf_r+0x3c>
 810bbf4:	692b      	ldr	r3, [r5, #16]
 810bbf6:	b9eb      	cbnz	r3, 810bc34 <_vfiprintf_r+0x78>
 810bbf8:	4629      	mov	r1, r5
 810bbfa:	4630      	mov	r0, r6
 810bbfc:	f7fd fbfe 	bl	81093fc <__swsetup_r>
 810bc00:	b1c0      	cbz	r0, 810bc34 <_vfiprintf_r+0x78>
 810bc02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bc04:	07dc      	lsls	r4, r3, #31
 810bc06:	d50e      	bpl.n	810bc26 <_vfiprintf_r+0x6a>
 810bc08:	f04f 30ff 	mov.w	r0, #4294967295
 810bc0c:	b01d      	add	sp, #116	; 0x74
 810bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc12:	4b7b      	ldr	r3, [pc, #492]	; (810be00 <_vfiprintf_r+0x244>)
 810bc14:	429d      	cmp	r5, r3
 810bc16:	d101      	bne.n	810bc1c <_vfiprintf_r+0x60>
 810bc18:	68b5      	ldr	r5, [r6, #8]
 810bc1a:	e7df      	b.n	810bbdc <_vfiprintf_r+0x20>
 810bc1c:	4b79      	ldr	r3, [pc, #484]	; (810be04 <_vfiprintf_r+0x248>)
 810bc1e:	429d      	cmp	r5, r3
 810bc20:	bf08      	it	eq
 810bc22:	68f5      	ldreq	r5, [r6, #12]
 810bc24:	e7da      	b.n	810bbdc <_vfiprintf_r+0x20>
 810bc26:	89ab      	ldrh	r3, [r5, #12]
 810bc28:	0598      	lsls	r0, r3, #22
 810bc2a:	d4ed      	bmi.n	810bc08 <_vfiprintf_r+0x4c>
 810bc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bc2e:	f7fe fff9 	bl	810ac24 <__retarget_lock_release_recursive>
 810bc32:	e7e9      	b.n	810bc08 <_vfiprintf_r+0x4c>
 810bc34:	2300      	movs	r3, #0
 810bc36:	9309      	str	r3, [sp, #36]	; 0x24
 810bc38:	2320      	movs	r3, #32
 810bc3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810bc3e:	f8cd 800c 	str.w	r8, [sp, #12]
 810bc42:	2330      	movs	r3, #48	; 0x30
 810bc44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810be08 <_vfiprintf_r+0x24c>
 810bc48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810bc4c:	f04f 0901 	mov.w	r9, #1
 810bc50:	4623      	mov	r3, r4
 810bc52:	469a      	mov	sl, r3
 810bc54:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bc58:	b10a      	cbz	r2, 810bc5e <_vfiprintf_r+0xa2>
 810bc5a:	2a25      	cmp	r2, #37	; 0x25
 810bc5c:	d1f9      	bne.n	810bc52 <_vfiprintf_r+0x96>
 810bc5e:	ebba 0b04 	subs.w	fp, sl, r4
 810bc62:	d00b      	beq.n	810bc7c <_vfiprintf_r+0xc0>
 810bc64:	465b      	mov	r3, fp
 810bc66:	4622      	mov	r2, r4
 810bc68:	4629      	mov	r1, r5
 810bc6a:	4630      	mov	r0, r6
 810bc6c:	f7ff ff93 	bl	810bb96 <__sfputs_r>
 810bc70:	3001      	adds	r0, #1
 810bc72:	f000 80aa 	beq.w	810bdca <_vfiprintf_r+0x20e>
 810bc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bc78:	445a      	add	r2, fp
 810bc7a:	9209      	str	r2, [sp, #36]	; 0x24
 810bc7c:	f89a 3000 	ldrb.w	r3, [sl]
 810bc80:	2b00      	cmp	r3, #0
 810bc82:	f000 80a2 	beq.w	810bdca <_vfiprintf_r+0x20e>
 810bc86:	2300      	movs	r3, #0
 810bc88:	f04f 32ff 	mov.w	r2, #4294967295
 810bc8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810bc90:	f10a 0a01 	add.w	sl, sl, #1
 810bc94:	9304      	str	r3, [sp, #16]
 810bc96:	9307      	str	r3, [sp, #28]
 810bc98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810bc9c:	931a      	str	r3, [sp, #104]	; 0x68
 810bc9e:	4654      	mov	r4, sl
 810bca0:	2205      	movs	r2, #5
 810bca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bca6:	4858      	ldr	r0, [pc, #352]	; (810be08 <_vfiprintf_r+0x24c>)
 810bca8:	f7f4 fb22 	bl	81002f0 <memchr>
 810bcac:	9a04      	ldr	r2, [sp, #16]
 810bcae:	b9d8      	cbnz	r0, 810bce8 <_vfiprintf_r+0x12c>
 810bcb0:	06d1      	lsls	r1, r2, #27
 810bcb2:	bf44      	itt	mi
 810bcb4:	2320      	movmi	r3, #32
 810bcb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bcba:	0713      	lsls	r3, r2, #28
 810bcbc:	bf44      	itt	mi
 810bcbe:	232b      	movmi	r3, #43	; 0x2b
 810bcc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bcc4:	f89a 3000 	ldrb.w	r3, [sl]
 810bcc8:	2b2a      	cmp	r3, #42	; 0x2a
 810bcca:	d015      	beq.n	810bcf8 <_vfiprintf_r+0x13c>
 810bccc:	9a07      	ldr	r2, [sp, #28]
 810bcce:	4654      	mov	r4, sl
 810bcd0:	2000      	movs	r0, #0
 810bcd2:	f04f 0c0a 	mov.w	ip, #10
 810bcd6:	4621      	mov	r1, r4
 810bcd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bcdc:	3b30      	subs	r3, #48	; 0x30
 810bcde:	2b09      	cmp	r3, #9
 810bce0:	d94e      	bls.n	810bd80 <_vfiprintf_r+0x1c4>
 810bce2:	b1b0      	cbz	r0, 810bd12 <_vfiprintf_r+0x156>
 810bce4:	9207      	str	r2, [sp, #28]
 810bce6:	e014      	b.n	810bd12 <_vfiprintf_r+0x156>
 810bce8:	eba0 0308 	sub.w	r3, r0, r8
 810bcec:	fa09 f303 	lsl.w	r3, r9, r3
 810bcf0:	4313      	orrs	r3, r2
 810bcf2:	9304      	str	r3, [sp, #16]
 810bcf4:	46a2      	mov	sl, r4
 810bcf6:	e7d2      	b.n	810bc9e <_vfiprintf_r+0xe2>
 810bcf8:	9b03      	ldr	r3, [sp, #12]
 810bcfa:	1d19      	adds	r1, r3, #4
 810bcfc:	681b      	ldr	r3, [r3, #0]
 810bcfe:	9103      	str	r1, [sp, #12]
 810bd00:	2b00      	cmp	r3, #0
 810bd02:	bfbb      	ittet	lt
 810bd04:	425b      	neglt	r3, r3
 810bd06:	f042 0202 	orrlt.w	r2, r2, #2
 810bd0a:	9307      	strge	r3, [sp, #28]
 810bd0c:	9307      	strlt	r3, [sp, #28]
 810bd0e:	bfb8      	it	lt
 810bd10:	9204      	strlt	r2, [sp, #16]
 810bd12:	7823      	ldrb	r3, [r4, #0]
 810bd14:	2b2e      	cmp	r3, #46	; 0x2e
 810bd16:	d10c      	bne.n	810bd32 <_vfiprintf_r+0x176>
 810bd18:	7863      	ldrb	r3, [r4, #1]
 810bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 810bd1c:	d135      	bne.n	810bd8a <_vfiprintf_r+0x1ce>
 810bd1e:	9b03      	ldr	r3, [sp, #12]
 810bd20:	1d1a      	adds	r2, r3, #4
 810bd22:	681b      	ldr	r3, [r3, #0]
 810bd24:	9203      	str	r2, [sp, #12]
 810bd26:	2b00      	cmp	r3, #0
 810bd28:	bfb8      	it	lt
 810bd2a:	f04f 33ff 	movlt.w	r3, #4294967295
 810bd2e:	3402      	adds	r4, #2
 810bd30:	9305      	str	r3, [sp, #20]
 810bd32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810be18 <_vfiprintf_r+0x25c>
 810bd36:	7821      	ldrb	r1, [r4, #0]
 810bd38:	2203      	movs	r2, #3
 810bd3a:	4650      	mov	r0, sl
 810bd3c:	f7f4 fad8 	bl	81002f0 <memchr>
 810bd40:	b140      	cbz	r0, 810bd54 <_vfiprintf_r+0x198>
 810bd42:	2340      	movs	r3, #64	; 0x40
 810bd44:	eba0 000a 	sub.w	r0, r0, sl
 810bd48:	fa03 f000 	lsl.w	r0, r3, r0
 810bd4c:	9b04      	ldr	r3, [sp, #16]
 810bd4e:	4303      	orrs	r3, r0
 810bd50:	3401      	adds	r4, #1
 810bd52:	9304      	str	r3, [sp, #16]
 810bd54:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bd58:	482c      	ldr	r0, [pc, #176]	; (810be0c <_vfiprintf_r+0x250>)
 810bd5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bd5e:	2206      	movs	r2, #6
 810bd60:	f7f4 fac6 	bl	81002f0 <memchr>
 810bd64:	2800      	cmp	r0, #0
 810bd66:	d03f      	beq.n	810bde8 <_vfiprintf_r+0x22c>
 810bd68:	4b29      	ldr	r3, [pc, #164]	; (810be10 <_vfiprintf_r+0x254>)
 810bd6a:	bb1b      	cbnz	r3, 810bdb4 <_vfiprintf_r+0x1f8>
 810bd6c:	9b03      	ldr	r3, [sp, #12]
 810bd6e:	3307      	adds	r3, #7
 810bd70:	f023 0307 	bic.w	r3, r3, #7
 810bd74:	3308      	adds	r3, #8
 810bd76:	9303      	str	r3, [sp, #12]
 810bd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bd7a:	443b      	add	r3, r7
 810bd7c:	9309      	str	r3, [sp, #36]	; 0x24
 810bd7e:	e767      	b.n	810bc50 <_vfiprintf_r+0x94>
 810bd80:	fb0c 3202 	mla	r2, ip, r2, r3
 810bd84:	460c      	mov	r4, r1
 810bd86:	2001      	movs	r0, #1
 810bd88:	e7a5      	b.n	810bcd6 <_vfiprintf_r+0x11a>
 810bd8a:	2300      	movs	r3, #0
 810bd8c:	3401      	adds	r4, #1
 810bd8e:	9305      	str	r3, [sp, #20]
 810bd90:	4619      	mov	r1, r3
 810bd92:	f04f 0c0a 	mov.w	ip, #10
 810bd96:	4620      	mov	r0, r4
 810bd98:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bd9c:	3a30      	subs	r2, #48	; 0x30
 810bd9e:	2a09      	cmp	r2, #9
 810bda0:	d903      	bls.n	810bdaa <_vfiprintf_r+0x1ee>
 810bda2:	2b00      	cmp	r3, #0
 810bda4:	d0c5      	beq.n	810bd32 <_vfiprintf_r+0x176>
 810bda6:	9105      	str	r1, [sp, #20]
 810bda8:	e7c3      	b.n	810bd32 <_vfiprintf_r+0x176>
 810bdaa:	fb0c 2101 	mla	r1, ip, r1, r2
 810bdae:	4604      	mov	r4, r0
 810bdb0:	2301      	movs	r3, #1
 810bdb2:	e7f0      	b.n	810bd96 <_vfiprintf_r+0x1da>
 810bdb4:	ab03      	add	r3, sp, #12
 810bdb6:	9300      	str	r3, [sp, #0]
 810bdb8:	462a      	mov	r2, r5
 810bdba:	4b16      	ldr	r3, [pc, #88]	; (810be14 <_vfiprintf_r+0x258>)
 810bdbc:	a904      	add	r1, sp, #16
 810bdbe:	4630      	mov	r0, r6
 810bdc0:	f7fb fda6 	bl	8107910 <_printf_float>
 810bdc4:	4607      	mov	r7, r0
 810bdc6:	1c78      	adds	r0, r7, #1
 810bdc8:	d1d6      	bne.n	810bd78 <_vfiprintf_r+0x1bc>
 810bdca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bdcc:	07d9      	lsls	r1, r3, #31
 810bdce:	d405      	bmi.n	810bddc <_vfiprintf_r+0x220>
 810bdd0:	89ab      	ldrh	r3, [r5, #12]
 810bdd2:	059a      	lsls	r2, r3, #22
 810bdd4:	d402      	bmi.n	810bddc <_vfiprintf_r+0x220>
 810bdd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bdd8:	f7fe ff24 	bl	810ac24 <__retarget_lock_release_recursive>
 810bddc:	89ab      	ldrh	r3, [r5, #12]
 810bdde:	065b      	lsls	r3, r3, #25
 810bde0:	f53f af12 	bmi.w	810bc08 <_vfiprintf_r+0x4c>
 810bde4:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bde6:	e711      	b.n	810bc0c <_vfiprintf_r+0x50>
 810bde8:	ab03      	add	r3, sp, #12
 810bdea:	9300      	str	r3, [sp, #0]
 810bdec:	462a      	mov	r2, r5
 810bdee:	4b09      	ldr	r3, [pc, #36]	; (810be14 <_vfiprintf_r+0x258>)
 810bdf0:	a904      	add	r1, sp, #16
 810bdf2:	4630      	mov	r0, r6
 810bdf4:	f7fc f830 	bl	8107e58 <_printf_i>
 810bdf8:	e7e4      	b.n	810bdc4 <_vfiprintf_r+0x208>
 810bdfa:	bf00      	nop
 810bdfc:	0810c48c 	.word	0x0810c48c
 810be00:	0810c4ac 	.word	0x0810c4ac
 810be04:	0810c46c 	.word	0x0810c46c
 810be08:	0810c6a4 	.word	0x0810c6a4
 810be0c:	0810c6ae 	.word	0x0810c6ae
 810be10:	08107911 	.word	0x08107911
 810be14:	0810bb97 	.word	0x0810bb97
 810be18:	0810c6aa 	.word	0x0810c6aa
 810be1c:	00000000 	.word	0x00000000

0810be20 <nan>:
 810be20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810be28 <nan+0x8>
 810be24:	4770      	bx	lr
 810be26:	bf00      	nop
 810be28:	00000000 	.word	0x00000000
 810be2c:	7ff80000 	.word	0x7ff80000

0810be30 <_sbrk_r>:
 810be30:	b538      	push	{r3, r4, r5, lr}
 810be32:	4d06      	ldr	r5, [pc, #24]	; (810be4c <_sbrk_r+0x1c>)
 810be34:	2300      	movs	r3, #0
 810be36:	4604      	mov	r4, r0
 810be38:	4608      	mov	r0, r1
 810be3a:	602b      	str	r3, [r5, #0]
 810be3c:	f7f6 f902 	bl	8102044 <_sbrk>
 810be40:	1c43      	adds	r3, r0, #1
 810be42:	d102      	bne.n	810be4a <_sbrk_r+0x1a>
 810be44:	682b      	ldr	r3, [r5, #0]
 810be46:	b103      	cbz	r3, 810be4a <_sbrk_r+0x1a>
 810be48:	6023      	str	r3, [r4, #0]
 810be4a:	bd38      	pop	{r3, r4, r5, pc}
 810be4c:	100004b0 	.word	0x100004b0

0810be50 <__sread>:
 810be50:	b510      	push	{r4, lr}
 810be52:	460c      	mov	r4, r1
 810be54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810be58:	f000 f93a 	bl	810c0d0 <_read_r>
 810be5c:	2800      	cmp	r0, #0
 810be5e:	bfab      	itete	ge
 810be60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810be62:	89a3      	ldrhlt	r3, [r4, #12]
 810be64:	181b      	addge	r3, r3, r0
 810be66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810be6a:	bfac      	ite	ge
 810be6c:	6563      	strge	r3, [r4, #84]	; 0x54
 810be6e:	81a3      	strhlt	r3, [r4, #12]
 810be70:	bd10      	pop	{r4, pc}

0810be72 <__swrite>:
 810be72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810be76:	461f      	mov	r7, r3
 810be78:	898b      	ldrh	r3, [r1, #12]
 810be7a:	05db      	lsls	r3, r3, #23
 810be7c:	4605      	mov	r5, r0
 810be7e:	460c      	mov	r4, r1
 810be80:	4616      	mov	r6, r2
 810be82:	d505      	bpl.n	810be90 <__swrite+0x1e>
 810be84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810be88:	2302      	movs	r3, #2
 810be8a:	2200      	movs	r2, #0
 810be8c:	f000 f8b8 	bl	810c000 <_lseek_r>
 810be90:	89a3      	ldrh	r3, [r4, #12]
 810be92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810be96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810be9a:	81a3      	strh	r3, [r4, #12]
 810be9c:	4632      	mov	r2, r6
 810be9e:	463b      	mov	r3, r7
 810bea0:	4628      	mov	r0, r5
 810bea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810bea6:	f000 b837 	b.w	810bf18 <_write_r>

0810beaa <__sseek>:
 810beaa:	b510      	push	{r4, lr}
 810beac:	460c      	mov	r4, r1
 810beae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810beb2:	f000 f8a5 	bl	810c000 <_lseek_r>
 810beb6:	1c43      	adds	r3, r0, #1
 810beb8:	89a3      	ldrh	r3, [r4, #12]
 810beba:	bf15      	itete	ne
 810bebc:	6560      	strne	r0, [r4, #84]	; 0x54
 810bebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810bec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810bec6:	81a3      	strheq	r3, [r4, #12]
 810bec8:	bf18      	it	ne
 810beca:	81a3      	strhne	r3, [r4, #12]
 810becc:	bd10      	pop	{r4, pc}

0810bece <__sclose>:
 810bece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bed2:	f000 b851 	b.w	810bf78 <_close_r>

0810bed6 <strncmp>:
 810bed6:	b510      	push	{r4, lr}
 810bed8:	b17a      	cbz	r2, 810befa <strncmp+0x24>
 810beda:	4603      	mov	r3, r0
 810bedc:	3901      	subs	r1, #1
 810bede:	1884      	adds	r4, r0, r2
 810bee0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810bee4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810bee8:	4290      	cmp	r0, r2
 810beea:	d101      	bne.n	810bef0 <strncmp+0x1a>
 810beec:	42a3      	cmp	r3, r4
 810beee:	d101      	bne.n	810bef4 <strncmp+0x1e>
 810bef0:	1a80      	subs	r0, r0, r2
 810bef2:	bd10      	pop	{r4, pc}
 810bef4:	2800      	cmp	r0, #0
 810bef6:	d1f3      	bne.n	810bee0 <strncmp+0xa>
 810bef8:	e7fa      	b.n	810bef0 <strncmp+0x1a>
 810befa:	4610      	mov	r0, r2
 810befc:	e7f9      	b.n	810bef2 <strncmp+0x1c>

0810befe <__ascii_wctomb>:
 810befe:	b149      	cbz	r1, 810bf14 <__ascii_wctomb+0x16>
 810bf00:	2aff      	cmp	r2, #255	; 0xff
 810bf02:	bf85      	ittet	hi
 810bf04:	238a      	movhi	r3, #138	; 0x8a
 810bf06:	6003      	strhi	r3, [r0, #0]
 810bf08:	700a      	strbls	r2, [r1, #0]
 810bf0a:	f04f 30ff 	movhi.w	r0, #4294967295
 810bf0e:	bf98      	it	ls
 810bf10:	2001      	movls	r0, #1
 810bf12:	4770      	bx	lr
 810bf14:	4608      	mov	r0, r1
 810bf16:	4770      	bx	lr

0810bf18 <_write_r>:
 810bf18:	b538      	push	{r3, r4, r5, lr}
 810bf1a:	4d07      	ldr	r5, [pc, #28]	; (810bf38 <_write_r+0x20>)
 810bf1c:	4604      	mov	r4, r0
 810bf1e:	4608      	mov	r0, r1
 810bf20:	4611      	mov	r1, r2
 810bf22:	2200      	movs	r2, #0
 810bf24:	602a      	str	r2, [r5, #0]
 810bf26:	461a      	mov	r2, r3
 810bf28:	f7f6 f83b 	bl	8101fa2 <_write>
 810bf2c:	1c43      	adds	r3, r0, #1
 810bf2e:	d102      	bne.n	810bf36 <_write_r+0x1e>
 810bf30:	682b      	ldr	r3, [r5, #0]
 810bf32:	b103      	cbz	r3, 810bf36 <_write_r+0x1e>
 810bf34:	6023      	str	r3, [r4, #0]
 810bf36:	bd38      	pop	{r3, r4, r5, pc}
 810bf38:	100004b0 	.word	0x100004b0

0810bf3c <__assert_func>:
 810bf3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810bf3e:	4614      	mov	r4, r2
 810bf40:	461a      	mov	r2, r3
 810bf42:	4b09      	ldr	r3, [pc, #36]	; (810bf68 <__assert_func+0x2c>)
 810bf44:	681b      	ldr	r3, [r3, #0]
 810bf46:	4605      	mov	r5, r0
 810bf48:	68d8      	ldr	r0, [r3, #12]
 810bf4a:	b14c      	cbz	r4, 810bf60 <__assert_func+0x24>
 810bf4c:	4b07      	ldr	r3, [pc, #28]	; (810bf6c <__assert_func+0x30>)
 810bf4e:	9100      	str	r1, [sp, #0]
 810bf50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810bf54:	4906      	ldr	r1, [pc, #24]	; (810bf70 <__assert_func+0x34>)
 810bf56:	462b      	mov	r3, r5
 810bf58:	f000 f81e 	bl	810bf98 <fiprintf>
 810bf5c:	f000 f8ca 	bl	810c0f4 <abort>
 810bf60:	4b04      	ldr	r3, [pc, #16]	; (810bf74 <__assert_func+0x38>)
 810bf62:	461c      	mov	r4, r3
 810bf64:	e7f3      	b.n	810bf4e <__assert_func+0x12>
 810bf66:	bf00      	nop
 810bf68:	10000010 	.word	0x10000010
 810bf6c:	0810c6b5 	.word	0x0810c6b5
 810bf70:	0810c6c2 	.word	0x0810c6c2
 810bf74:	0810c6f0 	.word	0x0810c6f0

0810bf78 <_close_r>:
 810bf78:	b538      	push	{r3, r4, r5, lr}
 810bf7a:	4d06      	ldr	r5, [pc, #24]	; (810bf94 <_close_r+0x1c>)
 810bf7c:	2300      	movs	r3, #0
 810bf7e:	4604      	mov	r4, r0
 810bf80:	4608      	mov	r0, r1
 810bf82:	602b      	str	r3, [r5, #0]
 810bf84:	f7f6 f829 	bl	8101fda <_close>
 810bf88:	1c43      	adds	r3, r0, #1
 810bf8a:	d102      	bne.n	810bf92 <_close_r+0x1a>
 810bf8c:	682b      	ldr	r3, [r5, #0]
 810bf8e:	b103      	cbz	r3, 810bf92 <_close_r+0x1a>
 810bf90:	6023      	str	r3, [r4, #0]
 810bf92:	bd38      	pop	{r3, r4, r5, pc}
 810bf94:	100004b0 	.word	0x100004b0

0810bf98 <fiprintf>:
 810bf98:	b40e      	push	{r1, r2, r3}
 810bf9a:	b503      	push	{r0, r1, lr}
 810bf9c:	4601      	mov	r1, r0
 810bf9e:	ab03      	add	r3, sp, #12
 810bfa0:	4805      	ldr	r0, [pc, #20]	; (810bfb8 <fiprintf+0x20>)
 810bfa2:	f853 2b04 	ldr.w	r2, [r3], #4
 810bfa6:	6800      	ldr	r0, [r0, #0]
 810bfa8:	9301      	str	r3, [sp, #4]
 810bfaa:	f7ff fe07 	bl	810bbbc <_vfiprintf_r>
 810bfae:	b002      	add	sp, #8
 810bfb0:	f85d eb04 	ldr.w	lr, [sp], #4
 810bfb4:	b003      	add	sp, #12
 810bfb6:	4770      	bx	lr
 810bfb8:	10000010 	.word	0x10000010

0810bfbc <_fstat_r>:
 810bfbc:	b538      	push	{r3, r4, r5, lr}
 810bfbe:	4d07      	ldr	r5, [pc, #28]	; (810bfdc <_fstat_r+0x20>)
 810bfc0:	2300      	movs	r3, #0
 810bfc2:	4604      	mov	r4, r0
 810bfc4:	4608      	mov	r0, r1
 810bfc6:	4611      	mov	r1, r2
 810bfc8:	602b      	str	r3, [r5, #0]
 810bfca:	f7f6 f812 	bl	8101ff2 <_fstat>
 810bfce:	1c43      	adds	r3, r0, #1
 810bfd0:	d102      	bne.n	810bfd8 <_fstat_r+0x1c>
 810bfd2:	682b      	ldr	r3, [r5, #0]
 810bfd4:	b103      	cbz	r3, 810bfd8 <_fstat_r+0x1c>
 810bfd6:	6023      	str	r3, [r4, #0]
 810bfd8:	bd38      	pop	{r3, r4, r5, pc}
 810bfda:	bf00      	nop
 810bfdc:	100004b0 	.word	0x100004b0

0810bfe0 <_isatty_r>:
 810bfe0:	b538      	push	{r3, r4, r5, lr}
 810bfe2:	4d06      	ldr	r5, [pc, #24]	; (810bffc <_isatty_r+0x1c>)
 810bfe4:	2300      	movs	r3, #0
 810bfe6:	4604      	mov	r4, r0
 810bfe8:	4608      	mov	r0, r1
 810bfea:	602b      	str	r3, [r5, #0]
 810bfec:	f7f6 f811 	bl	8102012 <_isatty>
 810bff0:	1c43      	adds	r3, r0, #1
 810bff2:	d102      	bne.n	810bffa <_isatty_r+0x1a>
 810bff4:	682b      	ldr	r3, [r5, #0]
 810bff6:	b103      	cbz	r3, 810bffa <_isatty_r+0x1a>
 810bff8:	6023      	str	r3, [r4, #0]
 810bffa:	bd38      	pop	{r3, r4, r5, pc}
 810bffc:	100004b0 	.word	0x100004b0

0810c000 <_lseek_r>:
 810c000:	b538      	push	{r3, r4, r5, lr}
 810c002:	4d07      	ldr	r5, [pc, #28]	; (810c020 <_lseek_r+0x20>)
 810c004:	4604      	mov	r4, r0
 810c006:	4608      	mov	r0, r1
 810c008:	4611      	mov	r1, r2
 810c00a:	2200      	movs	r2, #0
 810c00c:	602a      	str	r2, [r5, #0]
 810c00e:	461a      	mov	r2, r3
 810c010:	f7f6 f80a 	bl	8102028 <_lseek>
 810c014:	1c43      	adds	r3, r0, #1
 810c016:	d102      	bne.n	810c01e <_lseek_r+0x1e>
 810c018:	682b      	ldr	r3, [r5, #0]
 810c01a:	b103      	cbz	r3, 810c01e <_lseek_r+0x1e>
 810c01c:	6023      	str	r3, [r4, #0]
 810c01e:	bd38      	pop	{r3, r4, r5, pc}
 810c020:	100004b0 	.word	0x100004b0

0810c024 <memmove>:
 810c024:	4288      	cmp	r0, r1
 810c026:	b510      	push	{r4, lr}
 810c028:	eb01 0402 	add.w	r4, r1, r2
 810c02c:	d902      	bls.n	810c034 <memmove+0x10>
 810c02e:	4284      	cmp	r4, r0
 810c030:	4623      	mov	r3, r4
 810c032:	d807      	bhi.n	810c044 <memmove+0x20>
 810c034:	1e43      	subs	r3, r0, #1
 810c036:	42a1      	cmp	r1, r4
 810c038:	d008      	beq.n	810c04c <memmove+0x28>
 810c03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810c03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810c042:	e7f8      	b.n	810c036 <memmove+0x12>
 810c044:	4402      	add	r2, r0
 810c046:	4601      	mov	r1, r0
 810c048:	428a      	cmp	r2, r1
 810c04a:	d100      	bne.n	810c04e <memmove+0x2a>
 810c04c:	bd10      	pop	{r4, pc}
 810c04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810c052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810c056:	e7f7      	b.n	810c048 <memmove+0x24>

0810c058 <__malloc_lock>:
 810c058:	4801      	ldr	r0, [pc, #4]	; (810c060 <__malloc_lock+0x8>)
 810c05a:	f7fe bde2 	b.w	810ac22 <__retarget_lock_acquire_recursive>
 810c05e:	bf00      	nop
 810c060:	100004a4 	.word	0x100004a4

0810c064 <__malloc_unlock>:
 810c064:	4801      	ldr	r0, [pc, #4]	; (810c06c <__malloc_unlock+0x8>)
 810c066:	f7fe bddd 	b.w	810ac24 <__retarget_lock_release_recursive>
 810c06a:	bf00      	nop
 810c06c:	100004a4 	.word	0x100004a4

0810c070 <_realloc_r>:
 810c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c074:	4680      	mov	r8, r0
 810c076:	4614      	mov	r4, r2
 810c078:	460e      	mov	r6, r1
 810c07a:	b921      	cbnz	r1, 810c086 <_realloc_r+0x16>
 810c07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810c080:	4611      	mov	r1, r2
 810c082:	f7ff bba1 	b.w	810b7c8 <_malloc_r>
 810c086:	b92a      	cbnz	r2, 810c094 <_realloc_r+0x24>
 810c088:	f7ff fb32 	bl	810b6f0 <_free_r>
 810c08c:	4625      	mov	r5, r4
 810c08e:	4628      	mov	r0, r5
 810c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c094:	f000 f835 	bl	810c102 <_malloc_usable_size_r>
 810c098:	4284      	cmp	r4, r0
 810c09a:	4607      	mov	r7, r0
 810c09c:	d802      	bhi.n	810c0a4 <_realloc_r+0x34>
 810c09e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810c0a2:	d812      	bhi.n	810c0ca <_realloc_r+0x5a>
 810c0a4:	4621      	mov	r1, r4
 810c0a6:	4640      	mov	r0, r8
 810c0a8:	f7ff fb8e 	bl	810b7c8 <_malloc_r>
 810c0ac:	4605      	mov	r5, r0
 810c0ae:	2800      	cmp	r0, #0
 810c0b0:	d0ed      	beq.n	810c08e <_realloc_r+0x1e>
 810c0b2:	42bc      	cmp	r4, r7
 810c0b4:	4622      	mov	r2, r4
 810c0b6:	4631      	mov	r1, r6
 810c0b8:	bf28      	it	cs
 810c0ba:	463a      	movcs	r2, r7
 810c0bc:	f7fe fe32 	bl	810ad24 <memcpy>
 810c0c0:	4631      	mov	r1, r6
 810c0c2:	4640      	mov	r0, r8
 810c0c4:	f7ff fb14 	bl	810b6f0 <_free_r>
 810c0c8:	e7e1      	b.n	810c08e <_realloc_r+0x1e>
 810c0ca:	4635      	mov	r5, r6
 810c0cc:	e7df      	b.n	810c08e <_realloc_r+0x1e>
	...

0810c0d0 <_read_r>:
 810c0d0:	b538      	push	{r3, r4, r5, lr}
 810c0d2:	4d07      	ldr	r5, [pc, #28]	; (810c0f0 <_read_r+0x20>)
 810c0d4:	4604      	mov	r4, r0
 810c0d6:	4608      	mov	r0, r1
 810c0d8:	4611      	mov	r1, r2
 810c0da:	2200      	movs	r2, #0
 810c0dc:	602a      	str	r2, [r5, #0]
 810c0de:	461a      	mov	r2, r3
 810c0e0:	f7f5 ff42 	bl	8101f68 <_read>
 810c0e4:	1c43      	adds	r3, r0, #1
 810c0e6:	d102      	bne.n	810c0ee <_read_r+0x1e>
 810c0e8:	682b      	ldr	r3, [r5, #0]
 810c0ea:	b103      	cbz	r3, 810c0ee <_read_r+0x1e>
 810c0ec:	6023      	str	r3, [r4, #0]
 810c0ee:	bd38      	pop	{r3, r4, r5, pc}
 810c0f0:	100004b0 	.word	0x100004b0

0810c0f4 <abort>:
 810c0f4:	b508      	push	{r3, lr}
 810c0f6:	2006      	movs	r0, #6
 810c0f8:	f000 f834 	bl	810c164 <raise>
 810c0fc:	2001      	movs	r0, #1
 810c0fe:	f7f5 ff29 	bl	8101f54 <_exit>

0810c102 <_malloc_usable_size_r>:
 810c102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c106:	1f18      	subs	r0, r3, #4
 810c108:	2b00      	cmp	r3, #0
 810c10a:	bfbc      	itt	lt
 810c10c:	580b      	ldrlt	r3, [r1, r0]
 810c10e:	18c0      	addlt	r0, r0, r3
 810c110:	4770      	bx	lr

0810c112 <_raise_r>:
 810c112:	291f      	cmp	r1, #31
 810c114:	b538      	push	{r3, r4, r5, lr}
 810c116:	4604      	mov	r4, r0
 810c118:	460d      	mov	r5, r1
 810c11a:	d904      	bls.n	810c126 <_raise_r+0x14>
 810c11c:	2316      	movs	r3, #22
 810c11e:	6003      	str	r3, [r0, #0]
 810c120:	f04f 30ff 	mov.w	r0, #4294967295
 810c124:	bd38      	pop	{r3, r4, r5, pc}
 810c126:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810c128:	b112      	cbz	r2, 810c130 <_raise_r+0x1e>
 810c12a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810c12e:	b94b      	cbnz	r3, 810c144 <_raise_r+0x32>
 810c130:	4620      	mov	r0, r4
 810c132:	f000 f831 	bl	810c198 <_getpid_r>
 810c136:	462a      	mov	r2, r5
 810c138:	4601      	mov	r1, r0
 810c13a:	4620      	mov	r0, r4
 810c13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810c140:	f000 b818 	b.w	810c174 <_kill_r>
 810c144:	2b01      	cmp	r3, #1
 810c146:	d00a      	beq.n	810c15e <_raise_r+0x4c>
 810c148:	1c59      	adds	r1, r3, #1
 810c14a:	d103      	bne.n	810c154 <_raise_r+0x42>
 810c14c:	2316      	movs	r3, #22
 810c14e:	6003      	str	r3, [r0, #0]
 810c150:	2001      	movs	r0, #1
 810c152:	e7e7      	b.n	810c124 <_raise_r+0x12>
 810c154:	2400      	movs	r4, #0
 810c156:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810c15a:	4628      	mov	r0, r5
 810c15c:	4798      	blx	r3
 810c15e:	2000      	movs	r0, #0
 810c160:	e7e0      	b.n	810c124 <_raise_r+0x12>
	...

0810c164 <raise>:
 810c164:	4b02      	ldr	r3, [pc, #8]	; (810c170 <raise+0xc>)
 810c166:	4601      	mov	r1, r0
 810c168:	6818      	ldr	r0, [r3, #0]
 810c16a:	f7ff bfd2 	b.w	810c112 <_raise_r>
 810c16e:	bf00      	nop
 810c170:	10000010 	.word	0x10000010

0810c174 <_kill_r>:
 810c174:	b538      	push	{r3, r4, r5, lr}
 810c176:	4d07      	ldr	r5, [pc, #28]	; (810c194 <_kill_r+0x20>)
 810c178:	2300      	movs	r3, #0
 810c17a:	4604      	mov	r4, r0
 810c17c:	4608      	mov	r0, r1
 810c17e:	4611      	mov	r1, r2
 810c180:	602b      	str	r3, [r5, #0]
 810c182:	f7f5 fed7 	bl	8101f34 <_kill>
 810c186:	1c43      	adds	r3, r0, #1
 810c188:	d102      	bne.n	810c190 <_kill_r+0x1c>
 810c18a:	682b      	ldr	r3, [r5, #0]
 810c18c:	b103      	cbz	r3, 810c190 <_kill_r+0x1c>
 810c18e:	6023      	str	r3, [r4, #0]
 810c190:	bd38      	pop	{r3, r4, r5, pc}
 810c192:	bf00      	nop
 810c194:	100004b0 	.word	0x100004b0

0810c198 <_getpid_r>:
 810c198:	f7f5 bec4 	b.w	8101f24 <_getpid>

0810c19c <_init>:
 810c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c19e:	bf00      	nop
 810c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c1a2:	bc08      	pop	{r3}
 810c1a4:	469e      	mov	lr, r3
 810c1a6:	4770      	bx	lr

0810c1a8 <_fini>:
 810c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c1aa:	bf00      	nop
 810c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c1ae:	bc08      	pop	{r3}
 810c1b0:	469e      	mov	lr, r3
 810c1b2:	4770      	bx	lr
