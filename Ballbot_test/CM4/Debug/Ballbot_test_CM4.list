
Ballbot_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ac  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0810c550  0810c550  0001c550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810cb0c  0810cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810cb14  0810cb14  0001cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810cb18  0810cb18  0001cb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  10000000  0810cb1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000025c  100001f0  0810cd0c  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000044c  0810cd0c  0002044c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b611  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c9d  00000000  00000000  0003b831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  0003e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001398  00000000  00000000  0003f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bf78  00000000  00000000  00040d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a945  00000000  00000000  0007cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018b883  00000000  00000000  000975d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00222e58  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ed4  00000000  00000000  00222ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f0 	.word	0x100001f0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810c534 	.word	0x0810c534

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f4 	.word	0x100001f4
 81002dc:	0810c534 	.word	0x0810c534

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <IMU_MPU6050_Init>:
//65.5 LSB/°/s for ± 500 °/s
float Acc_LSB_Sensitivity = 8192.0;
float Gyro_LSB_Sensitivity = 65.5;


int8_t IMU_MPU6050_Init (void){
 8101138:	b580      	push	{r7, lr}
 810113a:	b086      	sub	sp, #24
 810113c:	af04      	add	r7, sp, #16
	uint8_t Data;
	HAL_StatusTypeDef ret;

	//Double check I2C communication
	ret = HAL_I2C_IsDeviceReady (&hi2c1,MPU6050_ADDR, 2, 1000); //2 trials, 1000ms each
 810113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101142:	2202      	movs	r2, #2
 8101144:	21d0      	movs	r1, #208	; 0xd0
 8101146:	485f      	ldr	r0, [pc, #380]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101148:	f001 fffc 	bl	8103144 <HAL_I2C_IsDeviceReady>
 810114c:	4603      	mov	r3, r0
 810114e:	71fb      	strb	r3, [r7, #7]
	if(ret!=HAL_OK){
 8101150:	79fb      	ldrb	r3, [r7, #7]
 8101152:	2b00      	cmp	r3, #0
 8101154:	d002      	beq.n	810115c <IMU_MPU6050_Init+0x24>
		return -1;
 8101156:	f04f 33ff 	mov.w	r3, #4294967295
 810115a:	e0af      	b.n	81012bc <IMU_MPU6050_Init+0x184>
	}
	uint8_t check;
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 810115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101160:	9302      	str	r3, [sp, #8]
 8101162:	2301      	movs	r3, #1
 8101164:	9301      	str	r3, [sp, #4]
 8101166:	1d7b      	adds	r3, r7, #5
 8101168:	9300      	str	r3, [sp, #0]
 810116a:	2301      	movs	r3, #1
 810116c:	2275      	movs	r2, #117	; 0x75
 810116e:	21d0      	movs	r1, #208	; 0xd0
 8101170:	4854      	ldr	r0, [pc, #336]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101172:	f001 fecd 	bl	8102f10 <HAL_I2C_Mem_Read>
 8101176:	4603      	mov	r3, r0
 8101178:	71fb      	strb	r3, [r7, #7]
	if((ret!=HAL_OK) || (check!=0x68)){
 810117a:	79fb      	ldrb	r3, [r7, #7]
 810117c:	2b00      	cmp	r3, #0
 810117e:	d102      	bne.n	8101186 <IMU_MPU6050_Init+0x4e>
 8101180:	797b      	ldrb	r3, [r7, #5]
 8101182:	2b68      	cmp	r3, #104	; 0x68
 8101184:	d002      	beq.n	810118c <IMU_MPU6050_Init+0x54>
		return -1;
 8101186:	f04f 33ff 	mov.w	r3, #4294967295
 810118a:	e097      	b.n	81012bc <IMU_MPU6050_Init+0x184>

	//Initialize

	//Power Management 1 register
	//sensor's normal operation
	Data = 0;
 810118c:	2300      	movs	r3, #0
 810118e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8101190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101194:	9302      	str	r3, [sp, #8]
 8101196:	2301      	movs	r3, #1
 8101198:	9301      	str	r3, [sp, #4]
 810119a:	1dbb      	adds	r3, r7, #6
 810119c:	9300      	str	r3, [sp, #0]
 810119e:	2301      	movs	r3, #1
 81011a0:	226b      	movs	r2, #107	; 0x6b
 81011a2:	21d0      	movs	r1, #208	; 0xd0
 81011a4:	4847      	ldr	r0, [pc, #284]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011a6:	f001 fd9f 	bl	8102ce8 <HAL_I2C_Mem_Write>
 81011aa:	4603      	mov	r3, r0
 81011ac:	71fb      	strb	r3, [r7, #7]

	//Accelerometer Configuration register
	//set accelerometer's full scale range to ± 4g (AFS_SEL=1)
	//no self-test
	Data = 0x08;
 81011ae:	2308      	movs	r3, #8
 81011b0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 81011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011b6:	9302      	str	r3, [sp, #8]
 81011b8:	2301      	movs	r3, #1
 81011ba:	9301      	str	r3, [sp, #4]
 81011bc:	1dbb      	adds	r3, r7, #6
 81011be:	9300      	str	r3, [sp, #0]
 81011c0:	2301      	movs	r3, #1
 81011c2:	221c      	movs	r2, #28
 81011c4:	21d0      	movs	r1, #208	; 0xd0
 81011c6:	483f      	ldr	r0, [pc, #252]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011c8:	f001 fd8e 	bl	8102ce8 <HAL_I2C_Mem_Write>
 81011cc:	4603      	mov	r3, r0
 81011ce:	71fb      	strb	r3, [r7, #7]

	//Gyroscope Configuration register
	//set gyroscope's full scale range to ± 500 °/s (FS_SEL=1)
	//no self-test
	Data = 0x08;
 81011d0:	2308      	movs	r3, #8
 81011d2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 81011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011d8:	9302      	str	r3, [sp, #8]
 81011da:	2301      	movs	r3, #1
 81011dc:	9301      	str	r3, [sp, #4]
 81011de:	1dbb      	adds	r3, r7, #6
 81011e0:	9300      	str	r3, [sp, #0]
 81011e2:	2301      	movs	r3, #1
 81011e4:	221b      	movs	r2, #27
 81011e6:	21d0      	movs	r1, #208	; 0xd0
 81011e8:	4836      	ldr	r0, [pc, #216]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011ea:	f001 fd7d 	bl	8102ce8 <HAL_I2C_Mem_Write>
	//enable Digital Low Pass Filter(DLPF) with the highest bandwidth (DLPF_CFG=1):
	//Acc: 184Hz bandwidth, 2.0ms delay
	//Gyro: 188Hz bandwidth, 1.9ms delay
	//Note with DLPF gyroscope frequency reduces to 1kHz
	//Note acc max frequency is 1KHz
	Data = 0x01;
 81011ee:	2301      	movs	r3, #1
 81011f0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 81011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011f6:	9302      	str	r3, [sp, #8]
 81011f8:	2301      	movs	r3, #1
 81011fa:	9301      	str	r3, [sp, #4]
 81011fc:	1dbb      	adds	r3, r7, #6
 81011fe:	9300      	str	r3, [sp, #0]
 8101200:	2301      	movs	r3, #1
 8101202:	221a      	movs	r2, #26
 8101204:	21d0      	movs	r1, #208	; 0xd0
 8101206:	482f      	ldr	r0, [pc, #188]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101208:	f001 fd6e 	bl	8102ce8 <HAL_I2C_Mem_Write>
 810120c:	4603      	mov	r3, r0
 810120e:	71fb      	strb	r3, [r7, #7]

	//Sample Rate Divider register
	//Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
	//set sample rate to 20Hz, 50ms (SMPLRT_DIV=49)
	Data = 0x31;
 8101210:	2331      	movs	r3, #49	; 0x31
 8101212:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8101214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101218:	9302      	str	r3, [sp, #8]
 810121a:	2301      	movs	r3, #1
 810121c:	9301      	str	r3, [sp, #4]
 810121e:	1dbb      	adds	r3, r7, #6
 8101220:	9300      	str	r3, [sp, #0]
 8101222:	2301      	movs	r3, #1
 8101224:	2219      	movs	r2, #25
 8101226:	21d0      	movs	r1, #208	; 0xd0
 8101228:	4826      	ldr	r0, [pc, #152]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810122a:	f001 fd5d 	bl	8102ce8 <HAL_I2C_Mem_Write>
 810122e:	4603      	mov	r3, r0
 8101230:	71fb      	strb	r3, [r7, #7]

	//User Control register
	//enable FIFO buffer
	Data = 0x40;
 8101232:	2340      	movs	r3, #64	; 0x40
 8101234:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810123a:	9302      	str	r3, [sp, #8]
 810123c:	2301      	movs	r3, #1
 810123e:	9301      	str	r3, [sp, #4]
 8101240:	1dbb      	adds	r3, r7, #6
 8101242:	9300      	str	r3, [sp, #0]
 8101244:	2301      	movs	r3, #1
 8101246:	226a      	movs	r2, #106	; 0x6a
 8101248:	21d0      	movs	r1, #208	; 0xd0
 810124a:	481e      	ldr	r0, [pc, #120]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810124c:	f001 fd4c 	bl	8102ce8 <HAL_I2C_Mem_Write>
 8101250:	4603      	mov	r3, r0
 8101252:	71fb      	strb	r3, [r7, #7]

	//FIFO Enable register
	//select accelerometer's and gyroscope's data for FIFO buffer
	Data = 0x78;
 8101254:	2378      	movs	r3, #120	; 0x78
 8101256:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8101258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810125c:	9302      	str	r3, [sp, #8]
 810125e:	2301      	movs	r3, #1
 8101260:	9301      	str	r3, [sp, #4]
 8101262:	1dbb      	adds	r3, r7, #6
 8101264:	9300      	str	r3, [sp, #0]
 8101266:	2301      	movs	r3, #1
 8101268:	2223      	movs	r2, #35	; 0x23
 810126a:	21d0      	movs	r1, #208	; 0xd0
 810126c:	4815      	ldr	r0, [pc, #84]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810126e:	f001 fd3b 	bl	8102ce8 <HAL_I2C_Mem_Write>
 8101272:	4603      	mov	r3, r0
 8101274:	71fb      	strb	r3, [r7, #7]

	//INT Pin / Bypass Enable Configuration register
	//configure interrupt signal (default)
	Data = 0x00;
 8101276:	2300      	movs	r3, #0
 8101278:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 810127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810127e:	9302      	str	r3, [sp, #8]
 8101280:	2301      	movs	r3, #1
 8101282:	9301      	str	r3, [sp, #4]
 8101284:	1dbb      	adds	r3, r7, #6
 8101286:	9300      	str	r3, [sp, #0]
 8101288:	2301      	movs	r3, #1
 810128a:	2237      	movs	r2, #55	; 0x37
 810128c:	21d0      	movs	r1, #208	; 0xd0
 810128e:	480d      	ldr	r0, [pc, #52]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101290:	f001 fd2a 	bl	8102ce8 <HAL_I2C_Mem_Write>
 8101294:	4603      	mov	r3, r0
 8101296:	71fb      	strb	r3, [r7, #7]

	//Interrupt Enable register
	//enable Data Ready interrupt (DATA_RDY_EN=1)
	//(write operation to all of the sensor registers has been completed)
	Data = 0x01;
 8101298:	2301      	movs	r3, #1
 810129a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, 1000);
 810129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012a0:	9302      	str	r3, [sp, #8]
 81012a2:	2301      	movs	r3, #1
 81012a4:	9301      	str	r3, [sp, #4]
 81012a6:	1dbb      	adds	r3, r7, #6
 81012a8:	9300      	str	r3, [sp, #0]
 81012aa:	2301      	movs	r3, #1
 81012ac:	2238      	movs	r2, #56	; 0x38
 81012ae:	21d0      	movs	r1, #208	; 0xd0
 81012b0:	4804      	ldr	r0, [pc, #16]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81012b2:	f001 fd19 	bl	8102ce8 <HAL_I2C_Mem_Write>
 81012b6:	4603      	mov	r3, r0
 81012b8:	71fb      	strb	r3, [r7, #7]

	return 0;
 81012ba:	2300      	movs	r3, #0
}
 81012bc:	4618      	mov	r0, r3
 81012be:	3708      	adds	r7, #8
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	1000020c 	.word	0x1000020c

081012c8 <IMU_MPU6050_Read_Acc_Gyro>:

void IMU_MPU6050_Read_Acc_Gyro(MPU6050_Data* y){
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b08c      	sub	sp, #48	; 0x30
 81012cc:	af04      	add	r7, sp, #16
 81012ce:	6078      	str	r0, [r7, #4]
	uint8_t Data[12]; //3acc,3vel, 2byte each

	uint16_t counts = Read_FIFO_Count();
 81012d0:	f000 f906 	bl	81014e0 <Read_FIFO_Count>
 81012d4:	4603      	mov	r3, r0
 81012d6:	83fb      	strh	r3, [r7, #30]
	printf("counts %d\r\n",counts);
 81012d8:	8bfb      	ldrh	r3, [r7, #30]
 81012da:	4619      	mov	r1, r3
 81012dc:	4872      	ldr	r0, [pc, #456]	; (81014a8 <IMU_MPU6050_Read_Acc_Gyro+0x1e0>)
 81012de:	f007 faa7 	bl	8108830 <iprintf>
	int16_t app = 0;
 81012e2:	2300      	movs	r3, #0
 81012e4:	83bb      	strh	r3, [r7, #28]

	if(counts>=12){
 81012e6:	8bfb      	ldrh	r3, [r7, #30]
 81012e8:	2b0b      	cmp	r3, #11
 81012ea:	f240 80d8 	bls.w	810149e <IMU_MPU6050_Read_Acc_Gyro+0x1d6>
		//Read 3acc, 3vel from FIFO buffer
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_R_W_REG, 1, Data, 12, 1000);
 81012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012f2:	9302      	str	r3, [sp, #8]
 81012f4:	230c      	movs	r3, #12
 81012f6:	9301      	str	r3, [sp, #4]
 81012f8:	f107 030c 	add.w	r3, r7, #12
 81012fc:	9300      	str	r3, [sp, #0]
 81012fe:	2301      	movs	r3, #1
 8101300:	2274      	movs	r2, #116	; 0x74
 8101302:	21d0      	movs	r1, #208	; 0xd0
 8101304:	4869      	ldr	r0, [pc, #420]	; (81014ac <IMU_MPU6050_Read_Acc_Gyro+0x1e4>)
 8101306:	f001 fe03 	bl	8102f10 <HAL_I2C_Mem_Read>
 810130a:	4603      	mov	r3, r0
 810130c:	76fb      	strb	r3, [r7, #27]
		if(ret==HAL_OK){
 810130e:	7efb      	ldrb	r3, [r7, #27]
 8101310:	2b00      	cmp	r3, #0
 8101312:	f040 80a0 	bne.w	8101456 <IMU_MPU6050_Read_Acc_Gyro+0x18e>
			//Store acquisitions in MPU6050_Data
			app = (int16_t) Data[0] << 8 | (int16_t) Data[1];
 8101316:	7b3b      	ldrb	r3, [r7, #12]
 8101318:	021b      	lsls	r3, r3, #8
 810131a:	b21a      	sxth	r2, r3
 810131c:	7b7b      	ldrb	r3, [r7, #13]
 810131e:	b21b      	sxth	r3, r3
 8101320:	4313      	orrs	r3, r2
 8101322:	83bb      	strh	r3, [r7, #28]
			printf("App Ax: %d, ",app);
 8101324:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101328:	4619      	mov	r1, r3
 810132a:	4861      	ldr	r0, [pc, #388]	; (81014b0 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 810132c:	f007 fa80 	bl	8108830 <iprintf>
			y->Ax_raw = (app / Acc_LSB_Sensitivity) * g;
 8101330:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101334:	ee07 3a90 	vmov	s15, r3
 8101338:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810133c:	4b5d      	ldr	r3, [pc, #372]	; (81014b4 <IMU_MPU6050_Read_Acc_Gyro+0x1ec>)
 810133e:	edd3 7a00 	vldr	s15, [r3]
 8101342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101346:	4b5c      	ldr	r3, [pc, #368]	; (81014b8 <IMU_MPU6050_Read_Acc_Gyro+0x1f0>)
 8101348:	edd3 7a00 	vldr	s15, [r3]
 810134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	edc3 7a00 	vstr	s15, [r3]
			app = (int16_t) Data[2] << 8 | (int16_t) Data[3];
 8101356:	7bbb      	ldrb	r3, [r7, #14]
 8101358:	021b      	lsls	r3, r3, #8
 810135a:	b21a      	sxth	r2, r3
 810135c:	7bfb      	ldrb	r3, [r7, #15]
 810135e:	b21b      	sxth	r3, r3
 8101360:	4313      	orrs	r3, r2
 8101362:	83bb      	strh	r3, [r7, #28]
			printf("Ay: %d, ",app);
 8101364:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101368:	4619      	mov	r1, r3
 810136a:	4854      	ldr	r0, [pc, #336]	; (81014bc <IMU_MPU6050_Read_Acc_Gyro+0x1f4>)
 810136c:	f007 fa60 	bl	8108830 <iprintf>
			y->Ay_raw = (app / Acc_LSB_Sensitivity) * g;
 8101370:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101374:	ee07 3a90 	vmov	s15, r3
 8101378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810137c:	4b4d      	ldr	r3, [pc, #308]	; (81014b4 <IMU_MPU6050_Read_Acc_Gyro+0x1ec>)
 810137e:	edd3 7a00 	vldr	s15, [r3]
 8101382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101386:	4b4c      	ldr	r3, [pc, #304]	; (81014b8 <IMU_MPU6050_Read_Acc_Gyro+0x1f0>)
 8101388:	edd3 7a00 	vldr	s15, [r3]
 810138c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	edc3 7a01 	vstr	s15, [r3, #4]
			app = (int16_t) Data[4] << 8 | (int16_t) Data[5];
 8101396:	7c3b      	ldrb	r3, [r7, #16]
 8101398:	021b      	lsls	r3, r3, #8
 810139a:	b21a      	sxth	r2, r3
 810139c:	7c7b      	ldrb	r3, [r7, #17]
 810139e:	b21b      	sxth	r3, r3
 81013a0:	4313      	orrs	r3, r2
 81013a2:	83bb      	strh	r3, [r7, #28]
			printf("Az: %d \r\n",app);
 81013a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013a8:	4619      	mov	r1, r3
 81013aa:	4845      	ldr	r0, [pc, #276]	; (81014c0 <IMU_MPU6050_Read_Acc_Gyro+0x1f8>)
 81013ac:	f007 fa40 	bl	8108830 <iprintf>
			y->Az_raw = (app / Acc_LSB_Sensitivity) * g;
 81013b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013b4:	ee07 3a90 	vmov	s15, r3
 81013b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013bc:	4b3d      	ldr	r3, [pc, #244]	; (81014b4 <IMU_MPU6050_Read_Acc_Gyro+0x1ec>)
 81013be:	edd3 7a00 	vldr	s15, [r3]
 81013c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013c6:	4b3c      	ldr	r3, [pc, #240]	; (81014b8 <IMU_MPU6050_Read_Acc_Gyro+0x1f0>)
 81013c8:	edd3 7a00 	vldr	s15, [r3]
 81013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	edc3 7a02 	vstr	s15, [r3, #8]

			app = (int16_t) Data[6] << 8 | (int16_t) Data[7];
 81013d6:	7cbb      	ldrb	r3, [r7, #18]
 81013d8:	021b      	lsls	r3, r3, #8
 81013da:	b21a      	sxth	r2, r3
 81013dc:	7cfb      	ldrb	r3, [r7, #19]
 81013de:	b21b      	sxth	r3, r3
 81013e0:	4313      	orrs	r3, r2
 81013e2:	83bb      	strh	r3, [r7, #28]
			y->Wx_raw = app / Gyro_LSB_Sensitivity;
 81013e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013e8:	ee07 3a90 	vmov	s15, r3
 81013ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013f0:	4b34      	ldr	r3, [pc, #208]	; (81014c4 <IMU_MPU6050_Read_Acc_Gyro+0x1fc>)
 81013f2:	ed93 7a00 	vldr	s14, [r3]
 81013f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013fa:	687b      	ldr	r3, [r7, #4]
 81013fc:	edc3 7a03 	vstr	s15, [r3, #12]
			app = (int16_t) Data[8] << 8 | (int16_t) Data[9];
 8101400:	7d3b      	ldrb	r3, [r7, #20]
 8101402:	021b      	lsls	r3, r3, #8
 8101404:	b21a      	sxth	r2, r3
 8101406:	7d7b      	ldrb	r3, [r7, #21]
 8101408:	b21b      	sxth	r3, r3
 810140a:	4313      	orrs	r3, r2
 810140c:	83bb      	strh	r3, [r7, #28]
			y->Wy_raw = app / Gyro_LSB_Sensitivity;
 810140e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101412:	ee07 3a90 	vmov	s15, r3
 8101416:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810141a:	4b2a      	ldr	r3, [pc, #168]	; (81014c4 <IMU_MPU6050_Read_Acc_Gyro+0x1fc>)
 810141c:	ed93 7a00 	vldr	s14, [r3]
 8101420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101424:	687b      	ldr	r3, [r7, #4]
 8101426:	edc3 7a04 	vstr	s15, [r3, #16]
			app = (int16_t) Data[10] << 8 | (int16_t) Data[11];
 810142a:	7dbb      	ldrb	r3, [r7, #22]
 810142c:	021b      	lsls	r3, r3, #8
 810142e:	b21a      	sxth	r2, r3
 8101430:	7dfb      	ldrb	r3, [r7, #23]
 8101432:	b21b      	sxth	r3, r3
 8101434:	4313      	orrs	r3, r2
 8101436:	83bb      	strh	r3, [r7, #28]
			y->Wz_raw = app / Gyro_LSB_Sensitivity;
 8101438:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 810143c:	ee07 3a90 	vmov	s15, r3
 8101440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101444:	4b1f      	ldr	r3, [pc, #124]	; (81014c4 <IMU_MPU6050_Read_Acc_Gyro+0x1fc>)
 8101446:	ed93 7a00 	vldr	s14, [r3]
 810144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810144e:	687b      	ldr	r3, [r7, #4]
 8101450:	edc3 7a05 	vstr	s15, [r3, #20]
 8101454:	e018      	b.n	8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1c0>
		} else {
			printf("Error I2C\r\n");
 8101456:	481c      	ldr	r0, [pc, #112]	; (81014c8 <IMU_MPU6050_Read_Acc_Gyro+0x200>)
 8101458:	f007 fa70 	bl	810893c <puts>
			switch(ret){
 810145c:	7efb      	ldrb	r3, [r7, #27]
 810145e:	2b03      	cmp	r3, #3
 8101460:	d00e      	beq.n	8101480 <IMU_MPU6050_Read_Acc_Gyro+0x1b8>
 8101462:	2b03      	cmp	r3, #3
 8101464:	dc10      	bgt.n	8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1c0>
 8101466:	2b01      	cmp	r3, #1
 8101468:	d002      	beq.n	8101470 <IMU_MPU6050_Read_Acc_Gyro+0x1a8>
 810146a:	2b02      	cmp	r3, #2
 810146c:	d004      	beq.n	8101478 <IMU_MPU6050_Read_Acc_Gyro+0x1b0>
 810146e:	e00b      	b.n	8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1c0>
			case HAL_ERROR: printf("HAL_ERROR\r\n");break;
 8101470:	4816      	ldr	r0, [pc, #88]	; (81014cc <IMU_MPU6050_Read_Acc_Gyro+0x204>)
 8101472:	f007 fa63 	bl	810893c <puts>
 8101476:	e007      	b.n	8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1c0>
			case HAL_BUSY: printf("HAL_BUSY\r\n");break;
 8101478:	4815      	ldr	r0, [pc, #84]	; (81014d0 <IMU_MPU6050_Read_Acc_Gyro+0x208>)
 810147a:	f007 fa5f 	bl	810893c <puts>
 810147e:	e003      	b.n	8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1c0>
			case HAL_TIMEOUT: printf("HAL_TIMEOUT\r\n");break;
 8101480:	4814      	ldr	r0, [pc, #80]	; (81014d4 <IMU_MPU6050_Read_Acc_Gyro+0x20c>)
 8101482:	f007 fa5b 	bl	810893c <puts>
 8101486:	bf00      	nop
			}
		}
		if(counts>12){
 8101488:	8bfb      	ldrh	r3, [r7, #30]
 810148a:	2b0c      	cmp	r3, #12
 810148c:	d907      	bls.n	810149e <IMU_MPU6050_Read_Acc_Gyro+0x1d6>
			printf("Delay\r\n");
 810148e:	4812      	ldr	r0, [pc, #72]	; (81014d8 <IMU_MPU6050_Read_Acc_Gyro+0x210>)
 8101490:	f007 fa54 	bl	810893c <puts>
			printf("Reset FIFO buffer\r\n");
 8101494:	4811      	ldr	r0, [pc, #68]	; (81014dc <IMU_MPU6050_Read_Acc_Gyro+0x214>)
 8101496:	f007 fa51 	bl	810893c <puts>
			Reset_Reable_FIFO();
 810149a:	f000 f855 	bl	8101548 <Reset_Reable_FIFO>
		}
	}
}
 810149e:	bf00      	nop
 81014a0:	3720      	adds	r7, #32
 81014a2:	46bd      	mov	sp, r7
 81014a4:	bd80      	pop	{r7, pc}
 81014a6:	bf00      	nop
 81014a8:	0810c550 	.word	0x0810c550
 81014ac:	1000020c 	.word	0x1000020c
 81014b0:	0810c55c 	.word	0x0810c55c
 81014b4:	1000000c 	.word	0x1000000c
 81014b8:	10000008 	.word	0x10000008
 81014bc:	0810c56c 	.word	0x0810c56c
 81014c0:	0810c578 	.word	0x0810c578
 81014c4:	10000010 	.word	0x10000010
 81014c8:	0810c584 	.word	0x0810c584
 81014cc:	0810c590 	.word	0x0810c590
 81014d0:	0810c59c 	.word	0x0810c59c
 81014d4:	0810c5a8 	.word	0x0810c5a8
 81014d8:	0810c5b8 	.word	0x0810c5b8
 81014dc:	0810c5c0 	.word	0x0810c5c0

081014e0 <Read_FIFO_Count>:


//Read FIFO Count register
//Output : FIFO Count value (n byte)
uint16_t Read_FIFO_Count(){
 81014e0:	b580      	push	{r7, lr}
 81014e2:	b086      	sub	sp, #24
 81014e4:	af04      	add	r7, sp, #16

	HAL_StatusTypeDef ret;
	uint16_t fifo_count = 0;
 81014e6:	2300      	movs	r3, #0
 81014e8:	80fb      	strh	r3, [r7, #6]
	uint8_t Rec_Data[2];

	//Read FIFO_COUNT_H
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_H_REG, 1, Rec_Data, 1, 1000);
 81014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81014ee:	9302      	str	r3, [sp, #8]
 81014f0:	2301      	movs	r3, #1
 81014f2:	9301      	str	r3, [sp, #4]
 81014f4:	463b      	mov	r3, r7
 81014f6:	9300      	str	r3, [sp, #0]
 81014f8:	2301      	movs	r3, #1
 81014fa:	2272      	movs	r2, #114	; 0x72
 81014fc:	21d0      	movs	r1, #208	; 0xd0
 81014fe:	4811      	ldr	r0, [pc, #68]	; (8101544 <Read_FIFO_Count+0x64>)
 8101500:	f001 fd06 	bl	8102f10 <HAL_I2C_Mem_Read>
 8101504:	4603      	mov	r3, r0
 8101506:	717b      	strb	r3, [r7, #5]

	//Read FIFO_COUNT_L
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_L_REG, 1, Rec_Data + 1, 1, 1000);
 8101508:	463b      	mov	r3, r7
 810150a:	3301      	adds	r3, #1
 810150c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8101510:	9202      	str	r2, [sp, #8]
 8101512:	2201      	movs	r2, #1
 8101514:	9201      	str	r2, [sp, #4]
 8101516:	9300      	str	r3, [sp, #0]
 8101518:	2301      	movs	r3, #1
 810151a:	2273      	movs	r2, #115	; 0x73
 810151c:	21d0      	movs	r1, #208	; 0xd0
 810151e:	4809      	ldr	r0, [pc, #36]	; (8101544 <Read_FIFO_Count+0x64>)
 8101520:	f001 fcf6 	bl	8102f10 <HAL_I2C_Mem_Read>
 8101524:	4603      	mov	r3, r0
 8101526:	717b      	strb	r3, [r7, #5]

	//Get FIFO Count value
	fifo_count = (uint16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8101528:	783b      	ldrb	r3, [r7, #0]
 810152a:	021b      	lsls	r3, r3, #8
 810152c:	b21a      	sxth	r2, r3
 810152e:	787b      	ldrb	r3, [r7, #1]
 8101530:	b21b      	sxth	r3, r3
 8101532:	4313      	orrs	r3, r2
 8101534:	b21b      	sxth	r3, r3
 8101536:	80fb      	strh	r3, [r7, #6]

	return fifo_count;
 8101538:	88fb      	ldrh	r3, [r7, #6]
}
 810153a:	4618      	mov	r0, r3
 810153c:	3708      	adds	r7, #8
 810153e:	46bd      	mov	sp, r7
 8101540:	bd80      	pop	{r7, pc}
 8101542:	bf00      	nop
 8101544:	1000020c 	.word	0x1000020c

08101548 <Reset_Reable_FIFO>:

//Reset and reable FIFO buffer
void Reset_Reable_FIFO(){
 8101548:	b580      	push	{r7, lr}
 810154a:	b086      	sub	sp, #24
 810154c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;

	//Reset FIFO
	uint8_t Data = 0x04;
 810154e:	2304      	movs	r3, #4
 8101550:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101556:	9302      	str	r3, [sp, #8]
 8101558:	2301      	movs	r3, #1
 810155a:	9301      	str	r3, [sp, #4]
 810155c:	1dbb      	adds	r3, r7, #6
 810155e:	9300      	str	r3, [sp, #0]
 8101560:	2301      	movs	r3, #1
 8101562:	226a      	movs	r2, #106	; 0x6a
 8101564:	21d0      	movs	r1, #208	; 0xd0
 8101566:	480d      	ldr	r0, [pc, #52]	; (810159c <Reset_Reable_FIFO+0x54>)
 8101568:	f001 fbbe 	bl	8102ce8 <HAL_I2C_Mem_Write>
 810156c:	4603      	mov	r3, r0
 810156e:	71fb      	strb	r3, [r7, #7]

	//Reable FIFO
	Data = 0x40;
 8101570:	2340      	movs	r3, #64	; 0x40
 8101572:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101578:	9302      	str	r3, [sp, #8]
 810157a:	2301      	movs	r3, #1
 810157c:	9301      	str	r3, [sp, #4]
 810157e:	1dbb      	adds	r3, r7, #6
 8101580:	9300      	str	r3, [sp, #0]
 8101582:	2301      	movs	r3, #1
 8101584:	226a      	movs	r2, #106	; 0x6a
 8101586:	21d0      	movs	r1, #208	; 0xd0
 8101588:	4804      	ldr	r0, [pc, #16]	; (810159c <Reset_Reable_FIFO+0x54>)
 810158a:	f001 fbad 	bl	8102ce8 <HAL_I2C_Mem_Write>
 810158e:	4603      	mov	r3, r0
 8101590:	71fb      	strb	r3, [r7, #7]

}
 8101592:	bf00      	nop
 8101594:	3708      	adds	r7, #8
 8101596:	46bd      	mov	sp, r7
 8101598:	bd80      	pop	{r7, pc}
 810159a:	bf00      	nop
 810159c:	1000020c 	.word	0x1000020c

081015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81015a0:	b580      	push	{r7, lr}
 81015a2:	b084      	sub	sp, #16
 81015a4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81015a6:	4b51      	ldr	r3, [pc, #324]	; (81016ec <main+0x14c>)
 81015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ac:	4a4f      	ldr	r2, [pc, #316]	; (81016ec <main+0x14c>)
 81015ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015b6:	4b4d      	ldr	r3, [pc, #308]	; (81016ec <main+0x14c>)
 81015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81015c0:	607b      	str	r3, [r7, #4]
 81015c2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81015c4:	2001      	movs	r0, #1
 81015c6:	f001 faed 	bl	8102ba4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81015ca:	f002 fa7b 	bl	8103ac4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81015ce:	2201      	movs	r2, #1
 81015d0:	2102      	movs	r1, #2
 81015d2:	2000      	movs	r0, #0
 81015d4:	f002 f9fc 	bl	81039d0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81015d8:	4b45      	ldr	r3, [pc, #276]	; (81016f0 <main+0x150>)
 81015da:	681b      	ldr	r3, [r3, #0]
 81015dc:	091b      	lsrs	r3, r3, #4
 81015de:	f003 030f 	and.w	r3, r3, #15
 81015e2:	2b07      	cmp	r3, #7
 81015e4:	d108      	bne.n	81015f8 <main+0x58>
 81015e6:	4b43      	ldr	r3, [pc, #268]	; (81016f4 <main+0x154>)
 81015e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81015ec:	4a41      	ldr	r2, [pc, #260]	; (81016f4 <main+0x154>)
 81015ee:	f043 0301 	orr.w	r3, r3, #1
 81015f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81015f6:	e007      	b.n	8101608 <main+0x68>
 81015f8:	4b3e      	ldr	r3, [pc, #248]	; (81016f4 <main+0x154>)
 81015fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81015fe:	4a3d      	ldr	r2, [pc, #244]	; (81016f4 <main+0x154>)
 8101600:	f043 0301 	orr.w	r3, r3, #1
 8101604:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101608:	f000 ff32 	bl	8102470 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810160c:	f000 face 	bl	8101bac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101610:	f000 fa80 	bl	8101b14 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8101614:	f000 f8ba 	bl	810178c <MX_TIM1_Init>
  MX_I2C1_Init();
 8101618:	f000 f878 	bl	810170c <MX_I2C1_Init>
  MX_TIM2_Init();
 810161c:	f000 f97a 	bl	8101914 <MX_TIM2_Init>
  MX_TIM3_Init();
 8101620:	f000 f9cc 	bl	81019bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8101624:	f000 fa20 	bl	8101a68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

    // IMU SETTINGS
	IMU_MPU6050_Init();
 8101628:	f7ff fd86 	bl	8101138 <IMU_MPU6050_Init>
	printf("Start\r\n");
 810162c:	4832      	ldr	r0, [pc, #200]	; (81016f8 <main+0x158>)
 810162e:	f007 f985 	bl	810893c <puts>

	// TIMERS START
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101632:	2100      	movs	r1, #0
 8101634:	4831      	ldr	r0, [pc, #196]	; (81016fc <main+0x15c>)
 8101636:	f004 f84b 	bl	81056d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 810163a:	2104      	movs	r1, #4
 810163c:	482f      	ldr	r0, [pc, #188]	; (81016fc <main+0x15c>)
 810163e:	f004 f847 	bl	81056d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101642:	2108      	movs	r1, #8
 8101644:	482d      	ldr	r0, [pc, #180]	; (81016fc <main+0x15c>)
 8101646:	f004 f843 	bl	81056d0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 810164a:	2200      	movs	r2, #0
 810164c:	2180      	movs	r1, #128	; 0x80
 810164e:	482c      	ldr	r0, [pc, #176]	; (8101700 <main+0x160>)
 8101650:	f001 fa8e 	bl	8102b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, DIR_2_Pin, GPIO_PIN_RESET);
 8101654:	2200      	movs	r2, #0
 8101656:	2180      	movs	r1, #128	; 0x80
 8101658:	482a      	ldr	r0, [pc, #168]	; (8101704 <main+0x164>)
 810165a:	f001 fa89 	bl	8102b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, DIR_3_Pin, GPIO_PIN_RESET);
 810165e:	2200      	movs	r2, #0
 8101660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8101664:	4827      	ldr	r0, [pc, #156]	; (8101704 <main+0x164>)
 8101666:	f001 fa83 	bl	8102b70 <HAL_GPIO_WritePin>
	for(int i = 0; i < 999; i++){
 810166a:	2300      	movs	r3, #0
 810166c:	60fb      	str	r3, [r7, #12]
 810166e:	e010      	b.n	8101692 <main+0xf2>
		readIMU();
 8101670:	f000 fb46 	bl	8101d00 <readIMU>
		TIM1->CCR1 = i;
 8101674:	4a24      	ldr	r2, [pc, #144]	; (8101708 <main+0x168>)
 8101676:	68fb      	ldr	r3, [r7, #12]
 8101678:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = i;
 810167a:	4a23      	ldr	r2, [pc, #140]	; (8101708 <main+0x168>)
 810167c:	68fb      	ldr	r3, [r7, #12]
 810167e:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = i;
 8101680:	4a21      	ldr	r2, [pc, #132]	; (8101708 <main+0x168>)
 8101682:	68fb      	ldr	r3, [r7, #12]
 8101684:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_Delay(10);
 8101686:	200a      	movs	r0, #10
 8101688:	f000 ffa6 	bl	81025d8 <HAL_Delay>
	for(int i = 0; i < 999; i++){
 810168c:	68fb      	ldr	r3, [r7, #12]
 810168e:	3301      	adds	r3, #1
 8101690:	60fb      	str	r3, [r7, #12]
 8101692:	68fb      	ldr	r3, [r7, #12]
 8101694:	f240 32e6 	movw	r2, #998	; 0x3e6
 8101698:	4293      	cmp	r3, r2
 810169a:	dde9      	ble.n	8101670 <main+0xd0>
	}
	HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 810169c:	2201      	movs	r2, #1
 810169e:	2180      	movs	r1, #128	; 0x80
 81016a0:	4817      	ldr	r0, [pc, #92]	; (8101700 <main+0x160>)
 81016a2:	f001 fa65 	bl	8102b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, DIR_2_Pin, GPIO_PIN_SET);
 81016a6:	2201      	movs	r2, #1
 81016a8:	2180      	movs	r1, #128	; 0x80
 81016aa:	4816      	ldr	r0, [pc, #88]	; (8101704 <main+0x164>)
 81016ac:	f001 fa60 	bl	8102b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, DIR_3_Pin, GPIO_PIN_SET);
 81016b0:	2201      	movs	r2, #1
 81016b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 81016b6:	4813      	ldr	r0, [pc, #76]	; (8101704 <main+0x164>)
 81016b8:	f001 fa5a 	bl	8102b70 <HAL_GPIO_WritePin>
	for(int i = 999; i > 0; i++){
 81016bc:	f240 33e7 	movw	r3, #999	; 0x3e7
 81016c0:	60bb      	str	r3, [r7, #8]
 81016c2:	e00e      	b.n	81016e2 <main+0x142>
		TIM1->CCR1 = i;
 81016c4:	4a10      	ldr	r2, [pc, #64]	; (8101708 <main+0x168>)
 81016c6:	68bb      	ldr	r3, [r7, #8]
 81016c8:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = i;
 81016ca:	4a0f      	ldr	r2, [pc, #60]	; (8101708 <main+0x168>)
 81016cc:	68bb      	ldr	r3, [r7, #8]
 81016ce:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = i;
 81016d0:	4a0d      	ldr	r2, [pc, #52]	; (8101708 <main+0x168>)
 81016d2:	68bb      	ldr	r3, [r7, #8]
 81016d4:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_Delay(10);
 81016d6:	200a      	movs	r0, #10
 81016d8:	f000 ff7e 	bl	81025d8 <HAL_Delay>
	for(int i = 999; i > 0; i++){
 81016dc:	68bb      	ldr	r3, [r7, #8]
 81016de:	3301      	adds	r3, #1
 81016e0:	60bb      	str	r3, [r7, #8]
 81016e2:	68bb      	ldr	r3, [r7, #8]
 81016e4:	2b00      	cmp	r3, #0
 81016e6:	dced      	bgt.n	81016c4 <main+0x124>
	HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 81016e8:	e7af      	b.n	810164a <main+0xaa>
 81016ea:	bf00      	nop
 81016ec:	58024400 	.word	0x58024400
 81016f0:	e000ed00 	.word	0xe000ed00
 81016f4:	58026400 	.word	0x58026400
 81016f8:	0810c5d4 	.word	0x0810c5d4
 81016fc:	10000258 	.word	0x10000258
 8101700:	58020400 	.word	0x58020400
 8101704:	58021000 	.word	0x58021000
 8101708:	40010000 	.word	0x40010000

0810170c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 810170c:	b580      	push	{r7, lr}
 810170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101710:	4b1b      	ldr	r3, [pc, #108]	; (8101780 <MX_I2C1_Init+0x74>)
 8101712:	4a1c      	ldr	r2, [pc, #112]	; (8101784 <MX_I2C1_Init+0x78>)
 8101714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101716:	4b1a      	ldr	r3, [pc, #104]	; (8101780 <MX_I2C1_Init+0x74>)
 8101718:	4a1b      	ldr	r2, [pc, #108]	; (8101788 <MX_I2C1_Init+0x7c>)
 810171a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810171c:	4b18      	ldr	r3, [pc, #96]	; (8101780 <MX_I2C1_Init+0x74>)
 810171e:	2200      	movs	r2, #0
 8101720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101722:	4b17      	ldr	r3, [pc, #92]	; (8101780 <MX_I2C1_Init+0x74>)
 8101724:	2201      	movs	r2, #1
 8101726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101728:	4b15      	ldr	r3, [pc, #84]	; (8101780 <MX_I2C1_Init+0x74>)
 810172a:	2200      	movs	r2, #0
 810172c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810172e:	4b14      	ldr	r3, [pc, #80]	; (8101780 <MX_I2C1_Init+0x74>)
 8101730:	2200      	movs	r2, #0
 8101732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101734:	4b12      	ldr	r3, [pc, #72]	; (8101780 <MX_I2C1_Init+0x74>)
 8101736:	2200      	movs	r2, #0
 8101738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810173a:	4b11      	ldr	r3, [pc, #68]	; (8101780 <MX_I2C1_Init+0x74>)
 810173c:	2200      	movs	r2, #0
 810173e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101740:	4b0f      	ldr	r3, [pc, #60]	; (8101780 <MX_I2C1_Init+0x74>)
 8101742:	2200      	movs	r2, #0
 8101744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101746:	480e      	ldr	r0, [pc, #56]	; (8101780 <MX_I2C1_Init+0x74>)
 8101748:	f001 fa3e 	bl	8102bc8 <HAL_I2C_Init>
 810174c:	4603      	mov	r3, r0
 810174e:	2b00      	cmp	r3, #0
 8101750:	d001      	beq.n	8101756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101752:	f000 fb31 	bl	8101db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101756:	2100      	movs	r1, #0
 8101758:	4809      	ldr	r0, [pc, #36]	; (8101780 <MX_I2C1_Init+0x74>)
 810175a:	f002 f8a1 	bl	81038a0 <HAL_I2CEx_ConfigAnalogFilter>
 810175e:	4603      	mov	r3, r0
 8101760:	2b00      	cmp	r3, #0
 8101762:	d001      	beq.n	8101768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101764:	f000 fb28 	bl	8101db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101768:	2100      	movs	r1, #0
 810176a:	4805      	ldr	r0, [pc, #20]	; (8101780 <MX_I2C1_Init+0x74>)
 810176c:	f002 f8e3 	bl	8103936 <HAL_I2CEx_ConfigDigitalFilter>
 8101770:	4603      	mov	r3, r0
 8101772:	2b00      	cmp	r3, #0
 8101774:	d001      	beq.n	810177a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101776:	f000 fb1f 	bl	8101db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810177a:	bf00      	nop
 810177c:	bd80      	pop	{r7, pc}
 810177e:	bf00      	nop
 8101780:	1000020c 	.word	0x1000020c
 8101784:	40005400 	.word	0x40005400
 8101788:	307075b1 	.word	0x307075b1

0810178c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 810178c:	b580      	push	{r7, lr}
 810178e:	b09a      	sub	sp, #104	; 0x68
 8101790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101796:	2200      	movs	r2, #0
 8101798:	601a      	str	r2, [r3, #0]
 810179a:	605a      	str	r2, [r3, #4]
 810179c:	609a      	str	r2, [r3, #8]
 810179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81017a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81017a4:	2200      	movs	r2, #0
 81017a6:	601a      	str	r2, [r3, #0]
 81017a8:	605a      	str	r2, [r3, #4]
 81017aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81017ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81017b0:	2200      	movs	r2, #0
 81017b2:	601a      	str	r2, [r3, #0]
 81017b4:	605a      	str	r2, [r3, #4]
 81017b6:	609a      	str	r2, [r3, #8]
 81017b8:	60da      	str	r2, [r3, #12]
 81017ba:	611a      	str	r2, [r3, #16]
 81017bc:	615a      	str	r2, [r3, #20]
 81017be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81017c0:	1d3b      	adds	r3, r7, #4
 81017c2:	222c      	movs	r2, #44	; 0x2c
 81017c4:	2100      	movs	r1, #0
 81017c6:	4618      	mov	r0, r3
 81017c8:	f006 f9b0 	bl	8107b2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81017cc:	4b4f      	ldr	r3, [pc, #316]	; (810190c <MX_TIM1_Init+0x180>)
 81017ce:	4a50      	ldr	r2, [pc, #320]	; (8101910 <MX_TIM1_Init+0x184>)
 81017d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81017d2:	4b4e      	ldr	r3, [pc, #312]	; (810190c <MX_TIM1_Init+0x180>)
 81017d4:	22ef      	movs	r2, #239	; 0xef
 81017d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81017d8:	4b4c      	ldr	r3, [pc, #304]	; (810190c <MX_TIM1_Init+0x180>)
 81017da:	2200      	movs	r2, #0
 81017dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81017de:	4b4b      	ldr	r3, [pc, #300]	; (810190c <MX_TIM1_Init+0x180>)
 81017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 81017e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81017e6:	4b49      	ldr	r3, [pc, #292]	; (810190c <MX_TIM1_Init+0x180>)
 81017e8:	2200      	movs	r2, #0
 81017ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81017ec:	4b47      	ldr	r3, [pc, #284]	; (810190c <MX_TIM1_Init+0x180>)
 81017ee:	2200      	movs	r2, #0
 81017f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81017f2:	4b46      	ldr	r3, [pc, #280]	; (810190c <MX_TIM1_Init+0x180>)
 81017f4:	2200      	movs	r2, #0
 81017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81017f8:	4844      	ldr	r0, [pc, #272]	; (810190c <MX_TIM1_Init+0x180>)
 81017fa:	f003 feb1 	bl	8105560 <HAL_TIM_Base_Init>
 81017fe:	4603      	mov	r3, r0
 8101800:	2b00      	cmp	r3, #0
 8101802:	d001      	beq.n	8101808 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101804:	f000 fad8 	bl	8101db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810180c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810180e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101812:	4619      	mov	r1, r3
 8101814:	483d      	ldr	r0, [pc, #244]	; (810190c <MX_TIM1_Init+0x180>)
 8101816:	f004 fa23 	bl	8105c60 <HAL_TIM_ConfigClockSource>
 810181a:	4603      	mov	r3, r0
 810181c:	2b00      	cmp	r3, #0
 810181e:	d001      	beq.n	8101824 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101820:	f000 faca 	bl	8101db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101824:	4839      	ldr	r0, [pc, #228]	; (810190c <MX_TIM1_Init+0x180>)
 8101826:	f003 fef2 	bl	810560e <HAL_TIM_PWM_Init>
 810182a:	4603      	mov	r3, r0
 810182c:	2b00      	cmp	r3, #0
 810182e:	d001      	beq.n	8101834 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101830:	f000 fac2 	bl	8101db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101834:	2300      	movs	r3, #0
 8101836:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101838:	2300      	movs	r3, #0
 810183a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810183c:	2300      	movs	r3, #0
 810183e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101840:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101844:	4619      	mov	r1, r3
 8101846:	4831      	ldr	r0, [pc, #196]	; (810190c <MX_TIM1_Init+0x180>)
 8101848:	f004 ff34 	bl	81066b4 <HAL_TIMEx_MasterConfigSynchronization>
 810184c:	4603      	mov	r3, r0
 810184e:	2b00      	cmp	r3, #0
 8101850:	d001      	beq.n	8101856 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101852:	f000 fab1 	bl	8101db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101856:	2360      	movs	r3, #96	; 0x60
 8101858:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 810185a:	2300      	movs	r3, #0
 810185c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810185e:	2300      	movs	r3, #0
 8101860:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101862:	2300      	movs	r3, #0
 8101864:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101866:	2300      	movs	r3, #0
 8101868:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810186a:	2300      	movs	r3, #0
 810186c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810186e:	2300      	movs	r3, #0
 8101870:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101876:	2200      	movs	r2, #0
 8101878:	4619      	mov	r1, r3
 810187a:	4824      	ldr	r0, [pc, #144]	; (810190c <MX_TIM1_Init+0x180>)
 810187c:	f004 f8dc 	bl	8105a38 <HAL_TIM_PWM_ConfigChannel>
 8101880:	4603      	mov	r3, r0
 8101882:	2b00      	cmp	r3, #0
 8101884:	d001      	beq.n	810188a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8101886:	f000 fa97 	bl	8101db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810188a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810188e:	2204      	movs	r2, #4
 8101890:	4619      	mov	r1, r3
 8101892:	481e      	ldr	r0, [pc, #120]	; (810190c <MX_TIM1_Init+0x180>)
 8101894:	f004 f8d0 	bl	8105a38 <HAL_TIM_PWM_ConfigChannel>
 8101898:	4603      	mov	r3, r0
 810189a:	2b00      	cmp	r3, #0
 810189c:	d001      	beq.n	81018a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 810189e:	f000 fa8b 	bl	8101db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81018a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81018a6:	2208      	movs	r2, #8
 81018a8:	4619      	mov	r1, r3
 81018aa:	4818      	ldr	r0, [pc, #96]	; (810190c <MX_TIM1_Init+0x180>)
 81018ac:	f004 f8c4 	bl	8105a38 <HAL_TIM_PWM_ConfigChannel>
 81018b0:	4603      	mov	r3, r0
 81018b2:	2b00      	cmp	r3, #0
 81018b4:	d001      	beq.n	81018ba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81018b6:	f000 fa7f 	bl	8101db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81018ba:	2300      	movs	r3, #0
 81018bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81018be:	2300      	movs	r3, #0
 81018c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81018c2:	2300      	movs	r3, #0
 81018c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81018c6:	2300      	movs	r3, #0
 81018c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81018ca:	2300      	movs	r3, #0
 81018cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81018d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81018d4:	2300      	movs	r3, #0
 81018d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81018d8:	2300      	movs	r3, #0
 81018da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81018dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81018e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81018e2:	2300      	movs	r3, #0
 81018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81018e6:	2300      	movs	r3, #0
 81018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81018ea:	1d3b      	adds	r3, r7, #4
 81018ec:	4619      	mov	r1, r3
 81018ee:	4807      	ldr	r0, [pc, #28]	; (810190c <MX_TIM1_Init+0x180>)
 81018f0:	f004 ff6e 	bl	81067d0 <HAL_TIMEx_ConfigBreakDeadTime>
 81018f4:	4603      	mov	r3, r0
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d001      	beq.n	81018fe <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 81018fa:	f000 fa5d 	bl	8101db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81018fe:	4803      	ldr	r0, [pc, #12]	; (810190c <MX_TIM1_Init+0x180>)
 8101900:	f000 fbfa 	bl	81020f8 <HAL_TIM_MspPostInit>

}
 8101904:	bf00      	nop
 8101906:	3768      	adds	r7, #104	; 0x68
 8101908:	46bd      	mov	sp, r7
 810190a:	bd80      	pop	{r7, pc}
 810190c:	10000258 	.word	0x10000258
 8101910:	40010000 	.word	0x40010000

08101914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101914:	b580      	push	{r7, lr}
 8101916:	b08c      	sub	sp, #48	; 0x30
 8101918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810191a:	f107 030c 	add.w	r3, r7, #12
 810191e:	2224      	movs	r2, #36	; 0x24
 8101920:	2100      	movs	r1, #0
 8101922:	4618      	mov	r0, r3
 8101924:	f006 f902 	bl	8107b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101928:	463b      	mov	r3, r7
 810192a:	2200      	movs	r2, #0
 810192c:	601a      	str	r2, [r3, #0]
 810192e:	605a      	str	r2, [r3, #4]
 8101930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101932:	4b21      	ldr	r3, [pc, #132]	; (81019b8 <MX_TIM2_Init+0xa4>)
 8101934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 810193a:	4b1f      	ldr	r3, [pc, #124]	; (81019b8 <MX_TIM2_Init+0xa4>)
 810193c:	2200      	movs	r2, #0
 810193e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101940:	4b1d      	ldr	r3, [pc, #116]	; (81019b8 <MX_TIM2_Init+0xa4>)
 8101942:	2200      	movs	r2, #0
 8101944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2652 - 1;
 8101946:	4b1c      	ldr	r3, [pc, #112]	; (81019b8 <MX_TIM2_Init+0xa4>)
 8101948:	f640 225b 	movw	r2, #2651	; 0xa5b
 810194c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810194e:	4b1a      	ldr	r3, [pc, #104]	; (81019b8 <MX_TIM2_Init+0xa4>)
 8101950:	2200      	movs	r2, #0
 8101952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101954:	4b18      	ldr	r3, [pc, #96]	; (81019b8 <MX_TIM2_Init+0xa4>)
 8101956:	2200      	movs	r2, #0
 8101958:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 810195a:	2303      	movs	r3, #3
 810195c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810195e:	2300      	movs	r3, #0
 8101960:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101962:	2301      	movs	r3, #1
 8101964:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101966:	2300      	movs	r3, #0
 8101968:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 810196a:	230a      	movs	r3, #10
 810196c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810196e:	2300      	movs	r3, #0
 8101970:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101972:	2301      	movs	r3, #1
 8101974:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101976:	2300      	movs	r3, #0
 8101978:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810197a:	2300      	movs	r3, #0
 810197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 810197e:	f107 030c 	add.w	r3, r7, #12
 8101982:	4619      	mov	r1, r3
 8101984:	480c      	ldr	r0, [pc, #48]	; (81019b8 <MX_TIM2_Init+0xa4>)
 8101986:	f003 ffb1 	bl	81058ec <HAL_TIM_Encoder_Init>
 810198a:	4603      	mov	r3, r0
 810198c:	2b00      	cmp	r3, #0
 810198e:	d001      	beq.n	8101994 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8101990:	f000 fa12 	bl	8101db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101994:	2300      	movs	r3, #0
 8101996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101998:	2300      	movs	r3, #0
 810199a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810199c:	463b      	mov	r3, r7
 810199e:	4619      	mov	r1, r3
 81019a0:	4805      	ldr	r0, [pc, #20]	; (81019b8 <MX_TIM2_Init+0xa4>)
 81019a2:	f004 fe87 	bl	81066b4 <HAL_TIMEx_MasterConfigSynchronization>
 81019a6:	4603      	mov	r3, r0
 81019a8:	2b00      	cmp	r3, #0
 81019aa:	d001      	beq.n	81019b0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 81019ac:	f000 fa04 	bl	8101db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81019b0:	bf00      	nop
 81019b2:	3730      	adds	r7, #48	; 0x30
 81019b4:	46bd      	mov	sp, r7
 81019b6:	bd80      	pop	{r7, pc}
 81019b8:	100002a4 	.word	0x100002a4

081019bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81019bc:	b580      	push	{r7, lr}
 81019be:	b08c      	sub	sp, #48	; 0x30
 81019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81019c2:	f107 030c 	add.w	r3, r7, #12
 81019c6:	2224      	movs	r2, #36	; 0x24
 81019c8:	2100      	movs	r1, #0
 81019ca:	4618      	mov	r0, r3
 81019cc:	f006 f8ae 	bl	8107b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81019d0:	463b      	mov	r3, r7
 81019d2:	2200      	movs	r2, #0
 81019d4:	601a      	str	r2, [r3, #0]
 81019d6:	605a      	str	r2, [r3, #4]
 81019d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81019da:	4b21      	ldr	r3, [pc, #132]	; (8101a60 <MX_TIM3_Init+0xa4>)
 81019dc:	4a21      	ldr	r2, [pc, #132]	; (8101a64 <MX_TIM3_Init+0xa8>)
 81019de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 81019e0:	4b1f      	ldr	r3, [pc, #124]	; (8101a60 <MX_TIM3_Init+0xa4>)
 81019e2:	2200      	movs	r2, #0
 81019e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019e6:	4b1e      	ldr	r3, [pc, #120]	; (8101a60 <MX_TIM3_Init+0xa4>)
 81019e8:	2200      	movs	r2, #0
 81019ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2652 - 1;
 81019ec:	4b1c      	ldr	r3, [pc, #112]	; (8101a60 <MX_TIM3_Init+0xa4>)
 81019ee:	f640 225b 	movw	r2, #2651	; 0xa5b
 81019f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81019f4:	4b1a      	ldr	r3, [pc, #104]	; (8101a60 <MX_TIM3_Init+0xa4>)
 81019f6:	2200      	movs	r2, #0
 81019f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81019fa:	4b19      	ldr	r3, [pc, #100]	; (8101a60 <MX_TIM3_Init+0xa4>)
 81019fc:	2200      	movs	r2, #0
 81019fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101a00:	2303      	movs	r3, #3
 8101a02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101a04:	2300      	movs	r3, #0
 8101a06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101a08:	2301      	movs	r3, #1
 8101a0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101a0c:	2300      	movs	r3, #0
 8101a0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101a10:	230a      	movs	r3, #10
 8101a12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101a14:	2300      	movs	r3, #0
 8101a16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101a18:	2301      	movs	r3, #1
 8101a1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101a20:	2300      	movs	r3, #0
 8101a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8101a24:	f107 030c 	add.w	r3, r7, #12
 8101a28:	4619      	mov	r1, r3
 8101a2a:	480d      	ldr	r0, [pc, #52]	; (8101a60 <MX_TIM3_Init+0xa4>)
 8101a2c:	f003 ff5e 	bl	81058ec <HAL_TIM_Encoder_Init>
 8101a30:	4603      	mov	r3, r0
 8101a32:	2b00      	cmp	r3, #0
 8101a34:	d001      	beq.n	8101a3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8101a36:	f000 f9bf 	bl	8101db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101a3a:	2300      	movs	r3, #0
 8101a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101a3e:	2300      	movs	r3, #0
 8101a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101a42:	463b      	mov	r3, r7
 8101a44:	4619      	mov	r1, r3
 8101a46:	4806      	ldr	r0, [pc, #24]	; (8101a60 <MX_TIM3_Init+0xa4>)
 8101a48:	f004 fe34 	bl	81066b4 <HAL_TIMEx_MasterConfigSynchronization>
 8101a4c:	4603      	mov	r3, r0
 8101a4e:	2b00      	cmp	r3, #0
 8101a50:	d001      	beq.n	8101a56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8101a52:	f000 f9b1 	bl	8101db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8101a56:	bf00      	nop
 8101a58:	3730      	adds	r7, #48	; 0x30
 8101a5a:	46bd      	mov	sp, r7
 8101a5c:	bd80      	pop	{r7, pc}
 8101a5e:	bf00      	nop
 8101a60:	100002f0 	.word	0x100002f0
 8101a64:	40000400 	.word	0x40000400

08101a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8101a68:	b580      	push	{r7, lr}
 8101a6a:	b08c      	sub	sp, #48	; 0x30
 8101a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101a6e:	f107 030c 	add.w	r3, r7, #12
 8101a72:	2224      	movs	r2, #36	; 0x24
 8101a74:	2100      	movs	r1, #0
 8101a76:	4618      	mov	r0, r3
 8101a78:	f006 f858 	bl	8107b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101a7c:	463b      	mov	r3, r7
 8101a7e:	2200      	movs	r2, #0
 8101a80:	601a      	str	r2, [r3, #0]
 8101a82:	605a      	str	r2, [r3, #4]
 8101a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101a86:	4b21      	ldr	r3, [pc, #132]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101a88:	4a21      	ldr	r2, [pc, #132]	; (8101b10 <MX_TIM4_Init+0xa8>)
 8101a8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8101a8c:	4b1f      	ldr	r3, [pc, #124]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101a8e:	2200      	movs	r2, #0
 8101a90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101a92:	4b1e      	ldr	r3, [pc, #120]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101a94:	2200      	movs	r2, #0
 8101a96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2652 - 1;
 8101a98:	4b1c      	ldr	r3, [pc, #112]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101a9a:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101aa0:	4b1a      	ldr	r3, [pc, #104]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101aa2:	2200      	movs	r2, #0
 8101aa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101aa6:	4b19      	ldr	r3, [pc, #100]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101aa8:	2200      	movs	r2, #0
 8101aaa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101aac:	2303      	movs	r3, #3
 8101aae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101ab0:	2300      	movs	r3, #0
 8101ab2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101ab4:	2301      	movs	r3, #1
 8101ab6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101ab8:	2300      	movs	r3, #0
 8101aba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101abc:	230a      	movs	r3, #10
 8101abe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101ac0:	2300      	movs	r3, #0
 8101ac2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101ac4:	2301      	movs	r3, #1
 8101ac6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101ac8:	2300      	movs	r3, #0
 8101aca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101acc:	2300      	movs	r3, #0
 8101ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8101ad0:	f107 030c 	add.w	r3, r7, #12
 8101ad4:	4619      	mov	r1, r3
 8101ad6:	480d      	ldr	r0, [pc, #52]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101ad8:	f003 ff08 	bl	81058ec <HAL_TIM_Encoder_Init>
 8101adc:	4603      	mov	r3, r0
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	d001      	beq.n	8101ae6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8101ae2:	f000 f969 	bl	8101db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101aea:	2300      	movs	r3, #0
 8101aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8101aee:	463b      	mov	r3, r7
 8101af0:	4619      	mov	r1, r3
 8101af2:	4806      	ldr	r0, [pc, #24]	; (8101b0c <MX_TIM4_Init+0xa4>)
 8101af4:	f004 fdde 	bl	81066b4 <HAL_TIMEx_MasterConfigSynchronization>
 8101af8:	4603      	mov	r3, r0
 8101afa:	2b00      	cmp	r3, #0
 8101afc:	d001      	beq.n	8101b02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8101afe:	f000 f95b 	bl	8101db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8101b02:	bf00      	nop
 8101b04:	3730      	adds	r7, #48	; 0x30
 8101b06:	46bd      	mov	sp, r7
 8101b08:	bd80      	pop	{r7, pc}
 8101b0a:	bf00      	nop
 8101b0c:	1000033c 	.word	0x1000033c
 8101b10:	40000800 	.word	0x40000800

08101b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101b14:	b580      	push	{r7, lr}
 8101b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101b18:	4b22      	ldr	r3, [pc, #136]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b1a:	4a23      	ldr	r2, [pc, #140]	; (8101ba8 <MX_USART3_UART_Init+0x94>)
 8101b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101b1e:	4b21      	ldr	r3, [pc, #132]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101b26:	4b1f      	ldr	r3, [pc, #124]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b28:	2200      	movs	r2, #0
 8101b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101b2c:	4b1d      	ldr	r3, [pc, #116]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b2e:	2200      	movs	r2, #0
 8101b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101b32:	4b1c      	ldr	r3, [pc, #112]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b34:	2200      	movs	r2, #0
 8101b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101b38:	4b1a      	ldr	r3, [pc, #104]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b3a:	220c      	movs	r2, #12
 8101b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101b3e:	4b19      	ldr	r3, [pc, #100]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b40:	2200      	movs	r2, #0
 8101b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101b44:	4b17      	ldr	r3, [pc, #92]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b46:	2200      	movs	r2, #0
 8101b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101b4a:	4b16      	ldr	r3, [pc, #88]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b4c:	2200      	movs	r2, #0
 8101b4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101b50:	4b14      	ldr	r3, [pc, #80]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b52:	2200      	movs	r2, #0
 8101b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b56:	4b13      	ldr	r3, [pc, #76]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b58:	2200      	movs	r2, #0
 8101b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101b5c:	4811      	ldr	r0, [pc, #68]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b5e:	f004 feb5 	bl	81068cc <HAL_UART_Init>
 8101b62:	4603      	mov	r3, r0
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d001      	beq.n	8101b6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101b68:	f000 f926 	bl	8101db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b6c:	2100      	movs	r1, #0
 8101b6e:	480d      	ldr	r0, [pc, #52]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b70:	f005 fee8 	bl	8107944 <HAL_UARTEx_SetTxFifoThreshold>
 8101b74:	4603      	mov	r3, r0
 8101b76:	2b00      	cmp	r3, #0
 8101b78:	d001      	beq.n	8101b7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101b7a:	f000 f91d 	bl	8101db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b7e:	2100      	movs	r1, #0
 8101b80:	4808      	ldr	r0, [pc, #32]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b82:	f005 ff1d 	bl	81079c0 <HAL_UARTEx_SetRxFifoThreshold>
 8101b86:	4603      	mov	r3, r0
 8101b88:	2b00      	cmp	r3, #0
 8101b8a:	d001      	beq.n	8101b90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101b8c:	f000 f914 	bl	8101db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101b90:	4804      	ldr	r0, [pc, #16]	; (8101ba4 <MX_USART3_UART_Init+0x90>)
 8101b92:	f005 fe9e 	bl	81078d2 <HAL_UARTEx_DisableFifoMode>
 8101b96:	4603      	mov	r3, r0
 8101b98:	2b00      	cmp	r3, #0
 8101b9a:	d001      	beq.n	8101ba0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101b9c:	f000 f90c 	bl	8101db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101ba0:	bf00      	nop
 8101ba2:	bd80      	pop	{r7, pc}
 8101ba4:	10000388 	.word	0x10000388
 8101ba8:	40004800 	.word	0x40004800

08101bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101bac:	b580      	push	{r7, lr}
 8101bae:	b08a      	sub	sp, #40	; 0x28
 8101bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bb2:	f107 0314 	add.w	r3, r7, #20
 8101bb6:	2200      	movs	r2, #0
 8101bb8:	601a      	str	r2, [r3, #0]
 8101bba:	605a      	str	r2, [r3, #4]
 8101bbc:	609a      	str	r2, [r3, #8]
 8101bbe:	60da      	str	r2, [r3, #12]
 8101bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bc2:	4b42      	ldr	r3, [pc, #264]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc8:	4a40      	ldr	r2, [pc, #256]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101bca:	f043 0301 	orr.w	r3, r3, #1
 8101bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bd2:	4b3e      	ldr	r3, [pc, #248]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd8:	f003 0301 	and.w	r3, r3, #1
 8101bdc:	613b      	str	r3, [r7, #16]
 8101bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101be0:	4b3a      	ldr	r3, [pc, #232]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101be6:	4a39      	ldr	r2, [pc, #228]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101be8:	f043 0310 	orr.w	r3, r3, #16
 8101bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bf0:	4b36      	ldr	r3, [pc, #216]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf6:	f003 0310 	and.w	r3, r3, #16
 8101bfa:	60fb      	str	r3, [r7, #12]
 8101bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101bfe:	4b33      	ldr	r3, [pc, #204]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c04:	4a31      	ldr	r2, [pc, #196]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c06:	f043 0308 	orr.w	r3, r3, #8
 8101c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c0e:	4b2f      	ldr	r3, [pc, #188]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c14:	f003 0308 	and.w	r3, r3, #8
 8101c18:	60bb      	str	r3, [r7, #8]
 8101c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c1c:	4b2b      	ldr	r3, [pc, #172]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c22:	4a2a      	ldr	r2, [pc, #168]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c24:	f043 0304 	orr.w	r3, r3, #4
 8101c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c2c:	4b27      	ldr	r3, [pc, #156]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c32:	f003 0304 	and.w	r3, r3, #4
 8101c36:	607b      	str	r3, [r7, #4]
 8101c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c3a:	4b24      	ldr	r3, [pc, #144]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c40:	4a22      	ldr	r2, [pc, #136]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c42:	f043 0302 	orr.w	r3, r3, #2
 8101c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c4a:	4b20      	ldr	r3, [pc, #128]	; (8101ccc <MX_GPIO_Init+0x120>)
 8101c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c50:	f003 0302 	and.w	r3, r3, #2
 8101c54:	603b      	str	r3, [r7, #0]
 8101c56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_2_Pin|DIR_3_Pin, GPIO_PIN_RESET);
 8101c58:	2200      	movs	r2, #0
 8101c5a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8101c5e:	481c      	ldr	r0, [pc, #112]	; (8101cd0 <MX_GPIO_Init+0x124>)
 8101c60:	f000 ff86 	bl	8102b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8101c64:	2200      	movs	r2, #0
 8101c66:	2180      	movs	r1, #128	; 0x80
 8101c68:	481a      	ldr	r0, [pc, #104]	; (8101cd4 <MX_GPIO_Init+0x128>)
 8101c6a:	f000 ff81 	bl	8102b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8101c6e:	2308      	movs	r3, #8
 8101c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101c72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c78:	2300      	movs	r3, #0
 8101c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8101c7c:	f107 0314 	add.w	r3, r7, #20
 8101c80:	4619      	mov	r1, r3
 8101c82:	4815      	ldr	r0, [pc, #84]	; (8101cd8 <MX_GPIO_Init+0x12c>)
 8101c84:	f000 fdc4 	bl	8102810 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|DIR_3_Pin;
 8101c88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8101c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c8e:	2301      	movs	r3, #1
 8101c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c92:	2300      	movs	r3, #0
 8101c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c96:	2300      	movs	r3, #0
 8101c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101c9a:	f107 0314 	add.w	r3, r7, #20
 8101c9e:	4619      	mov	r1, r3
 8101ca0:	480b      	ldr	r0, [pc, #44]	; (8101cd0 <MX_GPIO_Init+0x124>)
 8101ca2:	f000 fdb5 	bl	8102810 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8101ca6:	2380      	movs	r3, #128	; 0x80
 8101ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101caa:	2301      	movs	r3, #1
 8101cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cae:	2300      	movs	r3, #0
 8101cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cb2:	2300      	movs	r3, #0
 8101cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8101cb6:	f107 0314 	add.w	r3, r7, #20
 8101cba:	4619      	mov	r1, r3
 8101cbc:	4805      	ldr	r0, [pc, #20]	; (8101cd4 <MX_GPIO_Init+0x128>)
 8101cbe:	f000 fda7 	bl	8102810 <HAL_GPIO_Init>

}
 8101cc2:	bf00      	nop
 8101cc4:	3728      	adds	r7, #40	; 0x28
 8101cc6:	46bd      	mov	sp, r7
 8101cc8:	bd80      	pop	{r7, pc}
 8101cca:	bf00      	nop
 8101ccc:	58024400 	.word	0x58024400
 8101cd0:	58021000 	.word	0x58021000
 8101cd4:	58020400 	.word	0x58020400
 8101cd8:	58020000 	.word	0x58020000

08101cdc <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8101cdc:	b580      	push	{r7, lr}
 8101cde:	b082      	sub	sp, #8
 8101ce0:	af00      	add	r7, sp, #0
 8101ce2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101ce4:	1d39      	adds	r1, r7, #4
 8101ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101cea:	2201      	movs	r2, #1
 8101cec:	4803      	ldr	r0, [pc, #12]	; (8101cfc <__io_putchar+0x20>)
 8101cee:	f004 fe3d 	bl	810696c <HAL_UART_Transmit>
	return ch;
 8101cf2:	687b      	ldr	r3, [r7, #4]
}
 8101cf4:	4618      	mov	r0, r3
 8101cf6:	3708      	adds	r7, #8
 8101cf8:	46bd      	mov	sp, r7
 8101cfa:	bd80      	pop	{r7, pc}
 8101cfc:	10000388 	.word	0x10000388

08101d00 <readIMU>:
	if (GPIO_Pin == GPIO_PIN_3) {
		flag_MPU6050_Data_Ready = 1;
	}
}

void readIMU(){
 8101d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101d04:	b084      	sub	sp, #16
 8101d06:	af04      	add	r7, sp, #16
	if(flag_MPU6050_Data_Ready==1){
 8101d08:	4b26      	ldr	r3, [pc, #152]	; (8101da4 <readIMU+0xa4>)
 8101d0a:	781b      	ldrb	r3, [r3, #0]
 8101d0c:	2b01      	cmp	r3, #1
 8101d0e:	d144      	bne.n	8101d9a <readIMU+0x9a>
		flag_MPU6050_Data_Ready = 0;
 8101d10:	4b24      	ldr	r3, [pc, #144]	; (8101da4 <readIMU+0xa4>)
 8101d12:	2200      	movs	r2, #0
 8101d14:	701a      	strb	r2, [r3, #0]
		IMU_MPU6050_Read_Acc_Gyro(&y);
 8101d16:	4824      	ldr	r0, [pc, #144]	; (8101da8 <readIMU+0xa8>)
 8101d18:	f7ff fad6 	bl	81012c8 <IMU_MPU6050_Read_Acc_Gyro>
		printf("Ax:%f, Ay:%f, Az: %f [m/s^2]\r\n",y.Ax_raw,y.Ay_raw,y.Az_raw);
 8101d1c:	4b22      	ldr	r3, [pc, #136]	; (8101da8 <readIMU+0xa8>)
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	4618      	mov	r0, r3
 8101d22:	f7fe fc99 	bl	8100658 <__aeabi_f2d>
 8101d26:	4680      	mov	r8, r0
 8101d28:	4689      	mov	r9, r1
 8101d2a:	4b1f      	ldr	r3, [pc, #124]	; (8101da8 <readIMU+0xa8>)
 8101d2c:	685b      	ldr	r3, [r3, #4]
 8101d2e:	4618      	mov	r0, r3
 8101d30:	f7fe fc92 	bl	8100658 <__aeabi_f2d>
 8101d34:	4604      	mov	r4, r0
 8101d36:	460d      	mov	r5, r1
 8101d38:	4b1b      	ldr	r3, [pc, #108]	; (8101da8 <readIMU+0xa8>)
 8101d3a:	689b      	ldr	r3, [r3, #8]
 8101d3c:	4618      	mov	r0, r3
 8101d3e:	f7fe fc8b 	bl	8100658 <__aeabi_f2d>
 8101d42:	4602      	mov	r2, r0
 8101d44:	460b      	mov	r3, r1
 8101d46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101d4a:	e9cd 4500 	strd	r4, r5, [sp]
 8101d4e:	4642      	mov	r2, r8
 8101d50:	464b      	mov	r3, r9
 8101d52:	4816      	ldr	r0, [pc, #88]	; (8101dac <readIMU+0xac>)
 8101d54:	f006 fd6c 	bl	8108830 <iprintf>
		printf("Gx:%f, Gy:%f, Gz: %f [degree/s]\r\n",y.Wx_raw,y.Wy_raw,y.Wz_raw);
 8101d58:	4b13      	ldr	r3, [pc, #76]	; (8101da8 <readIMU+0xa8>)
 8101d5a:	68db      	ldr	r3, [r3, #12]
 8101d5c:	4618      	mov	r0, r3
 8101d5e:	f7fe fc7b 	bl	8100658 <__aeabi_f2d>
 8101d62:	4680      	mov	r8, r0
 8101d64:	4689      	mov	r9, r1
 8101d66:	4b10      	ldr	r3, [pc, #64]	; (8101da8 <readIMU+0xa8>)
 8101d68:	691b      	ldr	r3, [r3, #16]
 8101d6a:	4618      	mov	r0, r3
 8101d6c:	f7fe fc74 	bl	8100658 <__aeabi_f2d>
 8101d70:	4604      	mov	r4, r0
 8101d72:	460d      	mov	r5, r1
 8101d74:	4b0c      	ldr	r3, [pc, #48]	; (8101da8 <readIMU+0xa8>)
 8101d76:	695b      	ldr	r3, [r3, #20]
 8101d78:	4618      	mov	r0, r3
 8101d7a:	f7fe fc6d 	bl	8100658 <__aeabi_f2d>
 8101d7e:	4602      	mov	r2, r0
 8101d80:	460b      	mov	r3, r1
 8101d82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101d86:	e9cd 4500 	strd	r4, r5, [sp]
 8101d8a:	4642      	mov	r2, r8
 8101d8c:	464b      	mov	r3, r9
 8101d8e:	4808      	ldr	r0, [pc, #32]	; (8101db0 <readIMU+0xb0>)
 8101d90:	f006 fd4e 	bl	8108830 <iprintf>
		printf("\r\n");
 8101d94:	4807      	ldr	r0, [pc, #28]	; (8101db4 <readIMU+0xb4>)
 8101d96:	f006 fdd1 	bl	810893c <puts>
	}
}
 8101d9a:	bf00      	nop
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101da2:	bf00      	nop
 8101da4:	10000418 	.word	0x10000418
 8101da8:	1000041c 	.word	0x1000041c
 8101dac:	0810c5dc 	.word	0x0810c5dc
 8101db0:	0810c5fc 	.word	0x0810c5fc
 8101db4:	0810c620 	.word	0x0810c620

08101db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101db8:	b480      	push	{r7}
 8101dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101dbc:	b672      	cpsid	i
}
 8101dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101dc0:	e7fe      	b.n	8101dc0 <Error_Handler+0x8>
	...

08101dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101dc4:	b480      	push	{r7}
 8101dc6:	b083      	sub	sp, #12
 8101dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101dca:	4b0a      	ldr	r3, [pc, #40]	; (8101df4 <HAL_MspInit+0x30>)
 8101dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dd0:	4a08      	ldr	r2, [pc, #32]	; (8101df4 <HAL_MspInit+0x30>)
 8101dd2:	f043 0302 	orr.w	r3, r3, #2
 8101dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101dda:	4b06      	ldr	r3, [pc, #24]	; (8101df4 <HAL_MspInit+0x30>)
 8101ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101de0:	f003 0302 	and.w	r3, r3, #2
 8101de4:	607b      	str	r3, [r7, #4]
 8101de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101de8:	bf00      	nop
 8101dea:	370c      	adds	r7, #12
 8101dec:	46bd      	mov	sp, r7
 8101dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101df2:	4770      	bx	lr
 8101df4:	58024400 	.word	0x58024400

08101df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101df8:	b580      	push	{r7, lr}
 8101dfa:	b0b8      	sub	sp, #224	; 0xe0
 8101dfc:	af00      	add	r7, sp, #0
 8101dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e04:	2200      	movs	r2, #0
 8101e06:	601a      	str	r2, [r3, #0]
 8101e08:	605a      	str	r2, [r3, #4]
 8101e0a:	609a      	str	r2, [r3, #8]
 8101e0c:	60da      	str	r2, [r3, #12]
 8101e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e10:	f107 0310 	add.w	r3, r7, #16
 8101e14:	22bc      	movs	r2, #188	; 0xbc
 8101e16:	2100      	movs	r1, #0
 8101e18:	4618      	mov	r0, r3
 8101e1a:	f005 fe87 	bl	8107b2c <memset>
  if(hi2c->Instance==I2C1)
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	4a25      	ldr	r2, [pc, #148]	; (8101eb8 <HAL_I2C_MspInit+0xc0>)
 8101e24:	4293      	cmp	r3, r2
 8101e26:	d142      	bne.n	8101eae <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101e28:	2308      	movs	r3, #8
 8101e2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101e2c:	2300      	movs	r3, #0
 8101e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e32:	f107 0310 	add.w	r3, r7, #16
 8101e36:	4618      	mov	r0, r3
 8101e38:	f002 f82a 	bl	8103e90 <HAL_RCCEx_PeriphCLKConfig>
 8101e3c:	4603      	mov	r3, r0
 8101e3e:	2b00      	cmp	r3, #0
 8101e40:	d001      	beq.n	8101e46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101e42:	f7ff ffb9 	bl	8101db8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e46:	4b1d      	ldr	r3, [pc, #116]	; (8101ebc <HAL_I2C_MspInit+0xc4>)
 8101e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e4c:	4a1b      	ldr	r2, [pc, #108]	; (8101ebc <HAL_I2C_MspInit+0xc4>)
 8101e4e:	f043 0302 	orr.w	r3, r3, #2
 8101e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e56:	4b19      	ldr	r3, [pc, #100]	; (8101ebc <HAL_I2C_MspInit+0xc4>)
 8101e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e5c:	f003 0302 	and.w	r3, r3, #2
 8101e60:	60fb      	str	r3, [r7, #12]
 8101e62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8101e64:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101e6c:	2312      	movs	r3, #18
 8101e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e72:	2300      	movs	r3, #0
 8101e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e78:	2300      	movs	r3, #0
 8101e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101e7e:	2304      	movs	r3, #4
 8101e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101e84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e88:	4619      	mov	r1, r3
 8101e8a:	480d      	ldr	r0, [pc, #52]	; (8101ec0 <HAL_I2C_MspInit+0xc8>)
 8101e8c:	f000 fcc0 	bl	8102810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101e90:	4b0a      	ldr	r3, [pc, #40]	; (8101ebc <HAL_I2C_MspInit+0xc4>)
 8101e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e96:	4a09      	ldr	r2, [pc, #36]	; (8101ebc <HAL_I2C_MspInit+0xc4>)
 8101e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101ea0:	4b06      	ldr	r3, [pc, #24]	; (8101ebc <HAL_I2C_MspInit+0xc4>)
 8101ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101eaa:	60bb      	str	r3, [r7, #8]
 8101eac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101eae:	bf00      	nop
 8101eb0:	37e0      	adds	r7, #224	; 0xe0
 8101eb2:	46bd      	mov	sp, r7
 8101eb4:	bd80      	pop	{r7, pc}
 8101eb6:	bf00      	nop
 8101eb8:	40005400 	.word	0x40005400
 8101ebc:	58024400 	.word	0x58024400
 8101ec0:	58020400 	.word	0x58020400

08101ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101ec4:	b480      	push	{r7}
 8101ec6:	b085      	sub	sp, #20
 8101ec8:	af00      	add	r7, sp, #0
 8101eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	4a0b      	ldr	r2, [pc, #44]	; (8101f00 <HAL_TIM_Base_MspInit+0x3c>)
 8101ed2:	4293      	cmp	r3, r2
 8101ed4:	d10e      	bne.n	8101ef4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101ed6:	4b0b      	ldr	r3, [pc, #44]	; (8101f04 <HAL_TIM_Base_MspInit+0x40>)
 8101ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101edc:	4a09      	ldr	r2, [pc, #36]	; (8101f04 <HAL_TIM_Base_MspInit+0x40>)
 8101ede:	f043 0301 	orr.w	r3, r3, #1
 8101ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ee6:	4b07      	ldr	r3, [pc, #28]	; (8101f04 <HAL_TIM_Base_MspInit+0x40>)
 8101ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101eec:	f003 0301 	and.w	r3, r3, #1
 8101ef0:	60fb      	str	r3, [r7, #12]
 8101ef2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101ef4:	bf00      	nop
 8101ef6:	3714      	adds	r7, #20
 8101ef8:	46bd      	mov	sp, r7
 8101efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101efe:	4770      	bx	lr
 8101f00:	40010000 	.word	0x40010000
 8101f04:	58024400 	.word	0x58024400

08101f08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8101f08:	b580      	push	{r7, lr}
 8101f0a:	b090      	sub	sp, #64	; 0x40
 8101f0c:	af00      	add	r7, sp, #0
 8101f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101f14:	2200      	movs	r2, #0
 8101f16:	601a      	str	r2, [r3, #0]
 8101f18:	605a      	str	r2, [r3, #4]
 8101f1a:	609a      	str	r2, [r3, #8]
 8101f1c:	60da      	str	r2, [r3, #12]
 8101f1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	681b      	ldr	r3, [r3, #0]
 8101f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101f28:	d14d      	bne.n	8101fc6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101f2a:	4b6c      	ldr	r3, [pc, #432]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f30:	4a6a      	ldr	r2, [pc, #424]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f32:	f043 0301 	orr.w	r3, r3, #1
 8101f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f3a:	4b68      	ldr	r3, [pc, #416]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f40:	f003 0301 	and.w	r3, r3, #1
 8101f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8101f46:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101f48:	4b64      	ldr	r3, [pc, #400]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f4e:	4a63      	ldr	r2, [pc, #396]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f50:	f043 0301 	orr.w	r3, r3, #1
 8101f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f58:	4b60      	ldr	r3, [pc, #384]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f5e:	f003 0301 	and.w	r3, r3, #1
 8101f62:	627b      	str	r3, [r7, #36]	; 0x24
 8101f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101f66:	4b5d      	ldr	r3, [pc, #372]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f6c:	4a5b      	ldr	r2, [pc, #364]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f6e:	f043 0302 	orr.w	r3, r3, #2
 8101f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f76:	4b59      	ldr	r3, [pc, #356]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f7c:	f003 0302 	and.w	r3, r3, #2
 8101f80:	623b      	str	r3, [r7, #32]
 8101f82:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101f84:	2301      	movs	r3, #1
 8101f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f88:	2302      	movs	r3, #2
 8101f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f8c:	2300      	movs	r3, #0
 8101f8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f90:	2300      	movs	r3, #0
 8101f92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101f94:	2301      	movs	r3, #1
 8101f96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101f9c:	4619      	mov	r1, r3
 8101f9e:	4850      	ldr	r0, [pc, #320]	; (81020e0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8101fa0:	f000 fc36 	bl	8102810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101fa4:	2308      	movs	r3, #8
 8101fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fa8:	2302      	movs	r3, #2
 8101faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fac:	2300      	movs	r3, #0
 8101fae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fb0:	2300      	movs	r3, #0
 8101fb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101fb4:	2301      	movs	r3, #1
 8101fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101fbc:	4619      	mov	r1, r3
 8101fbe:	4849      	ldr	r0, [pc, #292]	; (81020e4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8101fc0:	f000 fc26 	bl	8102810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8101fc4:	e086      	b.n	81020d4 <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM3)
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	4a47      	ldr	r2, [pc, #284]	; (81020e8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8101fcc:	4293      	cmp	r3, r2
 8101fce:	d14d      	bne.n	810206c <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101fd0:	4b42      	ldr	r3, [pc, #264]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fd6:	4a41      	ldr	r2, [pc, #260]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fd8:	f043 0302 	orr.w	r3, r3, #2
 8101fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fe0:	4b3e      	ldr	r3, [pc, #248]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fe6:	f003 0302 	and.w	r3, r3, #2
 8101fea:	61fb      	str	r3, [r7, #28]
 8101fec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fee:	4b3b      	ldr	r3, [pc, #236]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ff4:	4a39      	ldr	r2, [pc, #228]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ff6:	f043 0301 	orr.w	r3, r3, #1
 8101ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ffe:	4b37      	ldr	r3, [pc, #220]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102004:	f003 0301 	and.w	r3, r3, #1
 8102008:	61bb      	str	r3, [r7, #24]
 810200a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810200c:	4b33      	ldr	r3, [pc, #204]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 810200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102012:	4a32      	ldr	r2, [pc, #200]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102014:	f043 0304 	orr.w	r3, r3, #4
 8102018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810201c:	4b2f      	ldr	r3, [pc, #188]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 810201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102022:	f003 0304 	and.w	r3, r3, #4
 8102026:	617b      	str	r3, [r7, #20]
 8102028:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 810202a:	2340      	movs	r3, #64	; 0x40
 810202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810202e:	2302      	movs	r3, #2
 8102030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102032:	2300      	movs	r3, #0
 8102034:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102036:	2300      	movs	r3, #0
 8102038:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 810203a:	2302      	movs	r3, #2
 810203c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810203e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102042:	4619      	mov	r1, r3
 8102044:	4826      	ldr	r0, [pc, #152]	; (81020e0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8102046:	f000 fbe3 	bl	8102810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 810204a:	2380      	movs	r3, #128	; 0x80
 810204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810204e:	2302      	movs	r3, #2
 8102050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102052:	2300      	movs	r3, #0
 8102054:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102056:	2300      	movs	r3, #0
 8102058:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 810205a:	2302      	movs	r3, #2
 810205c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810205e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102062:	4619      	mov	r1, r3
 8102064:	4821      	ldr	r0, [pc, #132]	; (81020ec <HAL_TIM_Encoder_MspInit+0x1e4>)
 8102066:	f000 fbd3 	bl	8102810 <HAL_GPIO_Init>
}
 810206a:	e033      	b.n	81020d4 <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM4)
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	4a1f      	ldr	r2, [pc, #124]	; (81020f0 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d12e      	bne.n	81020d4 <HAL_TIM_Encoder_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102076:	4b19      	ldr	r3, [pc, #100]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810207c:	4a17      	ldr	r2, [pc, #92]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 810207e:	f043 0304 	orr.w	r3, r3, #4
 8102082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102086:	4b15      	ldr	r3, [pc, #84]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810208c:	f003 0304 	and.w	r3, r3, #4
 8102090:	613b      	str	r3, [r7, #16]
 8102092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102094:	4b11      	ldr	r3, [pc, #68]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810209a:	4a10      	ldr	r2, [pc, #64]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 810209c:	f043 0308 	orr.w	r3, r3, #8
 81020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020a4:	4b0d      	ldr	r3, [pc, #52]	; (81020dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 81020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020aa:	f003 0308 	and.w	r3, r3, #8
 81020ae:	60fb      	str	r3, [r7, #12]
 81020b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 81020b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 81020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020b8:	2302      	movs	r3, #2
 81020ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020bc:	2300      	movs	r3, #0
 81020be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020c0:	2300      	movs	r3, #0
 81020c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 81020c4:	2302      	movs	r3, #2
 81020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81020c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81020cc:	4619      	mov	r1, r3
 81020ce:	4809      	ldr	r0, [pc, #36]	; (81020f4 <HAL_TIM_Encoder_MspInit+0x1ec>)
 81020d0:	f000 fb9e 	bl	8102810 <HAL_GPIO_Init>
}
 81020d4:	bf00      	nop
 81020d6:	3740      	adds	r7, #64	; 0x40
 81020d8:	46bd      	mov	sp, r7
 81020da:	bd80      	pop	{r7, pc}
 81020dc:	58024400 	.word	0x58024400
 81020e0:	58020000 	.word	0x58020000
 81020e4:	58020400 	.word	0x58020400
 81020e8:	40000400 	.word	0x40000400
 81020ec:	58020800 	.word	0x58020800
 81020f0:	40000800 	.word	0x40000800
 81020f4:	58020c00 	.word	0x58020c00

081020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	b088      	sub	sp, #32
 81020fc:	af00      	add	r7, sp, #0
 81020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102100:	f107 030c 	add.w	r3, r7, #12
 8102104:	2200      	movs	r2, #0
 8102106:	601a      	str	r2, [r3, #0]
 8102108:	605a      	str	r2, [r3, #4]
 810210a:	609a      	str	r2, [r3, #8]
 810210c:	60da      	str	r2, [r3, #12]
 810210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	4a13      	ldr	r2, [pc, #76]	; (8102164 <HAL_TIM_MspPostInit+0x6c>)
 8102116:	4293      	cmp	r3, r2
 8102118:	d11f      	bne.n	810215a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810211a:	4b13      	ldr	r3, [pc, #76]	; (8102168 <HAL_TIM_MspPostInit+0x70>)
 810211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102120:	4a11      	ldr	r2, [pc, #68]	; (8102168 <HAL_TIM_MspPostInit+0x70>)
 8102122:	f043 0310 	orr.w	r3, r3, #16
 8102126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810212a:	4b0f      	ldr	r3, [pc, #60]	; (8102168 <HAL_TIM_MspPostInit+0x70>)
 810212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102130:	f003 0310 	and.w	r3, r3, #16
 8102134:	60bb      	str	r3, [r7, #8]
 8102136:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8102138:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 810213c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810213e:	2302      	movs	r3, #2
 8102140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102142:	2300      	movs	r3, #0
 8102144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102146:	2300      	movs	r3, #0
 8102148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810214a:	2301      	movs	r3, #1
 810214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810214e:	f107 030c 	add.w	r3, r7, #12
 8102152:	4619      	mov	r1, r3
 8102154:	4805      	ldr	r0, [pc, #20]	; (810216c <HAL_TIM_MspPostInit+0x74>)
 8102156:	f000 fb5b 	bl	8102810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810215a:	bf00      	nop
 810215c:	3720      	adds	r7, #32
 810215e:	46bd      	mov	sp, r7
 8102160:	bd80      	pop	{r7, pc}
 8102162:	bf00      	nop
 8102164:	40010000 	.word	0x40010000
 8102168:	58024400 	.word	0x58024400
 810216c:	58021000 	.word	0x58021000

08102170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102170:	b580      	push	{r7, lr}
 8102172:	b0b8      	sub	sp, #224	; 0xe0
 8102174:	af00      	add	r7, sp, #0
 8102176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102178:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810217c:	2200      	movs	r2, #0
 810217e:	601a      	str	r2, [r3, #0]
 8102180:	605a      	str	r2, [r3, #4]
 8102182:	609a      	str	r2, [r3, #8]
 8102184:	60da      	str	r2, [r3, #12]
 8102186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102188:	f107 0310 	add.w	r3, r7, #16
 810218c:	22bc      	movs	r2, #188	; 0xbc
 810218e:	2100      	movs	r1, #0
 8102190:	4618      	mov	r0, r3
 8102192:	f005 fccb 	bl	8107b2c <memset>
  if(huart->Instance==USART3)
 8102196:	687b      	ldr	r3, [r7, #4]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	4a25      	ldr	r2, [pc, #148]	; (8102230 <HAL_UART_MspInit+0xc0>)
 810219c:	4293      	cmp	r3, r2
 810219e:	d142      	bne.n	8102226 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81021a0:	2302      	movs	r3, #2
 81021a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81021a4:	2300      	movs	r3, #0
 81021a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81021aa:	f107 0310 	add.w	r3, r7, #16
 81021ae:	4618      	mov	r0, r3
 81021b0:	f001 fe6e 	bl	8103e90 <HAL_RCCEx_PeriphCLKConfig>
 81021b4:	4603      	mov	r3, r0
 81021b6:	2b00      	cmp	r3, #0
 81021b8:	d001      	beq.n	81021be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81021ba:	f7ff fdfd 	bl	8101db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81021be:	4b1d      	ldr	r3, [pc, #116]	; (8102234 <HAL_UART_MspInit+0xc4>)
 81021c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81021c4:	4a1b      	ldr	r2, [pc, #108]	; (8102234 <HAL_UART_MspInit+0xc4>)
 81021c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81021ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81021ce:	4b19      	ldr	r3, [pc, #100]	; (8102234 <HAL_UART_MspInit+0xc4>)
 81021d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81021d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81021d8:	60fb      	str	r3, [r7, #12]
 81021da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81021dc:	4b15      	ldr	r3, [pc, #84]	; (8102234 <HAL_UART_MspInit+0xc4>)
 81021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021e2:	4a14      	ldr	r2, [pc, #80]	; (8102234 <HAL_UART_MspInit+0xc4>)
 81021e4:	f043 0308 	orr.w	r3, r3, #8
 81021e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021ec:	4b11      	ldr	r3, [pc, #68]	; (8102234 <HAL_UART_MspInit+0xc4>)
 81021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021f2:	f003 0308 	and.w	r3, r3, #8
 81021f6:	60bb      	str	r3, [r7, #8]
 81021f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81021fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 81021fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102202:	2302      	movs	r3, #2
 8102204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102208:	2300      	movs	r3, #0
 810220a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810220e:	2300      	movs	r3, #0
 8102210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102214:	2307      	movs	r3, #7
 8102216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810221a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810221e:	4619      	mov	r1, r3
 8102220:	4805      	ldr	r0, [pc, #20]	; (8102238 <HAL_UART_MspInit+0xc8>)
 8102222:	f000 faf5 	bl	8102810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102226:	bf00      	nop
 8102228:	37e0      	adds	r7, #224	; 0xe0
 810222a:	46bd      	mov	sp, r7
 810222c:	bd80      	pop	{r7, pc}
 810222e:	bf00      	nop
 8102230:	40004800 	.word	0x40004800
 8102234:	58024400 	.word	0x58024400
 8102238:	58020c00 	.word	0x58020c00

0810223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810223c:	b480      	push	{r7}
 810223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102240:	e7fe      	b.n	8102240 <NMI_Handler+0x4>

08102242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102242:	b480      	push	{r7}
 8102244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102246:	e7fe      	b.n	8102246 <HardFault_Handler+0x4>

08102248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102248:	b480      	push	{r7}
 810224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810224c:	e7fe      	b.n	810224c <MemManage_Handler+0x4>

0810224e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810224e:	b480      	push	{r7}
 8102250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102252:	e7fe      	b.n	8102252 <BusFault_Handler+0x4>

08102254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102254:	b480      	push	{r7}
 8102256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102258:	e7fe      	b.n	8102258 <UsageFault_Handler+0x4>

0810225a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810225a:	b480      	push	{r7}
 810225c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810225e:	bf00      	nop
 8102260:	46bd      	mov	sp, r7
 8102262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102266:	4770      	bx	lr

08102268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102268:	b480      	push	{r7}
 810226a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810226c:	bf00      	nop
 810226e:	46bd      	mov	sp, r7
 8102270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102274:	4770      	bx	lr

08102276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102276:	b480      	push	{r7}
 8102278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810227a:	bf00      	nop
 810227c:	46bd      	mov	sp, r7
 810227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102282:	4770      	bx	lr

08102284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102284:	b580      	push	{r7, lr}
 8102286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102288:	f000 f986 	bl	8102598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810228c:	bf00      	nop
 810228e:	bd80      	pop	{r7, pc}

08102290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102290:	b480      	push	{r7}
 8102292:	af00      	add	r7, sp, #0
	return 1;
 8102294:	2301      	movs	r3, #1
}
 8102296:	4618      	mov	r0, r3
 8102298:	46bd      	mov	sp, r7
 810229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810229e:	4770      	bx	lr

081022a0 <_kill>:

int _kill(int pid, int sig)
{
 81022a0:	b580      	push	{r7, lr}
 81022a2:	b082      	sub	sp, #8
 81022a4:	af00      	add	r7, sp, #0
 81022a6:	6078      	str	r0, [r7, #4]
 81022a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81022aa:	f005 fc15 	bl	8107ad8 <__errno>
 81022ae:	4603      	mov	r3, r0
 81022b0:	2216      	movs	r2, #22
 81022b2:	601a      	str	r2, [r3, #0]
	return -1;
 81022b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022b8:	4618      	mov	r0, r3
 81022ba:	3708      	adds	r7, #8
 81022bc:	46bd      	mov	sp, r7
 81022be:	bd80      	pop	{r7, pc}

081022c0 <_exit>:

void _exit (int status)
{
 81022c0:	b580      	push	{r7, lr}
 81022c2:	b082      	sub	sp, #8
 81022c4:	af00      	add	r7, sp, #0
 81022c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81022c8:	f04f 31ff 	mov.w	r1, #4294967295
 81022cc:	6878      	ldr	r0, [r7, #4]
 81022ce:	f7ff ffe7 	bl	81022a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 81022d2:	e7fe      	b.n	81022d2 <_exit+0x12>

081022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81022d4:	b580      	push	{r7, lr}
 81022d6:	b086      	sub	sp, #24
 81022d8:	af00      	add	r7, sp, #0
 81022da:	60f8      	str	r0, [r7, #12]
 81022dc:	60b9      	str	r1, [r7, #8]
 81022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022e0:	2300      	movs	r3, #0
 81022e2:	617b      	str	r3, [r7, #20]
 81022e4:	e00a      	b.n	81022fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81022e6:	f3af 8000 	nop.w
 81022ea:	4601      	mov	r1, r0
 81022ec:	68bb      	ldr	r3, [r7, #8]
 81022ee:	1c5a      	adds	r2, r3, #1
 81022f0:	60ba      	str	r2, [r7, #8]
 81022f2:	b2ca      	uxtb	r2, r1
 81022f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022f6:	697b      	ldr	r3, [r7, #20]
 81022f8:	3301      	adds	r3, #1
 81022fa:	617b      	str	r3, [r7, #20]
 81022fc:	697a      	ldr	r2, [r7, #20]
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	429a      	cmp	r2, r3
 8102302:	dbf0      	blt.n	81022e6 <_read+0x12>
	}

return len;
 8102304:	687b      	ldr	r3, [r7, #4]
}
 8102306:	4618      	mov	r0, r3
 8102308:	3718      	adds	r7, #24
 810230a:	46bd      	mov	sp, r7
 810230c:	bd80      	pop	{r7, pc}

0810230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810230e:	b580      	push	{r7, lr}
 8102310:	b086      	sub	sp, #24
 8102312:	af00      	add	r7, sp, #0
 8102314:	60f8      	str	r0, [r7, #12]
 8102316:	60b9      	str	r1, [r7, #8]
 8102318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810231a:	2300      	movs	r3, #0
 810231c:	617b      	str	r3, [r7, #20]
 810231e:	e009      	b.n	8102334 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102320:	68bb      	ldr	r3, [r7, #8]
 8102322:	1c5a      	adds	r2, r3, #1
 8102324:	60ba      	str	r2, [r7, #8]
 8102326:	781b      	ldrb	r3, [r3, #0]
 8102328:	4618      	mov	r0, r3
 810232a:	f7ff fcd7 	bl	8101cdc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810232e:	697b      	ldr	r3, [r7, #20]
 8102330:	3301      	adds	r3, #1
 8102332:	617b      	str	r3, [r7, #20]
 8102334:	697a      	ldr	r2, [r7, #20]
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	429a      	cmp	r2, r3
 810233a:	dbf1      	blt.n	8102320 <_write+0x12>
	}
	return len;
 810233c:	687b      	ldr	r3, [r7, #4]
}
 810233e:	4618      	mov	r0, r3
 8102340:	3718      	adds	r7, #24
 8102342:	46bd      	mov	sp, r7
 8102344:	bd80      	pop	{r7, pc}

08102346 <_close>:

int _close(int file)
{
 8102346:	b480      	push	{r7}
 8102348:	b083      	sub	sp, #12
 810234a:	af00      	add	r7, sp, #0
 810234c:	6078      	str	r0, [r7, #4]
	return -1;
 810234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102352:	4618      	mov	r0, r3
 8102354:	370c      	adds	r7, #12
 8102356:	46bd      	mov	sp, r7
 8102358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810235c:	4770      	bx	lr

0810235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810235e:	b480      	push	{r7}
 8102360:	b083      	sub	sp, #12
 8102362:	af00      	add	r7, sp, #0
 8102364:	6078      	str	r0, [r7, #4]
 8102366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102368:	683b      	ldr	r3, [r7, #0]
 810236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810236e:	605a      	str	r2, [r3, #4]
	return 0;
 8102370:	2300      	movs	r3, #0
}
 8102372:	4618      	mov	r0, r3
 8102374:	370c      	adds	r7, #12
 8102376:	46bd      	mov	sp, r7
 8102378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810237c:	4770      	bx	lr

0810237e <_isatty>:

int _isatty(int file)
{
 810237e:	b480      	push	{r7}
 8102380:	b083      	sub	sp, #12
 8102382:	af00      	add	r7, sp, #0
 8102384:	6078      	str	r0, [r7, #4]
	return 1;
 8102386:	2301      	movs	r3, #1
}
 8102388:	4618      	mov	r0, r3
 810238a:	370c      	adds	r7, #12
 810238c:	46bd      	mov	sp, r7
 810238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102392:	4770      	bx	lr

08102394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102394:	b480      	push	{r7}
 8102396:	b085      	sub	sp, #20
 8102398:	af00      	add	r7, sp, #0
 810239a:	60f8      	str	r0, [r7, #12]
 810239c:	60b9      	str	r1, [r7, #8]
 810239e:	607a      	str	r2, [r7, #4]
	return 0;
 81023a0:	2300      	movs	r3, #0
}
 81023a2:	4618      	mov	r0, r3
 81023a4:	3714      	adds	r7, #20
 81023a6:	46bd      	mov	sp, r7
 81023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ac:	4770      	bx	lr
	...

081023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81023b0:	b580      	push	{r7, lr}
 81023b2:	b086      	sub	sp, #24
 81023b4:	af00      	add	r7, sp, #0
 81023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81023b8:	4a14      	ldr	r2, [pc, #80]	; (810240c <_sbrk+0x5c>)
 81023ba:	4b15      	ldr	r3, [pc, #84]	; (8102410 <_sbrk+0x60>)
 81023bc:	1ad3      	subs	r3, r2, r3
 81023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81023c0:	697b      	ldr	r3, [r7, #20]
 81023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81023c4:	4b13      	ldr	r3, [pc, #76]	; (8102414 <_sbrk+0x64>)
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	2b00      	cmp	r3, #0
 81023ca:	d102      	bne.n	81023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81023cc:	4b11      	ldr	r3, [pc, #68]	; (8102414 <_sbrk+0x64>)
 81023ce:	4a12      	ldr	r2, [pc, #72]	; (8102418 <_sbrk+0x68>)
 81023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81023d2:	4b10      	ldr	r3, [pc, #64]	; (8102414 <_sbrk+0x64>)
 81023d4:	681a      	ldr	r2, [r3, #0]
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	4413      	add	r3, r2
 81023da:	693a      	ldr	r2, [r7, #16]
 81023dc:	429a      	cmp	r2, r3
 81023de:	d207      	bcs.n	81023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81023e0:	f005 fb7a 	bl	8107ad8 <__errno>
 81023e4:	4603      	mov	r3, r0
 81023e6:	220c      	movs	r2, #12
 81023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81023ea:	f04f 33ff 	mov.w	r3, #4294967295
 81023ee:	e009      	b.n	8102404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81023f0:	4b08      	ldr	r3, [pc, #32]	; (8102414 <_sbrk+0x64>)
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81023f6:	4b07      	ldr	r3, [pc, #28]	; (8102414 <_sbrk+0x64>)
 81023f8:	681a      	ldr	r2, [r3, #0]
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	4413      	add	r3, r2
 81023fe:	4a05      	ldr	r2, [pc, #20]	; (8102414 <_sbrk+0x64>)
 8102400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102402:	68fb      	ldr	r3, [r7, #12]
}
 8102404:	4618      	mov	r0, r3
 8102406:	3718      	adds	r7, #24
 8102408:	46bd      	mov	sp, r7
 810240a:	bd80      	pop	{r7, pc}
 810240c:	10048000 	.word	0x10048000
 8102410:	00000400 	.word	0x00000400
 8102414:	10000434 	.word	0x10000434
 8102418:	10000450 	.word	0x10000450

0810241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102454 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102420:	f7fe fe72 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102424:	480c      	ldr	r0, [pc, #48]	; (8102458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102426:	490d      	ldr	r1, [pc, #52]	; (810245c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102428:	4a0d      	ldr	r2, [pc, #52]	; (8102460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810242a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810242c:	e002      	b.n	8102434 <LoopCopyDataInit>

0810242e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810242e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102432:	3304      	adds	r3, #4

08102434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102438:	d3f9      	bcc.n	810242e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810243a:	4a0a      	ldr	r2, [pc, #40]	; (8102464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810243c:	4c0a      	ldr	r4, [pc, #40]	; (8102468 <LoopFillZerobss+0x22>)
  movs r3, #0
 810243e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102440:	e001      	b.n	8102446 <LoopFillZerobss>

08102442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102444:	3204      	adds	r2, #4

08102446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102448:	d3fb      	bcc.n	8102442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810244a:	f005 fb4b 	bl	8107ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810244e:	f7ff f8a7 	bl	81015a0 <main>
  bx  lr
 8102452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102454:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102458:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810245c:	100001f0 	.word	0x100001f0
  ldr r2, =_sidata
 8102460:	0810cb1c 	.word	0x0810cb1c
  ldr r2, =_sbss
 8102464:	100001f0 	.word	0x100001f0
  ldr r4, =_ebss
 8102468:	1000044c 	.word	0x1000044c

0810246c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810246c:	e7fe      	b.n	810246c <ADC3_IRQHandler>
	...

08102470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102470:	b580      	push	{r7, lr}
 8102472:	b082      	sub	sp, #8
 8102474:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102476:	4b28      	ldr	r3, [pc, #160]	; (8102518 <HAL_Init+0xa8>)
 8102478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810247c:	4a26      	ldr	r2, [pc, #152]	; (8102518 <HAL_Init+0xa8>)
 810247e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102486:	4b24      	ldr	r3, [pc, #144]	; (8102518 <HAL_Init+0xa8>)
 8102488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810248c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102490:	603b      	str	r3, [r7, #0]
 8102492:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102494:	4b21      	ldr	r3, [pc, #132]	; (810251c <HAL_Init+0xac>)
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810249c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81024a0:	4a1e      	ldr	r2, [pc, #120]	; (810251c <HAL_Init+0xac>)
 81024a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81024a6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81024a8:	4b1c      	ldr	r3, [pc, #112]	; (810251c <HAL_Init+0xac>)
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	4a1b      	ldr	r2, [pc, #108]	; (810251c <HAL_Init+0xac>)
 81024ae:	f043 0301 	orr.w	r3, r3, #1
 81024b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81024b4:	2003      	movs	r0, #3
 81024b6:	f000 f965 	bl	8102784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81024ba:	f001 fb11 	bl	8103ae0 <HAL_RCC_GetSysClockFreq>
 81024be:	4602      	mov	r2, r0
 81024c0:	4b15      	ldr	r3, [pc, #84]	; (8102518 <HAL_Init+0xa8>)
 81024c2:	699b      	ldr	r3, [r3, #24]
 81024c4:	0a1b      	lsrs	r3, r3, #8
 81024c6:	f003 030f 	and.w	r3, r3, #15
 81024ca:	4915      	ldr	r1, [pc, #84]	; (8102520 <HAL_Init+0xb0>)
 81024cc:	5ccb      	ldrb	r3, [r1, r3]
 81024ce:	f003 031f 	and.w	r3, r3, #31
 81024d2:	fa22 f303 	lsr.w	r3, r2, r3
 81024d6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024d8:	4b0f      	ldr	r3, [pc, #60]	; (8102518 <HAL_Init+0xa8>)
 81024da:	699b      	ldr	r3, [r3, #24]
 81024dc:	f003 030f 	and.w	r3, r3, #15
 81024e0:	4a0f      	ldr	r2, [pc, #60]	; (8102520 <HAL_Init+0xb0>)
 81024e2:	5cd3      	ldrb	r3, [r2, r3]
 81024e4:	f003 031f 	and.w	r3, r3, #31
 81024e8:	687a      	ldr	r2, [r7, #4]
 81024ea:	fa22 f303 	lsr.w	r3, r2, r3
 81024ee:	4a0d      	ldr	r2, [pc, #52]	; (8102524 <HAL_Init+0xb4>)
 81024f0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81024f2:	4b0c      	ldr	r3, [pc, #48]	; (8102524 <HAL_Init+0xb4>)
 81024f4:	681b      	ldr	r3, [r3, #0]
 81024f6:	4a0c      	ldr	r2, [pc, #48]	; (8102528 <HAL_Init+0xb8>)
 81024f8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81024fa:	2000      	movs	r0, #0
 81024fc:	f000 f816 	bl	810252c <HAL_InitTick>
 8102500:	4603      	mov	r3, r0
 8102502:	2b00      	cmp	r3, #0
 8102504:	d001      	beq.n	810250a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102506:	2301      	movs	r3, #1
 8102508:	e002      	b.n	8102510 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810250a:	f7ff fc5b 	bl	8101dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810250e:	2300      	movs	r3, #0
}
 8102510:	4618      	mov	r0, r3
 8102512:	3708      	adds	r7, #8
 8102514:	46bd      	mov	sp, r7
 8102516:	bd80      	pop	{r7, pc}
 8102518:	58024400 	.word	0x58024400
 810251c:	40024400 	.word	0x40024400
 8102520:	0810c624 	.word	0x0810c624
 8102524:	10000004 	.word	0x10000004
 8102528:	10000000 	.word	0x10000000

0810252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810252c:	b580      	push	{r7, lr}
 810252e:	b082      	sub	sp, #8
 8102530:	af00      	add	r7, sp, #0
 8102532:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102534:	4b15      	ldr	r3, [pc, #84]	; (810258c <HAL_InitTick+0x60>)
 8102536:	781b      	ldrb	r3, [r3, #0]
 8102538:	2b00      	cmp	r3, #0
 810253a:	d101      	bne.n	8102540 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810253c:	2301      	movs	r3, #1
 810253e:	e021      	b.n	8102584 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102540:	4b13      	ldr	r3, [pc, #76]	; (8102590 <HAL_InitTick+0x64>)
 8102542:	681a      	ldr	r2, [r3, #0]
 8102544:	4b11      	ldr	r3, [pc, #68]	; (810258c <HAL_InitTick+0x60>)
 8102546:	781b      	ldrb	r3, [r3, #0]
 8102548:	4619      	mov	r1, r3
 810254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102552:	fbb2 f3f3 	udiv	r3, r2, r3
 8102556:	4618      	mov	r0, r3
 8102558:	f000 f939 	bl	81027ce <HAL_SYSTICK_Config>
 810255c:	4603      	mov	r3, r0
 810255e:	2b00      	cmp	r3, #0
 8102560:	d001      	beq.n	8102566 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102562:	2301      	movs	r3, #1
 8102564:	e00e      	b.n	8102584 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	2b0f      	cmp	r3, #15
 810256a:	d80a      	bhi.n	8102582 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810256c:	2200      	movs	r2, #0
 810256e:	6879      	ldr	r1, [r7, #4]
 8102570:	f04f 30ff 	mov.w	r0, #4294967295
 8102574:	f000 f911 	bl	810279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102578:	4a06      	ldr	r2, [pc, #24]	; (8102594 <HAL_InitTick+0x68>)
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810257e:	2300      	movs	r3, #0
 8102580:	e000      	b.n	8102584 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102582:	2301      	movs	r3, #1
}
 8102584:	4618      	mov	r0, r3
 8102586:	3708      	adds	r7, #8
 8102588:	46bd      	mov	sp, r7
 810258a:	bd80      	pop	{r7, pc}
 810258c:	10000018 	.word	0x10000018
 8102590:	10000000 	.word	0x10000000
 8102594:	10000014 	.word	0x10000014

08102598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102598:	b480      	push	{r7}
 810259a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810259c:	4b06      	ldr	r3, [pc, #24]	; (81025b8 <HAL_IncTick+0x20>)
 810259e:	781b      	ldrb	r3, [r3, #0]
 81025a0:	461a      	mov	r2, r3
 81025a2:	4b06      	ldr	r3, [pc, #24]	; (81025bc <HAL_IncTick+0x24>)
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	4413      	add	r3, r2
 81025a8:	4a04      	ldr	r2, [pc, #16]	; (81025bc <HAL_IncTick+0x24>)
 81025aa:	6013      	str	r3, [r2, #0]
}
 81025ac:	bf00      	nop
 81025ae:	46bd      	mov	sp, r7
 81025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025b4:	4770      	bx	lr
 81025b6:	bf00      	nop
 81025b8:	10000018 	.word	0x10000018
 81025bc:	10000438 	.word	0x10000438

081025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81025c0:	b480      	push	{r7}
 81025c2:	af00      	add	r7, sp, #0
  return uwTick;
 81025c4:	4b03      	ldr	r3, [pc, #12]	; (81025d4 <HAL_GetTick+0x14>)
 81025c6:	681b      	ldr	r3, [r3, #0]
}
 81025c8:	4618      	mov	r0, r3
 81025ca:	46bd      	mov	sp, r7
 81025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d0:	4770      	bx	lr
 81025d2:	bf00      	nop
 81025d4:	10000438 	.word	0x10000438

081025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81025d8:	b580      	push	{r7, lr}
 81025da:	b084      	sub	sp, #16
 81025dc:	af00      	add	r7, sp, #0
 81025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81025e0:	f7ff ffee 	bl	81025c0 <HAL_GetTick>
 81025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025f0:	d005      	beq.n	81025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81025f2:	4b0a      	ldr	r3, [pc, #40]	; (810261c <HAL_Delay+0x44>)
 81025f4:	781b      	ldrb	r3, [r3, #0]
 81025f6:	461a      	mov	r2, r3
 81025f8:	68fb      	ldr	r3, [r7, #12]
 81025fa:	4413      	add	r3, r2
 81025fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81025fe:	bf00      	nop
 8102600:	f7ff ffde 	bl	81025c0 <HAL_GetTick>
 8102604:	4602      	mov	r2, r0
 8102606:	68bb      	ldr	r3, [r7, #8]
 8102608:	1ad3      	subs	r3, r2, r3
 810260a:	68fa      	ldr	r2, [r7, #12]
 810260c:	429a      	cmp	r2, r3
 810260e:	d8f7      	bhi.n	8102600 <HAL_Delay+0x28>
  {
  }
}
 8102610:	bf00      	nop
 8102612:	bf00      	nop
 8102614:	3710      	adds	r7, #16
 8102616:	46bd      	mov	sp, r7
 8102618:	bd80      	pop	{r7, pc}
 810261a:	bf00      	nop
 810261c:	10000018 	.word	0x10000018

08102620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102620:	b480      	push	{r7}
 8102622:	b085      	sub	sp, #20
 8102624:	af00      	add	r7, sp, #0
 8102626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	f003 0307 	and.w	r3, r3, #7
 810262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102630:	4b0c      	ldr	r3, [pc, #48]	; (8102664 <__NVIC_SetPriorityGrouping+0x44>)
 8102632:	68db      	ldr	r3, [r3, #12]
 8102634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102636:	68ba      	ldr	r2, [r7, #8]
 8102638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810263c:	4013      	ands	r3, r2
 810263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102640:	68fb      	ldr	r3, [r7, #12]
 8102642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102644:	68bb      	ldr	r3, [r7, #8]
 8102646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102652:	4a04      	ldr	r2, [pc, #16]	; (8102664 <__NVIC_SetPriorityGrouping+0x44>)
 8102654:	68bb      	ldr	r3, [r7, #8]
 8102656:	60d3      	str	r3, [r2, #12]
}
 8102658:	bf00      	nop
 810265a:	3714      	adds	r7, #20
 810265c:	46bd      	mov	sp, r7
 810265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102662:	4770      	bx	lr
 8102664:	e000ed00 	.word	0xe000ed00

08102668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102668:	b480      	push	{r7}
 810266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810266c:	4b04      	ldr	r3, [pc, #16]	; (8102680 <__NVIC_GetPriorityGrouping+0x18>)
 810266e:	68db      	ldr	r3, [r3, #12]
 8102670:	0a1b      	lsrs	r3, r3, #8
 8102672:	f003 0307 	and.w	r3, r3, #7
}
 8102676:	4618      	mov	r0, r3
 8102678:	46bd      	mov	sp, r7
 810267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810267e:	4770      	bx	lr
 8102680:	e000ed00 	.word	0xe000ed00

08102684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102684:	b480      	push	{r7}
 8102686:	b083      	sub	sp, #12
 8102688:	af00      	add	r7, sp, #0
 810268a:	4603      	mov	r3, r0
 810268c:	6039      	str	r1, [r7, #0]
 810268e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102694:	2b00      	cmp	r3, #0
 8102696:	db0a      	blt.n	81026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102698:	683b      	ldr	r3, [r7, #0]
 810269a:	b2da      	uxtb	r2, r3
 810269c:	490c      	ldr	r1, [pc, #48]	; (81026d0 <__NVIC_SetPriority+0x4c>)
 810269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81026a2:	0112      	lsls	r2, r2, #4
 81026a4:	b2d2      	uxtb	r2, r2
 81026a6:	440b      	add	r3, r1
 81026a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81026ac:	e00a      	b.n	81026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81026ae:	683b      	ldr	r3, [r7, #0]
 81026b0:	b2da      	uxtb	r2, r3
 81026b2:	4908      	ldr	r1, [pc, #32]	; (81026d4 <__NVIC_SetPriority+0x50>)
 81026b4:	88fb      	ldrh	r3, [r7, #6]
 81026b6:	f003 030f 	and.w	r3, r3, #15
 81026ba:	3b04      	subs	r3, #4
 81026bc:	0112      	lsls	r2, r2, #4
 81026be:	b2d2      	uxtb	r2, r2
 81026c0:	440b      	add	r3, r1
 81026c2:	761a      	strb	r2, [r3, #24]
}
 81026c4:	bf00      	nop
 81026c6:	370c      	adds	r7, #12
 81026c8:	46bd      	mov	sp, r7
 81026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026ce:	4770      	bx	lr
 81026d0:	e000e100 	.word	0xe000e100
 81026d4:	e000ed00 	.word	0xe000ed00

081026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81026d8:	b480      	push	{r7}
 81026da:	b089      	sub	sp, #36	; 0x24
 81026dc:	af00      	add	r7, sp, #0
 81026de:	60f8      	str	r0, [r7, #12]
 81026e0:	60b9      	str	r1, [r7, #8]
 81026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	f003 0307 	and.w	r3, r3, #7
 81026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81026ec:	69fb      	ldr	r3, [r7, #28]
 81026ee:	f1c3 0307 	rsb	r3, r3, #7
 81026f2:	2b04      	cmp	r3, #4
 81026f4:	bf28      	it	cs
 81026f6:	2304      	movcs	r3, #4
 81026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81026fa:	69fb      	ldr	r3, [r7, #28]
 81026fc:	3304      	adds	r3, #4
 81026fe:	2b06      	cmp	r3, #6
 8102700:	d902      	bls.n	8102708 <NVIC_EncodePriority+0x30>
 8102702:	69fb      	ldr	r3, [r7, #28]
 8102704:	3b03      	subs	r3, #3
 8102706:	e000      	b.n	810270a <NVIC_EncodePriority+0x32>
 8102708:	2300      	movs	r3, #0
 810270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810270c:	f04f 32ff 	mov.w	r2, #4294967295
 8102710:	69bb      	ldr	r3, [r7, #24]
 8102712:	fa02 f303 	lsl.w	r3, r2, r3
 8102716:	43da      	mvns	r2, r3
 8102718:	68bb      	ldr	r3, [r7, #8]
 810271a:	401a      	ands	r2, r3
 810271c:	697b      	ldr	r3, [r7, #20]
 810271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102720:	f04f 31ff 	mov.w	r1, #4294967295
 8102724:	697b      	ldr	r3, [r7, #20]
 8102726:	fa01 f303 	lsl.w	r3, r1, r3
 810272a:	43d9      	mvns	r1, r3
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102730:	4313      	orrs	r3, r2
         );
}
 8102732:	4618      	mov	r0, r3
 8102734:	3724      	adds	r7, #36	; 0x24
 8102736:	46bd      	mov	sp, r7
 8102738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810273c:	4770      	bx	lr
	...

08102740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102740:	b580      	push	{r7, lr}
 8102742:	b082      	sub	sp, #8
 8102744:	af00      	add	r7, sp, #0
 8102746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	3b01      	subs	r3, #1
 810274c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102750:	d301      	bcc.n	8102756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102752:	2301      	movs	r3, #1
 8102754:	e00f      	b.n	8102776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102756:	4a0a      	ldr	r2, [pc, #40]	; (8102780 <SysTick_Config+0x40>)
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	3b01      	subs	r3, #1
 810275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810275e:	210f      	movs	r1, #15
 8102760:	f04f 30ff 	mov.w	r0, #4294967295
 8102764:	f7ff ff8e 	bl	8102684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102768:	4b05      	ldr	r3, [pc, #20]	; (8102780 <SysTick_Config+0x40>)
 810276a:	2200      	movs	r2, #0
 810276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810276e:	4b04      	ldr	r3, [pc, #16]	; (8102780 <SysTick_Config+0x40>)
 8102770:	2207      	movs	r2, #7
 8102772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102774:	2300      	movs	r3, #0
}
 8102776:	4618      	mov	r0, r3
 8102778:	3708      	adds	r7, #8
 810277a:	46bd      	mov	sp, r7
 810277c:	bd80      	pop	{r7, pc}
 810277e:	bf00      	nop
 8102780:	e000e010 	.word	0xe000e010

08102784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102784:	b580      	push	{r7, lr}
 8102786:	b082      	sub	sp, #8
 8102788:	af00      	add	r7, sp, #0
 810278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810278c:	6878      	ldr	r0, [r7, #4]
 810278e:	f7ff ff47 	bl	8102620 <__NVIC_SetPriorityGrouping>
}
 8102792:	bf00      	nop
 8102794:	3708      	adds	r7, #8
 8102796:	46bd      	mov	sp, r7
 8102798:	bd80      	pop	{r7, pc}

0810279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810279a:	b580      	push	{r7, lr}
 810279c:	b086      	sub	sp, #24
 810279e:	af00      	add	r7, sp, #0
 81027a0:	4603      	mov	r3, r0
 81027a2:	60b9      	str	r1, [r7, #8]
 81027a4:	607a      	str	r2, [r7, #4]
 81027a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81027a8:	f7ff ff5e 	bl	8102668 <__NVIC_GetPriorityGrouping>
 81027ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81027ae:	687a      	ldr	r2, [r7, #4]
 81027b0:	68b9      	ldr	r1, [r7, #8]
 81027b2:	6978      	ldr	r0, [r7, #20]
 81027b4:	f7ff ff90 	bl	81026d8 <NVIC_EncodePriority>
 81027b8:	4602      	mov	r2, r0
 81027ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81027be:	4611      	mov	r1, r2
 81027c0:	4618      	mov	r0, r3
 81027c2:	f7ff ff5f 	bl	8102684 <__NVIC_SetPriority>
}
 81027c6:	bf00      	nop
 81027c8:	3718      	adds	r7, #24
 81027ca:	46bd      	mov	sp, r7
 81027cc:	bd80      	pop	{r7, pc}

081027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81027ce:	b580      	push	{r7, lr}
 81027d0:	b082      	sub	sp, #8
 81027d2:	af00      	add	r7, sp, #0
 81027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81027d6:	6878      	ldr	r0, [r7, #4]
 81027d8:	f7ff ffb2 	bl	8102740 <SysTick_Config>
 81027dc:	4603      	mov	r3, r0
}
 81027de:	4618      	mov	r0, r3
 81027e0:	3708      	adds	r7, #8
 81027e2:	46bd      	mov	sp, r7
 81027e4:	bd80      	pop	{r7, pc}
	...

081027e8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81027e8:	b480      	push	{r7}
 81027ea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81027ec:	4b07      	ldr	r3, [pc, #28]	; (810280c <HAL_GetCurrentCPUID+0x24>)
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	091b      	lsrs	r3, r3, #4
 81027f2:	f003 030f 	and.w	r3, r3, #15
 81027f6:	2b07      	cmp	r3, #7
 81027f8:	d101      	bne.n	81027fe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81027fa:	2303      	movs	r3, #3
 81027fc:	e000      	b.n	8102800 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81027fe:	2301      	movs	r3, #1
  }
}
 8102800:	4618      	mov	r0, r3
 8102802:	46bd      	mov	sp, r7
 8102804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102808:	4770      	bx	lr
 810280a:	bf00      	nop
 810280c:	e000ed00 	.word	0xe000ed00

08102810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102810:	b480      	push	{r7}
 8102812:	b089      	sub	sp, #36	; 0x24
 8102814:	af00      	add	r7, sp, #0
 8102816:	6078      	str	r0, [r7, #4]
 8102818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810281a:	2300      	movs	r3, #0
 810281c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810281e:	4b89      	ldr	r3, [pc, #548]	; (8102a44 <HAL_GPIO_Init+0x234>)
 8102820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102822:	e194      	b.n	8102b4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102824:	683b      	ldr	r3, [r7, #0]
 8102826:	681a      	ldr	r2, [r3, #0]
 8102828:	2101      	movs	r1, #1
 810282a:	69fb      	ldr	r3, [r7, #28]
 810282c:	fa01 f303 	lsl.w	r3, r1, r3
 8102830:	4013      	ands	r3, r2
 8102832:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102834:	693b      	ldr	r3, [r7, #16]
 8102836:	2b00      	cmp	r3, #0
 8102838:	f000 8186 	beq.w	8102b48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810283c:	683b      	ldr	r3, [r7, #0]
 810283e:	685b      	ldr	r3, [r3, #4]
 8102840:	f003 0303 	and.w	r3, r3, #3
 8102844:	2b01      	cmp	r3, #1
 8102846:	d005      	beq.n	8102854 <HAL_GPIO_Init+0x44>
 8102848:	683b      	ldr	r3, [r7, #0]
 810284a:	685b      	ldr	r3, [r3, #4]
 810284c:	f003 0303 	and.w	r3, r3, #3
 8102850:	2b02      	cmp	r3, #2
 8102852:	d130      	bne.n	81028b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	689b      	ldr	r3, [r3, #8]
 8102858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810285a:	69fb      	ldr	r3, [r7, #28]
 810285c:	005b      	lsls	r3, r3, #1
 810285e:	2203      	movs	r2, #3
 8102860:	fa02 f303 	lsl.w	r3, r2, r3
 8102864:	43db      	mvns	r3, r3
 8102866:	69ba      	ldr	r2, [r7, #24]
 8102868:	4013      	ands	r3, r2
 810286a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810286c:	683b      	ldr	r3, [r7, #0]
 810286e:	68da      	ldr	r2, [r3, #12]
 8102870:	69fb      	ldr	r3, [r7, #28]
 8102872:	005b      	lsls	r3, r3, #1
 8102874:	fa02 f303 	lsl.w	r3, r2, r3
 8102878:	69ba      	ldr	r2, [r7, #24]
 810287a:	4313      	orrs	r3, r2
 810287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	69ba      	ldr	r2, [r7, #24]
 8102882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	685b      	ldr	r3, [r3, #4]
 8102888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810288a:	2201      	movs	r2, #1
 810288c:	69fb      	ldr	r3, [r7, #28]
 810288e:	fa02 f303 	lsl.w	r3, r2, r3
 8102892:	43db      	mvns	r3, r3
 8102894:	69ba      	ldr	r2, [r7, #24]
 8102896:	4013      	ands	r3, r2
 8102898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810289a:	683b      	ldr	r3, [r7, #0]
 810289c:	685b      	ldr	r3, [r3, #4]
 810289e:	091b      	lsrs	r3, r3, #4
 81028a0:	f003 0201 	and.w	r2, r3, #1
 81028a4:	69fb      	ldr	r3, [r7, #28]
 81028a6:	fa02 f303 	lsl.w	r3, r2, r3
 81028aa:	69ba      	ldr	r2, [r7, #24]
 81028ac:	4313      	orrs	r3, r2
 81028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	69ba      	ldr	r2, [r7, #24]
 81028b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81028b6:	683b      	ldr	r3, [r7, #0]
 81028b8:	685b      	ldr	r3, [r3, #4]
 81028ba:	f003 0303 	and.w	r3, r3, #3
 81028be:	2b03      	cmp	r3, #3
 81028c0:	d017      	beq.n	81028f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	68db      	ldr	r3, [r3, #12]
 81028c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81028c8:	69fb      	ldr	r3, [r7, #28]
 81028ca:	005b      	lsls	r3, r3, #1
 81028cc:	2203      	movs	r2, #3
 81028ce:	fa02 f303 	lsl.w	r3, r2, r3
 81028d2:	43db      	mvns	r3, r3
 81028d4:	69ba      	ldr	r2, [r7, #24]
 81028d6:	4013      	ands	r3, r2
 81028d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81028da:	683b      	ldr	r3, [r7, #0]
 81028dc:	689a      	ldr	r2, [r3, #8]
 81028de:	69fb      	ldr	r3, [r7, #28]
 81028e0:	005b      	lsls	r3, r3, #1
 81028e2:	fa02 f303 	lsl.w	r3, r2, r3
 81028e6:	69ba      	ldr	r2, [r7, #24]
 81028e8:	4313      	orrs	r3, r2
 81028ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	69ba      	ldr	r2, [r7, #24]
 81028f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81028f2:	683b      	ldr	r3, [r7, #0]
 81028f4:	685b      	ldr	r3, [r3, #4]
 81028f6:	f003 0303 	and.w	r3, r3, #3
 81028fa:	2b02      	cmp	r3, #2
 81028fc:	d123      	bne.n	8102946 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81028fe:	69fb      	ldr	r3, [r7, #28]
 8102900:	08da      	lsrs	r2, r3, #3
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	3208      	adds	r2, #8
 8102906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810290c:	69fb      	ldr	r3, [r7, #28]
 810290e:	f003 0307 	and.w	r3, r3, #7
 8102912:	009b      	lsls	r3, r3, #2
 8102914:	220f      	movs	r2, #15
 8102916:	fa02 f303 	lsl.w	r3, r2, r3
 810291a:	43db      	mvns	r3, r3
 810291c:	69ba      	ldr	r2, [r7, #24]
 810291e:	4013      	ands	r3, r2
 8102920:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102922:	683b      	ldr	r3, [r7, #0]
 8102924:	691a      	ldr	r2, [r3, #16]
 8102926:	69fb      	ldr	r3, [r7, #28]
 8102928:	f003 0307 	and.w	r3, r3, #7
 810292c:	009b      	lsls	r3, r3, #2
 810292e:	fa02 f303 	lsl.w	r3, r2, r3
 8102932:	69ba      	ldr	r2, [r7, #24]
 8102934:	4313      	orrs	r3, r2
 8102936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102938:	69fb      	ldr	r3, [r7, #28]
 810293a:	08da      	lsrs	r2, r3, #3
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	3208      	adds	r2, #8
 8102940:	69b9      	ldr	r1, [r7, #24]
 8102942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810294c:	69fb      	ldr	r3, [r7, #28]
 810294e:	005b      	lsls	r3, r3, #1
 8102950:	2203      	movs	r2, #3
 8102952:	fa02 f303 	lsl.w	r3, r2, r3
 8102956:	43db      	mvns	r3, r3
 8102958:	69ba      	ldr	r2, [r7, #24]
 810295a:	4013      	ands	r3, r2
 810295c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810295e:	683b      	ldr	r3, [r7, #0]
 8102960:	685b      	ldr	r3, [r3, #4]
 8102962:	f003 0203 	and.w	r2, r3, #3
 8102966:	69fb      	ldr	r3, [r7, #28]
 8102968:	005b      	lsls	r3, r3, #1
 810296a:	fa02 f303 	lsl.w	r3, r2, r3
 810296e:	69ba      	ldr	r2, [r7, #24]
 8102970:	4313      	orrs	r3, r2
 8102972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	69ba      	ldr	r2, [r7, #24]
 8102978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810297a:	683b      	ldr	r3, [r7, #0]
 810297c:	685b      	ldr	r3, [r3, #4]
 810297e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102982:	2b00      	cmp	r3, #0
 8102984:	f000 80e0 	beq.w	8102b48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102988:	4b2f      	ldr	r3, [pc, #188]	; (8102a48 <HAL_GPIO_Init+0x238>)
 810298a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810298e:	4a2e      	ldr	r2, [pc, #184]	; (8102a48 <HAL_GPIO_Init+0x238>)
 8102990:	f043 0302 	orr.w	r3, r3, #2
 8102994:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102998:	4b2b      	ldr	r3, [pc, #172]	; (8102a48 <HAL_GPIO_Init+0x238>)
 810299a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810299e:	f003 0302 	and.w	r3, r3, #2
 81029a2:	60fb      	str	r3, [r7, #12]
 81029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81029a6:	4a29      	ldr	r2, [pc, #164]	; (8102a4c <HAL_GPIO_Init+0x23c>)
 81029a8:	69fb      	ldr	r3, [r7, #28]
 81029aa:	089b      	lsrs	r3, r3, #2
 81029ac:	3302      	adds	r3, #2
 81029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81029b4:	69fb      	ldr	r3, [r7, #28]
 81029b6:	f003 0303 	and.w	r3, r3, #3
 81029ba:	009b      	lsls	r3, r3, #2
 81029bc:	220f      	movs	r2, #15
 81029be:	fa02 f303 	lsl.w	r3, r2, r3
 81029c2:	43db      	mvns	r3, r3
 81029c4:	69ba      	ldr	r2, [r7, #24]
 81029c6:	4013      	ands	r3, r2
 81029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	4a20      	ldr	r2, [pc, #128]	; (8102a50 <HAL_GPIO_Init+0x240>)
 81029ce:	4293      	cmp	r3, r2
 81029d0:	d052      	beq.n	8102a78 <HAL_GPIO_Init+0x268>
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	4a1f      	ldr	r2, [pc, #124]	; (8102a54 <HAL_GPIO_Init+0x244>)
 81029d6:	4293      	cmp	r3, r2
 81029d8:	d031      	beq.n	8102a3e <HAL_GPIO_Init+0x22e>
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	4a1e      	ldr	r2, [pc, #120]	; (8102a58 <HAL_GPIO_Init+0x248>)
 81029de:	4293      	cmp	r3, r2
 81029e0:	d02b      	beq.n	8102a3a <HAL_GPIO_Init+0x22a>
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	4a1d      	ldr	r2, [pc, #116]	; (8102a5c <HAL_GPIO_Init+0x24c>)
 81029e6:	4293      	cmp	r3, r2
 81029e8:	d025      	beq.n	8102a36 <HAL_GPIO_Init+0x226>
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	4a1c      	ldr	r2, [pc, #112]	; (8102a60 <HAL_GPIO_Init+0x250>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d01f      	beq.n	8102a32 <HAL_GPIO_Init+0x222>
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	4a1b      	ldr	r2, [pc, #108]	; (8102a64 <HAL_GPIO_Init+0x254>)
 81029f6:	4293      	cmp	r3, r2
 81029f8:	d019      	beq.n	8102a2e <HAL_GPIO_Init+0x21e>
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	4a1a      	ldr	r2, [pc, #104]	; (8102a68 <HAL_GPIO_Init+0x258>)
 81029fe:	4293      	cmp	r3, r2
 8102a00:	d013      	beq.n	8102a2a <HAL_GPIO_Init+0x21a>
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	4a19      	ldr	r2, [pc, #100]	; (8102a6c <HAL_GPIO_Init+0x25c>)
 8102a06:	4293      	cmp	r3, r2
 8102a08:	d00d      	beq.n	8102a26 <HAL_GPIO_Init+0x216>
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	4a18      	ldr	r2, [pc, #96]	; (8102a70 <HAL_GPIO_Init+0x260>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d007      	beq.n	8102a22 <HAL_GPIO_Init+0x212>
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	4a17      	ldr	r2, [pc, #92]	; (8102a74 <HAL_GPIO_Init+0x264>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d101      	bne.n	8102a1e <HAL_GPIO_Init+0x20e>
 8102a1a:	2309      	movs	r3, #9
 8102a1c:	e02d      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a1e:	230a      	movs	r3, #10
 8102a20:	e02b      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a22:	2308      	movs	r3, #8
 8102a24:	e029      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a26:	2307      	movs	r3, #7
 8102a28:	e027      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a2a:	2306      	movs	r3, #6
 8102a2c:	e025      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a2e:	2305      	movs	r3, #5
 8102a30:	e023      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a32:	2304      	movs	r3, #4
 8102a34:	e021      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a36:	2303      	movs	r3, #3
 8102a38:	e01f      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a3a:	2302      	movs	r3, #2
 8102a3c:	e01d      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a3e:	2301      	movs	r3, #1
 8102a40:	e01b      	b.n	8102a7a <HAL_GPIO_Init+0x26a>
 8102a42:	bf00      	nop
 8102a44:	580000c0 	.word	0x580000c0
 8102a48:	58024400 	.word	0x58024400
 8102a4c:	58000400 	.word	0x58000400
 8102a50:	58020000 	.word	0x58020000
 8102a54:	58020400 	.word	0x58020400
 8102a58:	58020800 	.word	0x58020800
 8102a5c:	58020c00 	.word	0x58020c00
 8102a60:	58021000 	.word	0x58021000
 8102a64:	58021400 	.word	0x58021400
 8102a68:	58021800 	.word	0x58021800
 8102a6c:	58021c00 	.word	0x58021c00
 8102a70:	58022000 	.word	0x58022000
 8102a74:	58022400 	.word	0x58022400
 8102a78:	2300      	movs	r3, #0
 8102a7a:	69fa      	ldr	r2, [r7, #28]
 8102a7c:	f002 0203 	and.w	r2, r2, #3
 8102a80:	0092      	lsls	r2, r2, #2
 8102a82:	4093      	lsls	r3, r2
 8102a84:	69ba      	ldr	r2, [r7, #24]
 8102a86:	4313      	orrs	r3, r2
 8102a88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102a8a:	4938      	ldr	r1, [pc, #224]	; (8102b6c <HAL_GPIO_Init+0x35c>)
 8102a8c:	69fb      	ldr	r3, [r7, #28]
 8102a8e:	089b      	lsrs	r3, r3, #2
 8102a90:	3302      	adds	r3, #2
 8102a92:	69ba      	ldr	r2, [r7, #24]
 8102a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102a9c:	681b      	ldr	r3, [r3, #0]
 8102a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102aa0:	693b      	ldr	r3, [r7, #16]
 8102aa2:	43db      	mvns	r3, r3
 8102aa4:	69ba      	ldr	r2, [r7, #24]
 8102aa6:	4013      	ands	r3, r2
 8102aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102aaa:	683b      	ldr	r3, [r7, #0]
 8102aac:	685b      	ldr	r3, [r3, #4]
 8102aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102ab2:	2b00      	cmp	r3, #0
 8102ab4:	d003      	beq.n	8102abe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102ab6:	69ba      	ldr	r2, [r7, #24]
 8102ab8:	693b      	ldr	r3, [r7, #16]
 8102aba:	4313      	orrs	r3, r2
 8102abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102ac2:	69bb      	ldr	r3, [r7, #24]
 8102ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102aca:	685b      	ldr	r3, [r3, #4]
 8102acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ace:	693b      	ldr	r3, [r7, #16]
 8102ad0:	43db      	mvns	r3, r3
 8102ad2:	69ba      	ldr	r2, [r7, #24]
 8102ad4:	4013      	ands	r3, r2
 8102ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102ad8:	683b      	ldr	r3, [r7, #0]
 8102ada:	685b      	ldr	r3, [r3, #4]
 8102adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102ae0:	2b00      	cmp	r3, #0
 8102ae2:	d003      	beq.n	8102aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102ae4:	69ba      	ldr	r2, [r7, #24]
 8102ae6:	693b      	ldr	r3, [r7, #16]
 8102ae8:	4313      	orrs	r3, r2
 8102aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102af0:	69bb      	ldr	r3, [r7, #24]
 8102af2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102af4:	697b      	ldr	r3, [r7, #20]
 8102af6:	685b      	ldr	r3, [r3, #4]
 8102af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102afa:	693b      	ldr	r3, [r7, #16]
 8102afc:	43db      	mvns	r3, r3
 8102afe:	69ba      	ldr	r2, [r7, #24]
 8102b00:	4013      	ands	r3, r2
 8102b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102b04:	683b      	ldr	r3, [r7, #0]
 8102b06:	685b      	ldr	r3, [r3, #4]
 8102b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102b0c:	2b00      	cmp	r3, #0
 8102b0e:	d003      	beq.n	8102b18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102b10:	69ba      	ldr	r2, [r7, #24]
 8102b12:	693b      	ldr	r3, [r7, #16]
 8102b14:	4313      	orrs	r3, r2
 8102b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102b18:	697b      	ldr	r3, [r7, #20]
 8102b1a:	69ba      	ldr	r2, [r7, #24]
 8102b1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102b1e:	697b      	ldr	r3, [r7, #20]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102b24:	693b      	ldr	r3, [r7, #16]
 8102b26:	43db      	mvns	r3, r3
 8102b28:	69ba      	ldr	r2, [r7, #24]
 8102b2a:	4013      	ands	r3, r2
 8102b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102b2e:	683b      	ldr	r3, [r7, #0]
 8102b30:	685b      	ldr	r3, [r3, #4]
 8102b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102b36:	2b00      	cmp	r3, #0
 8102b38:	d003      	beq.n	8102b42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102b3a:	69ba      	ldr	r2, [r7, #24]
 8102b3c:	693b      	ldr	r3, [r7, #16]
 8102b3e:	4313      	orrs	r3, r2
 8102b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102b42:	697b      	ldr	r3, [r7, #20]
 8102b44:	69ba      	ldr	r2, [r7, #24]
 8102b46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102b48:	69fb      	ldr	r3, [r7, #28]
 8102b4a:	3301      	adds	r3, #1
 8102b4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102b4e:	683b      	ldr	r3, [r7, #0]
 8102b50:	681a      	ldr	r2, [r3, #0]
 8102b52:	69fb      	ldr	r3, [r7, #28]
 8102b54:	fa22 f303 	lsr.w	r3, r2, r3
 8102b58:	2b00      	cmp	r3, #0
 8102b5a:	f47f ae63 	bne.w	8102824 <HAL_GPIO_Init+0x14>
  }
}
 8102b5e:	bf00      	nop
 8102b60:	bf00      	nop
 8102b62:	3724      	adds	r7, #36	; 0x24
 8102b64:	46bd      	mov	sp, r7
 8102b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b6a:	4770      	bx	lr
 8102b6c:	58000400 	.word	0x58000400

08102b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102b70:	b480      	push	{r7}
 8102b72:	b083      	sub	sp, #12
 8102b74:	af00      	add	r7, sp, #0
 8102b76:	6078      	str	r0, [r7, #4]
 8102b78:	460b      	mov	r3, r1
 8102b7a:	807b      	strh	r3, [r7, #2]
 8102b7c:	4613      	mov	r3, r2
 8102b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102b80:	787b      	ldrb	r3, [r7, #1]
 8102b82:	2b00      	cmp	r3, #0
 8102b84:	d003      	beq.n	8102b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102b86:	887a      	ldrh	r2, [r7, #2]
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102b8c:	e003      	b.n	8102b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102b8e:	887b      	ldrh	r3, [r7, #2]
 8102b90:	041a      	lsls	r2, r3, #16
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	619a      	str	r2, [r3, #24]
}
 8102b96:	bf00      	nop
 8102b98:	370c      	adds	r7, #12
 8102b9a:	46bd      	mov	sp, r7
 8102b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba0:	4770      	bx	lr
	...

08102ba4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102ba4:	b480      	push	{r7}
 8102ba6:	b083      	sub	sp, #12
 8102ba8:	af00      	add	r7, sp, #0
 8102baa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102bac:	4b05      	ldr	r3, [pc, #20]	; (8102bc4 <HAL_HSEM_ActivateNotification+0x20>)
 8102bae:	681a      	ldr	r2, [r3, #0]
 8102bb0:	4904      	ldr	r1, [pc, #16]	; (8102bc4 <HAL_HSEM_ActivateNotification+0x20>)
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	4313      	orrs	r3, r2
 8102bb6:	600b      	str	r3, [r1, #0]
#endif
}
 8102bb8:	bf00      	nop
 8102bba:	370c      	adds	r7, #12
 8102bbc:	46bd      	mov	sp, r7
 8102bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc2:	4770      	bx	lr
 8102bc4:	58026510 	.word	0x58026510

08102bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102bc8:	b580      	push	{r7, lr}
 8102bca:	b082      	sub	sp, #8
 8102bcc:	af00      	add	r7, sp, #0
 8102bce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	2b00      	cmp	r3, #0
 8102bd4:	d101      	bne.n	8102bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102bd6:	2301      	movs	r3, #1
 8102bd8:	e081      	b.n	8102cde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102be0:	b2db      	uxtb	r3, r3
 8102be2:	2b00      	cmp	r3, #0
 8102be4:	d106      	bne.n	8102bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	2200      	movs	r2, #0
 8102bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102bee:	6878      	ldr	r0, [r7, #4]
 8102bf0:	f7ff f902 	bl	8101df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	2224      	movs	r2, #36	; 0x24
 8102bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	681a      	ldr	r2, [r3, #0]
 8102c02:	687b      	ldr	r3, [r7, #4]
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	f022 0201 	bic.w	r2, r2, #1
 8102c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	685a      	ldr	r2, [r3, #4]
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102c18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	689a      	ldr	r2, [r3, #8]
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102c28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	68db      	ldr	r3, [r3, #12]
 8102c2e:	2b01      	cmp	r3, #1
 8102c30:	d107      	bne.n	8102c42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	689a      	ldr	r2, [r3, #8]
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102c3e:	609a      	str	r2, [r3, #8]
 8102c40:	e006      	b.n	8102c50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	689a      	ldr	r2, [r3, #8]
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102c4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	68db      	ldr	r3, [r3, #12]
 8102c54:	2b02      	cmp	r3, #2
 8102c56:	d104      	bne.n	8102c62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102c60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	685b      	ldr	r3, [r3, #4]
 8102c68:	687a      	ldr	r2, [r7, #4]
 8102c6a:	6812      	ldr	r2, [r2, #0]
 8102c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102c74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	68da      	ldr	r2, [r3, #12]
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102c84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	691a      	ldr	r2, [r3, #16]
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	695b      	ldr	r3, [r3, #20]
 8102c8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	699b      	ldr	r3, [r3, #24]
 8102c96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	681b      	ldr	r3, [r3, #0]
 8102c9c:	430a      	orrs	r2, r1
 8102c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	69d9      	ldr	r1, [r3, #28]
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	6a1a      	ldr	r2, [r3, #32]
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	430a      	orrs	r2, r1
 8102cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	681a      	ldr	r2, [r3, #0]
 8102cb6:	687b      	ldr	r3, [r7, #4]
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	f042 0201 	orr.w	r2, r2, #1
 8102cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	2200      	movs	r2, #0
 8102cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102cc6:	687b      	ldr	r3, [r7, #4]
 8102cc8:	2220      	movs	r2, #32
 8102cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102cce:	687b      	ldr	r3, [r7, #4]
 8102cd0:	2200      	movs	r2, #0
 8102cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	2200      	movs	r2, #0
 8102cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102cdc:	2300      	movs	r3, #0
}
 8102cde:	4618      	mov	r0, r3
 8102ce0:	3708      	adds	r7, #8
 8102ce2:	46bd      	mov	sp, r7
 8102ce4:	bd80      	pop	{r7, pc}
	...

08102ce8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102ce8:	b580      	push	{r7, lr}
 8102cea:	b088      	sub	sp, #32
 8102cec:	af02      	add	r7, sp, #8
 8102cee:	60f8      	str	r0, [r7, #12]
 8102cf0:	4608      	mov	r0, r1
 8102cf2:	4611      	mov	r1, r2
 8102cf4:	461a      	mov	r2, r3
 8102cf6:	4603      	mov	r3, r0
 8102cf8:	817b      	strh	r3, [r7, #10]
 8102cfa:	460b      	mov	r3, r1
 8102cfc:	813b      	strh	r3, [r7, #8]
 8102cfe:	4613      	mov	r3, r2
 8102d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102d02:	68fb      	ldr	r3, [r7, #12]
 8102d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102d08:	b2db      	uxtb	r3, r3
 8102d0a:	2b20      	cmp	r3, #32
 8102d0c:	f040 80f9 	bne.w	8102f02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102d10:	6a3b      	ldr	r3, [r7, #32]
 8102d12:	2b00      	cmp	r3, #0
 8102d14:	d002      	beq.n	8102d1c <HAL_I2C_Mem_Write+0x34>
 8102d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d105      	bne.n	8102d28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102d22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102d24:	2301      	movs	r3, #1
 8102d26:	e0ed      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102d2e:	2b01      	cmp	r3, #1
 8102d30:	d101      	bne.n	8102d36 <HAL_I2C_Mem_Write+0x4e>
 8102d32:	2302      	movs	r3, #2
 8102d34:	e0e6      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	2201      	movs	r2, #1
 8102d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102d3e:	f7ff fc3f 	bl	81025c0 <HAL_GetTick>
 8102d42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102d44:	697b      	ldr	r3, [r7, #20]
 8102d46:	9300      	str	r3, [sp, #0]
 8102d48:	2319      	movs	r3, #25
 8102d4a:	2201      	movs	r2, #1
 8102d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102d50:	68f8      	ldr	r0, [r7, #12]
 8102d52:	f000 fbcb 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 8102d56:	4603      	mov	r3, r0
 8102d58:	2b00      	cmp	r3, #0
 8102d5a:	d001      	beq.n	8102d60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102d5c:	2301      	movs	r3, #1
 8102d5e:	e0d1      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102d60:	68fb      	ldr	r3, [r7, #12]
 8102d62:	2221      	movs	r2, #33	; 0x21
 8102d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	2240      	movs	r2, #64	; 0x40
 8102d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102d70:	68fb      	ldr	r3, [r7, #12]
 8102d72:	2200      	movs	r2, #0
 8102d74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	6a3a      	ldr	r2, [r7, #32]
 8102d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102d82:	68fb      	ldr	r3, [r7, #12]
 8102d84:	2200      	movs	r2, #0
 8102d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102d88:	88f8      	ldrh	r0, [r7, #6]
 8102d8a:	893a      	ldrh	r2, [r7, #8]
 8102d8c:	8979      	ldrh	r1, [r7, #10]
 8102d8e:	697b      	ldr	r3, [r7, #20]
 8102d90:	9301      	str	r3, [sp, #4]
 8102d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d94:	9300      	str	r3, [sp, #0]
 8102d96:	4603      	mov	r3, r0
 8102d98:	68f8      	ldr	r0, [r7, #12]
 8102d9a:	f000 fadb 	bl	8103354 <I2C_RequestMemoryWrite>
 8102d9e:	4603      	mov	r3, r0
 8102da0:	2b00      	cmp	r3, #0
 8102da2:	d005      	beq.n	8102db0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	2200      	movs	r2, #0
 8102da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102dac:	2301      	movs	r3, #1
 8102dae:	e0a9      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102db0:	68fb      	ldr	r3, [r7, #12]
 8102db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102db4:	b29b      	uxth	r3, r3
 8102db6:	2bff      	cmp	r3, #255	; 0xff
 8102db8:	d90e      	bls.n	8102dd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102dba:	68fb      	ldr	r3, [r7, #12]
 8102dbc:	22ff      	movs	r2, #255	; 0xff
 8102dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102dc4:	b2da      	uxtb	r2, r3
 8102dc6:	8979      	ldrh	r1, [r7, #10]
 8102dc8:	2300      	movs	r3, #0
 8102dca:	9300      	str	r3, [sp, #0]
 8102dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102dd0:	68f8      	ldr	r0, [r7, #12]
 8102dd2:	f000 fd33 	bl	810383c <I2C_TransferConfig>
 8102dd6:	e00f      	b.n	8102df8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ddc:	b29a      	uxth	r2, r3
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102de2:	68fb      	ldr	r3, [r7, #12]
 8102de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102de6:	b2da      	uxtb	r2, r3
 8102de8:	8979      	ldrh	r1, [r7, #10]
 8102dea:	2300      	movs	r3, #0
 8102dec:	9300      	str	r3, [sp, #0]
 8102dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102df2:	68f8      	ldr	r0, [r7, #12]
 8102df4:	f000 fd22 	bl	810383c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102df8:	697a      	ldr	r2, [r7, #20]
 8102dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102dfc:	68f8      	ldr	r0, [r7, #12]
 8102dfe:	f000 fbb5 	bl	810356c <I2C_WaitOnTXISFlagUntilTimeout>
 8102e02:	4603      	mov	r3, r0
 8102e04:	2b00      	cmp	r3, #0
 8102e06:	d001      	beq.n	8102e0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102e08:	2301      	movs	r3, #1
 8102e0a:	e07b      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102e10:	781a      	ldrb	r2, [r3, #0]
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102e18:	68fb      	ldr	r3, [r7, #12]
 8102e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102e1c:	1c5a      	adds	r2, r3, #1
 8102e1e:	68fb      	ldr	r3, [r7, #12]
 8102e20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102e22:	68fb      	ldr	r3, [r7, #12]
 8102e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e26:	b29b      	uxth	r3, r3
 8102e28:	3b01      	subs	r3, #1
 8102e2a:	b29a      	uxth	r2, r3
 8102e2c:	68fb      	ldr	r3, [r7, #12]
 8102e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102e30:	68fb      	ldr	r3, [r7, #12]
 8102e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e34:	3b01      	subs	r3, #1
 8102e36:	b29a      	uxth	r2, r3
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e40:	b29b      	uxth	r3, r3
 8102e42:	2b00      	cmp	r3, #0
 8102e44:	d034      	beq.n	8102eb0 <HAL_I2C_Mem_Write+0x1c8>
 8102e46:	68fb      	ldr	r3, [r7, #12]
 8102e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e4a:	2b00      	cmp	r3, #0
 8102e4c:	d130      	bne.n	8102eb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102e4e:	697b      	ldr	r3, [r7, #20]
 8102e50:	9300      	str	r3, [sp, #0]
 8102e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102e54:	2200      	movs	r2, #0
 8102e56:	2180      	movs	r1, #128	; 0x80
 8102e58:	68f8      	ldr	r0, [r7, #12]
 8102e5a:	f000 fb47 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 8102e5e:	4603      	mov	r3, r0
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	d001      	beq.n	8102e68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8102e64:	2301      	movs	r3, #1
 8102e66:	e04d      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e6c:	b29b      	uxth	r3, r3
 8102e6e:	2bff      	cmp	r3, #255	; 0xff
 8102e70:	d90e      	bls.n	8102e90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102e72:	68fb      	ldr	r3, [r7, #12]
 8102e74:	22ff      	movs	r2, #255	; 0xff
 8102e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102e78:	68fb      	ldr	r3, [r7, #12]
 8102e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e7c:	b2da      	uxtb	r2, r3
 8102e7e:	8979      	ldrh	r1, [r7, #10]
 8102e80:	2300      	movs	r3, #0
 8102e82:	9300      	str	r3, [sp, #0]
 8102e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102e88:	68f8      	ldr	r0, [r7, #12]
 8102e8a:	f000 fcd7 	bl	810383c <I2C_TransferConfig>
 8102e8e:	e00f      	b.n	8102eb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102e90:	68fb      	ldr	r3, [r7, #12]
 8102e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e94:	b29a      	uxth	r2, r3
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102e9a:	68fb      	ldr	r3, [r7, #12]
 8102e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e9e:	b2da      	uxtb	r2, r3
 8102ea0:	8979      	ldrh	r1, [r7, #10]
 8102ea2:	2300      	movs	r3, #0
 8102ea4:	9300      	str	r3, [sp, #0]
 8102ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102eaa:	68f8      	ldr	r0, [r7, #12]
 8102eac:	f000 fcc6 	bl	810383c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8102eb0:	68fb      	ldr	r3, [r7, #12]
 8102eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102eb4:	b29b      	uxth	r3, r3
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d19e      	bne.n	8102df8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102eba:	697a      	ldr	r2, [r7, #20]
 8102ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102ebe:	68f8      	ldr	r0, [r7, #12]
 8102ec0:	f000 fb94 	bl	81035ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8102ec4:	4603      	mov	r3, r0
 8102ec6:	2b00      	cmp	r3, #0
 8102ec8:	d001      	beq.n	8102ece <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102eca:	2301      	movs	r3, #1
 8102ecc:	e01a      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	2220      	movs	r2, #32
 8102ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102ed6:	68fb      	ldr	r3, [r7, #12]
 8102ed8:	681b      	ldr	r3, [r3, #0]
 8102eda:	6859      	ldr	r1, [r3, #4]
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	681a      	ldr	r2, [r3, #0]
 8102ee0:	4b0a      	ldr	r3, [pc, #40]	; (8102f0c <HAL_I2C_Mem_Write+0x224>)
 8102ee2:	400b      	ands	r3, r1
 8102ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102ee6:	68fb      	ldr	r3, [r7, #12]
 8102ee8:	2220      	movs	r2, #32
 8102eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	2200      	movs	r2, #0
 8102ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102ef6:	68fb      	ldr	r3, [r7, #12]
 8102ef8:	2200      	movs	r2, #0
 8102efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102efe:	2300      	movs	r3, #0
 8102f00:	e000      	b.n	8102f04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102f02:	2302      	movs	r3, #2
  }
}
 8102f04:	4618      	mov	r0, r3
 8102f06:	3718      	adds	r7, #24
 8102f08:	46bd      	mov	sp, r7
 8102f0a:	bd80      	pop	{r7, pc}
 8102f0c:	fe00e800 	.word	0xfe00e800

08102f10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102f10:	b580      	push	{r7, lr}
 8102f12:	b088      	sub	sp, #32
 8102f14:	af02      	add	r7, sp, #8
 8102f16:	60f8      	str	r0, [r7, #12]
 8102f18:	4608      	mov	r0, r1
 8102f1a:	4611      	mov	r1, r2
 8102f1c:	461a      	mov	r2, r3
 8102f1e:	4603      	mov	r3, r0
 8102f20:	817b      	strh	r3, [r7, #10]
 8102f22:	460b      	mov	r3, r1
 8102f24:	813b      	strh	r3, [r7, #8]
 8102f26:	4613      	mov	r3, r2
 8102f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102f2a:	68fb      	ldr	r3, [r7, #12]
 8102f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102f30:	b2db      	uxtb	r3, r3
 8102f32:	2b20      	cmp	r3, #32
 8102f34:	f040 80fd 	bne.w	8103132 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102f38:	6a3b      	ldr	r3, [r7, #32]
 8102f3a:	2b00      	cmp	r3, #0
 8102f3c:	d002      	beq.n	8102f44 <HAL_I2C_Mem_Read+0x34>
 8102f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d105      	bne.n	8102f50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102f44:	68fb      	ldr	r3, [r7, #12]
 8102f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102f4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102f4c:	2301      	movs	r3, #1
 8102f4e:	e0f1      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102f50:	68fb      	ldr	r3, [r7, #12]
 8102f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102f56:	2b01      	cmp	r3, #1
 8102f58:	d101      	bne.n	8102f5e <HAL_I2C_Mem_Read+0x4e>
 8102f5a:	2302      	movs	r3, #2
 8102f5c:	e0ea      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
 8102f5e:	68fb      	ldr	r3, [r7, #12]
 8102f60:	2201      	movs	r2, #1
 8102f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102f66:	f7ff fb2b 	bl	81025c0 <HAL_GetTick>
 8102f6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102f6c:	697b      	ldr	r3, [r7, #20]
 8102f6e:	9300      	str	r3, [sp, #0]
 8102f70:	2319      	movs	r3, #25
 8102f72:	2201      	movs	r2, #1
 8102f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102f78:	68f8      	ldr	r0, [r7, #12]
 8102f7a:	f000 fab7 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 8102f7e:	4603      	mov	r3, r0
 8102f80:	2b00      	cmp	r3, #0
 8102f82:	d001      	beq.n	8102f88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102f84:	2301      	movs	r3, #1
 8102f86:	e0d5      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102f88:	68fb      	ldr	r3, [r7, #12]
 8102f8a:	2222      	movs	r2, #34	; 0x22
 8102f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102f90:	68fb      	ldr	r3, [r7, #12]
 8102f92:	2240      	movs	r2, #64	; 0x40
 8102f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102f98:	68fb      	ldr	r3, [r7, #12]
 8102f9a:	2200      	movs	r2, #0
 8102f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	6a3a      	ldr	r2, [r7, #32]
 8102fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102faa:	68fb      	ldr	r3, [r7, #12]
 8102fac:	2200      	movs	r2, #0
 8102fae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102fb0:	88f8      	ldrh	r0, [r7, #6]
 8102fb2:	893a      	ldrh	r2, [r7, #8]
 8102fb4:	8979      	ldrh	r1, [r7, #10]
 8102fb6:	697b      	ldr	r3, [r7, #20]
 8102fb8:	9301      	str	r3, [sp, #4]
 8102fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102fbc:	9300      	str	r3, [sp, #0]
 8102fbe:	4603      	mov	r3, r0
 8102fc0:	68f8      	ldr	r0, [r7, #12]
 8102fc2:	f000 fa1b 	bl	81033fc <I2C_RequestMemoryRead>
 8102fc6:	4603      	mov	r3, r0
 8102fc8:	2b00      	cmp	r3, #0
 8102fca:	d005      	beq.n	8102fd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102fcc:	68fb      	ldr	r3, [r7, #12]
 8102fce:	2200      	movs	r2, #0
 8102fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102fd4:	2301      	movs	r3, #1
 8102fd6:	e0ad      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102fd8:	68fb      	ldr	r3, [r7, #12]
 8102fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102fdc:	b29b      	uxth	r3, r3
 8102fde:	2bff      	cmp	r3, #255	; 0xff
 8102fe0:	d90e      	bls.n	8103000 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102fe2:	68fb      	ldr	r3, [r7, #12]
 8102fe4:	22ff      	movs	r2, #255	; 0xff
 8102fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102fe8:	68fb      	ldr	r3, [r7, #12]
 8102fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102fec:	b2da      	uxtb	r2, r3
 8102fee:	8979      	ldrh	r1, [r7, #10]
 8102ff0:	4b52      	ldr	r3, [pc, #328]	; (810313c <HAL_I2C_Mem_Read+0x22c>)
 8102ff2:	9300      	str	r3, [sp, #0]
 8102ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102ff8:	68f8      	ldr	r0, [r7, #12]
 8102ffa:	f000 fc1f 	bl	810383c <I2C_TransferConfig>
 8102ffe:	e00f      	b.n	8103020 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103000:	68fb      	ldr	r3, [r7, #12]
 8103002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103004:	b29a      	uxth	r2, r3
 8103006:	68fb      	ldr	r3, [r7, #12]
 8103008:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810300e:	b2da      	uxtb	r2, r3
 8103010:	8979      	ldrh	r1, [r7, #10]
 8103012:	4b4a      	ldr	r3, [pc, #296]	; (810313c <HAL_I2C_Mem_Read+0x22c>)
 8103014:	9300      	str	r3, [sp, #0]
 8103016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810301a:	68f8      	ldr	r0, [r7, #12]
 810301c:	f000 fc0e 	bl	810383c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8103020:	697b      	ldr	r3, [r7, #20]
 8103022:	9300      	str	r3, [sp, #0]
 8103024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103026:	2200      	movs	r2, #0
 8103028:	2104      	movs	r1, #4
 810302a:	68f8      	ldr	r0, [r7, #12]
 810302c:	f000 fa5e 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 8103030:	4603      	mov	r3, r0
 8103032:	2b00      	cmp	r3, #0
 8103034:	d001      	beq.n	810303a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8103036:	2301      	movs	r3, #1
 8103038:	e07c      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810303a:	68fb      	ldr	r3, [r7, #12]
 810303c:	681b      	ldr	r3, [r3, #0]
 810303e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103040:	68fb      	ldr	r3, [r7, #12]
 8103042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103044:	b2d2      	uxtb	r2, r2
 8103046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103048:	68fb      	ldr	r3, [r7, #12]
 810304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810304c:	1c5a      	adds	r2, r3, #1
 810304e:	68fb      	ldr	r3, [r7, #12]
 8103050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8103052:	68fb      	ldr	r3, [r7, #12]
 8103054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103056:	3b01      	subs	r3, #1
 8103058:	b29a      	uxth	r2, r3
 810305a:	68fb      	ldr	r3, [r7, #12]
 810305c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103062:	b29b      	uxth	r3, r3
 8103064:	3b01      	subs	r3, #1
 8103066:	b29a      	uxth	r2, r3
 8103068:	68fb      	ldr	r3, [r7, #12]
 810306a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810306c:	68fb      	ldr	r3, [r7, #12]
 810306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103070:	b29b      	uxth	r3, r3
 8103072:	2b00      	cmp	r3, #0
 8103074:	d034      	beq.n	81030e0 <HAL_I2C_Mem_Read+0x1d0>
 8103076:	68fb      	ldr	r3, [r7, #12]
 8103078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810307a:	2b00      	cmp	r3, #0
 810307c:	d130      	bne.n	81030e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810307e:	697b      	ldr	r3, [r7, #20]
 8103080:	9300      	str	r3, [sp, #0]
 8103082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103084:	2200      	movs	r2, #0
 8103086:	2180      	movs	r1, #128	; 0x80
 8103088:	68f8      	ldr	r0, [r7, #12]
 810308a:	f000 fa2f 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 810308e:	4603      	mov	r3, r0
 8103090:	2b00      	cmp	r3, #0
 8103092:	d001      	beq.n	8103098 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8103094:	2301      	movs	r3, #1
 8103096:	e04d      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103098:	68fb      	ldr	r3, [r7, #12]
 810309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810309c:	b29b      	uxth	r3, r3
 810309e:	2bff      	cmp	r3, #255	; 0xff
 81030a0:	d90e      	bls.n	81030c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81030a2:	68fb      	ldr	r3, [r7, #12]
 81030a4:	22ff      	movs	r2, #255	; 0xff
 81030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 81030a8:	68fb      	ldr	r3, [r7, #12]
 81030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81030ac:	b2da      	uxtb	r2, r3
 81030ae:	8979      	ldrh	r1, [r7, #10]
 81030b0:	2300      	movs	r3, #0
 81030b2:	9300      	str	r3, [sp, #0]
 81030b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81030b8:	68f8      	ldr	r0, [r7, #12]
 81030ba:	f000 fbbf 	bl	810383c <I2C_TransferConfig>
 81030be:	e00f      	b.n	81030e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81030c4:	b29a      	uxth	r2, r3
 81030c6:	68fb      	ldr	r3, [r7, #12]
 81030c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81030ca:	68fb      	ldr	r3, [r7, #12]
 81030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81030ce:	b2da      	uxtb	r2, r3
 81030d0:	8979      	ldrh	r1, [r7, #10]
 81030d2:	2300      	movs	r3, #0
 81030d4:	9300      	str	r3, [sp, #0]
 81030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81030da:	68f8      	ldr	r0, [r7, #12]
 81030dc:	f000 fbae 	bl	810383c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 81030e0:	68fb      	ldr	r3, [r7, #12]
 81030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81030e4:	b29b      	uxth	r3, r3
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	d19a      	bne.n	8103020 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81030ea:	697a      	ldr	r2, [r7, #20]
 81030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81030ee:	68f8      	ldr	r0, [r7, #12]
 81030f0:	f000 fa7c 	bl	81035ec <I2C_WaitOnSTOPFlagUntilTimeout>
 81030f4:	4603      	mov	r3, r0
 81030f6:	2b00      	cmp	r3, #0
 81030f8:	d001      	beq.n	81030fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81030fa:	2301      	movs	r3, #1
 81030fc:	e01a      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81030fe:	68fb      	ldr	r3, [r7, #12]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	2220      	movs	r2, #32
 8103104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103106:	68fb      	ldr	r3, [r7, #12]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	6859      	ldr	r1, [r3, #4]
 810310c:	68fb      	ldr	r3, [r7, #12]
 810310e:	681a      	ldr	r2, [r3, #0]
 8103110:	4b0b      	ldr	r3, [pc, #44]	; (8103140 <HAL_I2C_Mem_Read+0x230>)
 8103112:	400b      	ands	r3, r1
 8103114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103116:	68fb      	ldr	r3, [r7, #12]
 8103118:	2220      	movs	r2, #32
 810311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810311e:	68fb      	ldr	r3, [r7, #12]
 8103120:	2200      	movs	r2, #0
 8103122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103126:	68fb      	ldr	r3, [r7, #12]
 8103128:	2200      	movs	r2, #0
 810312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810312e:	2300      	movs	r3, #0
 8103130:	e000      	b.n	8103134 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8103132:	2302      	movs	r3, #2
  }
}
 8103134:	4618      	mov	r0, r3
 8103136:	3718      	adds	r7, #24
 8103138:	46bd      	mov	sp, r7
 810313a:	bd80      	pop	{r7, pc}
 810313c:	80002400 	.word	0x80002400
 8103140:	fe00e800 	.word	0xfe00e800

08103144 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8103144:	b580      	push	{r7, lr}
 8103146:	b08a      	sub	sp, #40	; 0x28
 8103148:	af02      	add	r7, sp, #8
 810314a:	60f8      	str	r0, [r7, #12]
 810314c:	607a      	str	r2, [r7, #4]
 810314e:	603b      	str	r3, [r7, #0]
 8103150:	460b      	mov	r3, r1
 8103152:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8103154:	2300      	movs	r3, #0
 8103156:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103158:	68fb      	ldr	r3, [r7, #12]
 810315a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810315e:	b2db      	uxtb	r3, r3
 8103160:	2b20      	cmp	r3, #32
 8103162:	f040 80f1 	bne.w	8103348 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8103166:	68fb      	ldr	r3, [r7, #12]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	699b      	ldr	r3, [r3, #24]
 810316c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103174:	d101      	bne.n	810317a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8103176:	2302      	movs	r3, #2
 8103178:	e0e7      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810317a:	68fb      	ldr	r3, [r7, #12]
 810317c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103180:	2b01      	cmp	r3, #1
 8103182:	d101      	bne.n	8103188 <HAL_I2C_IsDeviceReady+0x44>
 8103184:	2302      	movs	r3, #2
 8103186:	e0e0      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
 8103188:	68fb      	ldr	r3, [r7, #12]
 810318a:	2201      	movs	r2, #1
 810318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103190:	68fb      	ldr	r3, [r7, #12]
 8103192:	2224      	movs	r2, #36	; 0x24
 8103194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	2200      	movs	r2, #0
 810319c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 810319e:	68fb      	ldr	r3, [r7, #12]
 81031a0:	68db      	ldr	r3, [r3, #12]
 81031a2:	2b01      	cmp	r3, #1
 81031a4:	d107      	bne.n	81031b6 <HAL_I2C_IsDeviceReady+0x72>
 81031a6:	897b      	ldrh	r3, [r7, #10]
 81031a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81031ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81031b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81031b4:	e004      	b.n	81031c0 <HAL_I2C_IsDeviceReady+0x7c>
 81031b6:	897b      	ldrh	r3, [r7, #10]
 81031b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81031bc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 81031c0:	68fa      	ldr	r2, [r7, #12]
 81031c2:	6812      	ldr	r2, [r2, #0]
 81031c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 81031c6:	f7ff f9fb 	bl	81025c0 <HAL_GetTick>
 81031ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 81031cc:	68fb      	ldr	r3, [r7, #12]
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	699b      	ldr	r3, [r3, #24]
 81031d2:	f003 0320 	and.w	r3, r3, #32
 81031d6:	2b20      	cmp	r3, #32
 81031d8:	bf0c      	ite	eq
 81031da:	2301      	moveq	r3, #1
 81031dc:	2300      	movne	r3, #0
 81031de:	b2db      	uxtb	r3, r3
 81031e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 81031e2:	68fb      	ldr	r3, [r7, #12]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	699b      	ldr	r3, [r3, #24]
 81031e8:	f003 0310 	and.w	r3, r3, #16
 81031ec:	2b10      	cmp	r3, #16
 81031ee:	bf0c      	ite	eq
 81031f0:	2301      	moveq	r3, #1
 81031f2:	2300      	movne	r3, #0
 81031f4:	b2db      	uxtb	r3, r3
 81031f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 81031f8:	e034      	b.n	8103264 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 81031fa:	683b      	ldr	r3, [r7, #0]
 81031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103200:	d01a      	beq.n	8103238 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103202:	f7ff f9dd 	bl	81025c0 <HAL_GetTick>
 8103206:	4602      	mov	r2, r0
 8103208:	69bb      	ldr	r3, [r7, #24]
 810320a:	1ad3      	subs	r3, r2, r3
 810320c:	683a      	ldr	r2, [r7, #0]
 810320e:	429a      	cmp	r2, r3
 8103210:	d302      	bcc.n	8103218 <HAL_I2C_IsDeviceReady+0xd4>
 8103212:	683b      	ldr	r3, [r7, #0]
 8103214:	2b00      	cmp	r3, #0
 8103216:	d10f      	bne.n	8103238 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8103218:	68fb      	ldr	r3, [r7, #12]
 810321a:	2220      	movs	r2, #32
 810321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103220:	68fb      	ldr	r3, [r7, #12]
 8103222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103224:	f043 0220 	orr.w	r2, r3, #32
 8103228:	68fb      	ldr	r3, [r7, #12]
 810322a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 810322c:	68fb      	ldr	r3, [r7, #12]
 810322e:	2200      	movs	r2, #0
 8103230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8103234:	2301      	movs	r3, #1
 8103236:	e088      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8103238:	68fb      	ldr	r3, [r7, #12]
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	699b      	ldr	r3, [r3, #24]
 810323e:	f003 0320 	and.w	r3, r3, #32
 8103242:	2b20      	cmp	r3, #32
 8103244:	bf0c      	ite	eq
 8103246:	2301      	moveq	r3, #1
 8103248:	2300      	movne	r3, #0
 810324a:	b2db      	uxtb	r3, r3
 810324c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	699b      	ldr	r3, [r3, #24]
 8103254:	f003 0310 	and.w	r3, r3, #16
 8103258:	2b10      	cmp	r3, #16
 810325a:	bf0c      	ite	eq
 810325c:	2301      	moveq	r3, #1
 810325e:	2300      	movne	r3, #0
 8103260:	b2db      	uxtb	r3, r3
 8103262:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8103264:	7ffb      	ldrb	r3, [r7, #31]
 8103266:	2b00      	cmp	r3, #0
 8103268:	d102      	bne.n	8103270 <HAL_I2C_IsDeviceReady+0x12c>
 810326a:	7fbb      	ldrb	r3, [r7, #30]
 810326c:	2b00      	cmp	r3, #0
 810326e:	d0c4      	beq.n	81031fa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8103270:	68fb      	ldr	r3, [r7, #12]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	699b      	ldr	r3, [r3, #24]
 8103276:	f003 0310 	and.w	r3, r3, #16
 810327a:	2b10      	cmp	r3, #16
 810327c:	d01a      	beq.n	81032b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 810327e:	69bb      	ldr	r3, [r7, #24]
 8103280:	9300      	str	r3, [sp, #0]
 8103282:	683b      	ldr	r3, [r7, #0]
 8103284:	2200      	movs	r2, #0
 8103286:	2120      	movs	r1, #32
 8103288:	68f8      	ldr	r0, [r7, #12]
 810328a:	f000 f92f 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 810328e:	4603      	mov	r3, r0
 8103290:	2b00      	cmp	r3, #0
 8103292:	d001      	beq.n	8103298 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8103294:	2301      	movs	r3, #1
 8103296:	e058      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103298:	68fb      	ldr	r3, [r7, #12]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	2220      	movs	r2, #32
 810329e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 81032a0:	68fb      	ldr	r3, [r7, #12]
 81032a2:	2220      	movs	r2, #32
 81032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81032a8:	68fb      	ldr	r3, [r7, #12]
 81032aa:	2200      	movs	r2, #0
 81032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 81032b0:	2300      	movs	r3, #0
 81032b2:	e04a      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81032b4:	69bb      	ldr	r3, [r7, #24]
 81032b6:	9300      	str	r3, [sp, #0]
 81032b8:	683b      	ldr	r3, [r7, #0]
 81032ba:	2200      	movs	r2, #0
 81032bc:	2120      	movs	r1, #32
 81032be:	68f8      	ldr	r0, [r7, #12]
 81032c0:	f000 f914 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 81032c4:	4603      	mov	r3, r0
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d001      	beq.n	81032ce <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 81032ca:	2301      	movs	r3, #1
 81032cc:	e03d      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81032ce:	68fb      	ldr	r3, [r7, #12]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	2210      	movs	r2, #16
 81032d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81032d6:	68fb      	ldr	r3, [r7, #12]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	2220      	movs	r2, #32
 81032dc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 81032de:	697b      	ldr	r3, [r7, #20]
 81032e0:	687a      	ldr	r2, [r7, #4]
 81032e2:	429a      	cmp	r2, r3
 81032e4:	d118      	bne.n	8103318 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81032e6:	68fb      	ldr	r3, [r7, #12]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	685a      	ldr	r2, [r3, #4]
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81032f4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81032f6:	69bb      	ldr	r3, [r7, #24]
 81032f8:	9300      	str	r3, [sp, #0]
 81032fa:	683b      	ldr	r3, [r7, #0]
 81032fc:	2200      	movs	r2, #0
 81032fe:	2120      	movs	r1, #32
 8103300:	68f8      	ldr	r0, [r7, #12]
 8103302:	f000 f8f3 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 8103306:	4603      	mov	r3, r0
 8103308:	2b00      	cmp	r3, #0
 810330a:	d001      	beq.n	8103310 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 810330c:	2301      	movs	r3, #1
 810330e:	e01c      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	2220      	movs	r2, #32
 8103316:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8103318:	697b      	ldr	r3, [r7, #20]
 810331a:	3301      	adds	r3, #1
 810331c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 810331e:	697b      	ldr	r3, [r7, #20]
 8103320:	687a      	ldr	r2, [r7, #4]
 8103322:	429a      	cmp	r2, r3
 8103324:	f63f af3b 	bhi.w	810319e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8103328:	68fb      	ldr	r3, [r7, #12]
 810332a:	2220      	movs	r2, #32
 810332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103330:	68fb      	ldr	r3, [r7, #12]
 8103332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103334:	f043 0220 	orr.w	r2, r3, #32
 8103338:	68fb      	ldr	r3, [r7, #12]
 810333a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810333c:	68fb      	ldr	r3, [r7, #12]
 810333e:	2200      	movs	r2, #0
 8103340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8103344:	2301      	movs	r3, #1
 8103346:	e000      	b.n	810334a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8103348:	2302      	movs	r3, #2
  }
}
 810334a:	4618      	mov	r0, r3
 810334c:	3720      	adds	r7, #32
 810334e:	46bd      	mov	sp, r7
 8103350:	bd80      	pop	{r7, pc}
	...

08103354 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8103354:	b580      	push	{r7, lr}
 8103356:	b086      	sub	sp, #24
 8103358:	af02      	add	r7, sp, #8
 810335a:	60f8      	str	r0, [r7, #12]
 810335c:	4608      	mov	r0, r1
 810335e:	4611      	mov	r1, r2
 8103360:	461a      	mov	r2, r3
 8103362:	4603      	mov	r3, r0
 8103364:	817b      	strh	r3, [r7, #10]
 8103366:	460b      	mov	r3, r1
 8103368:	813b      	strh	r3, [r7, #8]
 810336a:	4613      	mov	r3, r2
 810336c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810336e:	88fb      	ldrh	r3, [r7, #6]
 8103370:	b2da      	uxtb	r2, r3
 8103372:	8979      	ldrh	r1, [r7, #10]
 8103374:	4b20      	ldr	r3, [pc, #128]	; (81033f8 <I2C_RequestMemoryWrite+0xa4>)
 8103376:	9300      	str	r3, [sp, #0]
 8103378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810337c:	68f8      	ldr	r0, [r7, #12]
 810337e:	f000 fa5d 	bl	810383c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103382:	69fa      	ldr	r2, [r7, #28]
 8103384:	69b9      	ldr	r1, [r7, #24]
 8103386:	68f8      	ldr	r0, [r7, #12]
 8103388:	f000 f8f0 	bl	810356c <I2C_WaitOnTXISFlagUntilTimeout>
 810338c:	4603      	mov	r3, r0
 810338e:	2b00      	cmp	r3, #0
 8103390:	d001      	beq.n	8103396 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8103392:	2301      	movs	r3, #1
 8103394:	e02c      	b.n	81033f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8103396:	88fb      	ldrh	r3, [r7, #6]
 8103398:	2b01      	cmp	r3, #1
 810339a:	d105      	bne.n	81033a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810339c:	893b      	ldrh	r3, [r7, #8]
 810339e:	b2da      	uxtb	r2, r3
 81033a0:	68fb      	ldr	r3, [r7, #12]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	629a      	str	r2, [r3, #40]	; 0x28
 81033a6:	e015      	b.n	81033d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81033a8:	893b      	ldrh	r3, [r7, #8]
 81033aa:	0a1b      	lsrs	r3, r3, #8
 81033ac:	b29b      	uxth	r3, r3
 81033ae:	b2da      	uxtb	r2, r3
 81033b0:	68fb      	ldr	r3, [r7, #12]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81033b6:	69fa      	ldr	r2, [r7, #28]
 81033b8:	69b9      	ldr	r1, [r7, #24]
 81033ba:	68f8      	ldr	r0, [r7, #12]
 81033bc:	f000 f8d6 	bl	810356c <I2C_WaitOnTXISFlagUntilTimeout>
 81033c0:	4603      	mov	r3, r0
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d001      	beq.n	81033ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81033c6:	2301      	movs	r3, #1
 81033c8:	e012      	b.n	81033f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81033ca:	893b      	ldrh	r3, [r7, #8]
 81033cc:	b2da      	uxtb	r2, r3
 81033ce:	68fb      	ldr	r3, [r7, #12]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81033d4:	69fb      	ldr	r3, [r7, #28]
 81033d6:	9300      	str	r3, [sp, #0]
 81033d8:	69bb      	ldr	r3, [r7, #24]
 81033da:	2200      	movs	r2, #0
 81033dc:	2180      	movs	r1, #128	; 0x80
 81033de:	68f8      	ldr	r0, [r7, #12]
 81033e0:	f000 f884 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 81033e4:	4603      	mov	r3, r0
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	d001      	beq.n	81033ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81033ea:	2301      	movs	r3, #1
 81033ec:	e000      	b.n	81033f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81033ee:	2300      	movs	r3, #0
}
 81033f0:	4618      	mov	r0, r3
 81033f2:	3710      	adds	r7, #16
 81033f4:	46bd      	mov	sp, r7
 81033f6:	bd80      	pop	{r7, pc}
 81033f8:	80002000 	.word	0x80002000

081033fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 81033fc:	b580      	push	{r7, lr}
 81033fe:	b086      	sub	sp, #24
 8103400:	af02      	add	r7, sp, #8
 8103402:	60f8      	str	r0, [r7, #12]
 8103404:	4608      	mov	r0, r1
 8103406:	4611      	mov	r1, r2
 8103408:	461a      	mov	r2, r3
 810340a:	4603      	mov	r3, r0
 810340c:	817b      	strh	r3, [r7, #10]
 810340e:	460b      	mov	r3, r1
 8103410:	813b      	strh	r3, [r7, #8]
 8103412:	4613      	mov	r3, r2
 8103414:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8103416:	88fb      	ldrh	r3, [r7, #6]
 8103418:	b2da      	uxtb	r2, r3
 810341a:	8979      	ldrh	r1, [r7, #10]
 810341c:	4b20      	ldr	r3, [pc, #128]	; (81034a0 <I2C_RequestMemoryRead+0xa4>)
 810341e:	9300      	str	r3, [sp, #0]
 8103420:	2300      	movs	r3, #0
 8103422:	68f8      	ldr	r0, [r7, #12]
 8103424:	f000 fa0a 	bl	810383c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103428:	69fa      	ldr	r2, [r7, #28]
 810342a:	69b9      	ldr	r1, [r7, #24]
 810342c:	68f8      	ldr	r0, [r7, #12]
 810342e:	f000 f89d 	bl	810356c <I2C_WaitOnTXISFlagUntilTimeout>
 8103432:	4603      	mov	r3, r0
 8103434:	2b00      	cmp	r3, #0
 8103436:	d001      	beq.n	810343c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8103438:	2301      	movs	r3, #1
 810343a:	e02c      	b.n	8103496 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810343c:	88fb      	ldrh	r3, [r7, #6]
 810343e:	2b01      	cmp	r3, #1
 8103440:	d105      	bne.n	810344e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103442:	893b      	ldrh	r3, [r7, #8]
 8103444:	b2da      	uxtb	r2, r3
 8103446:	68fb      	ldr	r3, [r7, #12]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	629a      	str	r2, [r3, #40]	; 0x28
 810344c:	e015      	b.n	810347a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810344e:	893b      	ldrh	r3, [r7, #8]
 8103450:	0a1b      	lsrs	r3, r3, #8
 8103452:	b29b      	uxth	r3, r3
 8103454:	b2da      	uxtb	r2, r3
 8103456:	68fb      	ldr	r3, [r7, #12]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810345c:	69fa      	ldr	r2, [r7, #28]
 810345e:	69b9      	ldr	r1, [r7, #24]
 8103460:	68f8      	ldr	r0, [r7, #12]
 8103462:	f000 f883 	bl	810356c <I2C_WaitOnTXISFlagUntilTimeout>
 8103466:	4603      	mov	r3, r0
 8103468:	2b00      	cmp	r3, #0
 810346a:	d001      	beq.n	8103470 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810346c:	2301      	movs	r3, #1
 810346e:	e012      	b.n	8103496 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103470:	893b      	ldrh	r3, [r7, #8]
 8103472:	b2da      	uxtb	r2, r3
 8103474:	68fb      	ldr	r3, [r7, #12]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810347a:	69fb      	ldr	r3, [r7, #28]
 810347c:	9300      	str	r3, [sp, #0]
 810347e:	69bb      	ldr	r3, [r7, #24]
 8103480:	2200      	movs	r2, #0
 8103482:	2140      	movs	r1, #64	; 0x40
 8103484:	68f8      	ldr	r0, [r7, #12]
 8103486:	f000 f831 	bl	81034ec <I2C_WaitOnFlagUntilTimeout>
 810348a:	4603      	mov	r3, r0
 810348c:	2b00      	cmp	r3, #0
 810348e:	d001      	beq.n	8103494 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8103490:	2301      	movs	r3, #1
 8103492:	e000      	b.n	8103496 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8103494:	2300      	movs	r3, #0
}
 8103496:	4618      	mov	r0, r3
 8103498:	3710      	adds	r7, #16
 810349a:	46bd      	mov	sp, r7
 810349c:	bd80      	pop	{r7, pc}
 810349e:	bf00      	nop
 81034a0:	80002000 	.word	0x80002000

081034a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81034a4:	b480      	push	{r7}
 81034a6:	b083      	sub	sp, #12
 81034a8:	af00      	add	r7, sp, #0
 81034aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	681b      	ldr	r3, [r3, #0]
 81034b0:	699b      	ldr	r3, [r3, #24]
 81034b2:	f003 0302 	and.w	r3, r3, #2
 81034b6:	2b02      	cmp	r3, #2
 81034b8:	d103      	bne.n	81034c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	2200      	movs	r2, #0
 81034c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	699b      	ldr	r3, [r3, #24]
 81034c8:	f003 0301 	and.w	r3, r3, #1
 81034cc:	2b01      	cmp	r3, #1
 81034ce:	d007      	beq.n	81034e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	699a      	ldr	r2, [r3, #24]
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	f042 0201 	orr.w	r2, r2, #1
 81034de:	619a      	str	r2, [r3, #24]
  }
}
 81034e0:	bf00      	nop
 81034e2:	370c      	adds	r7, #12
 81034e4:	46bd      	mov	sp, r7
 81034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ea:	4770      	bx	lr

081034ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81034ec:	b580      	push	{r7, lr}
 81034ee:	b084      	sub	sp, #16
 81034f0:	af00      	add	r7, sp, #0
 81034f2:	60f8      	str	r0, [r7, #12]
 81034f4:	60b9      	str	r1, [r7, #8]
 81034f6:	603b      	str	r3, [r7, #0]
 81034f8:	4613      	mov	r3, r2
 81034fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81034fc:	e022      	b.n	8103544 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81034fe:	683b      	ldr	r3, [r7, #0]
 8103500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103504:	d01e      	beq.n	8103544 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103506:	f7ff f85b 	bl	81025c0 <HAL_GetTick>
 810350a:	4602      	mov	r2, r0
 810350c:	69bb      	ldr	r3, [r7, #24]
 810350e:	1ad3      	subs	r3, r2, r3
 8103510:	683a      	ldr	r2, [r7, #0]
 8103512:	429a      	cmp	r2, r3
 8103514:	d302      	bcc.n	810351c <I2C_WaitOnFlagUntilTimeout+0x30>
 8103516:	683b      	ldr	r3, [r7, #0]
 8103518:	2b00      	cmp	r3, #0
 810351a:	d113      	bne.n	8103544 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810351c:	68fb      	ldr	r3, [r7, #12]
 810351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103520:	f043 0220 	orr.w	r2, r3, #32
 8103524:	68fb      	ldr	r3, [r7, #12]
 8103526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103528:	68fb      	ldr	r3, [r7, #12]
 810352a:	2220      	movs	r2, #32
 810352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	2200      	movs	r2, #0
 8103534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103538:	68fb      	ldr	r3, [r7, #12]
 810353a:	2200      	movs	r2, #0
 810353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8103540:	2301      	movs	r3, #1
 8103542:	e00f      	b.n	8103564 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103544:	68fb      	ldr	r3, [r7, #12]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	699a      	ldr	r2, [r3, #24]
 810354a:	68bb      	ldr	r3, [r7, #8]
 810354c:	4013      	ands	r3, r2
 810354e:	68ba      	ldr	r2, [r7, #8]
 8103550:	429a      	cmp	r2, r3
 8103552:	bf0c      	ite	eq
 8103554:	2301      	moveq	r3, #1
 8103556:	2300      	movne	r3, #0
 8103558:	b2db      	uxtb	r3, r3
 810355a:	461a      	mov	r2, r3
 810355c:	79fb      	ldrb	r3, [r7, #7]
 810355e:	429a      	cmp	r2, r3
 8103560:	d0cd      	beq.n	81034fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8103562:	2300      	movs	r3, #0
}
 8103564:	4618      	mov	r0, r3
 8103566:	3710      	adds	r7, #16
 8103568:	46bd      	mov	sp, r7
 810356a:	bd80      	pop	{r7, pc}

0810356c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810356c:	b580      	push	{r7, lr}
 810356e:	b084      	sub	sp, #16
 8103570:	af00      	add	r7, sp, #0
 8103572:	60f8      	str	r0, [r7, #12]
 8103574:	60b9      	str	r1, [r7, #8]
 8103576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103578:	e02c      	b.n	81035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810357a:	687a      	ldr	r2, [r7, #4]
 810357c:	68b9      	ldr	r1, [r7, #8]
 810357e:	68f8      	ldr	r0, [r7, #12]
 8103580:	f000 f870 	bl	8103664 <I2C_IsErrorOccurred>
 8103584:	4603      	mov	r3, r0
 8103586:	2b00      	cmp	r3, #0
 8103588:	d001      	beq.n	810358e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810358a:	2301      	movs	r3, #1
 810358c:	e02a      	b.n	81035e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810358e:	68bb      	ldr	r3, [r7, #8]
 8103590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103594:	d01e      	beq.n	81035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103596:	f7ff f813 	bl	81025c0 <HAL_GetTick>
 810359a:	4602      	mov	r2, r0
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	1ad3      	subs	r3, r2, r3
 81035a0:	68ba      	ldr	r2, [r7, #8]
 81035a2:	429a      	cmp	r2, r3
 81035a4:	d302      	bcc.n	81035ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81035a6:	68bb      	ldr	r3, [r7, #8]
 81035a8:	2b00      	cmp	r3, #0
 81035aa:	d113      	bne.n	81035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81035ac:	68fb      	ldr	r3, [r7, #12]
 81035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81035b0:	f043 0220 	orr.w	r2, r3, #32
 81035b4:	68fb      	ldr	r3, [r7, #12]
 81035b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81035b8:	68fb      	ldr	r3, [r7, #12]
 81035ba:	2220      	movs	r2, #32
 81035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81035c0:	68fb      	ldr	r3, [r7, #12]
 81035c2:	2200      	movs	r2, #0
 81035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81035c8:	68fb      	ldr	r3, [r7, #12]
 81035ca:	2200      	movs	r2, #0
 81035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81035d0:	2301      	movs	r3, #1
 81035d2:	e007      	b.n	81035e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81035d4:	68fb      	ldr	r3, [r7, #12]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	699b      	ldr	r3, [r3, #24]
 81035da:	f003 0302 	and.w	r3, r3, #2
 81035de:	2b02      	cmp	r3, #2
 81035e0:	d1cb      	bne.n	810357a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81035e2:	2300      	movs	r3, #0
}
 81035e4:	4618      	mov	r0, r3
 81035e6:	3710      	adds	r7, #16
 81035e8:	46bd      	mov	sp, r7
 81035ea:	bd80      	pop	{r7, pc}

081035ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81035ec:	b580      	push	{r7, lr}
 81035ee:	b084      	sub	sp, #16
 81035f0:	af00      	add	r7, sp, #0
 81035f2:	60f8      	str	r0, [r7, #12]
 81035f4:	60b9      	str	r1, [r7, #8]
 81035f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81035f8:	e028      	b.n	810364c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81035fa:	687a      	ldr	r2, [r7, #4]
 81035fc:	68b9      	ldr	r1, [r7, #8]
 81035fe:	68f8      	ldr	r0, [r7, #12]
 8103600:	f000 f830 	bl	8103664 <I2C_IsErrorOccurred>
 8103604:	4603      	mov	r3, r0
 8103606:	2b00      	cmp	r3, #0
 8103608:	d001      	beq.n	810360e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810360a:	2301      	movs	r3, #1
 810360c:	e026      	b.n	810365c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810360e:	f7fe ffd7 	bl	81025c0 <HAL_GetTick>
 8103612:	4602      	mov	r2, r0
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	1ad3      	subs	r3, r2, r3
 8103618:	68ba      	ldr	r2, [r7, #8]
 810361a:	429a      	cmp	r2, r3
 810361c:	d302      	bcc.n	8103624 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810361e:	68bb      	ldr	r3, [r7, #8]
 8103620:	2b00      	cmp	r3, #0
 8103622:	d113      	bne.n	810364c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103624:	68fb      	ldr	r3, [r7, #12]
 8103626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103628:	f043 0220 	orr.w	r2, r3, #32
 810362c:	68fb      	ldr	r3, [r7, #12]
 810362e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8103630:	68fb      	ldr	r3, [r7, #12]
 8103632:	2220      	movs	r2, #32
 8103634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8103638:	68fb      	ldr	r3, [r7, #12]
 810363a:	2200      	movs	r2, #0
 810363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103640:	68fb      	ldr	r3, [r7, #12]
 8103642:	2200      	movs	r2, #0
 8103644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8103648:	2301      	movs	r3, #1
 810364a:	e007      	b.n	810365c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810364c:	68fb      	ldr	r3, [r7, #12]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	699b      	ldr	r3, [r3, #24]
 8103652:	f003 0320 	and.w	r3, r3, #32
 8103656:	2b20      	cmp	r3, #32
 8103658:	d1cf      	bne.n	81035fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810365a:	2300      	movs	r3, #0
}
 810365c:	4618      	mov	r0, r3
 810365e:	3710      	adds	r7, #16
 8103660:	46bd      	mov	sp, r7
 8103662:	bd80      	pop	{r7, pc}

08103664 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8103664:	b580      	push	{r7, lr}
 8103666:	b08a      	sub	sp, #40	; 0x28
 8103668:	af00      	add	r7, sp, #0
 810366a:	60f8      	str	r0, [r7, #12]
 810366c:	60b9      	str	r1, [r7, #8]
 810366e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103670:	2300      	movs	r3, #0
 8103672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8103676:	68fb      	ldr	r3, [r7, #12]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	699b      	ldr	r3, [r3, #24]
 810367c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810367e:	2300      	movs	r3, #0
 8103680:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8103686:	69bb      	ldr	r3, [r7, #24]
 8103688:	f003 0310 	and.w	r3, r3, #16
 810368c:	2b00      	cmp	r3, #0
 810368e:	d075      	beq.n	810377c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103690:	68fb      	ldr	r3, [r7, #12]
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	2210      	movs	r2, #16
 8103696:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103698:	e056      	b.n	8103748 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810369a:	68bb      	ldr	r3, [r7, #8]
 810369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036a0:	d052      	beq.n	8103748 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81036a2:	f7fe ff8d 	bl	81025c0 <HAL_GetTick>
 81036a6:	4602      	mov	r2, r0
 81036a8:	69fb      	ldr	r3, [r7, #28]
 81036aa:	1ad3      	subs	r3, r2, r3
 81036ac:	68ba      	ldr	r2, [r7, #8]
 81036ae:	429a      	cmp	r2, r3
 81036b0:	d302      	bcc.n	81036b8 <I2C_IsErrorOccurred+0x54>
 81036b2:	68bb      	ldr	r3, [r7, #8]
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d147      	bne.n	8103748 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81036b8:	68fb      	ldr	r3, [r7, #12]
 81036ba:	681b      	ldr	r3, [r3, #0]
 81036bc:	685b      	ldr	r3, [r3, #4]
 81036be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81036c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81036c4:	68fb      	ldr	r3, [r7, #12]
 81036c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81036ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81036cc:	68fb      	ldr	r3, [r7, #12]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	699b      	ldr	r3, [r3, #24]
 81036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81036d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81036da:	d12e      	bne.n	810373a <I2C_IsErrorOccurred+0xd6>
 81036dc:	697b      	ldr	r3, [r7, #20]
 81036de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81036e2:	d02a      	beq.n	810373a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81036e4:	7cfb      	ldrb	r3, [r7, #19]
 81036e6:	2b20      	cmp	r3, #32
 81036e8:	d027      	beq.n	810373a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81036ea:	68fb      	ldr	r3, [r7, #12]
 81036ec:	681b      	ldr	r3, [r3, #0]
 81036ee:	685a      	ldr	r2, [r3, #4]
 81036f0:	68fb      	ldr	r3, [r7, #12]
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81036f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81036fa:	f7fe ff61 	bl	81025c0 <HAL_GetTick>
 81036fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103700:	e01b      	b.n	810373a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8103702:	f7fe ff5d 	bl	81025c0 <HAL_GetTick>
 8103706:	4602      	mov	r2, r0
 8103708:	69fb      	ldr	r3, [r7, #28]
 810370a:	1ad3      	subs	r3, r2, r3
 810370c:	2b19      	cmp	r3, #25
 810370e:	d914      	bls.n	810373a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103714:	f043 0220 	orr.w	r2, r3, #32
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 810371c:	68fb      	ldr	r3, [r7, #12]
 810371e:	2220      	movs	r2, #32
 8103720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8103724:	68fb      	ldr	r3, [r7, #12]
 8103726:	2200      	movs	r2, #0
 8103728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 810372c:	68fb      	ldr	r3, [r7, #12]
 810372e:	2200      	movs	r2, #0
 8103730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8103734:	2301      	movs	r3, #1
 8103736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810373a:	68fb      	ldr	r3, [r7, #12]
 810373c:	681b      	ldr	r3, [r3, #0]
 810373e:	699b      	ldr	r3, [r3, #24]
 8103740:	f003 0320 	and.w	r3, r3, #32
 8103744:	2b20      	cmp	r3, #32
 8103746:	d1dc      	bne.n	8103702 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103748:	68fb      	ldr	r3, [r7, #12]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	699b      	ldr	r3, [r3, #24]
 810374e:	f003 0320 	and.w	r3, r3, #32
 8103752:	2b20      	cmp	r3, #32
 8103754:	d003      	beq.n	810375e <I2C_IsErrorOccurred+0xfa>
 8103756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810375a:	2b00      	cmp	r3, #0
 810375c:	d09d      	beq.n	810369a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810375e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103762:	2b00      	cmp	r3, #0
 8103764:	d103      	bne.n	810376e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103766:	68fb      	ldr	r3, [r7, #12]
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	2220      	movs	r2, #32
 810376c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810376e:	6a3b      	ldr	r3, [r7, #32]
 8103770:	f043 0304 	orr.w	r3, r3, #4
 8103774:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8103776:	2301      	movs	r3, #1
 8103778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810377c:	68fb      	ldr	r3, [r7, #12]
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	699b      	ldr	r3, [r3, #24]
 8103782:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103784:	69bb      	ldr	r3, [r7, #24]
 8103786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810378a:	2b00      	cmp	r3, #0
 810378c:	d00b      	beq.n	81037a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810378e:	6a3b      	ldr	r3, [r7, #32]
 8103790:	f043 0301 	orr.w	r3, r3, #1
 8103794:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103796:	68fb      	ldr	r3, [r7, #12]
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810379e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81037a0:	2301      	movs	r3, #1
 81037a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81037a6:	69bb      	ldr	r3, [r7, #24]
 81037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d00b      	beq.n	81037c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81037b0:	6a3b      	ldr	r3, [r7, #32]
 81037b2:	f043 0308 	orr.w	r3, r3, #8
 81037b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81037b8:	68fb      	ldr	r3, [r7, #12]
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81037c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81037c2:	2301      	movs	r3, #1
 81037c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81037c8:	69bb      	ldr	r3, [r7, #24]
 81037ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81037ce:	2b00      	cmp	r3, #0
 81037d0:	d00b      	beq.n	81037ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81037d2:	6a3b      	ldr	r3, [r7, #32]
 81037d4:	f043 0302 	orr.w	r3, r3, #2
 81037d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81037da:	68fb      	ldr	r3, [r7, #12]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	f44f 7200 	mov.w	r2, #512	; 0x200
 81037e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81037e4:	2301      	movs	r3, #1
 81037e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81037ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	d01c      	beq.n	810382c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81037f2:	68f8      	ldr	r0, [r7, #12]
 81037f4:	f7ff fe56 	bl	81034a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81037f8:	68fb      	ldr	r3, [r7, #12]
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	6859      	ldr	r1, [r3, #4]
 81037fe:	68fb      	ldr	r3, [r7, #12]
 8103800:	681a      	ldr	r2, [r3, #0]
 8103802:	4b0d      	ldr	r3, [pc, #52]	; (8103838 <I2C_IsErrorOccurred+0x1d4>)
 8103804:	400b      	ands	r3, r1
 8103806:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103808:	68fb      	ldr	r3, [r7, #12]
 810380a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810380c:	6a3b      	ldr	r3, [r7, #32]
 810380e:	431a      	orrs	r2, r3
 8103810:	68fb      	ldr	r3, [r7, #12]
 8103812:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8103814:	68fb      	ldr	r3, [r7, #12]
 8103816:	2220      	movs	r2, #32
 8103818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810381c:	68fb      	ldr	r3, [r7, #12]
 810381e:	2200      	movs	r2, #0
 8103820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103824:	68fb      	ldr	r3, [r7, #12]
 8103826:	2200      	movs	r2, #0
 8103828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 810382c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8103830:	4618      	mov	r0, r3
 8103832:	3728      	adds	r7, #40	; 0x28
 8103834:	46bd      	mov	sp, r7
 8103836:	bd80      	pop	{r7, pc}
 8103838:	fe00e800 	.word	0xfe00e800

0810383c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810383c:	b480      	push	{r7}
 810383e:	b087      	sub	sp, #28
 8103840:	af00      	add	r7, sp, #0
 8103842:	60f8      	str	r0, [r7, #12]
 8103844:	607b      	str	r3, [r7, #4]
 8103846:	460b      	mov	r3, r1
 8103848:	817b      	strh	r3, [r7, #10]
 810384a:	4613      	mov	r3, r2
 810384c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810384e:	897b      	ldrh	r3, [r7, #10]
 8103850:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103854:	7a7b      	ldrb	r3, [r7, #9]
 8103856:	041b      	lsls	r3, r3, #16
 8103858:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810385c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103862:	6a3b      	ldr	r3, [r7, #32]
 8103864:	4313      	orrs	r3, r2
 8103866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810386a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810386c:	68fb      	ldr	r3, [r7, #12]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	685a      	ldr	r2, [r3, #4]
 8103872:	6a3b      	ldr	r3, [r7, #32]
 8103874:	0d5b      	lsrs	r3, r3, #21
 8103876:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810387a:	4b08      	ldr	r3, [pc, #32]	; (810389c <I2C_TransferConfig+0x60>)
 810387c:	430b      	orrs	r3, r1
 810387e:	43db      	mvns	r3, r3
 8103880:	ea02 0103 	and.w	r1, r2, r3
 8103884:	68fb      	ldr	r3, [r7, #12]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	697a      	ldr	r2, [r7, #20]
 810388a:	430a      	orrs	r2, r1
 810388c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810388e:	bf00      	nop
 8103890:	371c      	adds	r7, #28
 8103892:	46bd      	mov	sp, r7
 8103894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103898:	4770      	bx	lr
 810389a:	bf00      	nop
 810389c:	03ff63ff 	.word	0x03ff63ff

081038a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81038a0:	b480      	push	{r7}
 81038a2:	b083      	sub	sp, #12
 81038a4:	af00      	add	r7, sp, #0
 81038a6:	6078      	str	r0, [r7, #4]
 81038a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81038b0:	b2db      	uxtb	r3, r3
 81038b2:	2b20      	cmp	r3, #32
 81038b4:	d138      	bne.n	8103928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81038bc:	2b01      	cmp	r3, #1
 81038be:	d101      	bne.n	81038c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81038c0:	2302      	movs	r3, #2
 81038c2:	e032      	b.n	810392a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	2201      	movs	r2, #1
 81038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	2224      	movs	r2, #36	; 0x24
 81038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	681a      	ldr	r2, [r3, #0]
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	f022 0201 	bic.w	r2, r2, #1
 81038e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	681a      	ldr	r2, [r3, #0]
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81038f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	681b      	ldr	r3, [r3, #0]
 81038f8:	6819      	ldr	r1, [r3, #0]
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	683a      	ldr	r2, [r7, #0]
 8103900:	430a      	orrs	r2, r1
 8103902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	681a      	ldr	r2, [r3, #0]
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	681b      	ldr	r3, [r3, #0]
 810390e:	f042 0201 	orr.w	r2, r2, #1
 8103912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	2220      	movs	r2, #32
 8103918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	2200      	movs	r2, #0
 8103920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103924:	2300      	movs	r3, #0
 8103926:	e000      	b.n	810392a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103928:	2302      	movs	r3, #2
  }
}
 810392a:	4618      	mov	r0, r3
 810392c:	370c      	adds	r7, #12
 810392e:	46bd      	mov	sp, r7
 8103930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103934:	4770      	bx	lr

08103936 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8103936:	b480      	push	{r7}
 8103938:	b085      	sub	sp, #20
 810393a:	af00      	add	r7, sp, #0
 810393c:	6078      	str	r0, [r7, #4]
 810393e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103946:	b2db      	uxtb	r3, r3
 8103948:	2b20      	cmp	r3, #32
 810394a:	d139      	bne.n	81039c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103952:	2b01      	cmp	r3, #1
 8103954:	d101      	bne.n	810395a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8103956:	2302      	movs	r3, #2
 8103958:	e033      	b.n	81039c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	2201      	movs	r2, #1
 810395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	2224      	movs	r2, #36	; 0x24
 8103966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	681a      	ldr	r2, [r3, #0]
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	f022 0201 	bic.w	r2, r2, #1
 8103978:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103982:	68fb      	ldr	r3, [r7, #12]
 8103984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103988:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810398a:	683b      	ldr	r3, [r7, #0]
 810398c:	021b      	lsls	r3, r3, #8
 810398e:	68fa      	ldr	r2, [r7, #12]
 8103990:	4313      	orrs	r3, r2
 8103992:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	68fa      	ldr	r2, [r7, #12]
 810399a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	681a      	ldr	r2, [r3, #0]
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	f042 0201 	orr.w	r2, r2, #1
 81039aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	2220      	movs	r2, #32
 81039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	2200      	movs	r2, #0
 81039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81039bc:	2300      	movs	r3, #0
 81039be:	e000      	b.n	81039c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81039c0:	2302      	movs	r3, #2
  }
}
 81039c2:	4618      	mov	r0, r3
 81039c4:	3714      	adds	r7, #20
 81039c6:	46bd      	mov	sp, r7
 81039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039cc:	4770      	bx	lr
	...

081039d0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81039d0:	b580      	push	{r7, lr}
 81039d2:	b084      	sub	sp, #16
 81039d4:	af00      	add	r7, sp, #0
 81039d6:	60f8      	str	r0, [r7, #12]
 81039d8:	460b      	mov	r3, r1
 81039da:	607a      	str	r2, [r7, #4]
 81039dc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81039de:	4b37      	ldr	r3, [pc, #220]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	f023 0201 	bic.w	r2, r3, #1
 81039e6:	4935      	ldr	r1, [pc, #212]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 81039e8:	68fb      	ldr	r3, [r7, #12]
 81039ea:	4313      	orrs	r3, r2
 81039ec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d123      	bne.n	8103a3c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81039f4:	f7fe fef8 	bl	81027e8 <HAL_GetCurrentCPUID>
 81039f8:	4603      	mov	r3, r0
 81039fa:	2b03      	cmp	r3, #3
 81039fc:	d158      	bne.n	8103ab0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81039fe:	4b2f      	ldr	r3, [pc, #188]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a00:	691b      	ldr	r3, [r3, #16]
 8103a02:	4a2e      	ldr	r2, [pc, #184]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a04:	f023 0301 	bic.w	r3, r3, #1
 8103a08:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a0a:	4b2d      	ldr	r3, [pc, #180]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a0c:	691b      	ldr	r3, [r3, #16]
 8103a0e:	4a2c      	ldr	r2, [pc, #176]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a10:	f043 0304 	orr.w	r3, r3, #4
 8103a14:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103a16:	f3bf 8f4f 	dsb	sy
}
 8103a1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103a1c:	f3bf 8f6f 	isb	sy
}
 8103a20:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103a22:	7afb      	ldrb	r3, [r7, #11]
 8103a24:	2b01      	cmp	r3, #1
 8103a26:	d101      	bne.n	8103a2c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103a28:	bf30      	wfi
 8103a2a:	e000      	b.n	8103a2e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103a2c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a2e:	4b24      	ldr	r3, [pc, #144]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a30:	691b      	ldr	r3, [r3, #16]
 8103a32:	4a23      	ldr	r2, [pc, #140]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a34:	f023 0304 	bic.w	r3, r3, #4
 8103a38:	6113      	str	r3, [r2, #16]
 8103a3a:	e03c      	b.n	8103ab6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	2b01      	cmp	r3, #1
 8103a40:	d123      	bne.n	8103a8a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103a42:	f7fe fed1 	bl	81027e8 <HAL_GetCurrentCPUID>
 8103a46:	4603      	mov	r3, r0
 8103a48:	2b01      	cmp	r3, #1
 8103a4a:	d133      	bne.n	8103ab4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103a4c:	4b1b      	ldr	r3, [pc, #108]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a4e:	695b      	ldr	r3, [r3, #20]
 8103a50:	4a1a      	ldr	r2, [pc, #104]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a52:	f023 0302 	bic.w	r3, r3, #2
 8103a56:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a58:	4b19      	ldr	r3, [pc, #100]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a5a:	691b      	ldr	r3, [r3, #16]
 8103a5c:	4a18      	ldr	r2, [pc, #96]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a5e:	f043 0304 	orr.w	r3, r3, #4
 8103a62:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103a64:	f3bf 8f4f 	dsb	sy
}
 8103a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103a6a:	f3bf 8f6f 	isb	sy
}
 8103a6e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103a70:	7afb      	ldrb	r3, [r7, #11]
 8103a72:	2b01      	cmp	r3, #1
 8103a74:	d101      	bne.n	8103a7a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103a76:	bf30      	wfi
 8103a78:	e000      	b.n	8103a7c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103a7a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a7c:	4b10      	ldr	r3, [pc, #64]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a7e:	691b      	ldr	r3, [r3, #16]
 8103a80:	4a0f      	ldr	r2, [pc, #60]	; (8103ac0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a82:	f023 0304 	bic.w	r3, r3, #4
 8103a86:	6113      	str	r3, [r2, #16]
 8103a88:	e015      	b.n	8103ab6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103a8a:	f7fe fead 	bl	81027e8 <HAL_GetCurrentCPUID>
 8103a8e:	4603      	mov	r3, r0
 8103a90:	2b03      	cmp	r3, #3
 8103a92:	d106      	bne.n	8103aa2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103a94:	4b09      	ldr	r3, [pc, #36]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a96:	691b      	ldr	r3, [r3, #16]
 8103a98:	4a08      	ldr	r2, [pc, #32]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a9a:	f023 0304 	bic.w	r3, r3, #4
 8103a9e:	6113      	str	r3, [r2, #16]
 8103aa0:	e009      	b.n	8103ab6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103aa2:	4b06      	ldr	r3, [pc, #24]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103aa4:	695b      	ldr	r3, [r3, #20]
 8103aa6:	4a05      	ldr	r2, [pc, #20]	; (8103abc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103aa8:	f023 0304 	bic.w	r3, r3, #4
 8103aac:	6153      	str	r3, [r2, #20]
 8103aae:	e002      	b.n	8103ab6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103ab0:	bf00      	nop
 8103ab2:	e000      	b.n	8103ab6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103ab4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103ab6:	3710      	adds	r7, #16
 8103ab8:	46bd      	mov	sp, r7
 8103aba:	bd80      	pop	{r7, pc}
 8103abc:	58024800 	.word	0x58024800
 8103ac0:	e000ed00 	.word	0xe000ed00

08103ac4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103ac4:	b580      	push	{r7, lr}
 8103ac6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103ac8:	f7fe fe8e 	bl	81027e8 <HAL_GetCurrentCPUID>
 8103acc:	4603      	mov	r3, r0
 8103ace:	2b03      	cmp	r3, #3
 8103ad0:	d101      	bne.n	8103ad6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103ad2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103ad4:	e001      	b.n	8103ada <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103ad6:	bf40      	sev
    __WFE ();
 8103ad8:	bf20      	wfe
}
 8103ada:	bf00      	nop
 8103adc:	bd80      	pop	{r7, pc}
	...

08103ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103ae0:	b480      	push	{r7}
 8103ae2:	b089      	sub	sp, #36	; 0x24
 8103ae4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103ae6:	4bb3      	ldr	r3, [pc, #716]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ae8:	691b      	ldr	r3, [r3, #16]
 8103aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103aee:	2b18      	cmp	r3, #24
 8103af0:	f200 8155 	bhi.w	8103d9e <HAL_RCC_GetSysClockFreq+0x2be>
 8103af4:	a201      	add	r2, pc, #4	; (adr r2, 8103afc <HAL_RCC_GetSysClockFreq+0x1c>)
 8103af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103afa:	bf00      	nop
 8103afc:	08103b61 	.word	0x08103b61
 8103b00:	08103d9f 	.word	0x08103d9f
 8103b04:	08103d9f 	.word	0x08103d9f
 8103b08:	08103d9f 	.word	0x08103d9f
 8103b0c:	08103d9f 	.word	0x08103d9f
 8103b10:	08103d9f 	.word	0x08103d9f
 8103b14:	08103d9f 	.word	0x08103d9f
 8103b18:	08103d9f 	.word	0x08103d9f
 8103b1c:	08103b87 	.word	0x08103b87
 8103b20:	08103d9f 	.word	0x08103d9f
 8103b24:	08103d9f 	.word	0x08103d9f
 8103b28:	08103d9f 	.word	0x08103d9f
 8103b2c:	08103d9f 	.word	0x08103d9f
 8103b30:	08103d9f 	.word	0x08103d9f
 8103b34:	08103d9f 	.word	0x08103d9f
 8103b38:	08103d9f 	.word	0x08103d9f
 8103b3c:	08103b8d 	.word	0x08103b8d
 8103b40:	08103d9f 	.word	0x08103d9f
 8103b44:	08103d9f 	.word	0x08103d9f
 8103b48:	08103d9f 	.word	0x08103d9f
 8103b4c:	08103d9f 	.word	0x08103d9f
 8103b50:	08103d9f 	.word	0x08103d9f
 8103b54:	08103d9f 	.word	0x08103d9f
 8103b58:	08103d9f 	.word	0x08103d9f
 8103b5c:	08103b93 	.word	0x08103b93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b60:	4b94      	ldr	r3, [pc, #592]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	f003 0320 	and.w	r3, r3, #32
 8103b68:	2b00      	cmp	r3, #0
 8103b6a:	d009      	beq.n	8103b80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103b6c:	4b91      	ldr	r3, [pc, #580]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	08db      	lsrs	r3, r3, #3
 8103b72:	f003 0303 	and.w	r3, r3, #3
 8103b76:	4a90      	ldr	r2, [pc, #576]	; (8103db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103b78:	fa22 f303 	lsr.w	r3, r2, r3
 8103b7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103b7e:	e111      	b.n	8103da4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103b80:	4b8d      	ldr	r3, [pc, #564]	; (8103db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103b82:	61bb      	str	r3, [r7, #24]
    break;
 8103b84:	e10e      	b.n	8103da4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103b86:	4b8d      	ldr	r3, [pc, #564]	; (8103dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103b88:	61bb      	str	r3, [r7, #24]
    break;
 8103b8a:	e10b      	b.n	8103da4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103b8c:	4b8c      	ldr	r3, [pc, #560]	; (8103dc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103b8e:	61bb      	str	r3, [r7, #24]
    break;
 8103b90:	e108      	b.n	8103da4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103b92:	4b88      	ldr	r3, [pc, #544]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b96:	f003 0303 	and.w	r3, r3, #3
 8103b9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103b9c:	4b85      	ldr	r3, [pc, #532]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ba0:	091b      	lsrs	r3, r3, #4
 8103ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103ba6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103ba8:	4b82      	ldr	r3, [pc, #520]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bac:	f003 0301 	and.w	r3, r3, #1
 8103bb0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103bb2:	4b80      	ldr	r3, [pc, #512]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103bb6:	08db      	lsrs	r3, r3, #3
 8103bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103bbc:	68fa      	ldr	r2, [r7, #12]
 8103bbe:	fb02 f303 	mul.w	r3, r2, r3
 8103bc2:	ee07 3a90 	vmov	s15, r3
 8103bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103bce:	693b      	ldr	r3, [r7, #16]
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	f000 80e1 	beq.w	8103d98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103bd6:	697b      	ldr	r3, [r7, #20]
 8103bd8:	2b02      	cmp	r3, #2
 8103bda:	f000 8083 	beq.w	8103ce4 <HAL_RCC_GetSysClockFreq+0x204>
 8103bde:	697b      	ldr	r3, [r7, #20]
 8103be0:	2b02      	cmp	r3, #2
 8103be2:	f200 80a1 	bhi.w	8103d28 <HAL_RCC_GetSysClockFreq+0x248>
 8103be6:	697b      	ldr	r3, [r7, #20]
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d003      	beq.n	8103bf4 <HAL_RCC_GetSysClockFreq+0x114>
 8103bec:	697b      	ldr	r3, [r7, #20]
 8103bee:	2b01      	cmp	r3, #1
 8103bf0:	d056      	beq.n	8103ca0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103bf2:	e099      	b.n	8103d28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103bf4:	4b6f      	ldr	r3, [pc, #444]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	f003 0320 	and.w	r3, r3, #32
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d02d      	beq.n	8103c5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103c00:	4b6c      	ldr	r3, [pc, #432]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	08db      	lsrs	r3, r3, #3
 8103c06:	f003 0303 	and.w	r3, r3, #3
 8103c0a:	4a6b      	ldr	r2, [pc, #428]	; (8103db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8103c10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	ee07 3a90 	vmov	s15, r3
 8103c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c1c:	693b      	ldr	r3, [r7, #16]
 8103c1e:	ee07 3a90 	vmov	s15, r3
 8103c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c2a:	4b62      	ldr	r3, [pc, #392]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c32:	ee07 3a90 	vmov	s15, r3
 8103c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103c5a:	e087      	b.n	8103d6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103c5c:	693b      	ldr	r3, [r7, #16]
 8103c5e:	ee07 3a90 	vmov	s15, r3
 8103c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103dc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c6e:	4b51      	ldr	r3, [pc, #324]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c76:	ee07 3a90 	vmov	s15, r3
 8103c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103c9e:	e065      	b.n	8103d6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103ca0:	693b      	ldr	r3, [r7, #16]
 8103ca2:	ee07 3a90 	vmov	s15, r3
 8103ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103caa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103cb2:	4b40      	ldr	r3, [pc, #256]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103cba:	ee07 3a90 	vmov	s15, r3
 8103cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103cc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103ce2:	e043      	b.n	8103d6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103ce4:	693b      	ldr	r3, [r7, #16]
 8103ce6:	ee07 3a90 	vmov	s15, r3
 8103cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103dd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103cf6:	4b2f      	ldr	r3, [pc, #188]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103cfe:	ee07 3a90 	vmov	s15, r3
 8103d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8103d0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103d26:	e021      	b.n	8103d6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103d28:	693b      	ldr	r3, [r7, #16]
 8103d2a:	ee07 3a90 	vmov	s15, r3
 8103d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d3a:	4b1e      	ldr	r3, [pc, #120]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d42:	ee07 3a90 	vmov	s15, r3
 8103d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103d4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103d6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103d6c:	4b11      	ldr	r3, [pc, #68]	; (8103db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103d70:	0a5b      	lsrs	r3, r3, #9
 8103d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103d76:	3301      	adds	r3, #1
 8103d78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103d7a:	683b      	ldr	r3, [r7, #0]
 8103d7c:	ee07 3a90 	vmov	s15, r3
 8103d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d90:	ee17 3a90 	vmov	r3, s15
 8103d94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103d96:	e005      	b.n	8103da4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103d98:	2300      	movs	r3, #0
 8103d9a:	61bb      	str	r3, [r7, #24]
    break;
 8103d9c:	e002      	b.n	8103da4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103d9e:	4b07      	ldr	r3, [pc, #28]	; (8103dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103da0:	61bb      	str	r3, [r7, #24]
    break;
 8103da2:	bf00      	nop
  }

  return sysclockfreq;
 8103da4:	69bb      	ldr	r3, [r7, #24]
}
 8103da6:	4618      	mov	r0, r3
 8103da8:	3724      	adds	r7, #36	; 0x24
 8103daa:	46bd      	mov	sp, r7
 8103dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103db0:	4770      	bx	lr
 8103db2:	bf00      	nop
 8103db4:	58024400 	.word	0x58024400
 8103db8:	03d09000 	.word	0x03d09000
 8103dbc:	003d0900 	.word	0x003d0900
 8103dc0:	007a1200 	.word	0x007a1200
 8103dc4:	46000000 	.word	0x46000000
 8103dc8:	4c742400 	.word	0x4c742400
 8103dcc:	4a742400 	.word	0x4a742400
 8103dd0:	4af42400 	.word	0x4af42400

08103dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103dd4:	b580      	push	{r7, lr}
 8103dd6:	b082      	sub	sp, #8
 8103dd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103dda:	f7ff fe81 	bl	8103ae0 <HAL_RCC_GetSysClockFreq>
 8103dde:	4602      	mov	r2, r0
 8103de0:	4b11      	ldr	r3, [pc, #68]	; (8103e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8103de2:	699b      	ldr	r3, [r3, #24]
 8103de4:	0a1b      	lsrs	r3, r3, #8
 8103de6:	f003 030f 	and.w	r3, r3, #15
 8103dea:	4910      	ldr	r1, [pc, #64]	; (8103e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8103dec:	5ccb      	ldrb	r3, [r1, r3]
 8103dee:	f003 031f 	and.w	r3, r3, #31
 8103df2:	fa22 f303 	lsr.w	r3, r2, r3
 8103df6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103df8:	4b0b      	ldr	r3, [pc, #44]	; (8103e28 <HAL_RCC_GetHCLKFreq+0x54>)
 8103dfa:	699b      	ldr	r3, [r3, #24]
 8103dfc:	f003 030f 	and.w	r3, r3, #15
 8103e00:	4a0a      	ldr	r2, [pc, #40]	; (8103e2c <HAL_RCC_GetHCLKFreq+0x58>)
 8103e02:	5cd3      	ldrb	r3, [r2, r3]
 8103e04:	f003 031f 	and.w	r3, r3, #31
 8103e08:	687a      	ldr	r2, [r7, #4]
 8103e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8103e0e:	4a08      	ldr	r2, [pc, #32]	; (8103e30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103e10:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103e12:	4b07      	ldr	r3, [pc, #28]	; (8103e30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103e14:	681b      	ldr	r3, [r3, #0]
 8103e16:	4a07      	ldr	r2, [pc, #28]	; (8103e34 <HAL_RCC_GetHCLKFreq+0x60>)
 8103e18:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103e1a:	4b05      	ldr	r3, [pc, #20]	; (8103e30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103e1c:	681b      	ldr	r3, [r3, #0]
}
 8103e1e:	4618      	mov	r0, r3
 8103e20:	3708      	adds	r7, #8
 8103e22:	46bd      	mov	sp, r7
 8103e24:	bd80      	pop	{r7, pc}
 8103e26:	bf00      	nop
 8103e28:	58024400 	.word	0x58024400
 8103e2c:	0810c624 	.word	0x0810c624
 8103e30:	10000004 	.word	0x10000004
 8103e34:	10000000 	.word	0x10000000

08103e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103e38:	b580      	push	{r7, lr}
 8103e3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103e3c:	f7ff ffca 	bl	8103dd4 <HAL_RCC_GetHCLKFreq>
 8103e40:	4602      	mov	r2, r0
 8103e42:	4b06      	ldr	r3, [pc, #24]	; (8103e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8103e44:	69db      	ldr	r3, [r3, #28]
 8103e46:	091b      	lsrs	r3, r3, #4
 8103e48:	f003 0307 	and.w	r3, r3, #7
 8103e4c:	4904      	ldr	r1, [pc, #16]	; (8103e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103e4e:	5ccb      	ldrb	r3, [r1, r3]
 8103e50:	f003 031f 	and.w	r3, r3, #31
 8103e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103e58:	4618      	mov	r0, r3
 8103e5a:	bd80      	pop	{r7, pc}
 8103e5c:	58024400 	.word	0x58024400
 8103e60:	0810c624 	.word	0x0810c624

08103e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103e64:	b580      	push	{r7, lr}
 8103e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103e68:	f7ff ffb4 	bl	8103dd4 <HAL_RCC_GetHCLKFreq>
 8103e6c:	4602      	mov	r2, r0
 8103e6e:	4b06      	ldr	r3, [pc, #24]	; (8103e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103e70:	69db      	ldr	r3, [r3, #28]
 8103e72:	0a1b      	lsrs	r3, r3, #8
 8103e74:	f003 0307 	and.w	r3, r3, #7
 8103e78:	4904      	ldr	r1, [pc, #16]	; (8103e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8103e7a:	5ccb      	ldrb	r3, [r1, r3]
 8103e7c:	f003 031f 	and.w	r3, r3, #31
 8103e80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103e84:	4618      	mov	r0, r3
 8103e86:	bd80      	pop	{r7, pc}
 8103e88:	58024400 	.word	0x58024400
 8103e8c:	0810c624 	.word	0x0810c624

08103e90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103e90:	b580      	push	{r7, lr}
 8103e92:	b086      	sub	sp, #24
 8103e94:	af00      	add	r7, sp, #0
 8103e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103e98:	2300      	movs	r3, #0
 8103e9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103e9c:	2300      	movs	r3, #0
 8103e9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103ea8:	2b00      	cmp	r3, #0
 8103eaa:	d03f      	beq.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103eb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103eb4:	d02a      	beq.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103eba:	d824      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ec0:	d018      	beq.n	8103ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ec6:	d81e      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103ec8:	2b00      	cmp	r3, #0
 8103eca:	d003      	beq.n	8103ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103ed0:	d007      	beq.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103ed2:	e018      	b.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ed4:	4ba3      	ldr	r3, [pc, #652]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ed8:	4aa2      	ldr	r2, [pc, #648]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103ee0:	e015      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	3304      	adds	r3, #4
 8103ee6:	2102      	movs	r1, #2
 8103ee8:	4618      	mov	r0, r3
 8103eea:	f001 f9d5 	bl	8105298 <RCCEx_PLL2_Config>
 8103eee:	4603      	mov	r3, r0
 8103ef0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103ef2:	e00c      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	3324      	adds	r3, #36	; 0x24
 8103ef8:	2102      	movs	r1, #2
 8103efa:	4618      	mov	r0, r3
 8103efc:	f001 fa7e 	bl	81053fc <RCCEx_PLL3_Config>
 8103f00:	4603      	mov	r3, r0
 8103f02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103f04:	e003      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f06:	2301      	movs	r3, #1
 8103f08:	75fb      	strb	r3, [r7, #23]
      break;
 8103f0a:	e000      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f0e:	7dfb      	ldrb	r3, [r7, #23]
 8103f10:	2b00      	cmp	r3, #0
 8103f12:	d109      	bne.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103f14:	4b93      	ldr	r3, [pc, #588]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103f20:	4990      	ldr	r1, [pc, #576]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103f22:	4313      	orrs	r3, r2
 8103f24:	650b      	str	r3, [r1, #80]	; 0x50
 8103f26:	e001      	b.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f28:	7dfb      	ldrb	r3, [r7, #23]
 8103f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f34:	2b00      	cmp	r3, #0
 8103f36:	d03d      	beq.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f3c:	2b04      	cmp	r3, #4
 8103f3e:	d826      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103f40:	a201      	add	r2, pc, #4	; (adr r2, 8103f48 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f46:	bf00      	nop
 8103f48:	08103f5d 	.word	0x08103f5d
 8103f4c:	08103f6b 	.word	0x08103f6b
 8103f50:	08103f7d 	.word	0x08103f7d
 8103f54:	08103f95 	.word	0x08103f95
 8103f58:	08103f95 	.word	0x08103f95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f5c:	4b81      	ldr	r3, [pc, #516]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f60:	4a80      	ldr	r2, [pc, #512]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103f68:	e015      	b.n	8103f96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	3304      	adds	r3, #4
 8103f6e:	2100      	movs	r1, #0
 8103f70:	4618      	mov	r0, r3
 8103f72:	f001 f991 	bl	8105298 <RCCEx_PLL2_Config>
 8103f76:	4603      	mov	r3, r0
 8103f78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103f7a:	e00c      	b.n	8103f96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	3324      	adds	r3, #36	; 0x24
 8103f80:	2100      	movs	r1, #0
 8103f82:	4618      	mov	r0, r3
 8103f84:	f001 fa3a 	bl	81053fc <RCCEx_PLL3_Config>
 8103f88:	4603      	mov	r3, r0
 8103f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103f8c:	e003      	b.n	8103f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f8e:	2301      	movs	r3, #1
 8103f90:	75fb      	strb	r3, [r7, #23]
      break;
 8103f92:	e000      	b.n	8103f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f96:	7dfb      	ldrb	r3, [r7, #23]
 8103f98:	2b00      	cmp	r3, #0
 8103f9a:	d109      	bne.n	8103fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103f9c:	4b71      	ldr	r3, [pc, #452]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fa0:	f023 0207 	bic.w	r2, r3, #7
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fa8:	496e      	ldr	r1, [pc, #440]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103faa:	4313      	orrs	r3, r2
 8103fac:	650b      	str	r3, [r1, #80]	; 0x50
 8103fae:	e001      	b.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fb0:	7dfb      	ldrb	r3, [r7, #23]
 8103fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103fbc:	2b00      	cmp	r3, #0
 8103fbe:	d042      	beq.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103fc8:	d02b      	beq.n	8104022 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103fce:	d825      	bhi.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103fd0:	2bc0      	cmp	r3, #192	; 0xc0
 8103fd2:	d028      	beq.n	8104026 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8103fd6:	d821      	bhi.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103fd8:	2b80      	cmp	r3, #128	; 0x80
 8103fda:	d016      	beq.n	810400a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103fdc:	2b80      	cmp	r3, #128	; 0x80
 8103fde:	d81d      	bhi.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d002      	beq.n	8103fea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103fe4:	2b40      	cmp	r3, #64	; 0x40
 8103fe6:	d007      	beq.n	8103ff8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103fe8:	e018      	b.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fea:	4b5e      	ldr	r3, [pc, #376]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fee:	4a5d      	ldr	r2, [pc, #372]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103ff6:	e017      	b.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	3304      	adds	r3, #4
 8103ffc:	2100      	movs	r1, #0
 8103ffe:	4618      	mov	r0, r3
 8104000:	f001 f94a 	bl	8105298 <RCCEx_PLL2_Config>
 8104004:	4603      	mov	r3, r0
 8104006:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104008:	e00e      	b.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	3324      	adds	r3, #36	; 0x24
 810400e:	2100      	movs	r1, #0
 8104010:	4618      	mov	r0, r3
 8104012:	f001 f9f3 	bl	81053fc <RCCEx_PLL3_Config>
 8104016:	4603      	mov	r3, r0
 8104018:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810401a:	e005      	b.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810401c:	2301      	movs	r3, #1
 810401e:	75fb      	strb	r3, [r7, #23]
      break;
 8104020:	e002      	b.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104022:	bf00      	nop
 8104024:	e000      	b.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104028:	7dfb      	ldrb	r3, [r7, #23]
 810402a:	2b00      	cmp	r3, #0
 810402c:	d109      	bne.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810402e:	4b4d      	ldr	r3, [pc, #308]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104032:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810403a:	494a      	ldr	r1, [pc, #296]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810403c:	4313      	orrs	r3, r2
 810403e:	650b      	str	r3, [r1, #80]	; 0x50
 8104040:	e001      	b.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104042:	7dfb      	ldrb	r3, [r7, #23]
 8104044:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810404e:	2b00      	cmp	r3, #0
 8104050:	d049      	beq.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810405c:	d030      	beq.n	81040c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 810405e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104062:	d82a      	bhi.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104064:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104068:	d02c      	beq.n	81040c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810406a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810406e:	d824      	bhi.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104074:	d018      	beq.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810407a:	d81e      	bhi.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810407c:	2b00      	cmp	r3, #0
 810407e:	d003      	beq.n	8104088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104084:	d007      	beq.n	8104096 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104086:	e018      	b.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104088:	4b36      	ldr	r3, [pc, #216]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810408c:	4a35      	ldr	r2, [pc, #212]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810408e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104094:	e017      	b.n	81040c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	3304      	adds	r3, #4
 810409a:	2100      	movs	r1, #0
 810409c:	4618      	mov	r0, r3
 810409e:	f001 f8fb 	bl	8105298 <RCCEx_PLL2_Config>
 81040a2:	4603      	mov	r3, r0
 81040a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81040a6:	e00e      	b.n	81040c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	3324      	adds	r3, #36	; 0x24
 81040ac:	2100      	movs	r1, #0
 81040ae:	4618      	mov	r0, r3
 81040b0:	f001 f9a4 	bl	81053fc <RCCEx_PLL3_Config>
 81040b4:	4603      	mov	r3, r0
 81040b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040b8:	e005      	b.n	81040c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81040ba:	2301      	movs	r3, #1
 81040bc:	75fb      	strb	r3, [r7, #23]
      break;
 81040be:	e002      	b.n	81040c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81040c0:	bf00      	nop
 81040c2:	e000      	b.n	81040c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81040c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040c6:	7dfb      	ldrb	r3, [r7, #23]
 81040c8:	2b00      	cmp	r3, #0
 81040ca:	d10a      	bne.n	81040e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81040cc:	4b25      	ldr	r3, [pc, #148]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81040d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81040da:	4922      	ldr	r1, [pc, #136]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040dc:	4313      	orrs	r3, r2
 81040de:	658b      	str	r3, [r1, #88]	; 0x58
 81040e0:	e001      	b.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040e2:	7dfb      	ldrb	r3, [r7, #23]
 81040e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81040ee:	2b00      	cmp	r3, #0
 81040f0:	d04b      	beq.n	810418a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81040f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81040fc:	d030      	beq.n	8104160 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81040fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104102:	d82a      	bhi.n	810415a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104108:	d02e      	beq.n	8104168 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 810410a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810410e:	d824      	bhi.n	810415a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104114:	d018      	beq.n	8104148 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810411a:	d81e      	bhi.n	810415a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810411c:	2b00      	cmp	r3, #0
 810411e:	d003      	beq.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104124:	d007      	beq.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104126:	e018      	b.n	810415a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104128:	4b0e      	ldr	r3, [pc, #56]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810412c:	4a0d      	ldr	r2, [pc, #52]	; (8104164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810412e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104134:	e019      	b.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	3304      	adds	r3, #4
 810413a:	2100      	movs	r1, #0
 810413c:	4618      	mov	r0, r3
 810413e:	f001 f8ab 	bl	8105298 <RCCEx_PLL2_Config>
 8104142:	4603      	mov	r3, r0
 8104144:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104146:	e010      	b.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	3324      	adds	r3, #36	; 0x24
 810414c:	2100      	movs	r1, #0
 810414e:	4618      	mov	r0, r3
 8104150:	f001 f954 	bl	81053fc <RCCEx_PLL3_Config>
 8104154:	4603      	mov	r3, r0
 8104156:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104158:	e007      	b.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810415a:	2301      	movs	r3, #1
 810415c:	75fb      	strb	r3, [r7, #23]
      break;
 810415e:	e004      	b.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8104160:	bf00      	nop
 8104162:	e002      	b.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8104164:	58024400 	.word	0x58024400
      break;
 8104168:	bf00      	nop
    }

    if(ret == HAL_OK)
 810416a:	7dfb      	ldrb	r3, [r7, #23]
 810416c:	2b00      	cmp	r3, #0
 810416e:	d10a      	bne.n	8104186 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104170:	4b99      	ldr	r3, [pc, #612]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104174:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810417e:	4996      	ldr	r1, [pc, #600]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104180:	4313      	orrs	r3, r2
 8104182:	658b      	str	r3, [r1, #88]	; 0x58
 8104184:	e001      	b.n	810418a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104186:	7dfb      	ldrb	r3, [r7, #23]
 8104188:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104192:	2b00      	cmp	r3, #0
 8104194:	d032      	beq.n	81041fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810419a:	2b30      	cmp	r3, #48	; 0x30
 810419c:	d01c      	beq.n	81041d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810419e:	2b30      	cmp	r3, #48	; 0x30
 81041a0:	d817      	bhi.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 81041a2:	2b20      	cmp	r3, #32
 81041a4:	d00c      	beq.n	81041c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 81041a6:	2b20      	cmp	r3, #32
 81041a8:	d813      	bhi.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d016      	beq.n	81041dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 81041ae:	2b10      	cmp	r3, #16
 81041b0:	d10f      	bne.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041b2:	4b89      	ldr	r3, [pc, #548]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041b6:	4a88      	ldr	r2, [pc, #544]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81041be:	e00e      	b.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	3304      	adds	r3, #4
 81041c4:	2102      	movs	r1, #2
 81041c6:	4618      	mov	r0, r3
 81041c8:	f001 f866 	bl	8105298 <RCCEx_PLL2_Config>
 81041cc:	4603      	mov	r3, r0
 81041ce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81041d0:	e005      	b.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81041d2:	2301      	movs	r3, #1
 81041d4:	75fb      	strb	r3, [r7, #23]
      break;
 81041d6:	e002      	b.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81041d8:	bf00      	nop
 81041da:	e000      	b.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81041dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041de:	7dfb      	ldrb	r3, [r7, #23]
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d109      	bne.n	81041f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81041e4:	4b7c      	ldr	r3, [pc, #496]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81041f0:	4979      	ldr	r1, [pc, #484]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81041f2:	4313      	orrs	r3, r2
 81041f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 81041f6:	e001      	b.n	81041fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041f8:	7dfb      	ldrb	r3, [r7, #23]
 81041fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104204:	2b00      	cmp	r3, #0
 8104206:	d047      	beq.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810420c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104210:	d030      	beq.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104216:	d82a      	bhi.n	810426e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810421c:	d02c      	beq.n	8104278 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 810421e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104222:	d824      	bhi.n	810426e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104228:	d018      	beq.n	810425c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810422a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810422e:	d81e      	bhi.n	810426e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104230:	2b00      	cmp	r3, #0
 8104232:	d003      	beq.n	810423c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8104234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104238:	d007      	beq.n	810424a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810423a:	e018      	b.n	810426e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810423c:	4b66      	ldr	r3, [pc, #408]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104240:	4a65      	ldr	r2, [pc, #404]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104248:	e017      	b.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	3304      	adds	r3, #4
 810424e:	2100      	movs	r1, #0
 8104250:	4618      	mov	r0, r3
 8104252:	f001 f821 	bl	8105298 <RCCEx_PLL2_Config>
 8104256:	4603      	mov	r3, r0
 8104258:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810425a:	e00e      	b.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	3324      	adds	r3, #36	; 0x24
 8104260:	2100      	movs	r1, #0
 8104262:	4618      	mov	r0, r3
 8104264:	f001 f8ca 	bl	81053fc <RCCEx_PLL3_Config>
 8104268:	4603      	mov	r3, r0
 810426a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810426c:	e005      	b.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810426e:	2301      	movs	r3, #1
 8104270:	75fb      	strb	r3, [r7, #23]
      break;
 8104272:	e002      	b.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104274:	bf00      	nop
 8104276:	e000      	b.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104278:	bf00      	nop
    }

    if(ret == HAL_OK)
 810427a:	7dfb      	ldrb	r3, [r7, #23]
 810427c:	2b00      	cmp	r3, #0
 810427e:	d109      	bne.n	8104294 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104280:	4b55      	ldr	r3, [pc, #340]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104284:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810428c:	4952      	ldr	r1, [pc, #328]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810428e:	4313      	orrs	r3, r2
 8104290:	650b      	str	r3, [r1, #80]	; 0x50
 8104292:	e001      	b.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104294:	7dfb      	ldrb	r3, [r7, #23]
 8104296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81042a0:	2b00      	cmp	r3, #0
 81042a2:	d049      	beq.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81042a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81042ac:	d02e      	beq.n	810430c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 81042ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81042b2:	d828      	bhi.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81042b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81042b8:	d02a      	beq.n	8104310 <HAL_RCCEx_PeriphCLKConfig+0x480>
 81042ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81042be:	d822      	bhi.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81042c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81042c4:	d026      	beq.n	8104314 <HAL_RCCEx_PeriphCLKConfig+0x484>
 81042c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81042ca:	d81c      	bhi.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81042cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81042d0:	d010      	beq.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 81042d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81042d6:	d816      	bhi.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81042d8:	2b00      	cmp	r3, #0
 81042da:	d01d      	beq.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x488>
 81042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81042e0:	d111      	bne.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	3304      	adds	r3, #4
 81042e6:	2101      	movs	r1, #1
 81042e8:	4618      	mov	r0, r3
 81042ea:	f000 ffd5 	bl	8105298 <RCCEx_PLL2_Config>
 81042ee:	4603      	mov	r3, r0
 81042f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81042f2:	e012      	b.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	3324      	adds	r3, #36	; 0x24
 81042f8:	2101      	movs	r1, #1
 81042fa:	4618      	mov	r0, r3
 81042fc:	f001 f87e 	bl	81053fc <RCCEx_PLL3_Config>
 8104300:	4603      	mov	r3, r0
 8104302:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104304:	e009      	b.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104306:	2301      	movs	r3, #1
 8104308:	75fb      	strb	r3, [r7, #23]
      break;
 810430a:	e006      	b.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810430c:	bf00      	nop
 810430e:	e004      	b.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104310:	bf00      	nop
 8104312:	e002      	b.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104314:	bf00      	nop
 8104316:	e000      	b.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104318:	bf00      	nop
    }

    if(ret == HAL_OK)
 810431a:	7dfb      	ldrb	r3, [r7, #23]
 810431c:	2b00      	cmp	r3, #0
 810431e:	d109      	bne.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104320:	4b2d      	ldr	r3, [pc, #180]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104324:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810432c:	492a      	ldr	r1, [pc, #168]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810432e:	4313      	orrs	r3, r2
 8104330:	650b      	str	r3, [r1, #80]	; 0x50
 8104332:	e001      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104334:	7dfb      	ldrb	r3, [r7, #23]
 8104336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104340:	2b00      	cmp	r3, #0
 8104342:	d04d      	beq.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810434e:	d02e      	beq.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8104350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104354:	d828      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810435a:	d02a      	beq.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 810435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104360:	d822      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104366:	d026      	beq.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8104368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810436c:	d81c      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810436e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104372:	d010      	beq.n	8104396 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8104374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104378:	d816      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810437a:	2b00      	cmp	r3, #0
 810437c:	d01d      	beq.n	81043ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 810437e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104382:	d111      	bne.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	3304      	adds	r3, #4
 8104388:	2101      	movs	r1, #1
 810438a:	4618      	mov	r0, r3
 810438c:	f000 ff84 	bl	8105298 <RCCEx_PLL2_Config>
 8104390:	4603      	mov	r3, r0
 8104392:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104394:	e012      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	3324      	adds	r3, #36	; 0x24
 810439a:	2101      	movs	r1, #1
 810439c:	4618      	mov	r0, r3
 810439e:	f001 f82d 	bl	81053fc <RCCEx_PLL3_Config>
 81043a2:	4603      	mov	r3, r0
 81043a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81043a6:	e009      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81043a8:	2301      	movs	r3, #1
 81043aa:	75fb      	strb	r3, [r7, #23]
      break;
 81043ac:	e006      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81043ae:	bf00      	nop
 81043b0:	e004      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81043b2:	bf00      	nop
 81043b4:	e002      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81043b6:	bf00      	nop
 81043b8:	e000      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81043ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043bc:	7dfb      	ldrb	r3, [r7, #23]
 81043be:	2b00      	cmp	r3, #0
 81043c0:	d10c      	bne.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81043c2:	4b05      	ldr	r3, [pc, #20]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81043d0:	4901      	ldr	r1, [pc, #4]	; (81043d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81043d2:	4313      	orrs	r3, r2
 81043d4:	658b      	str	r3, [r1, #88]	; 0x58
 81043d6:	e003      	b.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81043d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043dc:	7dfb      	ldrb	r3, [r7, #23]
 81043de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81043e8:	2b00      	cmp	r3, #0
 81043ea:	d02f      	beq.n	810444c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043f4:	d00e      	beq.n	8104414 <HAL_RCCEx_PeriphCLKConfig+0x584>
 81043f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043fa:	d814      	bhi.n	8104426 <HAL_RCCEx_PeriphCLKConfig+0x596>
 81043fc:	2b00      	cmp	r3, #0
 81043fe:	d015      	beq.n	810442c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104404:	d10f      	bne.n	8104426 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104406:	4bb0      	ldr	r3, [pc, #704]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810440a:	4aaf      	ldr	r2, [pc, #700]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810440c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104412:	e00c      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	3304      	adds	r3, #4
 8104418:	2101      	movs	r1, #1
 810441a:	4618      	mov	r0, r3
 810441c:	f000 ff3c 	bl	8105298 <RCCEx_PLL2_Config>
 8104420:	4603      	mov	r3, r0
 8104422:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104424:	e003      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104426:	2301      	movs	r3, #1
 8104428:	75fb      	strb	r3, [r7, #23]
      break;
 810442a:	e000      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 810442c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810442e:	7dfb      	ldrb	r3, [r7, #23]
 8104430:	2b00      	cmp	r3, #0
 8104432:	d109      	bne.n	8104448 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104434:	4ba4      	ldr	r3, [pc, #656]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104438:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104440:	49a1      	ldr	r1, [pc, #644]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104442:	4313      	orrs	r3, r2
 8104444:	650b      	str	r3, [r1, #80]	; 0x50
 8104446:	e001      	b.n	810444c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104448:	7dfb      	ldrb	r3, [r7, #23]
 810444a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104454:	2b00      	cmp	r3, #0
 8104456:	d032      	beq.n	81044be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810445c:	2b03      	cmp	r3, #3
 810445e:	d81b      	bhi.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104460:	a201      	add	r2, pc, #4	; (adr r2, 8104468 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8104462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104466:	bf00      	nop
 8104468:	0810449f 	.word	0x0810449f
 810446c:	08104479 	.word	0x08104479
 8104470:	08104487 	.word	0x08104487
 8104474:	0810449f 	.word	0x0810449f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104478:	4b93      	ldr	r3, [pc, #588]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810447c:	4a92      	ldr	r2, [pc, #584]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810447e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104484:	e00c      	b.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	3304      	adds	r3, #4
 810448a:	2102      	movs	r1, #2
 810448c:	4618      	mov	r0, r3
 810448e:	f000 ff03 	bl	8105298 <RCCEx_PLL2_Config>
 8104492:	4603      	mov	r3, r0
 8104494:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104496:	e003      	b.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104498:	2301      	movs	r3, #1
 810449a:	75fb      	strb	r3, [r7, #23]
      break;
 810449c:	e000      	b.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810449e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81044a0:	7dfb      	ldrb	r3, [r7, #23]
 81044a2:	2b00      	cmp	r3, #0
 81044a4:	d109      	bne.n	81044ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81044a6:	4b88      	ldr	r3, [pc, #544]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81044aa:	f023 0203 	bic.w	r2, r3, #3
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81044b2:	4985      	ldr	r1, [pc, #532]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81044b4:	4313      	orrs	r3, r2
 81044b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81044b8:	e001      	b.n	81044be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044ba:	7dfb      	ldrb	r3, [r7, #23]
 81044bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	681b      	ldr	r3, [r3, #0]
 81044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	f000 8088 	beq.w	81045dc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81044cc:	4b7f      	ldr	r3, [pc, #508]	; (81046cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	4a7e      	ldr	r2, [pc, #504]	; (81046cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81044d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81044d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81044d8:	f7fe f872 	bl	81025c0 <HAL_GetTick>
 81044dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81044de:	e009      	b.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81044e0:	f7fe f86e 	bl	81025c0 <HAL_GetTick>
 81044e4:	4602      	mov	r2, r0
 81044e6:	693b      	ldr	r3, [r7, #16]
 81044e8:	1ad3      	subs	r3, r2, r3
 81044ea:	2b64      	cmp	r3, #100	; 0x64
 81044ec:	d902      	bls.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81044ee:	2303      	movs	r3, #3
 81044f0:	75fb      	strb	r3, [r7, #23]
        break;
 81044f2:	e005      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81044f4:	4b75      	ldr	r3, [pc, #468]	; (81046cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81044fc:	2b00      	cmp	r3, #0
 81044fe:	d0ef      	beq.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104500:	7dfb      	ldrb	r3, [r7, #23]
 8104502:	2b00      	cmp	r3, #0
 8104504:	d168      	bne.n	81045d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104506:	4b70      	ldr	r3, [pc, #448]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104510:	4053      	eors	r3, r2
 8104512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104516:	2b00      	cmp	r3, #0
 8104518:	d013      	beq.n	8104542 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810451a:	4b6b      	ldr	r3, [pc, #428]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104522:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104524:	4b68      	ldr	r3, [pc, #416]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104528:	4a67      	ldr	r2, [pc, #412]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810452e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104530:	4b65      	ldr	r3, [pc, #404]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104534:	4a64      	ldr	r2, [pc, #400]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810453a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810453c:	4a62      	ldr	r2, [pc, #392]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810454c:	d115      	bne.n	810457a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810454e:	f7fe f837 	bl	81025c0 <HAL_GetTick>
 8104552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104554:	e00b      	b.n	810456e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104556:	f7fe f833 	bl	81025c0 <HAL_GetTick>
 810455a:	4602      	mov	r2, r0
 810455c:	693b      	ldr	r3, [r7, #16]
 810455e:	1ad3      	subs	r3, r2, r3
 8104560:	f241 3288 	movw	r2, #5000	; 0x1388
 8104564:	4293      	cmp	r3, r2
 8104566:	d902      	bls.n	810456e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104568:	2303      	movs	r3, #3
 810456a:	75fb      	strb	r3, [r7, #23]
            break;
 810456c:	e005      	b.n	810457a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810456e:	4b56      	ldr	r3, [pc, #344]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104572:	f003 0302 	and.w	r3, r3, #2
 8104576:	2b00      	cmp	r3, #0
 8104578:	d0ed      	beq.n	8104556 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810457a:	7dfb      	ldrb	r3, [r7, #23]
 810457c:	2b00      	cmp	r3, #0
 810457e:	d128      	bne.n	81045d2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810458a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810458e:	d10f      	bne.n	81045b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104590:	4b4d      	ldr	r3, [pc, #308]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104592:	691b      	ldr	r3, [r3, #16]
 8104594:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810459e:	091b      	lsrs	r3, r3, #4
 81045a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81045a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81045a8:	4947      	ldr	r1, [pc, #284]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045aa:	4313      	orrs	r3, r2
 81045ac:	610b      	str	r3, [r1, #16]
 81045ae:	e005      	b.n	81045bc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81045b0:	4b45      	ldr	r3, [pc, #276]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045b2:	691b      	ldr	r3, [r3, #16]
 81045b4:	4a44      	ldr	r2, [pc, #272]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81045ba:	6113      	str	r3, [r2, #16]
 81045bc:	4b42      	ldr	r3, [pc, #264]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81045c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81045ca:	493f      	ldr	r1, [pc, #252]	; (81046c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045cc:	4313      	orrs	r3, r2
 81045ce:	670b      	str	r3, [r1, #112]	; 0x70
 81045d0:	e004      	b.n	81045dc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81045d2:	7dfb      	ldrb	r3, [r7, #23]
 81045d4:	75bb      	strb	r3, [r7, #22]
 81045d6:	e001      	b.n	81045dc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045d8:	7dfb      	ldrb	r3, [r7, #23]
 81045da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	f003 0301 	and.w	r3, r3, #1
 81045e4:	2b00      	cmp	r3, #0
 81045e6:	f000 8083 	beq.w	81046f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81045ee:	2b28      	cmp	r3, #40	; 0x28
 81045f0:	d866      	bhi.n	81046c0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81045f2:	a201      	add	r2, pc, #4	; (adr r2, 81045f8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045f8:	081046d1 	.word	0x081046d1
 81045fc:	081046c1 	.word	0x081046c1
 8104600:	081046c1 	.word	0x081046c1
 8104604:	081046c1 	.word	0x081046c1
 8104608:	081046c1 	.word	0x081046c1
 810460c:	081046c1 	.word	0x081046c1
 8104610:	081046c1 	.word	0x081046c1
 8104614:	081046c1 	.word	0x081046c1
 8104618:	0810469d 	.word	0x0810469d
 810461c:	081046c1 	.word	0x081046c1
 8104620:	081046c1 	.word	0x081046c1
 8104624:	081046c1 	.word	0x081046c1
 8104628:	081046c1 	.word	0x081046c1
 810462c:	081046c1 	.word	0x081046c1
 8104630:	081046c1 	.word	0x081046c1
 8104634:	081046c1 	.word	0x081046c1
 8104638:	081046af 	.word	0x081046af
 810463c:	081046c1 	.word	0x081046c1
 8104640:	081046c1 	.word	0x081046c1
 8104644:	081046c1 	.word	0x081046c1
 8104648:	081046c1 	.word	0x081046c1
 810464c:	081046c1 	.word	0x081046c1
 8104650:	081046c1 	.word	0x081046c1
 8104654:	081046c1 	.word	0x081046c1
 8104658:	081046d1 	.word	0x081046d1
 810465c:	081046c1 	.word	0x081046c1
 8104660:	081046c1 	.word	0x081046c1
 8104664:	081046c1 	.word	0x081046c1
 8104668:	081046c1 	.word	0x081046c1
 810466c:	081046c1 	.word	0x081046c1
 8104670:	081046c1 	.word	0x081046c1
 8104674:	081046c1 	.word	0x081046c1
 8104678:	081046d1 	.word	0x081046d1
 810467c:	081046c1 	.word	0x081046c1
 8104680:	081046c1 	.word	0x081046c1
 8104684:	081046c1 	.word	0x081046c1
 8104688:	081046c1 	.word	0x081046c1
 810468c:	081046c1 	.word	0x081046c1
 8104690:	081046c1 	.word	0x081046c1
 8104694:	081046c1 	.word	0x081046c1
 8104698:	081046d1 	.word	0x081046d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	3304      	adds	r3, #4
 81046a0:	2101      	movs	r1, #1
 81046a2:	4618      	mov	r0, r3
 81046a4:	f000 fdf8 	bl	8105298 <RCCEx_PLL2_Config>
 81046a8:	4603      	mov	r3, r0
 81046aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81046ac:	e011      	b.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	3324      	adds	r3, #36	; 0x24
 81046b2:	2101      	movs	r1, #1
 81046b4:	4618      	mov	r0, r3
 81046b6:	f000 fea1 	bl	81053fc <RCCEx_PLL3_Config>
 81046ba:	4603      	mov	r3, r0
 81046bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81046be:	e008      	b.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81046c0:	2301      	movs	r3, #1
 81046c2:	75fb      	strb	r3, [r7, #23]
      break;
 81046c4:	e005      	b.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 81046c6:	bf00      	nop
 81046c8:	58024400 	.word	0x58024400
 81046cc:	58024800 	.word	0x58024800
      break;
 81046d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046d2:	7dfb      	ldrb	r3, [r7, #23]
 81046d4:	2b00      	cmp	r3, #0
 81046d6:	d109      	bne.n	81046ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81046d8:	4b96      	ldr	r3, [pc, #600]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81046dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81046e4:	4993      	ldr	r1, [pc, #588]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81046e6:	4313      	orrs	r3, r2
 81046e8:	654b      	str	r3, [r1, #84]	; 0x54
 81046ea:	e001      	b.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046ec:	7dfb      	ldrb	r3, [r7, #23]
 81046ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	681b      	ldr	r3, [r3, #0]
 81046f4:	f003 0302 	and.w	r3, r3, #2
 81046f8:	2b00      	cmp	r3, #0
 81046fa:	d038      	beq.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104700:	2b05      	cmp	r3, #5
 8104702:	d821      	bhi.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104704:	a201      	add	r2, pc, #4	; (adr r2, 810470c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8104706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810470a:	bf00      	nop
 810470c:	0810474f 	.word	0x0810474f
 8104710:	08104725 	.word	0x08104725
 8104714:	08104737 	.word	0x08104737
 8104718:	0810474f 	.word	0x0810474f
 810471c:	0810474f 	.word	0x0810474f
 8104720:	0810474f 	.word	0x0810474f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	3304      	adds	r3, #4
 8104728:	2101      	movs	r1, #1
 810472a:	4618      	mov	r0, r3
 810472c:	f000 fdb4 	bl	8105298 <RCCEx_PLL2_Config>
 8104730:	4603      	mov	r3, r0
 8104732:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104734:	e00c      	b.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	3324      	adds	r3, #36	; 0x24
 810473a:	2101      	movs	r1, #1
 810473c:	4618      	mov	r0, r3
 810473e:	f000 fe5d 	bl	81053fc <RCCEx_PLL3_Config>
 8104742:	4603      	mov	r3, r0
 8104744:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104746:	e003      	b.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104748:	2301      	movs	r3, #1
 810474a:	75fb      	strb	r3, [r7, #23]
      break;
 810474c:	e000      	b.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 810474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104750:	7dfb      	ldrb	r3, [r7, #23]
 8104752:	2b00      	cmp	r3, #0
 8104754:	d109      	bne.n	810476a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104756:	4b77      	ldr	r3, [pc, #476]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810475a:	f023 0207 	bic.w	r2, r3, #7
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104762:	4974      	ldr	r1, [pc, #464]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104764:	4313      	orrs	r3, r2
 8104766:	654b      	str	r3, [r1, #84]	; 0x54
 8104768:	e001      	b.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810476a:	7dfb      	ldrb	r3, [r7, #23]
 810476c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	f003 0304 	and.w	r3, r3, #4
 8104776:	2b00      	cmp	r3, #0
 8104778:	d03a      	beq.n	81047f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104780:	2b05      	cmp	r3, #5
 8104782:	d821      	bhi.n	81047c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8104784:	a201      	add	r2, pc, #4	; (adr r2, 810478c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8104786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810478a:	bf00      	nop
 810478c:	081047cf 	.word	0x081047cf
 8104790:	081047a5 	.word	0x081047a5
 8104794:	081047b7 	.word	0x081047b7
 8104798:	081047cf 	.word	0x081047cf
 810479c:	081047cf 	.word	0x081047cf
 81047a0:	081047cf 	.word	0x081047cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	3304      	adds	r3, #4
 81047a8:	2101      	movs	r1, #1
 81047aa:	4618      	mov	r0, r3
 81047ac:	f000 fd74 	bl	8105298 <RCCEx_PLL2_Config>
 81047b0:	4603      	mov	r3, r0
 81047b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81047b4:	e00c      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	3324      	adds	r3, #36	; 0x24
 81047ba:	2101      	movs	r1, #1
 81047bc:	4618      	mov	r0, r3
 81047be:	f000 fe1d 	bl	81053fc <RCCEx_PLL3_Config>
 81047c2:	4603      	mov	r3, r0
 81047c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81047c6:	e003      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81047c8:	2301      	movs	r3, #1
 81047ca:	75fb      	strb	r3, [r7, #23]
      break;
 81047cc:	e000      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 81047ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81047d0:	7dfb      	ldrb	r3, [r7, #23]
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d10a      	bne.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81047d6:	4b57      	ldr	r3, [pc, #348]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81047da:	f023 0207 	bic.w	r2, r3, #7
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81047e4:	4953      	ldr	r1, [pc, #332]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81047e6:	4313      	orrs	r3, r2
 81047e8:	658b      	str	r3, [r1, #88]	; 0x58
 81047ea:	e001      	b.n	81047f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047ec:	7dfb      	ldrb	r3, [r7, #23]
 81047ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	f003 0320 	and.w	r3, r3, #32
 81047f8:	2b00      	cmp	r3, #0
 81047fa:	d04b      	beq.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104806:	d02e      	beq.n	8104866 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810480c:	d828      	bhi.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104812:	d02a      	beq.n	810486a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104818:	d822      	bhi.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810481a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810481e:	d026      	beq.n	810486e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104824:	d81c      	bhi.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810482a:	d010      	beq.n	810484e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810482c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104830:	d816      	bhi.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104832:	2b00      	cmp	r3, #0
 8104834:	d01d      	beq.n	8104872 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8104836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810483a:	d111      	bne.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	3304      	adds	r3, #4
 8104840:	2100      	movs	r1, #0
 8104842:	4618      	mov	r0, r3
 8104844:	f000 fd28 	bl	8105298 <RCCEx_PLL2_Config>
 8104848:	4603      	mov	r3, r0
 810484a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810484c:	e012      	b.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	3324      	adds	r3, #36	; 0x24
 8104852:	2102      	movs	r1, #2
 8104854:	4618      	mov	r0, r3
 8104856:	f000 fdd1 	bl	81053fc <RCCEx_PLL3_Config>
 810485a:	4603      	mov	r3, r0
 810485c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810485e:	e009      	b.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104860:	2301      	movs	r3, #1
 8104862:	75fb      	strb	r3, [r7, #23]
      break;
 8104864:	e006      	b.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104866:	bf00      	nop
 8104868:	e004      	b.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810486a:	bf00      	nop
 810486c:	e002      	b.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810486e:	bf00      	nop
 8104870:	e000      	b.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104874:	7dfb      	ldrb	r3, [r7, #23]
 8104876:	2b00      	cmp	r3, #0
 8104878:	d10a      	bne.n	8104890 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810487a:	4b2e      	ldr	r3, [pc, #184]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810487e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104888:	492a      	ldr	r1, [pc, #168]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810488a:	4313      	orrs	r3, r2
 810488c:	654b      	str	r3, [r1, #84]	; 0x54
 810488e:	e001      	b.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104890:	7dfb      	ldrb	r3, [r7, #23]
 8104892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	681b      	ldr	r3, [r3, #0]
 8104898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810489c:	2b00      	cmp	r3, #0
 810489e:	d04d      	beq.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81048a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81048aa:	d02e      	beq.n	810490a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81048ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81048b0:	d828      	bhi.n	8104904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81048b6:	d02a      	beq.n	810490e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81048b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81048bc:	d822      	bhi.n	8104904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81048be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81048c2:	d026      	beq.n	8104912 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81048c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81048c8:	d81c      	bhi.n	8104904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81048ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81048ce:	d010      	beq.n	81048f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 81048d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81048d4:	d816      	bhi.n	8104904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81048d6:	2b00      	cmp	r3, #0
 81048d8:	d01d      	beq.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 81048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81048de:	d111      	bne.n	8104904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	3304      	adds	r3, #4
 81048e4:	2100      	movs	r1, #0
 81048e6:	4618      	mov	r0, r3
 81048e8:	f000 fcd6 	bl	8105298 <RCCEx_PLL2_Config>
 81048ec:	4603      	mov	r3, r0
 81048ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81048f0:	e012      	b.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	3324      	adds	r3, #36	; 0x24
 81048f6:	2102      	movs	r1, #2
 81048f8:	4618      	mov	r0, r3
 81048fa:	f000 fd7f 	bl	81053fc <RCCEx_PLL3_Config>
 81048fe:	4603      	mov	r3, r0
 8104900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104902:	e009      	b.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104904:	2301      	movs	r3, #1
 8104906:	75fb      	strb	r3, [r7, #23]
      break;
 8104908:	e006      	b.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810490a:	bf00      	nop
 810490c:	e004      	b.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810490e:	bf00      	nop
 8104910:	e002      	b.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104912:	bf00      	nop
 8104914:	e000      	b.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104918:	7dfb      	ldrb	r3, [r7, #23]
 810491a:	2b00      	cmp	r3, #0
 810491c:	d10c      	bne.n	8104938 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810491e:	4b05      	ldr	r3, [pc, #20]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104922:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810492c:	4901      	ldr	r1, [pc, #4]	; (8104934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810492e:	4313      	orrs	r3, r2
 8104930:	658b      	str	r3, [r1, #88]	; 0x58
 8104932:	e003      	b.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104938:	7dfb      	ldrb	r3, [r7, #23]
 810493a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	681b      	ldr	r3, [r3, #0]
 8104940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104944:	2b00      	cmp	r3, #0
 8104946:	d04b      	beq.n	81049e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810494e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104952:	d02e      	beq.n	81049b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104954:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104958:	d828      	bhi.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810495e:	d02a      	beq.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104964:	d822      	bhi.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104966:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810496a:	d026      	beq.n	81049ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 810496c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104970:	d81c      	bhi.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104976:	d010      	beq.n	810499a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8104978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810497c:	d816      	bhi.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810497e:	2b00      	cmp	r3, #0
 8104980:	d01d      	beq.n	81049be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104986:	d111      	bne.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104988:	687b      	ldr	r3, [r7, #4]
 810498a:	3304      	adds	r3, #4
 810498c:	2100      	movs	r1, #0
 810498e:	4618      	mov	r0, r3
 8104990:	f000 fc82 	bl	8105298 <RCCEx_PLL2_Config>
 8104994:	4603      	mov	r3, r0
 8104996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104998:	e012      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	3324      	adds	r3, #36	; 0x24
 810499e:	2102      	movs	r1, #2
 81049a0:	4618      	mov	r0, r3
 81049a2:	f000 fd2b 	bl	81053fc <RCCEx_PLL3_Config>
 81049a6:	4603      	mov	r3, r0
 81049a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81049aa:	e009      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81049ac:	2301      	movs	r3, #1
 81049ae:	75fb      	strb	r3, [r7, #23]
      break;
 81049b0:	e006      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81049b2:	bf00      	nop
 81049b4:	e004      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81049b6:	bf00      	nop
 81049b8:	e002      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81049ba:	bf00      	nop
 81049bc:	e000      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81049be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049c0:	7dfb      	ldrb	r3, [r7, #23]
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	d10a      	bne.n	81049dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81049c6:	4b9d      	ldr	r3, [pc, #628]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81049ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81049d4:	4999      	ldr	r1, [pc, #612]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81049d6:	4313      	orrs	r3, r2
 81049d8:	658b      	str	r3, [r1, #88]	; 0x58
 81049da:	e001      	b.n	81049e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049dc:	7dfb      	ldrb	r3, [r7, #23]
 81049de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	f003 0308 	and.w	r3, r3, #8
 81049e8:	2b00      	cmp	r3, #0
 81049ea:	d01a      	beq.n	8104a22 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81049f6:	d10a      	bne.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	3324      	adds	r3, #36	; 0x24
 81049fc:	2102      	movs	r1, #2
 81049fe:	4618      	mov	r0, r3
 8104a00:	f000 fcfc 	bl	81053fc <RCCEx_PLL3_Config>
 8104a04:	4603      	mov	r3, r0
 8104a06:	2b00      	cmp	r3, #0
 8104a08:	d001      	beq.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8104a0a:	2301      	movs	r3, #1
 8104a0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104a0e:	4b8b      	ldr	r3, [pc, #556]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104a1c:	4987      	ldr	r1, [pc, #540]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104a1e:	4313      	orrs	r3, r2
 8104a20:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	f003 0310 	and.w	r3, r3, #16
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d01a      	beq.n	8104a64 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a38:	d10a      	bne.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	3324      	adds	r3, #36	; 0x24
 8104a3e:	2102      	movs	r1, #2
 8104a40:	4618      	mov	r0, r3
 8104a42:	f000 fcdb 	bl	81053fc <RCCEx_PLL3_Config>
 8104a46:	4603      	mov	r3, r0
 8104a48:	2b00      	cmp	r3, #0
 8104a4a:	d001      	beq.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8104a4c:	2301      	movs	r3, #1
 8104a4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104a50:	4b7a      	ldr	r3, [pc, #488]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104a5e:	4977      	ldr	r1, [pc, #476]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104a60:	4313      	orrs	r3, r2
 8104a62:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104a6c:	2b00      	cmp	r3, #0
 8104a6e:	d034      	beq.n	8104ada <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a7a:	d01d      	beq.n	8104ab8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8104a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a80:	d817      	bhi.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d003      	beq.n	8104a8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8104a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104a8a:	d009      	beq.n	8104aa0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104a8c:	e011      	b.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	3304      	adds	r3, #4
 8104a92:	2100      	movs	r1, #0
 8104a94:	4618      	mov	r0, r3
 8104a96:	f000 fbff 	bl	8105298 <RCCEx_PLL2_Config>
 8104a9a:	4603      	mov	r3, r0
 8104a9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104a9e:	e00c      	b.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	3324      	adds	r3, #36	; 0x24
 8104aa4:	2102      	movs	r1, #2
 8104aa6:	4618      	mov	r0, r3
 8104aa8:	f000 fca8 	bl	81053fc <RCCEx_PLL3_Config>
 8104aac:	4603      	mov	r3, r0
 8104aae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104ab0:	e003      	b.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ab2:	2301      	movs	r3, #1
 8104ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8104ab6:	e000      	b.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104aba:	7dfb      	ldrb	r3, [r7, #23]
 8104abc:	2b00      	cmp	r3, #0
 8104abe:	d10a      	bne.n	8104ad6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104ac0:	4b5e      	ldr	r3, [pc, #376]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104ace:	495b      	ldr	r1, [pc, #364]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104ad0:	4313      	orrs	r3, r2
 8104ad2:	658b      	str	r3, [r1, #88]	; 0x58
 8104ad4:	e001      	b.n	8104ada <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ad6:	7dfb      	ldrb	r3, [r7, #23]
 8104ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104ae2:	2b00      	cmp	r3, #0
 8104ae4:	d033      	beq.n	8104b4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104af0:	d01c      	beq.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104af6:	d816      	bhi.n	8104b26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104afc:	d003      	beq.n	8104b06 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8104afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104b02:	d007      	beq.n	8104b14 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104b04:	e00f      	b.n	8104b26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b06:	4b4d      	ldr	r3, [pc, #308]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b0a:	4a4c      	ldr	r2, [pc, #304]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104b12:	e00c      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	3324      	adds	r3, #36	; 0x24
 8104b18:	2101      	movs	r1, #1
 8104b1a:	4618      	mov	r0, r3
 8104b1c:	f000 fc6e 	bl	81053fc <RCCEx_PLL3_Config>
 8104b20:	4603      	mov	r3, r0
 8104b22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104b24:	e003      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104b26:	2301      	movs	r3, #1
 8104b28:	75fb      	strb	r3, [r7, #23]
      break;
 8104b2a:	e000      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8104b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b2e:	7dfb      	ldrb	r3, [r7, #23]
 8104b30:	2b00      	cmp	r3, #0
 8104b32:	d10a      	bne.n	8104b4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104b34:	4b41      	ldr	r3, [pc, #260]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b42:	493e      	ldr	r1, [pc, #248]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b44:	4313      	orrs	r3, r2
 8104b46:	654b      	str	r3, [r1, #84]	; 0x54
 8104b48:	e001      	b.n	8104b4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b4a:	7dfb      	ldrb	r3, [r7, #23]
 8104b4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d029      	beq.n	8104bae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b5e:	2b00      	cmp	r3, #0
 8104b60:	d003      	beq.n	8104b6a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8104b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104b66:	d007      	beq.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8104b68:	e00f      	b.n	8104b8a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b6a:	4b34      	ldr	r3, [pc, #208]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b6e:	4a33      	ldr	r2, [pc, #204]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104b76:	e00b      	b.n	8104b90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	3304      	adds	r3, #4
 8104b7c:	2102      	movs	r1, #2
 8104b7e:	4618      	mov	r0, r3
 8104b80:	f000 fb8a 	bl	8105298 <RCCEx_PLL2_Config>
 8104b84:	4603      	mov	r3, r0
 8104b86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104b88:	e002      	b.n	8104b90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8104b8a:	2301      	movs	r3, #1
 8104b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8104b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b90:	7dfb      	ldrb	r3, [r7, #23]
 8104b92:	2b00      	cmp	r3, #0
 8104b94:	d109      	bne.n	8104baa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104b96:	4b29      	ldr	r3, [pc, #164]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ba2:	4926      	ldr	r1, [pc, #152]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104ba8:	e001      	b.n	8104bae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104baa:	7dfb      	ldrb	r3, [r7, #23]
 8104bac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104bb6:	2b00      	cmp	r3, #0
 8104bb8:	d00a      	beq.n	8104bd0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	3324      	adds	r3, #36	; 0x24
 8104bbe:	2102      	movs	r1, #2
 8104bc0:	4618      	mov	r0, r3
 8104bc2:	f000 fc1b 	bl	81053fc <RCCEx_PLL3_Config>
 8104bc6:	4603      	mov	r3, r0
 8104bc8:	2b00      	cmp	r3, #0
 8104bca:	d001      	beq.n	8104bd0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104bcc:	2301      	movs	r3, #1
 8104bce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104bd8:	2b00      	cmp	r3, #0
 8104bda:	d033      	beq.n	8104c44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104be4:	d017      	beq.n	8104c16 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104bea:	d811      	bhi.n	8104c10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104bf0:	d013      	beq.n	8104c1a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104bf6:	d80b      	bhi.n	8104c10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104bf8:	2b00      	cmp	r3, #0
 8104bfa:	d010      	beq.n	8104c1e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8104bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c00:	d106      	bne.n	8104c10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c02:	4b0e      	ldr	r3, [pc, #56]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c06:	4a0d      	ldr	r2, [pc, #52]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104c0e:	e007      	b.n	8104c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c10:	2301      	movs	r3, #1
 8104c12:	75fb      	strb	r3, [r7, #23]
      break;
 8104c14:	e004      	b.n	8104c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104c16:	bf00      	nop
 8104c18:	e002      	b.n	8104c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104c1a:	bf00      	nop
 8104c1c:	e000      	b.n	8104c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c20:	7dfb      	ldrb	r3, [r7, #23]
 8104c22:	2b00      	cmp	r3, #0
 8104c24:	d10c      	bne.n	8104c40 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104c26:	4b05      	ldr	r3, [pc, #20]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104c32:	4902      	ldr	r1, [pc, #8]	; (8104c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c34:	4313      	orrs	r3, r2
 8104c36:	654b      	str	r3, [r1, #84]	; 0x54
 8104c38:	e004      	b.n	8104c44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8104c3a:	bf00      	nop
 8104c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c40:	7dfb      	ldrb	r3, [r7, #23]
 8104c42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d008      	beq.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104c50:	4b31      	ldr	r3, [pc, #196]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104c5c:	492e      	ldr	r1, [pc, #184]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104c5e:	4313      	orrs	r3, r2
 8104c60:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d009      	beq.n	8104c82 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104c6e:	4b2a      	ldr	r3, [pc, #168]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104c70:	691b      	ldr	r3, [r3, #16]
 8104c72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104c7c:	4926      	ldr	r1, [pc, #152]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104c7e:	4313      	orrs	r3, r2
 8104c80:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104c8a:	2b00      	cmp	r3, #0
 8104c8c:	d008      	beq.n	8104ca0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104c8e:	4b22      	ldr	r3, [pc, #136]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104c9a:	491f      	ldr	r1, [pc, #124]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104c9c:	4313      	orrs	r3, r2
 8104c9e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104ca8:	2b00      	cmp	r3, #0
 8104caa:	d00d      	beq.n	8104cc8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104cac:	4b1a      	ldr	r3, [pc, #104]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cae:	691b      	ldr	r3, [r3, #16]
 8104cb0:	4a19      	ldr	r2, [pc, #100]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104cb6:	6113      	str	r3, [r2, #16]
 8104cb8:	4b17      	ldr	r3, [pc, #92]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cba:	691a      	ldr	r2, [r3, #16]
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104cc2:	4915      	ldr	r1, [pc, #84]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cc4:	4313      	orrs	r3, r2
 8104cc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	2b00      	cmp	r3, #0
 8104cce:	da08      	bge.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104cd0:	4b11      	ldr	r3, [pc, #68]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104cdc:	490e      	ldr	r1, [pc, #56]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cde:	4313      	orrs	r3, r2
 8104ce0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d009      	beq.n	8104d02 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104cee:	4b0a      	ldr	r3, [pc, #40]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104cfc:	4906      	ldr	r1, [pc, #24]	; (8104d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104cfe:	4313      	orrs	r3, r2
 8104d00:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104d02:	7dbb      	ldrb	r3, [r7, #22]
 8104d04:	2b00      	cmp	r3, #0
 8104d06:	d101      	bne.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104d08:	2300      	movs	r3, #0
 8104d0a:	e000      	b.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8104d0c:	2301      	movs	r3, #1
}
 8104d0e:	4618      	mov	r0, r3
 8104d10:	3718      	adds	r7, #24
 8104d12:	46bd      	mov	sp, r7
 8104d14:	bd80      	pop	{r7, pc}
 8104d16:	bf00      	nop
 8104d18:	58024400 	.word	0x58024400

08104d1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104d1c:	b580      	push	{r7, lr}
 8104d1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104d20:	f7ff f858 	bl	8103dd4 <HAL_RCC_GetHCLKFreq>
 8104d24:	4602      	mov	r2, r0
 8104d26:	4b06      	ldr	r3, [pc, #24]	; (8104d40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104d28:	6a1b      	ldr	r3, [r3, #32]
 8104d2a:	091b      	lsrs	r3, r3, #4
 8104d2c:	f003 0307 	and.w	r3, r3, #7
 8104d30:	4904      	ldr	r1, [pc, #16]	; (8104d44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104d32:	5ccb      	ldrb	r3, [r1, r3]
 8104d34:	f003 031f 	and.w	r3, r3, #31
 8104d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104d3c:	4618      	mov	r0, r3
 8104d3e:	bd80      	pop	{r7, pc}
 8104d40:	58024400 	.word	0x58024400
 8104d44:	0810c624 	.word	0x0810c624

08104d48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8104d48:	b480      	push	{r7}
 8104d4a:	b089      	sub	sp, #36	; 0x24
 8104d4c:	af00      	add	r7, sp, #0
 8104d4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d50:	4ba1      	ldr	r3, [pc, #644]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d54:	f003 0303 	and.w	r3, r3, #3
 8104d58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8104d5a:	4b9f      	ldr	r3, [pc, #636]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d5e:	0b1b      	lsrs	r3, r3, #12
 8104d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104d64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104d66:	4b9c      	ldr	r3, [pc, #624]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d6a:	091b      	lsrs	r3, r3, #4
 8104d6c:	f003 0301 	and.w	r3, r3, #1
 8104d70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8104d72:	4b99      	ldr	r3, [pc, #612]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104d76:	08db      	lsrs	r3, r3, #3
 8104d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104d7c:	693a      	ldr	r2, [r7, #16]
 8104d7e:	fb02 f303 	mul.w	r3, r2, r3
 8104d82:	ee07 3a90 	vmov	s15, r3
 8104d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104d8e:	697b      	ldr	r3, [r7, #20]
 8104d90:	2b00      	cmp	r3, #0
 8104d92:	f000 8111 	beq.w	8104fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104d96:	69bb      	ldr	r3, [r7, #24]
 8104d98:	2b02      	cmp	r3, #2
 8104d9a:	f000 8083 	beq.w	8104ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104d9e:	69bb      	ldr	r3, [r7, #24]
 8104da0:	2b02      	cmp	r3, #2
 8104da2:	f200 80a1 	bhi.w	8104ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104da6:	69bb      	ldr	r3, [r7, #24]
 8104da8:	2b00      	cmp	r3, #0
 8104daa:	d003      	beq.n	8104db4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104dac:	69bb      	ldr	r3, [r7, #24]
 8104dae:	2b01      	cmp	r3, #1
 8104db0:	d056      	beq.n	8104e60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104db2:	e099      	b.n	8104ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104db4:	4b88      	ldr	r3, [pc, #544]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	f003 0320 	and.w	r3, r3, #32
 8104dbc:	2b00      	cmp	r3, #0
 8104dbe:	d02d      	beq.n	8104e1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104dc0:	4b85      	ldr	r3, [pc, #532]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	08db      	lsrs	r3, r3, #3
 8104dc6:	f003 0303 	and.w	r3, r3, #3
 8104dca:	4a84      	ldr	r2, [pc, #528]	; (8104fdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8104dd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104dd2:	68bb      	ldr	r3, [r7, #8]
 8104dd4:	ee07 3a90 	vmov	s15, r3
 8104dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ddc:	697b      	ldr	r3, [r7, #20]
 8104dde:	ee07 3a90 	vmov	s15, r3
 8104de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dea:	4b7b      	ldr	r3, [pc, #492]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104df2:	ee07 3a90 	vmov	s15, r3
 8104df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104dfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104e1a:	e087      	b.n	8104f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104e1c:	697b      	ldr	r3, [r7, #20]
 8104e1e:	ee07 3a90 	vmov	s15, r3
 8104e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e2e:	4b6a      	ldr	r3, [pc, #424]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e36:	ee07 3a90 	vmov	s15, r3
 8104e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104e5e:	e065      	b.n	8104f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104e60:	697b      	ldr	r3, [r7, #20]
 8104e62:	ee07 3a90 	vmov	s15, r3
 8104e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e72:	4b59      	ldr	r3, [pc, #356]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e7a:	ee07 3a90 	vmov	s15, r3
 8104e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104ea2:	e043      	b.n	8104f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104ea4:	697b      	ldr	r3, [r7, #20]
 8104ea6:	ee07 3a90 	vmov	s15, r3
 8104eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104eae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104fec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eb6:	4b48      	ldr	r3, [pc, #288]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ebe:	ee07 3a90 	vmov	s15, r3
 8104ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104eca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104ee6:	e021      	b.n	8104f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104ee8:	697b      	ldr	r3, [r7, #20]
 8104eea:	ee07 3a90 	vmov	s15, r3
 8104eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104efa:	4b37      	ldr	r3, [pc, #220]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f02:	ee07 3a90 	vmov	s15, r3
 8104f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104f2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104f2c:	4b2a      	ldr	r3, [pc, #168]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f30:	0a5b      	lsrs	r3, r3, #9
 8104f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f36:	ee07 3a90 	vmov	s15, r3
 8104f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f52:	ee17 2a90 	vmov	r2, s15
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104f5a:	4b1f      	ldr	r3, [pc, #124]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f5e:	0c1b      	lsrs	r3, r3, #16
 8104f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f64:	ee07 3a90 	vmov	s15, r3
 8104f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f80:	ee17 2a90 	vmov	r2, s15
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104f88:	4b13      	ldr	r3, [pc, #76]	; (8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f8c:	0e1b      	lsrs	r3, r3, #24
 8104f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f92:	ee07 3a90 	vmov	s15, r3
 8104f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8104fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104fae:	ee17 2a90 	vmov	r2, s15
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104fb6:	e008      	b.n	8104fca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	2200      	movs	r2, #0
 8104fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	2200      	movs	r2, #0
 8104fc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	2200      	movs	r2, #0
 8104fc8:	609a      	str	r2, [r3, #8]
}
 8104fca:	bf00      	nop
 8104fcc:	3724      	adds	r7, #36	; 0x24
 8104fce:	46bd      	mov	sp, r7
 8104fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fd4:	4770      	bx	lr
 8104fd6:	bf00      	nop
 8104fd8:	58024400 	.word	0x58024400
 8104fdc:	03d09000 	.word	0x03d09000
 8104fe0:	46000000 	.word	0x46000000
 8104fe4:	4c742400 	.word	0x4c742400
 8104fe8:	4a742400 	.word	0x4a742400
 8104fec:	4af42400 	.word	0x4af42400

08104ff0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104ff0:	b480      	push	{r7}
 8104ff2:	b089      	sub	sp, #36	; 0x24
 8104ff4:	af00      	add	r7, sp, #0
 8104ff6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104ff8:	4ba1      	ldr	r3, [pc, #644]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ffc:	f003 0303 	and.w	r3, r3, #3
 8105000:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105002:	4b9f      	ldr	r3, [pc, #636]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105006:	0d1b      	lsrs	r3, r3, #20
 8105008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810500c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810500e:	4b9c      	ldr	r3, [pc, #624]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105012:	0a1b      	lsrs	r3, r3, #8
 8105014:	f003 0301 	and.w	r3, r3, #1
 8105018:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810501a:	4b99      	ldr	r3, [pc, #612]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810501e:	08db      	lsrs	r3, r3, #3
 8105020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105024:	693a      	ldr	r2, [r7, #16]
 8105026:	fb02 f303 	mul.w	r3, r2, r3
 810502a:	ee07 3a90 	vmov	s15, r3
 810502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105036:	697b      	ldr	r3, [r7, #20]
 8105038:	2b00      	cmp	r3, #0
 810503a:	f000 8111 	beq.w	8105260 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810503e:	69bb      	ldr	r3, [r7, #24]
 8105040:	2b02      	cmp	r3, #2
 8105042:	f000 8083 	beq.w	810514c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105046:	69bb      	ldr	r3, [r7, #24]
 8105048:	2b02      	cmp	r3, #2
 810504a:	f200 80a1 	bhi.w	8105190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810504e:	69bb      	ldr	r3, [r7, #24]
 8105050:	2b00      	cmp	r3, #0
 8105052:	d003      	beq.n	810505c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105054:	69bb      	ldr	r3, [r7, #24]
 8105056:	2b01      	cmp	r3, #1
 8105058:	d056      	beq.n	8105108 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810505a:	e099      	b.n	8105190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810505c:	4b88      	ldr	r3, [pc, #544]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	f003 0320 	and.w	r3, r3, #32
 8105064:	2b00      	cmp	r3, #0
 8105066:	d02d      	beq.n	81050c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105068:	4b85      	ldr	r3, [pc, #532]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	08db      	lsrs	r3, r3, #3
 810506e:	f003 0303 	and.w	r3, r3, #3
 8105072:	4a84      	ldr	r2, [pc, #528]	; (8105284 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105074:	fa22 f303 	lsr.w	r3, r2, r3
 8105078:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810507a:	68bb      	ldr	r3, [r7, #8]
 810507c:	ee07 3a90 	vmov	s15, r3
 8105080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105084:	697b      	ldr	r3, [r7, #20]
 8105086:	ee07 3a90 	vmov	s15, r3
 810508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105092:	4b7b      	ldr	r3, [pc, #492]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810509a:	ee07 3a90 	vmov	s15, r3
 810509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81050a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81050c2:	e087      	b.n	81051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81050c4:	697b      	ldr	r3, [r7, #20]
 81050c6:	ee07 3a90 	vmov	s15, r3
 81050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810528c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050d6:	4b6a      	ldr	r3, [pc, #424]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050de:	ee07 3a90 	vmov	s15, r3
 81050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81050ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105106:	e065      	b.n	81051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105108:	697b      	ldr	r3, [r7, #20]
 810510a:	ee07 3a90 	vmov	s15, r3
 810510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105112:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810511a:	4b59      	ldr	r3, [pc, #356]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105122:	ee07 3a90 	vmov	s15, r3
 8105126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810512a:	ed97 6a03 	vldr	s12, [r7, #12]
 810512e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810514a:	e043      	b.n	81051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810514c:	697b      	ldr	r3, [r7, #20]
 810514e:	ee07 3a90 	vmov	s15, r3
 8105152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105156:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105294 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810515e:	4b48      	ldr	r3, [pc, #288]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105166:	ee07 3a90 	vmov	s15, r3
 810516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105172:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105186:	ee67 7a27 	vmul.f32	s15, s14, s15
 810518a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810518e:	e021      	b.n	81051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105190:	697b      	ldr	r3, [r7, #20]
 8105192:	ee07 3a90 	vmov	s15, r3
 8105196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810519a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051a2:	4b37      	ldr	r3, [pc, #220]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051aa:	ee07 3a90 	vmov	s15, r3
 81051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81051b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81051d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81051d4:	4b2a      	ldr	r3, [pc, #168]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81051d8:	0a5b      	lsrs	r3, r3, #9
 81051da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81051de:	ee07 3a90 	vmov	s15, r3
 81051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81051ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051ee:	edd7 6a07 	vldr	s13, [r7, #28]
 81051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051fa:	ee17 2a90 	vmov	r2, s15
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105202:	4b1f      	ldr	r3, [pc, #124]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105206:	0c1b      	lsrs	r3, r3, #16
 8105208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810520c:	ee07 3a90 	vmov	s15, r3
 8105210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105218:	ee37 7a87 	vadd.f32	s14, s15, s14
 810521c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105228:	ee17 2a90 	vmov	r2, s15
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105230:	4b13      	ldr	r3, [pc, #76]	; (8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105234:	0e1b      	lsrs	r3, r3, #24
 8105236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810523a:	ee07 3a90 	vmov	s15, r3
 810523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105246:	ee37 7a87 	vadd.f32	s14, s15, s14
 810524a:	edd7 6a07 	vldr	s13, [r7, #28]
 810524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105256:	ee17 2a90 	vmov	r2, s15
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810525e:	e008      	b.n	8105272 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	2200      	movs	r2, #0
 8105264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	2200      	movs	r2, #0
 810526a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	2200      	movs	r2, #0
 8105270:	609a      	str	r2, [r3, #8]
}
 8105272:	bf00      	nop
 8105274:	3724      	adds	r7, #36	; 0x24
 8105276:	46bd      	mov	sp, r7
 8105278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810527c:	4770      	bx	lr
 810527e:	bf00      	nop
 8105280:	58024400 	.word	0x58024400
 8105284:	03d09000 	.word	0x03d09000
 8105288:	46000000 	.word	0x46000000
 810528c:	4c742400 	.word	0x4c742400
 8105290:	4a742400 	.word	0x4a742400
 8105294:	4af42400 	.word	0x4af42400

08105298 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105298:	b580      	push	{r7, lr}
 810529a:	b084      	sub	sp, #16
 810529c:	af00      	add	r7, sp, #0
 810529e:	6078      	str	r0, [r7, #4]
 81052a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81052a2:	2300      	movs	r3, #0
 81052a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81052a6:	4b54      	ldr	r3, [pc, #336]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052aa:	f003 0303 	and.w	r3, r3, #3
 81052ae:	2b03      	cmp	r3, #3
 81052b0:	d101      	bne.n	81052b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81052b2:	2301      	movs	r3, #1
 81052b4:	e09b      	b.n	81053ee <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81052b6:	4b50      	ldr	r3, [pc, #320]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	4a4f      	ldr	r2, [pc, #316]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81052bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81052c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81052c2:	f7fd f97d 	bl	81025c0 <HAL_GetTick>
 81052c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81052c8:	e008      	b.n	81052dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81052ca:	f7fd f979 	bl	81025c0 <HAL_GetTick>
 81052ce:	4602      	mov	r2, r0
 81052d0:	68bb      	ldr	r3, [r7, #8]
 81052d2:	1ad3      	subs	r3, r2, r3
 81052d4:	2b02      	cmp	r3, #2
 81052d6:	d901      	bls.n	81052dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81052d8:	2303      	movs	r3, #3
 81052da:	e088      	b.n	81053ee <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81052dc:	4b46      	ldr	r3, [pc, #280]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81052de:	681b      	ldr	r3, [r3, #0]
 81052e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052e4:	2b00      	cmp	r3, #0
 81052e6:	d1f0      	bne.n	81052ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81052e8:	4b43      	ldr	r3, [pc, #268]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	031b      	lsls	r3, r3, #12
 81052f6:	4940      	ldr	r1, [pc, #256]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81052f8:	4313      	orrs	r3, r2
 81052fa:	628b      	str	r3, [r1, #40]	; 0x28
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	685b      	ldr	r3, [r3, #4]
 8105300:	3b01      	subs	r3, #1
 8105302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	689b      	ldr	r3, [r3, #8]
 810530a:	3b01      	subs	r3, #1
 810530c:	025b      	lsls	r3, r3, #9
 810530e:	b29b      	uxth	r3, r3
 8105310:	431a      	orrs	r2, r3
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	68db      	ldr	r3, [r3, #12]
 8105316:	3b01      	subs	r3, #1
 8105318:	041b      	lsls	r3, r3, #16
 810531a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810531e:	431a      	orrs	r2, r3
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	691b      	ldr	r3, [r3, #16]
 8105324:	3b01      	subs	r3, #1
 8105326:	061b      	lsls	r3, r3, #24
 8105328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810532c:	4932      	ldr	r1, [pc, #200]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 810532e:	4313      	orrs	r3, r2
 8105330:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105332:	4b31      	ldr	r3, [pc, #196]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105336:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	695b      	ldr	r3, [r3, #20]
 810533e:	492e      	ldr	r1, [pc, #184]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105340:	4313      	orrs	r3, r2
 8105342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105344:	4b2c      	ldr	r3, [pc, #176]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105348:	f023 0220 	bic.w	r2, r3, #32
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	699b      	ldr	r3, [r3, #24]
 8105350:	4929      	ldr	r1, [pc, #164]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105352:	4313      	orrs	r3, r2
 8105354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105356:	4b28      	ldr	r3, [pc, #160]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810535a:	4a27      	ldr	r2, [pc, #156]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 810535c:	f023 0310 	bic.w	r3, r3, #16
 8105360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105362:	4b25      	ldr	r3, [pc, #148]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810536a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810536e:	687a      	ldr	r2, [r7, #4]
 8105370:	69d2      	ldr	r2, [r2, #28]
 8105372:	00d2      	lsls	r2, r2, #3
 8105374:	4920      	ldr	r1, [pc, #128]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105376:	4313      	orrs	r3, r2
 8105378:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810537a:	4b1f      	ldr	r3, [pc, #124]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 810537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810537e:	4a1e      	ldr	r2, [pc, #120]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105380:	f043 0310 	orr.w	r3, r3, #16
 8105384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105386:	683b      	ldr	r3, [r7, #0]
 8105388:	2b00      	cmp	r3, #0
 810538a:	d106      	bne.n	810539a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810538c:	4b1a      	ldr	r3, [pc, #104]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 810538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105390:	4a19      	ldr	r2, [pc, #100]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 8105392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105398:	e00f      	b.n	81053ba <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810539a:	683b      	ldr	r3, [r7, #0]
 810539c:	2b01      	cmp	r3, #1
 810539e:	d106      	bne.n	81053ae <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81053a0:	4b15      	ldr	r3, [pc, #84]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053a4:	4a14      	ldr	r2, [pc, #80]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81053aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81053ac:	e005      	b.n	81053ba <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81053ae:	4b12      	ldr	r3, [pc, #72]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053b2:	4a11      	ldr	r2, [pc, #68]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81053b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81053ba:	4b0f      	ldr	r3, [pc, #60]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	4a0e      	ldr	r2, [pc, #56]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81053c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81053c6:	f7fd f8fb 	bl	81025c0 <HAL_GetTick>
 81053ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81053cc:	e008      	b.n	81053e0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81053ce:	f7fd f8f7 	bl	81025c0 <HAL_GetTick>
 81053d2:	4602      	mov	r2, r0
 81053d4:	68bb      	ldr	r3, [r7, #8]
 81053d6:	1ad3      	subs	r3, r2, r3
 81053d8:	2b02      	cmp	r3, #2
 81053da:	d901      	bls.n	81053e0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81053dc:	2303      	movs	r3, #3
 81053de:	e006      	b.n	81053ee <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81053e0:	4b05      	ldr	r3, [pc, #20]	; (81053f8 <RCCEx_PLL2_Config+0x160>)
 81053e2:	681b      	ldr	r3, [r3, #0]
 81053e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81053e8:	2b00      	cmp	r3, #0
 81053ea:	d0f0      	beq.n	81053ce <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81053ee:	4618      	mov	r0, r3
 81053f0:	3710      	adds	r7, #16
 81053f2:	46bd      	mov	sp, r7
 81053f4:	bd80      	pop	{r7, pc}
 81053f6:	bf00      	nop
 81053f8:	58024400 	.word	0x58024400

081053fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81053fc:	b580      	push	{r7, lr}
 81053fe:	b084      	sub	sp, #16
 8105400:	af00      	add	r7, sp, #0
 8105402:	6078      	str	r0, [r7, #4]
 8105404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105406:	2300      	movs	r3, #0
 8105408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810540a:	4b54      	ldr	r3, [pc, #336]	; (810555c <RCCEx_PLL3_Config+0x160>)
 810540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810540e:	f003 0303 	and.w	r3, r3, #3
 8105412:	2b03      	cmp	r3, #3
 8105414:	d101      	bne.n	810541a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105416:	2301      	movs	r3, #1
 8105418:	e09b      	b.n	8105552 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810541a:	4b50      	ldr	r3, [pc, #320]	; (810555c <RCCEx_PLL3_Config+0x160>)
 810541c:	681b      	ldr	r3, [r3, #0]
 810541e:	4a4f      	ldr	r2, [pc, #316]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105426:	f7fd f8cb 	bl	81025c0 <HAL_GetTick>
 810542a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810542c:	e008      	b.n	8105440 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810542e:	f7fd f8c7 	bl	81025c0 <HAL_GetTick>
 8105432:	4602      	mov	r2, r0
 8105434:	68bb      	ldr	r3, [r7, #8]
 8105436:	1ad3      	subs	r3, r2, r3
 8105438:	2b02      	cmp	r3, #2
 810543a:	d901      	bls.n	8105440 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810543c:	2303      	movs	r3, #3
 810543e:	e088      	b.n	8105552 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105440:	4b46      	ldr	r3, [pc, #280]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105448:	2b00      	cmp	r3, #0
 810544a:	d1f0      	bne.n	810542e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810544c:	4b43      	ldr	r3, [pc, #268]	; (810555c <RCCEx_PLL3_Config+0x160>)
 810544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105450:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	051b      	lsls	r3, r3, #20
 810545a:	4940      	ldr	r1, [pc, #256]	; (810555c <RCCEx_PLL3_Config+0x160>)
 810545c:	4313      	orrs	r3, r2
 810545e:	628b      	str	r3, [r1, #40]	; 0x28
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	685b      	ldr	r3, [r3, #4]
 8105464:	3b01      	subs	r3, #1
 8105466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810546a:	687b      	ldr	r3, [r7, #4]
 810546c:	689b      	ldr	r3, [r3, #8]
 810546e:	3b01      	subs	r3, #1
 8105470:	025b      	lsls	r3, r3, #9
 8105472:	b29b      	uxth	r3, r3
 8105474:	431a      	orrs	r2, r3
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	68db      	ldr	r3, [r3, #12]
 810547a:	3b01      	subs	r3, #1
 810547c:	041b      	lsls	r3, r3, #16
 810547e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105482:	431a      	orrs	r2, r3
 8105484:	687b      	ldr	r3, [r7, #4]
 8105486:	691b      	ldr	r3, [r3, #16]
 8105488:	3b01      	subs	r3, #1
 810548a:	061b      	lsls	r3, r3, #24
 810548c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105490:	4932      	ldr	r1, [pc, #200]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105492:	4313      	orrs	r3, r2
 8105494:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105496:	4b31      	ldr	r3, [pc, #196]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810549a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	695b      	ldr	r3, [r3, #20]
 81054a2:	492e      	ldr	r1, [pc, #184]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054a4:	4313      	orrs	r3, r2
 81054a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81054a8:	4b2c      	ldr	r3, [pc, #176]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	699b      	ldr	r3, [r3, #24]
 81054b4:	4929      	ldr	r1, [pc, #164]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054b6:	4313      	orrs	r3, r2
 81054b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81054ba:	4b28      	ldr	r3, [pc, #160]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054be:	4a27      	ldr	r2, [pc, #156]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81054c6:	4b25      	ldr	r3, [pc, #148]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81054ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81054ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81054d2:	687a      	ldr	r2, [r7, #4]
 81054d4:	69d2      	ldr	r2, [r2, #28]
 81054d6:	00d2      	lsls	r2, r2, #3
 81054d8:	4920      	ldr	r1, [pc, #128]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054da:	4313      	orrs	r3, r2
 81054dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81054de:	4b1f      	ldr	r3, [pc, #124]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054e2:	4a1e      	ldr	r2, [pc, #120]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81054e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81054ea:	683b      	ldr	r3, [r7, #0]
 81054ec:	2b00      	cmp	r3, #0
 81054ee:	d106      	bne.n	81054fe <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81054f0:	4b1a      	ldr	r3, [pc, #104]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054f4:	4a19      	ldr	r2, [pc, #100]	; (810555c <RCCEx_PLL3_Config+0x160>)
 81054f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81054fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81054fc:	e00f      	b.n	810551e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81054fe:	683b      	ldr	r3, [r7, #0]
 8105500:	2b01      	cmp	r3, #1
 8105502:	d106      	bne.n	8105512 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105504:	4b15      	ldr	r3, [pc, #84]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105508:	4a14      	ldr	r2, [pc, #80]	; (810555c <RCCEx_PLL3_Config+0x160>)
 810550a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810550e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105510:	e005      	b.n	810551e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105512:	4b12      	ldr	r3, [pc, #72]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105516:	4a11      	ldr	r2, [pc, #68]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810551c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810551e:	4b0f      	ldr	r3, [pc, #60]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105520:	681b      	ldr	r3, [r3, #0]
 8105522:	4a0e      	ldr	r2, [pc, #56]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810552a:	f7fd f849 	bl	81025c0 <HAL_GetTick>
 810552e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105530:	e008      	b.n	8105544 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105532:	f7fd f845 	bl	81025c0 <HAL_GetTick>
 8105536:	4602      	mov	r2, r0
 8105538:	68bb      	ldr	r3, [r7, #8]
 810553a:	1ad3      	subs	r3, r2, r3
 810553c:	2b02      	cmp	r3, #2
 810553e:	d901      	bls.n	8105544 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105540:	2303      	movs	r3, #3
 8105542:	e006      	b.n	8105552 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105544:	4b05      	ldr	r3, [pc, #20]	; (810555c <RCCEx_PLL3_Config+0x160>)
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810554c:	2b00      	cmp	r3, #0
 810554e:	d0f0      	beq.n	8105532 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105550:	7bfb      	ldrb	r3, [r7, #15]
}
 8105552:	4618      	mov	r0, r3
 8105554:	3710      	adds	r7, #16
 8105556:	46bd      	mov	sp, r7
 8105558:	bd80      	pop	{r7, pc}
 810555a:	bf00      	nop
 810555c:	58024400 	.word	0x58024400

08105560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105560:	b580      	push	{r7, lr}
 8105562:	b082      	sub	sp, #8
 8105564:	af00      	add	r7, sp, #0
 8105566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	2b00      	cmp	r3, #0
 810556c:	d101      	bne.n	8105572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810556e:	2301      	movs	r3, #1
 8105570:	e049      	b.n	8105606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105578:	b2db      	uxtb	r3, r3
 810557a:	2b00      	cmp	r3, #0
 810557c:	d106      	bne.n	810558c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2200      	movs	r2, #0
 8105582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105586:	6878      	ldr	r0, [r7, #4]
 8105588:	f7fc fc9c 	bl	8101ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	2202      	movs	r2, #2
 8105590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	681a      	ldr	r2, [r3, #0]
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	3304      	adds	r3, #4
 810559c:	4619      	mov	r1, r3
 810559e:	4610      	mov	r0, r2
 81055a0:	f000 fc56 	bl	8105e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	2201      	movs	r2, #1
 81055a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	2201      	movs	r2, #1
 81055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	2201      	movs	r2, #1
 81055b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	2201      	movs	r2, #1
 81055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	2201      	movs	r2, #1
 81055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	2201      	movs	r2, #1
 81055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	2201      	movs	r2, #1
 81055d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	2201      	movs	r2, #1
 81055e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	2201      	movs	r2, #1
 81055e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	2201      	movs	r2, #1
 81055f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	2201      	movs	r2, #1
 81055f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	2201      	movs	r2, #1
 8105600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105604:	2300      	movs	r3, #0
}
 8105606:	4618      	mov	r0, r3
 8105608:	3708      	adds	r7, #8
 810560a:	46bd      	mov	sp, r7
 810560c:	bd80      	pop	{r7, pc}

0810560e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810560e:	b580      	push	{r7, lr}
 8105610:	b082      	sub	sp, #8
 8105612:	af00      	add	r7, sp, #0
 8105614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	2b00      	cmp	r3, #0
 810561a:	d101      	bne.n	8105620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810561c:	2301      	movs	r3, #1
 810561e:	e049      	b.n	81056b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105626:	b2db      	uxtb	r3, r3
 8105628:	2b00      	cmp	r3, #0
 810562a:	d106      	bne.n	810563a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	2200      	movs	r2, #0
 8105630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8105634:	6878      	ldr	r0, [r7, #4]
 8105636:	f000 f841 	bl	81056bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	2202      	movs	r2, #2
 810563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	681a      	ldr	r2, [r3, #0]
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	3304      	adds	r3, #4
 810564a:	4619      	mov	r1, r3
 810564c:	4610      	mov	r0, r2
 810564e:	f000 fbff 	bl	8105e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	2201      	movs	r2, #1
 8105656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	2201      	movs	r2, #1
 810565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	2201      	movs	r2, #1
 8105666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	2201      	movs	r2, #1
 810566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	2201      	movs	r2, #1
 8105676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	2201      	movs	r2, #1
 810567e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	2201      	movs	r2, #1
 8105686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	2201      	movs	r2, #1
 810568e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	2201      	movs	r2, #1
 8105696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	2201      	movs	r2, #1
 810569e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	2201      	movs	r2, #1
 81056a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	2201      	movs	r2, #1
 81056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81056b2:	2300      	movs	r3, #0
}
 81056b4:	4618      	mov	r0, r3
 81056b6:	3708      	adds	r7, #8
 81056b8:	46bd      	mov	sp, r7
 81056ba:	bd80      	pop	{r7, pc}

081056bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81056bc:	b480      	push	{r7}
 81056be:	b083      	sub	sp, #12
 81056c0:	af00      	add	r7, sp, #0
 81056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81056c4:	bf00      	nop
 81056c6:	370c      	adds	r7, #12
 81056c8:	46bd      	mov	sp, r7
 81056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056ce:	4770      	bx	lr

081056d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81056d0:	b580      	push	{r7, lr}
 81056d2:	b084      	sub	sp, #16
 81056d4:	af00      	add	r7, sp, #0
 81056d6:	6078      	str	r0, [r7, #4]
 81056d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81056da:	683b      	ldr	r3, [r7, #0]
 81056dc:	2b00      	cmp	r3, #0
 81056de:	d109      	bne.n	81056f4 <HAL_TIM_PWM_Start+0x24>
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81056e6:	b2db      	uxtb	r3, r3
 81056e8:	2b01      	cmp	r3, #1
 81056ea:	bf14      	ite	ne
 81056ec:	2301      	movne	r3, #1
 81056ee:	2300      	moveq	r3, #0
 81056f0:	b2db      	uxtb	r3, r3
 81056f2:	e03c      	b.n	810576e <HAL_TIM_PWM_Start+0x9e>
 81056f4:	683b      	ldr	r3, [r7, #0]
 81056f6:	2b04      	cmp	r3, #4
 81056f8:	d109      	bne.n	810570e <HAL_TIM_PWM_Start+0x3e>
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105700:	b2db      	uxtb	r3, r3
 8105702:	2b01      	cmp	r3, #1
 8105704:	bf14      	ite	ne
 8105706:	2301      	movne	r3, #1
 8105708:	2300      	moveq	r3, #0
 810570a:	b2db      	uxtb	r3, r3
 810570c:	e02f      	b.n	810576e <HAL_TIM_PWM_Start+0x9e>
 810570e:	683b      	ldr	r3, [r7, #0]
 8105710:	2b08      	cmp	r3, #8
 8105712:	d109      	bne.n	8105728 <HAL_TIM_PWM_Start+0x58>
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810571a:	b2db      	uxtb	r3, r3
 810571c:	2b01      	cmp	r3, #1
 810571e:	bf14      	ite	ne
 8105720:	2301      	movne	r3, #1
 8105722:	2300      	moveq	r3, #0
 8105724:	b2db      	uxtb	r3, r3
 8105726:	e022      	b.n	810576e <HAL_TIM_PWM_Start+0x9e>
 8105728:	683b      	ldr	r3, [r7, #0]
 810572a:	2b0c      	cmp	r3, #12
 810572c:	d109      	bne.n	8105742 <HAL_TIM_PWM_Start+0x72>
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105734:	b2db      	uxtb	r3, r3
 8105736:	2b01      	cmp	r3, #1
 8105738:	bf14      	ite	ne
 810573a:	2301      	movne	r3, #1
 810573c:	2300      	moveq	r3, #0
 810573e:	b2db      	uxtb	r3, r3
 8105740:	e015      	b.n	810576e <HAL_TIM_PWM_Start+0x9e>
 8105742:	683b      	ldr	r3, [r7, #0]
 8105744:	2b10      	cmp	r3, #16
 8105746:	d109      	bne.n	810575c <HAL_TIM_PWM_Start+0x8c>
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810574e:	b2db      	uxtb	r3, r3
 8105750:	2b01      	cmp	r3, #1
 8105752:	bf14      	ite	ne
 8105754:	2301      	movne	r3, #1
 8105756:	2300      	moveq	r3, #0
 8105758:	b2db      	uxtb	r3, r3
 810575a:	e008      	b.n	810576e <HAL_TIM_PWM_Start+0x9e>
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8105762:	b2db      	uxtb	r3, r3
 8105764:	2b01      	cmp	r3, #1
 8105766:	bf14      	ite	ne
 8105768:	2301      	movne	r3, #1
 810576a:	2300      	moveq	r3, #0
 810576c:	b2db      	uxtb	r3, r3
 810576e:	2b00      	cmp	r3, #0
 8105770:	d001      	beq.n	8105776 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8105772:	2301      	movs	r3, #1
 8105774:	e0a1      	b.n	81058ba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8105776:	683b      	ldr	r3, [r7, #0]
 8105778:	2b00      	cmp	r3, #0
 810577a:	d104      	bne.n	8105786 <HAL_TIM_PWM_Start+0xb6>
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	2202      	movs	r2, #2
 8105780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105784:	e023      	b.n	81057ce <HAL_TIM_PWM_Start+0xfe>
 8105786:	683b      	ldr	r3, [r7, #0]
 8105788:	2b04      	cmp	r3, #4
 810578a:	d104      	bne.n	8105796 <HAL_TIM_PWM_Start+0xc6>
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	2202      	movs	r2, #2
 8105790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105794:	e01b      	b.n	81057ce <HAL_TIM_PWM_Start+0xfe>
 8105796:	683b      	ldr	r3, [r7, #0]
 8105798:	2b08      	cmp	r3, #8
 810579a:	d104      	bne.n	81057a6 <HAL_TIM_PWM_Start+0xd6>
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	2202      	movs	r2, #2
 81057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81057a4:	e013      	b.n	81057ce <HAL_TIM_PWM_Start+0xfe>
 81057a6:	683b      	ldr	r3, [r7, #0]
 81057a8:	2b0c      	cmp	r3, #12
 81057aa:	d104      	bne.n	81057b6 <HAL_TIM_PWM_Start+0xe6>
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	2202      	movs	r2, #2
 81057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81057b4:	e00b      	b.n	81057ce <HAL_TIM_PWM_Start+0xfe>
 81057b6:	683b      	ldr	r3, [r7, #0]
 81057b8:	2b10      	cmp	r3, #16
 81057ba:	d104      	bne.n	81057c6 <HAL_TIM_PWM_Start+0xf6>
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	2202      	movs	r2, #2
 81057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81057c4:	e003      	b.n	81057ce <HAL_TIM_PWM_Start+0xfe>
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	2202      	movs	r2, #2
 81057ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	2201      	movs	r2, #1
 81057d4:	6839      	ldr	r1, [r7, #0]
 81057d6:	4618      	mov	r0, r3
 81057d8:	f000 ff46 	bl	8106668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	4a38      	ldr	r2, [pc, #224]	; (81058c4 <HAL_TIM_PWM_Start+0x1f4>)
 81057e2:	4293      	cmp	r3, r2
 81057e4:	d013      	beq.n	810580e <HAL_TIM_PWM_Start+0x13e>
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	4a37      	ldr	r2, [pc, #220]	; (81058c8 <HAL_TIM_PWM_Start+0x1f8>)
 81057ec:	4293      	cmp	r3, r2
 81057ee:	d00e      	beq.n	810580e <HAL_TIM_PWM_Start+0x13e>
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	4a35      	ldr	r2, [pc, #212]	; (81058cc <HAL_TIM_PWM_Start+0x1fc>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d009      	beq.n	810580e <HAL_TIM_PWM_Start+0x13e>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a34      	ldr	r2, [pc, #208]	; (81058d0 <HAL_TIM_PWM_Start+0x200>)
 8105800:	4293      	cmp	r3, r2
 8105802:	d004      	beq.n	810580e <HAL_TIM_PWM_Start+0x13e>
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	4a32      	ldr	r2, [pc, #200]	; (81058d4 <HAL_TIM_PWM_Start+0x204>)
 810580a:	4293      	cmp	r3, r2
 810580c:	d101      	bne.n	8105812 <HAL_TIM_PWM_Start+0x142>
 810580e:	2301      	movs	r3, #1
 8105810:	e000      	b.n	8105814 <HAL_TIM_PWM_Start+0x144>
 8105812:	2300      	movs	r3, #0
 8105814:	2b00      	cmp	r3, #0
 8105816:	d007      	beq.n	8105828 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105826:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	4a25      	ldr	r2, [pc, #148]	; (81058c4 <HAL_TIM_PWM_Start+0x1f4>)
 810582e:	4293      	cmp	r3, r2
 8105830:	d022      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810583a:	d01d      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	4a25      	ldr	r2, [pc, #148]	; (81058d8 <HAL_TIM_PWM_Start+0x208>)
 8105842:	4293      	cmp	r3, r2
 8105844:	d018      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	681b      	ldr	r3, [r3, #0]
 810584a:	4a24      	ldr	r2, [pc, #144]	; (81058dc <HAL_TIM_PWM_Start+0x20c>)
 810584c:	4293      	cmp	r3, r2
 810584e:	d013      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	4a22      	ldr	r2, [pc, #136]	; (81058e0 <HAL_TIM_PWM_Start+0x210>)
 8105856:	4293      	cmp	r3, r2
 8105858:	d00e      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	4a1a      	ldr	r2, [pc, #104]	; (81058c8 <HAL_TIM_PWM_Start+0x1f8>)
 8105860:	4293      	cmp	r3, r2
 8105862:	d009      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	4a1e      	ldr	r2, [pc, #120]	; (81058e4 <HAL_TIM_PWM_Start+0x214>)
 810586a:	4293      	cmp	r3, r2
 810586c:	d004      	beq.n	8105878 <HAL_TIM_PWM_Start+0x1a8>
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	4a16      	ldr	r2, [pc, #88]	; (81058cc <HAL_TIM_PWM_Start+0x1fc>)
 8105874:	4293      	cmp	r3, r2
 8105876:	d115      	bne.n	81058a4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	689a      	ldr	r2, [r3, #8]
 810587e:	4b1a      	ldr	r3, [pc, #104]	; (81058e8 <HAL_TIM_PWM_Start+0x218>)
 8105880:	4013      	ands	r3, r2
 8105882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	2b06      	cmp	r3, #6
 8105888:	d015      	beq.n	81058b6 <HAL_TIM_PWM_Start+0x1e6>
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105890:	d011      	beq.n	81058b6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	681a      	ldr	r2, [r3, #0]
 8105898:	687b      	ldr	r3, [r7, #4]
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	f042 0201 	orr.w	r2, r2, #1
 81058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81058a2:	e008      	b.n	81058b6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	681b      	ldr	r3, [r3, #0]
 81058a8:	681a      	ldr	r2, [r3, #0]
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	f042 0201 	orr.w	r2, r2, #1
 81058b2:	601a      	str	r2, [r3, #0]
 81058b4:	e000      	b.n	81058b8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81058b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81058b8:	2300      	movs	r3, #0
}
 81058ba:	4618      	mov	r0, r3
 81058bc:	3710      	adds	r7, #16
 81058be:	46bd      	mov	sp, r7
 81058c0:	bd80      	pop	{r7, pc}
 81058c2:	bf00      	nop
 81058c4:	40010000 	.word	0x40010000
 81058c8:	40010400 	.word	0x40010400
 81058cc:	40014000 	.word	0x40014000
 81058d0:	40014400 	.word	0x40014400
 81058d4:	40014800 	.word	0x40014800
 81058d8:	40000400 	.word	0x40000400
 81058dc:	40000800 	.word	0x40000800
 81058e0:	40000c00 	.word	0x40000c00
 81058e4:	40001800 	.word	0x40001800
 81058e8:	00010007 	.word	0x00010007

081058ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81058ec:	b580      	push	{r7, lr}
 81058ee:	b086      	sub	sp, #24
 81058f0:	af00      	add	r7, sp, #0
 81058f2:	6078      	str	r0, [r7, #4]
 81058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	2b00      	cmp	r3, #0
 81058fa:	d101      	bne.n	8105900 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 81058fc:	2301      	movs	r3, #1
 81058fe:	e097      	b.n	8105a30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105906:	b2db      	uxtb	r3, r3
 8105908:	2b00      	cmp	r3, #0
 810590a:	d106      	bne.n	810591a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	2200      	movs	r2, #0
 8105910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8105914:	6878      	ldr	r0, [r7, #4]
 8105916:	f7fc faf7 	bl	8101f08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	2202      	movs	r2, #2
 810591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8105922:	687b      	ldr	r3, [r7, #4]
 8105924:	681b      	ldr	r3, [r3, #0]
 8105926:	689b      	ldr	r3, [r3, #8]
 8105928:	687a      	ldr	r2, [r7, #4]
 810592a:	6812      	ldr	r2, [r2, #0]
 810592c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8105930:	f023 0307 	bic.w	r3, r3, #7
 8105934:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	681a      	ldr	r2, [r3, #0]
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	3304      	adds	r3, #4
 810593e:	4619      	mov	r1, r3
 8105940:	4610      	mov	r0, r2
 8105942:	f000 fa85 	bl	8105e50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	689b      	ldr	r3, [r3, #8]
 810594c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	699b      	ldr	r3, [r3, #24]
 8105954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	6a1b      	ldr	r3, [r3, #32]
 810595c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810595e:	683b      	ldr	r3, [r7, #0]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	697a      	ldr	r2, [r7, #20]
 8105964:	4313      	orrs	r3, r2
 8105966:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8105968:	693b      	ldr	r3, [r7, #16]
 810596a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810596e:	f023 0303 	bic.w	r3, r3, #3
 8105972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8105974:	683b      	ldr	r3, [r7, #0]
 8105976:	689a      	ldr	r2, [r3, #8]
 8105978:	683b      	ldr	r3, [r7, #0]
 810597a:	699b      	ldr	r3, [r3, #24]
 810597c:	021b      	lsls	r3, r3, #8
 810597e:	4313      	orrs	r3, r2
 8105980:	693a      	ldr	r2, [r7, #16]
 8105982:	4313      	orrs	r3, r2
 8105984:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8105986:	693b      	ldr	r3, [r7, #16]
 8105988:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 810598c:	f023 030c 	bic.w	r3, r3, #12
 8105990:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8105992:	693b      	ldr	r3, [r7, #16]
 8105994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8105998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810599c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810599e:	683b      	ldr	r3, [r7, #0]
 81059a0:	68da      	ldr	r2, [r3, #12]
 81059a2:	683b      	ldr	r3, [r7, #0]
 81059a4:	69db      	ldr	r3, [r3, #28]
 81059a6:	021b      	lsls	r3, r3, #8
 81059a8:	4313      	orrs	r3, r2
 81059aa:	693a      	ldr	r2, [r7, #16]
 81059ac:	4313      	orrs	r3, r2
 81059ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81059b0:	683b      	ldr	r3, [r7, #0]
 81059b2:	691b      	ldr	r3, [r3, #16]
 81059b4:	011a      	lsls	r2, r3, #4
 81059b6:	683b      	ldr	r3, [r7, #0]
 81059b8:	6a1b      	ldr	r3, [r3, #32]
 81059ba:	031b      	lsls	r3, r3, #12
 81059bc:	4313      	orrs	r3, r2
 81059be:	693a      	ldr	r2, [r7, #16]
 81059c0:	4313      	orrs	r3, r2
 81059c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81059c4:	68fb      	ldr	r3, [r7, #12]
 81059c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81059ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81059cc:	68fb      	ldr	r3, [r7, #12]
 81059ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81059d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81059d4:	683b      	ldr	r3, [r7, #0]
 81059d6:	685a      	ldr	r2, [r3, #4]
 81059d8:	683b      	ldr	r3, [r7, #0]
 81059da:	695b      	ldr	r3, [r3, #20]
 81059dc:	011b      	lsls	r3, r3, #4
 81059de:	4313      	orrs	r3, r2
 81059e0:	68fa      	ldr	r2, [r7, #12]
 81059e2:	4313      	orrs	r3, r2
 81059e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	697a      	ldr	r2, [r7, #20]
 81059ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	681b      	ldr	r3, [r3, #0]
 81059f2:	693a      	ldr	r2, [r7, #16]
 81059f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	68fa      	ldr	r2, [r7, #12]
 81059fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	2201      	movs	r2, #1
 8105a02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	2201      	movs	r2, #1
 8105a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	2201      	movs	r2, #1
 8105a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	2201      	movs	r2, #1
 8105a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	2201      	movs	r2, #1
 8105a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	2201      	movs	r2, #1
 8105a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105a2e:	2300      	movs	r3, #0
}
 8105a30:	4618      	mov	r0, r3
 8105a32:	3718      	adds	r7, #24
 8105a34:	46bd      	mov	sp, r7
 8105a36:	bd80      	pop	{r7, pc}

08105a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105a38:	b580      	push	{r7, lr}
 8105a3a:	b086      	sub	sp, #24
 8105a3c:	af00      	add	r7, sp, #0
 8105a3e:	60f8      	str	r0, [r7, #12]
 8105a40:	60b9      	str	r1, [r7, #8]
 8105a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105a44:	2300      	movs	r3, #0
 8105a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105a48:	68fb      	ldr	r3, [r7, #12]
 8105a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105a4e:	2b01      	cmp	r3, #1
 8105a50:	d101      	bne.n	8105a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8105a52:	2302      	movs	r3, #2
 8105a54:	e0ff      	b.n	8105c56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8105a56:	68fb      	ldr	r3, [r7, #12]
 8105a58:	2201      	movs	r2, #1
 8105a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	2b14      	cmp	r3, #20
 8105a62:	f200 80f0 	bhi.w	8105c46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8105a66:	a201      	add	r2, pc, #4	; (adr r2, 8105a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8105a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a6c:	08105ac1 	.word	0x08105ac1
 8105a70:	08105c47 	.word	0x08105c47
 8105a74:	08105c47 	.word	0x08105c47
 8105a78:	08105c47 	.word	0x08105c47
 8105a7c:	08105b01 	.word	0x08105b01
 8105a80:	08105c47 	.word	0x08105c47
 8105a84:	08105c47 	.word	0x08105c47
 8105a88:	08105c47 	.word	0x08105c47
 8105a8c:	08105b43 	.word	0x08105b43
 8105a90:	08105c47 	.word	0x08105c47
 8105a94:	08105c47 	.word	0x08105c47
 8105a98:	08105c47 	.word	0x08105c47
 8105a9c:	08105b83 	.word	0x08105b83
 8105aa0:	08105c47 	.word	0x08105c47
 8105aa4:	08105c47 	.word	0x08105c47
 8105aa8:	08105c47 	.word	0x08105c47
 8105aac:	08105bc5 	.word	0x08105bc5
 8105ab0:	08105c47 	.word	0x08105c47
 8105ab4:	08105c47 	.word	0x08105c47
 8105ab8:	08105c47 	.word	0x08105c47
 8105abc:	08105c05 	.word	0x08105c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105ac0:	68fb      	ldr	r3, [r7, #12]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	68b9      	ldr	r1, [r7, #8]
 8105ac6:	4618      	mov	r0, r3
 8105ac8:	f000 fa5c 	bl	8105f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105acc:	68fb      	ldr	r3, [r7, #12]
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	699a      	ldr	r2, [r3, #24]
 8105ad2:	68fb      	ldr	r3, [r7, #12]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	f042 0208 	orr.w	r2, r2, #8
 8105ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	699a      	ldr	r2, [r3, #24]
 8105ae2:	68fb      	ldr	r3, [r7, #12]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	f022 0204 	bic.w	r2, r2, #4
 8105aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105aec:	68fb      	ldr	r3, [r7, #12]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	6999      	ldr	r1, [r3, #24]
 8105af2:	68bb      	ldr	r3, [r7, #8]
 8105af4:	691a      	ldr	r2, [r3, #16]
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	430a      	orrs	r2, r1
 8105afc:	619a      	str	r2, [r3, #24]
      break;
 8105afe:	e0a5      	b.n	8105c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105b00:	68fb      	ldr	r3, [r7, #12]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	68b9      	ldr	r1, [r7, #8]
 8105b06:	4618      	mov	r0, r3
 8105b08:	f000 facc 	bl	81060a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105b0c:	68fb      	ldr	r3, [r7, #12]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	699a      	ldr	r2, [r3, #24]
 8105b12:	68fb      	ldr	r3, [r7, #12]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105b1c:	68fb      	ldr	r3, [r7, #12]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	699a      	ldr	r2, [r3, #24]
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105b2c:	68fb      	ldr	r3, [r7, #12]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	6999      	ldr	r1, [r3, #24]
 8105b32:	68bb      	ldr	r3, [r7, #8]
 8105b34:	691b      	ldr	r3, [r3, #16]
 8105b36:	021a      	lsls	r2, r3, #8
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	430a      	orrs	r2, r1
 8105b3e:	619a      	str	r2, [r3, #24]
      break;
 8105b40:	e084      	b.n	8105c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8105b42:	68fb      	ldr	r3, [r7, #12]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	68b9      	ldr	r1, [r7, #8]
 8105b48:	4618      	mov	r0, r3
 8105b4a:	f000 fb35 	bl	81061b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105b4e:	68fb      	ldr	r3, [r7, #12]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	69da      	ldr	r2, [r3, #28]
 8105b54:	68fb      	ldr	r3, [r7, #12]
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	f042 0208 	orr.w	r2, r2, #8
 8105b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105b5e:	68fb      	ldr	r3, [r7, #12]
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	69da      	ldr	r2, [r3, #28]
 8105b64:	68fb      	ldr	r3, [r7, #12]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	f022 0204 	bic.w	r2, r2, #4
 8105b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105b6e:	68fb      	ldr	r3, [r7, #12]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	69d9      	ldr	r1, [r3, #28]
 8105b74:	68bb      	ldr	r3, [r7, #8]
 8105b76:	691a      	ldr	r2, [r3, #16]
 8105b78:	68fb      	ldr	r3, [r7, #12]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	430a      	orrs	r2, r1
 8105b7e:	61da      	str	r2, [r3, #28]
      break;
 8105b80:	e064      	b.n	8105c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8105b82:	68fb      	ldr	r3, [r7, #12]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	68b9      	ldr	r1, [r7, #8]
 8105b88:	4618      	mov	r0, r3
 8105b8a:	f000 fb9d 	bl	81062c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105b8e:	68fb      	ldr	r3, [r7, #12]
 8105b90:	681b      	ldr	r3, [r3, #0]
 8105b92:	69da      	ldr	r2, [r3, #28]
 8105b94:	68fb      	ldr	r3, [r7, #12]
 8105b96:	681b      	ldr	r3, [r3, #0]
 8105b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105b9e:	68fb      	ldr	r3, [r7, #12]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	69da      	ldr	r2, [r3, #28]
 8105ba4:	68fb      	ldr	r3, [r7, #12]
 8105ba6:	681b      	ldr	r3, [r3, #0]
 8105ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105bae:	68fb      	ldr	r3, [r7, #12]
 8105bb0:	681b      	ldr	r3, [r3, #0]
 8105bb2:	69d9      	ldr	r1, [r3, #28]
 8105bb4:	68bb      	ldr	r3, [r7, #8]
 8105bb6:	691b      	ldr	r3, [r3, #16]
 8105bb8:	021a      	lsls	r2, r3, #8
 8105bba:	68fb      	ldr	r3, [r7, #12]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	430a      	orrs	r2, r1
 8105bc0:	61da      	str	r2, [r3, #28]
      break;
 8105bc2:	e043      	b.n	8105c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8105bc4:	68fb      	ldr	r3, [r7, #12]
 8105bc6:	681b      	ldr	r3, [r3, #0]
 8105bc8:	68b9      	ldr	r1, [r7, #8]
 8105bca:	4618      	mov	r0, r3
 8105bcc:	f000 fbe6 	bl	810639c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	681b      	ldr	r3, [r3, #0]
 8105bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105bd6:	68fb      	ldr	r3, [r7, #12]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	f042 0208 	orr.w	r2, r2, #8
 8105bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105be0:	68fb      	ldr	r3, [r7, #12]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105be6:	68fb      	ldr	r3, [r7, #12]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	f022 0204 	bic.w	r2, r2, #4
 8105bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105bf0:	68fb      	ldr	r3, [r7, #12]
 8105bf2:	681b      	ldr	r3, [r3, #0]
 8105bf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105bf6:	68bb      	ldr	r3, [r7, #8]
 8105bf8:	691a      	ldr	r2, [r3, #16]
 8105bfa:	68fb      	ldr	r3, [r7, #12]
 8105bfc:	681b      	ldr	r3, [r3, #0]
 8105bfe:	430a      	orrs	r2, r1
 8105c00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105c02:	e023      	b.n	8105c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8105c04:	68fb      	ldr	r3, [r7, #12]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	68b9      	ldr	r1, [r7, #8]
 8105c0a:	4618      	mov	r0, r3
 8105c0c:	f000 fc2a 	bl	8106464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105c10:	68fb      	ldr	r3, [r7, #12]
 8105c12:	681b      	ldr	r3, [r3, #0]
 8105c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	681b      	ldr	r3, [r3, #0]
 8105c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105c20:	68fb      	ldr	r3, [r7, #12]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105c26:	68fb      	ldr	r3, [r7, #12]
 8105c28:	681b      	ldr	r3, [r3, #0]
 8105c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105c30:	68fb      	ldr	r3, [r7, #12]
 8105c32:	681b      	ldr	r3, [r3, #0]
 8105c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105c36:	68bb      	ldr	r3, [r7, #8]
 8105c38:	691b      	ldr	r3, [r3, #16]
 8105c3a:	021a      	lsls	r2, r3, #8
 8105c3c:	68fb      	ldr	r3, [r7, #12]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	430a      	orrs	r2, r1
 8105c42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105c44:	e002      	b.n	8105c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8105c46:	2301      	movs	r3, #1
 8105c48:	75fb      	strb	r3, [r7, #23]
      break;
 8105c4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8105c4c:	68fb      	ldr	r3, [r7, #12]
 8105c4e:	2200      	movs	r2, #0
 8105c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8105c56:	4618      	mov	r0, r3
 8105c58:	3718      	adds	r7, #24
 8105c5a:	46bd      	mov	sp, r7
 8105c5c:	bd80      	pop	{r7, pc}
 8105c5e:	bf00      	nop

08105c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105c60:	b580      	push	{r7, lr}
 8105c62:	b084      	sub	sp, #16
 8105c64:	af00      	add	r7, sp, #0
 8105c66:	6078      	str	r0, [r7, #4]
 8105c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105c6a:	2300      	movs	r3, #0
 8105c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105c74:	2b01      	cmp	r3, #1
 8105c76:	d101      	bne.n	8105c7c <HAL_TIM_ConfigClockSource+0x1c>
 8105c78:	2302      	movs	r3, #2
 8105c7a:	e0de      	b.n	8105e3a <HAL_TIM_ConfigClockSource+0x1da>
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	2201      	movs	r2, #1
 8105c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	2202      	movs	r2, #2
 8105c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	689b      	ldr	r3, [r3, #8]
 8105c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8105c94:	68bb      	ldr	r3, [r7, #8]
 8105c96:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8105c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8105c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105ca0:	68bb      	ldr	r3, [r7, #8]
 8105ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	68ba      	ldr	r2, [r7, #8]
 8105cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8105cb0:	683b      	ldr	r3, [r7, #0]
 8105cb2:	681b      	ldr	r3, [r3, #0]
 8105cb4:	4a63      	ldr	r2, [pc, #396]	; (8105e44 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105cb6:	4293      	cmp	r3, r2
 8105cb8:	f000 80a9 	beq.w	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105cbc:	4a61      	ldr	r2, [pc, #388]	; (8105e44 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105cbe:	4293      	cmp	r3, r2
 8105cc0:	f200 80ae 	bhi.w	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105cc4:	4a60      	ldr	r2, [pc, #384]	; (8105e48 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105cc6:	4293      	cmp	r3, r2
 8105cc8:	f000 80a1 	beq.w	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105ccc:	4a5e      	ldr	r2, [pc, #376]	; (8105e48 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105cce:	4293      	cmp	r3, r2
 8105cd0:	f200 80a6 	bhi.w	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105cd4:	4a5d      	ldr	r2, [pc, #372]	; (8105e4c <HAL_TIM_ConfigClockSource+0x1ec>)
 8105cd6:	4293      	cmp	r3, r2
 8105cd8:	f000 8099 	beq.w	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105cdc:	4a5b      	ldr	r2, [pc, #364]	; (8105e4c <HAL_TIM_ConfigClockSource+0x1ec>)
 8105cde:	4293      	cmp	r3, r2
 8105ce0:	f200 809e 	bhi.w	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105ce4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105ce8:	f000 8091 	beq.w	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105cec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105cf0:	f200 8096 	bhi.w	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105cf8:	f000 8089 	beq.w	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105d00:	f200 808e 	bhi.w	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105d08:	d03e      	beq.n	8105d88 <HAL_TIM_ConfigClockSource+0x128>
 8105d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105d0e:	f200 8087 	bhi.w	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105d16:	f000 8086 	beq.w	8105e26 <HAL_TIM_ConfigClockSource+0x1c6>
 8105d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105d1e:	d87f      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d20:	2b70      	cmp	r3, #112	; 0x70
 8105d22:	d01a      	beq.n	8105d5a <HAL_TIM_ConfigClockSource+0xfa>
 8105d24:	2b70      	cmp	r3, #112	; 0x70
 8105d26:	d87b      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d28:	2b60      	cmp	r3, #96	; 0x60
 8105d2a:	d050      	beq.n	8105dce <HAL_TIM_ConfigClockSource+0x16e>
 8105d2c:	2b60      	cmp	r3, #96	; 0x60
 8105d2e:	d877      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d30:	2b50      	cmp	r3, #80	; 0x50
 8105d32:	d03c      	beq.n	8105dae <HAL_TIM_ConfigClockSource+0x14e>
 8105d34:	2b50      	cmp	r3, #80	; 0x50
 8105d36:	d873      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d38:	2b40      	cmp	r3, #64	; 0x40
 8105d3a:	d058      	beq.n	8105dee <HAL_TIM_ConfigClockSource+0x18e>
 8105d3c:	2b40      	cmp	r3, #64	; 0x40
 8105d3e:	d86f      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d40:	2b30      	cmp	r3, #48	; 0x30
 8105d42:	d064      	beq.n	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105d44:	2b30      	cmp	r3, #48	; 0x30
 8105d46:	d86b      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d48:	2b20      	cmp	r3, #32
 8105d4a:	d060      	beq.n	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105d4c:	2b20      	cmp	r3, #32
 8105d4e:	d867      	bhi.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
 8105d50:	2b00      	cmp	r3, #0
 8105d52:	d05c      	beq.n	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105d54:	2b10      	cmp	r3, #16
 8105d56:	d05a      	beq.n	8105e0e <HAL_TIM_ConfigClockSource+0x1ae>
 8105d58:	e062      	b.n	8105e20 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105d5a:	687b      	ldr	r3, [r7, #4]
 8105d5c:	6818      	ldr	r0, [r3, #0]
 8105d5e:	683b      	ldr	r3, [r7, #0]
 8105d60:	6899      	ldr	r1, [r3, #8]
 8105d62:	683b      	ldr	r3, [r7, #0]
 8105d64:	685a      	ldr	r2, [r3, #4]
 8105d66:	683b      	ldr	r3, [r7, #0]
 8105d68:	68db      	ldr	r3, [r3, #12]
 8105d6a:	f000 fc5d 	bl	8106628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	689b      	ldr	r3, [r3, #8]
 8105d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105d76:	68bb      	ldr	r3, [r7, #8]
 8105d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	68ba      	ldr	r2, [r7, #8]
 8105d84:	609a      	str	r2, [r3, #8]
      break;
 8105d86:	e04f      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	6818      	ldr	r0, [r3, #0]
 8105d8c:	683b      	ldr	r3, [r7, #0]
 8105d8e:	6899      	ldr	r1, [r3, #8]
 8105d90:	683b      	ldr	r3, [r7, #0]
 8105d92:	685a      	ldr	r2, [r3, #4]
 8105d94:	683b      	ldr	r3, [r7, #0]
 8105d96:	68db      	ldr	r3, [r3, #12]
 8105d98:	f000 fc46 	bl	8106628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	689a      	ldr	r2, [r3, #8]
 8105da2:	687b      	ldr	r3, [r7, #4]
 8105da4:	681b      	ldr	r3, [r3, #0]
 8105da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105daa:	609a      	str	r2, [r3, #8]
      break;
 8105dac:	e03c      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	6818      	ldr	r0, [r3, #0]
 8105db2:	683b      	ldr	r3, [r7, #0]
 8105db4:	6859      	ldr	r1, [r3, #4]
 8105db6:	683b      	ldr	r3, [r7, #0]
 8105db8:	68db      	ldr	r3, [r3, #12]
 8105dba:	461a      	mov	r2, r3
 8105dbc:	f000 fbb8 	bl	8106530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	2150      	movs	r1, #80	; 0x50
 8105dc6:	4618      	mov	r0, r3
 8105dc8:	f000 fc11 	bl	81065ee <TIM_ITRx_SetConfig>
      break;
 8105dcc:	e02c      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	6818      	ldr	r0, [r3, #0]
 8105dd2:	683b      	ldr	r3, [r7, #0]
 8105dd4:	6859      	ldr	r1, [r3, #4]
 8105dd6:	683b      	ldr	r3, [r7, #0]
 8105dd8:	68db      	ldr	r3, [r3, #12]
 8105dda:	461a      	mov	r2, r3
 8105ddc:	f000 fbd7 	bl	810658e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	2160      	movs	r1, #96	; 0x60
 8105de6:	4618      	mov	r0, r3
 8105de8:	f000 fc01 	bl	81065ee <TIM_ITRx_SetConfig>
      break;
 8105dec:	e01c      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	6818      	ldr	r0, [r3, #0]
 8105df2:	683b      	ldr	r3, [r7, #0]
 8105df4:	6859      	ldr	r1, [r3, #4]
 8105df6:	683b      	ldr	r3, [r7, #0]
 8105df8:	68db      	ldr	r3, [r3, #12]
 8105dfa:	461a      	mov	r2, r3
 8105dfc:	f000 fb98 	bl	8106530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	2140      	movs	r1, #64	; 0x40
 8105e06:	4618      	mov	r0, r3
 8105e08:	f000 fbf1 	bl	81065ee <TIM_ITRx_SetConfig>
      break;
 8105e0c:	e00c      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681a      	ldr	r2, [r3, #0]
 8105e12:	683b      	ldr	r3, [r7, #0]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	4619      	mov	r1, r3
 8105e18:	4610      	mov	r0, r2
 8105e1a:	f000 fbe8 	bl	81065ee <TIM_ITRx_SetConfig>
      break;
 8105e1e:	e003      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105e20:	2301      	movs	r3, #1
 8105e22:	73fb      	strb	r3, [r7, #15]
      break;
 8105e24:	e000      	b.n	8105e28 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105e28:	687b      	ldr	r3, [r7, #4]
 8105e2a:	2201      	movs	r2, #1
 8105e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	2200      	movs	r2, #0
 8105e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e3a:	4618      	mov	r0, r3
 8105e3c:	3710      	adds	r7, #16
 8105e3e:	46bd      	mov	sp, r7
 8105e40:	bd80      	pop	{r7, pc}
 8105e42:	bf00      	nop
 8105e44:	00100040 	.word	0x00100040
 8105e48:	00100030 	.word	0x00100030
 8105e4c:	00100020 	.word	0x00100020

08105e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105e50:	b480      	push	{r7}
 8105e52:	b085      	sub	sp, #20
 8105e54:	af00      	add	r7, sp, #0
 8105e56:	6078      	str	r0, [r7, #4]
 8105e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	4a40      	ldr	r2, [pc, #256]	; (8105f64 <TIM_Base_SetConfig+0x114>)
 8105e64:	4293      	cmp	r3, r2
 8105e66:	d013      	beq.n	8105e90 <TIM_Base_SetConfig+0x40>
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105e6e:	d00f      	beq.n	8105e90 <TIM_Base_SetConfig+0x40>
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	4a3d      	ldr	r2, [pc, #244]	; (8105f68 <TIM_Base_SetConfig+0x118>)
 8105e74:	4293      	cmp	r3, r2
 8105e76:	d00b      	beq.n	8105e90 <TIM_Base_SetConfig+0x40>
 8105e78:	687b      	ldr	r3, [r7, #4]
 8105e7a:	4a3c      	ldr	r2, [pc, #240]	; (8105f6c <TIM_Base_SetConfig+0x11c>)
 8105e7c:	4293      	cmp	r3, r2
 8105e7e:	d007      	beq.n	8105e90 <TIM_Base_SetConfig+0x40>
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	4a3b      	ldr	r2, [pc, #236]	; (8105f70 <TIM_Base_SetConfig+0x120>)
 8105e84:	4293      	cmp	r3, r2
 8105e86:	d003      	beq.n	8105e90 <TIM_Base_SetConfig+0x40>
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	4a3a      	ldr	r2, [pc, #232]	; (8105f74 <TIM_Base_SetConfig+0x124>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d108      	bne.n	8105ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105e90:	68fb      	ldr	r3, [r7, #12]
 8105e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105e98:	683b      	ldr	r3, [r7, #0]
 8105e9a:	685b      	ldr	r3, [r3, #4]
 8105e9c:	68fa      	ldr	r2, [r7, #12]
 8105e9e:	4313      	orrs	r3, r2
 8105ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	4a2f      	ldr	r2, [pc, #188]	; (8105f64 <TIM_Base_SetConfig+0x114>)
 8105ea6:	4293      	cmp	r3, r2
 8105ea8:	d01f      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105eaa:	687b      	ldr	r3, [r7, #4]
 8105eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105eb0:	d01b      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	4a2c      	ldr	r2, [pc, #176]	; (8105f68 <TIM_Base_SetConfig+0x118>)
 8105eb6:	4293      	cmp	r3, r2
 8105eb8:	d017      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	4a2b      	ldr	r2, [pc, #172]	; (8105f6c <TIM_Base_SetConfig+0x11c>)
 8105ebe:	4293      	cmp	r3, r2
 8105ec0:	d013      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	4a2a      	ldr	r2, [pc, #168]	; (8105f70 <TIM_Base_SetConfig+0x120>)
 8105ec6:	4293      	cmp	r3, r2
 8105ec8:	d00f      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105eca:	687b      	ldr	r3, [r7, #4]
 8105ecc:	4a29      	ldr	r2, [pc, #164]	; (8105f74 <TIM_Base_SetConfig+0x124>)
 8105ece:	4293      	cmp	r3, r2
 8105ed0:	d00b      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	4a28      	ldr	r2, [pc, #160]	; (8105f78 <TIM_Base_SetConfig+0x128>)
 8105ed6:	4293      	cmp	r3, r2
 8105ed8:	d007      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	4a27      	ldr	r2, [pc, #156]	; (8105f7c <TIM_Base_SetConfig+0x12c>)
 8105ede:	4293      	cmp	r3, r2
 8105ee0:	d003      	beq.n	8105eea <TIM_Base_SetConfig+0x9a>
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	4a26      	ldr	r2, [pc, #152]	; (8105f80 <TIM_Base_SetConfig+0x130>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d108      	bne.n	8105efc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105eea:	68fb      	ldr	r3, [r7, #12]
 8105eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105ef2:	683b      	ldr	r3, [r7, #0]
 8105ef4:	68db      	ldr	r3, [r3, #12]
 8105ef6:	68fa      	ldr	r2, [r7, #12]
 8105ef8:	4313      	orrs	r3, r2
 8105efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105efc:	68fb      	ldr	r3, [r7, #12]
 8105efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105f02:	683b      	ldr	r3, [r7, #0]
 8105f04:	695b      	ldr	r3, [r3, #20]
 8105f06:	4313      	orrs	r3, r2
 8105f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	68fa      	ldr	r2, [r7, #12]
 8105f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105f10:	683b      	ldr	r3, [r7, #0]
 8105f12:	689a      	ldr	r2, [r3, #8]
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105f18:	683b      	ldr	r3, [r7, #0]
 8105f1a:	681a      	ldr	r2, [r3, #0]
 8105f1c:	687b      	ldr	r3, [r7, #4]
 8105f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	4a10      	ldr	r2, [pc, #64]	; (8105f64 <TIM_Base_SetConfig+0x114>)
 8105f24:	4293      	cmp	r3, r2
 8105f26:	d00f      	beq.n	8105f48 <TIM_Base_SetConfig+0xf8>
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	4a12      	ldr	r2, [pc, #72]	; (8105f74 <TIM_Base_SetConfig+0x124>)
 8105f2c:	4293      	cmp	r3, r2
 8105f2e:	d00b      	beq.n	8105f48 <TIM_Base_SetConfig+0xf8>
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	4a11      	ldr	r2, [pc, #68]	; (8105f78 <TIM_Base_SetConfig+0x128>)
 8105f34:	4293      	cmp	r3, r2
 8105f36:	d007      	beq.n	8105f48 <TIM_Base_SetConfig+0xf8>
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	4a10      	ldr	r2, [pc, #64]	; (8105f7c <TIM_Base_SetConfig+0x12c>)
 8105f3c:	4293      	cmp	r3, r2
 8105f3e:	d003      	beq.n	8105f48 <TIM_Base_SetConfig+0xf8>
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	4a0f      	ldr	r2, [pc, #60]	; (8105f80 <TIM_Base_SetConfig+0x130>)
 8105f44:	4293      	cmp	r3, r2
 8105f46:	d103      	bne.n	8105f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105f48:	683b      	ldr	r3, [r7, #0]
 8105f4a:	691a      	ldr	r2, [r3, #16]
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	2201      	movs	r2, #1
 8105f54:	615a      	str	r2, [r3, #20]
}
 8105f56:	bf00      	nop
 8105f58:	3714      	adds	r7, #20
 8105f5a:	46bd      	mov	sp, r7
 8105f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f60:	4770      	bx	lr
 8105f62:	bf00      	nop
 8105f64:	40010000 	.word	0x40010000
 8105f68:	40000400 	.word	0x40000400
 8105f6c:	40000800 	.word	0x40000800
 8105f70:	40000c00 	.word	0x40000c00
 8105f74:	40010400 	.word	0x40010400
 8105f78:	40014000 	.word	0x40014000
 8105f7c:	40014400 	.word	0x40014400
 8105f80:	40014800 	.word	0x40014800

08105f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105f84:	b480      	push	{r7}
 8105f86:	b087      	sub	sp, #28
 8105f88:	af00      	add	r7, sp, #0
 8105f8a:	6078      	str	r0, [r7, #4]
 8105f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	6a1b      	ldr	r3, [r3, #32]
 8105f92:	f023 0201 	bic.w	r2, r3, #1
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	6a1b      	ldr	r3, [r3, #32]
 8105f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	685b      	ldr	r3, [r3, #4]
 8105fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	699b      	ldr	r3, [r3, #24]
 8105faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105fac:	68fb      	ldr	r3, [r7, #12]
 8105fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105fb8:	68fb      	ldr	r3, [r7, #12]
 8105fba:	f023 0303 	bic.w	r3, r3, #3
 8105fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105fc0:	683b      	ldr	r3, [r7, #0]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	68fa      	ldr	r2, [r7, #12]
 8105fc6:	4313      	orrs	r3, r2
 8105fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8105fca:	697b      	ldr	r3, [r7, #20]
 8105fcc:	f023 0302 	bic.w	r3, r3, #2
 8105fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105fd2:	683b      	ldr	r3, [r7, #0]
 8105fd4:	689b      	ldr	r3, [r3, #8]
 8105fd6:	697a      	ldr	r2, [r7, #20]
 8105fd8:	4313      	orrs	r3, r2
 8105fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	4a2c      	ldr	r2, [pc, #176]	; (8106090 <TIM_OC1_SetConfig+0x10c>)
 8105fe0:	4293      	cmp	r3, r2
 8105fe2:	d00f      	beq.n	8106004 <TIM_OC1_SetConfig+0x80>
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	4a2b      	ldr	r2, [pc, #172]	; (8106094 <TIM_OC1_SetConfig+0x110>)
 8105fe8:	4293      	cmp	r3, r2
 8105fea:	d00b      	beq.n	8106004 <TIM_OC1_SetConfig+0x80>
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	4a2a      	ldr	r2, [pc, #168]	; (8106098 <TIM_OC1_SetConfig+0x114>)
 8105ff0:	4293      	cmp	r3, r2
 8105ff2:	d007      	beq.n	8106004 <TIM_OC1_SetConfig+0x80>
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	4a29      	ldr	r2, [pc, #164]	; (810609c <TIM_OC1_SetConfig+0x118>)
 8105ff8:	4293      	cmp	r3, r2
 8105ffa:	d003      	beq.n	8106004 <TIM_OC1_SetConfig+0x80>
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	4a28      	ldr	r2, [pc, #160]	; (81060a0 <TIM_OC1_SetConfig+0x11c>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d10c      	bne.n	810601e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106004:	697b      	ldr	r3, [r7, #20]
 8106006:	f023 0308 	bic.w	r3, r3, #8
 810600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810600c:	683b      	ldr	r3, [r7, #0]
 810600e:	68db      	ldr	r3, [r3, #12]
 8106010:	697a      	ldr	r2, [r7, #20]
 8106012:	4313      	orrs	r3, r2
 8106014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106016:	697b      	ldr	r3, [r7, #20]
 8106018:	f023 0304 	bic.w	r3, r3, #4
 810601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	4a1b      	ldr	r2, [pc, #108]	; (8106090 <TIM_OC1_SetConfig+0x10c>)
 8106022:	4293      	cmp	r3, r2
 8106024:	d00f      	beq.n	8106046 <TIM_OC1_SetConfig+0xc2>
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	4a1a      	ldr	r2, [pc, #104]	; (8106094 <TIM_OC1_SetConfig+0x110>)
 810602a:	4293      	cmp	r3, r2
 810602c:	d00b      	beq.n	8106046 <TIM_OC1_SetConfig+0xc2>
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	4a19      	ldr	r2, [pc, #100]	; (8106098 <TIM_OC1_SetConfig+0x114>)
 8106032:	4293      	cmp	r3, r2
 8106034:	d007      	beq.n	8106046 <TIM_OC1_SetConfig+0xc2>
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	4a18      	ldr	r2, [pc, #96]	; (810609c <TIM_OC1_SetConfig+0x118>)
 810603a:	4293      	cmp	r3, r2
 810603c:	d003      	beq.n	8106046 <TIM_OC1_SetConfig+0xc2>
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	4a17      	ldr	r2, [pc, #92]	; (81060a0 <TIM_OC1_SetConfig+0x11c>)
 8106042:	4293      	cmp	r3, r2
 8106044:	d111      	bne.n	810606a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106046:	693b      	ldr	r3, [r7, #16]
 8106048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810604e:	693b      	ldr	r3, [r7, #16]
 8106050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106056:	683b      	ldr	r3, [r7, #0]
 8106058:	695b      	ldr	r3, [r3, #20]
 810605a:	693a      	ldr	r2, [r7, #16]
 810605c:	4313      	orrs	r3, r2
 810605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106060:	683b      	ldr	r3, [r7, #0]
 8106062:	699b      	ldr	r3, [r3, #24]
 8106064:	693a      	ldr	r2, [r7, #16]
 8106066:	4313      	orrs	r3, r2
 8106068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	693a      	ldr	r2, [r7, #16]
 810606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106070:	687b      	ldr	r3, [r7, #4]
 8106072:	68fa      	ldr	r2, [r7, #12]
 8106074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106076:	683b      	ldr	r3, [r7, #0]
 8106078:	685a      	ldr	r2, [r3, #4]
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	697a      	ldr	r2, [r7, #20]
 8106082:	621a      	str	r2, [r3, #32]
}
 8106084:	bf00      	nop
 8106086:	371c      	adds	r7, #28
 8106088:	46bd      	mov	sp, r7
 810608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810608e:	4770      	bx	lr
 8106090:	40010000 	.word	0x40010000
 8106094:	40010400 	.word	0x40010400
 8106098:	40014000 	.word	0x40014000
 810609c:	40014400 	.word	0x40014400
 81060a0:	40014800 	.word	0x40014800

081060a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81060a4:	b480      	push	{r7}
 81060a6:	b087      	sub	sp, #28
 81060a8:	af00      	add	r7, sp, #0
 81060aa:	6078      	str	r0, [r7, #4]
 81060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	6a1b      	ldr	r3, [r3, #32]
 81060b2:	f023 0210 	bic.w	r2, r3, #16
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	6a1b      	ldr	r3, [r3, #32]
 81060be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	685b      	ldr	r3, [r3, #4]
 81060c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	699b      	ldr	r3, [r3, #24]
 81060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81060cc:	68fb      	ldr	r3, [r7, #12]
 81060ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81060d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81060d8:	68fb      	ldr	r3, [r7, #12]
 81060da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81060de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81060e0:	683b      	ldr	r3, [r7, #0]
 81060e2:	681b      	ldr	r3, [r3, #0]
 81060e4:	021b      	lsls	r3, r3, #8
 81060e6:	68fa      	ldr	r2, [r7, #12]
 81060e8:	4313      	orrs	r3, r2
 81060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81060ec:	697b      	ldr	r3, [r7, #20]
 81060ee:	f023 0320 	bic.w	r3, r3, #32
 81060f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81060f4:	683b      	ldr	r3, [r7, #0]
 81060f6:	689b      	ldr	r3, [r3, #8]
 81060f8:	011b      	lsls	r3, r3, #4
 81060fa:	697a      	ldr	r2, [r7, #20]
 81060fc:	4313      	orrs	r3, r2
 81060fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	4a28      	ldr	r2, [pc, #160]	; (81061a4 <TIM_OC2_SetConfig+0x100>)
 8106104:	4293      	cmp	r3, r2
 8106106:	d003      	beq.n	8106110 <TIM_OC2_SetConfig+0x6c>
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	4a27      	ldr	r2, [pc, #156]	; (81061a8 <TIM_OC2_SetConfig+0x104>)
 810610c:	4293      	cmp	r3, r2
 810610e:	d10d      	bne.n	810612c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106110:	697b      	ldr	r3, [r7, #20]
 8106112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106118:	683b      	ldr	r3, [r7, #0]
 810611a:	68db      	ldr	r3, [r3, #12]
 810611c:	011b      	lsls	r3, r3, #4
 810611e:	697a      	ldr	r2, [r7, #20]
 8106120:	4313      	orrs	r3, r2
 8106122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106124:	697b      	ldr	r3, [r7, #20]
 8106126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810612a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	4a1d      	ldr	r2, [pc, #116]	; (81061a4 <TIM_OC2_SetConfig+0x100>)
 8106130:	4293      	cmp	r3, r2
 8106132:	d00f      	beq.n	8106154 <TIM_OC2_SetConfig+0xb0>
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	4a1c      	ldr	r2, [pc, #112]	; (81061a8 <TIM_OC2_SetConfig+0x104>)
 8106138:	4293      	cmp	r3, r2
 810613a:	d00b      	beq.n	8106154 <TIM_OC2_SetConfig+0xb0>
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	4a1b      	ldr	r2, [pc, #108]	; (81061ac <TIM_OC2_SetConfig+0x108>)
 8106140:	4293      	cmp	r3, r2
 8106142:	d007      	beq.n	8106154 <TIM_OC2_SetConfig+0xb0>
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	4a1a      	ldr	r2, [pc, #104]	; (81061b0 <TIM_OC2_SetConfig+0x10c>)
 8106148:	4293      	cmp	r3, r2
 810614a:	d003      	beq.n	8106154 <TIM_OC2_SetConfig+0xb0>
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	4a19      	ldr	r2, [pc, #100]	; (81061b4 <TIM_OC2_SetConfig+0x110>)
 8106150:	4293      	cmp	r3, r2
 8106152:	d113      	bne.n	810617c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106154:	693b      	ldr	r3, [r7, #16]
 8106156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810615a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810615c:	693b      	ldr	r3, [r7, #16]
 810615e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106164:	683b      	ldr	r3, [r7, #0]
 8106166:	695b      	ldr	r3, [r3, #20]
 8106168:	009b      	lsls	r3, r3, #2
 810616a:	693a      	ldr	r2, [r7, #16]
 810616c:	4313      	orrs	r3, r2
 810616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106170:	683b      	ldr	r3, [r7, #0]
 8106172:	699b      	ldr	r3, [r3, #24]
 8106174:	009b      	lsls	r3, r3, #2
 8106176:	693a      	ldr	r2, [r7, #16]
 8106178:	4313      	orrs	r3, r2
 810617a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810617c:	687b      	ldr	r3, [r7, #4]
 810617e:	693a      	ldr	r2, [r7, #16]
 8106180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	68fa      	ldr	r2, [r7, #12]
 8106186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106188:	683b      	ldr	r3, [r7, #0]
 810618a:	685a      	ldr	r2, [r3, #4]
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	697a      	ldr	r2, [r7, #20]
 8106194:	621a      	str	r2, [r3, #32]
}
 8106196:	bf00      	nop
 8106198:	371c      	adds	r7, #28
 810619a:	46bd      	mov	sp, r7
 810619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061a0:	4770      	bx	lr
 81061a2:	bf00      	nop
 81061a4:	40010000 	.word	0x40010000
 81061a8:	40010400 	.word	0x40010400
 81061ac:	40014000 	.word	0x40014000
 81061b0:	40014400 	.word	0x40014400
 81061b4:	40014800 	.word	0x40014800

081061b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81061b8:	b480      	push	{r7}
 81061ba:	b087      	sub	sp, #28
 81061bc:	af00      	add	r7, sp, #0
 81061be:	6078      	str	r0, [r7, #4]
 81061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	6a1b      	ldr	r3, [r3, #32]
 81061c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	6a1b      	ldr	r3, [r3, #32]
 81061d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	685b      	ldr	r3, [r3, #4]
 81061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	69db      	ldr	r3, [r3, #28]
 81061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81061e0:	68fb      	ldr	r3, [r7, #12]
 81061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81061ec:	68fb      	ldr	r3, [r7, #12]
 81061ee:	f023 0303 	bic.w	r3, r3, #3
 81061f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81061f4:	683b      	ldr	r3, [r7, #0]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	68fa      	ldr	r2, [r7, #12]
 81061fa:	4313      	orrs	r3, r2
 81061fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81061fe:	697b      	ldr	r3, [r7, #20]
 8106200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106206:	683b      	ldr	r3, [r7, #0]
 8106208:	689b      	ldr	r3, [r3, #8]
 810620a:	021b      	lsls	r3, r3, #8
 810620c:	697a      	ldr	r2, [r7, #20]
 810620e:	4313      	orrs	r3, r2
 8106210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	4a27      	ldr	r2, [pc, #156]	; (81062b4 <TIM_OC3_SetConfig+0xfc>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d003      	beq.n	8106222 <TIM_OC3_SetConfig+0x6a>
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	4a26      	ldr	r2, [pc, #152]	; (81062b8 <TIM_OC3_SetConfig+0x100>)
 810621e:	4293      	cmp	r3, r2
 8106220:	d10d      	bne.n	810623e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106222:	697b      	ldr	r3, [r7, #20]
 8106224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810622a:	683b      	ldr	r3, [r7, #0]
 810622c:	68db      	ldr	r3, [r3, #12]
 810622e:	021b      	lsls	r3, r3, #8
 8106230:	697a      	ldr	r2, [r7, #20]
 8106232:	4313      	orrs	r3, r2
 8106234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106236:	697b      	ldr	r3, [r7, #20]
 8106238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810623c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	4a1c      	ldr	r2, [pc, #112]	; (81062b4 <TIM_OC3_SetConfig+0xfc>)
 8106242:	4293      	cmp	r3, r2
 8106244:	d00f      	beq.n	8106266 <TIM_OC3_SetConfig+0xae>
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	4a1b      	ldr	r2, [pc, #108]	; (81062b8 <TIM_OC3_SetConfig+0x100>)
 810624a:	4293      	cmp	r3, r2
 810624c:	d00b      	beq.n	8106266 <TIM_OC3_SetConfig+0xae>
 810624e:	687b      	ldr	r3, [r7, #4]
 8106250:	4a1a      	ldr	r2, [pc, #104]	; (81062bc <TIM_OC3_SetConfig+0x104>)
 8106252:	4293      	cmp	r3, r2
 8106254:	d007      	beq.n	8106266 <TIM_OC3_SetConfig+0xae>
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	4a19      	ldr	r2, [pc, #100]	; (81062c0 <TIM_OC3_SetConfig+0x108>)
 810625a:	4293      	cmp	r3, r2
 810625c:	d003      	beq.n	8106266 <TIM_OC3_SetConfig+0xae>
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	4a18      	ldr	r2, [pc, #96]	; (81062c4 <TIM_OC3_SetConfig+0x10c>)
 8106262:	4293      	cmp	r3, r2
 8106264:	d113      	bne.n	810628e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106266:	693b      	ldr	r3, [r7, #16]
 8106268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810626e:	693b      	ldr	r3, [r7, #16]
 8106270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106276:	683b      	ldr	r3, [r7, #0]
 8106278:	695b      	ldr	r3, [r3, #20]
 810627a:	011b      	lsls	r3, r3, #4
 810627c:	693a      	ldr	r2, [r7, #16]
 810627e:	4313      	orrs	r3, r2
 8106280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106282:	683b      	ldr	r3, [r7, #0]
 8106284:	699b      	ldr	r3, [r3, #24]
 8106286:	011b      	lsls	r3, r3, #4
 8106288:	693a      	ldr	r2, [r7, #16]
 810628a:	4313      	orrs	r3, r2
 810628c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	693a      	ldr	r2, [r7, #16]
 8106292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	68fa      	ldr	r2, [r7, #12]
 8106298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810629a:	683b      	ldr	r3, [r7, #0]
 810629c:	685a      	ldr	r2, [r3, #4]
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	697a      	ldr	r2, [r7, #20]
 81062a6:	621a      	str	r2, [r3, #32]
}
 81062a8:	bf00      	nop
 81062aa:	371c      	adds	r7, #28
 81062ac:	46bd      	mov	sp, r7
 81062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062b2:	4770      	bx	lr
 81062b4:	40010000 	.word	0x40010000
 81062b8:	40010400 	.word	0x40010400
 81062bc:	40014000 	.word	0x40014000
 81062c0:	40014400 	.word	0x40014400
 81062c4:	40014800 	.word	0x40014800

081062c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81062c8:	b480      	push	{r7}
 81062ca:	b087      	sub	sp, #28
 81062cc:	af00      	add	r7, sp, #0
 81062ce:	6078      	str	r0, [r7, #4]
 81062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	6a1b      	ldr	r3, [r3, #32]
 81062d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	6a1b      	ldr	r3, [r3, #32]
 81062e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81062e4:	687b      	ldr	r3, [r7, #4]
 81062e6:	685b      	ldr	r3, [r3, #4]
 81062e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	69db      	ldr	r3, [r3, #28]
 81062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81062f0:	68fb      	ldr	r3, [r7, #12]
 81062f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81062f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81062fc:	68fb      	ldr	r3, [r7, #12]
 81062fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106304:	683b      	ldr	r3, [r7, #0]
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	021b      	lsls	r3, r3, #8
 810630a:	68fa      	ldr	r2, [r7, #12]
 810630c:	4313      	orrs	r3, r2
 810630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106310:	693b      	ldr	r3, [r7, #16]
 8106312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8106318:	683b      	ldr	r3, [r7, #0]
 810631a:	689b      	ldr	r3, [r3, #8]
 810631c:	031b      	lsls	r3, r3, #12
 810631e:	693a      	ldr	r2, [r7, #16]
 8106320:	4313      	orrs	r3, r2
 8106322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	4a18      	ldr	r2, [pc, #96]	; (8106388 <TIM_OC4_SetConfig+0xc0>)
 8106328:	4293      	cmp	r3, r2
 810632a:	d00f      	beq.n	810634c <TIM_OC4_SetConfig+0x84>
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	4a17      	ldr	r2, [pc, #92]	; (810638c <TIM_OC4_SetConfig+0xc4>)
 8106330:	4293      	cmp	r3, r2
 8106332:	d00b      	beq.n	810634c <TIM_OC4_SetConfig+0x84>
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	4a16      	ldr	r2, [pc, #88]	; (8106390 <TIM_OC4_SetConfig+0xc8>)
 8106338:	4293      	cmp	r3, r2
 810633a:	d007      	beq.n	810634c <TIM_OC4_SetConfig+0x84>
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	4a15      	ldr	r2, [pc, #84]	; (8106394 <TIM_OC4_SetConfig+0xcc>)
 8106340:	4293      	cmp	r3, r2
 8106342:	d003      	beq.n	810634c <TIM_OC4_SetConfig+0x84>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	4a14      	ldr	r2, [pc, #80]	; (8106398 <TIM_OC4_SetConfig+0xd0>)
 8106348:	4293      	cmp	r3, r2
 810634a:	d109      	bne.n	8106360 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810634c:	697b      	ldr	r3, [r7, #20]
 810634e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106354:	683b      	ldr	r3, [r7, #0]
 8106356:	695b      	ldr	r3, [r3, #20]
 8106358:	019b      	lsls	r3, r3, #6
 810635a:	697a      	ldr	r2, [r7, #20]
 810635c:	4313      	orrs	r3, r2
 810635e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	697a      	ldr	r2, [r7, #20]
 8106364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	68fa      	ldr	r2, [r7, #12]
 810636a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810636c:	683b      	ldr	r3, [r7, #0]
 810636e:	685a      	ldr	r2, [r3, #4]
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	693a      	ldr	r2, [r7, #16]
 8106378:	621a      	str	r2, [r3, #32]
}
 810637a:	bf00      	nop
 810637c:	371c      	adds	r7, #28
 810637e:	46bd      	mov	sp, r7
 8106380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106384:	4770      	bx	lr
 8106386:	bf00      	nop
 8106388:	40010000 	.word	0x40010000
 810638c:	40010400 	.word	0x40010400
 8106390:	40014000 	.word	0x40014000
 8106394:	40014400 	.word	0x40014400
 8106398:	40014800 	.word	0x40014800

0810639c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810639c:	b480      	push	{r7}
 810639e:	b087      	sub	sp, #28
 81063a0:	af00      	add	r7, sp, #0
 81063a2:	6078      	str	r0, [r7, #4]
 81063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	6a1b      	ldr	r3, [r3, #32]
 81063aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	6a1b      	ldr	r3, [r3, #32]
 81063b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	685b      	ldr	r3, [r3, #4]
 81063bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81063c4:	68fb      	ldr	r3, [r7, #12]
 81063c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81063ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81063d0:	683b      	ldr	r3, [r7, #0]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	68fa      	ldr	r2, [r7, #12]
 81063d6:	4313      	orrs	r3, r2
 81063d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81063da:	693b      	ldr	r3, [r7, #16]
 81063dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81063e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81063e2:	683b      	ldr	r3, [r7, #0]
 81063e4:	689b      	ldr	r3, [r3, #8]
 81063e6:	041b      	lsls	r3, r3, #16
 81063e8:	693a      	ldr	r2, [r7, #16]
 81063ea:	4313      	orrs	r3, r2
 81063ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	4a17      	ldr	r2, [pc, #92]	; (8106450 <TIM_OC5_SetConfig+0xb4>)
 81063f2:	4293      	cmp	r3, r2
 81063f4:	d00f      	beq.n	8106416 <TIM_OC5_SetConfig+0x7a>
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	4a16      	ldr	r2, [pc, #88]	; (8106454 <TIM_OC5_SetConfig+0xb8>)
 81063fa:	4293      	cmp	r3, r2
 81063fc:	d00b      	beq.n	8106416 <TIM_OC5_SetConfig+0x7a>
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	4a15      	ldr	r2, [pc, #84]	; (8106458 <TIM_OC5_SetConfig+0xbc>)
 8106402:	4293      	cmp	r3, r2
 8106404:	d007      	beq.n	8106416 <TIM_OC5_SetConfig+0x7a>
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	4a14      	ldr	r2, [pc, #80]	; (810645c <TIM_OC5_SetConfig+0xc0>)
 810640a:	4293      	cmp	r3, r2
 810640c:	d003      	beq.n	8106416 <TIM_OC5_SetConfig+0x7a>
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	4a13      	ldr	r2, [pc, #76]	; (8106460 <TIM_OC5_SetConfig+0xc4>)
 8106412:	4293      	cmp	r3, r2
 8106414:	d109      	bne.n	810642a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106416:	697b      	ldr	r3, [r7, #20]
 8106418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810641c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810641e:	683b      	ldr	r3, [r7, #0]
 8106420:	695b      	ldr	r3, [r3, #20]
 8106422:	021b      	lsls	r3, r3, #8
 8106424:	697a      	ldr	r2, [r7, #20]
 8106426:	4313      	orrs	r3, r2
 8106428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	697a      	ldr	r2, [r7, #20]
 810642e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	68fa      	ldr	r2, [r7, #12]
 8106434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106436:	683b      	ldr	r3, [r7, #0]
 8106438:	685a      	ldr	r2, [r3, #4]
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	693a      	ldr	r2, [r7, #16]
 8106442:	621a      	str	r2, [r3, #32]
}
 8106444:	bf00      	nop
 8106446:	371c      	adds	r7, #28
 8106448:	46bd      	mov	sp, r7
 810644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810644e:	4770      	bx	lr
 8106450:	40010000 	.word	0x40010000
 8106454:	40010400 	.word	0x40010400
 8106458:	40014000 	.word	0x40014000
 810645c:	40014400 	.word	0x40014400
 8106460:	40014800 	.word	0x40014800

08106464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106464:	b480      	push	{r7}
 8106466:	b087      	sub	sp, #28
 8106468:	af00      	add	r7, sp, #0
 810646a:	6078      	str	r0, [r7, #4]
 810646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	6a1b      	ldr	r3, [r3, #32]
 8106472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	6a1b      	ldr	r3, [r3, #32]
 810647e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	685b      	ldr	r3, [r3, #4]
 8106484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810648c:	68fb      	ldr	r3, [r7, #12]
 810648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106498:	683b      	ldr	r3, [r7, #0]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	021b      	lsls	r3, r3, #8
 810649e:	68fa      	ldr	r2, [r7, #12]
 81064a0:	4313      	orrs	r3, r2
 81064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81064a4:	693b      	ldr	r3, [r7, #16]
 81064a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81064aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81064ac:	683b      	ldr	r3, [r7, #0]
 81064ae:	689b      	ldr	r3, [r3, #8]
 81064b0:	051b      	lsls	r3, r3, #20
 81064b2:	693a      	ldr	r2, [r7, #16]
 81064b4:	4313      	orrs	r3, r2
 81064b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	4a18      	ldr	r2, [pc, #96]	; (810651c <TIM_OC6_SetConfig+0xb8>)
 81064bc:	4293      	cmp	r3, r2
 81064be:	d00f      	beq.n	81064e0 <TIM_OC6_SetConfig+0x7c>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	4a17      	ldr	r2, [pc, #92]	; (8106520 <TIM_OC6_SetConfig+0xbc>)
 81064c4:	4293      	cmp	r3, r2
 81064c6:	d00b      	beq.n	81064e0 <TIM_OC6_SetConfig+0x7c>
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	4a16      	ldr	r2, [pc, #88]	; (8106524 <TIM_OC6_SetConfig+0xc0>)
 81064cc:	4293      	cmp	r3, r2
 81064ce:	d007      	beq.n	81064e0 <TIM_OC6_SetConfig+0x7c>
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	4a15      	ldr	r2, [pc, #84]	; (8106528 <TIM_OC6_SetConfig+0xc4>)
 81064d4:	4293      	cmp	r3, r2
 81064d6:	d003      	beq.n	81064e0 <TIM_OC6_SetConfig+0x7c>
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	4a14      	ldr	r2, [pc, #80]	; (810652c <TIM_OC6_SetConfig+0xc8>)
 81064dc:	4293      	cmp	r3, r2
 81064de:	d109      	bne.n	81064f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81064e0:	697b      	ldr	r3, [r7, #20]
 81064e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81064e8:	683b      	ldr	r3, [r7, #0]
 81064ea:	695b      	ldr	r3, [r3, #20]
 81064ec:	029b      	lsls	r3, r3, #10
 81064ee:	697a      	ldr	r2, [r7, #20]
 81064f0:	4313      	orrs	r3, r2
 81064f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	697a      	ldr	r2, [r7, #20]
 81064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	68fa      	ldr	r2, [r7, #12]
 81064fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106500:	683b      	ldr	r3, [r7, #0]
 8106502:	685a      	ldr	r2, [r3, #4]
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	693a      	ldr	r2, [r7, #16]
 810650c:	621a      	str	r2, [r3, #32]
}
 810650e:	bf00      	nop
 8106510:	371c      	adds	r7, #28
 8106512:	46bd      	mov	sp, r7
 8106514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106518:	4770      	bx	lr
 810651a:	bf00      	nop
 810651c:	40010000 	.word	0x40010000
 8106520:	40010400 	.word	0x40010400
 8106524:	40014000 	.word	0x40014000
 8106528:	40014400 	.word	0x40014400
 810652c:	40014800 	.word	0x40014800

08106530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106530:	b480      	push	{r7}
 8106532:	b087      	sub	sp, #28
 8106534:	af00      	add	r7, sp, #0
 8106536:	60f8      	str	r0, [r7, #12]
 8106538:	60b9      	str	r1, [r7, #8]
 810653a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810653c:	68fb      	ldr	r3, [r7, #12]
 810653e:	6a1b      	ldr	r3, [r3, #32]
 8106540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106542:	68fb      	ldr	r3, [r7, #12]
 8106544:	6a1b      	ldr	r3, [r3, #32]
 8106546:	f023 0201 	bic.w	r2, r3, #1
 810654a:	68fb      	ldr	r3, [r7, #12]
 810654c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810654e:	68fb      	ldr	r3, [r7, #12]
 8106550:	699b      	ldr	r3, [r3, #24]
 8106552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106554:	693b      	ldr	r3, [r7, #16]
 8106556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810655a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	011b      	lsls	r3, r3, #4
 8106560:	693a      	ldr	r2, [r7, #16]
 8106562:	4313      	orrs	r3, r2
 8106564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106566:	697b      	ldr	r3, [r7, #20]
 8106568:	f023 030a 	bic.w	r3, r3, #10
 810656c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810656e:	697a      	ldr	r2, [r7, #20]
 8106570:	68bb      	ldr	r3, [r7, #8]
 8106572:	4313      	orrs	r3, r2
 8106574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8106576:	68fb      	ldr	r3, [r7, #12]
 8106578:	693a      	ldr	r2, [r7, #16]
 810657a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810657c:	68fb      	ldr	r3, [r7, #12]
 810657e:	697a      	ldr	r2, [r7, #20]
 8106580:	621a      	str	r2, [r3, #32]
}
 8106582:	bf00      	nop
 8106584:	371c      	adds	r7, #28
 8106586:	46bd      	mov	sp, r7
 8106588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810658c:	4770      	bx	lr

0810658e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810658e:	b480      	push	{r7}
 8106590:	b087      	sub	sp, #28
 8106592:	af00      	add	r7, sp, #0
 8106594:	60f8      	str	r0, [r7, #12]
 8106596:	60b9      	str	r1, [r7, #8]
 8106598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810659a:	68fb      	ldr	r3, [r7, #12]
 810659c:	6a1b      	ldr	r3, [r3, #32]
 810659e:	f023 0210 	bic.w	r2, r3, #16
 81065a2:	68fb      	ldr	r3, [r7, #12]
 81065a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81065a6:	68fb      	ldr	r3, [r7, #12]
 81065a8:	699b      	ldr	r3, [r3, #24]
 81065aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81065ac:	68fb      	ldr	r3, [r7, #12]
 81065ae:	6a1b      	ldr	r3, [r3, #32]
 81065b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81065b2:	697b      	ldr	r3, [r7, #20]
 81065b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81065b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	031b      	lsls	r3, r3, #12
 81065be:	697a      	ldr	r2, [r7, #20]
 81065c0:	4313      	orrs	r3, r2
 81065c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81065c4:	693b      	ldr	r3, [r7, #16]
 81065c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81065ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81065cc:	68bb      	ldr	r3, [r7, #8]
 81065ce:	011b      	lsls	r3, r3, #4
 81065d0:	693a      	ldr	r2, [r7, #16]
 81065d2:	4313      	orrs	r3, r2
 81065d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81065d6:	68fb      	ldr	r3, [r7, #12]
 81065d8:	697a      	ldr	r2, [r7, #20]
 81065da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81065dc:	68fb      	ldr	r3, [r7, #12]
 81065de:	693a      	ldr	r2, [r7, #16]
 81065e0:	621a      	str	r2, [r3, #32]
}
 81065e2:	bf00      	nop
 81065e4:	371c      	adds	r7, #28
 81065e6:	46bd      	mov	sp, r7
 81065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065ec:	4770      	bx	lr

081065ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81065ee:	b480      	push	{r7}
 81065f0:	b085      	sub	sp, #20
 81065f2:	af00      	add	r7, sp, #0
 81065f4:	6078      	str	r0, [r7, #4]
 81065f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	689b      	ldr	r3, [r3, #8]
 81065fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81065fe:	68fb      	ldr	r3, [r7, #12]
 8106600:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810660a:	683a      	ldr	r2, [r7, #0]
 810660c:	68fb      	ldr	r3, [r7, #12]
 810660e:	4313      	orrs	r3, r2
 8106610:	f043 0307 	orr.w	r3, r3, #7
 8106614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	68fa      	ldr	r2, [r7, #12]
 810661a:	609a      	str	r2, [r3, #8]
}
 810661c:	bf00      	nop
 810661e:	3714      	adds	r7, #20
 8106620:	46bd      	mov	sp, r7
 8106622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106626:	4770      	bx	lr

08106628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8106628:	b480      	push	{r7}
 810662a:	b087      	sub	sp, #28
 810662c:	af00      	add	r7, sp, #0
 810662e:	60f8      	str	r0, [r7, #12]
 8106630:	60b9      	str	r1, [r7, #8]
 8106632:	607a      	str	r2, [r7, #4]
 8106634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8106636:	68fb      	ldr	r3, [r7, #12]
 8106638:	689b      	ldr	r3, [r3, #8]
 810663a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810663c:	697b      	ldr	r3, [r7, #20]
 810663e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106644:	683b      	ldr	r3, [r7, #0]
 8106646:	021a      	lsls	r2, r3, #8
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	431a      	orrs	r2, r3
 810664c:	68bb      	ldr	r3, [r7, #8]
 810664e:	4313      	orrs	r3, r2
 8106650:	697a      	ldr	r2, [r7, #20]
 8106652:	4313      	orrs	r3, r2
 8106654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106656:	68fb      	ldr	r3, [r7, #12]
 8106658:	697a      	ldr	r2, [r7, #20]
 810665a:	609a      	str	r2, [r3, #8]
}
 810665c:	bf00      	nop
 810665e:	371c      	adds	r7, #28
 8106660:	46bd      	mov	sp, r7
 8106662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106666:	4770      	bx	lr

08106668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8106668:	b480      	push	{r7}
 810666a:	b087      	sub	sp, #28
 810666c:	af00      	add	r7, sp, #0
 810666e:	60f8      	str	r0, [r7, #12]
 8106670:	60b9      	str	r1, [r7, #8]
 8106672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8106674:	68bb      	ldr	r3, [r7, #8]
 8106676:	f003 031f 	and.w	r3, r3, #31
 810667a:	2201      	movs	r2, #1
 810667c:	fa02 f303 	lsl.w	r3, r2, r3
 8106680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106682:	68fb      	ldr	r3, [r7, #12]
 8106684:	6a1a      	ldr	r2, [r3, #32]
 8106686:	697b      	ldr	r3, [r7, #20]
 8106688:	43db      	mvns	r3, r3
 810668a:	401a      	ands	r2, r3
 810668c:	68fb      	ldr	r3, [r7, #12]
 810668e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106690:	68fb      	ldr	r3, [r7, #12]
 8106692:	6a1a      	ldr	r2, [r3, #32]
 8106694:	68bb      	ldr	r3, [r7, #8]
 8106696:	f003 031f 	and.w	r3, r3, #31
 810669a:	6879      	ldr	r1, [r7, #4]
 810669c:	fa01 f303 	lsl.w	r3, r1, r3
 81066a0:	431a      	orrs	r2, r3
 81066a2:	68fb      	ldr	r3, [r7, #12]
 81066a4:	621a      	str	r2, [r3, #32]
}
 81066a6:	bf00      	nop
 81066a8:	371c      	adds	r7, #28
 81066aa:	46bd      	mov	sp, r7
 81066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b0:	4770      	bx	lr
	...

081066b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81066b4:	b480      	push	{r7}
 81066b6:	b085      	sub	sp, #20
 81066b8:	af00      	add	r7, sp, #0
 81066ba:	6078      	str	r0, [r7, #4]
 81066bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81066be:	687b      	ldr	r3, [r7, #4]
 81066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81066c4:	2b01      	cmp	r3, #1
 81066c6:	d101      	bne.n	81066cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81066c8:	2302      	movs	r3, #2
 81066ca:	e06d      	b.n	81067a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	2201      	movs	r2, #1
 81066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	2202      	movs	r2, #2
 81066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	681b      	ldr	r3, [r3, #0]
 81066e0:	685b      	ldr	r3, [r3, #4]
 81066e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	689b      	ldr	r3, [r3, #8]
 81066ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	4a30      	ldr	r2, [pc, #192]	; (81067b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81066f2:	4293      	cmp	r3, r2
 81066f4:	d004      	beq.n	8106700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	681b      	ldr	r3, [r3, #0]
 81066fa:	4a2f      	ldr	r2, [pc, #188]	; (81067b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81066fc:	4293      	cmp	r3, r2
 81066fe:	d108      	bne.n	8106712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106700:	68fb      	ldr	r3, [r7, #12]
 8106702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106708:	683b      	ldr	r3, [r7, #0]
 810670a:	685b      	ldr	r3, [r3, #4]
 810670c:	68fa      	ldr	r2, [r7, #12]
 810670e:	4313      	orrs	r3, r2
 8106710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8106712:	68fb      	ldr	r3, [r7, #12]
 8106714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810671a:	683b      	ldr	r3, [r7, #0]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	68fa      	ldr	r2, [r7, #12]
 8106720:	4313      	orrs	r3, r2
 8106722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	681b      	ldr	r3, [r3, #0]
 8106728:	68fa      	ldr	r2, [r7, #12]
 810672a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	681b      	ldr	r3, [r3, #0]
 8106730:	4a20      	ldr	r2, [pc, #128]	; (81067b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106732:	4293      	cmp	r3, r2
 8106734:	d022      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	681b      	ldr	r3, [r3, #0]
 810673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810673e:	d01d      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	681b      	ldr	r3, [r3, #0]
 8106744:	4a1d      	ldr	r2, [pc, #116]	; (81067bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8106746:	4293      	cmp	r3, r2
 8106748:	d018      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	681b      	ldr	r3, [r3, #0]
 810674e:	4a1c      	ldr	r2, [pc, #112]	; (81067c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106750:	4293      	cmp	r3, r2
 8106752:	d013      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	4a1a      	ldr	r2, [pc, #104]	; (81067c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810675a:	4293      	cmp	r3, r2
 810675c:	d00e      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	4a15      	ldr	r2, [pc, #84]	; (81067b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106764:	4293      	cmp	r3, r2
 8106766:	d009      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	4a16      	ldr	r2, [pc, #88]	; (81067c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810676e:	4293      	cmp	r3, r2
 8106770:	d004      	beq.n	810677c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	681b      	ldr	r3, [r3, #0]
 8106776:	4a15      	ldr	r2, [pc, #84]	; (81067cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106778:	4293      	cmp	r3, r2
 810677a:	d10c      	bne.n	8106796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810677c:	68bb      	ldr	r3, [r7, #8]
 810677e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106784:	683b      	ldr	r3, [r7, #0]
 8106786:	689b      	ldr	r3, [r3, #8]
 8106788:	68ba      	ldr	r2, [r7, #8]
 810678a:	4313      	orrs	r3, r2
 810678c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	68ba      	ldr	r2, [r7, #8]
 8106794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	2201      	movs	r2, #1
 810679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	2200      	movs	r2, #0
 81067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81067a6:	2300      	movs	r3, #0
}
 81067a8:	4618      	mov	r0, r3
 81067aa:	3714      	adds	r7, #20
 81067ac:	46bd      	mov	sp, r7
 81067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b2:	4770      	bx	lr
 81067b4:	40010000 	.word	0x40010000
 81067b8:	40010400 	.word	0x40010400
 81067bc:	40000400 	.word	0x40000400
 81067c0:	40000800 	.word	0x40000800
 81067c4:	40000c00 	.word	0x40000c00
 81067c8:	40001800 	.word	0x40001800
 81067cc:	40014000 	.word	0x40014000

081067d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81067d0:	b480      	push	{r7}
 81067d2:	b085      	sub	sp, #20
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	6078      	str	r0, [r7, #4]
 81067d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81067da:	2300      	movs	r3, #0
 81067dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81067e4:	2b01      	cmp	r3, #1
 81067e6:	d101      	bne.n	81067ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81067e8:	2302      	movs	r3, #2
 81067ea:	e065      	b.n	81068b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2201      	movs	r2, #1
 81067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81067f4:	68fb      	ldr	r3, [r7, #12]
 81067f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81067fa:	683b      	ldr	r3, [r7, #0]
 81067fc:	68db      	ldr	r3, [r3, #12]
 81067fe:	4313      	orrs	r3, r2
 8106800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8106802:	68fb      	ldr	r3, [r7, #12]
 8106804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106808:	683b      	ldr	r3, [r7, #0]
 810680a:	689b      	ldr	r3, [r3, #8]
 810680c:	4313      	orrs	r3, r2
 810680e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8106810:	68fb      	ldr	r3, [r7, #12]
 8106812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8106816:	683b      	ldr	r3, [r7, #0]
 8106818:	685b      	ldr	r3, [r3, #4]
 810681a:	4313      	orrs	r3, r2
 810681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810681e:	68fb      	ldr	r3, [r7, #12]
 8106820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8106824:	683b      	ldr	r3, [r7, #0]
 8106826:	681b      	ldr	r3, [r3, #0]
 8106828:	4313      	orrs	r3, r2
 810682a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810682c:	68fb      	ldr	r3, [r7, #12]
 810682e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106832:	683b      	ldr	r3, [r7, #0]
 8106834:	691b      	ldr	r3, [r3, #16]
 8106836:	4313      	orrs	r3, r2
 8106838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810683a:	68fb      	ldr	r3, [r7, #12]
 810683c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8106840:	683b      	ldr	r3, [r7, #0]
 8106842:	695b      	ldr	r3, [r3, #20]
 8106844:	4313      	orrs	r3, r2
 8106846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8106848:	68fb      	ldr	r3, [r7, #12]
 810684a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810684e:	683b      	ldr	r3, [r7, #0]
 8106850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106852:	4313      	orrs	r3, r2
 8106854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8106856:	68fb      	ldr	r3, [r7, #12]
 8106858:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810685c:	683b      	ldr	r3, [r7, #0]
 810685e:	699b      	ldr	r3, [r3, #24]
 8106860:	041b      	lsls	r3, r3, #16
 8106862:	4313      	orrs	r3, r2
 8106864:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	4a16      	ldr	r2, [pc, #88]	; (81068c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810686c:	4293      	cmp	r3, r2
 810686e:	d004      	beq.n	810687a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	4a14      	ldr	r2, [pc, #80]	; (81068c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8106876:	4293      	cmp	r3, r2
 8106878:	d115      	bne.n	81068a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810687a:	68fb      	ldr	r3, [r7, #12]
 810687c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8106880:	683b      	ldr	r3, [r7, #0]
 8106882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106884:	051b      	lsls	r3, r3, #20
 8106886:	4313      	orrs	r3, r2
 8106888:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810688a:	68fb      	ldr	r3, [r7, #12]
 810688c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106890:	683b      	ldr	r3, [r7, #0]
 8106892:	69db      	ldr	r3, [r3, #28]
 8106894:	4313      	orrs	r3, r2
 8106896:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8106898:	68fb      	ldr	r3, [r7, #12]
 810689a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810689e:	683b      	ldr	r3, [r7, #0]
 81068a0:	6a1b      	ldr	r3, [r3, #32]
 81068a2:	4313      	orrs	r3, r2
 81068a4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81068a6:	687b      	ldr	r3, [r7, #4]
 81068a8:	681b      	ldr	r3, [r3, #0]
 81068aa:	68fa      	ldr	r2, [r7, #12]
 81068ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 81068ae:	687b      	ldr	r3, [r7, #4]
 81068b0:	2200      	movs	r2, #0
 81068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81068b6:	2300      	movs	r3, #0
}
 81068b8:	4618      	mov	r0, r3
 81068ba:	3714      	adds	r7, #20
 81068bc:	46bd      	mov	sp, r7
 81068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068c2:	4770      	bx	lr
 81068c4:	40010000 	.word	0x40010000
 81068c8:	40010400 	.word	0x40010400

081068cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81068cc:	b580      	push	{r7, lr}
 81068ce:	b082      	sub	sp, #8
 81068d0:	af00      	add	r7, sp, #0
 81068d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2b00      	cmp	r3, #0
 81068d8:	d101      	bne.n	81068de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81068da:	2301      	movs	r3, #1
 81068dc:	e042      	b.n	8106964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81068e4:	2b00      	cmp	r3, #0
 81068e6:	d106      	bne.n	81068f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	2200      	movs	r2, #0
 81068ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81068f0:	6878      	ldr	r0, [r7, #4]
 81068f2:	f7fb fc3d 	bl	8102170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	2224      	movs	r2, #36	; 0x24
 81068fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	681a      	ldr	r2, [r3, #0]
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	681b      	ldr	r3, [r3, #0]
 8106908:	f022 0201 	bic.w	r2, r2, #1
 810690c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810690e:	6878      	ldr	r0, [r7, #4]
 8106910:	f000 f8c2 	bl	8106a98 <UART_SetConfig>
 8106914:	4603      	mov	r3, r0
 8106916:	2b01      	cmp	r3, #1
 8106918:	d101      	bne.n	810691e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810691a:	2301      	movs	r3, #1
 810691c:	e022      	b.n	8106964 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106922:	2b00      	cmp	r3, #0
 8106924:	d002      	beq.n	810692c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8106926:	6878      	ldr	r0, [r7, #4]
 8106928:	f000 fe1e 	bl	8107568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810692c:	687b      	ldr	r3, [r7, #4]
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	685a      	ldr	r2, [r3, #4]
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	681b      	ldr	r3, [r3, #0]
 8106936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810693a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	689a      	ldr	r2, [r3, #8]
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	681b      	ldr	r3, [r3, #0]
 8106946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810694a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	681a      	ldr	r2, [r3, #0]
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	681b      	ldr	r3, [r3, #0]
 8106956:	f042 0201 	orr.w	r2, r2, #1
 810695a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810695c:	6878      	ldr	r0, [r7, #4]
 810695e:	f000 fea5 	bl	81076ac <UART_CheckIdleState>
 8106962:	4603      	mov	r3, r0
}
 8106964:	4618      	mov	r0, r3
 8106966:	3708      	adds	r7, #8
 8106968:	46bd      	mov	sp, r7
 810696a:	bd80      	pop	{r7, pc}

0810696c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810696c:	b580      	push	{r7, lr}
 810696e:	b08a      	sub	sp, #40	; 0x28
 8106970:	af02      	add	r7, sp, #8
 8106972:	60f8      	str	r0, [r7, #12]
 8106974:	60b9      	str	r1, [r7, #8]
 8106976:	603b      	str	r3, [r7, #0]
 8106978:	4613      	mov	r3, r2
 810697a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810697c:	68fb      	ldr	r3, [r7, #12]
 810697e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106982:	2b20      	cmp	r3, #32
 8106984:	f040 8083 	bne.w	8106a8e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8106988:	68bb      	ldr	r3, [r7, #8]
 810698a:	2b00      	cmp	r3, #0
 810698c:	d002      	beq.n	8106994 <HAL_UART_Transmit+0x28>
 810698e:	88fb      	ldrh	r3, [r7, #6]
 8106990:	2b00      	cmp	r3, #0
 8106992:	d101      	bne.n	8106998 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8106994:	2301      	movs	r3, #1
 8106996:	e07b      	b.n	8106a90 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8106998:	68fb      	ldr	r3, [r7, #12]
 810699a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810699e:	2b01      	cmp	r3, #1
 81069a0:	d101      	bne.n	81069a6 <HAL_UART_Transmit+0x3a>
 81069a2:	2302      	movs	r3, #2
 81069a4:	e074      	b.n	8106a90 <HAL_UART_Transmit+0x124>
 81069a6:	68fb      	ldr	r3, [r7, #12]
 81069a8:	2201      	movs	r2, #1
 81069aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81069ae:	68fb      	ldr	r3, [r7, #12]
 81069b0:	2200      	movs	r2, #0
 81069b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81069b6:	68fb      	ldr	r3, [r7, #12]
 81069b8:	2221      	movs	r2, #33	; 0x21
 81069ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81069be:	f7fb fdff 	bl	81025c0 <HAL_GetTick>
 81069c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81069c4:	68fb      	ldr	r3, [r7, #12]
 81069c6:	88fa      	ldrh	r2, [r7, #6]
 81069c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81069cc:	68fb      	ldr	r3, [r7, #12]
 81069ce:	88fa      	ldrh	r2, [r7, #6]
 81069d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81069d4:	68fb      	ldr	r3, [r7, #12]
 81069d6:	689b      	ldr	r3, [r3, #8]
 81069d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81069dc:	d108      	bne.n	81069f0 <HAL_UART_Transmit+0x84>
 81069de:	68fb      	ldr	r3, [r7, #12]
 81069e0:	691b      	ldr	r3, [r3, #16]
 81069e2:	2b00      	cmp	r3, #0
 81069e4:	d104      	bne.n	81069f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81069e6:	2300      	movs	r3, #0
 81069e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81069ea:	68bb      	ldr	r3, [r7, #8]
 81069ec:	61bb      	str	r3, [r7, #24]
 81069ee:	e003      	b.n	81069f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81069f0:	68bb      	ldr	r3, [r7, #8]
 81069f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81069f4:	2300      	movs	r3, #0
 81069f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81069f8:	68fb      	ldr	r3, [r7, #12]
 81069fa:	2200      	movs	r2, #0
 81069fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8106a00:	e02c      	b.n	8106a5c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106a02:	683b      	ldr	r3, [r7, #0]
 8106a04:	9300      	str	r3, [sp, #0]
 8106a06:	697b      	ldr	r3, [r7, #20]
 8106a08:	2200      	movs	r2, #0
 8106a0a:	2180      	movs	r1, #128	; 0x80
 8106a0c:	68f8      	ldr	r0, [r7, #12]
 8106a0e:	f000 fe98 	bl	8107742 <UART_WaitOnFlagUntilTimeout>
 8106a12:	4603      	mov	r3, r0
 8106a14:	2b00      	cmp	r3, #0
 8106a16:	d001      	beq.n	8106a1c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8106a18:	2303      	movs	r3, #3
 8106a1a:	e039      	b.n	8106a90 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8106a1c:	69fb      	ldr	r3, [r7, #28]
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d10b      	bne.n	8106a3a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106a22:	69bb      	ldr	r3, [r7, #24]
 8106a24:	881b      	ldrh	r3, [r3, #0]
 8106a26:	461a      	mov	r2, r3
 8106a28:	68fb      	ldr	r3, [r7, #12]
 8106a2a:	681b      	ldr	r3, [r3, #0]
 8106a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106a30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8106a32:	69bb      	ldr	r3, [r7, #24]
 8106a34:	3302      	adds	r3, #2
 8106a36:	61bb      	str	r3, [r7, #24]
 8106a38:	e007      	b.n	8106a4a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106a3a:	69fb      	ldr	r3, [r7, #28]
 8106a3c:	781a      	ldrb	r2, [r3, #0]
 8106a3e:	68fb      	ldr	r3, [r7, #12]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8106a44:	69fb      	ldr	r3, [r7, #28]
 8106a46:	3301      	adds	r3, #1
 8106a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106a4a:	68fb      	ldr	r3, [r7, #12]
 8106a4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106a50:	b29b      	uxth	r3, r3
 8106a52:	3b01      	subs	r3, #1
 8106a54:	b29a      	uxth	r2, r3
 8106a56:	68fb      	ldr	r3, [r7, #12]
 8106a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8106a5c:	68fb      	ldr	r3, [r7, #12]
 8106a5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106a62:	b29b      	uxth	r3, r3
 8106a64:	2b00      	cmp	r3, #0
 8106a66:	d1cc      	bne.n	8106a02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106a68:	683b      	ldr	r3, [r7, #0]
 8106a6a:	9300      	str	r3, [sp, #0]
 8106a6c:	697b      	ldr	r3, [r7, #20]
 8106a6e:	2200      	movs	r2, #0
 8106a70:	2140      	movs	r1, #64	; 0x40
 8106a72:	68f8      	ldr	r0, [r7, #12]
 8106a74:	f000 fe65 	bl	8107742 <UART_WaitOnFlagUntilTimeout>
 8106a78:	4603      	mov	r3, r0
 8106a7a:	2b00      	cmp	r3, #0
 8106a7c:	d001      	beq.n	8106a82 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8106a7e:	2303      	movs	r3, #3
 8106a80:	e006      	b.n	8106a90 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106a82:	68fb      	ldr	r3, [r7, #12]
 8106a84:	2220      	movs	r2, #32
 8106a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8106a8a:	2300      	movs	r3, #0
 8106a8c:	e000      	b.n	8106a90 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8106a8e:	2302      	movs	r3, #2
  }
}
 8106a90:	4618      	mov	r0, r3
 8106a92:	3720      	adds	r7, #32
 8106a94:	46bd      	mov	sp, r7
 8106a96:	bd80      	pop	{r7, pc}

08106a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106a9c:	b092      	sub	sp, #72	; 0x48
 8106a9e:	af00      	add	r7, sp, #0
 8106aa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106aa2:	2300      	movs	r3, #0
 8106aa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106aa8:	697b      	ldr	r3, [r7, #20]
 8106aaa:	689a      	ldr	r2, [r3, #8]
 8106aac:	697b      	ldr	r3, [r7, #20]
 8106aae:	691b      	ldr	r3, [r3, #16]
 8106ab0:	431a      	orrs	r2, r3
 8106ab2:	697b      	ldr	r3, [r7, #20]
 8106ab4:	695b      	ldr	r3, [r3, #20]
 8106ab6:	431a      	orrs	r2, r3
 8106ab8:	697b      	ldr	r3, [r7, #20]
 8106aba:	69db      	ldr	r3, [r3, #28]
 8106abc:	4313      	orrs	r3, r2
 8106abe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106ac0:	697b      	ldr	r3, [r7, #20]
 8106ac2:	681b      	ldr	r3, [r3, #0]
 8106ac4:	681a      	ldr	r2, [r3, #0]
 8106ac6:	4bbd      	ldr	r3, [pc, #756]	; (8106dbc <UART_SetConfig+0x324>)
 8106ac8:	4013      	ands	r3, r2
 8106aca:	697a      	ldr	r2, [r7, #20]
 8106acc:	6812      	ldr	r2, [r2, #0]
 8106ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106ad0:	430b      	orrs	r3, r1
 8106ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106ad4:	697b      	ldr	r3, [r7, #20]
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	685b      	ldr	r3, [r3, #4]
 8106ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106ade:	697b      	ldr	r3, [r7, #20]
 8106ae0:	68da      	ldr	r2, [r3, #12]
 8106ae2:	697b      	ldr	r3, [r7, #20]
 8106ae4:	681b      	ldr	r3, [r3, #0]
 8106ae6:	430a      	orrs	r2, r1
 8106ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106aea:	697b      	ldr	r3, [r7, #20]
 8106aec:	699b      	ldr	r3, [r3, #24]
 8106aee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106af0:	697b      	ldr	r3, [r7, #20]
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	4ab2      	ldr	r2, [pc, #712]	; (8106dc0 <UART_SetConfig+0x328>)
 8106af6:	4293      	cmp	r3, r2
 8106af8:	d004      	beq.n	8106b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106afa:	697b      	ldr	r3, [r7, #20]
 8106afc:	6a1b      	ldr	r3, [r3, #32]
 8106afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106b00:	4313      	orrs	r3, r2
 8106b02:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106b04:	697b      	ldr	r3, [r7, #20]
 8106b06:	681b      	ldr	r3, [r3, #0]
 8106b08:	689b      	ldr	r3, [r3, #8]
 8106b0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8106b0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106b12:	697a      	ldr	r2, [r7, #20]
 8106b14:	6812      	ldr	r2, [r2, #0]
 8106b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106b18:	430b      	orrs	r3, r1
 8106b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106b1c:	697b      	ldr	r3, [r7, #20]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b22:	f023 010f 	bic.w	r1, r3, #15
 8106b26:	697b      	ldr	r3, [r7, #20]
 8106b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106b2a:	697b      	ldr	r3, [r7, #20]
 8106b2c:	681b      	ldr	r3, [r3, #0]
 8106b2e:	430a      	orrs	r2, r1
 8106b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106b32:	697b      	ldr	r3, [r7, #20]
 8106b34:	681b      	ldr	r3, [r3, #0]
 8106b36:	4aa3      	ldr	r2, [pc, #652]	; (8106dc4 <UART_SetConfig+0x32c>)
 8106b38:	4293      	cmp	r3, r2
 8106b3a:	d177      	bne.n	8106c2c <UART_SetConfig+0x194>
 8106b3c:	4ba2      	ldr	r3, [pc, #648]	; (8106dc8 <UART_SetConfig+0x330>)
 8106b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106b44:	2b28      	cmp	r3, #40	; 0x28
 8106b46:	d86d      	bhi.n	8106c24 <UART_SetConfig+0x18c>
 8106b48:	a201      	add	r2, pc, #4	; (adr r2, 8106b50 <UART_SetConfig+0xb8>)
 8106b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b4e:	bf00      	nop
 8106b50:	08106bf5 	.word	0x08106bf5
 8106b54:	08106c25 	.word	0x08106c25
 8106b58:	08106c25 	.word	0x08106c25
 8106b5c:	08106c25 	.word	0x08106c25
 8106b60:	08106c25 	.word	0x08106c25
 8106b64:	08106c25 	.word	0x08106c25
 8106b68:	08106c25 	.word	0x08106c25
 8106b6c:	08106c25 	.word	0x08106c25
 8106b70:	08106bfd 	.word	0x08106bfd
 8106b74:	08106c25 	.word	0x08106c25
 8106b78:	08106c25 	.word	0x08106c25
 8106b7c:	08106c25 	.word	0x08106c25
 8106b80:	08106c25 	.word	0x08106c25
 8106b84:	08106c25 	.word	0x08106c25
 8106b88:	08106c25 	.word	0x08106c25
 8106b8c:	08106c25 	.word	0x08106c25
 8106b90:	08106c05 	.word	0x08106c05
 8106b94:	08106c25 	.word	0x08106c25
 8106b98:	08106c25 	.word	0x08106c25
 8106b9c:	08106c25 	.word	0x08106c25
 8106ba0:	08106c25 	.word	0x08106c25
 8106ba4:	08106c25 	.word	0x08106c25
 8106ba8:	08106c25 	.word	0x08106c25
 8106bac:	08106c25 	.word	0x08106c25
 8106bb0:	08106c0d 	.word	0x08106c0d
 8106bb4:	08106c25 	.word	0x08106c25
 8106bb8:	08106c25 	.word	0x08106c25
 8106bbc:	08106c25 	.word	0x08106c25
 8106bc0:	08106c25 	.word	0x08106c25
 8106bc4:	08106c25 	.word	0x08106c25
 8106bc8:	08106c25 	.word	0x08106c25
 8106bcc:	08106c25 	.word	0x08106c25
 8106bd0:	08106c15 	.word	0x08106c15
 8106bd4:	08106c25 	.word	0x08106c25
 8106bd8:	08106c25 	.word	0x08106c25
 8106bdc:	08106c25 	.word	0x08106c25
 8106be0:	08106c25 	.word	0x08106c25
 8106be4:	08106c25 	.word	0x08106c25
 8106be8:	08106c25 	.word	0x08106c25
 8106bec:	08106c25 	.word	0x08106c25
 8106bf0:	08106c1d 	.word	0x08106c1d
 8106bf4:	2301      	movs	r3, #1
 8106bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106bfa:	e220      	b.n	810703e <UART_SetConfig+0x5a6>
 8106bfc:	2304      	movs	r3, #4
 8106bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c02:	e21c      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c04:	2308      	movs	r3, #8
 8106c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c0a:	e218      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c0c:	2310      	movs	r3, #16
 8106c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c12:	e214      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c14:	2320      	movs	r3, #32
 8106c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c1a:	e210      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c1c:	2340      	movs	r3, #64	; 0x40
 8106c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c22:	e20c      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c24:	2380      	movs	r3, #128	; 0x80
 8106c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c2a:	e208      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c2c:	697b      	ldr	r3, [r7, #20]
 8106c2e:	681b      	ldr	r3, [r3, #0]
 8106c30:	4a66      	ldr	r2, [pc, #408]	; (8106dcc <UART_SetConfig+0x334>)
 8106c32:	4293      	cmp	r3, r2
 8106c34:	d130      	bne.n	8106c98 <UART_SetConfig+0x200>
 8106c36:	4b64      	ldr	r3, [pc, #400]	; (8106dc8 <UART_SetConfig+0x330>)
 8106c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c3a:	f003 0307 	and.w	r3, r3, #7
 8106c3e:	2b05      	cmp	r3, #5
 8106c40:	d826      	bhi.n	8106c90 <UART_SetConfig+0x1f8>
 8106c42:	a201      	add	r2, pc, #4	; (adr r2, 8106c48 <UART_SetConfig+0x1b0>)
 8106c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c48:	08106c61 	.word	0x08106c61
 8106c4c:	08106c69 	.word	0x08106c69
 8106c50:	08106c71 	.word	0x08106c71
 8106c54:	08106c79 	.word	0x08106c79
 8106c58:	08106c81 	.word	0x08106c81
 8106c5c:	08106c89 	.word	0x08106c89
 8106c60:	2300      	movs	r3, #0
 8106c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c66:	e1ea      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c68:	2304      	movs	r3, #4
 8106c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c6e:	e1e6      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c70:	2308      	movs	r3, #8
 8106c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c76:	e1e2      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c78:	2310      	movs	r3, #16
 8106c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c7e:	e1de      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c80:	2320      	movs	r3, #32
 8106c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c86:	e1da      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c88:	2340      	movs	r3, #64	; 0x40
 8106c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c8e:	e1d6      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c90:	2380      	movs	r3, #128	; 0x80
 8106c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106c96:	e1d2      	b.n	810703e <UART_SetConfig+0x5a6>
 8106c98:	697b      	ldr	r3, [r7, #20]
 8106c9a:	681b      	ldr	r3, [r3, #0]
 8106c9c:	4a4c      	ldr	r2, [pc, #304]	; (8106dd0 <UART_SetConfig+0x338>)
 8106c9e:	4293      	cmp	r3, r2
 8106ca0:	d130      	bne.n	8106d04 <UART_SetConfig+0x26c>
 8106ca2:	4b49      	ldr	r3, [pc, #292]	; (8106dc8 <UART_SetConfig+0x330>)
 8106ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ca6:	f003 0307 	and.w	r3, r3, #7
 8106caa:	2b05      	cmp	r3, #5
 8106cac:	d826      	bhi.n	8106cfc <UART_SetConfig+0x264>
 8106cae:	a201      	add	r2, pc, #4	; (adr r2, 8106cb4 <UART_SetConfig+0x21c>)
 8106cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cb4:	08106ccd 	.word	0x08106ccd
 8106cb8:	08106cd5 	.word	0x08106cd5
 8106cbc:	08106cdd 	.word	0x08106cdd
 8106cc0:	08106ce5 	.word	0x08106ce5
 8106cc4:	08106ced 	.word	0x08106ced
 8106cc8:	08106cf5 	.word	0x08106cf5
 8106ccc:	2300      	movs	r3, #0
 8106cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cd2:	e1b4      	b.n	810703e <UART_SetConfig+0x5a6>
 8106cd4:	2304      	movs	r3, #4
 8106cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cda:	e1b0      	b.n	810703e <UART_SetConfig+0x5a6>
 8106cdc:	2308      	movs	r3, #8
 8106cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106ce2:	e1ac      	b.n	810703e <UART_SetConfig+0x5a6>
 8106ce4:	2310      	movs	r3, #16
 8106ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cea:	e1a8      	b.n	810703e <UART_SetConfig+0x5a6>
 8106cec:	2320      	movs	r3, #32
 8106cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cf2:	e1a4      	b.n	810703e <UART_SetConfig+0x5a6>
 8106cf4:	2340      	movs	r3, #64	; 0x40
 8106cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106cfa:	e1a0      	b.n	810703e <UART_SetConfig+0x5a6>
 8106cfc:	2380      	movs	r3, #128	; 0x80
 8106cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d02:	e19c      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d04:	697b      	ldr	r3, [r7, #20]
 8106d06:	681b      	ldr	r3, [r3, #0]
 8106d08:	4a32      	ldr	r2, [pc, #200]	; (8106dd4 <UART_SetConfig+0x33c>)
 8106d0a:	4293      	cmp	r3, r2
 8106d0c:	d130      	bne.n	8106d70 <UART_SetConfig+0x2d8>
 8106d0e:	4b2e      	ldr	r3, [pc, #184]	; (8106dc8 <UART_SetConfig+0x330>)
 8106d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106d12:	f003 0307 	and.w	r3, r3, #7
 8106d16:	2b05      	cmp	r3, #5
 8106d18:	d826      	bhi.n	8106d68 <UART_SetConfig+0x2d0>
 8106d1a:	a201      	add	r2, pc, #4	; (adr r2, 8106d20 <UART_SetConfig+0x288>)
 8106d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d20:	08106d39 	.word	0x08106d39
 8106d24:	08106d41 	.word	0x08106d41
 8106d28:	08106d49 	.word	0x08106d49
 8106d2c:	08106d51 	.word	0x08106d51
 8106d30:	08106d59 	.word	0x08106d59
 8106d34:	08106d61 	.word	0x08106d61
 8106d38:	2300      	movs	r3, #0
 8106d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d3e:	e17e      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d40:	2304      	movs	r3, #4
 8106d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d46:	e17a      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d48:	2308      	movs	r3, #8
 8106d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d4e:	e176      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d50:	2310      	movs	r3, #16
 8106d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d56:	e172      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d58:	2320      	movs	r3, #32
 8106d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d5e:	e16e      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d60:	2340      	movs	r3, #64	; 0x40
 8106d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d66:	e16a      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d68:	2380      	movs	r3, #128	; 0x80
 8106d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106d6e:	e166      	b.n	810703e <UART_SetConfig+0x5a6>
 8106d70:	697b      	ldr	r3, [r7, #20]
 8106d72:	681b      	ldr	r3, [r3, #0]
 8106d74:	4a18      	ldr	r2, [pc, #96]	; (8106dd8 <UART_SetConfig+0x340>)
 8106d76:	4293      	cmp	r3, r2
 8106d78:	d140      	bne.n	8106dfc <UART_SetConfig+0x364>
 8106d7a:	4b13      	ldr	r3, [pc, #76]	; (8106dc8 <UART_SetConfig+0x330>)
 8106d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106d7e:	f003 0307 	and.w	r3, r3, #7
 8106d82:	2b05      	cmp	r3, #5
 8106d84:	d836      	bhi.n	8106df4 <UART_SetConfig+0x35c>
 8106d86:	a201      	add	r2, pc, #4	; (adr r2, 8106d8c <UART_SetConfig+0x2f4>)
 8106d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d8c:	08106da5 	.word	0x08106da5
 8106d90:	08106dad 	.word	0x08106dad
 8106d94:	08106db5 	.word	0x08106db5
 8106d98:	08106ddd 	.word	0x08106ddd
 8106d9c:	08106de5 	.word	0x08106de5
 8106da0:	08106ded 	.word	0x08106ded
 8106da4:	2300      	movs	r3, #0
 8106da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106daa:	e148      	b.n	810703e <UART_SetConfig+0x5a6>
 8106dac:	2304      	movs	r3, #4
 8106dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106db2:	e144      	b.n	810703e <UART_SetConfig+0x5a6>
 8106db4:	2308      	movs	r3, #8
 8106db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106dba:	e140      	b.n	810703e <UART_SetConfig+0x5a6>
 8106dbc:	cfff69f3 	.word	0xcfff69f3
 8106dc0:	58000c00 	.word	0x58000c00
 8106dc4:	40011000 	.word	0x40011000
 8106dc8:	58024400 	.word	0x58024400
 8106dcc:	40004400 	.word	0x40004400
 8106dd0:	40004800 	.word	0x40004800
 8106dd4:	40004c00 	.word	0x40004c00
 8106dd8:	40005000 	.word	0x40005000
 8106ddc:	2310      	movs	r3, #16
 8106dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106de2:	e12c      	b.n	810703e <UART_SetConfig+0x5a6>
 8106de4:	2320      	movs	r3, #32
 8106de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106dea:	e128      	b.n	810703e <UART_SetConfig+0x5a6>
 8106dec:	2340      	movs	r3, #64	; 0x40
 8106dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106df2:	e124      	b.n	810703e <UART_SetConfig+0x5a6>
 8106df4:	2380      	movs	r3, #128	; 0x80
 8106df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106dfa:	e120      	b.n	810703e <UART_SetConfig+0x5a6>
 8106dfc:	697b      	ldr	r3, [r7, #20]
 8106dfe:	681b      	ldr	r3, [r3, #0]
 8106e00:	4acb      	ldr	r2, [pc, #812]	; (8107130 <UART_SetConfig+0x698>)
 8106e02:	4293      	cmp	r3, r2
 8106e04:	d176      	bne.n	8106ef4 <UART_SetConfig+0x45c>
 8106e06:	4bcb      	ldr	r3, [pc, #812]	; (8107134 <UART_SetConfig+0x69c>)
 8106e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106e0e:	2b28      	cmp	r3, #40	; 0x28
 8106e10:	d86c      	bhi.n	8106eec <UART_SetConfig+0x454>
 8106e12:	a201      	add	r2, pc, #4	; (adr r2, 8106e18 <UART_SetConfig+0x380>)
 8106e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e18:	08106ebd 	.word	0x08106ebd
 8106e1c:	08106eed 	.word	0x08106eed
 8106e20:	08106eed 	.word	0x08106eed
 8106e24:	08106eed 	.word	0x08106eed
 8106e28:	08106eed 	.word	0x08106eed
 8106e2c:	08106eed 	.word	0x08106eed
 8106e30:	08106eed 	.word	0x08106eed
 8106e34:	08106eed 	.word	0x08106eed
 8106e38:	08106ec5 	.word	0x08106ec5
 8106e3c:	08106eed 	.word	0x08106eed
 8106e40:	08106eed 	.word	0x08106eed
 8106e44:	08106eed 	.word	0x08106eed
 8106e48:	08106eed 	.word	0x08106eed
 8106e4c:	08106eed 	.word	0x08106eed
 8106e50:	08106eed 	.word	0x08106eed
 8106e54:	08106eed 	.word	0x08106eed
 8106e58:	08106ecd 	.word	0x08106ecd
 8106e5c:	08106eed 	.word	0x08106eed
 8106e60:	08106eed 	.word	0x08106eed
 8106e64:	08106eed 	.word	0x08106eed
 8106e68:	08106eed 	.word	0x08106eed
 8106e6c:	08106eed 	.word	0x08106eed
 8106e70:	08106eed 	.word	0x08106eed
 8106e74:	08106eed 	.word	0x08106eed
 8106e78:	08106ed5 	.word	0x08106ed5
 8106e7c:	08106eed 	.word	0x08106eed
 8106e80:	08106eed 	.word	0x08106eed
 8106e84:	08106eed 	.word	0x08106eed
 8106e88:	08106eed 	.word	0x08106eed
 8106e8c:	08106eed 	.word	0x08106eed
 8106e90:	08106eed 	.word	0x08106eed
 8106e94:	08106eed 	.word	0x08106eed
 8106e98:	08106edd 	.word	0x08106edd
 8106e9c:	08106eed 	.word	0x08106eed
 8106ea0:	08106eed 	.word	0x08106eed
 8106ea4:	08106eed 	.word	0x08106eed
 8106ea8:	08106eed 	.word	0x08106eed
 8106eac:	08106eed 	.word	0x08106eed
 8106eb0:	08106eed 	.word	0x08106eed
 8106eb4:	08106eed 	.word	0x08106eed
 8106eb8:	08106ee5 	.word	0x08106ee5
 8106ebc:	2301      	movs	r3, #1
 8106ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106ec2:	e0bc      	b.n	810703e <UART_SetConfig+0x5a6>
 8106ec4:	2304      	movs	r3, #4
 8106ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106eca:	e0b8      	b.n	810703e <UART_SetConfig+0x5a6>
 8106ecc:	2308      	movs	r3, #8
 8106ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106ed2:	e0b4      	b.n	810703e <UART_SetConfig+0x5a6>
 8106ed4:	2310      	movs	r3, #16
 8106ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106eda:	e0b0      	b.n	810703e <UART_SetConfig+0x5a6>
 8106edc:	2320      	movs	r3, #32
 8106ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106ee2:	e0ac      	b.n	810703e <UART_SetConfig+0x5a6>
 8106ee4:	2340      	movs	r3, #64	; 0x40
 8106ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106eea:	e0a8      	b.n	810703e <UART_SetConfig+0x5a6>
 8106eec:	2380      	movs	r3, #128	; 0x80
 8106eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106ef2:	e0a4      	b.n	810703e <UART_SetConfig+0x5a6>
 8106ef4:	697b      	ldr	r3, [r7, #20]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	4a8f      	ldr	r2, [pc, #572]	; (8107138 <UART_SetConfig+0x6a0>)
 8106efa:	4293      	cmp	r3, r2
 8106efc:	d130      	bne.n	8106f60 <UART_SetConfig+0x4c8>
 8106efe:	4b8d      	ldr	r3, [pc, #564]	; (8107134 <UART_SetConfig+0x69c>)
 8106f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f02:	f003 0307 	and.w	r3, r3, #7
 8106f06:	2b05      	cmp	r3, #5
 8106f08:	d826      	bhi.n	8106f58 <UART_SetConfig+0x4c0>
 8106f0a:	a201      	add	r2, pc, #4	; (adr r2, 8106f10 <UART_SetConfig+0x478>)
 8106f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f10:	08106f29 	.word	0x08106f29
 8106f14:	08106f31 	.word	0x08106f31
 8106f18:	08106f39 	.word	0x08106f39
 8106f1c:	08106f41 	.word	0x08106f41
 8106f20:	08106f49 	.word	0x08106f49
 8106f24:	08106f51 	.word	0x08106f51
 8106f28:	2300      	movs	r3, #0
 8106f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f2e:	e086      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f30:	2304      	movs	r3, #4
 8106f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f36:	e082      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f38:	2308      	movs	r3, #8
 8106f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f3e:	e07e      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f40:	2310      	movs	r3, #16
 8106f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f46:	e07a      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f48:	2320      	movs	r3, #32
 8106f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f4e:	e076      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f50:	2340      	movs	r3, #64	; 0x40
 8106f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f56:	e072      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f58:	2380      	movs	r3, #128	; 0x80
 8106f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f5e:	e06e      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f60:	697b      	ldr	r3, [r7, #20]
 8106f62:	681b      	ldr	r3, [r3, #0]
 8106f64:	4a75      	ldr	r2, [pc, #468]	; (810713c <UART_SetConfig+0x6a4>)
 8106f66:	4293      	cmp	r3, r2
 8106f68:	d130      	bne.n	8106fcc <UART_SetConfig+0x534>
 8106f6a:	4b72      	ldr	r3, [pc, #456]	; (8107134 <UART_SetConfig+0x69c>)
 8106f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f6e:	f003 0307 	and.w	r3, r3, #7
 8106f72:	2b05      	cmp	r3, #5
 8106f74:	d826      	bhi.n	8106fc4 <UART_SetConfig+0x52c>
 8106f76:	a201      	add	r2, pc, #4	; (adr r2, 8106f7c <UART_SetConfig+0x4e4>)
 8106f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f7c:	08106f95 	.word	0x08106f95
 8106f80:	08106f9d 	.word	0x08106f9d
 8106f84:	08106fa5 	.word	0x08106fa5
 8106f88:	08106fad 	.word	0x08106fad
 8106f8c:	08106fb5 	.word	0x08106fb5
 8106f90:	08106fbd 	.word	0x08106fbd
 8106f94:	2300      	movs	r3, #0
 8106f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106f9a:	e050      	b.n	810703e <UART_SetConfig+0x5a6>
 8106f9c:	2304      	movs	r3, #4
 8106f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106fa2:	e04c      	b.n	810703e <UART_SetConfig+0x5a6>
 8106fa4:	2308      	movs	r3, #8
 8106fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106faa:	e048      	b.n	810703e <UART_SetConfig+0x5a6>
 8106fac:	2310      	movs	r3, #16
 8106fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106fb2:	e044      	b.n	810703e <UART_SetConfig+0x5a6>
 8106fb4:	2320      	movs	r3, #32
 8106fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106fba:	e040      	b.n	810703e <UART_SetConfig+0x5a6>
 8106fbc:	2340      	movs	r3, #64	; 0x40
 8106fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106fc2:	e03c      	b.n	810703e <UART_SetConfig+0x5a6>
 8106fc4:	2380      	movs	r3, #128	; 0x80
 8106fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106fca:	e038      	b.n	810703e <UART_SetConfig+0x5a6>
 8106fcc:	697b      	ldr	r3, [r7, #20]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	4a5b      	ldr	r2, [pc, #364]	; (8107140 <UART_SetConfig+0x6a8>)
 8106fd2:	4293      	cmp	r3, r2
 8106fd4:	d130      	bne.n	8107038 <UART_SetConfig+0x5a0>
 8106fd6:	4b57      	ldr	r3, [pc, #348]	; (8107134 <UART_SetConfig+0x69c>)
 8106fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106fda:	f003 0307 	and.w	r3, r3, #7
 8106fde:	2b05      	cmp	r3, #5
 8106fe0:	d826      	bhi.n	8107030 <UART_SetConfig+0x598>
 8106fe2:	a201      	add	r2, pc, #4	; (adr r2, 8106fe8 <UART_SetConfig+0x550>)
 8106fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106fe8:	08107001 	.word	0x08107001
 8106fec:	08107009 	.word	0x08107009
 8106ff0:	08107011 	.word	0x08107011
 8106ff4:	08107019 	.word	0x08107019
 8106ff8:	08107021 	.word	0x08107021
 8106ffc:	08107029 	.word	0x08107029
 8107000:	2302      	movs	r3, #2
 8107002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107006:	e01a      	b.n	810703e <UART_SetConfig+0x5a6>
 8107008:	2304      	movs	r3, #4
 810700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810700e:	e016      	b.n	810703e <UART_SetConfig+0x5a6>
 8107010:	2308      	movs	r3, #8
 8107012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107016:	e012      	b.n	810703e <UART_SetConfig+0x5a6>
 8107018:	2310      	movs	r3, #16
 810701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810701e:	e00e      	b.n	810703e <UART_SetConfig+0x5a6>
 8107020:	2320      	movs	r3, #32
 8107022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107026:	e00a      	b.n	810703e <UART_SetConfig+0x5a6>
 8107028:	2340      	movs	r3, #64	; 0x40
 810702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810702e:	e006      	b.n	810703e <UART_SetConfig+0x5a6>
 8107030:	2380      	movs	r3, #128	; 0x80
 8107032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107036:	e002      	b.n	810703e <UART_SetConfig+0x5a6>
 8107038:	2380      	movs	r3, #128	; 0x80
 810703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810703e:	697b      	ldr	r3, [r7, #20]
 8107040:	681b      	ldr	r3, [r3, #0]
 8107042:	4a3f      	ldr	r2, [pc, #252]	; (8107140 <UART_SetConfig+0x6a8>)
 8107044:	4293      	cmp	r3, r2
 8107046:	f040 80f8 	bne.w	810723a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810704a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810704e:	2b20      	cmp	r3, #32
 8107050:	dc46      	bgt.n	81070e0 <UART_SetConfig+0x648>
 8107052:	2b02      	cmp	r3, #2
 8107054:	f2c0 8082 	blt.w	810715c <UART_SetConfig+0x6c4>
 8107058:	3b02      	subs	r3, #2
 810705a:	2b1e      	cmp	r3, #30
 810705c:	d87e      	bhi.n	810715c <UART_SetConfig+0x6c4>
 810705e:	a201      	add	r2, pc, #4	; (adr r2, 8107064 <UART_SetConfig+0x5cc>)
 8107060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107064:	081070e7 	.word	0x081070e7
 8107068:	0810715d 	.word	0x0810715d
 810706c:	081070ef 	.word	0x081070ef
 8107070:	0810715d 	.word	0x0810715d
 8107074:	0810715d 	.word	0x0810715d
 8107078:	0810715d 	.word	0x0810715d
 810707c:	081070ff 	.word	0x081070ff
 8107080:	0810715d 	.word	0x0810715d
 8107084:	0810715d 	.word	0x0810715d
 8107088:	0810715d 	.word	0x0810715d
 810708c:	0810715d 	.word	0x0810715d
 8107090:	0810715d 	.word	0x0810715d
 8107094:	0810715d 	.word	0x0810715d
 8107098:	0810715d 	.word	0x0810715d
 810709c:	0810710f 	.word	0x0810710f
 81070a0:	0810715d 	.word	0x0810715d
 81070a4:	0810715d 	.word	0x0810715d
 81070a8:	0810715d 	.word	0x0810715d
 81070ac:	0810715d 	.word	0x0810715d
 81070b0:	0810715d 	.word	0x0810715d
 81070b4:	0810715d 	.word	0x0810715d
 81070b8:	0810715d 	.word	0x0810715d
 81070bc:	0810715d 	.word	0x0810715d
 81070c0:	0810715d 	.word	0x0810715d
 81070c4:	0810715d 	.word	0x0810715d
 81070c8:	0810715d 	.word	0x0810715d
 81070cc:	0810715d 	.word	0x0810715d
 81070d0:	0810715d 	.word	0x0810715d
 81070d4:	0810715d 	.word	0x0810715d
 81070d8:	0810715d 	.word	0x0810715d
 81070dc:	0810714f 	.word	0x0810714f
 81070e0:	2b40      	cmp	r3, #64	; 0x40
 81070e2:	d037      	beq.n	8107154 <UART_SetConfig+0x6bc>
 81070e4:	e03a      	b.n	810715c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81070e6:	f7fd fe19 	bl	8104d1c <HAL_RCCEx_GetD3PCLK1Freq>
 81070ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81070ec:	e03c      	b.n	8107168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81070ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81070f2:	4618      	mov	r0, r3
 81070f4:	f7fd fe28 	bl	8104d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81070fc:	e034      	b.n	8107168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81070fe:	f107 0318 	add.w	r3, r7, #24
 8107102:	4618      	mov	r0, r3
 8107104:	f7fd ff74 	bl	8104ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107108:	69fb      	ldr	r3, [r7, #28]
 810710a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810710c:	e02c      	b.n	8107168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810710e:	4b09      	ldr	r3, [pc, #36]	; (8107134 <UART_SetConfig+0x69c>)
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	f003 0320 	and.w	r3, r3, #32
 8107116:	2b00      	cmp	r3, #0
 8107118:	d016      	beq.n	8107148 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810711a:	4b06      	ldr	r3, [pc, #24]	; (8107134 <UART_SetConfig+0x69c>)
 810711c:	681b      	ldr	r3, [r3, #0]
 810711e:	08db      	lsrs	r3, r3, #3
 8107120:	f003 0303 	and.w	r3, r3, #3
 8107124:	4a07      	ldr	r2, [pc, #28]	; (8107144 <UART_SetConfig+0x6ac>)
 8107126:	fa22 f303 	lsr.w	r3, r2, r3
 810712a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810712c:	e01c      	b.n	8107168 <UART_SetConfig+0x6d0>
 810712e:	bf00      	nop
 8107130:	40011400 	.word	0x40011400
 8107134:	58024400 	.word	0x58024400
 8107138:	40007800 	.word	0x40007800
 810713c:	40007c00 	.word	0x40007c00
 8107140:	58000c00 	.word	0x58000c00
 8107144:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107148:	4b9d      	ldr	r3, [pc, #628]	; (81073c0 <UART_SetConfig+0x928>)
 810714a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810714c:	e00c      	b.n	8107168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810714e:	4b9d      	ldr	r3, [pc, #628]	; (81073c4 <UART_SetConfig+0x92c>)
 8107150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107152:	e009      	b.n	8107168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810715a:	e005      	b.n	8107168 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810715c:	2300      	movs	r3, #0
 810715e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107160:	2301      	movs	r3, #1
 8107162:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107166:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810716a:	2b00      	cmp	r3, #0
 810716c:	f000 81de 	beq.w	810752c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107170:	697b      	ldr	r3, [r7, #20]
 8107172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107174:	4a94      	ldr	r2, [pc, #592]	; (81073c8 <UART_SetConfig+0x930>)
 8107176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810717a:	461a      	mov	r2, r3
 810717c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810717e:	fbb3 f3f2 	udiv	r3, r3, r2
 8107182:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107184:	697b      	ldr	r3, [r7, #20]
 8107186:	685a      	ldr	r2, [r3, #4]
 8107188:	4613      	mov	r3, r2
 810718a:	005b      	lsls	r3, r3, #1
 810718c:	4413      	add	r3, r2
 810718e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107190:	429a      	cmp	r2, r3
 8107192:	d305      	bcc.n	81071a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107194:	697b      	ldr	r3, [r7, #20]
 8107196:	685b      	ldr	r3, [r3, #4]
 8107198:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810719a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810719c:	429a      	cmp	r2, r3
 810719e:	d903      	bls.n	81071a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81071a0:	2301      	movs	r3, #1
 81071a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81071a6:	e1c1      	b.n	810752c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81071aa:	2200      	movs	r2, #0
 81071ac:	60bb      	str	r3, [r7, #8]
 81071ae:	60fa      	str	r2, [r7, #12]
 81071b0:	697b      	ldr	r3, [r7, #20]
 81071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81071b4:	4a84      	ldr	r2, [pc, #528]	; (81073c8 <UART_SetConfig+0x930>)
 81071b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81071ba:	b29b      	uxth	r3, r3
 81071bc:	2200      	movs	r2, #0
 81071be:	603b      	str	r3, [r7, #0]
 81071c0:	607a      	str	r2, [r7, #4]
 81071c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81071c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81071ca:	f7f9 fde5 	bl	8100d98 <__aeabi_uldivmod>
 81071ce:	4602      	mov	r2, r0
 81071d0:	460b      	mov	r3, r1
 81071d2:	4610      	mov	r0, r2
 81071d4:	4619      	mov	r1, r3
 81071d6:	f04f 0200 	mov.w	r2, #0
 81071da:	f04f 0300 	mov.w	r3, #0
 81071de:	020b      	lsls	r3, r1, #8
 81071e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81071e4:	0202      	lsls	r2, r0, #8
 81071e6:	6979      	ldr	r1, [r7, #20]
 81071e8:	6849      	ldr	r1, [r1, #4]
 81071ea:	0849      	lsrs	r1, r1, #1
 81071ec:	2000      	movs	r0, #0
 81071ee:	460c      	mov	r4, r1
 81071f0:	4605      	mov	r5, r0
 81071f2:	eb12 0804 	adds.w	r8, r2, r4
 81071f6:	eb43 0905 	adc.w	r9, r3, r5
 81071fa:	697b      	ldr	r3, [r7, #20]
 81071fc:	685b      	ldr	r3, [r3, #4]
 81071fe:	2200      	movs	r2, #0
 8107200:	469a      	mov	sl, r3
 8107202:	4693      	mov	fp, r2
 8107204:	4652      	mov	r2, sl
 8107206:	465b      	mov	r3, fp
 8107208:	4640      	mov	r0, r8
 810720a:	4649      	mov	r1, r9
 810720c:	f7f9 fdc4 	bl	8100d98 <__aeabi_uldivmod>
 8107210:	4602      	mov	r2, r0
 8107212:	460b      	mov	r3, r1
 8107214:	4613      	mov	r3, r2
 8107216:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810721a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810721e:	d308      	bcc.n	8107232 <UART_SetConfig+0x79a>
 8107220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107226:	d204      	bcs.n	8107232 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107228:	697b      	ldr	r3, [r7, #20]
 810722a:	681b      	ldr	r3, [r3, #0]
 810722c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810722e:	60da      	str	r2, [r3, #12]
 8107230:	e17c      	b.n	810752c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8107232:	2301      	movs	r3, #1
 8107234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107238:	e178      	b.n	810752c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810723a:	697b      	ldr	r3, [r7, #20]
 810723c:	69db      	ldr	r3, [r3, #28]
 810723e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107242:	f040 80c5 	bne.w	81073d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107246:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810724a:	2b20      	cmp	r3, #32
 810724c:	dc48      	bgt.n	81072e0 <UART_SetConfig+0x848>
 810724e:	2b00      	cmp	r3, #0
 8107250:	db7b      	blt.n	810734a <UART_SetConfig+0x8b2>
 8107252:	2b20      	cmp	r3, #32
 8107254:	d879      	bhi.n	810734a <UART_SetConfig+0x8b2>
 8107256:	a201      	add	r2, pc, #4	; (adr r2, 810725c <UART_SetConfig+0x7c4>)
 8107258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810725c:	081072e7 	.word	0x081072e7
 8107260:	081072ef 	.word	0x081072ef
 8107264:	0810734b 	.word	0x0810734b
 8107268:	0810734b 	.word	0x0810734b
 810726c:	081072f7 	.word	0x081072f7
 8107270:	0810734b 	.word	0x0810734b
 8107274:	0810734b 	.word	0x0810734b
 8107278:	0810734b 	.word	0x0810734b
 810727c:	08107307 	.word	0x08107307
 8107280:	0810734b 	.word	0x0810734b
 8107284:	0810734b 	.word	0x0810734b
 8107288:	0810734b 	.word	0x0810734b
 810728c:	0810734b 	.word	0x0810734b
 8107290:	0810734b 	.word	0x0810734b
 8107294:	0810734b 	.word	0x0810734b
 8107298:	0810734b 	.word	0x0810734b
 810729c:	08107317 	.word	0x08107317
 81072a0:	0810734b 	.word	0x0810734b
 81072a4:	0810734b 	.word	0x0810734b
 81072a8:	0810734b 	.word	0x0810734b
 81072ac:	0810734b 	.word	0x0810734b
 81072b0:	0810734b 	.word	0x0810734b
 81072b4:	0810734b 	.word	0x0810734b
 81072b8:	0810734b 	.word	0x0810734b
 81072bc:	0810734b 	.word	0x0810734b
 81072c0:	0810734b 	.word	0x0810734b
 81072c4:	0810734b 	.word	0x0810734b
 81072c8:	0810734b 	.word	0x0810734b
 81072cc:	0810734b 	.word	0x0810734b
 81072d0:	0810734b 	.word	0x0810734b
 81072d4:	0810734b 	.word	0x0810734b
 81072d8:	0810734b 	.word	0x0810734b
 81072dc:	0810733d 	.word	0x0810733d
 81072e0:	2b40      	cmp	r3, #64	; 0x40
 81072e2:	d02e      	beq.n	8107342 <UART_SetConfig+0x8aa>
 81072e4:	e031      	b.n	810734a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81072e6:	f7fc fda7 	bl	8103e38 <HAL_RCC_GetPCLK1Freq>
 81072ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81072ec:	e033      	b.n	8107356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81072ee:	f7fc fdb9 	bl	8103e64 <HAL_RCC_GetPCLK2Freq>
 81072f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81072f4:	e02f      	b.n	8107356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81072f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81072fa:	4618      	mov	r0, r3
 81072fc:	f7fd fd24 	bl	8104d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107304:	e027      	b.n	8107356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107306:	f107 0318 	add.w	r3, r7, #24
 810730a:	4618      	mov	r0, r3
 810730c:	f7fd fe70 	bl	8104ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107310:	69fb      	ldr	r3, [r7, #28]
 8107312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107314:	e01f      	b.n	8107356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107316:	4b2d      	ldr	r3, [pc, #180]	; (81073cc <UART_SetConfig+0x934>)
 8107318:	681b      	ldr	r3, [r3, #0]
 810731a:	f003 0320 	and.w	r3, r3, #32
 810731e:	2b00      	cmp	r3, #0
 8107320:	d009      	beq.n	8107336 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107322:	4b2a      	ldr	r3, [pc, #168]	; (81073cc <UART_SetConfig+0x934>)
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	08db      	lsrs	r3, r3, #3
 8107328:	f003 0303 	and.w	r3, r3, #3
 810732c:	4a24      	ldr	r2, [pc, #144]	; (81073c0 <UART_SetConfig+0x928>)
 810732e:	fa22 f303 	lsr.w	r3, r2, r3
 8107332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107334:	e00f      	b.n	8107356 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107336:	4b22      	ldr	r3, [pc, #136]	; (81073c0 <UART_SetConfig+0x928>)
 8107338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810733a:	e00c      	b.n	8107356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810733c:	4b21      	ldr	r3, [pc, #132]	; (81073c4 <UART_SetConfig+0x92c>)
 810733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107340:	e009      	b.n	8107356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107348:	e005      	b.n	8107356 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810734a:	2300      	movs	r3, #0
 810734c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810734e:	2301      	movs	r3, #1
 8107350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107358:	2b00      	cmp	r3, #0
 810735a:	f000 80e7 	beq.w	810752c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810735e:	697b      	ldr	r3, [r7, #20]
 8107360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107362:	4a19      	ldr	r2, [pc, #100]	; (81073c8 <UART_SetConfig+0x930>)
 8107364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107368:	461a      	mov	r2, r3
 810736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810736c:	fbb3 f3f2 	udiv	r3, r3, r2
 8107370:	005a      	lsls	r2, r3, #1
 8107372:	697b      	ldr	r3, [r7, #20]
 8107374:	685b      	ldr	r3, [r3, #4]
 8107376:	085b      	lsrs	r3, r3, #1
 8107378:	441a      	add	r2, r3
 810737a:	697b      	ldr	r3, [r7, #20]
 810737c:	685b      	ldr	r3, [r3, #4]
 810737e:	fbb2 f3f3 	udiv	r3, r2, r3
 8107382:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107386:	2b0f      	cmp	r3, #15
 8107388:	d916      	bls.n	81073b8 <UART_SetConfig+0x920>
 810738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810738c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107390:	d212      	bcs.n	81073b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107394:	b29b      	uxth	r3, r3
 8107396:	f023 030f 	bic.w	r3, r3, #15
 810739a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810739e:	085b      	lsrs	r3, r3, #1
 81073a0:	b29b      	uxth	r3, r3
 81073a2:	f003 0307 	and.w	r3, r3, #7
 81073a6:	b29a      	uxth	r2, r3
 81073a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81073aa:	4313      	orrs	r3, r2
 81073ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81073ae:	697b      	ldr	r3, [r7, #20]
 81073b0:	681b      	ldr	r3, [r3, #0]
 81073b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81073b4:	60da      	str	r2, [r3, #12]
 81073b6:	e0b9      	b.n	810752c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81073b8:	2301      	movs	r3, #1
 81073ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81073be:	e0b5      	b.n	810752c <UART_SetConfig+0xa94>
 81073c0:	03d09000 	.word	0x03d09000
 81073c4:	003d0900 	.word	0x003d0900
 81073c8:	0810c634 	.word	0x0810c634
 81073cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81073d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81073d4:	2b20      	cmp	r3, #32
 81073d6:	dc49      	bgt.n	810746c <UART_SetConfig+0x9d4>
 81073d8:	2b00      	cmp	r3, #0
 81073da:	db7c      	blt.n	81074d6 <UART_SetConfig+0xa3e>
 81073dc:	2b20      	cmp	r3, #32
 81073de:	d87a      	bhi.n	81074d6 <UART_SetConfig+0xa3e>
 81073e0:	a201      	add	r2, pc, #4	; (adr r2, 81073e8 <UART_SetConfig+0x950>)
 81073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81073e6:	bf00      	nop
 81073e8:	08107473 	.word	0x08107473
 81073ec:	0810747b 	.word	0x0810747b
 81073f0:	081074d7 	.word	0x081074d7
 81073f4:	081074d7 	.word	0x081074d7
 81073f8:	08107483 	.word	0x08107483
 81073fc:	081074d7 	.word	0x081074d7
 8107400:	081074d7 	.word	0x081074d7
 8107404:	081074d7 	.word	0x081074d7
 8107408:	08107493 	.word	0x08107493
 810740c:	081074d7 	.word	0x081074d7
 8107410:	081074d7 	.word	0x081074d7
 8107414:	081074d7 	.word	0x081074d7
 8107418:	081074d7 	.word	0x081074d7
 810741c:	081074d7 	.word	0x081074d7
 8107420:	081074d7 	.word	0x081074d7
 8107424:	081074d7 	.word	0x081074d7
 8107428:	081074a3 	.word	0x081074a3
 810742c:	081074d7 	.word	0x081074d7
 8107430:	081074d7 	.word	0x081074d7
 8107434:	081074d7 	.word	0x081074d7
 8107438:	081074d7 	.word	0x081074d7
 810743c:	081074d7 	.word	0x081074d7
 8107440:	081074d7 	.word	0x081074d7
 8107444:	081074d7 	.word	0x081074d7
 8107448:	081074d7 	.word	0x081074d7
 810744c:	081074d7 	.word	0x081074d7
 8107450:	081074d7 	.word	0x081074d7
 8107454:	081074d7 	.word	0x081074d7
 8107458:	081074d7 	.word	0x081074d7
 810745c:	081074d7 	.word	0x081074d7
 8107460:	081074d7 	.word	0x081074d7
 8107464:	081074d7 	.word	0x081074d7
 8107468:	081074c9 	.word	0x081074c9
 810746c:	2b40      	cmp	r3, #64	; 0x40
 810746e:	d02e      	beq.n	81074ce <UART_SetConfig+0xa36>
 8107470:	e031      	b.n	81074d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107472:	f7fc fce1 	bl	8103e38 <HAL_RCC_GetPCLK1Freq>
 8107476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107478:	e033      	b.n	81074e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810747a:	f7fc fcf3 	bl	8103e64 <HAL_RCC_GetPCLK2Freq>
 810747e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107480:	e02f      	b.n	81074e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107486:	4618      	mov	r0, r3
 8107488:	f7fd fc5e 	bl	8104d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810748e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107490:	e027      	b.n	81074e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107492:	f107 0318 	add.w	r3, r7, #24
 8107496:	4618      	mov	r0, r3
 8107498:	f7fd fdaa 	bl	8104ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810749c:	69fb      	ldr	r3, [r7, #28]
 810749e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074a0:	e01f      	b.n	81074e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81074a2:	4b2d      	ldr	r3, [pc, #180]	; (8107558 <UART_SetConfig+0xac0>)
 81074a4:	681b      	ldr	r3, [r3, #0]
 81074a6:	f003 0320 	and.w	r3, r3, #32
 81074aa:	2b00      	cmp	r3, #0
 81074ac:	d009      	beq.n	81074c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81074ae:	4b2a      	ldr	r3, [pc, #168]	; (8107558 <UART_SetConfig+0xac0>)
 81074b0:	681b      	ldr	r3, [r3, #0]
 81074b2:	08db      	lsrs	r3, r3, #3
 81074b4:	f003 0303 	and.w	r3, r3, #3
 81074b8:	4a28      	ldr	r2, [pc, #160]	; (810755c <UART_SetConfig+0xac4>)
 81074ba:	fa22 f303 	lsr.w	r3, r2, r3
 81074be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81074c0:	e00f      	b.n	81074e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81074c2:	4b26      	ldr	r3, [pc, #152]	; (810755c <UART_SetConfig+0xac4>)
 81074c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074c6:	e00c      	b.n	81074e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81074c8:	4b25      	ldr	r3, [pc, #148]	; (8107560 <UART_SetConfig+0xac8>)
 81074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074cc:	e009      	b.n	81074e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074d4:	e005      	b.n	81074e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81074d6:	2300      	movs	r3, #0
 81074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81074da:	2301      	movs	r3, #1
 81074dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81074e0:	bf00      	nop
    }

    if (pclk != 0U)
 81074e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81074e4:	2b00      	cmp	r3, #0
 81074e6:	d021      	beq.n	810752c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81074e8:	697b      	ldr	r3, [r7, #20]
 81074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81074ec:	4a1d      	ldr	r2, [pc, #116]	; (8107564 <UART_SetConfig+0xacc>)
 81074ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81074f2:	461a      	mov	r2, r3
 81074f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81074f6:	fbb3 f2f2 	udiv	r2, r3, r2
 81074fa:	697b      	ldr	r3, [r7, #20]
 81074fc:	685b      	ldr	r3, [r3, #4]
 81074fe:	085b      	lsrs	r3, r3, #1
 8107500:	441a      	add	r2, r3
 8107502:	697b      	ldr	r3, [r7, #20]
 8107504:	685b      	ldr	r3, [r3, #4]
 8107506:	fbb2 f3f3 	udiv	r3, r2, r3
 810750a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810750e:	2b0f      	cmp	r3, #15
 8107510:	d909      	bls.n	8107526 <UART_SetConfig+0xa8e>
 8107512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107518:	d205      	bcs.n	8107526 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810751c:	b29a      	uxth	r2, r3
 810751e:	697b      	ldr	r3, [r7, #20]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	60da      	str	r2, [r3, #12]
 8107524:	e002      	b.n	810752c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107526:	2301      	movs	r3, #1
 8107528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810752c:	697b      	ldr	r3, [r7, #20]
 810752e:	2201      	movs	r2, #1
 8107530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107534:	697b      	ldr	r3, [r7, #20]
 8107536:	2201      	movs	r2, #1
 8107538:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810753c:	697b      	ldr	r3, [r7, #20]
 810753e:	2200      	movs	r2, #0
 8107540:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107542:	697b      	ldr	r3, [r7, #20]
 8107544:	2200      	movs	r2, #0
 8107546:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107548:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810754c:	4618      	mov	r0, r3
 810754e:	3748      	adds	r7, #72	; 0x48
 8107550:	46bd      	mov	sp, r7
 8107552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107556:	bf00      	nop
 8107558:	58024400 	.word	0x58024400
 810755c:	03d09000 	.word	0x03d09000
 8107560:	003d0900 	.word	0x003d0900
 8107564:	0810c634 	.word	0x0810c634

08107568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107568:	b480      	push	{r7}
 810756a:	b083      	sub	sp, #12
 810756c:	af00      	add	r7, sp, #0
 810756e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107574:	f003 0301 	and.w	r3, r3, #1
 8107578:	2b00      	cmp	r3, #0
 810757a:	d00a      	beq.n	8107592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	681b      	ldr	r3, [r3, #0]
 8107580:	685b      	ldr	r3, [r3, #4]
 8107582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	681b      	ldr	r3, [r3, #0]
 810758e:	430a      	orrs	r2, r1
 8107590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107596:	f003 0302 	and.w	r3, r3, #2
 810759a:	2b00      	cmp	r3, #0
 810759c:	d00a      	beq.n	81075b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810759e:	687b      	ldr	r3, [r7, #4]
 81075a0:	681b      	ldr	r3, [r3, #0]
 81075a2:	685b      	ldr	r3, [r3, #4]
 81075a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81075a8:	687b      	ldr	r3, [r7, #4]
 81075aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	430a      	orrs	r2, r1
 81075b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81075b4:	687b      	ldr	r3, [r7, #4]
 81075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81075b8:	f003 0304 	and.w	r3, r3, #4
 81075bc:	2b00      	cmp	r3, #0
 81075be:	d00a      	beq.n	81075d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	685b      	ldr	r3, [r3, #4]
 81075c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	681b      	ldr	r3, [r3, #0]
 81075d2:	430a      	orrs	r2, r1
 81075d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81075da:	f003 0308 	and.w	r3, r3, #8
 81075de:	2b00      	cmp	r3, #0
 81075e0:	d00a      	beq.n	81075f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	685b      	ldr	r3, [r3, #4]
 81075e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	681b      	ldr	r3, [r3, #0]
 81075f4:	430a      	orrs	r2, r1
 81075f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81075fc:	f003 0310 	and.w	r3, r3, #16
 8107600:	2b00      	cmp	r3, #0
 8107602:	d00a      	beq.n	810761a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	689b      	ldr	r3, [r3, #8]
 810760a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	430a      	orrs	r2, r1
 8107618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810761a:	687b      	ldr	r3, [r7, #4]
 810761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810761e:	f003 0320 	and.w	r3, r3, #32
 8107622:	2b00      	cmp	r3, #0
 8107624:	d00a      	beq.n	810763c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	681b      	ldr	r3, [r3, #0]
 810762a:	689b      	ldr	r3, [r3, #8]
 810762c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107630:	687b      	ldr	r3, [r7, #4]
 8107632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	430a      	orrs	r2, r1
 810763a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107644:	2b00      	cmp	r3, #0
 8107646:	d01a      	beq.n	810767e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	681b      	ldr	r3, [r3, #0]
 810764c:	685b      	ldr	r3, [r3, #4]
 810764e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	681b      	ldr	r3, [r3, #0]
 810765a:	430a      	orrs	r2, r1
 810765c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107666:	d10a      	bne.n	810767e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	681b      	ldr	r3, [r3, #0]
 810766c:	685b      	ldr	r3, [r3, #4]
 810766e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	681b      	ldr	r3, [r3, #0]
 810767a:	430a      	orrs	r2, r1
 810767c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107686:	2b00      	cmp	r3, #0
 8107688:	d00a      	beq.n	81076a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	681b      	ldr	r3, [r3, #0]
 810768e:	685b      	ldr	r3, [r3, #4]
 8107690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107698:	687b      	ldr	r3, [r7, #4]
 810769a:	681b      	ldr	r3, [r3, #0]
 810769c:	430a      	orrs	r2, r1
 810769e:	605a      	str	r2, [r3, #4]
  }
}
 81076a0:	bf00      	nop
 81076a2:	370c      	adds	r7, #12
 81076a4:	46bd      	mov	sp, r7
 81076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076aa:	4770      	bx	lr

081076ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81076ac:	b580      	push	{r7, lr}
 81076ae:	b086      	sub	sp, #24
 81076b0:	af02      	add	r7, sp, #8
 81076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81076b4:	687b      	ldr	r3, [r7, #4]
 81076b6:	2200      	movs	r2, #0
 81076b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81076bc:	f7fa ff80 	bl	81025c0 <HAL_GetTick>
 81076c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	f003 0308 	and.w	r3, r3, #8
 81076cc:	2b08      	cmp	r3, #8
 81076ce:	d10e      	bne.n	81076ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81076d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81076d4:	9300      	str	r3, [sp, #0]
 81076d6:	68fb      	ldr	r3, [r7, #12]
 81076d8:	2200      	movs	r2, #0
 81076da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81076de:	6878      	ldr	r0, [r7, #4]
 81076e0:	f000 f82f 	bl	8107742 <UART_WaitOnFlagUntilTimeout>
 81076e4:	4603      	mov	r3, r0
 81076e6:	2b00      	cmp	r3, #0
 81076e8:	d001      	beq.n	81076ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81076ea:	2303      	movs	r3, #3
 81076ec:	e025      	b.n	810773a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81076ee:	687b      	ldr	r3, [r7, #4]
 81076f0:	681b      	ldr	r3, [r3, #0]
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	f003 0304 	and.w	r3, r3, #4
 81076f8:	2b04      	cmp	r3, #4
 81076fa:	d10e      	bne.n	810771a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81076fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107700:	9300      	str	r3, [sp, #0]
 8107702:	68fb      	ldr	r3, [r7, #12]
 8107704:	2200      	movs	r2, #0
 8107706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810770a:	6878      	ldr	r0, [r7, #4]
 810770c:	f000 f819 	bl	8107742 <UART_WaitOnFlagUntilTimeout>
 8107710:	4603      	mov	r3, r0
 8107712:	2b00      	cmp	r3, #0
 8107714:	d001      	beq.n	810771a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107716:	2303      	movs	r3, #3
 8107718:	e00f      	b.n	810773a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	2220      	movs	r2, #32
 810771e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107722:	687b      	ldr	r3, [r7, #4]
 8107724:	2220      	movs	r2, #32
 8107726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810772a:	687b      	ldr	r3, [r7, #4]
 810772c:	2200      	movs	r2, #0
 810772e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	2200      	movs	r2, #0
 8107734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107738:	2300      	movs	r3, #0
}
 810773a:	4618      	mov	r0, r3
 810773c:	3710      	adds	r7, #16
 810773e:	46bd      	mov	sp, r7
 8107740:	bd80      	pop	{r7, pc}

08107742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107742:	b580      	push	{r7, lr}
 8107744:	b09c      	sub	sp, #112	; 0x70
 8107746:	af00      	add	r7, sp, #0
 8107748:	60f8      	str	r0, [r7, #12]
 810774a:	60b9      	str	r1, [r7, #8]
 810774c:	603b      	str	r3, [r7, #0]
 810774e:	4613      	mov	r3, r2
 8107750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107752:	e0a9      	b.n	81078a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107756:	f1b3 3fff 	cmp.w	r3, #4294967295
 810775a:	f000 80a5 	beq.w	81078a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810775e:	f7fa ff2f 	bl	81025c0 <HAL_GetTick>
 8107762:	4602      	mov	r2, r0
 8107764:	683b      	ldr	r3, [r7, #0]
 8107766:	1ad3      	subs	r3, r2, r3
 8107768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810776a:	429a      	cmp	r2, r3
 810776c:	d302      	bcc.n	8107774 <UART_WaitOnFlagUntilTimeout+0x32>
 810776e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107770:	2b00      	cmp	r3, #0
 8107772:	d140      	bne.n	81077f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107774:	68fb      	ldr	r3, [r7, #12]
 8107776:	681b      	ldr	r3, [r3, #0]
 8107778:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810777a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810777c:	e853 3f00 	ldrex	r3, [r3]
 8107780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107788:	667b      	str	r3, [r7, #100]	; 0x64
 810778a:	68fb      	ldr	r3, [r7, #12]
 810778c:	681b      	ldr	r3, [r3, #0]
 810778e:	461a      	mov	r2, r3
 8107790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107794:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810779a:	e841 2300 	strex	r3, r2, [r1]
 810779e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 81077a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81077a2:	2b00      	cmp	r3, #0
 81077a4:	d1e6      	bne.n	8107774 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81077a6:	68fb      	ldr	r3, [r7, #12]
 81077a8:	681b      	ldr	r3, [r3, #0]
 81077aa:	3308      	adds	r3, #8
 81077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81077b0:	e853 3f00 	ldrex	r3, [r3]
 81077b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077b8:	f023 0301 	bic.w	r3, r3, #1
 81077bc:	663b      	str	r3, [r7, #96]	; 0x60
 81077be:	68fb      	ldr	r3, [r7, #12]
 81077c0:	681b      	ldr	r3, [r3, #0]
 81077c2:	3308      	adds	r3, #8
 81077c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81077c6:	64ba      	str	r2, [r7, #72]	; 0x48
 81077c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81077ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81077cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81077ce:	e841 2300 	strex	r3, r2, [r1]
 81077d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81077d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81077d6:	2b00      	cmp	r3, #0
 81077d8:	d1e5      	bne.n	81077a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81077da:	68fb      	ldr	r3, [r7, #12]
 81077dc:	2220      	movs	r2, #32
 81077de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81077e2:	68fb      	ldr	r3, [r7, #12]
 81077e4:	2220      	movs	r2, #32
 81077e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81077ea:	68fb      	ldr	r3, [r7, #12]
 81077ec:	2200      	movs	r2, #0
 81077ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81077f2:	2303      	movs	r3, #3
 81077f4:	e069      	b.n	81078ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81077f6:	68fb      	ldr	r3, [r7, #12]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	681b      	ldr	r3, [r3, #0]
 81077fc:	f003 0304 	and.w	r3, r3, #4
 8107800:	2b00      	cmp	r3, #0
 8107802:	d051      	beq.n	81078a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107804:	68fb      	ldr	r3, [r7, #12]
 8107806:	681b      	ldr	r3, [r3, #0]
 8107808:	69db      	ldr	r3, [r3, #28]
 810780a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810780e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107812:	d149      	bne.n	81078a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107814:	68fb      	ldr	r3, [r7, #12]
 8107816:	681b      	ldr	r3, [r3, #0]
 8107818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810781c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810781e:	68fb      	ldr	r3, [r7, #12]
 8107820:	681b      	ldr	r3, [r3, #0]
 8107822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107826:	e853 3f00 	ldrex	r3, [r3]
 810782a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810782e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107834:	68fb      	ldr	r3, [r7, #12]
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	461a      	mov	r2, r3
 810783a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810783c:	637b      	str	r3, [r7, #52]	; 0x34
 810783e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107844:	e841 2300 	strex	r3, r2, [r1]
 8107848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810784c:	2b00      	cmp	r3, #0
 810784e:	d1e6      	bne.n	810781e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107850:	68fb      	ldr	r3, [r7, #12]
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	3308      	adds	r3, #8
 8107856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107858:	697b      	ldr	r3, [r7, #20]
 810785a:	e853 3f00 	ldrex	r3, [r3]
 810785e:	613b      	str	r3, [r7, #16]
   return(result);
 8107860:	693b      	ldr	r3, [r7, #16]
 8107862:	f023 0301 	bic.w	r3, r3, #1
 8107866:	66bb      	str	r3, [r7, #104]	; 0x68
 8107868:	68fb      	ldr	r3, [r7, #12]
 810786a:	681b      	ldr	r3, [r3, #0]
 810786c:	3308      	adds	r3, #8
 810786e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107870:	623a      	str	r2, [r7, #32]
 8107872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107874:	69f9      	ldr	r1, [r7, #28]
 8107876:	6a3a      	ldr	r2, [r7, #32]
 8107878:	e841 2300 	strex	r3, r2, [r1]
 810787c:	61bb      	str	r3, [r7, #24]
   return(result);
 810787e:	69bb      	ldr	r3, [r7, #24]
 8107880:	2b00      	cmp	r3, #0
 8107882:	d1e5      	bne.n	8107850 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107884:	68fb      	ldr	r3, [r7, #12]
 8107886:	2220      	movs	r2, #32
 8107888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810788c:	68fb      	ldr	r3, [r7, #12]
 810788e:	2220      	movs	r2, #32
 8107890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107894:	68fb      	ldr	r3, [r7, #12]
 8107896:	2220      	movs	r2, #32
 8107898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810789c:	68fb      	ldr	r3, [r7, #12]
 810789e:	2200      	movs	r2, #0
 81078a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81078a4:	2303      	movs	r3, #3
 81078a6:	e010      	b.n	81078ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81078a8:	68fb      	ldr	r3, [r7, #12]
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	69da      	ldr	r2, [r3, #28]
 81078ae:	68bb      	ldr	r3, [r7, #8]
 81078b0:	4013      	ands	r3, r2
 81078b2:	68ba      	ldr	r2, [r7, #8]
 81078b4:	429a      	cmp	r2, r3
 81078b6:	bf0c      	ite	eq
 81078b8:	2301      	moveq	r3, #1
 81078ba:	2300      	movne	r3, #0
 81078bc:	b2db      	uxtb	r3, r3
 81078be:	461a      	mov	r2, r3
 81078c0:	79fb      	ldrb	r3, [r7, #7]
 81078c2:	429a      	cmp	r2, r3
 81078c4:	f43f af46 	beq.w	8107754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81078c8:	2300      	movs	r3, #0
}
 81078ca:	4618      	mov	r0, r3
 81078cc:	3770      	adds	r7, #112	; 0x70
 81078ce:	46bd      	mov	sp, r7
 81078d0:	bd80      	pop	{r7, pc}

081078d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81078d2:	b480      	push	{r7}
 81078d4:	b085      	sub	sp, #20
 81078d6:	af00      	add	r7, sp, #0
 81078d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81078e0:	2b01      	cmp	r3, #1
 81078e2:	d101      	bne.n	81078e8 <HAL_UARTEx_DisableFifoMode+0x16>
 81078e4:	2302      	movs	r3, #2
 81078e6:	e027      	b.n	8107938 <HAL_UARTEx_DisableFifoMode+0x66>
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	2201      	movs	r2, #1
 81078ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81078f0:	687b      	ldr	r3, [r7, #4]
 81078f2:	2224      	movs	r2, #36	; 0x24
 81078f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	681b      	ldr	r3, [r3, #0]
 8107904:	681a      	ldr	r2, [r3, #0]
 8107906:	687b      	ldr	r3, [r7, #4]
 8107908:	681b      	ldr	r3, [r3, #0]
 810790a:	f022 0201 	bic.w	r2, r2, #1
 810790e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107910:	68fb      	ldr	r3, [r7, #12]
 8107912:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107916:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	2200      	movs	r2, #0
 810791c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	68fa      	ldr	r2, [r7, #12]
 8107924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	2220      	movs	r2, #32
 810792a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	2200      	movs	r2, #0
 8107932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107936:	2300      	movs	r3, #0
}
 8107938:	4618      	mov	r0, r3
 810793a:	3714      	adds	r7, #20
 810793c:	46bd      	mov	sp, r7
 810793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107942:	4770      	bx	lr

08107944 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107944:	b580      	push	{r7, lr}
 8107946:	b084      	sub	sp, #16
 8107948:	af00      	add	r7, sp, #0
 810794a:	6078      	str	r0, [r7, #4]
 810794c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107954:	2b01      	cmp	r3, #1
 8107956:	d101      	bne.n	810795c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107958:	2302      	movs	r3, #2
 810795a:	e02d      	b.n	81079b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	2201      	movs	r2, #1
 8107960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	2224      	movs	r2, #36	; 0x24
 8107968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	681b      	ldr	r3, [r3, #0]
 8107970:	681b      	ldr	r3, [r3, #0]
 8107972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	681a      	ldr	r2, [r3, #0]
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	681b      	ldr	r3, [r3, #0]
 810797e:	f022 0201 	bic.w	r2, r2, #1
 8107982:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	681b      	ldr	r3, [r3, #0]
 8107988:	689b      	ldr	r3, [r3, #8]
 810798a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810798e:	687b      	ldr	r3, [r7, #4]
 8107990:	681b      	ldr	r3, [r3, #0]
 8107992:	683a      	ldr	r2, [r7, #0]
 8107994:	430a      	orrs	r2, r1
 8107996:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107998:	6878      	ldr	r0, [r7, #4]
 810799a:	f000 f84f 	bl	8107a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	681b      	ldr	r3, [r3, #0]
 81079a2:	68fa      	ldr	r2, [r7, #12]
 81079a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	2220      	movs	r2, #32
 81079aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	2200      	movs	r2, #0
 81079b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81079b6:	2300      	movs	r3, #0
}
 81079b8:	4618      	mov	r0, r3
 81079ba:	3710      	adds	r7, #16
 81079bc:	46bd      	mov	sp, r7
 81079be:	bd80      	pop	{r7, pc}

081079c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81079c0:	b580      	push	{r7, lr}
 81079c2:	b084      	sub	sp, #16
 81079c4:	af00      	add	r7, sp, #0
 81079c6:	6078      	str	r0, [r7, #4]
 81079c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81079ca:	687b      	ldr	r3, [r7, #4]
 81079cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81079d0:	2b01      	cmp	r3, #1
 81079d2:	d101      	bne.n	81079d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81079d4:	2302      	movs	r3, #2
 81079d6:	e02d      	b.n	8107a34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	2201      	movs	r2, #1
 81079dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	2224      	movs	r2, #36	; 0x24
 81079e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	681b      	ldr	r3, [r3, #0]
 81079ec:	681b      	ldr	r3, [r3, #0]
 81079ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	681b      	ldr	r3, [r3, #0]
 81079f4:	681a      	ldr	r2, [r3, #0]
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	f022 0201 	bic.w	r2, r2, #1
 81079fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	681b      	ldr	r3, [r3, #0]
 8107a04:	689b      	ldr	r3, [r3, #8]
 8107a06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	681b      	ldr	r3, [r3, #0]
 8107a0e:	683a      	ldr	r2, [r7, #0]
 8107a10:	430a      	orrs	r2, r1
 8107a12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107a14:	6878      	ldr	r0, [r7, #4]
 8107a16:	f000 f811 	bl	8107a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	681b      	ldr	r3, [r3, #0]
 8107a1e:	68fa      	ldr	r2, [r7, #12]
 8107a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	2220      	movs	r2, #32
 8107a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107a2a:	687b      	ldr	r3, [r7, #4]
 8107a2c:	2200      	movs	r2, #0
 8107a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107a32:	2300      	movs	r3, #0
}
 8107a34:	4618      	mov	r0, r3
 8107a36:	3710      	adds	r7, #16
 8107a38:	46bd      	mov	sp, r7
 8107a3a:	bd80      	pop	{r7, pc}

08107a3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8107a3c:	b480      	push	{r7}
 8107a3e:	b085      	sub	sp, #20
 8107a40:	af00      	add	r7, sp, #0
 8107a42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107a44:	687b      	ldr	r3, [r7, #4]
 8107a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107a48:	2b00      	cmp	r3, #0
 8107a4a:	d108      	bne.n	8107a5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	2201      	movs	r2, #1
 8107a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	2201      	movs	r2, #1
 8107a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107a5c:	e031      	b.n	8107ac2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8107a5e:	2310      	movs	r3, #16
 8107a60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8107a62:	2310      	movs	r3, #16
 8107a64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	681b      	ldr	r3, [r3, #0]
 8107a6a:	689b      	ldr	r3, [r3, #8]
 8107a6c:	0e5b      	lsrs	r3, r3, #25
 8107a6e:	b2db      	uxtb	r3, r3
 8107a70:	f003 0307 	and.w	r3, r3, #7
 8107a74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	689b      	ldr	r3, [r3, #8]
 8107a7c:	0f5b      	lsrs	r3, r3, #29
 8107a7e:	b2db      	uxtb	r3, r3
 8107a80:	f003 0307 	and.w	r3, r3, #7
 8107a84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107a86:	7bbb      	ldrb	r3, [r7, #14]
 8107a88:	7b3a      	ldrb	r2, [r7, #12]
 8107a8a:	4911      	ldr	r1, [pc, #68]	; (8107ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8107a8c:	5c8a      	ldrb	r2, [r1, r2]
 8107a8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8107a92:	7b3a      	ldrb	r2, [r7, #12]
 8107a94:	490f      	ldr	r1, [pc, #60]	; (8107ad4 <UARTEx_SetNbDataToProcess+0x98>)
 8107a96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8107a9c:	b29a      	uxth	r2, r3
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107aa4:	7bfb      	ldrb	r3, [r7, #15]
 8107aa6:	7b7a      	ldrb	r2, [r7, #13]
 8107aa8:	4909      	ldr	r1, [pc, #36]	; (8107ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8107aaa:	5c8a      	ldrb	r2, [r1, r2]
 8107aac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8107ab0:	7b7a      	ldrb	r2, [r7, #13]
 8107ab2:	4908      	ldr	r1, [pc, #32]	; (8107ad4 <UARTEx_SetNbDataToProcess+0x98>)
 8107ab4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107ab6:	fb93 f3f2 	sdiv	r3, r3, r2
 8107aba:	b29a      	uxth	r2, r3
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8107ac2:	bf00      	nop
 8107ac4:	3714      	adds	r7, #20
 8107ac6:	46bd      	mov	sp, r7
 8107ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107acc:	4770      	bx	lr
 8107ace:	bf00      	nop
 8107ad0:	0810c64c 	.word	0x0810c64c
 8107ad4:	0810c654 	.word	0x0810c654

08107ad8 <__errno>:
 8107ad8:	4b01      	ldr	r3, [pc, #4]	; (8107ae0 <__errno+0x8>)
 8107ada:	6818      	ldr	r0, [r3, #0]
 8107adc:	4770      	bx	lr
 8107ade:	bf00      	nop
 8107ae0:	1000001c 	.word	0x1000001c

08107ae4 <__libc_init_array>:
 8107ae4:	b570      	push	{r4, r5, r6, lr}
 8107ae6:	4d0d      	ldr	r5, [pc, #52]	; (8107b1c <__libc_init_array+0x38>)
 8107ae8:	4c0d      	ldr	r4, [pc, #52]	; (8107b20 <__libc_init_array+0x3c>)
 8107aea:	1b64      	subs	r4, r4, r5
 8107aec:	10a4      	asrs	r4, r4, #2
 8107aee:	2600      	movs	r6, #0
 8107af0:	42a6      	cmp	r6, r4
 8107af2:	d109      	bne.n	8107b08 <__libc_init_array+0x24>
 8107af4:	4d0b      	ldr	r5, [pc, #44]	; (8107b24 <__libc_init_array+0x40>)
 8107af6:	4c0c      	ldr	r4, [pc, #48]	; (8107b28 <__libc_init_array+0x44>)
 8107af8:	f004 fd1c 	bl	810c534 <_init>
 8107afc:	1b64      	subs	r4, r4, r5
 8107afe:	10a4      	asrs	r4, r4, #2
 8107b00:	2600      	movs	r6, #0
 8107b02:	42a6      	cmp	r6, r4
 8107b04:	d105      	bne.n	8107b12 <__libc_init_array+0x2e>
 8107b06:	bd70      	pop	{r4, r5, r6, pc}
 8107b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8107b0c:	4798      	blx	r3
 8107b0e:	3601      	adds	r6, #1
 8107b10:	e7ee      	b.n	8107af0 <__libc_init_array+0xc>
 8107b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8107b16:	4798      	blx	r3
 8107b18:	3601      	adds	r6, #1
 8107b1a:	e7f2      	b.n	8107b02 <__libc_init_array+0x1e>
 8107b1c:	0810cb14 	.word	0x0810cb14
 8107b20:	0810cb14 	.word	0x0810cb14
 8107b24:	0810cb14 	.word	0x0810cb14
 8107b28:	0810cb18 	.word	0x0810cb18

08107b2c <memset>:
 8107b2c:	4402      	add	r2, r0
 8107b2e:	4603      	mov	r3, r0
 8107b30:	4293      	cmp	r3, r2
 8107b32:	d100      	bne.n	8107b36 <memset+0xa>
 8107b34:	4770      	bx	lr
 8107b36:	f803 1b01 	strb.w	r1, [r3], #1
 8107b3a:	e7f9      	b.n	8107b30 <memset+0x4>

08107b3c <__cvt>:
 8107b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107b40:	ec55 4b10 	vmov	r4, r5, d0
 8107b44:	2d00      	cmp	r5, #0
 8107b46:	460e      	mov	r6, r1
 8107b48:	4619      	mov	r1, r3
 8107b4a:	462b      	mov	r3, r5
 8107b4c:	bfbb      	ittet	lt
 8107b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8107b52:	461d      	movlt	r5, r3
 8107b54:	2300      	movge	r3, #0
 8107b56:	232d      	movlt	r3, #45	; 0x2d
 8107b58:	700b      	strb	r3, [r1, #0]
 8107b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8107b60:	4691      	mov	r9, r2
 8107b62:	f023 0820 	bic.w	r8, r3, #32
 8107b66:	bfbc      	itt	lt
 8107b68:	4622      	movlt	r2, r4
 8107b6a:	4614      	movlt	r4, r2
 8107b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107b70:	d005      	beq.n	8107b7e <__cvt+0x42>
 8107b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8107b76:	d100      	bne.n	8107b7a <__cvt+0x3e>
 8107b78:	3601      	adds	r6, #1
 8107b7a:	2102      	movs	r1, #2
 8107b7c:	e000      	b.n	8107b80 <__cvt+0x44>
 8107b7e:	2103      	movs	r1, #3
 8107b80:	ab03      	add	r3, sp, #12
 8107b82:	9301      	str	r3, [sp, #4]
 8107b84:	ab02      	add	r3, sp, #8
 8107b86:	9300      	str	r3, [sp, #0]
 8107b88:	ec45 4b10 	vmov	d0, r4, r5
 8107b8c:	4653      	mov	r3, sl
 8107b8e:	4632      	mov	r2, r6
 8107b90:	f001 fefa 	bl	8109988 <_dtoa_r>
 8107b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8107b98:	4607      	mov	r7, r0
 8107b9a:	d102      	bne.n	8107ba2 <__cvt+0x66>
 8107b9c:	f019 0f01 	tst.w	r9, #1
 8107ba0:	d022      	beq.n	8107be8 <__cvt+0xac>
 8107ba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107ba6:	eb07 0906 	add.w	r9, r7, r6
 8107baa:	d110      	bne.n	8107bce <__cvt+0x92>
 8107bac:	783b      	ldrb	r3, [r7, #0]
 8107bae:	2b30      	cmp	r3, #48	; 0x30
 8107bb0:	d10a      	bne.n	8107bc8 <__cvt+0x8c>
 8107bb2:	2200      	movs	r2, #0
 8107bb4:	2300      	movs	r3, #0
 8107bb6:	4620      	mov	r0, r4
 8107bb8:	4629      	mov	r1, r5
 8107bba:	f7f9 f80d 	bl	8100bd8 <__aeabi_dcmpeq>
 8107bbe:	b918      	cbnz	r0, 8107bc8 <__cvt+0x8c>
 8107bc0:	f1c6 0601 	rsb	r6, r6, #1
 8107bc4:	f8ca 6000 	str.w	r6, [sl]
 8107bc8:	f8da 3000 	ldr.w	r3, [sl]
 8107bcc:	4499      	add	r9, r3
 8107bce:	2200      	movs	r2, #0
 8107bd0:	2300      	movs	r3, #0
 8107bd2:	4620      	mov	r0, r4
 8107bd4:	4629      	mov	r1, r5
 8107bd6:	f7f8 ffff 	bl	8100bd8 <__aeabi_dcmpeq>
 8107bda:	b108      	cbz	r0, 8107be0 <__cvt+0xa4>
 8107bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8107be0:	2230      	movs	r2, #48	; 0x30
 8107be2:	9b03      	ldr	r3, [sp, #12]
 8107be4:	454b      	cmp	r3, r9
 8107be6:	d307      	bcc.n	8107bf8 <__cvt+0xbc>
 8107be8:	9b03      	ldr	r3, [sp, #12]
 8107bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107bec:	1bdb      	subs	r3, r3, r7
 8107bee:	4638      	mov	r0, r7
 8107bf0:	6013      	str	r3, [r2, #0]
 8107bf2:	b004      	add	sp, #16
 8107bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107bf8:	1c59      	adds	r1, r3, #1
 8107bfa:	9103      	str	r1, [sp, #12]
 8107bfc:	701a      	strb	r2, [r3, #0]
 8107bfe:	e7f0      	b.n	8107be2 <__cvt+0xa6>

08107c00 <__exponent>:
 8107c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107c02:	4603      	mov	r3, r0
 8107c04:	2900      	cmp	r1, #0
 8107c06:	bfb8      	it	lt
 8107c08:	4249      	neglt	r1, r1
 8107c0a:	f803 2b02 	strb.w	r2, [r3], #2
 8107c0e:	bfb4      	ite	lt
 8107c10:	222d      	movlt	r2, #45	; 0x2d
 8107c12:	222b      	movge	r2, #43	; 0x2b
 8107c14:	2909      	cmp	r1, #9
 8107c16:	7042      	strb	r2, [r0, #1]
 8107c18:	dd2a      	ble.n	8107c70 <__exponent+0x70>
 8107c1a:	f10d 0407 	add.w	r4, sp, #7
 8107c1e:	46a4      	mov	ip, r4
 8107c20:	270a      	movs	r7, #10
 8107c22:	46a6      	mov	lr, r4
 8107c24:	460a      	mov	r2, r1
 8107c26:	fb91 f6f7 	sdiv	r6, r1, r7
 8107c2a:	fb07 1516 	mls	r5, r7, r6, r1
 8107c2e:	3530      	adds	r5, #48	; 0x30
 8107c30:	2a63      	cmp	r2, #99	; 0x63
 8107c32:	f104 34ff 	add.w	r4, r4, #4294967295
 8107c36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8107c3a:	4631      	mov	r1, r6
 8107c3c:	dcf1      	bgt.n	8107c22 <__exponent+0x22>
 8107c3e:	3130      	adds	r1, #48	; 0x30
 8107c40:	f1ae 0502 	sub.w	r5, lr, #2
 8107c44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8107c48:	1c44      	adds	r4, r0, #1
 8107c4a:	4629      	mov	r1, r5
 8107c4c:	4561      	cmp	r1, ip
 8107c4e:	d30a      	bcc.n	8107c66 <__exponent+0x66>
 8107c50:	f10d 0209 	add.w	r2, sp, #9
 8107c54:	eba2 020e 	sub.w	r2, r2, lr
 8107c58:	4565      	cmp	r5, ip
 8107c5a:	bf88      	it	hi
 8107c5c:	2200      	movhi	r2, #0
 8107c5e:	4413      	add	r3, r2
 8107c60:	1a18      	subs	r0, r3, r0
 8107c62:	b003      	add	sp, #12
 8107c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107c6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107c6e:	e7ed      	b.n	8107c4c <__exponent+0x4c>
 8107c70:	2330      	movs	r3, #48	; 0x30
 8107c72:	3130      	adds	r1, #48	; 0x30
 8107c74:	7083      	strb	r3, [r0, #2]
 8107c76:	70c1      	strb	r1, [r0, #3]
 8107c78:	1d03      	adds	r3, r0, #4
 8107c7a:	e7f1      	b.n	8107c60 <__exponent+0x60>

08107c7c <_printf_float>:
 8107c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107c80:	ed2d 8b02 	vpush	{d8}
 8107c84:	b08d      	sub	sp, #52	; 0x34
 8107c86:	460c      	mov	r4, r1
 8107c88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107c8c:	4616      	mov	r6, r2
 8107c8e:	461f      	mov	r7, r3
 8107c90:	4605      	mov	r5, r0
 8107c92:	f003 f98d 	bl	810afb0 <_localeconv_r>
 8107c96:	f8d0 a000 	ldr.w	sl, [r0]
 8107c9a:	4650      	mov	r0, sl
 8107c9c:	f7f8 fb20 	bl	81002e0 <strlen>
 8107ca0:	2300      	movs	r3, #0
 8107ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8107ca4:	6823      	ldr	r3, [r4, #0]
 8107ca6:	9305      	str	r3, [sp, #20]
 8107ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8107cac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107cb0:	3307      	adds	r3, #7
 8107cb2:	f023 0307 	bic.w	r3, r3, #7
 8107cb6:	f103 0208 	add.w	r2, r3, #8
 8107cba:	f8c8 2000 	str.w	r2, [r8]
 8107cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107cc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8107cc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107cce:	9307      	str	r3, [sp, #28]
 8107cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8107cd4:	ee08 0a10 	vmov	s16, r0
 8107cd8:	4b9f      	ldr	r3, [pc, #636]	; (8107f58 <_printf_float+0x2dc>)
 8107cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107cde:	f04f 32ff 	mov.w	r2, #4294967295
 8107ce2:	f7f8 ffab 	bl	8100c3c <__aeabi_dcmpun>
 8107ce6:	bb88      	cbnz	r0, 8107d4c <_printf_float+0xd0>
 8107ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107cec:	4b9a      	ldr	r3, [pc, #616]	; (8107f58 <_printf_float+0x2dc>)
 8107cee:	f04f 32ff 	mov.w	r2, #4294967295
 8107cf2:	f7f8 ff85 	bl	8100c00 <__aeabi_dcmple>
 8107cf6:	bb48      	cbnz	r0, 8107d4c <_printf_float+0xd0>
 8107cf8:	2200      	movs	r2, #0
 8107cfa:	2300      	movs	r3, #0
 8107cfc:	4640      	mov	r0, r8
 8107cfe:	4649      	mov	r1, r9
 8107d00:	f7f8 ff74 	bl	8100bec <__aeabi_dcmplt>
 8107d04:	b110      	cbz	r0, 8107d0c <_printf_float+0x90>
 8107d06:	232d      	movs	r3, #45	; 0x2d
 8107d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107d0c:	4b93      	ldr	r3, [pc, #588]	; (8107f5c <_printf_float+0x2e0>)
 8107d0e:	4894      	ldr	r0, [pc, #592]	; (8107f60 <_printf_float+0x2e4>)
 8107d10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107d14:	bf94      	ite	ls
 8107d16:	4698      	movls	r8, r3
 8107d18:	4680      	movhi	r8, r0
 8107d1a:	2303      	movs	r3, #3
 8107d1c:	6123      	str	r3, [r4, #16]
 8107d1e:	9b05      	ldr	r3, [sp, #20]
 8107d20:	f023 0204 	bic.w	r2, r3, #4
 8107d24:	6022      	str	r2, [r4, #0]
 8107d26:	f04f 0900 	mov.w	r9, #0
 8107d2a:	9700      	str	r7, [sp, #0]
 8107d2c:	4633      	mov	r3, r6
 8107d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8107d30:	4621      	mov	r1, r4
 8107d32:	4628      	mov	r0, r5
 8107d34:	f000 f9d8 	bl	81080e8 <_printf_common>
 8107d38:	3001      	adds	r0, #1
 8107d3a:	f040 8090 	bne.w	8107e5e <_printf_float+0x1e2>
 8107d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8107d42:	b00d      	add	sp, #52	; 0x34
 8107d44:	ecbd 8b02 	vpop	{d8}
 8107d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107d4c:	4642      	mov	r2, r8
 8107d4e:	464b      	mov	r3, r9
 8107d50:	4640      	mov	r0, r8
 8107d52:	4649      	mov	r1, r9
 8107d54:	f7f8 ff72 	bl	8100c3c <__aeabi_dcmpun>
 8107d58:	b140      	cbz	r0, 8107d6c <_printf_float+0xf0>
 8107d5a:	464b      	mov	r3, r9
 8107d5c:	2b00      	cmp	r3, #0
 8107d5e:	bfbc      	itt	lt
 8107d60:	232d      	movlt	r3, #45	; 0x2d
 8107d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8107d66:	487f      	ldr	r0, [pc, #508]	; (8107f64 <_printf_float+0x2e8>)
 8107d68:	4b7f      	ldr	r3, [pc, #508]	; (8107f68 <_printf_float+0x2ec>)
 8107d6a:	e7d1      	b.n	8107d10 <_printf_float+0x94>
 8107d6c:	6863      	ldr	r3, [r4, #4]
 8107d6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107d72:	9206      	str	r2, [sp, #24]
 8107d74:	1c5a      	adds	r2, r3, #1
 8107d76:	d13f      	bne.n	8107df8 <_printf_float+0x17c>
 8107d78:	2306      	movs	r3, #6
 8107d7a:	6063      	str	r3, [r4, #4]
 8107d7c:	9b05      	ldr	r3, [sp, #20]
 8107d7e:	6861      	ldr	r1, [r4, #4]
 8107d80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107d84:	2300      	movs	r3, #0
 8107d86:	9303      	str	r3, [sp, #12]
 8107d88:	ab0a      	add	r3, sp, #40	; 0x28
 8107d8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107d8e:	ab09      	add	r3, sp, #36	; 0x24
 8107d90:	ec49 8b10 	vmov	d0, r8, r9
 8107d94:	9300      	str	r3, [sp, #0]
 8107d96:	6022      	str	r2, [r4, #0]
 8107d98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107d9c:	4628      	mov	r0, r5
 8107d9e:	f7ff fecd 	bl	8107b3c <__cvt>
 8107da2:	9b06      	ldr	r3, [sp, #24]
 8107da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107da6:	2b47      	cmp	r3, #71	; 0x47
 8107da8:	4680      	mov	r8, r0
 8107daa:	d108      	bne.n	8107dbe <_printf_float+0x142>
 8107dac:	1cc8      	adds	r0, r1, #3
 8107dae:	db02      	blt.n	8107db6 <_printf_float+0x13a>
 8107db0:	6863      	ldr	r3, [r4, #4]
 8107db2:	4299      	cmp	r1, r3
 8107db4:	dd41      	ble.n	8107e3a <_printf_float+0x1be>
 8107db6:	f1ab 0b02 	sub.w	fp, fp, #2
 8107dba:	fa5f fb8b 	uxtb.w	fp, fp
 8107dbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107dc2:	d820      	bhi.n	8107e06 <_printf_float+0x18a>
 8107dc4:	3901      	subs	r1, #1
 8107dc6:	465a      	mov	r2, fp
 8107dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8107dce:	f7ff ff17 	bl	8107c00 <__exponent>
 8107dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107dd4:	1813      	adds	r3, r2, r0
 8107dd6:	2a01      	cmp	r2, #1
 8107dd8:	4681      	mov	r9, r0
 8107dda:	6123      	str	r3, [r4, #16]
 8107ddc:	dc02      	bgt.n	8107de4 <_printf_float+0x168>
 8107dde:	6822      	ldr	r2, [r4, #0]
 8107de0:	07d2      	lsls	r2, r2, #31
 8107de2:	d501      	bpl.n	8107de8 <_printf_float+0x16c>
 8107de4:	3301      	adds	r3, #1
 8107de6:	6123      	str	r3, [r4, #16]
 8107de8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107dec:	2b00      	cmp	r3, #0
 8107dee:	d09c      	beq.n	8107d2a <_printf_float+0xae>
 8107df0:	232d      	movs	r3, #45	; 0x2d
 8107df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107df6:	e798      	b.n	8107d2a <_printf_float+0xae>
 8107df8:	9a06      	ldr	r2, [sp, #24]
 8107dfa:	2a47      	cmp	r2, #71	; 0x47
 8107dfc:	d1be      	bne.n	8107d7c <_printf_float+0x100>
 8107dfe:	2b00      	cmp	r3, #0
 8107e00:	d1bc      	bne.n	8107d7c <_printf_float+0x100>
 8107e02:	2301      	movs	r3, #1
 8107e04:	e7b9      	b.n	8107d7a <_printf_float+0xfe>
 8107e06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107e0a:	d118      	bne.n	8107e3e <_printf_float+0x1c2>
 8107e0c:	2900      	cmp	r1, #0
 8107e0e:	6863      	ldr	r3, [r4, #4]
 8107e10:	dd0b      	ble.n	8107e2a <_printf_float+0x1ae>
 8107e12:	6121      	str	r1, [r4, #16]
 8107e14:	b913      	cbnz	r3, 8107e1c <_printf_float+0x1a0>
 8107e16:	6822      	ldr	r2, [r4, #0]
 8107e18:	07d0      	lsls	r0, r2, #31
 8107e1a:	d502      	bpl.n	8107e22 <_printf_float+0x1a6>
 8107e1c:	3301      	adds	r3, #1
 8107e1e:	440b      	add	r3, r1
 8107e20:	6123      	str	r3, [r4, #16]
 8107e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8107e24:	f04f 0900 	mov.w	r9, #0
 8107e28:	e7de      	b.n	8107de8 <_printf_float+0x16c>
 8107e2a:	b913      	cbnz	r3, 8107e32 <_printf_float+0x1b6>
 8107e2c:	6822      	ldr	r2, [r4, #0]
 8107e2e:	07d2      	lsls	r2, r2, #31
 8107e30:	d501      	bpl.n	8107e36 <_printf_float+0x1ba>
 8107e32:	3302      	adds	r3, #2
 8107e34:	e7f4      	b.n	8107e20 <_printf_float+0x1a4>
 8107e36:	2301      	movs	r3, #1
 8107e38:	e7f2      	b.n	8107e20 <_printf_float+0x1a4>
 8107e3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107e40:	4299      	cmp	r1, r3
 8107e42:	db05      	blt.n	8107e50 <_printf_float+0x1d4>
 8107e44:	6823      	ldr	r3, [r4, #0]
 8107e46:	6121      	str	r1, [r4, #16]
 8107e48:	07d8      	lsls	r0, r3, #31
 8107e4a:	d5ea      	bpl.n	8107e22 <_printf_float+0x1a6>
 8107e4c:	1c4b      	adds	r3, r1, #1
 8107e4e:	e7e7      	b.n	8107e20 <_printf_float+0x1a4>
 8107e50:	2900      	cmp	r1, #0
 8107e52:	bfd4      	ite	le
 8107e54:	f1c1 0202 	rsble	r2, r1, #2
 8107e58:	2201      	movgt	r2, #1
 8107e5a:	4413      	add	r3, r2
 8107e5c:	e7e0      	b.n	8107e20 <_printf_float+0x1a4>
 8107e5e:	6823      	ldr	r3, [r4, #0]
 8107e60:	055a      	lsls	r2, r3, #21
 8107e62:	d407      	bmi.n	8107e74 <_printf_float+0x1f8>
 8107e64:	6923      	ldr	r3, [r4, #16]
 8107e66:	4642      	mov	r2, r8
 8107e68:	4631      	mov	r1, r6
 8107e6a:	4628      	mov	r0, r5
 8107e6c:	47b8      	blx	r7
 8107e6e:	3001      	adds	r0, #1
 8107e70:	d12c      	bne.n	8107ecc <_printf_float+0x250>
 8107e72:	e764      	b.n	8107d3e <_printf_float+0xc2>
 8107e74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107e78:	f240 80e0 	bls.w	810803c <_printf_float+0x3c0>
 8107e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107e80:	2200      	movs	r2, #0
 8107e82:	2300      	movs	r3, #0
 8107e84:	f7f8 fea8 	bl	8100bd8 <__aeabi_dcmpeq>
 8107e88:	2800      	cmp	r0, #0
 8107e8a:	d034      	beq.n	8107ef6 <_printf_float+0x27a>
 8107e8c:	4a37      	ldr	r2, [pc, #220]	; (8107f6c <_printf_float+0x2f0>)
 8107e8e:	2301      	movs	r3, #1
 8107e90:	4631      	mov	r1, r6
 8107e92:	4628      	mov	r0, r5
 8107e94:	47b8      	blx	r7
 8107e96:	3001      	adds	r0, #1
 8107e98:	f43f af51 	beq.w	8107d3e <_printf_float+0xc2>
 8107e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107ea0:	429a      	cmp	r2, r3
 8107ea2:	db02      	blt.n	8107eaa <_printf_float+0x22e>
 8107ea4:	6823      	ldr	r3, [r4, #0]
 8107ea6:	07d8      	lsls	r0, r3, #31
 8107ea8:	d510      	bpl.n	8107ecc <_printf_float+0x250>
 8107eaa:	ee18 3a10 	vmov	r3, s16
 8107eae:	4652      	mov	r2, sl
 8107eb0:	4631      	mov	r1, r6
 8107eb2:	4628      	mov	r0, r5
 8107eb4:	47b8      	blx	r7
 8107eb6:	3001      	adds	r0, #1
 8107eb8:	f43f af41 	beq.w	8107d3e <_printf_float+0xc2>
 8107ebc:	f04f 0800 	mov.w	r8, #0
 8107ec0:	f104 091a 	add.w	r9, r4, #26
 8107ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107ec6:	3b01      	subs	r3, #1
 8107ec8:	4543      	cmp	r3, r8
 8107eca:	dc09      	bgt.n	8107ee0 <_printf_float+0x264>
 8107ecc:	6823      	ldr	r3, [r4, #0]
 8107ece:	079b      	lsls	r3, r3, #30
 8107ed0:	f100 8105 	bmi.w	81080de <_printf_float+0x462>
 8107ed4:	68e0      	ldr	r0, [r4, #12]
 8107ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107ed8:	4298      	cmp	r0, r3
 8107eda:	bfb8      	it	lt
 8107edc:	4618      	movlt	r0, r3
 8107ede:	e730      	b.n	8107d42 <_printf_float+0xc6>
 8107ee0:	2301      	movs	r3, #1
 8107ee2:	464a      	mov	r2, r9
 8107ee4:	4631      	mov	r1, r6
 8107ee6:	4628      	mov	r0, r5
 8107ee8:	47b8      	blx	r7
 8107eea:	3001      	adds	r0, #1
 8107eec:	f43f af27 	beq.w	8107d3e <_printf_float+0xc2>
 8107ef0:	f108 0801 	add.w	r8, r8, #1
 8107ef4:	e7e6      	b.n	8107ec4 <_printf_float+0x248>
 8107ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107ef8:	2b00      	cmp	r3, #0
 8107efa:	dc39      	bgt.n	8107f70 <_printf_float+0x2f4>
 8107efc:	4a1b      	ldr	r2, [pc, #108]	; (8107f6c <_printf_float+0x2f0>)
 8107efe:	2301      	movs	r3, #1
 8107f00:	4631      	mov	r1, r6
 8107f02:	4628      	mov	r0, r5
 8107f04:	47b8      	blx	r7
 8107f06:	3001      	adds	r0, #1
 8107f08:	f43f af19 	beq.w	8107d3e <_printf_float+0xc2>
 8107f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107f10:	4313      	orrs	r3, r2
 8107f12:	d102      	bne.n	8107f1a <_printf_float+0x29e>
 8107f14:	6823      	ldr	r3, [r4, #0]
 8107f16:	07d9      	lsls	r1, r3, #31
 8107f18:	d5d8      	bpl.n	8107ecc <_printf_float+0x250>
 8107f1a:	ee18 3a10 	vmov	r3, s16
 8107f1e:	4652      	mov	r2, sl
 8107f20:	4631      	mov	r1, r6
 8107f22:	4628      	mov	r0, r5
 8107f24:	47b8      	blx	r7
 8107f26:	3001      	adds	r0, #1
 8107f28:	f43f af09 	beq.w	8107d3e <_printf_float+0xc2>
 8107f2c:	f04f 0900 	mov.w	r9, #0
 8107f30:	f104 0a1a 	add.w	sl, r4, #26
 8107f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107f36:	425b      	negs	r3, r3
 8107f38:	454b      	cmp	r3, r9
 8107f3a:	dc01      	bgt.n	8107f40 <_printf_float+0x2c4>
 8107f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107f3e:	e792      	b.n	8107e66 <_printf_float+0x1ea>
 8107f40:	2301      	movs	r3, #1
 8107f42:	4652      	mov	r2, sl
 8107f44:	4631      	mov	r1, r6
 8107f46:	4628      	mov	r0, r5
 8107f48:	47b8      	blx	r7
 8107f4a:	3001      	adds	r0, #1
 8107f4c:	f43f aef7 	beq.w	8107d3e <_printf_float+0xc2>
 8107f50:	f109 0901 	add.w	r9, r9, #1
 8107f54:	e7ee      	b.n	8107f34 <_printf_float+0x2b8>
 8107f56:	bf00      	nop
 8107f58:	7fefffff 	.word	0x7fefffff
 8107f5c:	0810c660 	.word	0x0810c660
 8107f60:	0810c664 	.word	0x0810c664
 8107f64:	0810c66c 	.word	0x0810c66c
 8107f68:	0810c668 	.word	0x0810c668
 8107f6c:	0810c670 	.word	0x0810c670
 8107f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107f74:	429a      	cmp	r2, r3
 8107f76:	bfa8      	it	ge
 8107f78:	461a      	movge	r2, r3
 8107f7a:	2a00      	cmp	r2, #0
 8107f7c:	4691      	mov	r9, r2
 8107f7e:	dc37      	bgt.n	8107ff0 <_printf_float+0x374>
 8107f80:	f04f 0b00 	mov.w	fp, #0
 8107f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107f88:	f104 021a 	add.w	r2, r4, #26
 8107f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107f8e:	9305      	str	r3, [sp, #20]
 8107f90:	eba3 0309 	sub.w	r3, r3, r9
 8107f94:	455b      	cmp	r3, fp
 8107f96:	dc33      	bgt.n	8108000 <_printf_float+0x384>
 8107f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107f9c:	429a      	cmp	r2, r3
 8107f9e:	db3b      	blt.n	8108018 <_printf_float+0x39c>
 8107fa0:	6823      	ldr	r3, [r4, #0]
 8107fa2:	07da      	lsls	r2, r3, #31
 8107fa4:	d438      	bmi.n	8108018 <_printf_float+0x39c>
 8107fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107fa8:	9a05      	ldr	r2, [sp, #20]
 8107faa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107fac:	1a9a      	subs	r2, r3, r2
 8107fae:	eba3 0901 	sub.w	r9, r3, r1
 8107fb2:	4591      	cmp	r9, r2
 8107fb4:	bfa8      	it	ge
 8107fb6:	4691      	movge	r9, r2
 8107fb8:	f1b9 0f00 	cmp.w	r9, #0
 8107fbc:	dc35      	bgt.n	810802a <_printf_float+0x3ae>
 8107fbe:	f04f 0800 	mov.w	r8, #0
 8107fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107fc6:	f104 0a1a 	add.w	sl, r4, #26
 8107fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107fce:	1a9b      	subs	r3, r3, r2
 8107fd0:	eba3 0309 	sub.w	r3, r3, r9
 8107fd4:	4543      	cmp	r3, r8
 8107fd6:	f77f af79 	ble.w	8107ecc <_printf_float+0x250>
 8107fda:	2301      	movs	r3, #1
 8107fdc:	4652      	mov	r2, sl
 8107fde:	4631      	mov	r1, r6
 8107fe0:	4628      	mov	r0, r5
 8107fe2:	47b8      	blx	r7
 8107fe4:	3001      	adds	r0, #1
 8107fe6:	f43f aeaa 	beq.w	8107d3e <_printf_float+0xc2>
 8107fea:	f108 0801 	add.w	r8, r8, #1
 8107fee:	e7ec      	b.n	8107fca <_printf_float+0x34e>
 8107ff0:	4613      	mov	r3, r2
 8107ff2:	4631      	mov	r1, r6
 8107ff4:	4642      	mov	r2, r8
 8107ff6:	4628      	mov	r0, r5
 8107ff8:	47b8      	blx	r7
 8107ffa:	3001      	adds	r0, #1
 8107ffc:	d1c0      	bne.n	8107f80 <_printf_float+0x304>
 8107ffe:	e69e      	b.n	8107d3e <_printf_float+0xc2>
 8108000:	2301      	movs	r3, #1
 8108002:	4631      	mov	r1, r6
 8108004:	4628      	mov	r0, r5
 8108006:	9205      	str	r2, [sp, #20]
 8108008:	47b8      	blx	r7
 810800a:	3001      	adds	r0, #1
 810800c:	f43f ae97 	beq.w	8107d3e <_printf_float+0xc2>
 8108010:	9a05      	ldr	r2, [sp, #20]
 8108012:	f10b 0b01 	add.w	fp, fp, #1
 8108016:	e7b9      	b.n	8107f8c <_printf_float+0x310>
 8108018:	ee18 3a10 	vmov	r3, s16
 810801c:	4652      	mov	r2, sl
 810801e:	4631      	mov	r1, r6
 8108020:	4628      	mov	r0, r5
 8108022:	47b8      	blx	r7
 8108024:	3001      	adds	r0, #1
 8108026:	d1be      	bne.n	8107fa6 <_printf_float+0x32a>
 8108028:	e689      	b.n	8107d3e <_printf_float+0xc2>
 810802a:	9a05      	ldr	r2, [sp, #20]
 810802c:	464b      	mov	r3, r9
 810802e:	4442      	add	r2, r8
 8108030:	4631      	mov	r1, r6
 8108032:	4628      	mov	r0, r5
 8108034:	47b8      	blx	r7
 8108036:	3001      	adds	r0, #1
 8108038:	d1c1      	bne.n	8107fbe <_printf_float+0x342>
 810803a:	e680      	b.n	8107d3e <_printf_float+0xc2>
 810803c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810803e:	2a01      	cmp	r2, #1
 8108040:	dc01      	bgt.n	8108046 <_printf_float+0x3ca>
 8108042:	07db      	lsls	r3, r3, #31
 8108044:	d538      	bpl.n	81080b8 <_printf_float+0x43c>
 8108046:	2301      	movs	r3, #1
 8108048:	4642      	mov	r2, r8
 810804a:	4631      	mov	r1, r6
 810804c:	4628      	mov	r0, r5
 810804e:	47b8      	blx	r7
 8108050:	3001      	adds	r0, #1
 8108052:	f43f ae74 	beq.w	8107d3e <_printf_float+0xc2>
 8108056:	ee18 3a10 	vmov	r3, s16
 810805a:	4652      	mov	r2, sl
 810805c:	4631      	mov	r1, r6
 810805e:	4628      	mov	r0, r5
 8108060:	47b8      	blx	r7
 8108062:	3001      	adds	r0, #1
 8108064:	f43f ae6b 	beq.w	8107d3e <_printf_float+0xc2>
 8108068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810806c:	2200      	movs	r2, #0
 810806e:	2300      	movs	r3, #0
 8108070:	f7f8 fdb2 	bl	8100bd8 <__aeabi_dcmpeq>
 8108074:	b9d8      	cbnz	r0, 81080ae <_printf_float+0x432>
 8108076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108078:	f108 0201 	add.w	r2, r8, #1
 810807c:	3b01      	subs	r3, #1
 810807e:	4631      	mov	r1, r6
 8108080:	4628      	mov	r0, r5
 8108082:	47b8      	blx	r7
 8108084:	3001      	adds	r0, #1
 8108086:	d10e      	bne.n	81080a6 <_printf_float+0x42a>
 8108088:	e659      	b.n	8107d3e <_printf_float+0xc2>
 810808a:	2301      	movs	r3, #1
 810808c:	4652      	mov	r2, sl
 810808e:	4631      	mov	r1, r6
 8108090:	4628      	mov	r0, r5
 8108092:	47b8      	blx	r7
 8108094:	3001      	adds	r0, #1
 8108096:	f43f ae52 	beq.w	8107d3e <_printf_float+0xc2>
 810809a:	f108 0801 	add.w	r8, r8, #1
 810809e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81080a0:	3b01      	subs	r3, #1
 81080a2:	4543      	cmp	r3, r8
 81080a4:	dcf1      	bgt.n	810808a <_printf_float+0x40e>
 81080a6:	464b      	mov	r3, r9
 81080a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81080ac:	e6dc      	b.n	8107e68 <_printf_float+0x1ec>
 81080ae:	f04f 0800 	mov.w	r8, #0
 81080b2:	f104 0a1a 	add.w	sl, r4, #26
 81080b6:	e7f2      	b.n	810809e <_printf_float+0x422>
 81080b8:	2301      	movs	r3, #1
 81080ba:	4642      	mov	r2, r8
 81080bc:	e7df      	b.n	810807e <_printf_float+0x402>
 81080be:	2301      	movs	r3, #1
 81080c0:	464a      	mov	r2, r9
 81080c2:	4631      	mov	r1, r6
 81080c4:	4628      	mov	r0, r5
 81080c6:	47b8      	blx	r7
 81080c8:	3001      	adds	r0, #1
 81080ca:	f43f ae38 	beq.w	8107d3e <_printf_float+0xc2>
 81080ce:	f108 0801 	add.w	r8, r8, #1
 81080d2:	68e3      	ldr	r3, [r4, #12]
 81080d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81080d6:	1a5b      	subs	r3, r3, r1
 81080d8:	4543      	cmp	r3, r8
 81080da:	dcf0      	bgt.n	81080be <_printf_float+0x442>
 81080dc:	e6fa      	b.n	8107ed4 <_printf_float+0x258>
 81080de:	f04f 0800 	mov.w	r8, #0
 81080e2:	f104 0919 	add.w	r9, r4, #25
 81080e6:	e7f4      	b.n	81080d2 <_printf_float+0x456>

081080e8 <_printf_common>:
 81080e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81080ec:	4616      	mov	r6, r2
 81080ee:	4699      	mov	r9, r3
 81080f0:	688a      	ldr	r2, [r1, #8]
 81080f2:	690b      	ldr	r3, [r1, #16]
 81080f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81080f8:	4293      	cmp	r3, r2
 81080fa:	bfb8      	it	lt
 81080fc:	4613      	movlt	r3, r2
 81080fe:	6033      	str	r3, [r6, #0]
 8108100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108104:	4607      	mov	r7, r0
 8108106:	460c      	mov	r4, r1
 8108108:	b10a      	cbz	r2, 810810e <_printf_common+0x26>
 810810a:	3301      	adds	r3, #1
 810810c:	6033      	str	r3, [r6, #0]
 810810e:	6823      	ldr	r3, [r4, #0]
 8108110:	0699      	lsls	r1, r3, #26
 8108112:	bf42      	ittt	mi
 8108114:	6833      	ldrmi	r3, [r6, #0]
 8108116:	3302      	addmi	r3, #2
 8108118:	6033      	strmi	r3, [r6, #0]
 810811a:	6825      	ldr	r5, [r4, #0]
 810811c:	f015 0506 	ands.w	r5, r5, #6
 8108120:	d106      	bne.n	8108130 <_printf_common+0x48>
 8108122:	f104 0a19 	add.w	sl, r4, #25
 8108126:	68e3      	ldr	r3, [r4, #12]
 8108128:	6832      	ldr	r2, [r6, #0]
 810812a:	1a9b      	subs	r3, r3, r2
 810812c:	42ab      	cmp	r3, r5
 810812e:	dc26      	bgt.n	810817e <_printf_common+0x96>
 8108130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108134:	1e13      	subs	r3, r2, #0
 8108136:	6822      	ldr	r2, [r4, #0]
 8108138:	bf18      	it	ne
 810813a:	2301      	movne	r3, #1
 810813c:	0692      	lsls	r2, r2, #26
 810813e:	d42b      	bmi.n	8108198 <_printf_common+0xb0>
 8108140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108144:	4649      	mov	r1, r9
 8108146:	4638      	mov	r0, r7
 8108148:	47c0      	blx	r8
 810814a:	3001      	adds	r0, #1
 810814c:	d01e      	beq.n	810818c <_printf_common+0xa4>
 810814e:	6823      	ldr	r3, [r4, #0]
 8108150:	68e5      	ldr	r5, [r4, #12]
 8108152:	6832      	ldr	r2, [r6, #0]
 8108154:	f003 0306 	and.w	r3, r3, #6
 8108158:	2b04      	cmp	r3, #4
 810815a:	bf08      	it	eq
 810815c:	1aad      	subeq	r5, r5, r2
 810815e:	68a3      	ldr	r3, [r4, #8]
 8108160:	6922      	ldr	r2, [r4, #16]
 8108162:	bf0c      	ite	eq
 8108164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108168:	2500      	movne	r5, #0
 810816a:	4293      	cmp	r3, r2
 810816c:	bfc4      	itt	gt
 810816e:	1a9b      	subgt	r3, r3, r2
 8108170:	18ed      	addgt	r5, r5, r3
 8108172:	2600      	movs	r6, #0
 8108174:	341a      	adds	r4, #26
 8108176:	42b5      	cmp	r5, r6
 8108178:	d11a      	bne.n	81081b0 <_printf_common+0xc8>
 810817a:	2000      	movs	r0, #0
 810817c:	e008      	b.n	8108190 <_printf_common+0xa8>
 810817e:	2301      	movs	r3, #1
 8108180:	4652      	mov	r2, sl
 8108182:	4649      	mov	r1, r9
 8108184:	4638      	mov	r0, r7
 8108186:	47c0      	blx	r8
 8108188:	3001      	adds	r0, #1
 810818a:	d103      	bne.n	8108194 <_printf_common+0xac>
 810818c:	f04f 30ff 	mov.w	r0, #4294967295
 8108190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108194:	3501      	adds	r5, #1
 8108196:	e7c6      	b.n	8108126 <_printf_common+0x3e>
 8108198:	18e1      	adds	r1, r4, r3
 810819a:	1c5a      	adds	r2, r3, #1
 810819c:	2030      	movs	r0, #48	; 0x30
 810819e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81081a2:	4422      	add	r2, r4
 81081a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81081a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81081ac:	3302      	adds	r3, #2
 81081ae:	e7c7      	b.n	8108140 <_printf_common+0x58>
 81081b0:	2301      	movs	r3, #1
 81081b2:	4622      	mov	r2, r4
 81081b4:	4649      	mov	r1, r9
 81081b6:	4638      	mov	r0, r7
 81081b8:	47c0      	blx	r8
 81081ba:	3001      	adds	r0, #1
 81081bc:	d0e6      	beq.n	810818c <_printf_common+0xa4>
 81081be:	3601      	adds	r6, #1
 81081c0:	e7d9      	b.n	8108176 <_printf_common+0x8e>
	...

081081c4 <_printf_i>:
 81081c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81081c8:	7e0f      	ldrb	r7, [r1, #24]
 81081ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81081cc:	2f78      	cmp	r7, #120	; 0x78
 81081ce:	4691      	mov	r9, r2
 81081d0:	4680      	mov	r8, r0
 81081d2:	460c      	mov	r4, r1
 81081d4:	469a      	mov	sl, r3
 81081d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81081da:	d807      	bhi.n	81081ec <_printf_i+0x28>
 81081dc:	2f62      	cmp	r7, #98	; 0x62
 81081de:	d80a      	bhi.n	81081f6 <_printf_i+0x32>
 81081e0:	2f00      	cmp	r7, #0
 81081e2:	f000 80d8 	beq.w	8108396 <_printf_i+0x1d2>
 81081e6:	2f58      	cmp	r7, #88	; 0x58
 81081e8:	f000 80a3 	beq.w	8108332 <_printf_i+0x16e>
 81081ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81081f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81081f4:	e03a      	b.n	810826c <_printf_i+0xa8>
 81081f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81081fa:	2b15      	cmp	r3, #21
 81081fc:	d8f6      	bhi.n	81081ec <_printf_i+0x28>
 81081fe:	a101      	add	r1, pc, #4	; (adr r1, 8108204 <_printf_i+0x40>)
 8108200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108204:	0810825d 	.word	0x0810825d
 8108208:	08108271 	.word	0x08108271
 810820c:	081081ed 	.word	0x081081ed
 8108210:	081081ed 	.word	0x081081ed
 8108214:	081081ed 	.word	0x081081ed
 8108218:	081081ed 	.word	0x081081ed
 810821c:	08108271 	.word	0x08108271
 8108220:	081081ed 	.word	0x081081ed
 8108224:	081081ed 	.word	0x081081ed
 8108228:	081081ed 	.word	0x081081ed
 810822c:	081081ed 	.word	0x081081ed
 8108230:	0810837d 	.word	0x0810837d
 8108234:	081082a1 	.word	0x081082a1
 8108238:	0810835f 	.word	0x0810835f
 810823c:	081081ed 	.word	0x081081ed
 8108240:	081081ed 	.word	0x081081ed
 8108244:	0810839f 	.word	0x0810839f
 8108248:	081081ed 	.word	0x081081ed
 810824c:	081082a1 	.word	0x081082a1
 8108250:	081081ed 	.word	0x081081ed
 8108254:	081081ed 	.word	0x081081ed
 8108258:	08108367 	.word	0x08108367
 810825c:	682b      	ldr	r3, [r5, #0]
 810825e:	1d1a      	adds	r2, r3, #4
 8108260:	681b      	ldr	r3, [r3, #0]
 8108262:	602a      	str	r2, [r5, #0]
 8108264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810826c:	2301      	movs	r3, #1
 810826e:	e0a3      	b.n	81083b8 <_printf_i+0x1f4>
 8108270:	6820      	ldr	r0, [r4, #0]
 8108272:	6829      	ldr	r1, [r5, #0]
 8108274:	0606      	lsls	r6, r0, #24
 8108276:	f101 0304 	add.w	r3, r1, #4
 810827a:	d50a      	bpl.n	8108292 <_printf_i+0xce>
 810827c:	680e      	ldr	r6, [r1, #0]
 810827e:	602b      	str	r3, [r5, #0]
 8108280:	2e00      	cmp	r6, #0
 8108282:	da03      	bge.n	810828c <_printf_i+0xc8>
 8108284:	232d      	movs	r3, #45	; 0x2d
 8108286:	4276      	negs	r6, r6
 8108288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810828c:	485e      	ldr	r0, [pc, #376]	; (8108408 <_printf_i+0x244>)
 810828e:	230a      	movs	r3, #10
 8108290:	e019      	b.n	81082c6 <_printf_i+0x102>
 8108292:	680e      	ldr	r6, [r1, #0]
 8108294:	602b      	str	r3, [r5, #0]
 8108296:	f010 0f40 	tst.w	r0, #64	; 0x40
 810829a:	bf18      	it	ne
 810829c:	b236      	sxthne	r6, r6
 810829e:	e7ef      	b.n	8108280 <_printf_i+0xbc>
 81082a0:	682b      	ldr	r3, [r5, #0]
 81082a2:	6820      	ldr	r0, [r4, #0]
 81082a4:	1d19      	adds	r1, r3, #4
 81082a6:	6029      	str	r1, [r5, #0]
 81082a8:	0601      	lsls	r1, r0, #24
 81082aa:	d501      	bpl.n	81082b0 <_printf_i+0xec>
 81082ac:	681e      	ldr	r6, [r3, #0]
 81082ae:	e002      	b.n	81082b6 <_printf_i+0xf2>
 81082b0:	0646      	lsls	r6, r0, #25
 81082b2:	d5fb      	bpl.n	81082ac <_printf_i+0xe8>
 81082b4:	881e      	ldrh	r6, [r3, #0]
 81082b6:	4854      	ldr	r0, [pc, #336]	; (8108408 <_printf_i+0x244>)
 81082b8:	2f6f      	cmp	r7, #111	; 0x6f
 81082ba:	bf0c      	ite	eq
 81082bc:	2308      	moveq	r3, #8
 81082be:	230a      	movne	r3, #10
 81082c0:	2100      	movs	r1, #0
 81082c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81082c6:	6865      	ldr	r5, [r4, #4]
 81082c8:	60a5      	str	r5, [r4, #8]
 81082ca:	2d00      	cmp	r5, #0
 81082cc:	bfa2      	ittt	ge
 81082ce:	6821      	ldrge	r1, [r4, #0]
 81082d0:	f021 0104 	bicge.w	r1, r1, #4
 81082d4:	6021      	strge	r1, [r4, #0]
 81082d6:	b90e      	cbnz	r6, 81082dc <_printf_i+0x118>
 81082d8:	2d00      	cmp	r5, #0
 81082da:	d04d      	beq.n	8108378 <_printf_i+0x1b4>
 81082dc:	4615      	mov	r5, r2
 81082de:	fbb6 f1f3 	udiv	r1, r6, r3
 81082e2:	fb03 6711 	mls	r7, r3, r1, r6
 81082e6:	5dc7      	ldrb	r7, [r0, r7]
 81082e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81082ec:	4637      	mov	r7, r6
 81082ee:	42bb      	cmp	r3, r7
 81082f0:	460e      	mov	r6, r1
 81082f2:	d9f4      	bls.n	81082de <_printf_i+0x11a>
 81082f4:	2b08      	cmp	r3, #8
 81082f6:	d10b      	bne.n	8108310 <_printf_i+0x14c>
 81082f8:	6823      	ldr	r3, [r4, #0]
 81082fa:	07de      	lsls	r6, r3, #31
 81082fc:	d508      	bpl.n	8108310 <_printf_i+0x14c>
 81082fe:	6923      	ldr	r3, [r4, #16]
 8108300:	6861      	ldr	r1, [r4, #4]
 8108302:	4299      	cmp	r1, r3
 8108304:	bfde      	ittt	le
 8108306:	2330      	movle	r3, #48	; 0x30
 8108308:	f805 3c01 	strble.w	r3, [r5, #-1]
 810830c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8108310:	1b52      	subs	r2, r2, r5
 8108312:	6122      	str	r2, [r4, #16]
 8108314:	f8cd a000 	str.w	sl, [sp]
 8108318:	464b      	mov	r3, r9
 810831a:	aa03      	add	r2, sp, #12
 810831c:	4621      	mov	r1, r4
 810831e:	4640      	mov	r0, r8
 8108320:	f7ff fee2 	bl	81080e8 <_printf_common>
 8108324:	3001      	adds	r0, #1
 8108326:	d14c      	bne.n	81083c2 <_printf_i+0x1fe>
 8108328:	f04f 30ff 	mov.w	r0, #4294967295
 810832c:	b004      	add	sp, #16
 810832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108332:	4835      	ldr	r0, [pc, #212]	; (8108408 <_printf_i+0x244>)
 8108334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8108338:	6829      	ldr	r1, [r5, #0]
 810833a:	6823      	ldr	r3, [r4, #0]
 810833c:	f851 6b04 	ldr.w	r6, [r1], #4
 8108340:	6029      	str	r1, [r5, #0]
 8108342:	061d      	lsls	r5, r3, #24
 8108344:	d514      	bpl.n	8108370 <_printf_i+0x1ac>
 8108346:	07df      	lsls	r7, r3, #31
 8108348:	bf44      	itt	mi
 810834a:	f043 0320 	orrmi.w	r3, r3, #32
 810834e:	6023      	strmi	r3, [r4, #0]
 8108350:	b91e      	cbnz	r6, 810835a <_printf_i+0x196>
 8108352:	6823      	ldr	r3, [r4, #0]
 8108354:	f023 0320 	bic.w	r3, r3, #32
 8108358:	6023      	str	r3, [r4, #0]
 810835a:	2310      	movs	r3, #16
 810835c:	e7b0      	b.n	81082c0 <_printf_i+0xfc>
 810835e:	6823      	ldr	r3, [r4, #0]
 8108360:	f043 0320 	orr.w	r3, r3, #32
 8108364:	6023      	str	r3, [r4, #0]
 8108366:	2378      	movs	r3, #120	; 0x78
 8108368:	4828      	ldr	r0, [pc, #160]	; (810840c <_printf_i+0x248>)
 810836a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810836e:	e7e3      	b.n	8108338 <_printf_i+0x174>
 8108370:	0659      	lsls	r1, r3, #25
 8108372:	bf48      	it	mi
 8108374:	b2b6      	uxthmi	r6, r6
 8108376:	e7e6      	b.n	8108346 <_printf_i+0x182>
 8108378:	4615      	mov	r5, r2
 810837a:	e7bb      	b.n	81082f4 <_printf_i+0x130>
 810837c:	682b      	ldr	r3, [r5, #0]
 810837e:	6826      	ldr	r6, [r4, #0]
 8108380:	6961      	ldr	r1, [r4, #20]
 8108382:	1d18      	adds	r0, r3, #4
 8108384:	6028      	str	r0, [r5, #0]
 8108386:	0635      	lsls	r5, r6, #24
 8108388:	681b      	ldr	r3, [r3, #0]
 810838a:	d501      	bpl.n	8108390 <_printf_i+0x1cc>
 810838c:	6019      	str	r1, [r3, #0]
 810838e:	e002      	b.n	8108396 <_printf_i+0x1d2>
 8108390:	0670      	lsls	r0, r6, #25
 8108392:	d5fb      	bpl.n	810838c <_printf_i+0x1c8>
 8108394:	8019      	strh	r1, [r3, #0]
 8108396:	2300      	movs	r3, #0
 8108398:	6123      	str	r3, [r4, #16]
 810839a:	4615      	mov	r5, r2
 810839c:	e7ba      	b.n	8108314 <_printf_i+0x150>
 810839e:	682b      	ldr	r3, [r5, #0]
 81083a0:	1d1a      	adds	r2, r3, #4
 81083a2:	602a      	str	r2, [r5, #0]
 81083a4:	681d      	ldr	r5, [r3, #0]
 81083a6:	6862      	ldr	r2, [r4, #4]
 81083a8:	2100      	movs	r1, #0
 81083aa:	4628      	mov	r0, r5
 81083ac:	f7f7 ffa0 	bl	81002f0 <memchr>
 81083b0:	b108      	cbz	r0, 81083b6 <_printf_i+0x1f2>
 81083b2:	1b40      	subs	r0, r0, r5
 81083b4:	6060      	str	r0, [r4, #4]
 81083b6:	6863      	ldr	r3, [r4, #4]
 81083b8:	6123      	str	r3, [r4, #16]
 81083ba:	2300      	movs	r3, #0
 81083bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81083c0:	e7a8      	b.n	8108314 <_printf_i+0x150>
 81083c2:	6923      	ldr	r3, [r4, #16]
 81083c4:	462a      	mov	r2, r5
 81083c6:	4649      	mov	r1, r9
 81083c8:	4640      	mov	r0, r8
 81083ca:	47d0      	blx	sl
 81083cc:	3001      	adds	r0, #1
 81083ce:	d0ab      	beq.n	8108328 <_printf_i+0x164>
 81083d0:	6823      	ldr	r3, [r4, #0]
 81083d2:	079b      	lsls	r3, r3, #30
 81083d4:	d413      	bmi.n	81083fe <_printf_i+0x23a>
 81083d6:	68e0      	ldr	r0, [r4, #12]
 81083d8:	9b03      	ldr	r3, [sp, #12]
 81083da:	4298      	cmp	r0, r3
 81083dc:	bfb8      	it	lt
 81083de:	4618      	movlt	r0, r3
 81083e0:	e7a4      	b.n	810832c <_printf_i+0x168>
 81083e2:	2301      	movs	r3, #1
 81083e4:	4632      	mov	r2, r6
 81083e6:	4649      	mov	r1, r9
 81083e8:	4640      	mov	r0, r8
 81083ea:	47d0      	blx	sl
 81083ec:	3001      	adds	r0, #1
 81083ee:	d09b      	beq.n	8108328 <_printf_i+0x164>
 81083f0:	3501      	adds	r5, #1
 81083f2:	68e3      	ldr	r3, [r4, #12]
 81083f4:	9903      	ldr	r1, [sp, #12]
 81083f6:	1a5b      	subs	r3, r3, r1
 81083f8:	42ab      	cmp	r3, r5
 81083fa:	dcf2      	bgt.n	81083e2 <_printf_i+0x21e>
 81083fc:	e7eb      	b.n	81083d6 <_printf_i+0x212>
 81083fe:	2500      	movs	r5, #0
 8108400:	f104 0619 	add.w	r6, r4, #25
 8108404:	e7f5      	b.n	81083f2 <_printf_i+0x22e>
 8108406:	bf00      	nop
 8108408:	0810c672 	.word	0x0810c672
 810840c:	0810c683 	.word	0x0810c683

08108410 <_scanf_float>:
 8108410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108414:	b087      	sub	sp, #28
 8108416:	4617      	mov	r7, r2
 8108418:	9303      	str	r3, [sp, #12]
 810841a:	688b      	ldr	r3, [r1, #8]
 810841c:	1e5a      	subs	r2, r3, #1
 810841e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8108422:	bf83      	ittte	hi
 8108424:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8108428:	195b      	addhi	r3, r3, r5
 810842a:	9302      	strhi	r3, [sp, #8]
 810842c:	2300      	movls	r3, #0
 810842e:	bf86      	itte	hi
 8108430:	f240 135d 	movwhi	r3, #349	; 0x15d
 8108434:	608b      	strhi	r3, [r1, #8]
 8108436:	9302      	strls	r3, [sp, #8]
 8108438:	680b      	ldr	r3, [r1, #0]
 810843a:	468b      	mov	fp, r1
 810843c:	2500      	movs	r5, #0
 810843e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8108442:	f84b 3b1c 	str.w	r3, [fp], #28
 8108446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810844a:	4680      	mov	r8, r0
 810844c:	460c      	mov	r4, r1
 810844e:	465e      	mov	r6, fp
 8108450:	46aa      	mov	sl, r5
 8108452:	46a9      	mov	r9, r5
 8108454:	9501      	str	r5, [sp, #4]
 8108456:	68a2      	ldr	r2, [r4, #8]
 8108458:	b152      	cbz	r2, 8108470 <_scanf_float+0x60>
 810845a:	683b      	ldr	r3, [r7, #0]
 810845c:	781b      	ldrb	r3, [r3, #0]
 810845e:	2b4e      	cmp	r3, #78	; 0x4e
 8108460:	d864      	bhi.n	810852c <_scanf_float+0x11c>
 8108462:	2b40      	cmp	r3, #64	; 0x40
 8108464:	d83c      	bhi.n	81084e0 <_scanf_float+0xd0>
 8108466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810846a:	b2c8      	uxtb	r0, r1
 810846c:	280e      	cmp	r0, #14
 810846e:	d93a      	bls.n	81084e6 <_scanf_float+0xd6>
 8108470:	f1b9 0f00 	cmp.w	r9, #0
 8108474:	d003      	beq.n	810847e <_scanf_float+0x6e>
 8108476:	6823      	ldr	r3, [r4, #0]
 8108478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810847c:	6023      	str	r3, [r4, #0]
 810847e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108482:	f1ba 0f01 	cmp.w	sl, #1
 8108486:	f200 8113 	bhi.w	81086b0 <_scanf_float+0x2a0>
 810848a:	455e      	cmp	r6, fp
 810848c:	f200 8105 	bhi.w	810869a <_scanf_float+0x28a>
 8108490:	2501      	movs	r5, #1
 8108492:	4628      	mov	r0, r5
 8108494:	b007      	add	sp, #28
 8108496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810849a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810849e:	2a0d      	cmp	r2, #13
 81084a0:	d8e6      	bhi.n	8108470 <_scanf_float+0x60>
 81084a2:	a101      	add	r1, pc, #4	; (adr r1, 81084a8 <_scanf_float+0x98>)
 81084a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81084a8:	081085e7 	.word	0x081085e7
 81084ac:	08108471 	.word	0x08108471
 81084b0:	08108471 	.word	0x08108471
 81084b4:	08108471 	.word	0x08108471
 81084b8:	08108647 	.word	0x08108647
 81084bc:	0810861f 	.word	0x0810861f
 81084c0:	08108471 	.word	0x08108471
 81084c4:	08108471 	.word	0x08108471
 81084c8:	081085f5 	.word	0x081085f5
 81084cc:	08108471 	.word	0x08108471
 81084d0:	08108471 	.word	0x08108471
 81084d4:	08108471 	.word	0x08108471
 81084d8:	08108471 	.word	0x08108471
 81084dc:	081085ad 	.word	0x081085ad
 81084e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 81084e4:	e7db      	b.n	810849e <_scanf_float+0x8e>
 81084e6:	290e      	cmp	r1, #14
 81084e8:	d8c2      	bhi.n	8108470 <_scanf_float+0x60>
 81084ea:	a001      	add	r0, pc, #4	; (adr r0, 81084f0 <_scanf_float+0xe0>)
 81084ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 81084f0:	0810859f 	.word	0x0810859f
 81084f4:	08108471 	.word	0x08108471
 81084f8:	0810859f 	.word	0x0810859f
 81084fc:	08108633 	.word	0x08108633
 8108500:	08108471 	.word	0x08108471
 8108504:	0810854d 	.word	0x0810854d
 8108508:	08108589 	.word	0x08108589
 810850c:	08108589 	.word	0x08108589
 8108510:	08108589 	.word	0x08108589
 8108514:	08108589 	.word	0x08108589
 8108518:	08108589 	.word	0x08108589
 810851c:	08108589 	.word	0x08108589
 8108520:	08108589 	.word	0x08108589
 8108524:	08108589 	.word	0x08108589
 8108528:	08108589 	.word	0x08108589
 810852c:	2b6e      	cmp	r3, #110	; 0x6e
 810852e:	d809      	bhi.n	8108544 <_scanf_float+0x134>
 8108530:	2b60      	cmp	r3, #96	; 0x60
 8108532:	d8b2      	bhi.n	810849a <_scanf_float+0x8a>
 8108534:	2b54      	cmp	r3, #84	; 0x54
 8108536:	d077      	beq.n	8108628 <_scanf_float+0x218>
 8108538:	2b59      	cmp	r3, #89	; 0x59
 810853a:	d199      	bne.n	8108470 <_scanf_float+0x60>
 810853c:	2d07      	cmp	r5, #7
 810853e:	d197      	bne.n	8108470 <_scanf_float+0x60>
 8108540:	2508      	movs	r5, #8
 8108542:	e029      	b.n	8108598 <_scanf_float+0x188>
 8108544:	2b74      	cmp	r3, #116	; 0x74
 8108546:	d06f      	beq.n	8108628 <_scanf_float+0x218>
 8108548:	2b79      	cmp	r3, #121	; 0x79
 810854a:	e7f6      	b.n	810853a <_scanf_float+0x12a>
 810854c:	6821      	ldr	r1, [r4, #0]
 810854e:	05c8      	lsls	r0, r1, #23
 8108550:	d51a      	bpl.n	8108588 <_scanf_float+0x178>
 8108552:	9b02      	ldr	r3, [sp, #8]
 8108554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108558:	6021      	str	r1, [r4, #0]
 810855a:	f109 0901 	add.w	r9, r9, #1
 810855e:	b11b      	cbz	r3, 8108568 <_scanf_float+0x158>
 8108560:	3b01      	subs	r3, #1
 8108562:	3201      	adds	r2, #1
 8108564:	9302      	str	r3, [sp, #8]
 8108566:	60a2      	str	r2, [r4, #8]
 8108568:	68a3      	ldr	r3, [r4, #8]
 810856a:	3b01      	subs	r3, #1
 810856c:	60a3      	str	r3, [r4, #8]
 810856e:	6923      	ldr	r3, [r4, #16]
 8108570:	3301      	adds	r3, #1
 8108572:	6123      	str	r3, [r4, #16]
 8108574:	687b      	ldr	r3, [r7, #4]
 8108576:	3b01      	subs	r3, #1
 8108578:	2b00      	cmp	r3, #0
 810857a:	607b      	str	r3, [r7, #4]
 810857c:	f340 8084 	ble.w	8108688 <_scanf_float+0x278>
 8108580:	683b      	ldr	r3, [r7, #0]
 8108582:	3301      	adds	r3, #1
 8108584:	603b      	str	r3, [r7, #0]
 8108586:	e766      	b.n	8108456 <_scanf_float+0x46>
 8108588:	eb1a 0f05 	cmn.w	sl, r5
 810858c:	f47f af70 	bne.w	8108470 <_scanf_float+0x60>
 8108590:	6822      	ldr	r2, [r4, #0]
 8108592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8108596:	6022      	str	r2, [r4, #0]
 8108598:	f806 3b01 	strb.w	r3, [r6], #1
 810859c:	e7e4      	b.n	8108568 <_scanf_float+0x158>
 810859e:	6822      	ldr	r2, [r4, #0]
 81085a0:	0610      	lsls	r0, r2, #24
 81085a2:	f57f af65 	bpl.w	8108470 <_scanf_float+0x60>
 81085a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81085aa:	e7f4      	b.n	8108596 <_scanf_float+0x186>
 81085ac:	f1ba 0f00 	cmp.w	sl, #0
 81085b0:	d10e      	bne.n	81085d0 <_scanf_float+0x1c0>
 81085b2:	f1b9 0f00 	cmp.w	r9, #0
 81085b6:	d10e      	bne.n	81085d6 <_scanf_float+0x1c6>
 81085b8:	6822      	ldr	r2, [r4, #0]
 81085ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81085be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81085c2:	d108      	bne.n	81085d6 <_scanf_float+0x1c6>
 81085c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81085c8:	6022      	str	r2, [r4, #0]
 81085ca:	f04f 0a01 	mov.w	sl, #1
 81085ce:	e7e3      	b.n	8108598 <_scanf_float+0x188>
 81085d0:	f1ba 0f02 	cmp.w	sl, #2
 81085d4:	d055      	beq.n	8108682 <_scanf_float+0x272>
 81085d6:	2d01      	cmp	r5, #1
 81085d8:	d002      	beq.n	81085e0 <_scanf_float+0x1d0>
 81085da:	2d04      	cmp	r5, #4
 81085dc:	f47f af48 	bne.w	8108470 <_scanf_float+0x60>
 81085e0:	3501      	adds	r5, #1
 81085e2:	b2ed      	uxtb	r5, r5
 81085e4:	e7d8      	b.n	8108598 <_scanf_float+0x188>
 81085e6:	f1ba 0f01 	cmp.w	sl, #1
 81085ea:	f47f af41 	bne.w	8108470 <_scanf_float+0x60>
 81085ee:	f04f 0a02 	mov.w	sl, #2
 81085f2:	e7d1      	b.n	8108598 <_scanf_float+0x188>
 81085f4:	b97d      	cbnz	r5, 8108616 <_scanf_float+0x206>
 81085f6:	f1b9 0f00 	cmp.w	r9, #0
 81085fa:	f47f af3c 	bne.w	8108476 <_scanf_float+0x66>
 81085fe:	6822      	ldr	r2, [r4, #0]
 8108600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108608:	f47f af39 	bne.w	810847e <_scanf_float+0x6e>
 810860c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108610:	6022      	str	r2, [r4, #0]
 8108612:	2501      	movs	r5, #1
 8108614:	e7c0      	b.n	8108598 <_scanf_float+0x188>
 8108616:	2d03      	cmp	r5, #3
 8108618:	d0e2      	beq.n	81085e0 <_scanf_float+0x1d0>
 810861a:	2d05      	cmp	r5, #5
 810861c:	e7de      	b.n	81085dc <_scanf_float+0x1cc>
 810861e:	2d02      	cmp	r5, #2
 8108620:	f47f af26 	bne.w	8108470 <_scanf_float+0x60>
 8108624:	2503      	movs	r5, #3
 8108626:	e7b7      	b.n	8108598 <_scanf_float+0x188>
 8108628:	2d06      	cmp	r5, #6
 810862a:	f47f af21 	bne.w	8108470 <_scanf_float+0x60>
 810862e:	2507      	movs	r5, #7
 8108630:	e7b2      	b.n	8108598 <_scanf_float+0x188>
 8108632:	6822      	ldr	r2, [r4, #0]
 8108634:	0591      	lsls	r1, r2, #22
 8108636:	f57f af1b 	bpl.w	8108470 <_scanf_float+0x60>
 810863a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810863e:	6022      	str	r2, [r4, #0]
 8108640:	f8cd 9004 	str.w	r9, [sp, #4]
 8108644:	e7a8      	b.n	8108598 <_scanf_float+0x188>
 8108646:	6822      	ldr	r2, [r4, #0]
 8108648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810864c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108650:	d006      	beq.n	8108660 <_scanf_float+0x250>
 8108652:	0550      	lsls	r0, r2, #21
 8108654:	f57f af0c 	bpl.w	8108470 <_scanf_float+0x60>
 8108658:	f1b9 0f00 	cmp.w	r9, #0
 810865c:	f43f af0f 	beq.w	810847e <_scanf_float+0x6e>
 8108660:	0591      	lsls	r1, r2, #22
 8108662:	bf58      	it	pl
 8108664:	9901      	ldrpl	r1, [sp, #4]
 8108666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810866a:	bf58      	it	pl
 810866c:	eba9 0101 	subpl.w	r1, r9, r1
 8108670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8108674:	bf58      	it	pl
 8108676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810867a:	6022      	str	r2, [r4, #0]
 810867c:	f04f 0900 	mov.w	r9, #0
 8108680:	e78a      	b.n	8108598 <_scanf_float+0x188>
 8108682:	f04f 0a03 	mov.w	sl, #3
 8108686:	e787      	b.n	8108598 <_scanf_float+0x188>
 8108688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810868c:	4639      	mov	r1, r7
 810868e:	4640      	mov	r0, r8
 8108690:	4798      	blx	r3
 8108692:	2800      	cmp	r0, #0
 8108694:	f43f aedf 	beq.w	8108456 <_scanf_float+0x46>
 8108698:	e6ea      	b.n	8108470 <_scanf_float+0x60>
 810869a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810869e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81086a2:	463a      	mov	r2, r7
 81086a4:	4640      	mov	r0, r8
 81086a6:	4798      	blx	r3
 81086a8:	6923      	ldr	r3, [r4, #16]
 81086aa:	3b01      	subs	r3, #1
 81086ac:	6123      	str	r3, [r4, #16]
 81086ae:	e6ec      	b.n	810848a <_scanf_float+0x7a>
 81086b0:	1e6b      	subs	r3, r5, #1
 81086b2:	2b06      	cmp	r3, #6
 81086b4:	d825      	bhi.n	8108702 <_scanf_float+0x2f2>
 81086b6:	2d02      	cmp	r5, #2
 81086b8:	d836      	bhi.n	8108728 <_scanf_float+0x318>
 81086ba:	455e      	cmp	r6, fp
 81086bc:	f67f aee8 	bls.w	8108490 <_scanf_float+0x80>
 81086c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81086c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81086c8:	463a      	mov	r2, r7
 81086ca:	4640      	mov	r0, r8
 81086cc:	4798      	blx	r3
 81086ce:	6923      	ldr	r3, [r4, #16]
 81086d0:	3b01      	subs	r3, #1
 81086d2:	6123      	str	r3, [r4, #16]
 81086d4:	e7f1      	b.n	81086ba <_scanf_float+0x2aa>
 81086d6:	9802      	ldr	r0, [sp, #8]
 81086d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81086dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81086e0:	9002      	str	r0, [sp, #8]
 81086e2:	463a      	mov	r2, r7
 81086e4:	4640      	mov	r0, r8
 81086e6:	4798      	blx	r3
 81086e8:	6923      	ldr	r3, [r4, #16]
 81086ea:	3b01      	subs	r3, #1
 81086ec:	6123      	str	r3, [r4, #16]
 81086ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 81086f2:	fa5f fa8a 	uxtb.w	sl, sl
 81086f6:	f1ba 0f02 	cmp.w	sl, #2
 81086fa:	d1ec      	bne.n	81086d6 <_scanf_float+0x2c6>
 81086fc:	3d03      	subs	r5, #3
 81086fe:	b2ed      	uxtb	r5, r5
 8108700:	1b76      	subs	r6, r6, r5
 8108702:	6823      	ldr	r3, [r4, #0]
 8108704:	05da      	lsls	r2, r3, #23
 8108706:	d52f      	bpl.n	8108768 <_scanf_float+0x358>
 8108708:	055b      	lsls	r3, r3, #21
 810870a:	d510      	bpl.n	810872e <_scanf_float+0x31e>
 810870c:	455e      	cmp	r6, fp
 810870e:	f67f aebf 	bls.w	8108490 <_scanf_float+0x80>
 8108712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810871a:	463a      	mov	r2, r7
 810871c:	4640      	mov	r0, r8
 810871e:	4798      	blx	r3
 8108720:	6923      	ldr	r3, [r4, #16]
 8108722:	3b01      	subs	r3, #1
 8108724:	6123      	str	r3, [r4, #16]
 8108726:	e7f1      	b.n	810870c <_scanf_float+0x2fc>
 8108728:	46aa      	mov	sl, r5
 810872a:	9602      	str	r6, [sp, #8]
 810872c:	e7df      	b.n	81086ee <_scanf_float+0x2de>
 810872e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8108732:	6923      	ldr	r3, [r4, #16]
 8108734:	2965      	cmp	r1, #101	; 0x65
 8108736:	f103 33ff 	add.w	r3, r3, #4294967295
 810873a:	f106 35ff 	add.w	r5, r6, #4294967295
 810873e:	6123      	str	r3, [r4, #16]
 8108740:	d00c      	beq.n	810875c <_scanf_float+0x34c>
 8108742:	2945      	cmp	r1, #69	; 0x45
 8108744:	d00a      	beq.n	810875c <_scanf_float+0x34c>
 8108746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810874a:	463a      	mov	r2, r7
 810874c:	4640      	mov	r0, r8
 810874e:	4798      	blx	r3
 8108750:	6923      	ldr	r3, [r4, #16]
 8108752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8108756:	3b01      	subs	r3, #1
 8108758:	1eb5      	subs	r5, r6, #2
 810875a:	6123      	str	r3, [r4, #16]
 810875c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108760:	463a      	mov	r2, r7
 8108762:	4640      	mov	r0, r8
 8108764:	4798      	blx	r3
 8108766:	462e      	mov	r6, r5
 8108768:	6825      	ldr	r5, [r4, #0]
 810876a:	f015 0510 	ands.w	r5, r5, #16
 810876e:	d159      	bne.n	8108824 <_scanf_float+0x414>
 8108770:	7035      	strb	r5, [r6, #0]
 8108772:	6823      	ldr	r3, [r4, #0]
 8108774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8108778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810877c:	d11b      	bne.n	81087b6 <_scanf_float+0x3a6>
 810877e:	9b01      	ldr	r3, [sp, #4]
 8108780:	454b      	cmp	r3, r9
 8108782:	eba3 0209 	sub.w	r2, r3, r9
 8108786:	d123      	bne.n	81087d0 <_scanf_float+0x3c0>
 8108788:	2200      	movs	r2, #0
 810878a:	4659      	mov	r1, fp
 810878c:	4640      	mov	r0, r8
 810878e:	f000 ff25 	bl	81095dc <_strtod_r>
 8108792:	6822      	ldr	r2, [r4, #0]
 8108794:	9b03      	ldr	r3, [sp, #12]
 8108796:	f012 0f02 	tst.w	r2, #2
 810879a:	ec57 6b10 	vmov	r6, r7, d0
 810879e:	681b      	ldr	r3, [r3, #0]
 81087a0:	d021      	beq.n	81087e6 <_scanf_float+0x3d6>
 81087a2:	9903      	ldr	r1, [sp, #12]
 81087a4:	1d1a      	adds	r2, r3, #4
 81087a6:	600a      	str	r2, [r1, #0]
 81087a8:	681b      	ldr	r3, [r3, #0]
 81087aa:	e9c3 6700 	strd	r6, r7, [r3]
 81087ae:	68e3      	ldr	r3, [r4, #12]
 81087b0:	3301      	adds	r3, #1
 81087b2:	60e3      	str	r3, [r4, #12]
 81087b4:	e66d      	b.n	8108492 <_scanf_float+0x82>
 81087b6:	9b04      	ldr	r3, [sp, #16]
 81087b8:	2b00      	cmp	r3, #0
 81087ba:	d0e5      	beq.n	8108788 <_scanf_float+0x378>
 81087bc:	9905      	ldr	r1, [sp, #20]
 81087be:	230a      	movs	r3, #10
 81087c0:	462a      	mov	r2, r5
 81087c2:	3101      	adds	r1, #1
 81087c4:	4640      	mov	r0, r8
 81087c6:	f000 ff91 	bl	81096ec <_strtol_r>
 81087ca:	9b04      	ldr	r3, [sp, #16]
 81087cc:	9e05      	ldr	r6, [sp, #20]
 81087ce:	1ac2      	subs	r2, r0, r3
 81087d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81087d4:	429e      	cmp	r6, r3
 81087d6:	bf28      	it	cs
 81087d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81087dc:	4912      	ldr	r1, [pc, #72]	; (8108828 <_scanf_float+0x418>)
 81087de:	4630      	mov	r0, r6
 81087e0:	f000 f8ba 	bl	8108958 <siprintf>
 81087e4:	e7d0      	b.n	8108788 <_scanf_float+0x378>
 81087e6:	9903      	ldr	r1, [sp, #12]
 81087e8:	f012 0f04 	tst.w	r2, #4
 81087ec:	f103 0204 	add.w	r2, r3, #4
 81087f0:	600a      	str	r2, [r1, #0]
 81087f2:	d1d9      	bne.n	81087a8 <_scanf_float+0x398>
 81087f4:	f8d3 8000 	ldr.w	r8, [r3]
 81087f8:	ee10 2a10 	vmov	r2, s0
 81087fc:	ee10 0a10 	vmov	r0, s0
 8108800:	463b      	mov	r3, r7
 8108802:	4639      	mov	r1, r7
 8108804:	f7f8 fa1a 	bl	8100c3c <__aeabi_dcmpun>
 8108808:	b128      	cbz	r0, 8108816 <_scanf_float+0x406>
 810880a:	4808      	ldr	r0, [pc, #32]	; (810882c <_scanf_float+0x41c>)
 810880c:	f000 f89e 	bl	810894c <nanf>
 8108810:	ed88 0a00 	vstr	s0, [r8]
 8108814:	e7cb      	b.n	81087ae <_scanf_float+0x39e>
 8108816:	4630      	mov	r0, r6
 8108818:	4639      	mov	r1, r7
 810881a:	f7f8 fa6d 	bl	8100cf8 <__aeabi_d2f>
 810881e:	f8c8 0000 	str.w	r0, [r8]
 8108822:	e7c4      	b.n	81087ae <_scanf_float+0x39e>
 8108824:	2500      	movs	r5, #0
 8108826:	e634      	b.n	8108492 <_scanf_float+0x82>
 8108828:	0810c694 	.word	0x0810c694
 810882c:	0810cb08 	.word	0x0810cb08

08108830 <iprintf>:
 8108830:	b40f      	push	{r0, r1, r2, r3}
 8108832:	4b0a      	ldr	r3, [pc, #40]	; (810885c <iprintf+0x2c>)
 8108834:	b513      	push	{r0, r1, r4, lr}
 8108836:	681c      	ldr	r4, [r3, #0]
 8108838:	b124      	cbz	r4, 8108844 <iprintf+0x14>
 810883a:	69a3      	ldr	r3, [r4, #24]
 810883c:	b913      	cbnz	r3, 8108844 <iprintf+0x14>
 810883e:	4620      	mov	r0, r4
 8108840:	f001 ffaa 	bl	810a798 <__sinit>
 8108844:	ab05      	add	r3, sp, #20
 8108846:	9a04      	ldr	r2, [sp, #16]
 8108848:	68a1      	ldr	r1, [r4, #8]
 810884a:	9301      	str	r3, [sp, #4]
 810884c:	4620      	mov	r0, r4
 810884e:	f003 fb81 	bl	810bf54 <_vfiprintf_r>
 8108852:	b002      	add	sp, #8
 8108854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108858:	b004      	add	sp, #16
 810885a:	4770      	bx	lr
 810885c:	1000001c 	.word	0x1000001c

08108860 <_puts_r>:
 8108860:	b570      	push	{r4, r5, r6, lr}
 8108862:	460e      	mov	r6, r1
 8108864:	4605      	mov	r5, r0
 8108866:	b118      	cbz	r0, 8108870 <_puts_r+0x10>
 8108868:	6983      	ldr	r3, [r0, #24]
 810886a:	b90b      	cbnz	r3, 8108870 <_puts_r+0x10>
 810886c:	f001 ff94 	bl	810a798 <__sinit>
 8108870:	69ab      	ldr	r3, [r5, #24]
 8108872:	68ac      	ldr	r4, [r5, #8]
 8108874:	b913      	cbnz	r3, 810887c <_puts_r+0x1c>
 8108876:	4628      	mov	r0, r5
 8108878:	f001 ff8e 	bl	810a798 <__sinit>
 810887c:	4b2c      	ldr	r3, [pc, #176]	; (8108930 <_puts_r+0xd0>)
 810887e:	429c      	cmp	r4, r3
 8108880:	d120      	bne.n	81088c4 <_puts_r+0x64>
 8108882:	686c      	ldr	r4, [r5, #4]
 8108884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8108886:	07db      	lsls	r3, r3, #31
 8108888:	d405      	bmi.n	8108896 <_puts_r+0x36>
 810888a:	89a3      	ldrh	r3, [r4, #12]
 810888c:	0598      	lsls	r0, r3, #22
 810888e:	d402      	bmi.n	8108896 <_puts_r+0x36>
 8108890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108892:	f002 fb92 	bl	810afba <__retarget_lock_acquire_recursive>
 8108896:	89a3      	ldrh	r3, [r4, #12]
 8108898:	0719      	lsls	r1, r3, #28
 810889a:	d51d      	bpl.n	81088d8 <_puts_r+0x78>
 810889c:	6923      	ldr	r3, [r4, #16]
 810889e:	b1db      	cbz	r3, 81088d8 <_puts_r+0x78>
 81088a0:	3e01      	subs	r6, #1
 81088a2:	68a3      	ldr	r3, [r4, #8]
 81088a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 81088a8:	3b01      	subs	r3, #1
 81088aa:	60a3      	str	r3, [r4, #8]
 81088ac:	bb39      	cbnz	r1, 81088fe <_puts_r+0x9e>
 81088ae:	2b00      	cmp	r3, #0
 81088b0:	da38      	bge.n	8108924 <_puts_r+0xc4>
 81088b2:	4622      	mov	r2, r4
 81088b4:	210a      	movs	r1, #10
 81088b6:	4628      	mov	r0, r5
 81088b8:	f000 ff1a 	bl	81096f0 <__swbuf_r>
 81088bc:	3001      	adds	r0, #1
 81088be:	d011      	beq.n	81088e4 <_puts_r+0x84>
 81088c0:	250a      	movs	r5, #10
 81088c2:	e011      	b.n	81088e8 <_puts_r+0x88>
 81088c4:	4b1b      	ldr	r3, [pc, #108]	; (8108934 <_puts_r+0xd4>)
 81088c6:	429c      	cmp	r4, r3
 81088c8:	d101      	bne.n	81088ce <_puts_r+0x6e>
 81088ca:	68ac      	ldr	r4, [r5, #8]
 81088cc:	e7da      	b.n	8108884 <_puts_r+0x24>
 81088ce:	4b1a      	ldr	r3, [pc, #104]	; (8108938 <_puts_r+0xd8>)
 81088d0:	429c      	cmp	r4, r3
 81088d2:	bf08      	it	eq
 81088d4:	68ec      	ldreq	r4, [r5, #12]
 81088d6:	e7d5      	b.n	8108884 <_puts_r+0x24>
 81088d8:	4621      	mov	r1, r4
 81088da:	4628      	mov	r0, r5
 81088dc:	f000 ff5a 	bl	8109794 <__swsetup_r>
 81088e0:	2800      	cmp	r0, #0
 81088e2:	d0dd      	beq.n	81088a0 <_puts_r+0x40>
 81088e4:	f04f 35ff 	mov.w	r5, #4294967295
 81088e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81088ea:	07da      	lsls	r2, r3, #31
 81088ec:	d405      	bmi.n	81088fa <_puts_r+0x9a>
 81088ee:	89a3      	ldrh	r3, [r4, #12]
 81088f0:	059b      	lsls	r3, r3, #22
 81088f2:	d402      	bmi.n	81088fa <_puts_r+0x9a>
 81088f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81088f6:	f002 fb61 	bl	810afbc <__retarget_lock_release_recursive>
 81088fa:	4628      	mov	r0, r5
 81088fc:	bd70      	pop	{r4, r5, r6, pc}
 81088fe:	2b00      	cmp	r3, #0
 8108900:	da04      	bge.n	810890c <_puts_r+0xac>
 8108902:	69a2      	ldr	r2, [r4, #24]
 8108904:	429a      	cmp	r2, r3
 8108906:	dc06      	bgt.n	8108916 <_puts_r+0xb6>
 8108908:	290a      	cmp	r1, #10
 810890a:	d004      	beq.n	8108916 <_puts_r+0xb6>
 810890c:	6823      	ldr	r3, [r4, #0]
 810890e:	1c5a      	adds	r2, r3, #1
 8108910:	6022      	str	r2, [r4, #0]
 8108912:	7019      	strb	r1, [r3, #0]
 8108914:	e7c5      	b.n	81088a2 <_puts_r+0x42>
 8108916:	4622      	mov	r2, r4
 8108918:	4628      	mov	r0, r5
 810891a:	f000 fee9 	bl	81096f0 <__swbuf_r>
 810891e:	3001      	adds	r0, #1
 8108920:	d1bf      	bne.n	81088a2 <_puts_r+0x42>
 8108922:	e7df      	b.n	81088e4 <_puts_r+0x84>
 8108924:	6823      	ldr	r3, [r4, #0]
 8108926:	250a      	movs	r5, #10
 8108928:	1c5a      	adds	r2, r3, #1
 810892a:	6022      	str	r2, [r4, #0]
 810892c:	701d      	strb	r5, [r3, #0]
 810892e:	e7db      	b.n	81088e8 <_puts_r+0x88>
 8108930:	0810c8a4 	.word	0x0810c8a4
 8108934:	0810c8c4 	.word	0x0810c8c4
 8108938:	0810c884 	.word	0x0810c884

0810893c <puts>:
 810893c:	4b02      	ldr	r3, [pc, #8]	; (8108948 <puts+0xc>)
 810893e:	4601      	mov	r1, r0
 8108940:	6818      	ldr	r0, [r3, #0]
 8108942:	f7ff bf8d 	b.w	8108860 <_puts_r>
 8108946:	bf00      	nop
 8108948:	1000001c 	.word	0x1000001c

0810894c <nanf>:
 810894c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8108954 <nanf+0x8>
 8108950:	4770      	bx	lr
 8108952:	bf00      	nop
 8108954:	7fc00000 	.word	0x7fc00000

08108958 <siprintf>:
 8108958:	b40e      	push	{r1, r2, r3}
 810895a:	b500      	push	{lr}
 810895c:	b09c      	sub	sp, #112	; 0x70
 810895e:	ab1d      	add	r3, sp, #116	; 0x74
 8108960:	9002      	str	r0, [sp, #8]
 8108962:	9006      	str	r0, [sp, #24]
 8108964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108968:	4809      	ldr	r0, [pc, #36]	; (8108990 <siprintf+0x38>)
 810896a:	9107      	str	r1, [sp, #28]
 810896c:	9104      	str	r1, [sp, #16]
 810896e:	4909      	ldr	r1, [pc, #36]	; (8108994 <siprintf+0x3c>)
 8108970:	f853 2b04 	ldr.w	r2, [r3], #4
 8108974:	9105      	str	r1, [sp, #20]
 8108976:	6800      	ldr	r0, [r0, #0]
 8108978:	9301      	str	r3, [sp, #4]
 810897a:	a902      	add	r1, sp, #8
 810897c:	f003 f9c0 	bl	810bd00 <_svfiprintf_r>
 8108980:	9b02      	ldr	r3, [sp, #8]
 8108982:	2200      	movs	r2, #0
 8108984:	701a      	strb	r2, [r3, #0]
 8108986:	b01c      	add	sp, #112	; 0x70
 8108988:	f85d eb04 	ldr.w	lr, [sp], #4
 810898c:	b003      	add	sp, #12
 810898e:	4770      	bx	lr
 8108990:	1000001c 	.word	0x1000001c
 8108994:	ffff0208 	.word	0xffff0208

08108998 <sulp>:
 8108998:	b570      	push	{r4, r5, r6, lr}
 810899a:	4604      	mov	r4, r0
 810899c:	460d      	mov	r5, r1
 810899e:	ec45 4b10 	vmov	d0, r4, r5
 81089a2:	4616      	mov	r6, r2
 81089a4:	f002 ff0a 	bl	810b7bc <__ulp>
 81089a8:	ec51 0b10 	vmov	r0, r1, d0
 81089ac:	b17e      	cbz	r6, 81089ce <sulp+0x36>
 81089ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 81089b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81089b6:	2b00      	cmp	r3, #0
 81089b8:	dd09      	ble.n	81089ce <sulp+0x36>
 81089ba:	051b      	lsls	r3, r3, #20
 81089bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 81089c0:	2400      	movs	r4, #0
 81089c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 81089c6:	4622      	mov	r2, r4
 81089c8:	462b      	mov	r3, r5
 81089ca:	f7f7 fe9d 	bl	8100708 <__aeabi_dmul>
 81089ce:	bd70      	pop	{r4, r5, r6, pc}

081089d0 <_strtod_l>:
 81089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81089d4:	ed2d 8b02 	vpush	{d8}
 81089d8:	b09d      	sub	sp, #116	; 0x74
 81089da:	461f      	mov	r7, r3
 81089dc:	2300      	movs	r3, #0
 81089de:	9318      	str	r3, [sp, #96]	; 0x60
 81089e0:	4ba2      	ldr	r3, [pc, #648]	; (8108c6c <_strtod_l+0x29c>)
 81089e2:	9213      	str	r2, [sp, #76]	; 0x4c
 81089e4:	681b      	ldr	r3, [r3, #0]
 81089e6:	9305      	str	r3, [sp, #20]
 81089e8:	4604      	mov	r4, r0
 81089ea:	4618      	mov	r0, r3
 81089ec:	4688      	mov	r8, r1
 81089ee:	f7f7 fc77 	bl	81002e0 <strlen>
 81089f2:	f04f 0a00 	mov.w	sl, #0
 81089f6:	4605      	mov	r5, r0
 81089f8:	f04f 0b00 	mov.w	fp, #0
 81089fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8108a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108a02:	781a      	ldrb	r2, [r3, #0]
 8108a04:	2a2b      	cmp	r2, #43	; 0x2b
 8108a06:	d04e      	beq.n	8108aa6 <_strtod_l+0xd6>
 8108a08:	d83b      	bhi.n	8108a82 <_strtod_l+0xb2>
 8108a0a:	2a0d      	cmp	r2, #13
 8108a0c:	d834      	bhi.n	8108a78 <_strtod_l+0xa8>
 8108a0e:	2a08      	cmp	r2, #8
 8108a10:	d834      	bhi.n	8108a7c <_strtod_l+0xac>
 8108a12:	2a00      	cmp	r2, #0
 8108a14:	d03e      	beq.n	8108a94 <_strtod_l+0xc4>
 8108a16:	2300      	movs	r3, #0
 8108a18:	930a      	str	r3, [sp, #40]	; 0x28
 8108a1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8108a1c:	7833      	ldrb	r3, [r6, #0]
 8108a1e:	2b30      	cmp	r3, #48	; 0x30
 8108a20:	f040 80b0 	bne.w	8108b84 <_strtod_l+0x1b4>
 8108a24:	7873      	ldrb	r3, [r6, #1]
 8108a26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8108a2a:	2b58      	cmp	r3, #88	; 0x58
 8108a2c:	d168      	bne.n	8108b00 <_strtod_l+0x130>
 8108a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108a30:	9301      	str	r3, [sp, #4]
 8108a32:	ab18      	add	r3, sp, #96	; 0x60
 8108a34:	9702      	str	r7, [sp, #8]
 8108a36:	9300      	str	r3, [sp, #0]
 8108a38:	4a8d      	ldr	r2, [pc, #564]	; (8108c70 <_strtod_l+0x2a0>)
 8108a3a:	ab19      	add	r3, sp, #100	; 0x64
 8108a3c:	a917      	add	r1, sp, #92	; 0x5c
 8108a3e:	4620      	mov	r0, r4
 8108a40:	f001 ffae 	bl	810a9a0 <__gethex>
 8108a44:	f010 0707 	ands.w	r7, r0, #7
 8108a48:	4605      	mov	r5, r0
 8108a4a:	d005      	beq.n	8108a58 <_strtod_l+0x88>
 8108a4c:	2f06      	cmp	r7, #6
 8108a4e:	d12c      	bne.n	8108aaa <_strtod_l+0xda>
 8108a50:	3601      	adds	r6, #1
 8108a52:	2300      	movs	r3, #0
 8108a54:	9617      	str	r6, [sp, #92]	; 0x5c
 8108a56:	930a      	str	r3, [sp, #40]	; 0x28
 8108a58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8108a5a:	2b00      	cmp	r3, #0
 8108a5c:	f040 8590 	bne.w	8109580 <_strtod_l+0xbb0>
 8108a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108a62:	b1eb      	cbz	r3, 8108aa0 <_strtod_l+0xd0>
 8108a64:	4652      	mov	r2, sl
 8108a66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8108a6a:	ec43 2b10 	vmov	d0, r2, r3
 8108a6e:	b01d      	add	sp, #116	; 0x74
 8108a70:	ecbd 8b02 	vpop	{d8}
 8108a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108a78:	2a20      	cmp	r2, #32
 8108a7a:	d1cc      	bne.n	8108a16 <_strtod_l+0x46>
 8108a7c:	3301      	adds	r3, #1
 8108a7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8108a80:	e7be      	b.n	8108a00 <_strtod_l+0x30>
 8108a82:	2a2d      	cmp	r2, #45	; 0x2d
 8108a84:	d1c7      	bne.n	8108a16 <_strtod_l+0x46>
 8108a86:	2201      	movs	r2, #1
 8108a88:	920a      	str	r2, [sp, #40]	; 0x28
 8108a8a:	1c5a      	adds	r2, r3, #1
 8108a8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8108a8e:	785b      	ldrb	r3, [r3, #1]
 8108a90:	2b00      	cmp	r3, #0
 8108a92:	d1c2      	bne.n	8108a1a <_strtod_l+0x4a>
 8108a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8108a96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8108a9a:	2b00      	cmp	r3, #0
 8108a9c:	f040 856e 	bne.w	810957c <_strtod_l+0xbac>
 8108aa0:	4652      	mov	r2, sl
 8108aa2:	465b      	mov	r3, fp
 8108aa4:	e7e1      	b.n	8108a6a <_strtod_l+0x9a>
 8108aa6:	2200      	movs	r2, #0
 8108aa8:	e7ee      	b.n	8108a88 <_strtod_l+0xb8>
 8108aaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108aac:	b13a      	cbz	r2, 8108abe <_strtod_l+0xee>
 8108aae:	2135      	movs	r1, #53	; 0x35
 8108ab0:	a81a      	add	r0, sp, #104	; 0x68
 8108ab2:	f002 ff8e 	bl	810b9d2 <__copybits>
 8108ab6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108ab8:	4620      	mov	r0, r4
 8108aba:	f002 fb4d 	bl	810b158 <_Bfree>
 8108abe:	3f01      	subs	r7, #1
 8108ac0:	2f04      	cmp	r7, #4
 8108ac2:	d806      	bhi.n	8108ad2 <_strtod_l+0x102>
 8108ac4:	e8df f007 	tbb	[pc, r7]
 8108ac8:	1714030a 	.word	0x1714030a
 8108acc:	0a          	.byte	0x0a
 8108acd:	00          	.byte	0x00
 8108ace:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8108ad2:	0728      	lsls	r0, r5, #28
 8108ad4:	d5c0      	bpl.n	8108a58 <_strtod_l+0x88>
 8108ad6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8108ada:	e7bd      	b.n	8108a58 <_strtod_l+0x88>
 8108adc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8108ae0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8108ae2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8108ae6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8108aea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8108aee:	e7f0      	b.n	8108ad2 <_strtod_l+0x102>
 8108af0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8108c74 <_strtod_l+0x2a4>
 8108af4:	e7ed      	b.n	8108ad2 <_strtod_l+0x102>
 8108af6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8108afa:	f04f 3aff 	mov.w	sl, #4294967295
 8108afe:	e7e8      	b.n	8108ad2 <_strtod_l+0x102>
 8108b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108b02:	1c5a      	adds	r2, r3, #1
 8108b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8108b06:	785b      	ldrb	r3, [r3, #1]
 8108b08:	2b30      	cmp	r3, #48	; 0x30
 8108b0a:	d0f9      	beq.n	8108b00 <_strtod_l+0x130>
 8108b0c:	2b00      	cmp	r3, #0
 8108b0e:	d0a3      	beq.n	8108a58 <_strtod_l+0x88>
 8108b10:	2301      	movs	r3, #1
 8108b12:	f04f 0900 	mov.w	r9, #0
 8108b16:	9304      	str	r3, [sp, #16]
 8108b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108b1a:	9308      	str	r3, [sp, #32]
 8108b1c:	f8cd 901c 	str.w	r9, [sp, #28]
 8108b20:	464f      	mov	r7, r9
 8108b22:	220a      	movs	r2, #10
 8108b24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8108b26:	7806      	ldrb	r6, [r0, #0]
 8108b28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8108b2c:	b2d9      	uxtb	r1, r3
 8108b2e:	2909      	cmp	r1, #9
 8108b30:	d92a      	bls.n	8108b88 <_strtod_l+0x1b8>
 8108b32:	9905      	ldr	r1, [sp, #20]
 8108b34:	462a      	mov	r2, r5
 8108b36:	f003 fb9a 	bl	810c26e <strncmp>
 8108b3a:	b398      	cbz	r0, 8108ba4 <_strtod_l+0x1d4>
 8108b3c:	2000      	movs	r0, #0
 8108b3e:	4632      	mov	r2, r6
 8108b40:	463d      	mov	r5, r7
 8108b42:	9005      	str	r0, [sp, #20]
 8108b44:	4603      	mov	r3, r0
 8108b46:	2a65      	cmp	r2, #101	; 0x65
 8108b48:	d001      	beq.n	8108b4e <_strtod_l+0x17e>
 8108b4a:	2a45      	cmp	r2, #69	; 0x45
 8108b4c:	d118      	bne.n	8108b80 <_strtod_l+0x1b0>
 8108b4e:	b91d      	cbnz	r5, 8108b58 <_strtod_l+0x188>
 8108b50:	9a04      	ldr	r2, [sp, #16]
 8108b52:	4302      	orrs	r2, r0
 8108b54:	d09e      	beq.n	8108a94 <_strtod_l+0xc4>
 8108b56:	2500      	movs	r5, #0
 8108b58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8108b5c:	f108 0201 	add.w	r2, r8, #1
 8108b60:	9217      	str	r2, [sp, #92]	; 0x5c
 8108b62:	f898 2001 	ldrb.w	r2, [r8, #1]
 8108b66:	2a2b      	cmp	r2, #43	; 0x2b
 8108b68:	d075      	beq.n	8108c56 <_strtod_l+0x286>
 8108b6a:	2a2d      	cmp	r2, #45	; 0x2d
 8108b6c:	d07b      	beq.n	8108c66 <_strtod_l+0x296>
 8108b6e:	f04f 0c00 	mov.w	ip, #0
 8108b72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8108b76:	2909      	cmp	r1, #9
 8108b78:	f240 8082 	bls.w	8108c80 <_strtod_l+0x2b0>
 8108b7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8108b80:	2600      	movs	r6, #0
 8108b82:	e09d      	b.n	8108cc0 <_strtod_l+0x2f0>
 8108b84:	2300      	movs	r3, #0
 8108b86:	e7c4      	b.n	8108b12 <_strtod_l+0x142>
 8108b88:	2f08      	cmp	r7, #8
 8108b8a:	bfd8      	it	le
 8108b8c:	9907      	ldrle	r1, [sp, #28]
 8108b8e:	f100 0001 	add.w	r0, r0, #1
 8108b92:	bfda      	itte	le
 8108b94:	fb02 3301 	mlale	r3, r2, r1, r3
 8108b98:	9307      	strle	r3, [sp, #28]
 8108b9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8108b9e:	3701      	adds	r7, #1
 8108ba0:	9017      	str	r0, [sp, #92]	; 0x5c
 8108ba2:	e7bf      	b.n	8108b24 <_strtod_l+0x154>
 8108ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108ba6:	195a      	adds	r2, r3, r5
 8108ba8:	9217      	str	r2, [sp, #92]	; 0x5c
 8108baa:	5d5a      	ldrb	r2, [r3, r5]
 8108bac:	2f00      	cmp	r7, #0
 8108bae:	d037      	beq.n	8108c20 <_strtod_l+0x250>
 8108bb0:	9005      	str	r0, [sp, #20]
 8108bb2:	463d      	mov	r5, r7
 8108bb4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8108bb8:	2b09      	cmp	r3, #9
 8108bba:	d912      	bls.n	8108be2 <_strtod_l+0x212>
 8108bbc:	2301      	movs	r3, #1
 8108bbe:	e7c2      	b.n	8108b46 <_strtod_l+0x176>
 8108bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108bc2:	1c5a      	adds	r2, r3, #1
 8108bc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8108bc6:	785a      	ldrb	r2, [r3, #1]
 8108bc8:	3001      	adds	r0, #1
 8108bca:	2a30      	cmp	r2, #48	; 0x30
 8108bcc:	d0f8      	beq.n	8108bc0 <_strtod_l+0x1f0>
 8108bce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8108bd2:	2b08      	cmp	r3, #8
 8108bd4:	f200 84d9 	bhi.w	810958a <_strtod_l+0xbba>
 8108bd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108bda:	9005      	str	r0, [sp, #20]
 8108bdc:	2000      	movs	r0, #0
 8108bde:	9308      	str	r3, [sp, #32]
 8108be0:	4605      	mov	r5, r0
 8108be2:	3a30      	subs	r2, #48	; 0x30
 8108be4:	f100 0301 	add.w	r3, r0, #1
 8108be8:	d014      	beq.n	8108c14 <_strtod_l+0x244>
 8108bea:	9905      	ldr	r1, [sp, #20]
 8108bec:	4419      	add	r1, r3
 8108bee:	9105      	str	r1, [sp, #20]
 8108bf0:	462b      	mov	r3, r5
 8108bf2:	eb00 0e05 	add.w	lr, r0, r5
 8108bf6:	210a      	movs	r1, #10
 8108bf8:	4573      	cmp	r3, lr
 8108bfa:	d113      	bne.n	8108c24 <_strtod_l+0x254>
 8108bfc:	182b      	adds	r3, r5, r0
 8108bfe:	2b08      	cmp	r3, #8
 8108c00:	f105 0501 	add.w	r5, r5, #1
 8108c04:	4405      	add	r5, r0
 8108c06:	dc1c      	bgt.n	8108c42 <_strtod_l+0x272>
 8108c08:	9907      	ldr	r1, [sp, #28]
 8108c0a:	230a      	movs	r3, #10
 8108c0c:	fb03 2301 	mla	r3, r3, r1, r2
 8108c10:	9307      	str	r3, [sp, #28]
 8108c12:	2300      	movs	r3, #0
 8108c14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8108c16:	1c51      	adds	r1, r2, #1
 8108c18:	9117      	str	r1, [sp, #92]	; 0x5c
 8108c1a:	7852      	ldrb	r2, [r2, #1]
 8108c1c:	4618      	mov	r0, r3
 8108c1e:	e7c9      	b.n	8108bb4 <_strtod_l+0x1e4>
 8108c20:	4638      	mov	r0, r7
 8108c22:	e7d2      	b.n	8108bca <_strtod_l+0x1fa>
 8108c24:	2b08      	cmp	r3, #8
 8108c26:	dc04      	bgt.n	8108c32 <_strtod_l+0x262>
 8108c28:	9e07      	ldr	r6, [sp, #28]
 8108c2a:	434e      	muls	r6, r1
 8108c2c:	9607      	str	r6, [sp, #28]
 8108c2e:	3301      	adds	r3, #1
 8108c30:	e7e2      	b.n	8108bf8 <_strtod_l+0x228>
 8108c32:	f103 0c01 	add.w	ip, r3, #1
 8108c36:	f1bc 0f10 	cmp.w	ip, #16
 8108c3a:	bfd8      	it	le
 8108c3c:	fb01 f909 	mulle.w	r9, r1, r9
 8108c40:	e7f5      	b.n	8108c2e <_strtod_l+0x25e>
 8108c42:	2d10      	cmp	r5, #16
 8108c44:	bfdc      	itt	le
 8108c46:	230a      	movle	r3, #10
 8108c48:	fb03 2909 	mlale	r9, r3, r9, r2
 8108c4c:	e7e1      	b.n	8108c12 <_strtod_l+0x242>
 8108c4e:	2300      	movs	r3, #0
 8108c50:	9305      	str	r3, [sp, #20]
 8108c52:	2301      	movs	r3, #1
 8108c54:	e77c      	b.n	8108b50 <_strtod_l+0x180>
 8108c56:	f04f 0c00 	mov.w	ip, #0
 8108c5a:	f108 0202 	add.w	r2, r8, #2
 8108c5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8108c60:	f898 2002 	ldrb.w	r2, [r8, #2]
 8108c64:	e785      	b.n	8108b72 <_strtod_l+0x1a2>
 8108c66:	f04f 0c01 	mov.w	ip, #1
 8108c6a:	e7f6      	b.n	8108c5a <_strtod_l+0x28a>
 8108c6c:	0810c94c 	.word	0x0810c94c
 8108c70:	0810c69c 	.word	0x0810c69c
 8108c74:	7ff00000 	.word	0x7ff00000
 8108c78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8108c7a:	1c51      	adds	r1, r2, #1
 8108c7c:	9117      	str	r1, [sp, #92]	; 0x5c
 8108c7e:	7852      	ldrb	r2, [r2, #1]
 8108c80:	2a30      	cmp	r2, #48	; 0x30
 8108c82:	d0f9      	beq.n	8108c78 <_strtod_l+0x2a8>
 8108c84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8108c88:	2908      	cmp	r1, #8
 8108c8a:	f63f af79 	bhi.w	8108b80 <_strtod_l+0x1b0>
 8108c8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8108c92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8108c94:	9206      	str	r2, [sp, #24]
 8108c96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8108c98:	1c51      	adds	r1, r2, #1
 8108c9a:	9117      	str	r1, [sp, #92]	; 0x5c
 8108c9c:	7852      	ldrb	r2, [r2, #1]
 8108c9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8108ca2:	2e09      	cmp	r6, #9
 8108ca4:	d937      	bls.n	8108d16 <_strtod_l+0x346>
 8108ca6:	9e06      	ldr	r6, [sp, #24]
 8108ca8:	1b89      	subs	r1, r1, r6
 8108caa:	2908      	cmp	r1, #8
 8108cac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108cb0:	dc02      	bgt.n	8108cb8 <_strtod_l+0x2e8>
 8108cb2:	4576      	cmp	r6, lr
 8108cb4:	bfa8      	it	ge
 8108cb6:	4676      	movge	r6, lr
 8108cb8:	f1bc 0f00 	cmp.w	ip, #0
 8108cbc:	d000      	beq.n	8108cc0 <_strtod_l+0x2f0>
 8108cbe:	4276      	negs	r6, r6
 8108cc0:	2d00      	cmp	r5, #0
 8108cc2:	d14d      	bne.n	8108d60 <_strtod_l+0x390>
 8108cc4:	9904      	ldr	r1, [sp, #16]
 8108cc6:	4301      	orrs	r1, r0
 8108cc8:	f47f aec6 	bne.w	8108a58 <_strtod_l+0x88>
 8108ccc:	2b00      	cmp	r3, #0
 8108cce:	f47f aee1 	bne.w	8108a94 <_strtod_l+0xc4>
 8108cd2:	2a69      	cmp	r2, #105	; 0x69
 8108cd4:	d027      	beq.n	8108d26 <_strtod_l+0x356>
 8108cd6:	dc24      	bgt.n	8108d22 <_strtod_l+0x352>
 8108cd8:	2a49      	cmp	r2, #73	; 0x49
 8108cda:	d024      	beq.n	8108d26 <_strtod_l+0x356>
 8108cdc:	2a4e      	cmp	r2, #78	; 0x4e
 8108cde:	f47f aed9 	bne.w	8108a94 <_strtod_l+0xc4>
 8108ce2:	499f      	ldr	r1, [pc, #636]	; (8108f60 <_strtod_l+0x590>)
 8108ce4:	a817      	add	r0, sp, #92	; 0x5c
 8108ce6:	f002 f8b3 	bl	810ae50 <__match>
 8108cea:	2800      	cmp	r0, #0
 8108cec:	f43f aed2 	beq.w	8108a94 <_strtod_l+0xc4>
 8108cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108cf2:	781b      	ldrb	r3, [r3, #0]
 8108cf4:	2b28      	cmp	r3, #40	; 0x28
 8108cf6:	d12d      	bne.n	8108d54 <_strtod_l+0x384>
 8108cf8:	499a      	ldr	r1, [pc, #616]	; (8108f64 <_strtod_l+0x594>)
 8108cfa:	aa1a      	add	r2, sp, #104	; 0x68
 8108cfc:	a817      	add	r0, sp, #92	; 0x5c
 8108cfe:	f002 f8bb 	bl	810ae78 <__hexnan>
 8108d02:	2805      	cmp	r0, #5
 8108d04:	d126      	bne.n	8108d54 <_strtod_l+0x384>
 8108d06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8108d08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8108d0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108d10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108d14:	e6a0      	b.n	8108a58 <_strtod_l+0x88>
 8108d16:	210a      	movs	r1, #10
 8108d18:	fb01 2e0e 	mla	lr, r1, lr, r2
 8108d1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8108d20:	e7b9      	b.n	8108c96 <_strtod_l+0x2c6>
 8108d22:	2a6e      	cmp	r2, #110	; 0x6e
 8108d24:	e7db      	b.n	8108cde <_strtod_l+0x30e>
 8108d26:	4990      	ldr	r1, [pc, #576]	; (8108f68 <_strtod_l+0x598>)
 8108d28:	a817      	add	r0, sp, #92	; 0x5c
 8108d2a:	f002 f891 	bl	810ae50 <__match>
 8108d2e:	2800      	cmp	r0, #0
 8108d30:	f43f aeb0 	beq.w	8108a94 <_strtod_l+0xc4>
 8108d34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108d36:	498d      	ldr	r1, [pc, #564]	; (8108f6c <_strtod_l+0x59c>)
 8108d38:	3b01      	subs	r3, #1
 8108d3a:	a817      	add	r0, sp, #92	; 0x5c
 8108d3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8108d3e:	f002 f887 	bl	810ae50 <__match>
 8108d42:	b910      	cbnz	r0, 8108d4a <_strtod_l+0x37a>
 8108d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8108d46:	3301      	adds	r3, #1
 8108d48:	9317      	str	r3, [sp, #92]	; 0x5c
 8108d4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8108f7c <_strtod_l+0x5ac>
 8108d4e:	f04f 0a00 	mov.w	sl, #0
 8108d52:	e681      	b.n	8108a58 <_strtod_l+0x88>
 8108d54:	4886      	ldr	r0, [pc, #536]	; (8108f70 <_strtod_l+0x5a0>)
 8108d56:	f003 fa2f 	bl	810c1b8 <nan>
 8108d5a:	ec5b ab10 	vmov	sl, fp, d0
 8108d5e:	e67b      	b.n	8108a58 <_strtod_l+0x88>
 8108d60:	9b05      	ldr	r3, [sp, #20]
 8108d62:	9807      	ldr	r0, [sp, #28]
 8108d64:	1af3      	subs	r3, r6, r3
 8108d66:	2f00      	cmp	r7, #0
 8108d68:	bf08      	it	eq
 8108d6a:	462f      	moveq	r7, r5
 8108d6c:	2d10      	cmp	r5, #16
 8108d6e:	9306      	str	r3, [sp, #24]
 8108d70:	46a8      	mov	r8, r5
 8108d72:	bfa8      	it	ge
 8108d74:	f04f 0810 	movge.w	r8, #16
 8108d78:	f7f7 fc4c 	bl	8100614 <__aeabi_ui2d>
 8108d7c:	2d09      	cmp	r5, #9
 8108d7e:	4682      	mov	sl, r0
 8108d80:	468b      	mov	fp, r1
 8108d82:	dd13      	ble.n	8108dac <_strtod_l+0x3dc>
 8108d84:	4b7b      	ldr	r3, [pc, #492]	; (8108f74 <_strtod_l+0x5a4>)
 8108d86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108d8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108d8e:	f7f7 fcbb 	bl	8100708 <__aeabi_dmul>
 8108d92:	4682      	mov	sl, r0
 8108d94:	4648      	mov	r0, r9
 8108d96:	468b      	mov	fp, r1
 8108d98:	f7f7 fc3c 	bl	8100614 <__aeabi_ui2d>
 8108d9c:	4602      	mov	r2, r0
 8108d9e:	460b      	mov	r3, r1
 8108da0:	4650      	mov	r0, sl
 8108da2:	4659      	mov	r1, fp
 8108da4:	f7f7 fafa 	bl	810039c <__adddf3>
 8108da8:	4682      	mov	sl, r0
 8108daa:	468b      	mov	fp, r1
 8108dac:	2d0f      	cmp	r5, #15
 8108dae:	dc38      	bgt.n	8108e22 <_strtod_l+0x452>
 8108db0:	9b06      	ldr	r3, [sp, #24]
 8108db2:	2b00      	cmp	r3, #0
 8108db4:	f43f ae50 	beq.w	8108a58 <_strtod_l+0x88>
 8108db8:	dd24      	ble.n	8108e04 <_strtod_l+0x434>
 8108dba:	2b16      	cmp	r3, #22
 8108dbc:	dc0b      	bgt.n	8108dd6 <_strtod_l+0x406>
 8108dbe:	496d      	ldr	r1, [pc, #436]	; (8108f74 <_strtod_l+0x5a4>)
 8108dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8108dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108dc8:	4652      	mov	r2, sl
 8108dca:	465b      	mov	r3, fp
 8108dcc:	f7f7 fc9c 	bl	8100708 <__aeabi_dmul>
 8108dd0:	4682      	mov	sl, r0
 8108dd2:	468b      	mov	fp, r1
 8108dd4:	e640      	b.n	8108a58 <_strtod_l+0x88>
 8108dd6:	9a06      	ldr	r2, [sp, #24]
 8108dd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108ddc:	4293      	cmp	r3, r2
 8108dde:	db20      	blt.n	8108e22 <_strtod_l+0x452>
 8108de0:	4c64      	ldr	r4, [pc, #400]	; (8108f74 <_strtod_l+0x5a4>)
 8108de2:	f1c5 050f 	rsb	r5, r5, #15
 8108de6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108dea:	4652      	mov	r2, sl
 8108dec:	465b      	mov	r3, fp
 8108dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108df2:	f7f7 fc89 	bl	8100708 <__aeabi_dmul>
 8108df6:	9b06      	ldr	r3, [sp, #24]
 8108df8:	1b5d      	subs	r5, r3, r5
 8108dfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108dfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108e02:	e7e3      	b.n	8108dcc <_strtod_l+0x3fc>
 8108e04:	9b06      	ldr	r3, [sp, #24]
 8108e06:	3316      	adds	r3, #22
 8108e08:	db0b      	blt.n	8108e22 <_strtod_l+0x452>
 8108e0a:	9b05      	ldr	r3, [sp, #20]
 8108e0c:	1b9e      	subs	r6, r3, r6
 8108e0e:	4b59      	ldr	r3, [pc, #356]	; (8108f74 <_strtod_l+0x5a4>)
 8108e10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8108e14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108e18:	4650      	mov	r0, sl
 8108e1a:	4659      	mov	r1, fp
 8108e1c:	f7f7 fd9e 	bl	810095c <__aeabi_ddiv>
 8108e20:	e7d6      	b.n	8108dd0 <_strtod_l+0x400>
 8108e22:	9b06      	ldr	r3, [sp, #24]
 8108e24:	eba5 0808 	sub.w	r8, r5, r8
 8108e28:	4498      	add	r8, r3
 8108e2a:	f1b8 0f00 	cmp.w	r8, #0
 8108e2e:	dd74      	ble.n	8108f1a <_strtod_l+0x54a>
 8108e30:	f018 030f 	ands.w	r3, r8, #15
 8108e34:	d00a      	beq.n	8108e4c <_strtod_l+0x47c>
 8108e36:	494f      	ldr	r1, [pc, #316]	; (8108f74 <_strtod_l+0x5a4>)
 8108e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8108e3c:	4652      	mov	r2, sl
 8108e3e:	465b      	mov	r3, fp
 8108e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108e44:	f7f7 fc60 	bl	8100708 <__aeabi_dmul>
 8108e48:	4682      	mov	sl, r0
 8108e4a:	468b      	mov	fp, r1
 8108e4c:	f038 080f 	bics.w	r8, r8, #15
 8108e50:	d04f      	beq.n	8108ef2 <_strtod_l+0x522>
 8108e52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8108e56:	dd22      	ble.n	8108e9e <_strtod_l+0x4ce>
 8108e58:	2500      	movs	r5, #0
 8108e5a:	462e      	mov	r6, r5
 8108e5c:	9507      	str	r5, [sp, #28]
 8108e5e:	9505      	str	r5, [sp, #20]
 8108e60:	2322      	movs	r3, #34	; 0x22
 8108e62:	f8df b118 	ldr.w	fp, [pc, #280]	; 8108f7c <_strtod_l+0x5ac>
 8108e66:	6023      	str	r3, [r4, #0]
 8108e68:	f04f 0a00 	mov.w	sl, #0
 8108e6c:	9b07      	ldr	r3, [sp, #28]
 8108e6e:	2b00      	cmp	r3, #0
 8108e70:	f43f adf2 	beq.w	8108a58 <_strtod_l+0x88>
 8108e74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108e76:	4620      	mov	r0, r4
 8108e78:	f002 f96e 	bl	810b158 <_Bfree>
 8108e7c:	9905      	ldr	r1, [sp, #20]
 8108e7e:	4620      	mov	r0, r4
 8108e80:	f002 f96a 	bl	810b158 <_Bfree>
 8108e84:	4631      	mov	r1, r6
 8108e86:	4620      	mov	r0, r4
 8108e88:	f002 f966 	bl	810b158 <_Bfree>
 8108e8c:	9907      	ldr	r1, [sp, #28]
 8108e8e:	4620      	mov	r0, r4
 8108e90:	f002 f962 	bl	810b158 <_Bfree>
 8108e94:	4629      	mov	r1, r5
 8108e96:	4620      	mov	r0, r4
 8108e98:	f002 f95e 	bl	810b158 <_Bfree>
 8108e9c:	e5dc      	b.n	8108a58 <_strtod_l+0x88>
 8108e9e:	4b36      	ldr	r3, [pc, #216]	; (8108f78 <_strtod_l+0x5a8>)
 8108ea0:	9304      	str	r3, [sp, #16]
 8108ea2:	2300      	movs	r3, #0
 8108ea4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108ea8:	4650      	mov	r0, sl
 8108eaa:	4659      	mov	r1, fp
 8108eac:	4699      	mov	r9, r3
 8108eae:	f1b8 0f01 	cmp.w	r8, #1
 8108eb2:	dc21      	bgt.n	8108ef8 <_strtod_l+0x528>
 8108eb4:	b10b      	cbz	r3, 8108eba <_strtod_l+0x4ea>
 8108eb6:	4682      	mov	sl, r0
 8108eb8:	468b      	mov	fp, r1
 8108eba:	4b2f      	ldr	r3, [pc, #188]	; (8108f78 <_strtod_l+0x5a8>)
 8108ebc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108ec0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108ec4:	4652      	mov	r2, sl
 8108ec6:	465b      	mov	r3, fp
 8108ec8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108ecc:	f7f7 fc1c 	bl	8100708 <__aeabi_dmul>
 8108ed0:	4b2a      	ldr	r3, [pc, #168]	; (8108f7c <_strtod_l+0x5ac>)
 8108ed2:	460a      	mov	r2, r1
 8108ed4:	400b      	ands	r3, r1
 8108ed6:	492a      	ldr	r1, [pc, #168]	; (8108f80 <_strtod_l+0x5b0>)
 8108ed8:	428b      	cmp	r3, r1
 8108eda:	4682      	mov	sl, r0
 8108edc:	d8bc      	bhi.n	8108e58 <_strtod_l+0x488>
 8108ede:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108ee2:	428b      	cmp	r3, r1
 8108ee4:	bf86      	itte	hi
 8108ee6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8108f84 <_strtod_l+0x5b4>
 8108eea:	f04f 3aff 	movhi.w	sl, #4294967295
 8108eee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108ef2:	2300      	movs	r3, #0
 8108ef4:	9304      	str	r3, [sp, #16]
 8108ef6:	e084      	b.n	8109002 <_strtod_l+0x632>
 8108ef8:	f018 0f01 	tst.w	r8, #1
 8108efc:	d005      	beq.n	8108f0a <_strtod_l+0x53a>
 8108efe:	9b04      	ldr	r3, [sp, #16]
 8108f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f04:	f7f7 fc00 	bl	8100708 <__aeabi_dmul>
 8108f08:	2301      	movs	r3, #1
 8108f0a:	9a04      	ldr	r2, [sp, #16]
 8108f0c:	3208      	adds	r2, #8
 8108f0e:	f109 0901 	add.w	r9, r9, #1
 8108f12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108f16:	9204      	str	r2, [sp, #16]
 8108f18:	e7c9      	b.n	8108eae <_strtod_l+0x4de>
 8108f1a:	d0ea      	beq.n	8108ef2 <_strtod_l+0x522>
 8108f1c:	f1c8 0800 	rsb	r8, r8, #0
 8108f20:	f018 020f 	ands.w	r2, r8, #15
 8108f24:	d00a      	beq.n	8108f3c <_strtod_l+0x56c>
 8108f26:	4b13      	ldr	r3, [pc, #76]	; (8108f74 <_strtod_l+0x5a4>)
 8108f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108f2c:	4650      	mov	r0, sl
 8108f2e:	4659      	mov	r1, fp
 8108f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f34:	f7f7 fd12 	bl	810095c <__aeabi_ddiv>
 8108f38:	4682      	mov	sl, r0
 8108f3a:	468b      	mov	fp, r1
 8108f3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8108f40:	d0d7      	beq.n	8108ef2 <_strtod_l+0x522>
 8108f42:	f1b8 0f1f 	cmp.w	r8, #31
 8108f46:	dd1f      	ble.n	8108f88 <_strtod_l+0x5b8>
 8108f48:	2500      	movs	r5, #0
 8108f4a:	462e      	mov	r6, r5
 8108f4c:	9507      	str	r5, [sp, #28]
 8108f4e:	9505      	str	r5, [sp, #20]
 8108f50:	2322      	movs	r3, #34	; 0x22
 8108f52:	f04f 0a00 	mov.w	sl, #0
 8108f56:	f04f 0b00 	mov.w	fp, #0
 8108f5a:	6023      	str	r3, [r4, #0]
 8108f5c:	e786      	b.n	8108e6c <_strtod_l+0x49c>
 8108f5e:	bf00      	nop
 8108f60:	0810c66d 	.word	0x0810c66d
 8108f64:	0810c6b0 	.word	0x0810c6b0
 8108f68:	0810c665 	.word	0x0810c665
 8108f6c:	0810c7f4 	.word	0x0810c7f4
 8108f70:	0810cb08 	.word	0x0810cb08
 8108f74:	0810c9e8 	.word	0x0810c9e8
 8108f78:	0810c9c0 	.word	0x0810c9c0
 8108f7c:	7ff00000 	.word	0x7ff00000
 8108f80:	7ca00000 	.word	0x7ca00000
 8108f84:	7fefffff 	.word	0x7fefffff
 8108f88:	f018 0310 	ands.w	r3, r8, #16
 8108f8c:	bf18      	it	ne
 8108f8e:	236a      	movne	r3, #106	; 0x6a
 8108f90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8109340 <_strtod_l+0x970>
 8108f94:	9304      	str	r3, [sp, #16]
 8108f96:	4650      	mov	r0, sl
 8108f98:	4659      	mov	r1, fp
 8108f9a:	2300      	movs	r3, #0
 8108f9c:	f018 0f01 	tst.w	r8, #1
 8108fa0:	d004      	beq.n	8108fac <_strtod_l+0x5dc>
 8108fa2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108fa6:	f7f7 fbaf 	bl	8100708 <__aeabi_dmul>
 8108faa:	2301      	movs	r3, #1
 8108fac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108fb0:	f109 0908 	add.w	r9, r9, #8
 8108fb4:	d1f2      	bne.n	8108f9c <_strtod_l+0x5cc>
 8108fb6:	b10b      	cbz	r3, 8108fbc <_strtod_l+0x5ec>
 8108fb8:	4682      	mov	sl, r0
 8108fba:	468b      	mov	fp, r1
 8108fbc:	9b04      	ldr	r3, [sp, #16]
 8108fbe:	b1c3      	cbz	r3, 8108ff2 <_strtod_l+0x622>
 8108fc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8108fc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108fc8:	2b00      	cmp	r3, #0
 8108fca:	4659      	mov	r1, fp
 8108fcc:	dd11      	ble.n	8108ff2 <_strtod_l+0x622>
 8108fce:	2b1f      	cmp	r3, #31
 8108fd0:	f340 8124 	ble.w	810921c <_strtod_l+0x84c>
 8108fd4:	2b34      	cmp	r3, #52	; 0x34
 8108fd6:	bfde      	ittt	le
 8108fd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8108fdc:	f04f 33ff 	movle.w	r3, #4294967295
 8108fe0:	fa03 f202 	lslle.w	r2, r3, r2
 8108fe4:	f04f 0a00 	mov.w	sl, #0
 8108fe8:	bfcc      	ite	gt
 8108fea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108fee:	ea02 0b01 	andle.w	fp, r2, r1
 8108ff2:	2200      	movs	r2, #0
 8108ff4:	2300      	movs	r3, #0
 8108ff6:	4650      	mov	r0, sl
 8108ff8:	4659      	mov	r1, fp
 8108ffa:	f7f7 fded 	bl	8100bd8 <__aeabi_dcmpeq>
 8108ffe:	2800      	cmp	r0, #0
 8109000:	d1a2      	bne.n	8108f48 <_strtod_l+0x578>
 8109002:	9b07      	ldr	r3, [sp, #28]
 8109004:	9300      	str	r3, [sp, #0]
 8109006:	9908      	ldr	r1, [sp, #32]
 8109008:	462b      	mov	r3, r5
 810900a:	463a      	mov	r2, r7
 810900c:	4620      	mov	r0, r4
 810900e:	f002 f90b 	bl	810b228 <__s2b>
 8109012:	9007      	str	r0, [sp, #28]
 8109014:	2800      	cmp	r0, #0
 8109016:	f43f af1f 	beq.w	8108e58 <_strtod_l+0x488>
 810901a:	9b05      	ldr	r3, [sp, #20]
 810901c:	1b9e      	subs	r6, r3, r6
 810901e:	9b06      	ldr	r3, [sp, #24]
 8109020:	2b00      	cmp	r3, #0
 8109022:	bfb4      	ite	lt
 8109024:	4633      	movlt	r3, r6
 8109026:	2300      	movge	r3, #0
 8109028:	930c      	str	r3, [sp, #48]	; 0x30
 810902a:	9b06      	ldr	r3, [sp, #24]
 810902c:	2500      	movs	r5, #0
 810902e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8109032:	9312      	str	r3, [sp, #72]	; 0x48
 8109034:	462e      	mov	r6, r5
 8109036:	9b07      	ldr	r3, [sp, #28]
 8109038:	4620      	mov	r0, r4
 810903a:	6859      	ldr	r1, [r3, #4]
 810903c:	f002 f84c 	bl	810b0d8 <_Balloc>
 8109040:	9005      	str	r0, [sp, #20]
 8109042:	2800      	cmp	r0, #0
 8109044:	f43f af0c 	beq.w	8108e60 <_strtod_l+0x490>
 8109048:	9b07      	ldr	r3, [sp, #28]
 810904a:	691a      	ldr	r2, [r3, #16]
 810904c:	3202      	adds	r2, #2
 810904e:	f103 010c 	add.w	r1, r3, #12
 8109052:	0092      	lsls	r2, r2, #2
 8109054:	300c      	adds	r0, #12
 8109056:	f002 f831 	bl	810b0bc <memcpy>
 810905a:	ec4b ab10 	vmov	d0, sl, fp
 810905e:	aa1a      	add	r2, sp, #104	; 0x68
 8109060:	a919      	add	r1, sp, #100	; 0x64
 8109062:	4620      	mov	r0, r4
 8109064:	f002 fc26 	bl	810b8b4 <__d2b>
 8109068:	ec4b ab18 	vmov	d8, sl, fp
 810906c:	9018      	str	r0, [sp, #96]	; 0x60
 810906e:	2800      	cmp	r0, #0
 8109070:	f43f aef6 	beq.w	8108e60 <_strtod_l+0x490>
 8109074:	2101      	movs	r1, #1
 8109076:	4620      	mov	r0, r4
 8109078:	f002 f970 	bl	810b35c <__i2b>
 810907c:	4606      	mov	r6, r0
 810907e:	2800      	cmp	r0, #0
 8109080:	f43f aeee 	beq.w	8108e60 <_strtod_l+0x490>
 8109084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8109086:	9904      	ldr	r1, [sp, #16]
 8109088:	2b00      	cmp	r3, #0
 810908a:	bfab      	itete	ge
 810908c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810908e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8109090:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8109092:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8109096:	bfac      	ite	ge
 8109098:	eb03 0902 	addge.w	r9, r3, r2
 810909c:	1ad7      	sublt	r7, r2, r3
 810909e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 81090a0:	eba3 0801 	sub.w	r8, r3, r1
 81090a4:	4490      	add	r8, r2
 81090a6:	4ba1      	ldr	r3, [pc, #644]	; (810932c <_strtod_l+0x95c>)
 81090a8:	f108 38ff 	add.w	r8, r8, #4294967295
 81090ac:	4598      	cmp	r8, r3
 81090ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 81090b2:	f280 80c7 	bge.w	8109244 <_strtod_l+0x874>
 81090b6:	eba3 0308 	sub.w	r3, r3, r8
 81090ba:	2b1f      	cmp	r3, #31
 81090bc:	eba2 0203 	sub.w	r2, r2, r3
 81090c0:	f04f 0101 	mov.w	r1, #1
 81090c4:	f300 80b1 	bgt.w	810922a <_strtod_l+0x85a>
 81090c8:	fa01 f303 	lsl.w	r3, r1, r3
 81090cc:	930d      	str	r3, [sp, #52]	; 0x34
 81090ce:	2300      	movs	r3, #0
 81090d0:	9308      	str	r3, [sp, #32]
 81090d2:	eb09 0802 	add.w	r8, r9, r2
 81090d6:	9b04      	ldr	r3, [sp, #16]
 81090d8:	45c1      	cmp	r9, r8
 81090da:	4417      	add	r7, r2
 81090dc:	441f      	add	r7, r3
 81090de:	464b      	mov	r3, r9
 81090e0:	bfa8      	it	ge
 81090e2:	4643      	movge	r3, r8
 81090e4:	42bb      	cmp	r3, r7
 81090e6:	bfa8      	it	ge
 81090e8:	463b      	movge	r3, r7
 81090ea:	2b00      	cmp	r3, #0
 81090ec:	bfc2      	ittt	gt
 81090ee:	eba8 0803 	subgt.w	r8, r8, r3
 81090f2:	1aff      	subgt	r7, r7, r3
 81090f4:	eba9 0903 	subgt.w	r9, r9, r3
 81090f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81090fa:	2b00      	cmp	r3, #0
 81090fc:	dd17      	ble.n	810912e <_strtod_l+0x75e>
 81090fe:	4631      	mov	r1, r6
 8109100:	461a      	mov	r2, r3
 8109102:	4620      	mov	r0, r4
 8109104:	f002 f9ea 	bl	810b4dc <__pow5mult>
 8109108:	4606      	mov	r6, r0
 810910a:	2800      	cmp	r0, #0
 810910c:	f43f aea8 	beq.w	8108e60 <_strtod_l+0x490>
 8109110:	4601      	mov	r1, r0
 8109112:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109114:	4620      	mov	r0, r4
 8109116:	f002 f937 	bl	810b388 <__multiply>
 810911a:	900b      	str	r0, [sp, #44]	; 0x2c
 810911c:	2800      	cmp	r0, #0
 810911e:	f43f ae9f 	beq.w	8108e60 <_strtod_l+0x490>
 8109122:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109124:	4620      	mov	r0, r4
 8109126:	f002 f817 	bl	810b158 <_Bfree>
 810912a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810912c:	9318      	str	r3, [sp, #96]	; 0x60
 810912e:	f1b8 0f00 	cmp.w	r8, #0
 8109132:	f300 808c 	bgt.w	810924e <_strtod_l+0x87e>
 8109136:	9b06      	ldr	r3, [sp, #24]
 8109138:	2b00      	cmp	r3, #0
 810913a:	dd08      	ble.n	810914e <_strtod_l+0x77e>
 810913c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810913e:	9905      	ldr	r1, [sp, #20]
 8109140:	4620      	mov	r0, r4
 8109142:	f002 f9cb 	bl	810b4dc <__pow5mult>
 8109146:	9005      	str	r0, [sp, #20]
 8109148:	2800      	cmp	r0, #0
 810914a:	f43f ae89 	beq.w	8108e60 <_strtod_l+0x490>
 810914e:	2f00      	cmp	r7, #0
 8109150:	dd08      	ble.n	8109164 <_strtod_l+0x794>
 8109152:	9905      	ldr	r1, [sp, #20]
 8109154:	463a      	mov	r2, r7
 8109156:	4620      	mov	r0, r4
 8109158:	f002 fa1a 	bl	810b590 <__lshift>
 810915c:	9005      	str	r0, [sp, #20]
 810915e:	2800      	cmp	r0, #0
 8109160:	f43f ae7e 	beq.w	8108e60 <_strtod_l+0x490>
 8109164:	f1b9 0f00 	cmp.w	r9, #0
 8109168:	dd08      	ble.n	810917c <_strtod_l+0x7ac>
 810916a:	4631      	mov	r1, r6
 810916c:	464a      	mov	r2, r9
 810916e:	4620      	mov	r0, r4
 8109170:	f002 fa0e 	bl	810b590 <__lshift>
 8109174:	4606      	mov	r6, r0
 8109176:	2800      	cmp	r0, #0
 8109178:	f43f ae72 	beq.w	8108e60 <_strtod_l+0x490>
 810917c:	9a05      	ldr	r2, [sp, #20]
 810917e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109180:	4620      	mov	r0, r4
 8109182:	f002 fa91 	bl	810b6a8 <__mdiff>
 8109186:	4605      	mov	r5, r0
 8109188:	2800      	cmp	r0, #0
 810918a:	f43f ae69 	beq.w	8108e60 <_strtod_l+0x490>
 810918e:	68c3      	ldr	r3, [r0, #12]
 8109190:	930b      	str	r3, [sp, #44]	; 0x2c
 8109192:	2300      	movs	r3, #0
 8109194:	60c3      	str	r3, [r0, #12]
 8109196:	4631      	mov	r1, r6
 8109198:	f002 fa6a 	bl	810b670 <__mcmp>
 810919c:	2800      	cmp	r0, #0
 810919e:	da60      	bge.n	8109262 <_strtod_l+0x892>
 81091a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81091a2:	ea53 030a 	orrs.w	r3, r3, sl
 81091a6:	f040 8082 	bne.w	81092ae <_strtod_l+0x8de>
 81091aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81091ae:	2b00      	cmp	r3, #0
 81091b0:	d17d      	bne.n	81092ae <_strtod_l+0x8de>
 81091b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81091b6:	0d1b      	lsrs	r3, r3, #20
 81091b8:	051b      	lsls	r3, r3, #20
 81091ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 81091be:	d976      	bls.n	81092ae <_strtod_l+0x8de>
 81091c0:	696b      	ldr	r3, [r5, #20]
 81091c2:	b913      	cbnz	r3, 81091ca <_strtod_l+0x7fa>
 81091c4:	692b      	ldr	r3, [r5, #16]
 81091c6:	2b01      	cmp	r3, #1
 81091c8:	dd71      	ble.n	81092ae <_strtod_l+0x8de>
 81091ca:	4629      	mov	r1, r5
 81091cc:	2201      	movs	r2, #1
 81091ce:	4620      	mov	r0, r4
 81091d0:	f002 f9de 	bl	810b590 <__lshift>
 81091d4:	4631      	mov	r1, r6
 81091d6:	4605      	mov	r5, r0
 81091d8:	f002 fa4a 	bl	810b670 <__mcmp>
 81091dc:	2800      	cmp	r0, #0
 81091de:	dd66      	ble.n	81092ae <_strtod_l+0x8de>
 81091e0:	9904      	ldr	r1, [sp, #16]
 81091e2:	4a53      	ldr	r2, [pc, #332]	; (8109330 <_strtod_l+0x960>)
 81091e4:	465b      	mov	r3, fp
 81091e6:	2900      	cmp	r1, #0
 81091e8:	f000 8081 	beq.w	81092ee <_strtod_l+0x91e>
 81091ec:	ea02 010b 	and.w	r1, r2, fp
 81091f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 81091f4:	dc7b      	bgt.n	81092ee <_strtod_l+0x91e>
 81091f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 81091fa:	f77f aea9 	ble.w	8108f50 <_strtod_l+0x580>
 81091fe:	4b4d      	ldr	r3, [pc, #308]	; (8109334 <_strtod_l+0x964>)
 8109200:	4650      	mov	r0, sl
 8109202:	4659      	mov	r1, fp
 8109204:	2200      	movs	r2, #0
 8109206:	f7f7 fa7f 	bl	8100708 <__aeabi_dmul>
 810920a:	460b      	mov	r3, r1
 810920c:	4303      	orrs	r3, r0
 810920e:	bf08      	it	eq
 8109210:	2322      	moveq	r3, #34	; 0x22
 8109212:	4682      	mov	sl, r0
 8109214:	468b      	mov	fp, r1
 8109216:	bf08      	it	eq
 8109218:	6023      	streq	r3, [r4, #0]
 810921a:	e62b      	b.n	8108e74 <_strtod_l+0x4a4>
 810921c:	f04f 32ff 	mov.w	r2, #4294967295
 8109220:	fa02 f303 	lsl.w	r3, r2, r3
 8109224:	ea03 0a0a 	and.w	sl, r3, sl
 8109228:	e6e3      	b.n	8108ff2 <_strtod_l+0x622>
 810922a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810922e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8109232:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8109236:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810923a:	fa01 f308 	lsl.w	r3, r1, r8
 810923e:	9308      	str	r3, [sp, #32]
 8109240:	910d      	str	r1, [sp, #52]	; 0x34
 8109242:	e746      	b.n	81090d2 <_strtod_l+0x702>
 8109244:	2300      	movs	r3, #0
 8109246:	9308      	str	r3, [sp, #32]
 8109248:	2301      	movs	r3, #1
 810924a:	930d      	str	r3, [sp, #52]	; 0x34
 810924c:	e741      	b.n	81090d2 <_strtod_l+0x702>
 810924e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109250:	4642      	mov	r2, r8
 8109252:	4620      	mov	r0, r4
 8109254:	f002 f99c 	bl	810b590 <__lshift>
 8109258:	9018      	str	r0, [sp, #96]	; 0x60
 810925a:	2800      	cmp	r0, #0
 810925c:	f47f af6b 	bne.w	8109136 <_strtod_l+0x766>
 8109260:	e5fe      	b.n	8108e60 <_strtod_l+0x490>
 8109262:	465f      	mov	r7, fp
 8109264:	d16e      	bne.n	8109344 <_strtod_l+0x974>
 8109266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810926c:	b342      	cbz	r2, 81092c0 <_strtod_l+0x8f0>
 810926e:	4a32      	ldr	r2, [pc, #200]	; (8109338 <_strtod_l+0x968>)
 8109270:	4293      	cmp	r3, r2
 8109272:	d128      	bne.n	81092c6 <_strtod_l+0x8f6>
 8109274:	9b04      	ldr	r3, [sp, #16]
 8109276:	4651      	mov	r1, sl
 8109278:	b1eb      	cbz	r3, 81092b6 <_strtod_l+0x8e6>
 810927a:	4b2d      	ldr	r3, [pc, #180]	; (8109330 <_strtod_l+0x960>)
 810927c:	403b      	ands	r3, r7
 810927e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109282:	f04f 32ff 	mov.w	r2, #4294967295
 8109286:	d819      	bhi.n	81092bc <_strtod_l+0x8ec>
 8109288:	0d1b      	lsrs	r3, r3, #20
 810928a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810928e:	fa02 f303 	lsl.w	r3, r2, r3
 8109292:	4299      	cmp	r1, r3
 8109294:	d117      	bne.n	81092c6 <_strtod_l+0x8f6>
 8109296:	4b29      	ldr	r3, [pc, #164]	; (810933c <_strtod_l+0x96c>)
 8109298:	429f      	cmp	r7, r3
 810929a:	d102      	bne.n	81092a2 <_strtod_l+0x8d2>
 810929c:	3101      	adds	r1, #1
 810929e:	f43f addf 	beq.w	8108e60 <_strtod_l+0x490>
 81092a2:	4b23      	ldr	r3, [pc, #140]	; (8109330 <_strtod_l+0x960>)
 81092a4:	403b      	ands	r3, r7
 81092a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 81092aa:	f04f 0a00 	mov.w	sl, #0
 81092ae:	9b04      	ldr	r3, [sp, #16]
 81092b0:	2b00      	cmp	r3, #0
 81092b2:	d1a4      	bne.n	81091fe <_strtod_l+0x82e>
 81092b4:	e5de      	b.n	8108e74 <_strtod_l+0x4a4>
 81092b6:	f04f 33ff 	mov.w	r3, #4294967295
 81092ba:	e7ea      	b.n	8109292 <_strtod_l+0x8c2>
 81092bc:	4613      	mov	r3, r2
 81092be:	e7e8      	b.n	8109292 <_strtod_l+0x8c2>
 81092c0:	ea53 030a 	orrs.w	r3, r3, sl
 81092c4:	d08c      	beq.n	81091e0 <_strtod_l+0x810>
 81092c6:	9b08      	ldr	r3, [sp, #32]
 81092c8:	b1db      	cbz	r3, 8109302 <_strtod_l+0x932>
 81092ca:	423b      	tst	r3, r7
 81092cc:	d0ef      	beq.n	81092ae <_strtod_l+0x8de>
 81092ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81092d0:	9a04      	ldr	r2, [sp, #16]
 81092d2:	4650      	mov	r0, sl
 81092d4:	4659      	mov	r1, fp
 81092d6:	b1c3      	cbz	r3, 810930a <_strtod_l+0x93a>
 81092d8:	f7ff fb5e 	bl	8108998 <sulp>
 81092dc:	4602      	mov	r2, r0
 81092de:	460b      	mov	r3, r1
 81092e0:	ec51 0b18 	vmov	r0, r1, d8
 81092e4:	f7f7 f85a 	bl	810039c <__adddf3>
 81092e8:	4682      	mov	sl, r0
 81092ea:	468b      	mov	fp, r1
 81092ec:	e7df      	b.n	81092ae <_strtod_l+0x8de>
 81092ee:	4013      	ands	r3, r2
 81092f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 81092f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81092f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81092fc:	f04f 3aff 	mov.w	sl, #4294967295
 8109300:	e7d5      	b.n	81092ae <_strtod_l+0x8de>
 8109302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109304:	ea13 0f0a 	tst.w	r3, sl
 8109308:	e7e0      	b.n	81092cc <_strtod_l+0x8fc>
 810930a:	f7ff fb45 	bl	8108998 <sulp>
 810930e:	4602      	mov	r2, r0
 8109310:	460b      	mov	r3, r1
 8109312:	ec51 0b18 	vmov	r0, r1, d8
 8109316:	f7f7 f83f 	bl	8100398 <__aeabi_dsub>
 810931a:	2200      	movs	r2, #0
 810931c:	2300      	movs	r3, #0
 810931e:	4682      	mov	sl, r0
 8109320:	468b      	mov	fp, r1
 8109322:	f7f7 fc59 	bl	8100bd8 <__aeabi_dcmpeq>
 8109326:	2800      	cmp	r0, #0
 8109328:	d0c1      	beq.n	81092ae <_strtod_l+0x8de>
 810932a:	e611      	b.n	8108f50 <_strtod_l+0x580>
 810932c:	fffffc02 	.word	0xfffffc02
 8109330:	7ff00000 	.word	0x7ff00000
 8109334:	39500000 	.word	0x39500000
 8109338:	000fffff 	.word	0x000fffff
 810933c:	7fefffff 	.word	0x7fefffff
 8109340:	0810c6c8 	.word	0x0810c6c8
 8109344:	4631      	mov	r1, r6
 8109346:	4628      	mov	r0, r5
 8109348:	f002 fb10 	bl	810b96c <__ratio>
 810934c:	ec59 8b10 	vmov	r8, r9, d0
 8109350:	ee10 0a10 	vmov	r0, s0
 8109354:	2200      	movs	r2, #0
 8109356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810935a:	4649      	mov	r1, r9
 810935c:	f7f7 fc50 	bl	8100c00 <__aeabi_dcmple>
 8109360:	2800      	cmp	r0, #0
 8109362:	d07a      	beq.n	810945a <_strtod_l+0xa8a>
 8109364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109366:	2b00      	cmp	r3, #0
 8109368:	d04a      	beq.n	8109400 <_strtod_l+0xa30>
 810936a:	4b95      	ldr	r3, [pc, #596]	; (81095c0 <_strtod_l+0xbf0>)
 810936c:	2200      	movs	r2, #0
 810936e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109372:	f8df 924c 	ldr.w	r9, [pc, #588]	; 81095c0 <_strtod_l+0xbf0>
 8109376:	f04f 0800 	mov.w	r8, #0
 810937a:	4b92      	ldr	r3, [pc, #584]	; (81095c4 <_strtod_l+0xbf4>)
 810937c:	403b      	ands	r3, r7
 810937e:	930d      	str	r3, [sp, #52]	; 0x34
 8109380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109382:	4b91      	ldr	r3, [pc, #580]	; (81095c8 <_strtod_l+0xbf8>)
 8109384:	429a      	cmp	r2, r3
 8109386:	f040 80b0 	bne.w	81094ea <_strtod_l+0xb1a>
 810938a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810938e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8109392:	ec4b ab10 	vmov	d0, sl, fp
 8109396:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810939a:	f002 fa0f 	bl	810b7bc <__ulp>
 810939e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81093a2:	ec53 2b10 	vmov	r2, r3, d0
 81093a6:	f7f7 f9af 	bl	8100708 <__aeabi_dmul>
 81093aa:	4652      	mov	r2, sl
 81093ac:	465b      	mov	r3, fp
 81093ae:	f7f6 fff5 	bl	810039c <__adddf3>
 81093b2:	460b      	mov	r3, r1
 81093b4:	4983      	ldr	r1, [pc, #524]	; (81095c4 <_strtod_l+0xbf4>)
 81093b6:	4a85      	ldr	r2, [pc, #532]	; (81095cc <_strtod_l+0xbfc>)
 81093b8:	4019      	ands	r1, r3
 81093ba:	4291      	cmp	r1, r2
 81093bc:	4682      	mov	sl, r0
 81093be:	d960      	bls.n	8109482 <_strtod_l+0xab2>
 81093c0:	ee18 3a90 	vmov	r3, s17
 81093c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 81093c8:	4293      	cmp	r3, r2
 81093ca:	d104      	bne.n	81093d6 <_strtod_l+0xa06>
 81093cc:	ee18 3a10 	vmov	r3, s16
 81093d0:	3301      	adds	r3, #1
 81093d2:	f43f ad45 	beq.w	8108e60 <_strtod_l+0x490>
 81093d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 81095d8 <_strtod_l+0xc08>
 81093da:	f04f 3aff 	mov.w	sl, #4294967295
 81093de:	9918      	ldr	r1, [sp, #96]	; 0x60
 81093e0:	4620      	mov	r0, r4
 81093e2:	f001 feb9 	bl	810b158 <_Bfree>
 81093e6:	9905      	ldr	r1, [sp, #20]
 81093e8:	4620      	mov	r0, r4
 81093ea:	f001 feb5 	bl	810b158 <_Bfree>
 81093ee:	4631      	mov	r1, r6
 81093f0:	4620      	mov	r0, r4
 81093f2:	f001 feb1 	bl	810b158 <_Bfree>
 81093f6:	4629      	mov	r1, r5
 81093f8:	4620      	mov	r0, r4
 81093fa:	f001 fead 	bl	810b158 <_Bfree>
 81093fe:	e61a      	b.n	8109036 <_strtod_l+0x666>
 8109400:	f1ba 0f00 	cmp.w	sl, #0
 8109404:	d11b      	bne.n	810943e <_strtod_l+0xa6e>
 8109406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810940a:	b9f3      	cbnz	r3, 810944a <_strtod_l+0xa7a>
 810940c:	4b6c      	ldr	r3, [pc, #432]	; (81095c0 <_strtod_l+0xbf0>)
 810940e:	2200      	movs	r2, #0
 8109410:	4640      	mov	r0, r8
 8109412:	4649      	mov	r1, r9
 8109414:	f7f7 fbea 	bl	8100bec <__aeabi_dcmplt>
 8109418:	b9d0      	cbnz	r0, 8109450 <_strtod_l+0xa80>
 810941a:	4640      	mov	r0, r8
 810941c:	4649      	mov	r1, r9
 810941e:	4b6c      	ldr	r3, [pc, #432]	; (81095d0 <_strtod_l+0xc00>)
 8109420:	2200      	movs	r2, #0
 8109422:	f7f7 f971 	bl	8100708 <__aeabi_dmul>
 8109426:	4680      	mov	r8, r0
 8109428:	4689      	mov	r9, r1
 810942a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810942e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8109432:	9315      	str	r3, [sp, #84]	; 0x54
 8109434:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109438:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810943c:	e79d      	b.n	810937a <_strtod_l+0x9aa>
 810943e:	f1ba 0f01 	cmp.w	sl, #1
 8109442:	d102      	bne.n	810944a <_strtod_l+0xa7a>
 8109444:	2f00      	cmp	r7, #0
 8109446:	f43f ad83 	beq.w	8108f50 <_strtod_l+0x580>
 810944a:	4b62      	ldr	r3, [pc, #392]	; (81095d4 <_strtod_l+0xc04>)
 810944c:	2200      	movs	r2, #0
 810944e:	e78e      	b.n	810936e <_strtod_l+0x99e>
 8109450:	f8df 917c 	ldr.w	r9, [pc, #380]	; 81095d0 <_strtod_l+0xc00>
 8109454:	f04f 0800 	mov.w	r8, #0
 8109458:	e7e7      	b.n	810942a <_strtod_l+0xa5a>
 810945a:	4b5d      	ldr	r3, [pc, #372]	; (81095d0 <_strtod_l+0xc00>)
 810945c:	4640      	mov	r0, r8
 810945e:	4649      	mov	r1, r9
 8109460:	2200      	movs	r2, #0
 8109462:	f7f7 f951 	bl	8100708 <__aeabi_dmul>
 8109466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109468:	4680      	mov	r8, r0
 810946a:	4689      	mov	r9, r1
 810946c:	b933      	cbnz	r3, 810947c <_strtod_l+0xaac>
 810946e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109472:	900e      	str	r0, [sp, #56]	; 0x38
 8109474:	930f      	str	r3, [sp, #60]	; 0x3c
 8109476:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810947a:	e7dd      	b.n	8109438 <_strtod_l+0xa68>
 810947c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8109480:	e7f9      	b.n	8109476 <_strtod_l+0xaa6>
 8109482:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109486:	9b04      	ldr	r3, [sp, #16]
 8109488:	2b00      	cmp	r3, #0
 810948a:	d1a8      	bne.n	81093de <_strtod_l+0xa0e>
 810948c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109492:	0d1b      	lsrs	r3, r3, #20
 8109494:	051b      	lsls	r3, r3, #20
 8109496:	429a      	cmp	r2, r3
 8109498:	d1a1      	bne.n	81093de <_strtod_l+0xa0e>
 810949a:	4640      	mov	r0, r8
 810949c:	4649      	mov	r1, r9
 810949e:	f7f7 fc93 	bl	8100dc8 <__aeabi_d2lz>
 81094a2:	f7f7 f903 	bl	81006ac <__aeabi_l2d>
 81094a6:	4602      	mov	r2, r0
 81094a8:	460b      	mov	r3, r1
 81094aa:	4640      	mov	r0, r8
 81094ac:	4649      	mov	r1, r9
 81094ae:	f7f6 ff73 	bl	8100398 <__aeabi_dsub>
 81094b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81094b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81094b8:	ea43 030a 	orr.w	r3, r3, sl
 81094bc:	4313      	orrs	r3, r2
 81094be:	4680      	mov	r8, r0
 81094c0:	4689      	mov	r9, r1
 81094c2:	d055      	beq.n	8109570 <_strtod_l+0xba0>
 81094c4:	a336      	add	r3, pc, #216	; (adr r3, 81095a0 <_strtod_l+0xbd0>)
 81094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094ca:	f7f7 fb8f 	bl	8100bec <__aeabi_dcmplt>
 81094ce:	2800      	cmp	r0, #0
 81094d0:	f47f acd0 	bne.w	8108e74 <_strtod_l+0x4a4>
 81094d4:	a334      	add	r3, pc, #208	; (adr r3, 81095a8 <_strtod_l+0xbd8>)
 81094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094da:	4640      	mov	r0, r8
 81094dc:	4649      	mov	r1, r9
 81094de:	f7f7 fba3 	bl	8100c28 <__aeabi_dcmpgt>
 81094e2:	2800      	cmp	r0, #0
 81094e4:	f43f af7b 	beq.w	81093de <_strtod_l+0xa0e>
 81094e8:	e4c4      	b.n	8108e74 <_strtod_l+0x4a4>
 81094ea:	9b04      	ldr	r3, [sp, #16]
 81094ec:	b333      	cbz	r3, 810953c <_strtod_l+0xb6c>
 81094ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81094f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81094f4:	d822      	bhi.n	810953c <_strtod_l+0xb6c>
 81094f6:	a32e      	add	r3, pc, #184	; (adr r3, 81095b0 <_strtod_l+0xbe0>)
 81094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094fc:	4640      	mov	r0, r8
 81094fe:	4649      	mov	r1, r9
 8109500:	f7f7 fb7e 	bl	8100c00 <__aeabi_dcmple>
 8109504:	b1a0      	cbz	r0, 8109530 <_strtod_l+0xb60>
 8109506:	4649      	mov	r1, r9
 8109508:	4640      	mov	r0, r8
 810950a:	f7f7 fbd5 	bl	8100cb8 <__aeabi_d2uiz>
 810950e:	2801      	cmp	r0, #1
 8109510:	bf38      	it	cc
 8109512:	2001      	movcc	r0, #1
 8109514:	f7f7 f87e 	bl	8100614 <__aeabi_ui2d>
 8109518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810951a:	4680      	mov	r8, r0
 810951c:	4689      	mov	r9, r1
 810951e:	bb23      	cbnz	r3, 810956a <_strtod_l+0xb9a>
 8109520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109524:	9010      	str	r0, [sp, #64]	; 0x40
 8109526:	9311      	str	r3, [sp, #68]	; 0x44
 8109528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810952c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109534:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109538:	1a9b      	subs	r3, r3, r2
 810953a:	9309      	str	r3, [sp, #36]	; 0x24
 810953c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109540:	eeb0 0a48 	vmov.f32	s0, s16
 8109544:	eef0 0a68 	vmov.f32	s1, s17
 8109548:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810954c:	f002 f936 	bl	810b7bc <__ulp>
 8109550:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109554:	ec53 2b10 	vmov	r2, r3, d0
 8109558:	f7f7 f8d6 	bl	8100708 <__aeabi_dmul>
 810955c:	ec53 2b18 	vmov	r2, r3, d8
 8109560:	f7f6 ff1c 	bl	810039c <__adddf3>
 8109564:	4682      	mov	sl, r0
 8109566:	468b      	mov	fp, r1
 8109568:	e78d      	b.n	8109486 <_strtod_l+0xab6>
 810956a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810956e:	e7db      	b.n	8109528 <_strtod_l+0xb58>
 8109570:	a311      	add	r3, pc, #68	; (adr r3, 81095b8 <_strtod_l+0xbe8>)
 8109572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109576:	f7f7 fb39 	bl	8100bec <__aeabi_dcmplt>
 810957a:	e7b2      	b.n	81094e2 <_strtod_l+0xb12>
 810957c:	2300      	movs	r3, #0
 810957e:	930a      	str	r3, [sp, #40]	; 0x28
 8109580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109584:	6013      	str	r3, [r2, #0]
 8109586:	f7ff ba6b 	b.w	8108a60 <_strtod_l+0x90>
 810958a:	2a65      	cmp	r2, #101	; 0x65
 810958c:	f43f ab5f 	beq.w	8108c4e <_strtod_l+0x27e>
 8109590:	2a45      	cmp	r2, #69	; 0x45
 8109592:	f43f ab5c 	beq.w	8108c4e <_strtod_l+0x27e>
 8109596:	2301      	movs	r3, #1
 8109598:	f7ff bb94 	b.w	8108cc4 <_strtod_l+0x2f4>
 810959c:	f3af 8000 	nop.w
 81095a0:	94a03595 	.word	0x94a03595
 81095a4:	3fdfffff 	.word	0x3fdfffff
 81095a8:	35afe535 	.word	0x35afe535
 81095ac:	3fe00000 	.word	0x3fe00000
 81095b0:	ffc00000 	.word	0xffc00000
 81095b4:	41dfffff 	.word	0x41dfffff
 81095b8:	94a03595 	.word	0x94a03595
 81095bc:	3fcfffff 	.word	0x3fcfffff
 81095c0:	3ff00000 	.word	0x3ff00000
 81095c4:	7ff00000 	.word	0x7ff00000
 81095c8:	7fe00000 	.word	0x7fe00000
 81095cc:	7c9fffff 	.word	0x7c9fffff
 81095d0:	3fe00000 	.word	0x3fe00000
 81095d4:	bff00000 	.word	0xbff00000
 81095d8:	7fefffff 	.word	0x7fefffff

081095dc <_strtod_r>:
 81095dc:	4b01      	ldr	r3, [pc, #4]	; (81095e4 <_strtod_r+0x8>)
 81095de:	f7ff b9f7 	b.w	81089d0 <_strtod_l>
 81095e2:	bf00      	nop
 81095e4:	10000084 	.word	0x10000084

081095e8 <_strtol_l.constprop.0>:
 81095e8:	2b01      	cmp	r3, #1
 81095ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81095ee:	d001      	beq.n	81095f4 <_strtol_l.constprop.0+0xc>
 81095f0:	2b24      	cmp	r3, #36	; 0x24
 81095f2:	d906      	bls.n	8109602 <_strtol_l.constprop.0+0x1a>
 81095f4:	f7fe fa70 	bl	8107ad8 <__errno>
 81095f8:	2316      	movs	r3, #22
 81095fa:	6003      	str	r3, [r0, #0]
 81095fc:	2000      	movs	r0, #0
 81095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109602:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 81096e8 <_strtol_l.constprop.0+0x100>
 8109606:	460d      	mov	r5, r1
 8109608:	462e      	mov	r6, r5
 810960a:	f815 4b01 	ldrb.w	r4, [r5], #1
 810960e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8109612:	f017 0708 	ands.w	r7, r7, #8
 8109616:	d1f7      	bne.n	8109608 <_strtol_l.constprop.0+0x20>
 8109618:	2c2d      	cmp	r4, #45	; 0x2d
 810961a:	d132      	bne.n	8109682 <_strtol_l.constprop.0+0x9a>
 810961c:	782c      	ldrb	r4, [r5, #0]
 810961e:	2701      	movs	r7, #1
 8109620:	1cb5      	adds	r5, r6, #2
 8109622:	2b00      	cmp	r3, #0
 8109624:	d05b      	beq.n	81096de <_strtol_l.constprop.0+0xf6>
 8109626:	2b10      	cmp	r3, #16
 8109628:	d109      	bne.n	810963e <_strtol_l.constprop.0+0x56>
 810962a:	2c30      	cmp	r4, #48	; 0x30
 810962c:	d107      	bne.n	810963e <_strtol_l.constprop.0+0x56>
 810962e:	782c      	ldrb	r4, [r5, #0]
 8109630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109634:	2c58      	cmp	r4, #88	; 0x58
 8109636:	d14d      	bne.n	81096d4 <_strtol_l.constprop.0+0xec>
 8109638:	786c      	ldrb	r4, [r5, #1]
 810963a:	2310      	movs	r3, #16
 810963c:	3502      	adds	r5, #2
 810963e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8109642:	f108 38ff 	add.w	r8, r8, #4294967295
 8109646:	f04f 0c00 	mov.w	ip, #0
 810964a:	fbb8 f9f3 	udiv	r9, r8, r3
 810964e:	4666      	mov	r6, ip
 8109650:	fb03 8a19 	mls	sl, r3, r9, r8
 8109654:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8109658:	f1be 0f09 	cmp.w	lr, #9
 810965c:	d816      	bhi.n	810968c <_strtol_l.constprop.0+0xa4>
 810965e:	4674      	mov	r4, lr
 8109660:	42a3      	cmp	r3, r4
 8109662:	dd24      	ble.n	81096ae <_strtol_l.constprop.0+0xc6>
 8109664:	f1bc 0f00 	cmp.w	ip, #0
 8109668:	db1e      	blt.n	81096a8 <_strtol_l.constprop.0+0xc0>
 810966a:	45b1      	cmp	r9, r6
 810966c:	d31c      	bcc.n	81096a8 <_strtol_l.constprop.0+0xc0>
 810966e:	d101      	bne.n	8109674 <_strtol_l.constprop.0+0x8c>
 8109670:	45a2      	cmp	sl, r4
 8109672:	db19      	blt.n	81096a8 <_strtol_l.constprop.0+0xc0>
 8109674:	fb06 4603 	mla	r6, r6, r3, r4
 8109678:	f04f 0c01 	mov.w	ip, #1
 810967c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109680:	e7e8      	b.n	8109654 <_strtol_l.constprop.0+0x6c>
 8109682:	2c2b      	cmp	r4, #43	; 0x2b
 8109684:	bf04      	itt	eq
 8109686:	782c      	ldrbeq	r4, [r5, #0]
 8109688:	1cb5      	addeq	r5, r6, #2
 810968a:	e7ca      	b.n	8109622 <_strtol_l.constprop.0+0x3a>
 810968c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8109690:	f1be 0f19 	cmp.w	lr, #25
 8109694:	d801      	bhi.n	810969a <_strtol_l.constprop.0+0xb2>
 8109696:	3c37      	subs	r4, #55	; 0x37
 8109698:	e7e2      	b.n	8109660 <_strtol_l.constprop.0+0x78>
 810969a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810969e:	f1be 0f19 	cmp.w	lr, #25
 81096a2:	d804      	bhi.n	81096ae <_strtol_l.constprop.0+0xc6>
 81096a4:	3c57      	subs	r4, #87	; 0x57
 81096a6:	e7db      	b.n	8109660 <_strtol_l.constprop.0+0x78>
 81096a8:	f04f 3cff 	mov.w	ip, #4294967295
 81096ac:	e7e6      	b.n	810967c <_strtol_l.constprop.0+0x94>
 81096ae:	f1bc 0f00 	cmp.w	ip, #0
 81096b2:	da05      	bge.n	81096c0 <_strtol_l.constprop.0+0xd8>
 81096b4:	2322      	movs	r3, #34	; 0x22
 81096b6:	6003      	str	r3, [r0, #0]
 81096b8:	4646      	mov	r6, r8
 81096ba:	b942      	cbnz	r2, 81096ce <_strtol_l.constprop.0+0xe6>
 81096bc:	4630      	mov	r0, r6
 81096be:	e79e      	b.n	81095fe <_strtol_l.constprop.0+0x16>
 81096c0:	b107      	cbz	r7, 81096c4 <_strtol_l.constprop.0+0xdc>
 81096c2:	4276      	negs	r6, r6
 81096c4:	2a00      	cmp	r2, #0
 81096c6:	d0f9      	beq.n	81096bc <_strtol_l.constprop.0+0xd4>
 81096c8:	f1bc 0f00 	cmp.w	ip, #0
 81096cc:	d000      	beq.n	81096d0 <_strtol_l.constprop.0+0xe8>
 81096ce:	1e69      	subs	r1, r5, #1
 81096d0:	6011      	str	r1, [r2, #0]
 81096d2:	e7f3      	b.n	81096bc <_strtol_l.constprop.0+0xd4>
 81096d4:	2430      	movs	r4, #48	; 0x30
 81096d6:	2b00      	cmp	r3, #0
 81096d8:	d1b1      	bne.n	810963e <_strtol_l.constprop.0+0x56>
 81096da:	2308      	movs	r3, #8
 81096dc:	e7af      	b.n	810963e <_strtol_l.constprop.0+0x56>
 81096de:	2c30      	cmp	r4, #48	; 0x30
 81096e0:	d0a5      	beq.n	810962e <_strtol_l.constprop.0+0x46>
 81096e2:	230a      	movs	r3, #10
 81096e4:	e7ab      	b.n	810963e <_strtol_l.constprop.0+0x56>
 81096e6:	bf00      	nop
 81096e8:	0810c6f1 	.word	0x0810c6f1

081096ec <_strtol_r>:
 81096ec:	f7ff bf7c 	b.w	81095e8 <_strtol_l.constprop.0>

081096f0 <__swbuf_r>:
 81096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81096f2:	460e      	mov	r6, r1
 81096f4:	4614      	mov	r4, r2
 81096f6:	4605      	mov	r5, r0
 81096f8:	b118      	cbz	r0, 8109702 <__swbuf_r+0x12>
 81096fa:	6983      	ldr	r3, [r0, #24]
 81096fc:	b90b      	cbnz	r3, 8109702 <__swbuf_r+0x12>
 81096fe:	f001 f84b 	bl	810a798 <__sinit>
 8109702:	4b21      	ldr	r3, [pc, #132]	; (8109788 <__swbuf_r+0x98>)
 8109704:	429c      	cmp	r4, r3
 8109706:	d12b      	bne.n	8109760 <__swbuf_r+0x70>
 8109708:	686c      	ldr	r4, [r5, #4]
 810970a:	69a3      	ldr	r3, [r4, #24]
 810970c:	60a3      	str	r3, [r4, #8]
 810970e:	89a3      	ldrh	r3, [r4, #12]
 8109710:	071a      	lsls	r2, r3, #28
 8109712:	d52f      	bpl.n	8109774 <__swbuf_r+0x84>
 8109714:	6923      	ldr	r3, [r4, #16]
 8109716:	b36b      	cbz	r3, 8109774 <__swbuf_r+0x84>
 8109718:	6923      	ldr	r3, [r4, #16]
 810971a:	6820      	ldr	r0, [r4, #0]
 810971c:	1ac0      	subs	r0, r0, r3
 810971e:	6963      	ldr	r3, [r4, #20]
 8109720:	b2f6      	uxtb	r6, r6
 8109722:	4283      	cmp	r3, r0
 8109724:	4637      	mov	r7, r6
 8109726:	dc04      	bgt.n	8109732 <__swbuf_r+0x42>
 8109728:	4621      	mov	r1, r4
 810972a:	4628      	mov	r0, r5
 810972c:	f000 ffa0 	bl	810a670 <_fflush_r>
 8109730:	bb30      	cbnz	r0, 8109780 <__swbuf_r+0x90>
 8109732:	68a3      	ldr	r3, [r4, #8]
 8109734:	3b01      	subs	r3, #1
 8109736:	60a3      	str	r3, [r4, #8]
 8109738:	6823      	ldr	r3, [r4, #0]
 810973a:	1c5a      	adds	r2, r3, #1
 810973c:	6022      	str	r2, [r4, #0]
 810973e:	701e      	strb	r6, [r3, #0]
 8109740:	6963      	ldr	r3, [r4, #20]
 8109742:	3001      	adds	r0, #1
 8109744:	4283      	cmp	r3, r0
 8109746:	d004      	beq.n	8109752 <__swbuf_r+0x62>
 8109748:	89a3      	ldrh	r3, [r4, #12]
 810974a:	07db      	lsls	r3, r3, #31
 810974c:	d506      	bpl.n	810975c <__swbuf_r+0x6c>
 810974e:	2e0a      	cmp	r6, #10
 8109750:	d104      	bne.n	810975c <__swbuf_r+0x6c>
 8109752:	4621      	mov	r1, r4
 8109754:	4628      	mov	r0, r5
 8109756:	f000 ff8b 	bl	810a670 <_fflush_r>
 810975a:	b988      	cbnz	r0, 8109780 <__swbuf_r+0x90>
 810975c:	4638      	mov	r0, r7
 810975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109760:	4b0a      	ldr	r3, [pc, #40]	; (810978c <__swbuf_r+0x9c>)
 8109762:	429c      	cmp	r4, r3
 8109764:	d101      	bne.n	810976a <__swbuf_r+0x7a>
 8109766:	68ac      	ldr	r4, [r5, #8]
 8109768:	e7cf      	b.n	810970a <__swbuf_r+0x1a>
 810976a:	4b09      	ldr	r3, [pc, #36]	; (8109790 <__swbuf_r+0xa0>)
 810976c:	429c      	cmp	r4, r3
 810976e:	bf08      	it	eq
 8109770:	68ec      	ldreq	r4, [r5, #12]
 8109772:	e7ca      	b.n	810970a <__swbuf_r+0x1a>
 8109774:	4621      	mov	r1, r4
 8109776:	4628      	mov	r0, r5
 8109778:	f000 f80c 	bl	8109794 <__swsetup_r>
 810977c:	2800      	cmp	r0, #0
 810977e:	d0cb      	beq.n	8109718 <__swbuf_r+0x28>
 8109780:	f04f 37ff 	mov.w	r7, #4294967295
 8109784:	e7ea      	b.n	810975c <__swbuf_r+0x6c>
 8109786:	bf00      	nop
 8109788:	0810c8a4 	.word	0x0810c8a4
 810978c:	0810c8c4 	.word	0x0810c8c4
 8109790:	0810c884 	.word	0x0810c884

08109794 <__swsetup_r>:
 8109794:	4b32      	ldr	r3, [pc, #200]	; (8109860 <__swsetup_r+0xcc>)
 8109796:	b570      	push	{r4, r5, r6, lr}
 8109798:	681d      	ldr	r5, [r3, #0]
 810979a:	4606      	mov	r6, r0
 810979c:	460c      	mov	r4, r1
 810979e:	b125      	cbz	r5, 81097aa <__swsetup_r+0x16>
 81097a0:	69ab      	ldr	r3, [r5, #24]
 81097a2:	b913      	cbnz	r3, 81097aa <__swsetup_r+0x16>
 81097a4:	4628      	mov	r0, r5
 81097a6:	f000 fff7 	bl	810a798 <__sinit>
 81097aa:	4b2e      	ldr	r3, [pc, #184]	; (8109864 <__swsetup_r+0xd0>)
 81097ac:	429c      	cmp	r4, r3
 81097ae:	d10f      	bne.n	81097d0 <__swsetup_r+0x3c>
 81097b0:	686c      	ldr	r4, [r5, #4]
 81097b2:	89a3      	ldrh	r3, [r4, #12]
 81097b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81097b8:	0719      	lsls	r1, r3, #28
 81097ba:	d42c      	bmi.n	8109816 <__swsetup_r+0x82>
 81097bc:	06dd      	lsls	r5, r3, #27
 81097be:	d411      	bmi.n	81097e4 <__swsetup_r+0x50>
 81097c0:	2309      	movs	r3, #9
 81097c2:	6033      	str	r3, [r6, #0]
 81097c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81097c8:	81a3      	strh	r3, [r4, #12]
 81097ca:	f04f 30ff 	mov.w	r0, #4294967295
 81097ce:	e03e      	b.n	810984e <__swsetup_r+0xba>
 81097d0:	4b25      	ldr	r3, [pc, #148]	; (8109868 <__swsetup_r+0xd4>)
 81097d2:	429c      	cmp	r4, r3
 81097d4:	d101      	bne.n	81097da <__swsetup_r+0x46>
 81097d6:	68ac      	ldr	r4, [r5, #8]
 81097d8:	e7eb      	b.n	81097b2 <__swsetup_r+0x1e>
 81097da:	4b24      	ldr	r3, [pc, #144]	; (810986c <__swsetup_r+0xd8>)
 81097dc:	429c      	cmp	r4, r3
 81097de:	bf08      	it	eq
 81097e0:	68ec      	ldreq	r4, [r5, #12]
 81097e2:	e7e6      	b.n	81097b2 <__swsetup_r+0x1e>
 81097e4:	0758      	lsls	r0, r3, #29
 81097e6:	d512      	bpl.n	810980e <__swsetup_r+0x7a>
 81097e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81097ea:	b141      	cbz	r1, 81097fe <__swsetup_r+0x6a>
 81097ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81097f0:	4299      	cmp	r1, r3
 81097f2:	d002      	beq.n	81097fa <__swsetup_r+0x66>
 81097f4:	4630      	mov	r0, r6
 81097f6:	f002 f947 	bl	810ba88 <_free_r>
 81097fa:	2300      	movs	r3, #0
 81097fc:	6363      	str	r3, [r4, #52]	; 0x34
 81097fe:	89a3      	ldrh	r3, [r4, #12]
 8109800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109804:	81a3      	strh	r3, [r4, #12]
 8109806:	2300      	movs	r3, #0
 8109808:	6063      	str	r3, [r4, #4]
 810980a:	6923      	ldr	r3, [r4, #16]
 810980c:	6023      	str	r3, [r4, #0]
 810980e:	89a3      	ldrh	r3, [r4, #12]
 8109810:	f043 0308 	orr.w	r3, r3, #8
 8109814:	81a3      	strh	r3, [r4, #12]
 8109816:	6923      	ldr	r3, [r4, #16]
 8109818:	b94b      	cbnz	r3, 810982e <__swsetup_r+0x9a>
 810981a:	89a3      	ldrh	r3, [r4, #12]
 810981c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109824:	d003      	beq.n	810982e <__swsetup_r+0x9a>
 8109826:	4621      	mov	r1, r4
 8109828:	4630      	mov	r0, r6
 810982a:	f001 fbed 	bl	810b008 <__smakebuf_r>
 810982e:	89a0      	ldrh	r0, [r4, #12]
 8109830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109834:	f010 0301 	ands.w	r3, r0, #1
 8109838:	d00a      	beq.n	8109850 <__swsetup_r+0xbc>
 810983a:	2300      	movs	r3, #0
 810983c:	60a3      	str	r3, [r4, #8]
 810983e:	6963      	ldr	r3, [r4, #20]
 8109840:	425b      	negs	r3, r3
 8109842:	61a3      	str	r3, [r4, #24]
 8109844:	6923      	ldr	r3, [r4, #16]
 8109846:	b943      	cbnz	r3, 810985a <__swsetup_r+0xc6>
 8109848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810984c:	d1ba      	bne.n	81097c4 <__swsetup_r+0x30>
 810984e:	bd70      	pop	{r4, r5, r6, pc}
 8109850:	0781      	lsls	r1, r0, #30
 8109852:	bf58      	it	pl
 8109854:	6963      	ldrpl	r3, [r4, #20]
 8109856:	60a3      	str	r3, [r4, #8]
 8109858:	e7f4      	b.n	8109844 <__swsetup_r+0xb0>
 810985a:	2000      	movs	r0, #0
 810985c:	e7f7      	b.n	810984e <__swsetup_r+0xba>
 810985e:	bf00      	nop
 8109860:	1000001c 	.word	0x1000001c
 8109864:	0810c8a4 	.word	0x0810c8a4
 8109868:	0810c8c4 	.word	0x0810c8c4
 810986c:	0810c884 	.word	0x0810c884

08109870 <quorem>:
 8109870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109874:	6903      	ldr	r3, [r0, #16]
 8109876:	690c      	ldr	r4, [r1, #16]
 8109878:	42a3      	cmp	r3, r4
 810987a:	4607      	mov	r7, r0
 810987c:	f2c0 8081 	blt.w	8109982 <quorem+0x112>
 8109880:	3c01      	subs	r4, #1
 8109882:	f101 0814 	add.w	r8, r1, #20
 8109886:	f100 0514 	add.w	r5, r0, #20
 810988a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810988e:	9301      	str	r3, [sp, #4]
 8109890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109898:	3301      	adds	r3, #1
 810989a:	429a      	cmp	r2, r3
 810989c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81098a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81098a4:	fbb2 f6f3 	udiv	r6, r2, r3
 81098a8:	d331      	bcc.n	810990e <quorem+0x9e>
 81098aa:	f04f 0e00 	mov.w	lr, #0
 81098ae:	4640      	mov	r0, r8
 81098b0:	46ac      	mov	ip, r5
 81098b2:	46f2      	mov	sl, lr
 81098b4:	f850 2b04 	ldr.w	r2, [r0], #4
 81098b8:	b293      	uxth	r3, r2
 81098ba:	fb06 e303 	mla	r3, r6, r3, lr
 81098be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81098c2:	b29b      	uxth	r3, r3
 81098c4:	ebaa 0303 	sub.w	r3, sl, r3
 81098c8:	f8dc a000 	ldr.w	sl, [ip]
 81098cc:	0c12      	lsrs	r2, r2, #16
 81098ce:	fa13 f38a 	uxtah	r3, r3, sl
 81098d2:	fb06 e202 	mla	r2, r6, r2, lr
 81098d6:	9300      	str	r3, [sp, #0]
 81098d8:	9b00      	ldr	r3, [sp, #0]
 81098da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81098de:	b292      	uxth	r2, r2
 81098e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 81098e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81098e8:	f8bd 3000 	ldrh.w	r3, [sp]
 81098ec:	4581      	cmp	r9, r0
 81098ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81098f2:	f84c 3b04 	str.w	r3, [ip], #4
 81098f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81098fa:	d2db      	bcs.n	81098b4 <quorem+0x44>
 81098fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8109900:	b92b      	cbnz	r3, 810990e <quorem+0x9e>
 8109902:	9b01      	ldr	r3, [sp, #4]
 8109904:	3b04      	subs	r3, #4
 8109906:	429d      	cmp	r5, r3
 8109908:	461a      	mov	r2, r3
 810990a:	d32e      	bcc.n	810996a <quorem+0xfa>
 810990c:	613c      	str	r4, [r7, #16]
 810990e:	4638      	mov	r0, r7
 8109910:	f001 feae 	bl	810b670 <__mcmp>
 8109914:	2800      	cmp	r0, #0
 8109916:	db24      	blt.n	8109962 <quorem+0xf2>
 8109918:	3601      	adds	r6, #1
 810991a:	4628      	mov	r0, r5
 810991c:	f04f 0c00 	mov.w	ip, #0
 8109920:	f858 2b04 	ldr.w	r2, [r8], #4
 8109924:	f8d0 e000 	ldr.w	lr, [r0]
 8109928:	b293      	uxth	r3, r2
 810992a:	ebac 0303 	sub.w	r3, ip, r3
 810992e:	0c12      	lsrs	r2, r2, #16
 8109930:	fa13 f38e 	uxtah	r3, r3, lr
 8109934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8109938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810993c:	b29b      	uxth	r3, r3
 810993e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109942:	45c1      	cmp	r9, r8
 8109944:	f840 3b04 	str.w	r3, [r0], #4
 8109948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810994c:	d2e8      	bcs.n	8109920 <quorem+0xb0>
 810994e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109956:	b922      	cbnz	r2, 8109962 <quorem+0xf2>
 8109958:	3b04      	subs	r3, #4
 810995a:	429d      	cmp	r5, r3
 810995c:	461a      	mov	r2, r3
 810995e:	d30a      	bcc.n	8109976 <quorem+0x106>
 8109960:	613c      	str	r4, [r7, #16]
 8109962:	4630      	mov	r0, r6
 8109964:	b003      	add	sp, #12
 8109966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810996a:	6812      	ldr	r2, [r2, #0]
 810996c:	3b04      	subs	r3, #4
 810996e:	2a00      	cmp	r2, #0
 8109970:	d1cc      	bne.n	810990c <quorem+0x9c>
 8109972:	3c01      	subs	r4, #1
 8109974:	e7c7      	b.n	8109906 <quorem+0x96>
 8109976:	6812      	ldr	r2, [r2, #0]
 8109978:	3b04      	subs	r3, #4
 810997a:	2a00      	cmp	r2, #0
 810997c:	d1f0      	bne.n	8109960 <quorem+0xf0>
 810997e:	3c01      	subs	r4, #1
 8109980:	e7eb      	b.n	810995a <quorem+0xea>
 8109982:	2000      	movs	r0, #0
 8109984:	e7ee      	b.n	8109964 <quorem+0xf4>
	...

08109988 <_dtoa_r>:
 8109988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810998c:	ed2d 8b04 	vpush	{d8-d9}
 8109990:	ec57 6b10 	vmov	r6, r7, d0
 8109994:	b093      	sub	sp, #76	; 0x4c
 8109996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810999c:	9106      	str	r1, [sp, #24]
 810999e:	ee10 aa10 	vmov	sl, s0
 81099a2:	4604      	mov	r4, r0
 81099a4:	9209      	str	r2, [sp, #36]	; 0x24
 81099a6:	930c      	str	r3, [sp, #48]	; 0x30
 81099a8:	46bb      	mov	fp, r7
 81099aa:	b975      	cbnz	r5, 81099ca <_dtoa_r+0x42>
 81099ac:	2010      	movs	r0, #16
 81099ae:	f001 fb6b 	bl	810b088 <malloc>
 81099b2:	4602      	mov	r2, r0
 81099b4:	6260      	str	r0, [r4, #36]	; 0x24
 81099b6:	b920      	cbnz	r0, 81099c2 <_dtoa_r+0x3a>
 81099b8:	4ba7      	ldr	r3, [pc, #668]	; (8109c58 <_dtoa_r+0x2d0>)
 81099ba:	21ea      	movs	r1, #234	; 0xea
 81099bc:	48a7      	ldr	r0, [pc, #668]	; (8109c5c <_dtoa_r+0x2d4>)
 81099be:	f002 fc89 	bl	810c2d4 <__assert_func>
 81099c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81099c6:	6005      	str	r5, [r0, #0]
 81099c8:	60c5      	str	r5, [r0, #12]
 81099ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81099cc:	6819      	ldr	r1, [r3, #0]
 81099ce:	b151      	cbz	r1, 81099e6 <_dtoa_r+0x5e>
 81099d0:	685a      	ldr	r2, [r3, #4]
 81099d2:	604a      	str	r2, [r1, #4]
 81099d4:	2301      	movs	r3, #1
 81099d6:	4093      	lsls	r3, r2
 81099d8:	608b      	str	r3, [r1, #8]
 81099da:	4620      	mov	r0, r4
 81099dc:	f001 fbbc 	bl	810b158 <_Bfree>
 81099e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81099e2:	2200      	movs	r2, #0
 81099e4:	601a      	str	r2, [r3, #0]
 81099e6:	1e3b      	subs	r3, r7, #0
 81099e8:	bfaa      	itet	ge
 81099ea:	2300      	movge	r3, #0
 81099ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 81099f0:	f8c8 3000 	strge.w	r3, [r8]
 81099f4:	4b9a      	ldr	r3, [pc, #616]	; (8109c60 <_dtoa_r+0x2d8>)
 81099f6:	bfbc      	itt	lt
 81099f8:	2201      	movlt	r2, #1
 81099fa:	f8c8 2000 	strlt.w	r2, [r8]
 81099fe:	ea33 030b 	bics.w	r3, r3, fp
 8109a02:	d11b      	bne.n	8109a3c <_dtoa_r+0xb4>
 8109a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109a06:	f242 730f 	movw	r3, #9999	; 0x270f
 8109a0a:	6013      	str	r3, [r2, #0]
 8109a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109a10:	4333      	orrs	r3, r6
 8109a12:	f000 8592 	beq.w	810a53a <_dtoa_r+0xbb2>
 8109a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109a18:	b963      	cbnz	r3, 8109a34 <_dtoa_r+0xac>
 8109a1a:	4b92      	ldr	r3, [pc, #584]	; (8109c64 <_dtoa_r+0x2dc>)
 8109a1c:	e022      	b.n	8109a64 <_dtoa_r+0xdc>
 8109a1e:	4b92      	ldr	r3, [pc, #584]	; (8109c68 <_dtoa_r+0x2e0>)
 8109a20:	9301      	str	r3, [sp, #4]
 8109a22:	3308      	adds	r3, #8
 8109a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8109a26:	6013      	str	r3, [r2, #0]
 8109a28:	9801      	ldr	r0, [sp, #4]
 8109a2a:	b013      	add	sp, #76	; 0x4c
 8109a2c:	ecbd 8b04 	vpop	{d8-d9}
 8109a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a34:	4b8b      	ldr	r3, [pc, #556]	; (8109c64 <_dtoa_r+0x2dc>)
 8109a36:	9301      	str	r3, [sp, #4]
 8109a38:	3303      	adds	r3, #3
 8109a3a:	e7f3      	b.n	8109a24 <_dtoa_r+0x9c>
 8109a3c:	2200      	movs	r2, #0
 8109a3e:	2300      	movs	r3, #0
 8109a40:	4650      	mov	r0, sl
 8109a42:	4659      	mov	r1, fp
 8109a44:	f7f7 f8c8 	bl	8100bd8 <__aeabi_dcmpeq>
 8109a48:	ec4b ab19 	vmov	d9, sl, fp
 8109a4c:	4680      	mov	r8, r0
 8109a4e:	b158      	cbz	r0, 8109a68 <_dtoa_r+0xe0>
 8109a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109a52:	2301      	movs	r3, #1
 8109a54:	6013      	str	r3, [r2, #0]
 8109a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109a58:	2b00      	cmp	r3, #0
 8109a5a:	f000 856b 	beq.w	810a534 <_dtoa_r+0xbac>
 8109a5e:	4883      	ldr	r0, [pc, #524]	; (8109c6c <_dtoa_r+0x2e4>)
 8109a60:	6018      	str	r0, [r3, #0]
 8109a62:	1e43      	subs	r3, r0, #1
 8109a64:	9301      	str	r3, [sp, #4]
 8109a66:	e7df      	b.n	8109a28 <_dtoa_r+0xa0>
 8109a68:	ec4b ab10 	vmov	d0, sl, fp
 8109a6c:	aa10      	add	r2, sp, #64	; 0x40
 8109a6e:	a911      	add	r1, sp, #68	; 0x44
 8109a70:	4620      	mov	r0, r4
 8109a72:	f001 ff1f 	bl	810b8b4 <__d2b>
 8109a76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8109a7a:	ee08 0a10 	vmov	s16, r0
 8109a7e:	2d00      	cmp	r5, #0
 8109a80:	f000 8084 	beq.w	8109b8c <_dtoa_r+0x204>
 8109a84:	ee19 3a90 	vmov	r3, s19
 8109a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109a8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8109a90:	4656      	mov	r6, sl
 8109a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8109a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8109a9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8109a9e:	4b74      	ldr	r3, [pc, #464]	; (8109c70 <_dtoa_r+0x2e8>)
 8109aa0:	2200      	movs	r2, #0
 8109aa2:	4630      	mov	r0, r6
 8109aa4:	4639      	mov	r1, r7
 8109aa6:	f7f6 fc77 	bl	8100398 <__aeabi_dsub>
 8109aaa:	a365      	add	r3, pc, #404	; (adr r3, 8109c40 <_dtoa_r+0x2b8>)
 8109aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ab0:	f7f6 fe2a 	bl	8100708 <__aeabi_dmul>
 8109ab4:	a364      	add	r3, pc, #400	; (adr r3, 8109c48 <_dtoa_r+0x2c0>)
 8109ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109aba:	f7f6 fc6f 	bl	810039c <__adddf3>
 8109abe:	4606      	mov	r6, r0
 8109ac0:	4628      	mov	r0, r5
 8109ac2:	460f      	mov	r7, r1
 8109ac4:	f7f6 fdb6 	bl	8100634 <__aeabi_i2d>
 8109ac8:	a361      	add	r3, pc, #388	; (adr r3, 8109c50 <_dtoa_r+0x2c8>)
 8109aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ace:	f7f6 fe1b 	bl	8100708 <__aeabi_dmul>
 8109ad2:	4602      	mov	r2, r0
 8109ad4:	460b      	mov	r3, r1
 8109ad6:	4630      	mov	r0, r6
 8109ad8:	4639      	mov	r1, r7
 8109ada:	f7f6 fc5f 	bl	810039c <__adddf3>
 8109ade:	4606      	mov	r6, r0
 8109ae0:	460f      	mov	r7, r1
 8109ae2:	f7f7 f8c1 	bl	8100c68 <__aeabi_d2iz>
 8109ae6:	2200      	movs	r2, #0
 8109ae8:	9000      	str	r0, [sp, #0]
 8109aea:	2300      	movs	r3, #0
 8109aec:	4630      	mov	r0, r6
 8109aee:	4639      	mov	r1, r7
 8109af0:	f7f7 f87c 	bl	8100bec <__aeabi_dcmplt>
 8109af4:	b150      	cbz	r0, 8109b0c <_dtoa_r+0x184>
 8109af6:	9800      	ldr	r0, [sp, #0]
 8109af8:	f7f6 fd9c 	bl	8100634 <__aeabi_i2d>
 8109afc:	4632      	mov	r2, r6
 8109afe:	463b      	mov	r3, r7
 8109b00:	f7f7 f86a 	bl	8100bd8 <__aeabi_dcmpeq>
 8109b04:	b910      	cbnz	r0, 8109b0c <_dtoa_r+0x184>
 8109b06:	9b00      	ldr	r3, [sp, #0]
 8109b08:	3b01      	subs	r3, #1
 8109b0a:	9300      	str	r3, [sp, #0]
 8109b0c:	9b00      	ldr	r3, [sp, #0]
 8109b0e:	2b16      	cmp	r3, #22
 8109b10:	d85a      	bhi.n	8109bc8 <_dtoa_r+0x240>
 8109b12:	9a00      	ldr	r2, [sp, #0]
 8109b14:	4b57      	ldr	r3, [pc, #348]	; (8109c74 <_dtoa_r+0x2ec>)
 8109b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b1e:	ec51 0b19 	vmov	r0, r1, d9
 8109b22:	f7f7 f863 	bl	8100bec <__aeabi_dcmplt>
 8109b26:	2800      	cmp	r0, #0
 8109b28:	d050      	beq.n	8109bcc <_dtoa_r+0x244>
 8109b2a:	9b00      	ldr	r3, [sp, #0]
 8109b2c:	3b01      	subs	r3, #1
 8109b2e:	9300      	str	r3, [sp, #0]
 8109b30:	2300      	movs	r3, #0
 8109b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8109b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8109b36:	1b5d      	subs	r5, r3, r5
 8109b38:	1e6b      	subs	r3, r5, #1
 8109b3a:	9305      	str	r3, [sp, #20]
 8109b3c:	bf45      	ittet	mi
 8109b3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8109b42:	9304      	strmi	r3, [sp, #16]
 8109b44:	2300      	movpl	r3, #0
 8109b46:	2300      	movmi	r3, #0
 8109b48:	bf4c      	ite	mi
 8109b4a:	9305      	strmi	r3, [sp, #20]
 8109b4c:	9304      	strpl	r3, [sp, #16]
 8109b4e:	9b00      	ldr	r3, [sp, #0]
 8109b50:	2b00      	cmp	r3, #0
 8109b52:	db3d      	blt.n	8109bd0 <_dtoa_r+0x248>
 8109b54:	9b05      	ldr	r3, [sp, #20]
 8109b56:	9a00      	ldr	r2, [sp, #0]
 8109b58:	920a      	str	r2, [sp, #40]	; 0x28
 8109b5a:	4413      	add	r3, r2
 8109b5c:	9305      	str	r3, [sp, #20]
 8109b5e:	2300      	movs	r3, #0
 8109b60:	9307      	str	r3, [sp, #28]
 8109b62:	9b06      	ldr	r3, [sp, #24]
 8109b64:	2b09      	cmp	r3, #9
 8109b66:	f200 8089 	bhi.w	8109c7c <_dtoa_r+0x2f4>
 8109b6a:	2b05      	cmp	r3, #5
 8109b6c:	bfc4      	itt	gt
 8109b6e:	3b04      	subgt	r3, #4
 8109b70:	9306      	strgt	r3, [sp, #24]
 8109b72:	9b06      	ldr	r3, [sp, #24]
 8109b74:	f1a3 0302 	sub.w	r3, r3, #2
 8109b78:	bfcc      	ite	gt
 8109b7a:	2500      	movgt	r5, #0
 8109b7c:	2501      	movle	r5, #1
 8109b7e:	2b03      	cmp	r3, #3
 8109b80:	f200 8087 	bhi.w	8109c92 <_dtoa_r+0x30a>
 8109b84:	e8df f003 	tbb	[pc, r3]
 8109b88:	59383a2d 	.word	0x59383a2d
 8109b8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8109b90:	441d      	add	r5, r3
 8109b92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8109b96:	2b20      	cmp	r3, #32
 8109b98:	bfc1      	itttt	gt
 8109b9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109b9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109ba2:	fa0b f303 	lslgt.w	r3, fp, r3
 8109ba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109baa:	bfda      	itte	le
 8109bac:	f1c3 0320 	rsble	r3, r3, #32
 8109bb0:	fa06 f003 	lslle.w	r0, r6, r3
 8109bb4:	4318      	orrgt	r0, r3
 8109bb6:	f7f6 fd2d 	bl	8100614 <__aeabi_ui2d>
 8109bba:	2301      	movs	r3, #1
 8109bbc:	4606      	mov	r6, r0
 8109bbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8109bc2:	3d01      	subs	r5, #1
 8109bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8109bc6:	e76a      	b.n	8109a9e <_dtoa_r+0x116>
 8109bc8:	2301      	movs	r3, #1
 8109bca:	e7b2      	b.n	8109b32 <_dtoa_r+0x1aa>
 8109bcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8109bce:	e7b1      	b.n	8109b34 <_dtoa_r+0x1ac>
 8109bd0:	9b04      	ldr	r3, [sp, #16]
 8109bd2:	9a00      	ldr	r2, [sp, #0]
 8109bd4:	1a9b      	subs	r3, r3, r2
 8109bd6:	9304      	str	r3, [sp, #16]
 8109bd8:	4253      	negs	r3, r2
 8109bda:	9307      	str	r3, [sp, #28]
 8109bdc:	2300      	movs	r3, #0
 8109bde:	930a      	str	r3, [sp, #40]	; 0x28
 8109be0:	e7bf      	b.n	8109b62 <_dtoa_r+0x1da>
 8109be2:	2300      	movs	r3, #0
 8109be4:	9308      	str	r3, [sp, #32]
 8109be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109be8:	2b00      	cmp	r3, #0
 8109bea:	dc55      	bgt.n	8109c98 <_dtoa_r+0x310>
 8109bec:	2301      	movs	r3, #1
 8109bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8109bf2:	461a      	mov	r2, r3
 8109bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8109bf6:	e00c      	b.n	8109c12 <_dtoa_r+0x28a>
 8109bf8:	2301      	movs	r3, #1
 8109bfa:	e7f3      	b.n	8109be4 <_dtoa_r+0x25c>
 8109bfc:	2300      	movs	r3, #0
 8109bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109c00:	9308      	str	r3, [sp, #32]
 8109c02:	9b00      	ldr	r3, [sp, #0]
 8109c04:	4413      	add	r3, r2
 8109c06:	9302      	str	r3, [sp, #8]
 8109c08:	3301      	adds	r3, #1
 8109c0a:	2b01      	cmp	r3, #1
 8109c0c:	9303      	str	r3, [sp, #12]
 8109c0e:	bfb8      	it	lt
 8109c10:	2301      	movlt	r3, #1
 8109c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109c14:	2200      	movs	r2, #0
 8109c16:	6042      	str	r2, [r0, #4]
 8109c18:	2204      	movs	r2, #4
 8109c1a:	f102 0614 	add.w	r6, r2, #20
 8109c1e:	429e      	cmp	r6, r3
 8109c20:	6841      	ldr	r1, [r0, #4]
 8109c22:	d93d      	bls.n	8109ca0 <_dtoa_r+0x318>
 8109c24:	4620      	mov	r0, r4
 8109c26:	f001 fa57 	bl	810b0d8 <_Balloc>
 8109c2a:	9001      	str	r0, [sp, #4]
 8109c2c:	2800      	cmp	r0, #0
 8109c2e:	d13b      	bne.n	8109ca8 <_dtoa_r+0x320>
 8109c30:	4b11      	ldr	r3, [pc, #68]	; (8109c78 <_dtoa_r+0x2f0>)
 8109c32:	4602      	mov	r2, r0
 8109c34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8109c38:	e6c0      	b.n	81099bc <_dtoa_r+0x34>
 8109c3a:	2301      	movs	r3, #1
 8109c3c:	e7df      	b.n	8109bfe <_dtoa_r+0x276>
 8109c3e:	bf00      	nop
 8109c40:	636f4361 	.word	0x636f4361
 8109c44:	3fd287a7 	.word	0x3fd287a7
 8109c48:	8b60c8b3 	.word	0x8b60c8b3
 8109c4c:	3fc68a28 	.word	0x3fc68a28
 8109c50:	509f79fb 	.word	0x509f79fb
 8109c54:	3fd34413 	.word	0x3fd34413
 8109c58:	0810c7fe 	.word	0x0810c7fe
 8109c5c:	0810c815 	.word	0x0810c815
 8109c60:	7ff00000 	.word	0x7ff00000
 8109c64:	0810c7fa 	.word	0x0810c7fa
 8109c68:	0810c7f1 	.word	0x0810c7f1
 8109c6c:	0810c671 	.word	0x0810c671
 8109c70:	3ff80000 	.word	0x3ff80000
 8109c74:	0810c9e8 	.word	0x0810c9e8
 8109c78:	0810c870 	.word	0x0810c870
 8109c7c:	2501      	movs	r5, #1
 8109c7e:	2300      	movs	r3, #0
 8109c80:	9306      	str	r3, [sp, #24]
 8109c82:	9508      	str	r5, [sp, #32]
 8109c84:	f04f 33ff 	mov.w	r3, #4294967295
 8109c88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8109c8c:	2200      	movs	r2, #0
 8109c8e:	2312      	movs	r3, #18
 8109c90:	e7b0      	b.n	8109bf4 <_dtoa_r+0x26c>
 8109c92:	2301      	movs	r3, #1
 8109c94:	9308      	str	r3, [sp, #32]
 8109c96:	e7f5      	b.n	8109c84 <_dtoa_r+0x2fc>
 8109c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109c9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8109c9e:	e7b8      	b.n	8109c12 <_dtoa_r+0x28a>
 8109ca0:	3101      	adds	r1, #1
 8109ca2:	6041      	str	r1, [r0, #4]
 8109ca4:	0052      	lsls	r2, r2, #1
 8109ca6:	e7b8      	b.n	8109c1a <_dtoa_r+0x292>
 8109ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109caa:	9a01      	ldr	r2, [sp, #4]
 8109cac:	601a      	str	r2, [r3, #0]
 8109cae:	9b03      	ldr	r3, [sp, #12]
 8109cb0:	2b0e      	cmp	r3, #14
 8109cb2:	f200 809d 	bhi.w	8109df0 <_dtoa_r+0x468>
 8109cb6:	2d00      	cmp	r5, #0
 8109cb8:	f000 809a 	beq.w	8109df0 <_dtoa_r+0x468>
 8109cbc:	9b00      	ldr	r3, [sp, #0]
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	dd32      	ble.n	8109d28 <_dtoa_r+0x3a0>
 8109cc2:	4ab7      	ldr	r2, [pc, #732]	; (8109fa0 <_dtoa_r+0x618>)
 8109cc4:	f003 030f 	and.w	r3, r3, #15
 8109cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109cd0:	9b00      	ldr	r3, [sp, #0]
 8109cd2:	05d8      	lsls	r0, r3, #23
 8109cd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8109cd8:	d516      	bpl.n	8109d08 <_dtoa_r+0x380>
 8109cda:	4bb2      	ldr	r3, [pc, #712]	; (8109fa4 <_dtoa_r+0x61c>)
 8109cdc:	ec51 0b19 	vmov	r0, r1, d9
 8109ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109ce4:	f7f6 fe3a 	bl	810095c <__aeabi_ddiv>
 8109ce8:	f007 070f 	and.w	r7, r7, #15
 8109cec:	4682      	mov	sl, r0
 8109cee:	468b      	mov	fp, r1
 8109cf0:	2503      	movs	r5, #3
 8109cf2:	4eac      	ldr	r6, [pc, #688]	; (8109fa4 <_dtoa_r+0x61c>)
 8109cf4:	b957      	cbnz	r7, 8109d0c <_dtoa_r+0x384>
 8109cf6:	4642      	mov	r2, r8
 8109cf8:	464b      	mov	r3, r9
 8109cfa:	4650      	mov	r0, sl
 8109cfc:	4659      	mov	r1, fp
 8109cfe:	f7f6 fe2d 	bl	810095c <__aeabi_ddiv>
 8109d02:	4682      	mov	sl, r0
 8109d04:	468b      	mov	fp, r1
 8109d06:	e028      	b.n	8109d5a <_dtoa_r+0x3d2>
 8109d08:	2502      	movs	r5, #2
 8109d0a:	e7f2      	b.n	8109cf2 <_dtoa_r+0x36a>
 8109d0c:	07f9      	lsls	r1, r7, #31
 8109d0e:	d508      	bpl.n	8109d22 <_dtoa_r+0x39a>
 8109d10:	4640      	mov	r0, r8
 8109d12:	4649      	mov	r1, r9
 8109d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109d18:	f7f6 fcf6 	bl	8100708 <__aeabi_dmul>
 8109d1c:	3501      	adds	r5, #1
 8109d1e:	4680      	mov	r8, r0
 8109d20:	4689      	mov	r9, r1
 8109d22:	107f      	asrs	r7, r7, #1
 8109d24:	3608      	adds	r6, #8
 8109d26:	e7e5      	b.n	8109cf4 <_dtoa_r+0x36c>
 8109d28:	f000 809b 	beq.w	8109e62 <_dtoa_r+0x4da>
 8109d2c:	9b00      	ldr	r3, [sp, #0]
 8109d2e:	4f9d      	ldr	r7, [pc, #628]	; (8109fa4 <_dtoa_r+0x61c>)
 8109d30:	425e      	negs	r6, r3
 8109d32:	4b9b      	ldr	r3, [pc, #620]	; (8109fa0 <_dtoa_r+0x618>)
 8109d34:	f006 020f 	and.w	r2, r6, #15
 8109d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d40:	ec51 0b19 	vmov	r0, r1, d9
 8109d44:	f7f6 fce0 	bl	8100708 <__aeabi_dmul>
 8109d48:	1136      	asrs	r6, r6, #4
 8109d4a:	4682      	mov	sl, r0
 8109d4c:	468b      	mov	fp, r1
 8109d4e:	2300      	movs	r3, #0
 8109d50:	2502      	movs	r5, #2
 8109d52:	2e00      	cmp	r6, #0
 8109d54:	d17a      	bne.n	8109e4c <_dtoa_r+0x4c4>
 8109d56:	2b00      	cmp	r3, #0
 8109d58:	d1d3      	bne.n	8109d02 <_dtoa_r+0x37a>
 8109d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109d5c:	2b00      	cmp	r3, #0
 8109d5e:	f000 8082 	beq.w	8109e66 <_dtoa_r+0x4de>
 8109d62:	4b91      	ldr	r3, [pc, #580]	; (8109fa8 <_dtoa_r+0x620>)
 8109d64:	2200      	movs	r2, #0
 8109d66:	4650      	mov	r0, sl
 8109d68:	4659      	mov	r1, fp
 8109d6a:	f7f6 ff3f 	bl	8100bec <__aeabi_dcmplt>
 8109d6e:	2800      	cmp	r0, #0
 8109d70:	d079      	beq.n	8109e66 <_dtoa_r+0x4de>
 8109d72:	9b03      	ldr	r3, [sp, #12]
 8109d74:	2b00      	cmp	r3, #0
 8109d76:	d076      	beq.n	8109e66 <_dtoa_r+0x4de>
 8109d78:	9b02      	ldr	r3, [sp, #8]
 8109d7a:	2b00      	cmp	r3, #0
 8109d7c:	dd36      	ble.n	8109dec <_dtoa_r+0x464>
 8109d7e:	9b00      	ldr	r3, [sp, #0]
 8109d80:	4650      	mov	r0, sl
 8109d82:	4659      	mov	r1, fp
 8109d84:	1e5f      	subs	r7, r3, #1
 8109d86:	2200      	movs	r2, #0
 8109d88:	4b88      	ldr	r3, [pc, #544]	; (8109fac <_dtoa_r+0x624>)
 8109d8a:	f7f6 fcbd 	bl	8100708 <__aeabi_dmul>
 8109d8e:	9e02      	ldr	r6, [sp, #8]
 8109d90:	4682      	mov	sl, r0
 8109d92:	468b      	mov	fp, r1
 8109d94:	3501      	adds	r5, #1
 8109d96:	4628      	mov	r0, r5
 8109d98:	f7f6 fc4c 	bl	8100634 <__aeabi_i2d>
 8109d9c:	4652      	mov	r2, sl
 8109d9e:	465b      	mov	r3, fp
 8109da0:	f7f6 fcb2 	bl	8100708 <__aeabi_dmul>
 8109da4:	4b82      	ldr	r3, [pc, #520]	; (8109fb0 <_dtoa_r+0x628>)
 8109da6:	2200      	movs	r2, #0
 8109da8:	f7f6 faf8 	bl	810039c <__adddf3>
 8109dac:	46d0      	mov	r8, sl
 8109dae:	46d9      	mov	r9, fp
 8109db0:	4682      	mov	sl, r0
 8109db2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8109db6:	2e00      	cmp	r6, #0
 8109db8:	d158      	bne.n	8109e6c <_dtoa_r+0x4e4>
 8109dba:	4b7e      	ldr	r3, [pc, #504]	; (8109fb4 <_dtoa_r+0x62c>)
 8109dbc:	2200      	movs	r2, #0
 8109dbe:	4640      	mov	r0, r8
 8109dc0:	4649      	mov	r1, r9
 8109dc2:	f7f6 fae9 	bl	8100398 <__aeabi_dsub>
 8109dc6:	4652      	mov	r2, sl
 8109dc8:	465b      	mov	r3, fp
 8109dca:	4680      	mov	r8, r0
 8109dcc:	4689      	mov	r9, r1
 8109dce:	f7f6 ff2b 	bl	8100c28 <__aeabi_dcmpgt>
 8109dd2:	2800      	cmp	r0, #0
 8109dd4:	f040 8295 	bne.w	810a302 <_dtoa_r+0x97a>
 8109dd8:	4652      	mov	r2, sl
 8109dda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8109dde:	4640      	mov	r0, r8
 8109de0:	4649      	mov	r1, r9
 8109de2:	f7f6 ff03 	bl	8100bec <__aeabi_dcmplt>
 8109de6:	2800      	cmp	r0, #0
 8109de8:	f040 8289 	bne.w	810a2fe <_dtoa_r+0x976>
 8109dec:	ec5b ab19 	vmov	sl, fp, d9
 8109df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109df2:	2b00      	cmp	r3, #0
 8109df4:	f2c0 8148 	blt.w	810a088 <_dtoa_r+0x700>
 8109df8:	9a00      	ldr	r2, [sp, #0]
 8109dfa:	2a0e      	cmp	r2, #14
 8109dfc:	f300 8144 	bgt.w	810a088 <_dtoa_r+0x700>
 8109e00:	4b67      	ldr	r3, [pc, #412]	; (8109fa0 <_dtoa_r+0x618>)
 8109e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e0c:	2b00      	cmp	r3, #0
 8109e0e:	f280 80d5 	bge.w	8109fbc <_dtoa_r+0x634>
 8109e12:	9b03      	ldr	r3, [sp, #12]
 8109e14:	2b00      	cmp	r3, #0
 8109e16:	f300 80d1 	bgt.w	8109fbc <_dtoa_r+0x634>
 8109e1a:	f040 826f 	bne.w	810a2fc <_dtoa_r+0x974>
 8109e1e:	4b65      	ldr	r3, [pc, #404]	; (8109fb4 <_dtoa_r+0x62c>)
 8109e20:	2200      	movs	r2, #0
 8109e22:	4640      	mov	r0, r8
 8109e24:	4649      	mov	r1, r9
 8109e26:	f7f6 fc6f 	bl	8100708 <__aeabi_dmul>
 8109e2a:	4652      	mov	r2, sl
 8109e2c:	465b      	mov	r3, fp
 8109e2e:	f7f6 fef1 	bl	8100c14 <__aeabi_dcmpge>
 8109e32:	9e03      	ldr	r6, [sp, #12]
 8109e34:	4637      	mov	r7, r6
 8109e36:	2800      	cmp	r0, #0
 8109e38:	f040 8245 	bne.w	810a2c6 <_dtoa_r+0x93e>
 8109e3c:	9d01      	ldr	r5, [sp, #4]
 8109e3e:	2331      	movs	r3, #49	; 0x31
 8109e40:	f805 3b01 	strb.w	r3, [r5], #1
 8109e44:	9b00      	ldr	r3, [sp, #0]
 8109e46:	3301      	adds	r3, #1
 8109e48:	9300      	str	r3, [sp, #0]
 8109e4a:	e240      	b.n	810a2ce <_dtoa_r+0x946>
 8109e4c:	07f2      	lsls	r2, r6, #31
 8109e4e:	d505      	bpl.n	8109e5c <_dtoa_r+0x4d4>
 8109e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109e54:	f7f6 fc58 	bl	8100708 <__aeabi_dmul>
 8109e58:	3501      	adds	r5, #1
 8109e5a:	2301      	movs	r3, #1
 8109e5c:	1076      	asrs	r6, r6, #1
 8109e5e:	3708      	adds	r7, #8
 8109e60:	e777      	b.n	8109d52 <_dtoa_r+0x3ca>
 8109e62:	2502      	movs	r5, #2
 8109e64:	e779      	b.n	8109d5a <_dtoa_r+0x3d2>
 8109e66:	9f00      	ldr	r7, [sp, #0]
 8109e68:	9e03      	ldr	r6, [sp, #12]
 8109e6a:	e794      	b.n	8109d96 <_dtoa_r+0x40e>
 8109e6c:	9901      	ldr	r1, [sp, #4]
 8109e6e:	4b4c      	ldr	r3, [pc, #304]	; (8109fa0 <_dtoa_r+0x618>)
 8109e70:	4431      	add	r1, r6
 8109e72:	910d      	str	r1, [sp, #52]	; 0x34
 8109e74:	9908      	ldr	r1, [sp, #32]
 8109e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8109e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8109e7e:	2900      	cmp	r1, #0
 8109e80:	d043      	beq.n	8109f0a <_dtoa_r+0x582>
 8109e82:	494d      	ldr	r1, [pc, #308]	; (8109fb8 <_dtoa_r+0x630>)
 8109e84:	2000      	movs	r0, #0
 8109e86:	f7f6 fd69 	bl	810095c <__aeabi_ddiv>
 8109e8a:	4652      	mov	r2, sl
 8109e8c:	465b      	mov	r3, fp
 8109e8e:	f7f6 fa83 	bl	8100398 <__aeabi_dsub>
 8109e92:	9d01      	ldr	r5, [sp, #4]
 8109e94:	4682      	mov	sl, r0
 8109e96:	468b      	mov	fp, r1
 8109e98:	4649      	mov	r1, r9
 8109e9a:	4640      	mov	r0, r8
 8109e9c:	f7f6 fee4 	bl	8100c68 <__aeabi_d2iz>
 8109ea0:	4606      	mov	r6, r0
 8109ea2:	f7f6 fbc7 	bl	8100634 <__aeabi_i2d>
 8109ea6:	4602      	mov	r2, r0
 8109ea8:	460b      	mov	r3, r1
 8109eaa:	4640      	mov	r0, r8
 8109eac:	4649      	mov	r1, r9
 8109eae:	f7f6 fa73 	bl	8100398 <__aeabi_dsub>
 8109eb2:	3630      	adds	r6, #48	; 0x30
 8109eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8109eb8:	4652      	mov	r2, sl
 8109eba:	465b      	mov	r3, fp
 8109ebc:	4680      	mov	r8, r0
 8109ebe:	4689      	mov	r9, r1
 8109ec0:	f7f6 fe94 	bl	8100bec <__aeabi_dcmplt>
 8109ec4:	2800      	cmp	r0, #0
 8109ec6:	d163      	bne.n	8109f90 <_dtoa_r+0x608>
 8109ec8:	4642      	mov	r2, r8
 8109eca:	464b      	mov	r3, r9
 8109ecc:	4936      	ldr	r1, [pc, #216]	; (8109fa8 <_dtoa_r+0x620>)
 8109ece:	2000      	movs	r0, #0
 8109ed0:	f7f6 fa62 	bl	8100398 <__aeabi_dsub>
 8109ed4:	4652      	mov	r2, sl
 8109ed6:	465b      	mov	r3, fp
 8109ed8:	f7f6 fe88 	bl	8100bec <__aeabi_dcmplt>
 8109edc:	2800      	cmp	r0, #0
 8109ede:	f040 80b5 	bne.w	810a04c <_dtoa_r+0x6c4>
 8109ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109ee4:	429d      	cmp	r5, r3
 8109ee6:	d081      	beq.n	8109dec <_dtoa_r+0x464>
 8109ee8:	4b30      	ldr	r3, [pc, #192]	; (8109fac <_dtoa_r+0x624>)
 8109eea:	2200      	movs	r2, #0
 8109eec:	4650      	mov	r0, sl
 8109eee:	4659      	mov	r1, fp
 8109ef0:	f7f6 fc0a 	bl	8100708 <__aeabi_dmul>
 8109ef4:	4b2d      	ldr	r3, [pc, #180]	; (8109fac <_dtoa_r+0x624>)
 8109ef6:	4682      	mov	sl, r0
 8109ef8:	468b      	mov	fp, r1
 8109efa:	4640      	mov	r0, r8
 8109efc:	4649      	mov	r1, r9
 8109efe:	2200      	movs	r2, #0
 8109f00:	f7f6 fc02 	bl	8100708 <__aeabi_dmul>
 8109f04:	4680      	mov	r8, r0
 8109f06:	4689      	mov	r9, r1
 8109f08:	e7c6      	b.n	8109e98 <_dtoa_r+0x510>
 8109f0a:	4650      	mov	r0, sl
 8109f0c:	4659      	mov	r1, fp
 8109f0e:	f7f6 fbfb 	bl	8100708 <__aeabi_dmul>
 8109f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109f14:	9d01      	ldr	r5, [sp, #4]
 8109f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8109f18:	4682      	mov	sl, r0
 8109f1a:	468b      	mov	fp, r1
 8109f1c:	4649      	mov	r1, r9
 8109f1e:	4640      	mov	r0, r8
 8109f20:	f7f6 fea2 	bl	8100c68 <__aeabi_d2iz>
 8109f24:	4606      	mov	r6, r0
 8109f26:	f7f6 fb85 	bl	8100634 <__aeabi_i2d>
 8109f2a:	3630      	adds	r6, #48	; 0x30
 8109f2c:	4602      	mov	r2, r0
 8109f2e:	460b      	mov	r3, r1
 8109f30:	4640      	mov	r0, r8
 8109f32:	4649      	mov	r1, r9
 8109f34:	f7f6 fa30 	bl	8100398 <__aeabi_dsub>
 8109f38:	f805 6b01 	strb.w	r6, [r5], #1
 8109f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109f3e:	429d      	cmp	r5, r3
 8109f40:	4680      	mov	r8, r0
 8109f42:	4689      	mov	r9, r1
 8109f44:	f04f 0200 	mov.w	r2, #0
 8109f48:	d124      	bne.n	8109f94 <_dtoa_r+0x60c>
 8109f4a:	4b1b      	ldr	r3, [pc, #108]	; (8109fb8 <_dtoa_r+0x630>)
 8109f4c:	4650      	mov	r0, sl
 8109f4e:	4659      	mov	r1, fp
 8109f50:	f7f6 fa24 	bl	810039c <__adddf3>
 8109f54:	4602      	mov	r2, r0
 8109f56:	460b      	mov	r3, r1
 8109f58:	4640      	mov	r0, r8
 8109f5a:	4649      	mov	r1, r9
 8109f5c:	f7f6 fe64 	bl	8100c28 <__aeabi_dcmpgt>
 8109f60:	2800      	cmp	r0, #0
 8109f62:	d173      	bne.n	810a04c <_dtoa_r+0x6c4>
 8109f64:	4652      	mov	r2, sl
 8109f66:	465b      	mov	r3, fp
 8109f68:	4913      	ldr	r1, [pc, #76]	; (8109fb8 <_dtoa_r+0x630>)
 8109f6a:	2000      	movs	r0, #0
 8109f6c:	f7f6 fa14 	bl	8100398 <__aeabi_dsub>
 8109f70:	4602      	mov	r2, r0
 8109f72:	460b      	mov	r3, r1
 8109f74:	4640      	mov	r0, r8
 8109f76:	4649      	mov	r1, r9
 8109f78:	f7f6 fe38 	bl	8100bec <__aeabi_dcmplt>
 8109f7c:	2800      	cmp	r0, #0
 8109f7e:	f43f af35 	beq.w	8109dec <_dtoa_r+0x464>
 8109f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8109f84:	1e6b      	subs	r3, r5, #1
 8109f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8109f88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109f8c:	2b30      	cmp	r3, #48	; 0x30
 8109f8e:	d0f8      	beq.n	8109f82 <_dtoa_r+0x5fa>
 8109f90:	9700      	str	r7, [sp, #0]
 8109f92:	e049      	b.n	810a028 <_dtoa_r+0x6a0>
 8109f94:	4b05      	ldr	r3, [pc, #20]	; (8109fac <_dtoa_r+0x624>)
 8109f96:	f7f6 fbb7 	bl	8100708 <__aeabi_dmul>
 8109f9a:	4680      	mov	r8, r0
 8109f9c:	4689      	mov	r9, r1
 8109f9e:	e7bd      	b.n	8109f1c <_dtoa_r+0x594>
 8109fa0:	0810c9e8 	.word	0x0810c9e8
 8109fa4:	0810c9c0 	.word	0x0810c9c0
 8109fa8:	3ff00000 	.word	0x3ff00000
 8109fac:	40240000 	.word	0x40240000
 8109fb0:	401c0000 	.word	0x401c0000
 8109fb4:	40140000 	.word	0x40140000
 8109fb8:	3fe00000 	.word	0x3fe00000
 8109fbc:	9d01      	ldr	r5, [sp, #4]
 8109fbe:	4656      	mov	r6, sl
 8109fc0:	465f      	mov	r7, fp
 8109fc2:	4642      	mov	r2, r8
 8109fc4:	464b      	mov	r3, r9
 8109fc6:	4630      	mov	r0, r6
 8109fc8:	4639      	mov	r1, r7
 8109fca:	f7f6 fcc7 	bl	810095c <__aeabi_ddiv>
 8109fce:	f7f6 fe4b 	bl	8100c68 <__aeabi_d2iz>
 8109fd2:	4682      	mov	sl, r0
 8109fd4:	f7f6 fb2e 	bl	8100634 <__aeabi_i2d>
 8109fd8:	4642      	mov	r2, r8
 8109fda:	464b      	mov	r3, r9
 8109fdc:	f7f6 fb94 	bl	8100708 <__aeabi_dmul>
 8109fe0:	4602      	mov	r2, r0
 8109fe2:	460b      	mov	r3, r1
 8109fe4:	4630      	mov	r0, r6
 8109fe6:	4639      	mov	r1, r7
 8109fe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8109fec:	f7f6 f9d4 	bl	8100398 <__aeabi_dsub>
 8109ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8109ff4:	9e01      	ldr	r6, [sp, #4]
 8109ff6:	9f03      	ldr	r7, [sp, #12]
 8109ff8:	1bae      	subs	r6, r5, r6
 8109ffa:	42b7      	cmp	r7, r6
 8109ffc:	4602      	mov	r2, r0
 8109ffe:	460b      	mov	r3, r1
 810a000:	d135      	bne.n	810a06e <_dtoa_r+0x6e6>
 810a002:	f7f6 f9cb 	bl	810039c <__adddf3>
 810a006:	4642      	mov	r2, r8
 810a008:	464b      	mov	r3, r9
 810a00a:	4606      	mov	r6, r0
 810a00c:	460f      	mov	r7, r1
 810a00e:	f7f6 fe0b 	bl	8100c28 <__aeabi_dcmpgt>
 810a012:	b9d0      	cbnz	r0, 810a04a <_dtoa_r+0x6c2>
 810a014:	4642      	mov	r2, r8
 810a016:	464b      	mov	r3, r9
 810a018:	4630      	mov	r0, r6
 810a01a:	4639      	mov	r1, r7
 810a01c:	f7f6 fddc 	bl	8100bd8 <__aeabi_dcmpeq>
 810a020:	b110      	cbz	r0, 810a028 <_dtoa_r+0x6a0>
 810a022:	f01a 0f01 	tst.w	sl, #1
 810a026:	d110      	bne.n	810a04a <_dtoa_r+0x6c2>
 810a028:	4620      	mov	r0, r4
 810a02a:	ee18 1a10 	vmov	r1, s16
 810a02e:	f001 f893 	bl	810b158 <_Bfree>
 810a032:	2300      	movs	r3, #0
 810a034:	9800      	ldr	r0, [sp, #0]
 810a036:	702b      	strb	r3, [r5, #0]
 810a038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a03a:	3001      	adds	r0, #1
 810a03c:	6018      	str	r0, [r3, #0]
 810a03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a040:	2b00      	cmp	r3, #0
 810a042:	f43f acf1 	beq.w	8109a28 <_dtoa_r+0xa0>
 810a046:	601d      	str	r5, [r3, #0]
 810a048:	e4ee      	b.n	8109a28 <_dtoa_r+0xa0>
 810a04a:	9f00      	ldr	r7, [sp, #0]
 810a04c:	462b      	mov	r3, r5
 810a04e:	461d      	mov	r5, r3
 810a050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a054:	2a39      	cmp	r2, #57	; 0x39
 810a056:	d106      	bne.n	810a066 <_dtoa_r+0x6de>
 810a058:	9a01      	ldr	r2, [sp, #4]
 810a05a:	429a      	cmp	r2, r3
 810a05c:	d1f7      	bne.n	810a04e <_dtoa_r+0x6c6>
 810a05e:	9901      	ldr	r1, [sp, #4]
 810a060:	2230      	movs	r2, #48	; 0x30
 810a062:	3701      	adds	r7, #1
 810a064:	700a      	strb	r2, [r1, #0]
 810a066:	781a      	ldrb	r2, [r3, #0]
 810a068:	3201      	adds	r2, #1
 810a06a:	701a      	strb	r2, [r3, #0]
 810a06c:	e790      	b.n	8109f90 <_dtoa_r+0x608>
 810a06e:	4ba6      	ldr	r3, [pc, #664]	; (810a308 <_dtoa_r+0x980>)
 810a070:	2200      	movs	r2, #0
 810a072:	f7f6 fb49 	bl	8100708 <__aeabi_dmul>
 810a076:	2200      	movs	r2, #0
 810a078:	2300      	movs	r3, #0
 810a07a:	4606      	mov	r6, r0
 810a07c:	460f      	mov	r7, r1
 810a07e:	f7f6 fdab 	bl	8100bd8 <__aeabi_dcmpeq>
 810a082:	2800      	cmp	r0, #0
 810a084:	d09d      	beq.n	8109fc2 <_dtoa_r+0x63a>
 810a086:	e7cf      	b.n	810a028 <_dtoa_r+0x6a0>
 810a088:	9a08      	ldr	r2, [sp, #32]
 810a08a:	2a00      	cmp	r2, #0
 810a08c:	f000 80d7 	beq.w	810a23e <_dtoa_r+0x8b6>
 810a090:	9a06      	ldr	r2, [sp, #24]
 810a092:	2a01      	cmp	r2, #1
 810a094:	f300 80ba 	bgt.w	810a20c <_dtoa_r+0x884>
 810a098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a09a:	2a00      	cmp	r2, #0
 810a09c:	f000 80b2 	beq.w	810a204 <_dtoa_r+0x87c>
 810a0a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810a0a4:	9e07      	ldr	r6, [sp, #28]
 810a0a6:	9d04      	ldr	r5, [sp, #16]
 810a0a8:	9a04      	ldr	r2, [sp, #16]
 810a0aa:	441a      	add	r2, r3
 810a0ac:	9204      	str	r2, [sp, #16]
 810a0ae:	9a05      	ldr	r2, [sp, #20]
 810a0b0:	2101      	movs	r1, #1
 810a0b2:	441a      	add	r2, r3
 810a0b4:	4620      	mov	r0, r4
 810a0b6:	9205      	str	r2, [sp, #20]
 810a0b8:	f001 f950 	bl	810b35c <__i2b>
 810a0bc:	4607      	mov	r7, r0
 810a0be:	2d00      	cmp	r5, #0
 810a0c0:	dd0c      	ble.n	810a0dc <_dtoa_r+0x754>
 810a0c2:	9b05      	ldr	r3, [sp, #20]
 810a0c4:	2b00      	cmp	r3, #0
 810a0c6:	dd09      	ble.n	810a0dc <_dtoa_r+0x754>
 810a0c8:	42ab      	cmp	r3, r5
 810a0ca:	9a04      	ldr	r2, [sp, #16]
 810a0cc:	bfa8      	it	ge
 810a0ce:	462b      	movge	r3, r5
 810a0d0:	1ad2      	subs	r2, r2, r3
 810a0d2:	9204      	str	r2, [sp, #16]
 810a0d4:	9a05      	ldr	r2, [sp, #20]
 810a0d6:	1aed      	subs	r5, r5, r3
 810a0d8:	1ad3      	subs	r3, r2, r3
 810a0da:	9305      	str	r3, [sp, #20]
 810a0dc:	9b07      	ldr	r3, [sp, #28]
 810a0de:	b31b      	cbz	r3, 810a128 <_dtoa_r+0x7a0>
 810a0e0:	9b08      	ldr	r3, [sp, #32]
 810a0e2:	2b00      	cmp	r3, #0
 810a0e4:	f000 80af 	beq.w	810a246 <_dtoa_r+0x8be>
 810a0e8:	2e00      	cmp	r6, #0
 810a0ea:	dd13      	ble.n	810a114 <_dtoa_r+0x78c>
 810a0ec:	4639      	mov	r1, r7
 810a0ee:	4632      	mov	r2, r6
 810a0f0:	4620      	mov	r0, r4
 810a0f2:	f001 f9f3 	bl	810b4dc <__pow5mult>
 810a0f6:	ee18 2a10 	vmov	r2, s16
 810a0fa:	4601      	mov	r1, r0
 810a0fc:	4607      	mov	r7, r0
 810a0fe:	4620      	mov	r0, r4
 810a100:	f001 f942 	bl	810b388 <__multiply>
 810a104:	ee18 1a10 	vmov	r1, s16
 810a108:	4680      	mov	r8, r0
 810a10a:	4620      	mov	r0, r4
 810a10c:	f001 f824 	bl	810b158 <_Bfree>
 810a110:	ee08 8a10 	vmov	s16, r8
 810a114:	9b07      	ldr	r3, [sp, #28]
 810a116:	1b9a      	subs	r2, r3, r6
 810a118:	d006      	beq.n	810a128 <_dtoa_r+0x7a0>
 810a11a:	ee18 1a10 	vmov	r1, s16
 810a11e:	4620      	mov	r0, r4
 810a120:	f001 f9dc 	bl	810b4dc <__pow5mult>
 810a124:	ee08 0a10 	vmov	s16, r0
 810a128:	2101      	movs	r1, #1
 810a12a:	4620      	mov	r0, r4
 810a12c:	f001 f916 	bl	810b35c <__i2b>
 810a130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a132:	2b00      	cmp	r3, #0
 810a134:	4606      	mov	r6, r0
 810a136:	f340 8088 	ble.w	810a24a <_dtoa_r+0x8c2>
 810a13a:	461a      	mov	r2, r3
 810a13c:	4601      	mov	r1, r0
 810a13e:	4620      	mov	r0, r4
 810a140:	f001 f9cc 	bl	810b4dc <__pow5mult>
 810a144:	9b06      	ldr	r3, [sp, #24]
 810a146:	2b01      	cmp	r3, #1
 810a148:	4606      	mov	r6, r0
 810a14a:	f340 8081 	ble.w	810a250 <_dtoa_r+0x8c8>
 810a14e:	f04f 0800 	mov.w	r8, #0
 810a152:	6933      	ldr	r3, [r6, #16]
 810a154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810a158:	6918      	ldr	r0, [r3, #16]
 810a15a:	f001 f8af 	bl	810b2bc <__hi0bits>
 810a15e:	f1c0 0020 	rsb	r0, r0, #32
 810a162:	9b05      	ldr	r3, [sp, #20]
 810a164:	4418      	add	r0, r3
 810a166:	f010 001f 	ands.w	r0, r0, #31
 810a16a:	f000 8092 	beq.w	810a292 <_dtoa_r+0x90a>
 810a16e:	f1c0 0320 	rsb	r3, r0, #32
 810a172:	2b04      	cmp	r3, #4
 810a174:	f340 808a 	ble.w	810a28c <_dtoa_r+0x904>
 810a178:	f1c0 001c 	rsb	r0, r0, #28
 810a17c:	9b04      	ldr	r3, [sp, #16]
 810a17e:	4403      	add	r3, r0
 810a180:	9304      	str	r3, [sp, #16]
 810a182:	9b05      	ldr	r3, [sp, #20]
 810a184:	4403      	add	r3, r0
 810a186:	4405      	add	r5, r0
 810a188:	9305      	str	r3, [sp, #20]
 810a18a:	9b04      	ldr	r3, [sp, #16]
 810a18c:	2b00      	cmp	r3, #0
 810a18e:	dd07      	ble.n	810a1a0 <_dtoa_r+0x818>
 810a190:	ee18 1a10 	vmov	r1, s16
 810a194:	461a      	mov	r2, r3
 810a196:	4620      	mov	r0, r4
 810a198:	f001 f9fa 	bl	810b590 <__lshift>
 810a19c:	ee08 0a10 	vmov	s16, r0
 810a1a0:	9b05      	ldr	r3, [sp, #20]
 810a1a2:	2b00      	cmp	r3, #0
 810a1a4:	dd05      	ble.n	810a1b2 <_dtoa_r+0x82a>
 810a1a6:	4631      	mov	r1, r6
 810a1a8:	461a      	mov	r2, r3
 810a1aa:	4620      	mov	r0, r4
 810a1ac:	f001 f9f0 	bl	810b590 <__lshift>
 810a1b0:	4606      	mov	r6, r0
 810a1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a1b4:	2b00      	cmp	r3, #0
 810a1b6:	d06e      	beq.n	810a296 <_dtoa_r+0x90e>
 810a1b8:	ee18 0a10 	vmov	r0, s16
 810a1bc:	4631      	mov	r1, r6
 810a1be:	f001 fa57 	bl	810b670 <__mcmp>
 810a1c2:	2800      	cmp	r0, #0
 810a1c4:	da67      	bge.n	810a296 <_dtoa_r+0x90e>
 810a1c6:	9b00      	ldr	r3, [sp, #0]
 810a1c8:	3b01      	subs	r3, #1
 810a1ca:	ee18 1a10 	vmov	r1, s16
 810a1ce:	9300      	str	r3, [sp, #0]
 810a1d0:	220a      	movs	r2, #10
 810a1d2:	2300      	movs	r3, #0
 810a1d4:	4620      	mov	r0, r4
 810a1d6:	f000 ffe1 	bl	810b19c <__multadd>
 810a1da:	9b08      	ldr	r3, [sp, #32]
 810a1dc:	ee08 0a10 	vmov	s16, r0
 810a1e0:	2b00      	cmp	r3, #0
 810a1e2:	f000 81b1 	beq.w	810a548 <_dtoa_r+0xbc0>
 810a1e6:	2300      	movs	r3, #0
 810a1e8:	4639      	mov	r1, r7
 810a1ea:	220a      	movs	r2, #10
 810a1ec:	4620      	mov	r0, r4
 810a1ee:	f000 ffd5 	bl	810b19c <__multadd>
 810a1f2:	9b02      	ldr	r3, [sp, #8]
 810a1f4:	2b00      	cmp	r3, #0
 810a1f6:	4607      	mov	r7, r0
 810a1f8:	f300 808e 	bgt.w	810a318 <_dtoa_r+0x990>
 810a1fc:	9b06      	ldr	r3, [sp, #24]
 810a1fe:	2b02      	cmp	r3, #2
 810a200:	dc51      	bgt.n	810a2a6 <_dtoa_r+0x91e>
 810a202:	e089      	b.n	810a318 <_dtoa_r+0x990>
 810a204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810a20a:	e74b      	b.n	810a0a4 <_dtoa_r+0x71c>
 810a20c:	9b03      	ldr	r3, [sp, #12]
 810a20e:	1e5e      	subs	r6, r3, #1
 810a210:	9b07      	ldr	r3, [sp, #28]
 810a212:	42b3      	cmp	r3, r6
 810a214:	bfbf      	itttt	lt
 810a216:	9b07      	ldrlt	r3, [sp, #28]
 810a218:	9607      	strlt	r6, [sp, #28]
 810a21a:	1af2      	sublt	r2, r6, r3
 810a21c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810a21e:	bfb6      	itet	lt
 810a220:	189b      	addlt	r3, r3, r2
 810a222:	1b9e      	subge	r6, r3, r6
 810a224:	930a      	strlt	r3, [sp, #40]	; 0x28
 810a226:	9b03      	ldr	r3, [sp, #12]
 810a228:	bfb8      	it	lt
 810a22a:	2600      	movlt	r6, #0
 810a22c:	2b00      	cmp	r3, #0
 810a22e:	bfb7      	itett	lt
 810a230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810a234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810a238:	1a9d      	sublt	r5, r3, r2
 810a23a:	2300      	movlt	r3, #0
 810a23c:	e734      	b.n	810a0a8 <_dtoa_r+0x720>
 810a23e:	9e07      	ldr	r6, [sp, #28]
 810a240:	9d04      	ldr	r5, [sp, #16]
 810a242:	9f08      	ldr	r7, [sp, #32]
 810a244:	e73b      	b.n	810a0be <_dtoa_r+0x736>
 810a246:	9a07      	ldr	r2, [sp, #28]
 810a248:	e767      	b.n	810a11a <_dtoa_r+0x792>
 810a24a:	9b06      	ldr	r3, [sp, #24]
 810a24c:	2b01      	cmp	r3, #1
 810a24e:	dc18      	bgt.n	810a282 <_dtoa_r+0x8fa>
 810a250:	f1ba 0f00 	cmp.w	sl, #0
 810a254:	d115      	bne.n	810a282 <_dtoa_r+0x8fa>
 810a256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a25a:	b993      	cbnz	r3, 810a282 <_dtoa_r+0x8fa>
 810a25c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a260:	0d1b      	lsrs	r3, r3, #20
 810a262:	051b      	lsls	r3, r3, #20
 810a264:	b183      	cbz	r3, 810a288 <_dtoa_r+0x900>
 810a266:	9b04      	ldr	r3, [sp, #16]
 810a268:	3301      	adds	r3, #1
 810a26a:	9304      	str	r3, [sp, #16]
 810a26c:	9b05      	ldr	r3, [sp, #20]
 810a26e:	3301      	adds	r3, #1
 810a270:	9305      	str	r3, [sp, #20]
 810a272:	f04f 0801 	mov.w	r8, #1
 810a276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a278:	2b00      	cmp	r3, #0
 810a27a:	f47f af6a 	bne.w	810a152 <_dtoa_r+0x7ca>
 810a27e:	2001      	movs	r0, #1
 810a280:	e76f      	b.n	810a162 <_dtoa_r+0x7da>
 810a282:	f04f 0800 	mov.w	r8, #0
 810a286:	e7f6      	b.n	810a276 <_dtoa_r+0x8ee>
 810a288:	4698      	mov	r8, r3
 810a28a:	e7f4      	b.n	810a276 <_dtoa_r+0x8ee>
 810a28c:	f43f af7d 	beq.w	810a18a <_dtoa_r+0x802>
 810a290:	4618      	mov	r0, r3
 810a292:	301c      	adds	r0, #28
 810a294:	e772      	b.n	810a17c <_dtoa_r+0x7f4>
 810a296:	9b03      	ldr	r3, [sp, #12]
 810a298:	2b00      	cmp	r3, #0
 810a29a:	dc37      	bgt.n	810a30c <_dtoa_r+0x984>
 810a29c:	9b06      	ldr	r3, [sp, #24]
 810a29e:	2b02      	cmp	r3, #2
 810a2a0:	dd34      	ble.n	810a30c <_dtoa_r+0x984>
 810a2a2:	9b03      	ldr	r3, [sp, #12]
 810a2a4:	9302      	str	r3, [sp, #8]
 810a2a6:	9b02      	ldr	r3, [sp, #8]
 810a2a8:	b96b      	cbnz	r3, 810a2c6 <_dtoa_r+0x93e>
 810a2aa:	4631      	mov	r1, r6
 810a2ac:	2205      	movs	r2, #5
 810a2ae:	4620      	mov	r0, r4
 810a2b0:	f000 ff74 	bl	810b19c <__multadd>
 810a2b4:	4601      	mov	r1, r0
 810a2b6:	4606      	mov	r6, r0
 810a2b8:	ee18 0a10 	vmov	r0, s16
 810a2bc:	f001 f9d8 	bl	810b670 <__mcmp>
 810a2c0:	2800      	cmp	r0, #0
 810a2c2:	f73f adbb 	bgt.w	8109e3c <_dtoa_r+0x4b4>
 810a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a2c8:	9d01      	ldr	r5, [sp, #4]
 810a2ca:	43db      	mvns	r3, r3
 810a2cc:	9300      	str	r3, [sp, #0]
 810a2ce:	f04f 0800 	mov.w	r8, #0
 810a2d2:	4631      	mov	r1, r6
 810a2d4:	4620      	mov	r0, r4
 810a2d6:	f000 ff3f 	bl	810b158 <_Bfree>
 810a2da:	2f00      	cmp	r7, #0
 810a2dc:	f43f aea4 	beq.w	810a028 <_dtoa_r+0x6a0>
 810a2e0:	f1b8 0f00 	cmp.w	r8, #0
 810a2e4:	d005      	beq.n	810a2f2 <_dtoa_r+0x96a>
 810a2e6:	45b8      	cmp	r8, r7
 810a2e8:	d003      	beq.n	810a2f2 <_dtoa_r+0x96a>
 810a2ea:	4641      	mov	r1, r8
 810a2ec:	4620      	mov	r0, r4
 810a2ee:	f000 ff33 	bl	810b158 <_Bfree>
 810a2f2:	4639      	mov	r1, r7
 810a2f4:	4620      	mov	r0, r4
 810a2f6:	f000 ff2f 	bl	810b158 <_Bfree>
 810a2fa:	e695      	b.n	810a028 <_dtoa_r+0x6a0>
 810a2fc:	2600      	movs	r6, #0
 810a2fe:	4637      	mov	r7, r6
 810a300:	e7e1      	b.n	810a2c6 <_dtoa_r+0x93e>
 810a302:	9700      	str	r7, [sp, #0]
 810a304:	4637      	mov	r7, r6
 810a306:	e599      	b.n	8109e3c <_dtoa_r+0x4b4>
 810a308:	40240000 	.word	0x40240000
 810a30c:	9b08      	ldr	r3, [sp, #32]
 810a30e:	2b00      	cmp	r3, #0
 810a310:	f000 80ca 	beq.w	810a4a8 <_dtoa_r+0xb20>
 810a314:	9b03      	ldr	r3, [sp, #12]
 810a316:	9302      	str	r3, [sp, #8]
 810a318:	2d00      	cmp	r5, #0
 810a31a:	dd05      	ble.n	810a328 <_dtoa_r+0x9a0>
 810a31c:	4639      	mov	r1, r7
 810a31e:	462a      	mov	r2, r5
 810a320:	4620      	mov	r0, r4
 810a322:	f001 f935 	bl	810b590 <__lshift>
 810a326:	4607      	mov	r7, r0
 810a328:	f1b8 0f00 	cmp.w	r8, #0
 810a32c:	d05b      	beq.n	810a3e6 <_dtoa_r+0xa5e>
 810a32e:	6879      	ldr	r1, [r7, #4]
 810a330:	4620      	mov	r0, r4
 810a332:	f000 fed1 	bl	810b0d8 <_Balloc>
 810a336:	4605      	mov	r5, r0
 810a338:	b928      	cbnz	r0, 810a346 <_dtoa_r+0x9be>
 810a33a:	4b87      	ldr	r3, [pc, #540]	; (810a558 <_dtoa_r+0xbd0>)
 810a33c:	4602      	mov	r2, r0
 810a33e:	f240 21ea 	movw	r1, #746	; 0x2ea
 810a342:	f7ff bb3b 	b.w	81099bc <_dtoa_r+0x34>
 810a346:	693a      	ldr	r2, [r7, #16]
 810a348:	3202      	adds	r2, #2
 810a34a:	0092      	lsls	r2, r2, #2
 810a34c:	f107 010c 	add.w	r1, r7, #12
 810a350:	300c      	adds	r0, #12
 810a352:	f000 feb3 	bl	810b0bc <memcpy>
 810a356:	2201      	movs	r2, #1
 810a358:	4629      	mov	r1, r5
 810a35a:	4620      	mov	r0, r4
 810a35c:	f001 f918 	bl	810b590 <__lshift>
 810a360:	9b01      	ldr	r3, [sp, #4]
 810a362:	f103 0901 	add.w	r9, r3, #1
 810a366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810a36a:	4413      	add	r3, r2
 810a36c:	9305      	str	r3, [sp, #20]
 810a36e:	f00a 0301 	and.w	r3, sl, #1
 810a372:	46b8      	mov	r8, r7
 810a374:	9304      	str	r3, [sp, #16]
 810a376:	4607      	mov	r7, r0
 810a378:	4631      	mov	r1, r6
 810a37a:	ee18 0a10 	vmov	r0, s16
 810a37e:	f7ff fa77 	bl	8109870 <quorem>
 810a382:	4641      	mov	r1, r8
 810a384:	9002      	str	r0, [sp, #8]
 810a386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810a38a:	ee18 0a10 	vmov	r0, s16
 810a38e:	f001 f96f 	bl	810b670 <__mcmp>
 810a392:	463a      	mov	r2, r7
 810a394:	9003      	str	r0, [sp, #12]
 810a396:	4631      	mov	r1, r6
 810a398:	4620      	mov	r0, r4
 810a39a:	f001 f985 	bl	810b6a8 <__mdiff>
 810a39e:	68c2      	ldr	r2, [r0, #12]
 810a3a0:	f109 3bff 	add.w	fp, r9, #4294967295
 810a3a4:	4605      	mov	r5, r0
 810a3a6:	bb02      	cbnz	r2, 810a3ea <_dtoa_r+0xa62>
 810a3a8:	4601      	mov	r1, r0
 810a3aa:	ee18 0a10 	vmov	r0, s16
 810a3ae:	f001 f95f 	bl	810b670 <__mcmp>
 810a3b2:	4602      	mov	r2, r0
 810a3b4:	4629      	mov	r1, r5
 810a3b6:	4620      	mov	r0, r4
 810a3b8:	9207      	str	r2, [sp, #28]
 810a3ba:	f000 fecd 	bl	810b158 <_Bfree>
 810a3be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810a3c2:	ea43 0102 	orr.w	r1, r3, r2
 810a3c6:	9b04      	ldr	r3, [sp, #16]
 810a3c8:	430b      	orrs	r3, r1
 810a3ca:	464d      	mov	r5, r9
 810a3cc:	d10f      	bne.n	810a3ee <_dtoa_r+0xa66>
 810a3ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810a3d2:	d02a      	beq.n	810a42a <_dtoa_r+0xaa2>
 810a3d4:	9b03      	ldr	r3, [sp, #12]
 810a3d6:	2b00      	cmp	r3, #0
 810a3d8:	dd02      	ble.n	810a3e0 <_dtoa_r+0xa58>
 810a3da:	9b02      	ldr	r3, [sp, #8]
 810a3dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810a3e0:	f88b a000 	strb.w	sl, [fp]
 810a3e4:	e775      	b.n	810a2d2 <_dtoa_r+0x94a>
 810a3e6:	4638      	mov	r0, r7
 810a3e8:	e7ba      	b.n	810a360 <_dtoa_r+0x9d8>
 810a3ea:	2201      	movs	r2, #1
 810a3ec:	e7e2      	b.n	810a3b4 <_dtoa_r+0xa2c>
 810a3ee:	9b03      	ldr	r3, [sp, #12]
 810a3f0:	2b00      	cmp	r3, #0
 810a3f2:	db04      	blt.n	810a3fe <_dtoa_r+0xa76>
 810a3f4:	9906      	ldr	r1, [sp, #24]
 810a3f6:	430b      	orrs	r3, r1
 810a3f8:	9904      	ldr	r1, [sp, #16]
 810a3fa:	430b      	orrs	r3, r1
 810a3fc:	d122      	bne.n	810a444 <_dtoa_r+0xabc>
 810a3fe:	2a00      	cmp	r2, #0
 810a400:	ddee      	ble.n	810a3e0 <_dtoa_r+0xa58>
 810a402:	ee18 1a10 	vmov	r1, s16
 810a406:	2201      	movs	r2, #1
 810a408:	4620      	mov	r0, r4
 810a40a:	f001 f8c1 	bl	810b590 <__lshift>
 810a40e:	4631      	mov	r1, r6
 810a410:	ee08 0a10 	vmov	s16, r0
 810a414:	f001 f92c 	bl	810b670 <__mcmp>
 810a418:	2800      	cmp	r0, #0
 810a41a:	dc03      	bgt.n	810a424 <_dtoa_r+0xa9c>
 810a41c:	d1e0      	bne.n	810a3e0 <_dtoa_r+0xa58>
 810a41e:	f01a 0f01 	tst.w	sl, #1
 810a422:	d0dd      	beq.n	810a3e0 <_dtoa_r+0xa58>
 810a424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810a428:	d1d7      	bne.n	810a3da <_dtoa_r+0xa52>
 810a42a:	2339      	movs	r3, #57	; 0x39
 810a42c:	f88b 3000 	strb.w	r3, [fp]
 810a430:	462b      	mov	r3, r5
 810a432:	461d      	mov	r5, r3
 810a434:	3b01      	subs	r3, #1
 810a436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810a43a:	2a39      	cmp	r2, #57	; 0x39
 810a43c:	d071      	beq.n	810a522 <_dtoa_r+0xb9a>
 810a43e:	3201      	adds	r2, #1
 810a440:	701a      	strb	r2, [r3, #0]
 810a442:	e746      	b.n	810a2d2 <_dtoa_r+0x94a>
 810a444:	2a00      	cmp	r2, #0
 810a446:	dd07      	ble.n	810a458 <_dtoa_r+0xad0>
 810a448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810a44c:	d0ed      	beq.n	810a42a <_dtoa_r+0xaa2>
 810a44e:	f10a 0301 	add.w	r3, sl, #1
 810a452:	f88b 3000 	strb.w	r3, [fp]
 810a456:	e73c      	b.n	810a2d2 <_dtoa_r+0x94a>
 810a458:	9b05      	ldr	r3, [sp, #20]
 810a45a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810a45e:	4599      	cmp	r9, r3
 810a460:	d047      	beq.n	810a4f2 <_dtoa_r+0xb6a>
 810a462:	ee18 1a10 	vmov	r1, s16
 810a466:	2300      	movs	r3, #0
 810a468:	220a      	movs	r2, #10
 810a46a:	4620      	mov	r0, r4
 810a46c:	f000 fe96 	bl	810b19c <__multadd>
 810a470:	45b8      	cmp	r8, r7
 810a472:	ee08 0a10 	vmov	s16, r0
 810a476:	f04f 0300 	mov.w	r3, #0
 810a47a:	f04f 020a 	mov.w	r2, #10
 810a47e:	4641      	mov	r1, r8
 810a480:	4620      	mov	r0, r4
 810a482:	d106      	bne.n	810a492 <_dtoa_r+0xb0a>
 810a484:	f000 fe8a 	bl	810b19c <__multadd>
 810a488:	4680      	mov	r8, r0
 810a48a:	4607      	mov	r7, r0
 810a48c:	f109 0901 	add.w	r9, r9, #1
 810a490:	e772      	b.n	810a378 <_dtoa_r+0x9f0>
 810a492:	f000 fe83 	bl	810b19c <__multadd>
 810a496:	4639      	mov	r1, r7
 810a498:	4680      	mov	r8, r0
 810a49a:	2300      	movs	r3, #0
 810a49c:	220a      	movs	r2, #10
 810a49e:	4620      	mov	r0, r4
 810a4a0:	f000 fe7c 	bl	810b19c <__multadd>
 810a4a4:	4607      	mov	r7, r0
 810a4a6:	e7f1      	b.n	810a48c <_dtoa_r+0xb04>
 810a4a8:	9b03      	ldr	r3, [sp, #12]
 810a4aa:	9302      	str	r3, [sp, #8]
 810a4ac:	9d01      	ldr	r5, [sp, #4]
 810a4ae:	ee18 0a10 	vmov	r0, s16
 810a4b2:	4631      	mov	r1, r6
 810a4b4:	f7ff f9dc 	bl	8109870 <quorem>
 810a4b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810a4bc:	9b01      	ldr	r3, [sp, #4]
 810a4be:	f805 ab01 	strb.w	sl, [r5], #1
 810a4c2:	1aea      	subs	r2, r5, r3
 810a4c4:	9b02      	ldr	r3, [sp, #8]
 810a4c6:	4293      	cmp	r3, r2
 810a4c8:	dd09      	ble.n	810a4de <_dtoa_r+0xb56>
 810a4ca:	ee18 1a10 	vmov	r1, s16
 810a4ce:	2300      	movs	r3, #0
 810a4d0:	220a      	movs	r2, #10
 810a4d2:	4620      	mov	r0, r4
 810a4d4:	f000 fe62 	bl	810b19c <__multadd>
 810a4d8:	ee08 0a10 	vmov	s16, r0
 810a4dc:	e7e7      	b.n	810a4ae <_dtoa_r+0xb26>
 810a4de:	9b02      	ldr	r3, [sp, #8]
 810a4e0:	2b00      	cmp	r3, #0
 810a4e2:	bfc8      	it	gt
 810a4e4:	461d      	movgt	r5, r3
 810a4e6:	9b01      	ldr	r3, [sp, #4]
 810a4e8:	bfd8      	it	le
 810a4ea:	2501      	movle	r5, #1
 810a4ec:	441d      	add	r5, r3
 810a4ee:	f04f 0800 	mov.w	r8, #0
 810a4f2:	ee18 1a10 	vmov	r1, s16
 810a4f6:	2201      	movs	r2, #1
 810a4f8:	4620      	mov	r0, r4
 810a4fa:	f001 f849 	bl	810b590 <__lshift>
 810a4fe:	4631      	mov	r1, r6
 810a500:	ee08 0a10 	vmov	s16, r0
 810a504:	f001 f8b4 	bl	810b670 <__mcmp>
 810a508:	2800      	cmp	r0, #0
 810a50a:	dc91      	bgt.n	810a430 <_dtoa_r+0xaa8>
 810a50c:	d102      	bne.n	810a514 <_dtoa_r+0xb8c>
 810a50e:	f01a 0f01 	tst.w	sl, #1
 810a512:	d18d      	bne.n	810a430 <_dtoa_r+0xaa8>
 810a514:	462b      	mov	r3, r5
 810a516:	461d      	mov	r5, r3
 810a518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a51c:	2a30      	cmp	r2, #48	; 0x30
 810a51e:	d0fa      	beq.n	810a516 <_dtoa_r+0xb8e>
 810a520:	e6d7      	b.n	810a2d2 <_dtoa_r+0x94a>
 810a522:	9a01      	ldr	r2, [sp, #4]
 810a524:	429a      	cmp	r2, r3
 810a526:	d184      	bne.n	810a432 <_dtoa_r+0xaaa>
 810a528:	9b00      	ldr	r3, [sp, #0]
 810a52a:	3301      	adds	r3, #1
 810a52c:	9300      	str	r3, [sp, #0]
 810a52e:	2331      	movs	r3, #49	; 0x31
 810a530:	7013      	strb	r3, [r2, #0]
 810a532:	e6ce      	b.n	810a2d2 <_dtoa_r+0x94a>
 810a534:	4b09      	ldr	r3, [pc, #36]	; (810a55c <_dtoa_r+0xbd4>)
 810a536:	f7ff ba95 	b.w	8109a64 <_dtoa_r+0xdc>
 810a53a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a53c:	2b00      	cmp	r3, #0
 810a53e:	f47f aa6e 	bne.w	8109a1e <_dtoa_r+0x96>
 810a542:	4b07      	ldr	r3, [pc, #28]	; (810a560 <_dtoa_r+0xbd8>)
 810a544:	f7ff ba8e 	b.w	8109a64 <_dtoa_r+0xdc>
 810a548:	9b02      	ldr	r3, [sp, #8]
 810a54a:	2b00      	cmp	r3, #0
 810a54c:	dcae      	bgt.n	810a4ac <_dtoa_r+0xb24>
 810a54e:	9b06      	ldr	r3, [sp, #24]
 810a550:	2b02      	cmp	r3, #2
 810a552:	f73f aea8 	bgt.w	810a2a6 <_dtoa_r+0x91e>
 810a556:	e7a9      	b.n	810a4ac <_dtoa_r+0xb24>
 810a558:	0810c870 	.word	0x0810c870
 810a55c:	0810c670 	.word	0x0810c670
 810a560:	0810c7f1 	.word	0x0810c7f1

0810a564 <__sflush_r>:
 810a564:	898a      	ldrh	r2, [r1, #12]
 810a566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a56a:	4605      	mov	r5, r0
 810a56c:	0710      	lsls	r0, r2, #28
 810a56e:	460c      	mov	r4, r1
 810a570:	d458      	bmi.n	810a624 <__sflush_r+0xc0>
 810a572:	684b      	ldr	r3, [r1, #4]
 810a574:	2b00      	cmp	r3, #0
 810a576:	dc05      	bgt.n	810a584 <__sflush_r+0x20>
 810a578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a57a:	2b00      	cmp	r3, #0
 810a57c:	dc02      	bgt.n	810a584 <__sflush_r+0x20>
 810a57e:	2000      	movs	r0, #0
 810a580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a586:	2e00      	cmp	r6, #0
 810a588:	d0f9      	beq.n	810a57e <__sflush_r+0x1a>
 810a58a:	2300      	movs	r3, #0
 810a58c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a590:	682f      	ldr	r7, [r5, #0]
 810a592:	602b      	str	r3, [r5, #0]
 810a594:	d032      	beq.n	810a5fc <__sflush_r+0x98>
 810a596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a598:	89a3      	ldrh	r3, [r4, #12]
 810a59a:	075a      	lsls	r2, r3, #29
 810a59c:	d505      	bpl.n	810a5aa <__sflush_r+0x46>
 810a59e:	6863      	ldr	r3, [r4, #4]
 810a5a0:	1ac0      	subs	r0, r0, r3
 810a5a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a5a4:	b10b      	cbz	r3, 810a5aa <__sflush_r+0x46>
 810a5a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a5a8:	1ac0      	subs	r0, r0, r3
 810a5aa:	2300      	movs	r3, #0
 810a5ac:	4602      	mov	r2, r0
 810a5ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a5b0:	6a21      	ldr	r1, [r4, #32]
 810a5b2:	4628      	mov	r0, r5
 810a5b4:	47b0      	blx	r6
 810a5b6:	1c43      	adds	r3, r0, #1
 810a5b8:	89a3      	ldrh	r3, [r4, #12]
 810a5ba:	d106      	bne.n	810a5ca <__sflush_r+0x66>
 810a5bc:	6829      	ldr	r1, [r5, #0]
 810a5be:	291d      	cmp	r1, #29
 810a5c0:	d82c      	bhi.n	810a61c <__sflush_r+0xb8>
 810a5c2:	4a2a      	ldr	r2, [pc, #168]	; (810a66c <__sflush_r+0x108>)
 810a5c4:	40ca      	lsrs	r2, r1
 810a5c6:	07d6      	lsls	r6, r2, #31
 810a5c8:	d528      	bpl.n	810a61c <__sflush_r+0xb8>
 810a5ca:	2200      	movs	r2, #0
 810a5cc:	6062      	str	r2, [r4, #4]
 810a5ce:	04d9      	lsls	r1, r3, #19
 810a5d0:	6922      	ldr	r2, [r4, #16]
 810a5d2:	6022      	str	r2, [r4, #0]
 810a5d4:	d504      	bpl.n	810a5e0 <__sflush_r+0x7c>
 810a5d6:	1c42      	adds	r2, r0, #1
 810a5d8:	d101      	bne.n	810a5de <__sflush_r+0x7a>
 810a5da:	682b      	ldr	r3, [r5, #0]
 810a5dc:	b903      	cbnz	r3, 810a5e0 <__sflush_r+0x7c>
 810a5de:	6560      	str	r0, [r4, #84]	; 0x54
 810a5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a5e2:	602f      	str	r7, [r5, #0]
 810a5e4:	2900      	cmp	r1, #0
 810a5e6:	d0ca      	beq.n	810a57e <__sflush_r+0x1a>
 810a5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a5ec:	4299      	cmp	r1, r3
 810a5ee:	d002      	beq.n	810a5f6 <__sflush_r+0x92>
 810a5f0:	4628      	mov	r0, r5
 810a5f2:	f001 fa49 	bl	810ba88 <_free_r>
 810a5f6:	2000      	movs	r0, #0
 810a5f8:	6360      	str	r0, [r4, #52]	; 0x34
 810a5fa:	e7c1      	b.n	810a580 <__sflush_r+0x1c>
 810a5fc:	6a21      	ldr	r1, [r4, #32]
 810a5fe:	2301      	movs	r3, #1
 810a600:	4628      	mov	r0, r5
 810a602:	47b0      	blx	r6
 810a604:	1c41      	adds	r1, r0, #1
 810a606:	d1c7      	bne.n	810a598 <__sflush_r+0x34>
 810a608:	682b      	ldr	r3, [r5, #0]
 810a60a:	2b00      	cmp	r3, #0
 810a60c:	d0c4      	beq.n	810a598 <__sflush_r+0x34>
 810a60e:	2b1d      	cmp	r3, #29
 810a610:	d001      	beq.n	810a616 <__sflush_r+0xb2>
 810a612:	2b16      	cmp	r3, #22
 810a614:	d101      	bne.n	810a61a <__sflush_r+0xb6>
 810a616:	602f      	str	r7, [r5, #0]
 810a618:	e7b1      	b.n	810a57e <__sflush_r+0x1a>
 810a61a:	89a3      	ldrh	r3, [r4, #12]
 810a61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a620:	81a3      	strh	r3, [r4, #12]
 810a622:	e7ad      	b.n	810a580 <__sflush_r+0x1c>
 810a624:	690f      	ldr	r7, [r1, #16]
 810a626:	2f00      	cmp	r7, #0
 810a628:	d0a9      	beq.n	810a57e <__sflush_r+0x1a>
 810a62a:	0793      	lsls	r3, r2, #30
 810a62c:	680e      	ldr	r6, [r1, #0]
 810a62e:	bf08      	it	eq
 810a630:	694b      	ldreq	r3, [r1, #20]
 810a632:	600f      	str	r7, [r1, #0]
 810a634:	bf18      	it	ne
 810a636:	2300      	movne	r3, #0
 810a638:	eba6 0807 	sub.w	r8, r6, r7
 810a63c:	608b      	str	r3, [r1, #8]
 810a63e:	f1b8 0f00 	cmp.w	r8, #0
 810a642:	dd9c      	ble.n	810a57e <__sflush_r+0x1a>
 810a644:	6a21      	ldr	r1, [r4, #32]
 810a646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a648:	4643      	mov	r3, r8
 810a64a:	463a      	mov	r2, r7
 810a64c:	4628      	mov	r0, r5
 810a64e:	47b0      	blx	r6
 810a650:	2800      	cmp	r0, #0
 810a652:	dc06      	bgt.n	810a662 <__sflush_r+0xfe>
 810a654:	89a3      	ldrh	r3, [r4, #12]
 810a656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a65a:	81a3      	strh	r3, [r4, #12]
 810a65c:	f04f 30ff 	mov.w	r0, #4294967295
 810a660:	e78e      	b.n	810a580 <__sflush_r+0x1c>
 810a662:	4407      	add	r7, r0
 810a664:	eba8 0800 	sub.w	r8, r8, r0
 810a668:	e7e9      	b.n	810a63e <__sflush_r+0xda>
 810a66a:	bf00      	nop
 810a66c:	20400001 	.word	0x20400001

0810a670 <_fflush_r>:
 810a670:	b538      	push	{r3, r4, r5, lr}
 810a672:	690b      	ldr	r3, [r1, #16]
 810a674:	4605      	mov	r5, r0
 810a676:	460c      	mov	r4, r1
 810a678:	b913      	cbnz	r3, 810a680 <_fflush_r+0x10>
 810a67a:	2500      	movs	r5, #0
 810a67c:	4628      	mov	r0, r5
 810a67e:	bd38      	pop	{r3, r4, r5, pc}
 810a680:	b118      	cbz	r0, 810a68a <_fflush_r+0x1a>
 810a682:	6983      	ldr	r3, [r0, #24]
 810a684:	b90b      	cbnz	r3, 810a68a <_fflush_r+0x1a>
 810a686:	f000 f887 	bl	810a798 <__sinit>
 810a68a:	4b14      	ldr	r3, [pc, #80]	; (810a6dc <_fflush_r+0x6c>)
 810a68c:	429c      	cmp	r4, r3
 810a68e:	d11b      	bne.n	810a6c8 <_fflush_r+0x58>
 810a690:	686c      	ldr	r4, [r5, #4]
 810a692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a696:	2b00      	cmp	r3, #0
 810a698:	d0ef      	beq.n	810a67a <_fflush_r+0xa>
 810a69a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a69c:	07d0      	lsls	r0, r2, #31
 810a69e:	d404      	bmi.n	810a6aa <_fflush_r+0x3a>
 810a6a0:	0599      	lsls	r1, r3, #22
 810a6a2:	d402      	bmi.n	810a6aa <_fflush_r+0x3a>
 810a6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a6a6:	f000 fc88 	bl	810afba <__retarget_lock_acquire_recursive>
 810a6aa:	4628      	mov	r0, r5
 810a6ac:	4621      	mov	r1, r4
 810a6ae:	f7ff ff59 	bl	810a564 <__sflush_r>
 810a6b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a6b4:	07da      	lsls	r2, r3, #31
 810a6b6:	4605      	mov	r5, r0
 810a6b8:	d4e0      	bmi.n	810a67c <_fflush_r+0xc>
 810a6ba:	89a3      	ldrh	r3, [r4, #12]
 810a6bc:	059b      	lsls	r3, r3, #22
 810a6be:	d4dd      	bmi.n	810a67c <_fflush_r+0xc>
 810a6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a6c2:	f000 fc7b 	bl	810afbc <__retarget_lock_release_recursive>
 810a6c6:	e7d9      	b.n	810a67c <_fflush_r+0xc>
 810a6c8:	4b05      	ldr	r3, [pc, #20]	; (810a6e0 <_fflush_r+0x70>)
 810a6ca:	429c      	cmp	r4, r3
 810a6cc:	d101      	bne.n	810a6d2 <_fflush_r+0x62>
 810a6ce:	68ac      	ldr	r4, [r5, #8]
 810a6d0:	e7df      	b.n	810a692 <_fflush_r+0x22>
 810a6d2:	4b04      	ldr	r3, [pc, #16]	; (810a6e4 <_fflush_r+0x74>)
 810a6d4:	429c      	cmp	r4, r3
 810a6d6:	bf08      	it	eq
 810a6d8:	68ec      	ldreq	r4, [r5, #12]
 810a6da:	e7da      	b.n	810a692 <_fflush_r+0x22>
 810a6dc:	0810c8a4 	.word	0x0810c8a4
 810a6e0:	0810c8c4 	.word	0x0810c8c4
 810a6e4:	0810c884 	.word	0x0810c884

0810a6e8 <std>:
 810a6e8:	2300      	movs	r3, #0
 810a6ea:	b510      	push	{r4, lr}
 810a6ec:	4604      	mov	r4, r0
 810a6ee:	e9c0 3300 	strd	r3, r3, [r0]
 810a6f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a6f6:	6083      	str	r3, [r0, #8]
 810a6f8:	8181      	strh	r1, [r0, #12]
 810a6fa:	6643      	str	r3, [r0, #100]	; 0x64
 810a6fc:	81c2      	strh	r2, [r0, #14]
 810a6fe:	6183      	str	r3, [r0, #24]
 810a700:	4619      	mov	r1, r3
 810a702:	2208      	movs	r2, #8
 810a704:	305c      	adds	r0, #92	; 0x5c
 810a706:	f7fd fa11 	bl	8107b2c <memset>
 810a70a:	4b05      	ldr	r3, [pc, #20]	; (810a720 <std+0x38>)
 810a70c:	6263      	str	r3, [r4, #36]	; 0x24
 810a70e:	4b05      	ldr	r3, [pc, #20]	; (810a724 <std+0x3c>)
 810a710:	62a3      	str	r3, [r4, #40]	; 0x28
 810a712:	4b05      	ldr	r3, [pc, #20]	; (810a728 <std+0x40>)
 810a714:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a716:	4b05      	ldr	r3, [pc, #20]	; (810a72c <std+0x44>)
 810a718:	6224      	str	r4, [r4, #32]
 810a71a:	6323      	str	r3, [r4, #48]	; 0x30
 810a71c:	bd10      	pop	{r4, pc}
 810a71e:	bf00      	nop
 810a720:	0810c1e9 	.word	0x0810c1e9
 810a724:	0810c20b 	.word	0x0810c20b
 810a728:	0810c243 	.word	0x0810c243
 810a72c:	0810c267 	.word	0x0810c267

0810a730 <_cleanup_r>:
 810a730:	4901      	ldr	r1, [pc, #4]	; (810a738 <_cleanup_r+0x8>)
 810a732:	f000 b8af 	b.w	810a894 <_fwalk_reent>
 810a736:	bf00      	nop
 810a738:	0810a671 	.word	0x0810a671

0810a73c <__sfmoreglue>:
 810a73c:	b570      	push	{r4, r5, r6, lr}
 810a73e:	2268      	movs	r2, #104	; 0x68
 810a740:	1e4d      	subs	r5, r1, #1
 810a742:	4355      	muls	r5, r2
 810a744:	460e      	mov	r6, r1
 810a746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a74a:	f001 fa09 	bl	810bb60 <_malloc_r>
 810a74e:	4604      	mov	r4, r0
 810a750:	b140      	cbz	r0, 810a764 <__sfmoreglue+0x28>
 810a752:	2100      	movs	r1, #0
 810a754:	e9c0 1600 	strd	r1, r6, [r0]
 810a758:	300c      	adds	r0, #12
 810a75a:	60a0      	str	r0, [r4, #8]
 810a75c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a760:	f7fd f9e4 	bl	8107b2c <memset>
 810a764:	4620      	mov	r0, r4
 810a766:	bd70      	pop	{r4, r5, r6, pc}

0810a768 <__sfp_lock_acquire>:
 810a768:	4801      	ldr	r0, [pc, #4]	; (810a770 <__sfp_lock_acquire+0x8>)
 810a76a:	f000 bc26 	b.w	810afba <__retarget_lock_acquire_recursive>
 810a76e:	bf00      	nop
 810a770:	1000043d 	.word	0x1000043d

0810a774 <__sfp_lock_release>:
 810a774:	4801      	ldr	r0, [pc, #4]	; (810a77c <__sfp_lock_release+0x8>)
 810a776:	f000 bc21 	b.w	810afbc <__retarget_lock_release_recursive>
 810a77a:	bf00      	nop
 810a77c:	1000043d 	.word	0x1000043d

0810a780 <__sinit_lock_acquire>:
 810a780:	4801      	ldr	r0, [pc, #4]	; (810a788 <__sinit_lock_acquire+0x8>)
 810a782:	f000 bc1a 	b.w	810afba <__retarget_lock_acquire_recursive>
 810a786:	bf00      	nop
 810a788:	1000043e 	.word	0x1000043e

0810a78c <__sinit_lock_release>:
 810a78c:	4801      	ldr	r0, [pc, #4]	; (810a794 <__sinit_lock_release+0x8>)
 810a78e:	f000 bc15 	b.w	810afbc <__retarget_lock_release_recursive>
 810a792:	bf00      	nop
 810a794:	1000043e 	.word	0x1000043e

0810a798 <__sinit>:
 810a798:	b510      	push	{r4, lr}
 810a79a:	4604      	mov	r4, r0
 810a79c:	f7ff fff0 	bl	810a780 <__sinit_lock_acquire>
 810a7a0:	69a3      	ldr	r3, [r4, #24]
 810a7a2:	b11b      	cbz	r3, 810a7ac <__sinit+0x14>
 810a7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a7a8:	f7ff bff0 	b.w	810a78c <__sinit_lock_release>
 810a7ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a7b0:	6523      	str	r3, [r4, #80]	; 0x50
 810a7b2:	4b13      	ldr	r3, [pc, #76]	; (810a800 <__sinit+0x68>)
 810a7b4:	4a13      	ldr	r2, [pc, #76]	; (810a804 <__sinit+0x6c>)
 810a7b6:	681b      	ldr	r3, [r3, #0]
 810a7b8:	62a2      	str	r2, [r4, #40]	; 0x28
 810a7ba:	42a3      	cmp	r3, r4
 810a7bc:	bf04      	itt	eq
 810a7be:	2301      	moveq	r3, #1
 810a7c0:	61a3      	streq	r3, [r4, #24]
 810a7c2:	4620      	mov	r0, r4
 810a7c4:	f000 f820 	bl	810a808 <__sfp>
 810a7c8:	6060      	str	r0, [r4, #4]
 810a7ca:	4620      	mov	r0, r4
 810a7cc:	f000 f81c 	bl	810a808 <__sfp>
 810a7d0:	60a0      	str	r0, [r4, #8]
 810a7d2:	4620      	mov	r0, r4
 810a7d4:	f000 f818 	bl	810a808 <__sfp>
 810a7d8:	2200      	movs	r2, #0
 810a7da:	60e0      	str	r0, [r4, #12]
 810a7dc:	2104      	movs	r1, #4
 810a7de:	6860      	ldr	r0, [r4, #4]
 810a7e0:	f7ff ff82 	bl	810a6e8 <std>
 810a7e4:	68a0      	ldr	r0, [r4, #8]
 810a7e6:	2201      	movs	r2, #1
 810a7e8:	2109      	movs	r1, #9
 810a7ea:	f7ff ff7d 	bl	810a6e8 <std>
 810a7ee:	68e0      	ldr	r0, [r4, #12]
 810a7f0:	2202      	movs	r2, #2
 810a7f2:	2112      	movs	r1, #18
 810a7f4:	f7ff ff78 	bl	810a6e8 <std>
 810a7f8:	2301      	movs	r3, #1
 810a7fa:	61a3      	str	r3, [r4, #24]
 810a7fc:	e7d2      	b.n	810a7a4 <__sinit+0xc>
 810a7fe:	bf00      	nop
 810a800:	0810c65c 	.word	0x0810c65c
 810a804:	0810a731 	.word	0x0810a731

0810a808 <__sfp>:
 810a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a80a:	4607      	mov	r7, r0
 810a80c:	f7ff ffac 	bl	810a768 <__sfp_lock_acquire>
 810a810:	4b1e      	ldr	r3, [pc, #120]	; (810a88c <__sfp+0x84>)
 810a812:	681e      	ldr	r6, [r3, #0]
 810a814:	69b3      	ldr	r3, [r6, #24]
 810a816:	b913      	cbnz	r3, 810a81e <__sfp+0x16>
 810a818:	4630      	mov	r0, r6
 810a81a:	f7ff ffbd 	bl	810a798 <__sinit>
 810a81e:	3648      	adds	r6, #72	; 0x48
 810a820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a824:	3b01      	subs	r3, #1
 810a826:	d503      	bpl.n	810a830 <__sfp+0x28>
 810a828:	6833      	ldr	r3, [r6, #0]
 810a82a:	b30b      	cbz	r3, 810a870 <__sfp+0x68>
 810a82c:	6836      	ldr	r6, [r6, #0]
 810a82e:	e7f7      	b.n	810a820 <__sfp+0x18>
 810a830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a834:	b9d5      	cbnz	r5, 810a86c <__sfp+0x64>
 810a836:	4b16      	ldr	r3, [pc, #88]	; (810a890 <__sfp+0x88>)
 810a838:	60e3      	str	r3, [r4, #12]
 810a83a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a83e:	6665      	str	r5, [r4, #100]	; 0x64
 810a840:	f000 fbba 	bl	810afb8 <__retarget_lock_init_recursive>
 810a844:	f7ff ff96 	bl	810a774 <__sfp_lock_release>
 810a848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a84c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a850:	6025      	str	r5, [r4, #0]
 810a852:	61a5      	str	r5, [r4, #24]
 810a854:	2208      	movs	r2, #8
 810a856:	4629      	mov	r1, r5
 810a858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a85c:	f7fd f966 	bl	8107b2c <memset>
 810a860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a868:	4620      	mov	r0, r4
 810a86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a86c:	3468      	adds	r4, #104	; 0x68
 810a86e:	e7d9      	b.n	810a824 <__sfp+0x1c>
 810a870:	2104      	movs	r1, #4
 810a872:	4638      	mov	r0, r7
 810a874:	f7ff ff62 	bl	810a73c <__sfmoreglue>
 810a878:	4604      	mov	r4, r0
 810a87a:	6030      	str	r0, [r6, #0]
 810a87c:	2800      	cmp	r0, #0
 810a87e:	d1d5      	bne.n	810a82c <__sfp+0x24>
 810a880:	f7ff ff78 	bl	810a774 <__sfp_lock_release>
 810a884:	230c      	movs	r3, #12
 810a886:	603b      	str	r3, [r7, #0]
 810a888:	e7ee      	b.n	810a868 <__sfp+0x60>
 810a88a:	bf00      	nop
 810a88c:	0810c65c 	.word	0x0810c65c
 810a890:	ffff0001 	.word	0xffff0001

0810a894 <_fwalk_reent>:
 810a894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a898:	4606      	mov	r6, r0
 810a89a:	4688      	mov	r8, r1
 810a89c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a8a0:	2700      	movs	r7, #0
 810a8a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a8a6:	f1b9 0901 	subs.w	r9, r9, #1
 810a8aa:	d505      	bpl.n	810a8b8 <_fwalk_reent+0x24>
 810a8ac:	6824      	ldr	r4, [r4, #0]
 810a8ae:	2c00      	cmp	r4, #0
 810a8b0:	d1f7      	bne.n	810a8a2 <_fwalk_reent+0xe>
 810a8b2:	4638      	mov	r0, r7
 810a8b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a8b8:	89ab      	ldrh	r3, [r5, #12]
 810a8ba:	2b01      	cmp	r3, #1
 810a8bc:	d907      	bls.n	810a8ce <_fwalk_reent+0x3a>
 810a8be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a8c2:	3301      	adds	r3, #1
 810a8c4:	d003      	beq.n	810a8ce <_fwalk_reent+0x3a>
 810a8c6:	4629      	mov	r1, r5
 810a8c8:	4630      	mov	r0, r6
 810a8ca:	47c0      	blx	r8
 810a8cc:	4307      	orrs	r7, r0
 810a8ce:	3568      	adds	r5, #104	; 0x68
 810a8d0:	e7e9      	b.n	810a8a6 <_fwalk_reent+0x12>

0810a8d2 <rshift>:
 810a8d2:	6903      	ldr	r3, [r0, #16]
 810a8d4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a8dc:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a8e0:	f100 0414 	add.w	r4, r0, #20
 810a8e4:	dd45      	ble.n	810a972 <rshift+0xa0>
 810a8e6:	f011 011f 	ands.w	r1, r1, #31
 810a8ea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a8ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a8f2:	d10c      	bne.n	810a90e <rshift+0x3c>
 810a8f4:	f100 0710 	add.w	r7, r0, #16
 810a8f8:	4629      	mov	r1, r5
 810a8fa:	42b1      	cmp	r1, r6
 810a8fc:	d334      	bcc.n	810a968 <rshift+0x96>
 810a8fe:	1a9b      	subs	r3, r3, r2
 810a900:	009b      	lsls	r3, r3, #2
 810a902:	1eea      	subs	r2, r5, #3
 810a904:	4296      	cmp	r6, r2
 810a906:	bf38      	it	cc
 810a908:	2300      	movcc	r3, #0
 810a90a:	4423      	add	r3, r4
 810a90c:	e015      	b.n	810a93a <rshift+0x68>
 810a90e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a912:	f1c1 0820 	rsb	r8, r1, #32
 810a916:	40cf      	lsrs	r7, r1
 810a918:	f105 0e04 	add.w	lr, r5, #4
 810a91c:	46a1      	mov	r9, r4
 810a91e:	4576      	cmp	r6, lr
 810a920:	46f4      	mov	ip, lr
 810a922:	d815      	bhi.n	810a950 <rshift+0x7e>
 810a924:	1a9a      	subs	r2, r3, r2
 810a926:	0092      	lsls	r2, r2, #2
 810a928:	3a04      	subs	r2, #4
 810a92a:	3501      	adds	r5, #1
 810a92c:	42ae      	cmp	r6, r5
 810a92e:	bf38      	it	cc
 810a930:	2200      	movcc	r2, #0
 810a932:	18a3      	adds	r3, r4, r2
 810a934:	50a7      	str	r7, [r4, r2]
 810a936:	b107      	cbz	r7, 810a93a <rshift+0x68>
 810a938:	3304      	adds	r3, #4
 810a93a:	1b1a      	subs	r2, r3, r4
 810a93c:	42a3      	cmp	r3, r4
 810a93e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a942:	bf08      	it	eq
 810a944:	2300      	moveq	r3, #0
 810a946:	6102      	str	r2, [r0, #16]
 810a948:	bf08      	it	eq
 810a94a:	6143      	streq	r3, [r0, #20]
 810a94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a950:	f8dc c000 	ldr.w	ip, [ip]
 810a954:	fa0c fc08 	lsl.w	ip, ip, r8
 810a958:	ea4c 0707 	orr.w	r7, ip, r7
 810a95c:	f849 7b04 	str.w	r7, [r9], #4
 810a960:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a964:	40cf      	lsrs	r7, r1
 810a966:	e7da      	b.n	810a91e <rshift+0x4c>
 810a968:	f851 cb04 	ldr.w	ip, [r1], #4
 810a96c:	f847 cf04 	str.w	ip, [r7, #4]!
 810a970:	e7c3      	b.n	810a8fa <rshift+0x28>
 810a972:	4623      	mov	r3, r4
 810a974:	e7e1      	b.n	810a93a <rshift+0x68>

0810a976 <__hexdig_fun>:
 810a976:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a97a:	2b09      	cmp	r3, #9
 810a97c:	d802      	bhi.n	810a984 <__hexdig_fun+0xe>
 810a97e:	3820      	subs	r0, #32
 810a980:	b2c0      	uxtb	r0, r0
 810a982:	4770      	bx	lr
 810a984:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a988:	2b05      	cmp	r3, #5
 810a98a:	d801      	bhi.n	810a990 <__hexdig_fun+0x1a>
 810a98c:	3847      	subs	r0, #71	; 0x47
 810a98e:	e7f7      	b.n	810a980 <__hexdig_fun+0xa>
 810a990:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a994:	2b05      	cmp	r3, #5
 810a996:	d801      	bhi.n	810a99c <__hexdig_fun+0x26>
 810a998:	3827      	subs	r0, #39	; 0x27
 810a99a:	e7f1      	b.n	810a980 <__hexdig_fun+0xa>
 810a99c:	2000      	movs	r0, #0
 810a99e:	4770      	bx	lr

0810a9a0 <__gethex>:
 810a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a9a4:	ed2d 8b02 	vpush	{d8}
 810a9a8:	b089      	sub	sp, #36	; 0x24
 810a9aa:	ee08 0a10 	vmov	s16, r0
 810a9ae:	9304      	str	r3, [sp, #16]
 810a9b0:	4bb4      	ldr	r3, [pc, #720]	; (810ac84 <__gethex+0x2e4>)
 810a9b2:	681b      	ldr	r3, [r3, #0]
 810a9b4:	9301      	str	r3, [sp, #4]
 810a9b6:	4618      	mov	r0, r3
 810a9b8:	468b      	mov	fp, r1
 810a9ba:	4690      	mov	r8, r2
 810a9bc:	f7f5 fc90 	bl	81002e0 <strlen>
 810a9c0:	9b01      	ldr	r3, [sp, #4]
 810a9c2:	f8db 2000 	ldr.w	r2, [fp]
 810a9c6:	4403      	add	r3, r0
 810a9c8:	4682      	mov	sl, r0
 810a9ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a9ce:	9305      	str	r3, [sp, #20]
 810a9d0:	1c93      	adds	r3, r2, #2
 810a9d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a9d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a9da:	32fe      	adds	r2, #254	; 0xfe
 810a9dc:	18d1      	adds	r1, r2, r3
 810a9de:	461f      	mov	r7, r3
 810a9e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a9e4:	9100      	str	r1, [sp, #0]
 810a9e6:	2830      	cmp	r0, #48	; 0x30
 810a9e8:	d0f8      	beq.n	810a9dc <__gethex+0x3c>
 810a9ea:	f7ff ffc4 	bl	810a976 <__hexdig_fun>
 810a9ee:	4604      	mov	r4, r0
 810a9f0:	2800      	cmp	r0, #0
 810a9f2:	d13a      	bne.n	810aa6a <__gethex+0xca>
 810a9f4:	9901      	ldr	r1, [sp, #4]
 810a9f6:	4652      	mov	r2, sl
 810a9f8:	4638      	mov	r0, r7
 810a9fa:	f001 fc38 	bl	810c26e <strncmp>
 810a9fe:	4605      	mov	r5, r0
 810aa00:	2800      	cmp	r0, #0
 810aa02:	d168      	bne.n	810aad6 <__gethex+0x136>
 810aa04:	f817 000a 	ldrb.w	r0, [r7, sl]
 810aa08:	eb07 060a 	add.w	r6, r7, sl
 810aa0c:	f7ff ffb3 	bl	810a976 <__hexdig_fun>
 810aa10:	2800      	cmp	r0, #0
 810aa12:	d062      	beq.n	810aada <__gethex+0x13a>
 810aa14:	4633      	mov	r3, r6
 810aa16:	7818      	ldrb	r0, [r3, #0]
 810aa18:	2830      	cmp	r0, #48	; 0x30
 810aa1a:	461f      	mov	r7, r3
 810aa1c:	f103 0301 	add.w	r3, r3, #1
 810aa20:	d0f9      	beq.n	810aa16 <__gethex+0x76>
 810aa22:	f7ff ffa8 	bl	810a976 <__hexdig_fun>
 810aa26:	2301      	movs	r3, #1
 810aa28:	fab0 f480 	clz	r4, r0
 810aa2c:	0964      	lsrs	r4, r4, #5
 810aa2e:	4635      	mov	r5, r6
 810aa30:	9300      	str	r3, [sp, #0]
 810aa32:	463a      	mov	r2, r7
 810aa34:	4616      	mov	r6, r2
 810aa36:	3201      	adds	r2, #1
 810aa38:	7830      	ldrb	r0, [r6, #0]
 810aa3a:	f7ff ff9c 	bl	810a976 <__hexdig_fun>
 810aa3e:	2800      	cmp	r0, #0
 810aa40:	d1f8      	bne.n	810aa34 <__gethex+0x94>
 810aa42:	9901      	ldr	r1, [sp, #4]
 810aa44:	4652      	mov	r2, sl
 810aa46:	4630      	mov	r0, r6
 810aa48:	f001 fc11 	bl	810c26e <strncmp>
 810aa4c:	b980      	cbnz	r0, 810aa70 <__gethex+0xd0>
 810aa4e:	b94d      	cbnz	r5, 810aa64 <__gethex+0xc4>
 810aa50:	eb06 050a 	add.w	r5, r6, sl
 810aa54:	462a      	mov	r2, r5
 810aa56:	4616      	mov	r6, r2
 810aa58:	3201      	adds	r2, #1
 810aa5a:	7830      	ldrb	r0, [r6, #0]
 810aa5c:	f7ff ff8b 	bl	810a976 <__hexdig_fun>
 810aa60:	2800      	cmp	r0, #0
 810aa62:	d1f8      	bne.n	810aa56 <__gethex+0xb6>
 810aa64:	1bad      	subs	r5, r5, r6
 810aa66:	00ad      	lsls	r5, r5, #2
 810aa68:	e004      	b.n	810aa74 <__gethex+0xd4>
 810aa6a:	2400      	movs	r4, #0
 810aa6c:	4625      	mov	r5, r4
 810aa6e:	e7e0      	b.n	810aa32 <__gethex+0x92>
 810aa70:	2d00      	cmp	r5, #0
 810aa72:	d1f7      	bne.n	810aa64 <__gethex+0xc4>
 810aa74:	7833      	ldrb	r3, [r6, #0]
 810aa76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810aa7a:	2b50      	cmp	r3, #80	; 0x50
 810aa7c:	d13b      	bne.n	810aaf6 <__gethex+0x156>
 810aa7e:	7873      	ldrb	r3, [r6, #1]
 810aa80:	2b2b      	cmp	r3, #43	; 0x2b
 810aa82:	d02c      	beq.n	810aade <__gethex+0x13e>
 810aa84:	2b2d      	cmp	r3, #45	; 0x2d
 810aa86:	d02e      	beq.n	810aae6 <__gethex+0x146>
 810aa88:	1c71      	adds	r1, r6, #1
 810aa8a:	f04f 0900 	mov.w	r9, #0
 810aa8e:	7808      	ldrb	r0, [r1, #0]
 810aa90:	f7ff ff71 	bl	810a976 <__hexdig_fun>
 810aa94:	1e43      	subs	r3, r0, #1
 810aa96:	b2db      	uxtb	r3, r3
 810aa98:	2b18      	cmp	r3, #24
 810aa9a:	d82c      	bhi.n	810aaf6 <__gethex+0x156>
 810aa9c:	f1a0 0210 	sub.w	r2, r0, #16
 810aaa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810aaa4:	f7ff ff67 	bl	810a976 <__hexdig_fun>
 810aaa8:	1e43      	subs	r3, r0, #1
 810aaaa:	b2db      	uxtb	r3, r3
 810aaac:	2b18      	cmp	r3, #24
 810aaae:	d91d      	bls.n	810aaec <__gethex+0x14c>
 810aab0:	f1b9 0f00 	cmp.w	r9, #0
 810aab4:	d000      	beq.n	810aab8 <__gethex+0x118>
 810aab6:	4252      	negs	r2, r2
 810aab8:	4415      	add	r5, r2
 810aaba:	f8cb 1000 	str.w	r1, [fp]
 810aabe:	b1e4      	cbz	r4, 810aafa <__gethex+0x15a>
 810aac0:	9b00      	ldr	r3, [sp, #0]
 810aac2:	2b00      	cmp	r3, #0
 810aac4:	bf14      	ite	ne
 810aac6:	2700      	movne	r7, #0
 810aac8:	2706      	moveq	r7, #6
 810aaca:	4638      	mov	r0, r7
 810aacc:	b009      	add	sp, #36	; 0x24
 810aace:	ecbd 8b02 	vpop	{d8}
 810aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aad6:	463e      	mov	r6, r7
 810aad8:	4625      	mov	r5, r4
 810aada:	2401      	movs	r4, #1
 810aadc:	e7ca      	b.n	810aa74 <__gethex+0xd4>
 810aade:	f04f 0900 	mov.w	r9, #0
 810aae2:	1cb1      	adds	r1, r6, #2
 810aae4:	e7d3      	b.n	810aa8e <__gethex+0xee>
 810aae6:	f04f 0901 	mov.w	r9, #1
 810aaea:	e7fa      	b.n	810aae2 <__gethex+0x142>
 810aaec:	230a      	movs	r3, #10
 810aaee:	fb03 0202 	mla	r2, r3, r2, r0
 810aaf2:	3a10      	subs	r2, #16
 810aaf4:	e7d4      	b.n	810aaa0 <__gethex+0x100>
 810aaf6:	4631      	mov	r1, r6
 810aaf8:	e7df      	b.n	810aaba <__gethex+0x11a>
 810aafa:	1bf3      	subs	r3, r6, r7
 810aafc:	3b01      	subs	r3, #1
 810aafe:	4621      	mov	r1, r4
 810ab00:	2b07      	cmp	r3, #7
 810ab02:	dc0b      	bgt.n	810ab1c <__gethex+0x17c>
 810ab04:	ee18 0a10 	vmov	r0, s16
 810ab08:	f000 fae6 	bl	810b0d8 <_Balloc>
 810ab0c:	4604      	mov	r4, r0
 810ab0e:	b940      	cbnz	r0, 810ab22 <__gethex+0x182>
 810ab10:	4b5d      	ldr	r3, [pc, #372]	; (810ac88 <__gethex+0x2e8>)
 810ab12:	4602      	mov	r2, r0
 810ab14:	21de      	movs	r1, #222	; 0xde
 810ab16:	485d      	ldr	r0, [pc, #372]	; (810ac8c <__gethex+0x2ec>)
 810ab18:	f001 fbdc 	bl	810c2d4 <__assert_func>
 810ab1c:	3101      	adds	r1, #1
 810ab1e:	105b      	asrs	r3, r3, #1
 810ab20:	e7ee      	b.n	810ab00 <__gethex+0x160>
 810ab22:	f100 0914 	add.w	r9, r0, #20
 810ab26:	f04f 0b00 	mov.w	fp, #0
 810ab2a:	f1ca 0301 	rsb	r3, sl, #1
 810ab2e:	f8cd 9008 	str.w	r9, [sp, #8]
 810ab32:	f8cd b000 	str.w	fp, [sp]
 810ab36:	9306      	str	r3, [sp, #24]
 810ab38:	42b7      	cmp	r7, r6
 810ab3a:	d340      	bcc.n	810abbe <__gethex+0x21e>
 810ab3c:	9802      	ldr	r0, [sp, #8]
 810ab3e:	9b00      	ldr	r3, [sp, #0]
 810ab40:	f840 3b04 	str.w	r3, [r0], #4
 810ab44:	eba0 0009 	sub.w	r0, r0, r9
 810ab48:	1080      	asrs	r0, r0, #2
 810ab4a:	0146      	lsls	r6, r0, #5
 810ab4c:	6120      	str	r0, [r4, #16]
 810ab4e:	4618      	mov	r0, r3
 810ab50:	f000 fbb4 	bl	810b2bc <__hi0bits>
 810ab54:	1a30      	subs	r0, r6, r0
 810ab56:	f8d8 6000 	ldr.w	r6, [r8]
 810ab5a:	42b0      	cmp	r0, r6
 810ab5c:	dd63      	ble.n	810ac26 <__gethex+0x286>
 810ab5e:	1b87      	subs	r7, r0, r6
 810ab60:	4639      	mov	r1, r7
 810ab62:	4620      	mov	r0, r4
 810ab64:	f000 ff58 	bl	810ba18 <__any_on>
 810ab68:	4682      	mov	sl, r0
 810ab6a:	b1a8      	cbz	r0, 810ab98 <__gethex+0x1f8>
 810ab6c:	1e7b      	subs	r3, r7, #1
 810ab6e:	1159      	asrs	r1, r3, #5
 810ab70:	f003 021f 	and.w	r2, r3, #31
 810ab74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810ab78:	f04f 0a01 	mov.w	sl, #1
 810ab7c:	fa0a f202 	lsl.w	r2, sl, r2
 810ab80:	420a      	tst	r2, r1
 810ab82:	d009      	beq.n	810ab98 <__gethex+0x1f8>
 810ab84:	4553      	cmp	r3, sl
 810ab86:	dd05      	ble.n	810ab94 <__gethex+0x1f4>
 810ab88:	1eb9      	subs	r1, r7, #2
 810ab8a:	4620      	mov	r0, r4
 810ab8c:	f000 ff44 	bl	810ba18 <__any_on>
 810ab90:	2800      	cmp	r0, #0
 810ab92:	d145      	bne.n	810ac20 <__gethex+0x280>
 810ab94:	f04f 0a02 	mov.w	sl, #2
 810ab98:	4639      	mov	r1, r7
 810ab9a:	4620      	mov	r0, r4
 810ab9c:	f7ff fe99 	bl	810a8d2 <rshift>
 810aba0:	443d      	add	r5, r7
 810aba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810aba6:	42ab      	cmp	r3, r5
 810aba8:	da4c      	bge.n	810ac44 <__gethex+0x2a4>
 810abaa:	ee18 0a10 	vmov	r0, s16
 810abae:	4621      	mov	r1, r4
 810abb0:	f000 fad2 	bl	810b158 <_Bfree>
 810abb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810abb6:	2300      	movs	r3, #0
 810abb8:	6013      	str	r3, [r2, #0]
 810abba:	27a3      	movs	r7, #163	; 0xa3
 810abbc:	e785      	b.n	810aaca <__gethex+0x12a>
 810abbe:	1e73      	subs	r3, r6, #1
 810abc0:	9a05      	ldr	r2, [sp, #20]
 810abc2:	9303      	str	r3, [sp, #12]
 810abc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810abc8:	4293      	cmp	r3, r2
 810abca:	d019      	beq.n	810ac00 <__gethex+0x260>
 810abcc:	f1bb 0f20 	cmp.w	fp, #32
 810abd0:	d107      	bne.n	810abe2 <__gethex+0x242>
 810abd2:	9b02      	ldr	r3, [sp, #8]
 810abd4:	9a00      	ldr	r2, [sp, #0]
 810abd6:	f843 2b04 	str.w	r2, [r3], #4
 810abda:	9302      	str	r3, [sp, #8]
 810abdc:	2300      	movs	r3, #0
 810abde:	9300      	str	r3, [sp, #0]
 810abe0:	469b      	mov	fp, r3
 810abe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810abe6:	f7ff fec6 	bl	810a976 <__hexdig_fun>
 810abea:	9b00      	ldr	r3, [sp, #0]
 810abec:	f000 000f 	and.w	r0, r0, #15
 810abf0:	fa00 f00b 	lsl.w	r0, r0, fp
 810abf4:	4303      	orrs	r3, r0
 810abf6:	9300      	str	r3, [sp, #0]
 810abf8:	f10b 0b04 	add.w	fp, fp, #4
 810abfc:	9b03      	ldr	r3, [sp, #12]
 810abfe:	e00d      	b.n	810ac1c <__gethex+0x27c>
 810ac00:	9b03      	ldr	r3, [sp, #12]
 810ac02:	9a06      	ldr	r2, [sp, #24]
 810ac04:	4413      	add	r3, r2
 810ac06:	42bb      	cmp	r3, r7
 810ac08:	d3e0      	bcc.n	810abcc <__gethex+0x22c>
 810ac0a:	4618      	mov	r0, r3
 810ac0c:	9901      	ldr	r1, [sp, #4]
 810ac0e:	9307      	str	r3, [sp, #28]
 810ac10:	4652      	mov	r2, sl
 810ac12:	f001 fb2c 	bl	810c26e <strncmp>
 810ac16:	9b07      	ldr	r3, [sp, #28]
 810ac18:	2800      	cmp	r0, #0
 810ac1a:	d1d7      	bne.n	810abcc <__gethex+0x22c>
 810ac1c:	461e      	mov	r6, r3
 810ac1e:	e78b      	b.n	810ab38 <__gethex+0x198>
 810ac20:	f04f 0a03 	mov.w	sl, #3
 810ac24:	e7b8      	b.n	810ab98 <__gethex+0x1f8>
 810ac26:	da0a      	bge.n	810ac3e <__gethex+0x29e>
 810ac28:	1a37      	subs	r7, r6, r0
 810ac2a:	4621      	mov	r1, r4
 810ac2c:	ee18 0a10 	vmov	r0, s16
 810ac30:	463a      	mov	r2, r7
 810ac32:	f000 fcad 	bl	810b590 <__lshift>
 810ac36:	1bed      	subs	r5, r5, r7
 810ac38:	4604      	mov	r4, r0
 810ac3a:	f100 0914 	add.w	r9, r0, #20
 810ac3e:	f04f 0a00 	mov.w	sl, #0
 810ac42:	e7ae      	b.n	810aba2 <__gethex+0x202>
 810ac44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810ac48:	42a8      	cmp	r0, r5
 810ac4a:	dd72      	ble.n	810ad32 <__gethex+0x392>
 810ac4c:	1b45      	subs	r5, r0, r5
 810ac4e:	42ae      	cmp	r6, r5
 810ac50:	dc36      	bgt.n	810acc0 <__gethex+0x320>
 810ac52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810ac56:	2b02      	cmp	r3, #2
 810ac58:	d02a      	beq.n	810acb0 <__gethex+0x310>
 810ac5a:	2b03      	cmp	r3, #3
 810ac5c:	d02c      	beq.n	810acb8 <__gethex+0x318>
 810ac5e:	2b01      	cmp	r3, #1
 810ac60:	d11c      	bne.n	810ac9c <__gethex+0x2fc>
 810ac62:	42ae      	cmp	r6, r5
 810ac64:	d11a      	bne.n	810ac9c <__gethex+0x2fc>
 810ac66:	2e01      	cmp	r6, #1
 810ac68:	d112      	bne.n	810ac90 <__gethex+0x2f0>
 810ac6a:	9a04      	ldr	r2, [sp, #16]
 810ac6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810ac70:	6013      	str	r3, [r2, #0]
 810ac72:	2301      	movs	r3, #1
 810ac74:	6123      	str	r3, [r4, #16]
 810ac76:	f8c9 3000 	str.w	r3, [r9]
 810ac7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ac7c:	2762      	movs	r7, #98	; 0x62
 810ac7e:	601c      	str	r4, [r3, #0]
 810ac80:	e723      	b.n	810aaca <__gethex+0x12a>
 810ac82:	bf00      	nop
 810ac84:	0810c94c 	.word	0x0810c94c
 810ac88:	0810c870 	.word	0x0810c870
 810ac8c:	0810c8e4 	.word	0x0810c8e4
 810ac90:	1e71      	subs	r1, r6, #1
 810ac92:	4620      	mov	r0, r4
 810ac94:	f000 fec0 	bl	810ba18 <__any_on>
 810ac98:	2800      	cmp	r0, #0
 810ac9a:	d1e6      	bne.n	810ac6a <__gethex+0x2ca>
 810ac9c:	ee18 0a10 	vmov	r0, s16
 810aca0:	4621      	mov	r1, r4
 810aca2:	f000 fa59 	bl	810b158 <_Bfree>
 810aca6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810aca8:	2300      	movs	r3, #0
 810acaa:	6013      	str	r3, [r2, #0]
 810acac:	2750      	movs	r7, #80	; 0x50
 810acae:	e70c      	b.n	810aaca <__gethex+0x12a>
 810acb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810acb2:	2b00      	cmp	r3, #0
 810acb4:	d1f2      	bne.n	810ac9c <__gethex+0x2fc>
 810acb6:	e7d8      	b.n	810ac6a <__gethex+0x2ca>
 810acb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810acba:	2b00      	cmp	r3, #0
 810acbc:	d1d5      	bne.n	810ac6a <__gethex+0x2ca>
 810acbe:	e7ed      	b.n	810ac9c <__gethex+0x2fc>
 810acc0:	1e6f      	subs	r7, r5, #1
 810acc2:	f1ba 0f00 	cmp.w	sl, #0
 810acc6:	d131      	bne.n	810ad2c <__gethex+0x38c>
 810acc8:	b127      	cbz	r7, 810acd4 <__gethex+0x334>
 810acca:	4639      	mov	r1, r7
 810accc:	4620      	mov	r0, r4
 810acce:	f000 fea3 	bl	810ba18 <__any_on>
 810acd2:	4682      	mov	sl, r0
 810acd4:	117b      	asrs	r3, r7, #5
 810acd6:	2101      	movs	r1, #1
 810acd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810acdc:	f007 071f 	and.w	r7, r7, #31
 810ace0:	fa01 f707 	lsl.w	r7, r1, r7
 810ace4:	421f      	tst	r7, r3
 810ace6:	4629      	mov	r1, r5
 810ace8:	4620      	mov	r0, r4
 810acea:	bf18      	it	ne
 810acec:	f04a 0a02 	orrne.w	sl, sl, #2
 810acf0:	1b76      	subs	r6, r6, r5
 810acf2:	f7ff fdee 	bl	810a8d2 <rshift>
 810acf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810acfa:	2702      	movs	r7, #2
 810acfc:	f1ba 0f00 	cmp.w	sl, #0
 810ad00:	d048      	beq.n	810ad94 <__gethex+0x3f4>
 810ad02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810ad06:	2b02      	cmp	r3, #2
 810ad08:	d015      	beq.n	810ad36 <__gethex+0x396>
 810ad0a:	2b03      	cmp	r3, #3
 810ad0c:	d017      	beq.n	810ad3e <__gethex+0x39e>
 810ad0e:	2b01      	cmp	r3, #1
 810ad10:	d109      	bne.n	810ad26 <__gethex+0x386>
 810ad12:	f01a 0f02 	tst.w	sl, #2
 810ad16:	d006      	beq.n	810ad26 <__gethex+0x386>
 810ad18:	f8d9 0000 	ldr.w	r0, [r9]
 810ad1c:	ea4a 0a00 	orr.w	sl, sl, r0
 810ad20:	f01a 0f01 	tst.w	sl, #1
 810ad24:	d10e      	bne.n	810ad44 <__gethex+0x3a4>
 810ad26:	f047 0710 	orr.w	r7, r7, #16
 810ad2a:	e033      	b.n	810ad94 <__gethex+0x3f4>
 810ad2c:	f04f 0a01 	mov.w	sl, #1
 810ad30:	e7d0      	b.n	810acd4 <__gethex+0x334>
 810ad32:	2701      	movs	r7, #1
 810ad34:	e7e2      	b.n	810acfc <__gethex+0x35c>
 810ad36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ad38:	f1c3 0301 	rsb	r3, r3, #1
 810ad3c:	9315      	str	r3, [sp, #84]	; 0x54
 810ad3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ad40:	2b00      	cmp	r3, #0
 810ad42:	d0f0      	beq.n	810ad26 <__gethex+0x386>
 810ad44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810ad48:	f104 0314 	add.w	r3, r4, #20
 810ad4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810ad50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810ad54:	f04f 0c00 	mov.w	ip, #0
 810ad58:	4618      	mov	r0, r3
 810ad5a:	f853 2b04 	ldr.w	r2, [r3], #4
 810ad5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 810ad62:	d01c      	beq.n	810ad9e <__gethex+0x3fe>
 810ad64:	3201      	adds	r2, #1
 810ad66:	6002      	str	r2, [r0, #0]
 810ad68:	2f02      	cmp	r7, #2
 810ad6a:	f104 0314 	add.w	r3, r4, #20
 810ad6e:	d13f      	bne.n	810adf0 <__gethex+0x450>
 810ad70:	f8d8 2000 	ldr.w	r2, [r8]
 810ad74:	3a01      	subs	r2, #1
 810ad76:	42b2      	cmp	r2, r6
 810ad78:	d10a      	bne.n	810ad90 <__gethex+0x3f0>
 810ad7a:	1171      	asrs	r1, r6, #5
 810ad7c:	2201      	movs	r2, #1
 810ad7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810ad82:	f006 061f 	and.w	r6, r6, #31
 810ad86:	fa02 f606 	lsl.w	r6, r2, r6
 810ad8a:	421e      	tst	r6, r3
 810ad8c:	bf18      	it	ne
 810ad8e:	4617      	movne	r7, r2
 810ad90:	f047 0720 	orr.w	r7, r7, #32
 810ad94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ad96:	601c      	str	r4, [r3, #0]
 810ad98:	9b04      	ldr	r3, [sp, #16]
 810ad9a:	601d      	str	r5, [r3, #0]
 810ad9c:	e695      	b.n	810aaca <__gethex+0x12a>
 810ad9e:	4299      	cmp	r1, r3
 810ada0:	f843 cc04 	str.w	ip, [r3, #-4]
 810ada4:	d8d8      	bhi.n	810ad58 <__gethex+0x3b8>
 810ada6:	68a3      	ldr	r3, [r4, #8]
 810ada8:	459b      	cmp	fp, r3
 810adaa:	db19      	blt.n	810ade0 <__gethex+0x440>
 810adac:	6861      	ldr	r1, [r4, #4]
 810adae:	ee18 0a10 	vmov	r0, s16
 810adb2:	3101      	adds	r1, #1
 810adb4:	f000 f990 	bl	810b0d8 <_Balloc>
 810adb8:	4681      	mov	r9, r0
 810adba:	b918      	cbnz	r0, 810adc4 <__gethex+0x424>
 810adbc:	4b1a      	ldr	r3, [pc, #104]	; (810ae28 <__gethex+0x488>)
 810adbe:	4602      	mov	r2, r0
 810adc0:	2184      	movs	r1, #132	; 0x84
 810adc2:	e6a8      	b.n	810ab16 <__gethex+0x176>
 810adc4:	6922      	ldr	r2, [r4, #16]
 810adc6:	3202      	adds	r2, #2
 810adc8:	f104 010c 	add.w	r1, r4, #12
 810adcc:	0092      	lsls	r2, r2, #2
 810adce:	300c      	adds	r0, #12
 810add0:	f000 f974 	bl	810b0bc <memcpy>
 810add4:	4621      	mov	r1, r4
 810add6:	ee18 0a10 	vmov	r0, s16
 810adda:	f000 f9bd 	bl	810b158 <_Bfree>
 810adde:	464c      	mov	r4, r9
 810ade0:	6923      	ldr	r3, [r4, #16]
 810ade2:	1c5a      	adds	r2, r3, #1
 810ade4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810ade8:	6122      	str	r2, [r4, #16]
 810adea:	2201      	movs	r2, #1
 810adec:	615a      	str	r2, [r3, #20]
 810adee:	e7bb      	b.n	810ad68 <__gethex+0x3c8>
 810adf0:	6922      	ldr	r2, [r4, #16]
 810adf2:	455a      	cmp	r2, fp
 810adf4:	dd0b      	ble.n	810ae0e <__gethex+0x46e>
 810adf6:	2101      	movs	r1, #1
 810adf8:	4620      	mov	r0, r4
 810adfa:	f7ff fd6a 	bl	810a8d2 <rshift>
 810adfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810ae02:	3501      	adds	r5, #1
 810ae04:	42ab      	cmp	r3, r5
 810ae06:	f6ff aed0 	blt.w	810abaa <__gethex+0x20a>
 810ae0a:	2701      	movs	r7, #1
 810ae0c:	e7c0      	b.n	810ad90 <__gethex+0x3f0>
 810ae0e:	f016 061f 	ands.w	r6, r6, #31
 810ae12:	d0fa      	beq.n	810ae0a <__gethex+0x46a>
 810ae14:	4453      	add	r3, sl
 810ae16:	f1c6 0620 	rsb	r6, r6, #32
 810ae1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810ae1e:	f000 fa4d 	bl	810b2bc <__hi0bits>
 810ae22:	42b0      	cmp	r0, r6
 810ae24:	dbe7      	blt.n	810adf6 <__gethex+0x456>
 810ae26:	e7f0      	b.n	810ae0a <__gethex+0x46a>
 810ae28:	0810c870 	.word	0x0810c870

0810ae2c <L_shift>:
 810ae2c:	f1c2 0208 	rsb	r2, r2, #8
 810ae30:	0092      	lsls	r2, r2, #2
 810ae32:	b570      	push	{r4, r5, r6, lr}
 810ae34:	f1c2 0620 	rsb	r6, r2, #32
 810ae38:	6843      	ldr	r3, [r0, #4]
 810ae3a:	6804      	ldr	r4, [r0, #0]
 810ae3c:	fa03 f506 	lsl.w	r5, r3, r6
 810ae40:	432c      	orrs	r4, r5
 810ae42:	40d3      	lsrs	r3, r2
 810ae44:	6004      	str	r4, [r0, #0]
 810ae46:	f840 3f04 	str.w	r3, [r0, #4]!
 810ae4a:	4288      	cmp	r0, r1
 810ae4c:	d3f4      	bcc.n	810ae38 <L_shift+0xc>
 810ae4e:	bd70      	pop	{r4, r5, r6, pc}

0810ae50 <__match>:
 810ae50:	b530      	push	{r4, r5, lr}
 810ae52:	6803      	ldr	r3, [r0, #0]
 810ae54:	3301      	adds	r3, #1
 810ae56:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ae5a:	b914      	cbnz	r4, 810ae62 <__match+0x12>
 810ae5c:	6003      	str	r3, [r0, #0]
 810ae5e:	2001      	movs	r0, #1
 810ae60:	bd30      	pop	{r4, r5, pc}
 810ae62:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ae66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ae6a:	2d19      	cmp	r5, #25
 810ae6c:	bf98      	it	ls
 810ae6e:	3220      	addls	r2, #32
 810ae70:	42a2      	cmp	r2, r4
 810ae72:	d0f0      	beq.n	810ae56 <__match+0x6>
 810ae74:	2000      	movs	r0, #0
 810ae76:	e7f3      	b.n	810ae60 <__match+0x10>

0810ae78 <__hexnan>:
 810ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ae7c:	680b      	ldr	r3, [r1, #0]
 810ae7e:	115e      	asrs	r6, r3, #5
 810ae80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ae84:	f013 031f 	ands.w	r3, r3, #31
 810ae88:	b087      	sub	sp, #28
 810ae8a:	bf18      	it	ne
 810ae8c:	3604      	addne	r6, #4
 810ae8e:	2500      	movs	r5, #0
 810ae90:	1f37      	subs	r7, r6, #4
 810ae92:	4690      	mov	r8, r2
 810ae94:	6802      	ldr	r2, [r0, #0]
 810ae96:	9301      	str	r3, [sp, #4]
 810ae98:	4682      	mov	sl, r0
 810ae9a:	f846 5c04 	str.w	r5, [r6, #-4]
 810ae9e:	46b9      	mov	r9, r7
 810aea0:	463c      	mov	r4, r7
 810aea2:	9502      	str	r5, [sp, #8]
 810aea4:	46ab      	mov	fp, r5
 810aea6:	7851      	ldrb	r1, [r2, #1]
 810aea8:	1c53      	adds	r3, r2, #1
 810aeaa:	9303      	str	r3, [sp, #12]
 810aeac:	b341      	cbz	r1, 810af00 <__hexnan+0x88>
 810aeae:	4608      	mov	r0, r1
 810aeb0:	9205      	str	r2, [sp, #20]
 810aeb2:	9104      	str	r1, [sp, #16]
 810aeb4:	f7ff fd5f 	bl	810a976 <__hexdig_fun>
 810aeb8:	2800      	cmp	r0, #0
 810aeba:	d14f      	bne.n	810af5c <__hexnan+0xe4>
 810aebc:	9904      	ldr	r1, [sp, #16]
 810aebe:	9a05      	ldr	r2, [sp, #20]
 810aec0:	2920      	cmp	r1, #32
 810aec2:	d818      	bhi.n	810aef6 <__hexnan+0x7e>
 810aec4:	9b02      	ldr	r3, [sp, #8]
 810aec6:	459b      	cmp	fp, r3
 810aec8:	dd13      	ble.n	810aef2 <__hexnan+0x7a>
 810aeca:	454c      	cmp	r4, r9
 810aecc:	d206      	bcs.n	810aedc <__hexnan+0x64>
 810aece:	2d07      	cmp	r5, #7
 810aed0:	dc04      	bgt.n	810aedc <__hexnan+0x64>
 810aed2:	462a      	mov	r2, r5
 810aed4:	4649      	mov	r1, r9
 810aed6:	4620      	mov	r0, r4
 810aed8:	f7ff ffa8 	bl	810ae2c <L_shift>
 810aedc:	4544      	cmp	r4, r8
 810aede:	d950      	bls.n	810af82 <__hexnan+0x10a>
 810aee0:	2300      	movs	r3, #0
 810aee2:	f1a4 0904 	sub.w	r9, r4, #4
 810aee6:	f844 3c04 	str.w	r3, [r4, #-4]
 810aeea:	f8cd b008 	str.w	fp, [sp, #8]
 810aeee:	464c      	mov	r4, r9
 810aef0:	461d      	mov	r5, r3
 810aef2:	9a03      	ldr	r2, [sp, #12]
 810aef4:	e7d7      	b.n	810aea6 <__hexnan+0x2e>
 810aef6:	2929      	cmp	r1, #41	; 0x29
 810aef8:	d156      	bne.n	810afa8 <__hexnan+0x130>
 810aefa:	3202      	adds	r2, #2
 810aefc:	f8ca 2000 	str.w	r2, [sl]
 810af00:	f1bb 0f00 	cmp.w	fp, #0
 810af04:	d050      	beq.n	810afa8 <__hexnan+0x130>
 810af06:	454c      	cmp	r4, r9
 810af08:	d206      	bcs.n	810af18 <__hexnan+0xa0>
 810af0a:	2d07      	cmp	r5, #7
 810af0c:	dc04      	bgt.n	810af18 <__hexnan+0xa0>
 810af0e:	462a      	mov	r2, r5
 810af10:	4649      	mov	r1, r9
 810af12:	4620      	mov	r0, r4
 810af14:	f7ff ff8a 	bl	810ae2c <L_shift>
 810af18:	4544      	cmp	r4, r8
 810af1a:	d934      	bls.n	810af86 <__hexnan+0x10e>
 810af1c:	f1a8 0204 	sub.w	r2, r8, #4
 810af20:	4623      	mov	r3, r4
 810af22:	f853 1b04 	ldr.w	r1, [r3], #4
 810af26:	f842 1f04 	str.w	r1, [r2, #4]!
 810af2a:	429f      	cmp	r7, r3
 810af2c:	d2f9      	bcs.n	810af22 <__hexnan+0xaa>
 810af2e:	1b3b      	subs	r3, r7, r4
 810af30:	f023 0303 	bic.w	r3, r3, #3
 810af34:	3304      	adds	r3, #4
 810af36:	3401      	adds	r4, #1
 810af38:	3e03      	subs	r6, #3
 810af3a:	42b4      	cmp	r4, r6
 810af3c:	bf88      	it	hi
 810af3e:	2304      	movhi	r3, #4
 810af40:	4443      	add	r3, r8
 810af42:	2200      	movs	r2, #0
 810af44:	f843 2b04 	str.w	r2, [r3], #4
 810af48:	429f      	cmp	r7, r3
 810af4a:	d2fb      	bcs.n	810af44 <__hexnan+0xcc>
 810af4c:	683b      	ldr	r3, [r7, #0]
 810af4e:	b91b      	cbnz	r3, 810af58 <__hexnan+0xe0>
 810af50:	4547      	cmp	r7, r8
 810af52:	d127      	bne.n	810afa4 <__hexnan+0x12c>
 810af54:	2301      	movs	r3, #1
 810af56:	603b      	str	r3, [r7, #0]
 810af58:	2005      	movs	r0, #5
 810af5a:	e026      	b.n	810afaa <__hexnan+0x132>
 810af5c:	3501      	adds	r5, #1
 810af5e:	2d08      	cmp	r5, #8
 810af60:	f10b 0b01 	add.w	fp, fp, #1
 810af64:	dd06      	ble.n	810af74 <__hexnan+0xfc>
 810af66:	4544      	cmp	r4, r8
 810af68:	d9c3      	bls.n	810aef2 <__hexnan+0x7a>
 810af6a:	2300      	movs	r3, #0
 810af6c:	f844 3c04 	str.w	r3, [r4, #-4]
 810af70:	2501      	movs	r5, #1
 810af72:	3c04      	subs	r4, #4
 810af74:	6822      	ldr	r2, [r4, #0]
 810af76:	f000 000f 	and.w	r0, r0, #15
 810af7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810af7e:	6022      	str	r2, [r4, #0]
 810af80:	e7b7      	b.n	810aef2 <__hexnan+0x7a>
 810af82:	2508      	movs	r5, #8
 810af84:	e7b5      	b.n	810aef2 <__hexnan+0x7a>
 810af86:	9b01      	ldr	r3, [sp, #4]
 810af88:	2b00      	cmp	r3, #0
 810af8a:	d0df      	beq.n	810af4c <__hexnan+0xd4>
 810af8c:	f04f 32ff 	mov.w	r2, #4294967295
 810af90:	f1c3 0320 	rsb	r3, r3, #32
 810af94:	fa22 f303 	lsr.w	r3, r2, r3
 810af98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810af9c:	401a      	ands	r2, r3
 810af9e:	f846 2c04 	str.w	r2, [r6, #-4]
 810afa2:	e7d3      	b.n	810af4c <__hexnan+0xd4>
 810afa4:	3f04      	subs	r7, #4
 810afa6:	e7d1      	b.n	810af4c <__hexnan+0xd4>
 810afa8:	2004      	movs	r0, #4
 810afaa:	b007      	add	sp, #28
 810afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810afb0 <_localeconv_r>:
 810afb0:	4800      	ldr	r0, [pc, #0]	; (810afb4 <_localeconv_r+0x4>)
 810afb2:	4770      	bx	lr
 810afb4:	10000174 	.word	0x10000174

0810afb8 <__retarget_lock_init_recursive>:
 810afb8:	4770      	bx	lr

0810afba <__retarget_lock_acquire_recursive>:
 810afba:	4770      	bx	lr

0810afbc <__retarget_lock_release_recursive>:
 810afbc:	4770      	bx	lr

0810afbe <__swhatbuf_r>:
 810afbe:	b570      	push	{r4, r5, r6, lr}
 810afc0:	460e      	mov	r6, r1
 810afc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810afc6:	2900      	cmp	r1, #0
 810afc8:	b096      	sub	sp, #88	; 0x58
 810afca:	4614      	mov	r4, r2
 810afcc:	461d      	mov	r5, r3
 810afce:	da08      	bge.n	810afe2 <__swhatbuf_r+0x24>
 810afd0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810afd4:	2200      	movs	r2, #0
 810afd6:	602a      	str	r2, [r5, #0]
 810afd8:	061a      	lsls	r2, r3, #24
 810afda:	d410      	bmi.n	810affe <__swhatbuf_r+0x40>
 810afdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810afe0:	e00e      	b.n	810b000 <__swhatbuf_r+0x42>
 810afe2:	466a      	mov	r2, sp
 810afe4:	f001 f9b6 	bl	810c354 <_fstat_r>
 810afe8:	2800      	cmp	r0, #0
 810afea:	dbf1      	blt.n	810afd0 <__swhatbuf_r+0x12>
 810afec:	9a01      	ldr	r2, [sp, #4]
 810afee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810aff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810aff6:	425a      	negs	r2, r3
 810aff8:	415a      	adcs	r2, r3
 810affa:	602a      	str	r2, [r5, #0]
 810affc:	e7ee      	b.n	810afdc <__swhatbuf_r+0x1e>
 810affe:	2340      	movs	r3, #64	; 0x40
 810b000:	2000      	movs	r0, #0
 810b002:	6023      	str	r3, [r4, #0]
 810b004:	b016      	add	sp, #88	; 0x58
 810b006:	bd70      	pop	{r4, r5, r6, pc}

0810b008 <__smakebuf_r>:
 810b008:	898b      	ldrh	r3, [r1, #12]
 810b00a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b00c:	079d      	lsls	r5, r3, #30
 810b00e:	4606      	mov	r6, r0
 810b010:	460c      	mov	r4, r1
 810b012:	d507      	bpl.n	810b024 <__smakebuf_r+0x1c>
 810b014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810b018:	6023      	str	r3, [r4, #0]
 810b01a:	6123      	str	r3, [r4, #16]
 810b01c:	2301      	movs	r3, #1
 810b01e:	6163      	str	r3, [r4, #20]
 810b020:	b002      	add	sp, #8
 810b022:	bd70      	pop	{r4, r5, r6, pc}
 810b024:	ab01      	add	r3, sp, #4
 810b026:	466a      	mov	r2, sp
 810b028:	f7ff ffc9 	bl	810afbe <__swhatbuf_r>
 810b02c:	9900      	ldr	r1, [sp, #0]
 810b02e:	4605      	mov	r5, r0
 810b030:	4630      	mov	r0, r6
 810b032:	f000 fd95 	bl	810bb60 <_malloc_r>
 810b036:	b948      	cbnz	r0, 810b04c <__smakebuf_r+0x44>
 810b038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b03c:	059a      	lsls	r2, r3, #22
 810b03e:	d4ef      	bmi.n	810b020 <__smakebuf_r+0x18>
 810b040:	f023 0303 	bic.w	r3, r3, #3
 810b044:	f043 0302 	orr.w	r3, r3, #2
 810b048:	81a3      	strh	r3, [r4, #12]
 810b04a:	e7e3      	b.n	810b014 <__smakebuf_r+0xc>
 810b04c:	4b0d      	ldr	r3, [pc, #52]	; (810b084 <__smakebuf_r+0x7c>)
 810b04e:	62b3      	str	r3, [r6, #40]	; 0x28
 810b050:	89a3      	ldrh	r3, [r4, #12]
 810b052:	6020      	str	r0, [r4, #0]
 810b054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b058:	81a3      	strh	r3, [r4, #12]
 810b05a:	9b00      	ldr	r3, [sp, #0]
 810b05c:	6163      	str	r3, [r4, #20]
 810b05e:	9b01      	ldr	r3, [sp, #4]
 810b060:	6120      	str	r0, [r4, #16]
 810b062:	b15b      	cbz	r3, 810b07c <__smakebuf_r+0x74>
 810b064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b068:	4630      	mov	r0, r6
 810b06a:	f001 f985 	bl	810c378 <_isatty_r>
 810b06e:	b128      	cbz	r0, 810b07c <__smakebuf_r+0x74>
 810b070:	89a3      	ldrh	r3, [r4, #12]
 810b072:	f023 0303 	bic.w	r3, r3, #3
 810b076:	f043 0301 	orr.w	r3, r3, #1
 810b07a:	81a3      	strh	r3, [r4, #12]
 810b07c:	89a0      	ldrh	r0, [r4, #12]
 810b07e:	4305      	orrs	r5, r0
 810b080:	81a5      	strh	r5, [r4, #12]
 810b082:	e7cd      	b.n	810b020 <__smakebuf_r+0x18>
 810b084:	0810a731 	.word	0x0810a731

0810b088 <malloc>:
 810b088:	4b02      	ldr	r3, [pc, #8]	; (810b094 <malloc+0xc>)
 810b08a:	4601      	mov	r1, r0
 810b08c:	6818      	ldr	r0, [r3, #0]
 810b08e:	f000 bd67 	b.w	810bb60 <_malloc_r>
 810b092:	bf00      	nop
 810b094:	1000001c 	.word	0x1000001c

0810b098 <__ascii_mbtowc>:
 810b098:	b082      	sub	sp, #8
 810b09a:	b901      	cbnz	r1, 810b09e <__ascii_mbtowc+0x6>
 810b09c:	a901      	add	r1, sp, #4
 810b09e:	b142      	cbz	r2, 810b0b2 <__ascii_mbtowc+0x1a>
 810b0a0:	b14b      	cbz	r3, 810b0b6 <__ascii_mbtowc+0x1e>
 810b0a2:	7813      	ldrb	r3, [r2, #0]
 810b0a4:	600b      	str	r3, [r1, #0]
 810b0a6:	7812      	ldrb	r2, [r2, #0]
 810b0a8:	1e10      	subs	r0, r2, #0
 810b0aa:	bf18      	it	ne
 810b0ac:	2001      	movne	r0, #1
 810b0ae:	b002      	add	sp, #8
 810b0b0:	4770      	bx	lr
 810b0b2:	4610      	mov	r0, r2
 810b0b4:	e7fb      	b.n	810b0ae <__ascii_mbtowc+0x16>
 810b0b6:	f06f 0001 	mvn.w	r0, #1
 810b0ba:	e7f8      	b.n	810b0ae <__ascii_mbtowc+0x16>

0810b0bc <memcpy>:
 810b0bc:	440a      	add	r2, r1
 810b0be:	4291      	cmp	r1, r2
 810b0c0:	f100 33ff 	add.w	r3, r0, #4294967295
 810b0c4:	d100      	bne.n	810b0c8 <memcpy+0xc>
 810b0c6:	4770      	bx	lr
 810b0c8:	b510      	push	{r4, lr}
 810b0ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b0ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b0d2:	4291      	cmp	r1, r2
 810b0d4:	d1f9      	bne.n	810b0ca <memcpy+0xe>
 810b0d6:	bd10      	pop	{r4, pc}

0810b0d8 <_Balloc>:
 810b0d8:	b570      	push	{r4, r5, r6, lr}
 810b0da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810b0dc:	4604      	mov	r4, r0
 810b0de:	460d      	mov	r5, r1
 810b0e0:	b976      	cbnz	r6, 810b100 <_Balloc+0x28>
 810b0e2:	2010      	movs	r0, #16
 810b0e4:	f7ff ffd0 	bl	810b088 <malloc>
 810b0e8:	4602      	mov	r2, r0
 810b0ea:	6260      	str	r0, [r4, #36]	; 0x24
 810b0ec:	b920      	cbnz	r0, 810b0f8 <_Balloc+0x20>
 810b0ee:	4b18      	ldr	r3, [pc, #96]	; (810b150 <_Balloc+0x78>)
 810b0f0:	4818      	ldr	r0, [pc, #96]	; (810b154 <_Balloc+0x7c>)
 810b0f2:	2166      	movs	r1, #102	; 0x66
 810b0f4:	f001 f8ee 	bl	810c2d4 <__assert_func>
 810b0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b0fc:	6006      	str	r6, [r0, #0]
 810b0fe:	60c6      	str	r6, [r0, #12]
 810b100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810b102:	68f3      	ldr	r3, [r6, #12]
 810b104:	b183      	cbz	r3, 810b128 <_Balloc+0x50>
 810b106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b108:	68db      	ldr	r3, [r3, #12]
 810b10a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810b10e:	b9b8      	cbnz	r0, 810b140 <_Balloc+0x68>
 810b110:	2101      	movs	r1, #1
 810b112:	fa01 f605 	lsl.w	r6, r1, r5
 810b116:	1d72      	adds	r2, r6, #5
 810b118:	0092      	lsls	r2, r2, #2
 810b11a:	4620      	mov	r0, r4
 810b11c:	f000 fc9d 	bl	810ba5a <_calloc_r>
 810b120:	b160      	cbz	r0, 810b13c <_Balloc+0x64>
 810b122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810b126:	e00e      	b.n	810b146 <_Balloc+0x6e>
 810b128:	2221      	movs	r2, #33	; 0x21
 810b12a:	2104      	movs	r1, #4
 810b12c:	4620      	mov	r0, r4
 810b12e:	f000 fc94 	bl	810ba5a <_calloc_r>
 810b132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b134:	60f0      	str	r0, [r6, #12]
 810b136:	68db      	ldr	r3, [r3, #12]
 810b138:	2b00      	cmp	r3, #0
 810b13a:	d1e4      	bne.n	810b106 <_Balloc+0x2e>
 810b13c:	2000      	movs	r0, #0
 810b13e:	bd70      	pop	{r4, r5, r6, pc}
 810b140:	6802      	ldr	r2, [r0, #0]
 810b142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810b146:	2300      	movs	r3, #0
 810b148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b14c:	e7f7      	b.n	810b13e <_Balloc+0x66>
 810b14e:	bf00      	nop
 810b150:	0810c7fe 	.word	0x0810c7fe
 810b154:	0810c960 	.word	0x0810c960

0810b158 <_Bfree>:
 810b158:	b570      	push	{r4, r5, r6, lr}
 810b15a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810b15c:	4605      	mov	r5, r0
 810b15e:	460c      	mov	r4, r1
 810b160:	b976      	cbnz	r6, 810b180 <_Bfree+0x28>
 810b162:	2010      	movs	r0, #16
 810b164:	f7ff ff90 	bl	810b088 <malloc>
 810b168:	4602      	mov	r2, r0
 810b16a:	6268      	str	r0, [r5, #36]	; 0x24
 810b16c:	b920      	cbnz	r0, 810b178 <_Bfree+0x20>
 810b16e:	4b09      	ldr	r3, [pc, #36]	; (810b194 <_Bfree+0x3c>)
 810b170:	4809      	ldr	r0, [pc, #36]	; (810b198 <_Bfree+0x40>)
 810b172:	218a      	movs	r1, #138	; 0x8a
 810b174:	f001 f8ae 	bl	810c2d4 <__assert_func>
 810b178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b17c:	6006      	str	r6, [r0, #0]
 810b17e:	60c6      	str	r6, [r0, #12]
 810b180:	b13c      	cbz	r4, 810b192 <_Bfree+0x3a>
 810b182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810b184:	6862      	ldr	r2, [r4, #4]
 810b186:	68db      	ldr	r3, [r3, #12]
 810b188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b18c:	6021      	str	r1, [r4, #0]
 810b18e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810b192:	bd70      	pop	{r4, r5, r6, pc}
 810b194:	0810c7fe 	.word	0x0810c7fe
 810b198:	0810c960 	.word	0x0810c960

0810b19c <__multadd>:
 810b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b1a0:	690d      	ldr	r5, [r1, #16]
 810b1a2:	4607      	mov	r7, r0
 810b1a4:	460c      	mov	r4, r1
 810b1a6:	461e      	mov	r6, r3
 810b1a8:	f101 0c14 	add.w	ip, r1, #20
 810b1ac:	2000      	movs	r0, #0
 810b1ae:	f8dc 3000 	ldr.w	r3, [ip]
 810b1b2:	b299      	uxth	r1, r3
 810b1b4:	fb02 6101 	mla	r1, r2, r1, r6
 810b1b8:	0c1e      	lsrs	r6, r3, #16
 810b1ba:	0c0b      	lsrs	r3, r1, #16
 810b1bc:	fb02 3306 	mla	r3, r2, r6, r3
 810b1c0:	b289      	uxth	r1, r1
 810b1c2:	3001      	adds	r0, #1
 810b1c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810b1c8:	4285      	cmp	r5, r0
 810b1ca:	f84c 1b04 	str.w	r1, [ip], #4
 810b1ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810b1d2:	dcec      	bgt.n	810b1ae <__multadd+0x12>
 810b1d4:	b30e      	cbz	r6, 810b21a <__multadd+0x7e>
 810b1d6:	68a3      	ldr	r3, [r4, #8]
 810b1d8:	42ab      	cmp	r3, r5
 810b1da:	dc19      	bgt.n	810b210 <__multadd+0x74>
 810b1dc:	6861      	ldr	r1, [r4, #4]
 810b1de:	4638      	mov	r0, r7
 810b1e0:	3101      	adds	r1, #1
 810b1e2:	f7ff ff79 	bl	810b0d8 <_Balloc>
 810b1e6:	4680      	mov	r8, r0
 810b1e8:	b928      	cbnz	r0, 810b1f6 <__multadd+0x5a>
 810b1ea:	4602      	mov	r2, r0
 810b1ec:	4b0c      	ldr	r3, [pc, #48]	; (810b220 <__multadd+0x84>)
 810b1ee:	480d      	ldr	r0, [pc, #52]	; (810b224 <__multadd+0x88>)
 810b1f0:	21b5      	movs	r1, #181	; 0xb5
 810b1f2:	f001 f86f 	bl	810c2d4 <__assert_func>
 810b1f6:	6922      	ldr	r2, [r4, #16]
 810b1f8:	3202      	adds	r2, #2
 810b1fa:	f104 010c 	add.w	r1, r4, #12
 810b1fe:	0092      	lsls	r2, r2, #2
 810b200:	300c      	adds	r0, #12
 810b202:	f7ff ff5b 	bl	810b0bc <memcpy>
 810b206:	4621      	mov	r1, r4
 810b208:	4638      	mov	r0, r7
 810b20a:	f7ff ffa5 	bl	810b158 <_Bfree>
 810b20e:	4644      	mov	r4, r8
 810b210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810b214:	3501      	adds	r5, #1
 810b216:	615e      	str	r6, [r3, #20]
 810b218:	6125      	str	r5, [r4, #16]
 810b21a:	4620      	mov	r0, r4
 810b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b220:	0810c870 	.word	0x0810c870
 810b224:	0810c960 	.word	0x0810c960

0810b228 <__s2b>:
 810b228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b22c:	460c      	mov	r4, r1
 810b22e:	4615      	mov	r5, r2
 810b230:	461f      	mov	r7, r3
 810b232:	2209      	movs	r2, #9
 810b234:	3308      	adds	r3, #8
 810b236:	4606      	mov	r6, r0
 810b238:	fb93 f3f2 	sdiv	r3, r3, r2
 810b23c:	2100      	movs	r1, #0
 810b23e:	2201      	movs	r2, #1
 810b240:	429a      	cmp	r2, r3
 810b242:	db09      	blt.n	810b258 <__s2b+0x30>
 810b244:	4630      	mov	r0, r6
 810b246:	f7ff ff47 	bl	810b0d8 <_Balloc>
 810b24a:	b940      	cbnz	r0, 810b25e <__s2b+0x36>
 810b24c:	4602      	mov	r2, r0
 810b24e:	4b19      	ldr	r3, [pc, #100]	; (810b2b4 <__s2b+0x8c>)
 810b250:	4819      	ldr	r0, [pc, #100]	; (810b2b8 <__s2b+0x90>)
 810b252:	21ce      	movs	r1, #206	; 0xce
 810b254:	f001 f83e 	bl	810c2d4 <__assert_func>
 810b258:	0052      	lsls	r2, r2, #1
 810b25a:	3101      	adds	r1, #1
 810b25c:	e7f0      	b.n	810b240 <__s2b+0x18>
 810b25e:	9b08      	ldr	r3, [sp, #32]
 810b260:	6143      	str	r3, [r0, #20]
 810b262:	2d09      	cmp	r5, #9
 810b264:	f04f 0301 	mov.w	r3, #1
 810b268:	6103      	str	r3, [r0, #16]
 810b26a:	dd16      	ble.n	810b29a <__s2b+0x72>
 810b26c:	f104 0909 	add.w	r9, r4, #9
 810b270:	46c8      	mov	r8, r9
 810b272:	442c      	add	r4, r5
 810b274:	f818 3b01 	ldrb.w	r3, [r8], #1
 810b278:	4601      	mov	r1, r0
 810b27a:	3b30      	subs	r3, #48	; 0x30
 810b27c:	220a      	movs	r2, #10
 810b27e:	4630      	mov	r0, r6
 810b280:	f7ff ff8c 	bl	810b19c <__multadd>
 810b284:	45a0      	cmp	r8, r4
 810b286:	d1f5      	bne.n	810b274 <__s2b+0x4c>
 810b288:	f1a5 0408 	sub.w	r4, r5, #8
 810b28c:	444c      	add	r4, r9
 810b28e:	1b2d      	subs	r5, r5, r4
 810b290:	1963      	adds	r3, r4, r5
 810b292:	42bb      	cmp	r3, r7
 810b294:	db04      	blt.n	810b2a0 <__s2b+0x78>
 810b296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b29a:	340a      	adds	r4, #10
 810b29c:	2509      	movs	r5, #9
 810b29e:	e7f6      	b.n	810b28e <__s2b+0x66>
 810b2a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 810b2a4:	4601      	mov	r1, r0
 810b2a6:	3b30      	subs	r3, #48	; 0x30
 810b2a8:	220a      	movs	r2, #10
 810b2aa:	4630      	mov	r0, r6
 810b2ac:	f7ff ff76 	bl	810b19c <__multadd>
 810b2b0:	e7ee      	b.n	810b290 <__s2b+0x68>
 810b2b2:	bf00      	nop
 810b2b4:	0810c870 	.word	0x0810c870
 810b2b8:	0810c960 	.word	0x0810c960

0810b2bc <__hi0bits>:
 810b2bc:	0c03      	lsrs	r3, r0, #16
 810b2be:	041b      	lsls	r3, r3, #16
 810b2c0:	b9d3      	cbnz	r3, 810b2f8 <__hi0bits+0x3c>
 810b2c2:	0400      	lsls	r0, r0, #16
 810b2c4:	2310      	movs	r3, #16
 810b2c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810b2ca:	bf04      	itt	eq
 810b2cc:	0200      	lsleq	r0, r0, #8
 810b2ce:	3308      	addeq	r3, #8
 810b2d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810b2d4:	bf04      	itt	eq
 810b2d6:	0100      	lsleq	r0, r0, #4
 810b2d8:	3304      	addeq	r3, #4
 810b2da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810b2de:	bf04      	itt	eq
 810b2e0:	0080      	lsleq	r0, r0, #2
 810b2e2:	3302      	addeq	r3, #2
 810b2e4:	2800      	cmp	r0, #0
 810b2e6:	db05      	blt.n	810b2f4 <__hi0bits+0x38>
 810b2e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810b2ec:	f103 0301 	add.w	r3, r3, #1
 810b2f0:	bf08      	it	eq
 810b2f2:	2320      	moveq	r3, #32
 810b2f4:	4618      	mov	r0, r3
 810b2f6:	4770      	bx	lr
 810b2f8:	2300      	movs	r3, #0
 810b2fa:	e7e4      	b.n	810b2c6 <__hi0bits+0xa>

0810b2fc <__lo0bits>:
 810b2fc:	6803      	ldr	r3, [r0, #0]
 810b2fe:	f013 0207 	ands.w	r2, r3, #7
 810b302:	4601      	mov	r1, r0
 810b304:	d00b      	beq.n	810b31e <__lo0bits+0x22>
 810b306:	07da      	lsls	r2, r3, #31
 810b308:	d423      	bmi.n	810b352 <__lo0bits+0x56>
 810b30a:	0798      	lsls	r0, r3, #30
 810b30c:	bf49      	itett	mi
 810b30e:	085b      	lsrmi	r3, r3, #1
 810b310:	089b      	lsrpl	r3, r3, #2
 810b312:	2001      	movmi	r0, #1
 810b314:	600b      	strmi	r3, [r1, #0]
 810b316:	bf5c      	itt	pl
 810b318:	600b      	strpl	r3, [r1, #0]
 810b31a:	2002      	movpl	r0, #2
 810b31c:	4770      	bx	lr
 810b31e:	b298      	uxth	r0, r3
 810b320:	b9a8      	cbnz	r0, 810b34e <__lo0bits+0x52>
 810b322:	0c1b      	lsrs	r3, r3, #16
 810b324:	2010      	movs	r0, #16
 810b326:	b2da      	uxtb	r2, r3
 810b328:	b90a      	cbnz	r2, 810b32e <__lo0bits+0x32>
 810b32a:	3008      	adds	r0, #8
 810b32c:	0a1b      	lsrs	r3, r3, #8
 810b32e:	071a      	lsls	r2, r3, #28
 810b330:	bf04      	itt	eq
 810b332:	091b      	lsreq	r3, r3, #4
 810b334:	3004      	addeq	r0, #4
 810b336:	079a      	lsls	r2, r3, #30
 810b338:	bf04      	itt	eq
 810b33a:	089b      	lsreq	r3, r3, #2
 810b33c:	3002      	addeq	r0, #2
 810b33e:	07da      	lsls	r2, r3, #31
 810b340:	d403      	bmi.n	810b34a <__lo0bits+0x4e>
 810b342:	085b      	lsrs	r3, r3, #1
 810b344:	f100 0001 	add.w	r0, r0, #1
 810b348:	d005      	beq.n	810b356 <__lo0bits+0x5a>
 810b34a:	600b      	str	r3, [r1, #0]
 810b34c:	4770      	bx	lr
 810b34e:	4610      	mov	r0, r2
 810b350:	e7e9      	b.n	810b326 <__lo0bits+0x2a>
 810b352:	2000      	movs	r0, #0
 810b354:	4770      	bx	lr
 810b356:	2020      	movs	r0, #32
 810b358:	4770      	bx	lr
	...

0810b35c <__i2b>:
 810b35c:	b510      	push	{r4, lr}
 810b35e:	460c      	mov	r4, r1
 810b360:	2101      	movs	r1, #1
 810b362:	f7ff feb9 	bl	810b0d8 <_Balloc>
 810b366:	4602      	mov	r2, r0
 810b368:	b928      	cbnz	r0, 810b376 <__i2b+0x1a>
 810b36a:	4b05      	ldr	r3, [pc, #20]	; (810b380 <__i2b+0x24>)
 810b36c:	4805      	ldr	r0, [pc, #20]	; (810b384 <__i2b+0x28>)
 810b36e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810b372:	f000 ffaf 	bl	810c2d4 <__assert_func>
 810b376:	2301      	movs	r3, #1
 810b378:	6144      	str	r4, [r0, #20]
 810b37a:	6103      	str	r3, [r0, #16]
 810b37c:	bd10      	pop	{r4, pc}
 810b37e:	bf00      	nop
 810b380:	0810c870 	.word	0x0810c870
 810b384:	0810c960 	.word	0x0810c960

0810b388 <__multiply>:
 810b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b38c:	4691      	mov	r9, r2
 810b38e:	690a      	ldr	r2, [r1, #16]
 810b390:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b394:	429a      	cmp	r2, r3
 810b396:	bfb8      	it	lt
 810b398:	460b      	movlt	r3, r1
 810b39a:	460c      	mov	r4, r1
 810b39c:	bfbc      	itt	lt
 810b39e:	464c      	movlt	r4, r9
 810b3a0:	4699      	movlt	r9, r3
 810b3a2:	6927      	ldr	r7, [r4, #16]
 810b3a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810b3a8:	68a3      	ldr	r3, [r4, #8]
 810b3aa:	6861      	ldr	r1, [r4, #4]
 810b3ac:	eb07 060a 	add.w	r6, r7, sl
 810b3b0:	42b3      	cmp	r3, r6
 810b3b2:	b085      	sub	sp, #20
 810b3b4:	bfb8      	it	lt
 810b3b6:	3101      	addlt	r1, #1
 810b3b8:	f7ff fe8e 	bl	810b0d8 <_Balloc>
 810b3bc:	b930      	cbnz	r0, 810b3cc <__multiply+0x44>
 810b3be:	4602      	mov	r2, r0
 810b3c0:	4b44      	ldr	r3, [pc, #272]	; (810b4d4 <__multiply+0x14c>)
 810b3c2:	4845      	ldr	r0, [pc, #276]	; (810b4d8 <__multiply+0x150>)
 810b3c4:	f240 115d 	movw	r1, #349	; 0x15d
 810b3c8:	f000 ff84 	bl	810c2d4 <__assert_func>
 810b3cc:	f100 0514 	add.w	r5, r0, #20
 810b3d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810b3d4:	462b      	mov	r3, r5
 810b3d6:	2200      	movs	r2, #0
 810b3d8:	4543      	cmp	r3, r8
 810b3da:	d321      	bcc.n	810b420 <__multiply+0x98>
 810b3dc:	f104 0314 	add.w	r3, r4, #20
 810b3e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810b3e4:	f109 0314 	add.w	r3, r9, #20
 810b3e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810b3ec:	9202      	str	r2, [sp, #8]
 810b3ee:	1b3a      	subs	r2, r7, r4
 810b3f0:	3a15      	subs	r2, #21
 810b3f2:	f022 0203 	bic.w	r2, r2, #3
 810b3f6:	3204      	adds	r2, #4
 810b3f8:	f104 0115 	add.w	r1, r4, #21
 810b3fc:	428f      	cmp	r7, r1
 810b3fe:	bf38      	it	cc
 810b400:	2204      	movcc	r2, #4
 810b402:	9201      	str	r2, [sp, #4]
 810b404:	9a02      	ldr	r2, [sp, #8]
 810b406:	9303      	str	r3, [sp, #12]
 810b408:	429a      	cmp	r2, r3
 810b40a:	d80c      	bhi.n	810b426 <__multiply+0x9e>
 810b40c:	2e00      	cmp	r6, #0
 810b40e:	dd03      	ble.n	810b418 <__multiply+0x90>
 810b410:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b414:	2b00      	cmp	r3, #0
 810b416:	d05a      	beq.n	810b4ce <__multiply+0x146>
 810b418:	6106      	str	r6, [r0, #16]
 810b41a:	b005      	add	sp, #20
 810b41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b420:	f843 2b04 	str.w	r2, [r3], #4
 810b424:	e7d8      	b.n	810b3d8 <__multiply+0x50>
 810b426:	f8b3 a000 	ldrh.w	sl, [r3]
 810b42a:	f1ba 0f00 	cmp.w	sl, #0
 810b42e:	d024      	beq.n	810b47a <__multiply+0xf2>
 810b430:	f104 0e14 	add.w	lr, r4, #20
 810b434:	46a9      	mov	r9, r5
 810b436:	f04f 0c00 	mov.w	ip, #0
 810b43a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810b43e:	f8d9 1000 	ldr.w	r1, [r9]
 810b442:	fa1f fb82 	uxth.w	fp, r2
 810b446:	b289      	uxth	r1, r1
 810b448:	fb0a 110b 	mla	r1, sl, fp, r1
 810b44c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810b450:	f8d9 2000 	ldr.w	r2, [r9]
 810b454:	4461      	add	r1, ip
 810b456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810b45a:	fb0a c20b 	mla	r2, sl, fp, ip
 810b45e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810b462:	b289      	uxth	r1, r1
 810b464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810b468:	4577      	cmp	r7, lr
 810b46a:	f849 1b04 	str.w	r1, [r9], #4
 810b46e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810b472:	d8e2      	bhi.n	810b43a <__multiply+0xb2>
 810b474:	9a01      	ldr	r2, [sp, #4]
 810b476:	f845 c002 	str.w	ip, [r5, r2]
 810b47a:	9a03      	ldr	r2, [sp, #12]
 810b47c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b480:	3304      	adds	r3, #4
 810b482:	f1b9 0f00 	cmp.w	r9, #0
 810b486:	d020      	beq.n	810b4ca <__multiply+0x142>
 810b488:	6829      	ldr	r1, [r5, #0]
 810b48a:	f104 0c14 	add.w	ip, r4, #20
 810b48e:	46ae      	mov	lr, r5
 810b490:	f04f 0a00 	mov.w	sl, #0
 810b494:	f8bc b000 	ldrh.w	fp, [ip]
 810b498:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810b49c:	fb09 220b 	mla	r2, r9, fp, r2
 810b4a0:	4492      	add	sl, r2
 810b4a2:	b289      	uxth	r1, r1
 810b4a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810b4a8:	f84e 1b04 	str.w	r1, [lr], #4
 810b4ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 810b4b0:	f8be 1000 	ldrh.w	r1, [lr]
 810b4b4:	0c12      	lsrs	r2, r2, #16
 810b4b6:	fb09 1102 	mla	r1, r9, r2, r1
 810b4ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810b4be:	4567      	cmp	r7, ip
 810b4c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810b4c4:	d8e6      	bhi.n	810b494 <__multiply+0x10c>
 810b4c6:	9a01      	ldr	r2, [sp, #4]
 810b4c8:	50a9      	str	r1, [r5, r2]
 810b4ca:	3504      	adds	r5, #4
 810b4cc:	e79a      	b.n	810b404 <__multiply+0x7c>
 810b4ce:	3e01      	subs	r6, #1
 810b4d0:	e79c      	b.n	810b40c <__multiply+0x84>
 810b4d2:	bf00      	nop
 810b4d4:	0810c870 	.word	0x0810c870
 810b4d8:	0810c960 	.word	0x0810c960

0810b4dc <__pow5mult>:
 810b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b4e0:	4615      	mov	r5, r2
 810b4e2:	f012 0203 	ands.w	r2, r2, #3
 810b4e6:	4606      	mov	r6, r0
 810b4e8:	460f      	mov	r7, r1
 810b4ea:	d007      	beq.n	810b4fc <__pow5mult+0x20>
 810b4ec:	4c25      	ldr	r4, [pc, #148]	; (810b584 <__pow5mult+0xa8>)
 810b4ee:	3a01      	subs	r2, #1
 810b4f0:	2300      	movs	r3, #0
 810b4f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b4f6:	f7ff fe51 	bl	810b19c <__multadd>
 810b4fa:	4607      	mov	r7, r0
 810b4fc:	10ad      	asrs	r5, r5, #2
 810b4fe:	d03d      	beq.n	810b57c <__pow5mult+0xa0>
 810b500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b502:	b97c      	cbnz	r4, 810b524 <__pow5mult+0x48>
 810b504:	2010      	movs	r0, #16
 810b506:	f7ff fdbf 	bl	810b088 <malloc>
 810b50a:	4602      	mov	r2, r0
 810b50c:	6270      	str	r0, [r6, #36]	; 0x24
 810b50e:	b928      	cbnz	r0, 810b51c <__pow5mult+0x40>
 810b510:	4b1d      	ldr	r3, [pc, #116]	; (810b588 <__pow5mult+0xac>)
 810b512:	481e      	ldr	r0, [pc, #120]	; (810b58c <__pow5mult+0xb0>)
 810b514:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b518:	f000 fedc 	bl	810c2d4 <__assert_func>
 810b51c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b520:	6004      	str	r4, [r0, #0]
 810b522:	60c4      	str	r4, [r0, #12]
 810b524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b52c:	b94c      	cbnz	r4, 810b542 <__pow5mult+0x66>
 810b52e:	f240 2171 	movw	r1, #625	; 0x271
 810b532:	4630      	mov	r0, r6
 810b534:	f7ff ff12 	bl	810b35c <__i2b>
 810b538:	2300      	movs	r3, #0
 810b53a:	f8c8 0008 	str.w	r0, [r8, #8]
 810b53e:	4604      	mov	r4, r0
 810b540:	6003      	str	r3, [r0, #0]
 810b542:	f04f 0900 	mov.w	r9, #0
 810b546:	07eb      	lsls	r3, r5, #31
 810b548:	d50a      	bpl.n	810b560 <__pow5mult+0x84>
 810b54a:	4639      	mov	r1, r7
 810b54c:	4622      	mov	r2, r4
 810b54e:	4630      	mov	r0, r6
 810b550:	f7ff ff1a 	bl	810b388 <__multiply>
 810b554:	4639      	mov	r1, r7
 810b556:	4680      	mov	r8, r0
 810b558:	4630      	mov	r0, r6
 810b55a:	f7ff fdfd 	bl	810b158 <_Bfree>
 810b55e:	4647      	mov	r7, r8
 810b560:	106d      	asrs	r5, r5, #1
 810b562:	d00b      	beq.n	810b57c <__pow5mult+0xa0>
 810b564:	6820      	ldr	r0, [r4, #0]
 810b566:	b938      	cbnz	r0, 810b578 <__pow5mult+0x9c>
 810b568:	4622      	mov	r2, r4
 810b56a:	4621      	mov	r1, r4
 810b56c:	4630      	mov	r0, r6
 810b56e:	f7ff ff0b 	bl	810b388 <__multiply>
 810b572:	6020      	str	r0, [r4, #0]
 810b574:	f8c0 9000 	str.w	r9, [r0]
 810b578:	4604      	mov	r4, r0
 810b57a:	e7e4      	b.n	810b546 <__pow5mult+0x6a>
 810b57c:	4638      	mov	r0, r7
 810b57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b582:	bf00      	nop
 810b584:	0810cab0 	.word	0x0810cab0
 810b588:	0810c7fe 	.word	0x0810c7fe
 810b58c:	0810c960 	.word	0x0810c960

0810b590 <__lshift>:
 810b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b594:	460c      	mov	r4, r1
 810b596:	6849      	ldr	r1, [r1, #4]
 810b598:	6923      	ldr	r3, [r4, #16]
 810b59a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b59e:	68a3      	ldr	r3, [r4, #8]
 810b5a0:	4607      	mov	r7, r0
 810b5a2:	4691      	mov	r9, r2
 810b5a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b5a8:	f108 0601 	add.w	r6, r8, #1
 810b5ac:	42b3      	cmp	r3, r6
 810b5ae:	db0b      	blt.n	810b5c8 <__lshift+0x38>
 810b5b0:	4638      	mov	r0, r7
 810b5b2:	f7ff fd91 	bl	810b0d8 <_Balloc>
 810b5b6:	4605      	mov	r5, r0
 810b5b8:	b948      	cbnz	r0, 810b5ce <__lshift+0x3e>
 810b5ba:	4602      	mov	r2, r0
 810b5bc:	4b2a      	ldr	r3, [pc, #168]	; (810b668 <__lshift+0xd8>)
 810b5be:	482b      	ldr	r0, [pc, #172]	; (810b66c <__lshift+0xdc>)
 810b5c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b5c4:	f000 fe86 	bl	810c2d4 <__assert_func>
 810b5c8:	3101      	adds	r1, #1
 810b5ca:	005b      	lsls	r3, r3, #1
 810b5cc:	e7ee      	b.n	810b5ac <__lshift+0x1c>
 810b5ce:	2300      	movs	r3, #0
 810b5d0:	f100 0114 	add.w	r1, r0, #20
 810b5d4:	f100 0210 	add.w	r2, r0, #16
 810b5d8:	4618      	mov	r0, r3
 810b5da:	4553      	cmp	r3, sl
 810b5dc:	db37      	blt.n	810b64e <__lshift+0xbe>
 810b5de:	6920      	ldr	r0, [r4, #16]
 810b5e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b5e4:	f104 0314 	add.w	r3, r4, #20
 810b5e8:	f019 091f 	ands.w	r9, r9, #31
 810b5ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b5f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810b5f4:	d02f      	beq.n	810b656 <__lshift+0xc6>
 810b5f6:	f1c9 0e20 	rsb	lr, r9, #32
 810b5fa:	468a      	mov	sl, r1
 810b5fc:	f04f 0c00 	mov.w	ip, #0
 810b600:	681a      	ldr	r2, [r3, #0]
 810b602:	fa02 f209 	lsl.w	r2, r2, r9
 810b606:	ea42 020c 	orr.w	r2, r2, ip
 810b60a:	f84a 2b04 	str.w	r2, [sl], #4
 810b60e:	f853 2b04 	ldr.w	r2, [r3], #4
 810b612:	4298      	cmp	r0, r3
 810b614:	fa22 fc0e 	lsr.w	ip, r2, lr
 810b618:	d8f2      	bhi.n	810b600 <__lshift+0x70>
 810b61a:	1b03      	subs	r3, r0, r4
 810b61c:	3b15      	subs	r3, #21
 810b61e:	f023 0303 	bic.w	r3, r3, #3
 810b622:	3304      	adds	r3, #4
 810b624:	f104 0215 	add.w	r2, r4, #21
 810b628:	4290      	cmp	r0, r2
 810b62a:	bf38      	it	cc
 810b62c:	2304      	movcc	r3, #4
 810b62e:	f841 c003 	str.w	ip, [r1, r3]
 810b632:	f1bc 0f00 	cmp.w	ip, #0
 810b636:	d001      	beq.n	810b63c <__lshift+0xac>
 810b638:	f108 0602 	add.w	r6, r8, #2
 810b63c:	3e01      	subs	r6, #1
 810b63e:	4638      	mov	r0, r7
 810b640:	612e      	str	r6, [r5, #16]
 810b642:	4621      	mov	r1, r4
 810b644:	f7ff fd88 	bl	810b158 <_Bfree>
 810b648:	4628      	mov	r0, r5
 810b64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b64e:	f842 0f04 	str.w	r0, [r2, #4]!
 810b652:	3301      	adds	r3, #1
 810b654:	e7c1      	b.n	810b5da <__lshift+0x4a>
 810b656:	3904      	subs	r1, #4
 810b658:	f853 2b04 	ldr.w	r2, [r3], #4
 810b65c:	f841 2f04 	str.w	r2, [r1, #4]!
 810b660:	4298      	cmp	r0, r3
 810b662:	d8f9      	bhi.n	810b658 <__lshift+0xc8>
 810b664:	e7ea      	b.n	810b63c <__lshift+0xac>
 810b666:	bf00      	nop
 810b668:	0810c870 	.word	0x0810c870
 810b66c:	0810c960 	.word	0x0810c960

0810b670 <__mcmp>:
 810b670:	b530      	push	{r4, r5, lr}
 810b672:	6902      	ldr	r2, [r0, #16]
 810b674:	690c      	ldr	r4, [r1, #16]
 810b676:	1b12      	subs	r2, r2, r4
 810b678:	d10e      	bne.n	810b698 <__mcmp+0x28>
 810b67a:	f100 0314 	add.w	r3, r0, #20
 810b67e:	3114      	adds	r1, #20
 810b680:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b684:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b688:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b68c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b690:	42a5      	cmp	r5, r4
 810b692:	d003      	beq.n	810b69c <__mcmp+0x2c>
 810b694:	d305      	bcc.n	810b6a2 <__mcmp+0x32>
 810b696:	2201      	movs	r2, #1
 810b698:	4610      	mov	r0, r2
 810b69a:	bd30      	pop	{r4, r5, pc}
 810b69c:	4283      	cmp	r3, r0
 810b69e:	d3f3      	bcc.n	810b688 <__mcmp+0x18>
 810b6a0:	e7fa      	b.n	810b698 <__mcmp+0x28>
 810b6a2:	f04f 32ff 	mov.w	r2, #4294967295
 810b6a6:	e7f7      	b.n	810b698 <__mcmp+0x28>

0810b6a8 <__mdiff>:
 810b6a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b6ac:	460c      	mov	r4, r1
 810b6ae:	4606      	mov	r6, r0
 810b6b0:	4611      	mov	r1, r2
 810b6b2:	4620      	mov	r0, r4
 810b6b4:	4690      	mov	r8, r2
 810b6b6:	f7ff ffdb 	bl	810b670 <__mcmp>
 810b6ba:	1e05      	subs	r5, r0, #0
 810b6bc:	d110      	bne.n	810b6e0 <__mdiff+0x38>
 810b6be:	4629      	mov	r1, r5
 810b6c0:	4630      	mov	r0, r6
 810b6c2:	f7ff fd09 	bl	810b0d8 <_Balloc>
 810b6c6:	b930      	cbnz	r0, 810b6d6 <__mdiff+0x2e>
 810b6c8:	4b3a      	ldr	r3, [pc, #232]	; (810b7b4 <__mdiff+0x10c>)
 810b6ca:	4602      	mov	r2, r0
 810b6cc:	f240 2132 	movw	r1, #562	; 0x232
 810b6d0:	4839      	ldr	r0, [pc, #228]	; (810b7b8 <__mdiff+0x110>)
 810b6d2:	f000 fdff 	bl	810c2d4 <__assert_func>
 810b6d6:	2301      	movs	r3, #1
 810b6d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b6dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b6e0:	bfa4      	itt	ge
 810b6e2:	4643      	movge	r3, r8
 810b6e4:	46a0      	movge	r8, r4
 810b6e6:	4630      	mov	r0, r6
 810b6e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810b6ec:	bfa6      	itte	ge
 810b6ee:	461c      	movge	r4, r3
 810b6f0:	2500      	movge	r5, #0
 810b6f2:	2501      	movlt	r5, #1
 810b6f4:	f7ff fcf0 	bl	810b0d8 <_Balloc>
 810b6f8:	b920      	cbnz	r0, 810b704 <__mdiff+0x5c>
 810b6fa:	4b2e      	ldr	r3, [pc, #184]	; (810b7b4 <__mdiff+0x10c>)
 810b6fc:	4602      	mov	r2, r0
 810b6fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b702:	e7e5      	b.n	810b6d0 <__mdiff+0x28>
 810b704:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810b708:	6926      	ldr	r6, [r4, #16]
 810b70a:	60c5      	str	r5, [r0, #12]
 810b70c:	f104 0914 	add.w	r9, r4, #20
 810b710:	f108 0514 	add.w	r5, r8, #20
 810b714:	f100 0e14 	add.w	lr, r0, #20
 810b718:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810b71c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810b720:	f108 0210 	add.w	r2, r8, #16
 810b724:	46f2      	mov	sl, lr
 810b726:	2100      	movs	r1, #0
 810b728:	f859 3b04 	ldr.w	r3, [r9], #4
 810b72c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b730:	fa1f f883 	uxth.w	r8, r3
 810b734:	fa11 f18b 	uxtah	r1, r1, fp
 810b738:	0c1b      	lsrs	r3, r3, #16
 810b73a:	eba1 0808 	sub.w	r8, r1, r8
 810b73e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b742:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b746:	fa1f f888 	uxth.w	r8, r8
 810b74a:	1419      	asrs	r1, r3, #16
 810b74c:	454e      	cmp	r6, r9
 810b74e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b752:	f84a 3b04 	str.w	r3, [sl], #4
 810b756:	d8e7      	bhi.n	810b728 <__mdiff+0x80>
 810b758:	1b33      	subs	r3, r6, r4
 810b75a:	3b15      	subs	r3, #21
 810b75c:	f023 0303 	bic.w	r3, r3, #3
 810b760:	3304      	adds	r3, #4
 810b762:	3415      	adds	r4, #21
 810b764:	42a6      	cmp	r6, r4
 810b766:	bf38      	it	cc
 810b768:	2304      	movcc	r3, #4
 810b76a:	441d      	add	r5, r3
 810b76c:	4473      	add	r3, lr
 810b76e:	469e      	mov	lr, r3
 810b770:	462e      	mov	r6, r5
 810b772:	4566      	cmp	r6, ip
 810b774:	d30e      	bcc.n	810b794 <__mdiff+0xec>
 810b776:	f10c 0203 	add.w	r2, ip, #3
 810b77a:	1b52      	subs	r2, r2, r5
 810b77c:	f022 0203 	bic.w	r2, r2, #3
 810b780:	3d03      	subs	r5, #3
 810b782:	45ac      	cmp	ip, r5
 810b784:	bf38      	it	cc
 810b786:	2200      	movcc	r2, #0
 810b788:	441a      	add	r2, r3
 810b78a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b78e:	b17b      	cbz	r3, 810b7b0 <__mdiff+0x108>
 810b790:	6107      	str	r7, [r0, #16]
 810b792:	e7a3      	b.n	810b6dc <__mdiff+0x34>
 810b794:	f856 8b04 	ldr.w	r8, [r6], #4
 810b798:	fa11 f288 	uxtah	r2, r1, r8
 810b79c:	1414      	asrs	r4, r2, #16
 810b79e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810b7a2:	b292      	uxth	r2, r2
 810b7a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810b7a8:	f84e 2b04 	str.w	r2, [lr], #4
 810b7ac:	1421      	asrs	r1, r4, #16
 810b7ae:	e7e0      	b.n	810b772 <__mdiff+0xca>
 810b7b0:	3f01      	subs	r7, #1
 810b7b2:	e7ea      	b.n	810b78a <__mdiff+0xe2>
 810b7b4:	0810c870 	.word	0x0810c870
 810b7b8:	0810c960 	.word	0x0810c960

0810b7bc <__ulp>:
 810b7bc:	b082      	sub	sp, #8
 810b7be:	ed8d 0b00 	vstr	d0, [sp]
 810b7c2:	9b01      	ldr	r3, [sp, #4]
 810b7c4:	4912      	ldr	r1, [pc, #72]	; (810b810 <__ulp+0x54>)
 810b7c6:	4019      	ands	r1, r3
 810b7c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b7cc:	2900      	cmp	r1, #0
 810b7ce:	dd05      	ble.n	810b7dc <__ulp+0x20>
 810b7d0:	2200      	movs	r2, #0
 810b7d2:	460b      	mov	r3, r1
 810b7d4:	ec43 2b10 	vmov	d0, r2, r3
 810b7d8:	b002      	add	sp, #8
 810b7da:	4770      	bx	lr
 810b7dc:	4249      	negs	r1, r1
 810b7de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b7e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b7e6:	f04f 0200 	mov.w	r2, #0
 810b7ea:	f04f 0300 	mov.w	r3, #0
 810b7ee:	da04      	bge.n	810b7fa <__ulp+0x3e>
 810b7f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b7f4:	fa41 f300 	asr.w	r3, r1, r0
 810b7f8:	e7ec      	b.n	810b7d4 <__ulp+0x18>
 810b7fa:	f1a0 0114 	sub.w	r1, r0, #20
 810b7fe:	291e      	cmp	r1, #30
 810b800:	bfda      	itte	le
 810b802:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b806:	fa20 f101 	lsrle.w	r1, r0, r1
 810b80a:	2101      	movgt	r1, #1
 810b80c:	460a      	mov	r2, r1
 810b80e:	e7e1      	b.n	810b7d4 <__ulp+0x18>
 810b810:	7ff00000 	.word	0x7ff00000

0810b814 <__b2d>:
 810b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b816:	6905      	ldr	r5, [r0, #16]
 810b818:	f100 0714 	add.w	r7, r0, #20
 810b81c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b820:	1f2e      	subs	r6, r5, #4
 810b822:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b826:	4620      	mov	r0, r4
 810b828:	f7ff fd48 	bl	810b2bc <__hi0bits>
 810b82c:	f1c0 0320 	rsb	r3, r0, #32
 810b830:	280a      	cmp	r0, #10
 810b832:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b8b0 <__b2d+0x9c>
 810b836:	600b      	str	r3, [r1, #0]
 810b838:	dc14      	bgt.n	810b864 <__b2d+0x50>
 810b83a:	f1c0 0e0b 	rsb	lr, r0, #11
 810b83e:	fa24 f10e 	lsr.w	r1, r4, lr
 810b842:	42b7      	cmp	r7, r6
 810b844:	ea41 030c 	orr.w	r3, r1, ip
 810b848:	bf34      	ite	cc
 810b84a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b84e:	2100      	movcs	r1, #0
 810b850:	3015      	adds	r0, #21
 810b852:	fa04 f000 	lsl.w	r0, r4, r0
 810b856:	fa21 f10e 	lsr.w	r1, r1, lr
 810b85a:	ea40 0201 	orr.w	r2, r0, r1
 810b85e:	ec43 2b10 	vmov	d0, r2, r3
 810b862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b864:	42b7      	cmp	r7, r6
 810b866:	bf3a      	itte	cc
 810b868:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b86c:	f1a5 0608 	subcc.w	r6, r5, #8
 810b870:	2100      	movcs	r1, #0
 810b872:	380b      	subs	r0, #11
 810b874:	d017      	beq.n	810b8a6 <__b2d+0x92>
 810b876:	f1c0 0c20 	rsb	ip, r0, #32
 810b87a:	fa04 f500 	lsl.w	r5, r4, r0
 810b87e:	42be      	cmp	r6, r7
 810b880:	fa21 f40c 	lsr.w	r4, r1, ip
 810b884:	ea45 0504 	orr.w	r5, r5, r4
 810b888:	bf8c      	ite	hi
 810b88a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b88e:	2400      	movls	r4, #0
 810b890:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b894:	fa01 f000 	lsl.w	r0, r1, r0
 810b898:	fa24 f40c 	lsr.w	r4, r4, ip
 810b89c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b8a0:	ea40 0204 	orr.w	r2, r0, r4
 810b8a4:	e7db      	b.n	810b85e <__b2d+0x4a>
 810b8a6:	ea44 030c 	orr.w	r3, r4, ip
 810b8aa:	460a      	mov	r2, r1
 810b8ac:	e7d7      	b.n	810b85e <__b2d+0x4a>
 810b8ae:	bf00      	nop
 810b8b0:	3ff00000 	.word	0x3ff00000

0810b8b4 <__d2b>:
 810b8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b8b8:	4689      	mov	r9, r1
 810b8ba:	2101      	movs	r1, #1
 810b8bc:	ec57 6b10 	vmov	r6, r7, d0
 810b8c0:	4690      	mov	r8, r2
 810b8c2:	f7ff fc09 	bl	810b0d8 <_Balloc>
 810b8c6:	4604      	mov	r4, r0
 810b8c8:	b930      	cbnz	r0, 810b8d8 <__d2b+0x24>
 810b8ca:	4602      	mov	r2, r0
 810b8cc:	4b25      	ldr	r3, [pc, #148]	; (810b964 <__d2b+0xb0>)
 810b8ce:	4826      	ldr	r0, [pc, #152]	; (810b968 <__d2b+0xb4>)
 810b8d0:	f240 310a 	movw	r1, #778	; 0x30a
 810b8d4:	f000 fcfe 	bl	810c2d4 <__assert_func>
 810b8d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b8dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b8e0:	bb35      	cbnz	r5, 810b930 <__d2b+0x7c>
 810b8e2:	2e00      	cmp	r6, #0
 810b8e4:	9301      	str	r3, [sp, #4]
 810b8e6:	d028      	beq.n	810b93a <__d2b+0x86>
 810b8e8:	4668      	mov	r0, sp
 810b8ea:	9600      	str	r6, [sp, #0]
 810b8ec:	f7ff fd06 	bl	810b2fc <__lo0bits>
 810b8f0:	9900      	ldr	r1, [sp, #0]
 810b8f2:	b300      	cbz	r0, 810b936 <__d2b+0x82>
 810b8f4:	9a01      	ldr	r2, [sp, #4]
 810b8f6:	f1c0 0320 	rsb	r3, r0, #32
 810b8fa:	fa02 f303 	lsl.w	r3, r2, r3
 810b8fe:	430b      	orrs	r3, r1
 810b900:	40c2      	lsrs	r2, r0
 810b902:	6163      	str	r3, [r4, #20]
 810b904:	9201      	str	r2, [sp, #4]
 810b906:	9b01      	ldr	r3, [sp, #4]
 810b908:	61a3      	str	r3, [r4, #24]
 810b90a:	2b00      	cmp	r3, #0
 810b90c:	bf14      	ite	ne
 810b90e:	2202      	movne	r2, #2
 810b910:	2201      	moveq	r2, #1
 810b912:	6122      	str	r2, [r4, #16]
 810b914:	b1d5      	cbz	r5, 810b94c <__d2b+0x98>
 810b916:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b91a:	4405      	add	r5, r0
 810b91c:	f8c9 5000 	str.w	r5, [r9]
 810b920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b924:	f8c8 0000 	str.w	r0, [r8]
 810b928:	4620      	mov	r0, r4
 810b92a:	b003      	add	sp, #12
 810b92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b934:	e7d5      	b.n	810b8e2 <__d2b+0x2e>
 810b936:	6161      	str	r1, [r4, #20]
 810b938:	e7e5      	b.n	810b906 <__d2b+0x52>
 810b93a:	a801      	add	r0, sp, #4
 810b93c:	f7ff fcde 	bl	810b2fc <__lo0bits>
 810b940:	9b01      	ldr	r3, [sp, #4]
 810b942:	6163      	str	r3, [r4, #20]
 810b944:	2201      	movs	r2, #1
 810b946:	6122      	str	r2, [r4, #16]
 810b948:	3020      	adds	r0, #32
 810b94a:	e7e3      	b.n	810b914 <__d2b+0x60>
 810b94c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b950:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b954:	f8c9 0000 	str.w	r0, [r9]
 810b958:	6918      	ldr	r0, [r3, #16]
 810b95a:	f7ff fcaf 	bl	810b2bc <__hi0bits>
 810b95e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b962:	e7df      	b.n	810b924 <__d2b+0x70>
 810b964:	0810c870 	.word	0x0810c870
 810b968:	0810c960 	.word	0x0810c960

0810b96c <__ratio>:
 810b96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b970:	4688      	mov	r8, r1
 810b972:	4669      	mov	r1, sp
 810b974:	4681      	mov	r9, r0
 810b976:	f7ff ff4d 	bl	810b814 <__b2d>
 810b97a:	a901      	add	r1, sp, #4
 810b97c:	4640      	mov	r0, r8
 810b97e:	ec55 4b10 	vmov	r4, r5, d0
 810b982:	f7ff ff47 	bl	810b814 <__b2d>
 810b986:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b98a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b98e:	eba3 0c02 	sub.w	ip, r3, r2
 810b992:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b996:	1a9b      	subs	r3, r3, r2
 810b998:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b99c:	ec51 0b10 	vmov	r0, r1, d0
 810b9a0:	2b00      	cmp	r3, #0
 810b9a2:	bfd6      	itet	le
 810b9a4:	460a      	movle	r2, r1
 810b9a6:	462a      	movgt	r2, r5
 810b9a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b9ac:	468b      	mov	fp, r1
 810b9ae:	462f      	mov	r7, r5
 810b9b0:	bfd4      	ite	le
 810b9b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b9b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b9ba:	4620      	mov	r0, r4
 810b9bc:	ee10 2a10 	vmov	r2, s0
 810b9c0:	465b      	mov	r3, fp
 810b9c2:	4639      	mov	r1, r7
 810b9c4:	f7f4 ffca 	bl	810095c <__aeabi_ddiv>
 810b9c8:	ec41 0b10 	vmov	d0, r0, r1
 810b9cc:	b003      	add	sp, #12
 810b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b9d2 <__copybits>:
 810b9d2:	3901      	subs	r1, #1
 810b9d4:	b570      	push	{r4, r5, r6, lr}
 810b9d6:	1149      	asrs	r1, r1, #5
 810b9d8:	6914      	ldr	r4, [r2, #16]
 810b9da:	3101      	adds	r1, #1
 810b9dc:	f102 0314 	add.w	r3, r2, #20
 810b9e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b9e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b9e8:	1f05      	subs	r5, r0, #4
 810b9ea:	42a3      	cmp	r3, r4
 810b9ec:	d30c      	bcc.n	810ba08 <__copybits+0x36>
 810b9ee:	1aa3      	subs	r3, r4, r2
 810b9f0:	3b11      	subs	r3, #17
 810b9f2:	f023 0303 	bic.w	r3, r3, #3
 810b9f6:	3211      	adds	r2, #17
 810b9f8:	42a2      	cmp	r2, r4
 810b9fa:	bf88      	it	hi
 810b9fc:	2300      	movhi	r3, #0
 810b9fe:	4418      	add	r0, r3
 810ba00:	2300      	movs	r3, #0
 810ba02:	4288      	cmp	r0, r1
 810ba04:	d305      	bcc.n	810ba12 <__copybits+0x40>
 810ba06:	bd70      	pop	{r4, r5, r6, pc}
 810ba08:	f853 6b04 	ldr.w	r6, [r3], #4
 810ba0c:	f845 6f04 	str.w	r6, [r5, #4]!
 810ba10:	e7eb      	b.n	810b9ea <__copybits+0x18>
 810ba12:	f840 3b04 	str.w	r3, [r0], #4
 810ba16:	e7f4      	b.n	810ba02 <__copybits+0x30>

0810ba18 <__any_on>:
 810ba18:	f100 0214 	add.w	r2, r0, #20
 810ba1c:	6900      	ldr	r0, [r0, #16]
 810ba1e:	114b      	asrs	r3, r1, #5
 810ba20:	4298      	cmp	r0, r3
 810ba22:	b510      	push	{r4, lr}
 810ba24:	db11      	blt.n	810ba4a <__any_on+0x32>
 810ba26:	dd0a      	ble.n	810ba3e <__any_on+0x26>
 810ba28:	f011 011f 	ands.w	r1, r1, #31
 810ba2c:	d007      	beq.n	810ba3e <__any_on+0x26>
 810ba2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ba32:	fa24 f001 	lsr.w	r0, r4, r1
 810ba36:	fa00 f101 	lsl.w	r1, r0, r1
 810ba3a:	428c      	cmp	r4, r1
 810ba3c:	d10b      	bne.n	810ba56 <__any_on+0x3e>
 810ba3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ba42:	4293      	cmp	r3, r2
 810ba44:	d803      	bhi.n	810ba4e <__any_on+0x36>
 810ba46:	2000      	movs	r0, #0
 810ba48:	bd10      	pop	{r4, pc}
 810ba4a:	4603      	mov	r3, r0
 810ba4c:	e7f7      	b.n	810ba3e <__any_on+0x26>
 810ba4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810ba52:	2900      	cmp	r1, #0
 810ba54:	d0f5      	beq.n	810ba42 <__any_on+0x2a>
 810ba56:	2001      	movs	r0, #1
 810ba58:	e7f6      	b.n	810ba48 <__any_on+0x30>

0810ba5a <_calloc_r>:
 810ba5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ba5c:	fba1 2402 	umull	r2, r4, r1, r2
 810ba60:	b94c      	cbnz	r4, 810ba76 <_calloc_r+0x1c>
 810ba62:	4611      	mov	r1, r2
 810ba64:	9201      	str	r2, [sp, #4]
 810ba66:	f000 f87b 	bl	810bb60 <_malloc_r>
 810ba6a:	9a01      	ldr	r2, [sp, #4]
 810ba6c:	4605      	mov	r5, r0
 810ba6e:	b930      	cbnz	r0, 810ba7e <_calloc_r+0x24>
 810ba70:	4628      	mov	r0, r5
 810ba72:	b003      	add	sp, #12
 810ba74:	bd30      	pop	{r4, r5, pc}
 810ba76:	220c      	movs	r2, #12
 810ba78:	6002      	str	r2, [r0, #0]
 810ba7a:	2500      	movs	r5, #0
 810ba7c:	e7f8      	b.n	810ba70 <_calloc_r+0x16>
 810ba7e:	4621      	mov	r1, r4
 810ba80:	f7fc f854 	bl	8107b2c <memset>
 810ba84:	e7f4      	b.n	810ba70 <_calloc_r+0x16>
	...

0810ba88 <_free_r>:
 810ba88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ba8a:	2900      	cmp	r1, #0
 810ba8c:	d044      	beq.n	810bb18 <_free_r+0x90>
 810ba8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ba92:	9001      	str	r0, [sp, #4]
 810ba94:	2b00      	cmp	r3, #0
 810ba96:	f1a1 0404 	sub.w	r4, r1, #4
 810ba9a:	bfb8      	it	lt
 810ba9c:	18e4      	addlt	r4, r4, r3
 810ba9e:	f000 fca7 	bl	810c3f0 <__malloc_lock>
 810baa2:	4a1e      	ldr	r2, [pc, #120]	; (810bb1c <_free_r+0x94>)
 810baa4:	9801      	ldr	r0, [sp, #4]
 810baa6:	6813      	ldr	r3, [r2, #0]
 810baa8:	b933      	cbnz	r3, 810bab8 <_free_r+0x30>
 810baaa:	6063      	str	r3, [r4, #4]
 810baac:	6014      	str	r4, [r2, #0]
 810baae:	b003      	add	sp, #12
 810bab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810bab4:	f000 bca2 	b.w	810c3fc <__malloc_unlock>
 810bab8:	42a3      	cmp	r3, r4
 810baba:	d908      	bls.n	810bace <_free_r+0x46>
 810babc:	6825      	ldr	r5, [r4, #0]
 810babe:	1961      	adds	r1, r4, r5
 810bac0:	428b      	cmp	r3, r1
 810bac2:	bf01      	itttt	eq
 810bac4:	6819      	ldreq	r1, [r3, #0]
 810bac6:	685b      	ldreq	r3, [r3, #4]
 810bac8:	1949      	addeq	r1, r1, r5
 810baca:	6021      	streq	r1, [r4, #0]
 810bacc:	e7ed      	b.n	810baaa <_free_r+0x22>
 810bace:	461a      	mov	r2, r3
 810bad0:	685b      	ldr	r3, [r3, #4]
 810bad2:	b10b      	cbz	r3, 810bad8 <_free_r+0x50>
 810bad4:	42a3      	cmp	r3, r4
 810bad6:	d9fa      	bls.n	810bace <_free_r+0x46>
 810bad8:	6811      	ldr	r1, [r2, #0]
 810bada:	1855      	adds	r5, r2, r1
 810badc:	42a5      	cmp	r5, r4
 810bade:	d10b      	bne.n	810baf8 <_free_r+0x70>
 810bae0:	6824      	ldr	r4, [r4, #0]
 810bae2:	4421      	add	r1, r4
 810bae4:	1854      	adds	r4, r2, r1
 810bae6:	42a3      	cmp	r3, r4
 810bae8:	6011      	str	r1, [r2, #0]
 810baea:	d1e0      	bne.n	810baae <_free_r+0x26>
 810baec:	681c      	ldr	r4, [r3, #0]
 810baee:	685b      	ldr	r3, [r3, #4]
 810baf0:	6053      	str	r3, [r2, #4]
 810baf2:	4421      	add	r1, r4
 810baf4:	6011      	str	r1, [r2, #0]
 810baf6:	e7da      	b.n	810baae <_free_r+0x26>
 810baf8:	d902      	bls.n	810bb00 <_free_r+0x78>
 810bafa:	230c      	movs	r3, #12
 810bafc:	6003      	str	r3, [r0, #0]
 810bafe:	e7d6      	b.n	810baae <_free_r+0x26>
 810bb00:	6825      	ldr	r5, [r4, #0]
 810bb02:	1961      	adds	r1, r4, r5
 810bb04:	428b      	cmp	r3, r1
 810bb06:	bf04      	itt	eq
 810bb08:	6819      	ldreq	r1, [r3, #0]
 810bb0a:	685b      	ldreq	r3, [r3, #4]
 810bb0c:	6063      	str	r3, [r4, #4]
 810bb0e:	bf04      	itt	eq
 810bb10:	1949      	addeq	r1, r1, r5
 810bb12:	6021      	streq	r1, [r4, #0]
 810bb14:	6054      	str	r4, [r2, #4]
 810bb16:	e7ca      	b.n	810baae <_free_r+0x26>
 810bb18:	b003      	add	sp, #12
 810bb1a:	bd30      	pop	{r4, r5, pc}
 810bb1c:	10000440 	.word	0x10000440

0810bb20 <sbrk_aligned>:
 810bb20:	b570      	push	{r4, r5, r6, lr}
 810bb22:	4e0e      	ldr	r6, [pc, #56]	; (810bb5c <sbrk_aligned+0x3c>)
 810bb24:	460c      	mov	r4, r1
 810bb26:	6831      	ldr	r1, [r6, #0]
 810bb28:	4605      	mov	r5, r0
 810bb2a:	b911      	cbnz	r1, 810bb32 <sbrk_aligned+0x12>
 810bb2c:	f000 fb4c 	bl	810c1c8 <_sbrk_r>
 810bb30:	6030      	str	r0, [r6, #0]
 810bb32:	4621      	mov	r1, r4
 810bb34:	4628      	mov	r0, r5
 810bb36:	f000 fb47 	bl	810c1c8 <_sbrk_r>
 810bb3a:	1c43      	adds	r3, r0, #1
 810bb3c:	d00a      	beq.n	810bb54 <sbrk_aligned+0x34>
 810bb3e:	1cc4      	adds	r4, r0, #3
 810bb40:	f024 0403 	bic.w	r4, r4, #3
 810bb44:	42a0      	cmp	r0, r4
 810bb46:	d007      	beq.n	810bb58 <sbrk_aligned+0x38>
 810bb48:	1a21      	subs	r1, r4, r0
 810bb4a:	4628      	mov	r0, r5
 810bb4c:	f000 fb3c 	bl	810c1c8 <_sbrk_r>
 810bb50:	3001      	adds	r0, #1
 810bb52:	d101      	bne.n	810bb58 <sbrk_aligned+0x38>
 810bb54:	f04f 34ff 	mov.w	r4, #4294967295
 810bb58:	4620      	mov	r0, r4
 810bb5a:	bd70      	pop	{r4, r5, r6, pc}
 810bb5c:	10000444 	.word	0x10000444

0810bb60 <_malloc_r>:
 810bb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bb64:	1ccd      	adds	r5, r1, #3
 810bb66:	f025 0503 	bic.w	r5, r5, #3
 810bb6a:	3508      	adds	r5, #8
 810bb6c:	2d0c      	cmp	r5, #12
 810bb6e:	bf38      	it	cc
 810bb70:	250c      	movcc	r5, #12
 810bb72:	2d00      	cmp	r5, #0
 810bb74:	4607      	mov	r7, r0
 810bb76:	db01      	blt.n	810bb7c <_malloc_r+0x1c>
 810bb78:	42a9      	cmp	r1, r5
 810bb7a:	d905      	bls.n	810bb88 <_malloc_r+0x28>
 810bb7c:	230c      	movs	r3, #12
 810bb7e:	603b      	str	r3, [r7, #0]
 810bb80:	2600      	movs	r6, #0
 810bb82:	4630      	mov	r0, r6
 810bb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bb88:	4e2e      	ldr	r6, [pc, #184]	; (810bc44 <_malloc_r+0xe4>)
 810bb8a:	f000 fc31 	bl	810c3f0 <__malloc_lock>
 810bb8e:	6833      	ldr	r3, [r6, #0]
 810bb90:	461c      	mov	r4, r3
 810bb92:	bb34      	cbnz	r4, 810bbe2 <_malloc_r+0x82>
 810bb94:	4629      	mov	r1, r5
 810bb96:	4638      	mov	r0, r7
 810bb98:	f7ff ffc2 	bl	810bb20 <sbrk_aligned>
 810bb9c:	1c43      	adds	r3, r0, #1
 810bb9e:	4604      	mov	r4, r0
 810bba0:	d14d      	bne.n	810bc3e <_malloc_r+0xde>
 810bba2:	6834      	ldr	r4, [r6, #0]
 810bba4:	4626      	mov	r6, r4
 810bba6:	2e00      	cmp	r6, #0
 810bba8:	d140      	bne.n	810bc2c <_malloc_r+0xcc>
 810bbaa:	6823      	ldr	r3, [r4, #0]
 810bbac:	4631      	mov	r1, r6
 810bbae:	4638      	mov	r0, r7
 810bbb0:	eb04 0803 	add.w	r8, r4, r3
 810bbb4:	f000 fb08 	bl	810c1c8 <_sbrk_r>
 810bbb8:	4580      	cmp	r8, r0
 810bbba:	d13a      	bne.n	810bc32 <_malloc_r+0xd2>
 810bbbc:	6821      	ldr	r1, [r4, #0]
 810bbbe:	3503      	adds	r5, #3
 810bbc0:	1a6d      	subs	r5, r5, r1
 810bbc2:	f025 0503 	bic.w	r5, r5, #3
 810bbc6:	3508      	adds	r5, #8
 810bbc8:	2d0c      	cmp	r5, #12
 810bbca:	bf38      	it	cc
 810bbcc:	250c      	movcc	r5, #12
 810bbce:	4629      	mov	r1, r5
 810bbd0:	4638      	mov	r0, r7
 810bbd2:	f7ff ffa5 	bl	810bb20 <sbrk_aligned>
 810bbd6:	3001      	adds	r0, #1
 810bbd8:	d02b      	beq.n	810bc32 <_malloc_r+0xd2>
 810bbda:	6823      	ldr	r3, [r4, #0]
 810bbdc:	442b      	add	r3, r5
 810bbde:	6023      	str	r3, [r4, #0]
 810bbe0:	e00e      	b.n	810bc00 <_malloc_r+0xa0>
 810bbe2:	6822      	ldr	r2, [r4, #0]
 810bbe4:	1b52      	subs	r2, r2, r5
 810bbe6:	d41e      	bmi.n	810bc26 <_malloc_r+0xc6>
 810bbe8:	2a0b      	cmp	r2, #11
 810bbea:	d916      	bls.n	810bc1a <_malloc_r+0xba>
 810bbec:	1961      	adds	r1, r4, r5
 810bbee:	42a3      	cmp	r3, r4
 810bbf0:	6025      	str	r5, [r4, #0]
 810bbf2:	bf18      	it	ne
 810bbf4:	6059      	strne	r1, [r3, #4]
 810bbf6:	6863      	ldr	r3, [r4, #4]
 810bbf8:	bf08      	it	eq
 810bbfa:	6031      	streq	r1, [r6, #0]
 810bbfc:	5162      	str	r2, [r4, r5]
 810bbfe:	604b      	str	r3, [r1, #4]
 810bc00:	4638      	mov	r0, r7
 810bc02:	f104 060b 	add.w	r6, r4, #11
 810bc06:	f000 fbf9 	bl	810c3fc <__malloc_unlock>
 810bc0a:	f026 0607 	bic.w	r6, r6, #7
 810bc0e:	1d23      	adds	r3, r4, #4
 810bc10:	1af2      	subs	r2, r6, r3
 810bc12:	d0b6      	beq.n	810bb82 <_malloc_r+0x22>
 810bc14:	1b9b      	subs	r3, r3, r6
 810bc16:	50a3      	str	r3, [r4, r2]
 810bc18:	e7b3      	b.n	810bb82 <_malloc_r+0x22>
 810bc1a:	6862      	ldr	r2, [r4, #4]
 810bc1c:	42a3      	cmp	r3, r4
 810bc1e:	bf0c      	ite	eq
 810bc20:	6032      	streq	r2, [r6, #0]
 810bc22:	605a      	strne	r2, [r3, #4]
 810bc24:	e7ec      	b.n	810bc00 <_malloc_r+0xa0>
 810bc26:	4623      	mov	r3, r4
 810bc28:	6864      	ldr	r4, [r4, #4]
 810bc2a:	e7b2      	b.n	810bb92 <_malloc_r+0x32>
 810bc2c:	4634      	mov	r4, r6
 810bc2e:	6876      	ldr	r6, [r6, #4]
 810bc30:	e7b9      	b.n	810bba6 <_malloc_r+0x46>
 810bc32:	230c      	movs	r3, #12
 810bc34:	603b      	str	r3, [r7, #0]
 810bc36:	4638      	mov	r0, r7
 810bc38:	f000 fbe0 	bl	810c3fc <__malloc_unlock>
 810bc3c:	e7a1      	b.n	810bb82 <_malloc_r+0x22>
 810bc3e:	6025      	str	r5, [r4, #0]
 810bc40:	e7de      	b.n	810bc00 <_malloc_r+0xa0>
 810bc42:	bf00      	nop
 810bc44:	10000440 	.word	0x10000440

0810bc48 <__ssputs_r>:
 810bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bc4c:	688e      	ldr	r6, [r1, #8]
 810bc4e:	429e      	cmp	r6, r3
 810bc50:	4682      	mov	sl, r0
 810bc52:	460c      	mov	r4, r1
 810bc54:	4690      	mov	r8, r2
 810bc56:	461f      	mov	r7, r3
 810bc58:	d838      	bhi.n	810bccc <__ssputs_r+0x84>
 810bc5a:	898a      	ldrh	r2, [r1, #12]
 810bc5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810bc60:	d032      	beq.n	810bcc8 <__ssputs_r+0x80>
 810bc62:	6825      	ldr	r5, [r4, #0]
 810bc64:	6909      	ldr	r1, [r1, #16]
 810bc66:	eba5 0901 	sub.w	r9, r5, r1
 810bc6a:	6965      	ldr	r5, [r4, #20]
 810bc6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810bc70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810bc74:	3301      	adds	r3, #1
 810bc76:	444b      	add	r3, r9
 810bc78:	106d      	asrs	r5, r5, #1
 810bc7a:	429d      	cmp	r5, r3
 810bc7c:	bf38      	it	cc
 810bc7e:	461d      	movcc	r5, r3
 810bc80:	0553      	lsls	r3, r2, #21
 810bc82:	d531      	bpl.n	810bce8 <__ssputs_r+0xa0>
 810bc84:	4629      	mov	r1, r5
 810bc86:	f7ff ff6b 	bl	810bb60 <_malloc_r>
 810bc8a:	4606      	mov	r6, r0
 810bc8c:	b950      	cbnz	r0, 810bca4 <__ssputs_r+0x5c>
 810bc8e:	230c      	movs	r3, #12
 810bc90:	f8ca 3000 	str.w	r3, [sl]
 810bc94:	89a3      	ldrh	r3, [r4, #12]
 810bc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810bc9a:	81a3      	strh	r3, [r4, #12]
 810bc9c:	f04f 30ff 	mov.w	r0, #4294967295
 810bca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810bca4:	6921      	ldr	r1, [r4, #16]
 810bca6:	464a      	mov	r2, r9
 810bca8:	f7ff fa08 	bl	810b0bc <memcpy>
 810bcac:	89a3      	ldrh	r3, [r4, #12]
 810bcae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810bcb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810bcb6:	81a3      	strh	r3, [r4, #12]
 810bcb8:	6126      	str	r6, [r4, #16]
 810bcba:	6165      	str	r5, [r4, #20]
 810bcbc:	444e      	add	r6, r9
 810bcbe:	eba5 0509 	sub.w	r5, r5, r9
 810bcc2:	6026      	str	r6, [r4, #0]
 810bcc4:	60a5      	str	r5, [r4, #8]
 810bcc6:	463e      	mov	r6, r7
 810bcc8:	42be      	cmp	r6, r7
 810bcca:	d900      	bls.n	810bcce <__ssputs_r+0x86>
 810bccc:	463e      	mov	r6, r7
 810bcce:	6820      	ldr	r0, [r4, #0]
 810bcd0:	4632      	mov	r2, r6
 810bcd2:	4641      	mov	r1, r8
 810bcd4:	f000 fb72 	bl	810c3bc <memmove>
 810bcd8:	68a3      	ldr	r3, [r4, #8]
 810bcda:	1b9b      	subs	r3, r3, r6
 810bcdc:	60a3      	str	r3, [r4, #8]
 810bcde:	6823      	ldr	r3, [r4, #0]
 810bce0:	4433      	add	r3, r6
 810bce2:	6023      	str	r3, [r4, #0]
 810bce4:	2000      	movs	r0, #0
 810bce6:	e7db      	b.n	810bca0 <__ssputs_r+0x58>
 810bce8:	462a      	mov	r2, r5
 810bcea:	f000 fb8d 	bl	810c408 <_realloc_r>
 810bcee:	4606      	mov	r6, r0
 810bcf0:	2800      	cmp	r0, #0
 810bcf2:	d1e1      	bne.n	810bcb8 <__ssputs_r+0x70>
 810bcf4:	6921      	ldr	r1, [r4, #16]
 810bcf6:	4650      	mov	r0, sl
 810bcf8:	f7ff fec6 	bl	810ba88 <_free_r>
 810bcfc:	e7c7      	b.n	810bc8e <__ssputs_r+0x46>
	...

0810bd00 <_svfiprintf_r>:
 810bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bd04:	4698      	mov	r8, r3
 810bd06:	898b      	ldrh	r3, [r1, #12]
 810bd08:	061b      	lsls	r3, r3, #24
 810bd0a:	b09d      	sub	sp, #116	; 0x74
 810bd0c:	4607      	mov	r7, r0
 810bd0e:	460d      	mov	r5, r1
 810bd10:	4614      	mov	r4, r2
 810bd12:	d50e      	bpl.n	810bd32 <_svfiprintf_r+0x32>
 810bd14:	690b      	ldr	r3, [r1, #16]
 810bd16:	b963      	cbnz	r3, 810bd32 <_svfiprintf_r+0x32>
 810bd18:	2140      	movs	r1, #64	; 0x40
 810bd1a:	f7ff ff21 	bl	810bb60 <_malloc_r>
 810bd1e:	6028      	str	r0, [r5, #0]
 810bd20:	6128      	str	r0, [r5, #16]
 810bd22:	b920      	cbnz	r0, 810bd2e <_svfiprintf_r+0x2e>
 810bd24:	230c      	movs	r3, #12
 810bd26:	603b      	str	r3, [r7, #0]
 810bd28:	f04f 30ff 	mov.w	r0, #4294967295
 810bd2c:	e0d1      	b.n	810bed2 <_svfiprintf_r+0x1d2>
 810bd2e:	2340      	movs	r3, #64	; 0x40
 810bd30:	616b      	str	r3, [r5, #20]
 810bd32:	2300      	movs	r3, #0
 810bd34:	9309      	str	r3, [sp, #36]	; 0x24
 810bd36:	2320      	movs	r3, #32
 810bd38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810bd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 810bd40:	2330      	movs	r3, #48	; 0x30
 810bd42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810beec <_svfiprintf_r+0x1ec>
 810bd46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810bd4a:	f04f 0901 	mov.w	r9, #1
 810bd4e:	4623      	mov	r3, r4
 810bd50:	469a      	mov	sl, r3
 810bd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bd56:	b10a      	cbz	r2, 810bd5c <_svfiprintf_r+0x5c>
 810bd58:	2a25      	cmp	r2, #37	; 0x25
 810bd5a:	d1f9      	bne.n	810bd50 <_svfiprintf_r+0x50>
 810bd5c:	ebba 0b04 	subs.w	fp, sl, r4
 810bd60:	d00b      	beq.n	810bd7a <_svfiprintf_r+0x7a>
 810bd62:	465b      	mov	r3, fp
 810bd64:	4622      	mov	r2, r4
 810bd66:	4629      	mov	r1, r5
 810bd68:	4638      	mov	r0, r7
 810bd6a:	f7ff ff6d 	bl	810bc48 <__ssputs_r>
 810bd6e:	3001      	adds	r0, #1
 810bd70:	f000 80aa 	beq.w	810bec8 <_svfiprintf_r+0x1c8>
 810bd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bd76:	445a      	add	r2, fp
 810bd78:	9209      	str	r2, [sp, #36]	; 0x24
 810bd7a:	f89a 3000 	ldrb.w	r3, [sl]
 810bd7e:	2b00      	cmp	r3, #0
 810bd80:	f000 80a2 	beq.w	810bec8 <_svfiprintf_r+0x1c8>
 810bd84:	2300      	movs	r3, #0
 810bd86:	f04f 32ff 	mov.w	r2, #4294967295
 810bd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810bd8e:	f10a 0a01 	add.w	sl, sl, #1
 810bd92:	9304      	str	r3, [sp, #16]
 810bd94:	9307      	str	r3, [sp, #28]
 810bd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810bd9a:	931a      	str	r3, [sp, #104]	; 0x68
 810bd9c:	4654      	mov	r4, sl
 810bd9e:	2205      	movs	r2, #5
 810bda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bda4:	4851      	ldr	r0, [pc, #324]	; (810beec <_svfiprintf_r+0x1ec>)
 810bda6:	f7f4 faa3 	bl	81002f0 <memchr>
 810bdaa:	9a04      	ldr	r2, [sp, #16]
 810bdac:	b9d8      	cbnz	r0, 810bde6 <_svfiprintf_r+0xe6>
 810bdae:	06d0      	lsls	r0, r2, #27
 810bdb0:	bf44      	itt	mi
 810bdb2:	2320      	movmi	r3, #32
 810bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bdb8:	0711      	lsls	r1, r2, #28
 810bdba:	bf44      	itt	mi
 810bdbc:	232b      	movmi	r3, #43	; 0x2b
 810bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bdc2:	f89a 3000 	ldrb.w	r3, [sl]
 810bdc6:	2b2a      	cmp	r3, #42	; 0x2a
 810bdc8:	d015      	beq.n	810bdf6 <_svfiprintf_r+0xf6>
 810bdca:	9a07      	ldr	r2, [sp, #28]
 810bdcc:	4654      	mov	r4, sl
 810bdce:	2000      	movs	r0, #0
 810bdd0:	f04f 0c0a 	mov.w	ip, #10
 810bdd4:	4621      	mov	r1, r4
 810bdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bdda:	3b30      	subs	r3, #48	; 0x30
 810bddc:	2b09      	cmp	r3, #9
 810bdde:	d94e      	bls.n	810be7e <_svfiprintf_r+0x17e>
 810bde0:	b1b0      	cbz	r0, 810be10 <_svfiprintf_r+0x110>
 810bde2:	9207      	str	r2, [sp, #28]
 810bde4:	e014      	b.n	810be10 <_svfiprintf_r+0x110>
 810bde6:	eba0 0308 	sub.w	r3, r0, r8
 810bdea:	fa09 f303 	lsl.w	r3, r9, r3
 810bdee:	4313      	orrs	r3, r2
 810bdf0:	9304      	str	r3, [sp, #16]
 810bdf2:	46a2      	mov	sl, r4
 810bdf4:	e7d2      	b.n	810bd9c <_svfiprintf_r+0x9c>
 810bdf6:	9b03      	ldr	r3, [sp, #12]
 810bdf8:	1d19      	adds	r1, r3, #4
 810bdfa:	681b      	ldr	r3, [r3, #0]
 810bdfc:	9103      	str	r1, [sp, #12]
 810bdfe:	2b00      	cmp	r3, #0
 810be00:	bfbb      	ittet	lt
 810be02:	425b      	neglt	r3, r3
 810be04:	f042 0202 	orrlt.w	r2, r2, #2
 810be08:	9307      	strge	r3, [sp, #28]
 810be0a:	9307      	strlt	r3, [sp, #28]
 810be0c:	bfb8      	it	lt
 810be0e:	9204      	strlt	r2, [sp, #16]
 810be10:	7823      	ldrb	r3, [r4, #0]
 810be12:	2b2e      	cmp	r3, #46	; 0x2e
 810be14:	d10c      	bne.n	810be30 <_svfiprintf_r+0x130>
 810be16:	7863      	ldrb	r3, [r4, #1]
 810be18:	2b2a      	cmp	r3, #42	; 0x2a
 810be1a:	d135      	bne.n	810be88 <_svfiprintf_r+0x188>
 810be1c:	9b03      	ldr	r3, [sp, #12]
 810be1e:	1d1a      	adds	r2, r3, #4
 810be20:	681b      	ldr	r3, [r3, #0]
 810be22:	9203      	str	r2, [sp, #12]
 810be24:	2b00      	cmp	r3, #0
 810be26:	bfb8      	it	lt
 810be28:	f04f 33ff 	movlt.w	r3, #4294967295
 810be2c:	3402      	adds	r4, #2
 810be2e:	9305      	str	r3, [sp, #20]
 810be30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810befc <_svfiprintf_r+0x1fc>
 810be34:	7821      	ldrb	r1, [r4, #0]
 810be36:	2203      	movs	r2, #3
 810be38:	4650      	mov	r0, sl
 810be3a:	f7f4 fa59 	bl	81002f0 <memchr>
 810be3e:	b140      	cbz	r0, 810be52 <_svfiprintf_r+0x152>
 810be40:	2340      	movs	r3, #64	; 0x40
 810be42:	eba0 000a 	sub.w	r0, r0, sl
 810be46:	fa03 f000 	lsl.w	r0, r3, r0
 810be4a:	9b04      	ldr	r3, [sp, #16]
 810be4c:	4303      	orrs	r3, r0
 810be4e:	3401      	adds	r4, #1
 810be50:	9304      	str	r3, [sp, #16]
 810be52:	f814 1b01 	ldrb.w	r1, [r4], #1
 810be56:	4826      	ldr	r0, [pc, #152]	; (810bef0 <_svfiprintf_r+0x1f0>)
 810be58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810be5c:	2206      	movs	r2, #6
 810be5e:	f7f4 fa47 	bl	81002f0 <memchr>
 810be62:	2800      	cmp	r0, #0
 810be64:	d038      	beq.n	810bed8 <_svfiprintf_r+0x1d8>
 810be66:	4b23      	ldr	r3, [pc, #140]	; (810bef4 <_svfiprintf_r+0x1f4>)
 810be68:	bb1b      	cbnz	r3, 810beb2 <_svfiprintf_r+0x1b2>
 810be6a:	9b03      	ldr	r3, [sp, #12]
 810be6c:	3307      	adds	r3, #7
 810be6e:	f023 0307 	bic.w	r3, r3, #7
 810be72:	3308      	adds	r3, #8
 810be74:	9303      	str	r3, [sp, #12]
 810be76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be78:	4433      	add	r3, r6
 810be7a:	9309      	str	r3, [sp, #36]	; 0x24
 810be7c:	e767      	b.n	810bd4e <_svfiprintf_r+0x4e>
 810be7e:	fb0c 3202 	mla	r2, ip, r2, r3
 810be82:	460c      	mov	r4, r1
 810be84:	2001      	movs	r0, #1
 810be86:	e7a5      	b.n	810bdd4 <_svfiprintf_r+0xd4>
 810be88:	2300      	movs	r3, #0
 810be8a:	3401      	adds	r4, #1
 810be8c:	9305      	str	r3, [sp, #20]
 810be8e:	4619      	mov	r1, r3
 810be90:	f04f 0c0a 	mov.w	ip, #10
 810be94:	4620      	mov	r0, r4
 810be96:	f810 2b01 	ldrb.w	r2, [r0], #1
 810be9a:	3a30      	subs	r2, #48	; 0x30
 810be9c:	2a09      	cmp	r2, #9
 810be9e:	d903      	bls.n	810bea8 <_svfiprintf_r+0x1a8>
 810bea0:	2b00      	cmp	r3, #0
 810bea2:	d0c5      	beq.n	810be30 <_svfiprintf_r+0x130>
 810bea4:	9105      	str	r1, [sp, #20]
 810bea6:	e7c3      	b.n	810be30 <_svfiprintf_r+0x130>
 810bea8:	fb0c 2101 	mla	r1, ip, r1, r2
 810beac:	4604      	mov	r4, r0
 810beae:	2301      	movs	r3, #1
 810beb0:	e7f0      	b.n	810be94 <_svfiprintf_r+0x194>
 810beb2:	ab03      	add	r3, sp, #12
 810beb4:	9300      	str	r3, [sp, #0]
 810beb6:	462a      	mov	r2, r5
 810beb8:	4b0f      	ldr	r3, [pc, #60]	; (810bef8 <_svfiprintf_r+0x1f8>)
 810beba:	a904      	add	r1, sp, #16
 810bebc:	4638      	mov	r0, r7
 810bebe:	f7fb fedd 	bl	8107c7c <_printf_float>
 810bec2:	1c42      	adds	r2, r0, #1
 810bec4:	4606      	mov	r6, r0
 810bec6:	d1d6      	bne.n	810be76 <_svfiprintf_r+0x176>
 810bec8:	89ab      	ldrh	r3, [r5, #12]
 810beca:	065b      	lsls	r3, r3, #25
 810becc:	f53f af2c 	bmi.w	810bd28 <_svfiprintf_r+0x28>
 810bed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bed2:	b01d      	add	sp, #116	; 0x74
 810bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bed8:	ab03      	add	r3, sp, #12
 810beda:	9300      	str	r3, [sp, #0]
 810bedc:	462a      	mov	r2, r5
 810bede:	4b06      	ldr	r3, [pc, #24]	; (810bef8 <_svfiprintf_r+0x1f8>)
 810bee0:	a904      	add	r1, sp, #16
 810bee2:	4638      	mov	r0, r7
 810bee4:	f7fc f96e 	bl	81081c4 <_printf_i>
 810bee8:	e7eb      	b.n	810bec2 <_svfiprintf_r+0x1c2>
 810beea:	bf00      	nop
 810beec:	0810cabc 	.word	0x0810cabc
 810bef0:	0810cac6 	.word	0x0810cac6
 810bef4:	08107c7d 	.word	0x08107c7d
 810bef8:	0810bc49 	.word	0x0810bc49
 810befc:	0810cac2 	.word	0x0810cac2

0810bf00 <__sfputc_r>:
 810bf00:	6893      	ldr	r3, [r2, #8]
 810bf02:	3b01      	subs	r3, #1
 810bf04:	2b00      	cmp	r3, #0
 810bf06:	b410      	push	{r4}
 810bf08:	6093      	str	r3, [r2, #8]
 810bf0a:	da08      	bge.n	810bf1e <__sfputc_r+0x1e>
 810bf0c:	6994      	ldr	r4, [r2, #24]
 810bf0e:	42a3      	cmp	r3, r4
 810bf10:	db01      	blt.n	810bf16 <__sfputc_r+0x16>
 810bf12:	290a      	cmp	r1, #10
 810bf14:	d103      	bne.n	810bf1e <__sfputc_r+0x1e>
 810bf16:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bf1a:	f7fd bbe9 	b.w	81096f0 <__swbuf_r>
 810bf1e:	6813      	ldr	r3, [r2, #0]
 810bf20:	1c58      	adds	r0, r3, #1
 810bf22:	6010      	str	r0, [r2, #0]
 810bf24:	7019      	strb	r1, [r3, #0]
 810bf26:	4608      	mov	r0, r1
 810bf28:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bf2c:	4770      	bx	lr

0810bf2e <__sfputs_r>:
 810bf2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bf30:	4606      	mov	r6, r0
 810bf32:	460f      	mov	r7, r1
 810bf34:	4614      	mov	r4, r2
 810bf36:	18d5      	adds	r5, r2, r3
 810bf38:	42ac      	cmp	r4, r5
 810bf3a:	d101      	bne.n	810bf40 <__sfputs_r+0x12>
 810bf3c:	2000      	movs	r0, #0
 810bf3e:	e007      	b.n	810bf50 <__sfputs_r+0x22>
 810bf40:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bf44:	463a      	mov	r2, r7
 810bf46:	4630      	mov	r0, r6
 810bf48:	f7ff ffda 	bl	810bf00 <__sfputc_r>
 810bf4c:	1c43      	adds	r3, r0, #1
 810bf4e:	d1f3      	bne.n	810bf38 <__sfputs_r+0xa>
 810bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810bf54 <_vfiprintf_r>:
 810bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf58:	460d      	mov	r5, r1
 810bf5a:	b09d      	sub	sp, #116	; 0x74
 810bf5c:	4614      	mov	r4, r2
 810bf5e:	4698      	mov	r8, r3
 810bf60:	4606      	mov	r6, r0
 810bf62:	b118      	cbz	r0, 810bf6c <_vfiprintf_r+0x18>
 810bf64:	6983      	ldr	r3, [r0, #24]
 810bf66:	b90b      	cbnz	r3, 810bf6c <_vfiprintf_r+0x18>
 810bf68:	f7fe fc16 	bl	810a798 <__sinit>
 810bf6c:	4b89      	ldr	r3, [pc, #548]	; (810c194 <_vfiprintf_r+0x240>)
 810bf6e:	429d      	cmp	r5, r3
 810bf70:	d11b      	bne.n	810bfaa <_vfiprintf_r+0x56>
 810bf72:	6875      	ldr	r5, [r6, #4]
 810bf74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bf76:	07d9      	lsls	r1, r3, #31
 810bf78:	d405      	bmi.n	810bf86 <_vfiprintf_r+0x32>
 810bf7a:	89ab      	ldrh	r3, [r5, #12]
 810bf7c:	059a      	lsls	r2, r3, #22
 810bf7e:	d402      	bmi.n	810bf86 <_vfiprintf_r+0x32>
 810bf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bf82:	f7ff f81a 	bl	810afba <__retarget_lock_acquire_recursive>
 810bf86:	89ab      	ldrh	r3, [r5, #12]
 810bf88:	071b      	lsls	r3, r3, #28
 810bf8a:	d501      	bpl.n	810bf90 <_vfiprintf_r+0x3c>
 810bf8c:	692b      	ldr	r3, [r5, #16]
 810bf8e:	b9eb      	cbnz	r3, 810bfcc <_vfiprintf_r+0x78>
 810bf90:	4629      	mov	r1, r5
 810bf92:	4630      	mov	r0, r6
 810bf94:	f7fd fbfe 	bl	8109794 <__swsetup_r>
 810bf98:	b1c0      	cbz	r0, 810bfcc <_vfiprintf_r+0x78>
 810bf9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bf9c:	07dc      	lsls	r4, r3, #31
 810bf9e:	d50e      	bpl.n	810bfbe <_vfiprintf_r+0x6a>
 810bfa0:	f04f 30ff 	mov.w	r0, #4294967295
 810bfa4:	b01d      	add	sp, #116	; 0x74
 810bfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bfaa:	4b7b      	ldr	r3, [pc, #492]	; (810c198 <_vfiprintf_r+0x244>)
 810bfac:	429d      	cmp	r5, r3
 810bfae:	d101      	bne.n	810bfb4 <_vfiprintf_r+0x60>
 810bfb0:	68b5      	ldr	r5, [r6, #8]
 810bfb2:	e7df      	b.n	810bf74 <_vfiprintf_r+0x20>
 810bfb4:	4b79      	ldr	r3, [pc, #484]	; (810c19c <_vfiprintf_r+0x248>)
 810bfb6:	429d      	cmp	r5, r3
 810bfb8:	bf08      	it	eq
 810bfba:	68f5      	ldreq	r5, [r6, #12]
 810bfbc:	e7da      	b.n	810bf74 <_vfiprintf_r+0x20>
 810bfbe:	89ab      	ldrh	r3, [r5, #12]
 810bfc0:	0598      	lsls	r0, r3, #22
 810bfc2:	d4ed      	bmi.n	810bfa0 <_vfiprintf_r+0x4c>
 810bfc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bfc6:	f7fe fff9 	bl	810afbc <__retarget_lock_release_recursive>
 810bfca:	e7e9      	b.n	810bfa0 <_vfiprintf_r+0x4c>
 810bfcc:	2300      	movs	r3, #0
 810bfce:	9309      	str	r3, [sp, #36]	; 0x24
 810bfd0:	2320      	movs	r3, #32
 810bfd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810bfd6:	f8cd 800c 	str.w	r8, [sp, #12]
 810bfda:	2330      	movs	r3, #48	; 0x30
 810bfdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810c1a0 <_vfiprintf_r+0x24c>
 810bfe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810bfe4:	f04f 0901 	mov.w	r9, #1
 810bfe8:	4623      	mov	r3, r4
 810bfea:	469a      	mov	sl, r3
 810bfec:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bff0:	b10a      	cbz	r2, 810bff6 <_vfiprintf_r+0xa2>
 810bff2:	2a25      	cmp	r2, #37	; 0x25
 810bff4:	d1f9      	bne.n	810bfea <_vfiprintf_r+0x96>
 810bff6:	ebba 0b04 	subs.w	fp, sl, r4
 810bffa:	d00b      	beq.n	810c014 <_vfiprintf_r+0xc0>
 810bffc:	465b      	mov	r3, fp
 810bffe:	4622      	mov	r2, r4
 810c000:	4629      	mov	r1, r5
 810c002:	4630      	mov	r0, r6
 810c004:	f7ff ff93 	bl	810bf2e <__sfputs_r>
 810c008:	3001      	adds	r0, #1
 810c00a:	f000 80aa 	beq.w	810c162 <_vfiprintf_r+0x20e>
 810c00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c010:	445a      	add	r2, fp
 810c012:	9209      	str	r2, [sp, #36]	; 0x24
 810c014:	f89a 3000 	ldrb.w	r3, [sl]
 810c018:	2b00      	cmp	r3, #0
 810c01a:	f000 80a2 	beq.w	810c162 <_vfiprintf_r+0x20e>
 810c01e:	2300      	movs	r3, #0
 810c020:	f04f 32ff 	mov.w	r2, #4294967295
 810c024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c028:	f10a 0a01 	add.w	sl, sl, #1
 810c02c:	9304      	str	r3, [sp, #16]
 810c02e:	9307      	str	r3, [sp, #28]
 810c030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c034:	931a      	str	r3, [sp, #104]	; 0x68
 810c036:	4654      	mov	r4, sl
 810c038:	2205      	movs	r2, #5
 810c03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c03e:	4858      	ldr	r0, [pc, #352]	; (810c1a0 <_vfiprintf_r+0x24c>)
 810c040:	f7f4 f956 	bl	81002f0 <memchr>
 810c044:	9a04      	ldr	r2, [sp, #16]
 810c046:	b9d8      	cbnz	r0, 810c080 <_vfiprintf_r+0x12c>
 810c048:	06d1      	lsls	r1, r2, #27
 810c04a:	bf44      	itt	mi
 810c04c:	2320      	movmi	r3, #32
 810c04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c052:	0713      	lsls	r3, r2, #28
 810c054:	bf44      	itt	mi
 810c056:	232b      	movmi	r3, #43	; 0x2b
 810c058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c05c:	f89a 3000 	ldrb.w	r3, [sl]
 810c060:	2b2a      	cmp	r3, #42	; 0x2a
 810c062:	d015      	beq.n	810c090 <_vfiprintf_r+0x13c>
 810c064:	9a07      	ldr	r2, [sp, #28]
 810c066:	4654      	mov	r4, sl
 810c068:	2000      	movs	r0, #0
 810c06a:	f04f 0c0a 	mov.w	ip, #10
 810c06e:	4621      	mov	r1, r4
 810c070:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c074:	3b30      	subs	r3, #48	; 0x30
 810c076:	2b09      	cmp	r3, #9
 810c078:	d94e      	bls.n	810c118 <_vfiprintf_r+0x1c4>
 810c07a:	b1b0      	cbz	r0, 810c0aa <_vfiprintf_r+0x156>
 810c07c:	9207      	str	r2, [sp, #28]
 810c07e:	e014      	b.n	810c0aa <_vfiprintf_r+0x156>
 810c080:	eba0 0308 	sub.w	r3, r0, r8
 810c084:	fa09 f303 	lsl.w	r3, r9, r3
 810c088:	4313      	orrs	r3, r2
 810c08a:	9304      	str	r3, [sp, #16]
 810c08c:	46a2      	mov	sl, r4
 810c08e:	e7d2      	b.n	810c036 <_vfiprintf_r+0xe2>
 810c090:	9b03      	ldr	r3, [sp, #12]
 810c092:	1d19      	adds	r1, r3, #4
 810c094:	681b      	ldr	r3, [r3, #0]
 810c096:	9103      	str	r1, [sp, #12]
 810c098:	2b00      	cmp	r3, #0
 810c09a:	bfbb      	ittet	lt
 810c09c:	425b      	neglt	r3, r3
 810c09e:	f042 0202 	orrlt.w	r2, r2, #2
 810c0a2:	9307      	strge	r3, [sp, #28]
 810c0a4:	9307      	strlt	r3, [sp, #28]
 810c0a6:	bfb8      	it	lt
 810c0a8:	9204      	strlt	r2, [sp, #16]
 810c0aa:	7823      	ldrb	r3, [r4, #0]
 810c0ac:	2b2e      	cmp	r3, #46	; 0x2e
 810c0ae:	d10c      	bne.n	810c0ca <_vfiprintf_r+0x176>
 810c0b0:	7863      	ldrb	r3, [r4, #1]
 810c0b2:	2b2a      	cmp	r3, #42	; 0x2a
 810c0b4:	d135      	bne.n	810c122 <_vfiprintf_r+0x1ce>
 810c0b6:	9b03      	ldr	r3, [sp, #12]
 810c0b8:	1d1a      	adds	r2, r3, #4
 810c0ba:	681b      	ldr	r3, [r3, #0]
 810c0bc:	9203      	str	r2, [sp, #12]
 810c0be:	2b00      	cmp	r3, #0
 810c0c0:	bfb8      	it	lt
 810c0c2:	f04f 33ff 	movlt.w	r3, #4294967295
 810c0c6:	3402      	adds	r4, #2
 810c0c8:	9305      	str	r3, [sp, #20]
 810c0ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810c1b0 <_vfiprintf_r+0x25c>
 810c0ce:	7821      	ldrb	r1, [r4, #0]
 810c0d0:	2203      	movs	r2, #3
 810c0d2:	4650      	mov	r0, sl
 810c0d4:	f7f4 f90c 	bl	81002f0 <memchr>
 810c0d8:	b140      	cbz	r0, 810c0ec <_vfiprintf_r+0x198>
 810c0da:	2340      	movs	r3, #64	; 0x40
 810c0dc:	eba0 000a 	sub.w	r0, r0, sl
 810c0e0:	fa03 f000 	lsl.w	r0, r3, r0
 810c0e4:	9b04      	ldr	r3, [sp, #16]
 810c0e6:	4303      	orrs	r3, r0
 810c0e8:	3401      	adds	r4, #1
 810c0ea:	9304      	str	r3, [sp, #16]
 810c0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c0f0:	482c      	ldr	r0, [pc, #176]	; (810c1a4 <_vfiprintf_r+0x250>)
 810c0f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c0f6:	2206      	movs	r2, #6
 810c0f8:	f7f4 f8fa 	bl	81002f0 <memchr>
 810c0fc:	2800      	cmp	r0, #0
 810c0fe:	d03f      	beq.n	810c180 <_vfiprintf_r+0x22c>
 810c100:	4b29      	ldr	r3, [pc, #164]	; (810c1a8 <_vfiprintf_r+0x254>)
 810c102:	bb1b      	cbnz	r3, 810c14c <_vfiprintf_r+0x1f8>
 810c104:	9b03      	ldr	r3, [sp, #12]
 810c106:	3307      	adds	r3, #7
 810c108:	f023 0307 	bic.w	r3, r3, #7
 810c10c:	3308      	adds	r3, #8
 810c10e:	9303      	str	r3, [sp, #12]
 810c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c112:	443b      	add	r3, r7
 810c114:	9309      	str	r3, [sp, #36]	; 0x24
 810c116:	e767      	b.n	810bfe8 <_vfiprintf_r+0x94>
 810c118:	fb0c 3202 	mla	r2, ip, r2, r3
 810c11c:	460c      	mov	r4, r1
 810c11e:	2001      	movs	r0, #1
 810c120:	e7a5      	b.n	810c06e <_vfiprintf_r+0x11a>
 810c122:	2300      	movs	r3, #0
 810c124:	3401      	adds	r4, #1
 810c126:	9305      	str	r3, [sp, #20]
 810c128:	4619      	mov	r1, r3
 810c12a:	f04f 0c0a 	mov.w	ip, #10
 810c12e:	4620      	mov	r0, r4
 810c130:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c134:	3a30      	subs	r2, #48	; 0x30
 810c136:	2a09      	cmp	r2, #9
 810c138:	d903      	bls.n	810c142 <_vfiprintf_r+0x1ee>
 810c13a:	2b00      	cmp	r3, #0
 810c13c:	d0c5      	beq.n	810c0ca <_vfiprintf_r+0x176>
 810c13e:	9105      	str	r1, [sp, #20]
 810c140:	e7c3      	b.n	810c0ca <_vfiprintf_r+0x176>
 810c142:	fb0c 2101 	mla	r1, ip, r1, r2
 810c146:	4604      	mov	r4, r0
 810c148:	2301      	movs	r3, #1
 810c14a:	e7f0      	b.n	810c12e <_vfiprintf_r+0x1da>
 810c14c:	ab03      	add	r3, sp, #12
 810c14e:	9300      	str	r3, [sp, #0]
 810c150:	462a      	mov	r2, r5
 810c152:	4b16      	ldr	r3, [pc, #88]	; (810c1ac <_vfiprintf_r+0x258>)
 810c154:	a904      	add	r1, sp, #16
 810c156:	4630      	mov	r0, r6
 810c158:	f7fb fd90 	bl	8107c7c <_printf_float>
 810c15c:	4607      	mov	r7, r0
 810c15e:	1c78      	adds	r0, r7, #1
 810c160:	d1d6      	bne.n	810c110 <_vfiprintf_r+0x1bc>
 810c162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c164:	07d9      	lsls	r1, r3, #31
 810c166:	d405      	bmi.n	810c174 <_vfiprintf_r+0x220>
 810c168:	89ab      	ldrh	r3, [r5, #12]
 810c16a:	059a      	lsls	r2, r3, #22
 810c16c:	d402      	bmi.n	810c174 <_vfiprintf_r+0x220>
 810c16e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c170:	f7fe ff24 	bl	810afbc <__retarget_lock_release_recursive>
 810c174:	89ab      	ldrh	r3, [r5, #12]
 810c176:	065b      	lsls	r3, r3, #25
 810c178:	f53f af12 	bmi.w	810bfa0 <_vfiprintf_r+0x4c>
 810c17c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c17e:	e711      	b.n	810bfa4 <_vfiprintf_r+0x50>
 810c180:	ab03      	add	r3, sp, #12
 810c182:	9300      	str	r3, [sp, #0]
 810c184:	462a      	mov	r2, r5
 810c186:	4b09      	ldr	r3, [pc, #36]	; (810c1ac <_vfiprintf_r+0x258>)
 810c188:	a904      	add	r1, sp, #16
 810c18a:	4630      	mov	r0, r6
 810c18c:	f7fc f81a 	bl	81081c4 <_printf_i>
 810c190:	e7e4      	b.n	810c15c <_vfiprintf_r+0x208>
 810c192:	bf00      	nop
 810c194:	0810c8a4 	.word	0x0810c8a4
 810c198:	0810c8c4 	.word	0x0810c8c4
 810c19c:	0810c884 	.word	0x0810c884
 810c1a0:	0810cabc 	.word	0x0810cabc
 810c1a4:	0810cac6 	.word	0x0810cac6
 810c1a8:	08107c7d 	.word	0x08107c7d
 810c1ac:	0810bf2f 	.word	0x0810bf2f
 810c1b0:	0810cac2 	.word	0x0810cac2
 810c1b4:	00000000 	.word	0x00000000

0810c1b8 <nan>:
 810c1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810c1c0 <nan+0x8>
 810c1bc:	4770      	bx	lr
 810c1be:	bf00      	nop
 810c1c0:	00000000 	.word	0x00000000
 810c1c4:	7ff80000 	.word	0x7ff80000

0810c1c8 <_sbrk_r>:
 810c1c8:	b538      	push	{r3, r4, r5, lr}
 810c1ca:	4d06      	ldr	r5, [pc, #24]	; (810c1e4 <_sbrk_r+0x1c>)
 810c1cc:	2300      	movs	r3, #0
 810c1ce:	4604      	mov	r4, r0
 810c1d0:	4608      	mov	r0, r1
 810c1d2:	602b      	str	r3, [r5, #0]
 810c1d4:	f7f6 f8ec 	bl	81023b0 <_sbrk>
 810c1d8:	1c43      	adds	r3, r0, #1
 810c1da:	d102      	bne.n	810c1e2 <_sbrk_r+0x1a>
 810c1dc:	682b      	ldr	r3, [r5, #0]
 810c1de:	b103      	cbz	r3, 810c1e2 <_sbrk_r+0x1a>
 810c1e0:	6023      	str	r3, [r4, #0]
 810c1e2:	bd38      	pop	{r3, r4, r5, pc}
 810c1e4:	10000448 	.word	0x10000448

0810c1e8 <__sread>:
 810c1e8:	b510      	push	{r4, lr}
 810c1ea:	460c      	mov	r4, r1
 810c1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c1f0:	f000 f93a 	bl	810c468 <_read_r>
 810c1f4:	2800      	cmp	r0, #0
 810c1f6:	bfab      	itete	ge
 810c1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810c1fa:	89a3      	ldrhlt	r3, [r4, #12]
 810c1fc:	181b      	addge	r3, r3, r0
 810c1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810c202:	bfac      	ite	ge
 810c204:	6563      	strge	r3, [r4, #84]	; 0x54
 810c206:	81a3      	strhlt	r3, [r4, #12]
 810c208:	bd10      	pop	{r4, pc}

0810c20a <__swrite>:
 810c20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c20e:	461f      	mov	r7, r3
 810c210:	898b      	ldrh	r3, [r1, #12]
 810c212:	05db      	lsls	r3, r3, #23
 810c214:	4605      	mov	r5, r0
 810c216:	460c      	mov	r4, r1
 810c218:	4616      	mov	r6, r2
 810c21a:	d505      	bpl.n	810c228 <__swrite+0x1e>
 810c21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c220:	2302      	movs	r3, #2
 810c222:	2200      	movs	r2, #0
 810c224:	f000 f8b8 	bl	810c398 <_lseek_r>
 810c228:	89a3      	ldrh	r3, [r4, #12]
 810c22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810c22e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810c232:	81a3      	strh	r3, [r4, #12]
 810c234:	4632      	mov	r2, r6
 810c236:	463b      	mov	r3, r7
 810c238:	4628      	mov	r0, r5
 810c23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810c23e:	f000 b837 	b.w	810c2b0 <_write_r>

0810c242 <__sseek>:
 810c242:	b510      	push	{r4, lr}
 810c244:	460c      	mov	r4, r1
 810c246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c24a:	f000 f8a5 	bl	810c398 <_lseek_r>
 810c24e:	1c43      	adds	r3, r0, #1
 810c250:	89a3      	ldrh	r3, [r4, #12]
 810c252:	bf15      	itete	ne
 810c254:	6560      	strne	r0, [r4, #84]	; 0x54
 810c256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810c25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810c25e:	81a3      	strheq	r3, [r4, #12]
 810c260:	bf18      	it	ne
 810c262:	81a3      	strhne	r3, [r4, #12]
 810c264:	bd10      	pop	{r4, pc}

0810c266 <__sclose>:
 810c266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c26a:	f000 b851 	b.w	810c310 <_close_r>

0810c26e <strncmp>:
 810c26e:	b510      	push	{r4, lr}
 810c270:	b17a      	cbz	r2, 810c292 <strncmp+0x24>
 810c272:	4603      	mov	r3, r0
 810c274:	3901      	subs	r1, #1
 810c276:	1884      	adds	r4, r0, r2
 810c278:	f813 0b01 	ldrb.w	r0, [r3], #1
 810c27c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810c280:	4290      	cmp	r0, r2
 810c282:	d101      	bne.n	810c288 <strncmp+0x1a>
 810c284:	42a3      	cmp	r3, r4
 810c286:	d101      	bne.n	810c28c <strncmp+0x1e>
 810c288:	1a80      	subs	r0, r0, r2
 810c28a:	bd10      	pop	{r4, pc}
 810c28c:	2800      	cmp	r0, #0
 810c28e:	d1f3      	bne.n	810c278 <strncmp+0xa>
 810c290:	e7fa      	b.n	810c288 <strncmp+0x1a>
 810c292:	4610      	mov	r0, r2
 810c294:	e7f9      	b.n	810c28a <strncmp+0x1c>

0810c296 <__ascii_wctomb>:
 810c296:	b149      	cbz	r1, 810c2ac <__ascii_wctomb+0x16>
 810c298:	2aff      	cmp	r2, #255	; 0xff
 810c29a:	bf85      	ittet	hi
 810c29c:	238a      	movhi	r3, #138	; 0x8a
 810c29e:	6003      	strhi	r3, [r0, #0]
 810c2a0:	700a      	strbls	r2, [r1, #0]
 810c2a2:	f04f 30ff 	movhi.w	r0, #4294967295
 810c2a6:	bf98      	it	ls
 810c2a8:	2001      	movls	r0, #1
 810c2aa:	4770      	bx	lr
 810c2ac:	4608      	mov	r0, r1
 810c2ae:	4770      	bx	lr

0810c2b0 <_write_r>:
 810c2b0:	b538      	push	{r3, r4, r5, lr}
 810c2b2:	4d07      	ldr	r5, [pc, #28]	; (810c2d0 <_write_r+0x20>)
 810c2b4:	4604      	mov	r4, r0
 810c2b6:	4608      	mov	r0, r1
 810c2b8:	4611      	mov	r1, r2
 810c2ba:	2200      	movs	r2, #0
 810c2bc:	602a      	str	r2, [r5, #0]
 810c2be:	461a      	mov	r2, r3
 810c2c0:	f7f6 f825 	bl	810230e <_write>
 810c2c4:	1c43      	adds	r3, r0, #1
 810c2c6:	d102      	bne.n	810c2ce <_write_r+0x1e>
 810c2c8:	682b      	ldr	r3, [r5, #0]
 810c2ca:	b103      	cbz	r3, 810c2ce <_write_r+0x1e>
 810c2cc:	6023      	str	r3, [r4, #0]
 810c2ce:	bd38      	pop	{r3, r4, r5, pc}
 810c2d0:	10000448 	.word	0x10000448

0810c2d4 <__assert_func>:
 810c2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810c2d6:	4614      	mov	r4, r2
 810c2d8:	461a      	mov	r2, r3
 810c2da:	4b09      	ldr	r3, [pc, #36]	; (810c300 <__assert_func+0x2c>)
 810c2dc:	681b      	ldr	r3, [r3, #0]
 810c2de:	4605      	mov	r5, r0
 810c2e0:	68d8      	ldr	r0, [r3, #12]
 810c2e2:	b14c      	cbz	r4, 810c2f8 <__assert_func+0x24>
 810c2e4:	4b07      	ldr	r3, [pc, #28]	; (810c304 <__assert_func+0x30>)
 810c2e6:	9100      	str	r1, [sp, #0]
 810c2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810c2ec:	4906      	ldr	r1, [pc, #24]	; (810c308 <__assert_func+0x34>)
 810c2ee:	462b      	mov	r3, r5
 810c2f0:	f000 f81e 	bl	810c330 <fiprintf>
 810c2f4:	f000 f8ca 	bl	810c48c <abort>
 810c2f8:	4b04      	ldr	r3, [pc, #16]	; (810c30c <__assert_func+0x38>)
 810c2fa:	461c      	mov	r4, r3
 810c2fc:	e7f3      	b.n	810c2e6 <__assert_func+0x12>
 810c2fe:	bf00      	nop
 810c300:	1000001c 	.word	0x1000001c
 810c304:	0810cacd 	.word	0x0810cacd
 810c308:	0810cada 	.word	0x0810cada
 810c30c:	0810cb08 	.word	0x0810cb08

0810c310 <_close_r>:
 810c310:	b538      	push	{r3, r4, r5, lr}
 810c312:	4d06      	ldr	r5, [pc, #24]	; (810c32c <_close_r+0x1c>)
 810c314:	2300      	movs	r3, #0
 810c316:	4604      	mov	r4, r0
 810c318:	4608      	mov	r0, r1
 810c31a:	602b      	str	r3, [r5, #0]
 810c31c:	f7f6 f813 	bl	8102346 <_close>
 810c320:	1c43      	adds	r3, r0, #1
 810c322:	d102      	bne.n	810c32a <_close_r+0x1a>
 810c324:	682b      	ldr	r3, [r5, #0]
 810c326:	b103      	cbz	r3, 810c32a <_close_r+0x1a>
 810c328:	6023      	str	r3, [r4, #0]
 810c32a:	bd38      	pop	{r3, r4, r5, pc}
 810c32c:	10000448 	.word	0x10000448

0810c330 <fiprintf>:
 810c330:	b40e      	push	{r1, r2, r3}
 810c332:	b503      	push	{r0, r1, lr}
 810c334:	4601      	mov	r1, r0
 810c336:	ab03      	add	r3, sp, #12
 810c338:	4805      	ldr	r0, [pc, #20]	; (810c350 <fiprintf+0x20>)
 810c33a:	f853 2b04 	ldr.w	r2, [r3], #4
 810c33e:	6800      	ldr	r0, [r0, #0]
 810c340:	9301      	str	r3, [sp, #4]
 810c342:	f7ff fe07 	bl	810bf54 <_vfiprintf_r>
 810c346:	b002      	add	sp, #8
 810c348:	f85d eb04 	ldr.w	lr, [sp], #4
 810c34c:	b003      	add	sp, #12
 810c34e:	4770      	bx	lr
 810c350:	1000001c 	.word	0x1000001c

0810c354 <_fstat_r>:
 810c354:	b538      	push	{r3, r4, r5, lr}
 810c356:	4d07      	ldr	r5, [pc, #28]	; (810c374 <_fstat_r+0x20>)
 810c358:	2300      	movs	r3, #0
 810c35a:	4604      	mov	r4, r0
 810c35c:	4608      	mov	r0, r1
 810c35e:	4611      	mov	r1, r2
 810c360:	602b      	str	r3, [r5, #0]
 810c362:	f7f5 fffc 	bl	810235e <_fstat>
 810c366:	1c43      	adds	r3, r0, #1
 810c368:	d102      	bne.n	810c370 <_fstat_r+0x1c>
 810c36a:	682b      	ldr	r3, [r5, #0]
 810c36c:	b103      	cbz	r3, 810c370 <_fstat_r+0x1c>
 810c36e:	6023      	str	r3, [r4, #0]
 810c370:	bd38      	pop	{r3, r4, r5, pc}
 810c372:	bf00      	nop
 810c374:	10000448 	.word	0x10000448

0810c378 <_isatty_r>:
 810c378:	b538      	push	{r3, r4, r5, lr}
 810c37a:	4d06      	ldr	r5, [pc, #24]	; (810c394 <_isatty_r+0x1c>)
 810c37c:	2300      	movs	r3, #0
 810c37e:	4604      	mov	r4, r0
 810c380:	4608      	mov	r0, r1
 810c382:	602b      	str	r3, [r5, #0]
 810c384:	f7f5 fffb 	bl	810237e <_isatty>
 810c388:	1c43      	adds	r3, r0, #1
 810c38a:	d102      	bne.n	810c392 <_isatty_r+0x1a>
 810c38c:	682b      	ldr	r3, [r5, #0]
 810c38e:	b103      	cbz	r3, 810c392 <_isatty_r+0x1a>
 810c390:	6023      	str	r3, [r4, #0]
 810c392:	bd38      	pop	{r3, r4, r5, pc}
 810c394:	10000448 	.word	0x10000448

0810c398 <_lseek_r>:
 810c398:	b538      	push	{r3, r4, r5, lr}
 810c39a:	4d07      	ldr	r5, [pc, #28]	; (810c3b8 <_lseek_r+0x20>)
 810c39c:	4604      	mov	r4, r0
 810c39e:	4608      	mov	r0, r1
 810c3a0:	4611      	mov	r1, r2
 810c3a2:	2200      	movs	r2, #0
 810c3a4:	602a      	str	r2, [r5, #0]
 810c3a6:	461a      	mov	r2, r3
 810c3a8:	f7f5 fff4 	bl	8102394 <_lseek>
 810c3ac:	1c43      	adds	r3, r0, #1
 810c3ae:	d102      	bne.n	810c3b6 <_lseek_r+0x1e>
 810c3b0:	682b      	ldr	r3, [r5, #0]
 810c3b2:	b103      	cbz	r3, 810c3b6 <_lseek_r+0x1e>
 810c3b4:	6023      	str	r3, [r4, #0]
 810c3b6:	bd38      	pop	{r3, r4, r5, pc}
 810c3b8:	10000448 	.word	0x10000448

0810c3bc <memmove>:
 810c3bc:	4288      	cmp	r0, r1
 810c3be:	b510      	push	{r4, lr}
 810c3c0:	eb01 0402 	add.w	r4, r1, r2
 810c3c4:	d902      	bls.n	810c3cc <memmove+0x10>
 810c3c6:	4284      	cmp	r4, r0
 810c3c8:	4623      	mov	r3, r4
 810c3ca:	d807      	bhi.n	810c3dc <memmove+0x20>
 810c3cc:	1e43      	subs	r3, r0, #1
 810c3ce:	42a1      	cmp	r1, r4
 810c3d0:	d008      	beq.n	810c3e4 <memmove+0x28>
 810c3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810c3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810c3da:	e7f8      	b.n	810c3ce <memmove+0x12>
 810c3dc:	4402      	add	r2, r0
 810c3de:	4601      	mov	r1, r0
 810c3e0:	428a      	cmp	r2, r1
 810c3e2:	d100      	bne.n	810c3e6 <memmove+0x2a>
 810c3e4:	bd10      	pop	{r4, pc}
 810c3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810c3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810c3ee:	e7f7      	b.n	810c3e0 <memmove+0x24>

0810c3f0 <__malloc_lock>:
 810c3f0:	4801      	ldr	r0, [pc, #4]	; (810c3f8 <__malloc_lock+0x8>)
 810c3f2:	f7fe bde2 	b.w	810afba <__retarget_lock_acquire_recursive>
 810c3f6:	bf00      	nop
 810c3f8:	1000043c 	.word	0x1000043c

0810c3fc <__malloc_unlock>:
 810c3fc:	4801      	ldr	r0, [pc, #4]	; (810c404 <__malloc_unlock+0x8>)
 810c3fe:	f7fe bddd 	b.w	810afbc <__retarget_lock_release_recursive>
 810c402:	bf00      	nop
 810c404:	1000043c 	.word	0x1000043c

0810c408 <_realloc_r>:
 810c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c40c:	4680      	mov	r8, r0
 810c40e:	4614      	mov	r4, r2
 810c410:	460e      	mov	r6, r1
 810c412:	b921      	cbnz	r1, 810c41e <_realloc_r+0x16>
 810c414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810c418:	4611      	mov	r1, r2
 810c41a:	f7ff bba1 	b.w	810bb60 <_malloc_r>
 810c41e:	b92a      	cbnz	r2, 810c42c <_realloc_r+0x24>
 810c420:	f7ff fb32 	bl	810ba88 <_free_r>
 810c424:	4625      	mov	r5, r4
 810c426:	4628      	mov	r0, r5
 810c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c42c:	f000 f835 	bl	810c49a <_malloc_usable_size_r>
 810c430:	4284      	cmp	r4, r0
 810c432:	4607      	mov	r7, r0
 810c434:	d802      	bhi.n	810c43c <_realloc_r+0x34>
 810c436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810c43a:	d812      	bhi.n	810c462 <_realloc_r+0x5a>
 810c43c:	4621      	mov	r1, r4
 810c43e:	4640      	mov	r0, r8
 810c440:	f7ff fb8e 	bl	810bb60 <_malloc_r>
 810c444:	4605      	mov	r5, r0
 810c446:	2800      	cmp	r0, #0
 810c448:	d0ed      	beq.n	810c426 <_realloc_r+0x1e>
 810c44a:	42bc      	cmp	r4, r7
 810c44c:	4622      	mov	r2, r4
 810c44e:	4631      	mov	r1, r6
 810c450:	bf28      	it	cs
 810c452:	463a      	movcs	r2, r7
 810c454:	f7fe fe32 	bl	810b0bc <memcpy>
 810c458:	4631      	mov	r1, r6
 810c45a:	4640      	mov	r0, r8
 810c45c:	f7ff fb14 	bl	810ba88 <_free_r>
 810c460:	e7e1      	b.n	810c426 <_realloc_r+0x1e>
 810c462:	4635      	mov	r5, r6
 810c464:	e7df      	b.n	810c426 <_realloc_r+0x1e>
	...

0810c468 <_read_r>:
 810c468:	b538      	push	{r3, r4, r5, lr}
 810c46a:	4d07      	ldr	r5, [pc, #28]	; (810c488 <_read_r+0x20>)
 810c46c:	4604      	mov	r4, r0
 810c46e:	4608      	mov	r0, r1
 810c470:	4611      	mov	r1, r2
 810c472:	2200      	movs	r2, #0
 810c474:	602a      	str	r2, [r5, #0]
 810c476:	461a      	mov	r2, r3
 810c478:	f7f5 ff2c 	bl	81022d4 <_read>
 810c47c:	1c43      	adds	r3, r0, #1
 810c47e:	d102      	bne.n	810c486 <_read_r+0x1e>
 810c480:	682b      	ldr	r3, [r5, #0]
 810c482:	b103      	cbz	r3, 810c486 <_read_r+0x1e>
 810c484:	6023      	str	r3, [r4, #0]
 810c486:	bd38      	pop	{r3, r4, r5, pc}
 810c488:	10000448 	.word	0x10000448

0810c48c <abort>:
 810c48c:	b508      	push	{r3, lr}
 810c48e:	2006      	movs	r0, #6
 810c490:	f000 f834 	bl	810c4fc <raise>
 810c494:	2001      	movs	r0, #1
 810c496:	f7f5 ff13 	bl	81022c0 <_exit>

0810c49a <_malloc_usable_size_r>:
 810c49a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c49e:	1f18      	subs	r0, r3, #4
 810c4a0:	2b00      	cmp	r3, #0
 810c4a2:	bfbc      	itt	lt
 810c4a4:	580b      	ldrlt	r3, [r1, r0]
 810c4a6:	18c0      	addlt	r0, r0, r3
 810c4a8:	4770      	bx	lr

0810c4aa <_raise_r>:
 810c4aa:	291f      	cmp	r1, #31
 810c4ac:	b538      	push	{r3, r4, r5, lr}
 810c4ae:	4604      	mov	r4, r0
 810c4b0:	460d      	mov	r5, r1
 810c4b2:	d904      	bls.n	810c4be <_raise_r+0x14>
 810c4b4:	2316      	movs	r3, #22
 810c4b6:	6003      	str	r3, [r0, #0]
 810c4b8:	f04f 30ff 	mov.w	r0, #4294967295
 810c4bc:	bd38      	pop	{r3, r4, r5, pc}
 810c4be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810c4c0:	b112      	cbz	r2, 810c4c8 <_raise_r+0x1e>
 810c4c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810c4c6:	b94b      	cbnz	r3, 810c4dc <_raise_r+0x32>
 810c4c8:	4620      	mov	r0, r4
 810c4ca:	f000 f831 	bl	810c530 <_getpid_r>
 810c4ce:	462a      	mov	r2, r5
 810c4d0:	4601      	mov	r1, r0
 810c4d2:	4620      	mov	r0, r4
 810c4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810c4d8:	f000 b818 	b.w	810c50c <_kill_r>
 810c4dc:	2b01      	cmp	r3, #1
 810c4de:	d00a      	beq.n	810c4f6 <_raise_r+0x4c>
 810c4e0:	1c59      	adds	r1, r3, #1
 810c4e2:	d103      	bne.n	810c4ec <_raise_r+0x42>
 810c4e4:	2316      	movs	r3, #22
 810c4e6:	6003      	str	r3, [r0, #0]
 810c4e8:	2001      	movs	r0, #1
 810c4ea:	e7e7      	b.n	810c4bc <_raise_r+0x12>
 810c4ec:	2400      	movs	r4, #0
 810c4ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810c4f2:	4628      	mov	r0, r5
 810c4f4:	4798      	blx	r3
 810c4f6:	2000      	movs	r0, #0
 810c4f8:	e7e0      	b.n	810c4bc <_raise_r+0x12>
	...

0810c4fc <raise>:
 810c4fc:	4b02      	ldr	r3, [pc, #8]	; (810c508 <raise+0xc>)
 810c4fe:	4601      	mov	r1, r0
 810c500:	6818      	ldr	r0, [r3, #0]
 810c502:	f7ff bfd2 	b.w	810c4aa <_raise_r>
 810c506:	bf00      	nop
 810c508:	1000001c 	.word	0x1000001c

0810c50c <_kill_r>:
 810c50c:	b538      	push	{r3, r4, r5, lr}
 810c50e:	4d07      	ldr	r5, [pc, #28]	; (810c52c <_kill_r+0x20>)
 810c510:	2300      	movs	r3, #0
 810c512:	4604      	mov	r4, r0
 810c514:	4608      	mov	r0, r1
 810c516:	4611      	mov	r1, r2
 810c518:	602b      	str	r3, [r5, #0]
 810c51a:	f7f5 fec1 	bl	81022a0 <_kill>
 810c51e:	1c43      	adds	r3, r0, #1
 810c520:	d102      	bne.n	810c528 <_kill_r+0x1c>
 810c522:	682b      	ldr	r3, [r5, #0]
 810c524:	b103      	cbz	r3, 810c528 <_kill_r+0x1c>
 810c526:	6023      	str	r3, [r4, #0]
 810c528:	bd38      	pop	{r3, r4, r5, pc}
 810c52a:	bf00      	nop
 810c52c:	10000448 	.word	0x10000448

0810c530 <_getpid_r>:
 810c530:	f7f5 beae 	b.w	8102290 <_getpid>

0810c534 <_init>:
 810c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c536:	bf00      	nop
 810c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c53a:	bc08      	pop	{r3}
 810c53c:	469e      	mov	lr, r3
 810c53e:	4770      	bx	lr

0810c540 <_fini>:
 810c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c542:	bf00      	nop
 810c544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c546:	bc08      	pop	{r3}
 810c548:	469e      	mov	lr, r3
 810c54a:	4770      	bx	lr
