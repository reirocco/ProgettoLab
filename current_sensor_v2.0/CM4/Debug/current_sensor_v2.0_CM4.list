
current_sensor_v2.0_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc9c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0810cf40  0810cf40  0001cf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d46c  0810d46c  0001d46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d474  0810d474  0001d474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d478  0810d478  0001d478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  0810d47c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000184  100001e8  0810d660  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  1000036c  0810d660  0002036c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bd02  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b86  00000000  00000000  0003bf16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001578  00000000  00000000  0003eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001470  00000000  00000000  00040018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d799  00000000  00000000  00041488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019d83  00000000  00000000  0007ec21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019ede3  00000000  00000000  000989a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00237787  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007338  00000000  00000000  002377d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810cf24 	.word	0x0810cf24

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810cf24 	.word	0x0810cf24

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <calibration>:
double realVRef;
uint32_t bMedia;
/* Functions -----------------------------------------------------------------*/


int calibration(int adcStartAddr, int adcPollForConversionAddr, int adcGetValue, int hadcAddr){
 8101138:	b580      	push	{r7, lr}
 810113a:	b090      	sub	sp, #64	; 0x40
 810113c:	af00      	add	r7, sp, #0
 810113e:	60f8      	str	r0, [r7, #12]
 8101140:	60b9      	str	r1, [r7, #8]
 8101142:	607a      	str	r2, [r7, #4]
 8101144:	603b      	str	r3, [r7, #0]
	// pointer to a adc start function
	void (*adcStartFcn)(int) = adcStartAddr;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	637b      	str	r3, [r7, #52]	; 0x34
	// pointer to a adc poll function
	HAL_StatusTypeDef (*adcPollForConversionFcn)(int, int) = adcPollForConversionAddr;
 810114a:	68bb      	ldr	r3, [r7, #8]
 810114c:	633b      	str	r3, [r7, #48]	; 0x30
	// pointer to a adc GetValue function
	uint32_t (*adcGetValueFcn)(int) = adcGetValue;
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* loop for at least 5 seconds and average the values to calculate the offset
	 * 5 seconds --> 5000ms / READING_ADC_TIME = cycle to do
	 */
	uint32_t bSum = 0;
 8101152:	2300      	movs	r3, #0
 8101154:	63fb      	str	r3, [r7, #60]	; 0x3c
	double sum;
	double average;
	int range = (int) CALIBRATION_TIME / READING_ADC_TIME;
 8101156:	4b3c      	ldr	r3, [pc, #240]	; (8101248 <calibration+0x110>)
 8101158:	62bb      	str	r3, [r7, #40]	; 0x28

	double rilevazione;
	for(int i = 0; i <= (int)range; i++){
 810115a:	2300      	movs	r3, #0
 810115c:	63bb      	str	r3, [r7, #56]	; 0x38
 810115e:	e023      	b.n	81011a8 <calibration+0x70>
		adcStartFcn(hadcAddr);
 8101160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101162:	6838      	ldr	r0, [r7, #0]
 8101164:	4798      	blx	r3
		adcPollForConversionFcn(hadcAddr,ADC_TIMEOUT);
 8101166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101168:	2164      	movs	r1, #100	; 0x64
 810116a:	6838      	ldr	r0, [r7, #0]
 810116c:	4798      	blx	r3
		rilevazione = adcGetValueFcn(hadcAddr);
 810116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101170:	6838      	ldr	r0, [r7, #0]
 8101172:	4798      	blx	r3
 8101174:	4603      	mov	r3, r0
 8101176:	4618      	mov	r0, r3
 8101178:	f7ff fa4c 	bl	8100614 <__aeabi_ui2d>
 810117c:	4602      	mov	r2, r0
 810117e:	460b      	mov	r3, r1
 8101180:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bSum = bSum + rilevazione;
 8101184:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101186:	f7ff fa45 	bl	8100614 <__aeabi_ui2d>
 810118a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 810118e:	f7ff f905 	bl	810039c <__adddf3>
 8101192:	4602      	mov	r2, r0
 8101194:	460b      	mov	r3, r1
 8101196:	4610      	mov	r0, r2
 8101198:	4619      	mov	r1, r3
 810119a:	f7ff fd8d 	bl	8100cb8 <__aeabi_d2uiz>
 810119e:	4603      	mov	r3, r0
 81011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i <= (int)range; i++){
 81011a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81011a4:	3301      	adds	r3, #1
 81011a6:	63bb      	str	r3, [r7, #56]	; 0x38
 81011a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81011aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81011ac:	429a      	cmp	r2, r3
 81011ae:	ddd7      	ble.n	8101160 <calibration+0x28>
	}
	sum = bSum * 3.3 /(ADC_RESOLUTION-1);	//convert binary sum to numeric value
 81011b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 81011b2:	f7ff fa2f 	bl	8100614 <__aeabi_ui2d>
 81011b6:	a320      	add	r3, pc, #128	; (adr r3, 8101238 <calibration+0x100>)
 81011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81011bc:	f7ff faa4 	bl	8100708 <__aeabi_dmul>
 81011c0:	4602      	mov	r2, r0
 81011c2:	460b      	mov	r3, r1
 81011c4:	4610      	mov	r0, r2
 81011c6:	4619      	mov	r1, r3
 81011c8:	a31d      	add	r3, pc, #116	; (adr r3, 8101240 <calibration+0x108>)
 81011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81011ce:	f7ff fbc5 	bl	810095c <__aeabi_ddiv>
 81011d2:	4602      	mov	r2, r0
 81011d4:	460b      	mov	r3, r1
 81011d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	average = sum / range;
 81011da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81011dc:	f7ff fa2a 	bl	8100634 <__aeabi_i2d>
 81011e0:	4602      	mov	r2, r0
 81011e2:	460b      	mov	r3, r1
 81011e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 81011e8:	f7ff fbb8 	bl	810095c <__aeabi_ddiv>
 81011ec:	4602      	mov	r2, r0
 81011ee:	460b      	mov	r3, r1
 81011f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	printf("%f\r\n", average);
 81011f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81011f8:	4814      	ldr	r0, [pc, #80]	; (810124c <calibration+0x114>)
 81011fa:	f008 f80f 	bl	810921c <iprintf>
	realVRef = VREF + (VREF - average);	// calculating voltage offset
 81011fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101202:	f04f 0000 	mov.w	r0, #0
 8101206:	4912      	ldr	r1, [pc, #72]	; (8101250 <calibration+0x118>)
 8101208:	f7ff f8c6 	bl	8100398 <__aeabi_dsub>
 810120c:	4602      	mov	r2, r0
 810120e:	460b      	mov	r3, r1
 8101210:	4610      	mov	r0, r2
 8101212:	4619      	mov	r1, r3
 8101214:	f04f 0200 	mov.w	r2, #0
 8101218:	4b0d      	ldr	r3, [pc, #52]	; (8101250 <calibration+0x118>)
 810121a:	f7ff f8bf 	bl	810039c <__adddf3>
 810121e:	4602      	mov	r2, r0
 8101220:	460b      	mov	r3, r1
 8101222:	490c      	ldr	r1, [pc, #48]	; (8101254 <calibration+0x11c>)
 8101224:	e9c1 2300 	strd	r2, r3, [r1]
}
 8101228:	bf00      	nop
 810122a:	4618      	mov	r0, r3
 810122c:	3740      	adds	r7, #64	; 0x40
 810122e:	46bd      	mov	sp, r7
 8101230:	bd80      	pop	{r7, pc}
 8101232:	bf00      	nop
 8101234:	f3af 8000 	nop.w
 8101238:	66666666 	.word	0x66666666
 810123c:	400a6666 	.word	0x400a6666
 8101240:	00000000 	.word	0x00000000
 8101244:	40affe00 	.word	0x40affe00
 8101248:	00125703 	.word	0x00125703
 810124c:	0810cf40 	.word	0x0810cf40
 8101250:	40040000 	.word	0x40040000
 8101254:	10000208 	.word	0x10000208

08101258 <getFilteredValue>:


double getFilteredValue(int adcStartAddr, int adcPollForConversionAddr, int adcGetValue, int hadcAddr){
 8101258:	b580      	push	{r7, lr}
 810125a:	b08e      	sub	sp, #56	; 0x38
 810125c:	af00      	add	r7, sp, #0
 810125e:	60f8      	str	r0, [r7, #12]
 8101260:	60b9      	str	r1, [r7, #8]
 8101262:	607a      	str	r2, [r7, #4]
 8101264:	603b      	str	r3, [r7, #0]
	// pointer to a adc start function
	void (*adcStartFcn)(int) = adcStartAddr;
 8101266:	68fb      	ldr	r3, [r7, #12]
 8101268:	637b      	str	r3, [r7, #52]	; 0x34
	// pointer to a adc poll function
	HAL_StatusTypeDef (*adcPollForConversionFcn)(int, int) = adcPollForConversionAddr;
 810126a:	68bb      	ldr	r3, [r7, #8]
 810126c:	633b      	str	r3, [r7, #48]	; 0x30
	// pointer to a adc GetValue function
	uint32_t (*adcGetValueFcn)(int) = adcGetValue;
 810126e:	687b      	ldr	r3, [r7, #4]
 8101270:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t CountValue;
	double delta;
	double voltMedia;
	double current;

	adcStartFcn(hadcAddr);
 8101272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101274:	6838      	ldr	r0, [r7, #0]
 8101276:	4798      	blx	r3
	adcPollForConversionFcn(hadcAddr,ADC_TIMEOUT);
 8101278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810127a:	2164      	movs	r1, #100	; 0x64
 810127c:	6838      	ldr	r0, [r7, #0]
 810127e:	4798      	blx	r3
	CountValue = adcGetValueFcn(hadcAddr);
 8101280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101282:	6838      	ldr	r0, [r7, #0]
 8101284:	4798      	blx	r3
 8101286:	62b8      	str	r0, [r7, #40]	; 0x28

	if (bMedia > CountValue){
 8101288:	4b49      	ldr	r3, [pc, #292]	; (81013b0 <getFilteredValue+0x158>)
 810128a:	681b      	ldr	r3, [r3, #0]
 810128c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810128e:	429a      	cmp	r2, r3
 8101290:	d222      	bcs.n	81012d8 <getFilteredValue+0x80>
		delta = ((double)(bMedia - CountValue)) / FILTER;
 8101292:	4b47      	ldr	r3, [pc, #284]	; (81013b0 <getFilteredValue+0x158>)
 8101294:	681a      	ldr	r2, [r3, #0]
 8101296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101298:	1ad3      	subs	r3, r2, r3
 810129a:	4618      	mov	r0, r3
 810129c:	f7ff f9ba 	bl	8100614 <__aeabi_ui2d>
 81012a0:	f04f 0200 	mov.w	r2, #0
 81012a4:	4b43      	ldr	r3, [pc, #268]	; (81013b4 <getFilteredValue+0x15c>)
 81012a6:	f7ff fb59 	bl	810095c <__aeabi_ddiv>
 81012aa:	4602      	mov	r2, r0
 81012ac:	460b      	mov	r3, r1
 81012ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
		bMedia -= delta;
 81012b2:	4b3f      	ldr	r3, [pc, #252]	; (81013b0 <getFilteredValue+0x158>)
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	4618      	mov	r0, r3
 81012b8:	f7ff f9ac 	bl	8100614 <__aeabi_ui2d>
 81012bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 81012c0:	f7ff f86a 	bl	8100398 <__aeabi_dsub>
 81012c4:	4602      	mov	r2, r0
 81012c6:	460b      	mov	r3, r1
 81012c8:	4610      	mov	r0, r2
 81012ca:	4619      	mov	r1, r3
 81012cc:	f7ff fcf4 	bl	8100cb8 <__aeabi_d2uiz>
 81012d0:	4603      	mov	r3, r0
 81012d2:	4a37      	ldr	r2, [pc, #220]	; (81013b0 <getFilteredValue+0x158>)
 81012d4:	6013      	str	r3, [r2, #0]
 81012d6:	e026      	b.n	8101326 <getFilteredValue+0xce>
	}else if (bMedia < CountValue){
 81012d8:	4b35      	ldr	r3, [pc, #212]	; (81013b0 <getFilteredValue+0x158>)
 81012da:	681b      	ldr	r3, [r3, #0]
 81012dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81012de:	429a      	cmp	r2, r3
 81012e0:	d921      	bls.n	8101326 <getFilteredValue+0xce>
		delta = ((double)(CountValue - bMedia )) / FILTER;
 81012e2:	4b33      	ldr	r3, [pc, #204]	; (81013b0 <getFilteredValue+0x158>)
 81012e4:	681b      	ldr	r3, [r3, #0]
 81012e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81012e8:	1ad3      	subs	r3, r2, r3
 81012ea:	4618      	mov	r0, r3
 81012ec:	f7ff f992 	bl	8100614 <__aeabi_ui2d>
 81012f0:	f04f 0200 	mov.w	r2, #0
 81012f4:	4b2f      	ldr	r3, [pc, #188]	; (81013b4 <getFilteredValue+0x15c>)
 81012f6:	f7ff fb31 	bl	810095c <__aeabi_ddiv>
 81012fa:	4602      	mov	r2, r0
 81012fc:	460b      	mov	r3, r1
 81012fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
		bMedia += delta;
 8101302:	4b2b      	ldr	r3, [pc, #172]	; (81013b0 <getFilteredValue+0x158>)
 8101304:	681b      	ldr	r3, [r3, #0]
 8101306:	4618      	mov	r0, r3
 8101308:	f7ff f984 	bl	8100614 <__aeabi_ui2d>
 810130c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8101310:	f7ff f844 	bl	810039c <__adddf3>
 8101314:	4602      	mov	r2, r0
 8101316:	460b      	mov	r3, r1
 8101318:	4610      	mov	r0, r2
 810131a:	4619      	mov	r1, r3
 810131c:	f7ff fccc 	bl	8100cb8 <__aeabi_d2uiz>
 8101320:	4603      	mov	r3, r0
 8101322:	4a23      	ldr	r2, [pc, #140]	; (81013b0 <getFilteredValue+0x158>)
 8101324:	6013      	str	r3, [r2, #0]
	}


	voltMedia = bMedia * 3.3 /(ADC_RESOLUTION-1);
 8101326:	4b22      	ldr	r3, [pc, #136]	; (81013b0 <getFilteredValue+0x158>)
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	4618      	mov	r0, r3
 810132c:	f7ff f972 	bl	8100614 <__aeabi_ui2d>
 8101330:	a319      	add	r3, pc, #100	; (adr r3, 8101398 <getFilteredValue+0x140>)
 8101332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101336:	f7ff f9e7 	bl	8100708 <__aeabi_dmul>
 810133a:	4602      	mov	r2, r0
 810133c:	460b      	mov	r3, r1
 810133e:	4610      	mov	r0, r2
 8101340:	4619      	mov	r1, r3
 8101342:	a317      	add	r3, pc, #92	; (adr r3, 81013a0 <getFilteredValue+0x148>)
 8101344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101348:	f7ff fb08 	bl	810095c <__aeabi_ddiv>
 810134c:	4602      	mov	r2, r0
 810134e:	460b      	mov	r3, r1
 8101350:	e9c7 2306 	strd	r2, r3, [r7, #24]
	current =  (realVRef - voltMedia) / 0.4;
 8101354:	4b18      	ldr	r3, [pc, #96]	; (81013b8 <getFilteredValue+0x160>)
 8101356:	e9d3 0100 	ldrd	r0, r1, [r3]
 810135a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810135e:	f7ff f81b 	bl	8100398 <__aeabi_dsub>
 8101362:	4602      	mov	r2, r0
 8101364:	460b      	mov	r3, r1
 8101366:	4610      	mov	r0, r2
 8101368:	4619      	mov	r1, r3
 810136a:	a30f      	add	r3, pc, #60	; (adr r3, 81013a8 <getFilteredValue+0x150>)
 810136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101370:	f7ff faf4 	bl	810095c <__aeabi_ddiv>
 8101374:	4602      	mov	r2, r0
 8101376:	460b      	mov	r3, r1
 8101378:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return current;
 810137c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101380:	ec43 2b17 	vmov	d7, r2, r3
}
 8101384:	eeb0 0a47 	vmov.f32	s0, s14
 8101388:	eef0 0a67 	vmov.f32	s1, s15
 810138c:	3738      	adds	r7, #56	; 0x38
 810138e:	46bd      	mov	sp, r7
 8101390:	bd80      	pop	{r7, pc}
 8101392:	bf00      	nop
 8101394:	f3af 8000 	nop.w
 8101398:	66666666 	.word	0x66666666
 810139c:	400a6666 	.word	0x400a6666
 81013a0:	00000000 	.word	0x00000000
 81013a4:	40affe00 	.word	0x40affe00
 81013a8:	9999999a 	.word	0x9999999a
 81013ac:	3fd99999 	.word	0x3fd99999
 81013b0:	10000210 	.word	0x10000210
 81013b4:	40200000 	.word	0x40200000
 81013b8:	10000208 	.word	0x10000208

081013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81013bc:	b580      	push	{r7, lr}
 81013be:	b084      	sub	sp, #16
 81013c0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81013c2:	4b31      	ldr	r3, [pc, #196]	; (8101488 <main+0xcc>)
 81013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c8:	4a2f      	ldr	r2, [pc, #188]	; (8101488 <main+0xcc>)
 81013ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013d2:	4b2d      	ldr	r3, [pc, #180]	; (8101488 <main+0xcc>)
 81013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81013dc:	607b      	str	r3, [r7, #4]
 81013de:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81013e0:	2001      	movs	r0, #1
 81013e2:	f002 fb8f 	bl	8103b04 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81013e6:	f002 fc19 	bl	8103c1c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81013ea:	2201      	movs	r2, #1
 81013ec:	2102      	movs	r1, #2
 81013ee:	2000      	movs	r0, #0
 81013f0:	f002 fb9a 	bl	8103b28 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81013f4:	4b25      	ldr	r3, [pc, #148]	; (810148c <main+0xd0>)
 81013f6:	681b      	ldr	r3, [r3, #0]
 81013f8:	091b      	lsrs	r3, r3, #4
 81013fa:	f003 030f 	and.w	r3, r3, #15
 81013fe:	2b07      	cmp	r3, #7
 8101400:	d108      	bne.n	8101414 <main+0x58>
 8101402:	4b23      	ldr	r3, [pc, #140]	; (8101490 <main+0xd4>)
 8101404:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101408:	4a21      	ldr	r2, [pc, #132]	; (8101490 <main+0xd4>)
 810140a:	f043 0301 	orr.w	r3, r3, #1
 810140e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101412:	e007      	b.n	8101424 <main+0x68>
 8101414:	4b1e      	ldr	r3, [pc, #120]	; (8101490 <main+0xd4>)
 8101416:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810141a:	4a1d      	ldr	r2, [pc, #116]	; (8101490 <main+0xd4>)
 810141c:	f043 0301 	orr.w	r3, r3, #1
 8101420:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101424:	f000 fc8c 	bl	8101d40 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101428:	f000 f9b6 	bl	8101798 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 810142c:	f000 f968 	bl	8101700 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8101430:	f000 f842 	bl	81014b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8101434:	f000 f8b8 	bl	81015a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8101438:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 810143c:	f000 fd34 	bl	8101ea8 <HAL_Delay>
  printf("Start calibration...\r\n");
 8101440:	4814      	ldr	r0, [pc, #80]	; (8101494 <main+0xd8>)
 8101442:	f007 ff71 	bl	8109328 <puts>
  calibration(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
 8101446:	4814      	ldr	r0, [pc, #80]	; (8101498 <main+0xdc>)
 8101448:	4914      	ldr	r1, [pc, #80]	; (810149c <main+0xe0>)
 810144a:	4a15      	ldr	r2, [pc, #84]	; (81014a0 <main+0xe4>)
 810144c:	4b15      	ldr	r3, [pc, #84]	; (81014a4 <main+0xe8>)
 810144e:	f7ff fe73 	bl	8101138 <calibration>
  printf("Real VREF --> %f\r\n", realVRef);
 8101452:	4b15      	ldr	r3, [pc, #84]	; (81014a8 <main+0xec>)
 8101454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101458:	4814      	ldr	r0, [pc, #80]	; (81014ac <main+0xf0>)
 810145a:	f007 fedf 	bl	810921c <iprintf>
  printf("Calibrated.\r\n");
 810145e:	4814      	ldr	r0, [pc, #80]	; (81014b0 <main+0xf4>)
 8101460:	f007 ff62 	bl	8109328 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value = getFilteredValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
 8101464:	480c      	ldr	r0, [pc, #48]	; (8101498 <main+0xdc>)
 8101466:	490d      	ldr	r1, [pc, #52]	; (810149c <main+0xe0>)
 8101468:	4a0d      	ldr	r2, [pc, #52]	; (81014a0 <main+0xe4>)
 810146a:	4b0e      	ldr	r3, [pc, #56]	; (81014a4 <main+0xe8>)
 810146c:	f7ff fef4 	bl	8101258 <getFilteredValue>
 8101470:	ed87 0b02 	vstr	d0, [r7, #8]
	  printf("%f\r\n",value);
 8101474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101478:	480e      	ldr	r0, [pc, #56]	; (81014b4 <main+0xf8>)
 810147a:	f007 fecf 	bl	810921c <iprintf>
	  HAL_Delay(10);
 810147e:	200a      	movs	r0, #10
 8101480:	f000 fd12 	bl	8101ea8 <HAL_Delay>
	  value = getFilteredValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
 8101484:	e7ee      	b.n	8101464 <main+0xa8>
 8101486:	bf00      	nop
 8101488:	58024400 	.word	0x58024400
 810148c:	e000ed00 	.word	0xe000ed00
 8101490:	58026400 	.word	0x58026400
 8101494:	0810cf48 	.word	0x0810cf48
 8101498:	08102611 	.word	0x08102611
 810149c:	081027a5 	.word	0x081027a5
 81014a0:	0810298d 	.word	0x0810298d
 81014a4:	10000214 	.word	0x10000214
 81014a8:	10000208 	.word	0x10000208
 81014ac:	0810cf60 	.word	0x0810cf60
 81014b0:	0810cf74 	.word	0x0810cf74
 81014b4:	0810cf40 	.word	0x0810cf40

081014b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b08a      	sub	sp, #40	; 0x28
 81014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81014be:	f107 031c 	add.w	r3, r7, #28
 81014c2:	2200      	movs	r2, #0
 81014c4:	601a      	str	r2, [r3, #0]
 81014c6:	605a      	str	r2, [r3, #4]
 81014c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81014ca:	463b      	mov	r3, r7
 81014cc:	2200      	movs	r2, #0
 81014ce:	601a      	str	r2, [r3, #0]
 81014d0:	605a      	str	r2, [r3, #4]
 81014d2:	609a      	str	r2, [r3, #8]
 81014d4:	60da      	str	r2, [r3, #12]
 81014d6:	611a      	str	r2, [r3, #16]
 81014d8:	615a      	str	r2, [r3, #20]
 81014da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81014dc:	4b2f      	ldr	r3, [pc, #188]	; (810159c <MX_ADC1_Init+0xe4>)
 81014de:	4a30      	ldr	r2, [pc, #192]	; (81015a0 <MX_ADC1_Init+0xe8>)
 81014e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81014e2:	4b2e      	ldr	r3, [pc, #184]	; (810159c <MX_ADC1_Init+0xe4>)
 81014e4:	2200      	movs	r2, #0
 81014e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 81014e8:	4b2c      	ldr	r3, [pc, #176]	; (810159c <MX_ADC1_Init+0xe4>)
 81014ea:	2208      	movs	r2, #8
 81014ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81014ee:	4b2b      	ldr	r3, [pc, #172]	; (810159c <MX_ADC1_Init+0xe4>)
 81014f0:	2200      	movs	r2, #0
 81014f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81014f4:	4b29      	ldr	r3, [pc, #164]	; (810159c <MX_ADC1_Init+0xe4>)
 81014f6:	2204      	movs	r2, #4
 81014f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81014fa:	4b28      	ldr	r3, [pc, #160]	; (810159c <MX_ADC1_Init+0xe4>)
 81014fc:	2200      	movs	r2, #0
 81014fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101500:	4b26      	ldr	r3, [pc, #152]	; (810159c <MX_ADC1_Init+0xe4>)
 8101502:	2200      	movs	r2, #0
 8101504:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101506:	4b25      	ldr	r3, [pc, #148]	; (810159c <MX_ADC1_Init+0xe4>)
 8101508:	2201      	movs	r2, #1
 810150a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810150c:	4b23      	ldr	r3, [pc, #140]	; (810159c <MX_ADC1_Init+0xe4>)
 810150e:	2200      	movs	r2, #0
 8101510:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101512:	4b22      	ldr	r3, [pc, #136]	; (810159c <MX_ADC1_Init+0xe4>)
 8101514:	2200      	movs	r2, #0
 8101516:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8101518:	4b20      	ldr	r3, [pc, #128]	; (810159c <MX_ADC1_Init+0xe4>)
 810151a:	2200      	movs	r2, #0
 810151c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810151e:	4b1f      	ldr	r3, [pc, #124]	; (810159c <MX_ADC1_Init+0xe4>)
 8101520:	2200      	movs	r2, #0
 8101522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101524:	4b1d      	ldr	r3, [pc, #116]	; (810159c <MX_ADC1_Init+0xe4>)
 8101526:	2200      	movs	r2, #0
 8101528:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810152a:	4b1c      	ldr	r3, [pc, #112]	; (810159c <MX_ADC1_Init+0xe4>)
 810152c:	2200      	movs	r2, #0
 810152e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101530:	4b1a      	ldr	r3, [pc, #104]	; (810159c <MX_ADC1_Init+0xe4>)
 8101532:	2200      	movs	r2, #0
 8101534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101538:	4818      	ldr	r0, [pc, #96]	; (810159c <MX_ADC1_Init+0xe4>)
 810153a:	f000 fec7 	bl	81022cc <HAL_ADC_Init>
 810153e:	4603      	mov	r3, r0
 8101540:	2b00      	cmp	r3, #0
 8101542:	d001      	beq.n	8101548 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8101544:	f000 f98e 	bl	8101864 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101548:	2300      	movs	r3, #0
 810154a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810154c:	f107 031c 	add.w	r3, r7, #28
 8101550:	4619      	mov	r1, r3
 8101552:	4812      	ldr	r0, [pc, #72]	; (810159c <MX_ADC1_Init+0xe4>)
 8101554:	f001 ff32 	bl	81033bc <HAL_ADCEx_MultiModeConfigChannel>
 8101558:	4603      	mov	r3, r0
 810155a:	2b00      	cmp	r3, #0
 810155c:	d001      	beq.n	8101562 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 810155e:	f000 f981 	bl	8101864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8101562:	4b10      	ldr	r3, [pc, #64]	; (81015a4 <MX_ADC1_Init+0xec>)
 8101564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101566:	2306      	movs	r3, #6
 8101568:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810156a:	2300      	movs	r3, #0
 810156c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810156e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8101572:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101574:	2304      	movs	r3, #4
 8101576:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101578:	2300      	movs	r3, #0
 810157a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810157c:	2300      	movs	r3, #0
 810157e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101580:	463b      	mov	r3, r7
 8101582:	4619      	mov	r1, r3
 8101584:	4805      	ldr	r0, [pc, #20]	; (810159c <MX_ADC1_Init+0xe4>)
 8101586:	f001 fa0f 	bl	81029a8 <HAL_ADC_ConfigChannel>
 810158a:	4603      	mov	r3, r0
 810158c:	2b00      	cmp	r3, #0
 810158e:	d001      	beq.n	8101594 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101590:	f000 f968 	bl	8101864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8101594:	bf00      	nop
 8101596:	3728      	adds	r7, #40	; 0x28
 8101598:	46bd      	mov	sp, r7
 810159a:	bd80      	pop	{r7, pc}
 810159c:	10000214 	.word	0x10000214
 81015a0:	40022000 	.word	0x40022000
 81015a4:	3ef08000 	.word	0x3ef08000

081015a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81015a8:	b580      	push	{r7, lr}
 81015aa:	b09a      	sub	sp, #104	; 0x68
 81015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81015ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81015b2:	2200      	movs	r2, #0
 81015b4:	601a      	str	r2, [r3, #0]
 81015b6:	605a      	str	r2, [r3, #4]
 81015b8:	609a      	str	r2, [r3, #8]
 81015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81015bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81015c0:	2200      	movs	r2, #0
 81015c2:	601a      	str	r2, [r3, #0]
 81015c4:	605a      	str	r2, [r3, #4]
 81015c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81015c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81015cc:	2200      	movs	r2, #0
 81015ce:	601a      	str	r2, [r3, #0]
 81015d0:	605a      	str	r2, [r3, #4]
 81015d2:	609a      	str	r2, [r3, #8]
 81015d4:	60da      	str	r2, [r3, #12]
 81015d6:	611a      	str	r2, [r3, #16]
 81015d8:	615a      	str	r2, [r3, #20]
 81015da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81015dc:	1d3b      	adds	r3, r7, #4
 81015de:	222c      	movs	r2, #44	; 0x2c
 81015e0:	2100      	movs	r1, #0
 81015e2:	4618      	mov	r0, r3
 81015e4:	f006 ff98 	bl	8108518 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81015e8:	4b43      	ldr	r3, [pc, #268]	; (81016f8 <MX_TIM1_Init+0x150>)
 81015ea:	4a44      	ldr	r2, [pc, #272]	; (81016fc <MX_TIM1_Init+0x154>)
 81015ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81015ee:	4b42      	ldr	r3, [pc, #264]	; (81016f8 <MX_TIM1_Init+0x150>)
 81015f0:	22ef      	movs	r2, #239	; 0xef
 81015f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81015f4:	4b40      	ldr	r3, [pc, #256]	; (81016f8 <MX_TIM1_Init+0x150>)
 81015f6:	2200      	movs	r2, #0
 81015f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81015fa:	4b3f      	ldr	r3, [pc, #252]	; (81016f8 <MX_TIM1_Init+0x150>)
 81015fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101602:	4b3d      	ldr	r3, [pc, #244]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101604:	2200      	movs	r2, #0
 8101606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101608:	4b3b      	ldr	r3, [pc, #236]	; (81016f8 <MX_TIM1_Init+0x150>)
 810160a:	2200      	movs	r2, #0
 810160c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810160e:	4b3a      	ldr	r3, [pc, #232]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101610:	2200      	movs	r2, #0
 8101612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101614:	4838      	ldr	r0, [pc, #224]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101616:	f004 fe73 	bl	8106300 <HAL_TIM_Base_Init>
 810161a:	4603      	mov	r3, r0
 810161c:	2b00      	cmp	r3, #0
 810161e:	d001      	beq.n	8101624 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101620:	f000 f920 	bl	8101864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101628:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810162a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810162e:	4619      	mov	r1, r3
 8101630:	4831      	ldr	r0, [pc, #196]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101632:	f005 f831 	bl	8106698 <HAL_TIM_ConfigClockSource>
 8101636:	4603      	mov	r3, r0
 8101638:	2b00      	cmp	r3, #0
 810163a:	d001      	beq.n	8101640 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 810163c:	f000 f912 	bl	8101864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101640:	482d      	ldr	r0, [pc, #180]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101642:	f004 feb4 	bl	81063ae <HAL_TIM_PWM_Init>
 8101646:	4603      	mov	r3, r0
 8101648:	2b00      	cmp	r3, #0
 810164a:	d001      	beq.n	8101650 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 810164c:	f000 f90a 	bl	8101864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101650:	2300      	movs	r3, #0
 8101652:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101654:	2300      	movs	r3, #0
 8101656:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101658:	2300      	movs	r3, #0
 810165a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810165c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101660:	4619      	mov	r1, r3
 8101662:	4825      	ldr	r0, [pc, #148]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101664:	f005 fd1c 	bl	81070a0 <HAL_TIMEx_MasterConfigSynchronization>
 8101668:	4603      	mov	r3, r0
 810166a:	2b00      	cmp	r3, #0
 810166c:	d001      	beq.n	8101672 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810166e:	f000 f8f9 	bl	8101864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101672:	2360      	movs	r3, #96	; 0x60
 8101674:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 25;
 8101676:	2319      	movs	r3, #25
 8101678:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810167a:	2300      	movs	r3, #0
 810167c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810167e:	2300      	movs	r3, #0
 8101680:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101682:	2300      	movs	r3, #0
 8101684:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101686:	2300      	movs	r3, #0
 8101688:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810168a:	2300      	movs	r3, #0
 810168c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101692:	2200      	movs	r2, #0
 8101694:	4619      	mov	r1, r3
 8101696:	4818      	ldr	r0, [pc, #96]	; (81016f8 <MX_TIM1_Init+0x150>)
 8101698:	f004 feea 	bl	8106470 <HAL_TIM_PWM_ConfigChannel>
 810169c:	4603      	mov	r3, r0
 810169e:	2b00      	cmp	r3, #0
 81016a0:	d001      	beq.n	81016a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81016a2:	f000 f8df 	bl	8101864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81016a6:	2300      	movs	r3, #0
 81016a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81016aa:	2300      	movs	r3, #0
 81016ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81016ae:	2300      	movs	r3, #0
 81016b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81016b2:	2300      	movs	r3, #0
 81016b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81016b6:	2300      	movs	r3, #0
 81016b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81016ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81016be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81016c0:	2300      	movs	r3, #0
 81016c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81016c4:	2300      	movs	r3, #0
 81016c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81016c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81016cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81016ce:	2300      	movs	r3, #0
 81016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81016d2:	2300      	movs	r3, #0
 81016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81016d6:	1d3b      	adds	r3, r7, #4
 81016d8:	4619      	mov	r1, r3
 81016da:	4807      	ldr	r0, [pc, #28]	; (81016f8 <MX_TIM1_Init+0x150>)
 81016dc:	f005 fd6e 	bl	81071bc <HAL_TIMEx_ConfigBreakDeadTime>
 81016e0:	4603      	mov	r3, r0
 81016e2:	2b00      	cmp	r3, #0
 81016e4:	d001      	beq.n	81016ea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 81016e6:	f000 f8bd 	bl	8101864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81016ea:	4803      	ldr	r0, [pc, #12]	; (81016f8 <MX_TIM1_Init+0x150>)
 81016ec:	f000 f96c 	bl	81019c8 <HAL_TIM_MspPostInit>

}
 81016f0:	bf00      	nop
 81016f2:	3768      	adds	r7, #104	; 0x68
 81016f4:	46bd      	mov	sp, r7
 81016f6:	bd80      	pop	{r7, pc}
 81016f8:	10000278 	.word	0x10000278
 81016fc:	40010000 	.word	0x40010000

08101700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101700:	b580      	push	{r7, lr}
 8101702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101704:	4b22      	ldr	r3, [pc, #136]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101706:	4a23      	ldr	r2, [pc, #140]	; (8101794 <MX_USART3_UART_Init+0x94>)
 8101708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810170a:	4b21      	ldr	r3, [pc, #132]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101712:	4b1f      	ldr	r3, [pc, #124]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101714:	2200      	movs	r2, #0
 8101716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101718:	4b1d      	ldr	r3, [pc, #116]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810171a:	2200      	movs	r2, #0
 810171c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810171e:	4b1c      	ldr	r3, [pc, #112]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101720:	2200      	movs	r2, #0
 8101722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101724:	4b1a      	ldr	r3, [pc, #104]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101726:	220c      	movs	r2, #12
 8101728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810172a:	4b19      	ldr	r3, [pc, #100]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810172c:	2200      	movs	r2, #0
 810172e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101730:	4b17      	ldr	r3, [pc, #92]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101732:	2200      	movs	r2, #0
 8101734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101736:	4b16      	ldr	r3, [pc, #88]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101738:	2200      	movs	r2, #0
 810173a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810173c:	4b14      	ldr	r3, [pc, #80]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810173e:	2200      	movs	r2, #0
 8101740:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101742:	4b13      	ldr	r3, [pc, #76]	; (8101790 <MX_USART3_UART_Init+0x90>)
 8101744:	2200      	movs	r2, #0
 8101746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101748:	4811      	ldr	r0, [pc, #68]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810174a:	f005 fdb5 	bl	81072b8 <HAL_UART_Init>
 810174e:	4603      	mov	r3, r0
 8101750:	2b00      	cmp	r3, #0
 8101752:	d001      	beq.n	8101758 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101754:	f000 f886 	bl	8101864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101758:	2100      	movs	r1, #0
 810175a:	480d      	ldr	r0, [pc, #52]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810175c:	f006 fde8 	bl	8108330 <HAL_UARTEx_SetTxFifoThreshold>
 8101760:	4603      	mov	r3, r0
 8101762:	2b00      	cmp	r3, #0
 8101764:	d001      	beq.n	810176a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101766:	f000 f87d 	bl	8101864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810176a:	2100      	movs	r1, #0
 810176c:	4808      	ldr	r0, [pc, #32]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810176e:	f006 fe1d 	bl	81083ac <HAL_UARTEx_SetRxFifoThreshold>
 8101772:	4603      	mov	r3, r0
 8101774:	2b00      	cmp	r3, #0
 8101776:	d001      	beq.n	810177c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101778:	f000 f874 	bl	8101864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810177c:	4804      	ldr	r0, [pc, #16]	; (8101790 <MX_USART3_UART_Init+0x90>)
 810177e:	f006 fd9e 	bl	81082be <HAL_UARTEx_DisableFifoMode>
 8101782:	4603      	mov	r3, r0
 8101784:	2b00      	cmp	r3, #0
 8101786:	d001      	beq.n	810178c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101788:	f000 f86c 	bl	8101864 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810178c:	bf00      	nop
 810178e:	bd80      	pop	{r7, pc}
 8101790:	100002c4 	.word	0x100002c4
 8101794:	40004800 	.word	0x40004800

08101798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101798:	b580      	push	{r7, lr}
 810179a:	b088      	sub	sp, #32
 810179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810179e:	f107 030c 	add.w	r3, r7, #12
 81017a2:	2200      	movs	r2, #0
 81017a4:	601a      	str	r2, [r3, #0]
 81017a6:	605a      	str	r2, [r3, #4]
 81017a8:	609a      	str	r2, [r3, #8]
 81017aa:	60da      	str	r2, [r3, #12]
 81017ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81017ae:	4b22      	ldr	r3, [pc, #136]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017b4:	4a20      	ldr	r2, [pc, #128]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017b6:	f043 0301 	orr.w	r3, r3, #1
 81017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017be:	4b1e      	ldr	r3, [pc, #120]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017c4:	f003 0301 	and.w	r3, r3, #1
 81017c8:	60bb      	str	r3, [r7, #8]
 81017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81017cc:	4b1a      	ldr	r3, [pc, #104]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017d2:	4a19      	ldr	r2, [pc, #100]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017d4:	f043 0310 	orr.w	r3, r3, #16
 81017d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017dc:	4b16      	ldr	r3, [pc, #88]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017e2:	f003 0310 	and.w	r3, r3, #16
 81017e6:	607b      	str	r3, [r7, #4]
 81017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81017ea:	4b13      	ldr	r3, [pc, #76]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017f0:	4a11      	ldr	r2, [pc, #68]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017f2:	f043 0308 	orr.w	r3, r3, #8
 81017f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017fa:	4b0f      	ldr	r3, [pc, #60]	; (8101838 <MX_GPIO_Init+0xa0>)
 81017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101800:	f003 0308 	and.w	r3, r3, #8
 8101804:	603b      	str	r3, [r7, #0]
 8101806:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8101808:	2200      	movs	r2, #0
 810180a:	2120      	movs	r1, #32
 810180c:	480b      	ldr	r0, [pc, #44]	; (810183c <MX_GPIO_Init+0xa4>)
 810180e:	f002 f95f 	bl	8103ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101812:	2320      	movs	r3, #32
 8101814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101816:	2301      	movs	r3, #1
 8101818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810181a:	2300      	movs	r3, #0
 810181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810181e:	2300      	movs	r3, #0
 8101820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101822:	f107 030c 	add.w	r3, r7, #12
 8101826:	4619      	mov	r1, r3
 8101828:	4804      	ldr	r0, [pc, #16]	; (810183c <MX_GPIO_Init+0xa4>)
 810182a:	f001 ffa1 	bl	8103770 <HAL_GPIO_Init>

}
 810182e:	bf00      	nop
 8101830:	3720      	adds	r7, #32
 8101832:	46bd      	mov	sp, r7
 8101834:	bd80      	pop	{r7, pc}
 8101836:	bf00      	nop
 8101838:	58024400 	.word	0x58024400
 810183c:	58020000 	.word	0x58020000

08101840 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
 8101840:	b580      	push	{r7, lr}
 8101842:	b082      	sub	sp, #8
 8101844:	af00      	add	r7, sp, #0
 8101846:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8101848:	1d39      	adds	r1, r7, #4
 810184a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810184e:	2201      	movs	r2, #1
 8101850:	4803      	ldr	r0, [pc, #12]	; (8101860 <__io_putchar+0x20>)
 8101852:	f005 fd81 	bl	8107358 <HAL_UART_Transmit>
	return ch;
 8101856:	687b      	ldr	r3, [r7, #4]
}
 8101858:	4618      	mov	r0, r3
 810185a:	3708      	adds	r7, #8
 810185c:	46bd      	mov	sp, r7
 810185e:	bd80      	pop	{r7, pc}
 8101860:	100002c4 	.word	0x100002c4

08101864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101864:	b480      	push	{r7}
 8101866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101868:	b672      	cpsid	i
}
 810186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810186c:	e7fe      	b.n	810186c <Error_Handler+0x8>
	...

08101870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101870:	b480      	push	{r7}
 8101872:	b083      	sub	sp, #12
 8101874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101876:	4b0a      	ldr	r3, [pc, #40]	; (81018a0 <HAL_MspInit+0x30>)
 8101878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810187c:	4a08      	ldr	r2, [pc, #32]	; (81018a0 <HAL_MspInit+0x30>)
 810187e:	f043 0302 	orr.w	r3, r3, #2
 8101882:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101886:	4b06      	ldr	r3, [pc, #24]	; (81018a0 <HAL_MspInit+0x30>)
 8101888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810188c:	f003 0302 	and.w	r3, r3, #2
 8101890:	607b      	str	r3, [r7, #4]
 8101892:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101894:	bf00      	nop
 8101896:	370c      	adds	r7, #12
 8101898:	46bd      	mov	sp, r7
 810189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810189e:	4770      	bx	lr
 81018a0:	58024400 	.word	0x58024400

081018a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81018a4:	b580      	push	{r7, lr}
 81018a6:	b0b8      	sub	sp, #224	; 0xe0
 81018a8:	af00      	add	r7, sp, #0
 81018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81018b0:	2200      	movs	r2, #0
 81018b2:	601a      	str	r2, [r3, #0]
 81018b4:	605a      	str	r2, [r3, #4]
 81018b6:	609a      	str	r2, [r3, #8]
 81018b8:	60da      	str	r2, [r3, #12]
 81018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81018bc:	f107 0310 	add.w	r3, r7, #16
 81018c0:	22bc      	movs	r2, #188	; 0xbc
 81018c2:	2100      	movs	r1, #0
 81018c4:	4618      	mov	r0, r3
 81018c6:	f006 fe27 	bl	8108518 <memset>
  if(hadc->Instance==ADC1)
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	4a2a      	ldr	r2, [pc, #168]	; (8101978 <HAL_ADC_MspInit+0xd4>)
 81018d0:	4293      	cmp	r3, r2
 81018d2:	d14d      	bne.n	8101970 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 81018d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81018d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 81018da:	2301      	movs	r3, #1
 81018dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 81018de:	2312      	movs	r3, #18
 81018e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 81018e2:	2301      	movs	r3, #1
 81018e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 81018e6:	2302      	movs	r3, #2
 81018e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 81018ea:	2302      	movs	r3, #2
 81018ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 81018ee:	23c0      	movs	r3, #192	; 0xc0
 81018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 81018f2:	2320      	movs	r3, #32
 81018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 81018f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81018fa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 81018fc:	2300      	movs	r3, #0
 81018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101902:	f107 0310 	add.w	r3, r7, #16
 8101906:	4618      	mov	r0, r3
 8101908:	f002 fb6e 	bl	8103fe8 <HAL_RCCEx_PeriphCLKConfig>
 810190c:	4603      	mov	r3, r0
 810190e:	2b00      	cmp	r3, #0
 8101910:	d001      	beq.n	8101916 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8101912:	f7ff ffa7 	bl	8101864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101916:	4b19      	ldr	r3, [pc, #100]	; (810197c <HAL_ADC_MspInit+0xd8>)
 8101918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810191c:	4a17      	ldr	r2, [pc, #92]	; (810197c <HAL_ADC_MspInit+0xd8>)
 810191e:	f043 0320 	orr.w	r3, r3, #32
 8101922:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101926:	4b15      	ldr	r3, [pc, #84]	; (810197c <HAL_ADC_MspInit+0xd8>)
 8101928:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810192c:	f003 0320 	and.w	r3, r3, #32
 8101930:	60fb      	str	r3, [r7, #12]
 8101932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101934:	4b11      	ldr	r3, [pc, #68]	; (810197c <HAL_ADC_MspInit+0xd8>)
 8101936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810193a:	4a10      	ldr	r2, [pc, #64]	; (810197c <HAL_ADC_MspInit+0xd8>)
 810193c:	f043 0301 	orr.w	r3, r3, #1
 8101940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101944:	4b0d      	ldr	r3, [pc, #52]	; (810197c <HAL_ADC_MspInit+0xd8>)
 8101946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810194a:	f003 0301 	and.w	r3, r3, #1
 810194e:	60bb      	str	r3, [r7, #8]
 8101950:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = current_sensor_Pin;
 8101952:	2308      	movs	r3, #8
 8101954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101958:	2303      	movs	r3, #3
 810195a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810195e:	2300      	movs	r3, #0
 8101960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(current_sensor_GPIO_Port, &GPIO_InitStruct);
 8101964:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101968:	4619      	mov	r1, r3
 810196a:	4805      	ldr	r0, [pc, #20]	; (8101980 <HAL_ADC_MspInit+0xdc>)
 810196c:	f001 ff00 	bl	8103770 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8101970:	bf00      	nop
 8101972:	37e0      	adds	r7, #224	; 0xe0
 8101974:	46bd      	mov	sp, r7
 8101976:	bd80      	pop	{r7, pc}
 8101978:	40022000 	.word	0x40022000
 810197c:	58024400 	.word	0x58024400
 8101980:	58020000 	.word	0x58020000

08101984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101984:	b480      	push	{r7}
 8101986:	b085      	sub	sp, #20
 8101988:	af00      	add	r7, sp, #0
 810198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	681b      	ldr	r3, [r3, #0]
 8101990:	4a0b      	ldr	r2, [pc, #44]	; (81019c0 <HAL_TIM_Base_MspInit+0x3c>)
 8101992:	4293      	cmp	r3, r2
 8101994:	d10e      	bne.n	81019b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101996:	4b0b      	ldr	r3, [pc, #44]	; (81019c4 <HAL_TIM_Base_MspInit+0x40>)
 8101998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810199c:	4a09      	ldr	r2, [pc, #36]	; (81019c4 <HAL_TIM_Base_MspInit+0x40>)
 810199e:	f043 0301 	orr.w	r3, r3, #1
 81019a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81019a6:	4b07      	ldr	r3, [pc, #28]	; (81019c4 <HAL_TIM_Base_MspInit+0x40>)
 81019a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019ac:	f003 0301 	and.w	r3, r3, #1
 81019b0:	60fb      	str	r3, [r7, #12]
 81019b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 81019b4:	bf00      	nop
 81019b6:	3714      	adds	r7, #20
 81019b8:	46bd      	mov	sp, r7
 81019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019be:	4770      	bx	lr
 81019c0:	40010000 	.word	0x40010000
 81019c4:	58024400 	.word	0x58024400

081019c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81019c8:	b580      	push	{r7, lr}
 81019ca:	b088      	sub	sp, #32
 81019cc:	af00      	add	r7, sp, #0
 81019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019d0:	f107 030c 	add.w	r3, r7, #12
 81019d4:	2200      	movs	r2, #0
 81019d6:	601a      	str	r2, [r3, #0]
 81019d8:	605a      	str	r2, [r3, #4]
 81019da:	609a      	str	r2, [r3, #8]
 81019dc:	60da      	str	r2, [r3, #12]
 81019de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	4a13      	ldr	r2, [pc, #76]	; (8101a34 <HAL_TIM_MspPostInit+0x6c>)
 81019e6:	4293      	cmp	r3, r2
 81019e8:	d11f      	bne.n	8101a2a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 81019ea:	4b13      	ldr	r3, [pc, #76]	; (8101a38 <HAL_TIM_MspPostInit+0x70>)
 81019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019f0:	4a11      	ldr	r2, [pc, #68]	; (8101a38 <HAL_TIM_MspPostInit+0x70>)
 81019f2:	f043 0310 	orr.w	r3, r3, #16
 81019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019fa:	4b0f      	ldr	r3, [pc, #60]	; (8101a38 <HAL_TIM_MspPostInit+0x70>)
 81019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a00:	f003 0310 	and.w	r3, r3, #16
 8101a04:	60bb      	str	r3, [r7, #8]
 8101a06:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101a0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a0e:	2302      	movs	r3, #2
 8101a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a12:	2300      	movs	r3, #0
 8101a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a16:	2300      	movs	r3, #0
 8101a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101a1a:	2301      	movs	r3, #1
 8101a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a1e:	f107 030c 	add.w	r3, r7, #12
 8101a22:	4619      	mov	r1, r3
 8101a24:	4805      	ldr	r0, [pc, #20]	; (8101a3c <HAL_TIM_MspPostInit+0x74>)
 8101a26:	f001 fea3 	bl	8103770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101a2a:	bf00      	nop
 8101a2c:	3720      	adds	r7, #32
 8101a2e:	46bd      	mov	sp, r7
 8101a30:	bd80      	pop	{r7, pc}
 8101a32:	bf00      	nop
 8101a34:	40010000 	.word	0x40010000
 8101a38:	58024400 	.word	0x58024400
 8101a3c:	58021000 	.word	0x58021000

08101a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101a40:	b580      	push	{r7, lr}
 8101a42:	b0b8      	sub	sp, #224	; 0xe0
 8101a44:	af00      	add	r7, sp, #0
 8101a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a4c:	2200      	movs	r2, #0
 8101a4e:	601a      	str	r2, [r3, #0]
 8101a50:	605a      	str	r2, [r3, #4]
 8101a52:	609a      	str	r2, [r3, #8]
 8101a54:	60da      	str	r2, [r3, #12]
 8101a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a58:	f107 0310 	add.w	r3, r7, #16
 8101a5c:	22bc      	movs	r2, #188	; 0xbc
 8101a5e:	2100      	movs	r1, #0
 8101a60:	4618      	mov	r0, r3
 8101a62:	f006 fd59 	bl	8108518 <memset>
  if(huart->Instance==USART3)
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	4a25      	ldr	r2, [pc, #148]	; (8101b00 <HAL_UART_MspInit+0xc0>)
 8101a6c:	4293      	cmp	r3, r2
 8101a6e:	d142      	bne.n	8101af6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101a70:	2302      	movs	r3, #2
 8101a72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101a74:	2300      	movs	r3, #0
 8101a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a7a:	f107 0310 	add.w	r3, r7, #16
 8101a7e:	4618      	mov	r0, r3
 8101a80:	f002 fab2 	bl	8103fe8 <HAL_RCCEx_PeriphCLKConfig>
 8101a84:	4603      	mov	r3, r0
 8101a86:	2b00      	cmp	r3, #0
 8101a88:	d001      	beq.n	8101a8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101a8a:	f7ff feeb 	bl	8101864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101a8e:	4b1d      	ldr	r3, [pc, #116]	; (8101b04 <HAL_UART_MspInit+0xc4>)
 8101a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a94:	4a1b      	ldr	r2, [pc, #108]	; (8101b04 <HAL_UART_MspInit+0xc4>)
 8101a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101a9e:	4b19      	ldr	r3, [pc, #100]	; (8101b04 <HAL_UART_MspInit+0xc4>)
 8101aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101aa8:	60fb      	str	r3, [r7, #12]
 8101aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101aac:	4b15      	ldr	r3, [pc, #84]	; (8101b04 <HAL_UART_MspInit+0xc4>)
 8101aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ab2:	4a14      	ldr	r2, [pc, #80]	; (8101b04 <HAL_UART_MspInit+0xc4>)
 8101ab4:	f043 0308 	orr.w	r3, r3, #8
 8101ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101abc:	4b11      	ldr	r3, [pc, #68]	; (8101b04 <HAL_UART_MspInit+0xc4>)
 8101abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ac2:	f003 0308 	and.w	r3, r3, #8
 8101ac6:	60bb      	str	r3, [r7, #8]
 8101ac8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ad2:	2302      	movs	r3, #2
 8101ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ad8:	2300      	movs	r3, #0
 8101ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ade:	2300      	movs	r3, #0
 8101ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101ae4:	2307      	movs	r3, #7
 8101ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101aea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101aee:	4619      	mov	r1, r3
 8101af0:	4805      	ldr	r0, [pc, #20]	; (8101b08 <HAL_UART_MspInit+0xc8>)
 8101af2:	f001 fe3d 	bl	8103770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101af6:	bf00      	nop
 8101af8:	37e0      	adds	r7, #224	; 0xe0
 8101afa:	46bd      	mov	sp, r7
 8101afc:	bd80      	pop	{r7, pc}
 8101afe:	bf00      	nop
 8101b00:	40004800 	.word	0x40004800
 8101b04:	58024400 	.word	0x58024400
 8101b08:	58020c00 	.word	0x58020c00

08101b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101b0c:	b480      	push	{r7}
 8101b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101b10:	e7fe      	b.n	8101b10 <NMI_Handler+0x4>

08101b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101b12:	b480      	push	{r7}
 8101b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101b16:	e7fe      	b.n	8101b16 <HardFault_Handler+0x4>

08101b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101b18:	b480      	push	{r7}
 8101b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101b1c:	e7fe      	b.n	8101b1c <MemManage_Handler+0x4>

08101b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101b1e:	b480      	push	{r7}
 8101b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101b22:	e7fe      	b.n	8101b22 <BusFault_Handler+0x4>

08101b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101b24:	b480      	push	{r7}
 8101b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101b28:	e7fe      	b.n	8101b28 <UsageFault_Handler+0x4>

08101b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101b2a:	b480      	push	{r7}
 8101b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101b2e:	bf00      	nop
 8101b30:	46bd      	mov	sp, r7
 8101b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b36:	4770      	bx	lr

08101b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101b38:	b480      	push	{r7}
 8101b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101b3c:	bf00      	nop
 8101b3e:	46bd      	mov	sp, r7
 8101b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b44:	4770      	bx	lr

08101b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101b46:	b480      	push	{r7}
 8101b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101b4a:	bf00      	nop
 8101b4c:	46bd      	mov	sp, r7
 8101b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b52:	4770      	bx	lr

08101b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101b54:	b580      	push	{r7, lr}
 8101b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101b58:	f000 f986 	bl	8101e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101b5c:	bf00      	nop
 8101b5e:	bd80      	pop	{r7, pc}

08101b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101b60:	b480      	push	{r7}
 8101b62:	af00      	add	r7, sp, #0
	return 1;
 8101b64:	2301      	movs	r3, #1
}
 8101b66:	4618      	mov	r0, r3
 8101b68:	46bd      	mov	sp, r7
 8101b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6e:	4770      	bx	lr

08101b70 <_kill>:

int _kill(int pid, int sig)
{
 8101b70:	b580      	push	{r7, lr}
 8101b72:	b082      	sub	sp, #8
 8101b74:	af00      	add	r7, sp, #0
 8101b76:	6078      	str	r0, [r7, #4]
 8101b78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101b7a:	f006 fca3 	bl	81084c4 <__errno>
 8101b7e:	4603      	mov	r3, r0
 8101b80:	2216      	movs	r2, #22
 8101b82:	601a      	str	r2, [r3, #0]
	return -1;
 8101b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101b88:	4618      	mov	r0, r3
 8101b8a:	3708      	adds	r7, #8
 8101b8c:	46bd      	mov	sp, r7
 8101b8e:	bd80      	pop	{r7, pc}

08101b90 <_exit>:

void _exit (int status)
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	b082      	sub	sp, #8
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101b9c:	6878      	ldr	r0, [r7, #4]
 8101b9e:	f7ff ffe7 	bl	8101b70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101ba2:	e7fe      	b.n	8101ba2 <_exit+0x12>

08101ba4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101ba4:	b580      	push	{r7, lr}
 8101ba6:	b086      	sub	sp, #24
 8101ba8:	af00      	add	r7, sp, #0
 8101baa:	60f8      	str	r0, [r7, #12]
 8101bac:	60b9      	str	r1, [r7, #8]
 8101bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bb0:	2300      	movs	r3, #0
 8101bb2:	617b      	str	r3, [r7, #20]
 8101bb4:	e00a      	b.n	8101bcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101bb6:	f3af 8000 	nop.w
 8101bba:	4601      	mov	r1, r0
 8101bbc:	68bb      	ldr	r3, [r7, #8]
 8101bbe:	1c5a      	adds	r2, r3, #1
 8101bc0:	60ba      	str	r2, [r7, #8]
 8101bc2:	b2ca      	uxtb	r2, r1
 8101bc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bc6:	697b      	ldr	r3, [r7, #20]
 8101bc8:	3301      	adds	r3, #1
 8101bca:	617b      	str	r3, [r7, #20]
 8101bcc:	697a      	ldr	r2, [r7, #20]
 8101bce:	687b      	ldr	r3, [r7, #4]
 8101bd0:	429a      	cmp	r2, r3
 8101bd2:	dbf0      	blt.n	8101bb6 <_read+0x12>
	}

return len;
 8101bd4:	687b      	ldr	r3, [r7, #4]
}
 8101bd6:	4618      	mov	r0, r3
 8101bd8:	3718      	adds	r7, #24
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	bd80      	pop	{r7, pc}

08101bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101bde:	b580      	push	{r7, lr}
 8101be0:	b086      	sub	sp, #24
 8101be2:	af00      	add	r7, sp, #0
 8101be4:	60f8      	str	r0, [r7, #12]
 8101be6:	60b9      	str	r1, [r7, #8]
 8101be8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bea:	2300      	movs	r3, #0
 8101bec:	617b      	str	r3, [r7, #20]
 8101bee:	e009      	b.n	8101c04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101bf0:	68bb      	ldr	r3, [r7, #8]
 8101bf2:	1c5a      	adds	r2, r3, #1
 8101bf4:	60ba      	str	r2, [r7, #8]
 8101bf6:	781b      	ldrb	r3, [r3, #0]
 8101bf8:	4618      	mov	r0, r3
 8101bfa:	f7ff fe21 	bl	8101840 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bfe:	697b      	ldr	r3, [r7, #20]
 8101c00:	3301      	adds	r3, #1
 8101c02:	617b      	str	r3, [r7, #20]
 8101c04:	697a      	ldr	r2, [r7, #20]
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	429a      	cmp	r2, r3
 8101c0a:	dbf1      	blt.n	8101bf0 <_write+0x12>
	}
	return len;
 8101c0c:	687b      	ldr	r3, [r7, #4]
}
 8101c0e:	4618      	mov	r0, r3
 8101c10:	3718      	adds	r7, #24
 8101c12:	46bd      	mov	sp, r7
 8101c14:	bd80      	pop	{r7, pc}

08101c16 <_close>:

int _close(int file)
{
 8101c16:	b480      	push	{r7}
 8101c18:	b083      	sub	sp, #12
 8101c1a:	af00      	add	r7, sp, #0
 8101c1c:	6078      	str	r0, [r7, #4]
	return -1;
 8101c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101c22:	4618      	mov	r0, r3
 8101c24:	370c      	adds	r7, #12
 8101c26:	46bd      	mov	sp, r7
 8101c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c2c:	4770      	bx	lr

08101c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101c2e:	b480      	push	{r7}
 8101c30:	b083      	sub	sp, #12
 8101c32:	af00      	add	r7, sp, #0
 8101c34:	6078      	str	r0, [r7, #4]
 8101c36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101c38:	683b      	ldr	r3, [r7, #0]
 8101c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101c3e:	605a      	str	r2, [r3, #4]
	return 0;
 8101c40:	2300      	movs	r3, #0
}
 8101c42:	4618      	mov	r0, r3
 8101c44:	370c      	adds	r7, #12
 8101c46:	46bd      	mov	sp, r7
 8101c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c4c:	4770      	bx	lr

08101c4e <_isatty>:

int _isatty(int file)
{
 8101c4e:	b480      	push	{r7}
 8101c50:	b083      	sub	sp, #12
 8101c52:	af00      	add	r7, sp, #0
 8101c54:	6078      	str	r0, [r7, #4]
	return 1;
 8101c56:	2301      	movs	r3, #1
}
 8101c58:	4618      	mov	r0, r3
 8101c5a:	370c      	adds	r7, #12
 8101c5c:	46bd      	mov	sp, r7
 8101c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c62:	4770      	bx	lr

08101c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101c64:	b480      	push	{r7}
 8101c66:	b085      	sub	sp, #20
 8101c68:	af00      	add	r7, sp, #0
 8101c6a:	60f8      	str	r0, [r7, #12]
 8101c6c:	60b9      	str	r1, [r7, #8]
 8101c6e:	607a      	str	r2, [r7, #4]
	return 0;
 8101c70:	2300      	movs	r3, #0
}
 8101c72:	4618      	mov	r0, r3
 8101c74:	3714      	adds	r7, #20
 8101c76:	46bd      	mov	sp, r7
 8101c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c7c:	4770      	bx	lr
	...

08101c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101c80:	b580      	push	{r7, lr}
 8101c82:	b086      	sub	sp, #24
 8101c84:	af00      	add	r7, sp, #0
 8101c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101c88:	4a14      	ldr	r2, [pc, #80]	; (8101cdc <_sbrk+0x5c>)
 8101c8a:	4b15      	ldr	r3, [pc, #84]	; (8101ce0 <_sbrk+0x60>)
 8101c8c:	1ad3      	subs	r3, r2, r3
 8101c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101c90:	697b      	ldr	r3, [r7, #20]
 8101c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101c94:	4b13      	ldr	r3, [pc, #76]	; (8101ce4 <_sbrk+0x64>)
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	2b00      	cmp	r3, #0
 8101c9a:	d102      	bne.n	8101ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101c9c:	4b11      	ldr	r3, [pc, #68]	; (8101ce4 <_sbrk+0x64>)
 8101c9e:	4a12      	ldr	r2, [pc, #72]	; (8101ce8 <_sbrk+0x68>)
 8101ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101ca2:	4b10      	ldr	r3, [pc, #64]	; (8101ce4 <_sbrk+0x64>)
 8101ca4:	681a      	ldr	r2, [r3, #0]
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	4413      	add	r3, r2
 8101caa:	693a      	ldr	r2, [r7, #16]
 8101cac:	429a      	cmp	r2, r3
 8101cae:	d207      	bcs.n	8101cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101cb0:	f006 fc08 	bl	81084c4 <__errno>
 8101cb4:	4603      	mov	r3, r0
 8101cb6:	220c      	movs	r2, #12
 8101cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101cbe:	e009      	b.n	8101cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101cc0:	4b08      	ldr	r3, [pc, #32]	; (8101ce4 <_sbrk+0x64>)
 8101cc2:	681b      	ldr	r3, [r3, #0]
 8101cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101cc6:	4b07      	ldr	r3, [pc, #28]	; (8101ce4 <_sbrk+0x64>)
 8101cc8:	681a      	ldr	r2, [r3, #0]
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	4413      	add	r3, r2
 8101cce:	4a05      	ldr	r2, [pc, #20]	; (8101ce4 <_sbrk+0x64>)
 8101cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101cd2:	68fb      	ldr	r3, [r7, #12]
}
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	3718      	adds	r7, #24
 8101cd8:	46bd      	mov	sp, r7
 8101cda:	bd80      	pop	{r7, pc}
 8101cdc:	10048000 	.word	0x10048000
 8101ce0:	00000400 	.word	0x00000400
 8101ce4:	10000354 	.word	0x10000354
 8101ce8:	10000370 	.word	0x10000370

08101cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101cf0:	f7ff fa0a 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101cf4:	480c      	ldr	r0, [pc, #48]	; (8101d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101cf6:	490d      	ldr	r1, [pc, #52]	; (8101d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101cf8:	4a0d      	ldr	r2, [pc, #52]	; (8101d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101cfc:	e002      	b.n	8101d04 <LoopCopyDataInit>

08101cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101d02:	3304      	adds	r3, #4

08101d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101d08:	d3f9      	bcc.n	8101cfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101d0a:	4a0a      	ldr	r2, [pc, #40]	; (8101d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101d0c:	4c0a      	ldr	r4, [pc, #40]	; (8101d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101d10:	e001      	b.n	8101d16 <LoopFillZerobss>

08101d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101d14:	3204      	adds	r2, #4

08101d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101d18:	d3fb      	bcc.n	8101d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101d1a:	f006 fbd9 	bl	81084d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101d1e:	f7ff fb4d 	bl	81013bc <main>
  bx  lr
 8101d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101d24:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101d28:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101d2c:	100001e4 	.word	0x100001e4
  ldr r2, =_sidata
 8101d30:	0810d47c 	.word	0x0810d47c
  ldr r2, =_sbss
 8101d34:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8101d38:	1000036c 	.word	0x1000036c

08101d3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101d3c:	e7fe      	b.n	8101d3c <ADC3_IRQHandler>
	...

08101d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101d40:	b580      	push	{r7, lr}
 8101d42:	b082      	sub	sp, #8
 8101d44:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101d46:	4b28      	ldr	r3, [pc, #160]	; (8101de8 <HAL_Init+0xa8>)
 8101d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d4c:	4a26      	ldr	r2, [pc, #152]	; (8101de8 <HAL_Init+0xa8>)
 8101d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101d52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101d56:	4b24      	ldr	r3, [pc, #144]	; (8101de8 <HAL_Init+0xa8>)
 8101d58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101d60:	603b      	str	r3, [r7, #0]
 8101d62:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101d64:	4b21      	ldr	r3, [pc, #132]	; (8101dec <HAL_Init+0xac>)
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101d6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101d70:	4a1e      	ldr	r2, [pc, #120]	; (8101dec <HAL_Init+0xac>)
 8101d72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d76:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d78:	4b1c      	ldr	r3, [pc, #112]	; (8101dec <HAL_Init+0xac>)
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	4a1b      	ldr	r2, [pc, #108]	; (8101dec <HAL_Init+0xac>)
 8101d7e:	f043 0301 	orr.w	r3, r3, #1
 8101d82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d84:	2003      	movs	r0, #3
 8101d86:	f001 fcad 	bl	81036e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d8a:	f001 ff55 	bl	8103c38 <HAL_RCC_GetSysClockFreq>
 8101d8e:	4602      	mov	r2, r0
 8101d90:	4b15      	ldr	r3, [pc, #84]	; (8101de8 <HAL_Init+0xa8>)
 8101d92:	699b      	ldr	r3, [r3, #24]
 8101d94:	0a1b      	lsrs	r3, r3, #8
 8101d96:	f003 030f 	and.w	r3, r3, #15
 8101d9a:	4915      	ldr	r1, [pc, #84]	; (8101df0 <HAL_Init+0xb0>)
 8101d9c:	5ccb      	ldrb	r3, [r1, r3]
 8101d9e:	f003 031f 	and.w	r3, r3, #31
 8101da2:	fa22 f303 	lsr.w	r3, r2, r3
 8101da6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101da8:	4b0f      	ldr	r3, [pc, #60]	; (8101de8 <HAL_Init+0xa8>)
 8101daa:	699b      	ldr	r3, [r3, #24]
 8101dac:	f003 030f 	and.w	r3, r3, #15
 8101db0:	4a0f      	ldr	r2, [pc, #60]	; (8101df0 <HAL_Init+0xb0>)
 8101db2:	5cd3      	ldrb	r3, [r2, r3]
 8101db4:	f003 031f 	and.w	r3, r3, #31
 8101db8:	687a      	ldr	r2, [r7, #4]
 8101dba:	fa22 f303 	lsr.w	r3, r2, r3
 8101dbe:	4a0d      	ldr	r2, [pc, #52]	; (8101df4 <HAL_Init+0xb4>)
 8101dc0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101dc2:	4b0c      	ldr	r3, [pc, #48]	; (8101df4 <HAL_Init+0xb4>)
 8101dc4:	681b      	ldr	r3, [r3, #0]
 8101dc6:	4a0c      	ldr	r2, [pc, #48]	; (8101df8 <HAL_Init+0xb8>)
 8101dc8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101dca:	2000      	movs	r0, #0
 8101dcc:	f000 f816 	bl	8101dfc <HAL_InitTick>
 8101dd0:	4603      	mov	r3, r0
 8101dd2:	2b00      	cmp	r3, #0
 8101dd4:	d001      	beq.n	8101dda <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101dd6:	2301      	movs	r3, #1
 8101dd8:	e002      	b.n	8101de0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101dda:	f7ff fd49 	bl	8101870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101dde:	2300      	movs	r3, #0
}
 8101de0:	4618      	mov	r0, r3
 8101de2:	3708      	adds	r7, #8
 8101de4:	46bd      	mov	sp, r7
 8101de6:	bd80      	pop	{r7, pc}
 8101de8:	58024400 	.word	0x58024400
 8101dec:	40024400 	.word	0x40024400
 8101df0:	0810cf84 	.word	0x0810cf84
 8101df4:	10000004 	.word	0x10000004
 8101df8:	10000000 	.word	0x10000000

08101dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101dfc:	b580      	push	{r7, lr}
 8101dfe:	b082      	sub	sp, #8
 8101e00:	af00      	add	r7, sp, #0
 8101e02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101e04:	4b15      	ldr	r3, [pc, #84]	; (8101e5c <HAL_InitTick+0x60>)
 8101e06:	781b      	ldrb	r3, [r3, #0]
 8101e08:	2b00      	cmp	r3, #0
 8101e0a:	d101      	bne.n	8101e10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101e0c:	2301      	movs	r3, #1
 8101e0e:	e021      	b.n	8101e54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101e10:	4b13      	ldr	r3, [pc, #76]	; (8101e60 <HAL_InitTick+0x64>)
 8101e12:	681a      	ldr	r2, [r3, #0]
 8101e14:	4b11      	ldr	r3, [pc, #68]	; (8101e5c <HAL_InitTick+0x60>)
 8101e16:	781b      	ldrb	r3, [r3, #0]
 8101e18:	4619      	mov	r1, r3
 8101e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8101e26:	4618      	mov	r0, r3
 8101e28:	f001 fc81 	bl	810372e <HAL_SYSTICK_Config>
 8101e2c:	4603      	mov	r3, r0
 8101e2e:	2b00      	cmp	r3, #0
 8101e30:	d001      	beq.n	8101e36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101e32:	2301      	movs	r3, #1
 8101e34:	e00e      	b.n	8101e54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	2b0f      	cmp	r3, #15
 8101e3a:	d80a      	bhi.n	8101e52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101e3c:	2200      	movs	r2, #0
 8101e3e:	6879      	ldr	r1, [r7, #4]
 8101e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8101e44:	f001 fc59 	bl	81036fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101e48:	4a06      	ldr	r2, [pc, #24]	; (8101e64 <HAL_InitTick+0x68>)
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101e4e:	2300      	movs	r3, #0
 8101e50:	e000      	b.n	8101e54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101e52:	2301      	movs	r3, #1
}
 8101e54:	4618      	mov	r0, r3
 8101e56:	3708      	adds	r7, #8
 8101e58:	46bd      	mov	sp, r7
 8101e5a:	bd80      	pop	{r7, pc}
 8101e5c:	1000000c 	.word	0x1000000c
 8101e60:	10000000 	.word	0x10000000
 8101e64:	10000008 	.word	0x10000008

08101e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101e68:	b480      	push	{r7}
 8101e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101e6c:	4b06      	ldr	r3, [pc, #24]	; (8101e88 <HAL_IncTick+0x20>)
 8101e6e:	781b      	ldrb	r3, [r3, #0]
 8101e70:	461a      	mov	r2, r3
 8101e72:	4b06      	ldr	r3, [pc, #24]	; (8101e8c <HAL_IncTick+0x24>)
 8101e74:	681b      	ldr	r3, [r3, #0]
 8101e76:	4413      	add	r3, r2
 8101e78:	4a04      	ldr	r2, [pc, #16]	; (8101e8c <HAL_IncTick+0x24>)
 8101e7a:	6013      	str	r3, [r2, #0]
}
 8101e7c:	bf00      	nop
 8101e7e:	46bd      	mov	sp, r7
 8101e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e84:	4770      	bx	lr
 8101e86:	bf00      	nop
 8101e88:	1000000c 	.word	0x1000000c
 8101e8c:	10000358 	.word	0x10000358

08101e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101e90:	b480      	push	{r7}
 8101e92:	af00      	add	r7, sp, #0
  return uwTick;
 8101e94:	4b03      	ldr	r3, [pc, #12]	; (8101ea4 <HAL_GetTick+0x14>)
 8101e96:	681b      	ldr	r3, [r3, #0]
}
 8101e98:	4618      	mov	r0, r3
 8101e9a:	46bd      	mov	sp, r7
 8101e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea0:	4770      	bx	lr
 8101ea2:	bf00      	nop
 8101ea4:	10000358 	.word	0x10000358

08101ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101ea8:	b580      	push	{r7, lr}
 8101eaa:	b084      	sub	sp, #16
 8101eac:	af00      	add	r7, sp, #0
 8101eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101eb0:	f7ff ffee 	bl	8101e90 <HAL_GetTick>
 8101eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101eba:	68fb      	ldr	r3, [r7, #12]
 8101ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8101ec0:	d005      	beq.n	8101ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101ec2:	4b0a      	ldr	r3, [pc, #40]	; (8101eec <HAL_Delay+0x44>)
 8101ec4:	781b      	ldrb	r3, [r3, #0]
 8101ec6:	461a      	mov	r2, r3
 8101ec8:	68fb      	ldr	r3, [r7, #12]
 8101eca:	4413      	add	r3, r2
 8101ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101ece:	bf00      	nop
 8101ed0:	f7ff ffde 	bl	8101e90 <HAL_GetTick>
 8101ed4:	4602      	mov	r2, r0
 8101ed6:	68bb      	ldr	r3, [r7, #8]
 8101ed8:	1ad3      	subs	r3, r2, r3
 8101eda:	68fa      	ldr	r2, [r7, #12]
 8101edc:	429a      	cmp	r2, r3
 8101ede:	d8f7      	bhi.n	8101ed0 <HAL_Delay+0x28>
  {
  }
}
 8101ee0:	bf00      	nop
 8101ee2:	bf00      	nop
 8101ee4:	3710      	adds	r7, #16
 8101ee6:	46bd      	mov	sp, r7
 8101ee8:	bd80      	pop	{r7, pc}
 8101eea:	bf00      	nop
 8101eec:	1000000c 	.word	0x1000000c

08101ef0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101ef0:	b480      	push	{r7}
 8101ef2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101ef4:	4b03      	ldr	r3, [pc, #12]	; (8101f04 <HAL_GetREVID+0x14>)
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	0c1b      	lsrs	r3, r3, #16
}
 8101efa:	4618      	mov	r0, r3
 8101efc:	46bd      	mov	sp, r7
 8101efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f02:	4770      	bx	lr
 8101f04:	5c001000 	.word	0x5c001000

08101f08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101f08:	b480      	push	{r7}
 8101f0a:	b083      	sub	sp, #12
 8101f0c:	af00      	add	r7, sp, #0
 8101f0e:	6078      	str	r0, [r7, #4]
 8101f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	689b      	ldr	r3, [r3, #8]
 8101f16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	431a      	orrs	r2, r3
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	609a      	str	r2, [r3, #8]
}
 8101f22:	bf00      	nop
 8101f24:	370c      	adds	r7, #12
 8101f26:	46bd      	mov	sp, r7
 8101f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f2c:	4770      	bx	lr

08101f2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8101f2e:	b480      	push	{r7}
 8101f30:	b083      	sub	sp, #12
 8101f32:	af00      	add	r7, sp, #0
 8101f34:	6078      	str	r0, [r7, #4]
 8101f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	689b      	ldr	r3, [r3, #8]
 8101f3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8101f40:	683b      	ldr	r3, [r7, #0]
 8101f42:	431a      	orrs	r2, r3
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	609a      	str	r2, [r3, #8]
}
 8101f48:	bf00      	nop
 8101f4a:	370c      	adds	r7, #12
 8101f4c:	46bd      	mov	sp, r7
 8101f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f52:	4770      	bx	lr

08101f54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101f54:	b480      	push	{r7}
 8101f56:	b083      	sub	sp, #12
 8101f58:	af00      	add	r7, sp, #0
 8101f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	689b      	ldr	r3, [r3, #8]
 8101f60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101f64:	4618      	mov	r0, r3
 8101f66:	370c      	adds	r7, #12
 8101f68:	46bd      	mov	sp, r7
 8101f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f6e:	4770      	bx	lr

08101f70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101f70:	b480      	push	{r7}
 8101f72:	b087      	sub	sp, #28
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	60f8      	str	r0, [r7, #12]
 8101f78:	60b9      	str	r1, [r7, #8]
 8101f7a:	607a      	str	r2, [r7, #4]
 8101f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101f7e:	68fb      	ldr	r3, [r7, #12]
 8101f80:	3360      	adds	r3, #96	; 0x60
 8101f82:	461a      	mov	r2, r3
 8101f84:	68bb      	ldr	r3, [r7, #8]
 8101f86:	009b      	lsls	r3, r3, #2
 8101f88:	4413      	add	r3, r2
 8101f8a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101f8c:	697b      	ldr	r3, [r7, #20]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101f9a:	683b      	ldr	r3, [r7, #0]
 8101f9c:	430b      	orrs	r3, r1
 8101f9e:	431a      	orrs	r2, r3
 8101fa0:	697b      	ldr	r3, [r7, #20]
 8101fa2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101fa4:	bf00      	nop
 8101fa6:	371c      	adds	r7, #28
 8101fa8:	46bd      	mov	sp, r7
 8101faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fae:	4770      	bx	lr

08101fb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101fb0:	b480      	push	{r7}
 8101fb2:	b085      	sub	sp, #20
 8101fb4:	af00      	add	r7, sp, #0
 8101fb6:	60f8      	str	r0, [r7, #12]
 8101fb8:	60b9      	str	r1, [r7, #8]
 8101fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101fbc:	68fb      	ldr	r3, [r7, #12]
 8101fbe:	691b      	ldr	r3, [r3, #16]
 8101fc0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101fc4:	68bb      	ldr	r3, [r7, #8]
 8101fc6:	f003 031f 	and.w	r3, r3, #31
 8101fca:	6879      	ldr	r1, [r7, #4]
 8101fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8101fd0:	431a      	orrs	r2, r3
 8101fd2:	68fb      	ldr	r3, [r7, #12]
 8101fd4:	611a      	str	r2, [r3, #16]
}
 8101fd6:	bf00      	nop
 8101fd8:	3714      	adds	r7, #20
 8101fda:	46bd      	mov	sp, r7
 8101fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe0:	4770      	bx	lr

08101fe2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101fe2:	b480      	push	{r7}
 8101fe4:	b087      	sub	sp, #28
 8101fe6:	af00      	add	r7, sp, #0
 8101fe8:	60f8      	str	r0, [r7, #12]
 8101fea:	60b9      	str	r1, [r7, #8]
 8101fec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101fee:	68fb      	ldr	r3, [r7, #12]
 8101ff0:	3360      	adds	r3, #96	; 0x60
 8101ff2:	461a      	mov	r2, r3
 8101ff4:	68bb      	ldr	r3, [r7, #8]
 8101ff6:	009b      	lsls	r3, r3, #2
 8101ff8:	4413      	add	r3, r2
 8101ffa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101ffc:	697b      	ldr	r3, [r7, #20]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	431a      	orrs	r2, r3
 8102008:	697b      	ldr	r3, [r7, #20]
 810200a:	601a      	str	r2, [r3, #0]
  }
}
 810200c:	bf00      	nop
 810200e:	371c      	adds	r7, #28
 8102010:	46bd      	mov	sp, r7
 8102012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102016:	4770      	bx	lr

08102018 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102018:	b480      	push	{r7}
 810201a:	b083      	sub	sp, #12
 810201c:	af00      	add	r7, sp, #0
 810201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	68db      	ldr	r3, [r3, #12]
 8102024:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102028:	2b00      	cmp	r3, #0
 810202a:	d101      	bne.n	8102030 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 810202c:	2301      	movs	r3, #1
 810202e:	e000      	b.n	8102032 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102030:	2300      	movs	r3, #0
}
 8102032:	4618      	mov	r0, r3
 8102034:	370c      	adds	r7, #12
 8102036:	46bd      	mov	sp, r7
 8102038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810203c:	4770      	bx	lr

0810203e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 810203e:	b480      	push	{r7}
 8102040:	b087      	sub	sp, #28
 8102042:	af00      	add	r7, sp, #0
 8102044:	60f8      	str	r0, [r7, #12]
 8102046:	60b9      	str	r1, [r7, #8]
 8102048:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 810204a:	68fb      	ldr	r3, [r7, #12]
 810204c:	3330      	adds	r3, #48	; 0x30
 810204e:	461a      	mov	r2, r3
 8102050:	68bb      	ldr	r3, [r7, #8]
 8102052:	0a1b      	lsrs	r3, r3, #8
 8102054:	009b      	lsls	r3, r3, #2
 8102056:	f003 030c 	and.w	r3, r3, #12
 810205a:	4413      	add	r3, r2
 810205c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810205e:	697b      	ldr	r3, [r7, #20]
 8102060:	681a      	ldr	r2, [r3, #0]
 8102062:	68bb      	ldr	r3, [r7, #8]
 8102064:	f003 031f 	and.w	r3, r3, #31
 8102068:	211f      	movs	r1, #31
 810206a:	fa01 f303 	lsl.w	r3, r1, r3
 810206e:	43db      	mvns	r3, r3
 8102070:	401a      	ands	r2, r3
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	0e9b      	lsrs	r3, r3, #26
 8102076:	f003 011f 	and.w	r1, r3, #31
 810207a:	68bb      	ldr	r3, [r7, #8]
 810207c:	f003 031f 	and.w	r3, r3, #31
 8102080:	fa01 f303 	lsl.w	r3, r1, r3
 8102084:	431a      	orrs	r2, r3
 8102086:	697b      	ldr	r3, [r7, #20]
 8102088:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810208a:	bf00      	nop
 810208c:	371c      	adds	r7, #28
 810208e:	46bd      	mov	sp, r7
 8102090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102094:	4770      	bx	lr

08102096 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102096:	b480      	push	{r7}
 8102098:	b087      	sub	sp, #28
 810209a:	af00      	add	r7, sp, #0
 810209c:	60f8      	str	r0, [r7, #12]
 810209e:	60b9      	str	r1, [r7, #8]
 81020a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81020a2:	68fb      	ldr	r3, [r7, #12]
 81020a4:	3314      	adds	r3, #20
 81020a6:	461a      	mov	r2, r3
 81020a8:	68bb      	ldr	r3, [r7, #8]
 81020aa:	0e5b      	lsrs	r3, r3, #25
 81020ac:	009b      	lsls	r3, r3, #2
 81020ae:	f003 0304 	and.w	r3, r3, #4
 81020b2:	4413      	add	r3, r2
 81020b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81020b6:	697b      	ldr	r3, [r7, #20]
 81020b8:	681a      	ldr	r2, [r3, #0]
 81020ba:	68bb      	ldr	r3, [r7, #8]
 81020bc:	0d1b      	lsrs	r3, r3, #20
 81020be:	f003 031f 	and.w	r3, r3, #31
 81020c2:	2107      	movs	r1, #7
 81020c4:	fa01 f303 	lsl.w	r3, r1, r3
 81020c8:	43db      	mvns	r3, r3
 81020ca:	401a      	ands	r2, r3
 81020cc:	68bb      	ldr	r3, [r7, #8]
 81020ce:	0d1b      	lsrs	r3, r3, #20
 81020d0:	f003 031f 	and.w	r3, r3, #31
 81020d4:	6879      	ldr	r1, [r7, #4]
 81020d6:	fa01 f303 	lsl.w	r3, r1, r3
 81020da:	431a      	orrs	r2, r3
 81020dc:	697b      	ldr	r3, [r7, #20]
 81020de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81020e0:	bf00      	nop
 81020e2:	371c      	adds	r7, #28
 81020e4:	46bd      	mov	sp, r7
 81020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ea:	4770      	bx	lr

081020ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81020ec:	b480      	push	{r7}
 81020ee:	b085      	sub	sp, #20
 81020f0:	af00      	add	r7, sp, #0
 81020f2:	60f8      	str	r0, [r7, #12]
 81020f4:	60b9      	str	r1, [r7, #8]
 81020f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81020f8:	68fb      	ldr	r3, [r7, #12]
 81020fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81020fe:	68bb      	ldr	r3, [r7, #8]
 8102100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102104:	43db      	mvns	r3, r3
 8102106:	401a      	ands	r2, r3
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	f003 0318 	and.w	r3, r3, #24
 810210e:	4908      	ldr	r1, [pc, #32]	; (8102130 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102110:	40d9      	lsrs	r1, r3
 8102112:	68bb      	ldr	r3, [r7, #8]
 8102114:	400b      	ands	r3, r1
 8102116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810211a:	431a      	orrs	r2, r3
 810211c:	68fb      	ldr	r3, [r7, #12]
 810211e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102122:	bf00      	nop
 8102124:	3714      	adds	r7, #20
 8102126:	46bd      	mov	sp, r7
 8102128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212c:	4770      	bx	lr
 810212e:	bf00      	nop
 8102130:	000fffff 	.word	0x000fffff

08102134 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102134:	b480      	push	{r7}
 8102136:	b083      	sub	sp, #12
 8102138:	af00      	add	r7, sp, #0
 810213a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	689b      	ldr	r3, [r3, #8]
 8102140:	f003 031f 	and.w	r3, r3, #31
}
 8102144:	4618      	mov	r0, r3
 8102146:	370c      	adds	r7, #12
 8102148:	46bd      	mov	sp, r7
 810214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810214e:	4770      	bx	lr

08102150 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102150:	b480      	push	{r7}
 8102152:	b083      	sub	sp, #12
 8102154:	af00      	add	r7, sp, #0
 8102156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	689b      	ldr	r3, [r3, #8]
 810215c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102160:	4618      	mov	r0, r3
 8102162:	370c      	adds	r7, #12
 8102164:	46bd      	mov	sp, r7
 8102166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810216a:	4770      	bx	lr

0810216c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 810216c:	b480      	push	{r7}
 810216e:	b083      	sub	sp, #12
 8102170:	af00      	add	r7, sp, #0
 8102172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	689b      	ldr	r3, [r3, #8]
 8102178:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 810217c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102180:	687a      	ldr	r2, [r7, #4]
 8102182:	6093      	str	r3, [r2, #8]
}
 8102184:	bf00      	nop
 8102186:	370c      	adds	r7, #12
 8102188:	46bd      	mov	sp, r7
 810218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810218e:	4770      	bx	lr

08102190 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102190:	b480      	push	{r7}
 8102192:	b083      	sub	sp, #12
 8102194:	af00      	add	r7, sp, #0
 8102196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	689b      	ldr	r3, [r3, #8]
 810219c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81021a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81021a4:	d101      	bne.n	81021aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81021a6:	2301      	movs	r3, #1
 81021a8:	e000      	b.n	81021ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81021aa:	2300      	movs	r3, #0
}
 81021ac:	4618      	mov	r0, r3
 81021ae:	370c      	adds	r7, #12
 81021b0:	46bd      	mov	sp, r7
 81021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b6:	4770      	bx	lr

081021b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81021b8:	b480      	push	{r7}
 81021ba:	b083      	sub	sp, #12
 81021bc:	af00      	add	r7, sp, #0
 81021be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	689b      	ldr	r3, [r3, #8]
 81021c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 81021c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81021cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81021d4:	bf00      	nop
 81021d6:	370c      	adds	r7, #12
 81021d8:	46bd      	mov	sp, r7
 81021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021de:	4770      	bx	lr

081021e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81021e0:	b480      	push	{r7}
 81021e2:	b083      	sub	sp, #12
 81021e4:	af00      	add	r7, sp, #0
 81021e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	689b      	ldr	r3, [r3, #8]
 81021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81021f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81021f4:	d101      	bne.n	81021fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81021f6:	2301      	movs	r3, #1
 81021f8:	e000      	b.n	81021fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81021fa:	2300      	movs	r3, #0
}
 81021fc:	4618      	mov	r0, r3
 81021fe:	370c      	adds	r7, #12
 8102200:	46bd      	mov	sp, r7
 8102202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102206:	4770      	bx	lr

08102208 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8102208:	b480      	push	{r7}
 810220a:	b083      	sub	sp, #12
 810220c:	af00      	add	r7, sp, #0
 810220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	689b      	ldr	r3, [r3, #8]
 8102214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810221c:	f043 0201 	orr.w	r2, r3, #1
 8102220:	687b      	ldr	r3, [r7, #4]
 8102222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102224:	bf00      	nop
 8102226:	370c      	adds	r7, #12
 8102228:	46bd      	mov	sp, r7
 810222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222e:	4770      	bx	lr

08102230 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102230:	b480      	push	{r7}
 8102232:	b083      	sub	sp, #12
 8102234:	af00      	add	r7, sp, #0
 8102236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	689b      	ldr	r3, [r3, #8]
 810223c:	f003 0301 	and.w	r3, r3, #1
 8102240:	2b01      	cmp	r3, #1
 8102242:	d101      	bne.n	8102248 <LL_ADC_IsEnabled+0x18>
 8102244:	2301      	movs	r3, #1
 8102246:	e000      	b.n	810224a <LL_ADC_IsEnabled+0x1a>
 8102248:	2300      	movs	r3, #0
}
 810224a:	4618      	mov	r0, r3
 810224c:	370c      	adds	r7, #12
 810224e:	46bd      	mov	sp, r7
 8102250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102254:	4770      	bx	lr

08102256 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8102256:	b480      	push	{r7}
 8102258:	b083      	sub	sp, #12
 810225a:	af00      	add	r7, sp, #0
 810225c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	689b      	ldr	r3, [r3, #8]
 8102262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102266:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810226a:	f043 0204 	orr.w	r2, r3, #4
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8102272:	bf00      	nop
 8102274:	370c      	adds	r7, #12
 8102276:	46bd      	mov	sp, r7
 8102278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227c:	4770      	bx	lr

0810227e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810227e:	b480      	push	{r7}
 8102280:	b083      	sub	sp, #12
 8102282:	af00      	add	r7, sp, #0
 8102284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	689b      	ldr	r3, [r3, #8]
 810228a:	f003 0304 	and.w	r3, r3, #4
 810228e:	2b04      	cmp	r3, #4
 8102290:	d101      	bne.n	8102296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102292:	2301      	movs	r3, #1
 8102294:	e000      	b.n	8102298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102296:	2300      	movs	r3, #0
}
 8102298:	4618      	mov	r0, r3
 810229a:	370c      	adds	r7, #12
 810229c:	46bd      	mov	sp, r7
 810229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a2:	4770      	bx	lr

081022a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81022a4:	b480      	push	{r7}
 81022a6:	b083      	sub	sp, #12
 81022a8:	af00      	add	r7, sp, #0
 81022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	689b      	ldr	r3, [r3, #8]
 81022b0:	f003 0308 	and.w	r3, r3, #8
 81022b4:	2b08      	cmp	r3, #8
 81022b6:	d101      	bne.n	81022bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 81022b8:	2301      	movs	r3, #1
 81022ba:	e000      	b.n	81022be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81022bc:	2300      	movs	r3, #0
}
 81022be:	4618      	mov	r0, r3
 81022c0:	370c      	adds	r7, #12
 81022c2:	46bd      	mov	sp, r7
 81022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c8:	4770      	bx	lr
	...

081022cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81022cc:	b590      	push	{r4, r7, lr}
 81022ce:	b089      	sub	sp, #36	; 0x24
 81022d0:	af00      	add	r7, sp, #0
 81022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81022d4:	2300      	movs	r3, #0
 81022d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81022d8:	2300      	movs	r3, #0
 81022da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d101      	bne.n	81022e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81022e2:	2301      	movs	r3, #1
 81022e4:	e18f      	b.n	8102606 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	68db      	ldr	r3, [r3, #12]
 81022ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	d109      	bne.n	8102308 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81022f4:	6878      	ldr	r0, [r7, #4]
 81022f6:	f7ff fad5 	bl	81018a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	2200      	movs	r2, #0
 81022fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	2200      	movs	r2, #0
 8102304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	4618      	mov	r0, r3
 810230e:	f7ff ff3f 	bl	8102190 <LL_ADC_IsDeepPowerDownEnabled>
 8102312:	4603      	mov	r3, r0
 8102314:	2b00      	cmp	r3, #0
 8102316:	d004      	beq.n	8102322 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102318:	687b      	ldr	r3, [r7, #4]
 810231a:	681b      	ldr	r3, [r3, #0]
 810231c:	4618      	mov	r0, r3
 810231e:	f7ff ff25 	bl	810216c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	4618      	mov	r0, r3
 8102328:	f7ff ff5a 	bl	81021e0 <LL_ADC_IsInternalRegulatorEnabled>
 810232c:	4603      	mov	r3, r0
 810232e:	2b00      	cmp	r3, #0
 8102330:	d114      	bne.n	810235c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	4618      	mov	r0, r3
 8102338:	f7ff ff3e 	bl	81021b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810233c:	4b88      	ldr	r3, [pc, #544]	; (8102560 <HAL_ADC_Init+0x294>)
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	099b      	lsrs	r3, r3, #6
 8102342:	4a88      	ldr	r2, [pc, #544]	; (8102564 <HAL_ADC_Init+0x298>)
 8102344:	fba2 2303 	umull	r2, r3, r2, r3
 8102348:	099b      	lsrs	r3, r3, #6
 810234a:	3301      	adds	r3, #1
 810234c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810234e:	e002      	b.n	8102356 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102350:	68bb      	ldr	r3, [r7, #8]
 8102352:	3b01      	subs	r3, #1
 8102354:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102356:	68bb      	ldr	r3, [r7, #8]
 8102358:	2b00      	cmp	r3, #0
 810235a:	d1f9      	bne.n	8102350 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	4618      	mov	r0, r3
 8102362:	f7ff ff3d 	bl	81021e0 <LL_ADC_IsInternalRegulatorEnabled>
 8102366:	4603      	mov	r3, r0
 8102368:	2b00      	cmp	r3, #0
 810236a:	d10d      	bne.n	8102388 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102370:	f043 0210 	orr.w	r2, r3, #16
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810237c:	f043 0201 	orr.w	r2, r3, #1
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102384:	2301      	movs	r3, #1
 8102386:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	4618      	mov	r0, r3
 810238e:	f7ff ff76 	bl	810227e <LL_ADC_REG_IsConversionOngoing>
 8102392:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102398:	f003 0310 	and.w	r3, r3, #16
 810239c:	2b00      	cmp	r3, #0
 810239e:	f040 8129 	bne.w	81025f4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81023a2:	697b      	ldr	r3, [r7, #20]
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	f040 8125 	bne.w	81025f4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81023aa:	687b      	ldr	r3, [r7, #4]
 81023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81023b2:	f043 0202 	orr.w	r2, r3, #2
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	4618      	mov	r0, r3
 81023c0:	f7ff ff36 	bl	8102230 <LL_ADC_IsEnabled>
 81023c4:	4603      	mov	r3, r0
 81023c6:	2b00      	cmp	r3, #0
 81023c8:	d136      	bne.n	8102438 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	681b      	ldr	r3, [r3, #0]
 81023ce:	4a66      	ldr	r2, [pc, #408]	; (8102568 <HAL_ADC_Init+0x29c>)
 81023d0:	4293      	cmp	r3, r2
 81023d2:	d004      	beq.n	81023de <HAL_ADC_Init+0x112>
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	4a64      	ldr	r2, [pc, #400]	; (810256c <HAL_ADC_Init+0x2a0>)
 81023da:	4293      	cmp	r3, r2
 81023dc:	d10e      	bne.n	81023fc <HAL_ADC_Init+0x130>
 81023de:	4862      	ldr	r0, [pc, #392]	; (8102568 <HAL_ADC_Init+0x29c>)
 81023e0:	f7ff ff26 	bl	8102230 <LL_ADC_IsEnabled>
 81023e4:	4604      	mov	r4, r0
 81023e6:	4861      	ldr	r0, [pc, #388]	; (810256c <HAL_ADC_Init+0x2a0>)
 81023e8:	f7ff ff22 	bl	8102230 <LL_ADC_IsEnabled>
 81023ec:	4603      	mov	r3, r0
 81023ee:	4323      	orrs	r3, r4
 81023f0:	2b00      	cmp	r3, #0
 81023f2:	bf0c      	ite	eq
 81023f4:	2301      	moveq	r3, #1
 81023f6:	2300      	movne	r3, #0
 81023f8:	b2db      	uxtb	r3, r3
 81023fa:	e008      	b.n	810240e <HAL_ADC_Init+0x142>
 81023fc:	485c      	ldr	r0, [pc, #368]	; (8102570 <HAL_ADC_Init+0x2a4>)
 81023fe:	f7ff ff17 	bl	8102230 <LL_ADC_IsEnabled>
 8102402:	4603      	mov	r3, r0
 8102404:	2b00      	cmp	r3, #0
 8102406:	bf0c      	ite	eq
 8102408:	2301      	moveq	r3, #1
 810240a:	2300      	movne	r3, #0
 810240c:	b2db      	uxtb	r3, r3
 810240e:	2b00      	cmp	r3, #0
 8102410:	d012      	beq.n	8102438 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	4a54      	ldr	r2, [pc, #336]	; (8102568 <HAL_ADC_Init+0x29c>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d004      	beq.n	8102426 <HAL_ADC_Init+0x15a>
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a52      	ldr	r2, [pc, #328]	; (810256c <HAL_ADC_Init+0x2a0>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d101      	bne.n	810242a <HAL_ADC_Init+0x15e>
 8102426:	4a53      	ldr	r2, [pc, #332]	; (8102574 <HAL_ADC_Init+0x2a8>)
 8102428:	e000      	b.n	810242c <HAL_ADC_Init+0x160>
 810242a:	4a53      	ldr	r2, [pc, #332]	; (8102578 <HAL_ADC_Init+0x2ac>)
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	685b      	ldr	r3, [r3, #4]
 8102430:	4619      	mov	r1, r3
 8102432:	4610      	mov	r0, r2
 8102434:	f7ff fd68 	bl	8101f08 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102438:	f7ff fd5a 	bl	8101ef0 <HAL_GetREVID>
 810243c:	4603      	mov	r3, r0
 810243e:	f241 0203 	movw	r2, #4099	; 0x1003
 8102442:	4293      	cmp	r3, r2
 8102444:	d914      	bls.n	8102470 <HAL_ADC_Init+0x1a4>
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	689b      	ldr	r3, [r3, #8]
 810244a:	2b10      	cmp	r3, #16
 810244c:	d110      	bne.n	8102470 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	7d5b      	ldrb	r3, [r3, #21]
 8102452:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102458:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810245e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	7f1b      	ldrb	r3, [r3, #28]
 8102464:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102466:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102468:	f043 030c 	orr.w	r3, r3, #12
 810246c:	61bb      	str	r3, [r7, #24]
 810246e:	e00d      	b.n	810248c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	7d5b      	ldrb	r3, [r3, #21]
 8102474:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810247a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102480:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	7f1b      	ldrb	r3, [r3, #28]
 8102486:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102488:	4313      	orrs	r3, r2
 810248a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	7f1b      	ldrb	r3, [r3, #28]
 8102490:	2b01      	cmp	r3, #1
 8102492:	d106      	bne.n	81024a2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	6a1b      	ldr	r3, [r3, #32]
 8102498:	3b01      	subs	r3, #1
 810249a:	045b      	lsls	r3, r3, #17
 810249c:	69ba      	ldr	r2, [r7, #24]
 810249e:	4313      	orrs	r3, r2
 81024a0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024a6:	2b00      	cmp	r3, #0
 81024a8:	d009      	beq.n	81024be <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024ae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024b6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81024b8:	69ba      	ldr	r2, [r7, #24]
 81024ba:	4313      	orrs	r3, r2
 81024bc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	68da      	ldr	r2, [r3, #12]
 81024c4:	4b2d      	ldr	r3, [pc, #180]	; (810257c <HAL_ADC_Init+0x2b0>)
 81024c6:	4013      	ands	r3, r2
 81024c8:	687a      	ldr	r2, [r7, #4]
 81024ca:	6812      	ldr	r2, [r2, #0]
 81024cc:	69b9      	ldr	r1, [r7, #24]
 81024ce:	430b      	orrs	r3, r1
 81024d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	4618      	mov	r0, r3
 81024d8:	f7ff fed1 	bl	810227e <LL_ADC_REG_IsConversionOngoing>
 81024dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	681b      	ldr	r3, [r3, #0]
 81024e2:	4618      	mov	r0, r3
 81024e4:	f7ff fede 	bl	81022a4 <LL_ADC_INJ_IsConversionOngoing>
 81024e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81024ea:	693b      	ldr	r3, [r7, #16]
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	d15f      	bne.n	81025b0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81024f0:	68fb      	ldr	r3, [r7, #12]
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d15c      	bne.n	81025b0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	7d1b      	ldrb	r3, [r3, #20]
 81024fa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8102500:	4313      	orrs	r3, r2
 8102502:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	68db      	ldr	r3, [r3, #12]
 810250a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810250e:	f023 0303 	bic.w	r3, r3, #3
 8102512:	687a      	ldr	r2, [r7, #4]
 8102514:	6812      	ldr	r2, [r2, #0]
 8102516:	69b9      	ldr	r1, [r7, #24]
 8102518:	430b      	orrs	r3, r1
 810251a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8102522:	2b01      	cmp	r3, #1
 8102524:	d12e      	bne.n	8102584 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810252a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	691a      	ldr	r2, [r3, #16]
 8102532:	4b13      	ldr	r3, [pc, #76]	; (8102580 <HAL_ADC_Init+0x2b4>)
 8102534:	4013      	ands	r3, r2
 8102536:	687a      	ldr	r2, [r7, #4]
 8102538:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810253a:	3a01      	subs	r2, #1
 810253c:	0411      	lsls	r1, r2, #16
 810253e:	687a      	ldr	r2, [r7, #4]
 8102540:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102542:	4311      	orrs	r1, r2
 8102544:	687a      	ldr	r2, [r7, #4]
 8102546:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102548:	4311      	orrs	r1, r2
 810254a:	687a      	ldr	r2, [r7, #4]
 810254c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810254e:	430a      	orrs	r2, r1
 8102550:	431a      	orrs	r2, r3
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	f042 0201 	orr.w	r2, r2, #1
 810255a:	611a      	str	r2, [r3, #16]
 810255c:	e01a      	b.n	8102594 <HAL_ADC_Init+0x2c8>
 810255e:	bf00      	nop
 8102560:	10000000 	.word	0x10000000
 8102564:	053e2d63 	.word	0x053e2d63
 8102568:	40022000 	.word	0x40022000
 810256c:	40022100 	.word	0x40022100
 8102570:	58026000 	.word	0x58026000
 8102574:	40022300 	.word	0x40022300
 8102578:	58026300 	.word	0x58026300
 810257c:	fff0c003 	.word	0xfff0c003
 8102580:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	691a      	ldr	r2, [r3, #16]
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	f022 0201 	bic.w	r2, r2, #1
 8102592:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	691b      	ldr	r3, [r3, #16]
 810259a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	430a      	orrs	r2, r1
 81025a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81025aa:	6878      	ldr	r0, [r7, #4]
 81025ac:	f000 fdd6 	bl	810315c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	68db      	ldr	r3, [r3, #12]
 81025b4:	2b01      	cmp	r3, #1
 81025b6:	d10c      	bne.n	81025d2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81025be:	f023 010f 	bic.w	r1, r3, #15
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	699b      	ldr	r3, [r3, #24]
 81025c6:	1e5a      	subs	r2, r3, #1
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	430a      	orrs	r2, r1
 81025ce:	631a      	str	r2, [r3, #48]	; 0x30
 81025d0:	e007      	b.n	81025e2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	f022 020f 	bic.w	r2, r2, #15
 81025e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025e6:	f023 0303 	bic.w	r3, r3, #3
 81025ea:	f043 0201 	orr.w	r2, r3, #1
 81025ee:	687b      	ldr	r3, [r7, #4]
 81025f0:	655a      	str	r2, [r3, #84]	; 0x54
 81025f2:	e007      	b.n	8102604 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025f8:	f043 0210 	orr.w	r2, r3, #16
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102600:	2301      	movs	r3, #1
 8102602:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102604:	7ffb      	ldrb	r3, [r7, #31]
}
 8102606:	4618      	mov	r0, r3
 8102608:	3724      	adds	r7, #36	; 0x24
 810260a:	46bd      	mov	sp, r7
 810260c:	bd90      	pop	{r4, r7, pc}
 810260e:	bf00      	nop

08102610 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8102610:	b580      	push	{r7, lr}
 8102612:	b086      	sub	sp, #24
 8102614:	af00      	add	r7, sp, #0
 8102616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a5d      	ldr	r2, [pc, #372]	; (8102794 <HAL_ADC_Start+0x184>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d004      	beq.n	810262c <HAL_ADC_Start+0x1c>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	4a5c      	ldr	r2, [pc, #368]	; (8102798 <HAL_ADC_Start+0x188>)
 8102628:	4293      	cmp	r3, r2
 810262a:	d101      	bne.n	8102630 <HAL_ADC_Start+0x20>
 810262c:	4b5b      	ldr	r3, [pc, #364]	; (810279c <HAL_ADC_Start+0x18c>)
 810262e:	e000      	b.n	8102632 <HAL_ADC_Start+0x22>
 8102630:	4b5b      	ldr	r3, [pc, #364]	; (81027a0 <HAL_ADC_Start+0x190>)
 8102632:	4618      	mov	r0, r3
 8102634:	f7ff fd7e 	bl	8102134 <LL_ADC_GetMultimode>
 8102638:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	4618      	mov	r0, r3
 8102640:	f7ff fe1d 	bl	810227e <LL_ADC_REG_IsConversionOngoing>
 8102644:	4603      	mov	r3, r0
 8102646:	2b00      	cmp	r3, #0
 8102648:	f040 809c 	bne.w	8102784 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102652:	2b01      	cmp	r3, #1
 8102654:	d101      	bne.n	810265a <HAL_ADC_Start+0x4a>
 8102656:	2302      	movs	r3, #2
 8102658:	e097      	b.n	810278a <HAL_ADC_Start+0x17a>
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	2201      	movs	r2, #1
 810265e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8102662:	6878      	ldr	r0, [r7, #4]
 8102664:	f000 fcf0 	bl	8103048 <ADC_Enable>
 8102668:	4603      	mov	r3, r0
 810266a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 810266c:	7dfb      	ldrb	r3, [r7, #23]
 810266e:	2b00      	cmp	r3, #0
 8102670:	f040 8083 	bne.w	810277a <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810267c:	f023 0301 	bic.w	r3, r3, #1
 8102680:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a42      	ldr	r2, [pc, #264]	; (8102798 <HAL_ADC_Start+0x188>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d002      	beq.n	8102698 <HAL_ADC_Start+0x88>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	e000      	b.n	810269a <HAL_ADC_Start+0x8a>
 8102698:	4b3e      	ldr	r3, [pc, #248]	; (8102794 <HAL_ADC_Start+0x184>)
 810269a:	687a      	ldr	r2, [r7, #4]
 810269c:	6812      	ldr	r2, [r2, #0]
 810269e:	4293      	cmp	r3, r2
 81026a0:	d002      	beq.n	81026a8 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81026a2:	693b      	ldr	r3, [r7, #16]
 81026a4:	2b00      	cmp	r3, #0
 81026a6:	d105      	bne.n	81026b4 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81026bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026c0:	d106      	bne.n	81026d0 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81026c6:	f023 0206 	bic.w	r2, r3, #6
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	659a      	str	r2, [r3, #88]	; 0x58
 81026ce:	e002      	b.n	81026d6 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	2200      	movs	r2, #0
 81026d4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	221c      	movs	r2, #28
 81026dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	2200      	movs	r2, #0
 81026e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	4a2b      	ldr	r2, [pc, #172]	; (8102798 <HAL_ADC_Start+0x188>)
 81026ec:	4293      	cmp	r3, r2
 81026ee:	d002      	beq.n	81026f6 <HAL_ADC_Start+0xe6>
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	e000      	b.n	81026f8 <HAL_ADC_Start+0xe8>
 81026f6:	4b27      	ldr	r3, [pc, #156]	; (8102794 <HAL_ADC_Start+0x184>)
 81026f8:	687a      	ldr	r2, [r7, #4]
 81026fa:	6812      	ldr	r2, [r2, #0]
 81026fc:	4293      	cmp	r3, r2
 81026fe:	d008      	beq.n	8102712 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102700:	693b      	ldr	r3, [r7, #16]
 8102702:	2b00      	cmp	r3, #0
 8102704:	d005      	beq.n	8102712 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102706:	693b      	ldr	r3, [r7, #16]
 8102708:	2b05      	cmp	r3, #5
 810270a:	d002      	beq.n	8102712 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810270c:	693b      	ldr	r3, [r7, #16]
 810270e:	2b09      	cmp	r3, #9
 8102710:	d114      	bne.n	810273c <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	681b      	ldr	r3, [r3, #0]
 8102716:	68db      	ldr	r3, [r3, #12]
 8102718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810271c:	2b00      	cmp	r3, #0
 810271e:	d007      	beq.n	8102730 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102724:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102728:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	4618      	mov	r0, r3
 8102736:	f7ff fd8e 	bl	8102256 <LL_ADC_REG_StartConversion>
 810273a:	e025      	b.n	8102788 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102740:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	4a12      	ldr	r2, [pc, #72]	; (8102798 <HAL_ADC_Start+0x188>)
 810274e:	4293      	cmp	r3, r2
 8102750:	d002      	beq.n	8102758 <HAL_ADC_Start+0x148>
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	e000      	b.n	810275a <HAL_ADC_Start+0x14a>
 8102758:	4b0e      	ldr	r3, [pc, #56]	; (8102794 <HAL_ADC_Start+0x184>)
 810275a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810275c:	68fb      	ldr	r3, [r7, #12]
 810275e:	68db      	ldr	r3, [r3, #12]
 8102760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102764:	2b00      	cmp	r3, #0
 8102766:	d00f      	beq.n	8102788 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810276c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102770:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	655a      	str	r2, [r3, #84]	; 0x54
 8102778:	e006      	b.n	8102788 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	2200      	movs	r2, #0
 810277e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8102782:	e001      	b.n	8102788 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8102784:	2302      	movs	r3, #2
 8102786:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8102788:	7dfb      	ldrb	r3, [r7, #23]
}
 810278a:	4618      	mov	r0, r3
 810278c:	3718      	adds	r7, #24
 810278e:	46bd      	mov	sp, r7
 8102790:	bd80      	pop	{r7, pc}
 8102792:	bf00      	nop
 8102794:	40022000 	.word	0x40022000
 8102798:	40022100 	.word	0x40022100
 810279c:	40022300 	.word	0x40022300
 81027a0:	58026300 	.word	0x58026300

081027a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 81027a4:	b580      	push	{r7, lr}
 81027a6:	b088      	sub	sp, #32
 81027a8:	af00      	add	r7, sp, #0
 81027aa:	6078      	str	r0, [r7, #4]
 81027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	4a72      	ldr	r2, [pc, #456]	; (810297c <HAL_ADC_PollForConversion+0x1d8>)
 81027b4:	4293      	cmp	r3, r2
 81027b6:	d004      	beq.n	81027c2 <HAL_ADC_PollForConversion+0x1e>
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a70      	ldr	r2, [pc, #448]	; (8102980 <HAL_ADC_PollForConversion+0x1dc>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d101      	bne.n	81027c6 <HAL_ADC_PollForConversion+0x22>
 81027c2:	4b70      	ldr	r3, [pc, #448]	; (8102984 <HAL_ADC_PollForConversion+0x1e0>)
 81027c4:	e000      	b.n	81027c8 <HAL_ADC_PollForConversion+0x24>
 81027c6:	4b70      	ldr	r3, [pc, #448]	; (8102988 <HAL_ADC_PollForConversion+0x1e4>)
 81027c8:	4618      	mov	r0, r3
 81027ca:	f7ff fcb3 	bl	8102134 <LL_ADC_GetMultimode>
 81027ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	691b      	ldr	r3, [r3, #16]
 81027d4:	2b08      	cmp	r3, #8
 81027d6:	d102      	bne.n	81027de <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 81027d8:	2308      	movs	r3, #8
 81027da:	61fb      	str	r3, [r7, #28]
 81027dc:	e037      	b.n	810284e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81027de:	697b      	ldr	r3, [r7, #20]
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d005      	beq.n	81027f0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81027e4:	697b      	ldr	r3, [r7, #20]
 81027e6:	2b05      	cmp	r3, #5
 81027e8:	d002      	beq.n	81027f0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81027ea:	697b      	ldr	r3, [r7, #20]
 81027ec:	2b09      	cmp	r3, #9
 81027ee:	d111      	bne.n	8102814 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	68db      	ldr	r3, [r3, #12]
 81027f6:	f003 0301 	and.w	r3, r3, #1
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d007      	beq.n	810280e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102802:	f043 0220 	orr.w	r2, r3, #32
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 810280a:	2301      	movs	r3, #1
 810280c:	e0b1      	b.n	8102972 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 810280e:	2304      	movs	r3, #4
 8102810:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8102812:	e01c      	b.n	810284e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	4a58      	ldr	r2, [pc, #352]	; (810297c <HAL_ADC_PollForConversion+0x1d8>)
 810281a:	4293      	cmp	r3, r2
 810281c:	d004      	beq.n	8102828 <HAL_ADC_PollForConversion+0x84>
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	4a57      	ldr	r2, [pc, #348]	; (8102980 <HAL_ADC_PollForConversion+0x1dc>)
 8102824:	4293      	cmp	r3, r2
 8102826:	d101      	bne.n	810282c <HAL_ADC_PollForConversion+0x88>
 8102828:	4b56      	ldr	r3, [pc, #344]	; (8102984 <HAL_ADC_PollForConversion+0x1e0>)
 810282a:	e000      	b.n	810282e <HAL_ADC_PollForConversion+0x8a>
 810282c:	4b56      	ldr	r3, [pc, #344]	; (8102988 <HAL_ADC_PollForConversion+0x1e4>)
 810282e:	4618      	mov	r0, r3
 8102830:	f7ff fc8e 	bl	8102150 <LL_ADC_GetMultiDMATransfer>
 8102834:	4603      	mov	r3, r0
 8102836:	2b00      	cmp	r3, #0
 8102838:	d007      	beq.n	810284a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810283e:	f043 0220 	orr.w	r2, r3, #32
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8102846:	2301      	movs	r3, #1
 8102848:	e093      	b.n	8102972 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 810284a:	2304      	movs	r3, #4
 810284c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 810284e:	f7ff fb1f 	bl	8101e90 <HAL_GetTick>
 8102852:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102854:	e021      	b.n	810289a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8102856:	683b      	ldr	r3, [r7, #0]
 8102858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810285c:	d01d      	beq.n	810289a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 810285e:	f7ff fb17 	bl	8101e90 <HAL_GetTick>
 8102862:	4602      	mov	r2, r0
 8102864:	693b      	ldr	r3, [r7, #16]
 8102866:	1ad3      	subs	r3, r2, r3
 8102868:	683a      	ldr	r2, [r7, #0]
 810286a:	429a      	cmp	r2, r3
 810286c:	d302      	bcc.n	8102874 <HAL_ADC_PollForConversion+0xd0>
 810286e:	683b      	ldr	r3, [r7, #0]
 8102870:	2b00      	cmp	r3, #0
 8102872:	d112      	bne.n	810289a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	681a      	ldr	r2, [r3, #0]
 810287a:	69fb      	ldr	r3, [r7, #28]
 810287c:	4013      	ands	r3, r2
 810287e:	2b00      	cmp	r3, #0
 8102880:	d10b      	bne.n	810289a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102886:	f043 0204 	orr.w	r2, r3, #4
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	2200      	movs	r2, #0
 8102892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8102896:	2303      	movs	r3, #3
 8102898:	e06b      	b.n	8102972 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	681a      	ldr	r2, [r3, #0]
 81028a0:	69fb      	ldr	r3, [r7, #28]
 81028a2:	4013      	ands	r3, r2
 81028a4:	2b00      	cmp	r3, #0
 81028a6:	d0d6      	beq.n	8102856 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	4618      	mov	r0, r3
 81028ba:	f7ff fbad 	bl	8102018 <LL_ADC_REG_IsTriggerSourceSWStart>
 81028be:	4603      	mov	r3, r0
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d01c      	beq.n	81028fe <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	7d5b      	ldrb	r3, [r3, #21]
 81028c8:	2b00      	cmp	r3, #0
 81028ca:	d118      	bne.n	81028fe <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	f003 0308 	and.w	r3, r3, #8
 81028d6:	2b08      	cmp	r3, #8
 81028d8:	d111      	bne.n	81028fe <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81028ee:	2b00      	cmp	r3, #0
 81028f0:	d105      	bne.n	81028fe <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028f6:	f043 0201 	orr.w	r2, r3, #1
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	4a1f      	ldr	r2, [pc, #124]	; (8102980 <HAL_ADC_PollForConversion+0x1dc>)
 8102904:	4293      	cmp	r3, r2
 8102906:	d002      	beq.n	810290e <HAL_ADC_PollForConversion+0x16a>
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	e000      	b.n	8102910 <HAL_ADC_PollForConversion+0x16c>
 810290e:	4b1b      	ldr	r3, [pc, #108]	; (810297c <HAL_ADC_PollForConversion+0x1d8>)
 8102910:	687a      	ldr	r2, [r7, #4]
 8102912:	6812      	ldr	r2, [r2, #0]
 8102914:	4293      	cmp	r3, r2
 8102916:	d008      	beq.n	810292a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102918:	697b      	ldr	r3, [r7, #20]
 810291a:	2b00      	cmp	r3, #0
 810291c:	d005      	beq.n	810292a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810291e:	697b      	ldr	r3, [r7, #20]
 8102920:	2b05      	cmp	r3, #5
 8102922:	d002      	beq.n	810292a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102924:	697b      	ldr	r3, [r7, #20]
 8102926:	2b09      	cmp	r3, #9
 8102928:	d104      	bne.n	8102934 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	68db      	ldr	r3, [r3, #12]
 8102930:	61bb      	str	r3, [r7, #24]
 8102932:	e00c      	b.n	810294e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	4a11      	ldr	r2, [pc, #68]	; (8102980 <HAL_ADC_PollForConversion+0x1dc>)
 810293a:	4293      	cmp	r3, r2
 810293c:	d002      	beq.n	8102944 <HAL_ADC_PollForConversion+0x1a0>
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	e000      	b.n	8102946 <HAL_ADC_PollForConversion+0x1a2>
 8102944:	4b0d      	ldr	r3, [pc, #52]	; (810297c <HAL_ADC_PollForConversion+0x1d8>)
 8102946:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102948:	68fb      	ldr	r3, [r7, #12]
 810294a:	68db      	ldr	r3, [r3, #12]
 810294c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 810294e:	69fb      	ldr	r3, [r7, #28]
 8102950:	2b08      	cmp	r3, #8
 8102952:	d104      	bne.n	810295e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	2208      	movs	r2, #8
 810295a:	601a      	str	r2, [r3, #0]
 810295c:	e008      	b.n	8102970 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 810295e:	69bb      	ldr	r3, [r7, #24]
 8102960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102964:	2b00      	cmp	r3, #0
 8102966:	d103      	bne.n	8102970 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	220c      	movs	r2, #12
 810296e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8102970:	2300      	movs	r3, #0
}
 8102972:	4618      	mov	r0, r3
 8102974:	3720      	adds	r7, #32
 8102976:	46bd      	mov	sp, r7
 8102978:	bd80      	pop	{r7, pc}
 810297a:	bf00      	nop
 810297c:	40022000 	.word	0x40022000
 8102980:	40022100 	.word	0x40022100
 8102984:	40022300 	.word	0x40022300
 8102988:	58026300 	.word	0x58026300

0810298c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 810298c:	b480      	push	{r7}
 810298e:	b083      	sub	sp, #12
 8102990:	af00      	add	r7, sp, #0
 8102992:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 810299a:	4618      	mov	r0, r3
 810299c:	370c      	adds	r7, #12
 810299e:	46bd      	mov	sp, r7
 81029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a4:	4770      	bx	lr
	...

081029a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81029a8:	b590      	push	{r4, r7, lr}
 81029aa:	b0a1      	sub	sp, #132	; 0x84
 81029ac:	af00      	add	r7, sp, #0
 81029ae:	6078      	str	r0, [r7, #4]
 81029b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81029b2:	2300      	movs	r3, #0
 81029b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81029b8:	2300      	movs	r3, #0
 81029ba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81029bc:	683b      	ldr	r3, [r7, #0]
 81029be:	68db      	ldr	r3, [r3, #12]
 81029c0:	4a9d      	ldr	r2, [pc, #628]	; (8102c38 <HAL_ADC_ConfigChannel+0x290>)
 81029c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81029ca:	2b01      	cmp	r3, #1
 81029cc:	d101      	bne.n	81029d2 <HAL_ADC_ConfigChannel+0x2a>
 81029ce:	2302      	movs	r3, #2
 81029d0:	e321      	b.n	8103016 <HAL_ADC_ConfigChannel+0x66e>
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	2201      	movs	r2, #1
 81029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	4618      	mov	r0, r3
 81029e0:	f7ff fc4d 	bl	810227e <LL_ADC_REG_IsConversionOngoing>
 81029e4:	4603      	mov	r3, r0
 81029e6:	2b00      	cmp	r3, #0
 81029e8:	f040 8306 	bne.w	8102ff8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81029ec:	683b      	ldr	r3, [r7, #0]
 81029ee:	681b      	ldr	r3, [r3, #0]
 81029f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81029f4:	2b00      	cmp	r3, #0
 81029f6:	d108      	bne.n	8102a0a <HAL_ADC_ConfigChannel+0x62>
 81029f8:	683b      	ldr	r3, [r7, #0]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	0e9b      	lsrs	r3, r3, #26
 81029fe:	f003 031f 	and.w	r3, r3, #31
 8102a02:	2201      	movs	r2, #1
 8102a04:	fa02 f303 	lsl.w	r3, r2, r3
 8102a08:	e016      	b.n	8102a38 <HAL_ADC_ConfigChannel+0x90>
 8102a0a:	683b      	ldr	r3, [r7, #0]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102a12:	fa93 f3a3 	rbit	r3, r3
 8102a16:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102a1a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102a1e:	2b00      	cmp	r3, #0
 8102a20:	d101      	bne.n	8102a26 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8102a22:	2320      	movs	r3, #32
 8102a24:	e003      	b.n	8102a2e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8102a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102a28:	fab3 f383 	clz	r3, r3
 8102a2c:	b2db      	uxtb	r3, r3
 8102a2e:	f003 031f 	and.w	r3, r3, #31
 8102a32:	2201      	movs	r2, #1
 8102a34:	fa02 f303 	lsl.w	r3, r2, r3
 8102a38:	687a      	ldr	r2, [r7, #4]
 8102a3a:	6812      	ldr	r2, [r2, #0]
 8102a3c:	69d1      	ldr	r1, [r2, #28]
 8102a3e:	687a      	ldr	r2, [r7, #4]
 8102a40:	6812      	ldr	r2, [r2, #0]
 8102a42:	430b      	orrs	r3, r1
 8102a44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	6818      	ldr	r0, [r3, #0]
 8102a4a:	683b      	ldr	r3, [r7, #0]
 8102a4c:	6859      	ldr	r1, [r3, #4]
 8102a4e:	683b      	ldr	r3, [r7, #0]
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	461a      	mov	r2, r3
 8102a54:	f7ff faf3 	bl	810203e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	4618      	mov	r0, r3
 8102a5e:	f7ff fc0e 	bl	810227e <LL_ADC_REG_IsConversionOngoing>
 8102a62:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	4618      	mov	r0, r3
 8102a6a:	f7ff fc1b 	bl	81022a4 <LL_ADC_INJ_IsConversionOngoing>
 8102a6e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102a72:	2b00      	cmp	r3, #0
 8102a74:	f040 80b3 	bne.w	8102bde <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	f040 80af 	bne.w	8102bde <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102a80:	687b      	ldr	r3, [r7, #4]
 8102a82:	6818      	ldr	r0, [r3, #0]
 8102a84:	683b      	ldr	r3, [r7, #0]
 8102a86:	6819      	ldr	r1, [r3, #0]
 8102a88:	683b      	ldr	r3, [r7, #0]
 8102a8a:	689b      	ldr	r3, [r3, #8]
 8102a8c:	461a      	mov	r2, r3
 8102a8e:	f7ff fb02 	bl	8102096 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102a92:	4b6a      	ldr	r3, [pc, #424]	; (8102c3c <HAL_ADC_ConfigChannel+0x294>)
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102a9e:	d10b      	bne.n	8102ab8 <HAL_ADC_ConfigChannel+0x110>
 8102aa0:	683b      	ldr	r3, [r7, #0]
 8102aa2:	695a      	ldr	r2, [r3, #20]
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	68db      	ldr	r3, [r3, #12]
 8102aaa:	089b      	lsrs	r3, r3, #2
 8102aac:	f003 0307 	and.w	r3, r3, #7
 8102ab0:	005b      	lsls	r3, r3, #1
 8102ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8102ab6:	e01d      	b.n	8102af4 <HAL_ADC_ConfigChannel+0x14c>
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	68db      	ldr	r3, [r3, #12]
 8102abe:	f003 0310 	and.w	r3, r3, #16
 8102ac2:	2b00      	cmp	r3, #0
 8102ac4:	d10b      	bne.n	8102ade <HAL_ADC_ConfigChannel+0x136>
 8102ac6:	683b      	ldr	r3, [r7, #0]
 8102ac8:	695a      	ldr	r2, [r3, #20]
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	681b      	ldr	r3, [r3, #0]
 8102ace:	68db      	ldr	r3, [r3, #12]
 8102ad0:	089b      	lsrs	r3, r3, #2
 8102ad2:	f003 0307 	and.w	r3, r3, #7
 8102ad6:	005b      	lsls	r3, r3, #1
 8102ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8102adc:	e00a      	b.n	8102af4 <HAL_ADC_ConfigChannel+0x14c>
 8102ade:	683b      	ldr	r3, [r7, #0]
 8102ae0:	695a      	ldr	r2, [r3, #20]
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	68db      	ldr	r3, [r3, #12]
 8102ae8:	089b      	lsrs	r3, r3, #2
 8102aea:	f003 0304 	and.w	r3, r3, #4
 8102aee:	005b      	lsls	r3, r3, #1
 8102af0:	fa02 f303 	lsl.w	r3, r2, r3
 8102af4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102af6:	683b      	ldr	r3, [r7, #0]
 8102af8:	691b      	ldr	r3, [r3, #16]
 8102afa:	2b04      	cmp	r3, #4
 8102afc:	d027      	beq.n	8102b4e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	6818      	ldr	r0, [r3, #0]
 8102b02:	683b      	ldr	r3, [r7, #0]
 8102b04:	6919      	ldr	r1, [r3, #16]
 8102b06:	683b      	ldr	r3, [r7, #0]
 8102b08:	681a      	ldr	r2, [r3, #0]
 8102b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102b0c:	f7ff fa30 	bl	8101f70 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	6818      	ldr	r0, [r3, #0]
 8102b14:	683b      	ldr	r3, [r7, #0]
 8102b16:	6919      	ldr	r1, [r3, #16]
 8102b18:	683b      	ldr	r3, [r7, #0]
 8102b1a:	7e5b      	ldrb	r3, [r3, #25]
 8102b1c:	2b01      	cmp	r3, #1
 8102b1e:	d102      	bne.n	8102b26 <HAL_ADC_ConfigChannel+0x17e>
 8102b20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102b24:	e000      	b.n	8102b28 <HAL_ADC_ConfigChannel+0x180>
 8102b26:	2300      	movs	r3, #0
 8102b28:	461a      	mov	r2, r3
 8102b2a:	f7ff fa5a 	bl	8101fe2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	6818      	ldr	r0, [r3, #0]
 8102b32:	683b      	ldr	r3, [r7, #0]
 8102b34:	6919      	ldr	r1, [r3, #16]
 8102b36:	683b      	ldr	r3, [r7, #0]
 8102b38:	7e1b      	ldrb	r3, [r3, #24]
 8102b3a:	2b01      	cmp	r3, #1
 8102b3c:	d102      	bne.n	8102b44 <HAL_ADC_ConfigChannel+0x19c>
 8102b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102b42:	e000      	b.n	8102b46 <HAL_ADC_ConfigChannel+0x19e>
 8102b44:	2300      	movs	r3, #0
 8102b46:	461a      	mov	r2, r3
 8102b48:	f7ff fa32 	bl	8101fb0 <LL_ADC_SetDataRightShift>
 8102b4c:	e047      	b.n	8102bde <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b58:	683b      	ldr	r3, [r7, #0]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	069b      	lsls	r3, r3, #26
 8102b5e:	429a      	cmp	r2, r3
 8102b60:	d107      	bne.n	8102b72 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b70:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b7c:	683b      	ldr	r3, [r7, #0]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	069b      	lsls	r3, r3, #26
 8102b82:	429a      	cmp	r2, r3
 8102b84:	d107      	bne.n	8102b96 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b94:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102b9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102ba0:	683b      	ldr	r3, [r7, #0]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	069b      	lsls	r3, r3, #26
 8102ba6:	429a      	cmp	r2, r3
 8102ba8:	d107      	bne.n	8102bba <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102bb8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102bc4:	683b      	ldr	r3, [r7, #0]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	069b      	lsls	r3, r3, #26
 8102bca:	429a      	cmp	r2, r3
 8102bcc:	d107      	bne.n	8102bde <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102bdc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	4618      	mov	r0, r3
 8102be4:	f7ff fb24 	bl	8102230 <LL_ADC_IsEnabled>
 8102be8:	4603      	mov	r3, r0
 8102bea:	2b00      	cmp	r3, #0
 8102bec:	f040 820d 	bne.w	810300a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	6818      	ldr	r0, [r3, #0]
 8102bf4:	683b      	ldr	r3, [r7, #0]
 8102bf6:	6819      	ldr	r1, [r3, #0]
 8102bf8:	683b      	ldr	r3, [r7, #0]
 8102bfa:	68db      	ldr	r3, [r3, #12]
 8102bfc:	461a      	mov	r2, r3
 8102bfe:	f7ff fa75 	bl	81020ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102c02:	683b      	ldr	r3, [r7, #0]
 8102c04:	68db      	ldr	r3, [r3, #12]
 8102c06:	4a0c      	ldr	r2, [pc, #48]	; (8102c38 <HAL_ADC_ConfigChannel+0x290>)
 8102c08:	4293      	cmp	r3, r2
 8102c0a:	f040 8133 	bne.w	8102e74 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102c12:	683b      	ldr	r3, [r7, #0]
 8102c14:	681b      	ldr	r3, [r3, #0]
 8102c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d110      	bne.n	8102c40 <HAL_ADC_ConfigChannel+0x298>
 8102c1e:	683b      	ldr	r3, [r7, #0]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	0e9b      	lsrs	r3, r3, #26
 8102c24:	3301      	adds	r3, #1
 8102c26:	f003 031f 	and.w	r3, r3, #31
 8102c2a:	2b09      	cmp	r3, #9
 8102c2c:	bf94      	ite	ls
 8102c2e:	2301      	movls	r3, #1
 8102c30:	2300      	movhi	r3, #0
 8102c32:	b2db      	uxtb	r3, r3
 8102c34:	e01e      	b.n	8102c74 <HAL_ADC_ConfigChannel+0x2cc>
 8102c36:	bf00      	nop
 8102c38:	47ff0000 	.word	0x47ff0000
 8102c3c:	5c001000 	.word	0x5c001000
 8102c40:	683b      	ldr	r3, [r7, #0]
 8102c42:	681b      	ldr	r3, [r3, #0]
 8102c44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102c48:	fa93 f3a3 	rbit	r3, r3
 8102c4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102c54:	2b00      	cmp	r3, #0
 8102c56:	d101      	bne.n	8102c5c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102c58:	2320      	movs	r3, #32
 8102c5a:	e003      	b.n	8102c64 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102c5e:	fab3 f383 	clz	r3, r3
 8102c62:	b2db      	uxtb	r3, r3
 8102c64:	3301      	adds	r3, #1
 8102c66:	f003 031f 	and.w	r3, r3, #31
 8102c6a:	2b09      	cmp	r3, #9
 8102c6c:	bf94      	ite	ls
 8102c6e:	2301      	movls	r3, #1
 8102c70:	2300      	movhi	r3, #0
 8102c72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d079      	beq.n	8102d6c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102c78:	683b      	ldr	r3, [r7, #0]
 8102c7a:	681b      	ldr	r3, [r3, #0]
 8102c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d107      	bne.n	8102c94 <HAL_ADC_ConfigChannel+0x2ec>
 8102c84:	683b      	ldr	r3, [r7, #0]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	0e9b      	lsrs	r3, r3, #26
 8102c8a:	3301      	adds	r3, #1
 8102c8c:	069b      	lsls	r3, r3, #26
 8102c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c92:	e015      	b.n	8102cc0 <HAL_ADC_ConfigChannel+0x318>
 8102c94:	683b      	ldr	r3, [r7, #0]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102c9c:	fa93 f3a3 	rbit	r3, r3
 8102ca0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102ca4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d101      	bne.n	8102cb0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102cac:	2320      	movs	r3, #32
 8102cae:	e003      	b.n	8102cb8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102cb2:	fab3 f383 	clz	r3, r3
 8102cb6:	b2db      	uxtb	r3, r3
 8102cb8:	3301      	adds	r3, #1
 8102cba:	069b      	lsls	r3, r3, #26
 8102cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102cc0:	683b      	ldr	r3, [r7, #0]
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d109      	bne.n	8102ce0 <HAL_ADC_ConfigChannel+0x338>
 8102ccc:	683b      	ldr	r3, [r7, #0]
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	0e9b      	lsrs	r3, r3, #26
 8102cd2:	3301      	adds	r3, #1
 8102cd4:	f003 031f 	and.w	r3, r3, #31
 8102cd8:	2101      	movs	r1, #1
 8102cda:	fa01 f303 	lsl.w	r3, r1, r3
 8102cde:	e017      	b.n	8102d10 <HAL_ADC_ConfigChannel+0x368>
 8102ce0:	683b      	ldr	r3, [r7, #0]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102ce8:	fa93 f3a3 	rbit	r3, r3
 8102cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102cf0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102cf4:	2b00      	cmp	r3, #0
 8102cf6:	d101      	bne.n	8102cfc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102cf8:	2320      	movs	r3, #32
 8102cfa:	e003      	b.n	8102d04 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102cfe:	fab3 f383 	clz	r3, r3
 8102d02:	b2db      	uxtb	r3, r3
 8102d04:	3301      	adds	r3, #1
 8102d06:	f003 031f 	and.w	r3, r3, #31
 8102d0a:	2101      	movs	r1, #1
 8102d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8102d10:	ea42 0103 	orr.w	r1, r2, r3
 8102d14:	683b      	ldr	r3, [r7, #0]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	d10a      	bne.n	8102d36 <HAL_ADC_ConfigChannel+0x38e>
 8102d20:	683b      	ldr	r3, [r7, #0]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	0e9b      	lsrs	r3, r3, #26
 8102d26:	3301      	adds	r3, #1
 8102d28:	f003 021f 	and.w	r2, r3, #31
 8102d2c:	4613      	mov	r3, r2
 8102d2e:	005b      	lsls	r3, r3, #1
 8102d30:	4413      	add	r3, r2
 8102d32:	051b      	lsls	r3, r3, #20
 8102d34:	e018      	b.n	8102d68 <HAL_ADC_ConfigChannel+0x3c0>
 8102d36:	683b      	ldr	r3, [r7, #0]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d3e:	fa93 f3a3 	rbit	r3, r3
 8102d42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d4a:	2b00      	cmp	r3, #0
 8102d4c:	d101      	bne.n	8102d52 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102d4e:	2320      	movs	r3, #32
 8102d50:	e003      	b.n	8102d5a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d54:	fab3 f383 	clz	r3, r3
 8102d58:	b2db      	uxtb	r3, r3
 8102d5a:	3301      	adds	r3, #1
 8102d5c:	f003 021f 	and.w	r2, r3, #31
 8102d60:	4613      	mov	r3, r2
 8102d62:	005b      	lsls	r3, r3, #1
 8102d64:	4413      	add	r3, r2
 8102d66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102d68:	430b      	orrs	r3, r1
 8102d6a:	e07e      	b.n	8102e6a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102d6c:	683b      	ldr	r3, [r7, #0]
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	d107      	bne.n	8102d88 <HAL_ADC_ConfigChannel+0x3e0>
 8102d78:	683b      	ldr	r3, [r7, #0]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	0e9b      	lsrs	r3, r3, #26
 8102d7e:	3301      	adds	r3, #1
 8102d80:	069b      	lsls	r3, r3, #26
 8102d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d86:	e015      	b.n	8102db4 <HAL_ADC_ConfigChannel+0x40c>
 8102d88:	683b      	ldr	r3, [r7, #0]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d90:	fa93 f3a3 	rbit	r3, r3
 8102d94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d101      	bne.n	8102da4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102da0:	2320      	movs	r3, #32
 8102da2:	e003      	b.n	8102dac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102da6:	fab3 f383 	clz	r3, r3
 8102daa:	b2db      	uxtb	r3, r3
 8102dac:	3301      	adds	r3, #1
 8102dae:	069b      	lsls	r3, r3, #26
 8102db0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102db4:	683b      	ldr	r3, [r7, #0]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102dbc:	2b00      	cmp	r3, #0
 8102dbe:	d109      	bne.n	8102dd4 <HAL_ADC_ConfigChannel+0x42c>
 8102dc0:	683b      	ldr	r3, [r7, #0]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	0e9b      	lsrs	r3, r3, #26
 8102dc6:	3301      	adds	r3, #1
 8102dc8:	f003 031f 	and.w	r3, r3, #31
 8102dcc:	2101      	movs	r1, #1
 8102dce:	fa01 f303 	lsl.w	r3, r1, r3
 8102dd2:	e017      	b.n	8102e04 <HAL_ADC_ConfigChannel+0x45c>
 8102dd4:	683b      	ldr	r3, [r7, #0]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dda:	69fb      	ldr	r3, [r7, #28]
 8102ddc:	fa93 f3a3 	rbit	r3, r3
 8102de0:	61bb      	str	r3, [r7, #24]
  return result;
 8102de2:	69bb      	ldr	r3, [r7, #24]
 8102de4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8102de6:	6a3b      	ldr	r3, [r7, #32]
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d101      	bne.n	8102df0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102dec:	2320      	movs	r3, #32
 8102dee:	e003      	b.n	8102df8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102df0:	6a3b      	ldr	r3, [r7, #32]
 8102df2:	fab3 f383 	clz	r3, r3
 8102df6:	b2db      	uxtb	r3, r3
 8102df8:	3301      	adds	r3, #1
 8102dfa:	f003 031f 	and.w	r3, r3, #31
 8102dfe:	2101      	movs	r1, #1
 8102e00:	fa01 f303 	lsl.w	r3, r1, r3
 8102e04:	ea42 0103 	orr.w	r1, r2, r3
 8102e08:	683b      	ldr	r3, [r7, #0]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d10d      	bne.n	8102e30 <HAL_ADC_ConfigChannel+0x488>
 8102e14:	683b      	ldr	r3, [r7, #0]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	0e9b      	lsrs	r3, r3, #26
 8102e1a:	3301      	adds	r3, #1
 8102e1c:	f003 021f 	and.w	r2, r3, #31
 8102e20:	4613      	mov	r3, r2
 8102e22:	005b      	lsls	r3, r3, #1
 8102e24:	4413      	add	r3, r2
 8102e26:	3b1e      	subs	r3, #30
 8102e28:	051b      	lsls	r3, r3, #20
 8102e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102e2e:	e01b      	b.n	8102e68 <HAL_ADC_ConfigChannel+0x4c0>
 8102e30:	683b      	ldr	r3, [r7, #0]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102e36:	693b      	ldr	r3, [r7, #16]
 8102e38:	fa93 f3a3 	rbit	r3, r3
 8102e3c:	60fb      	str	r3, [r7, #12]
  return result;
 8102e3e:	68fb      	ldr	r3, [r7, #12]
 8102e40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102e42:	697b      	ldr	r3, [r7, #20]
 8102e44:	2b00      	cmp	r3, #0
 8102e46:	d101      	bne.n	8102e4c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102e48:	2320      	movs	r3, #32
 8102e4a:	e003      	b.n	8102e54 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102e4c:	697b      	ldr	r3, [r7, #20]
 8102e4e:	fab3 f383 	clz	r3, r3
 8102e52:	b2db      	uxtb	r3, r3
 8102e54:	3301      	adds	r3, #1
 8102e56:	f003 021f 	and.w	r2, r3, #31
 8102e5a:	4613      	mov	r3, r2
 8102e5c:	005b      	lsls	r3, r3, #1
 8102e5e:	4413      	add	r3, r2
 8102e60:	3b1e      	subs	r3, #30
 8102e62:	051b      	lsls	r3, r3, #20
 8102e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e68:	430b      	orrs	r3, r1
 8102e6a:	683a      	ldr	r2, [r7, #0]
 8102e6c:	6892      	ldr	r2, [r2, #8]
 8102e6e:	4619      	mov	r1, r3
 8102e70:	f7ff f911 	bl	8102096 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102e74:	683b      	ldr	r3, [r7, #0]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	2b00      	cmp	r3, #0
 8102e7a:	f280 80c6 	bge.w	810300a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	4a67      	ldr	r2, [pc, #412]	; (8103020 <HAL_ADC_ConfigChannel+0x678>)
 8102e84:	4293      	cmp	r3, r2
 8102e86:	d004      	beq.n	8102e92 <HAL_ADC_ConfigChannel+0x4ea>
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	4a65      	ldr	r2, [pc, #404]	; (8103024 <HAL_ADC_ConfigChannel+0x67c>)
 8102e8e:	4293      	cmp	r3, r2
 8102e90:	d101      	bne.n	8102e96 <HAL_ADC_ConfigChannel+0x4ee>
 8102e92:	4b65      	ldr	r3, [pc, #404]	; (8103028 <HAL_ADC_ConfigChannel+0x680>)
 8102e94:	e000      	b.n	8102e98 <HAL_ADC_ConfigChannel+0x4f0>
 8102e96:	4b65      	ldr	r3, [pc, #404]	; (810302c <HAL_ADC_ConfigChannel+0x684>)
 8102e98:	4618      	mov	r0, r3
 8102e9a:	f7ff f85b 	bl	8101f54 <LL_ADC_GetCommonPathInternalCh>
 8102e9e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	4a5e      	ldr	r2, [pc, #376]	; (8103020 <HAL_ADC_ConfigChannel+0x678>)
 8102ea6:	4293      	cmp	r3, r2
 8102ea8:	d004      	beq.n	8102eb4 <HAL_ADC_ConfigChannel+0x50c>
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	4a5d      	ldr	r2, [pc, #372]	; (8103024 <HAL_ADC_ConfigChannel+0x67c>)
 8102eb0:	4293      	cmp	r3, r2
 8102eb2:	d10e      	bne.n	8102ed2 <HAL_ADC_ConfigChannel+0x52a>
 8102eb4:	485a      	ldr	r0, [pc, #360]	; (8103020 <HAL_ADC_ConfigChannel+0x678>)
 8102eb6:	f7ff f9bb 	bl	8102230 <LL_ADC_IsEnabled>
 8102eba:	4604      	mov	r4, r0
 8102ebc:	4859      	ldr	r0, [pc, #356]	; (8103024 <HAL_ADC_ConfigChannel+0x67c>)
 8102ebe:	f7ff f9b7 	bl	8102230 <LL_ADC_IsEnabled>
 8102ec2:	4603      	mov	r3, r0
 8102ec4:	4323      	orrs	r3, r4
 8102ec6:	2b00      	cmp	r3, #0
 8102ec8:	bf0c      	ite	eq
 8102eca:	2301      	moveq	r3, #1
 8102ecc:	2300      	movne	r3, #0
 8102ece:	b2db      	uxtb	r3, r3
 8102ed0:	e008      	b.n	8102ee4 <HAL_ADC_ConfigChannel+0x53c>
 8102ed2:	4857      	ldr	r0, [pc, #348]	; (8103030 <HAL_ADC_ConfigChannel+0x688>)
 8102ed4:	f7ff f9ac 	bl	8102230 <LL_ADC_IsEnabled>
 8102ed8:	4603      	mov	r3, r0
 8102eda:	2b00      	cmp	r3, #0
 8102edc:	bf0c      	ite	eq
 8102ede:	2301      	moveq	r3, #1
 8102ee0:	2300      	movne	r3, #0
 8102ee2:	b2db      	uxtb	r3, r3
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d07d      	beq.n	8102fe4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102ee8:	683b      	ldr	r3, [r7, #0]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a51      	ldr	r2, [pc, #324]	; (8103034 <HAL_ADC_ConfigChannel+0x68c>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d130      	bne.n	8102f54 <HAL_ADC_ConfigChannel+0x5ac>
 8102ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102ef8:	2b00      	cmp	r3, #0
 8102efa:	d12b      	bne.n	8102f54 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a4b      	ldr	r2, [pc, #300]	; (8103030 <HAL_ADC_ConfigChannel+0x688>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	f040 8081 	bne.w	810300a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	4a44      	ldr	r2, [pc, #272]	; (8103020 <HAL_ADC_ConfigChannel+0x678>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d004      	beq.n	8102f1c <HAL_ADC_ConfigChannel+0x574>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a43      	ldr	r2, [pc, #268]	; (8103024 <HAL_ADC_ConfigChannel+0x67c>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d101      	bne.n	8102f20 <HAL_ADC_ConfigChannel+0x578>
 8102f1c:	4a42      	ldr	r2, [pc, #264]	; (8103028 <HAL_ADC_ConfigChannel+0x680>)
 8102f1e:	e000      	b.n	8102f22 <HAL_ADC_ConfigChannel+0x57a>
 8102f20:	4a42      	ldr	r2, [pc, #264]	; (810302c <HAL_ADC_ConfigChannel+0x684>)
 8102f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102f28:	4619      	mov	r1, r3
 8102f2a:	4610      	mov	r0, r2
 8102f2c:	f7fe ffff 	bl	8101f2e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102f30:	4b41      	ldr	r3, [pc, #260]	; (8103038 <HAL_ADC_ConfigChannel+0x690>)
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	099b      	lsrs	r3, r3, #6
 8102f36:	4a41      	ldr	r2, [pc, #260]	; (810303c <HAL_ADC_ConfigChannel+0x694>)
 8102f38:	fba2 2303 	umull	r2, r3, r2, r3
 8102f3c:	099b      	lsrs	r3, r3, #6
 8102f3e:	3301      	adds	r3, #1
 8102f40:	005b      	lsls	r3, r3, #1
 8102f42:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102f44:	e002      	b.n	8102f4c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102f46:	68bb      	ldr	r3, [r7, #8]
 8102f48:	3b01      	subs	r3, #1
 8102f4a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102f4c:	68bb      	ldr	r3, [r7, #8]
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	d1f9      	bne.n	8102f46 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102f52:	e05a      	b.n	810300a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102f54:	683b      	ldr	r3, [r7, #0]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a39      	ldr	r2, [pc, #228]	; (8103040 <HAL_ADC_ConfigChannel+0x698>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d11e      	bne.n	8102f9c <HAL_ADC_ConfigChannel+0x5f4>
 8102f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102f64:	2b00      	cmp	r3, #0
 8102f66:	d119      	bne.n	8102f9c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a30      	ldr	r2, [pc, #192]	; (8103030 <HAL_ADC_ConfigChannel+0x688>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d14b      	bne.n	810300a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4a2a      	ldr	r2, [pc, #168]	; (8103020 <HAL_ADC_ConfigChannel+0x678>)
 8102f78:	4293      	cmp	r3, r2
 8102f7a:	d004      	beq.n	8102f86 <HAL_ADC_ConfigChannel+0x5de>
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4a28      	ldr	r2, [pc, #160]	; (8103024 <HAL_ADC_ConfigChannel+0x67c>)
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d101      	bne.n	8102f8a <HAL_ADC_ConfigChannel+0x5e2>
 8102f86:	4a28      	ldr	r2, [pc, #160]	; (8103028 <HAL_ADC_ConfigChannel+0x680>)
 8102f88:	e000      	b.n	8102f8c <HAL_ADC_ConfigChannel+0x5e4>
 8102f8a:	4a28      	ldr	r2, [pc, #160]	; (810302c <HAL_ADC_ConfigChannel+0x684>)
 8102f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102f92:	4619      	mov	r1, r3
 8102f94:	4610      	mov	r0, r2
 8102f96:	f7fe ffca 	bl	8101f2e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f9a:	e036      	b.n	810300a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102f9c:	683b      	ldr	r3, [r7, #0]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a28      	ldr	r2, [pc, #160]	; (8103044 <HAL_ADC_ConfigChannel+0x69c>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d131      	bne.n	810300a <HAL_ADC_ConfigChannel+0x662>
 8102fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102fac:	2b00      	cmp	r3, #0
 8102fae:	d12c      	bne.n	810300a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	4a1e      	ldr	r2, [pc, #120]	; (8103030 <HAL_ADC_ConfigChannel+0x688>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d127      	bne.n	810300a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	4a18      	ldr	r2, [pc, #96]	; (8103020 <HAL_ADC_ConfigChannel+0x678>)
 8102fc0:	4293      	cmp	r3, r2
 8102fc2:	d004      	beq.n	8102fce <HAL_ADC_ConfigChannel+0x626>
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4a16      	ldr	r2, [pc, #88]	; (8103024 <HAL_ADC_ConfigChannel+0x67c>)
 8102fca:	4293      	cmp	r3, r2
 8102fcc:	d101      	bne.n	8102fd2 <HAL_ADC_ConfigChannel+0x62a>
 8102fce:	4a16      	ldr	r2, [pc, #88]	; (8103028 <HAL_ADC_ConfigChannel+0x680>)
 8102fd0:	e000      	b.n	8102fd4 <HAL_ADC_ConfigChannel+0x62c>
 8102fd2:	4a16      	ldr	r2, [pc, #88]	; (810302c <HAL_ADC_ConfigChannel+0x684>)
 8102fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102fda:	4619      	mov	r1, r3
 8102fdc:	4610      	mov	r0, r2
 8102fde:	f7fe ffa6 	bl	8101f2e <LL_ADC_SetCommonPathInternalCh>
 8102fe2:	e012      	b.n	810300a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fe8:	f043 0220 	orr.w	r2, r3, #32
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102ff0:	2301      	movs	r3, #1
 8102ff2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102ff6:	e008      	b.n	810300a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ffc:	f043 0220 	orr.w	r2, r3, #32
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103004:	2301      	movs	r3, #1
 8103006:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	2200      	movs	r2, #0
 810300e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103012:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103016:	4618      	mov	r0, r3
 8103018:	3784      	adds	r7, #132	; 0x84
 810301a:	46bd      	mov	sp, r7
 810301c:	bd90      	pop	{r4, r7, pc}
 810301e:	bf00      	nop
 8103020:	40022000 	.word	0x40022000
 8103024:	40022100 	.word	0x40022100
 8103028:	40022300 	.word	0x40022300
 810302c:	58026300 	.word	0x58026300
 8103030:	58026000 	.word	0x58026000
 8103034:	cb840000 	.word	0xcb840000
 8103038:	10000000 	.word	0x10000000
 810303c:	053e2d63 	.word	0x053e2d63
 8103040:	c7520000 	.word	0xc7520000
 8103044:	cfb80000 	.word	0xcfb80000

08103048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8103048:	b580      	push	{r7, lr}
 810304a:	b084      	sub	sp, #16
 810304c:	af00      	add	r7, sp, #0
 810304e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	4618      	mov	r0, r3
 8103056:	f7ff f8eb 	bl	8102230 <LL_ADC_IsEnabled>
 810305a:	4603      	mov	r3, r0
 810305c:	2b00      	cmp	r3, #0
 810305e:	d16e      	bne.n	810313e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	689a      	ldr	r2, [r3, #8]
 8103066:	4b38      	ldr	r3, [pc, #224]	; (8103148 <ADC_Enable+0x100>)
 8103068:	4013      	ands	r3, r2
 810306a:	2b00      	cmp	r3, #0
 810306c:	d00d      	beq.n	810308a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103072:	f043 0210 	orr.w	r2, r3, #16
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810307e:	f043 0201 	orr.w	r2, r3, #1
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8103086:	2301      	movs	r3, #1
 8103088:	e05a      	b.n	8103140 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	4618      	mov	r0, r3
 8103090:	f7ff f8ba 	bl	8102208 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103094:	f7fe fefc 	bl	8101e90 <HAL_GetTick>
 8103098:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	4a2b      	ldr	r2, [pc, #172]	; (810314c <ADC_Enable+0x104>)
 81030a0:	4293      	cmp	r3, r2
 81030a2:	d004      	beq.n	81030ae <ADC_Enable+0x66>
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	4a29      	ldr	r2, [pc, #164]	; (8103150 <ADC_Enable+0x108>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d101      	bne.n	81030b2 <ADC_Enable+0x6a>
 81030ae:	4b29      	ldr	r3, [pc, #164]	; (8103154 <ADC_Enable+0x10c>)
 81030b0:	e000      	b.n	81030b4 <ADC_Enable+0x6c>
 81030b2:	4b29      	ldr	r3, [pc, #164]	; (8103158 <ADC_Enable+0x110>)
 81030b4:	4618      	mov	r0, r3
 81030b6:	f7ff f83d 	bl	8102134 <LL_ADC_GetMultimode>
 81030ba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	4a23      	ldr	r2, [pc, #140]	; (8103150 <ADC_Enable+0x108>)
 81030c2:	4293      	cmp	r3, r2
 81030c4:	d002      	beq.n	81030cc <ADC_Enable+0x84>
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	e000      	b.n	81030ce <ADC_Enable+0x86>
 81030cc:	4b1f      	ldr	r3, [pc, #124]	; (810314c <ADC_Enable+0x104>)
 81030ce:	687a      	ldr	r2, [r7, #4]
 81030d0:	6812      	ldr	r2, [r2, #0]
 81030d2:	4293      	cmp	r3, r2
 81030d4:	d02c      	beq.n	8103130 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81030d6:	68bb      	ldr	r3, [r7, #8]
 81030d8:	2b00      	cmp	r3, #0
 81030da:	d130      	bne.n	810313e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81030dc:	e028      	b.n	8103130 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	681b      	ldr	r3, [r3, #0]
 81030e2:	4618      	mov	r0, r3
 81030e4:	f7ff f8a4 	bl	8102230 <LL_ADC_IsEnabled>
 81030e8:	4603      	mov	r3, r0
 81030ea:	2b00      	cmp	r3, #0
 81030ec:	d104      	bne.n	81030f8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	4618      	mov	r0, r3
 81030f4:	f7ff f888 	bl	8102208 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81030f8:	f7fe feca 	bl	8101e90 <HAL_GetTick>
 81030fc:	4602      	mov	r2, r0
 81030fe:	68fb      	ldr	r3, [r7, #12]
 8103100:	1ad3      	subs	r3, r2, r3
 8103102:	2b02      	cmp	r3, #2
 8103104:	d914      	bls.n	8103130 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	f003 0301 	and.w	r3, r3, #1
 8103110:	2b01      	cmp	r3, #1
 8103112:	d00d      	beq.n	8103130 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103118:	f043 0210 	orr.w	r2, r3, #16
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103124:	f043 0201 	orr.w	r2, r3, #1
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 810312c:	2301      	movs	r3, #1
 810312e:	e007      	b.n	8103140 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	f003 0301 	and.w	r3, r3, #1
 810313a:	2b01      	cmp	r3, #1
 810313c:	d1cf      	bne.n	81030de <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810313e:	2300      	movs	r3, #0
}
 8103140:	4618      	mov	r0, r3
 8103142:	3710      	adds	r7, #16
 8103144:	46bd      	mov	sp, r7
 8103146:	bd80      	pop	{r7, pc}
 8103148:	8000003f 	.word	0x8000003f
 810314c:	40022000 	.word	0x40022000
 8103150:	40022100 	.word	0x40022100
 8103154:	40022300 	.word	0x40022300
 8103158:	58026300 	.word	0x58026300

0810315c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810315c:	b580      	push	{r7, lr}
 810315e:	b084      	sub	sp, #16
 8103160:	af00      	add	r7, sp, #0
 8103162:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	4a79      	ldr	r2, [pc, #484]	; (8103350 <ADC_ConfigureBoostMode+0x1f4>)
 810316a:	4293      	cmp	r3, r2
 810316c:	d004      	beq.n	8103178 <ADC_ConfigureBoostMode+0x1c>
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	4a78      	ldr	r2, [pc, #480]	; (8103354 <ADC_ConfigureBoostMode+0x1f8>)
 8103174:	4293      	cmp	r3, r2
 8103176:	d109      	bne.n	810318c <ADC_ConfigureBoostMode+0x30>
 8103178:	4b77      	ldr	r3, [pc, #476]	; (8103358 <ADC_ConfigureBoostMode+0x1fc>)
 810317a:	689b      	ldr	r3, [r3, #8]
 810317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103180:	2b00      	cmp	r3, #0
 8103182:	bf14      	ite	ne
 8103184:	2301      	movne	r3, #1
 8103186:	2300      	moveq	r3, #0
 8103188:	b2db      	uxtb	r3, r3
 810318a:	e008      	b.n	810319e <ADC_ConfigureBoostMode+0x42>
 810318c:	4b73      	ldr	r3, [pc, #460]	; (810335c <ADC_ConfigureBoostMode+0x200>)
 810318e:	689b      	ldr	r3, [r3, #8]
 8103190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103194:	2b00      	cmp	r3, #0
 8103196:	bf14      	ite	ne
 8103198:	2301      	movne	r3, #1
 810319a:	2300      	moveq	r3, #0
 810319c:	b2db      	uxtb	r3, r3
 810319e:	2b00      	cmp	r3, #0
 81031a0:	d01c      	beq.n	81031dc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81031a2:	f000 fec3 	bl	8103f2c <HAL_RCC_GetHCLKFreq>
 81031a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	685b      	ldr	r3, [r3, #4]
 81031ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81031b0:	d010      	beq.n	81031d4 <ADC_ConfigureBoostMode+0x78>
 81031b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81031b6:	d871      	bhi.n	810329c <ADC_ConfigureBoostMode+0x140>
 81031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81031bc:	d002      	beq.n	81031c4 <ADC_ConfigureBoostMode+0x68>
 81031be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81031c2:	d16b      	bne.n	810329c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	685b      	ldr	r3, [r3, #4]
 81031c8:	0c1b      	lsrs	r3, r3, #16
 81031ca:	68fa      	ldr	r2, [r7, #12]
 81031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 81031d0:	60fb      	str	r3, [r7, #12]
        break;
 81031d2:	e066      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81031d4:	68fb      	ldr	r3, [r7, #12]
 81031d6:	089b      	lsrs	r3, r3, #2
 81031d8:	60fb      	str	r3, [r7, #12]
        break;
 81031da:	e062      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81031dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81031e0:	f001 fe48 	bl	8104e74 <HAL_RCCEx_GetPeriphCLKFreq>
 81031e4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	685b      	ldr	r3, [r3, #4]
 81031ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81031ee:	d051      	beq.n	8103294 <ADC_ConfigureBoostMode+0x138>
 81031f0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81031f4:	d854      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 81031f6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81031fa:	d047      	beq.n	810328c <ADC_ConfigureBoostMode+0x130>
 81031fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103200:	d84e      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 8103202:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103206:	d03d      	beq.n	8103284 <ADC_ConfigureBoostMode+0x128>
 8103208:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810320c:	d848      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 810320e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103212:	d033      	beq.n	810327c <ADC_ConfigureBoostMode+0x120>
 8103214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103218:	d842      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 810321a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810321e:	d029      	beq.n	8103274 <ADC_ConfigureBoostMode+0x118>
 8103220:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103224:	d83c      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 8103226:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810322a:	d01a      	beq.n	8103262 <ADC_ConfigureBoostMode+0x106>
 810322c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103230:	d836      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 8103232:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103236:	d014      	beq.n	8103262 <ADC_ConfigureBoostMode+0x106>
 8103238:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810323c:	d830      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 810323e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103242:	d00e      	beq.n	8103262 <ADC_ConfigureBoostMode+0x106>
 8103244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103248:	d82a      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 810324a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810324e:	d008      	beq.n	8103262 <ADC_ConfigureBoostMode+0x106>
 8103250:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103254:	d824      	bhi.n	81032a0 <ADC_ConfigureBoostMode+0x144>
 8103256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810325a:	d002      	beq.n	8103262 <ADC_ConfigureBoostMode+0x106>
 810325c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103260:	d11e      	bne.n	81032a0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	685b      	ldr	r3, [r3, #4]
 8103266:	0c9b      	lsrs	r3, r3, #18
 8103268:	005b      	lsls	r3, r3, #1
 810326a:	68fa      	ldr	r2, [r7, #12]
 810326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103270:	60fb      	str	r3, [r7, #12]
        break;
 8103272:	e016      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103274:	68fb      	ldr	r3, [r7, #12]
 8103276:	091b      	lsrs	r3, r3, #4
 8103278:	60fb      	str	r3, [r7, #12]
        break;
 810327a:	e012      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	095b      	lsrs	r3, r3, #5
 8103280:	60fb      	str	r3, [r7, #12]
        break;
 8103282:	e00e      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103284:	68fb      	ldr	r3, [r7, #12]
 8103286:	099b      	lsrs	r3, r3, #6
 8103288:	60fb      	str	r3, [r7, #12]
        break;
 810328a:	e00a      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	09db      	lsrs	r3, r3, #7
 8103290:	60fb      	str	r3, [r7, #12]
        break;
 8103292:	e006      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	0a1b      	lsrs	r3, r3, #8
 8103298:	60fb      	str	r3, [r7, #12]
        break;
 810329a:	e002      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
        break;
 810329c:	bf00      	nop
 810329e:	e000      	b.n	81032a2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81032a0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81032a2:	f7fe fe25 	bl	8101ef0 <HAL_GetREVID>
 81032a6:	4603      	mov	r3, r0
 81032a8:	f241 0203 	movw	r2, #4099	; 0x1003
 81032ac:	4293      	cmp	r3, r2
 81032ae:	d815      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 81032b0:	68fb      	ldr	r3, [r7, #12]
 81032b2:	4a2b      	ldr	r2, [pc, #172]	; (8103360 <ADC_ConfigureBoostMode+0x204>)
 81032b4:	4293      	cmp	r3, r2
 81032b6:	d908      	bls.n	81032ca <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	689a      	ldr	r2, [r3, #8]
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81032c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81032c8:	e03e      	b.n	8103348 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	681b      	ldr	r3, [r3, #0]
 81032ce:	689a      	ldr	r2, [r3, #8]
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81032d8:	609a      	str	r2, [r3, #8]
}
 81032da:	e035      	b.n	8103348 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	085b      	lsrs	r3, r3, #1
 81032e0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81032e2:	68fb      	ldr	r3, [r7, #12]
 81032e4:	4a1f      	ldr	r2, [pc, #124]	; (8103364 <ADC_ConfigureBoostMode+0x208>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d808      	bhi.n	81032fc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	689a      	ldr	r2, [r3, #8]
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 81032f8:	609a      	str	r2, [r3, #8]
}
 81032fa:	e025      	b.n	8103348 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 81032fc:	68fb      	ldr	r3, [r7, #12]
 81032fe:	4a1a      	ldr	r2, [pc, #104]	; (8103368 <ADC_ConfigureBoostMode+0x20c>)
 8103300:	4293      	cmp	r3, r2
 8103302:	d80a      	bhi.n	810331a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	689b      	ldr	r3, [r3, #8]
 810330a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103316:	609a      	str	r2, [r3, #8]
}
 8103318:	e016      	b.n	8103348 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 810331a:	68fb      	ldr	r3, [r7, #12]
 810331c:	4a13      	ldr	r2, [pc, #76]	; (810336c <ADC_ConfigureBoostMode+0x210>)
 810331e:	4293      	cmp	r3, r2
 8103320:	d80a      	bhi.n	8103338 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	681b      	ldr	r3, [r3, #0]
 8103326:	689b      	ldr	r3, [r3, #8]
 8103328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103334:	609a      	str	r2, [r3, #8]
}
 8103336:	e007      	b.n	8103348 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	689a      	ldr	r2, [r3, #8]
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103346:	609a      	str	r2, [r3, #8]
}
 8103348:	bf00      	nop
 810334a:	3710      	adds	r7, #16
 810334c:	46bd      	mov	sp, r7
 810334e:	bd80      	pop	{r7, pc}
 8103350:	40022000 	.word	0x40022000
 8103354:	40022100 	.word	0x40022100
 8103358:	40022300 	.word	0x40022300
 810335c:	58026300 	.word	0x58026300
 8103360:	01312d00 	.word	0x01312d00
 8103364:	005f5e10 	.word	0x005f5e10
 8103368:	00bebc20 	.word	0x00bebc20
 810336c:	017d7840 	.word	0x017d7840

08103370 <LL_ADC_IsEnabled>:
{
 8103370:	b480      	push	{r7}
 8103372:	b083      	sub	sp, #12
 8103374:	af00      	add	r7, sp, #0
 8103376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	689b      	ldr	r3, [r3, #8]
 810337c:	f003 0301 	and.w	r3, r3, #1
 8103380:	2b01      	cmp	r3, #1
 8103382:	d101      	bne.n	8103388 <LL_ADC_IsEnabled+0x18>
 8103384:	2301      	movs	r3, #1
 8103386:	e000      	b.n	810338a <LL_ADC_IsEnabled+0x1a>
 8103388:	2300      	movs	r3, #0
}
 810338a:	4618      	mov	r0, r3
 810338c:	370c      	adds	r7, #12
 810338e:	46bd      	mov	sp, r7
 8103390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103394:	4770      	bx	lr

08103396 <LL_ADC_REG_IsConversionOngoing>:
{
 8103396:	b480      	push	{r7}
 8103398:	b083      	sub	sp, #12
 810339a:	af00      	add	r7, sp, #0
 810339c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	689b      	ldr	r3, [r3, #8]
 81033a2:	f003 0304 	and.w	r3, r3, #4
 81033a6:	2b04      	cmp	r3, #4
 81033a8:	d101      	bne.n	81033ae <LL_ADC_REG_IsConversionOngoing+0x18>
 81033aa:	2301      	movs	r3, #1
 81033ac:	e000      	b.n	81033b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81033ae:	2300      	movs	r3, #0
}
 81033b0:	4618      	mov	r0, r3
 81033b2:	370c      	adds	r7, #12
 81033b4:	46bd      	mov	sp, r7
 81033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ba:	4770      	bx	lr

081033bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81033bc:	b590      	push	{r4, r7, lr}
 81033be:	b09f      	sub	sp, #124	; 0x7c
 81033c0:	af00      	add	r7, sp, #0
 81033c2:	6078      	str	r0, [r7, #4]
 81033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81033c6:	2300      	movs	r3, #0
 81033c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81033d2:	2b01      	cmp	r3, #1
 81033d4:	d101      	bne.n	81033da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81033d6:	2302      	movs	r3, #2
 81033d8:	e0c4      	b.n	8103564 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	2201      	movs	r2, #1
 81033de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81033e2:	2300      	movs	r3, #0
 81033e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81033e6:	2300      	movs	r3, #0
 81033e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a5f      	ldr	r2, [pc, #380]	; (810356c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d102      	bne.n	81033fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81033f4:	4b5e      	ldr	r3, [pc, #376]	; (8103570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81033f6:	60bb      	str	r3, [r7, #8]
 81033f8:	e001      	b.n	81033fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81033fa:	2300      	movs	r3, #0
 81033fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81033fe:	68bb      	ldr	r3, [r7, #8]
 8103400:	2b00      	cmp	r3, #0
 8103402:	d10b      	bne.n	810341c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103408:	f043 0220 	orr.w	r2, r3, #32
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	2200      	movs	r2, #0
 8103414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103418:	2301      	movs	r3, #1
 810341a:	e0a3      	b.n	8103564 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 810341c:	68bb      	ldr	r3, [r7, #8]
 810341e:	4618      	mov	r0, r3
 8103420:	f7ff ffb9 	bl	8103396 <LL_ADC_REG_IsConversionOngoing>
 8103424:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	4618      	mov	r0, r3
 810342c:	f7ff ffb3 	bl	8103396 <LL_ADC_REG_IsConversionOngoing>
 8103430:	4603      	mov	r3, r0
 8103432:	2b00      	cmp	r3, #0
 8103434:	f040 8085 	bne.w	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810343a:	2b00      	cmp	r3, #0
 810343c:	f040 8081 	bne.w	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	4a49      	ldr	r2, [pc, #292]	; (810356c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103446:	4293      	cmp	r3, r2
 8103448:	d004      	beq.n	8103454 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	4a48      	ldr	r2, [pc, #288]	; (8103570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103450:	4293      	cmp	r3, r2
 8103452:	d101      	bne.n	8103458 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103454:	4b47      	ldr	r3, [pc, #284]	; (8103574 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103456:	e000      	b.n	810345a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103458:	4b47      	ldr	r3, [pc, #284]	; (8103578 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810345a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810345c:	683b      	ldr	r3, [r7, #0]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	2b00      	cmp	r3, #0
 8103462:	d03b      	beq.n	81034dc <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103466:	689b      	ldr	r3, [r3, #8]
 8103468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 810346c:	683b      	ldr	r3, [r7, #0]
 810346e:	685b      	ldr	r3, [r3, #4]
 8103470:	431a      	orrs	r2, r3
 8103472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103474:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	4a3c      	ldr	r2, [pc, #240]	; (810356c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810347c:	4293      	cmp	r3, r2
 810347e:	d004      	beq.n	810348a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	4a3a      	ldr	r2, [pc, #232]	; (8103570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103486:	4293      	cmp	r3, r2
 8103488:	d10e      	bne.n	81034a8 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810348a:	4838      	ldr	r0, [pc, #224]	; (810356c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810348c:	f7ff ff70 	bl	8103370 <LL_ADC_IsEnabled>
 8103490:	4604      	mov	r4, r0
 8103492:	4837      	ldr	r0, [pc, #220]	; (8103570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103494:	f7ff ff6c 	bl	8103370 <LL_ADC_IsEnabled>
 8103498:	4603      	mov	r3, r0
 810349a:	4323      	orrs	r3, r4
 810349c:	2b00      	cmp	r3, #0
 810349e:	bf0c      	ite	eq
 81034a0:	2301      	moveq	r3, #1
 81034a2:	2300      	movne	r3, #0
 81034a4:	b2db      	uxtb	r3, r3
 81034a6:	e008      	b.n	81034ba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81034a8:	4834      	ldr	r0, [pc, #208]	; (810357c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81034aa:	f7ff ff61 	bl	8103370 <LL_ADC_IsEnabled>
 81034ae:	4603      	mov	r3, r0
 81034b0:	2b00      	cmp	r3, #0
 81034b2:	bf0c      	ite	eq
 81034b4:	2301      	moveq	r3, #1
 81034b6:	2300      	movne	r3, #0
 81034b8:	b2db      	uxtb	r3, r3
 81034ba:	2b00      	cmp	r3, #0
 81034bc:	d04b      	beq.n	8103556 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81034be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034c0:	689b      	ldr	r3, [r3, #8]
 81034c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81034c6:	f023 030f 	bic.w	r3, r3, #15
 81034ca:	683a      	ldr	r2, [r7, #0]
 81034cc:	6811      	ldr	r1, [r2, #0]
 81034ce:	683a      	ldr	r2, [r7, #0]
 81034d0:	6892      	ldr	r2, [r2, #8]
 81034d2:	430a      	orrs	r2, r1
 81034d4:	431a      	orrs	r2, r3
 81034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034da:	e03c      	b.n	8103556 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81034dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034de:	689b      	ldr	r3, [r3, #8]
 81034e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4a1f      	ldr	r2, [pc, #124]	; (810356c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81034ee:	4293      	cmp	r3, r2
 81034f0:	d004      	beq.n	81034fc <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	4a1e      	ldr	r2, [pc, #120]	; (8103570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81034f8:	4293      	cmp	r3, r2
 81034fa:	d10e      	bne.n	810351a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81034fc:	481b      	ldr	r0, [pc, #108]	; (810356c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81034fe:	f7ff ff37 	bl	8103370 <LL_ADC_IsEnabled>
 8103502:	4604      	mov	r4, r0
 8103504:	481a      	ldr	r0, [pc, #104]	; (8103570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103506:	f7ff ff33 	bl	8103370 <LL_ADC_IsEnabled>
 810350a:	4603      	mov	r3, r0
 810350c:	4323      	orrs	r3, r4
 810350e:	2b00      	cmp	r3, #0
 8103510:	bf0c      	ite	eq
 8103512:	2301      	moveq	r3, #1
 8103514:	2300      	movne	r3, #0
 8103516:	b2db      	uxtb	r3, r3
 8103518:	e008      	b.n	810352c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810351a:	4818      	ldr	r0, [pc, #96]	; (810357c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810351c:	f7ff ff28 	bl	8103370 <LL_ADC_IsEnabled>
 8103520:	4603      	mov	r3, r0
 8103522:	2b00      	cmp	r3, #0
 8103524:	bf0c      	ite	eq
 8103526:	2301      	moveq	r3, #1
 8103528:	2300      	movne	r3, #0
 810352a:	b2db      	uxtb	r3, r3
 810352c:	2b00      	cmp	r3, #0
 810352e:	d012      	beq.n	8103556 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103532:	689b      	ldr	r3, [r3, #8]
 8103534:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103538:	f023 030f 	bic.w	r3, r3, #15
 810353c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810353e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103540:	e009      	b.n	8103556 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103546:	f043 0220 	orr.w	r2, r3, #32
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810354e:	2301      	movs	r3, #1
 8103550:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103554:	e000      	b.n	8103558 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103556:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	2200      	movs	r2, #0
 810355c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103560:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103564:	4618      	mov	r0, r3
 8103566:	377c      	adds	r7, #124	; 0x7c
 8103568:	46bd      	mov	sp, r7
 810356a:	bd90      	pop	{r4, r7, pc}
 810356c:	40022000 	.word	0x40022000
 8103570:	40022100 	.word	0x40022100
 8103574:	40022300 	.word	0x40022300
 8103578:	58026300 	.word	0x58026300
 810357c:	58026000 	.word	0x58026000

08103580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103580:	b480      	push	{r7}
 8103582:	b085      	sub	sp, #20
 8103584:	af00      	add	r7, sp, #0
 8103586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	f003 0307 	and.w	r3, r3, #7
 810358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103590:	4b0c      	ldr	r3, [pc, #48]	; (81035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8103592:	68db      	ldr	r3, [r3, #12]
 8103594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103596:	68ba      	ldr	r2, [r7, #8]
 8103598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810359c:	4013      	ands	r3, r2
 810359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81035a0:	68fb      	ldr	r3, [r7, #12]
 81035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81035a4:	68bb      	ldr	r3, [r7, #8]
 81035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81035b2:	4a04      	ldr	r2, [pc, #16]	; (81035c4 <__NVIC_SetPriorityGrouping+0x44>)
 81035b4:	68bb      	ldr	r3, [r7, #8]
 81035b6:	60d3      	str	r3, [r2, #12]
}
 81035b8:	bf00      	nop
 81035ba:	3714      	adds	r7, #20
 81035bc:	46bd      	mov	sp, r7
 81035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035c2:	4770      	bx	lr
 81035c4:	e000ed00 	.word	0xe000ed00

081035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81035c8:	b480      	push	{r7}
 81035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81035cc:	4b04      	ldr	r3, [pc, #16]	; (81035e0 <__NVIC_GetPriorityGrouping+0x18>)
 81035ce:	68db      	ldr	r3, [r3, #12]
 81035d0:	0a1b      	lsrs	r3, r3, #8
 81035d2:	f003 0307 	and.w	r3, r3, #7
}
 81035d6:	4618      	mov	r0, r3
 81035d8:	46bd      	mov	sp, r7
 81035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035de:	4770      	bx	lr
 81035e0:	e000ed00 	.word	0xe000ed00

081035e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81035e4:	b480      	push	{r7}
 81035e6:	b083      	sub	sp, #12
 81035e8:	af00      	add	r7, sp, #0
 81035ea:	4603      	mov	r3, r0
 81035ec:	6039      	str	r1, [r7, #0]
 81035ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81035f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035f4:	2b00      	cmp	r3, #0
 81035f6:	db0a      	blt.n	810360e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035f8:	683b      	ldr	r3, [r7, #0]
 81035fa:	b2da      	uxtb	r2, r3
 81035fc:	490c      	ldr	r1, [pc, #48]	; (8103630 <__NVIC_SetPriority+0x4c>)
 81035fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103602:	0112      	lsls	r2, r2, #4
 8103604:	b2d2      	uxtb	r2, r2
 8103606:	440b      	add	r3, r1
 8103608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810360c:	e00a      	b.n	8103624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810360e:	683b      	ldr	r3, [r7, #0]
 8103610:	b2da      	uxtb	r2, r3
 8103612:	4908      	ldr	r1, [pc, #32]	; (8103634 <__NVIC_SetPriority+0x50>)
 8103614:	88fb      	ldrh	r3, [r7, #6]
 8103616:	f003 030f 	and.w	r3, r3, #15
 810361a:	3b04      	subs	r3, #4
 810361c:	0112      	lsls	r2, r2, #4
 810361e:	b2d2      	uxtb	r2, r2
 8103620:	440b      	add	r3, r1
 8103622:	761a      	strb	r2, [r3, #24]
}
 8103624:	bf00      	nop
 8103626:	370c      	adds	r7, #12
 8103628:	46bd      	mov	sp, r7
 810362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810362e:	4770      	bx	lr
 8103630:	e000e100 	.word	0xe000e100
 8103634:	e000ed00 	.word	0xe000ed00

08103638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103638:	b480      	push	{r7}
 810363a:	b089      	sub	sp, #36	; 0x24
 810363c:	af00      	add	r7, sp, #0
 810363e:	60f8      	str	r0, [r7, #12]
 8103640:	60b9      	str	r1, [r7, #8]
 8103642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103644:	68fb      	ldr	r3, [r7, #12]
 8103646:	f003 0307 	and.w	r3, r3, #7
 810364a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810364c:	69fb      	ldr	r3, [r7, #28]
 810364e:	f1c3 0307 	rsb	r3, r3, #7
 8103652:	2b04      	cmp	r3, #4
 8103654:	bf28      	it	cs
 8103656:	2304      	movcs	r3, #4
 8103658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810365a:	69fb      	ldr	r3, [r7, #28]
 810365c:	3304      	adds	r3, #4
 810365e:	2b06      	cmp	r3, #6
 8103660:	d902      	bls.n	8103668 <NVIC_EncodePriority+0x30>
 8103662:	69fb      	ldr	r3, [r7, #28]
 8103664:	3b03      	subs	r3, #3
 8103666:	e000      	b.n	810366a <NVIC_EncodePriority+0x32>
 8103668:	2300      	movs	r3, #0
 810366a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810366c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103670:	69bb      	ldr	r3, [r7, #24]
 8103672:	fa02 f303 	lsl.w	r3, r2, r3
 8103676:	43da      	mvns	r2, r3
 8103678:	68bb      	ldr	r3, [r7, #8]
 810367a:	401a      	ands	r2, r3
 810367c:	697b      	ldr	r3, [r7, #20]
 810367e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8103684:	697b      	ldr	r3, [r7, #20]
 8103686:	fa01 f303 	lsl.w	r3, r1, r3
 810368a:	43d9      	mvns	r1, r3
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103690:	4313      	orrs	r3, r2
         );
}
 8103692:	4618      	mov	r0, r3
 8103694:	3724      	adds	r7, #36	; 0x24
 8103696:	46bd      	mov	sp, r7
 8103698:	f85d 7b04 	ldr.w	r7, [sp], #4
 810369c:	4770      	bx	lr
	...

081036a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81036a0:	b580      	push	{r7, lr}
 81036a2:	b082      	sub	sp, #8
 81036a4:	af00      	add	r7, sp, #0
 81036a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	3b01      	subs	r3, #1
 81036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81036b0:	d301      	bcc.n	81036b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81036b2:	2301      	movs	r3, #1
 81036b4:	e00f      	b.n	81036d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81036b6:	4a0a      	ldr	r2, [pc, #40]	; (81036e0 <SysTick_Config+0x40>)
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	3b01      	subs	r3, #1
 81036bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81036be:	210f      	movs	r1, #15
 81036c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81036c4:	f7ff ff8e 	bl	81035e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81036c8:	4b05      	ldr	r3, [pc, #20]	; (81036e0 <SysTick_Config+0x40>)
 81036ca:	2200      	movs	r2, #0
 81036cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81036ce:	4b04      	ldr	r3, [pc, #16]	; (81036e0 <SysTick_Config+0x40>)
 81036d0:	2207      	movs	r2, #7
 81036d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81036d4:	2300      	movs	r3, #0
}
 81036d6:	4618      	mov	r0, r3
 81036d8:	3708      	adds	r7, #8
 81036da:	46bd      	mov	sp, r7
 81036dc:	bd80      	pop	{r7, pc}
 81036de:	bf00      	nop
 81036e0:	e000e010 	.word	0xe000e010

081036e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81036e4:	b580      	push	{r7, lr}
 81036e6:	b082      	sub	sp, #8
 81036e8:	af00      	add	r7, sp, #0
 81036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81036ec:	6878      	ldr	r0, [r7, #4]
 81036ee:	f7ff ff47 	bl	8103580 <__NVIC_SetPriorityGrouping>
}
 81036f2:	bf00      	nop
 81036f4:	3708      	adds	r7, #8
 81036f6:	46bd      	mov	sp, r7
 81036f8:	bd80      	pop	{r7, pc}

081036fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81036fa:	b580      	push	{r7, lr}
 81036fc:	b086      	sub	sp, #24
 81036fe:	af00      	add	r7, sp, #0
 8103700:	4603      	mov	r3, r0
 8103702:	60b9      	str	r1, [r7, #8]
 8103704:	607a      	str	r2, [r7, #4]
 8103706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103708:	f7ff ff5e 	bl	81035c8 <__NVIC_GetPriorityGrouping>
 810370c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810370e:	687a      	ldr	r2, [r7, #4]
 8103710:	68b9      	ldr	r1, [r7, #8]
 8103712:	6978      	ldr	r0, [r7, #20]
 8103714:	f7ff ff90 	bl	8103638 <NVIC_EncodePriority>
 8103718:	4602      	mov	r2, r0
 810371a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810371e:	4611      	mov	r1, r2
 8103720:	4618      	mov	r0, r3
 8103722:	f7ff ff5f 	bl	81035e4 <__NVIC_SetPriority>
}
 8103726:	bf00      	nop
 8103728:	3718      	adds	r7, #24
 810372a:	46bd      	mov	sp, r7
 810372c:	bd80      	pop	{r7, pc}

0810372e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810372e:	b580      	push	{r7, lr}
 8103730:	b082      	sub	sp, #8
 8103732:	af00      	add	r7, sp, #0
 8103734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103736:	6878      	ldr	r0, [r7, #4]
 8103738:	f7ff ffb2 	bl	81036a0 <SysTick_Config>
 810373c:	4603      	mov	r3, r0
}
 810373e:	4618      	mov	r0, r3
 8103740:	3708      	adds	r7, #8
 8103742:	46bd      	mov	sp, r7
 8103744:	bd80      	pop	{r7, pc}
	...

08103748 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103748:	b480      	push	{r7}
 810374a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810374c:	4b07      	ldr	r3, [pc, #28]	; (810376c <HAL_GetCurrentCPUID+0x24>)
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	091b      	lsrs	r3, r3, #4
 8103752:	f003 030f 	and.w	r3, r3, #15
 8103756:	2b07      	cmp	r3, #7
 8103758:	d101      	bne.n	810375e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810375a:	2303      	movs	r3, #3
 810375c:	e000      	b.n	8103760 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810375e:	2301      	movs	r3, #1
  }
}
 8103760:	4618      	mov	r0, r3
 8103762:	46bd      	mov	sp, r7
 8103764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103768:	4770      	bx	lr
 810376a:	bf00      	nop
 810376c:	e000ed00 	.word	0xe000ed00

08103770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103770:	b480      	push	{r7}
 8103772:	b089      	sub	sp, #36	; 0x24
 8103774:	af00      	add	r7, sp, #0
 8103776:	6078      	str	r0, [r7, #4]
 8103778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810377a:	2300      	movs	r3, #0
 810377c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810377e:	4b89      	ldr	r3, [pc, #548]	; (81039a4 <HAL_GPIO_Init+0x234>)
 8103780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103782:	e194      	b.n	8103aae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103784:	683b      	ldr	r3, [r7, #0]
 8103786:	681a      	ldr	r2, [r3, #0]
 8103788:	2101      	movs	r1, #1
 810378a:	69fb      	ldr	r3, [r7, #28]
 810378c:	fa01 f303 	lsl.w	r3, r1, r3
 8103790:	4013      	ands	r3, r2
 8103792:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103794:	693b      	ldr	r3, [r7, #16]
 8103796:	2b00      	cmp	r3, #0
 8103798:	f000 8186 	beq.w	8103aa8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810379c:	683b      	ldr	r3, [r7, #0]
 810379e:	685b      	ldr	r3, [r3, #4]
 81037a0:	f003 0303 	and.w	r3, r3, #3
 81037a4:	2b01      	cmp	r3, #1
 81037a6:	d005      	beq.n	81037b4 <HAL_GPIO_Init+0x44>
 81037a8:	683b      	ldr	r3, [r7, #0]
 81037aa:	685b      	ldr	r3, [r3, #4]
 81037ac:	f003 0303 	and.w	r3, r3, #3
 81037b0:	2b02      	cmp	r3, #2
 81037b2:	d130      	bne.n	8103816 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	689b      	ldr	r3, [r3, #8]
 81037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81037ba:	69fb      	ldr	r3, [r7, #28]
 81037bc:	005b      	lsls	r3, r3, #1
 81037be:	2203      	movs	r2, #3
 81037c0:	fa02 f303 	lsl.w	r3, r2, r3
 81037c4:	43db      	mvns	r3, r3
 81037c6:	69ba      	ldr	r2, [r7, #24]
 81037c8:	4013      	ands	r3, r2
 81037ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81037cc:	683b      	ldr	r3, [r7, #0]
 81037ce:	68da      	ldr	r2, [r3, #12]
 81037d0:	69fb      	ldr	r3, [r7, #28]
 81037d2:	005b      	lsls	r3, r3, #1
 81037d4:	fa02 f303 	lsl.w	r3, r2, r3
 81037d8:	69ba      	ldr	r2, [r7, #24]
 81037da:	4313      	orrs	r3, r2
 81037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	69ba      	ldr	r2, [r7, #24]
 81037e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	685b      	ldr	r3, [r3, #4]
 81037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81037ea:	2201      	movs	r2, #1
 81037ec:	69fb      	ldr	r3, [r7, #28]
 81037ee:	fa02 f303 	lsl.w	r3, r2, r3
 81037f2:	43db      	mvns	r3, r3
 81037f4:	69ba      	ldr	r2, [r7, #24]
 81037f6:	4013      	ands	r3, r2
 81037f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81037fa:	683b      	ldr	r3, [r7, #0]
 81037fc:	685b      	ldr	r3, [r3, #4]
 81037fe:	091b      	lsrs	r3, r3, #4
 8103800:	f003 0201 	and.w	r2, r3, #1
 8103804:	69fb      	ldr	r3, [r7, #28]
 8103806:	fa02 f303 	lsl.w	r3, r2, r3
 810380a:	69ba      	ldr	r2, [r7, #24]
 810380c:	4313      	orrs	r3, r2
 810380e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	69ba      	ldr	r2, [r7, #24]
 8103814:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103816:	683b      	ldr	r3, [r7, #0]
 8103818:	685b      	ldr	r3, [r3, #4]
 810381a:	f003 0303 	and.w	r3, r3, #3
 810381e:	2b03      	cmp	r3, #3
 8103820:	d017      	beq.n	8103852 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	68db      	ldr	r3, [r3, #12]
 8103826:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103828:	69fb      	ldr	r3, [r7, #28]
 810382a:	005b      	lsls	r3, r3, #1
 810382c:	2203      	movs	r2, #3
 810382e:	fa02 f303 	lsl.w	r3, r2, r3
 8103832:	43db      	mvns	r3, r3
 8103834:	69ba      	ldr	r2, [r7, #24]
 8103836:	4013      	ands	r3, r2
 8103838:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810383a:	683b      	ldr	r3, [r7, #0]
 810383c:	689a      	ldr	r2, [r3, #8]
 810383e:	69fb      	ldr	r3, [r7, #28]
 8103840:	005b      	lsls	r3, r3, #1
 8103842:	fa02 f303 	lsl.w	r3, r2, r3
 8103846:	69ba      	ldr	r2, [r7, #24]
 8103848:	4313      	orrs	r3, r2
 810384a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	69ba      	ldr	r2, [r7, #24]
 8103850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103852:	683b      	ldr	r3, [r7, #0]
 8103854:	685b      	ldr	r3, [r3, #4]
 8103856:	f003 0303 	and.w	r3, r3, #3
 810385a:	2b02      	cmp	r3, #2
 810385c:	d123      	bne.n	81038a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810385e:	69fb      	ldr	r3, [r7, #28]
 8103860:	08da      	lsrs	r2, r3, #3
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	3208      	adds	r2, #8
 8103866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810386c:	69fb      	ldr	r3, [r7, #28]
 810386e:	f003 0307 	and.w	r3, r3, #7
 8103872:	009b      	lsls	r3, r3, #2
 8103874:	220f      	movs	r2, #15
 8103876:	fa02 f303 	lsl.w	r3, r2, r3
 810387a:	43db      	mvns	r3, r3
 810387c:	69ba      	ldr	r2, [r7, #24]
 810387e:	4013      	ands	r3, r2
 8103880:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103882:	683b      	ldr	r3, [r7, #0]
 8103884:	691a      	ldr	r2, [r3, #16]
 8103886:	69fb      	ldr	r3, [r7, #28]
 8103888:	f003 0307 	and.w	r3, r3, #7
 810388c:	009b      	lsls	r3, r3, #2
 810388e:	fa02 f303 	lsl.w	r3, r2, r3
 8103892:	69ba      	ldr	r2, [r7, #24]
 8103894:	4313      	orrs	r3, r2
 8103896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103898:	69fb      	ldr	r3, [r7, #28]
 810389a:	08da      	lsrs	r2, r3, #3
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	3208      	adds	r2, #8
 81038a0:	69b9      	ldr	r1, [r7, #24]
 81038a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	681b      	ldr	r3, [r3, #0]
 81038aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81038ac:	69fb      	ldr	r3, [r7, #28]
 81038ae:	005b      	lsls	r3, r3, #1
 81038b0:	2203      	movs	r2, #3
 81038b2:	fa02 f303 	lsl.w	r3, r2, r3
 81038b6:	43db      	mvns	r3, r3
 81038b8:	69ba      	ldr	r2, [r7, #24]
 81038ba:	4013      	ands	r3, r2
 81038bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81038be:	683b      	ldr	r3, [r7, #0]
 81038c0:	685b      	ldr	r3, [r3, #4]
 81038c2:	f003 0203 	and.w	r2, r3, #3
 81038c6:	69fb      	ldr	r3, [r7, #28]
 81038c8:	005b      	lsls	r3, r3, #1
 81038ca:	fa02 f303 	lsl.w	r3, r2, r3
 81038ce:	69ba      	ldr	r2, [r7, #24]
 81038d0:	4313      	orrs	r3, r2
 81038d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	69ba      	ldr	r2, [r7, #24]
 81038d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81038da:	683b      	ldr	r3, [r7, #0]
 81038dc:	685b      	ldr	r3, [r3, #4]
 81038de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81038e2:	2b00      	cmp	r3, #0
 81038e4:	f000 80e0 	beq.w	8103aa8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81038e8:	4b2f      	ldr	r3, [pc, #188]	; (81039a8 <HAL_GPIO_Init+0x238>)
 81038ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81038ee:	4a2e      	ldr	r2, [pc, #184]	; (81039a8 <HAL_GPIO_Init+0x238>)
 81038f0:	f043 0302 	orr.w	r3, r3, #2
 81038f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81038f8:	4b2b      	ldr	r3, [pc, #172]	; (81039a8 <HAL_GPIO_Init+0x238>)
 81038fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81038fe:	f003 0302 	and.w	r3, r3, #2
 8103902:	60fb      	str	r3, [r7, #12]
 8103904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103906:	4a29      	ldr	r2, [pc, #164]	; (81039ac <HAL_GPIO_Init+0x23c>)
 8103908:	69fb      	ldr	r3, [r7, #28]
 810390a:	089b      	lsrs	r3, r3, #2
 810390c:	3302      	adds	r3, #2
 810390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103914:	69fb      	ldr	r3, [r7, #28]
 8103916:	f003 0303 	and.w	r3, r3, #3
 810391a:	009b      	lsls	r3, r3, #2
 810391c:	220f      	movs	r2, #15
 810391e:	fa02 f303 	lsl.w	r3, r2, r3
 8103922:	43db      	mvns	r3, r3
 8103924:	69ba      	ldr	r2, [r7, #24]
 8103926:	4013      	ands	r3, r2
 8103928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	4a20      	ldr	r2, [pc, #128]	; (81039b0 <HAL_GPIO_Init+0x240>)
 810392e:	4293      	cmp	r3, r2
 8103930:	d052      	beq.n	81039d8 <HAL_GPIO_Init+0x268>
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	4a1f      	ldr	r2, [pc, #124]	; (81039b4 <HAL_GPIO_Init+0x244>)
 8103936:	4293      	cmp	r3, r2
 8103938:	d031      	beq.n	810399e <HAL_GPIO_Init+0x22e>
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	4a1e      	ldr	r2, [pc, #120]	; (81039b8 <HAL_GPIO_Init+0x248>)
 810393e:	4293      	cmp	r3, r2
 8103940:	d02b      	beq.n	810399a <HAL_GPIO_Init+0x22a>
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	4a1d      	ldr	r2, [pc, #116]	; (81039bc <HAL_GPIO_Init+0x24c>)
 8103946:	4293      	cmp	r3, r2
 8103948:	d025      	beq.n	8103996 <HAL_GPIO_Init+0x226>
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	4a1c      	ldr	r2, [pc, #112]	; (81039c0 <HAL_GPIO_Init+0x250>)
 810394e:	4293      	cmp	r3, r2
 8103950:	d01f      	beq.n	8103992 <HAL_GPIO_Init+0x222>
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	4a1b      	ldr	r2, [pc, #108]	; (81039c4 <HAL_GPIO_Init+0x254>)
 8103956:	4293      	cmp	r3, r2
 8103958:	d019      	beq.n	810398e <HAL_GPIO_Init+0x21e>
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	4a1a      	ldr	r2, [pc, #104]	; (81039c8 <HAL_GPIO_Init+0x258>)
 810395e:	4293      	cmp	r3, r2
 8103960:	d013      	beq.n	810398a <HAL_GPIO_Init+0x21a>
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	4a19      	ldr	r2, [pc, #100]	; (81039cc <HAL_GPIO_Init+0x25c>)
 8103966:	4293      	cmp	r3, r2
 8103968:	d00d      	beq.n	8103986 <HAL_GPIO_Init+0x216>
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	4a18      	ldr	r2, [pc, #96]	; (81039d0 <HAL_GPIO_Init+0x260>)
 810396e:	4293      	cmp	r3, r2
 8103970:	d007      	beq.n	8103982 <HAL_GPIO_Init+0x212>
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	4a17      	ldr	r2, [pc, #92]	; (81039d4 <HAL_GPIO_Init+0x264>)
 8103976:	4293      	cmp	r3, r2
 8103978:	d101      	bne.n	810397e <HAL_GPIO_Init+0x20e>
 810397a:	2309      	movs	r3, #9
 810397c:	e02d      	b.n	81039da <HAL_GPIO_Init+0x26a>
 810397e:	230a      	movs	r3, #10
 8103980:	e02b      	b.n	81039da <HAL_GPIO_Init+0x26a>
 8103982:	2308      	movs	r3, #8
 8103984:	e029      	b.n	81039da <HAL_GPIO_Init+0x26a>
 8103986:	2307      	movs	r3, #7
 8103988:	e027      	b.n	81039da <HAL_GPIO_Init+0x26a>
 810398a:	2306      	movs	r3, #6
 810398c:	e025      	b.n	81039da <HAL_GPIO_Init+0x26a>
 810398e:	2305      	movs	r3, #5
 8103990:	e023      	b.n	81039da <HAL_GPIO_Init+0x26a>
 8103992:	2304      	movs	r3, #4
 8103994:	e021      	b.n	81039da <HAL_GPIO_Init+0x26a>
 8103996:	2303      	movs	r3, #3
 8103998:	e01f      	b.n	81039da <HAL_GPIO_Init+0x26a>
 810399a:	2302      	movs	r3, #2
 810399c:	e01d      	b.n	81039da <HAL_GPIO_Init+0x26a>
 810399e:	2301      	movs	r3, #1
 81039a0:	e01b      	b.n	81039da <HAL_GPIO_Init+0x26a>
 81039a2:	bf00      	nop
 81039a4:	580000c0 	.word	0x580000c0
 81039a8:	58024400 	.word	0x58024400
 81039ac:	58000400 	.word	0x58000400
 81039b0:	58020000 	.word	0x58020000
 81039b4:	58020400 	.word	0x58020400
 81039b8:	58020800 	.word	0x58020800
 81039bc:	58020c00 	.word	0x58020c00
 81039c0:	58021000 	.word	0x58021000
 81039c4:	58021400 	.word	0x58021400
 81039c8:	58021800 	.word	0x58021800
 81039cc:	58021c00 	.word	0x58021c00
 81039d0:	58022000 	.word	0x58022000
 81039d4:	58022400 	.word	0x58022400
 81039d8:	2300      	movs	r3, #0
 81039da:	69fa      	ldr	r2, [r7, #28]
 81039dc:	f002 0203 	and.w	r2, r2, #3
 81039e0:	0092      	lsls	r2, r2, #2
 81039e2:	4093      	lsls	r3, r2
 81039e4:	69ba      	ldr	r2, [r7, #24]
 81039e6:	4313      	orrs	r3, r2
 81039e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81039ea:	4938      	ldr	r1, [pc, #224]	; (8103acc <HAL_GPIO_Init+0x35c>)
 81039ec:	69fb      	ldr	r3, [r7, #28]
 81039ee:	089b      	lsrs	r3, r3, #2
 81039f0:	3302      	adds	r3, #2
 81039f2:	69ba      	ldr	r2, [r7, #24]
 81039f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81039f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81039fc:	681b      	ldr	r3, [r3, #0]
 81039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a00:	693b      	ldr	r3, [r7, #16]
 8103a02:	43db      	mvns	r3, r3
 8103a04:	69ba      	ldr	r2, [r7, #24]
 8103a06:	4013      	ands	r3, r2
 8103a08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103a0a:	683b      	ldr	r3, [r7, #0]
 8103a0c:	685b      	ldr	r3, [r3, #4]
 8103a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d003      	beq.n	8103a1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103a16:	69ba      	ldr	r2, [r7, #24]
 8103a18:	693b      	ldr	r3, [r7, #16]
 8103a1a:	4313      	orrs	r3, r2
 8103a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a22:	69bb      	ldr	r3, [r7, #24]
 8103a24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103a2a:	685b      	ldr	r3, [r3, #4]
 8103a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a2e:	693b      	ldr	r3, [r7, #16]
 8103a30:	43db      	mvns	r3, r3
 8103a32:	69ba      	ldr	r2, [r7, #24]
 8103a34:	4013      	ands	r3, r2
 8103a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103a38:	683b      	ldr	r3, [r7, #0]
 8103a3a:	685b      	ldr	r3, [r3, #4]
 8103a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d003      	beq.n	8103a4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103a44:	69ba      	ldr	r2, [r7, #24]
 8103a46:	693b      	ldr	r3, [r7, #16]
 8103a48:	4313      	orrs	r3, r2
 8103a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a50:	69bb      	ldr	r3, [r7, #24]
 8103a52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103a54:	697b      	ldr	r3, [r7, #20]
 8103a56:	685b      	ldr	r3, [r3, #4]
 8103a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a5a:	693b      	ldr	r3, [r7, #16]
 8103a5c:	43db      	mvns	r3, r3
 8103a5e:	69ba      	ldr	r2, [r7, #24]
 8103a60:	4013      	ands	r3, r2
 8103a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103a64:	683b      	ldr	r3, [r7, #0]
 8103a66:	685b      	ldr	r3, [r3, #4]
 8103a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103a6c:	2b00      	cmp	r3, #0
 8103a6e:	d003      	beq.n	8103a78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103a70:	69ba      	ldr	r2, [r7, #24]
 8103a72:	693b      	ldr	r3, [r7, #16]
 8103a74:	4313      	orrs	r3, r2
 8103a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103a78:	697b      	ldr	r3, [r7, #20]
 8103a7a:	69ba      	ldr	r2, [r7, #24]
 8103a7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103a7e:	697b      	ldr	r3, [r7, #20]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a84:	693b      	ldr	r3, [r7, #16]
 8103a86:	43db      	mvns	r3, r3
 8103a88:	69ba      	ldr	r2, [r7, #24]
 8103a8a:	4013      	ands	r3, r2
 8103a8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103a8e:	683b      	ldr	r3, [r7, #0]
 8103a90:	685b      	ldr	r3, [r3, #4]
 8103a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103a96:	2b00      	cmp	r3, #0
 8103a98:	d003      	beq.n	8103aa2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103a9a:	69ba      	ldr	r2, [r7, #24]
 8103a9c:	693b      	ldr	r3, [r7, #16]
 8103a9e:	4313      	orrs	r3, r2
 8103aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103aa2:	697b      	ldr	r3, [r7, #20]
 8103aa4:	69ba      	ldr	r2, [r7, #24]
 8103aa6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103aa8:	69fb      	ldr	r3, [r7, #28]
 8103aaa:	3301      	adds	r3, #1
 8103aac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103aae:	683b      	ldr	r3, [r7, #0]
 8103ab0:	681a      	ldr	r2, [r3, #0]
 8103ab2:	69fb      	ldr	r3, [r7, #28]
 8103ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8103ab8:	2b00      	cmp	r3, #0
 8103aba:	f47f ae63 	bne.w	8103784 <HAL_GPIO_Init+0x14>
  }
}
 8103abe:	bf00      	nop
 8103ac0:	bf00      	nop
 8103ac2:	3724      	adds	r7, #36	; 0x24
 8103ac4:	46bd      	mov	sp, r7
 8103ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aca:	4770      	bx	lr
 8103acc:	58000400 	.word	0x58000400

08103ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103ad0:	b480      	push	{r7}
 8103ad2:	b083      	sub	sp, #12
 8103ad4:	af00      	add	r7, sp, #0
 8103ad6:	6078      	str	r0, [r7, #4]
 8103ad8:	460b      	mov	r3, r1
 8103ada:	807b      	strh	r3, [r7, #2]
 8103adc:	4613      	mov	r3, r2
 8103ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103ae0:	787b      	ldrb	r3, [r7, #1]
 8103ae2:	2b00      	cmp	r3, #0
 8103ae4:	d003      	beq.n	8103aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103ae6:	887a      	ldrh	r2, [r7, #2]
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103aec:	e003      	b.n	8103af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103aee:	887b      	ldrh	r3, [r7, #2]
 8103af0:	041a      	lsls	r2, r3, #16
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	619a      	str	r2, [r3, #24]
}
 8103af6:	bf00      	nop
 8103af8:	370c      	adds	r7, #12
 8103afa:	46bd      	mov	sp, r7
 8103afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b00:	4770      	bx	lr
	...

08103b04 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103b04:	b480      	push	{r7}
 8103b06:	b083      	sub	sp, #12
 8103b08:	af00      	add	r7, sp, #0
 8103b0a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103b0c:	4b05      	ldr	r3, [pc, #20]	; (8103b24 <HAL_HSEM_ActivateNotification+0x20>)
 8103b0e:	681a      	ldr	r2, [r3, #0]
 8103b10:	4904      	ldr	r1, [pc, #16]	; (8103b24 <HAL_HSEM_ActivateNotification+0x20>)
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	4313      	orrs	r3, r2
 8103b16:	600b      	str	r3, [r1, #0]
#endif
}
 8103b18:	bf00      	nop
 8103b1a:	370c      	adds	r7, #12
 8103b1c:	46bd      	mov	sp, r7
 8103b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b22:	4770      	bx	lr
 8103b24:	58026510 	.word	0x58026510

08103b28 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103b28:	b580      	push	{r7, lr}
 8103b2a:	b084      	sub	sp, #16
 8103b2c:	af00      	add	r7, sp, #0
 8103b2e:	60f8      	str	r0, [r7, #12]
 8103b30:	460b      	mov	r3, r1
 8103b32:	607a      	str	r2, [r7, #4]
 8103b34:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103b36:	4b37      	ldr	r3, [pc, #220]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	f023 0201 	bic.w	r2, r3, #1
 8103b3e:	4935      	ldr	r1, [pc, #212]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b40:	68fb      	ldr	r3, [r7, #12]
 8103b42:	4313      	orrs	r3, r2
 8103b44:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	2b00      	cmp	r3, #0
 8103b4a:	d123      	bne.n	8103b94 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103b4c:	f7ff fdfc 	bl	8103748 <HAL_GetCurrentCPUID>
 8103b50:	4603      	mov	r3, r0
 8103b52:	2b03      	cmp	r3, #3
 8103b54:	d158      	bne.n	8103c08 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103b56:	4b2f      	ldr	r3, [pc, #188]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b58:	691b      	ldr	r3, [r3, #16]
 8103b5a:	4a2e      	ldr	r2, [pc, #184]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b5c:	f023 0301 	bic.w	r3, r3, #1
 8103b60:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103b62:	4b2d      	ldr	r3, [pc, #180]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b64:	691b      	ldr	r3, [r3, #16]
 8103b66:	4a2c      	ldr	r2, [pc, #176]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b68:	f043 0304 	orr.w	r3, r3, #4
 8103b6c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103b6e:	f3bf 8f4f 	dsb	sy
}
 8103b72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103b74:	f3bf 8f6f 	isb	sy
}
 8103b78:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103b7a:	7afb      	ldrb	r3, [r7, #11]
 8103b7c:	2b01      	cmp	r3, #1
 8103b7e:	d101      	bne.n	8103b84 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103b80:	bf30      	wfi
 8103b82:	e000      	b.n	8103b86 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103b84:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103b86:	4b24      	ldr	r3, [pc, #144]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b88:	691b      	ldr	r3, [r3, #16]
 8103b8a:	4a23      	ldr	r2, [pc, #140]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b8c:	f023 0304 	bic.w	r3, r3, #4
 8103b90:	6113      	str	r3, [r2, #16]
 8103b92:	e03c      	b.n	8103c0e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	2b01      	cmp	r3, #1
 8103b98:	d123      	bne.n	8103be2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103b9a:	f7ff fdd5 	bl	8103748 <HAL_GetCurrentCPUID>
 8103b9e:	4603      	mov	r3, r0
 8103ba0:	2b01      	cmp	r3, #1
 8103ba2:	d133      	bne.n	8103c0c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103ba4:	4b1b      	ldr	r3, [pc, #108]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103ba6:	695b      	ldr	r3, [r3, #20]
 8103ba8:	4a1a      	ldr	r2, [pc, #104]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103baa:	f023 0302 	bic.w	r3, r3, #2
 8103bae:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103bb0:	4b19      	ldr	r3, [pc, #100]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bb2:	691b      	ldr	r3, [r3, #16]
 8103bb4:	4a18      	ldr	r2, [pc, #96]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bb6:	f043 0304 	orr.w	r3, r3, #4
 8103bba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103bbc:	f3bf 8f4f 	dsb	sy
}
 8103bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103bc2:	f3bf 8f6f 	isb	sy
}
 8103bc6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103bc8:	7afb      	ldrb	r3, [r7, #11]
 8103bca:	2b01      	cmp	r3, #1
 8103bcc:	d101      	bne.n	8103bd2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103bce:	bf30      	wfi
 8103bd0:	e000      	b.n	8103bd4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103bd2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103bd4:	4b10      	ldr	r3, [pc, #64]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bd6:	691b      	ldr	r3, [r3, #16]
 8103bd8:	4a0f      	ldr	r2, [pc, #60]	; (8103c18 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bda:	f023 0304 	bic.w	r3, r3, #4
 8103bde:	6113      	str	r3, [r2, #16]
 8103be0:	e015      	b.n	8103c0e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103be2:	f7ff fdb1 	bl	8103748 <HAL_GetCurrentCPUID>
 8103be6:	4603      	mov	r3, r0
 8103be8:	2b03      	cmp	r3, #3
 8103bea:	d106      	bne.n	8103bfa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103bec:	4b09      	ldr	r3, [pc, #36]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bee:	691b      	ldr	r3, [r3, #16]
 8103bf0:	4a08      	ldr	r2, [pc, #32]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bf2:	f023 0304 	bic.w	r3, r3, #4
 8103bf6:	6113      	str	r3, [r2, #16]
 8103bf8:	e009      	b.n	8103c0e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103bfa:	4b06      	ldr	r3, [pc, #24]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bfc:	695b      	ldr	r3, [r3, #20]
 8103bfe:	4a05      	ldr	r2, [pc, #20]	; (8103c14 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c00:	f023 0304 	bic.w	r3, r3, #4
 8103c04:	6153      	str	r3, [r2, #20]
 8103c06:	e002      	b.n	8103c0e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103c08:	bf00      	nop
 8103c0a:	e000      	b.n	8103c0e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103c0c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103c0e:	3710      	adds	r7, #16
 8103c10:	46bd      	mov	sp, r7
 8103c12:	bd80      	pop	{r7, pc}
 8103c14:	58024800 	.word	0x58024800
 8103c18:	e000ed00 	.word	0xe000ed00

08103c1c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103c1c:	b580      	push	{r7, lr}
 8103c1e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103c20:	f7ff fd92 	bl	8103748 <HAL_GetCurrentCPUID>
 8103c24:	4603      	mov	r3, r0
 8103c26:	2b03      	cmp	r3, #3
 8103c28:	d101      	bne.n	8103c2e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103c2a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103c2c:	e001      	b.n	8103c32 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103c2e:	bf40      	sev
    __WFE ();
 8103c30:	bf20      	wfe
}
 8103c32:	bf00      	nop
 8103c34:	bd80      	pop	{r7, pc}
	...

08103c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103c38:	b480      	push	{r7}
 8103c3a:	b089      	sub	sp, #36	; 0x24
 8103c3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103c3e:	4bb3      	ldr	r3, [pc, #716]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c40:	691b      	ldr	r3, [r3, #16]
 8103c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103c46:	2b18      	cmp	r3, #24
 8103c48:	f200 8155 	bhi.w	8103ef6 <HAL_RCC_GetSysClockFreq+0x2be>
 8103c4c:	a201      	add	r2, pc, #4	; (adr r2, 8103c54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c52:	bf00      	nop
 8103c54:	08103cb9 	.word	0x08103cb9
 8103c58:	08103ef7 	.word	0x08103ef7
 8103c5c:	08103ef7 	.word	0x08103ef7
 8103c60:	08103ef7 	.word	0x08103ef7
 8103c64:	08103ef7 	.word	0x08103ef7
 8103c68:	08103ef7 	.word	0x08103ef7
 8103c6c:	08103ef7 	.word	0x08103ef7
 8103c70:	08103ef7 	.word	0x08103ef7
 8103c74:	08103cdf 	.word	0x08103cdf
 8103c78:	08103ef7 	.word	0x08103ef7
 8103c7c:	08103ef7 	.word	0x08103ef7
 8103c80:	08103ef7 	.word	0x08103ef7
 8103c84:	08103ef7 	.word	0x08103ef7
 8103c88:	08103ef7 	.word	0x08103ef7
 8103c8c:	08103ef7 	.word	0x08103ef7
 8103c90:	08103ef7 	.word	0x08103ef7
 8103c94:	08103ce5 	.word	0x08103ce5
 8103c98:	08103ef7 	.word	0x08103ef7
 8103c9c:	08103ef7 	.word	0x08103ef7
 8103ca0:	08103ef7 	.word	0x08103ef7
 8103ca4:	08103ef7 	.word	0x08103ef7
 8103ca8:	08103ef7 	.word	0x08103ef7
 8103cac:	08103ef7 	.word	0x08103ef7
 8103cb0:	08103ef7 	.word	0x08103ef7
 8103cb4:	08103ceb 	.word	0x08103ceb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103cb8:	4b94      	ldr	r3, [pc, #592]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	f003 0320 	and.w	r3, r3, #32
 8103cc0:	2b00      	cmp	r3, #0
 8103cc2:	d009      	beq.n	8103cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103cc4:	4b91      	ldr	r3, [pc, #580]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	08db      	lsrs	r3, r3, #3
 8103cca:	f003 0303 	and.w	r3, r3, #3
 8103cce:	4a90      	ldr	r2, [pc, #576]	; (8103f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8103cd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103cd6:	e111      	b.n	8103efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103cd8:	4b8d      	ldr	r3, [pc, #564]	; (8103f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103cda:	61bb      	str	r3, [r7, #24]
    break;
 8103cdc:	e10e      	b.n	8103efc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103cde:	4b8d      	ldr	r3, [pc, #564]	; (8103f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103ce0:	61bb      	str	r3, [r7, #24]
    break;
 8103ce2:	e10b      	b.n	8103efc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103ce4:	4b8c      	ldr	r3, [pc, #560]	; (8103f18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103ce6:	61bb      	str	r3, [r7, #24]
    break;
 8103ce8:	e108      	b.n	8103efc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103cea:	4b88      	ldr	r3, [pc, #544]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103cee:	f003 0303 	and.w	r3, r3, #3
 8103cf2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103cf4:	4b85      	ldr	r3, [pc, #532]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103cf8:	091b      	lsrs	r3, r3, #4
 8103cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103cfe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103d00:	4b82      	ldr	r3, [pc, #520]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d04:	f003 0301 	and.w	r3, r3, #1
 8103d08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103d0a:	4b80      	ldr	r3, [pc, #512]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d0e:	08db      	lsrs	r3, r3, #3
 8103d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d14:	68fa      	ldr	r2, [r7, #12]
 8103d16:	fb02 f303 	mul.w	r3, r2, r3
 8103d1a:	ee07 3a90 	vmov	s15, r3
 8103d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103d26:	693b      	ldr	r3, [r7, #16]
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	f000 80e1 	beq.w	8103ef0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103d2e:	697b      	ldr	r3, [r7, #20]
 8103d30:	2b02      	cmp	r3, #2
 8103d32:	f000 8083 	beq.w	8103e3c <HAL_RCC_GetSysClockFreq+0x204>
 8103d36:	697b      	ldr	r3, [r7, #20]
 8103d38:	2b02      	cmp	r3, #2
 8103d3a:	f200 80a1 	bhi.w	8103e80 <HAL_RCC_GetSysClockFreq+0x248>
 8103d3e:	697b      	ldr	r3, [r7, #20]
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d003      	beq.n	8103d4c <HAL_RCC_GetSysClockFreq+0x114>
 8103d44:	697b      	ldr	r3, [r7, #20]
 8103d46:	2b01      	cmp	r3, #1
 8103d48:	d056      	beq.n	8103df8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103d4a:	e099      	b.n	8103e80 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d4c:	4b6f      	ldr	r3, [pc, #444]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	f003 0320 	and.w	r3, r3, #32
 8103d54:	2b00      	cmp	r3, #0
 8103d56:	d02d      	beq.n	8103db4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103d58:	4b6c      	ldr	r3, [pc, #432]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	08db      	lsrs	r3, r3, #3
 8103d5e:	f003 0303 	and.w	r3, r3, #3
 8103d62:	4a6b      	ldr	r2, [pc, #428]	; (8103f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d64:	fa22 f303 	lsr.w	r3, r2, r3
 8103d68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	ee07 3a90 	vmov	s15, r3
 8103d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d74:	693b      	ldr	r3, [r7, #16]
 8103d76:	ee07 3a90 	vmov	s15, r3
 8103d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d82:	4b62      	ldr	r3, [pc, #392]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d8a:	ee07 3a90 	vmov	s15, r3
 8103d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8103d96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103dae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103db2:	e087      	b.n	8103ec4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103db4:	693b      	ldr	r3, [r7, #16]
 8103db6:	ee07 3a90 	vmov	s15, r3
 8103dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103f20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103dc6:	4b51      	ldr	r3, [pc, #324]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dce:	ee07 3a90 	vmov	s15, r3
 8103dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103dda:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103df6:	e065      	b.n	8103ec4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103df8:	693b      	ldr	r3, [r7, #16]
 8103dfa:	ee07 3a90 	vmov	s15, r3
 8103dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e0a:	4b40      	ldr	r3, [pc, #256]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e12:	ee07 3a90 	vmov	s15, r3
 8103e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e3a:	e043      	b.n	8103ec4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e3c:	693b      	ldr	r3, [r7, #16]
 8103e3e:	ee07 3a90 	vmov	s15, r3
 8103e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103f28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e4e:	4b2f      	ldr	r3, [pc, #188]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e56:	ee07 3a90 	vmov	s15, r3
 8103e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e7e:	e021      	b.n	8103ec4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e80:	693b      	ldr	r3, [r7, #16]
 8103e82:	ee07 3a90 	vmov	s15, r3
 8103e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e92:	4b1e      	ldr	r3, [pc, #120]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e9a:	ee07 3a90 	vmov	s15, r3
 8103e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103ea6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103ec2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103ec4:	4b11      	ldr	r3, [pc, #68]	; (8103f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103ec8:	0a5b      	lsrs	r3, r3, #9
 8103eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103ece:	3301      	adds	r3, #1
 8103ed0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103ed2:	683b      	ldr	r3, [r7, #0]
 8103ed4:	ee07 3a90 	vmov	s15, r3
 8103ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8103ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103ee8:	ee17 3a90 	vmov	r3, s15
 8103eec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103eee:	e005      	b.n	8103efc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103ef0:	2300      	movs	r3, #0
 8103ef2:	61bb      	str	r3, [r7, #24]
    break;
 8103ef4:	e002      	b.n	8103efc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103ef6:	4b07      	ldr	r3, [pc, #28]	; (8103f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103ef8:	61bb      	str	r3, [r7, #24]
    break;
 8103efa:	bf00      	nop
  }

  return sysclockfreq;
 8103efc:	69bb      	ldr	r3, [r7, #24]
}
 8103efe:	4618      	mov	r0, r3
 8103f00:	3724      	adds	r7, #36	; 0x24
 8103f02:	46bd      	mov	sp, r7
 8103f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f08:	4770      	bx	lr
 8103f0a:	bf00      	nop
 8103f0c:	58024400 	.word	0x58024400
 8103f10:	03d09000 	.word	0x03d09000
 8103f14:	003d0900 	.word	0x003d0900
 8103f18:	007a1200 	.word	0x007a1200
 8103f1c:	46000000 	.word	0x46000000
 8103f20:	4c742400 	.word	0x4c742400
 8103f24:	4a742400 	.word	0x4a742400
 8103f28:	4af42400 	.word	0x4af42400

08103f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103f2c:	b580      	push	{r7, lr}
 8103f2e:	b082      	sub	sp, #8
 8103f30:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103f32:	f7ff fe81 	bl	8103c38 <HAL_RCC_GetSysClockFreq>
 8103f36:	4602      	mov	r2, r0
 8103f38:	4b11      	ldr	r3, [pc, #68]	; (8103f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8103f3a:	699b      	ldr	r3, [r3, #24]
 8103f3c:	0a1b      	lsrs	r3, r3, #8
 8103f3e:	f003 030f 	and.w	r3, r3, #15
 8103f42:	4910      	ldr	r1, [pc, #64]	; (8103f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8103f44:	5ccb      	ldrb	r3, [r1, r3]
 8103f46:	f003 031f 	and.w	r3, r3, #31
 8103f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8103f4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103f50:	4b0b      	ldr	r3, [pc, #44]	; (8103f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8103f52:	699b      	ldr	r3, [r3, #24]
 8103f54:	f003 030f 	and.w	r3, r3, #15
 8103f58:	4a0a      	ldr	r2, [pc, #40]	; (8103f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8103f5a:	5cd3      	ldrb	r3, [r2, r3]
 8103f5c:	f003 031f 	and.w	r3, r3, #31
 8103f60:	687a      	ldr	r2, [r7, #4]
 8103f62:	fa22 f303 	lsr.w	r3, r2, r3
 8103f66:	4a08      	ldr	r2, [pc, #32]	; (8103f88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f68:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103f6a:	4b07      	ldr	r3, [pc, #28]	; (8103f88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	4a07      	ldr	r2, [pc, #28]	; (8103f8c <HAL_RCC_GetHCLKFreq+0x60>)
 8103f70:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103f72:	4b05      	ldr	r3, [pc, #20]	; (8103f88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f74:	681b      	ldr	r3, [r3, #0]
}
 8103f76:	4618      	mov	r0, r3
 8103f78:	3708      	adds	r7, #8
 8103f7a:	46bd      	mov	sp, r7
 8103f7c:	bd80      	pop	{r7, pc}
 8103f7e:	bf00      	nop
 8103f80:	58024400 	.word	0x58024400
 8103f84:	0810cf84 	.word	0x0810cf84
 8103f88:	10000004 	.word	0x10000004
 8103f8c:	10000000 	.word	0x10000000

08103f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103f90:	b580      	push	{r7, lr}
 8103f92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103f94:	f7ff ffca 	bl	8103f2c <HAL_RCC_GetHCLKFreq>
 8103f98:	4602      	mov	r2, r0
 8103f9a:	4b06      	ldr	r3, [pc, #24]	; (8103fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103f9c:	69db      	ldr	r3, [r3, #28]
 8103f9e:	091b      	lsrs	r3, r3, #4
 8103fa0:	f003 0307 	and.w	r3, r3, #7
 8103fa4:	4904      	ldr	r1, [pc, #16]	; (8103fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103fa6:	5ccb      	ldrb	r3, [r1, r3]
 8103fa8:	f003 031f 	and.w	r3, r3, #31
 8103fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103fb0:	4618      	mov	r0, r3
 8103fb2:	bd80      	pop	{r7, pc}
 8103fb4:	58024400 	.word	0x58024400
 8103fb8:	0810cf84 	.word	0x0810cf84

08103fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103fbc:	b580      	push	{r7, lr}
 8103fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103fc0:	f7ff ffb4 	bl	8103f2c <HAL_RCC_GetHCLKFreq>
 8103fc4:	4602      	mov	r2, r0
 8103fc6:	4b06      	ldr	r3, [pc, #24]	; (8103fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103fc8:	69db      	ldr	r3, [r3, #28]
 8103fca:	0a1b      	lsrs	r3, r3, #8
 8103fcc:	f003 0307 	and.w	r3, r3, #7
 8103fd0:	4904      	ldr	r1, [pc, #16]	; (8103fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8103fd2:	5ccb      	ldrb	r3, [r1, r3]
 8103fd4:	f003 031f 	and.w	r3, r3, #31
 8103fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103fdc:	4618      	mov	r0, r3
 8103fde:	bd80      	pop	{r7, pc}
 8103fe0:	58024400 	.word	0x58024400
 8103fe4:	0810cf84 	.word	0x0810cf84

08103fe8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103fe8:	b580      	push	{r7, lr}
 8103fea:	b086      	sub	sp, #24
 8103fec:	af00      	add	r7, sp, #0
 8103fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103ff0:	2300      	movs	r3, #0
 8103ff2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103ff4:	2300      	movs	r3, #0
 8103ff6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104000:	2b00      	cmp	r3, #0
 8104002:	d03f      	beq.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810400c:	d02a      	beq.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810400e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104012:	d824      	bhi.n	810405e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104018:	d018      	beq.n	810404c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810401a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810401e:	d81e      	bhi.n	810405e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104020:	2b00      	cmp	r3, #0
 8104022:	d003      	beq.n	810402c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104028:	d007      	beq.n	810403a <HAL_RCCEx_PeriphCLKConfig+0x52>
 810402a:	e018      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810402c:	4ba3      	ldr	r3, [pc, #652]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104030:	4aa2      	ldr	r2, [pc, #648]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104038:	e015      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	3304      	adds	r3, #4
 810403e:	2102      	movs	r1, #2
 8104040:	4618      	mov	r0, r3
 8104042:	f001 fff9 	bl	8106038 <RCCEx_PLL2_Config>
 8104046:	4603      	mov	r3, r0
 8104048:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810404a:	e00c      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	3324      	adds	r3, #36	; 0x24
 8104050:	2102      	movs	r1, #2
 8104052:	4618      	mov	r0, r3
 8104054:	f002 f8a2 	bl	810619c <RCCEx_PLL3_Config>
 8104058:	4603      	mov	r3, r0
 810405a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810405c:	e003      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810405e:	2301      	movs	r3, #1
 8104060:	75fb      	strb	r3, [r7, #23]
      break;
 8104062:	e000      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104066:	7dfb      	ldrb	r3, [r7, #23]
 8104068:	2b00      	cmp	r3, #0
 810406a:	d109      	bne.n	8104080 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810406c:	4b93      	ldr	r3, [pc, #588]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104078:	4990      	ldr	r1, [pc, #576]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810407a:	4313      	orrs	r3, r2
 810407c:	650b      	str	r3, [r1, #80]	; 0x50
 810407e:	e001      	b.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104080:	7dfb      	ldrb	r3, [r7, #23]
 8104082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810408c:	2b00      	cmp	r3, #0
 810408e:	d03d      	beq.n	810410c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104094:	2b04      	cmp	r3, #4
 8104096:	d826      	bhi.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104098:	a201      	add	r2, pc, #4	; (adr r2, 81040a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810409e:	bf00      	nop
 81040a0:	081040b5 	.word	0x081040b5
 81040a4:	081040c3 	.word	0x081040c3
 81040a8:	081040d5 	.word	0x081040d5
 81040ac:	081040ed 	.word	0x081040ed
 81040b0:	081040ed 	.word	0x081040ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040b4:	4b81      	ldr	r3, [pc, #516]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040b8:	4a80      	ldr	r2, [pc, #512]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040c0:	e015      	b.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	3304      	adds	r3, #4
 81040c6:	2100      	movs	r1, #0
 81040c8:	4618      	mov	r0, r3
 81040ca:	f001 ffb5 	bl	8106038 <RCCEx_PLL2_Config>
 81040ce:	4603      	mov	r3, r0
 81040d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040d2:	e00c      	b.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	3324      	adds	r3, #36	; 0x24
 81040d8:	2100      	movs	r1, #0
 81040da:	4618      	mov	r0, r3
 81040dc:	f002 f85e 	bl	810619c <RCCEx_PLL3_Config>
 81040e0:	4603      	mov	r3, r0
 81040e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040e4:	e003      	b.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81040e6:	2301      	movs	r3, #1
 81040e8:	75fb      	strb	r3, [r7, #23]
      break;
 81040ea:	e000      	b.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81040ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040ee:	7dfb      	ldrb	r3, [r7, #23]
 81040f0:	2b00      	cmp	r3, #0
 81040f2:	d109      	bne.n	8104108 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81040f4:	4b71      	ldr	r3, [pc, #452]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040f8:	f023 0207 	bic.w	r2, r3, #7
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104100:	496e      	ldr	r1, [pc, #440]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104102:	4313      	orrs	r3, r2
 8104104:	650b      	str	r3, [r1, #80]	; 0x50
 8104106:	e001      	b.n	810410c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104108:	7dfb      	ldrb	r3, [r7, #23]
 810410a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104114:	2b00      	cmp	r3, #0
 8104116:	d042      	beq.n	810419e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104120:	d02b      	beq.n	810417a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104126:	d825      	bhi.n	8104174 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104128:	2bc0      	cmp	r3, #192	; 0xc0
 810412a:	d028      	beq.n	810417e <HAL_RCCEx_PeriphCLKConfig+0x196>
 810412c:	2bc0      	cmp	r3, #192	; 0xc0
 810412e:	d821      	bhi.n	8104174 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104130:	2b80      	cmp	r3, #128	; 0x80
 8104132:	d016      	beq.n	8104162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104134:	2b80      	cmp	r3, #128	; 0x80
 8104136:	d81d      	bhi.n	8104174 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104138:	2b00      	cmp	r3, #0
 810413a:	d002      	beq.n	8104142 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810413c:	2b40      	cmp	r3, #64	; 0x40
 810413e:	d007      	beq.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104140:	e018      	b.n	8104174 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104142:	4b5e      	ldr	r3, [pc, #376]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104146:	4a5d      	ldr	r2, [pc, #372]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810414c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810414e:	e017      	b.n	8104180 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	3304      	adds	r3, #4
 8104154:	2100      	movs	r1, #0
 8104156:	4618      	mov	r0, r3
 8104158:	f001 ff6e 	bl	8106038 <RCCEx_PLL2_Config>
 810415c:	4603      	mov	r3, r0
 810415e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104160:	e00e      	b.n	8104180 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	3324      	adds	r3, #36	; 0x24
 8104166:	2100      	movs	r1, #0
 8104168:	4618      	mov	r0, r3
 810416a:	f002 f817 	bl	810619c <RCCEx_PLL3_Config>
 810416e:	4603      	mov	r3, r0
 8104170:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104172:	e005      	b.n	8104180 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104174:	2301      	movs	r3, #1
 8104176:	75fb      	strb	r3, [r7, #23]
      break;
 8104178:	e002      	b.n	8104180 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810417a:	bf00      	nop
 810417c:	e000      	b.n	8104180 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810417e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104180:	7dfb      	ldrb	r3, [r7, #23]
 8104182:	2b00      	cmp	r3, #0
 8104184:	d109      	bne.n	810419a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104186:	4b4d      	ldr	r3, [pc, #308]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810418a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104192:	494a      	ldr	r1, [pc, #296]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104194:	4313      	orrs	r3, r2
 8104196:	650b      	str	r3, [r1, #80]	; 0x50
 8104198:	e001      	b.n	810419e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810419a:	7dfb      	ldrb	r3, [r7, #23]
 810419c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d049      	beq.n	810423e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81041b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041b4:	d030      	beq.n	8104218 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81041b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041ba:	d82a      	bhi.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81041bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81041c0:	d02c      	beq.n	810421c <HAL_RCCEx_PeriphCLKConfig+0x234>
 81041c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81041c6:	d824      	bhi.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81041c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041cc:	d018      	beq.n	8104200 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041d2:	d81e      	bhi.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	d003      	beq.n	81041e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81041d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81041dc:	d007      	beq.n	81041ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 81041de:	e018      	b.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041e0:	4b36      	ldr	r3, [pc, #216]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041e4:	4a35      	ldr	r2, [pc, #212]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81041e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81041ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81041ec:	e017      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	3304      	adds	r3, #4
 81041f2:	2100      	movs	r1, #0
 81041f4:	4618      	mov	r0, r3
 81041f6:	f001 ff1f 	bl	8106038 <RCCEx_PLL2_Config>
 81041fa:	4603      	mov	r3, r0
 81041fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81041fe:	e00e      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	3324      	adds	r3, #36	; 0x24
 8104204:	2100      	movs	r1, #0
 8104206:	4618      	mov	r0, r3
 8104208:	f001 ffc8 	bl	810619c <RCCEx_PLL3_Config>
 810420c:	4603      	mov	r3, r0
 810420e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104210:	e005      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104212:	2301      	movs	r3, #1
 8104214:	75fb      	strb	r3, [r7, #23]
      break;
 8104216:	e002      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104218:	bf00      	nop
 810421a:	e000      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810421c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810421e:	7dfb      	ldrb	r3, [r7, #23]
 8104220:	2b00      	cmp	r3, #0
 8104222:	d10a      	bne.n	810423a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104224:	4b25      	ldr	r3, [pc, #148]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104228:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104232:	4922      	ldr	r1, [pc, #136]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104234:	4313      	orrs	r3, r2
 8104236:	658b      	str	r3, [r1, #88]	; 0x58
 8104238:	e001      	b.n	810423e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810423a:	7dfb      	ldrb	r3, [r7, #23]
 810423c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104246:	2b00      	cmp	r3, #0
 8104248:	d04b      	beq.n	81042e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104254:	d030      	beq.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810425a:	d82a      	bhi.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810425c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104260:	d02e      	beq.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8104262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104266:	d824      	bhi.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810426c:	d018      	beq.n	81042a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810426e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104272:	d81e      	bhi.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104274:	2b00      	cmp	r3, #0
 8104276:	d003      	beq.n	8104280 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810427c:	d007      	beq.n	810428e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810427e:	e018      	b.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104280:	4b0e      	ldr	r3, [pc, #56]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104284:	4a0d      	ldr	r2, [pc, #52]	; (81042bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810428a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810428c:	e019      	b.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	3304      	adds	r3, #4
 8104292:	2100      	movs	r1, #0
 8104294:	4618      	mov	r0, r3
 8104296:	f001 fecf 	bl	8106038 <RCCEx_PLL2_Config>
 810429a:	4603      	mov	r3, r0
 810429c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810429e:	e010      	b.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	3324      	adds	r3, #36	; 0x24
 81042a4:	2100      	movs	r1, #0
 81042a6:	4618      	mov	r0, r3
 81042a8:	f001 ff78 	bl	810619c <RCCEx_PLL3_Config>
 81042ac:	4603      	mov	r3, r0
 81042ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81042b0:	e007      	b.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81042b2:	2301      	movs	r3, #1
 81042b4:	75fb      	strb	r3, [r7, #23]
      break;
 81042b6:	e004      	b.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81042b8:	bf00      	nop
 81042ba:	e002      	b.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81042bc:	58024400 	.word	0x58024400
      break;
 81042c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042c2:	7dfb      	ldrb	r3, [r7, #23]
 81042c4:	2b00      	cmp	r3, #0
 81042c6:	d10a      	bne.n	81042de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81042c8:	4b99      	ldr	r3, [pc, #612]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81042cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81042d6:	4996      	ldr	r1, [pc, #600]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81042d8:	4313      	orrs	r3, r2
 81042da:	658b      	str	r3, [r1, #88]	; 0x58
 81042dc:	e001      	b.n	81042e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042de:	7dfb      	ldrb	r3, [r7, #23]
 81042e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81042ea:	2b00      	cmp	r3, #0
 81042ec:	d032      	beq.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81042f2:	2b30      	cmp	r3, #48	; 0x30
 81042f4:	d01c      	beq.n	8104330 <HAL_RCCEx_PeriphCLKConfig+0x348>
 81042f6:	2b30      	cmp	r3, #48	; 0x30
 81042f8:	d817      	bhi.n	810432a <HAL_RCCEx_PeriphCLKConfig+0x342>
 81042fa:	2b20      	cmp	r3, #32
 81042fc:	d00c      	beq.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x330>
 81042fe:	2b20      	cmp	r3, #32
 8104300:	d813      	bhi.n	810432a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104302:	2b00      	cmp	r3, #0
 8104304:	d016      	beq.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8104306:	2b10      	cmp	r3, #16
 8104308:	d10f      	bne.n	810432a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810430a:	4b89      	ldr	r3, [pc, #548]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810430e:	4a88      	ldr	r2, [pc, #544]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104316:	e00e      	b.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	3304      	adds	r3, #4
 810431c:	2102      	movs	r1, #2
 810431e:	4618      	mov	r0, r3
 8104320:	f001 fe8a 	bl	8106038 <RCCEx_PLL2_Config>
 8104324:	4603      	mov	r3, r0
 8104326:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104328:	e005      	b.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810432a:	2301      	movs	r3, #1
 810432c:	75fb      	strb	r3, [r7, #23]
      break;
 810432e:	e002      	b.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104330:	bf00      	nop
 8104332:	e000      	b.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104336:	7dfb      	ldrb	r3, [r7, #23]
 8104338:	2b00      	cmp	r3, #0
 810433a:	d109      	bne.n	8104350 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810433c:	4b7c      	ldr	r3, [pc, #496]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104340:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104348:	4979      	ldr	r1, [pc, #484]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810434a:	4313      	orrs	r3, r2
 810434c:	64cb      	str	r3, [r1, #76]	; 0x4c
 810434e:	e001      	b.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104350:	7dfb      	ldrb	r3, [r7, #23]
 8104352:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810435c:	2b00      	cmp	r3, #0
 810435e:	d047      	beq.n	81043f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104368:	d030      	beq.n	81043cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 810436a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810436e:	d82a      	bhi.n	81043c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104370:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104374:	d02c      	beq.n	81043d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8104376:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810437a:	d824      	bhi.n	81043c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810437c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104380:	d018      	beq.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8104382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104386:	d81e      	bhi.n	81043c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104388:	2b00      	cmp	r3, #0
 810438a:	d003      	beq.n	8104394 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 810438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104390:	d007      	beq.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8104392:	e018      	b.n	81043c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104394:	4b66      	ldr	r3, [pc, #408]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104398:	4a65      	ldr	r2, [pc, #404]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810439a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810439e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81043a0:	e017      	b.n	81043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	3304      	adds	r3, #4
 81043a6:	2100      	movs	r1, #0
 81043a8:	4618      	mov	r0, r3
 81043aa:	f001 fe45 	bl	8106038 <RCCEx_PLL2_Config>
 81043ae:	4603      	mov	r3, r0
 81043b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81043b2:	e00e      	b.n	81043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	3324      	adds	r3, #36	; 0x24
 81043b8:	2100      	movs	r1, #0
 81043ba:	4618      	mov	r0, r3
 81043bc:	f001 feee 	bl	810619c <RCCEx_PLL3_Config>
 81043c0:	4603      	mov	r3, r0
 81043c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81043c4:	e005      	b.n	81043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043c6:	2301      	movs	r3, #1
 81043c8:	75fb      	strb	r3, [r7, #23]
      break;
 81043ca:	e002      	b.n	81043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81043cc:	bf00      	nop
 81043ce:	e000      	b.n	81043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81043d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043d2:	7dfb      	ldrb	r3, [r7, #23]
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d109      	bne.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81043d8:	4b55      	ldr	r3, [pc, #340]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043e4:	4952      	ldr	r1, [pc, #328]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81043e6:	4313      	orrs	r3, r2
 81043e8:	650b      	str	r3, [r1, #80]	; 0x50
 81043ea:	e001      	b.n	81043f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043ec:	7dfb      	ldrb	r3, [r7, #23]
 81043ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81043f8:	2b00      	cmp	r3, #0
 81043fa:	d049      	beq.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104404:	d02e      	beq.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8104406:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810440a:	d828      	bhi.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x476>
 810440c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104410:	d02a      	beq.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8104412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104416:	d822      	bhi.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104418:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810441c:	d026      	beq.n	810446c <HAL_RCCEx_PeriphCLKConfig+0x484>
 810441e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104422:	d81c      	bhi.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104428:	d010      	beq.n	810444c <HAL_RCCEx_PeriphCLKConfig+0x464>
 810442a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810442e:	d816      	bhi.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104430:	2b00      	cmp	r3, #0
 8104432:	d01d      	beq.n	8104470 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8104434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104438:	d111      	bne.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	3304      	adds	r3, #4
 810443e:	2101      	movs	r1, #1
 8104440:	4618      	mov	r0, r3
 8104442:	f001 fdf9 	bl	8106038 <RCCEx_PLL2_Config>
 8104446:	4603      	mov	r3, r0
 8104448:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810444a:	e012      	b.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	3324      	adds	r3, #36	; 0x24
 8104450:	2101      	movs	r1, #1
 8104452:	4618      	mov	r0, r3
 8104454:	f001 fea2 	bl	810619c <RCCEx_PLL3_Config>
 8104458:	4603      	mov	r3, r0
 810445a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810445c:	e009      	b.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810445e:	2301      	movs	r3, #1
 8104460:	75fb      	strb	r3, [r7, #23]
      break;
 8104462:	e006      	b.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104464:	bf00      	nop
 8104466:	e004      	b.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104468:	bf00      	nop
 810446a:	e002      	b.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810446c:	bf00      	nop
 810446e:	e000      	b.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104472:	7dfb      	ldrb	r3, [r7, #23]
 8104474:	2b00      	cmp	r3, #0
 8104476:	d109      	bne.n	810448c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104478:	4b2d      	ldr	r3, [pc, #180]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810447c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104484:	492a      	ldr	r1, [pc, #168]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104486:	4313      	orrs	r3, r2
 8104488:	650b      	str	r3, [r1, #80]	; 0x50
 810448a:	e001      	b.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810448c:	7dfb      	ldrb	r3, [r7, #23]
 810448e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	681b      	ldr	r3, [r3, #0]
 8104494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104498:	2b00      	cmp	r3, #0
 810449a:	d04d      	beq.n	8104538 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81044a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81044a6:	d02e      	beq.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81044a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81044ac:	d828      	bhi.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044b2:	d02a      	beq.n	810450a <HAL_RCCEx_PeriphCLKConfig+0x522>
 81044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044b8:	d822      	bhi.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044be:	d026      	beq.n	810450e <HAL_RCCEx_PeriphCLKConfig+0x526>
 81044c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044c4:	d81c      	bhi.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044ca:	d010      	beq.n	81044ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 81044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044d0:	d816      	bhi.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d01d      	beq.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81044d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81044da:	d111      	bne.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	3304      	adds	r3, #4
 81044e0:	2101      	movs	r1, #1
 81044e2:	4618      	mov	r0, r3
 81044e4:	f001 fda8 	bl	8106038 <RCCEx_PLL2_Config>
 81044e8:	4603      	mov	r3, r0
 81044ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81044ec:	e012      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	3324      	adds	r3, #36	; 0x24
 81044f2:	2101      	movs	r1, #1
 81044f4:	4618      	mov	r0, r3
 81044f6:	f001 fe51 	bl	810619c <RCCEx_PLL3_Config>
 81044fa:	4603      	mov	r3, r0
 81044fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81044fe:	e009      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8104500:	2301      	movs	r3, #1
 8104502:	75fb      	strb	r3, [r7, #23]
      break;
 8104504:	e006      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104506:	bf00      	nop
 8104508:	e004      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810450a:	bf00      	nop
 810450c:	e002      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810450e:	bf00      	nop
 8104510:	e000      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104514:	7dfb      	ldrb	r3, [r7, #23]
 8104516:	2b00      	cmp	r3, #0
 8104518:	d10c      	bne.n	8104534 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810451a:	4b05      	ldr	r3, [pc, #20]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810451e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104528:	4901      	ldr	r1, [pc, #4]	; (8104530 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810452a:	4313      	orrs	r3, r2
 810452c:	658b      	str	r3, [r1, #88]	; 0x58
 810452e:	e003      	b.n	8104538 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8104530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104534:	7dfb      	ldrb	r3, [r7, #23]
 8104536:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104540:	2b00      	cmp	r3, #0
 8104542:	d02f      	beq.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810454c:	d00e      	beq.n	810456c <HAL_RCCEx_PeriphCLKConfig+0x584>
 810454e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104552:	d814      	bhi.n	810457e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8104554:	2b00      	cmp	r3, #0
 8104556:	d015      	beq.n	8104584 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810455c:	d10f      	bne.n	810457e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810455e:	4bb0      	ldr	r3, [pc, #704]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104562:	4aaf      	ldr	r2, [pc, #700]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810456a:	e00c      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	3304      	adds	r3, #4
 8104570:	2101      	movs	r1, #1
 8104572:	4618      	mov	r0, r3
 8104574:	f001 fd60 	bl	8106038 <RCCEx_PLL2_Config>
 8104578:	4603      	mov	r3, r0
 810457a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810457c:	e003      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810457e:	2301      	movs	r3, #1
 8104580:	75fb      	strb	r3, [r7, #23]
      break;
 8104582:	e000      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8104584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104586:	7dfb      	ldrb	r3, [r7, #23]
 8104588:	2b00      	cmp	r3, #0
 810458a:	d109      	bne.n	81045a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810458c:	4ba4      	ldr	r3, [pc, #656]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104590:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104598:	49a1      	ldr	r1, [pc, #644]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810459a:	4313      	orrs	r3, r2
 810459c:	650b      	str	r3, [r1, #80]	; 0x50
 810459e:	e001      	b.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045a0:	7dfb      	ldrb	r3, [r7, #23]
 81045a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d032      	beq.n	8104616 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045b4:	2b03      	cmp	r3, #3
 81045b6:	d81b      	bhi.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81045b8:	a201      	add	r2, pc, #4	; (adr r2, 81045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045be:	bf00      	nop
 81045c0:	081045f7 	.word	0x081045f7
 81045c4:	081045d1 	.word	0x081045d1
 81045c8:	081045df 	.word	0x081045df
 81045cc:	081045f7 	.word	0x081045f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045d0:	4b93      	ldr	r3, [pc, #588]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045d4:	4a92      	ldr	r2, [pc, #584]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81045dc:	e00c      	b.n	81045f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	3304      	adds	r3, #4
 81045e2:	2102      	movs	r1, #2
 81045e4:	4618      	mov	r0, r3
 81045e6:	f001 fd27 	bl	8106038 <RCCEx_PLL2_Config>
 81045ea:	4603      	mov	r3, r0
 81045ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81045ee:	e003      	b.n	81045f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81045f0:	2301      	movs	r3, #1
 81045f2:	75fb      	strb	r3, [r7, #23]
      break;
 81045f4:	e000      	b.n	81045f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81045f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045f8:	7dfb      	ldrb	r3, [r7, #23]
 81045fa:	2b00      	cmp	r3, #0
 81045fc:	d109      	bne.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81045fe:	4b88      	ldr	r3, [pc, #544]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104602:	f023 0203 	bic.w	r2, r3, #3
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810460a:	4985      	ldr	r1, [pc, #532]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810460c:	4313      	orrs	r3, r2
 810460e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104610:	e001      	b.n	8104616 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104612:	7dfb      	ldrb	r3, [r7, #23]
 8104614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	681b      	ldr	r3, [r3, #0]
 810461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810461e:	2b00      	cmp	r3, #0
 8104620:	f000 8088 	beq.w	8104734 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104624:	4b7f      	ldr	r3, [pc, #508]	; (8104824 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	4a7e      	ldr	r2, [pc, #504]	; (8104824 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810462e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104630:	f7fd fc2e 	bl	8101e90 <HAL_GetTick>
 8104634:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104636:	e009      	b.n	810464c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104638:	f7fd fc2a 	bl	8101e90 <HAL_GetTick>
 810463c:	4602      	mov	r2, r0
 810463e:	693b      	ldr	r3, [r7, #16]
 8104640:	1ad3      	subs	r3, r2, r3
 8104642:	2b64      	cmp	r3, #100	; 0x64
 8104644:	d902      	bls.n	810464c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104646:	2303      	movs	r3, #3
 8104648:	75fb      	strb	r3, [r7, #23]
        break;
 810464a:	e005      	b.n	8104658 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810464c:	4b75      	ldr	r3, [pc, #468]	; (8104824 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104654:	2b00      	cmp	r3, #0
 8104656:	d0ef      	beq.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104658:	7dfb      	ldrb	r3, [r7, #23]
 810465a:	2b00      	cmp	r3, #0
 810465c:	d168      	bne.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810465e:	4b70      	ldr	r3, [pc, #448]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104668:	4053      	eors	r3, r2
 810466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810466e:	2b00      	cmp	r3, #0
 8104670:	d013      	beq.n	810469a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104672:	4b6b      	ldr	r3, [pc, #428]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810467a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810467c:	4b68      	ldr	r3, [pc, #416]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104680:	4a67      	ldr	r2, [pc, #412]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104686:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104688:	4b65      	ldr	r3, [pc, #404]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810468c:	4a64      	ldr	r2, [pc, #400]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104692:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104694:	4a62      	ldr	r2, [pc, #392]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104696:	68fb      	ldr	r3, [r7, #12]
 8104698:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81046a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81046a4:	d115      	bne.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81046a6:	f7fd fbf3 	bl	8101e90 <HAL_GetTick>
 81046aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81046ac:	e00b      	b.n	81046c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81046ae:	f7fd fbef 	bl	8101e90 <HAL_GetTick>
 81046b2:	4602      	mov	r2, r0
 81046b4:	693b      	ldr	r3, [r7, #16]
 81046b6:	1ad3      	subs	r3, r2, r3
 81046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 81046bc:	4293      	cmp	r3, r2
 81046be:	d902      	bls.n	81046c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81046c0:	2303      	movs	r3, #3
 81046c2:	75fb      	strb	r3, [r7, #23]
            break;
 81046c4:	e005      	b.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81046c6:	4b56      	ldr	r3, [pc, #344]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81046ca:	f003 0302 	and.w	r3, r3, #2
 81046ce:	2b00      	cmp	r3, #0
 81046d0:	d0ed      	beq.n	81046ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81046d2:	7dfb      	ldrb	r3, [r7, #23]
 81046d4:	2b00      	cmp	r3, #0
 81046d6:	d128      	bne.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81046e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81046e6:	d10f      	bne.n	8104708 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81046e8:	4b4d      	ldr	r3, [pc, #308]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046ea:	691b      	ldr	r3, [r3, #16]
 81046ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81046f6:	091b      	lsrs	r3, r3, #4
 81046f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81046fc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104700:	4947      	ldr	r1, [pc, #284]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104702:	4313      	orrs	r3, r2
 8104704:	610b      	str	r3, [r1, #16]
 8104706:	e005      	b.n	8104714 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104708:	4b45      	ldr	r3, [pc, #276]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810470a:	691b      	ldr	r3, [r3, #16]
 810470c:	4a44      	ldr	r2, [pc, #272]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810470e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104712:	6113      	str	r3, [r2, #16]
 8104714:	4b42      	ldr	r3, [pc, #264]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104722:	493f      	ldr	r1, [pc, #252]	; (8104820 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104724:	4313      	orrs	r3, r2
 8104726:	670b      	str	r3, [r1, #112]	; 0x70
 8104728:	e004      	b.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810472a:	7dfb      	ldrb	r3, [r7, #23]
 810472c:	75bb      	strb	r3, [r7, #22]
 810472e:	e001      	b.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104730:	7dfb      	ldrb	r3, [r7, #23]
 8104732:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	681b      	ldr	r3, [r3, #0]
 8104738:	f003 0301 	and.w	r3, r3, #1
 810473c:	2b00      	cmp	r3, #0
 810473e:	f000 8083 	beq.w	8104848 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104746:	2b28      	cmp	r3, #40	; 0x28
 8104748:	d866      	bhi.n	8104818 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810474a:	a201      	add	r2, pc, #4	; (adr r2, 8104750 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104750:	08104829 	.word	0x08104829
 8104754:	08104819 	.word	0x08104819
 8104758:	08104819 	.word	0x08104819
 810475c:	08104819 	.word	0x08104819
 8104760:	08104819 	.word	0x08104819
 8104764:	08104819 	.word	0x08104819
 8104768:	08104819 	.word	0x08104819
 810476c:	08104819 	.word	0x08104819
 8104770:	081047f5 	.word	0x081047f5
 8104774:	08104819 	.word	0x08104819
 8104778:	08104819 	.word	0x08104819
 810477c:	08104819 	.word	0x08104819
 8104780:	08104819 	.word	0x08104819
 8104784:	08104819 	.word	0x08104819
 8104788:	08104819 	.word	0x08104819
 810478c:	08104819 	.word	0x08104819
 8104790:	08104807 	.word	0x08104807
 8104794:	08104819 	.word	0x08104819
 8104798:	08104819 	.word	0x08104819
 810479c:	08104819 	.word	0x08104819
 81047a0:	08104819 	.word	0x08104819
 81047a4:	08104819 	.word	0x08104819
 81047a8:	08104819 	.word	0x08104819
 81047ac:	08104819 	.word	0x08104819
 81047b0:	08104829 	.word	0x08104829
 81047b4:	08104819 	.word	0x08104819
 81047b8:	08104819 	.word	0x08104819
 81047bc:	08104819 	.word	0x08104819
 81047c0:	08104819 	.word	0x08104819
 81047c4:	08104819 	.word	0x08104819
 81047c8:	08104819 	.word	0x08104819
 81047cc:	08104819 	.word	0x08104819
 81047d0:	08104829 	.word	0x08104829
 81047d4:	08104819 	.word	0x08104819
 81047d8:	08104819 	.word	0x08104819
 81047dc:	08104819 	.word	0x08104819
 81047e0:	08104819 	.word	0x08104819
 81047e4:	08104819 	.word	0x08104819
 81047e8:	08104819 	.word	0x08104819
 81047ec:	08104819 	.word	0x08104819
 81047f0:	08104829 	.word	0x08104829
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	3304      	adds	r3, #4
 81047f8:	2101      	movs	r1, #1
 81047fa:	4618      	mov	r0, r3
 81047fc:	f001 fc1c 	bl	8106038 <RCCEx_PLL2_Config>
 8104800:	4603      	mov	r3, r0
 8104802:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104804:	e011      	b.n	810482a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	3324      	adds	r3, #36	; 0x24
 810480a:	2101      	movs	r1, #1
 810480c:	4618      	mov	r0, r3
 810480e:	f001 fcc5 	bl	810619c <RCCEx_PLL3_Config>
 8104812:	4603      	mov	r3, r0
 8104814:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104816:	e008      	b.n	810482a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104818:	2301      	movs	r3, #1
 810481a:	75fb      	strb	r3, [r7, #23]
      break;
 810481c:	e005      	b.n	810482a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810481e:	bf00      	nop
 8104820:	58024400 	.word	0x58024400
 8104824:	58024800 	.word	0x58024800
      break;
 8104828:	bf00      	nop
    }

    if(ret == HAL_OK)
 810482a:	7dfb      	ldrb	r3, [r7, #23]
 810482c:	2b00      	cmp	r3, #0
 810482e:	d109      	bne.n	8104844 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104830:	4b96      	ldr	r3, [pc, #600]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104834:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810483c:	4993      	ldr	r1, [pc, #588]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810483e:	4313      	orrs	r3, r2
 8104840:	654b      	str	r3, [r1, #84]	; 0x54
 8104842:	e001      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104844:	7dfb      	ldrb	r3, [r7, #23]
 8104846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	681b      	ldr	r3, [r3, #0]
 810484c:	f003 0302 	and.w	r3, r3, #2
 8104850:	2b00      	cmp	r3, #0
 8104852:	d038      	beq.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104858:	2b05      	cmp	r3, #5
 810485a:	d821      	bhi.n	81048a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810485c:	a201      	add	r2, pc, #4	; (adr r2, 8104864 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104862:	bf00      	nop
 8104864:	081048a7 	.word	0x081048a7
 8104868:	0810487d 	.word	0x0810487d
 810486c:	0810488f 	.word	0x0810488f
 8104870:	081048a7 	.word	0x081048a7
 8104874:	081048a7 	.word	0x081048a7
 8104878:	081048a7 	.word	0x081048a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810487c:	687b      	ldr	r3, [r7, #4]
 810487e:	3304      	adds	r3, #4
 8104880:	2101      	movs	r1, #1
 8104882:	4618      	mov	r0, r3
 8104884:	f001 fbd8 	bl	8106038 <RCCEx_PLL2_Config>
 8104888:	4603      	mov	r3, r0
 810488a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810488c:	e00c      	b.n	81048a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	3324      	adds	r3, #36	; 0x24
 8104892:	2101      	movs	r1, #1
 8104894:	4618      	mov	r0, r3
 8104896:	f001 fc81 	bl	810619c <RCCEx_PLL3_Config>
 810489a:	4603      	mov	r3, r0
 810489c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810489e:	e003      	b.n	81048a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81048a0:	2301      	movs	r3, #1
 81048a2:	75fb      	strb	r3, [r7, #23]
      break;
 81048a4:	e000      	b.n	81048a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81048a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81048a8:	7dfb      	ldrb	r3, [r7, #23]
 81048aa:	2b00      	cmp	r3, #0
 81048ac:	d109      	bne.n	81048c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81048ae:	4b77      	ldr	r3, [pc, #476]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048b2:	f023 0207 	bic.w	r2, r3, #7
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81048ba:	4974      	ldr	r1, [pc, #464]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81048bc:	4313      	orrs	r3, r2
 81048be:	654b      	str	r3, [r1, #84]	; 0x54
 81048c0:	e001      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048c2:	7dfb      	ldrb	r3, [r7, #23]
 81048c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	681b      	ldr	r3, [r3, #0]
 81048ca:	f003 0304 	and.w	r3, r3, #4
 81048ce:	2b00      	cmp	r3, #0
 81048d0:	d03a      	beq.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81048d8:	2b05      	cmp	r3, #5
 81048da:	d821      	bhi.n	8104920 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81048dc:	a201      	add	r2, pc, #4	; (adr r2, 81048e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048e2:	bf00      	nop
 81048e4:	08104927 	.word	0x08104927
 81048e8:	081048fd 	.word	0x081048fd
 81048ec:	0810490f 	.word	0x0810490f
 81048f0:	08104927 	.word	0x08104927
 81048f4:	08104927 	.word	0x08104927
 81048f8:	08104927 	.word	0x08104927
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	3304      	adds	r3, #4
 8104900:	2101      	movs	r1, #1
 8104902:	4618      	mov	r0, r3
 8104904:	f001 fb98 	bl	8106038 <RCCEx_PLL2_Config>
 8104908:	4603      	mov	r3, r0
 810490a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810490c:	e00c      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	3324      	adds	r3, #36	; 0x24
 8104912:	2101      	movs	r1, #1
 8104914:	4618      	mov	r0, r3
 8104916:	f001 fc41 	bl	810619c <RCCEx_PLL3_Config>
 810491a:	4603      	mov	r3, r0
 810491c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810491e:	e003      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104920:	2301      	movs	r3, #1
 8104922:	75fb      	strb	r3, [r7, #23]
      break;
 8104924:	e000      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104928:	7dfb      	ldrb	r3, [r7, #23]
 810492a:	2b00      	cmp	r3, #0
 810492c:	d10a      	bne.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810492e:	4b57      	ldr	r3, [pc, #348]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104932:	f023 0207 	bic.w	r2, r3, #7
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810493c:	4953      	ldr	r1, [pc, #332]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810493e:	4313      	orrs	r3, r2
 8104940:	658b      	str	r3, [r1, #88]	; 0x58
 8104942:	e001      	b.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104944:	7dfb      	ldrb	r3, [r7, #23]
 8104946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	f003 0320 	and.w	r3, r3, #32
 8104950:	2b00      	cmp	r3, #0
 8104952:	d04b      	beq.n	81049ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810495a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810495e:	d02e      	beq.n	81049be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104964:	d828      	bhi.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810496a:	d02a      	beq.n	81049c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104970:	d822      	bhi.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104976:	d026      	beq.n	81049c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810497c:	d81c      	bhi.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810497e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104982:	d010      	beq.n	81049a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8104984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104988:	d816      	bhi.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810498a:	2b00      	cmp	r3, #0
 810498c:	d01d      	beq.n	81049ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810498e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104992:	d111      	bne.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	3304      	adds	r3, #4
 8104998:	2100      	movs	r1, #0
 810499a:	4618      	mov	r0, r3
 810499c:	f001 fb4c 	bl	8106038 <RCCEx_PLL2_Config>
 81049a0:	4603      	mov	r3, r0
 81049a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81049a4:	e012      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	3324      	adds	r3, #36	; 0x24
 81049aa:	2102      	movs	r1, #2
 81049ac:	4618      	mov	r0, r3
 81049ae:	f001 fbf5 	bl	810619c <RCCEx_PLL3_Config>
 81049b2:	4603      	mov	r3, r0
 81049b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81049b6:	e009      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81049b8:	2301      	movs	r3, #1
 81049ba:	75fb      	strb	r3, [r7, #23]
      break;
 81049bc:	e006      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049be:	bf00      	nop
 81049c0:	e004      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049c2:	bf00      	nop
 81049c4:	e002      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049c6:	bf00      	nop
 81049c8:	e000      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049cc:	7dfb      	ldrb	r3, [r7, #23]
 81049ce:	2b00      	cmp	r3, #0
 81049d0:	d10a      	bne.n	81049e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81049d2:	4b2e      	ldr	r3, [pc, #184]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81049e0:	492a      	ldr	r1, [pc, #168]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81049e2:	4313      	orrs	r3, r2
 81049e4:	654b      	str	r3, [r1, #84]	; 0x54
 81049e6:	e001      	b.n	81049ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049e8:	7dfb      	ldrb	r3, [r7, #23]
 81049ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81049f4:	2b00      	cmp	r3, #0
 81049f6:	d04d      	beq.n	8104a94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81049fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104a02:	d02e      	beq.n	8104a62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104a04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104a08:	d828      	bhi.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104a0e:	d02a      	beq.n	8104a66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104a14:	d822      	bhi.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104a1a:	d026      	beq.n	8104a6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104a20:	d81c      	bhi.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104a26:	d010      	beq.n	8104a4a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104a2c:	d816      	bhi.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a2e:	2b00      	cmp	r3, #0
 8104a30:	d01d      	beq.n	8104a6e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8104a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104a36:	d111      	bne.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	3304      	adds	r3, #4
 8104a3c:	2100      	movs	r1, #0
 8104a3e:	4618      	mov	r0, r3
 8104a40:	f001 fafa 	bl	8106038 <RCCEx_PLL2_Config>
 8104a44:	4603      	mov	r3, r0
 8104a46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104a48:	e012      	b.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104a4a:	687b      	ldr	r3, [r7, #4]
 8104a4c:	3324      	adds	r3, #36	; 0x24
 8104a4e:	2102      	movs	r1, #2
 8104a50:	4618      	mov	r0, r3
 8104a52:	f001 fba3 	bl	810619c <RCCEx_PLL3_Config>
 8104a56:	4603      	mov	r3, r0
 8104a58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104a5a:	e009      	b.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104a5c:	2301      	movs	r3, #1
 8104a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8104a60:	e006      	b.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a62:	bf00      	nop
 8104a64:	e004      	b.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a66:	bf00      	nop
 8104a68:	e002      	b.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a6a:	bf00      	nop
 8104a6c:	e000      	b.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104a70:	7dfb      	ldrb	r3, [r7, #23]
 8104a72:	2b00      	cmp	r3, #0
 8104a74:	d10c      	bne.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104a76:	4b05      	ldr	r3, [pc, #20]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104a84:	4901      	ldr	r1, [pc, #4]	; (8104a8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104a86:	4313      	orrs	r3, r2
 8104a88:	658b      	str	r3, [r1, #88]	; 0x58
 8104a8a:	e003      	b.n	8104a94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a90:	7dfb      	ldrb	r3, [r7, #23]
 8104a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104a94:	687b      	ldr	r3, [r7, #4]
 8104a96:	681b      	ldr	r3, [r3, #0]
 8104a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104a9c:	2b00      	cmp	r3, #0
 8104a9e:	d04b      	beq.n	8104b38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104aa6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104aaa:	d02e      	beq.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104aac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104ab0:	d828      	bhi.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104ab6:	d02a      	beq.n	8104b0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104abc:	d822      	bhi.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104abe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104ac2:	d026      	beq.n	8104b12 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8104ac4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104ac8:	d81c      	bhi.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104ace:	d010      	beq.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8104ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104ad4:	d816      	bhi.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d01d      	beq.n	8104b16 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104ade:	d111      	bne.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	3304      	adds	r3, #4
 8104ae4:	2100      	movs	r1, #0
 8104ae6:	4618      	mov	r0, r3
 8104ae8:	f001 faa6 	bl	8106038 <RCCEx_PLL2_Config>
 8104aec:	4603      	mov	r3, r0
 8104aee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104af0:	e012      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	3324      	adds	r3, #36	; 0x24
 8104af6:	2102      	movs	r1, #2
 8104af8:	4618      	mov	r0, r3
 8104afa:	f001 fb4f 	bl	810619c <RCCEx_PLL3_Config>
 8104afe:	4603      	mov	r3, r0
 8104b00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104b02:	e009      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104b04:	2301      	movs	r3, #1
 8104b06:	75fb      	strb	r3, [r7, #23]
      break;
 8104b08:	e006      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104b0a:	bf00      	nop
 8104b0c:	e004      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104b0e:	bf00      	nop
 8104b10:	e002      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104b12:	bf00      	nop
 8104b14:	e000      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b18:	7dfb      	ldrb	r3, [r7, #23]
 8104b1a:	2b00      	cmp	r3, #0
 8104b1c:	d10a      	bne.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104b1e:	4b9d      	ldr	r3, [pc, #628]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104b2c:	4999      	ldr	r1, [pc, #612]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b2e:	4313      	orrs	r3, r2
 8104b30:	658b      	str	r3, [r1, #88]	; 0x58
 8104b32:	e001      	b.n	8104b38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b34:	7dfb      	ldrb	r3, [r7, #23]
 8104b36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	f003 0308 	and.w	r3, r3, #8
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d01a      	beq.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104b4e:	d10a      	bne.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	3324      	adds	r3, #36	; 0x24
 8104b54:	2102      	movs	r1, #2
 8104b56:	4618      	mov	r0, r3
 8104b58:	f001 fb20 	bl	810619c <RCCEx_PLL3_Config>
 8104b5c:	4603      	mov	r3, r0
 8104b5e:	2b00      	cmp	r3, #0
 8104b60:	d001      	beq.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8104b62:	2301      	movs	r3, #1
 8104b64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104b66:	4b8b      	ldr	r3, [pc, #556]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104b74:	4987      	ldr	r1, [pc, #540]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b76:	4313      	orrs	r3, r2
 8104b78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	f003 0310 	and.w	r3, r3, #16
 8104b82:	2b00      	cmp	r3, #0
 8104b84:	d01a      	beq.n	8104bbc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b90:	d10a      	bne.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	3324      	adds	r3, #36	; 0x24
 8104b96:	2102      	movs	r1, #2
 8104b98:	4618      	mov	r0, r3
 8104b9a:	f001 faff 	bl	810619c <RCCEx_PLL3_Config>
 8104b9e:	4603      	mov	r3, r0
 8104ba0:	2b00      	cmp	r3, #0
 8104ba2:	d001      	beq.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8104ba4:	2301      	movs	r3, #1
 8104ba6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104ba8:	4b7a      	ldr	r3, [pc, #488]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104bb6:	4977      	ldr	r1, [pc, #476]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104bb8:	4313      	orrs	r3, r2
 8104bba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104bc4:	2b00      	cmp	r3, #0
 8104bc6:	d034      	beq.n	8104c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104bd2:	d01d      	beq.n	8104c10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8104bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104bd8:	d817      	bhi.n	8104c0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104bda:	2b00      	cmp	r3, #0
 8104bdc:	d003      	beq.n	8104be6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8104bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104be2:	d009      	beq.n	8104bf8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104be4:	e011      	b.n	8104c0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	3304      	adds	r3, #4
 8104bea:	2100      	movs	r1, #0
 8104bec:	4618      	mov	r0, r3
 8104bee:	f001 fa23 	bl	8106038 <RCCEx_PLL2_Config>
 8104bf2:	4603      	mov	r3, r0
 8104bf4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104bf6:	e00c      	b.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	3324      	adds	r3, #36	; 0x24
 8104bfc:	2102      	movs	r1, #2
 8104bfe:	4618      	mov	r0, r3
 8104c00:	f001 facc 	bl	810619c <RCCEx_PLL3_Config>
 8104c04:	4603      	mov	r3, r0
 8104c06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104c08:	e003      	b.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c0a:	2301      	movs	r3, #1
 8104c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8104c0e:	e000      	b.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c12:	7dfb      	ldrb	r3, [r7, #23]
 8104c14:	2b00      	cmp	r3, #0
 8104c16:	d10a      	bne.n	8104c2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104c18:	4b5e      	ldr	r3, [pc, #376]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104c26:	495b      	ldr	r1, [pc, #364]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c28:	4313      	orrs	r3, r2
 8104c2a:	658b      	str	r3, [r1, #88]	; 0x58
 8104c2c:	e001      	b.n	8104c32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c2e:	7dfb      	ldrb	r3, [r7, #23]
 8104c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104c3a:	2b00      	cmp	r3, #0
 8104c3c:	d033      	beq.n	8104ca6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104c48:	d01c      	beq.n	8104c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104c4e:	d816      	bhi.n	8104c7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104c54:	d003      	beq.n	8104c5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8104c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c5a:	d007      	beq.n	8104c6c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104c5c:	e00f      	b.n	8104c7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c5e:	4b4d      	ldr	r3, [pc, #308]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c62:	4a4c      	ldr	r2, [pc, #304]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104c6a:	e00c      	b.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	3324      	adds	r3, #36	; 0x24
 8104c70:	2101      	movs	r1, #1
 8104c72:	4618      	mov	r0, r3
 8104c74:	f001 fa92 	bl	810619c <RCCEx_PLL3_Config>
 8104c78:	4603      	mov	r3, r0
 8104c7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104c7c:	e003      	b.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c7e:	2301      	movs	r3, #1
 8104c80:	75fb      	strb	r3, [r7, #23]
      break;
 8104c82:	e000      	b.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8104c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c86:	7dfb      	ldrb	r3, [r7, #23]
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d10a      	bne.n	8104ca2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104c8c:	4b41      	ldr	r3, [pc, #260]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c9a:	493e      	ldr	r1, [pc, #248]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c9c:	4313      	orrs	r3, r2
 8104c9e:	654b      	str	r3, [r1, #84]	; 0x54
 8104ca0:	e001      	b.n	8104ca6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ca2:	7dfb      	ldrb	r3, [r7, #23]
 8104ca4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104cae:	2b00      	cmp	r3, #0
 8104cb0:	d029      	beq.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cb6:	2b00      	cmp	r3, #0
 8104cb8:	d003      	beq.n	8104cc2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8104cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104cbe:	d007      	beq.n	8104cd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8104cc0:	e00f      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cc2:	4b34      	ldr	r3, [pc, #208]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104cc6:	4a33      	ldr	r2, [pc, #204]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104cce:	e00b      	b.n	8104ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	3304      	adds	r3, #4
 8104cd4:	2102      	movs	r1, #2
 8104cd6:	4618      	mov	r0, r3
 8104cd8:	f001 f9ae 	bl	8106038 <RCCEx_PLL2_Config>
 8104cdc:	4603      	mov	r3, r0
 8104cde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104ce0:	e002      	b.n	8104ce8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8104ce2:	2301      	movs	r3, #1
 8104ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8104ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104ce8:	7dfb      	ldrb	r3, [r7, #23]
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d109      	bne.n	8104d02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104cee:	4b29      	ldr	r3, [pc, #164]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cfa:	4926      	ldr	r1, [pc, #152]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cfc:	4313      	orrs	r3, r2
 8104cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104d00:	e001      	b.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d02:	7dfb      	ldrb	r3, [r7, #23]
 8104d04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104d0e:	2b00      	cmp	r3, #0
 8104d10:	d00a      	beq.n	8104d28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104d12:	687b      	ldr	r3, [r7, #4]
 8104d14:	3324      	adds	r3, #36	; 0x24
 8104d16:	2102      	movs	r1, #2
 8104d18:	4618      	mov	r0, r3
 8104d1a:	f001 fa3f 	bl	810619c <RCCEx_PLL3_Config>
 8104d1e:	4603      	mov	r3, r0
 8104d20:	2b00      	cmp	r3, #0
 8104d22:	d001      	beq.n	8104d28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104d24:	2301      	movs	r3, #1
 8104d26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104d30:	2b00      	cmp	r3, #0
 8104d32:	d033      	beq.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104d3c:	d017      	beq.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104d42:	d811      	bhi.n	8104d68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104d48:	d013      	beq.n	8104d72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104d4e:	d80b      	bhi.n	8104d68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d010      	beq.n	8104d76 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8104d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d58:	d106      	bne.n	8104d68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d5a:	4b0e      	ldr	r3, [pc, #56]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d5e:	4a0d      	ldr	r2, [pc, #52]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104d66:	e007      	b.n	8104d78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d68:	2301      	movs	r3, #1
 8104d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8104d6c:	e004      	b.n	8104d78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104d6e:	bf00      	nop
 8104d70:	e002      	b.n	8104d78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104d72:	bf00      	nop
 8104d74:	e000      	b.n	8104d78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d78:	7dfb      	ldrb	r3, [r7, #23]
 8104d7a:	2b00      	cmp	r3, #0
 8104d7c:	d10c      	bne.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104d7e:	4b05      	ldr	r3, [pc, #20]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d8a:	4902      	ldr	r1, [pc, #8]	; (8104d94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d8c:	4313      	orrs	r3, r2
 8104d8e:	654b      	str	r3, [r1, #84]	; 0x54
 8104d90:	e004      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8104d92:	bf00      	nop
 8104d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d98:	7dfb      	ldrb	r3, [r7, #23]
 8104d9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	681b      	ldr	r3, [r3, #0]
 8104da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d008      	beq.n	8104dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104da8:	4b31      	ldr	r3, [pc, #196]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104db4:	492e      	ldr	r1, [pc, #184]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104db6:	4313      	orrs	r3, r2
 8104db8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104dc2:	2b00      	cmp	r3, #0
 8104dc4:	d009      	beq.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104dc6:	4b2a      	ldr	r3, [pc, #168]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104dc8:	691b      	ldr	r3, [r3, #16]
 8104dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104dd4:	4926      	ldr	r1, [pc, #152]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104dd6:	4313      	orrs	r3, r2
 8104dd8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104de2:	2b00      	cmp	r3, #0
 8104de4:	d008      	beq.n	8104df8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104de6:	4b22      	ldr	r3, [pc, #136]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104dea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104df2:	491f      	ldr	r1, [pc, #124]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104df4:	4313      	orrs	r3, r2
 8104df6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d00d      	beq.n	8104e20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104e04:	4b1a      	ldr	r3, [pc, #104]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e06:	691b      	ldr	r3, [r3, #16]
 8104e08:	4a19      	ldr	r2, [pc, #100]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104e0e:	6113      	str	r3, [r2, #16]
 8104e10:	4b17      	ldr	r3, [pc, #92]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e12:	691a      	ldr	r2, [r3, #16]
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104e1a:	4915      	ldr	r1, [pc, #84]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e1c:	4313      	orrs	r3, r2
 8104e1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	da08      	bge.n	8104e3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104e28:	4b11      	ldr	r3, [pc, #68]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e34:	490e      	ldr	r1, [pc, #56]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e36:	4313      	orrs	r3, r2
 8104e38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d009      	beq.n	8104e5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104e46:	4b0a      	ldr	r3, [pc, #40]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104e54:	4906      	ldr	r1, [pc, #24]	; (8104e70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e56:	4313      	orrs	r3, r2
 8104e58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104e5a:	7dbb      	ldrb	r3, [r7, #22]
 8104e5c:	2b00      	cmp	r3, #0
 8104e5e:	d101      	bne.n	8104e64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104e60:	2300      	movs	r3, #0
 8104e62:	e000      	b.n	8104e66 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8104e64:	2301      	movs	r3, #1
}
 8104e66:	4618      	mov	r0, r3
 8104e68:	3718      	adds	r7, #24
 8104e6a:	46bd      	mov	sp, r7
 8104e6c:	bd80      	pop	{r7, pc}
 8104e6e:	bf00      	nop
 8104e70:	58024400 	.word	0x58024400

08104e74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8104e74:	b580      	push	{r7, lr}
 8104e76:	b090      	sub	sp, #64	; 0x40
 8104e78:	af00      	add	r7, sp, #0
 8104e7a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e82:	f040 8095 	bne.w	8104fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8104e86:	4b97      	ldr	r3, [pc, #604]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e8a:	f003 0307 	and.w	r3, r3, #7
 8104e8e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104e92:	2b04      	cmp	r3, #4
 8104e94:	f200 8088 	bhi.w	8104fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8104e98:	a201      	add	r2, pc, #4	; (adr r2, 8104ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8104e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e9e:	bf00      	nop
 8104ea0:	08104eb5 	.word	0x08104eb5
 8104ea4:	08104edd 	.word	0x08104edd
 8104ea8:	08104f05 	.word	0x08104f05
 8104eac:	08104fa1 	.word	0x08104fa1
 8104eb0:	08104f2d 	.word	0x08104f2d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104eb4:	4b8b      	ldr	r3, [pc, #556]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104ec0:	d108      	bne.n	8104ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104ec6:	4618      	mov	r0, r3
 8104ec8:	f000 ff64 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104ed0:	f000 bc94 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104ed4:	2300      	movs	r3, #0
 8104ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ed8:	f000 bc90 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104edc:	4b81      	ldr	r3, [pc, #516]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104ee8:	d108      	bne.n	8104efc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104eea:	f107 0318 	add.w	r3, r7, #24
 8104eee:	4618      	mov	r0, r3
 8104ef0:	f000 fca8 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104ef4:	69bb      	ldr	r3, [r7, #24]
 8104ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104ef8:	f000 bc80 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104efc:	2300      	movs	r3, #0
 8104efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f00:	f000 bc7c 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104f04:	4b77      	ldr	r3, [pc, #476]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f10:	d108      	bne.n	8104f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104f12:	f107 030c 	add.w	r3, r7, #12
 8104f16:	4618      	mov	r0, r3
 8104f18:	f000 fde8 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104f20:	f000 bc6c 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104f24:	2300      	movs	r3, #0
 8104f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f28:	f000 bc68 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104f2c:	4b6d      	ldr	r3, [pc, #436]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104f34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104f36:	4b6b      	ldr	r3, [pc, #428]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	f003 0304 	and.w	r3, r3, #4
 8104f3e:	2b04      	cmp	r3, #4
 8104f40:	d10c      	bne.n	8104f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8104f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f44:	2b00      	cmp	r3, #0
 8104f46:	d109      	bne.n	8104f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104f48:	4b66      	ldr	r3, [pc, #408]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	08db      	lsrs	r3, r3, #3
 8104f4e:	f003 0303 	and.w	r3, r3, #3
 8104f52:	4a65      	ldr	r2, [pc, #404]	; (81050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8104f54:	fa22 f303 	lsr.w	r3, r2, r3
 8104f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f5a:	e01f      	b.n	8104f9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104f5c:	4b61      	ldr	r3, [pc, #388]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f68:	d106      	bne.n	8104f78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8104f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f70:	d102      	bne.n	8104f78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104f72:	4b5e      	ldr	r3, [pc, #376]	; (81050ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8104f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f76:	e011      	b.n	8104f9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104f78:	4b5a      	ldr	r3, [pc, #360]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f84:	d106      	bne.n	8104f94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8104f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f8c:	d102      	bne.n	8104f94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104f8e:	4b58      	ldr	r3, [pc, #352]	; (81050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8104f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f92:	e003      	b.n	8104f9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104f94:	2300      	movs	r3, #0
 8104f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104f98:	f000 bc30 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104f9c:	f000 bc2e 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104fa0:	4b54      	ldr	r3, [pc, #336]	; (81050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8104fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fa4:	f000 bc2a 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8104fa8:	2300      	movs	r3, #0
 8104faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fac:	f000 bc26 	b.w	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104fb6:	f040 809f 	bne.w	81050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8104fba:	4b4a      	ldr	r3, [pc, #296]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104fbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104fc2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fca:	d04d      	beq.n	8105068 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8104fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fd2:	f200 8084 	bhi.w	81050de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fd8:	2bc0      	cmp	r3, #192	; 0xc0
 8104fda:	d07d      	beq.n	81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8104fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fde:	2bc0      	cmp	r3, #192	; 0xc0
 8104fe0:	d87d      	bhi.n	81050de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fe4:	2b80      	cmp	r3, #128	; 0x80
 8104fe6:	d02d      	beq.n	8105044 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8104fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fea:	2b80      	cmp	r3, #128	; 0x80
 8104fec:	d877      	bhi.n	81050de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ff0:	2b00      	cmp	r3, #0
 8104ff2:	d003      	beq.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8104ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ff6:	2b40      	cmp	r3, #64	; 0x40
 8104ff8:	d012      	beq.n	8105020 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8104ffa:	e070      	b.n	81050de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ffc:	4b39      	ldr	r3, [pc, #228]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105008:	d107      	bne.n	810501a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810500a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810500e:	4618      	mov	r0, r3
 8105010:	f000 fec0 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105016:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105018:	e3f0      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810501a:	2300      	movs	r3, #0
 810501c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810501e:	e3ed      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105020:	4b30      	ldr	r3, [pc, #192]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810502c:	d107      	bne.n	810503e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810502e:	f107 0318 	add.w	r3, r7, #24
 8105032:	4618      	mov	r0, r3
 8105034:	f000 fc06 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105038:	69bb      	ldr	r3, [r7, #24]
 810503a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810503c:	e3de      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810503e:	2300      	movs	r3, #0
 8105040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105042:	e3db      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105044:	4b27      	ldr	r3, [pc, #156]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810504c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105050:	d107      	bne.n	8105062 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105052:	f107 030c 	add.w	r3, r7, #12
 8105056:	4618      	mov	r0, r3
 8105058:	f000 fd48 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810505c:	68fb      	ldr	r3, [r7, #12]
 810505e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105060:	e3cc      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105062:	2300      	movs	r3, #0
 8105064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105066:	e3c9      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105068:	4b1e      	ldr	r3, [pc, #120]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810506a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810506c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105070:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105072:	4b1c      	ldr	r3, [pc, #112]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	f003 0304 	and.w	r3, r3, #4
 810507a:	2b04      	cmp	r3, #4
 810507c:	d10c      	bne.n	8105098 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105080:	2b00      	cmp	r3, #0
 8105082:	d109      	bne.n	8105098 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105084:	4b17      	ldr	r3, [pc, #92]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	08db      	lsrs	r3, r3, #3
 810508a:	f003 0303 	and.w	r3, r3, #3
 810508e:	4a16      	ldr	r2, [pc, #88]	; (81050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8105090:	fa22 f303 	lsr.w	r3, r2, r3
 8105094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105096:	e01e      	b.n	81050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105098:	4b12      	ldr	r3, [pc, #72]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81050a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050a4:	d106      	bne.n	81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 81050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81050ac:	d102      	bne.n	81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81050ae:	4b0f      	ldr	r3, [pc, #60]	; (81050ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 81050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81050b2:	e010      	b.n	81050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81050b4:	4b0b      	ldr	r3, [pc, #44]	; (81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81050bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81050c0:	d106      	bne.n	81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 81050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050c8:	d102      	bne.n	81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81050ca:	4b09      	ldr	r3, [pc, #36]	; (81050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 81050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81050ce:	e002      	b.n	81050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81050d0:	2300      	movs	r3, #0
 81050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81050d4:	e392      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81050d6:	e391      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81050d8:	4b06      	ldr	r3, [pc, #24]	; (81050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 81050da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050dc:	e38e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81050de:	2300      	movs	r3, #0
 81050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050e2:	e38b      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81050e4:	58024400 	.word	0x58024400
 81050e8:	03d09000 	.word	0x03d09000
 81050ec:	003d0900 	.word	0x003d0900
 81050f0:	007a1200 	.word	0x007a1200
 81050f4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81050fe:	f040 809c 	bne.w	810523a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8105102:	4b9d      	ldr	r3, [pc, #628]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105106:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810510a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810510e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105112:	d054      	beq.n	81051be <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8105114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810511a:	f200 808b 	bhi.w	8105234 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105120:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105124:	f000 8083 	beq.w	810522e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8105128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810512a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810512e:	f200 8081 	bhi.w	8105234 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105138:	d02f      	beq.n	810519a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 810513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810513c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105140:	d878      	bhi.n	8105234 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105144:	2b00      	cmp	r3, #0
 8105146:	d004      	beq.n	8105152 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8105148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810514a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810514e:	d012      	beq.n	8105176 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8105150:	e070      	b.n	8105234 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105152:	4b89      	ldr	r3, [pc, #548]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105154:	681b      	ldr	r3, [r3, #0]
 8105156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810515a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810515e:	d107      	bne.n	8105170 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105164:	4618      	mov	r0, r3
 8105166:	f000 fe15 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810516c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810516e:	e345      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105170:	2300      	movs	r3, #0
 8105172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105174:	e342      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105176:	4b80      	ldr	r3, [pc, #512]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105178:	681b      	ldr	r3, [r3, #0]
 810517a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810517e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105182:	d107      	bne.n	8105194 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105184:	f107 0318 	add.w	r3, r7, #24
 8105188:	4618      	mov	r0, r3
 810518a:	f000 fb5b 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810518e:	69bb      	ldr	r3, [r7, #24]
 8105190:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105192:	e333      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105194:	2300      	movs	r3, #0
 8105196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105198:	e330      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810519a:	4b77      	ldr	r3, [pc, #476]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81051a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81051a6:	d107      	bne.n	81051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81051a8:	f107 030c 	add.w	r3, r7, #12
 81051ac:	4618      	mov	r0, r3
 81051ae:	f000 fc9d 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81051b6:	e321      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81051b8:	2300      	movs	r3, #0
 81051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051bc:	e31e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81051be:	4b6e      	ldr	r3, [pc, #440]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81051c6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81051c8:	4b6b      	ldr	r3, [pc, #428]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	f003 0304 	and.w	r3, r3, #4
 81051d0:	2b04      	cmp	r3, #4
 81051d2:	d10c      	bne.n	81051ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 81051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051d6:	2b00      	cmp	r3, #0
 81051d8:	d109      	bne.n	81051ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81051da:	4b67      	ldr	r3, [pc, #412]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	08db      	lsrs	r3, r3, #3
 81051e0:	f003 0303 	and.w	r3, r3, #3
 81051e4:	4a65      	ldr	r2, [pc, #404]	; (810537c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 81051e6:	fa22 f303 	lsr.w	r3, r2, r3
 81051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 81051ec:	e01e      	b.n	810522c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81051ee:	4b62      	ldr	r3, [pc, #392]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81051f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81051fa:	d106      	bne.n	810520a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 81051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105202:	d102      	bne.n	810520a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105204:	4b5e      	ldr	r3, [pc, #376]	; (8105380 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8105206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105208:	e010      	b.n	810522c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810520a:	4b5b      	ldr	r3, [pc, #364]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105216:	d106      	bne.n	8105226 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8105218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810521a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810521e:	d102      	bne.n	8105226 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105220:	4b58      	ldr	r3, [pc, #352]	; (8105384 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8105222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105224:	e002      	b.n	810522c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105226:	2300      	movs	r3, #0
 8105228:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810522a:	e2e7      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810522c:	e2e6      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810522e:	4b56      	ldr	r3, [pc, #344]	; (8105388 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8105230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105232:	e2e3      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8105234:	2300      	movs	r3, #0
 8105236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105238:	e2e0      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105240:	f040 80a7 	bne.w	8105392 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8105244:	4b4c      	ldr	r3, [pc, #304]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105248:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810524c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105254:	d055      	beq.n	8105302 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8105256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810525c:	f200 8096 	bhi.w	810538c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105266:	f000 8084 	beq.w	8105372 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 810526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810526c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105270:	f200 808c 	bhi.w	810538c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810527a:	d030      	beq.n	81052de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 810527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810527e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105282:	f200 8083 	bhi.w	810538c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105288:	2b00      	cmp	r3, #0
 810528a:	d004      	beq.n	8105296 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810528e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105292:	d012      	beq.n	81052ba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8105294:	e07a      	b.n	810538c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105296:	4b38      	ldr	r3, [pc, #224]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105298:	681b      	ldr	r3, [r3, #0]
 810529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810529e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81052a2:	d107      	bne.n	81052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81052a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81052a8:	4618      	mov	r0, r3
 81052aa:	f000 fd73 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81052b2:	e2a3      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81052b4:	2300      	movs	r3, #0
 81052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81052b8:	e2a0      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052ba:	4b2f      	ldr	r3, [pc, #188]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81052bc:	681b      	ldr	r3, [r3, #0]
 81052be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81052c6:	d107      	bne.n	81052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052c8:	f107 0318 	add.w	r3, r7, #24
 81052cc:	4618      	mov	r0, r3
 81052ce:	f000 fab9 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81052d2:	69bb      	ldr	r3, [r7, #24]
 81052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 81052d6:	e291      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81052d8:	2300      	movs	r3, #0
 81052da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81052dc:	e28e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81052de:	4b26      	ldr	r3, [pc, #152]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052ea:	d107      	bne.n	81052fc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052ec:	f107 030c 	add.w	r3, r7, #12
 81052f0:	4618      	mov	r0, r3
 81052f2:	f000 fbfb 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81052f6:	68fb      	ldr	r3, [r7, #12]
 81052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81052fa:	e27f      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81052fc:	2300      	movs	r3, #0
 81052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105300:	e27c      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105302:	4b1d      	ldr	r3, [pc, #116]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810530a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810530c:	4b1a      	ldr	r3, [pc, #104]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810530e:	681b      	ldr	r3, [r3, #0]
 8105310:	f003 0304 	and.w	r3, r3, #4
 8105314:	2b04      	cmp	r3, #4
 8105316:	d10c      	bne.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8105318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810531a:	2b00      	cmp	r3, #0
 810531c:	d109      	bne.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810531e:	4b16      	ldr	r3, [pc, #88]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	08db      	lsrs	r3, r3, #3
 8105324:	f003 0303 	and.w	r3, r3, #3
 8105328:	4a14      	ldr	r2, [pc, #80]	; (810537c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 810532a:	fa22 f303 	lsr.w	r3, r2, r3
 810532e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105330:	e01e      	b.n	8105370 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105332:	4b11      	ldr	r3, [pc, #68]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810533a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810533e:	d106      	bne.n	810534e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8105340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105346:	d102      	bne.n	810534e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105348:	4b0d      	ldr	r3, [pc, #52]	; (8105380 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 810534a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810534c:	e010      	b.n	8105370 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810534e:	4b0a      	ldr	r3, [pc, #40]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105350:	681b      	ldr	r3, [r3, #0]
 8105352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810535a:	d106      	bne.n	810536a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810535e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105362:	d102      	bne.n	810536a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105364:	4b07      	ldr	r3, [pc, #28]	; (8105384 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8105366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105368:	e002      	b.n	8105370 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810536a:	2300      	movs	r3, #0
 810536c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810536e:	e245      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105370:	e244      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105372:	4b05      	ldr	r3, [pc, #20]	; (8105388 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8105374:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105376:	e241      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105378:	58024400 	.word	0x58024400
 810537c:	03d09000 	.word	0x03d09000
 8105380:	003d0900 	.word	0x003d0900
 8105384:	007a1200 	.word	0x007a1200
 8105388:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 810538c:	2300      	movs	r3, #0
 810538e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105390:	e234      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105398:	f040 809c 	bne.w	81054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 810539c:	4b9b      	ldr	r3, [pc, #620]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810539e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81053a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81053a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053ac:	d054      	beq.n	8105458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 81053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053b4:	f200 808b 	bhi.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81053be:	f000 8083 	beq.w	81054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 81053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81053c8:	f200 8081 	bhi.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053d2:	d02f      	beq.n	8105434 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 81053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053da:	d878      	bhi.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053de:	2b00      	cmp	r3, #0
 81053e0:	d004      	beq.n	81053ec <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 81053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81053e8:	d012      	beq.n	8105410 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 81053ea:	e070      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81053ec:	4b87      	ldr	r3, [pc, #540]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81053f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053f8:	d107      	bne.n	810540a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81053fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81053fe:	4618      	mov	r0, r3
 8105400:	f000 fcc8 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105406:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105408:	e1f8      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810540a:	2300      	movs	r3, #0
 810540c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810540e:	e1f5      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105410:	4b7e      	ldr	r3, [pc, #504]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810541c:	d107      	bne.n	810542e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810541e:	f107 0318 	add.w	r3, r7, #24
 8105422:	4618      	mov	r0, r3
 8105424:	f000 fa0e 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105428:	69bb      	ldr	r3, [r7, #24]
 810542a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810542c:	e1e6      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810542e:	2300      	movs	r3, #0
 8105430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105432:	e1e3      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105434:	4b75      	ldr	r3, [pc, #468]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810543c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105440:	d107      	bne.n	8105452 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105442:	f107 030c 	add.w	r3, r7, #12
 8105446:	4618      	mov	r0, r3
 8105448:	f000 fb50 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810544c:	68fb      	ldr	r3, [r7, #12]
 810544e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105450:	e1d4      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105452:	2300      	movs	r3, #0
 8105454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105456:	e1d1      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105458:	4b6c      	ldr	r3, [pc, #432]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810545c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105460:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105462:	4b6a      	ldr	r3, [pc, #424]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f003 0304 	and.w	r3, r3, #4
 810546a:	2b04      	cmp	r3, #4
 810546c:	d10c      	bne.n	8105488 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105470:	2b00      	cmp	r3, #0
 8105472:	d109      	bne.n	8105488 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105474:	4b65      	ldr	r3, [pc, #404]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105476:	681b      	ldr	r3, [r3, #0]
 8105478:	08db      	lsrs	r3, r3, #3
 810547a:	f003 0303 	and.w	r3, r3, #3
 810547e:	4a64      	ldr	r2, [pc, #400]	; (8105610 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8105480:	fa22 f303 	lsr.w	r3, r2, r3
 8105484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105486:	e01e      	b.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105488:	4b60      	ldr	r3, [pc, #384]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810548a:	681b      	ldr	r3, [r3, #0]
 810548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105494:	d106      	bne.n	81054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8105496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810549c:	d102      	bne.n	81054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810549e:	4b5d      	ldr	r3, [pc, #372]	; (8105614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 81054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81054a2:	e010      	b.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81054a4:	4b59      	ldr	r3, [pc, #356]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81054a6:	681b      	ldr	r3, [r3, #0]
 81054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81054ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054b0:	d106      	bne.n	81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 81054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81054b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81054b8:	d102      	bne.n	81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81054ba:	4b57      	ldr	r3, [pc, #348]	; (8105618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81054be:	e002      	b.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81054c0:	2300      	movs	r3, #0
 81054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81054c4:	e19a      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81054c6:	e199      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81054c8:	4b54      	ldr	r3, [pc, #336]	; (810561c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81054cc:	e196      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81054ce:	2300      	movs	r3, #0
 81054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81054d2:	e193      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81054da:	d173      	bne.n	81055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81054dc:	4b4b      	ldr	r3, [pc, #300]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81054e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81054e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054ec:	d02f      	beq.n	810554e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 81054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054f4:	d863      	bhi.n	81055be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 81054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054f8:	2b00      	cmp	r3, #0
 81054fa:	d004      	beq.n	8105506 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 81054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105502:	d012      	beq.n	810552a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8105504:	e05b      	b.n	81055be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105506:	4b41      	ldr	r3, [pc, #260]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105512:	d107      	bne.n	8105524 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105514:	f107 0318 	add.w	r3, r7, #24
 8105518:	4618      	mov	r0, r3
 810551a:	f000 f993 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810551e:	69bb      	ldr	r3, [r7, #24]
 8105520:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105522:	e16b      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105524:	2300      	movs	r3, #0
 8105526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105528:	e168      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810552a:	4b38      	ldr	r3, [pc, #224]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105536:	d107      	bne.n	8105548 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105538:	f107 030c 	add.w	r3, r7, #12
 810553c:	4618      	mov	r0, r3
 810553e:	f000 fad5 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105542:	697b      	ldr	r3, [r7, #20]
 8105544:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105546:	e159      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105548:	2300      	movs	r3, #0
 810554a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810554c:	e156      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810554e:	4b2f      	ldr	r3, [pc, #188]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105556:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105558:	4b2c      	ldr	r3, [pc, #176]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	f003 0304 	and.w	r3, r3, #4
 8105560:	2b04      	cmp	r3, #4
 8105562:	d10c      	bne.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8105564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105566:	2b00      	cmp	r3, #0
 8105568:	d109      	bne.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810556a:	4b28      	ldr	r3, [pc, #160]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	08db      	lsrs	r3, r3, #3
 8105570:	f003 0303 	and.w	r3, r3, #3
 8105574:	4a26      	ldr	r2, [pc, #152]	; (8105610 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8105576:	fa22 f303 	lsr.w	r3, r2, r3
 810557a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810557c:	e01e      	b.n	81055bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810557e:	4b23      	ldr	r3, [pc, #140]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810558a:	d106      	bne.n	810559a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 810558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810558e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105592:	d102      	bne.n	810559a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105594:	4b1f      	ldr	r3, [pc, #124]	; (8105614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8105596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105598:	e010      	b.n	81055bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810559a:	4b1c      	ldr	r3, [pc, #112]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81055a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81055a6:	d106      	bne.n	81055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 81055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81055aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81055ae:	d102      	bne.n	81055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81055b0:	4b19      	ldr	r3, [pc, #100]	; (8105618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81055b4:	e002      	b.n	81055bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81055b6:	2300      	movs	r3, #0
 81055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81055ba:	e11f      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81055bc:	e11e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 81055be:	2300      	movs	r3, #0
 81055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81055c2:	e11b      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055ca:	d13e      	bne.n	810564a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81055cc:	4b0f      	ldr	r3, [pc, #60]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81055ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81055d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81055d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055d8:	2b00      	cmp	r3, #0
 81055da:	d004      	beq.n	81055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 81055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055e2:	d01d      	beq.n	8105620 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 81055e4:	e02e      	b.n	8105644 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81055e6:	4b09      	ldr	r3, [pc, #36]	; (810560c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81055ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81055f2:	d107      	bne.n	8105604 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81055f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81055f8:	4618      	mov	r0, r3
 81055fa:	f000 fbcb 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105602:	e0fb      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8105604:	2300      	movs	r3, #0
 8105606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105608:	e0f8      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810560a:	bf00      	nop
 810560c:	58024400 	.word	0x58024400
 8105610:	03d09000 	.word	0x03d09000
 8105614:	003d0900 	.word	0x003d0900
 8105618:	007a1200 	.word	0x007a1200
 810561c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105620:	4b79      	ldr	r3, [pc, #484]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810562c:	d107      	bne.n	810563e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810562e:	f107 0318 	add.w	r3, r7, #24
 8105632:	4618      	mov	r0, r3
 8105634:	f000 f906 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105638:	6a3b      	ldr	r3, [r7, #32]
 810563a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810563c:	e0de      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810563e:	2300      	movs	r3, #0
 8105640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105642:	e0db      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8105644:	2300      	movs	r3, #0
 8105646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105648:	e0d8      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105650:	f040 8085 	bne.w	810575e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8105654:	4b6c      	ldr	r3, [pc, #432]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105658:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810565c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105664:	d06b      	beq.n	810573e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8105666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810566c:	d874      	bhi.n	8105758 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105674:	d056      	beq.n	8105724 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8105676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810567c:	d86c      	bhi.n	8105758 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105684:	d03b      	beq.n	81056fe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8105686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810568c:	d864      	bhi.n	8105758 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105694:	d021      	beq.n	81056da <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8105696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810569c:	d85c      	bhi.n	8105758 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	d004      	beq.n	81056ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81056a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81056aa:	d004      	beq.n	81056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 81056ac:	e054      	b.n	8105758 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81056ae:	f000 f8b3 	bl	8105818 <HAL_RCCEx_GetD3PCLK1Freq>
 81056b2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 81056b4:	e0a2      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81056b6:	4b54      	ldr	r3, [pc, #336]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81056be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81056c2:	d107      	bne.n	81056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81056c4:	f107 0318 	add.w	r3, r7, #24
 81056c8:	4618      	mov	r0, r3
 81056ca:	f000 f8bb 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81056ce:	69fb      	ldr	r3, [r7, #28]
 81056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81056d2:	e093      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81056d4:	2300      	movs	r3, #0
 81056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81056d8:	e090      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81056da:	4b4b      	ldr	r3, [pc, #300]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81056e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81056e6:	d107      	bne.n	81056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81056e8:	f107 030c 	add.w	r3, r7, #12
 81056ec:	4618      	mov	r0, r3
 81056ee:	f000 f9fd 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81056f2:	693b      	ldr	r3, [r7, #16]
 81056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81056f6:	e081      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81056f8:	2300      	movs	r3, #0
 81056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81056fc:	e07e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81056fe:	4b42      	ldr	r3, [pc, #264]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	f003 0304 	and.w	r3, r3, #4
 8105706:	2b04      	cmp	r3, #4
 8105708:	d109      	bne.n	810571e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810570a:	4b3f      	ldr	r3, [pc, #252]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	08db      	lsrs	r3, r3, #3
 8105710:	f003 0303 	and.w	r3, r3, #3
 8105714:	4a3d      	ldr	r2, [pc, #244]	; (810580c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8105716:	fa22 f303 	lsr.w	r3, r2, r3
 810571a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810571c:	e06e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810571e:	2300      	movs	r3, #0
 8105720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105722:	e06b      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105724:	4b38      	ldr	r3, [pc, #224]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810572c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105730:	d102      	bne.n	8105738 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8105732:	4b37      	ldr	r3, [pc, #220]	; (8105810 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8105734:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105736:	e061      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105738:	2300      	movs	r3, #0
 810573a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810573c:	e05e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810573e:	4b32      	ldr	r3, [pc, #200]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810574a:	d102      	bne.n	8105752 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 810574c:	4b31      	ldr	r3, [pc, #196]	; (8105814 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810574e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105750:	e054      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8105752:	2300      	movs	r3, #0
 8105754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105756:	e051      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8105758:	2300      	movs	r3, #0
 810575a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810575c:	e04e      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105764:	d148      	bne.n	81057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8105766:	4b28      	ldr	r3, [pc, #160]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810576a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810576e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105776:	d02a      	beq.n	81057ce <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8105778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810577a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810577e:	d838      	bhi.n	81057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8105780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105782:	2b00      	cmp	r3, #0
 8105784:	d004      	beq.n	8105790 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8105786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810578c:	d00d      	beq.n	81057aa <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 810578e:	e030      	b.n	81057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105790:	4b1d      	ldr	r3, [pc, #116]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105792:	681b      	ldr	r3, [r3, #0]
 8105794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810579c:	d102      	bne.n	81057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 810579e:	4b1d      	ldr	r3, [pc, #116]	; (8105814 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81057a2:	e02b      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81057a4:	2300      	movs	r3, #0
 81057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057a8:	e028      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81057aa:	4b17      	ldr	r3, [pc, #92]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81057b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81057b6:	d107      	bne.n	81057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81057b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81057bc:	4618      	mov	r0, r3
 81057be:	f000 fae9 	bl	8105d94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81057c6:	e019      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81057c8:	2300      	movs	r3, #0
 81057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057cc:	e016      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81057ce:	4b0e      	ldr	r3, [pc, #56]	; (8105808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81057da:	d107      	bne.n	81057ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81057dc:	f107 0318 	add.w	r3, r7, #24
 81057e0:	4618      	mov	r0, r3
 81057e2:	f000 f82f 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81057e6:	69fb      	ldr	r3, [r7, #28]
 81057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81057ea:	e007      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81057ec:	2300      	movs	r3, #0
 81057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057f0:	e004      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81057f2:	2300      	movs	r3, #0
 81057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057f6:	e001      	b.n	81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 81057f8:	2300      	movs	r3, #0
 81057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81057fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81057fe:	4618      	mov	r0, r3
 8105800:	3740      	adds	r7, #64	; 0x40
 8105802:	46bd      	mov	sp, r7
 8105804:	bd80      	pop	{r7, pc}
 8105806:	bf00      	nop
 8105808:	58024400 	.word	0x58024400
 810580c:	03d09000 	.word	0x03d09000
 8105810:	003d0900 	.word	0x003d0900
 8105814:	007a1200 	.word	0x007a1200

08105818 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105818:	b580      	push	{r7, lr}
 810581a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810581c:	f7fe fb86 	bl	8103f2c <HAL_RCC_GetHCLKFreq>
 8105820:	4602      	mov	r2, r0
 8105822:	4b06      	ldr	r3, [pc, #24]	; (810583c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105824:	6a1b      	ldr	r3, [r3, #32]
 8105826:	091b      	lsrs	r3, r3, #4
 8105828:	f003 0307 	and.w	r3, r3, #7
 810582c:	4904      	ldr	r1, [pc, #16]	; (8105840 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810582e:	5ccb      	ldrb	r3, [r1, r3]
 8105830:	f003 031f 	and.w	r3, r3, #31
 8105834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105838:	4618      	mov	r0, r3
 810583a:	bd80      	pop	{r7, pc}
 810583c:	58024400 	.word	0x58024400
 8105840:	0810cf84 	.word	0x0810cf84

08105844 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105844:	b480      	push	{r7}
 8105846:	b089      	sub	sp, #36	; 0x24
 8105848:	af00      	add	r7, sp, #0
 810584a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810584c:	4ba1      	ldr	r3, [pc, #644]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105850:	f003 0303 	and.w	r3, r3, #3
 8105854:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105856:	4b9f      	ldr	r3, [pc, #636]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810585a:	0b1b      	lsrs	r3, r3, #12
 810585c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105860:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105862:	4b9c      	ldr	r3, [pc, #624]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105866:	091b      	lsrs	r3, r3, #4
 8105868:	f003 0301 	and.w	r3, r3, #1
 810586c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810586e:	4b99      	ldr	r3, [pc, #612]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105872:	08db      	lsrs	r3, r3, #3
 8105874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105878:	693a      	ldr	r2, [r7, #16]
 810587a:	fb02 f303 	mul.w	r3, r2, r3
 810587e:	ee07 3a90 	vmov	s15, r3
 8105882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810588a:	697b      	ldr	r3, [r7, #20]
 810588c:	2b00      	cmp	r3, #0
 810588e:	f000 8111 	beq.w	8105ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105892:	69bb      	ldr	r3, [r7, #24]
 8105894:	2b02      	cmp	r3, #2
 8105896:	f000 8083 	beq.w	81059a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810589a:	69bb      	ldr	r3, [r7, #24]
 810589c:	2b02      	cmp	r3, #2
 810589e:	f200 80a1 	bhi.w	81059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81058a2:	69bb      	ldr	r3, [r7, #24]
 81058a4:	2b00      	cmp	r3, #0
 81058a6:	d003      	beq.n	81058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81058a8:	69bb      	ldr	r3, [r7, #24]
 81058aa:	2b01      	cmp	r3, #1
 81058ac:	d056      	beq.n	810595c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81058ae:	e099      	b.n	81059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058b0:	4b88      	ldr	r3, [pc, #544]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	f003 0320 	and.w	r3, r3, #32
 81058b8:	2b00      	cmp	r3, #0
 81058ba:	d02d      	beq.n	8105918 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81058bc:	4b85      	ldr	r3, [pc, #532]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	08db      	lsrs	r3, r3, #3
 81058c2:	f003 0303 	and.w	r3, r3, #3
 81058c6:	4a84      	ldr	r2, [pc, #528]	; (8105ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81058c8:	fa22 f303 	lsr.w	r3, r2, r3
 81058cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81058ce:	68bb      	ldr	r3, [r7, #8]
 81058d0:	ee07 3a90 	vmov	s15, r3
 81058d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058d8:	697b      	ldr	r3, [r7, #20]
 81058da:	ee07 3a90 	vmov	s15, r3
 81058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058e6:	4b7b      	ldr	r3, [pc, #492]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ee:	ee07 3a90 	vmov	s15, r3
 81058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81058fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105912:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105916:	e087      	b.n	8105a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105918:	697b      	ldr	r3, [r7, #20]
 810591a:	ee07 3a90 	vmov	s15, r3
 810591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105922:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810592a:	4b6a      	ldr	r3, [pc, #424]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105932:	ee07 3a90 	vmov	s15, r3
 8105936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810593a:	ed97 6a03 	vldr	s12, [r7, #12]
 810593e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810594a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810595a:	e065      	b.n	8105a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810595c:	697b      	ldr	r3, [r7, #20]
 810595e:	ee07 3a90 	vmov	s15, r3
 8105962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105966:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810596e:	4b59      	ldr	r3, [pc, #356]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105976:	ee07 3a90 	vmov	s15, r3
 810597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810597e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105982:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810598e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105996:	ee67 7a27 	vmul.f32	s15, s14, s15
 810599a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810599e:	e043      	b.n	8105a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81059a0:	697b      	ldr	r3, [r7, #20]
 81059a2:	ee07 3a90 	vmov	s15, r3
 81059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81059ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059b2:	4b48      	ldr	r3, [pc, #288]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059ba:	ee07 3a90 	vmov	s15, r3
 81059be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81059c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81059ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81059e2:	e021      	b.n	8105a28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81059e4:	697b      	ldr	r3, [r7, #20]
 81059e6:	ee07 3a90 	vmov	s15, r3
 81059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81059f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059f6:	4b37      	ldr	r3, [pc, #220]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059fe:	ee07 3a90 	vmov	s15, r3
 8105a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105adc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105a26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105a28:	4b2a      	ldr	r3, [pc, #168]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a2c:	0a5b      	lsrs	r3, r3, #9
 8105a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a32:	ee07 3a90 	vmov	s15, r3
 8105a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a4e:	ee17 2a90 	vmov	r2, s15
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105a56:	4b1f      	ldr	r3, [pc, #124]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a5a:	0c1b      	lsrs	r3, r3, #16
 8105a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a60:	ee07 3a90 	vmov	s15, r3
 8105a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a7c:	ee17 2a90 	vmov	r2, s15
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105a84:	4b13      	ldr	r3, [pc, #76]	; (8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a88:	0e1b      	lsrs	r3, r3, #24
 8105a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a8e:	ee07 3a90 	vmov	s15, r3
 8105a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105aaa:	ee17 2a90 	vmov	r2, s15
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105ab2:	e008      	b.n	8105ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	2200      	movs	r2, #0
 8105ab8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	2200      	movs	r2, #0
 8105abe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	2200      	movs	r2, #0
 8105ac4:	609a      	str	r2, [r3, #8]
}
 8105ac6:	bf00      	nop
 8105ac8:	3724      	adds	r7, #36	; 0x24
 8105aca:	46bd      	mov	sp, r7
 8105acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ad0:	4770      	bx	lr
 8105ad2:	bf00      	nop
 8105ad4:	58024400 	.word	0x58024400
 8105ad8:	03d09000 	.word	0x03d09000
 8105adc:	46000000 	.word	0x46000000
 8105ae0:	4c742400 	.word	0x4c742400
 8105ae4:	4a742400 	.word	0x4a742400
 8105ae8:	4af42400 	.word	0x4af42400

08105aec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105aec:	b480      	push	{r7}
 8105aee:	b089      	sub	sp, #36	; 0x24
 8105af0:	af00      	add	r7, sp, #0
 8105af2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105af4:	4ba1      	ldr	r3, [pc, #644]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105af8:	f003 0303 	and.w	r3, r3, #3
 8105afc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105afe:	4b9f      	ldr	r3, [pc, #636]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b02:	0d1b      	lsrs	r3, r3, #20
 8105b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105b08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105b0a:	4b9c      	ldr	r3, [pc, #624]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b0e:	0a1b      	lsrs	r3, r3, #8
 8105b10:	f003 0301 	and.w	r3, r3, #1
 8105b14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105b16:	4b99      	ldr	r3, [pc, #612]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b1a:	08db      	lsrs	r3, r3, #3
 8105b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105b20:	693a      	ldr	r2, [r7, #16]
 8105b22:	fb02 f303 	mul.w	r3, r2, r3
 8105b26:	ee07 3a90 	vmov	s15, r3
 8105b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105b32:	697b      	ldr	r3, [r7, #20]
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	f000 8111 	beq.w	8105d5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105b3a:	69bb      	ldr	r3, [r7, #24]
 8105b3c:	2b02      	cmp	r3, #2
 8105b3e:	f000 8083 	beq.w	8105c48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105b42:	69bb      	ldr	r3, [r7, #24]
 8105b44:	2b02      	cmp	r3, #2
 8105b46:	f200 80a1 	bhi.w	8105c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105b4a:	69bb      	ldr	r3, [r7, #24]
 8105b4c:	2b00      	cmp	r3, #0
 8105b4e:	d003      	beq.n	8105b58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105b50:	69bb      	ldr	r3, [r7, #24]
 8105b52:	2b01      	cmp	r3, #1
 8105b54:	d056      	beq.n	8105c04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105b56:	e099      	b.n	8105c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105b58:	4b88      	ldr	r3, [pc, #544]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	f003 0320 	and.w	r3, r3, #32
 8105b60:	2b00      	cmp	r3, #0
 8105b62:	d02d      	beq.n	8105bc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105b64:	4b85      	ldr	r3, [pc, #532]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	08db      	lsrs	r3, r3, #3
 8105b6a:	f003 0303 	and.w	r3, r3, #3
 8105b6e:	4a84      	ldr	r2, [pc, #528]	; (8105d80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105b70:	fa22 f303 	lsr.w	r3, r2, r3
 8105b74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105b76:	68bb      	ldr	r3, [r7, #8]
 8105b78:	ee07 3a90 	vmov	s15, r3
 8105b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b80:	697b      	ldr	r3, [r7, #20]
 8105b82:	ee07 3a90 	vmov	s15, r3
 8105b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b8e:	4b7b      	ldr	r3, [pc, #492]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b96:	ee07 3a90 	vmov	s15, r3
 8105b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ba2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105bbe:	e087      	b.n	8105cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105bc0:	697b      	ldr	r3, [r7, #20]
 8105bc2:	ee07 3a90 	vmov	s15, r3
 8105bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bd2:	4b6a      	ldr	r3, [pc, #424]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bda:	ee07 3a90 	vmov	s15, r3
 8105bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8105be6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c02:	e065      	b.n	8105cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c04:	697b      	ldr	r3, [r7, #20]
 8105c06:	ee07 3a90 	vmov	s15, r3
 8105c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c16:	4b59      	ldr	r3, [pc, #356]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c1e:	ee07 3a90 	vmov	s15, r3
 8105c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c46:	e043      	b.n	8105cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c48:	697b      	ldr	r3, [r7, #20]
 8105c4a:	ee07 3a90 	vmov	s15, r3
 8105c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c5a:	4b48      	ldr	r3, [pc, #288]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c62:	ee07 3a90 	vmov	s15, r3
 8105c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c8a:	e021      	b.n	8105cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c8c:	697b      	ldr	r3, [r7, #20]
 8105c8e:	ee07 3a90 	vmov	s15, r3
 8105c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c9e:	4b37      	ldr	r3, [pc, #220]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ca6:	ee07 3a90 	vmov	s15, r3
 8105caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105d84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105cce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105cd0:	4b2a      	ldr	r3, [pc, #168]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cd4:	0a5b      	lsrs	r3, r3, #9
 8105cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105cda:	ee07 3a90 	vmov	s15, r3
 8105cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105cf6:	ee17 2a90 	vmov	r2, s15
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105cfe:	4b1f      	ldr	r3, [pc, #124]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d02:	0c1b      	lsrs	r3, r3, #16
 8105d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105d08:	ee07 3a90 	vmov	s15, r3
 8105d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d24:	ee17 2a90 	vmov	r2, s15
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105d2c:	4b13      	ldr	r3, [pc, #76]	; (8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d30:	0e1b      	lsrs	r3, r3, #24
 8105d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105d36:	ee07 3a90 	vmov	s15, r3
 8105d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d52:	ee17 2a90 	vmov	r2, s15
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105d5a:	e008      	b.n	8105d6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	2200      	movs	r2, #0
 8105d60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	2200      	movs	r2, #0
 8105d66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	2200      	movs	r2, #0
 8105d6c:	609a      	str	r2, [r3, #8]
}
 8105d6e:	bf00      	nop
 8105d70:	3724      	adds	r7, #36	; 0x24
 8105d72:	46bd      	mov	sp, r7
 8105d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d78:	4770      	bx	lr
 8105d7a:	bf00      	nop
 8105d7c:	58024400 	.word	0x58024400
 8105d80:	03d09000 	.word	0x03d09000
 8105d84:	46000000 	.word	0x46000000
 8105d88:	4c742400 	.word	0x4c742400
 8105d8c:	4a742400 	.word	0x4a742400
 8105d90:	4af42400 	.word	0x4af42400

08105d94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8105d94:	b480      	push	{r7}
 8105d96:	b089      	sub	sp, #36	; 0x24
 8105d98:	af00      	add	r7, sp, #0
 8105d9a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105d9c:	4ba0      	ldr	r3, [pc, #640]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105da0:	f003 0303 	and.w	r3, r3, #3
 8105da4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8105da6:	4b9e      	ldr	r3, [pc, #632]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105daa:	091b      	lsrs	r3, r3, #4
 8105dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105db0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105db2:	4b9b      	ldr	r3, [pc, #620]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105db6:	f003 0301 	and.w	r3, r3, #1
 8105dba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105dbc:	4b98      	ldr	r3, [pc, #608]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105dc0:	08db      	lsrs	r3, r3, #3
 8105dc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105dc6:	693a      	ldr	r2, [r7, #16]
 8105dc8:	fb02 f303 	mul.w	r3, r2, r3
 8105dcc:	ee07 3a90 	vmov	s15, r3
 8105dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105dd8:	697b      	ldr	r3, [r7, #20]
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	f000 8111 	beq.w	8106002 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105de0:	69bb      	ldr	r3, [r7, #24]
 8105de2:	2b02      	cmp	r3, #2
 8105de4:	f000 8083 	beq.w	8105eee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105de8:	69bb      	ldr	r3, [r7, #24]
 8105dea:	2b02      	cmp	r3, #2
 8105dec:	f200 80a1 	bhi.w	8105f32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105df0:	69bb      	ldr	r3, [r7, #24]
 8105df2:	2b00      	cmp	r3, #0
 8105df4:	d003      	beq.n	8105dfe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105df6:	69bb      	ldr	r3, [r7, #24]
 8105df8:	2b01      	cmp	r3, #1
 8105dfa:	d056      	beq.n	8105eaa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105dfc:	e099      	b.n	8105f32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105dfe:	4b88      	ldr	r3, [pc, #544]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	f003 0320 	and.w	r3, r3, #32
 8105e06:	2b00      	cmp	r3, #0
 8105e08:	d02d      	beq.n	8105e66 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105e0a:	4b85      	ldr	r3, [pc, #532]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	08db      	lsrs	r3, r3, #3
 8105e10:	f003 0303 	and.w	r3, r3, #3
 8105e14:	4a83      	ldr	r2, [pc, #524]	; (8106024 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105e16:	fa22 f303 	lsr.w	r3, r2, r3
 8105e1a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e1c:	68bb      	ldr	r3, [r7, #8]
 8105e1e:	ee07 3a90 	vmov	s15, r3
 8105e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e26:	697b      	ldr	r3, [r7, #20]
 8105e28:	ee07 3a90 	vmov	s15, r3
 8105e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e34:	4b7a      	ldr	r3, [pc, #488]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e3c:	ee07 3a90 	vmov	s15, r3
 8105e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e44:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e48:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106028 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e60:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105e64:	e087      	b.n	8105f76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e66:	697b      	ldr	r3, [r7, #20]
 8105e68:	ee07 3a90 	vmov	s15, r3
 8105e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810602c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e78:	4b69      	ldr	r3, [pc, #420]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e80:	ee07 3a90 	vmov	s15, r3
 8105e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e88:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106028 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ea4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105ea8:	e065      	b.n	8105f76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105eaa:	697b      	ldr	r3, [r7, #20]
 8105eac:	ee07 3a90 	vmov	s15, r3
 8105eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105eb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106030 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ebc:	4b58      	ldr	r3, [pc, #352]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ec4:	ee07 3a90 	vmov	s15, r3
 8105ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ecc:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ed0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106028 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ee8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105eec:	e043      	b.n	8105f76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105eee:	697b      	ldr	r3, [r7, #20]
 8105ef0:	ee07 3a90 	vmov	s15, r3
 8105ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ef8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106034 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f00:	4b47      	ldr	r3, [pc, #284]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f08:	ee07 3a90 	vmov	s15, r3
 8105f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106028 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105f30:	e021      	b.n	8105f76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f32:	697b      	ldr	r3, [r7, #20]
 8105f34:	ee07 3a90 	vmov	s15, r3
 8105f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810602c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f44:	4b36      	ldr	r3, [pc, #216]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f4c:	ee07 3a90 	vmov	s15, r3
 8105f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106028 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105f74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8105f76:	4b2a      	ldr	r3, [pc, #168]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f7a:	0a5b      	lsrs	r3, r3, #9
 8105f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105f80:	ee07 3a90 	vmov	s15, r3
 8105f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f9c:	ee17 2a90 	vmov	r2, s15
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8105fa4:	4b1e      	ldr	r3, [pc, #120]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105fa8:	0c1b      	lsrs	r3, r3, #16
 8105faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105fae:	ee07 3a90 	vmov	s15, r3
 8105fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8105fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105fca:	ee17 2a90 	vmov	r2, s15
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8105fd2:	4b13      	ldr	r3, [pc, #76]	; (8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105fd6:	0e1b      	lsrs	r3, r3, #24
 8105fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105fdc:	ee07 3a90 	vmov	s15, r3
 8105fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ff8:	ee17 2a90 	vmov	r2, s15
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106000:	e008      	b.n	8106014 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	2200      	movs	r2, #0
 8106006:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	2200      	movs	r2, #0
 810600c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	2200      	movs	r2, #0
 8106012:	609a      	str	r2, [r3, #8]
}
 8106014:	bf00      	nop
 8106016:	3724      	adds	r7, #36	; 0x24
 8106018:	46bd      	mov	sp, r7
 810601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810601e:	4770      	bx	lr
 8106020:	58024400 	.word	0x58024400
 8106024:	03d09000 	.word	0x03d09000
 8106028:	46000000 	.word	0x46000000
 810602c:	4c742400 	.word	0x4c742400
 8106030:	4a742400 	.word	0x4a742400
 8106034:	4af42400 	.word	0x4af42400

08106038 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106038:	b580      	push	{r7, lr}
 810603a:	b084      	sub	sp, #16
 810603c:	af00      	add	r7, sp, #0
 810603e:	6078      	str	r0, [r7, #4]
 8106040:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106042:	2300      	movs	r3, #0
 8106044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106046:	4b54      	ldr	r3, [pc, #336]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810604a:	f003 0303 	and.w	r3, r3, #3
 810604e:	2b03      	cmp	r3, #3
 8106050:	d101      	bne.n	8106056 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106052:	2301      	movs	r3, #1
 8106054:	e09b      	b.n	810618e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106056:	4b50      	ldr	r3, [pc, #320]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106058:	681b      	ldr	r3, [r3, #0]
 810605a:	4a4f      	ldr	r2, [pc, #316]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 810605c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106062:	f7fb ff15 	bl	8101e90 <HAL_GetTick>
 8106066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106068:	e008      	b.n	810607c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810606a:	f7fb ff11 	bl	8101e90 <HAL_GetTick>
 810606e:	4602      	mov	r2, r0
 8106070:	68bb      	ldr	r3, [r7, #8]
 8106072:	1ad3      	subs	r3, r2, r3
 8106074:	2b02      	cmp	r3, #2
 8106076:	d901      	bls.n	810607c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106078:	2303      	movs	r3, #3
 810607a:	e088      	b.n	810618e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810607c:	4b46      	ldr	r3, [pc, #280]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106084:	2b00      	cmp	r3, #0
 8106086:	d1f0      	bne.n	810606a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106088:	4b43      	ldr	r3, [pc, #268]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 810608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810608c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	031b      	lsls	r3, r3, #12
 8106096:	4940      	ldr	r1, [pc, #256]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106098:	4313      	orrs	r3, r2
 810609a:	628b      	str	r3, [r1, #40]	; 0x28
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	685b      	ldr	r3, [r3, #4]
 81060a0:	3b01      	subs	r3, #1
 81060a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	689b      	ldr	r3, [r3, #8]
 81060aa:	3b01      	subs	r3, #1
 81060ac:	025b      	lsls	r3, r3, #9
 81060ae:	b29b      	uxth	r3, r3
 81060b0:	431a      	orrs	r2, r3
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	68db      	ldr	r3, [r3, #12]
 81060b6:	3b01      	subs	r3, #1
 81060b8:	041b      	lsls	r3, r3, #16
 81060ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81060be:	431a      	orrs	r2, r3
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	691b      	ldr	r3, [r3, #16]
 81060c4:	3b01      	subs	r3, #1
 81060c6:	061b      	lsls	r3, r3, #24
 81060c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81060cc:	4932      	ldr	r1, [pc, #200]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060ce:	4313      	orrs	r3, r2
 81060d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81060d2:	4b31      	ldr	r3, [pc, #196]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	695b      	ldr	r3, [r3, #20]
 81060de:	492e      	ldr	r1, [pc, #184]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060e0:	4313      	orrs	r3, r2
 81060e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81060e4:	4b2c      	ldr	r3, [pc, #176]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060e8:	f023 0220 	bic.w	r2, r3, #32
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	699b      	ldr	r3, [r3, #24]
 81060f0:	4929      	ldr	r1, [pc, #164]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060f2:	4313      	orrs	r3, r2
 81060f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81060f6:	4b28      	ldr	r3, [pc, #160]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060fa:	4a27      	ldr	r2, [pc, #156]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 81060fc:	f023 0310 	bic.w	r3, r3, #16
 8106100:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106102:	4b25      	ldr	r3, [pc, #148]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810610a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810610e:	687a      	ldr	r2, [r7, #4]
 8106110:	69d2      	ldr	r2, [r2, #28]
 8106112:	00d2      	lsls	r2, r2, #3
 8106114:	4920      	ldr	r1, [pc, #128]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106116:	4313      	orrs	r3, r2
 8106118:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810611a:	4b1f      	ldr	r3, [pc, #124]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 810611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810611e:	4a1e      	ldr	r2, [pc, #120]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106120:	f043 0310 	orr.w	r3, r3, #16
 8106124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106126:	683b      	ldr	r3, [r7, #0]
 8106128:	2b00      	cmp	r3, #0
 810612a:	d106      	bne.n	810613a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810612c:	4b1a      	ldr	r3, [pc, #104]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 810612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106130:	4a19      	ldr	r2, [pc, #100]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106136:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106138:	e00f      	b.n	810615a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810613a:	683b      	ldr	r3, [r7, #0]
 810613c:	2b01      	cmp	r3, #1
 810613e:	d106      	bne.n	810614e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106140:	4b15      	ldr	r3, [pc, #84]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106144:	4a14      	ldr	r2, [pc, #80]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810614a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810614c:	e005      	b.n	810615a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810614e:	4b12      	ldr	r3, [pc, #72]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106152:	4a11      	ldr	r2, [pc, #68]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106158:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810615a:	4b0f      	ldr	r3, [pc, #60]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	4a0e      	ldr	r2, [pc, #56]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106160:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106166:	f7fb fe93 	bl	8101e90 <HAL_GetTick>
 810616a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810616c:	e008      	b.n	8106180 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810616e:	f7fb fe8f 	bl	8101e90 <HAL_GetTick>
 8106172:	4602      	mov	r2, r0
 8106174:	68bb      	ldr	r3, [r7, #8]
 8106176:	1ad3      	subs	r3, r2, r3
 8106178:	2b02      	cmp	r3, #2
 810617a:	d901      	bls.n	8106180 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810617c:	2303      	movs	r3, #3
 810617e:	e006      	b.n	810618e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106180:	4b05      	ldr	r3, [pc, #20]	; (8106198 <RCCEx_PLL2_Config+0x160>)
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106188:	2b00      	cmp	r3, #0
 810618a:	d0f0      	beq.n	810616e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810618c:	7bfb      	ldrb	r3, [r7, #15]
}
 810618e:	4618      	mov	r0, r3
 8106190:	3710      	adds	r7, #16
 8106192:	46bd      	mov	sp, r7
 8106194:	bd80      	pop	{r7, pc}
 8106196:	bf00      	nop
 8106198:	58024400 	.word	0x58024400

0810619c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810619c:	b580      	push	{r7, lr}
 810619e:	b084      	sub	sp, #16
 81061a0:	af00      	add	r7, sp, #0
 81061a2:	6078      	str	r0, [r7, #4]
 81061a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81061a6:	2300      	movs	r3, #0
 81061a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81061aa:	4b54      	ldr	r3, [pc, #336]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061ae:	f003 0303 	and.w	r3, r3, #3
 81061b2:	2b03      	cmp	r3, #3
 81061b4:	d101      	bne.n	81061ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81061b6:	2301      	movs	r3, #1
 81061b8:	e09b      	b.n	81062f2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81061ba:	4b50      	ldr	r3, [pc, #320]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	4a4f      	ldr	r2, [pc, #316]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81061c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81061c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81061c6:	f7fb fe63 	bl	8101e90 <HAL_GetTick>
 81061ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81061cc:	e008      	b.n	81061e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81061ce:	f7fb fe5f 	bl	8101e90 <HAL_GetTick>
 81061d2:	4602      	mov	r2, r0
 81061d4:	68bb      	ldr	r3, [r7, #8]
 81061d6:	1ad3      	subs	r3, r2, r3
 81061d8:	2b02      	cmp	r3, #2
 81061da:	d901      	bls.n	81061e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81061dc:	2303      	movs	r3, #3
 81061de:	e088      	b.n	81062f2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81061e0:	4b46      	ldr	r3, [pc, #280]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81061e8:	2b00      	cmp	r3, #0
 81061ea:	d1f0      	bne.n	81061ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81061ec:	4b43      	ldr	r3, [pc, #268]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	051b      	lsls	r3, r3, #20
 81061fa:	4940      	ldr	r1, [pc, #256]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81061fc:	4313      	orrs	r3, r2
 81061fe:	628b      	str	r3, [r1, #40]	; 0x28
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	685b      	ldr	r3, [r3, #4]
 8106204:	3b01      	subs	r3, #1
 8106206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	689b      	ldr	r3, [r3, #8]
 810620e:	3b01      	subs	r3, #1
 8106210:	025b      	lsls	r3, r3, #9
 8106212:	b29b      	uxth	r3, r3
 8106214:	431a      	orrs	r2, r3
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	68db      	ldr	r3, [r3, #12]
 810621a:	3b01      	subs	r3, #1
 810621c:	041b      	lsls	r3, r3, #16
 810621e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106222:	431a      	orrs	r2, r3
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	691b      	ldr	r3, [r3, #16]
 8106228:	3b01      	subs	r3, #1
 810622a:	061b      	lsls	r3, r3, #24
 810622c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106230:	4932      	ldr	r1, [pc, #200]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106232:	4313      	orrs	r3, r2
 8106234:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106236:	4b31      	ldr	r3, [pc, #196]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810623a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	695b      	ldr	r3, [r3, #20]
 8106242:	492e      	ldr	r1, [pc, #184]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106244:	4313      	orrs	r3, r2
 8106246:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106248:	4b2c      	ldr	r3, [pc, #176]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 810624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810624c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	699b      	ldr	r3, [r3, #24]
 8106254:	4929      	ldr	r1, [pc, #164]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106256:	4313      	orrs	r3, r2
 8106258:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810625a:	4b28      	ldr	r3, [pc, #160]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 810625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810625e:	4a27      	ldr	r2, [pc, #156]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106266:	4b25      	ldr	r3, [pc, #148]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810626a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810626e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106272:	687a      	ldr	r2, [r7, #4]
 8106274:	69d2      	ldr	r2, [r2, #28]
 8106276:	00d2      	lsls	r2, r2, #3
 8106278:	4920      	ldr	r1, [pc, #128]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 810627a:	4313      	orrs	r3, r2
 810627c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810627e:	4b1f      	ldr	r3, [pc, #124]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106282:	4a1e      	ldr	r2, [pc, #120]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810628a:	683b      	ldr	r3, [r7, #0]
 810628c:	2b00      	cmp	r3, #0
 810628e:	d106      	bne.n	810629e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106290:	4b1a      	ldr	r3, [pc, #104]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106294:	4a19      	ldr	r2, [pc, #100]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 8106296:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810629a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810629c:	e00f      	b.n	81062be <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810629e:	683b      	ldr	r3, [r7, #0]
 81062a0:	2b01      	cmp	r3, #1
 81062a2:	d106      	bne.n	81062b2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81062a4:	4b15      	ldr	r3, [pc, #84]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062a8:	4a14      	ldr	r2, [pc, #80]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81062ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 81062b0:	e005      	b.n	81062be <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81062b2:	4b12      	ldr	r3, [pc, #72]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062b6:	4a11      	ldr	r2, [pc, #68]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81062bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81062be:	4b0f      	ldr	r3, [pc, #60]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	4a0e      	ldr	r2, [pc, #56]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81062ca:	f7fb fde1 	bl	8101e90 <HAL_GetTick>
 81062ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81062d0:	e008      	b.n	81062e4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81062d2:	f7fb fddd 	bl	8101e90 <HAL_GetTick>
 81062d6:	4602      	mov	r2, r0
 81062d8:	68bb      	ldr	r3, [r7, #8]
 81062da:	1ad3      	subs	r3, r2, r3
 81062dc:	2b02      	cmp	r3, #2
 81062de:	d901      	bls.n	81062e4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81062e0:	2303      	movs	r3, #3
 81062e2:	e006      	b.n	81062f2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81062e4:	4b05      	ldr	r3, [pc, #20]	; (81062fc <RCCEx_PLL3_Config+0x160>)
 81062e6:	681b      	ldr	r3, [r3, #0]
 81062e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81062ec:	2b00      	cmp	r3, #0
 81062ee:	d0f0      	beq.n	81062d2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81062f2:	4618      	mov	r0, r3
 81062f4:	3710      	adds	r7, #16
 81062f6:	46bd      	mov	sp, r7
 81062f8:	bd80      	pop	{r7, pc}
 81062fa:	bf00      	nop
 81062fc:	58024400 	.word	0x58024400

08106300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106300:	b580      	push	{r7, lr}
 8106302:	b082      	sub	sp, #8
 8106304:	af00      	add	r7, sp, #0
 8106306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	2b00      	cmp	r3, #0
 810630c:	d101      	bne.n	8106312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810630e:	2301      	movs	r3, #1
 8106310:	e049      	b.n	81063a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106318:	b2db      	uxtb	r3, r3
 810631a:	2b00      	cmp	r3, #0
 810631c:	d106      	bne.n	810632c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	2200      	movs	r2, #0
 8106322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106326:	6878      	ldr	r0, [r7, #4]
 8106328:	f7fb fb2c 	bl	8101984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	2202      	movs	r2, #2
 8106330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	681a      	ldr	r2, [r3, #0]
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	3304      	adds	r3, #4
 810633c:	4619      	mov	r1, r3
 810633e:	4610      	mov	r0, r2
 8106340:	f000 faa2 	bl	8106888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	2201      	movs	r2, #1
 8106348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810634c:	687b      	ldr	r3, [r7, #4]
 810634e:	2201      	movs	r2, #1
 8106350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	2201      	movs	r2, #1
 8106358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810635c:	687b      	ldr	r3, [r7, #4]
 810635e:	2201      	movs	r2, #1
 8106360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	2201      	movs	r2, #1
 8106368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	2201      	movs	r2, #1
 8106370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	2201      	movs	r2, #1
 8106378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	2201      	movs	r2, #1
 8106380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	2201      	movs	r2, #1
 8106388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	2201      	movs	r2, #1
 8106390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	2201      	movs	r2, #1
 8106398:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	2201      	movs	r2, #1
 81063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81063a4:	2300      	movs	r3, #0
}
 81063a6:	4618      	mov	r0, r3
 81063a8:	3708      	adds	r7, #8
 81063aa:	46bd      	mov	sp, r7
 81063ac:	bd80      	pop	{r7, pc}

081063ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81063ae:	b580      	push	{r7, lr}
 81063b0:	b082      	sub	sp, #8
 81063b2:	af00      	add	r7, sp, #0
 81063b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	d101      	bne.n	81063c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81063bc:	2301      	movs	r3, #1
 81063be:	e049      	b.n	8106454 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81063c6:	b2db      	uxtb	r3, r3
 81063c8:	2b00      	cmp	r3, #0
 81063ca:	d106      	bne.n	81063da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	2200      	movs	r2, #0
 81063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81063d4:	6878      	ldr	r0, [r7, #4]
 81063d6:	f000 f841 	bl	810645c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	2202      	movs	r2, #2
 81063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	681a      	ldr	r2, [r3, #0]
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	3304      	adds	r3, #4
 81063ea:	4619      	mov	r1, r3
 81063ec:	4610      	mov	r0, r2
 81063ee:	f000 fa4b 	bl	8106888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	2201      	movs	r2, #1
 81063f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	2201      	movs	r2, #1
 81063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	2201      	movs	r2, #1
 8106406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	2201      	movs	r2, #1
 810640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	2201      	movs	r2, #1
 8106416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	2201      	movs	r2, #1
 810641e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	2201      	movs	r2, #1
 8106426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	2201      	movs	r2, #1
 810642e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	2201      	movs	r2, #1
 8106436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	2201      	movs	r2, #1
 810643e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	2201      	movs	r2, #1
 8106446:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	2201      	movs	r2, #1
 810644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106452:	2300      	movs	r3, #0
}
 8106454:	4618      	mov	r0, r3
 8106456:	3708      	adds	r7, #8
 8106458:	46bd      	mov	sp, r7
 810645a:	bd80      	pop	{r7, pc}

0810645c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810645c:	b480      	push	{r7}
 810645e:	b083      	sub	sp, #12
 8106460:	af00      	add	r7, sp, #0
 8106462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106464:	bf00      	nop
 8106466:	370c      	adds	r7, #12
 8106468:	46bd      	mov	sp, r7
 810646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810646e:	4770      	bx	lr

08106470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8106470:	b580      	push	{r7, lr}
 8106472:	b086      	sub	sp, #24
 8106474:	af00      	add	r7, sp, #0
 8106476:	60f8      	str	r0, [r7, #12]
 8106478:	60b9      	str	r1, [r7, #8]
 810647a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810647c:	2300      	movs	r3, #0
 810647e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106486:	2b01      	cmp	r3, #1
 8106488:	d101      	bne.n	810648e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810648a:	2302      	movs	r3, #2
 810648c:	e0ff      	b.n	810668e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810648e:	68fb      	ldr	r3, [r7, #12]
 8106490:	2201      	movs	r2, #1
 8106492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	2b14      	cmp	r3, #20
 810649a:	f200 80f0 	bhi.w	810667e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810649e:	a201      	add	r2, pc, #4	; (adr r2, 81064a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064a4:	081064f9 	.word	0x081064f9
 81064a8:	0810667f 	.word	0x0810667f
 81064ac:	0810667f 	.word	0x0810667f
 81064b0:	0810667f 	.word	0x0810667f
 81064b4:	08106539 	.word	0x08106539
 81064b8:	0810667f 	.word	0x0810667f
 81064bc:	0810667f 	.word	0x0810667f
 81064c0:	0810667f 	.word	0x0810667f
 81064c4:	0810657b 	.word	0x0810657b
 81064c8:	0810667f 	.word	0x0810667f
 81064cc:	0810667f 	.word	0x0810667f
 81064d0:	0810667f 	.word	0x0810667f
 81064d4:	081065bb 	.word	0x081065bb
 81064d8:	0810667f 	.word	0x0810667f
 81064dc:	0810667f 	.word	0x0810667f
 81064e0:	0810667f 	.word	0x0810667f
 81064e4:	081065fd 	.word	0x081065fd
 81064e8:	0810667f 	.word	0x0810667f
 81064ec:	0810667f 	.word	0x0810667f
 81064f0:	0810667f 	.word	0x0810667f
 81064f4:	0810663d 	.word	0x0810663d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81064f8:	68fb      	ldr	r3, [r7, #12]
 81064fa:	681b      	ldr	r3, [r3, #0]
 81064fc:	68b9      	ldr	r1, [r7, #8]
 81064fe:	4618      	mov	r0, r3
 8106500:	f000 fa5c 	bl	81069bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106504:	68fb      	ldr	r3, [r7, #12]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	699a      	ldr	r2, [r3, #24]
 810650a:	68fb      	ldr	r3, [r7, #12]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	f042 0208 	orr.w	r2, r2, #8
 8106512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106514:	68fb      	ldr	r3, [r7, #12]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	699a      	ldr	r2, [r3, #24]
 810651a:	68fb      	ldr	r3, [r7, #12]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	f022 0204 	bic.w	r2, r2, #4
 8106522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106524:	68fb      	ldr	r3, [r7, #12]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	6999      	ldr	r1, [r3, #24]
 810652a:	68bb      	ldr	r3, [r7, #8]
 810652c:	691a      	ldr	r2, [r3, #16]
 810652e:	68fb      	ldr	r3, [r7, #12]
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	430a      	orrs	r2, r1
 8106534:	619a      	str	r2, [r3, #24]
      break;
 8106536:	e0a5      	b.n	8106684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106538:	68fb      	ldr	r3, [r7, #12]
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	68b9      	ldr	r1, [r7, #8]
 810653e:	4618      	mov	r0, r3
 8106540:	f000 facc 	bl	8106adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106544:	68fb      	ldr	r3, [r7, #12]
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	699a      	ldr	r2, [r3, #24]
 810654a:	68fb      	ldr	r3, [r7, #12]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106554:	68fb      	ldr	r3, [r7, #12]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	699a      	ldr	r2, [r3, #24]
 810655a:	68fb      	ldr	r3, [r7, #12]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106564:	68fb      	ldr	r3, [r7, #12]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	6999      	ldr	r1, [r3, #24]
 810656a:	68bb      	ldr	r3, [r7, #8]
 810656c:	691b      	ldr	r3, [r3, #16]
 810656e:	021a      	lsls	r2, r3, #8
 8106570:	68fb      	ldr	r3, [r7, #12]
 8106572:	681b      	ldr	r3, [r3, #0]
 8106574:	430a      	orrs	r2, r1
 8106576:	619a      	str	r2, [r3, #24]
      break;
 8106578:	e084      	b.n	8106684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810657a:	68fb      	ldr	r3, [r7, #12]
 810657c:	681b      	ldr	r3, [r3, #0]
 810657e:	68b9      	ldr	r1, [r7, #8]
 8106580:	4618      	mov	r0, r3
 8106582:	f000 fb35 	bl	8106bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106586:	68fb      	ldr	r3, [r7, #12]
 8106588:	681b      	ldr	r3, [r3, #0]
 810658a:	69da      	ldr	r2, [r3, #28]
 810658c:	68fb      	ldr	r3, [r7, #12]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	f042 0208 	orr.w	r2, r2, #8
 8106594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	69da      	ldr	r2, [r3, #28]
 810659c:	68fb      	ldr	r3, [r7, #12]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	f022 0204 	bic.w	r2, r2, #4
 81065a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81065a6:	68fb      	ldr	r3, [r7, #12]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	69d9      	ldr	r1, [r3, #28]
 81065ac:	68bb      	ldr	r3, [r7, #8]
 81065ae:	691a      	ldr	r2, [r3, #16]
 81065b0:	68fb      	ldr	r3, [r7, #12]
 81065b2:	681b      	ldr	r3, [r3, #0]
 81065b4:	430a      	orrs	r2, r1
 81065b6:	61da      	str	r2, [r3, #28]
      break;
 81065b8:	e064      	b.n	8106684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81065ba:	68fb      	ldr	r3, [r7, #12]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	68b9      	ldr	r1, [r7, #8]
 81065c0:	4618      	mov	r0, r3
 81065c2:	f000 fb9d 	bl	8106d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81065c6:	68fb      	ldr	r3, [r7, #12]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	69da      	ldr	r2, [r3, #28]
 81065cc:	68fb      	ldr	r3, [r7, #12]
 81065ce:	681b      	ldr	r3, [r3, #0]
 81065d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81065d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81065d6:	68fb      	ldr	r3, [r7, #12]
 81065d8:	681b      	ldr	r3, [r3, #0]
 81065da:	69da      	ldr	r2, [r3, #28]
 81065dc:	68fb      	ldr	r3, [r7, #12]
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81065e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81065e6:	68fb      	ldr	r3, [r7, #12]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	69d9      	ldr	r1, [r3, #28]
 81065ec:	68bb      	ldr	r3, [r7, #8]
 81065ee:	691b      	ldr	r3, [r3, #16]
 81065f0:	021a      	lsls	r2, r3, #8
 81065f2:	68fb      	ldr	r3, [r7, #12]
 81065f4:	681b      	ldr	r3, [r3, #0]
 81065f6:	430a      	orrs	r2, r1
 81065f8:	61da      	str	r2, [r3, #28]
      break;
 81065fa:	e043      	b.n	8106684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81065fc:	68fb      	ldr	r3, [r7, #12]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	68b9      	ldr	r1, [r7, #8]
 8106602:	4618      	mov	r0, r3
 8106604:	f000 fbe6 	bl	8106dd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106608:	68fb      	ldr	r3, [r7, #12]
 810660a:	681b      	ldr	r3, [r3, #0]
 810660c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810660e:	68fb      	ldr	r3, [r7, #12]
 8106610:	681b      	ldr	r3, [r3, #0]
 8106612:	f042 0208 	orr.w	r2, r2, #8
 8106616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106618:	68fb      	ldr	r3, [r7, #12]
 810661a:	681b      	ldr	r3, [r3, #0]
 810661c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810661e:	68fb      	ldr	r3, [r7, #12]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	f022 0204 	bic.w	r2, r2, #4
 8106626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810662e:	68bb      	ldr	r3, [r7, #8]
 8106630:	691a      	ldr	r2, [r3, #16]
 8106632:	68fb      	ldr	r3, [r7, #12]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	430a      	orrs	r2, r1
 8106638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810663a:	e023      	b.n	8106684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810663c:	68fb      	ldr	r3, [r7, #12]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	68b9      	ldr	r1, [r7, #8]
 8106642:	4618      	mov	r0, r3
 8106644:	f000 fc2a 	bl	8106e9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106648:	68fb      	ldr	r3, [r7, #12]
 810664a:	681b      	ldr	r3, [r3, #0]
 810664c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810664e:	68fb      	ldr	r3, [r7, #12]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106658:	68fb      	ldr	r3, [r7, #12]
 810665a:	681b      	ldr	r3, [r3, #0]
 810665c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106668:	68fb      	ldr	r3, [r7, #12]
 810666a:	681b      	ldr	r3, [r3, #0]
 810666c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810666e:	68bb      	ldr	r3, [r7, #8]
 8106670:	691b      	ldr	r3, [r3, #16]
 8106672:	021a      	lsls	r2, r3, #8
 8106674:	68fb      	ldr	r3, [r7, #12]
 8106676:	681b      	ldr	r3, [r3, #0]
 8106678:	430a      	orrs	r2, r1
 810667a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810667c:	e002      	b.n	8106684 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810667e:	2301      	movs	r3, #1
 8106680:	75fb      	strb	r3, [r7, #23]
      break;
 8106682:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106684:	68fb      	ldr	r3, [r7, #12]
 8106686:	2200      	movs	r2, #0
 8106688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810668c:	7dfb      	ldrb	r3, [r7, #23]
}
 810668e:	4618      	mov	r0, r3
 8106690:	3718      	adds	r7, #24
 8106692:	46bd      	mov	sp, r7
 8106694:	bd80      	pop	{r7, pc}
 8106696:	bf00      	nop

08106698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8106698:	b580      	push	{r7, lr}
 810669a:	b084      	sub	sp, #16
 810669c:	af00      	add	r7, sp, #0
 810669e:	6078      	str	r0, [r7, #4]
 81066a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81066a2:	2300      	movs	r3, #0
 81066a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81066a6:	687b      	ldr	r3, [r7, #4]
 81066a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81066ac:	2b01      	cmp	r3, #1
 81066ae:	d101      	bne.n	81066b4 <HAL_TIM_ConfigClockSource+0x1c>
 81066b0:	2302      	movs	r3, #2
 81066b2:	e0de      	b.n	8106872 <HAL_TIM_ConfigClockSource+0x1da>
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	2201      	movs	r2, #1
 81066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	2202      	movs	r2, #2
 81066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	689b      	ldr	r3, [r3, #8]
 81066ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81066cc:	68bb      	ldr	r3, [r7, #8]
 81066ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81066d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81066d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81066d8:	68bb      	ldr	r3, [r7, #8]
 81066da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81066de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	681b      	ldr	r3, [r3, #0]
 81066e4:	68ba      	ldr	r2, [r7, #8]
 81066e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81066e8:	683b      	ldr	r3, [r7, #0]
 81066ea:	681b      	ldr	r3, [r3, #0]
 81066ec:	4a63      	ldr	r2, [pc, #396]	; (810687c <HAL_TIM_ConfigClockSource+0x1e4>)
 81066ee:	4293      	cmp	r3, r2
 81066f0:	f000 80a9 	beq.w	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 81066f4:	4a61      	ldr	r2, [pc, #388]	; (810687c <HAL_TIM_ConfigClockSource+0x1e4>)
 81066f6:	4293      	cmp	r3, r2
 81066f8:	f200 80ae 	bhi.w	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 81066fc:	4a60      	ldr	r2, [pc, #384]	; (8106880 <HAL_TIM_ConfigClockSource+0x1e8>)
 81066fe:	4293      	cmp	r3, r2
 8106700:	f000 80a1 	beq.w	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 8106704:	4a5e      	ldr	r2, [pc, #376]	; (8106880 <HAL_TIM_ConfigClockSource+0x1e8>)
 8106706:	4293      	cmp	r3, r2
 8106708:	f200 80a6 	bhi.w	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 810670c:	4a5d      	ldr	r2, [pc, #372]	; (8106884 <HAL_TIM_ConfigClockSource+0x1ec>)
 810670e:	4293      	cmp	r3, r2
 8106710:	f000 8099 	beq.w	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 8106714:	4a5b      	ldr	r2, [pc, #364]	; (8106884 <HAL_TIM_ConfigClockSource+0x1ec>)
 8106716:	4293      	cmp	r3, r2
 8106718:	f200 809e 	bhi.w	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 810671c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106720:	f000 8091 	beq.w	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 8106724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106728:	f200 8096 	bhi.w	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 810672c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106730:	f000 8089 	beq.w	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 8106734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106738:	f200 808e 	bhi.w	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 810673c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106740:	d03e      	beq.n	81067c0 <HAL_TIM_ConfigClockSource+0x128>
 8106742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106746:	f200 8087 	bhi.w	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 810674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810674e:	f000 8086 	beq.w	810685e <HAL_TIM_ConfigClockSource+0x1c6>
 8106752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106756:	d87f      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106758:	2b70      	cmp	r3, #112	; 0x70
 810675a:	d01a      	beq.n	8106792 <HAL_TIM_ConfigClockSource+0xfa>
 810675c:	2b70      	cmp	r3, #112	; 0x70
 810675e:	d87b      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106760:	2b60      	cmp	r3, #96	; 0x60
 8106762:	d050      	beq.n	8106806 <HAL_TIM_ConfigClockSource+0x16e>
 8106764:	2b60      	cmp	r3, #96	; 0x60
 8106766:	d877      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106768:	2b50      	cmp	r3, #80	; 0x50
 810676a:	d03c      	beq.n	81067e6 <HAL_TIM_ConfigClockSource+0x14e>
 810676c:	2b50      	cmp	r3, #80	; 0x50
 810676e:	d873      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106770:	2b40      	cmp	r3, #64	; 0x40
 8106772:	d058      	beq.n	8106826 <HAL_TIM_ConfigClockSource+0x18e>
 8106774:	2b40      	cmp	r3, #64	; 0x40
 8106776:	d86f      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106778:	2b30      	cmp	r3, #48	; 0x30
 810677a:	d064      	beq.n	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 810677c:	2b30      	cmp	r3, #48	; 0x30
 810677e:	d86b      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106780:	2b20      	cmp	r3, #32
 8106782:	d060      	beq.n	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 8106784:	2b20      	cmp	r3, #32
 8106786:	d867      	bhi.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
 8106788:	2b00      	cmp	r3, #0
 810678a:	d05c      	beq.n	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 810678c:	2b10      	cmp	r3, #16
 810678e:	d05a      	beq.n	8106846 <HAL_TIM_ConfigClockSource+0x1ae>
 8106790:	e062      	b.n	8106858 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	6818      	ldr	r0, [r3, #0]
 8106796:	683b      	ldr	r3, [r7, #0]
 8106798:	6899      	ldr	r1, [r3, #8]
 810679a:	683b      	ldr	r3, [r7, #0]
 810679c:	685a      	ldr	r2, [r3, #4]
 810679e:	683b      	ldr	r3, [r7, #0]
 81067a0:	68db      	ldr	r3, [r3, #12]
 81067a2:	f000 fc5d 	bl	8107060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	681b      	ldr	r3, [r3, #0]
 81067aa:	689b      	ldr	r3, [r3, #8]
 81067ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81067ae:	68bb      	ldr	r3, [r7, #8]
 81067b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81067b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	681b      	ldr	r3, [r3, #0]
 81067ba:	68ba      	ldr	r2, [r7, #8]
 81067bc:	609a      	str	r2, [r3, #8]
      break;
 81067be:	e04f      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	6818      	ldr	r0, [r3, #0]
 81067c4:	683b      	ldr	r3, [r7, #0]
 81067c6:	6899      	ldr	r1, [r3, #8]
 81067c8:	683b      	ldr	r3, [r7, #0]
 81067ca:	685a      	ldr	r2, [r3, #4]
 81067cc:	683b      	ldr	r3, [r7, #0]
 81067ce:	68db      	ldr	r3, [r3, #12]
 81067d0:	f000 fc46 	bl	8107060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	681b      	ldr	r3, [r3, #0]
 81067d8:	689a      	ldr	r2, [r3, #8]
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	681b      	ldr	r3, [r3, #0]
 81067de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81067e2:	609a      	str	r2, [r3, #8]
      break;
 81067e4:	e03c      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	6818      	ldr	r0, [r3, #0]
 81067ea:	683b      	ldr	r3, [r7, #0]
 81067ec:	6859      	ldr	r1, [r3, #4]
 81067ee:	683b      	ldr	r3, [r7, #0]
 81067f0:	68db      	ldr	r3, [r3, #12]
 81067f2:	461a      	mov	r2, r3
 81067f4:	f000 fbb8 	bl	8106f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	2150      	movs	r1, #80	; 0x50
 81067fe:	4618      	mov	r0, r3
 8106800:	f000 fc11 	bl	8107026 <TIM_ITRx_SetConfig>
      break;
 8106804:	e02c      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	6818      	ldr	r0, [r3, #0]
 810680a:	683b      	ldr	r3, [r7, #0]
 810680c:	6859      	ldr	r1, [r3, #4]
 810680e:	683b      	ldr	r3, [r7, #0]
 8106810:	68db      	ldr	r3, [r3, #12]
 8106812:	461a      	mov	r2, r3
 8106814:	f000 fbd7 	bl	8106fc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	2160      	movs	r1, #96	; 0x60
 810681e:	4618      	mov	r0, r3
 8106820:	f000 fc01 	bl	8107026 <TIM_ITRx_SetConfig>
      break;
 8106824:	e01c      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	6818      	ldr	r0, [r3, #0]
 810682a:	683b      	ldr	r3, [r7, #0]
 810682c:	6859      	ldr	r1, [r3, #4]
 810682e:	683b      	ldr	r3, [r7, #0]
 8106830:	68db      	ldr	r3, [r3, #12]
 8106832:	461a      	mov	r2, r3
 8106834:	f000 fb98 	bl	8106f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	2140      	movs	r1, #64	; 0x40
 810683e:	4618      	mov	r0, r3
 8106840:	f000 fbf1 	bl	8107026 <TIM_ITRx_SetConfig>
      break;
 8106844:	e00c      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	681a      	ldr	r2, [r3, #0]
 810684a:	683b      	ldr	r3, [r7, #0]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	4619      	mov	r1, r3
 8106850:	4610      	mov	r0, r2
 8106852:	f000 fbe8 	bl	8107026 <TIM_ITRx_SetConfig>
      break;
 8106856:	e003      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8106858:	2301      	movs	r3, #1
 810685a:	73fb      	strb	r3, [r7, #15]
      break;
 810685c:	e000      	b.n	8106860 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810685e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	2201      	movs	r2, #1
 8106864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	2200      	movs	r2, #0
 810686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106870:	7bfb      	ldrb	r3, [r7, #15]
}
 8106872:	4618      	mov	r0, r3
 8106874:	3710      	adds	r7, #16
 8106876:	46bd      	mov	sp, r7
 8106878:	bd80      	pop	{r7, pc}
 810687a:	bf00      	nop
 810687c:	00100040 	.word	0x00100040
 8106880:	00100030 	.word	0x00100030
 8106884:	00100020 	.word	0x00100020

08106888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8106888:	b480      	push	{r7}
 810688a:	b085      	sub	sp, #20
 810688c:	af00      	add	r7, sp, #0
 810688e:	6078      	str	r0, [r7, #4]
 8106890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	681b      	ldr	r3, [r3, #0]
 8106896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	4a40      	ldr	r2, [pc, #256]	; (810699c <TIM_Base_SetConfig+0x114>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d013      	beq.n	81068c8 <TIM_Base_SetConfig+0x40>
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81068a6:	d00f      	beq.n	81068c8 <TIM_Base_SetConfig+0x40>
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	4a3d      	ldr	r2, [pc, #244]	; (81069a0 <TIM_Base_SetConfig+0x118>)
 81068ac:	4293      	cmp	r3, r2
 81068ae:	d00b      	beq.n	81068c8 <TIM_Base_SetConfig+0x40>
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	4a3c      	ldr	r2, [pc, #240]	; (81069a4 <TIM_Base_SetConfig+0x11c>)
 81068b4:	4293      	cmp	r3, r2
 81068b6:	d007      	beq.n	81068c8 <TIM_Base_SetConfig+0x40>
 81068b8:	687b      	ldr	r3, [r7, #4]
 81068ba:	4a3b      	ldr	r2, [pc, #236]	; (81069a8 <TIM_Base_SetConfig+0x120>)
 81068bc:	4293      	cmp	r3, r2
 81068be:	d003      	beq.n	81068c8 <TIM_Base_SetConfig+0x40>
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	4a3a      	ldr	r2, [pc, #232]	; (81069ac <TIM_Base_SetConfig+0x124>)
 81068c4:	4293      	cmp	r3, r2
 81068c6:	d108      	bne.n	81068da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81068c8:	68fb      	ldr	r3, [r7, #12]
 81068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81068ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81068d0:	683b      	ldr	r3, [r7, #0]
 81068d2:	685b      	ldr	r3, [r3, #4]
 81068d4:	68fa      	ldr	r2, [r7, #12]
 81068d6:	4313      	orrs	r3, r2
 81068d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	4a2f      	ldr	r2, [pc, #188]	; (810699c <TIM_Base_SetConfig+0x114>)
 81068de:	4293      	cmp	r3, r2
 81068e0:	d01f      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81068e8:	d01b      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 81068ea:	687b      	ldr	r3, [r7, #4]
 81068ec:	4a2c      	ldr	r2, [pc, #176]	; (81069a0 <TIM_Base_SetConfig+0x118>)
 81068ee:	4293      	cmp	r3, r2
 81068f0:	d017      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	4a2b      	ldr	r2, [pc, #172]	; (81069a4 <TIM_Base_SetConfig+0x11c>)
 81068f6:	4293      	cmp	r3, r2
 81068f8:	d013      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	4a2a      	ldr	r2, [pc, #168]	; (81069a8 <TIM_Base_SetConfig+0x120>)
 81068fe:	4293      	cmp	r3, r2
 8106900:	d00f      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	4a29      	ldr	r2, [pc, #164]	; (81069ac <TIM_Base_SetConfig+0x124>)
 8106906:	4293      	cmp	r3, r2
 8106908:	d00b      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	4a28      	ldr	r2, [pc, #160]	; (81069b0 <TIM_Base_SetConfig+0x128>)
 810690e:	4293      	cmp	r3, r2
 8106910:	d007      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	4a27      	ldr	r2, [pc, #156]	; (81069b4 <TIM_Base_SetConfig+0x12c>)
 8106916:	4293      	cmp	r3, r2
 8106918:	d003      	beq.n	8106922 <TIM_Base_SetConfig+0x9a>
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	4a26      	ldr	r2, [pc, #152]	; (81069b8 <TIM_Base_SetConfig+0x130>)
 810691e:	4293      	cmp	r3, r2
 8106920:	d108      	bne.n	8106934 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106922:	68fb      	ldr	r3, [r7, #12]
 8106924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810692a:	683b      	ldr	r3, [r7, #0]
 810692c:	68db      	ldr	r3, [r3, #12]
 810692e:	68fa      	ldr	r2, [r7, #12]
 8106930:	4313      	orrs	r3, r2
 8106932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106934:	68fb      	ldr	r3, [r7, #12]
 8106936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810693a:	683b      	ldr	r3, [r7, #0]
 810693c:	695b      	ldr	r3, [r3, #20]
 810693e:	4313      	orrs	r3, r2
 8106940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	68fa      	ldr	r2, [r7, #12]
 8106946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106948:	683b      	ldr	r3, [r7, #0]
 810694a:	689a      	ldr	r2, [r3, #8]
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106950:	683b      	ldr	r3, [r7, #0]
 8106952:	681a      	ldr	r2, [r3, #0]
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106958:	687b      	ldr	r3, [r7, #4]
 810695a:	4a10      	ldr	r2, [pc, #64]	; (810699c <TIM_Base_SetConfig+0x114>)
 810695c:	4293      	cmp	r3, r2
 810695e:	d00f      	beq.n	8106980 <TIM_Base_SetConfig+0xf8>
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	4a12      	ldr	r2, [pc, #72]	; (81069ac <TIM_Base_SetConfig+0x124>)
 8106964:	4293      	cmp	r3, r2
 8106966:	d00b      	beq.n	8106980 <TIM_Base_SetConfig+0xf8>
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	4a11      	ldr	r2, [pc, #68]	; (81069b0 <TIM_Base_SetConfig+0x128>)
 810696c:	4293      	cmp	r3, r2
 810696e:	d007      	beq.n	8106980 <TIM_Base_SetConfig+0xf8>
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	4a10      	ldr	r2, [pc, #64]	; (81069b4 <TIM_Base_SetConfig+0x12c>)
 8106974:	4293      	cmp	r3, r2
 8106976:	d003      	beq.n	8106980 <TIM_Base_SetConfig+0xf8>
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	4a0f      	ldr	r2, [pc, #60]	; (81069b8 <TIM_Base_SetConfig+0x130>)
 810697c:	4293      	cmp	r3, r2
 810697e:	d103      	bne.n	8106988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106980:	683b      	ldr	r3, [r7, #0]
 8106982:	691a      	ldr	r2, [r3, #16]
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	2201      	movs	r2, #1
 810698c:	615a      	str	r2, [r3, #20]
}
 810698e:	bf00      	nop
 8106990:	3714      	adds	r7, #20
 8106992:	46bd      	mov	sp, r7
 8106994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106998:	4770      	bx	lr
 810699a:	bf00      	nop
 810699c:	40010000 	.word	0x40010000
 81069a0:	40000400 	.word	0x40000400
 81069a4:	40000800 	.word	0x40000800
 81069a8:	40000c00 	.word	0x40000c00
 81069ac:	40010400 	.word	0x40010400
 81069b0:	40014000 	.word	0x40014000
 81069b4:	40014400 	.word	0x40014400
 81069b8:	40014800 	.word	0x40014800

081069bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81069bc:	b480      	push	{r7}
 81069be:	b087      	sub	sp, #28
 81069c0:	af00      	add	r7, sp, #0
 81069c2:	6078      	str	r0, [r7, #4]
 81069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	6a1b      	ldr	r3, [r3, #32]
 81069ca:	f023 0201 	bic.w	r2, r3, #1
 81069ce:	687b      	ldr	r3, [r7, #4]
 81069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	6a1b      	ldr	r3, [r3, #32]
 81069d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	685b      	ldr	r3, [r3, #4]
 81069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	699b      	ldr	r3, [r3, #24]
 81069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81069e4:	68fb      	ldr	r3, [r7, #12]
 81069e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81069ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81069f0:	68fb      	ldr	r3, [r7, #12]
 81069f2:	f023 0303 	bic.w	r3, r3, #3
 81069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81069f8:	683b      	ldr	r3, [r7, #0]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	68fa      	ldr	r2, [r7, #12]
 81069fe:	4313      	orrs	r3, r2
 8106a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8106a02:	697b      	ldr	r3, [r7, #20]
 8106a04:	f023 0302 	bic.w	r3, r3, #2
 8106a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8106a0a:	683b      	ldr	r3, [r7, #0]
 8106a0c:	689b      	ldr	r3, [r3, #8]
 8106a0e:	697a      	ldr	r2, [r7, #20]
 8106a10:	4313      	orrs	r3, r2
 8106a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106a14:	687b      	ldr	r3, [r7, #4]
 8106a16:	4a2c      	ldr	r2, [pc, #176]	; (8106ac8 <TIM_OC1_SetConfig+0x10c>)
 8106a18:	4293      	cmp	r3, r2
 8106a1a:	d00f      	beq.n	8106a3c <TIM_OC1_SetConfig+0x80>
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	4a2b      	ldr	r2, [pc, #172]	; (8106acc <TIM_OC1_SetConfig+0x110>)
 8106a20:	4293      	cmp	r3, r2
 8106a22:	d00b      	beq.n	8106a3c <TIM_OC1_SetConfig+0x80>
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	4a2a      	ldr	r2, [pc, #168]	; (8106ad0 <TIM_OC1_SetConfig+0x114>)
 8106a28:	4293      	cmp	r3, r2
 8106a2a:	d007      	beq.n	8106a3c <TIM_OC1_SetConfig+0x80>
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	4a29      	ldr	r2, [pc, #164]	; (8106ad4 <TIM_OC1_SetConfig+0x118>)
 8106a30:	4293      	cmp	r3, r2
 8106a32:	d003      	beq.n	8106a3c <TIM_OC1_SetConfig+0x80>
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	4a28      	ldr	r2, [pc, #160]	; (8106ad8 <TIM_OC1_SetConfig+0x11c>)
 8106a38:	4293      	cmp	r3, r2
 8106a3a:	d10c      	bne.n	8106a56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106a3c:	697b      	ldr	r3, [r7, #20]
 8106a3e:	f023 0308 	bic.w	r3, r3, #8
 8106a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106a44:	683b      	ldr	r3, [r7, #0]
 8106a46:	68db      	ldr	r3, [r3, #12]
 8106a48:	697a      	ldr	r2, [r7, #20]
 8106a4a:	4313      	orrs	r3, r2
 8106a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106a4e:	697b      	ldr	r3, [r7, #20]
 8106a50:	f023 0304 	bic.w	r3, r3, #4
 8106a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	4a1b      	ldr	r2, [pc, #108]	; (8106ac8 <TIM_OC1_SetConfig+0x10c>)
 8106a5a:	4293      	cmp	r3, r2
 8106a5c:	d00f      	beq.n	8106a7e <TIM_OC1_SetConfig+0xc2>
 8106a5e:	687b      	ldr	r3, [r7, #4]
 8106a60:	4a1a      	ldr	r2, [pc, #104]	; (8106acc <TIM_OC1_SetConfig+0x110>)
 8106a62:	4293      	cmp	r3, r2
 8106a64:	d00b      	beq.n	8106a7e <TIM_OC1_SetConfig+0xc2>
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	4a19      	ldr	r2, [pc, #100]	; (8106ad0 <TIM_OC1_SetConfig+0x114>)
 8106a6a:	4293      	cmp	r3, r2
 8106a6c:	d007      	beq.n	8106a7e <TIM_OC1_SetConfig+0xc2>
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	4a18      	ldr	r2, [pc, #96]	; (8106ad4 <TIM_OC1_SetConfig+0x118>)
 8106a72:	4293      	cmp	r3, r2
 8106a74:	d003      	beq.n	8106a7e <TIM_OC1_SetConfig+0xc2>
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	4a17      	ldr	r2, [pc, #92]	; (8106ad8 <TIM_OC1_SetConfig+0x11c>)
 8106a7a:	4293      	cmp	r3, r2
 8106a7c:	d111      	bne.n	8106aa2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106a7e:	693b      	ldr	r3, [r7, #16]
 8106a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106a86:	693b      	ldr	r3, [r7, #16]
 8106a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106a8e:	683b      	ldr	r3, [r7, #0]
 8106a90:	695b      	ldr	r3, [r3, #20]
 8106a92:	693a      	ldr	r2, [r7, #16]
 8106a94:	4313      	orrs	r3, r2
 8106a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106a98:	683b      	ldr	r3, [r7, #0]
 8106a9a:	699b      	ldr	r3, [r3, #24]
 8106a9c:	693a      	ldr	r2, [r7, #16]
 8106a9e:	4313      	orrs	r3, r2
 8106aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	693a      	ldr	r2, [r7, #16]
 8106aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106aa8:	687b      	ldr	r3, [r7, #4]
 8106aaa:	68fa      	ldr	r2, [r7, #12]
 8106aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106aae:	683b      	ldr	r3, [r7, #0]
 8106ab0:	685a      	ldr	r2, [r3, #4]
 8106ab2:	687b      	ldr	r3, [r7, #4]
 8106ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	697a      	ldr	r2, [r7, #20]
 8106aba:	621a      	str	r2, [r3, #32]
}
 8106abc:	bf00      	nop
 8106abe:	371c      	adds	r7, #28
 8106ac0:	46bd      	mov	sp, r7
 8106ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ac6:	4770      	bx	lr
 8106ac8:	40010000 	.word	0x40010000
 8106acc:	40010400 	.word	0x40010400
 8106ad0:	40014000 	.word	0x40014000
 8106ad4:	40014400 	.word	0x40014400
 8106ad8:	40014800 	.word	0x40014800

08106adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106adc:	b480      	push	{r7}
 8106ade:	b087      	sub	sp, #28
 8106ae0:	af00      	add	r7, sp, #0
 8106ae2:	6078      	str	r0, [r7, #4]
 8106ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	6a1b      	ldr	r3, [r3, #32]
 8106aea:	f023 0210 	bic.w	r2, r3, #16
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	6a1b      	ldr	r3, [r3, #32]
 8106af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	685b      	ldr	r3, [r3, #4]
 8106afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	699b      	ldr	r3, [r3, #24]
 8106b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106b04:	68fb      	ldr	r3, [r7, #12]
 8106b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106b10:	68fb      	ldr	r3, [r7, #12]
 8106b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106b18:	683b      	ldr	r3, [r7, #0]
 8106b1a:	681b      	ldr	r3, [r3, #0]
 8106b1c:	021b      	lsls	r3, r3, #8
 8106b1e:	68fa      	ldr	r2, [r7, #12]
 8106b20:	4313      	orrs	r3, r2
 8106b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106b24:	697b      	ldr	r3, [r7, #20]
 8106b26:	f023 0320 	bic.w	r3, r3, #32
 8106b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106b2c:	683b      	ldr	r3, [r7, #0]
 8106b2e:	689b      	ldr	r3, [r3, #8]
 8106b30:	011b      	lsls	r3, r3, #4
 8106b32:	697a      	ldr	r2, [r7, #20]
 8106b34:	4313      	orrs	r3, r2
 8106b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	4a28      	ldr	r2, [pc, #160]	; (8106bdc <TIM_OC2_SetConfig+0x100>)
 8106b3c:	4293      	cmp	r3, r2
 8106b3e:	d003      	beq.n	8106b48 <TIM_OC2_SetConfig+0x6c>
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	4a27      	ldr	r2, [pc, #156]	; (8106be0 <TIM_OC2_SetConfig+0x104>)
 8106b44:	4293      	cmp	r3, r2
 8106b46:	d10d      	bne.n	8106b64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106b48:	697b      	ldr	r3, [r7, #20]
 8106b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106b50:	683b      	ldr	r3, [r7, #0]
 8106b52:	68db      	ldr	r3, [r3, #12]
 8106b54:	011b      	lsls	r3, r3, #4
 8106b56:	697a      	ldr	r2, [r7, #20]
 8106b58:	4313      	orrs	r3, r2
 8106b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106b5c:	697b      	ldr	r3, [r7, #20]
 8106b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	4a1d      	ldr	r2, [pc, #116]	; (8106bdc <TIM_OC2_SetConfig+0x100>)
 8106b68:	4293      	cmp	r3, r2
 8106b6a:	d00f      	beq.n	8106b8c <TIM_OC2_SetConfig+0xb0>
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	4a1c      	ldr	r2, [pc, #112]	; (8106be0 <TIM_OC2_SetConfig+0x104>)
 8106b70:	4293      	cmp	r3, r2
 8106b72:	d00b      	beq.n	8106b8c <TIM_OC2_SetConfig+0xb0>
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	4a1b      	ldr	r2, [pc, #108]	; (8106be4 <TIM_OC2_SetConfig+0x108>)
 8106b78:	4293      	cmp	r3, r2
 8106b7a:	d007      	beq.n	8106b8c <TIM_OC2_SetConfig+0xb0>
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	4a1a      	ldr	r2, [pc, #104]	; (8106be8 <TIM_OC2_SetConfig+0x10c>)
 8106b80:	4293      	cmp	r3, r2
 8106b82:	d003      	beq.n	8106b8c <TIM_OC2_SetConfig+0xb0>
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	4a19      	ldr	r2, [pc, #100]	; (8106bec <TIM_OC2_SetConfig+0x110>)
 8106b88:	4293      	cmp	r3, r2
 8106b8a:	d113      	bne.n	8106bb4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106b8c:	693b      	ldr	r3, [r7, #16]
 8106b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106b94:	693b      	ldr	r3, [r7, #16]
 8106b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106b9c:	683b      	ldr	r3, [r7, #0]
 8106b9e:	695b      	ldr	r3, [r3, #20]
 8106ba0:	009b      	lsls	r3, r3, #2
 8106ba2:	693a      	ldr	r2, [r7, #16]
 8106ba4:	4313      	orrs	r3, r2
 8106ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106ba8:	683b      	ldr	r3, [r7, #0]
 8106baa:	699b      	ldr	r3, [r3, #24]
 8106bac:	009b      	lsls	r3, r3, #2
 8106bae:	693a      	ldr	r2, [r7, #16]
 8106bb0:	4313      	orrs	r3, r2
 8106bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	693a      	ldr	r2, [r7, #16]
 8106bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	68fa      	ldr	r2, [r7, #12]
 8106bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106bc0:	683b      	ldr	r3, [r7, #0]
 8106bc2:	685a      	ldr	r2, [r3, #4]
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	697a      	ldr	r2, [r7, #20]
 8106bcc:	621a      	str	r2, [r3, #32]
}
 8106bce:	bf00      	nop
 8106bd0:	371c      	adds	r7, #28
 8106bd2:	46bd      	mov	sp, r7
 8106bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bd8:	4770      	bx	lr
 8106bda:	bf00      	nop
 8106bdc:	40010000 	.word	0x40010000
 8106be0:	40010400 	.word	0x40010400
 8106be4:	40014000 	.word	0x40014000
 8106be8:	40014400 	.word	0x40014400
 8106bec:	40014800 	.word	0x40014800

08106bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106bf0:	b480      	push	{r7}
 8106bf2:	b087      	sub	sp, #28
 8106bf4:	af00      	add	r7, sp, #0
 8106bf6:	6078      	str	r0, [r7, #4]
 8106bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	6a1b      	ldr	r3, [r3, #32]
 8106bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	6a1b      	ldr	r3, [r3, #32]
 8106c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	685b      	ldr	r3, [r3, #4]
 8106c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	69db      	ldr	r3, [r3, #28]
 8106c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8106c18:	68fb      	ldr	r3, [r7, #12]
 8106c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106c24:	68fb      	ldr	r3, [r7, #12]
 8106c26:	f023 0303 	bic.w	r3, r3, #3
 8106c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106c2c:	683b      	ldr	r3, [r7, #0]
 8106c2e:	681b      	ldr	r3, [r3, #0]
 8106c30:	68fa      	ldr	r2, [r7, #12]
 8106c32:	4313      	orrs	r3, r2
 8106c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106c36:	697b      	ldr	r3, [r7, #20]
 8106c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106c3e:	683b      	ldr	r3, [r7, #0]
 8106c40:	689b      	ldr	r3, [r3, #8]
 8106c42:	021b      	lsls	r3, r3, #8
 8106c44:	697a      	ldr	r2, [r7, #20]
 8106c46:	4313      	orrs	r3, r2
 8106c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	4a27      	ldr	r2, [pc, #156]	; (8106cec <TIM_OC3_SetConfig+0xfc>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d003      	beq.n	8106c5a <TIM_OC3_SetConfig+0x6a>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	4a26      	ldr	r2, [pc, #152]	; (8106cf0 <TIM_OC3_SetConfig+0x100>)
 8106c56:	4293      	cmp	r3, r2
 8106c58:	d10d      	bne.n	8106c76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106c5a:	697b      	ldr	r3, [r7, #20]
 8106c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106c62:	683b      	ldr	r3, [r7, #0]
 8106c64:	68db      	ldr	r3, [r3, #12]
 8106c66:	021b      	lsls	r3, r3, #8
 8106c68:	697a      	ldr	r2, [r7, #20]
 8106c6a:	4313      	orrs	r3, r2
 8106c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106c6e:	697b      	ldr	r3, [r7, #20]
 8106c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	4a1c      	ldr	r2, [pc, #112]	; (8106cec <TIM_OC3_SetConfig+0xfc>)
 8106c7a:	4293      	cmp	r3, r2
 8106c7c:	d00f      	beq.n	8106c9e <TIM_OC3_SetConfig+0xae>
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	4a1b      	ldr	r2, [pc, #108]	; (8106cf0 <TIM_OC3_SetConfig+0x100>)
 8106c82:	4293      	cmp	r3, r2
 8106c84:	d00b      	beq.n	8106c9e <TIM_OC3_SetConfig+0xae>
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	4a1a      	ldr	r2, [pc, #104]	; (8106cf4 <TIM_OC3_SetConfig+0x104>)
 8106c8a:	4293      	cmp	r3, r2
 8106c8c:	d007      	beq.n	8106c9e <TIM_OC3_SetConfig+0xae>
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	4a19      	ldr	r2, [pc, #100]	; (8106cf8 <TIM_OC3_SetConfig+0x108>)
 8106c92:	4293      	cmp	r3, r2
 8106c94:	d003      	beq.n	8106c9e <TIM_OC3_SetConfig+0xae>
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	4a18      	ldr	r2, [pc, #96]	; (8106cfc <TIM_OC3_SetConfig+0x10c>)
 8106c9a:	4293      	cmp	r3, r2
 8106c9c:	d113      	bne.n	8106cc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106c9e:	693b      	ldr	r3, [r7, #16]
 8106ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106ca6:	693b      	ldr	r3, [r7, #16]
 8106ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106cae:	683b      	ldr	r3, [r7, #0]
 8106cb0:	695b      	ldr	r3, [r3, #20]
 8106cb2:	011b      	lsls	r3, r3, #4
 8106cb4:	693a      	ldr	r2, [r7, #16]
 8106cb6:	4313      	orrs	r3, r2
 8106cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106cba:	683b      	ldr	r3, [r7, #0]
 8106cbc:	699b      	ldr	r3, [r3, #24]
 8106cbe:	011b      	lsls	r3, r3, #4
 8106cc0:	693a      	ldr	r2, [r7, #16]
 8106cc2:	4313      	orrs	r3, r2
 8106cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	693a      	ldr	r2, [r7, #16]
 8106cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	68fa      	ldr	r2, [r7, #12]
 8106cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106cd2:	683b      	ldr	r3, [r7, #0]
 8106cd4:	685a      	ldr	r2, [r3, #4]
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	697a      	ldr	r2, [r7, #20]
 8106cde:	621a      	str	r2, [r3, #32]
}
 8106ce0:	bf00      	nop
 8106ce2:	371c      	adds	r7, #28
 8106ce4:	46bd      	mov	sp, r7
 8106ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cea:	4770      	bx	lr
 8106cec:	40010000 	.word	0x40010000
 8106cf0:	40010400 	.word	0x40010400
 8106cf4:	40014000 	.word	0x40014000
 8106cf8:	40014400 	.word	0x40014400
 8106cfc:	40014800 	.word	0x40014800

08106d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106d00:	b480      	push	{r7}
 8106d02:	b087      	sub	sp, #28
 8106d04:	af00      	add	r7, sp, #0
 8106d06:	6078      	str	r0, [r7, #4]
 8106d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	6a1b      	ldr	r3, [r3, #32]
 8106d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	6a1b      	ldr	r3, [r3, #32]
 8106d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	685b      	ldr	r3, [r3, #4]
 8106d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	69db      	ldr	r3, [r3, #28]
 8106d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8106d28:	68fb      	ldr	r3, [r7, #12]
 8106d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8106d34:	68fb      	ldr	r3, [r7, #12]
 8106d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106d3c:	683b      	ldr	r3, [r7, #0]
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	021b      	lsls	r3, r3, #8
 8106d42:	68fa      	ldr	r2, [r7, #12]
 8106d44:	4313      	orrs	r3, r2
 8106d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106d48:	693b      	ldr	r3, [r7, #16]
 8106d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8106d50:	683b      	ldr	r3, [r7, #0]
 8106d52:	689b      	ldr	r3, [r3, #8]
 8106d54:	031b      	lsls	r3, r3, #12
 8106d56:	693a      	ldr	r2, [r7, #16]
 8106d58:	4313      	orrs	r3, r2
 8106d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106d5c:	687b      	ldr	r3, [r7, #4]
 8106d5e:	4a18      	ldr	r2, [pc, #96]	; (8106dc0 <TIM_OC4_SetConfig+0xc0>)
 8106d60:	4293      	cmp	r3, r2
 8106d62:	d00f      	beq.n	8106d84 <TIM_OC4_SetConfig+0x84>
 8106d64:	687b      	ldr	r3, [r7, #4]
 8106d66:	4a17      	ldr	r2, [pc, #92]	; (8106dc4 <TIM_OC4_SetConfig+0xc4>)
 8106d68:	4293      	cmp	r3, r2
 8106d6a:	d00b      	beq.n	8106d84 <TIM_OC4_SetConfig+0x84>
 8106d6c:	687b      	ldr	r3, [r7, #4]
 8106d6e:	4a16      	ldr	r2, [pc, #88]	; (8106dc8 <TIM_OC4_SetConfig+0xc8>)
 8106d70:	4293      	cmp	r3, r2
 8106d72:	d007      	beq.n	8106d84 <TIM_OC4_SetConfig+0x84>
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	4a15      	ldr	r2, [pc, #84]	; (8106dcc <TIM_OC4_SetConfig+0xcc>)
 8106d78:	4293      	cmp	r3, r2
 8106d7a:	d003      	beq.n	8106d84 <TIM_OC4_SetConfig+0x84>
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	4a14      	ldr	r2, [pc, #80]	; (8106dd0 <TIM_OC4_SetConfig+0xd0>)
 8106d80:	4293      	cmp	r3, r2
 8106d82:	d109      	bne.n	8106d98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106d84:	697b      	ldr	r3, [r7, #20]
 8106d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106d8c:	683b      	ldr	r3, [r7, #0]
 8106d8e:	695b      	ldr	r3, [r3, #20]
 8106d90:	019b      	lsls	r3, r3, #6
 8106d92:	697a      	ldr	r2, [r7, #20]
 8106d94:	4313      	orrs	r3, r2
 8106d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	697a      	ldr	r2, [r7, #20]
 8106d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	68fa      	ldr	r2, [r7, #12]
 8106da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106da4:	683b      	ldr	r3, [r7, #0]
 8106da6:	685a      	ldr	r2, [r3, #4]
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	693a      	ldr	r2, [r7, #16]
 8106db0:	621a      	str	r2, [r3, #32]
}
 8106db2:	bf00      	nop
 8106db4:	371c      	adds	r7, #28
 8106db6:	46bd      	mov	sp, r7
 8106db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dbc:	4770      	bx	lr
 8106dbe:	bf00      	nop
 8106dc0:	40010000 	.word	0x40010000
 8106dc4:	40010400 	.word	0x40010400
 8106dc8:	40014000 	.word	0x40014000
 8106dcc:	40014400 	.word	0x40014400
 8106dd0:	40014800 	.word	0x40014800

08106dd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106dd4:	b480      	push	{r7}
 8106dd6:	b087      	sub	sp, #28
 8106dd8:	af00      	add	r7, sp, #0
 8106dda:	6078      	str	r0, [r7, #4]
 8106ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106dde:	687b      	ldr	r3, [r7, #4]
 8106de0:	6a1b      	ldr	r3, [r3, #32]
 8106de2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106de6:	687b      	ldr	r3, [r7, #4]
 8106de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	6a1b      	ldr	r3, [r3, #32]
 8106dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	685b      	ldr	r3, [r3, #4]
 8106df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106dfc:	68fb      	ldr	r3, [r7, #12]
 8106dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106e08:	683b      	ldr	r3, [r7, #0]
 8106e0a:	681b      	ldr	r3, [r3, #0]
 8106e0c:	68fa      	ldr	r2, [r7, #12]
 8106e0e:	4313      	orrs	r3, r2
 8106e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8106e12:	693b      	ldr	r3, [r7, #16]
 8106e14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106e1a:	683b      	ldr	r3, [r7, #0]
 8106e1c:	689b      	ldr	r3, [r3, #8]
 8106e1e:	041b      	lsls	r3, r3, #16
 8106e20:	693a      	ldr	r2, [r7, #16]
 8106e22:	4313      	orrs	r3, r2
 8106e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	4a17      	ldr	r2, [pc, #92]	; (8106e88 <TIM_OC5_SetConfig+0xb4>)
 8106e2a:	4293      	cmp	r3, r2
 8106e2c:	d00f      	beq.n	8106e4e <TIM_OC5_SetConfig+0x7a>
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	4a16      	ldr	r2, [pc, #88]	; (8106e8c <TIM_OC5_SetConfig+0xb8>)
 8106e32:	4293      	cmp	r3, r2
 8106e34:	d00b      	beq.n	8106e4e <TIM_OC5_SetConfig+0x7a>
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	4a15      	ldr	r2, [pc, #84]	; (8106e90 <TIM_OC5_SetConfig+0xbc>)
 8106e3a:	4293      	cmp	r3, r2
 8106e3c:	d007      	beq.n	8106e4e <TIM_OC5_SetConfig+0x7a>
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	4a14      	ldr	r2, [pc, #80]	; (8106e94 <TIM_OC5_SetConfig+0xc0>)
 8106e42:	4293      	cmp	r3, r2
 8106e44:	d003      	beq.n	8106e4e <TIM_OC5_SetConfig+0x7a>
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	4a13      	ldr	r2, [pc, #76]	; (8106e98 <TIM_OC5_SetConfig+0xc4>)
 8106e4a:	4293      	cmp	r3, r2
 8106e4c:	d109      	bne.n	8106e62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106e4e:	697b      	ldr	r3, [r7, #20]
 8106e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106e56:	683b      	ldr	r3, [r7, #0]
 8106e58:	695b      	ldr	r3, [r3, #20]
 8106e5a:	021b      	lsls	r3, r3, #8
 8106e5c:	697a      	ldr	r2, [r7, #20]
 8106e5e:	4313      	orrs	r3, r2
 8106e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	697a      	ldr	r2, [r7, #20]
 8106e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	68fa      	ldr	r2, [r7, #12]
 8106e6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106e6e:	683b      	ldr	r3, [r7, #0]
 8106e70:	685a      	ldr	r2, [r3, #4]
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	693a      	ldr	r2, [r7, #16]
 8106e7a:	621a      	str	r2, [r3, #32]
}
 8106e7c:	bf00      	nop
 8106e7e:	371c      	adds	r7, #28
 8106e80:	46bd      	mov	sp, r7
 8106e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e86:	4770      	bx	lr
 8106e88:	40010000 	.word	0x40010000
 8106e8c:	40010400 	.word	0x40010400
 8106e90:	40014000 	.word	0x40014000
 8106e94:	40014400 	.word	0x40014400
 8106e98:	40014800 	.word	0x40014800

08106e9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106e9c:	b480      	push	{r7}
 8106e9e:	b087      	sub	sp, #28
 8106ea0:	af00      	add	r7, sp, #0
 8106ea2:	6078      	str	r0, [r7, #4]
 8106ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	6a1b      	ldr	r3, [r3, #32]
 8106eaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8106eae:	687b      	ldr	r3, [r7, #4]
 8106eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	6a1b      	ldr	r3, [r3, #32]
 8106eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	685b      	ldr	r3, [r3, #4]
 8106ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106ec4:	68fb      	ldr	r3, [r7, #12]
 8106ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106ed0:	683b      	ldr	r3, [r7, #0]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	021b      	lsls	r3, r3, #8
 8106ed6:	68fa      	ldr	r2, [r7, #12]
 8106ed8:	4313      	orrs	r3, r2
 8106eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106edc:	693b      	ldr	r3, [r7, #16]
 8106ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106ee4:	683b      	ldr	r3, [r7, #0]
 8106ee6:	689b      	ldr	r3, [r3, #8]
 8106ee8:	051b      	lsls	r3, r3, #20
 8106eea:	693a      	ldr	r2, [r7, #16]
 8106eec:	4313      	orrs	r3, r2
 8106eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106ef0:	687b      	ldr	r3, [r7, #4]
 8106ef2:	4a18      	ldr	r2, [pc, #96]	; (8106f54 <TIM_OC6_SetConfig+0xb8>)
 8106ef4:	4293      	cmp	r3, r2
 8106ef6:	d00f      	beq.n	8106f18 <TIM_OC6_SetConfig+0x7c>
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	4a17      	ldr	r2, [pc, #92]	; (8106f58 <TIM_OC6_SetConfig+0xbc>)
 8106efc:	4293      	cmp	r3, r2
 8106efe:	d00b      	beq.n	8106f18 <TIM_OC6_SetConfig+0x7c>
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	4a16      	ldr	r2, [pc, #88]	; (8106f5c <TIM_OC6_SetConfig+0xc0>)
 8106f04:	4293      	cmp	r3, r2
 8106f06:	d007      	beq.n	8106f18 <TIM_OC6_SetConfig+0x7c>
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	4a15      	ldr	r2, [pc, #84]	; (8106f60 <TIM_OC6_SetConfig+0xc4>)
 8106f0c:	4293      	cmp	r3, r2
 8106f0e:	d003      	beq.n	8106f18 <TIM_OC6_SetConfig+0x7c>
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	4a14      	ldr	r2, [pc, #80]	; (8106f64 <TIM_OC6_SetConfig+0xc8>)
 8106f14:	4293      	cmp	r3, r2
 8106f16:	d109      	bne.n	8106f2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106f18:	697b      	ldr	r3, [r7, #20]
 8106f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8106f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8106f20:	683b      	ldr	r3, [r7, #0]
 8106f22:	695b      	ldr	r3, [r3, #20]
 8106f24:	029b      	lsls	r3, r3, #10
 8106f26:	697a      	ldr	r2, [r7, #20]
 8106f28:	4313      	orrs	r3, r2
 8106f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	697a      	ldr	r2, [r7, #20]
 8106f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	68fa      	ldr	r2, [r7, #12]
 8106f36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106f38:	683b      	ldr	r3, [r7, #0]
 8106f3a:	685a      	ldr	r2, [r3, #4]
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	693a      	ldr	r2, [r7, #16]
 8106f44:	621a      	str	r2, [r3, #32]
}
 8106f46:	bf00      	nop
 8106f48:	371c      	adds	r7, #28
 8106f4a:	46bd      	mov	sp, r7
 8106f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f50:	4770      	bx	lr
 8106f52:	bf00      	nop
 8106f54:	40010000 	.word	0x40010000
 8106f58:	40010400 	.word	0x40010400
 8106f5c:	40014000 	.word	0x40014000
 8106f60:	40014400 	.word	0x40014400
 8106f64:	40014800 	.word	0x40014800

08106f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106f68:	b480      	push	{r7}
 8106f6a:	b087      	sub	sp, #28
 8106f6c:	af00      	add	r7, sp, #0
 8106f6e:	60f8      	str	r0, [r7, #12]
 8106f70:	60b9      	str	r1, [r7, #8]
 8106f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8106f74:	68fb      	ldr	r3, [r7, #12]
 8106f76:	6a1b      	ldr	r3, [r3, #32]
 8106f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106f7a:	68fb      	ldr	r3, [r7, #12]
 8106f7c:	6a1b      	ldr	r3, [r3, #32]
 8106f7e:	f023 0201 	bic.w	r2, r3, #1
 8106f82:	68fb      	ldr	r3, [r7, #12]
 8106f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106f86:	68fb      	ldr	r3, [r7, #12]
 8106f88:	699b      	ldr	r3, [r3, #24]
 8106f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106f8c:	693b      	ldr	r3, [r7, #16]
 8106f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8106f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	011b      	lsls	r3, r3, #4
 8106f98:	693a      	ldr	r2, [r7, #16]
 8106f9a:	4313      	orrs	r3, r2
 8106f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106f9e:	697b      	ldr	r3, [r7, #20]
 8106fa0:	f023 030a 	bic.w	r3, r3, #10
 8106fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106fa6:	697a      	ldr	r2, [r7, #20]
 8106fa8:	68bb      	ldr	r3, [r7, #8]
 8106faa:	4313      	orrs	r3, r2
 8106fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	693a      	ldr	r2, [r7, #16]
 8106fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106fb4:	68fb      	ldr	r3, [r7, #12]
 8106fb6:	697a      	ldr	r2, [r7, #20]
 8106fb8:	621a      	str	r2, [r3, #32]
}
 8106fba:	bf00      	nop
 8106fbc:	371c      	adds	r7, #28
 8106fbe:	46bd      	mov	sp, r7
 8106fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fc4:	4770      	bx	lr

08106fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106fc6:	b480      	push	{r7}
 8106fc8:	b087      	sub	sp, #28
 8106fca:	af00      	add	r7, sp, #0
 8106fcc:	60f8      	str	r0, [r7, #12]
 8106fce:	60b9      	str	r1, [r7, #8]
 8106fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106fd2:	68fb      	ldr	r3, [r7, #12]
 8106fd4:	6a1b      	ldr	r3, [r3, #32]
 8106fd6:	f023 0210 	bic.w	r2, r3, #16
 8106fda:	68fb      	ldr	r3, [r7, #12]
 8106fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106fde:	68fb      	ldr	r3, [r7, #12]
 8106fe0:	699b      	ldr	r3, [r3, #24]
 8106fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106fe4:	68fb      	ldr	r3, [r7, #12]
 8106fe6:	6a1b      	ldr	r3, [r3, #32]
 8106fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106fea:	697b      	ldr	r3, [r7, #20]
 8106fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	031b      	lsls	r3, r3, #12
 8106ff6:	697a      	ldr	r2, [r7, #20]
 8106ff8:	4313      	orrs	r3, r2
 8106ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106ffc:	693b      	ldr	r3, [r7, #16]
 8106ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8107004:	68bb      	ldr	r3, [r7, #8]
 8107006:	011b      	lsls	r3, r3, #4
 8107008:	693a      	ldr	r2, [r7, #16]
 810700a:	4313      	orrs	r3, r2
 810700c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	697a      	ldr	r2, [r7, #20]
 8107012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107014:	68fb      	ldr	r3, [r7, #12]
 8107016:	693a      	ldr	r2, [r7, #16]
 8107018:	621a      	str	r2, [r3, #32]
}
 810701a:	bf00      	nop
 810701c:	371c      	adds	r7, #28
 810701e:	46bd      	mov	sp, r7
 8107020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107024:	4770      	bx	lr

08107026 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8107026:	b480      	push	{r7}
 8107028:	b085      	sub	sp, #20
 810702a:	af00      	add	r7, sp, #0
 810702c:	6078      	str	r0, [r7, #4]
 810702e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	689b      	ldr	r3, [r3, #8]
 8107034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107036:	68fb      	ldr	r3, [r7, #12]
 8107038:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810703c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8107042:	683a      	ldr	r2, [r7, #0]
 8107044:	68fb      	ldr	r3, [r7, #12]
 8107046:	4313      	orrs	r3, r2
 8107048:	f043 0307 	orr.w	r3, r3, #7
 810704c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	68fa      	ldr	r2, [r7, #12]
 8107052:	609a      	str	r2, [r3, #8]
}
 8107054:	bf00      	nop
 8107056:	3714      	adds	r7, #20
 8107058:	46bd      	mov	sp, r7
 810705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810705e:	4770      	bx	lr

08107060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8107060:	b480      	push	{r7}
 8107062:	b087      	sub	sp, #28
 8107064:	af00      	add	r7, sp, #0
 8107066:	60f8      	str	r0, [r7, #12]
 8107068:	60b9      	str	r1, [r7, #8]
 810706a:	607a      	str	r2, [r7, #4]
 810706c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810706e:	68fb      	ldr	r3, [r7, #12]
 8107070:	689b      	ldr	r3, [r3, #8]
 8107072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107074:	697b      	ldr	r3, [r7, #20]
 8107076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810707a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810707c:	683b      	ldr	r3, [r7, #0]
 810707e:	021a      	lsls	r2, r3, #8
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	431a      	orrs	r2, r3
 8107084:	68bb      	ldr	r3, [r7, #8]
 8107086:	4313      	orrs	r3, r2
 8107088:	697a      	ldr	r2, [r7, #20]
 810708a:	4313      	orrs	r3, r2
 810708c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810708e:	68fb      	ldr	r3, [r7, #12]
 8107090:	697a      	ldr	r2, [r7, #20]
 8107092:	609a      	str	r2, [r3, #8]
}
 8107094:	bf00      	nop
 8107096:	371c      	adds	r7, #28
 8107098:	46bd      	mov	sp, r7
 810709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810709e:	4770      	bx	lr

081070a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81070a0:	b480      	push	{r7}
 81070a2:	b085      	sub	sp, #20
 81070a4:	af00      	add	r7, sp, #0
 81070a6:	6078      	str	r0, [r7, #4]
 81070a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81070b0:	2b01      	cmp	r3, #1
 81070b2:	d101      	bne.n	81070b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81070b4:	2302      	movs	r3, #2
 81070b6:	e06d      	b.n	8107194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	2201      	movs	r2, #1
 81070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	2202      	movs	r2, #2
 81070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	685b      	ldr	r3, [r3, #4]
 81070ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	681b      	ldr	r3, [r3, #0]
 81070d4:	689b      	ldr	r3, [r3, #8]
 81070d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	4a30      	ldr	r2, [pc, #192]	; (81071a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81070de:	4293      	cmp	r3, r2
 81070e0:	d004      	beq.n	81070ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	4a2f      	ldr	r2, [pc, #188]	; (81071a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81070e8:	4293      	cmp	r3, r2
 81070ea:	d108      	bne.n	81070fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81070ec:	68fb      	ldr	r3, [r7, #12]
 81070ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81070f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81070f4:	683b      	ldr	r3, [r7, #0]
 81070f6:	685b      	ldr	r3, [r3, #4]
 81070f8:	68fa      	ldr	r2, [r7, #12]
 81070fa:	4313      	orrs	r3, r2
 81070fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81070fe:	68fb      	ldr	r3, [r7, #12]
 8107100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107104:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107106:	683b      	ldr	r3, [r7, #0]
 8107108:	681b      	ldr	r3, [r3, #0]
 810710a:	68fa      	ldr	r2, [r7, #12]
 810710c:	4313      	orrs	r3, r2
 810710e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	68fa      	ldr	r2, [r7, #12]
 8107116:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	681b      	ldr	r3, [r3, #0]
 810711c:	4a20      	ldr	r2, [pc, #128]	; (81071a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810711e:	4293      	cmp	r3, r2
 8107120:	d022      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810712a:	d01d      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	681b      	ldr	r3, [r3, #0]
 8107130:	4a1d      	ldr	r2, [pc, #116]	; (81071a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107132:	4293      	cmp	r3, r2
 8107134:	d018      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	681b      	ldr	r3, [r3, #0]
 810713a:	4a1c      	ldr	r2, [pc, #112]	; (81071ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810713c:	4293      	cmp	r3, r2
 810713e:	d013      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	681b      	ldr	r3, [r3, #0]
 8107144:	4a1a      	ldr	r2, [pc, #104]	; (81071b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107146:	4293      	cmp	r3, r2
 8107148:	d00e      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	4a15      	ldr	r2, [pc, #84]	; (81071a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107150:	4293      	cmp	r3, r2
 8107152:	d009      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	4a16      	ldr	r2, [pc, #88]	; (81071b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810715a:	4293      	cmp	r3, r2
 810715c:	d004      	beq.n	8107168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	4a15      	ldr	r2, [pc, #84]	; (81071b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107164:	4293      	cmp	r3, r2
 8107166:	d10c      	bne.n	8107182 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107168:	68bb      	ldr	r3, [r7, #8]
 810716a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810716e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107170:	683b      	ldr	r3, [r7, #0]
 8107172:	689b      	ldr	r3, [r3, #8]
 8107174:	68ba      	ldr	r2, [r7, #8]
 8107176:	4313      	orrs	r3, r2
 8107178:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	68ba      	ldr	r2, [r7, #8]
 8107180:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107182:	687b      	ldr	r3, [r7, #4]
 8107184:	2201      	movs	r2, #1
 8107186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	2200      	movs	r2, #0
 810718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107192:	2300      	movs	r3, #0
}
 8107194:	4618      	mov	r0, r3
 8107196:	3714      	adds	r7, #20
 8107198:	46bd      	mov	sp, r7
 810719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810719e:	4770      	bx	lr
 81071a0:	40010000 	.word	0x40010000
 81071a4:	40010400 	.word	0x40010400
 81071a8:	40000400 	.word	0x40000400
 81071ac:	40000800 	.word	0x40000800
 81071b0:	40000c00 	.word	0x40000c00
 81071b4:	40001800 	.word	0x40001800
 81071b8:	40014000 	.word	0x40014000

081071bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81071bc:	b480      	push	{r7}
 81071be:	b085      	sub	sp, #20
 81071c0:	af00      	add	r7, sp, #0
 81071c2:	6078      	str	r0, [r7, #4]
 81071c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81071c6:	2300      	movs	r3, #0
 81071c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81071d0:	2b01      	cmp	r3, #1
 81071d2:	d101      	bne.n	81071d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81071d4:	2302      	movs	r3, #2
 81071d6:	e065      	b.n	81072a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	2201      	movs	r2, #1
 81071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81071e0:	68fb      	ldr	r3, [r7, #12]
 81071e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81071e6:	683b      	ldr	r3, [r7, #0]
 81071e8:	68db      	ldr	r3, [r3, #12]
 81071ea:	4313      	orrs	r3, r2
 81071ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81071f4:	683b      	ldr	r3, [r7, #0]
 81071f6:	689b      	ldr	r3, [r3, #8]
 81071f8:	4313      	orrs	r3, r2
 81071fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107202:	683b      	ldr	r3, [r7, #0]
 8107204:	685b      	ldr	r3, [r3, #4]
 8107206:	4313      	orrs	r3, r2
 8107208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810720a:	68fb      	ldr	r3, [r7, #12]
 810720c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107210:	683b      	ldr	r3, [r7, #0]
 8107212:	681b      	ldr	r3, [r3, #0]
 8107214:	4313      	orrs	r3, r2
 8107216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107218:	68fb      	ldr	r3, [r7, #12]
 810721a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810721e:	683b      	ldr	r3, [r7, #0]
 8107220:	691b      	ldr	r3, [r3, #16]
 8107222:	4313      	orrs	r3, r2
 8107224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107226:	68fb      	ldr	r3, [r7, #12]
 8107228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810722c:	683b      	ldr	r3, [r7, #0]
 810722e:	695b      	ldr	r3, [r3, #20]
 8107230:	4313      	orrs	r3, r2
 8107232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107234:	68fb      	ldr	r3, [r7, #12]
 8107236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810723a:	683b      	ldr	r3, [r7, #0]
 810723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810723e:	4313      	orrs	r3, r2
 8107240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107242:	68fb      	ldr	r3, [r7, #12]
 8107244:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107248:	683b      	ldr	r3, [r7, #0]
 810724a:	699b      	ldr	r3, [r3, #24]
 810724c:	041b      	lsls	r3, r3, #16
 810724e:	4313      	orrs	r3, r2
 8107250:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	681b      	ldr	r3, [r3, #0]
 8107256:	4a16      	ldr	r2, [pc, #88]	; (81072b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107258:	4293      	cmp	r3, r2
 810725a:	d004      	beq.n	8107266 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	681b      	ldr	r3, [r3, #0]
 8107260:	4a14      	ldr	r2, [pc, #80]	; (81072b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107262:	4293      	cmp	r3, r2
 8107264:	d115      	bne.n	8107292 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810726c:	683b      	ldr	r3, [r7, #0]
 810726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107270:	051b      	lsls	r3, r3, #20
 8107272:	4313      	orrs	r3, r2
 8107274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810727c:	683b      	ldr	r3, [r7, #0]
 810727e:	69db      	ldr	r3, [r3, #28]
 8107280:	4313      	orrs	r3, r2
 8107282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107284:	68fb      	ldr	r3, [r7, #12]
 8107286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810728a:	683b      	ldr	r3, [r7, #0]
 810728c:	6a1b      	ldr	r3, [r3, #32]
 810728e:	4313      	orrs	r3, r2
 8107290:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	68fa      	ldr	r2, [r7, #12]
 8107298:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	2200      	movs	r2, #0
 810729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81072a2:	2300      	movs	r3, #0
}
 81072a4:	4618      	mov	r0, r3
 81072a6:	3714      	adds	r7, #20
 81072a8:	46bd      	mov	sp, r7
 81072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072ae:	4770      	bx	lr
 81072b0:	40010000 	.word	0x40010000
 81072b4:	40010400 	.word	0x40010400

081072b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81072b8:	b580      	push	{r7, lr}
 81072ba:	b082      	sub	sp, #8
 81072bc:	af00      	add	r7, sp, #0
 81072be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	2b00      	cmp	r3, #0
 81072c4:	d101      	bne.n	81072ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81072c6:	2301      	movs	r3, #1
 81072c8:	e042      	b.n	8107350 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81072d0:	2b00      	cmp	r3, #0
 81072d2:	d106      	bne.n	81072e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	2200      	movs	r2, #0
 81072d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81072dc:	6878      	ldr	r0, [r7, #4]
 81072de:	f7fa fbaf 	bl	8101a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	2224      	movs	r2, #36	; 0x24
 81072e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	681a      	ldr	r2, [r3, #0]
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	f022 0201 	bic.w	r2, r2, #1
 81072f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81072fa:	6878      	ldr	r0, [r7, #4]
 81072fc:	f000 f8c2 	bl	8107484 <UART_SetConfig>
 8107300:	4603      	mov	r3, r0
 8107302:	2b01      	cmp	r3, #1
 8107304:	d101      	bne.n	810730a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107306:	2301      	movs	r3, #1
 8107308:	e022      	b.n	8107350 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810730e:	2b00      	cmp	r3, #0
 8107310:	d002      	beq.n	8107318 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107312:	6878      	ldr	r0, [r7, #4]
 8107314:	f000 fe1e 	bl	8107f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	685a      	ldr	r2, [r3, #4]
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	681b      	ldr	r3, [r3, #0]
 8107322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	689a      	ldr	r2, [r3, #8]
 810732e:	687b      	ldr	r3, [r7, #4]
 8107330:	681b      	ldr	r3, [r3, #0]
 8107332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	681b      	ldr	r3, [r3, #0]
 810733c:	681a      	ldr	r2, [r3, #0]
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	f042 0201 	orr.w	r2, r2, #1
 8107346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107348:	6878      	ldr	r0, [r7, #4]
 810734a:	f000 fea5 	bl	8108098 <UART_CheckIdleState>
 810734e:	4603      	mov	r3, r0
}
 8107350:	4618      	mov	r0, r3
 8107352:	3708      	adds	r7, #8
 8107354:	46bd      	mov	sp, r7
 8107356:	bd80      	pop	{r7, pc}

08107358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107358:	b580      	push	{r7, lr}
 810735a:	b08a      	sub	sp, #40	; 0x28
 810735c:	af02      	add	r7, sp, #8
 810735e:	60f8      	str	r0, [r7, #12]
 8107360:	60b9      	str	r1, [r7, #8]
 8107362:	603b      	str	r3, [r7, #0]
 8107364:	4613      	mov	r3, r2
 8107366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810736e:	2b20      	cmp	r3, #32
 8107370:	f040 8083 	bne.w	810747a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107374:	68bb      	ldr	r3, [r7, #8]
 8107376:	2b00      	cmp	r3, #0
 8107378:	d002      	beq.n	8107380 <HAL_UART_Transmit+0x28>
 810737a:	88fb      	ldrh	r3, [r7, #6]
 810737c:	2b00      	cmp	r3, #0
 810737e:	d101      	bne.n	8107384 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107380:	2301      	movs	r3, #1
 8107382:	e07b      	b.n	810747c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810738a:	2b01      	cmp	r3, #1
 810738c:	d101      	bne.n	8107392 <HAL_UART_Transmit+0x3a>
 810738e:	2302      	movs	r3, #2
 8107390:	e074      	b.n	810747c <HAL_UART_Transmit+0x124>
 8107392:	68fb      	ldr	r3, [r7, #12]
 8107394:	2201      	movs	r2, #1
 8107396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	2200      	movs	r2, #0
 810739e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81073a2:	68fb      	ldr	r3, [r7, #12]
 81073a4:	2221      	movs	r2, #33	; 0x21
 81073a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81073aa:	f7fa fd71 	bl	8101e90 <HAL_GetTick>
 81073ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81073b0:	68fb      	ldr	r3, [r7, #12]
 81073b2:	88fa      	ldrh	r2, [r7, #6]
 81073b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81073b8:	68fb      	ldr	r3, [r7, #12]
 81073ba:	88fa      	ldrh	r2, [r7, #6]
 81073bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81073c0:	68fb      	ldr	r3, [r7, #12]
 81073c2:	689b      	ldr	r3, [r3, #8]
 81073c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81073c8:	d108      	bne.n	81073dc <HAL_UART_Transmit+0x84>
 81073ca:	68fb      	ldr	r3, [r7, #12]
 81073cc:	691b      	ldr	r3, [r3, #16]
 81073ce:	2b00      	cmp	r3, #0
 81073d0:	d104      	bne.n	81073dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81073d2:	2300      	movs	r3, #0
 81073d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81073d6:	68bb      	ldr	r3, [r7, #8]
 81073d8:	61bb      	str	r3, [r7, #24]
 81073da:	e003      	b.n	81073e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81073dc:	68bb      	ldr	r3, [r7, #8]
 81073de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81073e0:	2300      	movs	r3, #0
 81073e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81073e4:	68fb      	ldr	r3, [r7, #12]
 81073e6:	2200      	movs	r2, #0
 81073e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81073ec:	e02c      	b.n	8107448 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81073ee:	683b      	ldr	r3, [r7, #0]
 81073f0:	9300      	str	r3, [sp, #0]
 81073f2:	697b      	ldr	r3, [r7, #20]
 81073f4:	2200      	movs	r2, #0
 81073f6:	2180      	movs	r1, #128	; 0x80
 81073f8:	68f8      	ldr	r0, [r7, #12]
 81073fa:	f000 fe98 	bl	810812e <UART_WaitOnFlagUntilTimeout>
 81073fe:	4603      	mov	r3, r0
 8107400:	2b00      	cmp	r3, #0
 8107402:	d001      	beq.n	8107408 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107404:	2303      	movs	r3, #3
 8107406:	e039      	b.n	810747c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107408:	69fb      	ldr	r3, [r7, #28]
 810740a:	2b00      	cmp	r3, #0
 810740c:	d10b      	bne.n	8107426 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810740e:	69bb      	ldr	r3, [r7, #24]
 8107410:	881b      	ldrh	r3, [r3, #0]
 8107412:	461a      	mov	r2, r3
 8107414:	68fb      	ldr	r3, [r7, #12]
 8107416:	681b      	ldr	r3, [r3, #0]
 8107418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810741c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810741e:	69bb      	ldr	r3, [r7, #24]
 8107420:	3302      	adds	r3, #2
 8107422:	61bb      	str	r3, [r7, #24]
 8107424:	e007      	b.n	8107436 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107426:	69fb      	ldr	r3, [r7, #28]
 8107428:	781a      	ldrb	r2, [r3, #0]
 810742a:	68fb      	ldr	r3, [r7, #12]
 810742c:	681b      	ldr	r3, [r3, #0]
 810742e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107430:	69fb      	ldr	r3, [r7, #28]
 8107432:	3301      	adds	r3, #1
 8107434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107436:	68fb      	ldr	r3, [r7, #12]
 8107438:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810743c:	b29b      	uxth	r3, r3
 810743e:	3b01      	subs	r3, #1
 8107440:	b29a      	uxth	r2, r3
 8107442:	68fb      	ldr	r3, [r7, #12]
 8107444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107448:	68fb      	ldr	r3, [r7, #12]
 810744a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810744e:	b29b      	uxth	r3, r3
 8107450:	2b00      	cmp	r3, #0
 8107452:	d1cc      	bne.n	81073ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107454:	683b      	ldr	r3, [r7, #0]
 8107456:	9300      	str	r3, [sp, #0]
 8107458:	697b      	ldr	r3, [r7, #20]
 810745a:	2200      	movs	r2, #0
 810745c:	2140      	movs	r1, #64	; 0x40
 810745e:	68f8      	ldr	r0, [r7, #12]
 8107460:	f000 fe65 	bl	810812e <UART_WaitOnFlagUntilTimeout>
 8107464:	4603      	mov	r3, r0
 8107466:	2b00      	cmp	r3, #0
 8107468:	d001      	beq.n	810746e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810746a:	2303      	movs	r3, #3
 810746c:	e006      	b.n	810747c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	2220      	movs	r2, #32
 8107472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8107476:	2300      	movs	r3, #0
 8107478:	e000      	b.n	810747c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810747a:	2302      	movs	r3, #2
  }
}
 810747c:	4618      	mov	r0, r3
 810747e:	3720      	adds	r7, #32
 8107480:	46bd      	mov	sp, r7
 8107482:	bd80      	pop	{r7, pc}

08107484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107488:	b092      	sub	sp, #72	; 0x48
 810748a:	af00      	add	r7, sp, #0
 810748c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810748e:	2300      	movs	r3, #0
 8107490:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107494:	697b      	ldr	r3, [r7, #20]
 8107496:	689a      	ldr	r2, [r3, #8]
 8107498:	697b      	ldr	r3, [r7, #20]
 810749a:	691b      	ldr	r3, [r3, #16]
 810749c:	431a      	orrs	r2, r3
 810749e:	697b      	ldr	r3, [r7, #20]
 81074a0:	695b      	ldr	r3, [r3, #20]
 81074a2:	431a      	orrs	r2, r3
 81074a4:	697b      	ldr	r3, [r7, #20]
 81074a6:	69db      	ldr	r3, [r3, #28]
 81074a8:	4313      	orrs	r3, r2
 81074aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81074ac:	697b      	ldr	r3, [r7, #20]
 81074ae:	681b      	ldr	r3, [r3, #0]
 81074b0:	681a      	ldr	r2, [r3, #0]
 81074b2:	4bbd      	ldr	r3, [pc, #756]	; (81077a8 <UART_SetConfig+0x324>)
 81074b4:	4013      	ands	r3, r2
 81074b6:	697a      	ldr	r2, [r7, #20]
 81074b8:	6812      	ldr	r2, [r2, #0]
 81074ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81074bc:	430b      	orrs	r3, r1
 81074be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81074c0:	697b      	ldr	r3, [r7, #20]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	685b      	ldr	r3, [r3, #4]
 81074c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81074ca:	697b      	ldr	r3, [r7, #20]
 81074cc:	68da      	ldr	r2, [r3, #12]
 81074ce:	697b      	ldr	r3, [r7, #20]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	430a      	orrs	r2, r1
 81074d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81074d6:	697b      	ldr	r3, [r7, #20]
 81074d8:	699b      	ldr	r3, [r3, #24]
 81074da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81074dc:	697b      	ldr	r3, [r7, #20]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	4ab2      	ldr	r2, [pc, #712]	; (81077ac <UART_SetConfig+0x328>)
 81074e2:	4293      	cmp	r3, r2
 81074e4:	d004      	beq.n	81074f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81074e6:	697b      	ldr	r3, [r7, #20]
 81074e8:	6a1b      	ldr	r3, [r3, #32]
 81074ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81074ec:	4313      	orrs	r3, r2
 81074ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81074f0:	697b      	ldr	r3, [r7, #20]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	689b      	ldr	r3, [r3, #8]
 81074f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81074fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81074fe:	697a      	ldr	r2, [r7, #20]
 8107500:	6812      	ldr	r2, [r2, #0]
 8107502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107504:	430b      	orrs	r3, r1
 8107506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107508:	697b      	ldr	r3, [r7, #20]
 810750a:	681b      	ldr	r3, [r3, #0]
 810750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810750e:	f023 010f 	bic.w	r1, r3, #15
 8107512:	697b      	ldr	r3, [r7, #20]
 8107514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107516:	697b      	ldr	r3, [r7, #20]
 8107518:	681b      	ldr	r3, [r3, #0]
 810751a:	430a      	orrs	r2, r1
 810751c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810751e:	697b      	ldr	r3, [r7, #20]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	4aa3      	ldr	r2, [pc, #652]	; (81077b0 <UART_SetConfig+0x32c>)
 8107524:	4293      	cmp	r3, r2
 8107526:	d177      	bne.n	8107618 <UART_SetConfig+0x194>
 8107528:	4ba2      	ldr	r3, [pc, #648]	; (81077b4 <UART_SetConfig+0x330>)
 810752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810752c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107530:	2b28      	cmp	r3, #40	; 0x28
 8107532:	d86d      	bhi.n	8107610 <UART_SetConfig+0x18c>
 8107534:	a201      	add	r2, pc, #4	; (adr r2, 810753c <UART_SetConfig+0xb8>)
 8107536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810753a:	bf00      	nop
 810753c:	081075e1 	.word	0x081075e1
 8107540:	08107611 	.word	0x08107611
 8107544:	08107611 	.word	0x08107611
 8107548:	08107611 	.word	0x08107611
 810754c:	08107611 	.word	0x08107611
 8107550:	08107611 	.word	0x08107611
 8107554:	08107611 	.word	0x08107611
 8107558:	08107611 	.word	0x08107611
 810755c:	081075e9 	.word	0x081075e9
 8107560:	08107611 	.word	0x08107611
 8107564:	08107611 	.word	0x08107611
 8107568:	08107611 	.word	0x08107611
 810756c:	08107611 	.word	0x08107611
 8107570:	08107611 	.word	0x08107611
 8107574:	08107611 	.word	0x08107611
 8107578:	08107611 	.word	0x08107611
 810757c:	081075f1 	.word	0x081075f1
 8107580:	08107611 	.word	0x08107611
 8107584:	08107611 	.word	0x08107611
 8107588:	08107611 	.word	0x08107611
 810758c:	08107611 	.word	0x08107611
 8107590:	08107611 	.word	0x08107611
 8107594:	08107611 	.word	0x08107611
 8107598:	08107611 	.word	0x08107611
 810759c:	081075f9 	.word	0x081075f9
 81075a0:	08107611 	.word	0x08107611
 81075a4:	08107611 	.word	0x08107611
 81075a8:	08107611 	.word	0x08107611
 81075ac:	08107611 	.word	0x08107611
 81075b0:	08107611 	.word	0x08107611
 81075b4:	08107611 	.word	0x08107611
 81075b8:	08107611 	.word	0x08107611
 81075bc:	08107601 	.word	0x08107601
 81075c0:	08107611 	.word	0x08107611
 81075c4:	08107611 	.word	0x08107611
 81075c8:	08107611 	.word	0x08107611
 81075cc:	08107611 	.word	0x08107611
 81075d0:	08107611 	.word	0x08107611
 81075d4:	08107611 	.word	0x08107611
 81075d8:	08107611 	.word	0x08107611
 81075dc:	08107609 	.word	0x08107609
 81075e0:	2301      	movs	r3, #1
 81075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075e6:	e220      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81075e8:	2304      	movs	r3, #4
 81075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075ee:	e21c      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81075f0:	2308      	movs	r3, #8
 81075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075f6:	e218      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81075f8:	2310      	movs	r3, #16
 81075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075fe:	e214      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107600:	2320      	movs	r3, #32
 8107602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107606:	e210      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107608:	2340      	movs	r3, #64	; 0x40
 810760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810760e:	e20c      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107610:	2380      	movs	r3, #128	; 0x80
 8107612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107616:	e208      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107618:	697b      	ldr	r3, [r7, #20]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	4a66      	ldr	r2, [pc, #408]	; (81077b8 <UART_SetConfig+0x334>)
 810761e:	4293      	cmp	r3, r2
 8107620:	d130      	bne.n	8107684 <UART_SetConfig+0x200>
 8107622:	4b64      	ldr	r3, [pc, #400]	; (81077b4 <UART_SetConfig+0x330>)
 8107624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107626:	f003 0307 	and.w	r3, r3, #7
 810762a:	2b05      	cmp	r3, #5
 810762c:	d826      	bhi.n	810767c <UART_SetConfig+0x1f8>
 810762e:	a201      	add	r2, pc, #4	; (adr r2, 8107634 <UART_SetConfig+0x1b0>)
 8107630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107634:	0810764d 	.word	0x0810764d
 8107638:	08107655 	.word	0x08107655
 810763c:	0810765d 	.word	0x0810765d
 8107640:	08107665 	.word	0x08107665
 8107644:	0810766d 	.word	0x0810766d
 8107648:	08107675 	.word	0x08107675
 810764c:	2300      	movs	r3, #0
 810764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107652:	e1ea      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107654:	2304      	movs	r3, #4
 8107656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810765a:	e1e6      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810765c:	2308      	movs	r3, #8
 810765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107662:	e1e2      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107664:	2310      	movs	r3, #16
 8107666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810766a:	e1de      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810766c:	2320      	movs	r3, #32
 810766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107672:	e1da      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107674:	2340      	movs	r3, #64	; 0x40
 8107676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810767a:	e1d6      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810767c:	2380      	movs	r3, #128	; 0x80
 810767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107682:	e1d2      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107684:	697b      	ldr	r3, [r7, #20]
 8107686:	681b      	ldr	r3, [r3, #0]
 8107688:	4a4c      	ldr	r2, [pc, #304]	; (81077bc <UART_SetConfig+0x338>)
 810768a:	4293      	cmp	r3, r2
 810768c:	d130      	bne.n	81076f0 <UART_SetConfig+0x26c>
 810768e:	4b49      	ldr	r3, [pc, #292]	; (81077b4 <UART_SetConfig+0x330>)
 8107690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107692:	f003 0307 	and.w	r3, r3, #7
 8107696:	2b05      	cmp	r3, #5
 8107698:	d826      	bhi.n	81076e8 <UART_SetConfig+0x264>
 810769a:	a201      	add	r2, pc, #4	; (adr r2, 81076a0 <UART_SetConfig+0x21c>)
 810769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076a0:	081076b9 	.word	0x081076b9
 81076a4:	081076c1 	.word	0x081076c1
 81076a8:	081076c9 	.word	0x081076c9
 81076ac:	081076d1 	.word	0x081076d1
 81076b0:	081076d9 	.word	0x081076d9
 81076b4:	081076e1 	.word	0x081076e1
 81076b8:	2300      	movs	r3, #0
 81076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076be:	e1b4      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076c0:	2304      	movs	r3, #4
 81076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076c6:	e1b0      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076c8:	2308      	movs	r3, #8
 81076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076ce:	e1ac      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076d0:	2310      	movs	r3, #16
 81076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076d6:	e1a8      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076d8:	2320      	movs	r3, #32
 81076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076de:	e1a4      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076e0:	2340      	movs	r3, #64	; 0x40
 81076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076e6:	e1a0      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076e8:	2380      	movs	r3, #128	; 0x80
 81076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076ee:	e19c      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81076f0:	697b      	ldr	r3, [r7, #20]
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	4a32      	ldr	r2, [pc, #200]	; (81077c0 <UART_SetConfig+0x33c>)
 81076f6:	4293      	cmp	r3, r2
 81076f8:	d130      	bne.n	810775c <UART_SetConfig+0x2d8>
 81076fa:	4b2e      	ldr	r3, [pc, #184]	; (81077b4 <UART_SetConfig+0x330>)
 81076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81076fe:	f003 0307 	and.w	r3, r3, #7
 8107702:	2b05      	cmp	r3, #5
 8107704:	d826      	bhi.n	8107754 <UART_SetConfig+0x2d0>
 8107706:	a201      	add	r2, pc, #4	; (adr r2, 810770c <UART_SetConfig+0x288>)
 8107708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810770c:	08107725 	.word	0x08107725
 8107710:	0810772d 	.word	0x0810772d
 8107714:	08107735 	.word	0x08107735
 8107718:	0810773d 	.word	0x0810773d
 810771c:	08107745 	.word	0x08107745
 8107720:	0810774d 	.word	0x0810774d
 8107724:	2300      	movs	r3, #0
 8107726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810772a:	e17e      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810772c:	2304      	movs	r3, #4
 810772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107732:	e17a      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107734:	2308      	movs	r3, #8
 8107736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810773a:	e176      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810773c:	2310      	movs	r3, #16
 810773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107742:	e172      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107744:	2320      	movs	r3, #32
 8107746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810774a:	e16e      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810774c:	2340      	movs	r3, #64	; 0x40
 810774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107752:	e16a      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107754:	2380      	movs	r3, #128	; 0x80
 8107756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810775a:	e166      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810775c:	697b      	ldr	r3, [r7, #20]
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	4a18      	ldr	r2, [pc, #96]	; (81077c4 <UART_SetConfig+0x340>)
 8107762:	4293      	cmp	r3, r2
 8107764:	d140      	bne.n	81077e8 <UART_SetConfig+0x364>
 8107766:	4b13      	ldr	r3, [pc, #76]	; (81077b4 <UART_SetConfig+0x330>)
 8107768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810776a:	f003 0307 	and.w	r3, r3, #7
 810776e:	2b05      	cmp	r3, #5
 8107770:	d836      	bhi.n	81077e0 <UART_SetConfig+0x35c>
 8107772:	a201      	add	r2, pc, #4	; (adr r2, 8107778 <UART_SetConfig+0x2f4>)
 8107774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107778:	08107791 	.word	0x08107791
 810777c:	08107799 	.word	0x08107799
 8107780:	081077a1 	.word	0x081077a1
 8107784:	081077c9 	.word	0x081077c9
 8107788:	081077d1 	.word	0x081077d1
 810778c:	081077d9 	.word	0x081077d9
 8107790:	2300      	movs	r3, #0
 8107792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107796:	e148      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107798:	2304      	movs	r3, #4
 810779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810779e:	e144      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81077a0:	2308      	movs	r3, #8
 81077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077a6:	e140      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81077a8:	cfff69f3 	.word	0xcfff69f3
 81077ac:	58000c00 	.word	0x58000c00
 81077b0:	40011000 	.word	0x40011000
 81077b4:	58024400 	.word	0x58024400
 81077b8:	40004400 	.word	0x40004400
 81077bc:	40004800 	.word	0x40004800
 81077c0:	40004c00 	.word	0x40004c00
 81077c4:	40005000 	.word	0x40005000
 81077c8:	2310      	movs	r3, #16
 81077ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077ce:	e12c      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81077d0:	2320      	movs	r3, #32
 81077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077d6:	e128      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81077d8:	2340      	movs	r3, #64	; 0x40
 81077da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077de:	e124      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81077e0:	2380      	movs	r3, #128	; 0x80
 81077e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077e6:	e120      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81077e8:	697b      	ldr	r3, [r7, #20]
 81077ea:	681b      	ldr	r3, [r3, #0]
 81077ec:	4acb      	ldr	r2, [pc, #812]	; (8107b1c <UART_SetConfig+0x698>)
 81077ee:	4293      	cmp	r3, r2
 81077f0:	d176      	bne.n	81078e0 <UART_SetConfig+0x45c>
 81077f2:	4bcb      	ldr	r3, [pc, #812]	; (8107b20 <UART_SetConfig+0x69c>)
 81077f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81077fa:	2b28      	cmp	r3, #40	; 0x28
 81077fc:	d86c      	bhi.n	81078d8 <UART_SetConfig+0x454>
 81077fe:	a201      	add	r2, pc, #4	; (adr r2, 8107804 <UART_SetConfig+0x380>)
 8107800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107804:	081078a9 	.word	0x081078a9
 8107808:	081078d9 	.word	0x081078d9
 810780c:	081078d9 	.word	0x081078d9
 8107810:	081078d9 	.word	0x081078d9
 8107814:	081078d9 	.word	0x081078d9
 8107818:	081078d9 	.word	0x081078d9
 810781c:	081078d9 	.word	0x081078d9
 8107820:	081078d9 	.word	0x081078d9
 8107824:	081078b1 	.word	0x081078b1
 8107828:	081078d9 	.word	0x081078d9
 810782c:	081078d9 	.word	0x081078d9
 8107830:	081078d9 	.word	0x081078d9
 8107834:	081078d9 	.word	0x081078d9
 8107838:	081078d9 	.word	0x081078d9
 810783c:	081078d9 	.word	0x081078d9
 8107840:	081078d9 	.word	0x081078d9
 8107844:	081078b9 	.word	0x081078b9
 8107848:	081078d9 	.word	0x081078d9
 810784c:	081078d9 	.word	0x081078d9
 8107850:	081078d9 	.word	0x081078d9
 8107854:	081078d9 	.word	0x081078d9
 8107858:	081078d9 	.word	0x081078d9
 810785c:	081078d9 	.word	0x081078d9
 8107860:	081078d9 	.word	0x081078d9
 8107864:	081078c1 	.word	0x081078c1
 8107868:	081078d9 	.word	0x081078d9
 810786c:	081078d9 	.word	0x081078d9
 8107870:	081078d9 	.word	0x081078d9
 8107874:	081078d9 	.word	0x081078d9
 8107878:	081078d9 	.word	0x081078d9
 810787c:	081078d9 	.word	0x081078d9
 8107880:	081078d9 	.word	0x081078d9
 8107884:	081078c9 	.word	0x081078c9
 8107888:	081078d9 	.word	0x081078d9
 810788c:	081078d9 	.word	0x081078d9
 8107890:	081078d9 	.word	0x081078d9
 8107894:	081078d9 	.word	0x081078d9
 8107898:	081078d9 	.word	0x081078d9
 810789c:	081078d9 	.word	0x081078d9
 81078a0:	081078d9 	.word	0x081078d9
 81078a4:	081078d1 	.word	0x081078d1
 81078a8:	2301      	movs	r3, #1
 81078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078ae:	e0bc      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078b0:	2304      	movs	r3, #4
 81078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078b6:	e0b8      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078b8:	2308      	movs	r3, #8
 81078ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078be:	e0b4      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078c0:	2310      	movs	r3, #16
 81078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078c6:	e0b0      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078c8:	2320      	movs	r3, #32
 81078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078ce:	e0ac      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078d0:	2340      	movs	r3, #64	; 0x40
 81078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078d6:	e0a8      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078d8:	2380      	movs	r3, #128	; 0x80
 81078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078de:	e0a4      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81078e0:	697b      	ldr	r3, [r7, #20]
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	4a8f      	ldr	r2, [pc, #572]	; (8107b24 <UART_SetConfig+0x6a0>)
 81078e6:	4293      	cmp	r3, r2
 81078e8:	d130      	bne.n	810794c <UART_SetConfig+0x4c8>
 81078ea:	4b8d      	ldr	r3, [pc, #564]	; (8107b20 <UART_SetConfig+0x69c>)
 81078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078ee:	f003 0307 	and.w	r3, r3, #7
 81078f2:	2b05      	cmp	r3, #5
 81078f4:	d826      	bhi.n	8107944 <UART_SetConfig+0x4c0>
 81078f6:	a201      	add	r2, pc, #4	; (adr r2, 81078fc <UART_SetConfig+0x478>)
 81078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078fc:	08107915 	.word	0x08107915
 8107900:	0810791d 	.word	0x0810791d
 8107904:	08107925 	.word	0x08107925
 8107908:	0810792d 	.word	0x0810792d
 810790c:	08107935 	.word	0x08107935
 8107910:	0810793d 	.word	0x0810793d
 8107914:	2300      	movs	r3, #0
 8107916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810791a:	e086      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810791c:	2304      	movs	r3, #4
 810791e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107922:	e082      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107924:	2308      	movs	r3, #8
 8107926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810792a:	e07e      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810792c:	2310      	movs	r3, #16
 810792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107932:	e07a      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107934:	2320      	movs	r3, #32
 8107936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810793a:	e076      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810793c:	2340      	movs	r3, #64	; 0x40
 810793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107942:	e072      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107944:	2380      	movs	r3, #128	; 0x80
 8107946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810794a:	e06e      	b.n	8107a2a <UART_SetConfig+0x5a6>
 810794c:	697b      	ldr	r3, [r7, #20]
 810794e:	681b      	ldr	r3, [r3, #0]
 8107950:	4a75      	ldr	r2, [pc, #468]	; (8107b28 <UART_SetConfig+0x6a4>)
 8107952:	4293      	cmp	r3, r2
 8107954:	d130      	bne.n	81079b8 <UART_SetConfig+0x534>
 8107956:	4b72      	ldr	r3, [pc, #456]	; (8107b20 <UART_SetConfig+0x69c>)
 8107958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810795a:	f003 0307 	and.w	r3, r3, #7
 810795e:	2b05      	cmp	r3, #5
 8107960:	d826      	bhi.n	81079b0 <UART_SetConfig+0x52c>
 8107962:	a201      	add	r2, pc, #4	; (adr r2, 8107968 <UART_SetConfig+0x4e4>)
 8107964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107968:	08107981 	.word	0x08107981
 810796c:	08107989 	.word	0x08107989
 8107970:	08107991 	.word	0x08107991
 8107974:	08107999 	.word	0x08107999
 8107978:	081079a1 	.word	0x081079a1
 810797c:	081079a9 	.word	0x081079a9
 8107980:	2300      	movs	r3, #0
 8107982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107986:	e050      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107988:	2304      	movs	r3, #4
 810798a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810798e:	e04c      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107990:	2308      	movs	r3, #8
 8107992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107996:	e048      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107998:	2310      	movs	r3, #16
 810799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810799e:	e044      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81079a0:	2320      	movs	r3, #32
 81079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079a6:	e040      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81079a8:	2340      	movs	r3, #64	; 0x40
 81079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079ae:	e03c      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81079b0:	2380      	movs	r3, #128	; 0x80
 81079b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079b6:	e038      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81079b8:	697b      	ldr	r3, [r7, #20]
 81079ba:	681b      	ldr	r3, [r3, #0]
 81079bc:	4a5b      	ldr	r2, [pc, #364]	; (8107b2c <UART_SetConfig+0x6a8>)
 81079be:	4293      	cmp	r3, r2
 81079c0:	d130      	bne.n	8107a24 <UART_SetConfig+0x5a0>
 81079c2:	4b57      	ldr	r3, [pc, #348]	; (8107b20 <UART_SetConfig+0x69c>)
 81079c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81079c6:	f003 0307 	and.w	r3, r3, #7
 81079ca:	2b05      	cmp	r3, #5
 81079cc:	d826      	bhi.n	8107a1c <UART_SetConfig+0x598>
 81079ce:	a201      	add	r2, pc, #4	; (adr r2, 81079d4 <UART_SetConfig+0x550>)
 81079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079d4:	081079ed 	.word	0x081079ed
 81079d8:	081079f5 	.word	0x081079f5
 81079dc:	081079fd 	.word	0x081079fd
 81079e0:	08107a05 	.word	0x08107a05
 81079e4:	08107a0d 	.word	0x08107a0d
 81079e8:	08107a15 	.word	0x08107a15
 81079ec:	2302      	movs	r3, #2
 81079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079f2:	e01a      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81079f4:	2304      	movs	r3, #4
 81079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079fa:	e016      	b.n	8107a2a <UART_SetConfig+0x5a6>
 81079fc:	2308      	movs	r3, #8
 81079fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a02:	e012      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107a04:	2310      	movs	r3, #16
 8107a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a0a:	e00e      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107a0c:	2320      	movs	r3, #32
 8107a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a12:	e00a      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107a14:	2340      	movs	r3, #64	; 0x40
 8107a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a1a:	e006      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107a1c:	2380      	movs	r3, #128	; 0x80
 8107a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a22:	e002      	b.n	8107a2a <UART_SetConfig+0x5a6>
 8107a24:	2380      	movs	r3, #128	; 0x80
 8107a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107a2a:	697b      	ldr	r3, [r7, #20]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	4a3f      	ldr	r2, [pc, #252]	; (8107b2c <UART_SetConfig+0x6a8>)
 8107a30:	4293      	cmp	r3, r2
 8107a32:	f040 80f8 	bne.w	8107c26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107a36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107a3a:	2b20      	cmp	r3, #32
 8107a3c:	dc46      	bgt.n	8107acc <UART_SetConfig+0x648>
 8107a3e:	2b02      	cmp	r3, #2
 8107a40:	f2c0 8082 	blt.w	8107b48 <UART_SetConfig+0x6c4>
 8107a44:	3b02      	subs	r3, #2
 8107a46:	2b1e      	cmp	r3, #30
 8107a48:	d87e      	bhi.n	8107b48 <UART_SetConfig+0x6c4>
 8107a4a:	a201      	add	r2, pc, #4	; (adr r2, 8107a50 <UART_SetConfig+0x5cc>)
 8107a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a50:	08107ad3 	.word	0x08107ad3
 8107a54:	08107b49 	.word	0x08107b49
 8107a58:	08107adb 	.word	0x08107adb
 8107a5c:	08107b49 	.word	0x08107b49
 8107a60:	08107b49 	.word	0x08107b49
 8107a64:	08107b49 	.word	0x08107b49
 8107a68:	08107aeb 	.word	0x08107aeb
 8107a6c:	08107b49 	.word	0x08107b49
 8107a70:	08107b49 	.word	0x08107b49
 8107a74:	08107b49 	.word	0x08107b49
 8107a78:	08107b49 	.word	0x08107b49
 8107a7c:	08107b49 	.word	0x08107b49
 8107a80:	08107b49 	.word	0x08107b49
 8107a84:	08107b49 	.word	0x08107b49
 8107a88:	08107afb 	.word	0x08107afb
 8107a8c:	08107b49 	.word	0x08107b49
 8107a90:	08107b49 	.word	0x08107b49
 8107a94:	08107b49 	.word	0x08107b49
 8107a98:	08107b49 	.word	0x08107b49
 8107a9c:	08107b49 	.word	0x08107b49
 8107aa0:	08107b49 	.word	0x08107b49
 8107aa4:	08107b49 	.word	0x08107b49
 8107aa8:	08107b49 	.word	0x08107b49
 8107aac:	08107b49 	.word	0x08107b49
 8107ab0:	08107b49 	.word	0x08107b49
 8107ab4:	08107b49 	.word	0x08107b49
 8107ab8:	08107b49 	.word	0x08107b49
 8107abc:	08107b49 	.word	0x08107b49
 8107ac0:	08107b49 	.word	0x08107b49
 8107ac4:	08107b49 	.word	0x08107b49
 8107ac8:	08107b3b 	.word	0x08107b3b
 8107acc:	2b40      	cmp	r3, #64	; 0x40
 8107ace:	d037      	beq.n	8107b40 <UART_SetConfig+0x6bc>
 8107ad0:	e03a      	b.n	8107b48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107ad2:	f7fd fea1 	bl	8105818 <HAL_RCCEx_GetD3PCLK1Freq>
 8107ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107ad8:	e03c      	b.n	8107b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107ade:	4618      	mov	r0, r3
 8107ae0:	f7fd feb0 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ae8:	e034      	b.n	8107b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107aea:	f107 0318 	add.w	r3, r7, #24
 8107aee:	4618      	mov	r0, r3
 8107af0:	f7fd fffc 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107af4:	69fb      	ldr	r3, [r7, #28]
 8107af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107af8:	e02c      	b.n	8107b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107afa:	4b09      	ldr	r3, [pc, #36]	; (8107b20 <UART_SetConfig+0x69c>)
 8107afc:	681b      	ldr	r3, [r3, #0]
 8107afe:	f003 0320 	and.w	r3, r3, #32
 8107b02:	2b00      	cmp	r3, #0
 8107b04:	d016      	beq.n	8107b34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107b06:	4b06      	ldr	r3, [pc, #24]	; (8107b20 <UART_SetConfig+0x69c>)
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	08db      	lsrs	r3, r3, #3
 8107b0c:	f003 0303 	and.w	r3, r3, #3
 8107b10:	4a07      	ldr	r2, [pc, #28]	; (8107b30 <UART_SetConfig+0x6ac>)
 8107b12:	fa22 f303 	lsr.w	r3, r2, r3
 8107b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107b18:	e01c      	b.n	8107b54 <UART_SetConfig+0x6d0>
 8107b1a:	bf00      	nop
 8107b1c:	40011400 	.word	0x40011400
 8107b20:	58024400 	.word	0x58024400
 8107b24:	40007800 	.word	0x40007800
 8107b28:	40007c00 	.word	0x40007c00
 8107b2c:	58000c00 	.word	0x58000c00
 8107b30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107b34:	4b9d      	ldr	r3, [pc, #628]	; (8107dac <UART_SetConfig+0x928>)
 8107b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b38:	e00c      	b.n	8107b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107b3a:	4b9d      	ldr	r3, [pc, #628]	; (8107db0 <UART_SetConfig+0x92c>)
 8107b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b3e:	e009      	b.n	8107b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b46:	e005      	b.n	8107b54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107b48:	2300      	movs	r3, #0
 8107b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107b4c:	2301      	movs	r3, #1
 8107b4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107b52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107b56:	2b00      	cmp	r3, #0
 8107b58:	f000 81de 	beq.w	8107f18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107b5c:	697b      	ldr	r3, [r7, #20]
 8107b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107b60:	4a94      	ldr	r2, [pc, #592]	; (8107db4 <UART_SetConfig+0x930>)
 8107b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107b66:	461a      	mov	r2, r3
 8107b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8107b6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107b70:	697b      	ldr	r3, [r7, #20]
 8107b72:	685a      	ldr	r2, [r3, #4]
 8107b74:	4613      	mov	r3, r2
 8107b76:	005b      	lsls	r3, r3, #1
 8107b78:	4413      	add	r3, r2
 8107b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107b7c:	429a      	cmp	r2, r3
 8107b7e:	d305      	bcc.n	8107b8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107b80:	697b      	ldr	r3, [r7, #20]
 8107b82:	685b      	ldr	r3, [r3, #4]
 8107b84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107b88:	429a      	cmp	r2, r3
 8107b8a:	d903      	bls.n	8107b94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8107b8c:	2301      	movs	r3, #1
 8107b8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107b92:	e1c1      	b.n	8107f18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107b96:	2200      	movs	r2, #0
 8107b98:	60bb      	str	r3, [r7, #8]
 8107b9a:	60fa      	str	r2, [r7, #12]
 8107b9c:	697b      	ldr	r3, [r7, #20]
 8107b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ba0:	4a84      	ldr	r2, [pc, #528]	; (8107db4 <UART_SetConfig+0x930>)
 8107ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107ba6:	b29b      	uxth	r3, r3
 8107ba8:	2200      	movs	r2, #0
 8107baa:	603b      	str	r3, [r7, #0]
 8107bac:	607a      	str	r2, [r7, #4]
 8107bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8107bb6:	f7f9 f8ef 	bl	8100d98 <__aeabi_uldivmod>
 8107bba:	4602      	mov	r2, r0
 8107bbc:	460b      	mov	r3, r1
 8107bbe:	4610      	mov	r0, r2
 8107bc0:	4619      	mov	r1, r3
 8107bc2:	f04f 0200 	mov.w	r2, #0
 8107bc6:	f04f 0300 	mov.w	r3, #0
 8107bca:	020b      	lsls	r3, r1, #8
 8107bcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107bd0:	0202      	lsls	r2, r0, #8
 8107bd2:	6979      	ldr	r1, [r7, #20]
 8107bd4:	6849      	ldr	r1, [r1, #4]
 8107bd6:	0849      	lsrs	r1, r1, #1
 8107bd8:	2000      	movs	r0, #0
 8107bda:	460c      	mov	r4, r1
 8107bdc:	4605      	mov	r5, r0
 8107bde:	eb12 0804 	adds.w	r8, r2, r4
 8107be2:	eb43 0905 	adc.w	r9, r3, r5
 8107be6:	697b      	ldr	r3, [r7, #20]
 8107be8:	685b      	ldr	r3, [r3, #4]
 8107bea:	2200      	movs	r2, #0
 8107bec:	469a      	mov	sl, r3
 8107bee:	4693      	mov	fp, r2
 8107bf0:	4652      	mov	r2, sl
 8107bf2:	465b      	mov	r3, fp
 8107bf4:	4640      	mov	r0, r8
 8107bf6:	4649      	mov	r1, r9
 8107bf8:	f7f9 f8ce 	bl	8100d98 <__aeabi_uldivmod>
 8107bfc:	4602      	mov	r2, r0
 8107bfe:	460b      	mov	r3, r1
 8107c00:	4613      	mov	r3, r2
 8107c02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107c0a:	d308      	bcc.n	8107c1e <UART_SetConfig+0x79a>
 8107c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107c12:	d204      	bcs.n	8107c1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107c14:	697b      	ldr	r3, [r7, #20]
 8107c16:	681b      	ldr	r3, [r3, #0]
 8107c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107c1a:	60da      	str	r2, [r3, #12]
 8107c1c:	e17c      	b.n	8107f18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8107c1e:	2301      	movs	r3, #1
 8107c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107c24:	e178      	b.n	8107f18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107c26:	697b      	ldr	r3, [r7, #20]
 8107c28:	69db      	ldr	r3, [r3, #28]
 8107c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107c2e:	f040 80c5 	bne.w	8107dbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107c32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107c36:	2b20      	cmp	r3, #32
 8107c38:	dc48      	bgt.n	8107ccc <UART_SetConfig+0x848>
 8107c3a:	2b00      	cmp	r3, #0
 8107c3c:	db7b      	blt.n	8107d36 <UART_SetConfig+0x8b2>
 8107c3e:	2b20      	cmp	r3, #32
 8107c40:	d879      	bhi.n	8107d36 <UART_SetConfig+0x8b2>
 8107c42:	a201      	add	r2, pc, #4	; (adr r2, 8107c48 <UART_SetConfig+0x7c4>)
 8107c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c48:	08107cd3 	.word	0x08107cd3
 8107c4c:	08107cdb 	.word	0x08107cdb
 8107c50:	08107d37 	.word	0x08107d37
 8107c54:	08107d37 	.word	0x08107d37
 8107c58:	08107ce3 	.word	0x08107ce3
 8107c5c:	08107d37 	.word	0x08107d37
 8107c60:	08107d37 	.word	0x08107d37
 8107c64:	08107d37 	.word	0x08107d37
 8107c68:	08107cf3 	.word	0x08107cf3
 8107c6c:	08107d37 	.word	0x08107d37
 8107c70:	08107d37 	.word	0x08107d37
 8107c74:	08107d37 	.word	0x08107d37
 8107c78:	08107d37 	.word	0x08107d37
 8107c7c:	08107d37 	.word	0x08107d37
 8107c80:	08107d37 	.word	0x08107d37
 8107c84:	08107d37 	.word	0x08107d37
 8107c88:	08107d03 	.word	0x08107d03
 8107c8c:	08107d37 	.word	0x08107d37
 8107c90:	08107d37 	.word	0x08107d37
 8107c94:	08107d37 	.word	0x08107d37
 8107c98:	08107d37 	.word	0x08107d37
 8107c9c:	08107d37 	.word	0x08107d37
 8107ca0:	08107d37 	.word	0x08107d37
 8107ca4:	08107d37 	.word	0x08107d37
 8107ca8:	08107d37 	.word	0x08107d37
 8107cac:	08107d37 	.word	0x08107d37
 8107cb0:	08107d37 	.word	0x08107d37
 8107cb4:	08107d37 	.word	0x08107d37
 8107cb8:	08107d37 	.word	0x08107d37
 8107cbc:	08107d37 	.word	0x08107d37
 8107cc0:	08107d37 	.word	0x08107d37
 8107cc4:	08107d37 	.word	0x08107d37
 8107cc8:	08107d29 	.word	0x08107d29
 8107ccc:	2b40      	cmp	r3, #64	; 0x40
 8107cce:	d02e      	beq.n	8107d2e <UART_SetConfig+0x8aa>
 8107cd0:	e031      	b.n	8107d36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107cd2:	f7fc f95d 	bl	8103f90 <HAL_RCC_GetPCLK1Freq>
 8107cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107cd8:	e033      	b.n	8107d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107cda:	f7fc f96f 	bl	8103fbc <HAL_RCC_GetPCLK2Freq>
 8107cde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107ce0:	e02f      	b.n	8107d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107ce6:	4618      	mov	r0, r3
 8107ce8:	f7fd fdac 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107cf0:	e027      	b.n	8107d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cf2:	f107 0318 	add.w	r3, r7, #24
 8107cf6:	4618      	mov	r0, r3
 8107cf8:	f7fd fef8 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107cfc:	69fb      	ldr	r3, [r7, #28]
 8107cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d00:	e01f      	b.n	8107d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107d02:	4b2d      	ldr	r3, [pc, #180]	; (8107db8 <UART_SetConfig+0x934>)
 8107d04:	681b      	ldr	r3, [r3, #0]
 8107d06:	f003 0320 	and.w	r3, r3, #32
 8107d0a:	2b00      	cmp	r3, #0
 8107d0c:	d009      	beq.n	8107d22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107d0e:	4b2a      	ldr	r3, [pc, #168]	; (8107db8 <UART_SetConfig+0x934>)
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	08db      	lsrs	r3, r3, #3
 8107d14:	f003 0303 	and.w	r3, r3, #3
 8107d18:	4a24      	ldr	r2, [pc, #144]	; (8107dac <UART_SetConfig+0x928>)
 8107d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8107d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107d20:	e00f      	b.n	8107d42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107d22:	4b22      	ldr	r3, [pc, #136]	; (8107dac <UART_SetConfig+0x928>)
 8107d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d26:	e00c      	b.n	8107d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107d28:	4b21      	ldr	r3, [pc, #132]	; (8107db0 <UART_SetConfig+0x92c>)
 8107d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d2c:	e009      	b.n	8107d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d34:	e005      	b.n	8107d42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8107d36:	2300      	movs	r3, #0
 8107d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107d3a:	2301      	movs	r3, #1
 8107d3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107d44:	2b00      	cmp	r3, #0
 8107d46:	f000 80e7 	beq.w	8107f18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107d4a:	697b      	ldr	r3, [r7, #20]
 8107d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d4e:	4a19      	ldr	r2, [pc, #100]	; (8107db4 <UART_SetConfig+0x930>)
 8107d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107d54:	461a      	mov	r2, r3
 8107d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8107d5c:	005a      	lsls	r2, r3, #1
 8107d5e:	697b      	ldr	r3, [r7, #20]
 8107d60:	685b      	ldr	r3, [r3, #4]
 8107d62:	085b      	lsrs	r3, r3, #1
 8107d64:	441a      	add	r2, r3
 8107d66:	697b      	ldr	r3, [r7, #20]
 8107d68:	685b      	ldr	r3, [r3, #4]
 8107d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8107d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d72:	2b0f      	cmp	r3, #15
 8107d74:	d916      	bls.n	8107da4 <UART_SetConfig+0x920>
 8107d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107d7c:	d212      	bcs.n	8107da4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d80:	b29b      	uxth	r3, r3
 8107d82:	f023 030f 	bic.w	r3, r3, #15
 8107d86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d8a:	085b      	lsrs	r3, r3, #1
 8107d8c:	b29b      	uxth	r3, r3
 8107d8e:	f003 0307 	and.w	r3, r3, #7
 8107d92:	b29a      	uxth	r2, r3
 8107d94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8107d96:	4313      	orrs	r3, r2
 8107d98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8107d9a:	697b      	ldr	r3, [r7, #20]
 8107d9c:	681b      	ldr	r3, [r3, #0]
 8107d9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8107da0:	60da      	str	r2, [r3, #12]
 8107da2:	e0b9      	b.n	8107f18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107da4:	2301      	movs	r3, #1
 8107da6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107daa:	e0b5      	b.n	8107f18 <UART_SetConfig+0xa94>
 8107dac:	03d09000 	.word	0x03d09000
 8107db0:	003d0900 	.word	0x003d0900
 8107db4:	0810cf94 	.word	0x0810cf94
 8107db8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8107dbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107dc0:	2b20      	cmp	r3, #32
 8107dc2:	dc49      	bgt.n	8107e58 <UART_SetConfig+0x9d4>
 8107dc4:	2b00      	cmp	r3, #0
 8107dc6:	db7c      	blt.n	8107ec2 <UART_SetConfig+0xa3e>
 8107dc8:	2b20      	cmp	r3, #32
 8107dca:	d87a      	bhi.n	8107ec2 <UART_SetConfig+0xa3e>
 8107dcc:	a201      	add	r2, pc, #4	; (adr r2, 8107dd4 <UART_SetConfig+0x950>)
 8107dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107dd2:	bf00      	nop
 8107dd4:	08107e5f 	.word	0x08107e5f
 8107dd8:	08107e67 	.word	0x08107e67
 8107ddc:	08107ec3 	.word	0x08107ec3
 8107de0:	08107ec3 	.word	0x08107ec3
 8107de4:	08107e6f 	.word	0x08107e6f
 8107de8:	08107ec3 	.word	0x08107ec3
 8107dec:	08107ec3 	.word	0x08107ec3
 8107df0:	08107ec3 	.word	0x08107ec3
 8107df4:	08107e7f 	.word	0x08107e7f
 8107df8:	08107ec3 	.word	0x08107ec3
 8107dfc:	08107ec3 	.word	0x08107ec3
 8107e00:	08107ec3 	.word	0x08107ec3
 8107e04:	08107ec3 	.word	0x08107ec3
 8107e08:	08107ec3 	.word	0x08107ec3
 8107e0c:	08107ec3 	.word	0x08107ec3
 8107e10:	08107ec3 	.word	0x08107ec3
 8107e14:	08107e8f 	.word	0x08107e8f
 8107e18:	08107ec3 	.word	0x08107ec3
 8107e1c:	08107ec3 	.word	0x08107ec3
 8107e20:	08107ec3 	.word	0x08107ec3
 8107e24:	08107ec3 	.word	0x08107ec3
 8107e28:	08107ec3 	.word	0x08107ec3
 8107e2c:	08107ec3 	.word	0x08107ec3
 8107e30:	08107ec3 	.word	0x08107ec3
 8107e34:	08107ec3 	.word	0x08107ec3
 8107e38:	08107ec3 	.word	0x08107ec3
 8107e3c:	08107ec3 	.word	0x08107ec3
 8107e40:	08107ec3 	.word	0x08107ec3
 8107e44:	08107ec3 	.word	0x08107ec3
 8107e48:	08107ec3 	.word	0x08107ec3
 8107e4c:	08107ec3 	.word	0x08107ec3
 8107e50:	08107ec3 	.word	0x08107ec3
 8107e54:	08107eb5 	.word	0x08107eb5
 8107e58:	2b40      	cmp	r3, #64	; 0x40
 8107e5a:	d02e      	beq.n	8107eba <UART_SetConfig+0xa36>
 8107e5c:	e031      	b.n	8107ec2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107e5e:	f7fc f897 	bl	8103f90 <HAL_RCC_GetPCLK1Freq>
 8107e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107e64:	e033      	b.n	8107ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107e66:	f7fc f8a9 	bl	8103fbc <HAL_RCC_GetPCLK2Freq>
 8107e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107e6c:	e02f      	b.n	8107ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107e72:	4618      	mov	r0, r3
 8107e74:	f7fd fce6 	bl	8105844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e7c:	e027      	b.n	8107ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e7e:	f107 0318 	add.w	r3, r7, #24
 8107e82:	4618      	mov	r0, r3
 8107e84:	f7fd fe32 	bl	8105aec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107e88:	69fb      	ldr	r3, [r7, #28]
 8107e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e8c:	e01f      	b.n	8107ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107e8e:	4b2d      	ldr	r3, [pc, #180]	; (8107f44 <UART_SetConfig+0xac0>)
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	f003 0320 	and.w	r3, r3, #32
 8107e96:	2b00      	cmp	r3, #0
 8107e98:	d009      	beq.n	8107eae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107e9a:	4b2a      	ldr	r3, [pc, #168]	; (8107f44 <UART_SetConfig+0xac0>)
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	08db      	lsrs	r3, r3, #3
 8107ea0:	f003 0303 	and.w	r3, r3, #3
 8107ea4:	4a28      	ldr	r2, [pc, #160]	; (8107f48 <UART_SetConfig+0xac4>)
 8107ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8107eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107eac:	e00f      	b.n	8107ece <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8107eae:	4b26      	ldr	r3, [pc, #152]	; (8107f48 <UART_SetConfig+0xac4>)
 8107eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107eb2:	e00c      	b.n	8107ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107eb4:	4b25      	ldr	r3, [pc, #148]	; (8107f4c <UART_SetConfig+0xac8>)
 8107eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107eb8:	e009      	b.n	8107ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ec0:	e005      	b.n	8107ece <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8107ec2:	2300      	movs	r3, #0
 8107ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107ec6:	2301      	movs	r3, #1
 8107ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8107ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107ed0:	2b00      	cmp	r3, #0
 8107ed2:	d021      	beq.n	8107f18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107ed4:	697b      	ldr	r3, [r7, #20]
 8107ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ed8:	4a1d      	ldr	r2, [pc, #116]	; (8107f50 <UART_SetConfig+0xacc>)
 8107eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107ede:	461a      	mov	r2, r3
 8107ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8107ee6:	697b      	ldr	r3, [r7, #20]
 8107ee8:	685b      	ldr	r3, [r3, #4]
 8107eea:	085b      	lsrs	r3, r3, #1
 8107eec:	441a      	add	r2, r3
 8107eee:	697b      	ldr	r3, [r7, #20]
 8107ef0:	685b      	ldr	r3, [r3, #4]
 8107ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8107ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107efa:	2b0f      	cmp	r3, #15
 8107efc:	d909      	bls.n	8107f12 <UART_SetConfig+0xa8e>
 8107efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107f04:	d205      	bcs.n	8107f12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107f08:	b29a      	uxth	r2, r3
 8107f0a:	697b      	ldr	r3, [r7, #20]
 8107f0c:	681b      	ldr	r3, [r3, #0]
 8107f0e:	60da      	str	r2, [r3, #12]
 8107f10:	e002      	b.n	8107f18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107f12:	2301      	movs	r3, #1
 8107f14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107f18:	697b      	ldr	r3, [r7, #20]
 8107f1a:	2201      	movs	r2, #1
 8107f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107f20:	697b      	ldr	r3, [r7, #20]
 8107f22:	2201      	movs	r2, #1
 8107f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107f28:	697b      	ldr	r3, [r7, #20]
 8107f2a:	2200      	movs	r2, #0
 8107f2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107f2e:	697b      	ldr	r3, [r7, #20]
 8107f30:	2200      	movs	r2, #0
 8107f32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107f34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107f38:	4618      	mov	r0, r3
 8107f3a:	3748      	adds	r7, #72	; 0x48
 8107f3c:	46bd      	mov	sp, r7
 8107f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107f42:	bf00      	nop
 8107f44:	58024400 	.word	0x58024400
 8107f48:	03d09000 	.word	0x03d09000
 8107f4c:	003d0900 	.word	0x003d0900
 8107f50:	0810cf94 	.word	0x0810cf94

08107f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107f54:	b480      	push	{r7}
 8107f56:	b083      	sub	sp, #12
 8107f58:	af00      	add	r7, sp, #0
 8107f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f60:	f003 0301 	and.w	r3, r3, #1
 8107f64:	2b00      	cmp	r3, #0
 8107f66:	d00a      	beq.n	8107f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	681b      	ldr	r3, [r3, #0]
 8107f6c:	685b      	ldr	r3, [r3, #4]
 8107f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	430a      	orrs	r2, r1
 8107f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f82:	f003 0302 	and.w	r3, r3, #2
 8107f86:	2b00      	cmp	r3, #0
 8107f88:	d00a      	beq.n	8107fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107f8a:	687b      	ldr	r3, [r7, #4]
 8107f8c:	681b      	ldr	r3, [r3, #0]
 8107f8e:	685b      	ldr	r3, [r3, #4]
 8107f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107f98:	687b      	ldr	r3, [r7, #4]
 8107f9a:	681b      	ldr	r3, [r3, #0]
 8107f9c:	430a      	orrs	r2, r1
 8107f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107fa0:	687b      	ldr	r3, [r7, #4]
 8107fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fa4:	f003 0304 	and.w	r3, r3, #4
 8107fa8:	2b00      	cmp	r3, #0
 8107faa:	d00a      	beq.n	8107fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107fac:	687b      	ldr	r3, [r7, #4]
 8107fae:	681b      	ldr	r3, [r3, #0]
 8107fb0:	685b      	ldr	r3, [r3, #4]
 8107fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107fba:	687b      	ldr	r3, [r7, #4]
 8107fbc:	681b      	ldr	r3, [r3, #0]
 8107fbe:	430a      	orrs	r2, r1
 8107fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fc6:	f003 0308 	and.w	r3, r3, #8
 8107fca:	2b00      	cmp	r3, #0
 8107fcc:	d00a      	beq.n	8107fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	681b      	ldr	r3, [r3, #0]
 8107fd2:	685b      	ldr	r3, [r3, #4]
 8107fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	430a      	orrs	r2, r1
 8107fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fe8:	f003 0310 	and.w	r3, r3, #16
 8107fec:	2b00      	cmp	r3, #0
 8107fee:	d00a      	beq.n	8108006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	689b      	ldr	r3, [r3, #8]
 8107ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107ffa:	687b      	ldr	r3, [r7, #4]
 8107ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	430a      	orrs	r2, r1
 8108004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810800a:	f003 0320 	and.w	r3, r3, #32
 810800e:	2b00      	cmp	r3, #0
 8108010:	d00a      	beq.n	8108028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	689b      	ldr	r3, [r3, #8]
 8108018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	430a      	orrs	r2, r1
 8108026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810802c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108030:	2b00      	cmp	r3, #0
 8108032:	d01a      	beq.n	810806a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	681b      	ldr	r3, [r3, #0]
 8108038:	685b      	ldr	r3, [r3, #4]
 810803a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	681b      	ldr	r3, [r3, #0]
 8108046:	430a      	orrs	r2, r1
 8108048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810804e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108052:	d10a      	bne.n	810806a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	681b      	ldr	r3, [r3, #0]
 8108058:	685b      	ldr	r3, [r3, #4]
 810805a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	681b      	ldr	r3, [r3, #0]
 8108066:	430a      	orrs	r2, r1
 8108068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810806a:	687b      	ldr	r3, [r7, #4]
 810806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108072:	2b00      	cmp	r3, #0
 8108074:	d00a      	beq.n	810808c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	685b      	ldr	r3, [r3, #4]
 810807c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108084:	687b      	ldr	r3, [r7, #4]
 8108086:	681b      	ldr	r3, [r3, #0]
 8108088:	430a      	orrs	r2, r1
 810808a:	605a      	str	r2, [r3, #4]
  }
}
 810808c:	bf00      	nop
 810808e:	370c      	adds	r7, #12
 8108090:	46bd      	mov	sp, r7
 8108092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108096:	4770      	bx	lr

08108098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108098:	b580      	push	{r7, lr}
 810809a:	b086      	sub	sp, #24
 810809c:	af02      	add	r7, sp, #8
 810809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	2200      	movs	r2, #0
 81080a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81080a8:	f7f9 fef2 	bl	8101e90 <HAL_GetTick>
 81080ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	681b      	ldr	r3, [r3, #0]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	f003 0308 	and.w	r3, r3, #8
 81080b8:	2b08      	cmp	r3, #8
 81080ba:	d10e      	bne.n	81080da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81080bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81080c0:	9300      	str	r3, [sp, #0]
 81080c2:	68fb      	ldr	r3, [r7, #12]
 81080c4:	2200      	movs	r2, #0
 81080c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81080ca:	6878      	ldr	r0, [r7, #4]
 81080cc:	f000 f82f 	bl	810812e <UART_WaitOnFlagUntilTimeout>
 81080d0:	4603      	mov	r3, r0
 81080d2:	2b00      	cmp	r3, #0
 81080d4:	d001      	beq.n	81080da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81080d6:	2303      	movs	r3, #3
 81080d8:	e025      	b.n	8108126 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	681b      	ldr	r3, [r3, #0]
 81080de:	681b      	ldr	r3, [r3, #0]
 81080e0:	f003 0304 	and.w	r3, r3, #4
 81080e4:	2b04      	cmp	r3, #4
 81080e6:	d10e      	bne.n	8108106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81080e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81080ec:	9300      	str	r3, [sp, #0]
 81080ee:	68fb      	ldr	r3, [r7, #12]
 81080f0:	2200      	movs	r2, #0
 81080f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81080f6:	6878      	ldr	r0, [r7, #4]
 81080f8:	f000 f819 	bl	810812e <UART_WaitOnFlagUntilTimeout>
 81080fc:	4603      	mov	r3, r0
 81080fe:	2b00      	cmp	r3, #0
 8108100:	d001      	beq.n	8108106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108102:	2303      	movs	r3, #3
 8108104:	e00f      	b.n	8108126 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	2220      	movs	r2, #32
 810810a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810810e:	687b      	ldr	r3, [r7, #4]
 8108110:	2220      	movs	r2, #32
 8108112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	2200      	movs	r2, #0
 810811a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810811c:	687b      	ldr	r3, [r7, #4]
 810811e:	2200      	movs	r2, #0
 8108120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108124:	2300      	movs	r3, #0
}
 8108126:	4618      	mov	r0, r3
 8108128:	3710      	adds	r7, #16
 810812a:	46bd      	mov	sp, r7
 810812c:	bd80      	pop	{r7, pc}

0810812e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810812e:	b580      	push	{r7, lr}
 8108130:	b09c      	sub	sp, #112	; 0x70
 8108132:	af00      	add	r7, sp, #0
 8108134:	60f8      	str	r0, [r7, #12]
 8108136:	60b9      	str	r1, [r7, #8]
 8108138:	603b      	str	r3, [r7, #0]
 810813a:	4613      	mov	r3, r2
 810813c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810813e:	e0a9      	b.n	8108294 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108146:	f000 80a5 	beq.w	8108294 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810814a:	f7f9 fea1 	bl	8101e90 <HAL_GetTick>
 810814e:	4602      	mov	r2, r0
 8108150:	683b      	ldr	r3, [r7, #0]
 8108152:	1ad3      	subs	r3, r2, r3
 8108154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8108156:	429a      	cmp	r2, r3
 8108158:	d302      	bcc.n	8108160 <UART_WaitOnFlagUntilTimeout+0x32>
 810815a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810815c:	2b00      	cmp	r3, #0
 810815e:	d140      	bne.n	81081e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108160:	68fb      	ldr	r3, [r7, #12]
 8108162:	681b      	ldr	r3, [r3, #0]
 8108164:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108168:	e853 3f00 	ldrex	r3, [r3]
 810816c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810816e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108174:	667b      	str	r3, [r7, #100]	; 0x64
 8108176:	68fb      	ldr	r3, [r7, #12]
 8108178:	681b      	ldr	r3, [r3, #0]
 810817a:	461a      	mov	r2, r3
 810817c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810817e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8108180:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8108184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8108186:	e841 2300 	strex	r3, r2, [r1]
 810818a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810818c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810818e:	2b00      	cmp	r3, #0
 8108190:	d1e6      	bne.n	8108160 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108192:	68fb      	ldr	r3, [r7, #12]
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	3308      	adds	r3, #8
 8108198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810819a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810819c:	e853 3f00 	ldrex	r3, [r3]
 81081a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81081a4:	f023 0301 	bic.w	r3, r3, #1
 81081a8:	663b      	str	r3, [r7, #96]	; 0x60
 81081aa:	68fb      	ldr	r3, [r7, #12]
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	3308      	adds	r3, #8
 81081b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81081b2:	64ba      	str	r2, [r7, #72]	; 0x48
 81081b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81081b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81081b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81081ba:	e841 2300 	strex	r3, r2, [r1]
 81081be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81081c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81081c2:	2b00      	cmp	r3, #0
 81081c4:	d1e5      	bne.n	8108192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81081c6:	68fb      	ldr	r3, [r7, #12]
 81081c8:	2220      	movs	r2, #32
 81081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81081ce:	68fb      	ldr	r3, [r7, #12]
 81081d0:	2220      	movs	r2, #32
 81081d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81081d6:	68fb      	ldr	r3, [r7, #12]
 81081d8:	2200      	movs	r2, #0
 81081da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81081de:	2303      	movs	r3, #3
 81081e0:	e069      	b.n	81082b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81081e2:	68fb      	ldr	r3, [r7, #12]
 81081e4:	681b      	ldr	r3, [r3, #0]
 81081e6:	681b      	ldr	r3, [r3, #0]
 81081e8:	f003 0304 	and.w	r3, r3, #4
 81081ec:	2b00      	cmp	r3, #0
 81081ee:	d051      	beq.n	8108294 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81081f0:	68fb      	ldr	r3, [r7, #12]
 81081f2:	681b      	ldr	r3, [r3, #0]
 81081f4:	69db      	ldr	r3, [r3, #28]
 81081f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81081fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81081fe:	d149      	bne.n	8108294 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108200:	68fb      	ldr	r3, [r7, #12]
 8108202:	681b      	ldr	r3, [r3, #0]
 8108204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108208:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810820a:	68fb      	ldr	r3, [r7, #12]
 810820c:	681b      	ldr	r3, [r3, #0]
 810820e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108212:	e853 3f00 	ldrex	r3, [r3]
 8108216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810821a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810821e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108220:	68fb      	ldr	r3, [r7, #12]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	461a      	mov	r2, r3
 8108226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108228:	637b      	str	r3, [r7, #52]	; 0x34
 810822a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810822c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810822e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108230:	e841 2300 	strex	r3, r2, [r1]
 8108234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8108236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108238:	2b00      	cmp	r3, #0
 810823a:	d1e6      	bne.n	810820a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810823c:	68fb      	ldr	r3, [r7, #12]
 810823e:	681b      	ldr	r3, [r3, #0]
 8108240:	3308      	adds	r3, #8
 8108242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108244:	697b      	ldr	r3, [r7, #20]
 8108246:	e853 3f00 	ldrex	r3, [r3]
 810824a:	613b      	str	r3, [r7, #16]
   return(result);
 810824c:	693b      	ldr	r3, [r7, #16]
 810824e:	f023 0301 	bic.w	r3, r3, #1
 8108252:	66bb      	str	r3, [r7, #104]	; 0x68
 8108254:	68fb      	ldr	r3, [r7, #12]
 8108256:	681b      	ldr	r3, [r3, #0]
 8108258:	3308      	adds	r3, #8
 810825a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810825c:	623a      	str	r2, [r7, #32]
 810825e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108260:	69f9      	ldr	r1, [r7, #28]
 8108262:	6a3a      	ldr	r2, [r7, #32]
 8108264:	e841 2300 	strex	r3, r2, [r1]
 8108268:	61bb      	str	r3, [r7, #24]
   return(result);
 810826a:	69bb      	ldr	r3, [r7, #24]
 810826c:	2b00      	cmp	r3, #0
 810826e:	d1e5      	bne.n	810823c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8108270:	68fb      	ldr	r3, [r7, #12]
 8108272:	2220      	movs	r2, #32
 8108274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8108278:	68fb      	ldr	r3, [r7, #12]
 810827a:	2220      	movs	r2, #32
 810827c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108280:	68fb      	ldr	r3, [r7, #12]
 8108282:	2220      	movs	r2, #32
 8108284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108288:	68fb      	ldr	r3, [r7, #12]
 810828a:	2200      	movs	r2, #0
 810828c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8108290:	2303      	movs	r3, #3
 8108292:	e010      	b.n	81082b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108294:	68fb      	ldr	r3, [r7, #12]
 8108296:	681b      	ldr	r3, [r3, #0]
 8108298:	69da      	ldr	r2, [r3, #28]
 810829a:	68bb      	ldr	r3, [r7, #8]
 810829c:	4013      	ands	r3, r2
 810829e:	68ba      	ldr	r2, [r7, #8]
 81082a0:	429a      	cmp	r2, r3
 81082a2:	bf0c      	ite	eq
 81082a4:	2301      	moveq	r3, #1
 81082a6:	2300      	movne	r3, #0
 81082a8:	b2db      	uxtb	r3, r3
 81082aa:	461a      	mov	r2, r3
 81082ac:	79fb      	ldrb	r3, [r7, #7]
 81082ae:	429a      	cmp	r2, r3
 81082b0:	f43f af46 	beq.w	8108140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81082b4:	2300      	movs	r3, #0
}
 81082b6:	4618      	mov	r0, r3
 81082b8:	3770      	adds	r7, #112	; 0x70
 81082ba:	46bd      	mov	sp, r7
 81082bc:	bd80      	pop	{r7, pc}

081082be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81082be:	b480      	push	{r7}
 81082c0:	b085      	sub	sp, #20
 81082c2:	af00      	add	r7, sp, #0
 81082c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81082cc:	2b01      	cmp	r3, #1
 81082ce:	d101      	bne.n	81082d4 <HAL_UARTEx_DisableFifoMode+0x16>
 81082d0:	2302      	movs	r3, #2
 81082d2:	e027      	b.n	8108324 <HAL_UARTEx_DisableFifoMode+0x66>
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	2201      	movs	r2, #1
 81082d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	2224      	movs	r2, #36	; 0x24
 81082e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	681b      	ldr	r3, [r3, #0]
 81082ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	681b      	ldr	r3, [r3, #0]
 81082f0:	681a      	ldr	r2, [r3, #0]
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	f022 0201 	bic.w	r2, r2, #1
 81082fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81082fc:	68fb      	ldr	r3, [r7, #12]
 81082fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108302:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	2200      	movs	r2, #0
 8108308:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	681b      	ldr	r3, [r3, #0]
 810830e:	68fa      	ldr	r2, [r7, #12]
 8108310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108312:	687b      	ldr	r3, [r7, #4]
 8108314:	2220      	movs	r2, #32
 8108316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810831a:	687b      	ldr	r3, [r7, #4]
 810831c:	2200      	movs	r2, #0
 810831e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108322:	2300      	movs	r3, #0
}
 8108324:	4618      	mov	r0, r3
 8108326:	3714      	adds	r7, #20
 8108328:	46bd      	mov	sp, r7
 810832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810832e:	4770      	bx	lr

08108330 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108330:	b580      	push	{r7, lr}
 8108332:	b084      	sub	sp, #16
 8108334:	af00      	add	r7, sp, #0
 8108336:	6078      	str	r0, [r7, #4]
 8108338:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108340:	2b01      	cmp	r3, #1
 8108342:	d101      	bne.n	8108348 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108344:	2302      	movs	r3, #2
 8108346:	e02d      	b.n	81083a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	2201      	movs	r2, #1
 810834c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	2224      	movs	r2, #36	; 0x24
 8108354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	681b      	ldr	r3, [r3, #0]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	681a      	ldr	r2, [r3, #0]
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	681b      	ldr	r3, [r3, #0]
 810836a:	f022 0201 	bic.w	r2, r2, #1
 810836e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	689b      	ldr	r3, [r3, #8]
 8108376:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	681b      	ldr	r3, [r3, #0]
 810837e:	683a      	ldr	r2, [r7, #0]
 8108380:	430a      	orrs	r2, r1
 8108382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108384:	6878      	ldr	r0, [r7, #4]
 8108386:	f000 f84f 	bl	8108428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810838a:	687b      	ldr	r3, [r7, #4]
 810838c:	681b      	ldr	r3, [r3, #0]
 810838e:	68fa      	ldr	r2, [r7, #12]
 8108390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	2220      	movs	r2, #32
 8108396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	2200      	movs	r2, #0
 810839e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81083a2:	2300      	movs	r3, #0
}
 81083a4:	4618      	mov	r0, r3
 81083a6:	3710      	adds	r7, #16
 81083a8:	46bd      	mov	sp, r7
 81083aa:	bd80      	pop	{r7, pc}

081083ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81083ac:	b580      	push	{r7, lr}
 81083ae:	b084      	sub	sp, #16
 81083b0:	af00      	add	r7, sp, #0
 81083b2:	6078      	str	r0, [r7, #4]
 81083b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81083bc:	2b01      	cmp	r3, #1
 81083be:	d101      	bne.n	81083c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81083c0:	2302      	movs	r3, #2
 81083c2:	e02d      	b.n	8108420 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81083c4:	687b      	ldr	r3, [r7, #4]
 81083c6:	2201      	movs	r2, #1
 81083c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81083cc:	687b      	ldr	r3, [r7, #4]
 81083ce:	2224      	movs	r2, #36	; 0x24
 81083d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	681b      	ldr	r3, [r3, #0]
 81083d8:	681b      	ldr	r3, [r3, #0]
 81083da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81083dc:	687b      	ldr	r3, [r7, #4]
 81083de:	681b      	ldr	r3, [r3, #0]
 81083e0:	681a      	ldr	r2, [r3, #0]
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	681b      	ldr	r3, [r3, #0]
 81083e6:	f022 0201 	bic.w	r2, r2, #1
 81083ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	689b      	ldr	r3, [r3, #8]
 81083f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81083f6:	687b      	ldr	r3, [r7, #4]
 81083f8:	681b      	ldr	r3, [r3, #0]
 81083fa:	683a      	ldr	r2, [r7, #0]
 81083fc:	430a      	orrs	r2, r1
 81083fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108400:	6878      	ldr	r0, [r7, #4]
 8108402:	f000 f811 	bl	8108428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108406:	687b      	ldr	r3, [r7, #4]
 8108408:	681b      	ldr	r3, [r3, #0]
 810840a:	68fa      	ldr	r2, [r7, #12]
 810840c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810840e:	687b      	ldr	r3, [r7, #4]
 8108410:	2220      	movs	r2, #32
 8108412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108416:	687b      	ldr	r3, [r7, #4]
 8108418:	2200      	movs	r2, #0
 810841a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810841e:	2300      	movs	r3, #0
}
 8108420:	4618      	mov	r0, r3
 8108422:	3710      	adds	r7, #16
 8108424:	46bd      	mov	sp, r7
 8108426:	bd80      	pop	{r7, pc}

08108428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108428:	b480      	push	{r7}
 810842a:	b085      	sub	sp, #20
 810842c:	af00      	add	r7, sp, #0
 810842e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108434:	2b00      	cmp	r3, #0
 8108436:	d108      	bne.n	810844a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	2201      	movs	r2, #1
 810843c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	2201      	movs	r2, #1
 8108444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108448:	e031      	b.n	81084ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810844a:	2310      	movs	r3, #16
 810844c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810844e:	2310      	movs	r3, #16
 8108450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	681b      	ldr	r3, [r3, #0]
 8108456:	689b      	ldr	r3, [r3, #8]
 8108458:	0e5b      	lsrs	r3, r3, #25
 810845a:	b2db      	uxtb	r3, r3
 810845c:	f003 0307 	and.w	r3, r3, #7
 8108460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	689b      	ldr	r3, [r3, #8]
 8108468:	0f5b      	lsrs	r3, r3, #29
 810846a:	b2db      	uxtb	r3, r3
 810846c:	f003 0307 	and.w	r3, r3, #7
 8108470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108472:	7bbb      	ldrb	r3, [r7, #14]
 8108474:	7b3a      	ldrb	r2, [r7, #12]
 8108476:	4911      	ldr	r1, [pc, #68]	; (81084bc <UARTEx_SetNbDataToProcess+0x94>)
 8108478:	5c8a      	ldrb	r2, [r1, r2]
 810847a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810847e:	7b3a      	ldrb	r2, [r7, #12]
 8108480:	490f      	ldr	r1, [pc, #60]	; (81084c0 <UARTEx_SetNbDataToProcess+0x98>)
 8108482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108484:	fb93 f3f2 	sdiv	r3, r3, r2
 8108488:	b29a      	uxth	r2, r3
 810848a:	687b      	ldr	r3, [r7, #4]
 810848c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108490:	7bfb      	ldrb	r3, [r7, #15]
 8108492:	7b7a      	ldrb	r2, [r7, #13]
 8108494:	4909      	ldr	r1, [pc, #36]	; (81084bc <UARTEx_SetNbDataToProcess+0x94>)
 8108496:	5c8a      	ldrb	r2, [r1, r2]
 8108498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810849c:	7b7a      	ldrb	r2, [r7, #13]
 810849e:	4908      	ldr	r1, [pc, #32]	; (81084c0 <UARTEx_SetNbDataToProcess+0x98>)
 81084a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81084a2:	fb93 f3f2 	sdiv	r3, r3, r2
 81084a6:	b29a      	uxth	r2, r3
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81084ae:	bf00      	nop
 81084b0:	3714      	adds	r7, #20
 81084b2:	46bd      	mov	sp, r7
 81084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084b8:	4770      	bx	lr
 81084ba:	bf00      	nop
 81084bc:	0810cfac 	.word	0x0810cfac
 81084c0:	0810cfb4 	.word	0x0810cfb4

081084c4 <__errno>:
 81084c4:	4b01      	ldr	r3, [pc, #4]	; (81084cc <__errno+0x8>)
 81084c6:	6818      	ldr	r0, [r3, #0]
 81084c8:	4770      	bx	lr
 81084ca:	bf00      	nop
 81084cc:	10000010 	.word	0x10000010

081084d0 <__libc_init_array>:
 81084d0:	b570      	push	{r4, r5, r6, lr}
 81084d2:	4d0d      	ldr	r5, [pc, #52]	; (8108508 <__libc_init_array+0x38>)
 81084d4:	4c0d      	ldr	r4, [pc, #52]	; (810850c <__libc_init_array+0x3c>)
 81084d6:	1b64      	subs	r4, r4, r5
 81084d8:	10a4      	asrs	r4, r4, #2
 81084da:	2600      	movs	r6, #0
 81084dc:	42a6      	cmp	r6, r4
 81084de:	d109      	bne.n	81084f4 <__libc_init_array+0x24>
 81084e0:	4d0b      	ldr	r5, [pc, #44]	; (8108510 <__libc_init_array+0x40>)
 81084e2:	4c0c      	ldr	r4, [pc, #48]	; (8108514 <__libc_init_array+0x44>)
 81084e4:	f004 fd1e 	bl	810cf24 <_init>
 81084e8:	1b64      	subs	r4, r4, r5
 81084ea:	10a4      	asrs	r4, r4, #2
 81084ec:	2600      	movs	r6, #0
 81084ee:	42a6      	cmp	r6, r4
 81084f0:	d105      	bne.n	81084fe <__libc_init_array+0x2e>
 81084f2:	bd70      	pop	{r4, r5, r6, pc}
 81084f4:	f855 3b04 	ldr.w	r3, [r5], #4
 81084f8:	4798      	blx	r3
 81084fa:	3601      	adds	r6, #1
 81084fc:	e7ee      	b.n	81084dc <__libc_init_array+0xc>
 81084fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8108502:	4798      	blx	r3
 8108504:	3601      	adds	r6, #1
 8108506:	e7f2      	b.n	81084ee <__libc_init_array+0x1e>
 8108508:	0810d474 	.word	0x0810d474
 810850c:	0810d474 	.word	0x0810d474
 8108510:	0810d474 	.word	0x0810d474
 8108514:	0810d478 	.word	0x0810d478

08108518 <memset>:
 8108518:	4402      	add	r2, r0
 810851a:	4603      	mov	r3, r0
 810851c:	4293      	cmp	r3, r2
 810851e:	d100      	bne.n	8108522 <memset+0xa>
 8108520:	4770      	bx	lr
 8108522:	f803 1b01 	strb.w	r1, [r3], #1
 8108526:	e7f9      	b.n	810851c <memset+0x4>

08108528 <__cvt>:
 8108528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810852c:	ec55 4b10 	vmov	r4, r5, d0
 8108530:	2d00      	cmp	r5, #0
 8108532:	460e      	mov	r6, r1
 8108534:	4619      	mov	r1, r3
 8108536:	462b      	mov	r3, r5
 8108538:	bfbb      	ittet	lt
 810853a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810853e:	461d      	movlt	r5, r3
 8108540:	2300      	movge	r3, #0
 8108542:	232d      	movlt	r3, #45	; 0x2d
 8108544:	700b      	strb	r3, [r1, #0]
 8108546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108548:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810854c:	4691      	mov	r9, r2
 810854e:	f023 0820 	bic.w	r8, r3, #32
 8108552:	bfbc      	itt	lt
 8108554:	4622      	movlt	r2, r4
 8108556:	4614      	movlt	r4, r2
 8108558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810855c:	d005      	beq.n	810856a <__cvt+0x42>
 810855e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108562:	d100      	bne.n	8108566 <__cvt+0x3e>
 8108564:	3601      	adds	r6, #1
 8108566:	2102      	movs	r1, #2
 8108568:	e000      	b.n	810856c <__cvt+0x44>
 810856a:	2103      	movs	r1, #3
 810856c:	ab03      	add	r3, sp, #12
 810856e:	9301      	str	r3, [sp, #4]
 8108570:	ab02      	add	r3, sp, #8
 8108572:	9300      	str	r3, [sp, #0]
 8108574:	ec45 4b10 	vmov	d0, r4, r5
 8108578:	4653      	mov	r3, sl
 810857a:	4632      	mov	r2, r6
 810857c:	f001 fefc 	bl	810a378 <_dtoa_r>
 8108580:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8108584:	4607      	mov	r7, r0
 8108586:	d102      	bne.n	810858e <__cvt+0x66>
 8108588:	f019 0f01 	tst.w	r9, #1
 810858c:	d022      	beq.n	81085d4 <__cvt+0xac>
 810858e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108592:	eb07 0906 	add.w	r9, r7, r6
 8108596:	d110      	bne.n	81085ba <__cvt+0x92>
 8108598:	783b      	ldrb	r3, [r7, #0]
 810859a:	2b30      	cmp	r3, #48	; 0x30
 810859c:	d10a      	bne.n	81085b4 <__cvt+0x8c>
 810859e:	2200      	movs	r2, #0
 81085a0:	2300      	movs	r3, #0
 81085a2:	4620      	mov	r0, r4
 81085a4:	4629      	mov	r1, r5
 81085a6:	f7f8 fb17 	bl	8100bd8 <__aeabi_dcmpeq>
 81085aa:	b918      	cbnz	r0, 81085b4 <__cvt+0x8c>
 81085ac:	f1c6 0601 	rsb	r6, r6, #1
 81085b0:	f8ca 6000 	str.w	r6, [sl]
 81085b4:	f8da 3000 	ldr.w	r3, [sl]
 81085b8:	4499      	add	r9, r3
 81085ba:	2200      	movs	r2, #0
 81085bc:	2300      	movs	r3, #0
 81085be:	4620      	mov	r0, r4
 81085c0:	4629      	mov	r1, r5
 81085c2:	f7f8 fb09 	bl	8100bd8 <__aeabi_dcmpeq>
 81085c6:	b108      	cbz	r0, 81085cc <__cvt+0xa4>
 81085c8:	f8cd 900c 	str.w	r9, [sp, #12]
 81085cc:	2230      	movs	r2, #48	; 0x30
 81085ce:	9b03      	ldr	r3, [sp, #12]
 81085d0:	454b      	cmp	r3, r9
 81085d2:	d307      	bcc.n	81085e4 <__cvt+0xbc>
 81085d4:	9b03      	ldr	r3, [sp, #12]
 81085d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81085d8:	1bdb      	subs	r3, r3, r7
 81085da:	4638      	mov	r0, r7
 81085dc:	6013      	str	r3, [r2, #0]
 81085de:	b004      	add	sp, #16
 81085e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81085e4:	1c59      	adds	r1, r3, #1
 81085e6:	9103      	str	r1, [sp, #12]
 81085e8:	701a      	strb	r2, [r3, #0]
 81085ea:	e7f0      	b.n	81085ce <__cvt+0xa6>

081085ec <__exponent>:
 81085ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81085ee:	4603      	mov	r3, r0
 81085f0:	2900      	cmp	r1, #0
 81085f2:	bfb8      	it	lt
 81085f4:	4249      	neglt	r1, r1
 81085f6:	f803 2b02 	strb.w	r2, [r3], #2
 81085fa:	bfb4      	ite	lt
 81085fc:	222d      	movlt	r2, #45	; 0x2d
 81085fe:	222b      	movge	r2, #43	; 0x2b
 8108600:	2909      	cmp	r1, #9
 8108602:	7042      	strb	r2, [r0, #1]
 8108604:	dd2a      	ble.n	810865c <__exponent+0x70>
 8108606:	f10d 0407 	add.w	r4, sp, #7
 810860a:	46a4      	mov	ip, r4
 810860c:	270a      	movs	r7, #10
 810860e:	46a6      	mov	lr, r4
 8108610:	460a      	mov	r2, r1
 8108612:	fb91 f6f7 	sdiv	r6, r1, r7
 8108616:	fb07 1516 	mls	r5, r7, r6, r1
 810861a:	3530      	adds	r5, #48	; 0x30
 810861c:	2a63      	cmp	r2, #99	; 0x63
 810861e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8108622:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8108626:	4631      	mov	r1, r6
 8108628:	dcf1      	bgt.n	810860e <__exponent+0x22>
 810862a:	3130      	adds	r1, #48	; 0x30
 810862c:	f1ae 0502 	sub.w	r5, lr, #2
 8108630:	f804 1c01 	strb.w	r1, [r4, #-1]
 8108634:	1c44      	adds	r4, r0, #1
 8108636:	4629      	mov	r1, r5
 8108638:	4561      	cmp	r1, ip
 810863a:	d30a      	bcc.n	8108652 <__exponent+0x66>
 810863c:	f10d 0209 	add.w	r2, sp, #9
 8108640:	eba2 020e 	sub.w	r2, r2, lr
 8108644:	4565      	cmp	r5, ip
 8108646:	bf88      	it	hi
 8108648:	2200      	movhi	r2, #0
 810864a:	4413      	add	r3, r2
 810864c:	1a18      	subs	r0, r3, r0
 810864e:	b003      	add	sp, #12
 8108650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8108656:	f804 2f01 	strb.w	r2, [r4, #1]!
 810865a:	e7ed      	b.n	8108638 <__exponent+0x4c>
 810865c:	2330      	movs	r3, #48	; 0x30
 810865e:	3130      	adds	r1, #48	; 0x30
 8108660:	7083      	strb	r3, [r0, #2]
 8108662:	70c1      	strb	r1, [r0, #3]
 8108664:	1d03      	adds	r3, r0, #4
 8108666:	e7f1      	b.n	810864c <__exponent+0x60>

08108668 <_printf_float>:
 8108668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810866c:	ed2d 8b02 	vpush	{d8}
 8108670:	b08d      	sub	sp, #52	; 0x34
 8108672:	460c      	mov	r4, r1
 8108674:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8108678:	4616      	mov	r6, r2
 810867a:	461f      	mov	r7, r3
 810867c:	4605      	mov	r5, r0
 810867e:	f003 f98f 	bl	810b9a0 <_localeconv_r>
 8108682:	f8d0 a000 	ldr.w	sl, [r0]
 8108686:	4650      	mov	r0, sl
 8108688:	f7f7 fe2a 	bl	81002e0 <strlen>
 810868c:	2300      	movs	r3, #0
 810868e:	930a      	str	r3, [sp, #40]	; 0x28
 8108690:	6823      	ldr	r3, [r4, #0]
 8108692:	9305      	str	r3, [sp, #20]
 8108694:	f8d8 3000 	ldr.w	r3, [r8]
 8108698:	f894 b018 	ldrb.w	fp, [r4, #24]
 810869c:	3307      	adds	r3, #7
 810869e:	f023 0307 	bic.w	r3, r3, #7
 81086a2:	f103 0208 	add.w	r2, r3, #8
 81086a6:	f8c8 2000 	str.w	r2, [r8]
 81086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81086ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81086b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81086b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81086ba:	9307      	str	r3, [sp, #28]
 81086bc:	f8cd 8018 	str.w	r8, [sp, #24]
 81086c0:	ee08 0a10 	vmov	s16, r0
 81086c4:	4b9f      	ldr	r3, [pc, #636]	; (8108944 <_printf_float+0x2dc>)
 81086c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81086ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81086ce:	f7f8 fab5 	bl	8100c3c <__aeabi_dcmpun>
 81086d2:	bb88      	cbnz	r0, 8108738 <_printf_float+0xd0>
 81086d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81086d8:	4b9a      	ldr	r3, [pc, #616]	; (8108944 <_printf_float+0x2dc>)
 81086da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81086de:	f7f8 fa8f 	bl	8100c00 <__aeabi_dcmple>
 81086e2:	bb48      	cbnz	r0, 8108738 <_printf_float+0xd0>
 81086e4:	2200      	movs	r2, #0
 81086e6:	2300      	movs	r3, #0
 81086e8:	4640      	mov	r0, r8
 81086ea:	4649      	mov	r1, r9
 81086ec:	f7f8 fa7e 	bl	8100bec <__aeabi_dcmplt>
 81086f0:	b110      	cbz	r0, 81086f8 <_printf_float+0x90>
 81086f2:	232d      	movs	r3, #45	; 0x2d
 81086f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81086f8:	4b93      	ldr	r3, [pc, #588]	; (8108948 <_printf_float+0x2e0>)
 81086fa:	4894      	ldr	r0, [pc, #592]	; (810894c <_printf_float+0x2e4>)
 81086fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8108700:	bf94      	ite	ls
 8108702:	4698      	movls	r8, r3
 8108704:	4680      	movhi	r8, r0
 8108706:	2303      	movs	r3, #3
 8108708:	6123      	str	r3, [r4, #16]
 810870a:	9b05      	ldr	r3, [sp, #20]
 810870c:	f023 0204 	bic.w	r2, r3, #4
 8108710:	6022      	str	r2, [r4, #0]
 8108712:	f04f 0900 	mov.w	r9, #0
 8108716:	9700      	str	r7, [sp, #0]
 8108718:	4633      	mov	r3, r6
 810871a:	aa0b      	add	r2, sp, #44	; 0x2c
 810871c:	4621      	mov	r1, r4
 810871e:	4628      	mov	r0, r5
 8108720:	f000 f9d8 	bl	8108ad4 <_printf_common>
 8108724:	3001      	adds	r0, #1
 8108726:	f040 8090 	bne.w	810884a <_printf_float+0x1e2>
 810872a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810872e:	b00d      	add	sp, #52	; 0x34
 8108730:	ecbd 8b02 	vpop	{d8}
 8108734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108738:	4642      	mov	r2, r8
 810873a:	464b      	mov	r3, r9
 810873c:	4640      	mov	r0, r8
 810873e:	4649      	mov	r1, r9
 8108740:	f7f8 fa7c 	bl	8100c3c <__aeabi_dcmpun>
 8108744:	b140      	cbz	r0, 8108758 <_printf_float+0xf0>
 8108746:	464b      	mov	r3, r9
 8108748:	2b00      	cmp	r3, #0
 810874a:	bfbc      	itt	lt
 810874c:	232d      	movlt	r3, #45	; 0x2d
 810874e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8108752:	487f      	ldr	r0, [pc, #508]	; (8108950 <_printf_float+0x2e8>)
 8108754:	4b7f      	ldr	r3, [pc, #508]	; (8108954 <_printf_float+0x2ec>)
 8108756:	e7d1      	b.n	81086fc <_printf_float+0x94>
 8108758:	6863      	ldr	r3, [r4, #4]
 810875a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810875e:	9206      	str	r2, [sp, #24]
 8108760:	1c5a      	adds	r2, r3, #1
 8108762:	d13f      	bne.n	81087e4 <_printf_float+0x17c>
 8108764:	2306      	movs	r3, #6
 8108766:	6063      	str	r3, [r4, #4]
 8108768:	9b05      	ldr	r3, [sp, #20]
 810876a:	6861      	ldr	r1, [r4, #4]
 810876c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8108770:	2300      	movs	r3, #0
 8108772:	9303      	str	r3, [sp, #12]
 8108774:	ab0a      	add	r3, sp, #40	; 0x28
 8108776:	e9cd b301 	strd	fp, r3, [sp, #4]
 810877a:	ab09      	add	r3, sp, #36	; 0x24
 810877c:	ec49 8b10 	vmov	d0, r8, r9
 8108780:	9300      	str	r3, [sp, #0]
 8108782:	6022      	str	r2, [r4, #0]
 8108784:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8108788:	4628      	mov	r0, r5
 810878a:	f7ff fecd 	bl	8108528 <__cvt>
 810878e:	9b06      	ldr	r3, [sp, #24]
 8108790:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108792:	2b47      	cmp	r3, #71	; 0x47
 8108794:	4680      	mov	r8, r0
 8108796:	d108      	bne.n	81087aa <_printf_float+0x142>
 8108798:	1cc8      	adds	r0, r1, #3
 810879a:	db02      	blt.n	81087a2 <_printf_float+0x13a>
 810879c:	6863      	ldr	r3, [r4, #4]
 810879e:	4299      	cmp	r1, r3
 81087a0:	dd41      	ble.n	8108826 <_printf_float+0x1be>
 81087a2:	f1ab 0b02 	sub.w	fp, fp, #2
 81087a6:	fa5f fb8b 	uxtb.w	fp, fp
 81087aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81087ae:	d820      	bhi.n	81087f2 <_printf_float+0x18a>
 81087b0:	3901      	subs	r1, #1
 81087b2:	465a      	mov	r2, fp
 81087b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81087b8:	9109      	str	r1, [sp, #36]	; 0x24
 81087ba:	f7ff ff17 	bl	81085ec <__exponent>
 81087be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81087c0:	1813      	adds	r3, r2, r0
 81087c2:	2a01      	cmp	r2, #1
 81087c4:	4681      	mov	r9, r0
 81087c6:	6123      	str	r3, [r4, #16]
 81087c8:	dc02      	bgt.n	81087d0 <_printf_float+0x168>
 81087ca:	6822      	ldr	r2, [r4, #0]
 81087cc:	07d2      	lsls	r2, r2, #31
 81087ce:	d501      	bpl.n	81087d4 <_printf_float+0x16c>
 81087d0:	3301      	adds	r3, #1
 81087d2:	6123      	str	r3, [r4, #16]
 81087d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81087d8:	2b00      	cmp	r3, #0
 81087da:	d09c      	beq.n	8108716 <_printf_float+0xae>
 81087dc:	232d      	movs	r3, #45	; 0x2d
 81087de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81087e2:	e798      	b.n	8108716 <_printf_float+0xae>
 81087e4:	9a06      	ldr	r2, [sp, #24]
 81087e6:	2a47      	cmp	r2, #71	; 0x47
 81087e8:	d1be      	bne.n	8108768 <_printf_float+0x100>
 81087ea:	2b00      	cmp	r3, #0
 81087ec:	d1bc      	bne.n	8108768 <_printf_float+0x100>
 81087ee:	2301      	movs	r3, #1
 81087f0:	e7b9      	b.n	8108766 <_printf_float+0xfe>
 81087f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81087f6:	d118      	bne.n	810882a <_printf_float+0x1c2>
 81087f8:	2900      	cmp	r1, #0
 81087fa:	6863      	ldr	r3, [r4, #4]
 81087fc:	dd0b      	ble.n	8108816 <_printf_float+0x1ae>
 81087fe:	6121      	str	r1, [r4, #16]
 8108800:	b913      	cbnz	r3, 8108808 <_printf_float+0x1a0>
 8108802:	6822      	ldr	r2, [r4, #0]
 8108804:	07d0      	lsls	r0, r2, #31
 8108806:	d502      	bpl.n	810880e <_printf_float+0x1a6>
 8108808:	3301      	adds	r3, #1
 810880a:	440b      	add	r3, r1
 810880c:	6123      	str	r3, [r4, #16]
 810880e:	65a1      	str	r1, [r4, #88]	; 0x58
 8108810:	f04f 0900 	mov.w	r9, #0
 8108814:	e7de      	b.n	81087d4 <_printf_float+0x16c>
 8108816:	b913      	cbnz	r3, 810881e <_printf_float+0x1b6>
 8108818:	6822      	ldr	r2, [r4, #0]
 810881a:	07d2      	lsls	r2, r2, #31
 810881c:	d501      	bpl.n	8108822 <_printf_float+0x1ba>
 810881e:	3302      	adds	r3, #2
 8108820:	e7f4      	b.n	810880c <_printf_float+0x1a4>
 8108822:	2301      	movs	r3, #1
 8108824:	e7f2      	b.n	810880c <_printf_float+0x1a4>
 8108826:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810882a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810882c:	4299      	cmp	r1, r3
 810882e:	db05      	blt.n	810883c <_printf_float+0x1d4>
 8108830:	6823      	ldr	r3, [r4, #0]
 8108832:	6121      	str	r1, [r4, #16]
 8108834:	07d8      	lsls	r0, r3, #31
 8108836:	d5ea      	bpl.n	810880e <_printf_float+0x1a6>
 8108838:	1c4b      	adds	r3, r1, #1
 810883a:	e7e7      	b.n	810880c <_printf_float+0x1a4>
 810883c:	2900      	cmp	r1, #0
 810883e:	bfd4      	ite	le
 8108840:	f1c1 0202 	rsble	r2, r1, #2
 8108844:	2201      	movgt	r2, #1
 8108846:	4413      	add	r3, r2
 8108848:	e7e0      	b.n	810880c <_printf_float+0x1a4>
 810884a:	6823      	ldr	r3, [r4, #0]
 810884c:	055a      	lsls	r2, r3, #21
 810884e:	d407      	bmi.n	8108860 <_printf_float+0x1f8>
 8108850:	6923      	ldr	r3, [r4, #16]
 8108852:	4642      	mov	r2, r8
 8108854:	4631      	mov	r1, r6
 8108856:	4628      	mov	r0, r5
 8108858:	47b8      	blx	r7
 810885a:	3001      	adds	r0, #1
 810885c:	d12c      	bne.n	81088b8 <_printf_float+0x250>
 810885e:	e764      	b.n	810872a <_printf_float+0xc2>
 8108860:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8108864:	f240 80e0 	bls.w	8108a28 <_printf_float+0x3c0>
 8108868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810886c:	2200      	movs	r2, #0
 810886e:	2300      	movs	r3, #0
 8108870:	f7f8 f9b2 	bl	8100bd8 <__aeabi_dcmpeq>
 8108874:	2800      	cmp	r0, #0
 8108876:	d034      	beq.n	81088e2 <_printf_float+0x27a>
 8108878:	4a37      	ldr	r2, [pc, #220]	; (8108958 <_printf_float+0x2f0>)
 810887a:	2301      	movs	r3, #1
 810887c:	4631      	mov	r1, r6
 810887e:	4628      	mov	r0, r5
 8108880:	47b8      	blx	r7
 8108882:	3001      	adds	r0, #1
 8108884:	f43f af51 	beq.w	810872a <_printf_float+0xc2>
 8108888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810888c:	429a      	cmp	r2, r3
 810888e:	db02      	blt.n	8108896 <_printf_float+0x22e>
 8108890:	6823      	ldr	r3, [r4, #0]
 8108892:	07d8      	lsls	r0, r3, #31
 8108894:	d510      	bpl.n	81088b8 <_printf_float+0x250>
 8108896:	ee18 3a10 	vmov	r3, s16
 810889a:	4652      	mov	r2, sl
 810889c:	4631      	mov	r1, r6
 810889e:	4628      	mov	r0, r5
 81088a0:	47b8      	blx	r7
 81088a2:	3001      	adds	r0, #1
 81088a4:	f43f af41 	beq.w	810872a <_printf_float+0xc2>
 81088a8:	f04f 0800 	mov.w	r8, #0
 81088ac:	f104 091a 	add.w	r9, r4, #26
 81088b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81088b2:	3b01      	subs	r3, #1
 81088b4:	4543      	cmp	r3, r8
 81088b6:	dc09      	bgt.n	81088cc <_printf_float+0x264>
 81088b8:	6823      	ldr	r3, [r4, #0]
 81088ba:	079b      	lsls	r3, r3, #30
 81088bc:	f100 8105 	bmi.w	8108aca <_printf_float+0x462>
 81088c0:	68e0      	ldr	r0, [r4, #12]
 81088c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81088c4:	4298      	cmp	r0, r3
 81088c6:	bfb8      	it	lt
 81088c8:	4618      	movlt	r0, r3
 81088ca:	e730      	b.n	810872e <_printf_float+0xc6>
 81088cc:	2301      	movs	r3, #1
 81088ce:	464a      	mov	r2, r9
 81088d0:	4631      	mov	r1, r6
 81088d2:	4628      	mov	r0, r5
 81088d4:	47b8      	blx	r7
 81088d6:	3001      	adds	r0, #1
 81088d8:	f43f af27 	beq.w	810872a <_printf_float+0xc2>
 81088dc:	f108 0801 	add.w	r8, r8, #1
 81088e0:	e7e6      	b.n	81088b0 <_printf_float+0x248>
 81088e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81088e4:	2b00      	cmp	r3, #0
 81088e6:	dc39      	bgt.n	810895c <_printf_float+0x2f4>
 81088e8:	4a1b      	ldr	r2, [pc, #108]	; (8108958 <_printf_float+0x2f0>)
 81088ea:	2301      	movs	r3, #1
 81088ec:	4631      	mov	r1, r6
 81088ee:	4628      	mov	r0, r5
 81088f0:	47b8      	blx	r7
 81088f2:	3001      	adds	r0, #1
 81088f4:	f43f af19 	beq.w	810872a <_printf_float+0xc2>
 81088f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81088fc:	4313      	orrs	r3, r2
 81088fe:	d102      	bne.n	8108906 <_printf_float+0x29e>
 8108900:	6823      	ldr	r3, [r4, #0]
 8108902:	07d9      	lsls	r1, r3, #31
 8108904:	d5d8      	bpl.n	81088b8 <_printf_float+0x250>
 8108906:	ee18 3a10 	vmov	r3, s16
 810890a:	4652      	mov	r2, sl
 810890c:	4631      	mov	r1, r6
 810890e:	4628      	mov	r0, r5
 8108910:	47b8      	blx	r7
 8108912:	3001      	adds	r0, #1
 8108914:	f43f af09 	beq.w	810872a <_printf_float+0xc2>
 8108918:	f04f 0900 	mov.w	r9, #0
 810891c:	f104 0a1a 	add.w	sl, r4, #26
 8108920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108922:	425b      	negs	r3, r3
 8108924:	454b      	cmp	r3, r9
 8108926:	dc01      	bgt.n	810892c <_printf_float+0x2c4>
 8108928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810892a:	e792      	b.n	8108852 <_printf_float+0x1ea>
 810892c:	2301      	movs	r3, #1
 810892e:	4652      	mov	r2, sl
 8108930:	4631      	mov	r1, r6
 8108932:	4628      	mov	r0, r5
 8108934:	47b8      	blx	r7
 8108936:	3001      	adds	r0, #1
 8108938:	f43f aef7 	beq.w	810872a <_printf_float+0xc2>
 810893c:	f109 0901 	add.w	r9, r9, #1
 8108940:	e7ee      	b.n	8108920 <_printf_float+0x2b8>
 8108942:	bf00      	nop
 8108944:	7fefffff 	.word	0x7fefffff
 8108948:	0810cfc0 	.word	0x0810cfc0
 810894c:	0810cfc4 	.word	0x0810cfc4
 8108950:	0810cfcc 	.word	0x0810cfcc
 8108954:	0810cfc8 	.word	0x0810cfc8
 8108958:	0810cfd0 	.word	0x0810cfd0
 810895c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810895e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108960:	429a      	cmp	r2, r3
 8108962:	bfa8      	it	ge
 8108964:	461a      	movge	r2, r3
 8108966:	2a00      	cmp	r2, #0
 8108968:	4691      	mov	r9, r2
 810896a:	dc37      	bgt.n	81089dc <_printf_float+0x374>
 810896c:	f04f 0b00 	mov.w	fp, #0
 8108970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108974:	f104 021a 	add.w	r2, r4, #26
 8108978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810897a:	9305      	str	r3, [sp, #20]
 810897c:	eba3 0309 	sub.w	r3, r3, r9
 8108980:	455b      	cmp	r3, fp
 8108982:	dc33      	bgt.n	81089ec <_printf_float+0x384>
 8108984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108988:	429a      	cmp	r2, r3
 810898a:	db3b      	blt.n	8108a04 <_printf_float+0x39c>
 810898c:	6823      	ldr	r3, [r4, #0]
 810898e:	07da      	lsls	r2, r3, #31
 8108990:	d438      	bmi.n	8108a04 <_printf_float+0x39c>
 8108992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108994:	9a05      	ldr	r2, [sp, #20]
 8108996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108998:	1a9a      	subs	r2, r3, r2
 810899a:	eba3 0901 	sub.w	r9, r3, r1
 810899e:	4591      	cmp	r9, r2
 81089a0:	bfa8      	it	ge
 81089a2:	4691      	movge	r9, r2
 81089a4:	f1b9 0f00 	cmp.w	r9, #0
 81089a8:	dc35      	bgt.n	8108a16 <_printf_float+0x3ae>
 81089aa:	f04f 0800 	mov.w	r8, #0
 81089ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81089b2:	f104 0a1a 	add.w	sl, r4, #26
 81089b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81089ba:	1a9b      	subs	r3, r3, r2
 81089bc:	eba3 0309 	sub.w	r3, r3, r9
 81089c0:	4543      	cmp	r3, r8
 81089c2:	f77f af79 	ble.w	81088b8 <_printf_float+0x250>
 81089c6:	2301      	movs	r3, #1
 81089c8:	4652      	mov	r2, sl
 81089ca:	4631      	mov	r1, r6
 81089cc:	4628      	mov	r0, r5
 81089ce:	47b8      	blx	r7
 81089d0:	3001      	adds	r0, #1
 81089d2:	f43f aeaa 	beq.w	810872a <_printf_float+0xc2>
 81089d6:	f108 0801 	add.w	r8, r8, #1
 81089da:	e7ec      	b.n	81089b6 <_printf_float+0x34e>
 81089dc:	4613      	mov	r3, r2
 81089de:	4631      	mov	r1, r6
 81089e0:	4642      	mov	r2, r8
 81089e2:	4628      	mov	r0, r5
 81089e4:	47b8      	blx	r7
 81089e6:	3001      	adds	r0, #1
 81089e8:	d1c0      	bne.n	810896c <_printf_float+0x304>
 81089ea:	e69e      	b.n	810872a <_printf_float+0xc2>
 81089ec:	2301      	movs	r3, #1
 81089ee:	4631      	mov	r1, r6
 81089f0:	4628      	mov	r0, r5
 81089f2:	9205      	str	r2, [sp, #20]
 81089f4:	47b8      	blx	r7
 81089f6:	3001      	adds	r0, #1
 81089f8:	f43f ae97 	beq.w	810872a <_printf_float+0xc2>
 81089fc:	9a05      	ldr	r2, [sp, #20]
 81089fe:	f10b 0b01 	add.w	fp, fp, #1
 8108a02:	e7b9      	b.n	8108978 <_printf_float+0x310>
 8108a04:	ee18 3a10 	vmov	r3, s16
 8108a08:	4652      	mov	r2, sl
 8108a0a:	4631      	mov	r1, r6
 8108a0c:	4628      	mov	r0, r5
 8108a0e:	47b8      	blx	r7
 8108a10:	3001      	adds	r0, #1
 8108a12:	d1be      	bne.n	8108992 <_printf_float+0x32a>
 8108a14:	e689      	b.n	810872a <_printf_float+0xc2>
 8108a16:	9a05      	ldr	r2, [sp, #20]
 8108a18:	464b      	mov	r3, r9
 8108a1a:	4442      	add	r2, r8
 8108a1c:	4631      	mov	r1, r6
 8108a1e:	4628      	mov	r0, r5
 8108a20:	47b8      	blx	r7
 8108a22:	3001      	adds	r0, #1
 8108a24:	d1c1      	bne.n	81089aa <_printf_float+0x342>
 8108a26:	e680      	b.n	810872a <_printf_float+0xc2>
 8108a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108a2a:	2a01      	cmp	r2, #1
 8108a2c:	dc01      	bgt.n	8108a32 <_printf_float+0x3ca>
 8108a2e:	07db      	lsls	r3, r3, #31
 8108a30:	d538      	bpl.n	8108aa4 <_printf_float+0x43c>
 8108a32:	2301      	movs	r3, #1
 8108a34:	4642      	mov	r2, r8
 8108a36:	4631      	mov	r1, r6
 8108a38:	4628      	mov	r0, r5
 8108a3a:	47b8      	blx	r7
 8108a3c:	3001      	adds	r0, #1
 8108a3e:	f43f ae74 	beq.w	810872a <_printf_float+0xc2>
 8108a42:	ee18 3a10 	vmov	r3, s16
 8108a46:	4652      	mov	r2, sl
 8108a48:	4631      	mov	r1, r6
 8108a4a:	4628      	mov	r0, r5
 8108a4c:	47b8      	blx	r7
 8108a4e:	3001      	adds	r0, #1
 8108a50:	f43f ae6b 	beq.w	810872a <_printf_float+0xc2>
 8108a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108a58:	2200      	movs	r2, #0
 8108a5a:	2300      	movs	r3, #0
 8108a5c:	f7f8 f8bc 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a60:	b9d8      	cbnz	r0, 8108a9a <_printf_float+0x432>
 8108a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108a64:	f108 0201 	add.w	r2, r8, #1
 8108a68:	3b01      	subs	r3, #1
 8108a6a:	4631      	mov	r1, r6
 8108a6c:	4628      	mov	r0, r5
 8108a6e:	47b8      	blx	r7
 8108a70:	3001      	adds	r0, #1
 8108a72:	d10e      	bne.n	8108a92 <_printf_float+0x42a>
 8108a74:	e659      	b.n	810872a <_printf_float+0xc2>
 8108a76:	2301      	movs	r3, #1
 8108a78:	4652      	mov	r2, sl
 8108a7a:	4631      	mov	r1, r6
 8108a7c:	4628      	mov	r0, r5
 8108a7e:	47b8      	blx	r7
 8108a80:	3001      	adds	r0, #1
 8108a82:	f43f ae52 	beq.w	810872a <_printf_float+0xc2>
 8108a86:	f108 0801 	add.w	r8, r8, #1
 8108a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108a8c:	3b01      	subs	r3, #1
 8108a8e:	4543      	cmp	r3, r8
 8108a90:	dcf1      	bgt.n	8108a76 <_printf_float+0x40e>
 8108a92:	464b      	mov	r3, r9
 8108a94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8108a98:	e6dc      	b.n	8108854 <_printf_float+0x1ec>
 8108a9a:	f04f 0800 	mov.w	r8, #0
 8108a9e:	f104 0a1a 	add.w	sl, r4, #26
 8108aa2:	e7f2      	b.n	8108a8a <_printf_float+0x422>
 8108aa4:	2301      	movs	r3, #1
 8108aa6:	4642      	mov	r2, r8
 8108aa8:	e7df      	b.n	8108a6a <_printf_float+0x402>
 8108aaa:	2301      	movs	r3, #1
 8108aac:	464a      	mov	r2, r9
 8108aae:	4631      	mov	r1, r6
 8108ab0:	4628      	mov	r0, r5
 8108ab2:	47b8      	blx	r7
 8108ab4:	3001      	adds	r0, #1
 8108ab6:	f43f ae38 	beq.w	810872a <_printf_float+0xc2>
 8108aba:	f108 0801 	add.w	r8, r8, #1
 8108abe:	68e3      	ldr	r3, [r4, #12]
 8108ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8108ac2:	1a5b      	subs	r3, r3, r1
 8108ac4:	4543      	cmp	r3, r8
 8108ac6:	dcf0      	bgt.n	8108aaa <_printf_float+0x442>
 8108ac8:	e6fa      	b.n	81088c0 <_printf_float+0x258>
 8108aca:	f04f 0800 	mov.w	r8, #0
 8108ace:	f104 0919 	add.w	r9, r4, #25
 8108ad2:	e7f4      	b.n	8108abe <_printf_float+0x456>

08108ad4 <_printf_common>:
 8108ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108ad8:	4616      	mov	r6, r2
 8108ada:	4699      	mov	r9, r3
 8108adc:	688a      	ldr	r2, [r1, #8]
 8108ade:	690b      	ldr	r3, [r1, #16]
 8108ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108ae4:	4293      	cmp	r3, r2
 8108ae6:	bfb8      	it	lt
 8108ae8:	4613      	movlt	r3, r2
 8108aea:	6033      	str	r3, [r6, #0]
 8108aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108af0:	4607      	mov	r7, r0
 8108af2:	460c      	mov	r4, r1
 8108af4:	b10a      	cbz	r2, 8108afa <_printf_common+0x26>
 8108af6:	3301      	adds	r3, #1
 8108af8:	6033      	str	r3, [r6, #0]
 8108afa:	6823      	ldr	r3, [r4, #0]
 8108afc:	0699      	lsls	r1, r3, #26
 8108afe:	bf42      	ittt	mi
 8108b00:	6833      	ldrmi	r3, [r6, #0]
 8108b02:	3302      	addmi	r3, #2
 8108b04:	6033      	strmi	r3, [r6, #0]
 8108b06:	6825      	ldr	r5, [r4, #0]
 8108b08:	f015 0506 	ands.w	r5, r5, #6
 8108b0c:	d106      	bne.n	8108b1c <_printf_common+0x48>
 8108b0e:	f104 0a19 	add.w	sl, r4, #25
 8108b12:	68e3      	ldr	r3, [r4, #12]
 8108b14:	6832      	ldr	r2, [r6, #0]
 8108b16:	1a9b      	subs	r3, r3, r2
 8108b18:	42ab      	cmp	r3, r5
 8108b1a:	dc26      	bgt.n	8108b6a <_printf_common+0x96>
 8108b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108b20:	1e13      	subs	r3, r2, #0
 8108b22:	6822      	ldr	r2, [r4, #0]
 8108b24:	bf18      	it	ne
 8108b26:	2301      	movne	r3, #1
 8108b28:	0692      	lsls	r2, r2, #26
 8108b2a:	d42b      	bmi.n	8108b84 <_printf_common+0xb0>
 8108b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108b30:	4649      	mov	r1, r9
 8108b32:	4638      	mov	r0, r7
 8108b34:	47c0      	blx	r8
 8108b36:	3001      	adds	r0, #1
 8108b38:	d01e      	beq.n	8108b78 <_printf_common+0xa4>
 8108b3a:	6823      	ldr	r3, [r4, #0]
 8108b3c:	68e5      	ldr	r5, [r4, #12]
 8108b3e:	6832      	ldr	r2, [r6, #0]
 8108b40:	f003 0306 	and.w	r3, r3, #6
 8108b44:	2b04      	cmp	r3, #4
 8108b46:	bf08      	it	eq
 8108b48:	1aad      	subeq	r5, r5, r2
 8108b4a:	68a3      	ldr	r3, [r4, #8]
 8108b4c:	6922      	ldr	r2, [r4, #16]
 8108b4e:	bf0c      	ite	eq
 8108b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108b54:	2500      	movne	r5, #0
 8108b56:	4293      	cmp	r3, r2
 8108b58:	bfc4      	itt	gt
 8108b5a:	1a9b      	subgt	r3, r3, r2
 8108b5c:	18ed      	addgt	r5, r5, r3
 8108b5e:	2600      	movs	r6, #0
 8108b60:	341a      	adds	r4, #26
 8108b62:	42b5      	cmp	r5, r6
 8108b64:	d11a      	bne.n	8108b9c <_printf_common+0xc8>
 8108b66:	2000      	movs	r0, #0
 8108b68:	e008      	b.n	8108b7c <_printf_common+0xa8>
 8108b6a:	2301      	movs	r3, #1
 8108b6c:	4652      	mov	r2, sl
 8108b6e:	4649      	mov	r1, r9
 8108b70:	4638      	mov	r0, r7
 8108b72:	47c0      	blx	r8
 8108b74:	3001      	adds	r0, #1
 8108b76:	d103      	bne.n	8108b80 <_printf_common+0xac>
 8108b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8108b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108b80:	3501      	adds	r5, #1
 8108b82:	e7c6      	b.n	8108b12 <_printf_common+0x3e>
 8108b84:	18e1      	adds	r1, r4, r3
 8108b86:	1c5a      	adds	r2, r3, #1
 8108b88:	2030      	movs	r0, #48	; 0x30
 8108b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8108b8e:	4422      	add	r2, r4
 8108b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8108b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8108b98:	3302      	adds	r3, #2
 8108b9a:	e7c7      	b.n	8108b2c <_printf_common+0x58>
 8108b9c:	2301      	movs	r3, #1
 8108b9e:	4622      	mov	r2, r4
 8108ba0:	4649      	mov	r1, r9
 8108ba2:	4638      	mov	r0, r7
 8108ba4:	47c0      	blx	r8
 8108ba6:	3001      	adds	r0, #1
 8108ba8:	d0e6      	beq.n	8108b78 <_printf_common+0xa4>
 8108baa:	3601      	adds	r6, #1
 8108bac:	e7d9      	b.n	8108b62 <_printf_common+0x8e>
	...

08108bb0 <_printf_i>:
 8108bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108bb4:	7e0f      	ldrb	r7, [r1, #24]
 8108bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8108bb8:	2f78      	cmp	r7, #120	; 0x78
 8108bba:	4691      	mov	r9, r2
 8108bbc:	4680      	mov	r8, r0
 8108bbe:	460c      	mov	r4, r1
 8108bc0:	469a      	mov	sl, r3
 8108bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8108bc6:	d807      	bhi.n	8108bd8 <_printf_i+0x28>
 8108bc8:	2f62      	cmp	r7, #98	; 0x62
 8108bca:	d80a      	bhi.n	8108be2 <_printf_i+0x32>
 8108bcc:	2f00      	cmp	r7, #0
 8108bce:	f000 80d8 	beq.w	8108d82 <_printf_i+0x1d2>
 8108bd2:	2f58      	cmp	r7, #88	; 0x58
 8108bd4:	f000 80a3 	beq.w	8108d1e <_printf_i+0x16e>
 8108bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8108be0:	e03a      	b.n	8108c58 <_printf_i+0xa8>
 8108be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8108be6:	2b15      	cmp	r3, #21
 8108be8:	d8f6      	bhi.n	8108bd8 <_printf_i+0x28>
 8108bea:	a101      	add	r1, pc, #4	; (adr r1, 8108bf0 <_printf_i+0x40>)
 8108bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108bf0:	08108c49 	.word	0x08108c49
 8108bf4:	08108c5d 	.word	0x08108c5d
 8108bf8:	08108bd9 	.word	0x08108bd9
 8108bfc:	08108bd9 	.word	0x08108bd9
 8108c00:	08108bd9 	.word	0x08108bd9
 8108c04:	08108bd9 	.word	0x08108bd9
 8108c08:	08108c5d 	.word	0x08108c5d
 8108c0c:	08108bd9 	.word	0x08108bd9
 8108c10:	08108bd9 	.word	0x08108bd9
 8108c14:	08108bd9 	.word	0x08108bd9
 8108c18:	08108bd9 	.word	0x08108bd9
 8108c1c:	08108d69 	.word	0x08108d69
 8108c20:	08108c8d 	.word	0x08108c8d
 8108c24:	08108d4b 	.word	0x08108d4b
 8108c28:	08108bd9 	.word	0x08108bd9
 8108c2c:	08108bd9 	.word	0x08108bd9
 8108c30:	08108d8b 	.word	0x08108d8b
 8108c34:	08108bd9 	.word	0x08108bd9
 8108c38:	08108c8d 	.word	0x08108c8d
 8108c3c:	08108bd9 	.word	0x08108bd9
 8108c40:	08108bd9 	.word	0x08108bd9
 8108c44:	08108d53 	.word	0x08108d53
 8108c48:	682b      	ldr	r3, [r5, #0]
 8108c4a:	1d1a      	adds	r2, r3, #4
 8108c4c:	681b      	ldr	r3, [r3, #0]
 8108c4e:	602a      	str	r2, [r5, #0]
 8108c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108c58:	2301      	movs	r3, #1
 8108c5a:	e0a3      	b.n	8108da4 <_printf_i+0x1f4>
 8108c5c:	6820      	ldr	r0, [r4, #0]
 8108c5e:	6829      	ldr	r1, [r5, #0]
 8108c60:	0606      	lsls	r6, r0, #24
 8108c62:	f101 0304 	add.w	r3, r1, #4
 8108c66:	d50a      	bpl.n	8108c7e <_printf_i+0xce>
 8108c68:	680e      	ldr	r6, [r1, #0]
 8108c6a:	602b      	str	r3, [r5, #0]
 8108c6c:	2e00      	cmp	r6, #0
 8108c6e:	da03      	bge.n	8108c78 <_printf_i+0xc8>
 8108c70:	232d      	movs	r3, #45	; 0x2d
 8108c72:	4276      	negs	r6, r6
 8108c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108c78:	485e      	ldr	r0, [pc, #376]	; (8108df4 <_printf_i+0x244>)
 8108c7a:	230a      	movs	r3, #10
 8108c7c:	e019      	b.n	8108cb2 <_printf_i+0x102>
 8108c7e:	680e      	ldr	r6, [r1, #0]
 8108c80:	602b      	str	r3, [r5, #0]
 8108c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8108c86:	bf18      	it	ne
 8108c88:	b236      	sxthne	r6, r6
 8108c8a:	e7ef      	b.n	8108c6c <_printf_i+0xbc>
 8108c8c:	682b      	ldr	r3, [r5, #0]
 8108c8e:	6820      	ldr	r0, [r4, #0]
 8108c90:	1d19      	adds	r1, r3, #4
 8108c92:	6029      	str	r1, [r5, #0]
 8108c94:	0601      	lsls	r1, r0, #24
 8108c96:	d501      	bpl.n	8108c9c <_printf_i+0xec>
 8108c98:	681e      	ldr	r6, [r3, #0]
 8108c9a:	e002      	b.n	8108ca2 <_printf_i+0xf2>
 8108c9c:	0646      	lsls	r6, r0, #25
 8108c9e:	d5fb      	bpl.n	8108c98 <_printf_i+0xe8>
 8108ca0:	881e      	ldrh	r6, [r3, #0]
 8108ca2:	4854      	ldr	r0, [pc, #336]	; (8108df4 <_printf_i+0x244>)
 8108ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8108ca6:	bf0c      	ite	eq
 8108ca8:	2308      	moveq	r3, #8
 8108caa:	230a      	movne	r3, #10
 8108cac:	2100      	movs	r1, #0
 8108cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8108cb2:	6865      	ldr	r5, [r4, #4]
 8108cb4:	60a5      	str	r5, [r4, #8]
 8108cb6:	2d00      	cmp	r5, #0
 8108cb8:	bfa2      	ittt	ge
 8108cba:	6821      	ldrge	r1, [r4, #0]
 8108cbc:	f021 0104 	bicge.w	r1, r1, #4
 8108cc0:	6021      	strge	r1, [r4, #0]
 8108cc2:	b90e      	cbnz	r6, 8108cc8 <_printf_i+0x118>
 8108cc4:	2d00      	cmp	r5, #0
 8108cc6:	d04d      	beq.n	8108d64 <_printf_i+0x1b4>
 8108cc8:	4615      	mov	r5, r2
 8108cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8108cce:	fb03 6711 	mls	r7, r3, r1, r6
 8108cd2:	5dc7      	ldrb	r7, [r0, r7]
 8108cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8108cd8:	4637      	mov	r7, r6
 8108cda:	42bb      	cmp	r3, r7
 8108cdc:	460e      	mov	r6, r1
 8108cde:	d9f4      	bls.n	8108cca <_printf_i+0x11a>
 8108ce0:	2b08      	cmp	r3, #8
 8108ce2:	d10b      	bne.n	8108cfc <_printf_i+0x14c>
 8108ce4:	6823      	ldr	r3, [r4, #0]
 8108ce6:	07de      	lsls	r6, r3, #31
 8108ce8:	d508      	bpl.n	8108cfc <_printf_i+0x14c>
 8108cea:	6923      	ldr	r3, [r4, #16]
 8108cec:	6861      	ldr	r1, [r4, #4]
 8108cee:	4299      	cmp	r1, r3
 8108cf0:	bfde      	ittt	le
 8108cf2:	2330      	movle	r3, #48	; 0x30
 8108cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8108cf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8108cfc:	1b52      	subs	r2, r2, r5
 8108cfe:	6122      	str	r2, [r4, #16]
 8108d00:	f8cd a000 	str.w	sl, [sp]
 8108d04:	464b      	mov	r3, r9
 8108d06:	aa03      	add	r2, sp, #12
 8108d08:	4621      	mov	r1, r4
 8108d0a:	4640      	mov	r0, r8
 8108d0c:	f7ff fee2 	bl	8108ad4 <_printf_common>
 8108d10:	3001      	adds	r0, #1
 8108d12:	d14c      	bne.n	8108dae <_printf_i+0x1fe>
 8108d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8108d18:	b004      	add	sp, #16
 8108d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108d1e:	4835      	ldr	r0, [pc, #212]	; (8108df4 <_printf_i+0x244>)
 8108d20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8108d24:	6829      	ldr	r1, [r5, #0]
 8108d26:	6823      	ldr	r3, [r4, #0]
 8108d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8108d2c:	6029      	str	r1, [r5, #0]
 8108d2e:	061d      	lsls	r5, r3, #24
 8108d30:	d514      	bpl.n	8108d5c <_printf_i+0x1ac>
 8108d32:	07df      	lsls	r7, r3, #31
 8108d34:	bf44      	itt	mi
 8108d36:	f043 0320 	orrmi.w	r3, r3, #32
 8108d3a:	6023      	strmi	r3, [r4, #0]
 8108d3c:	b91e      	cbnz	r6, 8108d46 <_printf_i+0x196>
 8108d3e:	6823      	ldr	r3, [r4, #0]
 8108d40:	f023 0320 	bic.w	r3, r3, #32
 8108d44:	6023      	str	r3, [r4, #0]
 8108d46:	2310      	movs	r3, #16
 8108d48:	e7b0      	b.n	8108cac <_printf_i+0xfc>
 8108d4a:	6823      	ldr	r3, [r4, #0]
 8108d4c:	f043 0320 	orr.w	r3, r3, #32
 8108d50:	6023      	str	r3, [r4, #0]
 8108d52:	2378      	movs	r3, #120	; 0x78
 8108d54:	4828      	ldr	r0, [pc, #160]	; (8108df8 <_printf_i+0x248>)
 8108d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108d5a:	e7e3      	b.n	8108d24 <_printf_i+0x174>
 8108d5c:	0659      	lsls	r1, r3, #25
 8108d5e:	bf48      	it	mi
 8108d60:	b2b6      	uxthmi	r6, r6
 8108d62:	e7e6      	b.n	8108d32 <_printf_i+0x182>
 8108d64:	4615      	mov	r5, r2
 8108d66:	e7bb      	b.n	8108ce0 <_printf_i+0x130>
 8108d68:	682b      	ldr	r3, [r5, #0]
 8108d6a:	6826      	ldr	r6, [r4, #0]
 8108d6c:	6961      	ldr	r1, [r4, #20]
 8108d6e:	1d18      	adds	r0, r3, #4
 8108d70:	6028      	str	r0, [r5, #0]
 8108d72:	0635      	lsls	r5, r6, #24
 8108d74:	681b      	ldr	r3, [r3, #0]
 8108d76:	d501      	bpl.n	8108d7c <_printf_i+0x1cc>
 8108d78:	6019      	str	r1, [r3, #0]
 8108d7a:	e002      	b.n	8108d82 <_printf_i+0x1d2>
 8108d7c:	0670      	lsls	r0, r6, #25
 8108d7e:	d5fb      	bpl.n	8108d78 <_printf_i+0x1c8>
 8108d80:	8019      	strh	r1, [r3, #0]
 8108d82:	2300      	movs	r3, #0
 8108d84:	6123      	str	r3, [r4, #16]
 8108d86:	4615      	mov	r5, r2
 8108d88:	e7ba      	b.n	8108d00 <_printf_i+0x150>
 8108d8a:	682b      	ldr	r3, [r5, #0]
 8108d8c:	1d1a      	adds	r2, r3, #4
 8108d8e:	602a      	str	r2, [r5, #0]
 8108d90:	681d      	ldr	r5, [r3, #0]
 8108d92:	6862      	ldr	r2, [r4, #4]
 8108d94:	2100      	movs	r1, #0
 8108d96:	4628      	mov	r0, r5
 8108d98:	f7f7 faaa 	bl	81002f0 <memchr>
 8108d9c:	b108      	cbz	r0, 8108da2 <_printf_i+0x1f2>
 8108d9e:	1b40      	subs	r0, r0, r5
 8108da0:	6060      	str	r0, [r4, #4]
 8108da2:	6863      	ldr	r3, [r4, #4]
 8108da4:	6123      	str	r3, [r4, #16]
 8108da6:	2300      	movs	r3, #0
 8108da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108dac:	e7a8      	b.n	8108d00 <_printf_i+0x150>
 8108dae:	6923      	ldr	r3, [r4, #16]
 8108db0:	462a      	mov	r2, r5
 8108db2:	4649      	mov	r1, r9
 8108db4:	4640      	mov	r0, r8
 8108db6:	47d0      	blx	sl
 8108db8:	3001      	adds	r0, #1
 8108dba:	d0ab      	beq.n	8108d14 <_printf_i+0x164>
 8108dbc:	6823      	ldr	r3, [r4, #0]
 8108dbe:	079b      	lsls	r3, r3, #30
 8108dc0:	d413      	bmi.n	8108dea <_printf_i+0x23a>
 8108dc2:	68e0      	ldr	r0, [r4, #12]
 8108dc4:	9b03      	ldr	r3, [sp, #12]
 8108dc6:	4298      	cmp	r0, r3
 8108dc8:	bfb8      	it	lt
 8108dca:	4618      	movlt	r0, r3
 8108dcc:	e7a4      	b.n	8108d18 <_printf_i+0x168>
 8108dce:	2301      	movs	r3, #1
 8108dd0:	4632      	mov	r2, r6
 8108dd2:	4649      	mov	r1, r9
 8108dd4:	4640      	mov	r0, r8
 8108dd6:	47d0      	blx	sl
 8108dd8:	3001      	adds	r0, #1
 8108dda:	d09b      	beq.n	8108d14 <_printf_i+0x164>
 8108ddc:	3501      	adds	r5, #1
 8108dde:	68e3      	ldr	r3, [r4, #12]
 8108de0:	9903      	ldr	r1, [sp, #12]
 8108de2:	1a5b      	subs	r3, r3, r1
 8108de4:	42ab      	cmp	r3, r5
 8108de6:	dcf2      	bgt.n	8108dce <_printf_i+0x21e>
 8108de8:	e7eb      	b.n	8108dc2 <_printf_i+0x212>
 8108dea:	2500      	movs	r5, #0
 8108dec:	f104 0619 	add.w	r6, r4, #25
 8108df0:	e7f5      	b.n	8108dde <_printf_i+0x22e>
 8108df2:	bf00      	nop
 8108df4:	0810cfd2 	.word	0x0810cfd2
 8108df8:	0810cfe3 	.word	0x0810cfe3

08108dfc <_scanf_float>:
 8108dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108e00:	b087      	sub	sp, #28
 8108e02:	4617      	mov	r7, r2
 8108e04:	9303      	str	r3, [sp, #12]
 8108e06:	688b      	ldr	r3, [r1, #8]
 8108e08:	1e5a      	subs	r2, r3, #1
 8108e0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8108e0e:	bf83      	ittte	hi
 8108e10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8108e14:	195b      	addhi	r3, r3, r5
 8108e16:	9302      	strhi	r3, [sp, #8]
 8108e18:	2300      	movls	r3, #0
 8108e1a:	bf86      	itte	hi
 8108e1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8108e20:	608b      	strhi	r3, [r1, #8]
 8108e22:	9302      	strls	r3, [sp, #8]
 8108e24:	680b      	ldr	r3, [r1, #0]
 8108e26:	468b      	mov	fp, r1
 8108e28:	2500      	movs	r5, #0
 8108e2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8108e2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8108e32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8108e36:	4680      	mov	r8, r0
 8108e38:	460c      	mov	r4, r1
 8108e3a:	465e      	mov	r6, fp
 8108e3c:	46aa      	mov	sl, r5
 8108e3e:	46a9      	mov	r9, r5
 8108e40:	9501      	str	r5, [sp, #4]
 8108e42:	68a2      	ldr	r2, [r4, #8]
 8108e44:	b152      	cbz	r2, 8108e5c <_scanf_float+0x60>
 8108e46:	683b      	ldr	r3, [r7, #0]
 8108e48:	781b      	ldrb	r3, [r3, #0]
 8108e4a:	2b4e      	cmp	r3, #78	; 0x4e
 8108e4c:	d864      	bhi.n	8108f18 <_scanf_float+0x11c>
 8108e4e:	2b40      	cmp	r3, #64	; 0x40
 8108e50:	d83c      	bhi.n	8108ecc <_scanf_float+0xd0>
 8108e52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108e56:	b2c8      	uxtb	r0, r1
 8108e58:	280e      	cmp	r0, #14
 8108e5a:	d93a      	bls.n	8108ed2 <_scanf_float+0xd6>
 8108e5c:	f1b9 0f00 	cmp.w	r9, #0
 8108e60:	d003      	beq.n	8108e6a <_scanf_float+0x6e>
 8108e62:	6823      	ldr	r3, [r4, #0]
 8108e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108e68:	6023      	str	r3, [r4, #0]
 8108e6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8108e6e:	f1ba 0f01 	cmp.w	sl, #1
 8108e72:	f200 8113 	bhi.w	810909c <_scanf_float+0x2a0>
 8108e76:	455e      	cmp	r6, fp
 8108e78:	f200 8105 	bhi.w	8109086 <_scanf_float+0x28a>
 8108e7c:	2501      	movs	r5, #1
 8108e7e:	4628      	mov	r0, r5
 8108e80:	b007      	add	sp, #28
 8108e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108e86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8108e8a:	2a0d      	cmp	r2, #13
 8108e8c:	d8e6      	bhi.n	8108e5c <_scanf_float+0x60>
 8108e8e:	a101      	add	r1, pc, #4	; (adr r1, 8108e94 <_scanf_float+0x98>)
 8108e90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8108e94:	08108fd3 	.word	0x08108fd3
 8108e98:	08108e5d 	.word	0x08108e5d
 8108e9c:	08108e5d 	.word	0x08108e5d
 8108ea0:	08108e5d 	.word	0x08108e5d
 8108ea4:	08109033 	.word	0x08109033
 8108ea8:	0810900b 	.word	0x0810900b
 8108eac:	08108e5d 	.word	0x08108e5d
 8108eb0:	08108e5d 	.word	0x08108e5d
 8108eb4:	08108fe1 	.word	0x08108fe1
 8108eb8:	08108e5d 	.word	0x08108e5d
 8108ebc:	08108e5d 	.word	0x08108e5d
 8108ec0:	08108e5d 	.word	0x08108e5d
 8108ec4:	08108e5d 	.word	0x08108e5d
 8108ec8:	08108f99 	.word	0x08108f99
 8108ecc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8108ed0:	e7db      	b.n	8108e8a <_scanf_float+0x8e>
 8108ed2:	290e      	cmp	r1, #14
 8108ed4:	d8c2      	bhi.n	8108e5c <_scanf_float+0x60>
 8108ed6:	a001      	add	r0, pc, #4	; (adr r0, 8108edc <_scanf_float+0xe0>)
 8108ed8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108edc:	08108f8b 	.word	0x08108f8b
 8108ee0:	08108e5d 	.word	0x08108e5d
 8108ee4:	08108f8b 	.word	0x08108f8b
 8108ee8:	0810901f 	.word	0x0810901f
 8108eec:	08108e5d 	.word	0x08108e5d
 8108ef0:	08108f39 	.word	0x08108f39
 8108ef4:	08108f75 	.word	0x08108f75
 8108ef8:	08108f75 	.word	0x08108f75
 8108efc:	08108f75 	.word	0x08108f75
 8108f00:	08108f75 	.word	0x08108f75
 8108f04:	08108f75 	.word	0x08108f75
 8108f08:	08108f75 	.word	0x08108f75
 8108f0c:	08108f75 	.word	0x08108f75
 8108f10:	08108f75 	.word	0x08108f75
 8108f14:	08108f75 	.word	0x08108f75
 8108f18:	2b6e      	cmp	r3, #110	; 0x6e
 8108f1a:	d809      	bhi.n	8108f30 <_scanf_float+0x134>
 8108f1c:	2b60      	cmp	r3, #96	; 0x60
 8108f1e:	d8b2      	bhi.n	8108e86 <_scanf_float+0x8a>
 8108f20:	2b54      	cmp	r3, #84	; 0x54
 8108f22:	d077      	beq.n	8109014 <_scanf_float+0x218>
 8108f24:	2b59      	cmp	r3, #89	; 0x59
 8108f26:	d199      	bne.n	8108e5c <_scanf_float+0x60>
 8108f28:	2d07      	cmp	r5, #7
 8108f2a:	d197      	bne.n	8108e5c <_scanf_float+0x60>
 8108f2c:	2508      	movs	r5, #8
 8108f2e:	e029      	b.n	8108f84 <_scanf_float+0x188>
 8108f30:	2b74      	cmp	r3, #116	; 0x74
 8108f32:	d06f      	beq.n	8109014 <_scanf_float+0x218>
 8108f34:	2b79      	cmp	r3, #121	; 0x79
 8108f36:	e7f6      	b.n	8108f26 <_scanf_float+0x12a>
 8108f38:	6821      	ldr	r1, [r4, #0]
 8108f3a:	05c8      	lsls	r0, r1, #23
 8108f3c:	d51a      	bpl.n	8108f74 <_scanf_float+0x178>
 8108f3e:	9b02      	ldr	r3, [sp, #8]
 8108f40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108f44:	6021      	str	r1, [r4, #0]
 8108f46:	f109 0901 	add.w	r9, r9, #1
 8108f4a:	b11b      	cbz	r3, 8108f54 <_scanf_float+0x158>
 8108f4c:	3b01      	subs	r3, #1
 8108f4e:	3201      	adds	r2, #1
 8108f50:	9302      	str	r3, [sp, #8]
 8108f52:	60a2      	str	r2, [r4, #8]
 8108f54:	68a3      	ldr	r3, [r4, #8]
 8108f56:	3b01      	subs	r3, #1
 8108f58:	60a3      	str	r3, [r4, #8]
 8108f5a:	6923      	ldr	r3, [r4, #16]
 8108f5c:	3301      	adds	r3, #1
 8108f5e:	6123      	str	r3, [r4, #16]
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	3b01      	subs	r3, #1
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	607b      	str	r3, [r7, #4]
 8108f68:	f340 8084 	ble.w	8109074 <_scanf_float+0x278>
 8108f6c:	683b      	ldr	r3, [r7, #0]
 8108f6e:	3301      	adds	r3, #1
 8108f70:	603b      	str	r3, [r7, #0]
 8108f72:	e766      	b.n	8108e42 <_scanf_float+0x46>
 8108f74:	eb1a 0f05 	cmn.w	sl, r5
 8108f78:	f47f af70 	bne.w	8108e5c <_scanf_float+0x60>
 8108f7c:	6822      	ldr	r2, [r4, #0]
 8108f7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8108f82:	6022      	str	r2, [r4, #0]
 8108f84:	f806 3b01 	strb.w	r3, [r6], #1
 8108f88:	e7e4      	b.n	8108f54 <_scanf_float+0x158>
 8108f8a:	6822      	ldr	r2, [r4, #0]
 8108f8c:	0610      	lsls	r0, r2, #24
 8108f8e:	f57f af65 	bpl.w	8108e5c <_scanf_float+0x60>
 8108f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8108f96:	e7f4      	b.n	8108f82 <_scanf_float+0x186>
 8108f98:	f1ba 0f00 	cmp.w	sl, #0
 8108f9c:	d10e      	bne.n	8108fbc <_scanf_float+0x1c0>
 8108f9e:	f1b9 0f00 	cmp.w	r9, #0
 8108fa2:	d10e      	bne.n	8108fc2 <_scanf_float+0x1c6>
 8108fa4:	6822      	ldr	r2, [r4, #0]
 8108fa6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108faa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108fae:	d108      	bne.n	8108fc2 <_scanf_float+0x1c6>
 8108fb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108fb4:	6022      	str	r2, [r4, #0]
 8108fb6:	f04f 0a01 	mov.w	sl, #1
 8108fba:	e7e3      	b.n	8108f84 <_scanf_float+0x188>
 8108fbc:	f1ba 0f02 	cmp.w	sl, #2
 8108fc0:	d055      	beq.n	810906e <_scanf_float+0x272>
 8108fc2:	2d01      	cmp	r5, #1
 8108fc4:	d002      	beq.n	8108fcc <_scanf_float+0x1d0>
 8108fc6:	2d04      	cmp	r5, #4
 8108fc8:	f47f af48 	bne.w	8108e5c <_scanf_float+0x60>
 8108fcc:	3501      	adds	r5, #1
 8108fce:	b2ed      	uxtb	r5, r5
 8108fd0:	e7d8      	b.n	8108f84 <_scanf_float+0x188>
 8108fd2:	f1ba 0f01 	cmp.w	sl, #1
 8108fd6:	f47f af41 	bne.w	8108e5c <_scanf_float+0x60>
 8108fda:	f04f 0a02 	mov.w	sl, #2
 8108fde:	e7d1      	b.n	8108f84 <_scanf_float+0x188>
 8108fe0:	b97d      	cbnz	r5, 8109002 <_scanf_float+0x206>
 8108fe2:	f1b9 0f00 	cmp.w	r9, #0
 8108fe6:	f47f af3c 	bne.w	8108e62 <_scanf_float+0x66>
 8108fea:	6822      	ldr	r2, [r4, #0]
 8108fec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108ff0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108ff4:	f47f af39 	bne.w	8108e6a <_scanf_float+0x6e>
 8108ff8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108ffc:	6022      	str	r2, [r4, #0]
 8108ffe:	2501      	movs	r5, #1
 8109000:	e7c0      	b.n	8108f84 <_scanf_float+0x188>
 8109002:	2d03      	cmp	r5, #3
 8109004:	d0e2      	beq.n	8108fcc <_scanf_float+0x1d0>
 8109006:	2d05      	cmp	r5, #5
 8109008:	e7de      	b.n	8108fc8 <_scanf_float+0x1cc>
 810900a:	2d02      	cmp	r5, #2
 810900c:	f47f af26 	bne.w	8108e5c <_scanf_float+0x60>
 8109010:	2503      	movs	r5, #3
 8109012:	e7b7      	b.n	8108f84 <_scanf_float+0x188>
 8109014:	2d06      	cmp	r5, #6
 8109016:	f47f af21 	bne.w	8108e5c <_scanf_float+0x60>
 810901a:	2507      	movs	r5, #7
 810901c:	e7b2      	b.n	8108f84 <_scanf_float+0x188>
 810901e:	6822      	ldr	r2, [r4, #0]
 8109020:	0591      	lsls	r1, r2, #22
 8109022:	f57f af1b 	bpl.w	8108e5c <_scanf_float+0x60>
 8109026:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810902a:	6022      	str	r2, [r4, #0]
 810902c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109030:	e7a8      	b.n	8108f84 <_scanf_float+0x188>
 8109032:	6822      	ldr	r2, [r4, #0]
 8109034:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109038:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810903c:	d006      	beq.n	810904c <_scanf_float+0x250>
 810903e:	0550      	lsls	r0, r2, #21
 8109040:	f57f af0c 	bpl.w	8108e5c <_scanf_float+0x60>
 8109044:	f1b9 0f00 	cmp.w	r9, #0
 8109048:	f43f af0f 	beq.w	8108e6a <_scanf_float+0x6e>
 810904c:	0591      	lsls	r1, r2, #22
 810904e:	bf58      	it	pl
 8109050:	9901      	ldrpl	r1, [sp, #4]
 8109052:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109056:	bf58      	it	pl
 8109058:	eba9 0101 	subpl.w	r1, r9, r1
 810905c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109060:	bf58      	it	pl
 8109062:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109066:	6022      	str	r2, [r4, #0]
 8109068:	f04f 0900 	mov.w	r9, #0
 810906c:	e78a      	b.n	8108f84 <_scanf_float+0x188>
 810906e:	f04f 0a03 	mov.w	sl, #3
 8109072:	e787      	b.n	8108f84 <_scanf_float+0x188>
 8109074:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109078:	4639      	mov	r1, r7
 810907a:	4640      	mov	r0, r8
 810907c:	4798      	blx	r3
 810907e:	2800      	cmp	r0, #0
 8109080:	f43f aedf 	beq.w	8108e42 <_scanf_float+0x46>
 8109084:	e6ea      	b.n	8108e5c <_scanf_float+0x60>
 8109086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810908a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810908e:	463a      	mov	r2, r7
 8109090:	4640      	mov	r0, r8
 8109092:	4798      	blx	r3
 8109094:	6923      	ldr	r3, [r4, #16]
 8109096:	3b01      	subs	r3, #1
 8109098:	6123      	str	r3, [r4, #16]
 810909a:	e6ec      	b.n	8108e76 <_scanf_float+0x7a>
 810909c:	1e6b      	subs	r3, r5, #1
 810909e:	2b06      	cmp	r3, #6
 81090a0:	d825      	bhi.n	81090ee <_scanf_float+0x2f2>
 81090a2:	2d02      	cmp	r5, #2
 81090a4:	d836      	bhi.n	8109114 <_scanf_float+0x318>
 81090a6:	455e      	cmp	r6, fp
 81090a8:	f67f aee8 	bls.w	8108e7c <_scanf_float+0x80>
 81090ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81090b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81090b4:	463a      	mov	r2, r7
 81090b6:	4640      	mov	r0, r8
 81090b8:	4798      	blx	r3
 81090ba:	6923      	ldr	r3, [r4, #16]
 81090bc:	3b01      	subs	r3, #1
 81090be:	6123      	str	r3, [r4, #16]
 81090c0:	e7f1      	b.n	81090a6 <_scanf_float+0x2aa>
 81090c2:	9802      	ldr	r0, [sp, #8]
 81090c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81090c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81090cc:	9002      	str	r0, [sp, #8]
 81090ce:	463a      	mov	r2, r7
 81090d0:	4640      	mov	r0, r8
 81090d2:	4798      	blx	r3
 81090d4:	6923      	ldr	r3, [r4, #16]
 81090d6:	3b01      	subs	r3, #1
 81090d8:	6123      	str	r3, [r4, #16]
 81090da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 81090de:	fa5f fa8a 	uxtb.w	sl, sl
 81090e2:	f1ba 0f02 	cmp.w	sl, #2
 81090e6:	d1ec      	bne.n	81090c2 <_scanf_float+0x2c6>
 81090e8:	3d03      	subs	r5, #3
 81090ea:	b2ed      	uxtb	r5, r5
 81090ec:	1b76      	subs	r6, r6, r5
 81090ee:	6823      	ldr	r3, [r4, #0]
 81090f0:	05da      	lsls	r2, r3, #23
 81090f2:	d52f      	bpl.n	8109154 <_scanf_float+0x358>
 81090f4:	055b      	lsls	r3, r3, #21
 81090f6:	d510      	bpl.n	810911a <_scanf_float+0x31e>
 81090f8:	455e      	cmp	r6, fp
 81090fa:	f67f aebf 	bls.w	8108e7c <_scanf_float+0x80>
 81090fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109106:	463a      	mov	r2, r7
 8109108:	4640      	mov	r0, r8
 810910a:	4798      	blx	r3
 810910c:	6923      	ldr	r3, [r4, #16]
 810910e:	3b01      	subs	r3, #1
 8109110:	6123      	str	r3, [r4, #16]
 8109112:	e7f1      	b.n	81090f8 <_scanf_float+0x2fc>
 8109114:	46aa      	mov	sl, r5
 8109116:	9602      	str	r6, [sp, #8]
 8109118:	e7df      	b.n	81090da <_scanf_float+0x2de>
 810911a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810911e:	6923      	ldr	r3, [r4, #16]
 8109120:	2965      	cmp	r1, #101	; 0x65
 8109122:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8109126:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 810912a:	6123      	str	r3, [r4, #16]
 810912c:	d00c      	beq.n	8109148 <_scanf_float+0x34c>
 810912e:	2945      	cmp	r1, #69	; 0x45
 8109130:	d00a      	beq.n	8109148 <_scanf_float+0x34c>
 8109132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109136:	463a      	mov	r2, r7
 8109138:	4640      	mov	r0, r8
 810913a:	4798      	blx	r3
 810913c:	6923      	ldr	r3, [r4, #16]
 810913e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109142:	3b01      	subs	r3, #1
 8109144:	1eb5      	subs	r5, r6, #2
 8109146:	6123      	str	r3, [r4, #16]
 8109148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810914c:	463a      	mov	r2, r7
 810914e:	4640      	mov	r0, r8
 8109150:	4798      	blx	r3
 8109152:	462e      	mov	r6, r5
 8109154:	6825      	ldr	r5, [r4, #0]
 8109156:	f015 0510 	ands.w	r5, r5, #16
 810915a:	d159      	bne.n	8109210 <_scanf_float+0x414>
 810915c:	7035      	strb	r5, [r6, #0]
 810915e:	6823      	ldr	r3, [r4, #0]
 8109160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109168:	d11b      	bne.n	81091a2 <_scanf_float+0x3a6>
 810916a:	9b01      	ldr	r3, [sp, #4]
 810916c:	454b      	cmp	r3, r9
 810916e:	eba3 0209 	sub.w	r2, r3, r9
 8109172:	d123      	bne.n	81091bc <_scanf_float+0x3c0>
 8109174:	2200      	movs	r2, #0
 8109176:	4659      	mov	r1, fp
 8109178:	4640      	mov	r0, r8
 810917a:	f000 ff27 	bl	8109fcc <_strtod_r>
 810917e:	6822      	ldr	r2, [r4, #0]
 8109180:	9b03      	ldr	r3, [sp, #12]
 8109182:	f012 0f02 	tst.w	r2, #2
 8109186:	ec57 6b10 	vmov	r6, r7, d0
 810918a:	681b      	ldr	r3, [r3, #0]
 810918c:	d021      	beq.n	81091d2 <_scanf_float+0x3d6>
 810918e:	9903      	ldr	r1, [sp, #12]
 8109190:	1d1a      	adds	r2, r3, #4
 8109192:	600a      	str	r2, [r1, #0]
 8109194:	681b      	ldr	r3, [r3, #0]
 8109196:	e9c3 6700 	strd	r6, r7, [r3]
 810919a:	68e3      	ldr	r3, [r4, #12]
 810919c:	3301      	adds	r3, #1
 810919e:	60e3      	str	r3, [r4, #12]
 81091a0:	e66d      	b.n	8108e7e <_scanf_float+0x82>
 81091a2:	9b04      	ldr	r3, [sp, #16]
 81091a4:	2b00      	cmp	r3, #0
 81091a6:	d0e5      	beq.n	8109174 <_scanf_float+0x378>
 81091a8:	9905      	ldr	r1, [sp, #20]
 81091aa:	230a      	movs	r3, #10
 81091ac:	462a      	mov	r2, r5
 81091ae:	3101      	adds	r1, #1
 81091b0:	4640      	mov	r0, r8
 81091b2:	f000 ff93 	bl	810a0dc <_strtol_r>
 81091b6:	9b04      	ldr	r3, [sp, #16]
 81091b8:	9e05      	ldr	r6, [sp, #20]
 81091ba:	1ac2      	subs	r2, r0, r3
 81091bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81091c0:	429e      	cmp	r6, r3
 81091c2:	bf28      	it	cs
 81091c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81091c8:	4912      	ldr	r1, [pc, #72]	; (8109214 <_scanf_float+0x418>)
 81091ca:	4630      	mov	r0, r6
 81091cc:	f000 f8ba 	bl	8109344 <siprintf>
 81091d0:	e7d0      	b.n	8109174 <_scanf_float+0x378>
 81091d2:	9903      	ldr	r1, [sp, #12]
 81091d4:	f012 0f04 	tst.w	r2, #4
 81091d8:	f103 0204 	add.w	r2, r3, #4
 81091dc:	600a      	str	r2, [r1, #0]
 81091de:	d1d9      	bne.n	8109194 <_scanf_float+0x398>
 81091e0:	f8d3 8000 	ldr.w	r8, [r3]
 81091e4:	ee10 2a10 	vmov	r2, s0
 81091e8:	ee10 0a10 	vmov	r0, s0
 81091ec:	463b      	mov	r3, r7
 81091ee:	4639      	mov	r1, r7
 81091f0:	f7f7 fd24 	bl	8100c3c <__aeabi_dcmpun>
 81091f4:	b128      	cbz	r0, 8109202 <_scanf_float+0x406>
 81091f6:	4808      	ldr	r0, [pc, #32]	; (8109218 <_scanf_float+0x41c>)
 81091f8:	f000 f89e 	bl	8109338 <nanf>
 81091fc:	ed88 0a00 	vstr	s0, [r8]
 8109200:	e7cb      	b.n	810919a <_scanf_float+0x39e>
 8109202:	4630      	mov	r0, r6
 8109204:	4639      	mov	r1, r7
 8109206:	f7f7 fd77 	bl	8100cf8 <__aeabi_d2f>
 810920a:	f8c8 0000 	str.w	r0, [r8]
 810920e:	e7c4      	b.n	810919a <_scanf_float+0x39e>
 8109210:	2500      	movs	r5, #0
 8109212:	e634      	b.n	8108e7e <_scanf_float+0x82>
 8109214:	0810cff4 	.word	0x0810cff4
 8109218:	0810d468 	.word	0x0810d468

0810921c <iprintf>:
 810921c:	b40f      	push	{r0, r1, r2, r3}
 810921e:	4b0a      	ldr	r3, [pc, #40]	; (8109248 <iprintf+0x2c>)
 8109220:	b513      	push	{r0, r1, r4, lr}
 8109222:	681c      	ldr	r4, [r3, #0]
 8109224:	b124      	cbz	r4, 8109230 <iprintf+0x14>
 8109226:	69a3      	ldr	r3, [r4, #24]
 8109228:	b913      	cbnz	r3, 8109230 <iprintf+0x14>
 810922a:	4620      	mov	r0, r4
 810922c:	f001 ffac 	bl	810b188 <__sinit>
 8109230:	ab05      	add	r3, sp, #20
 8109232:	9a04      	ldr	r2, [sp, #16]
 8109234:	68a1      	ldr	r1, [r4, #8]
 8109236:	9301      	str	r3, [sp, #4]
 8109238:	4620      	mov	r0, r4
 810923a:	f003 fb83 	bl	810c944 <_vfiprintf_r>
 810923e:	b002      	add	sp, #8
 8109240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109244:	b004      	add	sp, #16
 8109246:	4770      	bx	lr
 8109248:	10000010 	.word	0x10000010

0810924c <_puts_r>:
 810924c:	b570      	push	{r4, r5, r6, lr}
 810924e:	460e      	mov	r6, r1
 8109250:	4605      	mov	r5, r0
 8109252:	b118      	cbz	r0, 810925c <_puts_r+0x10>
 8109254:	6983      	ldr	r3, [r0, #24]
 8109256:	b90b      	cbnz	r3, 810925c <_puts_r+0x10>
 8109258:	f001 ff96 	bl	810b188 <__sinit>
 810925c:	69ab      	ldr	r3, [r5, #24]
 810925e:	68ac      	ldr	r4, [r5, #8]
 8109260:	b913      	cbnz	r3, 8109268 <_puts_r+0x1c>
 8109262:	4628      	mov	r0, r5
 8109264:	f001 ff90 	bl	810b188 <__sinit>
 8109268:	4b2c      	ldr	r3, [pc, #176]	; (810931c <_puts_r+0xd0>)
 810926a:	429c      	cmp	r4, r3
 810926c:	d120      	bne.n	81092b0 <_puts_r+0x64>
 810926e:	686c      	ldr	r4, [r5, #4]
 8109270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109272:	07db      	lsls	r3, r3, #31
 8109274:	d405      	bmi.n	8109282 <_puts_r+0x36>
 8109276:	89a3      	ldrh	r3, [r4, #12]
 8109278:	0598      	lsls	r0, r3, #22
 810927a:	d402      	bmi.n	8109282 <_puts_r+0x36>
 810927c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810927e:	f002 fb94 	bl	810b9aa <__retarget_lock_acquire_recursive>
 8109282:	89a3      	ldrh	r3, [r4, #12]
 8109284:	0719      	lsls	r1, r3, #28
 8109286:	d51d      	bpl.n	81092c4 <_puts_r+0x78>
 8109288:	6923      	ldr	r3, [r4, #16]
 810928a:	b1db      	cbz	r3, 81092c4 <_puts_r+0x78>
 810928c:	3e01      	subs	r6, #1
 810928e:	68a3      	ldr	r3, [r4, #8]
 8109290:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109294:	3b01      	subs	r3, #1
 8109296:	60a3      	str	r3, [r4, #8]
 8109298:	bb39      	cbnz	r1, 81092ea <_puts_r+0x9e>
 810929a:	2b00      	cmp	r3, #0
 810929c:	da38      	bge.n	8109310 <_puts_r+0xc4>
 810929e:	4622      	mov	r2, r4
 81092a0:	210a      	movs	r1, #10
 81092a2:	4628      	mov	r0, r5
 81092a4:	f000 ff1c 	bl	810a0e0 <__swbuf_r>
 81092a8:	3001      	adds	r0, #1
 81092aa:	d011      	beq.n	81092d0 <_puts_r+0x84>
 81092ac:	250a      	movs	r5, #10
 81092ae:	e011      	b.n	81092d4 <_puts_r+0x88>
 81092b0:	4b1b      	ldr	r3, [pc, #108]	; (8109320 <_puts_r+0xd4>)
 81092b2:	429c      	cmp	r4, r3
 81092b4:	d101      	bne.n	81092ba <_puts_r+0x6e>
 81092b6:	68ac      	ldr	r4, [r5, #8]
 81092b8:	e7da      	b.n	8109270 <_puts_r+0x24>
 81092ba:	4b1a      	ldr	r3, [pc, #104]	; (8109324 <_puts_r+0xd8>)
 81092bc:	429c      	cmp	r4, r3
 81092be:	bf08      	it	eq
 81092c0:	68ec      	ldreq	r4, [r5, #12]
 81092c2:	e7d5      	b.n	8109270 <_puts_r+0x24>
 81092c4:	4621      	mov	r1, r4
 81092c6:	4628      	mov	r0, r5
 81092c8:	f000 ff5c 	bl	810a184 <__swsetup_r>
 81092cc:	2800      	cmp	r0, #0
 81092ce:	d0dd      	beq.n	810928c <_puts_r+0x40>
 81092d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 81092d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81092d6:	07da      	lsls	r2, r3, #31
 81092d8:	d405      	bmi.n	81092e6 <_puts_r+0x9a>
 81092da:	89a3      	ldrh	r3, [r4, #12]
 81092dc:	059b      	lsls	r3, r3, #22
 81092de:	d402      	bmi.n	81092e6 <_puts_r+0x9a>
 81092e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81092e2:	f002 fb63 	bl	810b9ac <__retarget_lock_release_recursive>
 81092e6:	4628      	mov	r0, r5
 81092e8:	bd70      	pop	{r4, r5, r6, pc}
 81092ea:	2b00      	cmp	r3, #0
 81092ec:	da04      	bge.n	81092f8 <_puts_r+0xac>
 81092ee:	69a2      	ldr	r2, [r4, #24]
 81092f0:	429a      	cmp	r2, r3
 81092f2:	dc06      	bgt.n	8109302 <_puts_r+0xb6>
 81092f4:	290a      	cmp	r1, #10
 81092f6:	d004      	beq.n	8109302 <_puts_r+0xb6>
 81092f8:	6823      	ldr	r3, [r4, #0]
 81092fa:	1c5a      	adds	r2, r3, #1
 81092fc:	6022      	str	r2, [r4, #0]
 81092fe:	7019      	strb	r1, [r3, #0]
 8109300:	e7c5      	b.n	810928e <_puts_r+0x42>
 8109302:	4622      	mov	r2, r4
 8109304:	4628      	mov	r0, r5
 8109306:	f000 feeb 	bl	810a0e0 <__swbuf_r>
 810930a:	3001      	adds	r0, #1
 810930c:	d1bf      	bne.n	810928e <_puts_r+0x42>
 810930e:	e7df      	b.n	81092d0 <_puts_r+0x84>
 8109310:	6823      	ldr	r3, [r4, #0]
 8109312:	250a      	movs	r5, #10
 8109314:	1c5a      	adds	r2, r3, #1
 8109316:	6022      	str	r2, [r4, #0]
 8109318:	701d      	strb	r5, [r3, #0]
 810931a:	e7db      	b.n	81092d4 <_puts_r+0x88>
 810931c:	0810d204 	.word	0x0810d204
 8109320:	0810d224 	.word	0x0810d224
 8109324:	0810d1e4 	.word	0x0810d1e4

08109328 <puts>:
 8109328:	4b02      	ldr	r3, [pc, #8]	; (8109334 <puts+0xc>)
 810932a:	4601      	mov	r1, r0
 810932c:	6818      	ldr	r0, [r3, #0]
 810932e:	f7ff bf8d 	b.w	810924c <_puts_r>
 8109332:	bf00      	nop
 8109334:	10000010 	.word	0x10000010

08109338 <nanf>:
 8109338:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109340 <nanf+0x8>
 810933c:	4770      	bx	lr
 810933e:	bf00      	nop
 8109340:	7fc00000 	.word	0x7fc00000

08109344 <siprintf>:
 8109344:	b40e      	push	{r1, r2, r3}
 8109346:	b500      	push	{lr}
 8109348:	b09c      	sub	sp, #112	; 0x70
 810934a:	ab1d      	add	r3, sp, #116	; 0x74
 810934c:	9002      	str	r0, [sp, #8]
 810934e:	9006      	str	r0, [sp, #24]
 8109350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109354:	4809      	ldr	r0, [pc, #36]	; (810937c <siprintf+0x38>)
 8109356:	9107      	str	r1, [sp, #28]
 8109358:	9104      	str	r1, [sp, #16]
 810935a:	4909      	ldr	r1, [pc, #36]	; (8109380 <siprintf+0x3c>)
 810935c:	f853 2b04 	ldr.w	r2, [r3], #4
 8109360:	9105      	str	r1, [sp, #20]
 8109362:	6800      	ldr	r0, [r0, #0]
 8109364:	9301      	str	r3, [sp, #4]
 8109366:	a902      	add	r1, sp, #8
 8109368:	f003 f9c2 	bl	810c6f0 <_svfiprintf_r>
 810936c:	9b02      	ldr	r3, [sp, #8]
 810936e:	2200      	movs	r2, #0
 8109370:	701a      	strb	r2, [r3, #0]
 8109372:	b01c      	add	sp, #112	; 0x70
 8109374:	f85d eb04 	ldr.w	lr, [sp], #4
 8109378:	b003      	add	sp, #12
 810937a:	4770      	bx	lr
 810937c:	10000010 	.word	0x10000010
 8109380:	ffff0208 	.word	0xffff0208

08109384 <sulp>:
 8109384:	b570      	push	{r4, r5, r6, lr}
 8109386:	4604      	mov	r4, r0
 8109388:	460d      	mov	r5, r1
 810938a:	ec45 4b10 	vmov	d0, r4, r5
 810938e:	4616      	mov	r6, r2
 8109390:	f002 ff0c 	bl	810c1ac <__ulp>
 8109394:	ec51 0b10 	vmov	r0, r1, d0
 8109398:	b17e      	cbz	r6, 81093ba <sulp+0x36>
 810939a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810939e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81093a2:	2b00      	cmp	r3, #0
 81093a4:	dd09      	ble.n	81093ba <sulp+0x36>
 81093a6:	051b      	lsls	r3, r3, #20
 81093a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 81093ac:	2400      	movs	r4, #0
 81093ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 81093b2:	4622      	mov	r2, r4
 81093b4:	462b      	mov	r3, r5
 81093b6:	f7f7 f9a7 	bl	8100708 <__aeabi_dmul>
 81093ba:	bd70      	pop	{r4, r5, r6, pc}
 81093bc:	0000      	movs	r0, r0
	...

081093c0 <_strtod_l>:
 81093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81093c4:	ed2d 8b02 	vpush	{d8}
 81093c8:	b09d      	sub	sp, #116	; 0x74
 81093ca:	461f      	mov	r7, r3
 81093cc:	2300      	movs	r3, #0
 81093ce:	9318      	str	r3, [sp, #96]	; 0x60
 81093d0:	4ba2      	ldr	r3, [pc, #648]	; (810965c <_strtod_l+0x29c>)
 81093d2:	9213      	str	r2, [sp, #76]	; 0x4c
 81093d4:	681b      	ldr	r3, [r3, #0]
 81093d6:	9305      	str	r3, [sp, #20]
 81093d8:	4604      	mov	r4, r0
 81093da:	4618      	mov	r0, r3
 81093dc:	4688      	mov	r8, r1
 81093de:	f7f6 ff7f 	bl	81002e0 <strlen>
 81093e2:	f04f 0a00 	mov.w	sl, #0
 81093e6:	4605      	mov	r5, r0
 81093e8:	f04f 0b00 	mov.w	fp, #0
 81093ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 81093f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81093f2:	781a      	ldrb	r2, [r3, #0]
 81093f4:	2a2b      	cmp	r2, #43	; 0x2b
 81093f6:	d04e      	beq.n	8109496 <_strtod_l+0xd6>
 81093f8:	d83b      	bhi.n	8109472 <_strtod_l+0xb2>
 81093fa:	2a0d      	cmp	r2, #13
 81093fc:	d834      	bhi.n	8109468 <_strtod_l+0xa8>
 81093fe:	2a08      	cmp	r2, #8
 8109400:	d834      	bhi.n	810946c <_strtod_l+0xac>
 8109402:	2a00      	cmp	r2, #0
 8109404:	d03e      	beq.n	8109484 <_strtod_l+0xc4>
 8109406:	2300      	movs	r3, #0
 8109408:	930a      	str	r3, [sp, #40]	; 0x28
 810940a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810940c:	7833      	ldrb	r3, [r6, #0]
 810940e:	2b30      	cmp	r3, #48	; 0x30
 8109410:	f040 80b0 	bne.w	8109574 <_strtod_l+0x1b4>
 8109414:	7873      	ldrb	r3, [r6, #1]
 8109416:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810941a:	2b58      	cmp	r3, #88	; 0x58
 810941c:	d168      	bne.n	81094f0 <_strtod_l+0x130>
 810941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109420:	9301      	str	r3, [sp, #4]
 8109422:	ab18      	add	r3, sp, #96	; 0x60
 8109424:	9702      	str	r7, [sp, #8]
 8109426:	9300      	str	r3, [sp, #0]
 8109428:	4a8d      	ldr	r2, [pc, #564]	; (8109660 <_strtod_l+0x2a0>)
 810942a:	ab19      	add	r3, sp, #100	; 0x64
 810942c:	a917      	add	r1, sp, #92	; 0x5c
 810942e:	4620      	mov	r0, r4
 8109430:	f001 ffae 	bl	810b390 <__gethex>
 8109434:	f010 0707 	ands.w	r7, r0, #7
 8109438:	4605      	mov	r5, r0
 810943a:	d005      	beq.n	8109448 <_strtod_l+0x88>
 810943c:	2f06      	cmp	r7, #6
 810943e:	d12c      	bne.n	810949a <_strtod_l+0xda>
 8109440:	3601      	adds	r6, #1
 8109442:	2300      	movs	r3, #0
 8109444:	9617      	str	r6, [sp, #92]	; 0x5c
 8109446:	930a      	str	r3, [sp, #40]	; 0x28
 8109448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810944a:	2b00      	cmp	r3, #0
 810944c:	f040 8590 	bne.w	8109f70 <_strtod_l+0xbb0>
 8109450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109452:	b1eb      	cbz	r3, 8109490 <_strtod_l+0xd0>
 8109454:	4652      	mov	r2, sl
 8109456:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810945a:	ec43 2b10 	vmov	d0, r2, r3
 810945e:	b01d      	add	sp, #116	; 0x74
 8109460:	ecbd 8b02 	vpop	{d8}
 8109464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109468:	2a20      	cmp	r2, #32
 810946a:	d1cc      	bne.n	8109406 <_strtod_l+0x46>
 810946c:	3301      	adds	r3, #1
 810946e:	9317      	str	r3, [sp, #92]	; 0x5c
 8109470:	e7be      	b.n	81093f0 <_strtod_l+0x30>
 8109472:	2a2d      	cmp	r2, #45	; 0x2d
 8109474:	d1c7      	bne.n	8109406 <_strtod_l+0x46>
 8109476:	2201      	movs	r2, #1
 8109478:	920a      	str	r2, [sp, #40]	; 0x28
 810947a:	1c5a      	adds	r2, r3, #1
 810947c:	9217      	str	r2, [sp, #92]	; 0x5c
 810947e:	785b      	ldrb	r3, [r3, #1]
 8109480:	2b00      	cmp	r3, #0
 8109482:	d1c2      	bne.n	810940a <_strtod_l+0x4a>
 8109484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109486:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810948a:	2b00      	cmp	r3, #0
 810948c:	f040 856e 	bne.w	8109f6c <_strtod_l+0xbac>
 8109490:	4652      	mov	r2, sl
 8109492:	465b      	mov	r3, fp
 8109494:	e7e1      	b.n	810945a <_strtod_l+0x9a>
 8109496:	2200      	movs	r2, #0
 8109498:	e7ee      	b.n	8109478 <_strtod_l+0xb8>
 810949a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810949c:	b13a      	cbz	r2, 81094ae <_strtod_l+0xee>
 810949e:	2135      	movs	r1, #53	; 0x35
 81094a0:	a81a      	add	r0, sp, #104	; 0x68
 81094a2:	f002 ff8e 	bl	810c3c2 <__copybits>
 81094a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 81094a8:	4620      	mov	r0, r4
 81094aa:	f002 fb4d 	bl	810bb48 <_Bfree>
 81094ae:	3f01      	subs	r7, #1
 81094b0:	2f04      	cmp	r7, #4
 81094b2:	d806      	bhi.n	81094c2 <_strtod_l+0x102>
 81094b4:	e8df f007 	tbb	[pc, r7]
 81094b8:	1714030a 	.word	0x1714030a
 81094bc:	0a          	.byte	0x0a
 81094bd:	00          	.byte	0x00
 81094be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 81094c2:	0728      	lsls	r0, r5, #28
 81094c4:	d5c0      	bpl.n	8109448 <_strtod_l+0x88>
 81094c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 81094ca:	e7bd      	b.n	8109448 <_strtod_l+0x88>
 81094cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 81094d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 81094d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81094d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 81094da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 81094de:	e7f0      	b.n	81094c2 <_strtod_l+0x102>
 81094e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8109664 <_strtod_l+0x2a4>
 81094e4:	e7ed      	b.n	81094c2 <_strtod_l+0x102>
 81094e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 81094ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 81094ee:	e7e8      	b.n	81094c2 <_strtod_l+0x102>
 81094f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81094f2:	1c5a      	adds	r2, r3, #1
 81094f4:	9217      	str	r2, [sp, #92]	; 0x5c
 81094f6:	785b      	ldrb	r3, [r3, #1]
 81094f8:	2b30      	cmp	r3, #48	; 0x30
 81094fa:	d0f9      	beq.n	81094f0 <_strtod_l+0x130>
 81094fc:	2b00      	cmp	r3, #0
 81094fe:	d0a3      	beq.n	8109448 <_strtod_l+0x88>
 8109500:	2301      	movs	r3, #1
 8109502:	f04f 0900 	mov.w	r9, #0
 8109506:	9304      	str	r3, [sp, #16]
 8109508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810950a:	9308      	str	r3, [sp, #32]
 810950c:	f8cd 901c 	str.w	r9, [sp, #28]
 8109510:	464f      	mov	r7, r9
 8109512:	220a      	movs	r2, #10
 8109514:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8109516:	7806      	ldrb	r6, [r0, #0]
 8109518:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810951c:	b2d9      	uxtb	r1, r3
 810951e:	2909      	cmp	r1, #9
 8109520:	d92a      	bls.n	8109578 <_strtod_l+0x1b8>
 8109522:	9905      	ldr	r1, [sp, #20]
 8109524:	462a      	mov	r2, r5
 8109526:	f003 fb9a 	bl	810cc5e <strncmp>
 810952a:	b398      	cbz	r0, 8109594 <_strtod_l+0x1d4>
 810952c:	2000      	movs	r0, #0
 810952e:	4632      	mov	r2, r6
 8109530:	463d      	mov	r5, r7
 8109532:	9005      	str	r0, [sp, #20]
 8109534:	4603      	mov	r3, r0
 8109536:	2a65      	cmp	r2, #101	; 0x65
 8109538:	d001      	beq.n	810953e <_strtod_l+0x17e>
 810953a:	2a45      	cmp	r2, #69	; 0x45
 810953c:	d118      	bne.n	8109570 <_strtod_l+0x1b0>
 810953e:	b91d      	cbnz	r5, 8109548 <_strtod_l+0x188>
 8109540:	9a04      	ldr	r2, [sp, #16]
 8109542:	4302      	orrs	r2, r0
 8109544:	d09e      	beq.n	8109484 <_strtod_l+0xc4>
 8109546:	2500      	movs	r5, #0
 8109548:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810954c:	f108 0201 	add.w	r2, r8, #1
 8109550:	9217      	str	r2, [sp, #92]	; 0x5c
 8109552:	f898 2001 	ldrb.w	r2, [r8, #1]
 8109556:	2a2b      	cmp	r2, #43	; 0x2b
 8109558:	d075      	beq.n	8109646 <_strtod_l+0x286>
 810955a:	2a2d      	cmp	r2, #45	; 0x2d
 810955c:	d07b      	beq.n	8109656 <_strtod_l+0x296>
 810955e:	f04f 0c00 	mov.w	ip, #0
 8109562:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8109566:	2909      	cmp	r1, #9
 8109568:	f240 8082 	bls.w	8109670 <_strtod_l+0x2b0>
 810956c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109570:	2600      	movs	r6, #0
 8109572:	e09d      	b.n	81096b0 <_strtod_l+0x2f0>
 8109574:	2300      	movs	r3, #0
 8109576:	e7c4      	b.n	8109502 <_strtod_l+0x142>
 8109578:	2f08      	cmp	r7, #8
 810957a:	bfd8      	it	le
 810957c:	9907      	ldrle	r1, [sp, #28]
 810957e:	f100 0001 	add.w	r0, r0, #1
 8109582:	bfda      	itte	le
 8109584:	fb02 3301 	mlale	r3, r2, r1, r3
 8109588:	9307      	strle	r3, [sp, #28]
 810958a:	fb02 3909 	mlagt	r9, r2, r9, r3
 810958e:	3701      	adds	r7, #1
 8109590:	9017      	str	r0, [sp, #92]	; 0x5c
 8109592:	e7bf      	b.n	8109514 <_strtod_l+0x154>
 8109594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109596:	195a      	adds	r2, r3, r5
 8109598:	9217      	str	r2, [sp, #92]	; 0x5c
 810959a:	5d5a      	ldrb	r2, [r3, r5]
 810959c:	2f00      	cmp	r7, #0
 810959e:	d037      	beq.n	8109610 <_strtod_l+0x250>
 81095a0:	9005      	str	r0, [sp, #20]
 81095a2:	463d      	mov	r5, r7
 81095a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 81095a8:	2b09      	cmp	r3, #9
 81095aa:	d912      	bls.n	81095d2 <_strtod_l+0x212>
 81095ac:	2301      	movs	r3, #1
 81095ae:	e7c2      	b.n	8109536 <_strtod_l+0x176>
 81095b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81095b2:	1c5a      	adds	r2, r3, #1
 81095b4:	9217      	str	r2, [sp, #92]	; 0x5c
 81095b6:	785a      	ldrb	r2, [r3, #1]
 81095b8:	3001      	adds	r0, #1
 81095ba:	2a30      	cmp	r2, #48	; 0x30
 81095bc:	d0f8      	beq.n	81095b0 <_strtod_l+0x1f0>
 81095be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 81095c2:	2b08      	cmp	r3, #8
 81095c4:	f200 84d9 	bhi.w	8109f7a <_strtod_l+0xbba>
 81095c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81095ca:	9005      	str	r0, [sp, #20]
 81095cc:	2000      	movs	r0, #0
 81095ce:	9308      	str	r3, [sp, #32]
 81095d0:	4605      	mov	r5, r0
 81095d2:	3a30      	subs	r2, #48	; 0x30
 81095d4:	f100 0301 	add.w	r3, r0, #1
 81095d8:	d014      	beq.n	8109604 <_strtod_l+0x244>
 81095da:	9905      	ldr	r1, [sp, #20]
 81095dc:	4419      	add	r1, r3
 81095de:	9105      	str	r1, [sp, #20]
 81095e0:	462b      	mov	r3, r5
 81095e2:	eb00 0e05 	add.w	lr, r0, r5
 81095e6:	210a      	movs	r1, #10
 81095e8:	4573      	cmp	r3, lr
 81095ea:	d113      	bne.n	8109614 <_strtod_l+0x254>
 81095ec:	182b      	adds	r3, r5, r0
 81095ee:	2b08      	cmp	r3, #8
 81095f0:	f105 0501 	add.w	r5, r5, #1
 81095f4:	4405      	add	r5, r0
 81095f6:	dc1c      	bgt.n	8109632 <_strtod_l+0x272>
 81095f8:	9907      	ldr	r1, [sp, #28]
 81095fa:	230a      	movs	r3, #10
 81095fc:	fb03 2301 	mla	r3, r3, r1, r2
 8109600:	9307      	str	r3, [sp, #28]
 8109602:	2300      	movs	r3, #0
 8109604:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109606:	1c51      	adds	r1, r2, #1
 8109608:	9117      	str	r1, [sp, #92]	; 0x5c
 810960a:	7852      	ldrb	r2, [r2, #1]
 810960c:	4618      	mov	r0, r3
 810960e:	e7c9      	b.n	81095a4 <_strtod_l+0x1e4>
 8109610:	4638      	mov	r0, r7
 8109612:	e7d2      	b.n	81095ba <_strtod_l+0x1fa>
 8109614:	2b08      	cmp	r3, #8
 8109616:	dc04      	bgt.n	8109622 <_strtod_l+0x262>
 8109618:	9e07      	ldr	r6, [sp, #28]
 810961a:	434e      	muls	r6, r1
 810961c:	9607      	str	r6, [sp, #28]
 810961e:	3301      	adds	r3, #1
 8109620:	e7e2      	b.n	81095e8 <_strtod_l+0x228>
 8109622:	f103 0c01 	add.w	ip, r3, #1
 8109626:	f1bc 0f10 	cmp.w	ip, #16
 810962a:	bfd8      	it	le
 810962c:	fb01 f909 	mulle.w	r9, r1, r9
 8109630:	e7f5      	b.n	810961e <_strtod_l+0x25e>
 8109632:	2d10      	cmp	r5, #16
 8109634:	bfdc      	itt	le
 8109636:	230a      	movle	r3, #10
 8109638:	fb03 2909 	mlale	r9, r3, r9, r2
 810963c:	e7e1      	b.n	8109602 <_strtod_l+0x242>
 810963e:	2300      	movs	r3, #0
 8109640:	9305      	str	r3, [sp, #20]
 8109642:	2301      	movs	r3, #1
 8109644:	e77c      	b.n	8109540 <_strtod_l+0x180>
 8109646:	f04f 0c00 	mov.w	ip, #0
 810964a:	f108 0202 	add.w	r2, r8, #2
 810964e:	9217      	str	r2, [sp, #92]	; 0x5c
 8109650:	f898 2002 	ldrb.w	r2, [r8, #2]
 8109654:	e785      	b.n	8109562 <_strtod_l+0x1a2>
 8109656:	f04f 0c01 	mov.w	ip, #1
 810965a:	e7f6      	b.n	810964a <_strtod_l+0x28a>
 810965c:	0810d2ac 	.word	0x0810d2ac
 8109660:	0810cffc 	.word	0x0810cffc
 8109664:	7ff00000 	.word	0x7ff00000
 8109668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810966a:	1c51      	adds	r1, r2, #1
 810966c:	9117      	str	r1, [sp, #92]	; 0x5c
 810966e:	7852      	ldrb	r2, [r2, #1]
 8109670:	2a30      	cmp	r2, #48	; 0x30
 8109672:	d0f9      	beq.n	8109668 <_strtod_l+0x2a8>
 8109674:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8109678:	2908      	cmp	r1, #8
 810967a:	f63f af79 	bhi.w	8109570 <_strtod_l+0x1b0>
 810967e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8109682:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109684:	9206      	str	r2, [sp, #24]
 8109686:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109688:	1c51      	adds	r1, r2, #1
 810968a:	9117      	str	r1, [sp, #92]	; 0x5c
 810968c:	7852      	ldrb	r2, [r2, #1]
 810968e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8109692:	2e09      	cmp	r6, #9
 8109694:	d937      	bls.n	8109706 <_strtod_l+0x346>
 8109696:	9e06      	ldr	r6, [sp, #24]
 8109698:	1b89      	subs	r1, r1, r6
 810969a:	2908      	cmp	r1, #8
 810969c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 81096a0:	dc02      	bgt.n	81096a8 <_strtod_l+0x2e8>
 81096a2:	4576      	cmp	r6, lr
 81096a4:	bfa8      	it	ge
 81096a6:	4676      	movge	r6, lr
 81096a8:	f1bc 0f00 	cmp.w	ip, #0
 81096ac:	d000      	beq.n	81096b0 <_strtod_l+0x2f0>
 81096ae:	4276      	negs	r6, r6
 81096b0:	2d00      	cmp	r5, #0
 81096b2:	d14d      	bne.n	8109750 <_strtod_l+0x390>
 81096b4:	9904      	ldr	r1, [sp, #16]
 81096b6:	4301      	orrs	r1, r0
 81096b8:	f47f aec6 	bne.w	8109448 <_strtod_l+0x88>
 81096bc:	2b00      	cmp	r3, #0
 81096be:	f47f aee1 	bne.w	8109484 <_strtod_l+0xc4>
 81096c2:	2a69      	cmp	r2, #105	; 0x69
 81096c4:	d027      	beq.n	8109716 <_strtod_l+0x356>
 81096c6:	dc24      	bgt.n	8109712 <_strtod_l+0x352>
 81096c8:	2a49      	cmp	r2, #73	; 0x49
 81096ca:	d024      	beq.n	8109716 <_strtod_l+0x356>
 81096cc:	2a4e      	cmp	r2, #78	; 0x4e
 81096ce:	f47f aed9 	bne.w	8109484 <_strtod_l+0xc4>
 81096d2:	499f      	ldr	r1, [pc, #636]	; (8109950 <_strtod_l+0x590>)
 81096d4:	a817      	add	r0, sp, #92	; 0x5c
 81096d6:	f002 f8b3 	bl	810b840 <__match>
 81096da:	2800      	cmp	r0, #0
 81096dc:	f43f aed2 	beq.w	8109484 <_strtod_l+0xc4>
 81096e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81096e2:	781b      	ldrb	r3, [r3, #0]
 81096e4:	2b28      	cmp	r3, #40	; 0x28
 81096e6:	d12d      	bne.n	8109744 <_strtod_l+0x384>
 81096e8:	499a      	ldr	r1, [pc, #616]	; (8109954 <_strtod_l+0x594>)
 81096ea:	aa1a      	add	r2, sp, #104	; 0x68
 81096ec:	a817      	add	r0, sp, #92	; 0x5c
 81096ee:	f002 f8bb 	bl	810b868 <__hexnan>
 81096f2:	2805      	cmp	r0, #5
 81096f4:	d126      	bne.n	8109744 <_strtod_l+0x384>
 81096f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 81096f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 81096fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8109700:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8109704:	e6a0      	b.n	8109448 <_strtod_l+0x88>
 8109706:	210a      	movs	r1, #10
 8109708:	fb01 2e0e 	mla	lr, r1, lr, r2
 810970c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8109710:	e7b9      	b.n	8109686 <_strtod_l+0x2c6>
 8109712:	2a6e      	cmp	r2, #110	; 0x6e
 8109714:	e7db      	b.n	81096ce <_strtod_l+0x30e>
 8109716:	4990      	ldr	r1, [pc, #576]	; (8109958 <_strtod_l+0x598>)
 8109718:	a817      	add	r0, sp, #92	; 0x5c
 810971a:	f002 f891 	bl	810b840 <__match>
 810971e:	2800      	cmp	r0, #0
 8109720:	f43f aeb0 	beq.w	8109484 <_strtod_l+0xc4>
 8109724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109726:	498d      	ldr	r1, [pc, #564]	; (810995c <_strtod_l+0x59c>)
 8109728:	3b01      	subs	r3, #1
 810972a:	a817      	add	r0, sp, #92	; 0x5c
 810972c:	9317      	str	r3, [sp, #92]	; 0x5c
 810972e:	f002 f887 	bl	810b840 <__match>
 8109732:	b910      	cbnz	r0, 810973a <_strtod_l+0x37a>
 8109734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109736:	3301      	adds	r3, #1
 8109738:	9317      	str	r3, [sp, #92]	; 0x5c
 810973a:	f8df b230 	ldr.w	fp, [pc, #560]	; 810996c <_strtod_l+0x5ac>
 810973e:	f04f 0a00 	mov.w	sl, #0
 8109742:	e681      	b.n	8109448 <_strtod_l+0x88>
 8109744:	4886      	ldr	r0, [pc, #536]	; (8109960 <_strtod_l+0x5a0>)
 8109746:	f003 fa2f 	bl	810cba8 <nan>
 810974a:	ec5b ab10 	vmov	sl, fp, d0
 810974e:	e67b      	b.n	8109448 <_strtod_l+0x88>
 8109750:	9b05      	ldr	r3, [sp, #20]
 8109752:	9807      	ldr	r0, [sp, #28]
 8109754:	1af3      	subs	r3, r6, r3
 8109756:	2f00      	cmp	r7, #0
 8109758:	bf08      	it	eq
 810975a:	462f      	moveq	r7, r5
 810975c:	2d10      	cmp	r5, #16
 810975e:	9306      	str	r3, [sp, #24]
 8109760:	46a8      	mov	r8, r5
 8109762:	bfa8      	it	ge
 8109764:	f04f 0810 	movge.w	r8, #16
 8109768:	f7f6 ff54 	bl	8100614 <__aeabi_ui2d>
 810976c:	2d09      	cmp	r5, #9
 810976e:	4682      	mov	sl, r0
 8109770:	468b      	mov	fp, r1
 8109772:	dd13      	ble.n	810979c <_strtod_l+0x3dc>
 8109774:	4b7b      	ldr	r3, [pc, #492]	; (8109964 <_strtod_l+0x5a4>)
 8109776:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810977a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810977e:	f7f6 ffc3 	bl	8100708 <__aeabi_dmul>
 8109782:	4682      	mov	sl, r0
 8109784:	4648      	mov	r0, r9
 8109786:	468b      	mov	fp, r1
 8109788:	f7f6 ff44 	bl	8100614 <__aeabi_ui2d>
 810978c:	4602      	mov	r2, r0
 810978e:	460b      	mov	r3, r1
 8109790:	4650      	mov	r0, sl
 8109792:	4659      	mov	r1, fp
 8109794:	f7f6 fe02 	bl	810039c <__adddf3>
 8109798:	4682      	mov	sl, r0
 810979a:	468b      	mov	fp, r1
 810979c:	2d0f      	cmp	r5, #15
 810979e:	dc38      	bgt.n	8109812 <_strtod_l+0x452>
 81097a0:	9b06      	ldr	r3, [sp, #24]
 81097a2:	2b00      	cmp	r3, #0
 81097a4:	f43f ae50 	beq.w	8109448 <_strtod_l+0x88>
 81097a8:	dd24      	ble.n	81097f4 <_strtod_l+0x434>
 81097aa:	2b16      	cmp	r3, #22
 81097ac:	dc0b      	bgt.n	81097c6 <_strtod_l+0x406>
 81097ae:	496d      	ldr	r1, [pc, #436]	; (8109964 <_strtod_l+0x5a4>)
 81097b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81097b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097b8:	4652      	mov	r2, sl
 81097ba:	465b      	mov	r3, fp
 81097bc:	f7f6 ffa4 	bl	8100708 <__aeabi_dmul>
 81097c0:	4682      	mov	sl, r0
 81097c2:	468b      	mov	fp, r1
 81097c4:	e640      	b.n	8109448 <_strtod_l+0x88>
 81097c6:	9a06      	ldr	r2, [sp, #24]
 81097c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 81097cc:	4293      	cmp	r3, r2
 81097ce:	db20      	blt.n	8109812 <_strtod_l+0x452>
 81097d0:	4c64      	ldr	r4, [pc, #400]	; (8109964 <_strtod_l+0x5a4>)
 81097d2:	f1c5 050f 	rsb	r5, r5, #15
 81097d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81097da:	4652      	mov	r2, sl
 81097dc:	465b      	mov	r3, fp
 81097de:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097e2:	f7f6 ff91 	bl	8100708 <__aeabi_dmul>
 81097e6:	9b06      	ldr	r3, [sp, #24]
 81097e8:	1b5d      	subs	r5, r3, r5
 81097ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81097ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 81097f2:	e7e3      	b.n	81097bc <_strtod_l+0x3fc>
 81097f4:	9b06      	ldr	r3, [sp, #24]
 81097f6:	3316      	adds	r3, #22
 81097f8:	db0b      	blt.n	8109812 <_strtod_l+0x452>
 81097fa:	9b05      	ldr	r3, [sp, #20]
 81097fc:	1b9e      	subs	r6, r3, r6
 81097fe:	4b59      	ldr	r3, [pc, #356]	; (8109964 <_strtod_l+0x5a4>)
 8109800:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8109804:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109808:	4650      	mov	r0, sl
 810980a:	4659      	mov	r1, fp
 810980c:	f7f7 f8a6 	bl	810095c <__aeabi_ddiv>
 8109810:	e7d6      	b.n	81097c0 <_strtod_l+0x400>
 8109812:	9b06      	ldr	r3, [sp, #24]
 8109814:	eba5 0808 	sub.w	r8, r5, r8
 8109818:	4498      	add	r8, r3
 810981a:	f1b8 0f00 	cmp.w	r8, #0
 810981e:	dd74      	ble.n	810990a <_strtod_l+0x54a>
 8109820:	f018 030f 	ands.w	r3, r8, #15
 8109824:	d00a      	beq.n	810983c <_strtod_l+0x47c>
 8109826:	494f      	ldr	r1, [pc, #316]	; (8109964 <_strtod_l+0x5a4>)
 8109828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810982c:	4652      	mov	r2, sl
 810982e:	465b      	mov	r3, fp
 8109830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109834:	f7f6 ff68 	bl	8100708 <__aeabi_dmul>
 8109838:	4682      	mov	sl, r0
 810983a:	468b      	mov	fp, r1
 810983c:	f038 080f 	bics.w	r8, r8, #15
 8109840:	d04f      	beq.n	81098e2 <_strtod_l+0x522>
 8109842:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8109846:	dd22      	ble.n	810988e <_strtod_l+0x4ce>
 8109848:	2500      	movs	r5, #0
 810984a:	462e      	mov	r6, r5
 810984c:	9507      	str	r5, [sp, #28]
 810984e:	9505      	str	r5, [sp, #20]
 8109850:	2322      	movs	r3, #34	; 0x22
 8109852:	f8df b118 	ldr.w	fp, [pc, #280]	; 810996c <_strtod_l+0x5ac>
 8109856:	6023      	str	r3, [r4, #0]
 8109858:	f04f 0a00 	mov.w	sl, #0
 810985c:	9b07      	ldr	r3, [sp, #28]
 810985e:	2b00      	cmp	r3, #0
 8109860:	f43f adf2 	beq.w	8109448 <_strtod_l+0x88>
 8109864:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109866:	4620      	mov	r0, r4
 8109868:	f002 f96e 	bl	810bb48 <_Bfree>
 810986c:	9905      	ldr	r1, [sp, #20]
 810986e:	4620      	mov	r0, r4
 8109870:	f002 f96a 	bl	810bb48 <_Bfree>
 8109874:	4631      	mov	r1, r6
 8109876:	4620      	mov	r0, r4
 8109878:	f002 f966 	bl	810bb48 <_Bfree>
 810987c:	9907      	ldr	r1, [sp, #28]
 810987e:	4620      	mov	r0, r4
 8109880:	f002 f962 	bl	810bb48 <_Bfree>
 8109884:	4629      	mov	r1, r5
 8109886:	4620      	mov	r0, r4
 8109888:	f002 f95e 	bl	810bb48 <_Bfree>
 810988c:	e5dc      	b.n	8109448 <_strtod_l+0x88>
 810988e:	4b36      	ldr	r3, [pc, #216]	; (8109968 <_strtod_l+0x5a8>)
 8109890:	9304      	str	r3, [sp, #16]
 8109892:	2300      	movs	r3, #0
 8109894:	ea4f 1828 	mov.w	r8, r8, asr #4
 8109898:	4650      	mov	r0, sl
 810989a:	4659      	mov	r1, fp
 810989c:	4699      	mov	r9, r3
 810989e:	f1b8 0f01 	cmp.w	r8, #1
 81098a2:	dc21      	bgt.n	81098e8 <_strtod_l+0x528>
 81098a4:	b10b      	cbz	r3, 81098aa <_strtod_l+0x4ea>
 81098a6:	4682      	mov	sl, r0
 81098a8:	468b      	mov	fp, r1
 81098aa:	4b2f      	ldr	r3, [pc, #188]	; (8109968 <_strtod_l+0x5a8>)
 81098ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 81098b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 81098b4:	4652      	mov	r2, sl
 81098b6:	465b      	mov	r3, fp
 81098b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 81098bc:	f7f6 ff24 	bl	8100708 <__aeabi_dmul>
 81098c0:	4b2a      	ldr	r3, [pc, #168]	; (810996c <_strtod_l+0x5ac>)
 81098c2:	460a      	mov	r2, r1
 81098c4:	400b      	ands	r3, r1
 81098c6:	492a      	ldr	r1, [pc, #168]	; (8109970 <_strtod_l+0x5b0>)
 81098c8:	428b      	cmp	r3, r1
 81098ca:	4682      	mov	sl, r0
 81098cc:	d8bc      	bhi.n	8109848 <_strtod_l+0x488>
 81098ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 81098d2:	428b      	cmp	r3, r1
 81098d4:	bf86      	itte	hi
 81098d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8109974 <_strtod_l+0x5b4>
 81098da:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 81098de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 81098e2:	2300      	movs	r3, #0
 81098e4:	9304      	str	r3, [sp, #16]
 81098e6:	e084      	b.n	81099f2 <_strtod_l+0x632>
 81098e8:	f018 0f01 	tst.w	r8, #1
 81098ec:	d005      	beq.n	81098fa <_strtod_l+0x53a>
 81098ee:	9b04      	ldr	r3, [sp, #16]
 81098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098f4:	f7f6 ff08 	bl	8100708 <__aeabi_dmul>
 81098f8:	2301      	movs	r3, #1
 81098fa:	9a04      	ldr	r2, [sp, #16]
 81098fc:	3208      	adds	r2, #8
 81098fe:	f109 0901 	add.w	r9, r9, #1
 8109902:	ea4f 0868 	mov.w	r8, r8, asr #1
 8109906:	9204      	str	r2, [sp, #16]
 8109908:	e7c9      	b.n	810989e <_strtod_l+0x4de>
 810990a:	d0ea      	beq.n	81098e2 <_strtod_l+0x522>
 810990c:	f1c8 0800 	rsb	r8, r8, #0
 8109910:	f018 020f 	ands.w	r2, r8, #15
 8109914:	d00a      	beq.n	810992c <_strtod_l+0x56c>
 8109916:	4b13      	ldr	r3, [pc, #76]	; (8109964 <_strtod_l+0x5a4>)
 8109918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810991c:	4650      	mov	r0, sl
 810991e:	4659      	mov	r1, fp
 8109920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109924:	f7f7 f81a 	bl	810095c <__aeabi_ddiv>
 8109928:	4682      	mov	sl, r0
 810992a:	468b      	mov	fp, r1
 810992c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8109930:	d0d7      	beq.n	81098e2 <_strtod_l+0x522>
 8109932:	f1b8 0f1f 	cmp.w	r8, #31
 8109936:	dd1f      	ble.n	8109978 <_strtod_l+0x5b8>
 8109938:	2500      	movs	r5, #0
 810993a:	462e      	mov	r6, r5
 810993c:	9507      	str	r5, [sp, #28]
 810993e:	9505      	str	r5, [sp, #20]
 8109940:	2322      	movs	r3, #34	; 0x22
 8109942:	f04f 0a00 	mov.w	sl, #0
 8109946:	f04f 0b00 	mov.w	fp, #0
 810994a:	6023      	str	r3, [r4, #0]
 810994c:	e786      	b.n	810985c <_strtod_l+0x49c>
 810994e:	bf00      	nop
 8109950:	0810cfcd 	.word	0x0810cfcd
 8109954:	0810d010 	.word	0x0810d010
 8109958:	0810cfc5 	.word	0x0810cfc5
 810995c:	0810d154 	.word	0x0810d154
 8109960:	0810d468 	.word	0x0810d468
 8109964:	0810d348 	.word	0x0810d348
 8109968:	0810d320 	.word	0x0810d320
 810996c:	7ff00000 	.word	0x7ff00000
 8109970:	7ca00000 	.word	0x7ca00000
 8109974:	7fefffff 	.word	0x7fefffff
 8109978:	f018 0310 	ands.w	r3, r8, #16
 810997c:	bf18      	it	ne
 810997e:	236a      	movne	r3, #106	; 0x6a
 8109980:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8109d30 <_strtod_l+0x970>
 8109984:	9304      	str	r3, [sp, #16]
 8109986:	4650      	mov	r0, sl
 8109988:	4659      	mov	r1, fp
 810998a:	2300      	movs	r3, #0
 810998c:	f018 0f01 	tst.w	r8, #1
 8109990:	d004      	beq.n	810999c <_strtod_l+0x5dc>
 8109992:	e9d9 2300 	ldrd	r2, r3, [r9]
 8109996:	f7f6 feb7 	bl	8100708 <__aeabi_dmul>
 810999a:	2301      	movs	r3, #1
 810999c:	ea5f 0868 	movs.w	r8, r8, asr #1
 81099a0:	f109 0908 	add.w	r9, r9, #8
 81099a4:	d1f2      	bne.n	810998c <_strtod_l+0x5cc>
 81099a6:	b10b      	cbz	r3, 81099ac <_strtod_l+0x5ec>
 81099a8:	4682      	mov	sl, r0
 81099aa:	468b      	mov	fp, r1
 81099ac:	9b04      	ldr	r3, [sp, #16]
 81099ae:	b1c3      	cbz	r3, 81099e2 <_strtod_l+0x622>
 81099b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 81099b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 81099b8:	2b00      	cmp	r3, #0
 81099ba:	4659      	mov	r1, fp
 81099bc:	dd11      	ble.n	81099e2 <_strtod_l+0x622>
 81099be:	2b1f      	cmp	r3, #31
 81099c0:	f340 8124 	ble.w	8109c0c <_strtod_l+0x84c>
 81099c4:	2b34      	cmp	r3, #52	; 0x34
 81099c6:	bfde      	ittt	le
 81099c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 81099cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 81099d0:	fa03 f202 	lslle.w	r2, r3, r2
 81099d4:	f04f 0a00 	mov.w	sl, #0
 81099d8:	bfcc      	ite	gt
 81099da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 81099de:	ea02 0b01 	andle.w	fp, r2, r1
 81099e2:	2200      	movs	r2, #0
 81099e4:	2300      	movs	r3, #0
 81099e6:	4650      	mov	r0, sl
 81099e8:	4659      	mov	r1, fp
 81099ea:	f7f7 f8f5 	bl	8100bd8 <__aeabi_dcmpeq>
 81099ee:	2800      	cmp	r0, #0
 81099f0:	d1a2      	bne.n	8109938 <_strtod_l+0x578>
 81099f2:	9b07      	ldr	r3, [sp, #28]
 81099f4:	9300      	str	r3, [sp, #0]
 81099f6:	9908      	ldr	r1, [sp, #32]
 81099f8:	462b      	mov	r3, r5
 81099fa:	463a      	mov	r2, r7
 81099fc:	4620      	mov	r0, r4
 81099fe:	f002 f90b 	bl	810bc18 <__s2b>
 8109a02:	9007      	str	r0, [sp, #28]
 8109a04:	2800      	cmp	r0, #0
 8109a06:	f43f af1f 	beq.w	8109848 <_strtod_l+0x488>
 8109a0a:	9b05      	ldr	r3, [sp, #20]
 8109a0c:	1b9e      	subs	r6, r3, r6
 8109a0e:	9b06      	ldr	r3, [sp, #24]
 8109a10:	2b00      	cmp	r3, #0
 8109a12:	bfb4      	ite	lt
 8109a14:	4633      	movlt	r3, r6
 8109a16:	2300      	movge	r3, #0
 8109a18:	930c      	str	r3, [sp, #48]	; 0x30
 8109a1a:	9b06      	ldr	r3, [sp, #24]
 8109a1c:	2500      	movs	r5, #0
 8109a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8109a22:	9312      	str	r3, [sp, #72]	; 0x48
 8109a24:	462e      	mov	r6, r5
 8109a26:	9b07      	ldr	r3, [sp, #28]
 8109a28:	4620      	mov	r0, r4
 8109a2a:	6859      	ldr	r1, [r3, #4]
 8109a2c:	f002 f84c 	bl	810bac8 <_Balloc>
 8109a30:	9005      	str	r0, [sp, #20]
 8109a32:	2800      	cmp	r0, #0
 8109a34:	f43f af0c 	beq.w	8109850 <_strtod_l+0x490>
 8109a38:	9b07      	ldr	r3, [sp, #28]
 8109a3a:	691a      	ldr	r2, [r3, #16]
 8109a3c:	3202      	adds	r2, #2
 8109a3e:	f103 010c 	add.w	r1, r3, #12
 8109a42:	0092      	lsls	r2, r2, #2
 8109a44:	300c      	adds	r0, #12
 8109a46:	f002 f831 	bl	810baac <memcpy>
 8109a4a:	ec4b ab10 	vmov	d0, sl, fp
 8109a4e:	aa1a      	add	r2, sp, #104	; 0x68
 8109a50:	a919      	add	r1, sp, #100	; 0x64
 8109a52:	4620      	mov	r0, r4
 8109a54:	f002 fc26 	bl	810c2a4 <__d2b>
 8109a58:	ec4b ab18 	vmov	d8, sl, fp
 8109a5c:	9018      	str	r0, [sp, #96]	; 0x60
 8109a5e:	2800      	cmp	r0, #0
 8109a60:	f43f aef6 	beq.w	8109850 <_strtod_l+0x490>
 8109a64:	2101      	movs	r1, #1
 8109a66:	4620      	mov	r0, r4
 8109a68:	f002 f970 	bl	810bd4c <__i2b>
 8109a6c:	4606      	mov	r6, r0
 8109a6e:	2800      	cmp	r0, #0
 8109a70:	f43f aeee 	beq.w	8109850 <_strtod_l+0x490>
 8109a74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8109a76:	9904      	ldr	r1, [sp, #16]
 8109a78:	2b00      	cmp	r3, #0
 8109a7a:	bfab      	itete	ge
 8109a7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8109a7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8109a80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8109a82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8109a86:	bfac      	ite	ge
 8109a88:	eb03 0902 	addge.w	r9, r3, r2
 8109a8c:	1ad7      	sublt	r7, r2, r3
 8109a8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8109a90:	eba3 0801 	sub.w	r8, r3, r1
 8109a94:	4490      	add	r8, r2
 8109a96:	4ba1      	ldr	r3, [pc, #644]	; (8109d1c <_strtod_l+0x95c>)
 8109a98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8109a9c:	4598      	cmp	r8, r3
 8109a9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109aa2:	f280 80c7 	bge.w	8109c34 <_strtod_l+0x874>
 8109aa6:	eba3 0308 	sub.w	r3, r3, r8
 8109aaa:	2b1f      	cmp	r3, #31
 8109aac:	eba2 0203 	sub.w	r2, r2, r3
 8109ab0:	f04f 0101 	mov.w	r1, #1
 8109ab4:	f300 80b1 	bgt.w	8109c1a <_strtod_l+0x85a>
 8109ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8109abc:	930d      	str	r3, [sp, #52]	; 0x34
 8109abe:	2300      	movs	r3, #0
 8109ac0:	9308      	str	r3, [sp, #32]
 8109ac2:	eb09 0802 	add.w	r8, r9, r2
 8109ac6:	9b04      	ldr	r3, [sp, #16]
 8109ac8:	45c1      	cmp	r9, r8
 8109aca:	4417      	add	r7, r2
 8109acc:	441f      	add	r7, r3
 8109ace:	464b      	mov	r3, r9
 8109ad0:	bfa8      	it	ge
 8109ad2:	4643      	movge	r3, r8
 8109ad4:	42bb      	cmp	r3, r7
 8109ad6:	bfa8      	it	ge
 8109ad8:	463b      	movge	r3, r7
 8109ada:	2b00      	cmp	r3, #0
 8109adc:	bfc2      	ittt	gt
 8109ade:	eba8 0803 	subgt.w	r8, r8, r3
 8109ae2:	1aff      	subgt	r7, r7, r3
 8109ae4:	eba9 0903 	subgt.w	r9, r9, r3
 8109ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109aea:	2b00      	cmp	r3, #0
 8109aec:	dd17      	ble.n	8109b1e <_strtod_l+0x75e>
 8109aee:	4631      	mov	r1, r6
 8109af0:	461a      	mov	r2, r3
 8109af2:	4620      	mov	r0, r4
 8109af4:	f002 f9ea 	bl	810becc <__pow5mult>
 8109af8:	4606      	mov	r6, r0
 8109afa:	2800      	cmp	r0, #0
 8109afc:	f43f aea8 	beq.w	8109850 <_strtod_l+0x490>
 8109b00:	4601      	mov	r1, r0
 8109b02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109b04:	4620      	mov	r0, r4
 8109b06:	f002 f937 	bl	810bd78 <__multiply>
 8109b0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8109b0c:	2800      	cmp	r0, #0
 8109b0e:	f43f ae9f 	beq.w	8109850 <_strtod_l+0x490>
 8109b12:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109b14:	4620      	mov	r0, r4
 8109b16:	f002 f817 	bl	810bb48 <_Bfree>
 8109b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b1c:	9318      	str	r3, [sp, #96]	; 0x60
 8109b1e:	f1b8 0f00 	cmp.w	r8, #0
 8109b22:	f300 808c 	bgt.w	8109c3e <_strtod_l+0x87e>
 8109b26:	9b06      	ldr	r3, [sp, #24]
 8109b28:	2b00      	cmp	r3, #0
 8109b2a:	dd08      	ble.n	8109b3e <_strtod_l+0x77e>
 8109b2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109b2e:	9905      	ldr	r1, [sp, #20]
 8109b30:	4620      	mov	r0, r4
 8109b32:	f002 f9cb 	bl	810becc <__pow5mult>
 8109b36:	9005      	str	r0, [sp, #20]
 8109b38:	2800      	cmp	r0, #0
 8109b3a:	f43f ae89 	beq.w	8109850 <_strtod_l+0x490>
 8109b3e:	2f00      	cmp	r7, #0
 8109b40:	dd08      	ble.n	8109b54 <_strtod_l+0x794>
 8109b42:	9905      	ldr	r1, [sp, #20]
 8109b44:	463a      	mov	r2, r7
 8109b46:	4620      	mov	r0, r4
 8109b48:	f002 fa1a 	bl	810bf80 <__lshift>
 8109b4c:	9005      	str	r0, [sp, #20]
 8109b4e:	2800      	cmp	r0, #0
 8109b50:	f43f ae7e 	beq.w	8109850 <_strtod_l+0x490>
 8109b54:	f1b9 0f00 	cmp.w	r9, #0
 8109b58:	dd08      	ble.n	8109b6c <_strtod_l+0x7ac>
 8109b5a:	4631      	mov	r1, r6
 8109b5c:	464a      	mov	r2, r9
 8109b5e:	4620      	mov	r0, r4
 8109b60:	f002 fa0e 	bl	810bf80 <__lshift>
 8109b64:	4606      	mov	r6, r0
 8109b66:	2800      	cmp	r0, #0
 8109b68:	f43f ae72 	beq.w	8109850 <_strtod_l+0x490>
 8109b6c:	9a05      	ldr	r2, [sp, #20]
 8109b6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109b70:	4620      	mov	r0, r4
 8109b72:	f002 fa91 	bl	810c098 <__mdiff>
 8109b76:	4605      	mov	r5, r0
 8109b78:	2800      	cmp	r0, #0
 8109b7a:	f43f ae69 	beq.w	8109850 <_strtod_l+0x490>
 8109b7e:	68c3      	ldr	r3, [r0, #12]
 8109b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8109b82:	2300      	movs	r3, #0
 8109b84:	60c3      	str	r3, [r0, #12]
 8109b86:	4631      	mov	r1, r6
 8109b88:	f002 fa6a 	bl	810c060 <__mcmp>
 8109b8c:	2800      	cmp	r0, #0
 8109b8e:	da60      	bge.n	8109c52 <_strtod_l+0x892>
 8109b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b92:	ea53 030a 	orrs.w	r3, r3, sl
 8109b96:	f040 8082 	bne.w	8109c9e <_strtod_l+0x8de>
 8109b9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109b9e:	2b00      	cmp	r3, #0
 8109ba0:	d17d      	bne.n	8109c9e <_strtod_l+0x8de>
 8109ba2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109ba6:	0d1b      	lsrs	r3, r3, #20
 8109ba8:	051b      	lsls	r3, r3, #20
 8109baa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8109bae:	d976      	bls.n	8109c9e <_strtod_l+0x8de>
 8109bb0:	696b      	ldr	r3, [r5, #20]
 8109bb2:	b913      	cbnz	r3, 8109bba <_strtod_l+0x7fa>
 8109bb4:	692b      	ldr	r3, [r5, #16]
 8109bb6:	2b01      	cmp	r3, #1
 8109bb8:	dd71      	ble.n	8109c9e <_strtod_l+0x8de>
 8109bba:	4629      	mov	r1, r5
 8109bbc:	2201      	movs	r2, #1
 8109bbe:	4620      	mov	r0, r4
 8109bc0:	f002 f9de 	bl	810bf80 <__lshift>
 8109bc4:	4631      	mov	r1, r6
 8109bc6:	4605      	mov	r5, r0
 8109bc8:	f002 fa4a 	bl	810c060 <__mcmp>
 8109bcc:	2800      	cmp	r0, #0
 8109bce:	dd66      	ble.n	8109c9e <_strtod_l+0x8de>
 8109bd0:	9904      	ldr	r1, [sp, #16]
 8109bd2:	4a53      	ldr	r2, [pc, #332]	; (8109d20 <_strtod_l+0x960>)
 8109bd4:	465b      	mov	r3, fp
 8109bd6:	2900      	cmp	r1, #0
 8109bd8:	f000 8081 	beq.w	8109cde <_strtod_l+0x91e>
 8109bdc:	ea02 010b 	and.w	r1, r2, fp
 8109be0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8109be4:	dc7b      	bgt.n	8109cde <_strtod_l+0x91e>
 8109be6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8109bea:	f77f aea9 	ble.w	8109940 <_strtod_l+0x580>
 8109bee:	4b4d      	ldr	r3, [pc, #308]	; (8109d24 <_strtod_l+0x964>)
 8109bf0:	4650      	mov	r0, sl
 8109bf2:	4659      	mov	r1, fp
 8109bf4:	2200      	movs	r2, #0
 8109bf6:	f7f6 fd87 	bl	8100708 <__aeabi_dmul>
 8109bfa:	460b      	mov	r3, r1
 8109bfc:	4303      	orrs	r3, r0
 8109bfe:	bf08      	it	eq
 8109c00:	2322      	moveq	r3, #34	; 0x22
 8109c02:	4682      	mov	sl, r0
 8109c04:	468b      	mov	fp, r1
 8109c06:	bf08      	it	eq
 8109c08:	6023      	streq	r3, [r4, #0]
 8109c0a:	e62b      	b.n	8109864 <_strtod_l+0x4a4>
 8109c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109c10:	fa02 f303 	lsl.w	r3, r2, r3
 8109c14:	ea03 0a0a 	and.w	sl, r3, sl
 8109c18:	e6e3      	b.n	81099e2 <_strtod_l+0x622>
 8109c1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8109c1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8109c22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8109c26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8109c2a:	fa01 f308 	lsl.w	r3, r1, r8
 8109c2e:	9308      	str	r3, [sp, #32]
 8109c30:	910d      	str	r1, [sp, #52]	; 0x34
 8109c32:	e746      	b.n	8109ac2 <_strtod_l+0x702>
 8109c34:	2300      	movs	r3, #0
 8109c36:	9308      	str	r3, [sp, #32]
 8109c38:	2301      	movs	r3, #1
 8109c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8109c3c:	e741      	b.n	8109ac2 <_strtod_l+0x702>
 8109c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109c40:	4642      	mov	r2, r8
 8109c42:	4620      	mov	r0, r4
 8109c44:	f002 f99c 	bl	810bf80 <__lshift>
 8109c48:	9018      	str	r0, [sp, #96]	; 0x60
 8109c4a:	2800      	cmp	r0, #0
 8109c4c:	f47f af6b 	bne.w	8109b26 <_strtod_l+0x766>
 8109c50:	e5fe      	b.n	8109850 <_strtod_l+0x490>
 8109c52:	465f      	mov	r7, fp
 8109c54:	d16e      	bne.n	8109d34 <_strtod_l+0x974>
 8109c56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109c58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109c5c:	b342      	cbz	r2, 8109cb0 <_strtod_l+0x8f0>
 8109c5e:	4a32      	ldr	r2, [pc, #200]	; (8109d28 <_strtod_l+0x968>)
 8109c60:	4293      	cmp	r3, r2
 8109c62:	d128      	bne.n	8109cb6 <_strtod_l+0x8f6>
 8109c64:	9b04      	ldr	r3, [sp, #16]
 8109c66:	4651      	mov	r1, sl
 8109c68:	b1eb      	cbz	r3, 8109ca6 <_strtod_l+0x8e6>
 8109c6a:	4b2d      	ldr	r3, [pc, #180]	; (8109d20 <_strtod_l+0x960>)
 8109c6c:	403b      	ands	r3, r7
 8109c6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109c76:	d819      	bhi.n	8109cac <_strtod_l+0x8ec>
 8109c78:	0d1b      	lsrs	r3, r3, #20
 8109c7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8109c82:	4299      	cmp	r1, r3
 8109c84:	d117      	bne.n	8109cb6 <_strtod_l+0x8f6>
 8109c86:	4b29      	ldr	r3, [pc, #164]	; (8109d2c <_strtod_l+0x96c>)
 8109c88:	429f      	cmp	r7, r3
 8109c8a:	d102      	bne.n	8109c92 <_strtod_l+0x8d2>
 8109c8c:	3101      	adds	r1, #1
 8109c8e:	f43f addf 	beq.w	8109850 <_strtod_l+0x490>
 8109c92:	4b23      	ldr	r3, [pc, #140]	; (8109d20 <_strtod_l+0x960>)
 8109c94:	403b      	ands	r3, r7
 8109c96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8109c9a:	f04f 0a00 	mov.w	sl, #0
 8109c9e:	9b04      	ldr	r3, [sp, #16]
 8109ca0:	2b00      	cmp	r3, #0
 8109ca2:	d1a4      	bne.n	8109bee <_strtod_l+0x82e>
 8109ca4:	e5de      	b.n	8109864 <_strtod_l+0x4a4>
 8109ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109caa:	e7ea      	b.n	8109c82 <_strtod_l+0x8c2>
 8109cac:	4613      	mov	r3, r2
 8109cae:	e7e8      	b.n	8109c82 <_strtod_l+0x8c2>
 8109cb0:	ea53 030a 	orrs.w	r3, r3, sl
 8109cb4:	d08c      	beq.n	8109bd0 <_strtod_l+0x810>
 8109cb6:	9b08      	ldr	r3, [sp, #32]
 8109cb8:	b1db      	cbz	r3, 8109cf2 <_strtod_l+0x932>
 8109cba:	423b      	tst	r3, r7
 8109cbc:	d0ef      	beq.n	8109c9e <_strtod_l+0x8de>
 8109cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109cc0:	9a04      	ldr	r2, [sp, #16]
 8109cc2:	4650      	mov	r0, sl
 8109cc4:	4659      	mov	r1, fp
 8109cc6:	b1c3      	cbz	r3, 8109cfa <_strtod_l+0x93a>
 8109cc8:	f7ff fb5c 	bl	8109384 <sulp>
 8109ccc:	4602      	mov	r2, r0
 8109cce:	460b      	mov	r3, r1
 8109cd0:	ec51 0b18 	vmov	r0, r1, d8
 8109cd4:	f7f6 fb62 	bl	810039c <__adddf3>
 8109cd8:	4682      	mov	sl, r0
 8109cda:	468b      	mov	fp, r1
 8109cdc:	e7df      	b.n	8109c9e <_strtod_l+0x8de>
 8109cde:	4013      	ands	r3, r2
 8109ce0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8109ce4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8109ce8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8109cec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8109cf0:	e7d5      	b.n	8109c9e <_strtod_l+0x8de>
 8109cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109cf4:	ea13 0f0a 	tst.w	r3, sl
 8109cf8:	e7e0      	b.n	8109cbc <_strtod_l+0x8fc>
 8109cfa:	f7ff fb43 	bl	8109384 <sulp>
 8109cfe:	4602      	mov	r2, r0
 8109d00:	460b      	mov	r3, r1
 8109d02:	ec51 0b18 	vmov	r0, r1, d8
 8109d06:	f7f6 fb47 	bl	8100398 <__aeabi_dsub>
 8109d0a:	2200      	movs	r2, #0
 8109d0c:	2300      	movs	r3, #0
 8109d0e:	4682      	mov	sl, r0
 8109d10:	468b      	mov	fp, r1
 8109d12:	f7f6 ff61 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d16:	2800      	cmp	r0, #0
 8109d18:	d0c1      	beq.n	8109c9e <_strtod_l+0x8de>
 8109d1a:	e611      	b.n	8109940 <_strtod_l+0x580>
 8109d1c:	fffffc02 	.word	0xfffffc02
 8109d20:	7ff00000 	.word	0x7ff00000
 8109d24:	39500000 	.word	0x39500000
 8109d28:	000fffff 	.word	0x000fffff
 8109d2c:	7fefffff 	.word	0x7fefffff
 8109d30:	0810d028 	.word	0x0810d028
 8109d34:	4631      	mov	r1, r6
 8109d36:	4628      	mov	r0, r5
 8109d38:	f002 fb10 	bl	810c35c <__ratio>
 8109d3c:	ec59 8b10 	vmov	r8, r9, d0
 8109d40:	ee10 0a10 	vmov	r0, s0
 8109d44:	2200      	movs	r2, #0
 8109d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109d4a:	4649      	mov	r1, r9
 8109d4c:	f7f6 ff58 	bl	8100c00 <__aeabi_dcmple>
 8109d50:	2800      	cmp	r0, #0
 8109d52:	d07a      	beq.n	8109e4a <_strtod_l+0xa8a>
 8109d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109d56:	2b00      	cmp	r3, #0
 8109d58:	d04a      	beq.n	8109df0 <_strtod_l+0xa30>
 8109d5a:	4b95      	ldr	r3, [pc, #596]	; (8109fb0 <_strtod_l+0xbf0>)
 8109d5c:	2200      	movs	r2, #0
 8109d5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109d62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109fb0 <_strtod_l+0xbf0>
 8109d66:	f04f 0800 	mov.w	r8, #0
 8109d6a:	4b92      	ldr	r3, [pc, #584]	; (8109fb4 <_strtod_l+0xbf4>)
 8109d6c:	403b      	ands	r3, r7
 8109d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8109d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109d72:	4b91      	ldr	r3, [pc, #580]	; (8109fb8 <_strtod_l+0xbf8>)
 8109d74:	429a      	cmp	r2, r3
 8109d76:	f040 80b0 	bne.w	8109eda <_strtod_l+0xb1a>
 8109d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109d7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8109d82:	ec4b ab10 	vmov	d0, sl, fp
 8109d86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109d8a:	f002 fa0f 	bl	810c1ac <__ulp>
 8109d8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109d92:	ec53 2b10 	vmov	r2, r3, d0
 8109d96:	f7f6 fcb7 	bl	8100708 <__aeabi_dmul>
 8109d9a:	4652      	mov	r2, sl
 8109d9c:	465b      	mov	r3, fp
 8109d9e:	f7f6 fafd 	bl	810039c <__adddf3>
 8109da2:	460b      	mov	r3, r1
 8109da4:	4983      	ldr	r1, [pc, #524]	; (8109fb4 <_strtod_l+0xbf4>)
 8109da6:	4a85      	ldr	r2, [pc, #532]	; (8109fbc <_strtod_l+0xbfc>)
 8109da8:	4019      	ands	r1, r3
 8109daa:	4291      	cmp	r1, r2
 8109dac:	4682      	mov	sl, r0
 8109dae:	d960      	bls.n	8109e72 <_strtod_l+0xab2>
 8109db0:	ee18 3a90 	vmov	r3, s17
 8109db4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8109db8:	4293      	cmp	r3, r2
 8109dba:	d104      	bne.n	8109dc6 <_strtod_l+0xa06>
 8109dbc:	ee18 3a10 	vmov	r3, s16
 8109dc0:	3301      	adds	r3, #1
 8109dc2:	f43f ad45 	beq.w	8109850 <_strtod_l+0x490>
 8109dc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8109fc8 <_strtod_l+0xc08>
 8109dca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8109dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109dd0:	4620      	mov	r0, r4
 8109dd2:	f001 feb9 	bl	810bb48 <_Bfree>
 8109dd6:	9905      	ldr	r1, [sp, #20]
 8109dd8:	4620      	mov	r0, r4
 8109dda:	f001 feb5 	bl	810bb48 <_Bfree>
 8109dde:	4631      	mov	r1, r6
 8109de0:	4620      	mov	r0, r4
 8109de2:	f001 feb1 	bl	810bb48 <_Bfree>
 8109de6:	4629      	mov	r1, r5
 8109de8:	4620      	mov	r0, r4
 8109dea:	f001 fead 	bl	810bb48 <_Bfree>
 8109dee:	e61a      	b.n	8109a26 <_strtod_l+0x666>
 8109df0:	f1ba 0f00 	cmp.w	sl, #0
 8109df4:	d11b      	bne.n	8109e2e <_strtod_l+0xa6e>
 8109df6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109dfa:	b9f3      	cbnz	r3, 8109e3a <_strtod_l+0xa7a>
 8109dfc:	4b6c      	ldr	r3, [pc, #432]	; (8109fb0 <_strtod_l+0xbf0>)
 8109dfe:	2200      	movs	r2, #0
 8109e00:	4640      	mov	r0, r8
 8109e02:	4649      	mov	r1, r9
 8109e04:	f7f6 fef2 	bl	8100bec <__aeabi_dcmplt>
 8109e08:	b9d0      	cbnz	r0, 8109e40 <_strtod_l+0xa80>
 8109e0a:	4640      	mov	r0, r8
 8109e0c:	4649      	mov	r1, r9
 8109e0e:	4b6c      	ldr	r3, [pc, #432]	; (8109fc0 <_strtod_l+0xc00>)
 8109e10:	2200      	movs	r2, #0
 8109e12:	f7f6 fc79 	bl	8100708 <__aeabi_dmul>
 8109e16:	4680      	mov	r8, r0
 8109e18:	4689      	mov	r9, r1
 8109e1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109e1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8109e22:	9315      	str	r3, [sp, #84]	; 0x54
 8109e24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109e28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109e2c:	e79d      	b.n	8109d6a <_strtod_l+0x9aa>
 8109e2e:	f1ba 0f01 	cmp.w	sl, #1
 8109e32:	d102      	bne.n	8109e3a <_strtod_l+0xa7a>
 8109e34:	2f00      	cmp	r7, #0
 8109e36:	f43f ad83 	beq.w	8109940 <_strtod_l+0x580>
 8109e3a:	4b62      	ldr	r3, [pc, #392]	; (8109fc4 <_strtod_l+0xc04>)
 8109e3c:	2200      	movs	r2, #0
 8109e3e:	e78e      	b.n	8109d5e <_strtod_l+0x99e>
 8109e40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8109fc0 <_strtod_l+0xc00>
 8109e44:	f04f 0800 	mov.w	r8, #0
 8109e48:	e7e7      	b.n	8109e1a <_strtod_l+0xa5a>
 8109e4a:	4b5d      	ldr	r3, [pc, #372]	; (8109fc0 <_strtod_l+0xc00>)
 8109e4c:	4640      	mov	r0, r8
 8109e4e:	4649      	mov	r1, r9
 8109e50:	2200      	movs	r2, #0
 8109e52:	f7f6 fc59 	bl	8100708 <__aeabi_dmul>
 8109e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109e58:	4680      	mov	r8, r0
 8109e5a:	4689      	mov	r9, r1
 8109e5c:	b933      	cbnz	r3, 8109e6c <_strtod_l+0xaac>
 8109e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109e62:	900e      	str	r0, [sp, #56]	; 0x38
 8109e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8109e66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8109e6a:	e7dd      	b.n	8109e28 <_strtod_l+0xa68>
 8109e6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8109e70:	e7f9      	b.n	8109e66 <_strtod_l+0xaa6>
 8109e72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109e76:	9b04      	ldr	r3, [sp, #16]
 8109e78:	2b00      	cmp	r3, #0
 8109e7a:	d1a8      	bne.n	8109dce <_strtod_l+0xa0e>
 8109e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109e80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109e82:	0d1b      	lsrs	r3, r3, #20
 8109e84:	051b      	lsls	r3, r3, #20
 8109e86:	429a      	cmp	r2, r3
 8109e88:	d1a1      	bne.n	8109dce <_strtod_l+0xa0e>
 8109e8a:	4640      	mov	r0, r8
 8109e8c:	4649      	mov	r1, r9
 8109e8e:	f7f6 ff9b 	bl	8100dc8 <__aeabi_d2lz>
 8109e92:	f7f6 fc0b 	bl	81006ac <__aeabi_l2d>
 8109e96:	4602      	mov	r2, r0
 8109e98:	460b      	mov	r3, r1
 8109e9a:	4640      	mov	r0, r8
 8109e9c:	4649      	mov	r1, r9
 8109e9e:	f7f6 fa7b 	bl	8100398 <__aeabi_dsub>
 8109ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109ea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109ea8:	ea43 030a 	orr.w	r3, r3, sl
 8109eac:	4313      	orrs	r3, r2
 8109eae:	4680      	mov	r8, r0
 8109eb0:	4689      	mov	r9, r1
 8109eb2:	d055      	beq.n	8109f60 <_strtod_l+0xba0>
 8109eb4:	a336      	add	r3, pc, #216	; (adr r3, 8109f90 <_strtod_l+0xbd0>)
 8109eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109eba:	f7f6 fe97 	bl	8100bec <__aeabi_dcmplt>
 8109ebe:	2800      	cmp	r0, #0
 8109ec0:	f47f acd0 	bne.w	8109864 <_strtod_l+0x4a4>
 8109ec4:	a334      	add	r3, pc, #208	; (adr r3, 8109f98 <_strtod_l+0xbd8>)
 8109ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109eca:	4640      	mov	r0, r8
 8109ecc:	4649      	mov	r1, r9
 8109ece:	f7f6 feab 	bl	8100c28 <__aeabi_dcmpgt>
 8109ed2:	2800      	cmp	r0, #0
 8109ed4:	f43f af7b 	beq.w	8109dce <_strtod_l+0xa0e>
 8109ed8:	e4c4      	b.n	8109864 <_strtod_l+0x4a4>
 8109eda:	9b04      	ldr	r3, [sp, #16]
 8109edc:	b333      	cbz	r3, 8109f2c <_strtod_l+0xb6c>
 8109ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109ee0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109ee4:	d822      	bhi.n	8109f2c <_strtod_l+0xb6c>
 8109ee6:	a32e      	add	r3, pc, #184	; (adr r3, 8109fa0 <_strtod_l+0xbe0>)
 8109ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109eec:	4640      	mov	r0, r8
 8109eee:	4649      	mov	r1, r9
 8109ef0:	f7f6 fe86 	bl	8100c00 <__aeabi_dcmple>
 8109ef4:	b1a0      	cbz	r0, 8109f20 <_strtod_l+0xb60>
 8109ef6:	4649      	mov	r1, r9
 8109ef8:	4640      	mov	r0, r8
 8109efa:	f7f6 fedd 	bl	8100cb8 <__aeabi_d2uiz>
 8109efe:	2801      	cmp	r0, #1
 8109f00:	bf38      	it	cc
 8109f02:	2001      	movcc	r0, #1
 8109f04:	f7f6 fb86 	bl	8100614 <__aeabi_ui2d>
 8109f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109f0a:	4680      	mov	r8, r0
 8109f0c:	4689      	mov	r9, r1
 8109f0e:	bb23      	cbnz	r3, 8109f5a <_strtod_l+0xb9a>
 8109f10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109f14:	9010      	str	r0, [sp, #64]	; 0x40
 8109f16:	9311      	str	r3, [sp, #68]	; 0x44
 8109f18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8109f1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109f22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109f24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109f28:	1a9b      	subs	r3, r3, r2
 8109f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8109f2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109f30:	eeb0 0a48 	vmov.f32	s0, s16
 8109f34:	eef0 0a68 	vmov.f32	s1, s17
 8109f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109f3c:	f002 f936 	bl	810c1ac <__ulp>
 8109f40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109f44:	ec53 2b10 	vmov	r2, r3, d0
 8109f48:	f7f6 fbde 	bl	8100708 <__aeabi_dmul>
 8109f4c:	ec53 2b18 	vmov	r2, r3, d8
 8109f50:	f7f6 fa24 	bl	810039c <__adddf3>
 8109f54:	4682      	mov	sl, r0
 8109f56:	468b      	mov	fp, r1
 8109f58:	e78d      	b.n	8109e76 <_strtod_l+0xab6>
 8109f5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8109f5e:	e7db      	b.n	8109f18 <_strtod_l+0xb58>
 8109f60:	a311      	add	r3, pc, #68	; (adr r3, 8109fa8 <_strtod_l+0xbe8>)
 8109f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f66:	f7f6 fe41 	bl	8100bec <__aeabi_dcmplt>
 8109f6a:	e7b2      	b.n	8109ed2 <_strtod_l+0xb12>
 8109f6c:	2300      	movs	r3, #0
 8109f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8109f70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109f72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109f74:	6013      	str	r3, [r2, #0]
 8109f76:	f7ff ba6b 	b.w	8109450 <_strtod_l+0x90>
 8109f7a:	2a65      	cmp	r2, #101	; 0x65
 8109f7c:	f43f ab5f 	beq.w	810963e <_strtod_l+0x27e>
 8109f80:	2a45      	cmp	r2, #69	; 0x45
 8109f82:	f43f ab5c 	beq.w	810963e <_strtod_l+0x27e>
 8109f86:	2301      	movs	r3, #1
 8109f88:	f7ff bb94 	b.w	81096b4 <_strtod_l+0x2f4>
 8109f8c:	f3af 8000 	nop.w
 8109f90:	94a03595 	.word	0x94a03595
 8109f94:	3fdfffff 	.word	0x3fdfffff
 8109f98:	35afe535 	.word	0x35afe535
 8109f9c:	3fe00000 	.word	0x3fe00000
 8109fa0:	ffc00000 	.word	0xffc00000
 8109fa4:	41dfffff 	.word	0x41dfffff
 8109fa8:	94a03595 	.word	0x94a03595
 8109fac:	3fcfffff 	.word	0x3fcfffff
 8109fb0:	3ff00000 	.word	0x3ff00000
 8109fb4:	7ff00000 	.word	0x7ff00000
 8109fb8:	7fe00000 	.word	0x7fe00000
 8109fbc:	7c9fffff 	.word	0x7c9fffff
 8109fc0:	3fe00000 	.word	0x3fe00000
 8109fc4:	bff00000 	.word	0xbff00000
 8109fc8:	7fefffff 	.word	0x7fefffff

08109fcc <_strtod_r>:
 8109fcc:	4b01      	ldr	r3, [pc, #4]	; (8109fd4 <_strtod_r+0x8>)
 8109fce:	f7ff b9f7 	b.w	81093c0 <_strtod_l>
 8109fd2:	bf00      	nop
 8109fd4:	10000078 	.word	0x10000078

08109fd8 <_strtol_l.constprop.0>:
 8109fd8:	2b01      	cmp	r3, #1
 8109fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109fde:	d001      	beq.n	8109fe4 <_strtol_l.constprop.0+0xc>
 8109fe0:	2b24      	cmp	r3, #36	; 0x24
 8109fe2:	d906      	bls.n	8109ff2 <_strtol_l.constprop.0+0x1a>
 8109fe4:	f7fe fa6e 	bl	81084c4 <__errno>
 8109fe8:	2316      	movs	r3, #22
 8109fea:	6003      	str	r3, [r0, #0]
 8109fec:	2000      	movs	r0, #0
 8109fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109ff2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810a0d8 <_strtol_l.constprop.0+0x100>
 8109ff6:	460d      	mov	r5, r1
 8109ff8:	462e      	mov	r6, r5
 8109ffa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109ffe:	f814 700c 	ldrb.w	r7, [r4, ip]
 810a002:	f017 0708 	ands.w	r7, r7, #8
 810a006:	d1f7      	bne.n	8109ff8 <_strtol_l.constprop.0+0x20>
 810a008:	2c2d      	cmp	r4, #45	; 0x2d
 810a00a:	d132      	bne.n	810a072 <_strtol_l.constprop.0+0x9a>
 810a00c:	782c      	ldrb	r4, [r5, #0]
 810a00e:	2701      	movs	r7, #1
 810a010:	1cb5      	adds	r5, r6, #2
 810a012:	2b00      	cmp	r3, #0
 810a014:	d05b      	beq.n	810a0ce <_strtol_l.constprop.0+0xf6>
 810a016:	2b10      	cmp	r3, #16
 810a018:	d109      	bne.n	810a02e <_strtol_l.constprop.0+0x56>
 810a01a:	2c30      	cmp	r4, #48	; 0x30
 810a01c:	d107      	bne.n	810a02e <_strtol_l.constprop.0+0x56>
 810a01e:	782c      	ldrb	r4, [r5, #0]
 810a020:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810a024:	2c58      	cmp	r4, #88	; 0x58
 810a026:	d14d      	bne.n	810a0c4 <_strtol_l.constprop.0+0xec>
 810a028:	786c      	ldrb	r4, [r5, #1]
 810a02a:	2310      	movs	r3, #16
 810a02c:	3502      	adds	r5, #2
 810a02e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810a032:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810a036:	f04f 0c00 	mov.w	ip, #0
 810a03a:	fbb8 f9f3 	udiv	r9, r8, r3
 810a03e:	4666      	mov	r6, ip
 810a040:	fb03 8a19 	mls	sl, r3, r9, r8
 810a044:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810a048:	f1be 0f09 	cmp.w	lr, #9
 810a04c:	d816      	bhi.n	810a07c <_strtol_l.constprop.0+0xa4>
 810a04e:	4674      	mov	r4, lr
 810a050:	42a3      	cmp	r3, r4
 810a052:	dd24      	ble.n	810a09e <_strtol_l.constprop.0+0xc6>
 810a054:	f1bc 0f00 	cmp.w	ip, #0
 810a058:	db1e      	blt.n	810a098 <_strtol_l.constprop.0+0xc0>
 810a05a:	45b1      	cmp	r9, r6
 810a05c:	d31c      	bcc.n	810a098 <_strtol_l.constprop.0+0xc0>
 810a05e:	d101      	bne.n	810a064 <_strtol_l.constprop.0+0x8c>
 810a060:	45a2      	cmp	sl, r4
 810a062:	db19      	blt.n	810a098 <_strtol_l.constprop.0+0xc0>
 810a064:	fb06 4603 	mla	r6, r6, r3, r4
 810a068:	f04f 0c01 	mov.w	ip, #1
 810a06c:	f815 4b01 	ldrb.w	r4, [r5], #1
 810a070:	e7e8      	b.n	810a044 <_strtol_l.constprop.0+0x6c>
 810a072:	2c2b      	cmp	r4, #43	; 0x2b
 810a074:	bf04      	itt	eq
 810a076:	782c      	ldrbeq	r4, [r5, #0]
 810a078:	1cb5      	addeq	r5, r6, #2
 810a07a:	e7ca      	b.n	810a012 <_strtol_l.constprop.0+0x3a>
 810a07c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810a080:	f1be 0f19 	cmp.w	lr, #25
 810a084:	d801      	bhi.n	810a08a <_strtol_l.constprop.0+0xb2>
 810a086:	3c37      	subs	r4, #55	; 0x37
 810a088:	e7e2      	b.n	810a050 <_strtol_l.constprop.0+0x78>
 810a08a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810a08e:	f1be 0f19 	cmp.w	lr, #25
 810a092:	d804      	bhi.n	810a09e <_strtol_l.constprop.0+0xc6>
 810a094:	3c57      	subs	r4, #87	; 0x57
 810a096:	e7db      	b.n	810a050 <_strtol_l.constprop.0+0x78>
 810a098:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 810a09c:	e7e6      	b.n	810a06c <_strtol_l.constprop.0+0x94>
 810a09e:	f1bc 0f00 	cmp.w	ip, #0
 810a0a2:	da05      	bge.n	810a0b0 <_strtol_l.constprop.0+0xd8>
 810a0a4:	2322      	movs	r3, #34	; 0x22
 810a0a6:	6003      	str	r3, [r0, #0]
 810a0a8:	4646      	mov	r6, r8
 810a0aa:	b942      	cbnz	r2, 810a0be <_strtol_l.constprop.0+0xe6>
 810a0ac:	4630      	mov	r0, r6
 810a0ae:	e79e      	b.n	8109fee <_strtol_l.constprop.0+0x16>
 810a0b0:	b107      	cbz	r7, 810a0b4 <_strtol_l.constprop.0+0xdc>
 810a0b2:	4276      	negs	r6, r6
 810a0b4:	2a00      	cmp	r2, #0
 810a0b6:	d0f9      	beq.n	810a0ac <_strtol_l.constprop.0+0xd4>
 810a0b8:	f1bc 0f00 	cmp.w	ip, #0
 810a0bc:	d000      	beq.n	810a0c0 <_strtol_l.constprop.0+0xe8>
 810a0be:	1e69      	subs	r1, r5, #1
 810a0c0:	6011      	str	r1, [r2, #0]
 810a0c2:	e7f3      	b.n	810a0ac <_strtol_l.constprop.0+0xd4>
 810a0c4:	2430      	movs	r4, #48	; 0x30
 810a0c6:	2b00      	cmp	r3, #0
 810a0c8:	d1b1      	bne.n	810a02e <_strtol_l.constprop.0+0x56>
 810a0ca:	2308      	movs	r3, #8
 810a0cc:	e7af      	b.n	810a02e <_strtol_l.constprop.0+0x56>
 810a0ce:	2c30      	cmp	r4, #48	; 0x30
 810a0d0:	d0a5      	beq.n	810a01e <_strtol_l.constprop.0+0x46>
 810a0d2:	230a      	movs	r3, #10
 810a0d4:	e7ab      	b.n	810a02e <_strtol_l.constprop.0+0x56>
 810a0d6:	bf00      	nop
 810a0d8:	0810d051 	.word	0x0810d051

0810a0dc <_strtol_r>:
 810a0dc:	f7ff bf7c 	b.w	8109fd8 <_strtol_l.constprop.0>

0810a0e0 <__swbuf_r>:
 810a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a0e2:	460e      	mov	r6, r1
 810a0e4:	4614      	mov	r4, r2
 810a0e6:	4605      	mov	r5, r0
 810a0e8:	b118      	cbz	r0, 810a0f2 <__swbuf_r+0x12>
 810a0ea:	6983      	ldr	r3, [r0, #24]
 810a0ec:	b90b      	cbnz	r3, 810a0f2 <__swbuf_r+0x12>
 810a0ee:	f001 f84b 	bl	810b188 <__sinit>
 810a0f2:	4b21      	ldr	r3, [pc, #132]	; (810a178 <__swbuf_r+0x98>)
 810a0f4:	429c      	cmp	r4, r3
 810a0f6:	d12b      	bne.n	810a150 <__swbuf_r+0x70>
 810a0f8:	686c      	ldr	r4, [r5, #4]
 810a0fa:	69a3      	ldr	r3, [r4, #24]
 810a0fc:	60a3      	str	r3, [r4, #8]
 810a0fe:	89a3      	ldrh	r3, [r4, #12]
 810a100:	071a      	lsls	r2, r3, #28
 810a102:	d52f      	bpl.n	810a164 <__swbuf_r+0x84>
 810a104:	6923      	ldr	r3, [r4, #16]
 810a106:	b36b      	cbz	r3, 810a164 <__swbuf_r+0x84>
 810a108:	6923      	ldr	r3, [r4, #16]
 810a10a:	6820      	ldr	r0, [r4, #0]
 810a10c:	1ac0      	subs	r0, r0, r3
 810a10e:	6963      	ldr	r3, [r4, #20]
 810a110:	b2f6      	uxtb	r6, r6
 810a112:	4283      	cmp	r3, r0
 810a114:	4637      	mov	r7, r6
 810a116:	dc04      	bgt.n	810a122 <__swbuf_r+0x42>
 810a118:	4621      	mov	r1, r4
 810a11a:	4628      	mov	r0, r5
 810a11c:	f000 ffa0 	bl	810b060 <_fflush_r>
 810a120:	bb30      	cbnz	r0, 810a170 <__swbuf_r+0x90>
 810a122:	68a3      	ldr	r3, [r4, #8]
 810a124:	3b01      	subs	r3, #1
 810a126:	60a3      	str	r3, [r4, #8]
 810a128:	6823      	ldr	r3, [r4, #0]
 810a12a:	1c5a      	adds	r2, r3, #1
 810a12c:	6022      	str	r2, [r4, #0]
 810a12e:	701e      	strb	r6, [r3, #0]
 810a130:	6963      	ldr	r3, [r4, #20]
 810a132:	3001      	adds	r0, #1
 810a134:	4283      	cmp	r3, r0
 810a136:	d004      	beq.n	810a142 <__swbuf_r+0x62>
 810a138:	89a3      	ldrh	r3, [r4, #12]
 810a13a:	07db      	lsls	r3, r3, #31
 810a13c:	d506      	bpl.n	810a14c <__swbuf_r+0x6c>
 810a13e:	2e0a      	cmp	r6, #10
 810a140:	d104      	bne.n	810a14c <__swbuf_r+0x6c>
 810a142:	4621      	mov	r1, r4
 810a144:	4628      	mov	r0, r5
 810a146:	f000 ff8b 	bl	810b060 <_fflush_r>
 810a14a:	b988      	cbnz	r0, 810a170 <__swbuf_r+0x90>
 810a14c:	4638      	mov	r0, r7
 810a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a150:	4b0a      	ldr	r3, [pc, #40]	; (810a17c <__swbuf_r+0x9c>)
 810a152:	429c      	cmp	r4, r3
 810a154:	d101      	bne.n	810a15a <__swbuf_r+0x7a>
 810a156:	68ac      	ldr	r4, [r5, #8]
 810a158:	e7cf      	b.n	810a0fa <__swbuf_r+0x1a>
 810a15a:	4b09      	ldr	r3, [pc, #36]	; (810a180 <__swbuf_r+0xa0>)
 810a15c:	429c      	cmp	r4, r3
 810a15e:	bf08      	it	eq
 810a160:	68ec      	ldreq	r4, [r5, #12]
 810a162:	e7ca      	b.n	810a0fa <__swbuf_r+0x1a>
 810a164:	4621      	mov	r1, r4
 810a166:	4628      	mov	r0, r5
 810a168:	f000 f80c 	bl	810a184 <__swsetup_r>
 810a16c:	2800      	cmp	r0, #0
 810a16e:	d0cb      	beq.n	810a108 <__swbuf_r+0x28>
 810a170:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810a174:	e7ea      	b.n	810a14c <__swbuf_r+0x6c>
 810a176:	bf00      	nop
 810a178:	0810d204 	.word	0x0810d204
 810a17c:	0810d224 	.word	0x0810d224
 810a180:	0810d1e4 	.word	0x0810d1e4

0810a184 <__swsetup_r>:
 810a184:	4b32      	ldr	r3, [pc, #200]	; (810a250 <__swsetup_r+0xcc>)
 810a186:	b570      	push	{r4, r5, r6, lr}
 810a188:	681d      	ldr	r5, [r3, #0]
 810a18a:	4606      	mov	r6, r0
 810a18c:	460c      	mov	r4, r1
 810a18e:	b125      	cbz	r5, 810a19a <__swsetup_r+0x16>
 810a190:	69ab      	ldr	r3, [r5, #24]
 810a192:	b913      	cbnz	r3, 810a19a <__swsetup_r+0x16>
 810a194:	4628      	mov	r0, r5
 810a196:	f000 fff7 	bl	810b188 <__sinit>
 810a19a:	4b2e      	ldr	r3, [pc, #184]	; (810a254 <__swsetup_r+0xd0>)
 810a19c:	429c      	cmp	r4, r3
 810a19e:	d10f      	bne.n	810a1c0 <__swsetup_r+0x3c>
 810a1a0:	686c      	ldr	r4, [r5, #4]
 810a1a2:	89a3      	ldrh	r3, [r4, #12]
 810a1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a1a8:	0719      	lsls	r1, r3, #28
 810a1aa:	d42c      	bmi.n	810a206 <__swsetup_r+0x82>
 810a1ac:	06dd      	lsls	r5, r3, #27
 810a1ae:	d411      	bmi.n	810a1d4 <__swsetup_r+0x50>
 810a1b0:	2309      	movs	r3, #9
 810a1b2:	6033      	str	r3, [r6, #0]
 810a1b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810a1b8:	81a3      	strh	r3, [r4, #12]
 810a1ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810a1be:	e03e      	b.n	810a23e <__swsetup_r+0xba>
 810a1c0:	4b25      	ldr	r3, [pc, #148]	; (810a258 <__swsetup_r+0xd4>)
 810a1c2:	429c      	cmp	r4, r3
 810a1c4:	d101      	bne.n	810a1ca <__swsetup_r+0x46>
 810a1c6:	68ac      	ldr	r4, [r5, #8]
 810a1c8:	e7eb      	b.n	810a1a2 <__swsetup_r+0x1e>
 810a1ca:	4b24      	ldr	r3, [pc, #144]	; (810a25c <__swsetup_r+0xd8>)
 810a1cc:	429c      	cmp	r4, r3
 810a1ce:	bf08      	it	eq
 810a1d0:	68ec      	ldreq	r4, [r5, #12]
 810a1d2:	e7e6      	b.n	810a1a2 <__swsetup_r+0x1e>
 810a1d4:	0758      	lsls	r0, r3, #29
 810a1d6:	d512      	bpl.n	810a1fe <__swsetup_r+0x7a>
 810a1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a1da:	b141      	cbz	r1, 810a1ee <__swsetup_r+0x6a>
 810a1dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a1e0:	4299      	cmp	r1, r3
 810a1e2:	d002      	beq.n	810a1ea <__swsetup_r+0x66>
 810a1e4:	4630      	mov	r0, r6
 810a1e6:	f002 f947 	bl	810c478 <_free_r>
 810a1ea:	2300      	movs	r3, #0
 810a1ec:	6363      	str	r3, [r4, #52]	; 0x34
 810a1ee:	89a3      	ldrh	r3, [r4, #12]
 810a1f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810a1f4:	81a3      	strh	r3, [r4, #12]
 810a1f6:	2300      	movs	r3, #0
 810a1f8:	6063      	str	r3, [r4, #4]
 810a1fa:	6923      	ldr	r3, [r4, #16]
 810a1fc:	6023      	str	r3, [r4, #0]
 810a1fe:	89a3      	ldrh	r3, [r4, #12]
 810a200:	f043 0308 	orr.w	r3, r3, #8
 810a204:	81a3      	strh	r3, [r4, #12]
 810a206:	6923      	ldr	r3, [r4, #16]
 810a208:	b94b      	cbnz	r3, 810a21e <__swsetup_r+0x9a>
 810a20a:	89a3      	ldrh	r3, [r4, #12]
 810a20c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810a210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a214:	d003      	beq.n	810a21e <__swsetup_r+0x9a>
 810a216:	4621      	mov	r1, r4
 810a218:	4630      	mov	r0, r6
 810a21a:	f001 fbed 	bl	810b9f8 <__smakebuf_r>
 810a21e:	89a0      	ldrh	r0, [r4, #12]
 810a220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a224:	f010 0301 	ands.w	r3, r0, #1
 810a228:	d00a      	beq.n	810a240 <__swsetup_r+0xbc>
 810a22a:	2300      	movs	r3, #0
 810a22c:	60a3      	str	r3, [r4, #8]
 810a22e:	6963      	ldr	r3, [r4, #20]
 810a230:	425b      	negs	r3, r3
 810a232:	61a3      	str	r3, [r4, #24]
 810a234:	6923      	ldr	r3, [r4, #16]
 810a236:	b943      	cbnz	r3, 810a24a <__swsetup_r+0xc6>
 810a238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810a23c:	d1ba      	bne.n	810a1b4 <__swsetup_r+0x30>
 810a23e:	bd70      	pop	{r4, r5, r6, pc}
 810a240:	0781      	lsls	r1, r0, #30
 810a242:	bf58      	it	pl
 810a244:	6963      	ldrpl	r3, [r4, #20]
 810a246:	60a3      	str	r3, [r4, #8]
 810a248:	e7f4      	b.n	810a234 <__swsetup_r+0xb0>
 810a24a:	2000      	movs	r0, #0
 810a24c:	e7f7      	b.n	810a23e <__swsetup_r+0xba>
 810a24e:	bf00      	nop
 810a250:	10000010 	.word	0x10000010
 810a254:	0810d204 	.word	0x0810d204
 810a258:	0810d224 	.word	0x0810d224
 810a25c:	0810d1e4 	.word	0x0810d1e4

0810a260 <quorem>:
 810a260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a264:	6903      	ldr	r3, [r0, #16]
 810a266:	690c      	ldr	r4, [r1, #16]
 810a268:	42a3      	cmp	r3, r4
 810a26a:	4607      	mov	r7, r0
 810a26c:	f2c0 8081 	blt.w	810a372 <quorem+0x112>
 810a270:	3c01      	subs	r4, #1
 810a272:	f101 0814 	add.w	r8, r1, #20
 810a276:	f100 0514 	add.w	r5, r0, #20
 810a27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a27e:	9301      	str	r3, [sp, #4]
 810a280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810a284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a288:	3301      	adds	r3, #1
 810a28a:	429a      	cmp	r2, r3
 810a28c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810a290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810a294:	fbb2 f6f3 	udiv	r6, r2, r3
 810a298:	d331      	bcc.n	810a2fe <quorem+0x9e>
 810a29a:	f04f 0e00 	mov.w	lr, #0
 810a29e:	4640      	mov	r0, r8
 810a2a0:	46ac      	mov	ip, r5
 810a2a2:	46f2      	mov	sl, lr
 810a2a4:	f850 2b04 	ldr.w	r2, [r0], #4
 810a2a8:	b293      	uxth	r3, r2
 810a2aa:	fb06 e303 	mla	r3, r6, r3, lr
 810a2ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810a2b2:	b29b      	uxth	r3, r3
 810a2b4:	ebaa 0303 	sub.w	r3, sl, r3
 810a2b8:	f8dc a000 	ldr.w	sl, [ip]
 810a2bc:	0c12      	lsrs	r2, r2, #16
 810a2be:	fa13 f38a 	uxtah	r3, r3, sl
 810a2c2:	fb06 e202 	mla	r2, r6, r2, lr
 810a2c6:	9300      	str	r3, [sp, #0]
 810a2c8:	9b00      	ldr	r3, [sp, #0]
 810a2ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810a2ce:	b292      	uxth	r2, r2
 810a2d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810a2d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a2d8:	f8bd 3000 	ldrh.w	r3, [sp]
 810a2dc:	4581      	cmp	r9, r0
 810a2de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a2e2:	f84c 3b04 	str.w	r3, [ip], #4
 810a2e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810a2ea:	d2db      	bcs.n	810a2a4 <quorem+0x44>
 810a2ec:	f855 300b 	ldr.w	r3, [r5, fp]
 810a2f0:	b92b      	cbnz	r3, 810a2fe <quorem+0x9e>
 810a2f2:	9b01      	ldr	r3, [sp, #4]
 810a2f4:	3b04      	subs	r3, #4
 810a2f6:	429d      	cmp	r5, r3
 810a2f8:	461a      	mov	r2, r3
 810a2fa:	d32e      	bcc.n	810a35a <quorem+0xfa>
 810a2fc:	613c      	str	r4, [r7, #16]
 810a2fe:	4638      	mov	r0, r7
 810a300:	f001 feae 	bl	810c060 <__mcmp>
 810a304:	2800      	cmp	r0, #0
 810a306:	db24      	blt.n	810a352 <quorem+0xf2>
 810a308:	3601      	adds	r6, #1
 810a30a:	4628      	mov	r0, r5
 810a30c:	f04f 0c00 	mov.w	ip, #0
 810a310:	f858 2b04 	ldr.w	r2, [r8], #4
 810a314:	f8d0 e000 	ldr.w	lr, [r0]
 810a318:	b293      	uxth	r3, r2
 810a31a:	ebac 0303 	sub.w	r3, ip, r3
 810a31e:	0c12      	lsrs	r2, r2, #16
 810a320:	fa13 f38e 	uxtah	r3, r3, lr
 810a324:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810a328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a32c:	b29b      	uxth	r3, r3
 810a32e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a332:	45c1      	cmp	r9, r8
 810a334:	f840 3b04 	str.w	r3, [r0], #4
 810a338:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810a33c:	d2e8      	bcs.n	810a310 <quorem+0xb0>
 810a33e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a346:	b922      	cbnz	r2, 810a352 <quorem+0xf2>
 810a348:	3b04      	subs	r3, #4
 810a34a:	429d      	cmp	r5, r3
 810a34c:	461a      	mov	r2, r3
 810a34e:	d30a      	bcc.n	810a366 <quorem+0x106>
 810a350:	613c      	str	r4, [r7, #16]
 810a352:	4630      	mov	r0, r6
 810a354:	b003      	add	sp, #12
 810a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a35a:	6812      	ldr	r2, [r2, #0]
 810a35c:	3b04      	subs	r3, #4
 810a35e:	2a00      	cmp	r2, #0
 810a360:	d1cc      	bne.n	810a2fc <quorem+0x9c>
 810a362:	3c01      	subs	r4, #1
 810a364:	e7c7      	b.n	810a2f6 <quorem+0x96>
 810a366:	6812      	ldr	r2, [r2, #0]
 810a368:	3b04      	subs	r3, #4
 810a36a:	2a00      	cmp	r2, #0
 810a36c:	d1f0      	bne.n	810a350 <quorem+0xf0>
 810a36e:	3c01      	subs	r4, #1
 810a370:	e7eb      	b.n	810a34a <quorem+0xea>
 810a372:	2000      	movs	r0, #0
 810a374:	e7ee      	b.n	810a354 <quorem+0xf4>
	...

0810a378 <_dtoa_r>:
 810a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a37c:	ed2d 8b04 	vpush	{d8-d9}
 810a380:	ec57 6b10 	vmov	r6, r7, d0
 810a384:	b093      	sub	sp, #76	; 0x4c
 810a386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a388:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810a38c:	9106      	str	r1, [sp, #24]
 810a38e:	ee10 aa10 	vmov	sl, s0
 810a392:	4604      	mov	r4, r0
 810a394:	9209      	str	r2, [sp, #36]	; 0x24
 810a396:	930c      	str	r3, [sp, #48]	; 0x30
 810a398:	46bb      	mov	fp, r7
 810a39a:	b975      	cbnz	r5, 810a3ba <_dtoa_r+0x42>
 810a39c:	2010      	movs	r0, #16
 810a39e:	f001 fb6b 	bl	810ba78 <malloc>
 810a3a2:	4602      	mov	r2, r0
 810a3a4:	6260      	str	r0, [r4, #36]	; 0x24
 810a3a6:	b920      	cbnz	r0, 810a3b2 <_dtoa_r+0x3a>
 810a3a8:	4ba7      	ldr	r3, [pc, #668]	; (810a648 <_dtoa_r+0x2d0>)
 810a3aa:	21ea      	movs	r1, #234	; 0xea
 810a3ac:	48a7      	ldr	r0, [pc, #668]	; (810a64c <_dtoa_r+0x2d4>)
 810a3ae:	f002 fc89 	bl	810ccc4 <__assert_func>
 810a3b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810a3b6:	6005      	str	r5, [r0, #0]
 810a3b8:	60c5      	str	r5, [r0, #12]
 810a3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a3bc:	6819      	ldr	r1, [r3, #0]
 810a3be:	b151      	cbz	r1, 810a3d6 <_dtoa_r+0x5e>
 810a3c0:	685a      	ldr	r2, [r3, #4]
 810a3c2:	604a      	str	r2, [r1, #4]
 810a3c4:	2301      	movs	r3, #1
 810a3c6:	4093      	lsls	r3, r2
 810a3c8:	608b      	str	r3, [r1, #8]
 810a3ca:	4620      	mov	r0, r4
 810a3cc:	f001 fbbc 	bl	810bb48 <_Bfree>
 810a3d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a3d2:	2200      	movs	r2, #0
 810a3d4:	601a      	str	r2, [r3, #0]
 810a3d6:	1e3b      	subs	r3, r7, #0
 810a3d8:	bfaa      	itet	ge
 810a3da:	2300      	movge	r3, #0
 810a3dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810a3e0:	f8c8 3000 	strge.w	r3, [r8]
 810a3e4:	4b9a      	ldr	r3, [pc, #616]	; (810a650 <_dtoa_r+0x2d8>)
 810a3e6:	bfbc      	itt	lt
 810a3e8:	2201      	movlt	r2, #1
 810a3ea:	f8c8 2000 	strlt.w	r2, [r8]
 810a3ee:	ea33 030b 	bics.w	r3, r3, fp
 810a3f2:	d11b      	bne.n	810a42c <_dtoa_r+0xb4>
 810a3f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a3f6:	f242 730f 	movw	r3, #9999	; 0x270f
 810a3fa:	6013      	str	r3, [r2, #0]
 810a3fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a400:	4333      	orrs	r3, r6
 810a402:	f000 8592 	beq.w	810af2a <_dtoa_r+0xbb2>
 810a406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a408:	b963      	cbnz	r3, 810a424 <_dtoa_r+0xac>
 810a40a:	4b92      	ldr	r3, [pc, #584]	; (810a654 <_dtoa_r+0x2dc>)
 810a40c:	e022      	b.n	810a454 <_dtoa_r+0xdc>
 810a40e:	4b92      	ldr	r3, [pc, #584]	; (810a658 <_dtoa_r+0x2e0>)
 810a410:	9301      	str	r3, [sp, #4]
 810a412:	3308      	adds	r3, #8
 810a414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a416:	6013      	str	r3, [r2, #0]
 810a418:	9801      	ldr	r0, [sp, #4]
 810a41a:	b013      	add	sp, #76	; 0x4c
 810a41c:	ecbd 8b04 	vpop	{d8-d9}
 810a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a424:	4b8b      	ldr	r3, [pc, #556]	; (810a654 <_dtoa_r+0x2dc>)
 810a426:	9301      	str	r3, [sp, #4]
 810a428:	3303      	adds	r3, #3
 810a42a:	e7f3      	b.n	810a414 <_dtoa_r+0x9c>
 810a42c:	2200      	movs	r2, #0
 810a42e:	2300      	movs	r3, #0
 810a430:	4650      	mov	r0, sl
 810a432:	4659      	mov	r1, fp
 810a434:	f7f6 fbd0 	bl	8100bd8 <__aeabi_dcmpeq>
 810a438:	ec4b ab19 	vmov	d9, sl, fp
 810a43c:	4680      	mov	r8, r0
 810a43e:	b158      	cbz	r0, 810a458 <_dtoa_r+0xe0>
 810a440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a442:	2301      	movs	r3, #1
 810a444:	6013      	str	r3, [r2, #0]
 810a446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a448:	2b00      	cmp	r3, #0
 810a44a:	f000 856b 	beq.w	810af24 <_dtoa_r+0xbac>
 810a44e:	4883      	ldr	r0, [pc, #524]	; (810a65c <_dtoa_r+0x2e4>)
 810a450:	6018      	str	r0, [r3, #0]
 810a452:	1e43      	subs	r3, r0, #1
 810a454:	9301      	str	r3, [sp, #4]
 810a456:	e7df      	b.n	810a418 <_dtoa_r+0xa0>
 810a458:	ec4b ab10 	vmov	d0, sl, fp
 810a45c:	aa10      	add	r2, sp, #64	; 0x40
 810a45e:	a911      	add	r1, sp, #68	; 0x44
 810a460:	4620      	mov	r0, r4
 810a462:	f001 ff1f 	bl	810c2a4 <__d2b>
 810a466:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810a46a:	ee08 0a10 	vmov	s16, r0
 810a46e:	2d00      	cmp	r5, #0
 810a470:	f000 8084 	beq.w	810a57c <_dtoa_r+0x204>
 810a474:	ee19 3a90 	vmov	r3, s19
 810a478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a47c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810a480:	4656      	mov	r6, sl
 810a482:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810a486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810a48a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810a48e:	4b74      	ldr	r3, [pc, #464]	; (810a660 <_dtoa_r+0x2e8>)
 810a490:	2200      	movs	r2, #0
 810a492:	4630      	mov	r0, r6
 810a494:	4639      	mov	r1, r7
 810a496:	f7f5 ff7f 	bl	8100398 <__aeabi_dsub>
 810a49a:	a365      	add	r3, pc, #404	; (adr r3, 810a630 <_dtoa_r+0x2b8>)
 810a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4a0:	f7f6 f932 	bl	8100708 <__aeabi_dmul>
 810a4a4:	a364      	add	r3, pc, #400	; (adr r3, 810a638 <_dtoa_r+0x2c0>)
 810a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4aa:	f7f5 ff77 	bl	810039c <__adddf3>
 810a4ae:	4606      	mov	r6, r0
 810a4b0:	4628      	mov	r0, r5
 810a4b2:	460f      	mov	r7, r1
 810a4b4:	f7f6 f8be 	bl	8100634 <__aeabi_i2d>
 810a4b8:	a361      	add	r3, pc, #388	; (adr r3, 810a640 <_dtoa_r+0x2c8>)
 810a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4be:	f7f6 f923 	bl	8100708 <__aeabi_dmul>
 810a4c2:	4602      	mov	r2, r0
 810a4c4:	460b      	mov	r3, r1
 810a4c6:	4630      	mov	r0, r6
 810a4c8:	4639      	mov	r1, r7
 810a4ca:	f7f5 ff67 	bl	810039c <__adddf3>
 810a4ce:	4606      	mov	r6, r0
 810a4d0:	460f      	mov	r7, r1
 810a4d2:	f7f6 fbc9 	bl	8100c68 <__aeabi_d2iz>
 810a4d6:	2200      	movs	r2, #0
 810a4d8:	9000      	str	r0, [sp, #0]
 810a4da:	2300      	movs	r3, #0
 810a4dc:	4630      	mov	r0, r6
 810a4de:	4639      	mov	r1, r7
 810a4e0:	f7f6 fb84 	bl	8100bec <__aeabi_dcmplt>
 810a4e4:	b150      	cbz	r0, 810a4fc <_dtoa_r+0x184>
 810a4e6:	9800      	ldr	r0, [sp, #0]
 810a4e8:	f7f6 f8a4 	bl	8100634 <__aeabi_i2d>
 810a4ec:	4632      	mov	r2, r6
 810a4ee:	463b      	mov	r3, r7
 810a4f0:	f7f6 fb72 	bl	8100bd8 <__aeabi_dcmpeq>
 810a4f4:	b910      	cbnz	r0, 810a4fc <_dtoa_r+0x184>
 810a4f6:	9b00      	ldr	r3, [sp, #0]
 810a4f8:	3b01      	subs	r3, #1
 810a4fa:	9300      	str	r3, [sp, #0]
 810a4fc:	9b00      	ldr	r3, [sp, #0]
 810a4fe:	2b16      	cmp	r3, #22
 810a500:	d85a      	bhi.n	810a5b8 <_dtoa_r+0x240>
 810a502:	9a00      	ldr	r2, [sp, #0]
 810a504:	4b57      	ldr	r3, [pc, #348]	; (810a664 <_dtoa_r+0x2ec>)
 810a506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a50e:	ec51 0b19 	vmov	r0, r1, d9
 810a512:	f7f6 fb6b 	bl	8100bec <__aeabi_dcmplt>
 810a516:	2800      	cmp	r0, #0
 810a518:	d050      	beq.n	810a5bc <_dtoa_r+0x244>
 810a51a:	9b00      	ldr	r3, [sp, #0]
 810a51c:	3b01      	subs	r3, #1
 810a51e:	9300      	str	r3, [sp, #0]
 810a520:	2300      	movs	r3, #0
 810a522:	930b      	str	r3, [sp, #44]	; 0x2c
 810a524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a526:	1b5d      	subs	r5, r3, r5
 810a528:	1e6b      	subs	r3, r5, #1
 810a52a:	9305      	str	r3, [sp, #20]
 810a52c:	bf45      	ittet	mi
 810a52e:	f1c5 0301 	rsbmi	r3, r5, #1
 810a532:	9304      	strmi	r3, [sp, #16]
 810a534:	2300      	movpl	r3, #0
 810a536:	2300      	movmi	r3, #0
 810a538:	bf4c      	ite	mi
 810a53a:	9305      	strmi	r3, [sp, #20]
 810a53c:	9304      	strpl	r3, [sp, #16]
 810a53e:	9b00      	ldr	r3, [sp, #0]
 810a540:	2b00      	cmp	r3, #0
 810a542:	db3d      	blt.n	810a5c0 <_dtoa_r+0x248>
 810a544:	9b05      	ldr	r3, [sp, #20]
 810a546:	9a00      	ldr	r2, [sp, #0]
 810a548:	920a      	str	r2, [sp, #40]	; 0x28
 810a54a:	4413      	add	r3, r2
 810a54c:	9305      	str	r3, [sp, #20]
 810a54e:	2300      	movs	r3, #0
 810a550:	9307      	str	r3, [sp, #28]
 810a552:	9b06      	ldr	r3, [sp, #24]
 810a554:	2b09      	cmp	r3, #9
 810a556:	f200 8089 	bhi.w	810a66c <_dtoa_r+0x2f4>
 810a55a:	2b05      	cmp	r3, #5
 810a55c:	bfc4      	itt	gt
 810a55e:	3b04      	subgt	r3, #4
 810a560:	9306      	strgt	r3, [sp, #24]
 810a562:	9b06      	ldr	r3, [sp, #24]
 810a564:	f1a3 0302 	sub.w	r3, r3, #2
 810a568:	bfcc      	ite	gt
 810a56a:	2500      	movgt	r5, #0
 810a56c:	2501      	movle	r5, #1
 810a56e:	2b03      	cmp	r3, #3
 810a570:	f200 8087 	bhi.w	810a682 <_dtoa_r+0x30a>
 810a574:	e8df f003 	tbb	[pc, r3]
 810a578:	59383a2d 	.word	0x59383a2d
 810a57c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810a580:	441d      	add	r5, r3
 810a582:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810a586:	2b20      	cmp	r3, #32
 810a588:	bfc1      	itttt	gt
 810a58a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810a58e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810a592:	fa0b f303 	lslgt.w	r3, fp, r3
 810a596:	fa26 f000 	lsrgt.w	r0, r6, r0
 810a59a:	bfda      	itte	le
 810a59c:	f1c3 0320 	rsble	r3, r3, #32
 810a5a0:	fa06 f003 	lslle.w	r0, r6, r3
 810a5a4:	4318      	orrgt	r0, r3
 810a5a6:	f7f6 f835 	bl	8100614 <__aeabi_ui2d>
 810a5aa:	2301      	movs	r3, #1
 810a5ac:	4606      	mov	r6, r0
 810a5ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810a5b2:	3d01      	subs	r5, #1
 810a5b4:	930e      	str	r3, [sp, #56]	; 0x38
 810a5b6:	e76a      	b.n	810a48e <_dtoa_r+0x116>
 810a5b8:	2301      	movs	r3, #1
 810a5ba:	e7b2      	b.n	810a522 <_dtoa_r+0x1aa>
 810a5bc:	900b      	str	r0, [sp, #44]	; 0x2c
 810a5be:	e7b1      	b.n	810a524 <_dtoa_r+0x1ac>
 810a5c0:	9b04      	ldr	r3, [sp, #16]
 810a5c2:	9a00      	ldr	r2, [sp, #0]
 810a5c4:	1a9b      	subs	r3, r3, r2
 810a5c6:	9304      	str	r3, [sp, #16]
 810a5c8:	4253      	negs	r3, r2
 810a5ca:	9307      	str	r3, [sp, #28]
 810a5cc:	2300      	movs	r3, #0
 810a5ce:	930a      	str	r3, [sp, #40]	; 0x28
 810a5d0:	e7bf      	b.n	810a552 <_dtoa_r+0x1da>
 810a5d2:	2300      	movs	r3, #0
 810a5d4:	9308      	str	r3, [sp, #32]
 810a5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a5d8:	2b00      	cmp	r3, #0
 810a5da:	dc55      	bgt.n	810a688 <_dtoa_r+0x310>
 810a5dc:	2301      	movs	r3, #1
 810a5de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a5e2:	461a      	mov	r2, r3
 810a5e4:	9209      	str	r2, [sp, #36]	; 0x24
 810a5e6:	e00c      	b.n	810a602 <_dtoa_r+0x28a>
 810a5e8:	2301      	movs	r3, #1
 810a5ea:	e7f3      	b.n	810a5d4 <_dtoa_r+0x25c>
 810a5ec:	2300      	movs	r3, #0
 810a5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a5f0:	9308      	str	r3, [sp, #32]
 810a5f2:	9b00      	ldr	r3, [sp, #0]
 810a5f4:	4413      	add	r3, r2
 810a5f6:	9302      	str	r3, [sp, #8]
 810a5f8:	3301      	adds	r3, #1
 810a5fa:	2b01      	cmp	r3, #1
 810a5fc:	9303      	str	r3, [sp, #12]
 810a5fe:	bfb8      	it	lt
 810a600:	2301      	movlt	r3, #1
 810a602:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810a604:	2200      	movs	r2, #0
 810a606:	6042      	str	r2, [r0, #4]
 810a608:	2204      	movs	r2, #4
 810a60a:	f102 0614 	add.w	r6, r2, #20
 810a60e:	429e      	cmp	r6, r3
 810a610:	6841      	ldr	r1, [r0, #4]
 810a612:	d93d      	bls.n	810a690 <_dtoa_r+0x318>
 810a614:	4620      	mov	r0, r4
 810a616:	f001 fa57 	bl	810bac8 <_Balloc>
 810a61a:	9001      	str	r0, [sp, #4]
 810a61c:	2800      	cmp	r0, #0
 810a61e:	d13b      	bne.n	810a698 <_dtoa_r+0x320>
 810a620:	4b11      	ldr	r3, [pc, #68]	; (810a668 <_dtoa_r+0x2f0>)
 810a622:	4602      	mov	r2, r0
 810a624:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810a628:	e6c0      	b.n	810a3ac <_dtoa_r+0x34>
 810a62a:	2301      	movs	r3, #1
 810a62c:	e7df      	b.n	810a5ee <_dtoa_r+0x276>
 810a62e:	bf00      	nop
 810a630:	636f4361 	.word	0x636f4361
 810a634:	3fd287a7 	.word	0x3fd287a7
 810a638:	8b60c8b3 	.word	0x8b60c8b3
 810a63c:	3fc68a28 	.word	0x3fc68a28
 810a640:	509f79fb 	.word	0x509f79fb
 810a644:	3fd34413 	.word	0x3fd34413
 810a648:	0810d15e 	.word	0x0810d15e
 810a64c:	0810d175 	.word	0x0810d175
 810a650:	7ff00000 	.word	0x7ff00000
 810a654:	0810d15a 	.word	0x0810d15a
 810a658:	0810d151 	.word	0x0810d151
 810a65c:	0810cfd1 	.word	0x0810cfd1
 810a660:	3ff80000 	.word	0x3ff80000
 810a664:	0810d348 	.word	0x0810d348
 810a668:	0810d1d0 	.word	0x0810d1d0
 810a66c:	2501      	movs	r5, #1
 810a66e:	2300      	movs	r3, #0
 810a670:	9306      	str	r3, [sp, #24]
 810a672:	9508      	str	r5, [sp, #32]
 810a674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a678:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a67c:	2200      	movs	r2, #0
 810a67e:	2312      	movs	r3, #18
 810a680:	e7b0      	b.n	810a5e4 <_dtoa_r+0x26c>
 810a682:	2301      	movs	r3, #1
 810a684:	9308      	str	r3, [sp, #32]
 810a686:	e7f5      	b.n	810a674 <_dtoa_r+0x2fc>
 810a688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a68a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a68e:	e7b8      	b.n	810a602 <_dtoa_r+0x28a>
 810a690:	3101      	adds	r1, #1
 810a692:	6041      	str	r1, [r0, #4]
 810a694:	0052      	lsls	r2, r2, #1
 810a696:	e7b8      	b.n	810a60a <_dtoa_r+0x292>
 810a698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a69a:	9a01      	ldr	r2, [sp, #4]
 810a69c:	601a      	str	r2, [r3, #0]
 810a69e:	9b03      	ldr	r3, [sp, #12]
 810a6a0:	2b0e      	cmp	r3, #14
 810a6a2:	f200 809d 	bhi.w	810a7e0 <_dtoa_r+0x468>
 810a6a6:	2d00      	cmp	r5, #0
 810a6a8:	f000 809a 	beq.w	810a7e0 <_dtoa_r+0x468>
 810a6ac:	9b00      	ldr	r3, [sp, #0]
 810a6ae:	2b00      	cmp	r3, #0
 810a6b0:	dd32      	ble.n	810a718 <_dtoa_r+0x3a0>
 810a6b2:	4ab7      	ldr	r2, [pc, #732]	; (810a990 <_dtoa_r+0x618>)
 810a6b4:	f003 030f 	and.w	r3, r3, #15
 810a6b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810a6bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a6c0:	9b00      	ldr	r3, [sp, #0]
 810a6c2:	05d8      	lsls	r0, r3, #23
 810a6c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 810a6c8:	d516      	bpl.n	810a6f8 <_dtoa_r+0x380>
 810a6ca:	4bb2      	ldr	r3, [pc, #712]	; (810a994 <_dtoa_r+0x61c>)
 810a6cc:	ec51 0b19 	vmov	r0, r1, d9
 810a6d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810a6d4:	f7f6 f942 	bl	810095c <__aeabi_ddiv>
 810a6d8:	f007 070f 	and.w	r7, r7, #15
 810a6dc:	4682      	mov	sl, r0
 810a6de:	468b      	mov	fp, r1
 810a6e0:	2503      	movs	r5, #3
 810a6e2:	4eac      	ldr	r6, [pc, #688]	; (810a994 <_dtoa_r+0x61c>)
 810a6e4:	b957      	cbnz	r7, 810a6fc <_dtoa_r+0x384>
 810a6e6:	4642      	mov	r2, r8
 810a6e8:	464b      	mov	r3, r9
 810a6ea:	4650      	mov	r0, sl
 810a6ec:	4659      	mov	r1, fp
 810a6ee:	f7f6 f935 	bl	810095c <__aeabi_ddiv>
 810a6f2:	4682      	mov	sl, r0
 810a6f4:	468b      	mov	fp, r1
 810a6f6:	e028      	b.n	810a74a <_dtoa_r+0x3d2>
 810a6f8:	2502      	movs	r5, #2
 810a6fa:	e7f2      	b.n	810a6e2 <_dtoa_r+0x36a>
 810a6fc:	07f9      	lsls	r1, r7, #31
 810a6fe:	d508      	bpl.n	810a712 <_dtoa_r+0x39a>
 810a700:	4640      	mov	r0, r8
 810a702:	4649      	mov	r1, r9
 810a704:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a708:	f7f5 fffe 	bl	8100708 <__aeabi_dmul>
 810a70c:	3501      	adds	r5, #1
 810a70e:	4680      	mov	r8, r0
 810a710:	4689      	mov	r9, r1
 810a712:	107f      	asrs	r7, r7, #1
 810a714:	3608      	adds	r6, #8
 810a716:	e7e5      	b.n	810a6e4 <_dtoa_r+0x36c>
 810a718:	f000 809b 	beq.w	810a852 <_dtoa_r+0x4da>
 810a71c:	9b00      	ldr	r3, [sp, #0]
 810a71e:	4f9d      	ldr	r7, [pc, #628]	; (810a994 <_dtoa_r+0x61c>)
 810a720:	425e      	negs	r6, r3
 810a722:	4b9b      	ldr	r3, [pc, #620]	; (810a990 <_dtoa_r+0x618>)
 810a724:	f006 020f 	and.w	r2, r6, #15
 810a728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a730:	ec51 0b19 	vmov	r0, r1, d9
 810a734:	f7f5 ffe8 	bl	8100708 <__aeabi_dmul>
 810a738:	1136      	asrs	r6, r6, #4
 810a73a:	4682      	mov	sl, r0
 810a73c:	468b      	mov	fp, r1
 810a73e:	2300      	movs	r3, #0
 810a740:	2502      	movs	r5, #2
 810a742:	2e00      	cmp	r6, #0
 810a744:	d17a      	bne.n	810a83c <_dtoa_r+0x4c4>
 810a746:	2b00      	cmp	r3, #0
 810a748:	d1d3      	bne.n	810a6f2 <_dtoa_r+0x37a>
 810a74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a74c:	2b00      	cmp	r3, #0
 810a74e:	f000 8082 	beq.w	810a856 <_dtoa_r+0x4de>
 810a752:	4b91      	ldr	r3, [pc, #580]	; (810a998 <_dtoa_r+0x620>)
 810a754:	2200      	movs	r2, #0
 810a756:	4650      	mov	r0, sl
 810a758:	4659      	mov	r1, fp
 810a75a:	f7f6 fa47 	bl	8100bec <__aeabi_dcmplt>
 810a75e:	2800      	cmp	r0, #0
 810a760:	d079      	beq.n	810a856 <_dtoa_r+0x4de>
 810a762:	9b03      	ldr	r3, [sp, #12]
 810a764:	2b00      	cmp	r3, #0
 810a766:	d076      	beq.n	810a856 <_dtoa_r+0x4de>
 810a768:	9b02      	ldr	r3, [sp, #8]
 810a76a:	2b00      	cmp	r3, #0
 810a76c:	dd36      	ble.n	810a7dc <_dtoa_r+0x464>
 810a76e:	9b00      	ldr	r3, [sp, #0]
 810a770:	4650      	mov	r0, sl
 810a772:	4659      	mov	r1, fp
 810a774:	1e5f      	subs	r7, r3, #1
 810a776:	2200      	movs	r2, #0
 810a778:	4b88      	ldr	r3, [pc, #544]	; (810a99c <_dtoa_r+0x624>)
 810a77a:	f7f5 ffc5 	bl	8100708 <__aeabi_dmul>
 810a77e:	9e02      	ldr	r6, [sp, #8]
 810a780:	4682      	mov	sl, r0
 810a782:	468b      	mov	fp, r1
 810a784:	3501      	adds	r5, #1
 810a786:	4628      	mov	r0, r5
 810a788:	f7f5 ff54 	bl	8100634 <__aeabi_i2d>
 810a78c:	4652      	mov	r2, sl
 810a78e:	465b      	mov	r3, fp
 810a790:	f7f5 ffba 	bl	8100708 <__aeabi_dmul>
 810a794:	4b82      	ldr	r3, [pc, #520]	; (810a9a0 <_dtoa_r+0x628>)
 810a796:	2200      	movs	r2, #0
 810a798:	f7f5 fe00 	bl	810039c <__adddf3>
 810a79c:	46d0      	mov	r8, sl
 810a79e:	46d9      	mov	r9, fp
 810a7a0:	4682      	mov	sl, r0
 810a7a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810a7a6:	2e00      	cmp	r6, #0
 810a7a8:	d158      	bne.n	810a85c <_dtoa_r+0x4e4>
 810a7aa:	4b7e      	ldr	r3, [pc, #504]	; (810a9a4 <_dtoa_r+0x62c>)
 810a7ac:	2200      	movs	r2, #0
 810a7ae:	4640      	mov	r0, r8
 810a7b0:	4649      	mov	r1, r9
 810a7b2:	f7f5 fdf1 	bl	8100398 <__aeabi_dsub>
 810a7b6:	4652      	mov	r2, sl
 810a7b8:	465b      	mov	r3, fp
 810a7ba:	4680      	mov	r8, r0
 810a7bc:	4689      	mov	r9, r1
 810a7be:	f7f6 fa33 	bl	8100c28 <__aeabi_dcmpgt>
 810a7c2:	2800      	cmp	r0, #0
 810a7c4:	f040 8295 	bne.w	810acf2 <_dtoa_r+0x97a>
 810a7c8:	4652      	mov	r2, sl
 810a7ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a7ce:	4640      	mov	r0, r8
 810a7d0:	4649      	mov	r1, r9
 810a7d2:	f7f6 fa0b 	bl	8100bec <__aeabi_dcmplt>
 810a7d6:	2800      	cmp	r0, #0
 810a7d8:	f040 8289 	bne.w	810acee <_dtoa_r+0x976>
 810a7dc:	ec5b ab19 	vmov	sl, fp, d9
 810a7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a7e2:	2b00      	cmp	r3, #0
 810a7e4:	f2c0 8148 	blt.w	810aa78 <_dtoa_r+0x700>
 810a7e8:	9a00      	ldr	r2, [sp, #0]
 810a7ea:	2a0e      	cmp	r2, #14
 810a7ec:	f300 8144 	bgt.w	810aa78 <_dtoa_r+0x700>
 810a7f0:	4b67      	ldr	r3, [pc, #412]	; (810a990 <_dtoa_r+0x618>)
 810a7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a7f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a7fc:	2b00      	cmp	r3, #0
 810a7fe:	f280 80d5 	bge.w	810a9ac <_dtoa_r+0x634>
 810a802:	9b03      	ldr	r3, [sp, #12]
 810a804:	2b00      	cmp	r3, #0
 810a806:	f300 80d1 	bgt.w	810a9ac <_dtoa_r+0x634>
 810a80a:	f040 826f 	bne.w	810acec <_dtoa_r+0x974>
 810a80e:	4b65      	ldr	r3, [pc, #404]	; (810a9a4 <_dtoa_r+0x62c>)
 810a810:	2200      	movs	r2, #0
 810a812:	4640      	mov	r0, r8
 810a814:	4649      	mov	r1, r9
 810a816:	f7f5 ff77 	bl	8100708 <__aeabi_dmul>
 810a81a:	4652      	mov	r2, sl
 810a81c:	465b      	mov	r3, fp
 810a81e:	f7f6 f9f9 	bl	8100c14 <__aeabi_dcmpge>
 810a822:	9e03      	ldr	r6, [sp, #12]
 810a824:	4637      	mov	r7, r6
 810a826:	2800      	cmp	r0, #0
 810a828:	f040 8245 	bne.w	810acb6 <_dtoa_r+0x93e>
 810a82c:	9d01      	ldr	r5, [sp, #4]
 810a82e:	2331      	movs	r3, #49	; 0x31
 810a830:	f805 3b01 	strb.w	r3, [r5], #1
 810a834:	9b00      	ldr	r3, [sp, #0]
 810a836:	3301      	adds	r3, #1
 810a838:	9300      	str	r3, [sp, #0]
 810a83a:	e240      	b.n	810acbe <_dtoa_r+0x946>
 810a83c:	07f2      	lsls	r2, r6, #31
 810a83e:	d505      	bpl.n	810a84c <_dtoa_r+0x4d4>
 810a840:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a844:	f7f5 ff60 	bl	8100708 <__aeabi_dmul>
 810a848:	3501      	adds	r5, #1
 810a84a:	2301      	movs	r3, #1
 810a84c:	1076      	asrs	r6, r6, #1
 810a84e:	3708      	adds	r7, #8
 810a850:	e777      	b.n	810a742 <_dtoa_r+0x3ca>
 810a852:	2502      	movs	r5, #2
 810a854:	e779      	b.n	810a74a <_dtoa_r+0x3d2>
 810a856:	9f00      	ldr	r7, [sp, #0]
 810a858:	9e03      	ldr	r6, [sp, #12]
 810a85a:	e794      	b.n	810a786 <_dtoa_r+0x40e>
 810a85c:	9901      	ldr	r1, [sp, #4]
 810a85e:	4b4c      	ldr	r3, [pc, #304]	; (810a990 <_dtoa_r+0x618>)
 810a860:	4431      	add	r1, r6
 810a862:	910d      	str	r1, [sp, #52]	; 0x34
 810a864:	9908      	ldr	r1, [sp, #32]
 810a866:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810a86a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a86e:	2900      	cmp	r1, #0
 810a870:	d043      	beq.n	810a8fa <_dtoa_r+0x582>
 810a872:	494d      	ldr	r1, [pc, #308]	; (810a9a8 <_dtoa_r+0x630>)
 810a874:	2000      	movs	r0, #0
 810a876:	f7f6 f871 	bl	810095c <__aeabi_ddiv>
 810a87a:	4652      	mov	r2, sl
 810a87c:	465b      	mov	r3, fp
 810a87e:	f7f5 fd8b 	bl	8100398 <__aeabi_dsub>
 810a882:	9d01      	ldr	r5, [sp, #4]
 810a884:	4682      	mov	sl, r0
 810a886:	468b      	mov	fp, r1
 810a888:	4649      	mov	r1, r9
 810a88a:	4640      	mov	r0, r8
 810a88c:	f7f6 f9ec 	bl	8100c68 <__aeabi_d2iz>
 810a890:	4606      	mov	r6, r0
 810a892:	f7f5 fecf 	bl	8100634 <__aeabi_i2d>
 810a896:	4602      	mov	r2, r0
 810a898:	460b      	mov	r3, r1
 810a89a:	4640      	mov	r0, r8
 810a89c:	4649      	mov	r1, r9
 810a89e:	f7f5 fd7b 	bl	8100398 <__aeabi_dsub>
 810a8a2:	3630      	adds	r6, #48	; 0x30
 810a8a4:	f805 6b01 	strb.w	r6, [r5], #1
 810a8a8:	4652      	mov	r2, sl
 810a8aa:	465b      	mov	r3, fp
 810a8ac:	4680      	mov	r8, r0
 810a8ae:	4689      	mov	r9, r1
 810a8b0:	f7f6 f99c 	bl	8100bec <__aeabi_dcmplt>
 810a8b4:	2800      	cmp	r0, #0
 810a8b6:	d163      	bne.n	810a980 <_dtoa_r+0x608>
 810a8b8:	4642      	mov	r2, r8
 810a8ba:	464b      	mov	r3, r9
 810a8bc:	4936      	ldr	r1, [pc, #216]	; (810a998 <_dtoa_r+0x620>)
 810a8be:	2000      	movs	r0, #0
 810a8c0:	f7f5 fd6a 	bl	8100398 <__aeabi_dsub>
 810a8c4:	4652      	mov	r2, sl
 810a8c6:	465b      	mov	r3, fp
 810a8c8:	f7f6 f990 	bl	8100bec <__aeabi_dcmplt>
 810a8cc:	2800      	cmp	r0, #0
 810a8ce:	f040 80b5 	bne.w	810aa3c <_dtoa_r+0x6c4>
 810a8d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a8d4:	429d      	cmp	r5, r3
 810a8d6:	d081      	beq.n	810a7dc <_dtoa_r+0x464>
 810a8d8:	4b30      	ldr	r3, [pc, #192]	; (810a99c <_dtoa_r+0x624>)
 810a8da:	2200      	movs	r2, #0
 810a8dc:	4650      	mov	r0, sl
 810a8de:	4659      	mov	r1, fp
 810a8e0:	f7f5 ff12 	bl	8100708 <__aeabi_dmul>
 810a8e4:	4b2d      	ldr	r3, [pc, #180]	; (810a99c <_dtoa_r+0x624>)
 810a8e6:	4682      	mov	sl, r0
 810a8e8:	468b      	mov	fp, r1
 810a8ea:	4640      	mov	r0, r8
 810a8ec:	4649      	mov	r1, r9
 810a8ee:	2200      	movs	r2, #0
 810a8f0:	f7f5 ff0a 	bl	8100708 <__aeabi_dmul>
 810a8f4:	4680      	mov	r8, r0
 810a8f6:	4689      	mov	r9, r1
 810a8f8:	e7c6      	b.n	810a888 <_dtoa_r+0x510>
 810a8fa:	4650      	mov	r0, sl
 810a8fc:	4659      	mov	r1, fp
 810a8fe:	f7f5 ff03 	bl	8100708 <__aeabi_dmul>
 810a902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a904:	9d01      	ldr	r5, [sp, #4]
 810a906:	930f      	str	r3, [sp, #60]	; 0x3c
 810a908:	4682      	mov	sl, r0
 810a90a:	468b      	mov	fp, r1
 810a90c:	4649      	mov	r1, r9
 810a90e:	4640      	mov	r0, r8
 810a910:	f7f6 f9aa 	bl	8100c68 <__aeabi_d2iz>
 810a914:	4606      	mov	r6, r0
 810a916:	f7f5 fe8d 	bl	8100634 <__aeabi_i2d>
 810a91a:	3630      	adds	r6, #48	; 0x30
 810a91c:	4602      	mov	r2, r0
 810a91e:	460b      	mov	r3, r1
 810a920:	4640      	mov	r0, r8
 810a922:	4649      	mov	r1, r9
 810a924:	f7f5 fd38 	bl	8100398 <__aeabi_dsub>
 810a928:	f805 6b01 	strb.w	r6, [r5], #1
 810a92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a92e:	429d      	cmp	r5, r3
 810a930:	4680      	mov	r8, r0
 810a932:	4689      	mov	r9, r1
 810a934:	f04f 0200 	mov.w	r2, #0
 810a938:	d124      	bne.n	810a984 <_dtoa_r+0x60c>
 810a93a:	4b1b      	ldr	r3, [pc, #108]	; (810a9a8 <_dtoa_r+0x630>)
 810a93c:	4650      	mov	r0, sl
 810a93e:	4659      	mov	r1, fp
 810a940:	f7f5 fd2c 	bl	810039c <__adddf3>
 810a944:	4602      	mov	r2, r0
 810a946:	460b      	mov	r3, r1
 810a948:	4640      	mov	r0, r8
 810a94a:	4649      	mov	r1, r9
 810a94c:	f7f6 f96c 	bl	8100c28 <__aeabi_dcmpgt>
 810a950:	2800      	cmp	r0, #0
 810a952:	d173      	bne.n	810aa3c <_dtoa_r+0x6c4>
 810a954:	4652      	mov	r2, sl
 810a956:	465b      	mov	r3, fp
 810a958:	4913      	ldr	r1, [pc, #76]	; (810a9a8 <_dtoa_r+0x630>)
 810a95a:	2000      	movs	r0, #0
 810a95c:	f7f5 fd1c 	bl	8100398 <__aeabi_dsub>
 810a960:	4602      	mov	r2, r0
 810a962:	460b      	mov	r3, r1
 810a964:	4640      	mov	r0, r8
 810a966:	4649      	mov	r1, r9
 810a968:	f7f6 f940 	bl	8100bec <__aeabi_dcmplt>
 810a96c:	2800      	cmp	r0, #0
 810a96e:	f43f af35 	beq.w	810a7dc <_dtoa_r+0x464>
 810a972:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810a974:	1e6b      	subs	r3, r5, #1
 810a976:	930f      	str	r3, [sp, #60]	; 0x3c
 810a978:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a97c:	2b30      	cmp	r3, #48	; 0x30
 810a97e:	d0f8      	beq.n	810a972 <_dtoa_r+0x5fa>
 810a980:	9700      	str	r7, [sp, #0]
 810a982:	e049      	b.n	810aa18 <_dtoa_r+0x6a0>
 810a984:	4b05      	ldr	r3, [pc, #20]	; (810a99c <_dtoa_r+0x624>)
 810a986:	f7f5 febf 	bl	8100708 <__aeabi_dmul>
 810a98a:	4680      	mov	r8, r0
 810a98c:	4689      	mov	r9, r1
 810a98e:	e7bd      	b.n	810a90c <_dtoa_r+0x594>
 810a990:	0810d348 	.word	0x0810d348
 810a994:	0810d320 	.word	0x0810d320
 810a998:	3ff00000 	.word	0x3ff00000
 810a99c:	40240000 	.word	0x40240000
 810a9a0:	401c0000 	.word	0x401c0000
 810a9a4:	40140000 	.word	0x40140000
 810a9a8:	3fe00000 	.word	0x3fe00000
 810a9ac:	9d01      	ldr	r5, [sp, #4]
 810a9ae:	4656      	mov	r6, sl
 810a9b0:	465f      	mov	r7, fp
 810a9b2:	4642      	mov	r2, r8
 810a9b4:	464b      	mov	r3, r9
 810a9b6:	4630      	mov	r0, r6
 810a9b8:	4639      	mov	r1, r7
 810a9ba:	f7f5 ffcf 	bl	810095c <__aeabi_ddiv>
 810a9be:	f7f6 f953 	bl	8100c68 <__aeabi_d2iz>
 810a9c2:	4682      	mov	sl, r0
 810a9c4:	f7f5 fe36 	bl	8100634 <__aeabi_i2d>
 810a9c8:	4642      	mov	r2, r8
 810a9ca:	464b      	mov	r3, r9
 810a9cc:	f7f5 fe9c 	bl	8100708 <__aeabi_dmul>
 810a9d0:	4602      	mov	r2, r0
 810a9d2:	460b      	mov	r3, r1
 810a9d4:	4630      	mov	r0, r6
 810a9d6:	4639      	mov	r1, r7
 810a9d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810a9dc:	f7f5 fcdc 	bl	8100398 <__aeabi_dsub>
 810a9e0:	f805 6b01 	strb.w	r6, [r5], #1
 810a9e4:	9e01      	ldr	r6, [sp, #4]
 810a9e6:	9f03      	ldr	r7, [sp, #12]
 810a9e8:	1bae      	subs	r6, r5, r6
 810a9ea:	42b7      	cmp	r7, r6
 810a9ec:	4602      	mov	r2, r0
 810a9ee:	460b      	mov	r3, r1
 810a9f0:	d135      	bne.n	810aa5e <_dtoa_r+0x6e6>
 810a9f2:	f7f5 fcd3 	bl	810039c <__adddf3>
 810a9f6:	4642      	mov	r2, r8
 810a9f8:	464b      	mov	r3, r9
 810a9fa:	4606      	mov	r6, r0
 810a9fc:	460f      	mov	r7, r1
 810a9fe:	f7f6 f913 	bl	8100c28 <__aeabi_dcmpgt>
 810aa02:	b9d0      	cbnz	r0, 810aa3a <_dtoa_r+0x6c2>
 810aa04:	4642      	mov	r2, r8
 810aa06:	464b      	mov	r3, r9
 810aa08:	4630      	mov	r0, r6
 810aa0a:	4639      	mov	r1, r7
 810aa0c:	f7f6 f8e4 	bl	8100bd8 <__aeabi_dcmpeq>
 810aa10:	b110      	cbz	r0, 810aa18 <_dtoa_r+0x6a0>
 810aa12:	f01a 0f01 	tst.w	sl, #1
 810aa16:	d110      	bne.n	810aa3a <_dtoa_r+0x6c2>
 810aa18:	4620      	mov	r0, r4
 810aa1a:	ee18 1a10 	vmov	r1, s16
 810aa1e:	f001 f893 	bl	810bb48 <_Bfree>
 810aa22:	2300      	movs	r3, #0
 810aa24:	9800      	ldr	r0, [sp, #0]
 810aa26:	702b      	strb	r3, [r5, #0]
 810aa28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810aa2a:	3001      	adds	r0, #1
 810aa2c:	6018      	str	r0, [r3, #0]
 810aa2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	f43f acf1 	beq.w	810a418 <_dtoa_r+0xa0>
 810aa36:	601d      	str	r5, [r3, #0]
 810aa38:	e4ee      	b.n	810a418 <_dtoa_r+0xa0>
 810aa3a:	9f00      	ldr	r7, [sp, #0]
 810aa3c:	462b      	mov	r3, r5
 810aa3e:	461d      	mov	r5, r3
 810aa40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810aa44:	2a39      	cmp	r2, #57	; 0x39
 810aa46:	d106      	bne.n	810aa56 <_dtoa_r+0x6de>
 810aa48:	9a01      	ldr	r2, [sp, #4]
 810aa4a:	429a      	cmp	r2, r3
 810aa4c:	d1f7      	bne.n	810aa3e <_dtoa_r+0x6c6>
 810aa4e:	9901      	ldr	r1, [sp, #4]
 810aa50:	2230      	movs	r2, #48	; 0x30
 810aa52:	3701      	adds	r7, #1
 810aa54:	700a      	strb	r2, [r1, #0]
 810aa56:	781a      	ldrb	r2, [r3, #0]
 810aa58:	3201      	adds	r2, #1
 810aa5a:	701a      	strb	r2, [r3, #0]
 810aa5c:	e790      	b.n	810a980 <_dtoa_r+0x608>
 810aa5e:	4ba6      	ldr	r3, [pc, #664]	; (810acf8 <_dtoa_r+0x980>)
 810aa60:	2200      	movs	r2, #0
 810aa62:	f7f5 fe51 	bl	8100708 <__aeabi_dmul>
 810aa66:	2200      	movs	r2, #0
 810aa68:	2300      	movs	r3, #0
 810aa6a:	4606      	mov	r6, r0
 810aa6c:	460f      	mov	r7, r1
 810aa6e:	f7f6 f8b3 	bl	8100bd8 <__aeabi_dcmpeq>
 810aa72:	2800      	cmp	r0, #0
 810aa74:	d09d      	beq.n	810a9b2 <_dtoa_r+0x63a>
 810aa76:	e7cf      	b.n	810aa18 <_dtoa_r+0x6a0>
 810aa78:	9a08      	ldr	r2, [sp, #32]
 810aa7a:	2a00      	cmp	r2, #0
 810aa7c:	f000 80d7 	beq.w	810ac2e <_dtoa_r+0x8b6>
 810aa80:	9a06      	ldr	r2, [sp, #24]
 810aa82:	2a01      	cmp	r2, #1
 810aa84:	f300 80ba 	bgt.w	810abfc <_dtoa_r+0x884>
 810aa88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810aa8a:	2a00      	cmp	r2, #0
 810aa8c:	f000 80b2 	beq.w	810abf4 <_dtoa_r+0x87c>
 810aa90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810aa94:	9e07      	ldr	r6, [sp, #28]
 810aa96:	9d04      	ldr	r5, [sp, #16]
 810aa98:	9a04      	ldr	r2, [sp, #16]
 810aa9a:	441a      	add	r2, r3
 810aa9c:	9204      	str	r2, [sp, #16]
 810aa9e:	9a05      	ldr	r2, [sp, #20]
 810aaa0:	2101      	movs	r1, #1
 810aaa2:	441a      	add	r2, r3
 810aaa4:	4620      	mov	r0, r4
 810aaa6:	9205      	str	r2, [sp, #20]
 810aaa8:	f001 f950 	bl	810bd4c <__i2b>
 810aaac:	4607      	mov	r7, r0
 810aaae:	2d00      	cmp	r5, #0
 810aab0:	dd0c      	ble.n	810aacc <_dtoa_r+0x754>
 810aab2:	9b05      	ldr	r3, [sp, #20]
 810aab4:	2b00      	cmp	r3, #0
 810aab6:	dd09      	ble.n	810aacc <_dtoa_r+0x754>
 810aab8:	42ab      	cmp	r3, r5
 810aaba:	9a04      	ldr	r2, [sp, #16]
 810aabc:	bfa8      	it	ge
 810aabe:	462b      	movge	r3, r5
 810aac0:	1ad2      	subs	r2, r2, r3
 810aac2:	9204      	str	r2, [sp, #16]
 810aac4:	9a05      	ldr	r2, [sp, #20]
 810aac6:	1aed      	subs	r5, r5, r3
 810aac8:	1ad3      	subs	r3, r2, r3
 810aaca:	9305      	str	r3, [sp, #20]
 810aacc:	9b07      	ldr	r3, [sp, #28]
 810aace:	b31b      	cbz	r3, 810ab18 <_dtoa_r+0x7a0>
 810aad0:	9b08      	ldr	r3, [sp, #32]
 810aad2:	2b00      	cmp	r3, #0
 810aad4:	f000 80af 	beq.w	810ac36 <_dtoa_r+0x8be>
 810aad8:	2e00      	cmp	r6, #0
 810aada:	dd13      	ble.n	810ab04 <_dtoa_r+0x78c>
 810aadc:	4639      	mov	r1, r7
 810aade:	4632      	mov	r2, r6
 810aae0:	4620      	mov	r0, r4
 810aae2:	f001 f9f3 	bl	810becc <__pow5mult>
 810aae6:	ee18 2a10 	vmov	r2, s16
 810aaea:	4601      	mov	r1, r0
 810aaec:	4607      	mov	r7, r0
 810aaee:	4620      	mov	r0, r4
 810aaf0:	f001 f942 	bl	810bd78 <__multiply>
 810aaf4:	ee18 1a10 	vmov	r1, s16
 810aaf8:	4680      	mov	r8, r0
 810aafa:	4620      	mov	r0, r4
 810aafc:	f001 f824 	bl	810bb48 <_Bfree>
 810ab00:	ee08 8a10 	vmov	s16, r8
 810ab04:	9b07      	ldr	r3, [sp, #28]
 810ab06:	1b9a      	subs	r2, r3, r6
 810ab08:	d006      	beq.n	810ab18 <_dtoa_r+0x7a0>
 810ab0a:	ee18 1a10 	vmov	r1, s16
 810ab0e:	4620      	mov	r0, r4
 810ab10:	f001 f9dc 	bl	810becc <__pow5mult>
 810ab14:	ee08 0a10 	vmov	s16, r0
 810ab18:	2101      	movs	r1, #1
 810ab1a:	4620      	mov	r0, r4
 810ab1c:	f001 f916 	bl	810bd4c <__i2b>
 810ab20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab22:	2b00      	cmp	r3, #0
 810ab24:	4606      	mov	r6, r0
 810ab26:	f340 8088 	ble.w	810ac3a <_dtoa_r+0x8c2>
 810ab2a:	461a      	mov	r2, r3
 810ab2c:	4601      	mov	r1, r0
 810ab2e:	4620      	mov	r0, r4
 810ab30:	f001 f9cc 	bl	810becc <__pow5mult>
 810ab34:	9b06      	ldr	r3, [sp, #24]
 810ab36:	2b01      	cmp	r3, #1
 810ab38:	4606      	mov	r6, r0
 810ab3a:	f340 8081 	ble.w	810ac40 <_dtoa_r+0x8c8>
 810ab3e:	f04f 0800 	mov.w	r8, #0
 810ab42:	6933      	ldr	r3, [r6, #16]
 810ab44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810ab48:	6918      	ldr	r0, [r3, #16]
 810ab4a:	f001 f8af 	bl	810bcac <__hi0bits>
 810ab4e:	f1c0 0020 	rsb	r0, r0, #32
 810ab52:	9b05      	ldr	r3, [sp, #20]
 810ab54:	4418      	add	r0, r3
 810ab56:	f010 001f 	ands.w	r0, r0, #31
 810ab5a:	f000 8092 	beq.w	810ac82 <_dtoa_r+0x90a>
 810ab5e:	f1c0 0320 	rsb	r3, r0, #32
 810ab62:	2b04      	cmp	r3, #4
 810ab64:	f340 808a 	ble.w	810ac7c <_dtoa_r+0x904>
 810ab68:	f1c0 001c 	rsb	r0, r0, #28
 810ab6c:	9b04      	ldr	r3, [sp, #16]
 810ab6e:	4403      	add	r3, r0
 810ab70:	9304      	str	r3, [sp, #16]
 810ab72:	9b05      	ldr	r3, [sp, #20]
 810ab74:	4403      	add	r3, r0
 810ab76:	4405      	add	r5, r0
 810ab78:	9305      	str	r3, [sp, #20]
 810ab7a:	9b04      	ldr	r3, [sp, #16]
 810ab7c:	2b00      	cmp	r3, #0
 810ab7e:	dd07      	ble.n	810ab90 <_dtoa_r+0x818>
 810ab80:	ee18 1a10 	vmov	r1, s16
 810ab84:	461a      	mov	r2, r3
 810ab86:	4620      	mov	r0, r4
 810ab88:	f001 f9fa 	bl	810bf80 <__lshift>
 810ab8c:	ee08 0a10 	vmov	s16, r0
 810ab90:	9b05      	ldr	r3, [sp, #20]
 810ab92:	2b00      	cmp	r3, #0
 810ab94:	dd05      	ble.n	810aba2 <_dtoa_r+0x82a>
 810ab96:	4631      	mov	r1, r6
 810ab98:	461a      	mov	r2, r3
 810ab9a:	4620      	mov	r0, r4
 810ab9c:	f001 f9f0 	bl	810bf80 <__lshift>
 810aba0:	4606      	mov	r6, r0
 810aba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aba4:	2b00      	cmp	r3, #0
 810aba6:	d06e      	beq.n	810ac86 <_dtoa_r+0x90e>
 810aba8:	ee18 0a10 	vmov	r0, s16
 810abac:	4631      	mov	r1, r6
 810abae:	f001 fa57 	bl	810c060 <__mcmp>
 810abb2:	2800      	cmp	r0, #0
 810abb4:	da67      	bge.n	810ac86 <_dtoa_r+0x90e>
 810abb6:	9b00      	ldr	r3, [sp, #0]
 810abb8:	3b01      	subs	r3, #1
 810abba:	ee18 1a10 	vmov	r1, s16
 810abbe:	9300      	str	r3, [sp, #0]
 810abc0:	220a      	movs	r2, #10
 810abc2:	2300      	movs	r3, #0
 810abc4:	4620      	mov	r0, r4
 810abc6:	f000 ffe1 	bl	810bb8c <__multadd>
 810abca:	9b08      	ldr	r3, [sp, #32]
 810abcc:	ee08 0a10 	vmov	s16, r0
 810abd0:	2b00      	cmp	r3, #0
 810abd2:	f000 81b1 	beq.w	810af38 <_dtoa_r+0xbc0>
 810abd6:	2300      	movs	r3, #0
 810abd8:	4639      	mov	r1, r7
 810abda:	220a      	movs	r2, #10
 810abdc:	4620      	mov	r0, r4
 810abde:	f000 ffd5 	bl	810bb8c <__multadd>
 810abe2:	9b02      	ldr	r3, [sp, #8]
 810abe4:	2b00      	cmp	r3, #0
 810abe6:	4607      	mov	r7, r0
 810abe8:	f300 808e 	bgt.w	810ad08 <_dtoa_r+0x990>
 810abec:	9b06      	ldr	r3, [sp, #24]
 810abee:	2b02      	cmp	r3, #2
 810abf0:	dc51      	bgt.n	810ac96 <_dtoa_r+0x91e>
 810abf2:	e089      	b.n	810ad08 <_dtoa_r+0x990>
 810abf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810abf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810abfa:	e74b      	b.n	810aa94 <_dtoa_r+0x71c>
 810abfc:	9b03      	ldr	r3, [sp, #12]
 810abfe:	1e5e      	subs	r6, r3, #1
 810ac00:	9b07      	ldr	r3, [sp, #28]
 810ac02:	42b3      	cmp	r3, r6
 810ac04:	bfbf      	itttt	lt
 810ac06:	9b07      	ldrlt	r3, [sp, #28]
 810ac08:	9607      	strlt	r6, [sp, #28]
 810ac0a:	1af2      	sublt	r2, r6, r3
 810ac0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810ac0e:	bfb6      	itet	lt
 810ac10:	189b      	addlt	r3, r3, r2
 810ac12:	1b9e      	subge	r6, r3, r6
 810ac14:	930a      	strlt	r3, [sp, #40]	; 0x28
 810ac16:	9b03      	ldr	r3, [sp, #12]
 810ac18:	bfb8      	it	lt
 810ac1a:	2600      	movlt	r6, #0
 810ac1c:	2b00      	cmp	r3, #0
 810ac1e:	bfb7      	itett	lt
 810ac20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810ac24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810ac28:	1a9d      	sublt	r5, r3, r2
 810ac2a:	2300      	movlt	r3, #0
 810ac2c:	e734      	b.n	810aa98 <_dtoa_r+0x720>
 810ac2e:	9e07      	ldr	r6, [sp, #28]
 810ac30:	9d04      	ldr	r5, [sp, #16]
 810ac32:	9f08      	ldr	r7, [sp, #32]
 810ac34:	e73b      	b.n	810aaae <_dtoa_r+0x736>
 810ac36:	9a07      	ldr	r2, [sp, #28]
 810ac38:	e767      	b.n	810ab0a <_dtoa_r+0x792>
 810ac3a:	9b06      	ldr	r3, [sp, #24]
 810ac3c:	2b01      	cmp	r3, #1
 810ac3e:	dc18      	bgt.n	810ac72 <_dtoa_r+0x8fa>
 810ac40:	f1ba 0f00 	cmp.w	sl, #0
 810ac44:	d115      	bne.n	810ac72 <_dtoa_r+0x8fa>
 810ac46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ac4a:	b993      	cbnz	r3, 810ac72 <_dtoa_r+0x8fa>
 810ac4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ac50:	0d1b      	lsrs	r3, r3, #20
 810ac52:	051b      	lsls	r3, r3, #20
 810ac54:	b183      	cbz	r3, 810ac78 <_dtoa_r+0x900>
 810ac56:	9b04      	ldr	r3, [sp, #16]
 810ac58:	3301      	adds	r3, #1
 810ac5a:	9304      	str	r3, [sp, #16]
 810ac5c:	9b05      	ldr	r3, [sp, #20]
 810ac5e:	3301      	adds	r3, #1
 810ac60:	9305      	str	r3, [sp, #20]
 810ac62:	f04f 0801 	mov.w	r8, #1
 810ac66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ac68:	2b00      	cmp	r3, #0
 810ac6a:	f47f af6a 	bne.w	810ab42 <_dtoa_r+0x7ca>
 810ac6e:	2001      	movs	r0, #1
 810ac70:	e76f      	b.n	810ab52 <_dtoa_r+0x7da>
 810ac72:	f04f 0800 	mov.w	r8, #0
 810ac76:	e7f6      	b.n	810ac66 <_dtoa_r+0x8ee>
 810ac78:	4698      	mov	r8, r3
 810ac7a:	e7f4      	b.n	810ac66 <_dtoa_r+0x8ee>
 810ac7c:	f43f af7d 	beq.w	810ab7a <_dtoa_r+0x802>
 810ac80:	4618      	mov	r0, r3
 810ac82:	301c      	adds	r0, #28
 810ac84:	e772      	b.n	810ab6c <_dtoa_r+0x7f4>
 810ac86:	9b03      	ldr	r3, [sp, #12]
 810ac88:	2b00      	cmp	r3, #0
 810ac8a:	dc37      	bgt.n	810acfc <_dtoa_r+0x984>
 810ac8c:	9b06      	ldr	r3, [sp, #24]
 810ac8e:	2b02      	cmp	r3, #2
 810ac90:	dd34      	ble.n	810acfc <_dtoa_r+0x984>
 810ac92:	9b03      	ldr	r3, [sp, #12]
 810ac94:	9302      	str	r3, [sp, #8]
 810ac96:	9b02      	ldr	r3, [sp, #8]
 810ac98:	b96b      	cbnz	r3, 810acb6 <_dtoa_r+0x93e>
 810ac9a:	4631      	mov	r1, r6
 810ac9c:	2205      	movs	r2, #5
 810ac9e:	4620      	mov	r0, r4
 810aca0:	f000 ff74 	bl	810bb8c <__multadd>
 810aca4:	4601      	mov	r1, r0
 810aca6:	4606      	mov	r6, r0
 810aca8:	ee18 0a10 	vmov	r0, s16
 810acac:	f001 f9d8 	bl	810c060 <__mcmp>
 810acb0:	2800      	cmp	r0, #0
 810acb2:	f73f adbb 	bgt.w	810a82c <_dtoa_r+0x4b4>
 810acb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810acb8:	9d01      	ldr	r5, [sp, #4]
 810acba:	43db      	mvns	r3, r3
 810acbc:	9300      	str	r3, [sp, #0]
 810acbe:	f04f 0800 	mov.w	r8, #0
 810acc2:	4631      	mov	r1, r6
 810acc4:	4620      	mov	r0, r4
 810acc6:	f000 ff3f 	bl	810bb48 <_Bfree>
 810acca:	2f00      	cmp	r7, #0
 810accc:	f43f aea4 	beq.w	810aa18 <_dtoa_r+0x6a0>
 810acd0:	f1b8 0f00 	cmp.w	r8, #0
 810acd4:	d005      	beq.n	810ace2 <_dtoa_r+0x96a>
 810acd6:	45b8      	cmp	r8, r7
 810acd8:	d003      	beq.n	810ace2 <_dtoa_r+0x96a>
 810acda:	4641      	mov	r1, r8
 810acdc:	4620      	mov	r0, r4
 810acde:	f000 ff33 	bl	810bb48 <_Bfree>
 810ace2:	4639      	mov	r1, r7
 810ace4:	4620      	mov	r0, r4
 810ace6:	f000 ff2f 	bl	810bb48 <_Bfree>
 810acea:	e695      	b.n	810aa18 <_dtoa_r+0x6a0>
 810acec:	2600      	movs	r6, #0
 810acee:	4637      	mov	r7, r6
 810acf0:	e7e1      	b.n	810acb6 <_dtoa_r+0x93e>
 810acf2:	9700      	str	r7, [sp, #0]
 810acf4:	4637      	mov	r7, r6
 810acf6:	e599      	b.n	810a82c <_dtoa_r+0x4b4>
 810acf8:	40240000 	.word	0x40240000
 810acfc:	9b08      	ldr	r3, [sp, #32]
 810acfe:	2b00      	cmp	r3, #0
 810ad00:	f000 80ca 	beq.w	810ae98 <_dtoa_r+0xb20>
 810ad04:	9b03      	ldr	r3, [sp, #12]
 810ad06:	9302      	str	r3, [sp, #8]
 810ad08:	2d00      	cmp	r5, #0
 810ad0a:	dd05      	ble.n	810ad18 <_dtoa_r+0x9a0>
 810ad0c:	4639      	mov	r1, r7
 810ad0e:	462a      	mov	r2, r5
 810ad10:	4620      	mov	r0, r4
 810ad12:	f001 f935 	bl	810bf80 <__lshift>
 810ad16:	4607      	mov	r7, r0
 810ad18:	f1b8 0f00 	cmp.w	r8, #0
 810ad1c:	d05b      	beq.n	810add6 <_dtoa_r+0xa5e>
 810ad1e:	6879      	ldr	r1, [r7, #4]
 810ad20:	4620      	mov	r0, r4
 810ad22:	f000 fed1 	bl	810bac8 <_Balloc>
 810ad26:	4605      	mov	r5, r0
 810ad28:	b928      	cbnz	r0, 810ad36 <_dtoa_r+0x9be>
 810ad2a:	4b87      	ldr	r3, [pc, #540]	; (810af48 <_dtoa_r+0xbd0>)
 810ad2c:	4602      	mov	r2, r0
 810ad2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 810ad32:	f7ff bb3b 	b.w	810a3ac <_dtoa_r+0x34>
 810ad36:	693a      	ldr	r2, [r7, #16]
 810ad38:	3202      	adds	r2, #2
 810ad3a:	0092      	lsls	r2, r2, #2
 810ad3c:	f107 010c 	add.w	r1, r7, #12
 810ad40:	300c      	adds	r0, #12
 810ad42:	f000 feb3 	bl	810baac <memcpy>
 810ad46:	2201      	movs	r2, #1
 810ad48:	4629      	mov	r1, r5
 810ad4a:	4620      	mov	r0, r4
 810ad4c:	f001 f918 	bl	810bf80 <__lshift>
 810ad50:	9b01      	ldr	r3, [sp, #4]
 810ad52:	f103 0901 	add.w	r9, r3, #1
 810ad56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810ad5a:	4413      	add	r3, r2
 810ad5c:	9305      	str	r3, [sp, #20]
 810ad5e:	f00a 0301 	and.w	r3, sl, #1
 810ad62:	46b8      	mov	r8, r7
 810ad64:	9304      	str	r3, [sp, #16]
 810ad66:	4607      	mov	r7, r0
 810ad68:	4631      	mov	r1, r6
 810ad6a:	ee18 0a10 	vmov	r0, s16
 810ad6e:	f7ff fa77 	bl	810a260 <quorem>
 810ad72:	4641      	mov	r1, r8
 810ad74:	9002      	str	r0, [sp, #8]
 810ad76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810ad7a:	ee18 0a10 	vmov	r0, s16
 810ad7e:	f001 f96f 	bl	810c060 <__mcmp>
 810ad82:	463a      	mov	r2, r7
 810ad84:	9003      	str	r0, [sp, #12]
 810ad86:	4631      	mov	r1, r6
 810ad88:	4620      	mov	r0, r4
 810ad8a:	f001 f985 	bl	810c098 <__mdiff>
 810ad8e:	68c2      	ldr	r2, [r0, #12]
 810ad90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 810ad94:	4605      	mov	r5, r0
 810ad96:	bb02      	cbnz	r2, 810adda <_dtoa_r+0xa62>
 810ad98:	4601      	mov	r1, r0
 810ad9a:	ee18 0a10 	vmov	r0, s16
 810ad9e:	f001 f95f 	bl	810c060 <__mcmp>
 810ada2:	4602      	mov	r2, r0
 810ada4:	4629      	mov	r1, r5
 810ada6:	4620      	mov	r0, r4
 810ada8:	9207      	str	r2, [sp, #28]
 810adaa:	f000 fecd 	bl	810bb48 <_Bfree>
 810adae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810adb2:	ea43 0102 	orr.w	r1, r3, r2
 810adb6:	9b04      	ldr	r3, [sp, #16]
 810adb8:	430b      	orrs	r3, r1
 810adba:	464d      	mov	r5, r9
 810adbc:	d10f      	bne.n	810adde <_dtoa_r+0xa66>
 810adbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810adc2:	d02a      	beq.n	810ae1a <_dtoa_r+0xaa2>
 810adc4:	9b03      	ldr	r3, [sp, #12]
 810adc6:	2b00      	cmp	r3, #0
 810adc8:	dd02      	ble.n	810add0 <_dtoa_r+0xa58>
 810adca:	9b02      	ldr	r3, [sp, #8]
 810adcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810add0:	f88b a000 	strb.w	sl, [fp]
 810add4:	e775      	b.n	810acc2 <_dtoa_r+0x94a>
 810add6:	4638      	mov	r0, r7
 810add8:	e7ba      	b.n	810ad50 <_dtoa_r+0x9d8>
 810adda:	2201      	movs	r2, #1
 810addc:	e7e2      	b.n	810ada4 <_dtoa_r+0xa2c>
 810adde:	9b03      	ldr	r3, [sp, #12]
 810ade0:	2b00      	cmp	r3, #0
 810ade2:	db04      	blt.n	810adee <_dtoa_r+0xa76>
 810ade4:	9906      	ldr	r1, [sp, #24]
 810ade6:	430b      	orrs	r3, r1
 810ade8:	9904      	ldr	r1, [sp, #16]
 810adea:	430b      	orrs	r3, r1
 810adec:	d122      	bne.n	810ae34 <_dtoa_r+0xabc>
 810adee:	2a00      	cmp	r2, #0
 810adf0:	ddee      	ble.n	810add0 <_dtoa_r+0xa58>
 810adf2:	ee18 1a10 	vmov	r1, s16
 810adf6:	2201      	movs	r2, #1
 810adf8:	4620      	mov	r0, r4
 810adfa:	f001 f8c1 	bl	810bf80 <__lshift>
 810adfe:	4631      	mov	r1, r6
 810ae00:	ee08 0a10 	vmov	s16, r0
 810ae04:	f001 f92c 	bl	810c060 <__mcmp>
 810ae08:	2800      	cmp	r0, #0
 810ae0a:	dc03      	bgt.n	810ae14 <_dtoa_r+0xa9c>
 810ae0c:	d1e0      	bne.n	810add0 <_dtoa_r+0xa58>
 810ae0e:	f01a 0f01 	tst.w	sl, #1
 810ae12:	d0dd      	beq.n	810add0 <_dtoa_r+0xa58>
 810ae14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810ae18:	d1d7      	bne.n	810adca <_dtoa_r+0xa52>
 810ae1a:	2339      	movs	r3, #57	; 0x39
 810ae1c:	f88b 3000 	strb.w	r3, [fp]
 810ae20:	462b      	mov	r3, r5
 810ae22:	461d      	mov	r5, r3
 810ae24:	3b01      	subs	r3, #1
 810ae26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810ae2a:	2a39      	cmp	r2, #57	; 0x39
 810ae2c:	d071      	beq.n	810af12 <_dtoa_r+0xb9a>
 810ae2e:	3201      	adds	r2, #1
 810ae30:	701a      	strb	r2, [r3, #0]
 810ae32:	e746      	b.n	810acc2 <_dtoa_r+0x94a>
 810ae34:	2a00      	cmp	r2, #0
 810ae36:	dd07      	ble.n	810ae48 <_dtoa_r+0xad0>
 810ae38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810ae3c:	d0ed      	beq.n	810ae1a <_dtoa_r+0xaa2>
 810ae3e:	f10a 0301 	add.w	r3, sl, #1
 810ae42:	f88b 3000 	strb.w	r3, [fp]
 810ae46:	e73c      	b.n	810acc2 <_dtoa_r+0x94a>
 810ae48:	9b05      	ldr	r3, [sp, #20]
 810ae4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810ae4e:	4599      	cmp	r9, r3
 810ae50:	d047      	beq.n	810aee2 <_dtoa_r+0xb6a>
 810ae52:	ee18 1a10 	vmov	r1, s16
 810ae56:	2300      	movs	r3, #0
 810ae58:	220a      	movs	r2, #10
 810ae5a:	4620      	mov	r0, r4
 810ae5c:	f000 fe96 	bl	810bb8c <__multadd>
 810ae60:	45b8      	cmp	r8, r7
 810ae62:	ee08 0a10 	vmov	s16, r0
 810ae66:	f04f 0300 	mov.w	r3, #0
 810ae6a:	f04f 020a 	mov.w	r2, #10
 810ae6e:	4641      	mov	r1, r8
 810ae70:	4620      	mov	r0, r4
 810ae72:	d106      	bne.n	810ae82 <_dtoa_r+0xb0a>
 810ae74:	f000 fe8a 	bl	810bb8c <__multadd>
 810ae78:	4680      	mov	r8, r0
 810ae7a:	4607      	mov	r7, r0
 810ae7c:	f109 0901 	add.w	r9, r9, #1
 810ae80:	e772      	b.n	810ad68 <_dtoa_r+0x9f0>
 810ae82:	f000 fe83 	bl	810bb8c <__multadd>
 810ae86:	4639      	mov	r1, r7
 810ae88:	4680      	mov	r8, r0
 810ae8a:	2300      	movs	r3, #0
 810ae8c:	220a      	movs	r2, #10
 810ae8e:	4620      	mov	r0, r4
 810ae90:	f000 fe7c 	bl	810bb8c <__multadd>
 810ae94:	4607      	mov	r7, r0
 810ae96:	e7f1      	b.n	810ae7c <_dtoa_r+0xb04>
 810ae98:	9b03      	ldr	r3, [sp, #12]
 810ae9a:	9302      	str	r3, [sp, #8]
 810ae9c:	9d01      	ldr	r5, [sp, #4]
 810ae9e:	ee18 0a10 	vmov	r0, s16
 810aea2:	4631      	mov	r1, r6
 810aea4:	f7ff f9dc 	bl	810a260 <quorem>
 810aea8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810aeac:	9b01      	ldr	r3, [sp, #4]
 810aeae:	f805 ab01 	strb.w	sl, [r5], #1
 810aeb2:	1aea      	subs	r2, r5, r3
 810aeb4:	9b02      	ldr	r3, [sp, #8]
 810aeb6:	4293      	cmp	r3, r2
 810aeb8:	dd09      	ble.n	810aece <_dtoa_r+0xb56>
 810aeba:	ee18 1a10 	vmov	r1, s16
 810aebe:	2300      	movs	r3, #0
 810aec0:	220a      	movs	r2, #10
 810aec2:	4620      	mov	r0, r4
 810aec4:	f000 fe62 	bl	810bb8c <__multadd>
 810aec8:	ee08 0a10 	vmov	s16, r0
 810aecc:	e7e7      	b.n	810ae9e <_dtoa_r+0xb26>
 810aece:	9b02      	ldr	r3, [sp, #8]
 810aed0:	2b00      	cmp	r3, #0
 810aed2:	bfc8      	it	gt
 810aed4:	461d      	movgt	r5, r3
 810aed6:	9b01      	ldr	r3, [sp, #4]
 810aed8:	bfd8      	it	le
 810aeda:	2501      	movle	r5, #1
 810aedc:	441d      	add	r5, r3
 810aede:	f04f 0800 	mov.w	r8, #0
 810aee2:	ee18 1a10 	vmov	r1, s16
 810aee6:	2201      	movs	r2, #1
 810aee8:	4620      	mov	r0, r4
 810aeea:	f001 f849 	bl	810bf80 <__lshift>
 810aeee:	4631      	mov	r1, r6
 810aef0:	ee08 0a10 	vmov	s16, r0
 810aef4:	f001 f8b4 	bl	810c060 <__mcmp>
 810aef8:	2800      	cmp	r0, #0
 810aefa:	dc91      	bgt.n	810ae20 <_dtoa_r+0xaa8>
 810aefc:	d102      	bne.n	810af04 <_dtoa_r+0xb8c>
 810aefe:	f01a 0f01 	tst.w	sl, #1
 810af02:	d18d      	bne.n	810ae20 <_dtoa_r+0xaa8>
 810af04:	462b      	mov	r3, r5
 810af06:	461d      	mov	r5, r3
 810af08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810af0c:	2a30      	cmp	r2, #48	; 0x30
 810af0e:	d0fa      	beq.n	810af06 <_dtoa_r+0xb8e>
 810af10:	e6d7      	b.n	810acc2 <_dtoa_r+0x94a>
 810af12:	9a01      	ldr	r2, [sp, #4]
 810af14:	429a      	cmp	r2, r3
 810af16:	d184      	bne.n	810ae22 <_dtoa_r+0xaaa>
 810af18:	9b00      	ldr	r3, [sp, #0]
 810af1a:	3301      	adds	r3, #1
 810af1c:	9300      	str	r3, [sp, #0]
 810af1e:	2331      	movs	r3, #49	; 0x31
 810af20:	7013      	strb	r3, [r2, #0]
 810af22:	e6ce      	b.n	810acc2 <_dtoa_r+0x94a>
 810af24:	4b09      	ldr	r3, [pc, #36]	; (810af4c <_dtoa_r+0xbd4>)
 810af26:	f7ff ba95 	b.w	810a454 <_dtoa_r+0xdc>
 810af2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af2c:	2b00      	cmp	r3, #0
 810af2e:	f47f aa6e 	bne.w	810a40e <_dtoa_r+0x96>
 810af32:	4b07      	ldr	r3, [pc, #28]	; (810af50 <_dtoa_r+0xbd8>)
 810af34:	f7ff ba8e 	b.w	810a454 <_dtoa_r+0xdc>
 810af38:	9b02      	ldr	r3, [sp, #8]
 810af3a:	2b00      	cmp	r3, #0
 810af3c:	dcae      	bgt.n	810ae9c <_dtoa_r+0xb24>
 810af3e:	9b06      	ldr	r3, [sp, #24]
 810af40:	2b02      	cmp	r3, #2
 810af42:	f73f aea8 	bgt.w	810ac96 <_dtoa_r+0x91e>
 810af46:	e7a9      	b.n	810ae9c <_dtoa_r+0xb24>
 810af48:	0810d1d0 	.word	0x0810d1d0
 810af4c:	0810cfd0 	.word	0x0810cfd0
 810af50:	0810d151 	.word	0x0810d151

0810af54 <__sflush_r>:
 810af54:	898a      	ldrh	r2, [r1, #12]
 810af56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810af5a:	4605      	mov	r5, r0
 810af5c:	0710      	lsls	r0, r2, #28
 810af5e:	460c      	mov	r4, r1
 810af60:	d458      	bmi.n	810b014 <__sflush_r+0xc0>
 810af62:	684b      	ldr	r3, [r1, #4]
 810af64:	2b00      	cmp	r3, #0
 810af66:	dc05      	bgt.n	810af74 <__sflush_r+0x20>
 810af68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810af6a:	2b00      	cmp	r3, #0
 810af6c:	dc02      	bgt.n	810af74 <__sflush_r+0x20>
 810af6e:	2000      	movs	r0, #0
 810af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810af74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810af76:	2e00      	cmp	r6, #0
 810af78:	d0f9      	beq.n	810af6e <__sflush_r+0x1a>
 810af7a:	2300      	movs	r3, #0
 810af7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810af80:	682f      	ldr	r7, [r5, #0]
 810af82:	602b      	str	r3, [r5, #0]
 810af84:	d032      	beq.n	810afec <__sflush_r+0x98>
 810af86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810af88:	89a3      	ldrh	r3, [r4, #12]
 810af8a:	075a      	lsls	r2, r3, #29
 810af8c:	d505      	bpl.n	810af9a <__sflush_r+0x46>
 810af8e:	6863      	ldr	r3, [r4, #4]
 810af90:	1ac0      	subs	r0, r0, r3
 810af92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810af94:	b10b      	cbz	r3, 810af9a <__sflush_r+0x46>
 810af96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810af98:	1ac0      	subs	r0, r0, r3
 810af9a:	2300      	movs	r3, #0
 810af9c:	4602      	mov	r2, r0
 810af9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810afa0:	6a21      	ldr	r1, [r4, #32]
 810afa2:	4628      	mov	r0, r5
 810afa4:	47b0      	blx	r6
 810afa6:	1c43      	adds	r3, r0, #1
 810afa8:	89a3      	ldrh	r3, [r4, #12]
 810afaa:	d106      	bne.n	810afba <__sflush_r+0x66>
 810afac:	6829      	ldr	r1, [r5, #0]
 810afae:	291d      	cmp	r1, #29
 810afb0:	d82c      	bhi.n	810b00c <__sflush_r+0xb8>
 810afb2:	4a2a      	ldr	r2, [pc, #168]	; (810b05c <__sflush_r+0x108>)
 810afb4:	40ca      	lsrs	r2, r1
 810afb6:	07d6      	lsls	r6, r2, #31
 810afb8:	d528      	bpl.n	810b00c <__sflush_r+0xb8>
 810afba:	2200      	movs	r2, #0
 810afbc:	6062      	str	r2, [r4, #4]
 810afbe:	04d9      	lsls	r1, r3, #19
 810afc0:	6922      	ldr	r2, [r4, #16]
 810afc2:	6022      	str	r2, [r4, #0]
 810afc4:	d504      	bpl.n	810afd0 <__sflush_r+0x7c>
 810afc6:	1c42      	adds	r2, r0, #1
 810afc8:	d101      	bne.n	810afce <__sflush_r+0x7a>
 810afca:	682b      	ldr	r3, [r5, #0]
 810afcc:	b903      	cbnz	r3, 810afd0 <__sflush_r+0x7c>
 810afce:	6560      	str	r0, [r4, #84]	; 0x54
 810afd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810afd2:	602f      	str	r7, [r5, #0]
 810afd4:	2900      	cmp	r1, #0
 810afd6:	d0ca      	beq.n	810af6e <__sflush_r+0x1a>
 810afd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810afdc:	4299      	cmp	r1, r3
 810afde:	d002      	beq.n	810afe6 <__sflush_r+0x92>
 810afe0:	4628      	mov	r0, r5
 810afe2:	f001 fa49 	bl	810c478 <_free_r>
 810afe6:	2000      	movs	r0, #0
 810afe8:	6360      	str	r0, [r4, #52]	; 0x34
 810afea:	e7c1      	b.n	810af70 <__sflush_r+0x1c>
 810afec:	6a21      	ldr	r1, [r4, #32]
 810afee:	2301      	movs	r3, #1
 810aff0:	4628      	mov	r0, r5
 810aff2:	47b0      	blx	r6
 810aff4:	1c41      	adds	r1, r0, #1
 810aff6:	d1c7      	bne.n	810af88 <__sflush_r+0x34>
 810aff8:	682b      	ldr	r3, [r5, #0]
 810affa:	2b00      	cmp	r3, #0
 810affc:	d0c4      	beq.n	810af88 <__sflush_r+0x34>
 810affe:	2b1d      	cmp	r3, #29
 810b000:	d001      	beq.n	810b006 <__sflush_r+0xb2>
 810b002:	2b16      	cmp	r3, #22
 810b004:	d101      	bne.n	810b00a <__sflush_r+0xb6>
 810b006:	602f      	str	r7, [r5, #0]
 810b008:	e7b1      	b.n	810af6e <__sflush_r+0x1a>
 810b00a:	89a3      	ldrh	r3, [r4, #12]
 810b00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b010:	81a3      	strh	r3, [r4, #12]
 810b012:	e7ad      	b.n	810af70 <__sflush_r+0x1c>
 810b014:	690f      	ldr	r7, [r1, #16]
 810b016:	2f00      	cmp	r7, #0
 810b018:	d0a9      	beq.n	810af6e <__sflush_r+0x1a>
 810b01a:	0793      	lsls	r3, r2, #30
 810b01c:	680e      	ldr	r6, [r1, #0]
 810b01e:	bf08      	it	eq
 810b020:	694b      	ldreq	r3, [r1, #20]
 810b022:	600f      	str	r7, [r1, #0]
 810b024:	bf18      	it	ne
 810b026:	2300      	movne	r3, #0
 810b028:	eba6 0807 	sub.w	r8, r6, r7
 810b02c:	608b      	str	r3, [r1, #8]
 810b02e:	f1b8 0f00 	cmp.w	r8, #0
 810b032:	dd9c      	ble.n	810af6e <__sflush_r+0x1a>
 810b034:	6a21      	ldr	r1, [r4, #32]
 810b036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810b038:	4643      	mov	r3, r8
 810b03a:	463a      	mov	r2, r7
 810b03c:	4628      	mov	r0, r5
 810b03e:	47b0      	blx	r6
 810b040:	2800      	cmp	r0, #0
 810b042:	dc06      	bgt.n	810b052 <__sflush_r+0xfe>
 810b044:	89a3      	ldrh	r3, [r4, #12]
 810b046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b04a:	81a3      	strh	r3, [r4, #12]
 810b04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810b050:	e78e      	b.n	810af70 <__sflush_r+0x1c>
 810b052:	4407      	add	r7, r0
 810b054:	eba8 0800 	sub.w	r8, r8, r0
 810b058:	e7e9      	b.n	810b02e <__sflush_r+0xda>
 810b05a:	bf00      	nop
 810b05c:	20400001 	.word	0x20400001

0810b060 <_fflush_r>:
 810b060:	b538      	push	{r3, r4, r5, lr}
 810b062:	690b      	ldr	r3, [r1, #16]
 810b064:	4605      	mov	r5, r0
 810b066:	460c      	mov	r4, r1
 810b068:	b913      	cbnz	r3, 810b070 <_fflush_r+0x10>
 810b06a:	2500      	movs	r5, #0
 810b06c:	4628      	mov	r0, r5
 810b06e:	bd38      	pop	{r3, r4, r5, pc}
 810b070:	b118      	cbz	r0, 810b07a <_fflush_r+0x1a>
 810b072:	6983      	ldr	r3, [r0, #24]
 810b074:	b90b      	cbnz	r3, 810b07a <_fflush_r+0x1a>
 810b076:	f000 f887 	bl	810b188 <__sinit>
 810b07a:	4b14      	ldr	r3, [pc, #80]	; (810b0cc <_fflush_r+0x6c>)
 810b07c:	429c      	cmp	r4, r3
 810b07e:	d11b      	bne.n	810b0b8 <_fflush_r+0x58>
 810b080:	686c      	ldr	r4, [r5, #4]
 810b082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b086:	2b00      	cmp	r3, #0
 810b088:	d0ef      	beq.n	810b06a <_fflush_r+0xa>
 810b08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810b08c:	07d0      	lsls	r0, r2, #31
 810b08e:	d404      	bmi.n	810b09a <_fflush_r+0x3a>
 810b090:	0599      	lsls	r1, r3, #22
 810b092:	d402      	bmi.n	810b09a <_fflush_r+0x3a>
 810b094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b096:	f000 fc88 	bl	810b9aa <__retarget_lock_acquire_recursive>
 810b09a:	4628      	mov	r0, r5
 810b09c:	4621      	mov	r1, r4
 810b09e:	f7ff ff59 	bl	810af54 <__sflush_r>
 810b0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b0a4:	07da      	lsls	r2, r3, #31
 810b0a6:	4605      	mov	r5, r0
 810b0a8:	d4e0      	bmi.n	810b06c <_fflush_r+0xc>
 810b0aa:	89a3      	ldrh	r3, [r4, #12]
 810b0ac:	059b      	lsls	r3, r3, #22
 810b0ae:	d4dd      	bmi.n	810b06c <_fflush_r+0xc>
 810b0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b0b2:	f000 fc7b 	bl	810b9ac <__retarget_lock_release_recursive>
 810b0b6:	e7d9      	b.n	810b06c <_fflush_r+0xc>
 810b0b8:	4b05      	ldr	r3, [pc, #20]	; (810b0d0 <_fflush_r+0x70>)
 810b0ba:	429c      	cmp	r4, r3
 810b0bc:	d101      	bne.n	810b0c2 <_fflush_r+0x62>
 810b0be:	68ac      	ldr	r4, [r5, #8]
 810b0c0:	e7df      	b.n	810b082 <_fflush_r+0x22>
 810b0c2:	4b04      	ldr	r3, [pc, #16]	; (810b0d4 <_fflush_r+0x74>)
 810b0c4:	429c      	cmp	r4, r3
 810b0c6:	bf08      	it	eq
 810b0c8:	68ec      	ldreq	r4, [r5, #12]
 810b0ca:	e7da      	b.n	810b082 <_fflush_r+0x22>
 810b0cc:	0810d204 	.word	0x0810d204
 810b0d0:	0810d224 	.word	0x0810d224
 810b0d4:	0810d1e4 	.word	0x0810d1e4

0810b0d8 <std>:
 810b0d8:	2300      	movs	r3, #0
 810b0da:	b510      	push	{r4, lr}
 810b0dc:	4604      	mov	r4, r0
 810b0de:	e9c0 3300 	strd	r3, r3, [r0]
 810b0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b0e6:	6083      	str	r3, [r0, #8]
 810b0e8:	8181      	strh	r1, [r0, #12]
 810b0ea:	6643      	str	r3, [r0, #100]	; 0x64
 810b0ec:	81c2      	strh	r2, [r0, #14]
 810b0ee:	6183      	str	r3, [r0, #24]
 810b0f0:	4619      	mov	r1, r3
 810b0f2:	2208      	movs	r2, #8
 810b0f4:	305c      	adds	r0, #92	; 0x5c
 810b0f6:	f7fd fa0f 	bl	8108518 <memset>
 810b0fa:	4b05      	ldr	r3, [pc, #20]	; (810b110 <std+0x38>)
 810b0fc:	6263      	str	r3, [r4, #36]	; 0x24
 810b0fe:	4b05      	ldr	r3, [pc, #20]	; (810b114 <std+0x3c>)
 810b100:	62a3      	str	r3, [r4, #40]	; 0x28
 810b102:	4b05      	ldr	r3, [pc, #20]	; (810b118 <std+0x40>)
 810b104:	62e3      	str	r3, [r4, #44]	; 0x2c
 810b106:	4b05      	ldr	r3, [pc, #20]	; (810b11c <std+0x44>)
 810b108:	6224      	str	r4, [r4, #32]
 810b10a:	6323      	str	r3, [r4, #48]	; 0x30
 810b10c:	bd10      	pop	{r4, pc}
 810b10e:	bf00      	nop
 810b110:	0810cbd9 	.word	0x0810cbd9
 810b114:	0810cbfb 	.word	0x0810cbfb
 810b118:	0810cc33 	.word	0x0810cc33
 810b11c:	0810cc57 	.word	0x0810cc57

0810b120 <_cleanup_r>:
 810b120:	4901      	ldr	r1, [pc, #4]	; (810b128 <_cleanup_r+0x8>)
 810b122:	f000 b8af 	b.w	810b284 <_fwalk_reent>
 810b126:	bf00      	nop
 810b128:	0810b061 	.word	0x0810b061

0810b12c <__sfmoreglue>:
 810b12c:	b570      	push	{r4, r5, r6, lr}
 810b12e:	2268      	movs	r2, #104	; 0x68
 810b130:	1e4d      	subs	r5, r1, #1
 810b132:	4355      	muls	r5, r2
 810b134:	460e      	mov	r6, r1
 810b136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810b13a:	f001 fa09 	bl	810c550 <_malloc_r>
 810b13e:	4604      	mov	r4, r0
 810b140:	b140      	cbz	r0, 810b154 <__sfmoreglue+0x28>
 810b142:	2100      	movs	r1, #0
 810b144:	e9c0 1600 	strd	r1, r6, [r0]
 810b148:	300c      	adds	r0, #12
 810b14a:	60a0      	str	r0, [r4, #8]
 810b14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810b150:	f7fd f9e2 	bl	8108518 <memset>
 810b154:	4620      	mov	r0, r4
 810b156:	bd70      	pop	{r4, r5, r6, pc}

0810b158 <__sfp_lock_acquire>:
 810b158:	4801      	ldr	r0, [pc, #4]	; (810b160 <__sfp_lock_acquire+0x8>)
 810b15a:	f000 bc26 	b.w	810b9aa <__retarget_lock_acquire_recursive>
 810b15e:	bf00      	nop
 810b160:	1000035d 	.word	0x1000035d

0810b164 <__sfp_lock_release>:
 810b164:	4801      	ldr	r0, [pc, #4]	; (810b16c <__sfp_lock_release+0x8>)
 810b166:	f000 bc21 	b.w	810b9ac <__retarget_lock_release_recursive>
 810b16a:	bf00      	nop
 810b16c:	1000035d 	.word	0x1000035d

0810b170 <__sinit_lock_acquire>:
 810b170:	4801      	ldr	r0, [pc, #4]	; (810b178 <__sinit_lock_acquire+0x8>)
 810b172:	f000 bc1a 	b.w	810b9aa <__retarget_lock_acquire_recursive>
 810b176:	bf00      	nop
 810b178:	1000035e 	.word	0x1000035e

0810b17c <__sinit_lock_release>:
 810b17c:	4801      	ldr	r0, [pc, #4]	; (810b184 <__sinit_lock_release+0x8>)
 810b17e:	f000 bc15 	b.w	810b9ac <__retarget_lock_release_recursive>
 810b182:	bf00      	nop
 810b184:	1000035e 	.word	0x1000035e

0810b188 <__sinit>:
 810b188:	b510      	push	{r4, lr}
 810b18a:	4604      	mov	r4, r0
 810b18c:	f7ff fff0 	bl	810b170 <__sinit_lock_acquire>
 810b190:	69a3      	ldr	r3, [r4, #24]
 810b192:	b11b      	cbz	r3, 810b19c <__sinit+0x14>
 810b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b198:	f7ff bff0 	b.w	810b17c <__sinit_lock_release>
 810b19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810b1a0:	6523      	str	r3, [r4, #80]	; 0x50
 810b1a2:	4b13      	ldr	r3, [pc, #76]	; (810b1f0 <__sinit+0x68>)
 810b1a4:	4a13      	ldr	r2, [pc, #76]	; (810b1f4 <__sinit+0x6c>)
 810b1a6:	681b      	ldr	r3, [r3, #0]
 810b1a8:	62a2      	str	r2, [r4, #40]	; 0x28
 810b1aa:	42a3      	cmp	r3, r4
 810b1ac:	bf04      	itt	eq
 810b1ae:	2301      	moveq	r3, #1
 810b1b0:	61a3      	streq	r3, [r4, #24]
 810b1b2:	4620      	mov	r0, r4
 810b1b4:	f000 f820 	bl	810b1f8 <__sfp>
 810b1b8:	6060      	str	r0, [r4, #4]
 810b1ba:	4620      	mov	r0, r4
 810b1bc:	f000 f81c 	bl	810b1f8 <__sfp>
 810b1c0:	60a0      	str	r0, [r4, #8]
 810b1c2:	4620      	mov	r0, r4
 810b1c4:	f000 f818 	bl	810b1f8 <__sfp>
 810b1c8:	2200      	movs	r2, #0
 810b1ca:	60e0      	str	r0, [r4, #12]
 810b1cc:	2104      	movs	r1, #4
 810b1ce:	6860      	ldr	r0, [r4, #4]
 810b1d0:	f7ff ff82 	bl	810b0d8 <std>
 810b1d4:	68a0      	ldr	r0, [r4, #8]
 810b1d6:	2201      	movs	r2, #1
 810b1d8:	2109      	movs	r1, #9
 810b1da:	f7ff ff7d 	bl	810b0d8 <std>
 810b1de:	68e0      	ldr	r0, [r4, #12]
 810b1e0:	2202      	movs	r2, #2
 810b1e2:	2112      	movs	r1, #18
 810b1e4:	f7ff ff78 	bl	810b0d8 <std>
 810b1e8:	2301      	movs	r3, #1
 810b1ea:	61a3      	str	r3, [r4, #24]
 810b1ec:	e7d2      	b.n	810b194 <__sinit+0xc>
 810b1ee:	bf00      	nop
 810b1f0:	0810cfbc 	.word	0x0810cfbc
 810b1f4:	0810b121 	.word	0x0810b121

0810b1f8 <__sfp>:
 810b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b1fa:	4607      	mov	r7, r0
 810b1fc:	f7ff ffac 	bl	810b158 <__sfp_lock_acquire>
 810b200:	4b1e      	ldr	r3, [pc, #120]	; (810b27c <__sfp+0x84>)
 810b202:	681e      	ldr	r6, [r3, #0]
 810b204:	69b3      	ldr	r3, [r6, #24]
 810b206:	b913      	cbnz	r3, 810b20e <__sfp+0x16>
 810b208:	4630      	mov	r0, r6
 810b20a:	f7ff ffbd 	bl	810b188 <__sinit>
 810b20e:	3648      	adds	r6, #72	; 0x48
 810b210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810b214:	3b01      	subs	r3, #1
 810b216:	d503      	bpl.n	810b220 <__sfp+0x28>
 810b218:	6833      	ldr	r3, [r6, #0]
 810b21a:	b30b      	cbz	r3, 810b260 <__sfp+0x68>
 810b21c:	6836      	ldr	r6, [r6, #0]
 810b21e:	e7f7      	b.n	810b210 <__sfp+0x18>
 810b220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810b224:	b9d5      	cbnz	r5, 810b25c <__sfp+0x64>
 810b226:	4b16      	ldr	r3, [pc, #88]	; (810b280 <__sfp+0x88>)
 810b228:	60e3      	str	r3, [r4, #12]
 810b22a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b22e:	6665      	str	r5, [r4, #100]	; 0x64
 810b230:	f000 fbba 	bl	810b9a8 <__retarget_lock_init_recursive>
 810b234:	f7ff ff96 	bl	810b164 <__sfp_lock_release>
 810b238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810b23c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810b240:	6025      	str	r5, [r4, #0]
 810b242:	61a5      	str	r5, [r4, #24]
 810b244:	2208      	movs	r2, #8
 810b246:	4629      	mov	r1, r5
 810b248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810b24c:	f7fd f964 	bl	8108518 <memset>
 810b250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810b254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810b258:	4620      	mov	r0, r4
 810b25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b25c:	3468      	adds	r4, #104	; 0x68
 810b25e:	e7d9      	b.n	810b214 <__sfp+0x1c>
 810b260:	2104      	movs	r1, #4
 810b262:	4638      	mov	r0, r7
 810b264:	f7ff ff62 	bl	810b12c <__sfmoreglue>
 810b268:	4604      	mov	r4, r0
 810b26a:	6030      	str	r0, [r6, #0]
 810b26c:	2800      	cmp	r0, #0
 810b26e:	d1d5      	bne.n	810b21c <__sfp+0x24>
 810b270:	f7ff ff78 	bl	810b164 <__sfp_lock_release>
 810b274:	230c      	movs	r3, #12
 810b276:	603b      	str	r3, [r7, #0]
 810b278:	e7ee      	b.n	810b258 <__sfp+0x60>
 810b27a:	bf00      	nop
 810b27c:	0810cfbc 	.word	0x0810cfbc
 810b280:	ffff0001 	.word	0xffff0001

0810b284 <_fwalk_reent>:
 810b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b288:	4606      	mov	r6, r0
 810b28a:	4688      	mov	r8, r1
 810b28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810b290:	2700      	movs	r7, #0
 810b292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b296:	f1b9 0901 	subs.w	r9, r9, #1
 810b29a:	d505      	bpl.n	810b2a8 <_fwalk_reent+0x24>
 810b29c:	6824      	ldr	r4, [r4, #0]
 810b29e:	2c00      	cmp	r4, #0
 810b2a0:	d1f7      	bne.n	810b292 <_fwalk_reent+0xe>
 810b2a2:	4638      	mov	r0, r7
 810b2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b2a8:	89ab      	ldrh	r3, [r5, #12]
 810b2aa:	2b01      	cmp	r3, #1
 810b2ac:	d907      	bls.n	810b2be <_fwalk_reent+0x3a>
 810b2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b2b2:	3301      	adds	r3, #1
 810b2b4:	d003      	beq.n	810b2be <_fwalk_reent+0x3a>
 810b2b6:	4629      	mov	r1, r5
 810b2b8:	4630      	mov	r0, r6
 810b2ba:	47c0      	blx	r8
 810b2bc:	4307      	orrs	r7, r0
 810b2be:	3568      	adds	r5, #104	; 0x68
 810b2c0:	e7e9      	b.n	810b296 <_fwalk_reent+0x12>

0810b2c2 <rshift>:
 810b2c2:	6903      	ldr	r3, [r0, #16]
 810b2c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810b2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b2cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 810b2d0:	f100 0414 	add.w	r4, r0, #20
 810b2d4:	dd45      	ble.n	810b362 <rshift+0xa0>
 810b2d6:	f011 011f 	ands.w	r1, r1, #31
 810b2da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810b2de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810b2e2:	d10c      	bne.n	810b2fe <rshift+0x3c>
 810b2e4:	f100 0710 	add.w	r7, r0, #16
 810b2e8:	4629      	mov	r1, r5
 810b2ea:	42b1      	cmp	r1, r6
 810b2ec:	d334      	bcc.n	810b358 <rshift+0x96>
 810b2ee:	1a9b      	subs	r3, r3, r2
 810b2f0:	009b      	lsls	r3, r3, #2
 810b2f2:	1eea      	subs	r2, r5, #3
 810b2f4:	4296      	cmp	r6, r2
 810b2f6:	bf38      	it	cc
 810b2f8:	2300      	movcc	r3, #0
 810b2fa:	4423      	add	r3, r4
 810b2fc:	e015      	b.n	810b32a <rshift+0x68>
 810b2fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810b302:	f1c1 0820 	rsb	r8, r1, #32
 810b306:	40cf      	lsrs	r7, r1
 810b308:	f105 0e04 	add.w	lr, r5, #4
 810b30c:	46a1      	mov	r9, r4
 810b30e:	4576      	cmp	r6, lr
 810b310:	46f4      	mov	ip, lr
 810b312:	d815      	bhi.n	810b340 <rshift+0x7e>
 810b314:	1a9a      	subs	r2, r3, r2
 810b316:	0092      	lsls	r2, r2, #2
 810b318:	3a04      	subs	r2, #4
 810b31a:	3501      	adds	r5, #1
 810b31c:	42ae      	cmp	r6, r5
 810b31e:	bf38      	it	cc
 810b320:	2200      	movcc	r2, #0
 810b322:	18a3      	adds	r3, r4, r2
 810b324:	50a7      	str	r7, [r4, r2]
 810b326:	b107      	cbz	r7, 810b32a <rshift+0x68>
 810b328:	3304      	adds	r3, #4
 810b32a:	1b1a      	subs	r2, r3, r4
 810b32c:	42a3      	cmp	r3, r4
 810b32e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810b332:	bf08      	it	eq
 810b334:	2300      	moveq	r3, #0
 810b336:	6102      	str	r2, [r0, #16]
 810b338:	bf08      	it	eq
 810b33a:	6143      	streq	r3, [r0, #20]
 810b33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b340:	f8dc c000 	ldr.w	ip, [ip]
 810b344:	fa0c fc08 	lsl.w	ip, ip, r8
 810b348:	ea4c 0707 	orr.w	r7, ip, r7
 810b34c:	f849 7b04 	str.w	r7, [r9], #4
 810b350:	f85e 7b04 	ldr.w	r7, [lr], #4
 810b354:	40cf      	lsrs	r7, r1
 810b356:	e7da      	b.n	810b30e <rshift+0x4c>
 810b358:	f851 cb04 	ldr.w	ip, [r1], #4
 810b35c:	f847 cf04 	str.w	ip, [r7, #4]!
 810b360:	e7c3      	b.n	810b2ea <rshift+0x28>
 810b362:	4623      	mov	r3, r4
 810b364:	e7e1      	b.n	810b32a <rshift+0x68>

0810b366 <__hexdig_fun>:
 810b366:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810b36a:	2b09      	cmp	r3, #9
 810b36c:	d802      	bhi.n	810b374 <__hexdig_fun+0xe>
 810b36e:	3820      	subs	r0, #32
 810b370:	b2c0      	uxtb	r0, r0
 810b372:	4770      	bx	lr
 810b374:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810b378:	2b05      	cmp	r3, #5
 810b37a:	d801      	bhi.n	810b380 <__hexdig_fun+0x1a>
 810b37c:	3847      	subs	r0, #71	; 0x47
 810b37e:	e7f7      	b.n	810b370 <__hexdig_fun+0xa>
 810b380:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810b384:	2b05      	cmp	r3, #5
 810b386:	d801      	bhi.n	810b38c <__hexdig_fun+0x26>
 810b388:	3827      	subs	r0, #39	; 0x27
 810b38a:	e7f1      	b.n	810b370 <__hexdig_fun+0xa>
 810b38c:	2000      	movs	r0, #0
 810b38e:	4770      	bx	lr

0810b390 <__gethex>:
 810b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b394:	ed2d 8b02 	vpush	{d8}
 810b398:	b089      	sub	sp, #36	; 0x24
 810b39a:	ee08 0a10 	vmov	s16, r0
 810b39e:	9304      	str	r3, [sp, #16]
 810b3a0:	4bb4      	ldr	r3, [pc, #720]	; (810b674 <__gethex+0x2e4>)
 810b3a2:	681b      	ldr	r3, [r3, #0]
 810b3a4:	9301      	str	r3, [sp, #4]
 810b3a6:	4618      	mov	r0, r3
 810b3a8:	468b      	mov	fp, r1
 810b3aa:	4690      	mov	r8, r2
 810b3ac:	f7f4 ff98 	bl	81002e0 <strlen>
 810b3b0:	9b01      	ldr	r3, [sp, #4]
 810b3b2:	f8db 2000 	ldr.w	r2, [fp]
 810b3b6:	4403      	add	r3, r0
 810b3b8:	4682      	mov	sl, r0
 810b3ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810b3be:	9305      	str	r3, [sp, #20]
 810b3c0:	1c93      	adds	r3, r2, #2
 810b3c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810b3c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810b3ca:	32fe      	adds	r2, #254	; 0xfe
 810b3cc:	18d1      	adds	r1, r2, r3
 810b3ce:	461f      	mov	r7, r3
 810b3d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810b3d4:	9100      	str	r1, [sp, #0]
 810b3d6:	2830      	cmp	r0, #48	; 0x30
 810b3d8:	d0f8      	beq.n	810b3cc <__gethex+0x3c>
 810b3da:	f7ff ffc4 	bl	810b366 <__hexdig_fun>
 810b3de:	4604      	mov	r4, r0
 810b3e0:	2800      	cmp	r0, #0
 810b3e2:	d13a      	bne.n	810b45a <__gethex+0xca>
 810b3e4:	9901      	ldr	r1, [sp, #4]
 810b3e6:	4652      	mov	r2, sl
 810b3e8:	4638      	mov	r0, r7
 810b3ea:	f001 fc38 	bl	810cc5e <strncmp>
 810b3ee:	4605      	mov	r5, r0
 810b3f0:	2800      	cmp	r0, #0
 810b3f2:	d168      	bne.n	810b4c6 <__gethex+0x136>
 810b3f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810b3f8:	eb07 060a 	add.w	r6, r7, sl
 810b3fc:	f7ff ffb3 	bl	810b366 <__hexdig_fun>
 810b400:	2800      	cmp	r0, #0
 810b402:	d062      	beq.n	810b4ca <__gethex+0x13a>
 810b404:	4633      	mov	r3, r6
 810b406:	7818      	ldrb	r0, [r3, #0]
 810b408:	2830      	cmp	r0, #48	; 0x30
 810b40a:	461f      	mov	r7, r3
 810b40c:	f103 0301 	add.w	r3, r3, #1
 810b410:	d0f9      	beq.n	810b406 <__gethex+0x76>
 810b412:	f7ff ffa8 	bl	810b366 <__hexdig_fun>
 810b416:	2301      	movs	r3, #1
 810b418:	fab0 f480 	clz	r4, r0
 810b41c:	0964      	lsrs	r4, r4, #5
 810b41e:	4635      	mov	r5, r6
 810b420:	9300      	str	r3, [sp, #0]
 810b422:	463a      	mov	r2, r7
 810b424:	4616      	mov	r6, r2
 810b426:	3201      	adds	r2, #1
 810b428:	7830      	ldrb	r0, [r6, #0]
 810b42a:	f7ff ff9c 	bl	810b366 <__hexdig_fun>
 810b42e:	2800      	cmp	r0, #0
 810b430:	d1f8      	bne.n	810b424 <__gethex+0x94>
 810b432:	9901      	ldr	r1, [sp, #4]
 810b434:	4652      	mov	r2, sl
 810b436:	4630      	mov	r0, r6
 810b438:	f001 fc11 	bl	810cc5e <strncmp>
 810b43c:	b980      	cbnz	r0, 810b460 <__gethex+0xd0>
 810b43e:	b94d      	cbnz	r5, 810b454 <__gethex+0xc4>
 810b440:	eb06 050a 	add.w	r5, r6, sl
 810b444:	462a      	mov	r2, r5
 810b446:	4616      	mov	r6, r2
 810b448:	3201      	adds	r2, #1
 810b44a:	7830      	ldrb	r0, [r6, #0]
 810b44c:	f7ff ff8b 	bl	810b366 <__hexdig_fun>
 810b450:	2800      	cmp	r0, #0
 810b452:	d1f8      	bne.n	810b446 <__gethex+0xb6>
 810b454:	1bad      	subs	r5, r5, r6
 810b456:	00ad      	lsls	r5, r5, #2
 810b458:	e004      	b.n	810b464 <__gethex+0xd4>
 810b45a:	2400      	movs	r4, #0
 810b45c:	4625      	mov	r5, r4
 810b45e:	e7e0      	b.n	810b422 <__gethex+0x92>
 810b460:	2d00      	cmp	r5, #0
 810b462:	d1f7      	bne.n	810b454 <__gethex+0xc4>
 810b464:	7833      	ldrb	r3, [r6, #0]
 810b466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810b46a:	2b50      	cmp	r3, #80	; 0x50
 810b46c:	d13b      	bne.n	810b4e6 <__gethex+0x156>
 810b46e:	7873      	ldrb	r3, [r6, #1]
 810b470:	2b2b      	cmp	r3, #43	; 0x2b
 810b472:	d02c      	beq.n	810b4ce <__gethex+0x13e>
 810b474:	2b2d      	cmp	r3, #45	; 0x2d
 810b476:	d02e      	beq.n	810b4d6 <__gethex+0x146>
 810b478:	1c71      	adds	r1, r6, #1
 810b47a:	f04f 0900 	mov.w	r9, #0
 810b47e:	7808      	ldrb	r0, [r1, #0]
 810b480:	f7ff ff71 	bl	810b366 <__hexdig_fun>
 810b484:	1e43      	subs	r3, r0, #1
 810b486:	b2db      	uxtb	r3, r3
 810b488:	2b18      	cmp	r3, #24
 810b48a:	d82c      	bhi.n	810b4e6 <__gethex+0x156>
 810b48c:	f1a0 0210 	sub.w	r2, r0, #16
 810b490:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810b494:	f7ff ff67 	bl	810b366 <__hexdig_fun>
 810b498:	1e43      	subs	r3, r0, #1
 810b49a:	b2db      	uxtb	r3, r3
 810b49c:	2b18      	cmp	r3, #24
 810b49e:	d91d      	bls.n	810b4dc <__gethex+0x14c>
 810b4a0:	f1b9 0f00 	cmp.w	r9, #0
 810b4a4:	d000      	beq.n	810b4a8 <__gethex+0x118>
 810b4a6:	4252      	negs	r2, r2
 810b4a8:	4415      	add	r5, r2
 810b4aa:	f8cb 1000 	str.w	r1, [fp]
 810b4ae:	b1e4      	cbz	r4, 810b4ea <__gethex+0x15a>
 810b4b0:	9b00      	ldr	r3, [sp, #0]
 810b4b2:	2b00      	cmp	r3, #0
 810b4b4:	bf14      	ite	ne
 810b4b6:	2700      	movne	r7, #0
 810b4b8:	2706      	moveq	r7, #6
 810b4ba:	4638      	mov	r0, r7
 810b4bc:	b009      	add	sp, #36	; 0x24
 810b4be:	ecbd 8b02 	vpop	{d8}
 810b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b4c6:	463e      	mov	r6, r7
 810b4c8:	4625      	mov	r5, r4
 810b4ca:	2401      	movs	r4, #1
 810b4cc:	e7ca      	b.n	810b464 <__gethex+0xd4>
 810b4ce:	f04f 0900 	mov.w	r9, #0
 810b4d2:	1cb1      	adds	r1, r6, #2
 810b4d4:	e7d3      	b.n	810b47e <__gethex+0xee>
 810b4d6:	f04f 0901 	mov.w	r9, #1
 810b4da:	e7fa      	b.n	810b4d2 <__gethex+0x142>
 810b4dc:	230a      	movs	r3, #10
 810b4de:	fb03 0202 	mla	r2, r3, r2, r0
 810b4e2:	3a10      	subs	r2, #16
 810b4e4:	e7d4      	b.n	810b490 <__gethex+0x100>
 810b4e6:	4631      	mov	r1, r6
 810b4e8:	e7df      	b.n	810b4aa <__gethex+0x11a>
 810b4ea:	1bf3      	subs	r3, r6, r7
 810b4ec:	3b01      	subs	r3, #1
 810b4ee:	4621      	mov	r1, r4
 810b4f0:	2b07      	cmp	r3, #7
 810b4f2:	dc0b      	bgt.n	810b50c <__gethex+0x17c>
 810b4f4:	ee18 0a10 	vmov	r0, s16
 810b4f8:	f000 fae6 	bl	810bac8 <_Balloc>
 810b4fc:	4604      	mov	r4, r0
 810b4fe:	b940      	cbnz	r0, 810b512 <__gethex+0x182>
 810b500:	4b5d      	ldr	r3, [pc, #372]	; (810b678 <__gethex+0x2e8>)
 810b502:	4602      	mov	r2, r0
 810b504:	21de      	movs	r1, #222	; 0xde
 810b506:	485d      	ldr	r0, [pc, #372]	; (810b67c <__gethex+0x2ec>)
 810b508:	f001 fbdc 	bl	810ccc4 <__assert_func>
 810b50c:	3101      	adds	r1, #1
 810b50e:	105b      	asrs	r3, r3, #1
 810b510:	e7ee      	b.n	810b4f0 <__gethex+0x160>
 810b512:	f100 0914 	add.w	r9, r0, #20
 810b516:	f04f 0b00 	mov.w	fp, #0
 810b51a:	f1ca 0301 	rsb	r3, sl, #1
 810b51e:	f8cd 9008 	str.w	r9, [sp, #8]
 810b522:	f8cd b000 	str.w	fp, [sp]
 810b526:	9306      	str	r3, [sp, #24]
 810b528:	42b7      	cmp	r7, r6
 810b52a:	d340      	bcc.n	810b5ae <__gethex+0x21e>
 810b52c:	9802      	ldr	r0, [sp, #8]
 810b52e:	9b00      	ldr	r3, [sp, #0]
 810b530:	f840 3b04 	str.w	r3, [r0], #4
 810b534:	eba0 0009 	sub.w	r0, r0, r9
 810b538:	1080      	asrs	r0, r0, #2
 810b53a:	0146      	lsls	r6, r0, #5
 810b53c:	6120      	str	r0, [r4, #16]
 810b53e:	4618      	mov	r0, r3
 810b540:	f000 fbb4 	bl	810bcac <__hi0bits>
 810b544:	1a30      	subs	r0, r6, r0
 810b546:	f8d8 6000 	ldr.w	r6, [r8]
 810b54a:	42b0      	cmp	r0, r6
 810b54c:	dd63      	ble.n	810b616 <__gethex+0x286>
 810b54e:	1b87      	subs	r7, r0, r6
 810b550:	4639      	mov	r1, r7
 810b552:	4620      	mov	r0, r4
 810b554:	f000 ff58 	bl	810c408 <__any_on>
 810b558:	4682      	mov	sl, r0
 810b55a:	b1a8      	cbz	r0, 810b588 <__gethex+0x1f8>
 810b55c:	1e7b      	subs	r3, r7, #1
 810b55e:	1159      	asrs	r1, r3, #5
 810b560:	f003 021f 	and.w	r2, r3, #31
 810b564:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810b568:	f04f 0a01 	mov.w	sl, #1
 810b56c:	fa0a f202 	lsl.w	r2, sl, r2
 810b570:	420a      	tst	r2, r1
 810b572:	d009      	beq.n	810b588 <__gethex+0x1f8>
 810b574:	4553      	cmp	r3, sl
 810b576:	dd05      	ble.n	810b584 <__gethex+0x1f4>
 810b578:	1eb9      	subs	r1, r7, #2
 810b57a:	4620      	mov	r0, r4
 810b57c:	f000 ff44 	bl	810c408 <__any_on>
 810b580:	2800      	cmp	r0, #0
 810b582:	d145      	bne.n	810b610 <__gethex+0x280>
 810b584:	f04f 0a02 	mov.w	sl, #2
 810b588:	4639      	mov	r1, r7
 810b58a:	4620      	mov	r0, r4
 810b58c:	f7ff fe99 	bl	810b2c2 <rshift>
 810b590:	443d      	add	r5, r7
 810b592:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b596:	42ab      	cmp	r3, r5
 810b598:	da4c      	bge.n	810b634 <__gethex+0x2a4>
 810b59a:	ee18 0a10 	vmov	r0, s16
 810b59e:	4621      	mov	r1, r4
 810b5a0:	f000 fad2 	bl	810bb48 <_Bfree>
 810b5a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810b5a6:	2300      	movs	r3, #0
 810b5a8:	6013      	str	r3, [r2, #0]
 810b5aa:	27a3      	movs	r7, #163	; 0xa3
 810b5ac:	e785      	b.n	810b4ba <__gethex+0x12a>
 810b5ae:	1e73      	subs	r3, r6, #1
 810b5b0:	9a05      	ldr	r2, [sp, #20]
 810b5b2:	9303      	str	r3, [sp, #12]
 810b5b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b5b8:	4293      	cmp	r3, r2
 810b5ba:	d019      	beq.n	810b5f0 <__gethex+0x260>
 810b5bc:	f1bb 0f20 	cmp.w	fp, #32
 810b5c0:	d107      	bne.n	810b5d2 <__gethex+0x242>
 810b5c2:	9b02      	ldr	r3, [sp, #8]
 810b5c4:	9a00      	ldr	r2, [sp, #0]
 810b5c6:	f843 2b04 	str.w	r2, [r3], #4
 810b5ca:	9302      	str	r3, [sp, #8]
 810b5cc:	2300      	movs	r3, #0
 810b5ce:	9300      	str	r3, [sp, #0]
 810b5d0:	469b      	mov	fp, r3
 810b5d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810b5d6:	f7ff fec6 	bl	810b366 <__hexdig_fun>
 810b5da:	9b00      	ldr	r3, [sp, #0]
 810b5dc:	f000 000f 	and.w	r0, r0, #15
 810b5e0:	fa00 f00b 	lsl.w	r0, r0, fp
 810b5e4:	4303      	orrs	r3, r0
 810b5e6:	9300      	str	r3, [sp, #0]
 810b5e8:	f10b 0b04 	add.w	fp, fp, #4
 810b5ec:	9b03      	ldr	r3, [sp, #12]
 810b5ee:	e00d      	b.n	810b60c <__gethex+0x27c>
 810b5f0:	9b03      	ldr	r3, [sp, #12]
 810b5f2:	9a06      	ldr	r2, [sp, #24]
 810b5f4:	4413      	add	r3, r2
 810b5f6:	42bb      	cmp	r3, r7
 810b5f8:	d3e0      	bcc.n	810b5bc <__gethex+0x22c>
 810b5fa:	4618      	mov	r0, r3
 810b5fc:	9901      	ldr	r1, [sp, #4]
 810b5fe:	9307      	str	r3, [sp, #28]
 810b600:	4652      	mov	r2, sl
 810b602:	f001 fb2c 	bl	810cc5e <strncmp>
 810b606:	9b07      	ldr	r3, [sp, #28]
 810b608:	2800      	cmp	r0, #0
 810b60a:	d1d7      	bne.n	810b5bc <__gethex+0x22c>
 810b60c:	461e      	mov	r6, r3
 810b60e:	e78b      	b.n	810b528 <__gethex+0x198>
 810b610:	f04f 0a03 	mov.w	sl, #3
 810b614:	e7b8      	b.n	810b588 <__gethex+0x1f8>
 810b616:	da0a      	bge.n	810b62e <__gethex+0x29e>
 810b618:	1a37      	subs	r7, r6, r0
 810b61a:	4621      	mov	r1, r4
 810b61c:	ee18 0a10 	vmov	r0, s16
 810b620:	463a      	mov	r2, r7
 810b622:	f000 fcad 	bl	810bf80 <__lshift>
 810b626:	1bed      	subs	r5, r5, r7
 810b628:	4604      	mov	r4, r0
 810b62a:	f100 0914 	add.w	r9, r0, #20
 810b62e:	f04f 0a00 	mov.w	sl, #0
 810b632:	e7ae      	b.n	810b592 <__gethex+0x202>
 810b634:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810b638:	42a8      	cmp	r0, r5
 810b63a:	dd72      	ble.n	810b722 <__gethex+0x392>
 810b63c:	1b45      	subs	r5, r0, r5
 810b63e:	42ae      	cmp	r6, r5
 810b640:	dc36      	bgt.n	810b6b0 <__gethex+0x320>
 810b642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b646:	2b02      	cmp	r3, #2
 810b648:	d02a      	beq.n	810b6a0 <__gethex+0x310>
 810b64a:	2b03      	cmp	r3, #3
 810b64c:	d02c      	beq.n	810b6a8 <__gethex+0x318>
 810b64e:	2b01      	cmp	r3, #1
 810b650:	d11c      	bne.n	810b68c <__gethex+0x2fc>
 810b652:	42ae      	cmp	r6, r5
 810b654:	d11a      	bne.n	810b68c <__gethex+0x2fc>
 810b656:	2e01      	cmp	r6, #1
 810b658:	d112      	bne.n	810b680 <__gethex+0x2f0>
 810b65a:	9a04      	ldr	r2, [sp, #16]
 810b65c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810b660:	6013      	str	r3, [r2, #0]
 810b662:	2301      	movs	r3, #1
 810b664:	6123      	str	r3, [r4, #16]
 810b666:	f8c9 3000 	str.w	r3, [r9]
 810b66a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b66c:	2762      	movs	r7, #98	; 0x62
 810b66e:	601c      	str	r4, [r3, #0]
 810b670:	e723      	b.n	810b4ba <__gethex+0x12a>
 810b672:	bf00      	nop
 810b674:	0810d2ac 	.word	0x0810d2ac
 810b678:	0810d1d0 	.word	0x0810d1d0
 810b67c:	0810d244 	.word	0x0810d244
 810b680:	1e71      	subs	r1, r6, #1
 810b682:	4620      	mov	r0, r4
 810b684:	f000 fec0 	bl	810c408 <__any_on>
 810b688:	2800      	cmp	r0, #0
 810b68a:	d1e6      	bne.n	810b65a <__gethex+0x2ca>
 810b68c:	ee18 0a10 	vmov	r0, s16
 810b690:	4621      	mov	r1, r4
 810b692:	f000 fa59 	bl	810bb48 <_Bfree>
 810b696:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810b698:	2300      	movs	r3, #0
 810b69a:	6013      	str	r3, [r2, #0]
 810b69c:	2750      	movs	r7, #80	; 0x50
 810b69e:	e70c      	b.n	810b4ba <__gethex+0x12a>
 810b6a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b6a2:	2b00      	cmp	r3, #0
 810b6a4:	d1f2      	bne.n	810b68c <__gethex+0x2fc>
 810b6a6:	e7d8      	b.n	810b65a <__gethex+0x2ca>
 810b6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b6aa:	2b00      	cmp	r3, #0
 810b6ac:	d1d5      	bne.n	810b65a <__gethex+0x2ca>
 810b6ae:	e7ed      	b.n	810b68c <__gethex+0x2fc>
 810b6b0:	1e6f      	subs	r7, r5, #1
 810b6b2:	f1ba 0f00 	cmp.w	sl, #0
 810b6b6:	d131      	bne.n	810b71c <__gethex+0x38c>
 810b6b8:	b127      	cbz	r7, 810b6c4 <__gethex+0x334>
 810b6ba:	4639      	mov	r1, r7
 810b6bc:	4620      	mov	r0, r4
 810b6be:	f000 fea3 	bl	810c408 <__any_on>
 810b6c2:	4682      	mov	sl, r0
 810b6c4:	117b      	asrs	r3, r7, #5
 810b6c6:	2101      	movs	r1, #1
 810b6c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810b6cc:	f007 071f 	and.w	r7, r7, #31
 810b6d0:	fa01 f707 	lsl.w	r7, r1, r7
 810b6d4:	421f      	tst	r7, r3
 810b6d6:	4629      	mov	r1, r5
 810b6d8:	4620      	mov	r0, r4
 810b6da:	bf18      	it	ne
 810b6dc:	f04a 0a02 	orrne.w	sl, sl, #2
 810b6e0:	1b76      	subs	r6, r6, r5
 810b6e2:	f7ff fdee 	bl	810b2c2 <rshift>
 810b6e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810b6ea:	2702      	movs	r7, #2
 810b6ec:	f1ba 0f00 	cmp.w	sl, #0
 810b6f0:	d048      	beq.n	810b784 <__gethex+0x3f4>
 810b6f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b6f6:	2b02      	cmp	r3, #2
 810b6f8:	d015      	beq.n	810b726 <__gethex+0x396>
 810b6fa:	2b03      	cmp	r3, #3
 810b6fc:	d017      	beq.n	810b72e <__gethex+0x39e>
 810b6fe:	2b01      	cmp	r3, #1
 810b700:	d109      	bne.n	810b716 <__gethex+0x386>
 810b702:	f01a 0f02 	tst.w	sl, #2
 810b706:	d006      	beq.n	810b716 <__gethex+0x386>
 810b708:	f8d9 0000 	ldr.w	r0, [r9]
 810b70c:	ea4a 0a00 	orr.w	sl, sl, r0
 810b710:	f01a 0f01 	tst.w	sl, #1
 810b714:	d10e      	bne.n	810b734 <__gethex+0x3a4>
 810b716:	f047 0710 	orr.w	r7, r7, #16
 810b71a:	e033      	b.n	810b784 <__gethex+0x3f4>
 810b71c:	f04f 0a01 	mov.w	sl, #1
 810b720:	e7d0      	b.n	810b6c4 <__gethex+0x334>
 810b722:	2701      	movs	r7, #1
 810b724:	e7e2      	b.n	810b6ec <__gethex+0x35c>
 810b726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b728:	f1c3 0301 	rsb	r3, r3, #1
 810b72c:	9315      	str	r3, [sp, #84]	; 0x54
 810b72e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b730:	2b00      	cmp	r3, #0
 810b732:	d0f0      	beq.n	810b716 <__gethex+0x386>
 810b734:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810b738:	f104 0314 	add.w	r3, r4, #20
 810b73c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810b740:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810b744:	f04f 0c00 	mov.w	ip, #0
 810b748:	4618      	mov	r0, r3
 810b74a:	f853 2b04 	ldr.w	r2, [r3], #4
 810b74e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 810b752:	d01c      	beq.n	810b78e <__gethex+0x3fe>
 810b754:	3201      	adds	r2, #1
 810b756:	6002      	str	r2, [r0, #0]
 810b758:	2f02      	cmp	r7, #2
 810b75a:	f104 0314 	add.w	r3, r4, #20
 810b75e:	d13f      	bne.n	810b7e0 <__gethex+0x450>
 810b760:	f8d8 2000 	ldr.w	r2, [r8]
 810b764:	3a01      	subs	r2, #1
 810b766:	42b2      	cmp	r2, r6
 810b768:	d10a      	bne.n	810b780 <__gethex+0x3f0>
 810b76a:	1171      	asrs	r1, r6, #5
 810b76c:	2201      	movs	r2, #1
 810b76e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810b772:	f006 061f 	and.w	r6, r6, #31
 810b776:	fa02 f606 	lsl.w	r6, r2, r6
 810b77a:	421e      	tst	r6, r3
 810b77c:	bf18      	it	ne
 810b77e:	4617      	movne	r7, r2
 810b780:	f047 0720 	orr.w	r7, r7, #32
 810b784:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b786:	601c      	str	r4, [r3, #0]
 810b788:	9b04      	ldr	r3, [sp, #16]
 810b78a:	601d      	str	r5, [r3, #0]
 810b78c:	e695      	b.n	810b4ba <__gethex+0x12a>
 810b78e:	4299      	cmp	r1, r3
 810b790:	f843 cc04 	str.w	ip, [r3, #-4]
 810b794:	d8d8      	bhi.n	810b748 <__gethex+0x3b8>
 810b796:	68a3      	ldr	r3, [r4, #8]
 810b798:	459b      	cmp	fp, r3
 810b79a:	db19      	blt.n	810b7d0 <__gethex+0x440>
 810b79c:	6861      	ldr	r1, [r4, #4]
 810b79e:	ee18 0a10 	vmov	r0, s16
 810b7a2:	3101      	adds	r1, #1
 810b7a4:	f000 f990 	bl	810bac8 <_Balloc>
 810b7a8:	4681      	mov	r9, r0
 810b7aa:	b918      	cbnz	r0, 810b7b4 <__gethex+0x424>
 810b7ac:	4b1a      	ldr	r3, [pc, #104]	; (810b818 <__gethex+0x488>)
 810b7ae:	4602      	mov	r2, r0
 810b7b0:	2184      	movs	r1, #132	; 0x84
 810b7b2:	e6a8      	b.n	810b506 <__gethex+0x176>
 810b7b4:	6922      	ldr	r2, [r4, #16]
 810b7b6:	3202      	adds	r2, #2
 810b7b8:	f104 010c 	add.w	r1, r4, #12
 810b7bc:	0092      	lsls	r2, r2, #2
 810b7be:	300c      	adds	r0, #12
 810b7c0:	f000 f974 	bl	810baac <memcpy>
 810b7c4:	4621      	mov	r1, r4
 810b7c6:	ee18 0a10 	vmov	r0, s16
 810b7ca:	f000 f9bd 	bl	810bb48 <_Bfree>
 810b7ce:	464c      	mov	r4, r9
 810b7d0:	6923      	ldr	r3, [r4, #16]
 810b7d2:	1c5a      	adds	r2, r3, #1
 810b7d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b7d8:	6122      	str	r2, [r4, #16]
 810b7da:	2201      	movs	r2, #1
 810b7dc:	615a      	str	r2, [r3, #20]
 810b7de:	e7bb      	b.n	810b758 <__gethex+0x3c8>
 810b7e0:	6922      	ldr	r2, [r4, #16]
 810b7e2:	455a      	cmp	r2, fp
 810b7e4:	dd0b      	ble.n	810b7fe <__gethex+0x46e>
 810b7e6:	2101      	movs	r1, #1
 810b7e8:	4620      	mov	r0, r4
 810b7ea:	f7ff fd6a 	bl	810b2c2 <rshift>
 810b7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b7f2:	3501      	adds	r5, #1
 810b7f4:	42ab      	cmp	r3, r5
 810b7f6:	f6ff aed0 	blt.w	810b59a <__gethex+0x20a>
 810b7fa:	2701      	movs	r7, #1
 810b7fc:	e7c0      	b.n	810b780 <__gethex+0x3f0>
 810b7fe:	f016 061f 	ands.w	r6, r6, #31
 810b802:	d0fa      	beq.n	810b7fa <__gethex+0x46a>
 810b804:	4453      	add	r3, sl
 810b806:	f1c6 0620 	rsb	r6, r6, #32
 810b80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810b80e:	f000 fa4d 	bl	810bcac <__hi0bits>
 810b812:	42b0      	cmp	r0, r6
 810b814:	dbe7      	blt.n	810b7e6 <__gethex+0x456>
 810b816:	e7f0      	b.n	810b7fa <__gethex+0x46a>
 810b818:	0810d1d0 	.word	0x0810d1d0

0810b81c <L_shift>:
 810b81c:	f1c2 0208 	rsb	r2, r2, #8
 810b820:	0092      	lsls	r2, r2, #2
 810b822:	b570      	push	{r4, r5, r6, lr}
 810b824:	f1c2 0620 	rsb	r6, r2, #32
 810b828:	6843      	ldr	r3, [r0, #4]
 810b82a:	6804      	ldr	r4, [r0, #0]
 810b82c:	fa03 f506 	lsl.w	r5, r3, r6
 810b830:	432c      	orrs	r4, r5
 810b832:	40d3      	lsrs	r3, r2
 810b834:	6004      	str	r4, [r0, #0]
 810b836:	f840 3f04 	str.w	r3, [r0, #4]!
 810b83a:	4288      	cmp	r0, r1
 810b83c:	d3f4      	bcc.n	810b828 <L_shift+0xc>
 810b83e:	bd70      	pop	{r4, r5, r6, pc}

0810b840 <__match>:
 810b840:	b530      	push	{r4, r5, lr}
 810b842:	6803      	ldr	r3, [r0, #0]
 810b844:	3301      	adds	r3, #1
 810b846:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b84a:	b914      	cbnz	r4, 810b852 <__match+0x12>
 810b84c:	6003      	str	r3, [r0, #0]
 810b84e:	2001      	movs	r0, #1
 810b850:	bd30      	pop	{r4, r5, pc}
 810b852:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b856:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810b85a:	2d19      	cmp	r5, #25
 810b85c:	bf98      	it	ls
 810b85e:	3220      	addls	r2, #32
 810b860:	42a2      	cmp	r2, r4
 810b862:	d0f0      	beq.n	810b846 <__match+0x6>
 810b864:	2000      	movs	r0, #0
 810b866:	e7f3      	b.n	810b850 <__match+0x10>

0810b868 <__hexnan>:
 810b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b86c:	680b      	ldr	r3, [r1, #0]
 810b86e:	115e      	asrs	r6, r3, #5
 810b870:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810b874:	f013 031f 	ands.w	r3, r3, #31
 810b878:	b087      	sub	sp, #28
 810b87a:	bf18      	it	ne
 810b87c:	3604      	addne	r6, #4
 810b87e:	2500      	movs	r5, #0
 810b880:	1f37      	subs	r7, r6, #4
 810b882:	4690      	mov	r8, r2
 810b884:	6802      	ldr	r2, [r0, #0]
 810b886:	9301      	str	r3, [sp, #4]
 810b888:	4682      	mov	sl, r0
 810b88a:	f846 5c04 	str.w	r5, [r6, #-4]
 810b88e:	46b9      	mov	r9, r7
 810b890:	463c      	mov	r4, r7
 810b892:	9502      	str	r5, [sp, #8]
 810b894:	46ab      	mov	fp, r5
 810b896:	7851      	ldrb	r1, [r2, #1]
 810b898:	1c53      	adds	r3, r2, #1
 810b89a:	9303      	str	r3, [sp, #12]
 810b89c:	b341      	cbz	r1, 810b8f0 <__hexnan+0x88>
 810b89e:	4608      	mov	r0, r1
 810b8a0:	9205      	str	r2, [sp, #20]
 810b8a2:	9104      	str	r1, [sp, #16]
 810b8a4:	f7ff fd5f 	bl	810b366 <__hexdig_fun>
 810b8a8:	2800      	cmp	r0, #0
 810b8aa:	d14f      	bne.n	810b94c <__hexnan+0xe4>
 810b8ac:	9904      	ldr	r1, [sp, #16]
 810b8ae:	9a05      	ldr	r2, [sp, #20]
 810b8b0:	2920      	cmp	r1, #32
 810b8b2:	d818      	bhi.n	810b8e6 <__hexnan+0x7e>
 810b8b4:	9b02      	ldr	r3, [sp, #8]
 810b8b6:	459b      	cmp	fp, r3
 810b8b8:	dd13      	ble.n	810b8e2 <__hexnan+0x7a>
 810b8ba:	454c      	cmp	r4, r9
 810b8bc:	d206      	bcs.n	810b8cc <__hexnan+0x64>
 810b8be:	2d07      	cmp	r5, #7
 810b8c0:	dc04      	bgt.n	810b8cc <__hexnan+0x64>
 810b8c2:	462a      	mov	r2, r5
 810b8c4:	4649      	mov	r1, r9
 810b8c6:	4620      	mov	r0, r4
 810b8c8:	f7ff ffa8 	bl	810b81c <L_shift>
 810b8cc:	4544      	cmp	r4, r8
 810b8ce:	d950      	bls.n	810b972 <__hexnan+0x10a>
 810b8d0:	2300      	movs	r3, #0
 810b8d2:	f1a4 0904 	sub.w	r9, r4, #4
 810b8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 810b8da:	f8cd b008 	str.w	fp, [sp, #8]
 810b8de:	464c      	mov	r4, r9
 810b8e0:	461d      	mov	r5, r3
 810b8e2:	9a03      	ldr	r2, [sp, #12]
 810b8e4:	e7d7      	b.n	810b896 <__hexnan+0x2e>
 810b8e6:	2929      	cmp	r1, #41	; 0x29
 810b8e8:	d156      	bne.n	810b998 <__hexnan+0x130>
 810b8ea:	3202      	adds	r2, #2
 810b8ec:	f8ca 2000 	str.w	r2, [sl]
 810b8f0:	f1bb 0f00 	cmp.w	fp, #0
 810b8f4:	d050      	beq.n	810b998 <__hexnan+0x130>
 810b8f6:	454c      	cmp	r4, r9
 810b8f8:	d206      	bcs.n	810b908 <__hexnan+0xa0>
 810b8fa:	2d07      	cmp	r5, #7
 810b8fc:	dc04      	bgt.n	810b908 <__hexnan+0xa0>
 810b8fe:	462a      	mov	r2, r5
 810b900:	4649      	mov	r1, r9
 810b902:	4620      	mov	r0, r4
 810b904:	f7ff ff8a 	bl	810b81c <L_shift>
 810b908:	4544      	cmp	r4, r8
 810b90a:	d934      	bls.n	810b976 <__hexnan+0x10e>
 810b90c:	f1a8 0204 	sub.w	r2, r8, #4
 810b910:	4623      	mov	r3, r4
 810b912:	f853 1b04 	ldr.w	r1, [r3], #4
 810b916:	f842 1f04 	str.w	r1, [r2, #4]!
 810b91a:	429f      	cmp	r7, r3
 810b91c:	d2f9      	bcs.n	810b912 <__hexnan+0xaa>
 810b91e:	1b3b      	subs	r3, r7, r4
 810b920:	f023 0303 	bic.w	r3, r3, #3
 810b924:	3304      	adds	r3, #4
 810b926:	3401      	adds	r4, #1
 810b928:	3e03      	subs	r6, #3
 810b92a:	42b4      	cmp	r4, r6
 810b92c:	bf88      	it	hi
 810b92e:	2304      	movhi	r3, #4
 810b930:	4443      	add	r3, r8
 810b932:	2200      	movs	r2, #0
 810b934:	f843 2b04 	str.w	r2, [r3], #4
 810b938:	429f      	cmp	r7, r3
 810b93a:	d2fb      	bcs.n	810b934 <__hexnan+0xcc>
 810b93c:	683b      	ldr	r3, [r7, #0]
 810b93e:	b91b      	cbnz	r3, 810b948 <__hexnan+0xe0>
 810b940:	4547      	cmp	r7, r8
 810b942:	d127      	bne.n	810b994 <__hexnan+0x12c>
 810b944:	2301      	movs	r3, #1
 810b946:	603b      	str	r3, [r7, #0]
 810b948:	2005      	movs	r0, #5
 810b94a:	e026      	b.n	810b99a <__hexnan+0x132>
 810b94c:	3501      	adds	r5, #1
 810b94e:	2d08      	cmp	r5, #8
 810b950:	f10b 0b01 	add.w	fp, fp, #1
 810b954:	dd06      	ble.n	810b964 <__hexnan+0xfc>
 810b956:	4544      	cmp	r4, r8
 810b958:	d9c3      	bls.n	810b8e2 <__hexnan+0x7a>
 810b95a:	2300      	movs	r3, #0
 810b95c:	f844 3c04 	str.w	r3, [r4, #-4]
 810b960:	2501      	movs	r5, #1
 810b962:	3c04      	subs	r4, #4
 810b964:	6822      	ldr	r2, [r4, #0]
 810b966:	f000 000f 	and.w	r0, r0, #15
 810b96a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810b96e:	6022      	str	r2, [r4, #0]
 810b970:	e7b7      	b.n	810b8e2 <__hexnan+0x7a>
 810b972:	2508      	movs	r5, #8
 810b974:	e7b5      	b.n	810b8e2 <__hexnan+0x7a>
 810b976:	9b01      	ldr	r3, [sp, #4]
 810b978:	2b00      	cmp	r3, #0
 810b97a:	d0df      	beq.n	810b93c <__hexnan+0xd4>
 810b97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810b980:	f1c3 0320 	rsb	r3, r3, #32
 810b984:	fa22 f303 	lsr.w	r3, r2, r3
 810b988:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810b98c:	401a      	ands	r2, r3
 810b98e:	f846 2c04 	str.w	r2, [r6, #-4]
 810b992:	e7d3      	b.n	810b93c <__hexnan+0xd4>
 810b994:	3f04      	subs	r7, #4
 810b996:	e7d1      	b.n	810b93c <__hexnan+0xd4>
 810b998:	2004      	movs	r0, #4
 810b99a:	b007      	add	sp, #28
 810b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b9a0 <_localeconv_r>:
 810b9a0:	4800      	ldr	r0, [pc, #0]	; (810b9a4 <_localeconv_r+0x4>)
 810b9a2:	4770      	bx	lr
 810b9a4:	10000168 	.word	0x10000168

0810b9a8 <__retarget_lock_init_recursive>:
 810b9a8:	4770      	bx	lr

0810b9aa <__retarget_lock_acquire_recursive>:
 810b9aa:	4770      	bx	lr

0810b9ac <__retarget_lock_release_recursive>:
 810b9ac:	4770      	bx	lr

0810b9ae <__swhatbuf_r>:
 810b9ae:	b570      	push	{r4, r5, r6, lr}
 810b9b0:	460e      	mov	r6, r1
 810b9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b9b6:	2900      	cmp	r1, #0
 810b9b8:	b096      	sub	sp, #88	; 0x58
 810b9ba:	4614      	mov	r4, r2
 810b9bc:	461d      	mov	r5, r3
 810b9be:	da08      	bge.n	810b9d2 <__swhatbuf_r+0x24>
 810b9c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810b9c4:	2200      	movs	r2, #0
 810b9c6:	602a      	str	r2, [r5, #0]
 810b9c8:	061a      	lsls	r2, r3, #24
 810b9ca:	d410      	bmi.n	810b9ee <__swhatbuf_r+0x40>
 810b9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810b9d0:	e00e      	b.n	810b9f0 <__swhatbuf_r+0x42>
 810b9d2:	466a      	mov	r2, sp
 810b9d4:	f001 f9b6 	bl	810cd44 <_fstat_r>
 810b9d8:	2800      	cmp	r0, #0
 810b9da:	dbf1      	blt.n	810b9c0 <__swhatbuf_r+0x12>
 810b9dc:	9a01      	ldr	r2, [sp, #4]
 810b9de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810b9e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810b9e6:	425a      	negs	r2, r3
 810b9e8:	415a      	adcs	r2, r3
 810b9ea:	602a      	str	r2, [r5, #0]
 810b9ec:	e7ee      	b.n	810b9cc <__swhatbuf_r+0x1e>
 810b9ee:	2340      	movs	r3, #64	; 0x40
 810b9f0:	2000      	movs	r0, #0
 810b9f2:	6023      	str	r3, [r4, #0]
 810b9f4:	b016      	add	sp, #88	; 0x58
 810b9f6:	bd70      	pop	{r4, r5, r6, pc}

0810b9f8 <__smakebuf_r>:
 810b9f8:	898b      	ldrh	r3, [r1, #12]
 810b9fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b9fc:	079d      	lsls	r5, r3, #30
 810b9fe:	4606      	mov	r6, r0
 810ba00:	460c      	mov	r4, r1
 810ba02:	d507      	bpl.n	810ba14 <__smakebuf_r+0x1c>
 810ba04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810ba08:	6023      	str	r3, [r4, #0]
 810ba0a:	6123      	str	r3, [r4, #16]
 810ba0c:	2301      	movs	r3, #1
 810ba0e:	6163      	str	r3, [r4, #20]
 810ba10:	b002      	add	sp, #8
 810ba12:	bd70      	pop	{r4, r5, r6, pc}
 810ba14:	ab01      	add	r3, sp, #4
 810ba16:	466a      	mov	r2, sp
 810ba18:	f7ff ffc9 	bl	810b9ae <__swhatbuf_r>
 810ba1c:	9900      	ldr	r1, [sp, #0]
 810ba1e:	4605      	mov	r5, r0
 810ba20:	4630      	mov	r0, r6
 810ba22:	f000 fd95 	bl	810c550 <_malloc_r>
 810ba26:	b948      	cbnz	r0, 810ba3c <__smakebuf_r+0x44>
 810ba28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ba2c:	059a      	lsls	r2, r3, #22
 810ba2e:	d4ef      	bmi.n	810ba10 <__smakebuf_r+0x18>
 810ba30:	f023 0303 	bic.w	r3, r3, #3
 810ba34:	f043 0302 	orr.w	r3, r3, #2
 810ba38:	81a3      	strh	r3, [r4, #12]
 810ba3a:	e7e3      	b.n	810ba04 <__smakebuf_r+0xc>
 810ba3c:	4b0d      	ldr	r3, [pc, #52]	; (810ba74 <__smakebuf_r+0x7c>)
 810ba3e:	62b3      	str	r3, [r6, #40]	; 0x28
 810ba40:	89a3      	ldrh	r3, [r4, #12]
 810ba42:	6020      	str	r0, [r4, #0]
 810ba44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810ba48:	81a3      	strh	r3, [r4, #12]
 810ba4a:	9b00      	ldr	r3, [sp, #0]
 810ba4c:	6163      	str	r3, [r4, #20]
 810ba4e:	9b01      	ldr	r3, [sp, #4]
 810ba50:	6120      	str	r0, [r4, #16]
 810ba52:	b15b      	cbz	r3, 810ba6c <__smakebuf_r+0x74>
 810ba54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ba58:	4630      	mov	r0, r6
 810ba5a:	f001 f985 	bl	810cd68 <_isatty_r>
 810ba5e:	b128      	cbz	r0, 810ba6c <__smakebuf_r+0x74>
 810ba60:	89a3      	ldrh	r3, [r4, #12]
 810ba62:	f023 0303 	bic.w	r3, r3, #3
 810ba66:	f043 0301 	orr.w	r3, r3, #1
 810ba6a:	81a3      	strh	r3, [r4, #12]
 810ba6c:	89a0      	ldrh	r0, [r4, #12]
 810ba6e:	4305      	orrs	r5, r0
 810ba70:	81a5      	strh	r5, [r4, #12]
 810ba72:	e7cd      	b.n	810ba10 <__smakebuf_r+0x18>
 810ba74:	0810b121 	.word	0x0810b121

0810ba78 <malloc>:
 810ba78:	4b02      	ldr	r3, [pc, #8]	; (810ba84 <malloc+0xc>)
 810ba7a:	4601      	mov	r1, r0
 810ba7c:	6818      	ldr	r0, [r3, #0]
 810ba7e:	f000 bd67 	b.w	810c550 <_malloc_r>
 810ba82:	bf00      	nop
 810ba84:	10000010 	.word	0x10000010

0810ba88 <__ascii_mbtowc>:
 810ba88:	b082      	sub	sp, #8
 810ba8a:	b901      	cbnz	r1, 810ba8e <__ascii_mbtowc+0x6>
 810ba8c:	a901      	add	r1, sp, #4
 810ba8e:	b142      	cbz	r2, 810baa2 <__ascii_mbtowc+0x1a>
 810ba90:	b14b      	cbz	r3, 810baa6 <__ascii_mbtowc+0x1e>
 810ba92:	7813      	ldrb	r3, [r2, #0]
 810ba94:	600b      	str	r3, [r1, #0]
 810ba96:	7812      	ldrb	r2, [r2, #0]
 810ba98:	1e10      	subs	r0, r2, #0
 810ba9a:	bf18      	it	ne
 810ba9c:	2001      	movne	r0, #1
 810ba9e:	b002      	add	sp, #8
 810baa0:	4770      	bx	lr
 810baa2:	4610      	mov	r0, r2
 810baa4:	e7fb      	b.n	810ba9e <__ascii_mbtowc+0x16>
 810baa6:	f06f 0001 	mvn.w	r0, #1
 810baaa:	e7f8      	b.n	810ba9e <__ascii_mbtowc+0x16>

0810baac <memcpy>:
 810baac:	440a      	add	r2, r1
 810baae:	4291      	cmp	r1, r2
 810bab0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810bab4:	d100      	bne.n	810bab8 <memcpy+0xc>
 810bab6:	4770      	bx	lr
 810bab8:	b510      	push	{r4, lr}
 810baba:	f811 4b01 	ldrb.w	r4, [r1], #1
 810babe:	f803 4f01 	strb.w	r4, [r3, #1]!
 810bac2:	4291      	cmp	r1, r2
 810bac4:	d1f9      	bne.n	810baba <memcpy+0xe>
 810bac6:	bd10      	pop	{r4, pc}

0810bac8 <_Balloc>:
 810bac8:	b570      	push	{r4, r5, r6, lr}
 810baca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810bacc:	4604      	mov	r4, r0
 810bace:	460d      	mov	r5, r1
 810bad0:	b976      	cbnz	r6, 810baf0 <_Balloc+0x28>
 810bad2:	2010      	movs	r0, #16
 810bad4:	f7ff ffd0 	bl	810ba78 <malloc>
 810bad8:	4602      	mov	r2, r0
 810bada:	6260      	str	r0, [r4, #36]	; 0x24
 810badc:	b920      	cbnz	r0, 810bae8 <_Balloc+0x20>
 810bade:	4b18      	ldr	r3, [pc, #96]	; (810bb40 <_Balloc+0x78>)
 810bae0:	4818      	ldr	r0, [pc, #96]	; (810bb44 <_Balloc+0x7c>)
 810bae2:	2166      	movs	r1, #102	; 0x66
 810bae4:	f001 f8ee 	bl	810ccc4 <__assert_func>
 810bae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810baec:	6006      	str	r6, [r0, #0]
 810baee:	60c6      	str	r6, [r0, #12]
 810baf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810baf2:	68f3      	ldr	r3, [r6, #12]
 810baf4:	b183      	cbz	r3, 810bb18 <_Balloc+0x50>
 810baf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810baf8:	68db      	ldr	r3, [r3, #12]
 810bafa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810bafe:	b9b8      	cbnz	r0, 810bb30 <_Balloc+0x68>
 810bb00:	2101      	movs	r1, #1
 810bb02:	fa01 f605 	lsl.w	r6, r1, r5
 810bb06:	1d72      	adds	r2, r6, #5
 810bb08:	0092      	lsls	r2, r2, #2
 810bb0a:	4620      	mov	r0, r4
 810bb0c:	f000 fc9d 	bl	810c44a <_calloc_r>
 810bb10:	b160      	cbz	r0, 810bb2c <_Balloc+0x64>
 810bb12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810bb16:	e00e      	b.n	810bb36 <_Balloc+0x6e>
 810bb18:	2221      	movs	r2, #33	; 0x21
 810bb1a:	2104      	movs	r1, #4
 810bb1c:	4620      	mov	r0, r4
 810bb1e:	f000 fc94 	bl	810c44a <_calloc_r>
 810bb22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810bb24:	60f0      	str	r0, [r6, #12]
 810bb26:	68db      	ldr	r3, [r3, #12]
 810bb28:	2b00      	cmp	r3, #0
 810bb2a:	d1e4      	bne.n	810baf6 <_Balloc+0x2e>
 810bb2c:	2000      	movs	r0, #0
 810bb2e:	bd70      	pop	{r4, r5, r6, pc}
 810bb30:	6802      	ldr	r2, [r0, #0]
 810bb32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810bb36:	2300      	movs	r3, #0
 810bb38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810bb3c:	e7f7      	b.n	810bb2e <_Balloc+0x66>
 810bb3e:	bf00      	nop
 810bb40:	0810d15e 	.word	0x0810d15e
 810bb44:	0810d2c0 	.word	0x0810d2c0

0810bb48 <_Bfree>:
 810bb48:	b570      	push	{r4, r5, r6, lr}
 810bb4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810bb4c:	4605      	mov	r5, r0
 810bb4e:	460c      	mov	r4, r1
 810bb50:	b976      	cbnz	r6, 810bb70 <_Bfree+0x28>
 810bb52:	2010      	movs	r0, #16
 810bb54:	f7ff ff90 	bl	810ba78 <malloc>
 810bb58:	4602      	mov	r2, r0
 810bb5a:	6268      	str	r0, [r5, #36]	; 0x24
 810bb5c:	b920      	cbnz	r0, 810bb68 <_Bfree+0x20>
 810bb5e:	4b09      	ldr	r3, [pc, #36]	; (810bb84 <_Bfree+0x3c>)
 810bb60:	4809      	ldr	r0, [pc, #36]	; (810bb88 <_Bfree+0x40>)
 810bb62:	218a      	movs	r1, #138	; 0x8a
 810bb64:	f001 f8ae 	bl	810ccc4 <__assert_func>
 810bb68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bb6c:	6006      	str	r6, [r0, #0]
 810bb6e:	60c6      	str	r6, [r0, #12]
 810bb70:	b13c      	cbz	r4, 810bb82 <_Bfree+0x3a>
 810bb72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810bb74:	6862      	ldr	r2, [r4, #4]
 810bb76:	68db      	ldr	r3, [r3, #12]
 810bb78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810bb7c:	6021      	str	r1, [r4, #0]
 810bb7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810bb82:	bd70      	pop	{r4, r5, r6, pc}
 810bb84:	0810d15e 	.word	0x0810d15e
 810bb88:	0810d2c0 	.word	0x0810d2c0

0810bb8c <__multadd>:
 810bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bb90:	690d      	ldr	r5, [r1, #16]
 810bb92:	4607      	mov	r7, r0
 810bb94:	460c      	mov	r4, r1
 810bb96:	461e      	mov	r6, r3
 810bb98:	f101 0c14 	add.w	ip, r1, #20
 810bb9c:	2000      	movs	r0, #0
 810bb9e:	f8dc 3000 	ldr.w	r3, [ip]
 810bba2:	b299      	uxth	r1, r3
 810bba4:	fb02 6101 	mla	r1, r2, r1, r6
 810bba8:	0c1e      	lsrs	r6, r3, #16
 810bbaa:	0c0b      	lsrs	r3, r1, #16
 810bbac:	fb02 3306 	mla	r3, r2, r6, r3
 810bbb0:	b289      	uxth	r1, r1
 810bbb2:	3001      	adds	r0, #1
 810bbb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810bbb8:	4285      	cmp	r5, r0
 810bbba:	f84c 1b04 	str.w	r1, [ip], #4
 810bbbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810bbc2:	dcec      	bgt.n	810bb9e <__multadd+0x12>
 810bbc4:	b30e      	cbz	r6, 810bc0a <__multadd+0x7e>
 810bbc6:	68a3      	ldr	r3, [r4, #8]
 810bbc8:	42ab      	cmp	r3, r5
 810bbca:	dc19      	bgt.n	810bc00 <__multadd+0x74>
 810bbcc:	6861      	ldr	r1, [r4, #4]
 810bbce:	4638      	mov	r0, r7
 810bbd0:	3101      	adds	r1, #1
 810bbd2:	f7ff ff79 	bl	810bac8 <_Balloc>
 810bbd6:	4680      	mov	r8, r0
 810bbd8:	b928      	cbnz	r0, 810bbe6 <__multadd+0x5a>
 810bbda:	4602      	mov	r2, r0
 810bbdc:	4b0c      	ldr	r3, [pc, #48]	; (810bc10 <__multadd+0x84>)
 810bbde:	480d      	ldr	r0, [pc, #52]	; (810bc14 <__multadd+0x88>)
 810bbe0:	21b5      	movs	r1, #181	; 0xb5
 810bbe2:	f001 f86f 	bl	810ccc4 <__assert_func>
 810bbe6:	6922      	ldr	r2, [r4, #16]
 810bbe8:	3202      	adds	r2, #2
 810bbea:	f104 010c 	add.w	r1, r4, #12
 810bbee:	0092      	lsls	r2, r2, #2
 810bbf0:	300c      	adds	r0, #12
 810bbf2:	f7ff ff5b 	bl	810baac <memcpy>
 810bbf6:	4621      	mov	r1, r4
 810bbf8:	4638      	mov	r0, r7
 810bbfa:	f7ff ffa5 	bl	810bb48 <_Bfree>
 810bbfe:	4644      	mov	r4, r8
 810bc00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810bc04:	3501      	adds	r5, #1
 810bc06:	615e      	str	r6, [r3, #20]
 810bc08:	6125      	str	r5, [r4, #16]
 810bc0a:	4620      	mov	r0, r4
 810bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bc10:	0810d1d0 	.word	0x0810d1d0
 810bc14:	0810d2c0 	.word	0x0810d2c0

0810bc18 <__s2b>:
 810bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bc1c:	460c      	mov	r4, r1
 810bc1e:	4615      	mov	r5, r2
 810bc20:	461f      	mov	r7, r3
 810bc22:	2209      	movs	r2, #9
 810bc24:	3308      	adds	r3, #8
 810bc26:	4606      	mov	r6, r0
 810bc28:	fb93 f3f2 	sdiv	r3, r3, r2
 810bc2c:	2100      	movs	r1, #0
 810bc2e:	2201      	movs	r2, #1
 810bc30:	429a      	cmp	r2, r3
 810bc32:	db09      	blt.n	810bc48 <__s2b+0x30>
 810bc34:	4630      	mov	r0, r6
 810bc36:	f7ff ff47 	bl	810bac8 <_Balloc>
 810bc3a:	b940      	cbnz	r0, 810bc4e <__s2b+0x36>
 810bc3c:	4602      	mov	r2, r0
 810bc3e:	4b19      	ldr	r3, [pc, #100]	; (810bca4 <__s2b+0x8c>)
 810bc40:	4819      	ldr	r0, [pc, #100]	; (810bca8 <__s2b+0x90>)
 810bc42:	21ce      	movs	r1, #206	; 0xce
 810bc44:	f001 f83e 	bl	810ccc4 <__assert_func>
 810bc48:	0052      	lsls	r2, r2, #1
 810bc4a:	3101      	adds	r1, #1
 810bc4c:	e7f0      	b.n	810bc30 <__s2b+0x18>
 810bc4e:	9b08      	ldr	r3, [sp, #32]
 810bc50:	6143      	str	r3, [r0, #20]
 810bc52:	2d09      	cmp	r5, #9
 810bc54:	f04f 0301 	mov.w	r3, #1
 810bc58:	6103      	str	r3, [r0, #16]
 810bc5a:	dd16      	ble.n	810bc8a <__s2b+0x72>
 810bc5c:	f104 0909 	add.w	r9, r4, #9
 810bc60:	46c8      	mov	r8, r9
 810bc62:	442c      	add	r4, r5
 810bc64:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bc68:	4601      	mov	r1, r0
 810bc6a:	3b30      	subs	r3, #48	; 0x30
 810bc6c:	220a      	movs	r2, #10
 810bc6e:	4630      	mov	r0, r6
 810bc70:	f7ff ff8c 	bl	810bb8c <__multadd>
 810bc74:	45a0      	cmp	r8, r4
 810bc76:	d1f5      	bne.n	810bc64 <__s2b+0x4c>
 810bc78:	f1a5 0408 	sub.w	r4, r5, #8
 810bc7c:	444c      	add	r4, r9
 810bc7e:	1b2d      	subs	r5, r5, r4
 810bc80:	1963      	adds	r3, r4, r5
 810bc82:	42bb      	cmp	r3, r7
 810bc84:	db04      	blt.n	810bc90 <__s2b+0x78>
 810bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bc8a:	340a      	adds	r4, #10
 810bc8c:	2509      	movs	r5, #9
 810bc8e:	e7f6      	b.n	810bc7e <__s2b+0x66>
 810bc90:	f814 3b01 	ldrb.w	r3, [r4], #1
 810bc94:	4601      	mov	r1, r0
 810bc96:	3b30      	subs	r3, #48	; 0x30
 810bc98:	220a      	movs	r2, #10
 810bc9a:	4630      	mov	r0, r6
 810bc9c:	f7ff ff76 	bl	810bb8c <__multadd>
 810bca0:	e7ee      	b.n	810bc80 <__s2b+0x68>
 810bca2:	bf00      	nop
 810bca4:	0810d1d0 	.word	0x0810d1d0
 810bca8:	0810d2c0 	.word	0x0810d2c0

0810bcac <__hi0bits>:
 810bcac:	0c03      	lsrs	r3, r0, #16
 810bcae:	041b      	lsls	r3, r3, #16
 810bcb0:	b9d3      	cbnz	r3, 810bce8 <__hi0bits+0x3c>
 810bcb2:	0400      	lsls	r0, r0, #16
 810bcb4:	2310      	movs	r3, #16
 810bcb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810bcba:	bf04      	itt	eq
 810bcbc:	0200      	lsleq	r0, r0, #8
 810bcbe:	3308      	addeq	r3, #8
 810bcc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810bcc4:	bf04      	itt	eq
 810bcc6:	0100      	lsleq	r0, r0, #4
 810bcc8:	3304      	addeq	r3, #4
 810bcca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810bcce:	bf04      	itt	eq
 810bcd0:	0080      	lsleq	r0, r0, #2
 810bcd2:	3302      	addeq	r3, #2
 810bcd4:	2800      	cmp	r0, #0
 810bcd6:	db05      	blt.n	810bce4 <__hi0bits+0x38>
 810bcd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810bcdc:	f103 0301 	add.w	r3, r3, #1
 810bce0:	bf08      	it	eq
 810bce2:	2320      	moveq	r3, #32
 810bce4:	4618      	mov	r0, r3
 810bce6:	4770      	bx	lr
 810bce8:	2300      	movs	r3, #0
 810bcea:	e7e4      	b.n	810bcb6 <__hi0bits+0xa>

0810bcec <__lo0bits>:
 810bcec:	6803      	ldr	r3, [r0, #0]
 810bcee:	f013 0207 	ands.w	r2, r3, #7
 810bcf2:	4601      	mov	r1, r0
 810bcf4:	d00b      	beq.n	810bd0e <__lo0bits+0x22>
 810bcf6:	07da      	lsls	r2, r3, #31
 810bcf8:	d423      	bmi.n	810bd42 <__lo0bits+0x56>
 810bcfa:	0798      	lsls	r0, r3, #30
 810bcfc:	bf49      	itett	mi
 810bcfe:	085b      	lsrmi	r3, r3, #1
 810bd00:	089b      	lsrpl	r3, r3, #2
 810bd02:	2001      	movmi	r0, #1
 810bd04:	600b      	strmi	r3, [r1, #0]
 810bd06:	bf5c      	itt	pl
 810bd08:	600b      	strpl	r3, [r1, #0]
 810bd0a:	2002      	movpl	r0, #2
 810bd0c:	4770      	bx	lr
 810bd0e:	b298      	uxth	r0, r3
 810bd10:	b9a8      	cbnz	r0, 810bd3e <__lo0bits+0x52>
 810bd12:	0c1b      	lsrs	r3, r3, #16
 810bd14:	2010      	movs	r0, #16
 810bd16:	b2da      	uxtb	r2, r3
 810bd18:	b90a      	cbnz	r2, 810bd1e <__lo0bits+0x32>
 810bd1a:	3008      	adds	r0, #8
 810bd1c:	0a1b      	lsrs	r3, r3, #8
 810bd1e:	071a      	lsls	r2, r3, #28
 810bd20:	bf04      	itt	eq
 810bd22:	091b      	lsreq	r3, r3, #4
 810bd24:	3004      	addeq	r0, #4
 810bd26:	079a      	lsls	r2, r3, #30
 810bd28:	bf04      	itt	eq
 810bd2a:	089b      	lsreq	r3, r3, #2
 810bd2c:	3002      	addeq	r0, #2
 810bd2e:	07da      	lsls	r2, r3, #31
 810bd30:	d403      	bmi.n	810bd3a <__lo0bits+0x4e>
 810bd32:	085b      	lsrs	r3, r3, #1
 810bd34:	f100 0001 	add.w	r0, r0, #1
 810bd38:	d005      	beq.n	810bd46 <__lo0bits+0x5a>
 810bd3a:	600b      	str	r3, [r1, #0]
 810bd3c:	4770      	bx	lr
 810bd3e:	4610      	mov	r0, r2
 810bd40:	e7e9      	b.n	810bd16 <__lo0bits+0x2a>
 810bd42:	2000      	movs	r0, #0
 810bd44:	4770      	bx	lr
 810bd46:	2020      	movs	r0, #32
 810bd48:	4770      	bx	lr
	...

0810bd4c <__i2b>:
 810bd4c:	b510      	push	{r4, lr}
 810bd4e:	460c      	mov	r4, r1
 810bd50:	2101      	movs	r1, #1
 810bd52:	f7ff feb9 	bl	810bac8 <_Balloc>
 810bd56:	4602      	mov	r2, r0
 810bd58:	b928      	cbnz	r0, 810bd66 <__i2b+0x1a>
 810bd5a:	4b05      	ldr	r3, [pc, #20]	; (810bd70 <__i2b+0x24>)
 810bd5c:	4805      	ldr	r0, [pc, #20]	; (810bd74 <__i2b+0x28>)
 810bd5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810bd62:	f000 ffaf 	bl	810ccc4 <__assert_func>
 810bd66:	2301      	movs	r3, #1
 810bd68:	6144      	str	r4, [r0, #20]
 810bd6a:	6103      	str	r3, [r0, #16]
 810bd6c:	bd10      	pop	{r4, pc}
 810bd6e:	bf00      	nop
 810bd70:	0810d1d0 	.word	0x0810d1d0
 810bd74:	0810d2c0 	.word	0x0810d2c0

0810bd78 <__multiply>:
 810bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bd7c:	4691      	mov	r9, r2
 810bd7e:	690a      	ldr	r2, [r1, #16]
 810bd80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810bd84:	429a      	cmp	r2, r3
 810bd86:	bfb8      	it	lt
 810bd88:	460b      	movlt	r3, r1
 810bd8a:	460c      	mov	r4, r1
 810bd8c:	bfbc      	itt	lt
 810bd8e:	464c      	movlt	r4, r9
 810bd90:	4699      	movlt	r9, r3
 810bd92:	6927      	ldr	r7, [r4, #16]
 810bd94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810bd98:	68a3      	ldr	r3, [r4, #8]
 810bd9a:	6861      	ldr	r1, [r4, #4]
 810bd9c:	eb07 060a 	add.w	r6, r7, sl
 810bda0:	42b3      	cmp	r3, r6
 810bda2:	b085      	sub	sp, #20
 810bda4:	bfb8      	it	lt
 810bda6:	3101      	addlt	r1, #1
 810bda8:	f7ff fe8e 	bl	810bac8 <_Balloc>
 810bdac:	b930      	cbnz	r0, 810bdbc <__multiply+0x44>
 810bdae:	4602      	mov	r2, r0
 810bdb0:	4b44      	ldr	r3, [pc, #272]	; (810bec4 <__multiply+0x14c>)
 810bdb2:	4845      	ldr	r0, [pc, #276]	; (810bec8 <__multiply+0x150>)
 810bdb4:	f240 115d 	movw	r1, #349	; 0x15d
 810bdb8:	f000 ff84 	bl	810ccc4 <__assert_func>
 810bdbc:	f100 0514 	add.w	r5, r0, #20
 810bdc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bdc4:	462b      	mov	r3, r5
 810bdc6:	2200      	movs	r2, #0
 810bdc8:	4543      	cmp	r3, r8
 810bdca:	d321      	bcc.n	810be10 <__multiply+0x98>
 810bdcc:	f104 0314 	add.w	r3, r4, #20
 810bdd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810bdd4:	f109 0314 	add.w	r3, r9, #20
 810bdd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810bddc:	9202      	str	r2, [sp, #8]
 810bdde:	1b3a      	subs	r2, r7, r4
 810bde0:	3a15      	subs	r2, #21
 810bde2:	f022 0203 	bic.w	r2, r2, #3
 810bde6:	3204      	adds	r2, #4
 810bde8:	f104 0115 	add.w	r1, r4, #21
 810bdec:	428f      	cmp	r7, r1
 810bdee:	bf38      	it	cc
 810bdf0:	2204      	movcc	r2, #4
 810bdf2:	9201      	str	r2, [sp, #4]
 810bdf4:	9a02      	ldr	r2, [sp, #8]
 810bdf6:	9303      	str	r3, [sp, #12]
 810bdf8:	429a      	cmp	r2, r3
 810bdfa:	d80c      	bhi.n	810be16 <__multiply+0x9e>
 810bdfc:	2e00      	cmp	r6, #0
 810bdfe:	dd03      	ble.n	810be08 <__multiply+0x90>
 810be00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810be04:	2b00      	cmp	r3, #0
 810be06:	d05a      	beq.n	810bebe <__multiply+0x146>
 810be08:	6106      	str	r6, [r0, #16]
 810be0a:	b005      	add	sp, #20
 810be0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810be10:	f843 2b04 	str.w	r2, [r3], #4
 810be14:	e7d8      	b.n	810bdc8 <__multiply+0x50>
 810be16:	f8b3 a000 	ldrh.w	sl, [r3]
 810be1a:	f1ba 0f00 	cmp.w	sl, #0
 810be1e:	d024      	beq.n	810be6a <__multiply+0xf2>
 810be20:	f104 0e14 	add.w	lr, r4, #20
 810be24:	46a9      	mov	r9, r5
 810be26:	f04f 0c00 	mov.w	ip, #0
 810be2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810be2e:	f8d9 1000 	ldr.w	r1, [r9]
 810be32:	fa1f fb82 	uxth.w	fp, r2
 810be36:	b289      	uxth	r1, r1
 810be38:	fb0a 110b 	mla	r1, sl, fp, r1
 810be3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810be40:	f8d9 2000 	ldr.w	r2, [r9]
 810be44:	4461      	add	r1, ip
 810be46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810be4a:	fb0a c20b 	mla	r2, sl, fp, ip
 810be4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810be52:	b289      	uxth	r1, r1
 810be54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810be58:	4577      	cmp	r7, lr
 810be5a:	f849 1b04 	str.w	r1, [r9], #4
 810be5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810be62:	d8e2      	bhi.n	810be2a <__multiply+0xb2>
 810be64:	9a01      	ldr	r2, [sp, #4]
 810be66:	f845 c002 	str.w	ip, [r5, r2]
 810be6a:	9a03      	ldr	r2, [sp, #12]
 810be6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810be70:	3304      	adds	r3, #4
 810be72:	f1b9 0f00 	cmp.w	r9, #0
 810be76:	d020      	beq.n	810beba <__multiply+0x142>
 810be78:	6829      	ldr	r1, [r5, #0]
 810be7a:	f104 0c14 	add.w	ip, r4, #20
 810be7e:	46ae      	mov	lr, r5
 810be80:	f04f 0a00 	mov.w	sl, #0
 810be84:	f8bc b000 	ldrh.w	fp, [ip]
 810be88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810be8c:	fb09 220b 	mla	r2, r9, fp, r2
 810be90:	4492      	add	sl, r2
 810be92:	b289      	uxth	r1, r1
 810be94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810be98:	f84e 1b04 	str.w	r1, [lr], #4
 810be9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 810bea0:	f8be 1000 	ldrh.w	r1, [lr]
 810bea4:	0c12      	lsrs	r2, r2, #16
 810bea6:	fb09 1102 	mla	r1, r9, r2, r1
 810beaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810beae:	4567      	cmp	r7, ip
 810beb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810beb4:	d8e6      	bhi.n	810be84 <__multiply+0x10c>
 810beb6:	9a01      	ldr	r2, [sp, #4]
 810beb8:	50a9      	str	r1, [r5, r2]
 810beba:	3504      	adds	r5, #4
 810bebc:	e79a      	b.n	810bdf4 <__multiply+0x7c>
 810bebe:	3e01      	subs	r6, #1
 810bec0:	e79c      	b.n	810bdfc <__multiply+0x84>
 810bec2:	bf00      	nop
 810bec4:	0810d1d0 	.word	0x0810d1d0
 810bec8:	0810d2c0 	.word	0x0810d2c0

0810becc <__pow5mult>:
 810becc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bed0:	4615      	mov	r5, r2
 810bed2:	f012 0203 	ands.w	r2, r2, #3
 810bed6:	4606      	mov	r6, r0
 810bed8:	460f      	mov	r7, r1
 810beda:	d007      	beq.n	810beec <__pow5mult+0x20>
 810bedc:	4c25      	ldr	r4, [pc, #148]	; (810bf74 <__pow5mult+0xa8>)
 810bede:	3a01      	subs	r2, #1
 810bee0:	2300      	movs	r3, #0
 810bee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bee6:	f7ff fe51 	bl	810bb8c <__multadd>
 810beea:	4607      	mov	r7, r0
 810beec:	10ad      	asrs	r5, r5, #2
 810beee:	d03d      	beq.n	810bf6c <__pow5mult+0xa0>
 810bef0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810bef2:	b97c      	cbnz	r4, 810bf14 <__pow5mult+0x48>
 810bef4:	2010      	movs	r0, #16
 810bef6:	f7ff fdbf 	bl	810ba78 <malloc>
 810befa:	4602      	mov	r2, r0
 810befc:	6270      	str	r0, [r6, #36]	; 0x24
 810befe:	b928      	cbnz	r0, 810bf0c <__pow5mult+0x40>
 810bf00:	4b1d      	ldr	r3, [pc, #116]	; (810bf78 <__pow5mult+0xac>)
 810bf02:	481e      	ldr	r0, [pc, #120]	; (810bf7c <__pow5mult+0xb0>)
 810bf04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810bf08:	f000 fedc 	bl	810ccc4 <__assert_func>
 810bf0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bf10:	6004      	str	r4, [r0, #0]
 810bf12:	60c4      	str	r4, [r0, #12]
 810bf14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810bf18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bf1c:	b94c      	cbnz	r4, 810bf32 <__pow5mult+0x66>
 810bf1e:	f240 2171 	movw	r1, #625	; 0x271
 810bf22:	4630      	mov	r0, r6
 810bf24:	f7ff ff12 	bl	810bd4c <__i2b>
 810bf28:	2300      	movs	r3, #0
 810bf2a:	f8c8 0008 	str.w	r0, [r8, #8]
 810bf2e:	4604      	mov	r4, r0
 810bf30:	6003      	str	r3, [r0, #0]
 810bf32:	f04f 0900 	mov.w	r9, #0
 810bf36:	07eb      	lsls	r3, r5, #31
 810bf38:	d50a      	bpl.n	810bf50 <__pow5mult+0x84>
 810bf3a:	4639      	mov	r1, r7
 810bf3c:	4622      	mov	r2, r4
 810bf3e:	4630      	mov	r0, r6
 810bf40:	f7ff ff1a 	bl	810bd78 <__multiply>
 810bf44:	4639      	mov	r1, r7
 810bf46:	4680      	mov	r8, r0
 810bf48:	4630      	mov	r0, r6
 810bf4a:	f7ff fdfd 	bl	810bb48 <_Bfree>
 810bf4e:	4647      	mov	r7, r8
 810bf50:	106d      	asrs	r5, r5, #1
 810bf52:	d00b      	beq.n	810bf6c <__pow5mult+0xa0>
 810bf54:	6820      	ldr	r0, [r4, #0]
 810bf56:	b938      	cbnz	r0, 810bf68 <__pow5mult+0x9c>
 810bf58:	4622      	mov	r2, r4
 810bf5a:	4621      	mov	r1, r4
 810bf5c:	4630      	mov	r0, r6
 810bf5e:	f7ff ff0b 	bl	810bd78 <__multiply>
 810bf62:	6020      	str	r0, [r4, #0]
 810bf64:	f8c0 9000 	str.w	r9, [r0]
 810bf68:	4604      	mov	r4, r0
 810bf6a:	e7e4      	b.n	810bf36 <__pow5mult+0x6a>
 810bf6c:	4638      	mov	r0, r7
 810bf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bf72:	bf00      	nop
 810bf74:	0810d410 	.word	0x0810d410
 810bf78:	0810d15e 	.word	0x0810d15e
 810bf7c:	0810d2c0 	.word	0x0810d2c0

0810bf80 <__lshift>:
 810bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bf84:	460c      	mov	r4, r1
 810bf86:	6849      	ldr	r1, [r1, #4]
 810bf88:	6923      	ldr	r3, [r4, #16]
 810bf8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810bf8e:	68a3      	ldr	r3, [r4, #8]
 810bf90:	4607      	mov	r7, r0
 810bf92:	4691      	mov	r9, r2
 810bf94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bf98:	f108 0601 	add.w	r6, r8, #1
 810bf9c:	42b3      	cmp	r3, r6
 810bf9e:	db0b      	blt.n	810bfb8 <__lshift+0x38>
 810bfa0:	4638      	mov	r0, r7
 810bfa2:	f7ff fd91 	bl	810bac8 <_Balloc>
 810bfa6:	4605      	mov	r5, r0
 810bfa8:	b948      	cbnz	r0, 810bfbe <__lshift+0x3e>
 810bfaa:	4602      	mov	r2, r0
 810bfac:	4b2a      	ldr	r3, [pc, #168]	; (810c058 <__lshift+0xd8>)
 810bfae:	482b      	ldr	r0, [pc, #172]	; (810c05c <__lshift+0xdc>)
 810bfb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 810bfb4:	f000 fe86 	bl	810ccc4 <__assert_func>
 810bfb8:	3101      	adds	r1, #1
 810bfba:	005b      	lsls	r3, r3, #1
 810bfbc:	e7ee      	b.n	810bf9c <__lshift+0x1c>
 810bfbe:	2300      	movs	r3, #0
 810bfc0:	f100 0114 	add.w	r1, r0, #20
 810bfc4:	f100 0210 	add.w	r2, r0, #16
 810bfc8:	4618      	mov	r0, r3
 810bfca:	4553      	cmp	r3, sl
 810bfcc:	db37      	blt.n	810c03e <__lshift+0xbe>
 810bfce:	6920      	ldr	r0, [r4, #16]
 810bfd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810bfd4:	f104 0314 	add.w	r3, r4, #20
 810bfd8:	f019 091f 	ands.w	r9, r9, #31
 810bfdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810bfe0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810bfe4:	d02f      	beq.n	810c046 <__lshift+0xc6>
 810bfe6:	f1c9 0e20 	rsb	lr, r9, #32
 810bfea:	468a      	mov	sl, r1
 810bfec:	f04f 0c00 	mov.w	ip, #0
 810bff0:	681a      	ldr	r2, [r3, #0]
 810bff2:	fa02 f209 	lsl.w	r2, r2, r9
 810bff6:	ea42 020c 	orr.w	r2, r2, ip
 810bffa:	f84a 2b04 	str.w	r2, [sl], #4
 810bffe:	f853 2b04 	ldr.w	r2, [r3], #4
 810c002:	4298      	cmp	r0, r3
 810c004:	fa22 fc0e 	lsr.w	ip, r2, lr
 810c008:	d8f2      	bhi.n	810bff0 <__lshift+0x70>
 810c00a:	1b03      	subs	r3, r0, r4
 810c00c:	3b15      	subs	r3, #21
 810c00e:	f023 0303 	bic.w	r3, r3, #3
 810c012:	3304      	adds	r3, #4
 810c014:	f104 0215 	add.w	r2, r4, #21
 810c018:	4290      	cmp	r0, r2
 810c01a:	bf38      	it	cc
 810c01c:	2304      	movcc	r3, #4
 810c01e:	f841 c003 	str.w	ip, [r1, r3]
 810c022:	f1bc 0f00 	cmp.w	ip, #0
 810c026:	d001      	beq.n	810c02c <__lshift+0xac>
 810c028:	f108 0602 	add.w	r6, r8, #2
 810c02c:	3e01      	subs	r6, #1
 810c02e:	4638      	mov	r0, r7
 810c030:	612e      	str	r6, [r5, #16]
 810c032:	4621      	mov	r1, r4
 810c034:	f7ff fd88 	bl	810bb48 <_Bfree>
 810c038:	4628      	mov	r0, r5
 810c03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c03e:	f842 0f04 	str.w	r0, [r2, #4]!
 810c042:	3301      	adds	r3, #1
 810c044:	e7c1      	b.n	810bfca <__lshift+0x4a>
 810c046:	3904      	subs	r1, #4
 810c048:	f853 2b04 	ldr.w	r2, [r3], #4
 810c04c:	f841 2f04 	str.w	r2, [r1, #4]!
 810c050:	4298      	cmp	r0, r3
 810c052:	d8f9      	bhi.n	810c048 <__lshift+0xc8>
 810c054:	e7ea      	b.n	810c02c <__lshift+0xac>
 810c056:	bf00      	nop
 810c058:	0810d1d0 	.word	0x0810d1d0
 810c05c:	0810d2c0 	.word	0x0810d2c0

0810c060 <__mcmp>:
 810c060:	b530      	push	{r4, r5, lr}
 810c062:	6902      	ldr	r2, [r0, #16]
 810c064:	690c      	ldr	r4, [r1, #16]
 810c066:	1b12      	subs	r2, r2, r4
 810c068:	d10e      	bne.n	810c088 <__mcmp+0x28>
 810c06a:	f100 0314 	add.w	r3, r0, #20
 810c06e:	3114      	adds	r1, #20
 810c070:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c074:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c078:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c07c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c080:	42a5      	cmp	r5, r4
 810c082:	d003      	beq.n	810c08c <__mcmp+0x2c>
 810c084:	d305      	bcc.n	810c092 <__mcmp+0x32>
 810c086:	2201      	movs	r2, #1
 810c088:	4610      	mov	r0, r2
 810c08a:	bd30      	pop	{r4, r5, pc}
 810c08c:	4283      	cmp	r3, r0
 810c08e:	d3f3      	bcc.n	810c078 <__mcmp+0x18>
 810c090:	e7fa      	b.n	810c088 <__mcmp+0x28>
 810c092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c096:	e7f7      	b.n	810c088 <__mcmp+0x28>

0810c098 <__mdiff>:
 810c098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c09c:	460c      	mov	r4, r1
 810c09e:	4606      	mov	r6, r0
 810c0a0:	4611      	mov	r1, r2
 810c0a2:	4620      	mov	r0, r4
 810c0a4:	4690      	mov	r8, r2
 810c0a6:	f7ff ffdb 	bl	810c060 <__mcmp>
 810c0aa:	1e05      	subs	r5, r0, #0
 810c0ac:	d110      	bne.n	810c0d0 <__mdiff+0x38>
 810c0ae:	4629      	mov	r1, r5
 810c0b0:	4630      	mov	r0, r6
 810c0b2:	f7ff fd09 	bl	810bac8 <_Balloc>
 810c0b6:	b930      	cbnz	r0, 810c0c6 <__mdiff+0x2e>
 810c0b8:	4b3a      	ldr	r3, [pc, #232]	; (810c1a4 <__mdiff+0x10c>)
 810c0ba:	4602      	mov	r2, r0
 810c0bc:	f240 2132 	movw	r1, #562	; 0x232
 810c0c0:	4839      	ldr	r0, [pc, #228]	; (810c1a8 <__mdiff+0x110>)
 810c0c2:	f000 fdff 	bl	810ccc4 <__assert_func>
 810c0c6:	2301      	movs	r3, #1
 810c0c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c0cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c0d0:	bfa4      	itt	ge
 810c0d2:	4643      	movge	r3, r8
 810c0d4:	46a0      	movge	r8, r4
 810c0d6:	4630      	mov	r0, r6
 810c0d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c0dc:	bfa6      	itte	ge
 810c0de:	461c      	movge	r4, r3
 810c0e0:	2500      	movge	r5, #0
 810c0e2:	2501      	movlt	r5, #1
 810c0e4:	f7ff fcf0 	bl	810bac8 <_Balloc>
 810c0e8:	b920      	cbnz	r0, 810c0f4 <__mdiff+0x5c>
 810c0ea:	4b2e      	ldr	r3, [pc, #184]	; (810c1a4 <__mdiff+0x10c>)
 810c0ec:	4602      	mov	r2, r0
 810c0ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 810c0f2:	e7e5      	b.n	810c0c0 <__mdiff+0x28>
 810c0f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c0f8:	6926      	ldr	r6, [r4, #16]
 810c0fa:	60c5      	str	r5, [r0, #12]
 810c0fc:	f104 0914 	add.w	r9, r4, #20
 810c100:	f108 0514 	add.w	r5, r8, #20
 810c104:	f100 0e14 	add.w	lr, r0, #20
 810c108:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c10c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c110:	f108 0210 	add.w	r2, r8, #16
 810c114:	46f2      	mov	sl, lr
 810c116:	2100      	movs	r1, #0
 810c118:	f859 3b04 	ldr.w	r3, [r9], #4
 810c11c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c120:	fa1f f883 	uxth.w	r8, r3
 810c124:	fa11 f18b 	uxtah	r1, r1, fp
 810c128:	0c1b      	lsrs	r3, r3, #16
 810c12a:	eba1 0808 	sub.w	r8, r1, r8
 810c12e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c132:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c136:	fa1f f888 	uxth.w	r8, r8
 810c13a:	1419      	asrs	r1, r3, #16
 810c13c:	454e      	cmp	r6, r9
 810c13e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c142:	f84a 3b04 	str.w	r3, [sl], #4
 810c146:	d8e7      	bhi.n	810c118 <__mdiff+0x80>
 810c148:	1b33      	subs	r3, r6, r4
 810c14a:	3b15      	subs	r3, #21
 810c14c:	f023 0303 	bic.w	r3, r3, #3
 810c150:	3304      	adds	r3, #4
 810c152:	3415      	adds	r4, #21
 810c154:	42a6      	cmp	r6, r4
 810c156:	bf38      	it	cc
 810c158:	2304      	movcc	r3, #4
 810c15a:	441d      	add	r5, r3
 810c15c:	4473      	add	r3, lr
 810c15e:	469e      	mov	lr, r3
 810c160:	462e      	mov	r6, r5
 810c162:	4566      	cmp	r6, ip
 810c164:	d30e      	bcc.n	810c184 <__mdiff+0xec>
 810c166:	f10c 0203 	add.w	r2, ip, #3
 810c16a:	1b52      	subs	r2, r2, r5
 810c16c:	f022 0203 	bic.w	r2, r2, #3
 810c170:	3d03      	subs	r5, #3
 810c172:	45ac      	cmp	ip, r5
 810c174:	bf38      	it	cc
 810c176:	2200      	movcc	r2, #0
 810c178:	441a      	add	r2, r3
 810c17a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810c17e:	b17b      	cbz	r3, 810c1a0 <__mdiff+0x108>
 810c180:	6107      	str	r7, [r0, #16]
 810c182:	e7a3      	b.n	810c0cc <__mdiff+0x34>
 810c184:	f856 8b04 	ldr.w	r8, [r6], #4
 810c188:	fa11 f288 	uxtah	r2, r1, r8
 810c18c:	1414      	asrs	r4, r2, #16
 810c18e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810c192:	b292      	uxth	r2, r2
 810c194:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810c198:	f84e 2b04 	str.w	r2, [lr], #4
 810c19c:	1421      	asrs	r1, r4, #16
 810c19e:	e7e0      	b.n	810c162 <__mdiff+0xca>
 810c1a0:	3f01      	subs	r7, #1
 810c1a2:	e7ea      	b.n	810c17a <__mdiff+0xe2>
 810c1a4:	0810d1d0 	.word	0x0810d1d0
 810c1a8:	0810d2c0 	.word	0x0810d2c0

0810c1ac <__ulp>:
 810c1ac:	b082      	sub	sp, #8
 810c1ae:	ed8d 0b00 	vstr	d0, [sp]
 810c1b2:	9b01      	ldr	r3, [sp, #4]
 810c1b4:	4912      	ldr	r1, [pc, #72]	; (810c200 <__ulp+0x54>)
 810c1b6:	4019      	ands	r1, r3
 810c1b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810c1bc:	2900      	cmp	r1, #0
 810c1be:	dd05      	ble.n	810c1cc <__ulp+0x20>
 810c1c0:	2200      	movs	r2, #0
 810c1c2:	460b      	mov	r3, r1
 810c1c4:	ec43 2b10 	vmov	d0, r2, r3
 810c1c8:	b002      	add	sp, #8
 810c1ca:	4770      	bx	lr
 810c1cc:	4249      	negs	r1, r1
 810c1ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810c1d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 810c1d6:	f04f 0200 	mov.w	r2, #0
 810c1da:	f04f 0300 	mov.w	r3, #0
 810c1de:	da04      	bge.n	810c1ea <__ulp+0x3e>
 810c1e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810c1e4:	fa41 f300 	asr.w	r3, r1, r0
 810c1e8:	e7ec      	b.n	810c1c4 <__ulp+0x18>
 810c1ea:	f1a0 0114 	sub.w	r1, r0, #20
 810c1ee:	291e      	cmp	r1, #30
 810c1f0:	bfda      	itte	le
 810c1f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810c1f6:	fa20 f101 	lsrle.w	r1, r0, r1
 810c1fa:	2101      	movgt	r1, #1
 810c1fc:	460a      	mov	r2, r1
 810c1fe:	e7e1      	b.n	810c1c4 <__ulp+0x18>
 810c200:	7ff00000 	.word	0x7ff00000

0810c204 <__b2d>:
 810c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c206:	6905      	ldr	r5, [r0, #16]
 810c208:	f100 0714 	add.w	r7, r0, #20
 810c20c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810c210:	1f2e      	subs	r6, r5, #4
 810c212:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810c216:	4620      	mov	r0, r4
 810c218:	f7ff fd48 	bl	810bcac <__hi0bits>
 810c21c:	f1c0 0320 	rsb	r3, r0, #32
 810c220:	280a      	cmp	r0, #10
 810c222:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810c2a0 <__b2d+0x9c>
 810c226:	600b      	str	r3, [r1, #0]
 810c228:	dc14      	bgt.n	810c254 <__b2d+0x50>
 810c22a:	f1c0 0e0b 	rsb	lr, r0, #11
 810c22e:	fa24 f10e 	lsr.w	r1, r4, lr
 810c232:	42b7      	cmp	r7, r6
 810c234:	ea41 030c 	orr.w	r3, r1, ip
 810c238:	bf34      	ite	cc
 810c23a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c23e:	2100      	movcs	r1, #0
 810c240:	3015      	adds	r0, #21
 810c242:	fa04 f000 	lsl.w	r0, r4, r0
 810c246:	fa21 f10e 	lsr.w	r1, r1, lr
 810c24a:	ea40 0201 	orr.w	r2, r0, r1
 810c24e:	ec43 2b10 	vmov	d0, r2, r3
 810c252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c254:	42b7      	cmp	r7, r6
 810c256:	bf3a      	itte	cc
 810c258:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c25c:	f1a5 0608 	subcc.w	r6, r5, #8
 810c260:	2100      	movcs	r1, #0
 810c262:	380b      	subs	r0, #11
 810c264:	d017      	beq.n	810c296 <__b2d+0x92>
 810c266:	f1c0 0c20 	rsb	ip, r0, #32
 810c26a:	fa04 f500 	lsl.w	r5, r4, r0
 810c26e:	42be      	cmp	r6, r7
 810c270:	fa21 f40c 	lsr.w	r4, r1, ip
 810c274:	ea45 0504 	orr.w	r5, r5, r4
 810c278:	bf8c      	ite	hi
 810c27a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810c27e:	2400      	movls	r4, #0
 810c280:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810c284:	fa01 f000 	lsl.w	r0, r1, r0
 810c288:	fa24 f40c 	lsr.w	r4, r4, ip
 810c28c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810c290:	ea40 0204 	orr.w	r2, r0, r4
 810c294:	e7db      	b.n	810c24e <__b2d+0x4a>
 810c296:	ea44 030c 	orr.w	r3, r4, ip
 810c29a:	460a      	mov	r2, r1
 810c29c:	e7d7      	b.n	810c24e <__b2d+0x4a>
 810c29e:	bf00      	nop
 810c2a0:	3ff00000 	.word	0x3ff00000

0810c2a4 <__d2b>:
 810c2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c2a8:	4689      	mov	r9, r1
 810c2aa:	2101      	movs	r1, #1
 810c2ac:	ec57 6b10 	vmov	r6, r7, d0
 810c2b0:	4690      	mov	r8, r2
 810c2b2:	f7ff fc09 	bl	810bac8 <_Balloc>
 810c2b6:	4604      	mov	r4, r0
 810c2b8:	b930      	cbnz	r0, 810c2c8 <__d2b+0x24>
 810c2ba:	4602      	mov	r2, r0
 810c2bc:	4b25      	ldr	r3, [pc, #148]	; (810c354 <__d2b+0xb0>)
 810c2be:	4826      	ldr	r0, [pc, #152]	; (810c358 <__d2b+0xb4>)
 810c2c0:	f240 310a 	movw	r1, #778	; 0x30a
 810c2c4:	f000 fcfe 	bl	810ccc4 <__assert_func>
 810c2c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810c2cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810c2d0:	bb35      	cbnz	r5, 810c320 <__d2b+0x7c>
 810c2d2:	2e00      	cmp	r6, #0
 810c2d4:	9301      	str	r3, [sp, #4]
 810c2d6:	d028      	beq.n	810c32a <__d2b+0x86>
 810c2d8:	4668      	mov	r0, sp
 810c2da:	9600      	str	r6, [sp, #0]
 810c2dc:	f7ff fd06 	bl	810bcec <__lo0bits>
 810c2e0:	9900      	ldr	r1, [sp, #0]
 810c2e2:	b300      	cbz	r0, 810c326 <__d2b+0x82>
 810c2e4:	9a01      	ldr	r2, [sp, #4]
 810c2e6:	f1c0 0320 	rsb	r3, r0, #32
 810c2ea:	fa02 f303 	lsl.w	r3, r2, r3
 810c2ee:	430b      	orrs	r3, r1
 810c2f0:	40c2      	lsrs	r2, r0
 810c2f2:	6163      	str	r3, [r4, #20]
 810c2f4:	9201      	str	r2, [sp, #4]
 810c2f6:	9b01      	ldr	r3, [sp, #4]
 810c2f8:	61a3      	str	r3, [r4, #24]
 810c2fa:	2b00      	cmp	r3, #0
 810c2fc:	bf14      	ite	ne
 810c2fe:	2202      	movne	r2, #2
 810c300:	2201      	moveq	r2, #1
 810c302:	6122      	str	r2, [r4, #16]
 810c304:	b1d5      	cbz	r5, 810c33c <__d2b+0x98>
 810c306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c30a:	4405      	add	r5, r0
 810c30c:	f8c9 5000 	str.w	r5, [r9]
 810c310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c314:	f8c8 0000 	str.w	r0, [r8]
 810c318:	4620      	mov	r0, r4
 810c31a:	b003      	add	sp, #12
 810c31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c324:	e7d5      	b.n	810c2d2 <__d2b+0x2e>
 810c326:	6161      	str	r1, [r4, #20]
 810c328:	e7e5      	b.n	810c2f6 <__d2b+0x52>
 810c32a:	a801      	add	r0, sp, #4
 810c32c:	f7ff fcde 	bl	810bcec <__lo0bits>
 810c330:	9b01      	ldr	r3, [sp, #4]
 810c332:	6163      	str	r3, [r4, #20]
 810c334:	2201      	movs	r2, #1
 810c336:	6122      	str	r2, [r4, #16]
 810c338:	3020      	adds	r0, #32
 810c33a:	e7e3      	b.n	810c304 <__d2b+0x60>
 810c33c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c344:	f8c9 0000 	str.w	r0, [r9]
 810c348:	6918      	ldr	r0, [r3, #16]
 810c34a:	f7ff fcaf 	bl	810bcac <__hi0bits>
 810c34e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c352:	e7df      	b.n	810c314 <__d2b+0x70>
 810c354:	0810d1d0 	.word	0x0810d1d0
 810c358:	0810d2c0 	.word	0x0810d2c0

0810c35c <__ratio>:
 810c35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c360:	4688      	mov	r8, r1
 810c362:	4669      	mov	r1, sp
 810c364:	4681      	mov	r9, r0
 810c366:	f7ff ff4d 	bl	810c204 <__b2d>
 810c36a:	a901      	add	r1, sp, #4
 810c36c:	4640      	mov	r0, r8
 810c36e:	ec55 4b10 	vmov	r4, r5, d0
 810c372:	f7ff ff47 	bl	810c204 <__b2d>
 810c376:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c37a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c37e:	eba3 0c02 	sub.w	ip, r3, r2
 810c382:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c386:	1a9b      	subs	r3, r3, r2
 810c388:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c38c:	ec51 0b10 	vmov	r0, r1, d0
 810c390:	2b00      	cmp	r3, #0
 810c392:	bfd6      	itet	le
 810c394:	460a      	movle	r2, r1
 810c396:	462a      	movgt	r2, r5
 810c398:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c39c:	468b      	mov	fp, r1
 810c39e:	462f      	mov	r7, r5
 810c3a0:	bfd4      	ite	le
 810c3a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c3a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c3aa:	4620      	mov	r0, r4
 810c3ac:	ee10 2a10 	vmov	r2, s0
 810c3b0:	465b      	mov	r3, fp
 810c3b2:	4639      	mov	r1, r7
 810c3b4:	f7f4 fad2 	bl	810095c <__aeabi_ddiv>
 810c3b8:	ec41 0b10 	vmov	d0, r0, r1
 810c3bc:	b003      	add	sp, #12
 810c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c3c2 <__copybits>:
 810c3c2:	3901      	subs	r1, #1
 810c3c4:	b570      	push	{r4, r5, r6, lr}
 810c3c6:	1149      	asrs	r1, r1, #5
 810c3c8:	6914      	ldr	r4, [r2, #16]
 810c3ca:	3101      	adds	r1, #1
 810c3cc:	f102 0314 	add.w	r3, r2, #20
 810c3d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c3d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c3d8:	1f05      	subs	r5, r0, #4
 810c3da:	42a3      	cmp	r3, r4
 810c3dc:	d30c      	bcc.n	810c3f8 <__copybits+0x36>
 810c3de:	1aa3      	subs	r3, r4, r2
 810c3e0:	3b11      	subs	r3, #17
 810c3e2:	f023 0303 	bic.w	r3, r3, #3
 810c3e6:	3211      	adds	r2, #17
 810c3e8:	42a2      	cmp	r2, r4
 810c3ea:	bf88      	it	hi
 810c3ec:	2300      	movhi	r3, #0
 810c3ee:	4418      	add	r0, r3
 810c3f0:	2300      	movs	r3, #0
 810c3f2:	4288      	cmp	r0, r1
 810c3f4:	d305      	bcc.n	810c402 <__copybits+0x40>
 810c3f6:	bd70      	pop	{r4, r5, r6, pc}
 810c3f8:	f853 6b04 	ldr.w	r6, [r3], #4
 810c3fc:	f845 6f04 	str.w	r6, [r5, #4]!
 810c400:	e7eb      	b.n	810c3da <__copybits+0x18>
 810c402:	f840 3b04 	str.w	r3, [r0], #4
 810c406:	e7f4      	b.n	810c3f2 <__copybits+0x30>

0810c408 <__any_on>:
 810c408:	f100 0214 	add.w	r2, r0, #20
 810c40c:	6900      	ldr	r0, [r0, #16]
 810c40e:	114b      	asrs	r3, r1, #5
 810c410:	4298      	cmp	r0, r3
 810c412:	b510      	push	{r4, lr}
 810c414:	db11      	blt.n	810c43a <__any_on+0x32>
 810c416:	dd0a      	ble.n	810c42e <__any_on+0x26>
 810c418:	f011 011f 	ands.w	r1, r1, #31
 810c41c:	d007      	beq.n	810c42e <__any_on+0x26>
 810c41e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c422:	fa24 f001 	lsr.w	r0, r4, r1
 810c426:	fa00 f101 	lsl.w	r1, r0, r1
 810c42a:	428c      	cmp	r4, r1
 810c42c:	d10b      	bne.n	810c446 <__any_on+0x3e>
 810c42e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c432:	4293      	cmp	r3, r2
 810c434:	d803      	bhi.n	810c43e <__any_on+0x36>
 810c436:	2000      	movs	r0, #0
 810c438:	bd10      	pop	{r4, pc}
 810c43a:	4603      	mov	r3, r0
 810c43c:	e7f7      	b.n	810c42e <__any_on+0x26>
 810c43e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c442:	2900      	cmp	r1, #0
 810c444:	d0f5      	beq.n	810c432 <__any_on+0x2a>
 810c446:	2001      	movs	r0, #1
 810c448:	e7f6      	b.n	810c438 <__any_on+0x30>

0810c44a <_calloc_r>:
 810c44a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c44c:	fba1 2402 	umull	r2, r4, r1, r2
 810c450:	b94c      	cbnz	r4, 810c466 <_calloc_r+0x1c>
 810c452:	4611      	mov	r1, r2
 810c454:	9201      	str	r2, [sp, #4]
 810c456:	f000 f87b 	bl	810c550 <_malloc_r>
 810c45a:	9a01      	ldr	r2, [sp, #4]
 810c45c:	4605      	mov	r5, r0
 810c45e:	b930      	cbnz	r0, 810c46e <_calloc_r+0x24>
 810c460:	4628      	mov	r0, r5
 810c462:	b003      	add	sp, #12
 810c464:	bd30      	pop	{r4, r5, pc}
 810c466:	220c      	movs	r2, #12
 810c468:	6002      	str	r2, [r0, #0]
 810c46a:	2500      	movs	r5, #0
 810c46c:	e7f8      	b.n	810c460 <_calloc_r+0x16>
 810c46e:	4621      	mov	r1, r4
 810c470:	f7fc f852 	bl	8108518 <memset>
 810c474:	e7f4      	b.n	810c460 <_calloc_r+0x16>
	...

0810c478 <_free_r>:
 810c478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c47a:	2900      	cmp	r1, #0
 810c47c:	d044      	beq.n	810c508 <_free_r+0x90>
 810c47e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c482:	9001      	str	r0, [sp, #4]
 810c484:	2b00      	cmp	r3, #0
 810c486:	f1a1 0404 	sub.w	r4, r1, #4
 810c48a:	bfb8      	it	lt
 810c48c:	18e4      	addlt	r4, r4, r3
 810c48e:	f000 fca7 	bl	810cde0 <__malloc_lock>
 810c492:	4a1e      	ldr	r2, [pc, #120]	; (810c50c <_free_r+0x94>)
 810c494:	9801      	ldr	r0, [sp, #4]
 810c496:	6813      	ldr	r3, [r2, #0]
 810c498:	b933      	cbnz	r3, 810c4a8 <_free_r+0x30>
 810c49a:	6063      	str	r3, [r4, #4]
 810c49c:	6014      	str	r4, [r2, #0]
 810c49e:	b003      	add	sp, #12
 810c4a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c4a4:	f000 bca2 	b.w	810cdec <__malloc_unlock>
 810c4a8:	42a3      	cmp	r3, r4
 810c4aa:	d908      	bls.n	810c4be <_free_r+0x46>
 810c4ac:	6825      	ldr	r5, [r4, #0]
 810c4ae:	1961      	adds	r1, r4, r5
 810c4b0:	428b      	cmp	r3, r1
 810c4b2:	bf01      	itttt	eq
 810c4b4:	6819      	ldreq	r1, [r3, #0]
 810c4b6:	685b      	ldreq	r3, [r3, #4]
 810c4b8:	1949      	addeq	r1, r1, r5
 810c4ba:	6021      	streq	r1, [r4, #0]
 810c4bc:	e7ed      	b.n	810c49a <_free_r+0x22>
 810c4be:	461a      	mov	r2, r3
 810c4c0:	685b      	ldr	r3, [r3, #4]
 810c4c2:	b10b      	cbz	r3, 810c4c8 <_free_r+0x50>
 810c4c4:	42a3      	cmp	r3, r4
 810c4c6:	d9fa      	bls.n	810c4be <_free_r+0x46>
 810c4c8:	6811      	ldr	r1, [r2, #0]
 810c4ca:	1855      	adds	r5, r2, r1
 810c4cc:	42a5      	cmp	r5, r4
 810c4ce:	d10b      	bne.n	810c4e8 <_free_r+0x70>
 810c4d0:	6824      	ldr	r4, [r4, #0]
 810c4d2:	4421      	add	r1, r4
 810c4d4:	1854      	adds	r4, r2, r1
 810c4d6:	42a3      	cmp	r3, r4
 810c4d8:	6011      	str	r1, [r2, #0]
 810c4da:	d1e0      	bne.n	810c49e <_free_r+0x26>
 810c4dc:	681c      	ldr	r4, [r3, #0]
 810c4de:	685b      	ldr	r3, [r3, #4]
 810c4e0:	6053      	str	r3, [r2, #4]
 810c4e2:	4421      	add	r1, r4
 810c4e4:	6011      	str	r1, [r2, #0]
 810c4e6:	e7da      	b.n	810c49e <_free_r+0x26>
 810c4e8:	d902      	bls.n	810c4f0 <_free_r+0x78>
 810c4ea:	230c      	movs	r3, #12
 810c4ec:	6003      	str	r3, [r0, #0]
 810c4ee:	e7d6      	b.n	810c49e <_free_r+0x26>
 810c4f0:	6825      	ldr	r5, [r4, #0]
 810c4f2:	1961      	adds	r1, r4, r5
 810c4f4:	428b      	cmp	r3, r1
 810c4f6:	bf04      	itt	eq
 810c4f8:	6819      	ldreq	r1, [r3, #0]
 810c4fa:	685b      	ldreq	r3, [r3, #4]
 810c4fc:	6063      	str	r3, [r4, #4]
 810c4fe:	bf04      	itt	eq
 810c500:	1949      	addeq	r1, r1, r5
 810c502:	6021      	streq	r1, [r4, #0]
 810c504:	6054      	str	r4, [r2, #4]
 810c506:	e7ca      	b.n	810c49e <_free_r+0x26>
 810c508:	b003      	add	sp, #12
 810c50a:	bd30      	pop	{r4, r5, pc}
 810c50c:	10000360 	.word	0x10000360

0810c510 <sbrk_aligned>:
 810c510:	b570      	push	{r4, r5, r6, lr}
 810c512:	4e0e      	ldr	r6, [pc, #56]	; (810c54c <sbrk_aligned+0x3c>)
 810c514:	460c      	mov	r4, r1
 810c516:	6831      	ldr	r1, [r6, #0]
 810c518:	4605      	mov	r5, r0
 810c51a:	b911      	cbnz	r1, 810c522 <sbrk_aligned+0x12>
 810c51c:	f000 fb4c 	bl	810cbb8 <_sbrk_r>
 810c520:	6030      	str	r0, [r6, #0]
 810c522:	4621      	mov	r1, r4
 810c524:	4628      	mov	r0, r5
 810c526:	f000 fb47 	bl	810cbb8 <_sbrk_r>
 810c52a:	1c43      	adds	r3, r0, #1
 810c52c:	d00a      	beq.n	810c544 <sbrk_aligned+0x34>
 810c52e:	1cc4      	adds	r4, r0, #3
 810c530:	f024 0403 	bic.w	r4, r4, #3
 810c534:	42a0      	cmp	r0, r4
 810c536:	d007      	beq.n	810c548 <sbrk_aligned+0x38>
 810c538:	1a21      	subs	r1, r4, r0
 810c53a:	4628      	mov	r0, r5
 810c53c:	f000 fb3c 	bl	810cbb8 <_sbrk_r>
 810c540:	3001      	adds	r0, #1
 810c542:	d101      	bne.n	810c548 <sbrk_aligned+0x38>
 810c544:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810c548:	4620      	mov	r0, r4
 810c54a:	bd70      	pop	{r4, r5, r6, pc}
 810c54c:	10000364 	.word	0x10000364

0810c550 <_malloc_r>:
 810c550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c554:	1ccd      	adds	r5, r1, #3
 810c556:	f025 0503 	bic.w	r5, r5, #3
 810c55a:	3508      	adds	r5, #8
 810c55c:	2d0c      	cmp	r5, #12
 810c55e:	bf38      	it	cc
 810c560:	250c      	movcc	r5, #12
 810c562:	2d00      	cmp	r5, #0
 810c564:	4607      	mov	r7, r0
 810c566:	db01      	blt.n	810c56c <_malloc_r+0x1c>
 810c568:	42a9      	cmp	r1, r5
 810c56a:	d905      	bls.n	810c578 <_malloc_r+0x28>
 810c56c:	230c      	movs	r3, #12
 810c56e:	603b      	str	r3, [r7, #0]
 810c570:	2600      	movs	r6, #0
 810c572:	4630      	mov	r0, r6
 810c574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c578:	4e2e      	ldr	r6, [pc, #184]	; (810c634 <_malloc_r+0xe4>)
 810c57a:	f000 fc31 	bl	810cde0 <__malloc_lock>
 810c57e:	6833      	ldr	r3, [r6, #0]
 810c580:	461c      	mov	r4, r3
 810c582:	bb34      	cbnz	r4, 810c5d2 <_malloc_r+0x82>
 810c584:	4629      	mov	r1, r5
 810c586:	4638      	mov	r0, r7
 810c588:	f7ff ffc2 	bl	810c510 <sbrk_aligned>
 810c58c:	1c43      	adds	r3, r0, #1
 810c58e:	4604      	mov	r4, r0
 810c590:	d14d      	bne.n	810c62e <_malloc_r+0xde>
 810c592:	6834      	ldr	r4, [r6, #0]
 810c594:	4626      	mov	r6, r4
 810c596:	2e00      	cmp	r6, #0
 810c598:	d140      	bne.n	810c61c <_malloc_r+0xcc>
 810c59a:	6823      	ldr	r3, [r4, #0]
 810c59c:	4631      	mov	r1, r6
 810c59e:	4638      	mov	r0, r7
 810c5a0:	eb04 0803 	add.w	r8, r4, r3
 810c5a4:	f000 fb08 	bl	810cbb8 <_sbrk_r>
 810c5a8:	4580      	cmp	r8, r0
 810c5aa:	d13a      	bne.n	810c622 <_malloc_r+0xd2>
 810c5ac:	6821      	ldr	r1, [r4, #0]
 810c5ae:	3503      	adds	r5, #3
 810c5b0:	1a6d      	subs	r5, r5, r1
 810c5b2:	f025 0503 	bic.w	r5, r5, #3
 810c5b6:	3508      	adds	r5, #8
 810c5b8:	2d0c      	cmp	r5, #12
 810c5ba:	bf38      	it	cc
 810c5bc:	250c      	movcc	r5, #12
 810c5be:	4629      	mov	r1, r5
 810c5c0:	4638      	mov	r0, r7
 810c5c2:	f7ff ffa5 	bl	810c510 <sbrk_aligned>
 810c5c6:	3001      	adds	r0, #1
 810c5c8:	d02b      	beq.n	810c622 <_malloc_r+0xd2>
 810c5ca:	6823      	ldr	r3, [r4, #0]
 810c5cc:	442b      	add	r3, r5
 810c5ce:	6023      	str	r3, [r4, #0]
 810c5d0:	e00e      	b.n	810c5f0 <_malloc_r+0xa0>
 810c5d2:	6822      	ldr	r2, [r4, #0]
 810c5d4:	1b52      	subs	r2, r2, r5
 810c5d6:	d41e      	bmi.n	810c616 <_malloc_r+0xc6>
 810c5d8:	2a0b      	cmp	r2, #11
 810c5da:	d916      	bls.n	810c60a <_malloc_r+0xba>
 810c5dc:	1961      	adds	r1, r4, r5
 810c5de:	42a3      	cmp	r3, r4
 810c5e0:	6025      	str	r5, [r4, #0]
 810c5e2:	bf18      	it	ne
 810c5e4:	6059      	strne	r1, [r3, #4]
 810c5e6:	6863      	ldr	r3, [r4, #4]
 810c5e8:	bf08      	it	eq
 810c5ea:	6031      	streq	r1, [r6, #0]
 810c5ec:	5162      	str	r2, [r4, r5]
 810c5ee:	604b      	str	r3, [r1, #4]
 810c5f0:	4638      	mov	r0, r7
 810c5f2:	f104 060b 	add.w	r6, r4, #11
 810c5f6:	f000 fbf9 	bl	810cdec <__malloc_unlock>
 810c5fa:	f026 0607 	bic.w	r6, r6, #7
 810c5fe:	1d23      	adds	r3, r4, #4
 810c600:	1af2      	subs	r2, r6, r3
 810c602:	d0b6      	beq.n	810c572 <_malloc_r+0x22>
 810c604:	1b9b      	subs	r3, r3, r6
 810c606:	50a3      	str	r3, [r4, r2]
 810c608:	e7b3      	b.n	810c572 <_malloc_r+0x22>
 810c60a:	6862      	ldr	r2, [r4, #4]
 810c60c:	42a3      	cmp	r3, r4
 810c60e:	bf0c      	ite	eq
 810c610:	6032      	streq	r2, [r6, #0]
 810c612:	605a      	strne	r2, [r3, #4]
 810c614:	e7ec      	b.n	810c5f0 <_malloc_r+0xa0>
 810c616:	4623      	mov	r3, r4
 810c618:	6864      	ldr	r4, [r4, #4]
 810c61a:	e7b2      	b.n	810c582 <_malloc_r+0x32>
 810c61c:	4634      	mov	r4, r6
 810c61e:	6876      	ldr	r6, [r6, #4]
 810c620:	e7b9      	b.n	810c596 <_malloc_r+0x46>
 810c622:	230c      	movs	r3, #12
 810c624:	603b      	str	r3, [r7, #0]
 810c626:	4638      	mov	r0, r7
 810c628:	f000 fbe0 	bl	810cdec <__malloc_unlock>
 810c62c:	e7a1      	b.n	810c572 <_malloc_r+0x22>
 810c62e:	6025      	str	r5, [r4, #0]
 810c630:	e7de      	b.n	810c5f0 <_malloc_r+0xa0>
 810c632:	bf00      	nop
 810c634:	10000360 	.word	0x10000360

0810c638 <__ssputs_r>:
 810c638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c63c:	688e      	ldr	r6, [r1, #8]
 810c63e:	429e      	cmp	r6, r3
 810c640:	4682      	mov	sl, r0
 810c642:	460c      	mov	r4, r1
 810c644:	4690      	mov	r8, r2
 810c646:	461f      	mov	r7, r3
 810c648:	d838      	bhi.n	810c6bc <__ssputs_r+0x84>
 810c64a:	898a      	ldrh	r2, [r1, #12]
 810c64c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c650:	d032      	beq.n	810c6b8 <__ssputs_r+0x80>
 810c652:	6825      	ldr	r5, [r4, #0]
 810c654:	6909      	ldr	r1, [r1, #16]
 810c656:	eba5 0901 	sub.w	r9, r5, r1
 810c65a:	6965      	ldr	r5, [r4, #20]
 810c65c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c664:	3301      	adds	r3, #1
 810c666:	444b      	add	r3, r9
 810c668:	106d      	asrs	r5, r5, #1
 810c66a:	429d      	cmp	r5, r3
 810c66c:	bf38      	it	cc
 810c66e:	461d      	movcc	r5, r3
 810c670:	0553      	lsls	r3, r2, #21
 810c672:	d531      	bpl.n	810c6d8 <__ssputs_r+0xa0>
 810c674:	4629      	mov	r1, r5
 810c676:	f7ff ff6b 	bl	810c550 <_malloc_r>
 810c67a:	4606      	mov	r6, r0
 810c67c:	b950      	cbnz	r0, 810c694 <__ssputs_r+0x5c>
 810c67e:	230c      	movs	r3, #12
 810c680:	f8ca 3000 	str.w	r3, [sl]
 810c684:	89a3      	ldrh	r3, [r4, #12]
 810c686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c68a:	81a3      	strh	r3, [r4, #12]
 810c68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c694:	6921      	ldr	r1, [r4, #16]
 810c696:	464a      	mov	r2, r9
 810c698:	f7ff fa08 	bl	810baac <memcpy>
 810c69c:	89a3      	ldrh	r3, [r4, #12]
 810c69e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c6a6:	81a3      	strh	r3, [r4, #12]
 810c6a8:	6126      	str	r6, [r4, #16]
 810c6aa:	6165      	str	r5, [r4, #20]
 810c6ac:	444e      	add	r6, r9
 810c6ae:	eba5 0509 	sub.w	r5, r5, r9
 810c6b2:	6026      	str	r6, [r4, #0]
 810c6b4:	60a5      	str	r5, [r4, #8]
 810c6b6:	463e      	mov	r6, r7
 810c6b8:	42be      	cmp	r6, r7
 810c6ba:	d900      	bls.n	810c6be <__ssputs_r+0x86>
 810c6bc:	463e      	mov	r6, r7
 810c6be:	6820      	ldr	r0, [r4, #0]
 810c6c0:	4632      	mov	r2, r6
 810c6c2:	4641      	mov	r1, r8
 810c6c4:	f000 fb72 	bl	810cdac <memmove>
 810c6c8:	68a3      	ldr	r3, [r4, #8]
 810c6ca:	1b9b      	subs	r3, r3, r6
 810c6cc:	60a3      	str	r3, [r4, #8]
 810c6ce:	6823      	ldr	r3, [r4, #0]
 810c6d0:	4433      	add	r3, r6
 810c6d2:	6023      	str	r3, [r4, #0]
 810c6d4:	2000      	movs	r0, #0
 810c6d6:	e7db      	b.n	810c690 <__ssputs_r+0x58>
 810c6d8:	462a      	mov	r2, r5
 810c6da:	f000 fb8d 	bl	810cdf8 <_realloc_r>
 810c6de:	4606      	mov	r6, r0
 810c6e0:	2800      	cmp	r0, #0
 810c6e2:	d1e1      	bne.n	810c6a8 <__ssputs_r+0x70>
 810c6e4:	6921      	ldr	r1, [r4, #16]
 810c6e6:	4650      	mov	r0, sl
 810c6e8:	f7ff fec6 	bl	810c478 <_free_r>
 810c6ec:	e7c7      	b.n	810c67e <__ssputs_r+0x46>
	...

0810c6f0 <_svfiprintf_r>:
 810c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c6f4:	4698      	mov	r8, r3
 810c6f6:	898b      	ldrh	r3, [r1, #12]
 810c6f8:	061b      	lsls	r3, r3, #24
 810c6fa:	b09d      	sub	sp, #116	; 0x74
 810c6fc:	4607      	mov	r7, r0
 810c6fe:	460d      	mov	r5, r1
 810c700:	4614      	mov	r4, r2
 810c702:	d50e      	bpl.n	810c722 <_svfiprintf_r+0x32>
 810c704:	690b      	ldr	r3, [r1, #16]
 810c706:	b963      	cbnz	r3, 810c722 <_svfiprintf_r+0x32>
 810c708:	2140      	movs	r1, #64	; 0x40
 810c70a:	f7ff ff21 	bl	810c550 <_malloc_r>
 810c70e:	6028      	str	r0, [r5, #0]
 810c710:	6128      	str	r0, [r5, #16]
 810c712:	b920      	cbnz	r0, 810c71e <_svfiprintf_r+0x2e>
 810c714:	230c      	movs	r3, #12
 810c716:	603b      	str	r3, [r7, #0]
 810c718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c71c:	e0d1      	b.n	810c8c2 <_svfiprintf_r+0x1d2>
 810c71e:	2340      	movs	r3, #64	; 0x40
 810c720:	616b      	str	r3, [r5, #20]
 810c722:	2300      	movs	r3, #0
 810c724:	9309      	str	r3, [sp, #36]	; 0x24
 810c726:	2320      	movs	r3, #32
 810c728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c72c:	f8cd 800c 	str.w	r8, [sp, #12]
 810c730:	2330      	movs	r3, #48	; 0x30
 810c732:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810c8dc <_svfiprintf_r+0x1ec>
 810c736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c73a:	f04f 0901 	mov.w	r9, #1
 810c73e:	4623      	mov	r3, r4
 810c740:	469a      	mov	sl, r3
 810c742:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c746:	b10a      	cbz	r2, 810c74c <_svfiprintf_r+0x5c>
 810c748:	2a25      	cmp	r2, #37	; 0x25
 810c74a:	d1f9      	bne.n	810c740 <_svfiprintf_r+0x50>
 810c74c:	ebba 0b04 	subs.w	fp, sl, r4
 810c750:	d00b      	beq.n	810c76a <_svfiprintf_r+0x7a>
 810c752:	465b      	mov	r3, fp
 810c754:	4622      	mov	r2, r4
 810c756:	4629      	mov	r1, r5
 810c758:	4638      	mov	r0, r7
 810c75a:	f7ff ff6d 	bl	810c638 <__ssputs_r>
 810c75e:	3001      	adds	r0, #1
 810c760:	f000 80aa 	beq.w	810c8b8 <_svfiprintf_r+0x1c8>
 810c764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c766:	445a      	add	r2, fp
 810c768:	9209      	str	r2, [sp, #36]	; 0x24
 810c76a:	f89a 3000 	ldrb.w	r3, [sl]
 810c76e:	2b00      	cmp	r3, #0
 810c770:	f000 80a2 	beq.w	810c8b8 <_svfiprintf_r+0x1c8>
 810c774:	2300      	movs	r3, #0
 810c776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c77e:	f10a 0a01 	add.w	sl, sl, #1
 810c782:	9304      	str	r3, [sp, #16]
 810c784:	9307      	str	r3, [sp, #28]
 810c786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c78a:	931a      	str	r3, [sp, #104]	; 0x68
 810c78c:	4654      	mov	r4, sl
 810c78e:	2205      	movs	r2, #5
 810c790:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c794:	4851      	ldr	r0, [pc, #324]	; (810c8dc <_svfiprintf_r+0x1ec>)
 810c796:	f7f3 fdab 	bl	81002f0 <memchr>
 810c79a:	9a04      	ldr	r2, [sp, #16]
 810c79c:	b9d8      	cbnz	r0, 810c7d6 <_svfiprintf_r+0xe6>
 810c79e:	06d0      	lsls	r0, r2, #27
 810c7a0:	bf44      	itt	mi
 810c7a2:	2320      	movmi	r3, #32
 810c7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c7a8:	0711      	lsls	r1, r2, #28
 810c7aa:	bf44      	itt	mi
 810c7ac:	232b      	movmi	r3, #43	; 0x2b
 810c7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c7b2:	f89a 3000 	ldrb.w	r3, [sl]
 810c7b6:	2b2a      	cmp	r3, #42	; 0x2a
 810c7b8:	d015      	beq.n	810c7e6 <_svfiprintf_r+0xf6>
 810c7ba:	9a07      	ldr	r2, [sp, #28]
 810c7bc:	4654      	mov	r4, sl
 810c7be:	2000      	movs	r0, #0
 810c7c0:	f04f 0c0a 	mov.w	ip, #10
 810c7c4:	4621      	mov	r1, r4
 810c7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c7ca:	3b30      	subs	r3, #48	; 0x30
 810c7cc:	2b09      	cmp	r3, #9
 810c7ce:	d94e      	bls.n	810c86e <_svfiprintf_r+0x17e>
 810c7d0:	b1b0      	cbz	r0, 810c800 <_svfiprintf_r+0x110>
 810c7d2:	9207      	str	r2, [sp, #28]
 810c7d4:	e014      	b.n	810c800 <_svfiprintf_r+0x110>
 810c7d6:	eba0 0308 	sub.w	r3, r0, r8
 810c7da:	fa09 f303 	lsl.w	r3, r9, r3
 810c7de:	4313      	orrs	r3, r2
 810c7e0:	9304      	str	r3, [sp, #16]
 810c7e2:	46a2      	mov	sl, r4
 810c7e4:	e7d2      	b.n	810c78c <_svfiprintf_r+0x9c>
 810c7e6:	9b03      	ldr	r3, [sp, #12]
 810c7e8:	1d19      	adds	r1, r3, #4
 810c7ea:	681b      	ldr	r3, [r3, #0]
 810c7ec:	9103      	str	r1, [sp, #12]
 810c7ee:	2b00      	cmp	r3, #0
 810c7f0:	bfbb      	ittet	lt
 810c7f2:	425b      	neglt	r3, r3
 810c7f4:	f042 0202 	orrlt.w	r2, r2, #2
 810c7f8:	9307      	strge	r3, [sp, #28]
 810c7fa:	9307      	strlt	r3, [sp, #28]
 810c7fc:	bfb8      	it	lt
 810c7fe:	9204      	strlt	r2, [sp, #16]
 810c800:	7823      	ldrb	r3, [r4, #0]
 810c802:	2b2e      	cmp	r3, #46	; 0x2e
 810c804:	d10c      	bne.n	810c820 <_svfiprintf_r+0x130>
 810c806:	7863      	ldrb	r3, [r4, #1]
 810c808:	2b2a      	cmp	r3, #42	; 0x2a
 810c80a:	d135      	bne.n	810c878 <_svfiprintf_r+0x188>
 810c80c:	9b03      	ldr	r3, [sp, #12]
 810c80e:	1d1a      	adds	r2, r3, #4
 810c810:	681b      	ldr	r3, [r3, #0]
 810c812:	9203      	str	r2, [sp, #12]
 810c814:	2b00      	cmp	r3, #0
 810c816:	bfb8      	it	lt
 810c818:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810c81c:	3402      	adds	r4, #2
 810c81e:	9305      	str	r3, [sp, #20]
 810c820:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810c8ec <_svfiprintf_r+0x1fc>
 810c824:	7821      	ldrb	r1, [r4, #0]
 810c826:	2203      	movs	r2, #3
 810c828:	4650      	mov	r0, sl
 810c82a:	f7f3 fd61 	bl	81002f0 <memchr>
 810c82e:	b140      	cbz	r0, 810c842 <_svfiprintf_r+0x152>
 810c830:	2340      	movs	r3, #64	; 0x40
 810c832:	eba0 000a 	sub.w	r0, r0, sl
 810c836:	fa03 f000 	lsl.w	r0, r3, r0
 810c83a:	9b04      	ldr	r3, [sp, #16]
 810c83c:	4303      	orrs	r3, r0
 810c83e:	3401      	adds	r4, #1
 810c840:	9304      	str	r3, [sp, #16]
 810c842:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c846:	4826      	ldr	r0, [pc, #152]	; (810c8e0 <_svfiprintf_r+0x1f0>)
 810c848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c84c:	2206      	movs	r2, #6
 810c84e:	f7f3 fd4f 	bl	81002f0 <memchr>
 810c852:	2800      	cmp	r0, #0
 810c854:	d038      	beq.n	810c8c8 <_svfiprintf_r+0x1d8>
 810c856:	4b23      	ldr	r3, [pc, #140]	; (810c8e4 <_svfiprintf_r+0x1f4>)
 810c858:	bb1b      	cbnz	r3, 810c8a2 <_svfiprintf_r+0x1b2>
 810c85a:	9b03      	ldr	r3, [sp, #12]
 810c85c:	3307      	adds	r3, #7
 810c85e:	f023 0307 	bic.w	r3, r3, #7
 810c862:	3308      	adds	r3, #8
 810c864:	9303      	str	r3, [sp, #12]
 810c866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c868:	4433      	add	r3, r6
 810c86a:	9309      	str	r3, [sp, #36]	; 0x24
 810c86c:	e767      	b.n	810c73e <_svfiprintf_r+0x4e>
 810c86e:	fb0c 3202 	mla	r2, ip, r2, r3
 810c872:	460c      	mov	r4, r1
 810c874:	2001      	movs	r0, #1
 810c876:	e7a5      	b.n	810c7c4 <_svfiprintf_r+0xd4>
 810c878:	2300      	movs	r3, #0
 810c87a:	3401      	adds	r4, #1
 810c87c:	9305      	str	r3, [sp, #20]
 810c87e:	4619      	mov	r1, r3
 810c880:	f04f 0c0a 	mov.w	ip, #10
 810c884:	4620      	mov	r0, r4
 810c886:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c88a:	3a30      	subs	r2, #48	; 0x30
 810c88c:	2a09      	cmp	r2, #9
 810c88e:	d903      	bls.n	810c898 <_svfiprintf_r+0x1a8>
 810c890:	2b00      	cmp	r3, #0
 810c892:	d0c5      	beq.n	810c820 <_svfiprintf_r+0x130>
 810c894:	9105      	str	r1, [sp, #20]
 810c896:	e7c3      	b.n	810c820 <_svfiprintf_r+0x130>
 810c898:	fb0c 2101 	mla	r1, ip, r1, r2
 810c89c:	4604      	mov	r4, r0
 810c89e:	2301      	movs	r3, #1
 810c8a0:	e7f0      	b.n	810c884 <_svfiprintf_r+0x194>
 810c8a2:	ab03      	add	r3, sp, #12
 810c8a4:	9300      	str	r3, [sp, #0]
 810c8a6:	462a      	mov	r2, r5
 810c8a8:	4b0f      	ldr	r3, [pc, #60]	; (810c8e8 <_svfiprintf_r+0x1f8>)
 810c8aa:	a904      	add	r1, sp, #16
 810c8ac:	4638      	mov	r0, r7
 810c8ae:	f7fb fedb 	bl	8108668 <_printf_float>
 810c8b2:	1c42      	adds	r2, r0, #1
 810c8b4:	4606      	mov	r6, r0
 810c8b6:	d1d6      	bne.n	810c866 <_svfiprintf_r+0x176>
 810c8b8:	89ab      	ldrh	r3, [r5, #12]
 810c8ba:	065b      	lsls	r3, r3, #25
 810c8bc:	f53f af2c 	bmi.w	810c718 <_svfiprintf_r+0x28>
 810c8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c8c2:	b01d      	add	sp, #116	; 0x74
 810c8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c8c8:	ab03      	add	r3, sp, #12
 810c8ca:	9300      	str	r3, [sp, #0]
 810c8cc:	462a      	mov	r2, r5
 810c8ce:	4b06      	ldr	r3, [pc, #24]	; (810c8e8 <_svfiprintf_r+0x1f8>)
 810c8d0:	a904      	add	r1, sp, #16
 810c8d2:	4638      	mov	r0, r7
 810c8d4:	f7fc f96c 	bl	8108bb0 <_printf_i>
 810c8d8:	e7eb      	b.n	810c8b2 <_svfiprintf_r+0x1c2>
 810c8da:	bf00      	nop
 810c8dc:	0810d41c 	.word	0x0810d41c
 810c8e0:	0810d426 	.word	0x0810d426
 810c8e4:	08108669 	.word	0x08108669
 810c8e8:	0810c639 	.word	0x0810c639
 810c8ec:	0810d422 	.word	0x0810d422

0810c8f0 <__sfputc_r>:
 810c8f0:	6893      	ldr	r3, [r2, #8]
 810c8f2:	3b01      	subs	r3, #1
 810c8f4:	2b00      	cmp	r3, #0
 810c8f6:	b410      	push	{r4}
 810c8f8:	6093      	str	r3, [r2, #8]
 810c8fa:	da08      	bge.n	810c90e <__sfputc_r+0x1e>
 810c8fc:	6994      	ldr	r4, [r2, #24]
 810c8fe:	42a3      	cmp	r3, r4
 810c900:	db01      	blt.n	810c906 <__sfputc_r+0x16>
 810c902:	290a      	cmp	r1, #10
 810c904:	d103      	bne.n	810c90e <__sfputc_r+0x1e>
 810c906:	f85d 4b04 	ldr.w	r4, [sp], #4
 810c90a:	f7fd bbe9 	b.w	810a0e0 <__swbuf_r>
 810c90e:	6813      	ldr	r3, [r2, #0]
 810c910:	1c58      	adds	r0, r3, #1
 810c912:	6010      	str	r0, [r2, #0]
 810c914:	7019      	strb	r1, [r3, #0]
 810c916:	4608      	mov	r0, r1
 810c918:	f85d 4b04 	ldr.w	r4, [sp], #4
 810c91c:	4770      	bx	lr

0810c91e <__sfputs_r>:
 810c91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c920:	4606      	mov	r6, r0
 810c922:	460f      	mov	r7, r1
 810c924:	4614      	mov	r4, r2
 810c926:	18d5      	adds	r5, r2, r3
 810c928:	42ac      	cmp	r4, r5
 810c92a:	d101      	bne.n	810c930 <__sfputs_r+0x12>
 810c92c:	2000      	movs	r0, #0
 810c92e:	e007      	b.n	810c940 <__sfputs_r+0x22>
 810c930:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c934:	463a      	mov	r2, r7
 810c936:	4630      	mov	r0, r6
 810c938:	f7ff ffda 	bl	810c8f0 <__sfputc_r>
 810c93c:	1c43      	adds	r3, r0, #1
 810c93e:	d1f3      	bne.n	810c928 <__sfputs_r+0xa>
 810c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810c944 <_vfiprintf_r>:
 810c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c948:	460d      	mov	r5, r1
 810c94a:	b09d      	sub	sp, #116	; 0x74
 810c94c:	4614      	mov	r4, r2
 810c94e:	4698      	mov	r8, r3
 810c950:	4606      	mov	r6, r0
 810c952:	b118      	cbz	r0, 810c95c <_vfiprintf_r+0x18>
 810c954:	6983      	ldr	r3, [r0, #24]
 810c956:	b90b      	cbnz	r3, 810c95c <_vfiprintf_r+0x18>
 810c958:	f7fe fc16 	bl	810b188 <__sinit>
 810c95c:	4b89      	ldr	r3, [pc, #548]	; (810cb84 <_vfiprintf_r+0x240>)
 810c95e:	429d      	cmp	r5, r3
 810c960:	d11b      	bne.n	810c99a <_vfiprintf_r+0x56>
 810c962:	6875      	ldr	r5, [r6, #4]
 810c964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c966:	07d9      	lsls	r1, r3, #31
 810c968:	d405      	bmi.n	810c976 <_vfiprintf_r+0x32>
 810c96a:	89ab      	ldrh	r3, [r5, #12]
 810c96c:	059a      	lsls	r2, r3, #22
 810c96e:	d402      	bmi.n	810c976 <_vfiprintf_r+0x32>
 810c970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c972:	f7ff f81a 	bl	810b9aa <__retarget_lock_acquire_recursive>
 810c976:	89ab      	ldrh	r3, [r5, #12]
 810c978:	071b      	lsls	r3, r3, #28
 810c97a:	d501      	bpl.n	810c980 <_vfiprintf_r+0x3c>
 810c97c:	692b      	ldr	r3, [r5, #16]
 810c97e:	b9eb      	cbnz	r3, 810c9bc <_vfiprintf_r+0x78>
 810c980:	4629      	mov	r1, r5
 810c982:	4630      	mov	r0, r6
 810c984:	f7fd fbfe 	bl	810a184 <__swsetup_r>
 810c988:	b1c0      	cbz	r0, 810c9bc <_vfiprintf_r+0x78>
 810c98a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c98c:	07dc      	lsls	r4, r3, #31
 810c98e:	d50e      	bpl.n	810c9ae <_vfiprintf_r+0x6a>
 810c990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c994:	b01d      	add	sp, #116	; 0x74
 810c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c99a:	4b7b      	ldr	r3, [pc, #492]	; (810cb88 <_vfiprintf_r+0x244>)
 810c99c:	429d      	cmp	r5, r3
 810c99e:	d101      	bne.n	810c9a4 <_vfiprintf_r+0x60>
 810c9a0:	68b5      	ldr	r5, [r6, #8]
 810c9a2:	e7df      	b.n	810c964 <_vfiprintf_r+0x20>
 810c9a4:	4b79      	ldr	r3, [pc, #484]	; (810cb8c <_vfiprintf_r+0x248>)
 810c9a6:	429d      	cmp	r5, r3
 810c9a8:	bf08      	it	eq
 810c9aa:	68f5      	ldreq	r5, [r6, #12]
 810c9ac:	e7da      	b.n	810c964 <_vfiprintf_r+0x20>
 810c9ae:	89ab      	ldrh	r3, [r5, #12]
 810c9b0:	0598      	lsls	r0, r3, #22
 810c9b2:	d4ed      	bmi.n	810c990 <_vfiprintf_r+0x4c>
 810c9b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c9b6:	f7fe fff9 	bl	810b9ac <__retarget_lock_release_recursive>
 810c9ba:	e7e9      	b.n	810c990 <_vfiprintf_r+0x4c>
 810c9bc:	2300      	movs	r3, #0
 810c9be:	9309      	str	r3, [sp, #36]	; 0x24
 810c9c0:	2320      	movs	r3, #32
 810c9c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c9c6:	f8cd 800c 	str.w	r8, [sp, #12]
 810c9ca:	2330      	movs	r3, #48	; 0x30
 810c9cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810cb90 <_vfiprintf_r+0x24c>
 810c9d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c9d4:	f04f 0901 	mov.w	r9, #1
 810c9d8:	4623      	mov	r3, r4
 810c9da:	469a      	mov	sl, r3
 810c9dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c9e0:	b10a      	cbz	r2, 810c9e6 <_vfiprintf_r+0xa2>
 810c9e2:	2a25      	cmp	r2, #37	; 0x25
 810c9e4:	d1f9      	bne.n	810c9da <_vfiprintf_r+0x96>
 810c9e6:	ebba 0b04 	subs.w	fp, sl, r4
 810c9ea:	d00b      	beq.n	810ca04 <_vfiprintf_r+0xc0>
 810c9ec:	465b      	mov	r3, fp
 810c9ee:	4622      	mov	r2, r4
 810c9f0:	4629      	mov	r1, r5
 810c9f2:	4630      	mov	r0, r6
 810c9f4:	f7ff ff93 	bl	810c91e <__sfputs_r>
 810c9f8:	3001      	adds	r0, #1
 810c9fa:	f000 80aa 	beq.w	810cb52 <_vfiprintf_r+0x20e>
 810c9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ca00:	445a      	add	r2, fp
 810ca02:	9209      	str	r2, [sp, #36]	; 0x24
 810ca04:	f89a 3000 	ldrb.w	r3, [sl]
 810ca08:	2b00      	cmp	r3, #0
 810ca0a:	f000 80a2 	beq.w	810cb52 <_vfiprintf_r+0x20e>
 810ca0e:	2300      	movs	r3, #0
 810ca10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ca14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ca18:	f10a 0a01 	add.w	sl, sl, #1
 810ca1c:	9304      	str	r3, [sp, #16]
 810ca1e:	9307      	str	r3, [sp, #28]
 810ca20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ca24:	931a      	str	r3, [sp, #104]	; 0x68
 810ca26:	4654      	mov	r4, sl
 810ca28:	2205      	movs	r2, #5
 810ca2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ca2e:	4858      	ldr	r0, [pc, #352]	; (810cb90 <_vfiprintf_r+0x24c>)
 810ca30:	f7f3 fc5e 	bl	81002f0 <memchr>
 810ca34:	9a04      	ldr	r2, [sp, #16]
 810ca36:	b9d8      	cbnz	r0, 810ca70 <_vfiprintf_r+0x12c>
 810ca38:	06d1      	lsls	r1, r2, #27
 810ca3a:	bf44      	itt	mi
 810ca3c:	2320      	movmi	r3, #32
 810ca3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ca42:	0713      	lsls	r3, r2, #28
 810ca44:	bf44      	itt	mi
 810ca46:	232b      	movmi	r3, #43	; 0x2b
 810ca48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ca4c:	f89a 3000 	ldrb.w	r3, [sl]
 810ca50:	2b2a      	cmp	r3, #42	; 0x2a
 810ca52:	d015      	beq.n	810ca80 <_vfiprintf_r+0x13c>
 810ca54:	9a07      	ldr	r2, [sp, #28]
 810ca56:	4654      	mov	r4, sl
 810ca58:	2000      	movs	r0, #0
 810ca5a:	f04f 0c0a 	mov.w	ip, #10
 810ca5e:	4621      	mov	r1, r4
 810ca60:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ca64:	3b30      	subs	r3, #48	; 0x30
 810ca66:	2b09      	cmp	r3, #9
 810ca68:	d94e      	bls.n	810cb08 <_vfiprintf_r+0x1c4>
 810ca6a:	b1b0      	cbz	r0, 810ca9a <_vfiprintf_r+0x156>
 810ca6c:	9207      	str	r2, [sp, #28]
 810ca6e:	e014      	b.n	810ca9a <_vfiprintf_r+0x156>
 810ca70:	eba0 0308 	sub.w	r3, r0, r8
 810ca74:	fa09 f303 	lsl.w	r3, r9, r3
 810ca78:	4313      	orrs	r3, r2
 810ca7a:	9304      	str	r3, [sp, #16]
 810ca7c:	46a2      	mov	sl, r4
 810ca7e:	e7d2      	b.n	810ca26 <_vfiprintf_r+0xe2>
 810ca80:	9b03      	ldr	r3, [sp, #12]
 810ca82:	1d19      	adds	r1, r3, #4
 810ca84:	681b      	ldr	r3, [r3, #0]
 810ca86:	9103      	str	r1, [sp, #12]
 810ca88:	2b00      	cmp	r3, #0
 810ca8a:	bfbb      	ittet	lt
 810ca8c:	425b      	neglt	r3, r3
 810ca8e:	f042 0202 	orrlt.w	r2, r2, #2
 810ca92:	9307      	strge	r3, [sp, #28]
 810ca94:	9307      	strlt	r3, [sp, #28]
 810ca96:	bfb8      	it	lt
 810ca98:	9204      	strlt	r2, [sp, #16]
 810ca9a:	7823      	ldrb	r3, [r4, #0]
 810ca9c:	2b2e      	cmp	r3, #46	; 0x2e
 810ca9e:	d10c      	bne.n	810caba <_vfiprintf_r+0x176>
 810caa0:	7863      	ldrb	r3, [r4, #1]
 810caa2:	2b2a      	cmp	r3, #42	; 0x2a
 810caa4:	d135      	bne.n	810cb12 <_vfiprintf_r+0x1ce>
 810caa6:	9b03      	ldr	r3, [sp, #12]
 810caa8:	1d1a      	adds	r2, r3, #4
 810caaa:	681b      	ldr	r3, [r3, #0]
 810caac:	9203      	str	r2, [sp, #12]
 810caae:	2b00      	cmp	r3, #0
 810cab0:	bfb8      	it	lt
 810cab2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810cab6:	3402      	adds	r4, #2
 810cab8:	9305      	str	r3, [sp, #20]
 810caba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810cba0 <_vfiprintf_r+0x25c>
 810cabe:	7821      	ldrb	r1, [r4, #0]
 810cac0:	2203      	movs	r2, #3
 810cac2:	4650      	mov	r0, sl
 810cac4:	f7f3 fc14 	bl	81002f0 <memchr>
 810cac8:	b140      	cbz	r0, 810cadc <_vfiprintf_r+0x198>
 810caca:	2340      	movs	r3, #64	; 0x40
 810cacc:	eba0 000a 	sub.w	r0, r0, sl
 810cad0:	fa03 f000 	lsl.w	r0, r3, r0
 810cad4:	9b04      	ldr	r3, [sp, #16]
 810cad6:	4303      	orrs	r3, r0
 810cad8:	3401      	adds	r4, #1
 810cada:	9304      	str	r3, [sp, #16]
 810cadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810cae0:	482c      	ldr	r0, [pc, #176]	; (810cb94 <_vfiprintf_r+0x250>)
 810cae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810cae6:	2206      	movs	r2, #6
 810cae8:	f7f3 fc02 	bl	81002f0 <memchr>
 810caec:	2800      	cmp	r0, #0
 810caee:	d03f      	beq.n	810cb70 <_vfiprintf_r+0x22c>
 810caf0:	4b29      	ldr	r3, [pc, #164]	; (810cb98 <_vfiprintf_r+0x254>)
 810caf2:	bb1b      	cbnz	r3, 810cb3c <_vfiprintf_r+0x1f8>
 810caf4:	9b03      	ldr	r3, [sp, #12]
 810caf6:	3307      	adds	r3, #7
 810caf8:	f023 0307 	bic.w	r3, r3, #7
 810cafc:	3308      	adds	r3, #8
 810cafe:	9303      	str	r3, [sp, #12]
 810cb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cb02:	443b      	add	r3, r7
 810cb04:	9309      	str	r3, [sp, #36]	; 0x24
 810cb06:	e767      	b.n	810c9d8 <_vfiprintf_r+0x94>
 810cb08:	fb0c 3202 	mla	r2, ip, r2, r3
 810cb0c:	460c      	mov	r4, r1
 810cb0e:	2001      	movs	r0, #1
 810cb10:	e7a5      	b.n	810ca5e <_vfiprintf_r+0x11a>
 810cb12:	2300      	movs	r3, #0
 810cb14:	3401      	adds	r4, #1
 810cb16:	9305      	str	r3, [sp, #20]
 810cb18:	4619      	mov	r1, r3
 810cb1a:	f04f 0c0a 	mov.w	ip, #10
 810cb1e:	4620      	mov	r0, r4
 810cb20:	f810 2b01 	ldrb.w	r2, [r0], #1
 810cb24:	3a30      	subs	r2, #48	; 0x30
 810cb26:	2a09      	cmp	r2, #9
 810cb28:	d903      	bls.n	810cb32 <_vfiprintf_r+0x1ee>
 810cb2a:	2b00      	cmp	r3, #0
 810cb2c:	d0c5      	beq.n	810caba <_vfiprintf_r+0x176>
 810cb2e:	9105      	str	r1, [sp, #20]
 810cb30:	e7c3      	b.n	810caba <_vfiprintf_r+0x176>
 810cb32:	fb0c 2101 	mla	r1, ip, r1, r2
 810cb36:	4604      	mov	r4, r0
 810cb38:	2301      	movs	r3, #1
 810cb3a:	e7f0      	b.n	810cb1e <_vfiprintf_r+0x1da>
 810cb3c:	ab03      	add	r3, sp, #12
 810cb3e:	9300      	str	r3, [sp, #0]
 810cb40:	462a      	mov	r2, r5
 810cb42:	4b16      	ldr	r3, [pc, #88]	; (810cb9c <_vfiprintf_r+0x258>)
 810cb44:	a904      	add	r1, sp, #16
 810cb46:	4630      	mov	r0, r6
 810cb48:	f7fb fd8e 	bl	8108668 <_printf_float>
 810cb4c:	4607      	mov	r7, r0
 810cb4e:	1c78      	adds	r0, r7, #1
 810cb50:	d1d6      	bne.n	810cb00 <_vfiprintf_r+0x1bc>
 810cb52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810cb54:	07d9      	lsls	r1, r3, #31
 810cb56:	d405      	bmi.n	810cb64 <_vfiprintf_r+0x220>
 810cb58:	89ab      	ldrh	r3, [r5, #12]
 810cb5a:	059a      	lsls	r2, r3, #22
 810cb5c:	d402      	bmi.n	810cb64 <_vfiprintf_r+0x220>
 810cb5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810cb60:	f7fe ff24 	bl	810b9ac <__retarget_lock_release_recursive>
 810cb64:	89ab      	ldrh	r3, [r5, #12]
 810cb66:	065b      	lsls	r3, r3, #25
 810cb68:	f53f af12 	bmi.w	810c990 <_vfiprintf_r+0x4c>
 810cb6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cb6e:	e711      	b.n	810c994 <_vfiprintf_r+0x50>
 810cb70:	ab03      	add	r3, sp, #12
 810cb72:	9300      	str	r3, [sp, #0]
 810cb74:	462a      	mov	r2, r5
 810cb76:	4b09      	ldr	r3, [pc, #36]	; (810cb9c <_vfiprintf_r+0x258>)
 810cb78:	a904      	add	r1, sp, #16
 810cb7a:	4630      	mov	r0, r6
 810cb7c:	f7fc f818 	bl	8108bb0 <_printf_i>
 810cb80:	e7e4      	b.n	810cb4c <_vfiprintf_r+0x208>
 810cb82:	bf00      	nop
 810cb84:	0810d204 	.word	0x0810d204
 810cb88:	0810d224 	.word	0x0810d224
 810cb8c:	0810d1e4 	.word	0x0810d1e4
 810cb90:	0810d41c 	.word	0x0810d41c
 810cb94:	0810d426 	.word	0x0810d426
 810cb98:	08108669 	.word	0x08108669
 810cb9c:	0810c91f 	.word	0x0810c91f
 810cba0:	0810d422 	.word	0x0810d422
 810cba4:	00000000 	.word	0x00000000

0810cba8 <nan>:
 810cba8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810cbb0 <nan+0x8>
 810cbac:	4770      	bx	lr
 810cbae:	bf00      	nop
 810cbb0:	00000000 	.word	0x00000000
 810cbb4:	7ff80000 	.word	0x7ff80000

0810cbb8 <_sbrk_r>:
 810cbb8:	b538      	push	{r3, r4, r5, lr}
 810cbba:	4d06      	ldr	r5, [pc, #24]	; (810cbd4 <_sbrk_r+0x1c>)
 810cbbc:	2300      	movs	r3, #0
 810cbbe:	4604      	mov	r4, r0
 810cbc0:	4608      	mov	r0, r1
 810cbc2:	602b      	str	r3, [r5, #0]
 810cbc4:	f7f5 f85c 	bl	8101c80 <_sbrk>
 810cbc8:	1c43      	adds	r3, r0, #1
 810cbca:	d102      	bne.n	810cbd2 <_sbrk_r+0x1a>
 810cbcc:	682b      	ldr	r3, [r5, #0]
 810cbce:	b103      	cbz	r3, 810cbd2 <_sbrk_r+0x1a>
 810cbd0:	6023      	str	r3, [r4, #0]
 810cbd2:	bd38      	pop	{r3, r4, r5, pc}
 810cbd4:	10000368 	.word	0x10000368

0810cbd8 <__sread>:
 810cbd8:	b510      	push	{r4, lr}
 810cbda:	460c      	mov	r4, r1
 810cbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cbe0:	f000 f93a 	bl	810ce58 <_read_r>
 810cbe4:	2800      	cmp	r0, #0
 810cbe6:	bfab      	itete	ge
 810cbe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810cbea:	89a3      	ldrhlt	r3, [r4, #12]
 810cbec:	181b      	addge	r3, r3, r0
 810cbee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810cbf2:	bfac      	ite	ge
 810cbf4:	6563      	strge	r3, [r4, #84]	; 0x54
 810cbf6:	81a3      	strhlt	r3, [r4, #12]
 810cbf8:	bd10      	pop	{r4, pc}

0810cbfa <__swrite>:
 810cbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cbfe:	461f      	mov	r7, r3
 810cc00:	898b      	ldrh	r3, [r1, #12]
 810cc02:	05db      	lsls	r3, r3, #23
 810cc04:	4605      	mov	r5, r0
 810cc06:	460c      	mov	r4, r1
 810cc08:	4616      	mov	r6, r2
 810cc0a:	d505      	bpl.n	810cc18 <__swrite+0x1e>
 810cc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cc10:	2302      	movs	r3, #2
 810cc12:	2200      	movs	r2, #0
 810cc14:	f000 f8b8 	bl	810cd88 <_lseek_r>
 810cc18:	89a3      	ldrh	r3, [r4, #12]
 810cc1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810cc1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810cc22:	81a3      	strh	r3, [r4, #12]
 810cc24:	4632      	mov	r2, r6
 810cc26:	463b      	mov	r3, r7
 810cc28:	4628      	mov	r0, r5
 810cc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810cc2e:	f000 b837 	b.w	810cca0 <_write_r>

0810cc32 <__sseek>:
 810cc32:	b510      	push	{r4, lr}
 810cc34:	460c      	mov	r4, r1
 810cc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cc3a:	f000 f8a5 	bl	810cd88 <_lseek_r>
 810cc3e:	1c43      	adds	r3, r0, #1
 810cc40:	89a3      	ldrh	r3, [r4, #12]
 810cc42:	bf15      	itete	ne
 810cc44:	6560      	strne	r0, [r4, #84]	; 0x54
 810cc46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810cc4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810cc4e:	81a3      	strheq	r3, [r4, #12]
 810cc50:	bf18      	it	ne
 810cc52:	81a3      	strhne	r3, [r4, #12]
 810cc54:	bd10      	pop	{r4, pc}

0810cc56 <__sclose>:
 810cc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cc5a:	f000 b851 	b.w	810cd00 <_close_r>

0810cc5e <strncmp>:
 810cc5e:	b510      	push	{r4, lr}
 810cc60:	b17a      	cbz	r2, 810cc82 <strncmp+0x24>
 810cc62:	4603      	mov	r3, r0
 810cc64:	3901      	subs	r1, #1
 810cc66:	1884      	adds	r4, r0, r2
 810cc68:	f813 0b01 	ldrb.w	r0, [r3], #1
 810cc6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810cc70:	4290      	cmp	r0, r2
 810cc72:	d101      	bne.n	810cc78 <strncmp+0x1a>
 810cc74:	42a3      	cmp	r3, r4
 810cc76:	d101      	bne.n	810cc7c <strncmp+0x1e>
 810cc78:	1a80      	subs	r0, r0, r2
 810cc7a:	bd10      	pop	{r4, pc}
 810cc7c:	2800      	cmp	r0, #0
 810cc7e:	d1f3      	bne.n	810cc68 <strncmp+0xa>
 810cc80:	e7fa      	b.n	810cc78 <strncmp+0x1a>
 810cc82:	4610      	mov	r0, r2
 810cc84:	e7f9      	b.n	810cc7a <strncmp+0x1c>

0810cc86 <__ascii_wctomb>:
 810cc86:	b149      	cbz	r1, 810cc9c <__ascii_wctomb+0x16>
 810cc88:	2aff      	cmp	r2, #255	; 0xff
 810cc8a:	bf85      	ittet	hi
 810cc8c:	238a      	movhi	r3, #138	; 0x8a
 810cc8e:	6003      	strhi	r3, [r0, #0]
 810cc90:	700a      	strbls	r2, [r1, #0]
 810cc92:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810cc96:	bf98      	it	ls
 810cc98:	2001      	movls	r0, #1
 810cc9a:	4770      	bx	lr
 810cc9c:	4608      	mov	r0, r1
 810cc9e:	4770      	bx	lr

0810cca0 <_write_r>:
 810cca0:	b538      	push	{r3, r4, r5, lr}
 810cca2:	4d07      	ldr	r5, [pc, #28]	; (810ccc0 <_write_r+0x20>)
 810cca4:	4604      	mov	r4, r0
 810cca6:	4608      	mov	r0, r1
 810cca8:	4611      	mov	r1, r2
 810ccaa:	2200      	movs	r2, #0
 810ccac:	602a      	str	r2, [r5, #0]
 810ccae:	461a      	mov	r2, r3
 810ccb0:	f7f4 ff95 	bl	8101bde <_write>
 810ccb4:	1c43      	adds	r3, r0, #1
 810ccb6:	d102      	bne.n	810ccbe <_write_r+0x1e>
 810ccb8:	682b      	ldr	r3, [r5, #0]
 810ccba:	b103      	cbz	r3, 810ccbe <_write_r+0x1e>
 810ccbc:	6023      	str	r3, [r4, #0]
 810ccbe:	bd38      	pop	{r3, r4, r5, pc}
 810ccc0:	10000368 	.word	0x10000368

0810ccc4 <__assert_func>:
 810ccc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ccc6:	4614      	mov	r4, r2
 810ccc8:	461a      	mov	r2, r3
 810ccca:	4b09      	ldr	r3, [pc, #36]	; (810ccf0 <__assert_func+0x2c>)
 810cccc:	681b      	ldr	r3, [r3, #0]
 810ccce:	4605      	mov	r5, r0
 810ccd0:	68d8      	ldr	r0, [r3, #12]
 810ccd2:	b14c      	cbz	r4, 810cce8 <__assert_func+0x24>
 810ccd4:	4b07      	ldr	r3, [pc, #28]	; (810ccf4 <__assert_func+0x30>)
 810ccd6:	9100      	str	r1, [sp, #0]
 810ccd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ccdc:	4906      	ldr	r1, [pc, #24]	; (810ccf8 <__assert_func+0x34>)
 810ccde:	462b      	mov	r3, r5
 810cce0:	f000 f81e 	bl	810cd20 <fiprintf>
 810cce4:	f000 f8ca 	bl	810ce7c <abort>
 810cce8:	4b04      	ldr	r3, [pc, #16]	; (810ccfc <__assert_func+0x38>)
 810ccea:	461c      	mov	r4, r3
 810ccec:	e7f3      	b.n	810ccd6 <__assert_func+0x12>
 810ccee:	bf00      	nop
 810ccf0:	10000010 	.word	0x10000010
 810ccf4:	0810d42d 	.word	0x0810d42d
 810ccf8:	0810d43a 	.word	0x0810d43a
 810ccfc:	0810d468 	.word	0x0810d468

0810cd00 <_close_r>:
 810cd00:	b538      	push	{r3, r4, r5, lr}
 810cd02:	4d06      	ldr	r5, [pc, #24]	; (810cd1c <_close_r+0x1c>)
 810cd04:	2300      	movs	r3, #0
 810cd06:	4604      	mov	r4, r0
 810cd08:	4608      	mov	r0, r1
 810cd0a:	602b      	str	r3, [r5, #0]
 810cd0c:	f7f4 ff83 	bl	8101c16 <_close>
 810cd10:	1c43      	adds	r3, r0, #1
 810cd12:	d102      	bne.n	810cd1a <_close_r+0x1a>
 810cd14:	682b      	ldr	r3, [r5, #0]
 810cd16:	b103      	cbz	r3, 810cd1a <_close_r+0x1a>
 810cd18:	6023      	str	r3, [r4, #0]
 810cd1a:	bd38      	pop	{r3, r4, r5, pc}
 810cd1c:	10000368 	.word	0x10000368

0810cd20 <fiprintf>:
 810cd20:	b40e      	push	{r1, r2, r3}
 810cd22:	b503      	push	{r0, r1, lr}
 810cd24:	4601      	mov	r1, r0
 810cd26:	ab03      	add	r3, sp, #12
 810cd28:	4805      	ldr	r0, [pc, #20]	; (810cd40 <fiprintf+0x20>)
 810cd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 810cd2e:	6800      	ldr	r0, [r0, #0]
 810cd30:	9301      	str	r3, [sp, #4]
 810cd32:	f7ff fe07 	bl	810c944 <_vfiprintf_r>
 810cd36:	b002      	add	sp, #8
 810cd38:	f85d eb04 	ldr.w	lr, [sp], #4
 810cd3c:	b003      	add	sp, #12
 810cd3e:	4770      	bx	lr
 810cd40:	10000010 	.word	0x10000010

0810cd44 <_fstat_r>:
 810cd44:	b538      	push	{r3, r4, r5, lr}
 810cd46:	4d07      	ldr	r5, [pc, #28]	; (810cd64 <_fstat_r+0x20>)
 810cd48:	2300      	movs	r3, #0
 810cd4a:	4604      	mov	r4, r0
 810cd4c:	4608      	mov	r0, r1
 810cd4e:	4611      	mov	r1, r2
 810cd50:	602b      	str	r3, [r5, #0]
 810cd52:	f7f4 ff6c 	bl	8101c2e <_fstat>
 810cd56:	1c43      	adds	r3, r0, #1
 810cd58:	d102      	bne.n	810cd60 <_fstat_r+0x1c>
 810cd5a:	682b      	ldr	r3, [r5, #0]
 810cd5c:	b103      	cbz	r3, 810cd60 <_fstat_r+0x1c>
 810cd5e:	6023      	str	r3, [r4, #0]
 810cd60:	bd38      	pop	{r3, r4, r5, pc}
 810cd62:	bf00      	nop
 810cd64:	10000368 	.word	0x10000368

0810cd68 <_isatty_r>:
 810cd68:	b538      	push	{r3, r4, r5, lr}
 810cd6a:	4d06      	ldr	r5, [pc, #24]	; (810cd84 <_isatty_r+0x1c>)
 810cd6c:	2300      	movs	r3, #0
 810cd6e:	4604      	mov	r4, r0
 810cd70:	4608      	mov	r0, r1
 810cd72:	602b      	str	r3, [r5, #0]
 810cd74:	f7f4 ff6b 	bl	8101c4e <_isatty>
 810cd78:	1c43      	adds	r3, r0, #1
 810cd7a:	d102      	bne.n	810cd82 <_isatty_r+0x1a>
 810cd7c:	682b      	ldr	r3, [r5, #0]
 810cd7e:	b103      	cbz	r3, 810cd82 <_isatty_r+0x1a>
 810cd80:	6023      	str	r3, [r4, #0]
 810cd82:	bd38      	pop	{r3, r4, r5, pc}
 810cd84:	10000368 	.word	0x10000368

0810cd88 <_lseek_r>:
 810cd88:	b538      	push	{r3, r4, r5, lr}
 810cd8a:	4d07      	ldr	r5, [pc, #28]	; (810cda8 <_lseek_r+0x20>)
 810cd8c:	4604      	mov	r4, r0
 810cd8e:	4608      	mov	r0, r1
 810cd90:	4611      	mov	r1, r2
 810cd92:	2200      	movs	r2, #0
 810cd94:	602a      	str	r2, [r5, #0]
 810cd96:	461a      	mov	r2, r3
 810cd98:	f7f4 ff64 	bl	8101c64 <_lseek>
 810cd9c:	1c43      	adds	r3, r0, #1
 810cd9e:	d102      	bne.n	810cda6 <_lseek_r+0x1e>
 810cda0:	682b      	ldr	r3, [r5, #0]
 810cda2:	b103      	cbz	r3, 810cda6 <_lseek_r+0x1e>
 810cda4:	6023      	str	r3, [r4, #0]
 810cda6:	bd38      	pop	{r3, r4, r5, pc}
 810cda8:	10000368 	.word	0x10000368

0810cdac <memmove>:
 810cdac:	4288      	cmp	r0, r1
 810cdae:	b510      	push	{r4, lr}
 810cdb0:	eb01 0402 	add.w	r4, r1, r2
 810cdb4:	d902      	bls.n	810cdbc <memmove+0x10>
 810cdb6:	4284      	cmp	r4, r0
 810cdb8:	4623      	mov	r3, r4
 810cdba:	d807      	bhi.n	810cdcc <memmove+0x20>
 810cdbc:	1e43      	subs	r3, r0, #1
 810cdbe:	42a1      	cmp	r1, r4
 810cdc0:	d008      	beq.n	810cdd4 <memmove+0x28>
 810cdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810cdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810cdca:	e7f8      	b.n	810cdbe <memmove+0x12>
 810cdcc:	4402      	add	r2, r0
 810cdce:	4601      	mov	r1, r0
 810cdd0:	428a      	cmp	r2, r1
 810cdd2:	d100      	bne.n	810cdd6 <memmove+0x2a>
 810cdd4:	bd10      	pop	{r4, pc}
 810cdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810cdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810cdde:	e7f7      	b.n	810cdd0 <memmove+0x24>

0810cde0 <__malloc_lock>:
 810cde0:	4801      	ldr	r0, [pc, #4]	; (810cde8 <__malloc_lock+0x8>)
 810cde2:	f7fe bde2 	b.w	810b9aa <__retarget_lock_acquire_recursive>
 810cde6:	bf00      	nop
 810cde8:	1000035c 	.word	0x1000035c

0810cdec <__malloc_unlock>:
 810cdec:	4801      	ldr	r0, [pc, #4]	; (810cdf4 <__malloc_unlock+0x8>)
 810cdee:	f7fe bddd 	b.w	810b9ac <__retarget_lock_release_recursive>
 810cdf2:	bf00      	nop
 810cdf4:	1000035c 	.word	0x1000035c

0810cdf8 <_realloc_r>:
 810cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cdfc:	4680      	mov	r8, r0
 810cdfe:	4614      	mov	r4, r2
 810ce00:	460e      	mov	r6, r1
 810ce02:	b921      	cbnz	r1, 810ce0e <_realloc_r+0x16>
 810ce04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ce08:	4611      	mov	r1, r2
 810ce0a:	f7ff bba1 	b.w	810c550 <_malloc_r>
 810ce0e:	b92a      	cbnz	r2, 810ce1c <_realloc_r+0x24>
 810ce10:	f7ff fb32 	bl	810c478 <_free_r>
 810ce14:	4625      	mov	r5, r4
 810ce16:	4628      	mov	r0, r5
 810ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce1c:	f000 f835 	bl	810ce8a <_malloc_usable_size_r>
 810ce20:	4284      	cmp	r4, r0
 810ce22:	4607      	mov	r7, r0
 810ce24:	d802      	bhi.n	810ce2c <_realloc_r+0x34>
 810ce26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810ce2a:	d812      	bhi.n	810ce52 <_realloc_r+0x5a>
 810ce2c:	4621      	mov	r1, r4
 810ce2e:	4640      	mov	r0, r8
 810ce30:	f7ff fb8e 	bl	810c550 <_malloc_r>
 810ce34:	4605      	mov	r5, r0
 810ce36:	2800      	cmp	r0, #0
 810ce38:	d0ed      	beq.n	810ce16 <_realloc_r+0x1e>
 810ce3a:	42bc      	cmp	r4, r7
 810ce3c:	4622      	mov	r2, r4
 810ce3e:	4631      	mov	r1, r6
 810ce40:	bf28      	it	cs
 810ce42:	463a      	movcs	r2, r7
 810ce44:	f7fe fe32 	bl	810baac <memcpy>
 810ce48:	4631      	mov	r1, r6
 810ce4a:	4640      	mov	r0, r8
 810ce4c:	f7ff fb14 	bl	810c478 <_free_r>
 810ce50:	e7e1      	b.n	810ce16 <_realloc_r+0x1e>
 810ce52:	4635      	mov	r5, r6
 810ce54:	e7df      	b.n	810ce16 <_realloc_r+0x1e>
	...

0810ce58 <_read_r>:
 810ce58:	b538      	push	{r3, r4, r5, lr}
 810ce5a:	4d07      	ldr	r5, [pc, #28]	; (810ce78 <_read_r+0x20>)
 810ce5c:	4604      	mov	r4, r0
 810ce5e:	4608      	mov	r0, r1
 810ce60:	4611      	mov	r1, r2
 810ce62:	2200      	movs	r2, #0
 810ce64:	602a      	str	r2, [r5, #0]
 810ce66:	461a      	mov	r2, r3
 810ce68:	f7f4 fe9c 	bl	8101ba4 <_read>
 810ce6c:	1c43      	adds	r3, r0, #1
 810ce6e:	d102      	bne.n	810ce76 <_read_r+0x1e>
 810ce70:	682b      	ldr	r3, [r5, #0]
 810ce72:	b103      	cbz	r3, 810ce76 <_read_r+0x1e>
 810ce74:	6023      	str	r3, [r4, #0]
 810ce76:	bd38      	pop	{r3, r4, r5, pc}
 810ce78:	10000368 	.word	0x10000368

0810ce7c <abort>:
 810ce7c:	b508      	push	{r3, lr}
 810ce7e:	2006      	movs	r0, #6
 810ce80:	f000 f834 	bl	810ceec <raise>
 810ce84:	2001      	movs	r0, #1
 810ce86:	f7f4 fe83 	bl	8101b90 <_exit>

0810ce8a <_malloc_usable_size_r>:
 810ce8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ce8e:	1f18      	subs	r0, r3, #4
 810ce90:	2b00      	cmp	r3, #0
 810ce92:	bfbc      	itt	lt
 810ce94:	580b      	ldrlt	r3, [r1, r0]
 810ce96:	18c0      	addlt	r0, r0, r3
 810ce98:	4770      	bx	lr

0810ce9a <_raise_r>:
 810ce9a:	291f      	cmp	r1, #31
 810ce9c:	b538      	push	{r3, r4, r5, lr}
 810ce9e:	4604      	mov	r4, r0
 810cea0:	460d      	mov	r5, r1
 810cea2:	d904      	bls.n	810ceae <_raise_r+0x14>
 810cea4:	2316      	movs	r3, #22
 810cea6:	6003      	str	r3, [r0, #0]
 810cea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ceac:	bd38      	pop	{r3, r4, r5, pc}
 810ceae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ceb0:	b112      	cbz	r2, 810ceb8 <_raise_r+0x1e>
 810ceb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ceb6:	b94b      	cbnz	r3, 810cecc <_raise_r+0x32>
 810ceb8:	4620      	mov	r0, r4
 810ceba:	f000 f831 	bl	810cf20 <_getpid_r>
 810cebe:	462a      	mov	r2, r5
 810cec0:	4601      	mov	r1, r0
 810cec2:	4620      	mov	r0, r4
 810cec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810cec8:	f000 b818 	b.w	810cefc <_kill_r>
 810cecc:	2b01      	cmp	r3, #1
 810cece:	d00a      	beq.n	810cee6 <_raise_r+0x4c>
 810ced0:	1c59      	adds	r1, r3, #1
 810ced2:	d103      	bne.n	810cedc <_raise_r+0x42>
 810ced4:	2316      	movs	r3, #22
 810ced6:	6003      	str	r3, [r0, #0]
 810ced8:	2001      	movs	r0, #1
 810ceda:	e7e7      	b.n	810ceac <_raise_r+0x12>
 810cedc:	2400      	movs	r4, #0
 810cede:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810cee2:	4628      	mov	r0, r5
 810cee4:	4798      	blx	r3
 810cee6:	2000      	movs	r0, #0
 810cee8:	e7e0      	b.n	810ceac <_raise_r+0x12>
	...

0810ceec <raise>:
 810ceec:	4b02      	ldr	r3, [pc, #8]	; (810cef8 <raise+0xc>)
 810ceee:	4601      	mov	r1, r0
 810cef0:	6818      	ldr	r0, [r3, #0]
 810cef2:	f7ff bfd2 	b.w	810ce9a <_raise_r>
 810cef6:	bf00      	nop
 810cef8:	10000010 	.word	0x10000010

0810cefc <_kill_r>:
 810cefc:	b538      	push	{r3, r4, r5, lr}
 810cefe:	4d07      	ldr	r5, [pc, #28]	; (810cf1c <_kill_r+0x20>)
 810cf00:	2300      	movs	r3, #0
 810cf02:	4604      	mov	r4, r0
 810cf04:	4608      	mov	r0, r1
 810cf06:	4611      	mov	r1, r2
 810cf08:	602b      	str	r3, [r5, #0]
 810cf0a:	f7f4 fe31 	bl	8101b70 <_kill>
 810cf0e:	1c43      	adds	r3, r0, #1
 810cf10:	d102      	bne.n	810cf18 <_kill_r+0x1c>
 810cf12:	682b      	ldr	r3, [r5, #0]
 810cf14:	b103      	cbz	r3, 810cf18 <_kill_r+0x1c>
 810cf16:	6023      	str	r3, [r4, #0]
 810cf18:	bd38      	pop	{r3, r4, r5, pc}
 810cf1a:	bf00      	nop
 810cf1c:	10000368 	.word	0x10000368

0810cf20 <_getpid_r>:
 810cf20:	f7f4 be1e 	b.w	8101b60 <_getpid>

0810cf24 <_init>:
 810cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cf26:	bf00      	nop
 810cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cf2a:	bc08      	pop	{r3}
 810cf2c:	469e      	mov	lr, r3
 810cf2e:	4770      	bx	lr

0810cf30 <_fini>:
 810cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cf32:	bf00      	nop
 810cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cf36:	bc08      	pop	{r3}
 810cf38:	469e      	mov	lr, r3
 810cf3a:	4770      	bx	lr
