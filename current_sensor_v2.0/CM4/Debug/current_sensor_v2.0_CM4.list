
current_sensor_v2.0_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc84  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0810cf28  0810cf28  0001cf28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d454  0810d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d45c  0810d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d460  0810d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  10000000  0810d464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000180  100001e8  0810d64c  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10000368  0810d64c  00020368  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bcf3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b86  00000000  00000000  0003bf0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001578  00000000  00000000  0003ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001470  00000000  00000000  00040010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d799  00000000  00000000  00041480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a1a4  00000000  00000000  0007ec19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019eebf  00000000  00000000  00098dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00237c7c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007338  00000000  00000000  00237ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810cf0c 	.word	0x0810cf0c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810cf0c 	.word	0x0810cf0c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <calibration>:
}
*/



int calibration(int adcStartAddr, int adcPollForConversionAddr, int adcGetValue, int hadcAddr){
 8101138:	b580      	push	{r7, lr}
 810113a:	b090      	sub	sp, #64	; 0x40
 810113c:	af00      	add	r7, sp, #0
 810113e:	60f8      	str	r0, [r7, #12]
 8101140:	60b9      	str	r1, [r7, #8]
 8101142:	607a      	str	r2, [r7, #4]
 8101144:	603b      	str	r3, [r7, #0]
	// pointer to a adc start function
	void (*adcStartFcn)(int) = adcStartAddr;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	633b      	str	r3, [r7, #48]	; 0x30
	// pointer to a adc poll function
	HAL_StatusTypeDef (*adcPollForConversionFcn)(int, int) = adcPollForConversionAddr;
 810114a:	68bb      	ldr	r3, [r7, #8]
 810114c:	62fb      	str	r3, [r7, #44]	; 0x2c
	// pointer to a adc GetValue function
	uint32_t (*adcGetValueFcn)(int) = adcGetValue;
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	62bb      	str	r3, [r7, #40]	; 0x28

	/* loop for at least 5 seconds and average the values to calculate the offset
	 * 5 seconds --> 5000ms / READING_ADC_TIME = cycle to do
	 */
	double sum = 0;
 8101152:	f04f 0200 	mov.w	r2, #0
 8101156:	f04f 0300 	mov.w	r3, #0
 810115a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double average;
	int range = (int) CALIBRATION_TIME / READING_ADC_TIME;
 810115e:	4b2a      	ldr	r3, [pc, #168]	; (8101208 <calibration+0xd0>)
 8101160:	627b      	str	r3, [r7, #36]	; 0x24

	double rilevazione;
	for(int i = 0; i < (int)range; i++){
 8101162:	2300      	movs	r3, #0
 8101164:	637b      	str	r3, [r7, #52]	; 0x34
 8101166:	e02c      	b.n	81011c2 <calibration+0x8a>
		adcStartFcn(hadcAddr);
 8101168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810116a:	6838      	ldr	r0, [r7, #0]
 810116c:	4798      	blx	r3
		adcPollForConversionFcn(hadcAddr,ADC_TIMEOUT);
 810116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101170:	2164      	movs	r1, #100	; 0x64
 8101172:	6838      	ldr	r0, [r7, #0]
 8101174:	4798      	blx	r3
		rilevazione = adcGetValueFcn(hadcAddr) * 3.3 /(ADC_RESOLUTION-1);//convert binary sum to numeric value
 8101176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101178:	6838      	ldr	r0, [r7, #0]
 810117a:	4798      	blx	r3
 810117c:	4603      	mov	r3, r0
 810117e:	4618      	mov	r0, r3
 8101180:	f7ff fa48 	bl	8100614 <__aeabi_ui2d>
 8101184:	a31c      	add	r3, pc, #112	; (adr r3, 81011f8 <calibration+0xc0>)
 8101186:	e9d3 2300 	ldrd	r2, r3, [r3]
 810118a:	f7ff fabd 	bl	8100708 <__aeabi_dmul>
 810118e:	4602      	mov	r2, r0
 8101190:	460b      	mov	r3, r1
 8101192:	4610      	mov	r0, r2
 8101194:	4619      	mov	r1, r3
 8101196:	a31a      	add	r3, pc, #104	; (adr r3, 8101200 <calibration+0xc8>)
 8101198:	e9d3 2300 	ldrd	r2, r3, [r3]
 810119c:	f7ff fbde 	bl	810095c <__aeabi_ddiv>
 81011a0:	4602      	mov	r2, r0
 81011a2:	460b      	mov	r3, r1
 81011a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		//printf("%f\r\n",rilevazione);
		sum = sum + rilevazione;
 81011a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81011ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 81011b0:	f7ff f8f4 	bl	810039c <__adddf3>
 81011b4:	4602      	mov	r2, r0
 81011b6:	460b      	mov	r3, r1
 81011b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	for(int i = 0; i < (int)range; i++){
 81011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81011be:	3301      	adds	r3, #1
 81011c0:	637b      	str	r3, [r7, #52]	; 0x34
 81011c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81011c6:	429a      	cmp	r2, r3
 81011c8:	dbce      	blt.n	8101168 <calibration+0x30>
	}
	average = sum / (range);
 81011ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81011cc:	f7ff fa32 	bl	8100634 <__aeabi_i2d>
 81011d0:	4602      	mov	r2, r0
 81011d2:	460b      	mov	r3, r1
 81011d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 81011d8:	f7ff fbc0 	bl	810095c <__aeabi_ddiv>
 81011dc:	4602      	mov	r2, r0
 81011de:	460b      	mov	r3, r1
 81011e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	realVRef = average;	// calculating voltage offset
 81011e4:	4909      	ldr	r1, [pc, #36]	; (810120c <calibration+0xd4>)
 81011e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81011ea:	e9c1 2300 	strd	r2, r3, [r1]
}
 81011ee:	bf00      	nop
 81011f0:	4618      	mov	r0, r3
 81011f2:	3740      	adds	r7, #64	; 0x40
 81011f4:	46bd      	mov	sp, r7
 81011f6:	bd80      	pop	{r7, pc}
 81011f8:	66666666 	.word	0x66666666
 81011fc:	400a6666 	.word	0x400a6666
 8101200:	00000000 	.word	0x00000000
 8101204:	40affe00 	.word	0x40affe00
 8101208:	0003ab00 	.word	0x0003ab00
 810120c:	10000208 	.word	0x10000208

08101210 <getFilteredValue>:

double getFilteredValue(int adcStartAddr, int adcPollForConversionAddr, int adcGetValue, int hadcAddr){
 8101210:	b580      	push	{r7, lr}
 8101212:	b08e      	sub	sp, #56	; 0x38
 8101214:	af00      	add	r7, sp, #0
 8101216:	60f8      	str	r0, [r7, #12]
 8101218:	60b9      	str	r1, [r7, #8]
 810121a:	607a      	str	r2, [r7, #4]
 810121c:	603b      	str	r3, [r7, #0]
	// pointer to a adc start function
	void (*adcStartFcn)(int) = adcStartAddr;
 810121e:	68fb      	ldr	r3, [r7, #12]
 8101220:	637b      	str	r3, [r7, #52]	; 0x34
	// pointer to a adc poll function
	HAL_StatusTypeDef (*adcPollForConversionFcn)(int, int) = adcPollForConversionAddr;
 8101222:	68bb      	ldr	r3, [r7, #8]
 8101224:	633b      	str	r3, [r7, #48]	; 0x30
	// pointer to a adc GetValue function
	uint32_t (*adcGetValueFcn)(int) = adcGetValue;
 8101226:	687b      	ldr	r3, [r7, #4]
 8101228:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t CountValue;
	double delta;
	double voltMedia;
	double current;

	adcStartFcn(hadcAddr);
 810122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810122c:	6838      	ldr	r0, [r7, #0]
 810122e:	4798      	blx	r3
	adcPollForConversionFcn(hadcAddr,ADC_TIMEOUT);
 8101230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101232:	2164      	movs	r1, #100	; 0x64
 8101234:	6838      	ldr	r0, [r7, #0]
 8101236:	4798      	blx	r3
	CountValue = adcGetValueFcn(hadcAddr);
 8101238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810123a:	6838      	ldr	r0, [r7, #0]
 810123c:	4798      	blx	r3
 810123e:	62b8      	str	r0, [r7, #40]	; 0x28
	printf("%f\r\n",CountValue *3.3 /(ADC_RESOLUTION-1));
 8101240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101242:	f7ff f9e7 	bl	8100614 <__aeabi_ui2d>
 8101246:	a352      	add	r3, pc, #328	; (adr r3, 8101390 <getFilteredValue+0x180>)
 8101248:	e9d3 2300 	ldrd	r2, r3, [r3]
 810124c:	f7ff fa5c 	bl	8100708 <__aeabi_dmul>
 8101250:	4602      	mov	r2, r0
 8101252:	460b      	mov	r3, r1
 8101254:	4610      	mov	r0, r2
 8101256:	4619      	mov	r1, r3
 8101258:	a34f      	add	r3, pc, #316	; (adr r3, 8101398 <getFilteredValue+0x188>)
 810125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810125e:	f7ff fb7d 	bl	810095c <__aeabi_ddiv>
 8101262:	4602      	mov	r2, r0
 8101264:	460b      	mov	r3, r1
 8101266:	4850      	ldr	r0, [pc, #320]	; (81013a8 <getFilteredValue+0x198>)
 8101268:	f007 ffce 	bl	8109208 <iprintf>

	if (bMedia > CountValue){
 810126c:	4b4f      	ldr	r3, [pc, #316]	; (81013ac <getFilteredValue+0x19c>)
 810126e:	681b      	ldr	r3, [r3, #0]
 8101270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101272:	429a      	cmp	r2, r3
 8101274:	d222      	bcs.n	81012bc <getFilteredValue+0xac>
		delta = ((double)(bMedia - CountValue)) / FILTER;
 8101276:	4b4d      	ldr	r3, [pc, #308]	; (81013ac <getFilteredValue+0x19c>)
 8101278:	681a      	ldr	r2, [r3, #0]
 810127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810127c:	1ad3      	subs	r3, r2, r3
 810127e:	4618      	mov	r0, r3
 8101280:	f7ff f9c8 	bl	8100614 <__aeabi_ui2d>
 8101284:	f04f 0200 	mov.w	r2, #0
 8101288:	4b49      	ldr	r3, [pc, #292]	; (81013b0 <getFilteredValue+0x1a0>)
 810128a:	f7ff fb67 	bl	810095c <__aeabi_ddiv>
 810128e:	4602      	mov	r2, r0
 8101290:	460b      	mov	r3, r1
 8101292:	e9c7 2308 	strd	r2, r3, [r7, #32]
		bMedia -= delta;
 8101296:	4b45      	ldr	r3, [pc, #276]	; (81013ac <getFilteredValue+0x19c>)
 8101298:	681b      	ldr	r3, [r3, #0]
 810129a:	4618      	mov	r0, r3
 810129c:	f7ff f9ba 	bl	8100614 <__aeabi_ui2d>
 81012a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 81012a4:	f7ff f878 	bl	8100398 <__aeabi_dsub>
 81012a8:	4602      	mov	r2, r0
 81012aa:	460b      	mov	r3, r1
 81012ac:	4610      	mov	r0, r2
 81012ae:	4619      	mov	r1, r3
 81012b0:	f7ff fd02 	bl	8100cb8 <__aeabi_d2uiz>
 81012b4:	4603      	mov	r3, r0
 81012b6:	4a3d      	ldr	r2, [pc, #244]	; (81013ac <getFilteredValue+0x19c>)
 81012b8:	6013      	str	r3, [r2, #0]
 81012ba:	e026      	b.n	810130a <getFilteredValue+0xfa>
	}else if (bMedia < CountValue){
 81012bc:	4b3b      	ldr	r3, [pc, #236]	; (81013ac <getFilteredValue+0x19c>)
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81012c2:	429a      	cmp	r2, r3
 81012c4:	d921      	bls.n	810130a <getFilteredValue+0xfa>
		delta = ((double)(CountValue - bMedia )) / FILTER;
 81012c6:	4b39      	ldr	r3, [pc, #228]	; (81013ac <getFilteredValue+0x19c>)
 81012c8:	681b      	ldr	r3, [r3, #0]
 81012ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81012cc:	1ad3      	subs	r3, r2, r3
 81012ce:	4618      	mov	r0, r3
 81012d0:	f7ff f9a0 	bl	8100614 <__aeabi_ui2d>
 81012d4:	f04f 0200 	mov.w	r2, #0
 81012d8:	4b35      	ldr	r3, [pc, #212]	; (81013b0 <getFilteredValue+0x1a0>)
 81012da:	f7ff fb3f 	bl	810095c <__aeabi_ddiv>
 81012de:	4602      	mov	r2, r0
 81012e0:	460b      	mov	r3, r1
 81012e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		bMedia += delta;
 81012e6:	4b31      	ldr	r3, [pc, #196]	; (81013ac <getFilteredValue+0x19c>)
 81012e8:	681b      	ldr	r3, [r3, #0]
 81012ea:	4618      	mov	r0, r3
 81012ec:	f7ff f992 	bl	8100614 <__aeabi_ui2d>
 81012f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 81012f4:	f7ff f852 	bl	810039c <__adddf3>
 81012f8:	4602      	mov	r2, r0
 81012fa:	460b      	mov	r3, r1
 81012fc:	4610      	mov	r0, r2
 81012fe:	4619      	mov	r1, r3
 8101300:	f7ff fcda 	bl	8100cb8 <__aeabi_d2uiz>
 8101304:	4603      	mov	r3, r0
 8101306:	4a29      	ldr	r2, [pc, #164]	; (81013ac <getFilteredValue+0x19c>)
 8101308:	6013      	str	r3, [r2, #0]
	}


	voltMedia = bMedia * 3.3 /(ADC_RESOLUTION-1);
 810130a:	4b28      	ldr	r3, [pc, #160]	; (81013ac <getFilteredValue+0x19c>)
 810130c:	681b      	ldr	r3, [r3, #0]
 810130e:	4618      	mov	r0, r3
 8101310:	f7ff f980 	bl	8100614 <__aeabi_ui2d>
 8101314:	a31e      	add	r3, pc, #120	; (adr r3, 8101390 <getFilteredValue+0x180>)
 8101316:	e9d3 2300 	ldrd	r2, r3, [r3]
 810131a:	f7ff f9f5 	bl	8100708 <__aeabi_dmul>
 810131e:	4602      	mov	r2, r0
 8101320:	460b      	mov	r3, r1
 8101322:	4610      	mov	r0, r2
 8101324:	4619      	mov	r1, r3
 8101326:	a31c      	add	r3, pc, #112	; (adr r3, 8101398 <getFilteredValue+0x188>)
 8101328:	e9d3 2300 	ldrd	r2, r3, [r3]
 810132c:	f7ff fb16 	bl	810095c <__aeabi_ddiv>
 8101330:	4602      	mov	r2, r0
 8101332:	460b      	mov	r3, r1
 8101334:	e9c7 2306 	strd	r2, r3, [r7, #24]
	current =  (realVRef - voltMedia) / 0.4;
 8101338:	4b1e      	ldr	r3, [pc, #120]	; (81013b4 <getFilteredValue+0x1a4>)
 810133a:	e9d3 0100 	ldrd	r0, r1, [r3]
 810133e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101342:	f7ff f829 	bl	8100398 <__aeabi_dsub>
 8101346:	4602      	mov	r2, r0
 8101348:	460b      	mov	r3, r1
 810134a:	4610      	mov	r0, r2
 810134c:	4619      	mov	r1, r3
 810134e:	a314      	add	r3, pc, #80	; (adr r3, 81013a0 <getFilteredValue+0x190>)
 8101350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101354:	f7ff fb02 	bl	810095c <__aeabi_ddiv>
 8101358:	4602      	mov	r2, r0
 810135a:	460b      	mov	r3, r1
 810135c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	printf("%f\r\n",realVRef);
 8101360:	4b14      	ldr	r3, [pc, #80]	; (81013b4 <getFilteredValue+0x1a4>)
 8101362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101366:	4810      	ldr	r0, [pc, #64]	; (81013a8 <getFilteredValue+0x198>)
 8101368:	f007 ff4e 	bl	8109208 <iprintf>
	printf("%f\r\n",voltMedia);
 810136c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101370:	480d      	ldr	r0, [pc, #52]	; (81013a8 <getFilteredValue+0x198>)
 8101372:	f007 ff49 	bl	8109208 <iprintf>
	return current;
 8101376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 810137a:	ec43 2b17 	vmov	d7, r2, r3
}
 810137e:	eeb0 0a47 	vmov.f32	s0, s14
 8101382:	eef0 0a67 	vmov.f32	s1, s15
 8101386:	3738      	adds	r7, #56	; 0x38
 8101388:	46bd      	mov	sp, r7
 810138a:	bd80      	pop	{r7, pc}
 810138c:	f3af 8000 	nop.w
 8101390:	66666666 	.word	0x66666666
 8101394:	400a6666 	.word	0x400a6666
 8101398:	00000000 	.word	0x00000000
 810139c:	40affe00 	.word	0x40affe00
 81013a0:	9999999a 	.word	0x9999999a
 81013a4:	3fd99999 	.word	0x3fd99999
 81013a8:	0810cf28 	.word	0x0810cf28
 81013ac:	10000008 	.word	0x10000008
 81013b0:	40200000 	.word	0x40200000
 81013b4:	10000208 	.word	0x10000208

081013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81013b8:	b580      	push	{r7, lr}
 81013ba:	b084      	sub	sp, #16
 81013bc:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81013be:	4b2e      	ldr	r3, [pc, #184]	; (8101478 <main+0xc0>)
 81013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c4:	4a2c      	ldr	r2, [pc, #176]	; (8101478 <main+0xc0>)
 81013c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013ce:	4b2a      	ldr	r3, [pc, #168]	; (8101478 <main+0xc0>)
 81013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81013d8:	607b      	str	r3, [r7, #4]
 81013da:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81013dc:	2001      	movs	r0, #1
 81013de:	f002 fb87 	bl	8103af0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81013e2:	f002 fc11 	bl	8103c08 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81013e6:	2201      	movs	r2, #1
 81013e8:	2102      	movs	r1, #2
 81013ea:	2000      	movs	r0, #0
 81013ec:	f002 fb92 	bl	8103b14 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81013f0:	4b22      	ldr	r3, [pc, #136]	; (810147c <main+0xc4>)
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	091b      	lsrs	r3, r3, #4
 81013f6:	f003 030f 	and.w	r3, r3, #15
 81013fa:	2b07      	cmp	r3, #7
 81013fc:	d108      	bne.n	8101410 <main+0x58>
 81013fe:	4b20      	ldr	r3, [pc, #128]	; (8101480 <main+0xc8>)
 8101400:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101404:	4a1e      	ldr	r2, [pc, #120]	; (8101480 <main+0xc8>)
 8101406:	f043 0301 	orr.w	r3, r3, #1
 810140a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810140e:	e007      	b.n	8101420 <main+0x68>
 8101410:	4b1b      	ldr	r3, [pc, #108]	; (8101480 <main+0xc8>)
 8101412:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101416:	4a1a      	ldr	r2, [pc, #104]	; (8101480 <main+0xc8>)
 8101418:	f043 0301 	orr.w	r3, r3, #1
 810141c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101420:	f000 fc84 	bl	8101d2c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101424:	f000 f9ae 	bl	8101784 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101428:	f000 f960 	bl	81016ec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 810142c:	f000 f83a 	bl	81014a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8101430:	f000 f8b0 	bl	8101594 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8101434:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8101438:	f000 fd2c 	bl	8101e94 <HAL_Delay>
  printf("Start calibration...\r\n");
 810143c:	4811      	ldr	r0, [pc, #68]	; (8101484 <main+0xcc>)
 810143e:	f007 ff69 	bl	8109314 <puts>
  calibration(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
 8101442:	4811      	ldr	r0, [pc, #68]	; (8101488 <main+0xd0>)
 8101444:	4911      	ldr	r1, [pc, #68]	; (810148c <main+0xd4>)
 8101446:	4a12      	ldr	r2, [pc, #72]	; (8101490 <main+0xd8>)
 8101448:	4b12      	ldr	r3, [pc, #72]	; (8101494 <main+0xdc>)
 810144a:	f7ff fe75 	bl	8101138 <calibration>
  printf("Real VREF --> %f\r\n", realVRef);
 810144e:	4b12      	ldr	r3, [pc, #72]	; (8101498 <main+0xe0>)
 8101450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101454:	4811      	ldr	r0, [pc, #68]	; (810149c <main+0xe4>)
 8101456:	f007 fed7 	bl	8109208 <iprintf>
  printf("Calibrated.\r\n");
 810145a:	4811      	ldr	r0, [pc, #68]	; (81014a0 <main+0xe8>)
 810145c:	f007 ff5a 	bl	8109314 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value = getFilteredValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
 8101460:	4809      	ldr	r0, [pc, #36]	; (8101488 <main+0xd0>)
 8101462:	490a      	ldr	r1, [pc, #40]	; (810148c <main+0xd4>)
 8101464:	4a0a      	ldr	r2, [pc, #40]	; (8101490 <main+0xd8>)
 8101466:	4b0b      	ldr	r3, [pc, #44]	; (8101494 <main+0xdc>)
 8101468:	f7ff fed2 	bl	8101210 <getFilteredValue>
 810146c:	ed87 0b02 	vstr	d0, [r7, #8]
	  //printf("%f\n",value);
	  HAL_Delay(15);
 8101470:	200f      	movs	r0, #15
 8101472:	f000 fd0f 	bl	8101e94 <HAL_Delay>
	  value = getFilteredValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
 8101476:	e7f3      	b.n	8101460 <main+0xa8>
 8101478:	58024400 	.word	0x58024400
 810147c:	e000ed00 	.word	0xe000ed00
 8101480:	58026400 	.word	0x58026400
 8101484:	0810cf30 	.word	0x0810cf30
 8101488:	081025fd 	.word	0x081025fd
 810148c:	08102791 	.word	0x08102791
 8101490:	08102979 	.word	0x08102979
 8101494:	10000210 	.word	0x10000210
 8101498:	10000208 	.word	0x10000208
 810149c:	0810cf48 	.word	0x0810cf48
 81014a0:	0810cf5c 	.word	0x0810cf5c

081014a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81014a4:	b580      	push	{r7, lr}
 81014a6:	b08a      	sub	sp, #40	; 0x28
 81014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81014aa:	f107 031c 	add.w	r3, r7, #28
 81014ae:	2200      	movs	r2, #0
 81014b0:	601a      	str	r2, [r3, #0]
 81014b2:	605a      	str	r2, [r3, #4]
 81014b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81014b6:	463b      	mov	r3, r7
 81014b8:	2200      	movs	r2, #0
 81014ba:	601a      	str	r2, [r3, #0]
 81014bc:	605a      	str	r2, [r3, #4]
 81014be:	609a      	str	r2, [r3, #8]
 81014c0:	60da      	str	r2, [r3, #12]
 81014c2:	611a      	str	r2, [r3, #16]
 81014c4:	615a      	str	r2, [r3, #20]
 81014c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81014c8:	4b2f      	ldr	r3, [pc, #188]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014ca:	4a30      	ldr	r2, [pc, #192]	; (810158c <MX_ADC1_Init+0xe8>)
 81014cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81014ce:	4b2e      	ldr	r3, [pc, #184]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014d0:	2200      	movs	r2, #0
 81014d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 81014d4:	4b2c      	ldr	r3, [pc, #176]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014d6:	2208      	movs	r2, #8
 81014d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81014da:	4b2b      	ldr	r3, [pc, #172]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014dc:	2200      	movs	r2, #0
 81014de:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81014e0:	4b29      	ldr	r3, [pc, #164]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014e2:	2204      	movs	r2, #4
 81014e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81014e6:	4b28      	ldr	r3, [pc, #160]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014e8:	2200      	movs	r2, #0
 81014ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81014ec:	4b26      	ldr	r3, [pc, #152]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014ee:	2200      	movs	r2, #0
 81014f0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81014f2:	4b25      	ldr	r3, [pc, #148]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014f4:	2201      	movs	r2, #1
 81014f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81014f8:	4b23      	ldr	r3, [pc, #140]	; (8101588 <MX_ADC1_Init+0xe4>)
 81014fa:	2200      	movs	r2, #0
 81014fc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81014fe:	4b22      	ldr	r3, [pc, #136]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101500:	2200      	movs	r2, #0
 8101502:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8101504:	4b20      	ldr	r3, [pc, #128]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101506:	2200      	movs	r2, #0
 8101508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810150a:	4b1f      	ldr	r3, [pc, #124]	; (8101588 <MX_ADC1_Init+0xe4>)
 810150c:	2200      	movs	r2, #0
 810150e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101510:	4b1d      	ldr	r3, [pc, #116]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101512:	2200      	movs	r2, #0
 8101514:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101516:	4b1c      	ldr	r3, [pc, #112]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101518:	2200      	movs	r2, #0
 810151a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 810151c:	4b1a      	ldr	r3, [pc, #104]	; (8101588 <MX_ADC1_Init+0xe4>)
 810151e:	2200      	movs	r2, #0
 8101520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101524:	4818      	ldr	r0, [pc, #96]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101526:	f000 fec7 	bl	81022b8 <HAL_ADC_Init>
 810152a:	4603      	mov	r3, r0
 810152c:	2b00      	cmp	r3, #0
 810152e:	d001      	beq.n	8101534 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8101530:	f000 f98e 	bl	8101850 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101534:	2300      	movs	r3, #0
 8101536:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101538:	f107 031c 	add.w	r3, r7, #28
 810153c:	4619      	mov	r1, r3
 810153e:	4812      	ldr	r0, [pc, #72]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101540:	f001 ff32 	bl	81033a8 <HAL_ADCEx_MultiModeConfigChannel>
 8101544:	4603      	mov	r3, r0
 8101546:	2b00      	cmp	r3, #0
 8101548:	d001      	beq.n	810154e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 810154a:	f000 f981 	bl	8101850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 810154e:	4b10      	ldr	r3, [pc, #64]	; (8101590 <MX_ADC1_Init+0xec>)
 8101550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101552:	2306      	movs	r3, #6
 8101554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101556:	2300      	movs	r3, #0
 8101558:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810155a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810155e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101560:	2304      	movs	r3, #4
 8101562:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101564:	2300      	movs	r3, #0
 8101566:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101568:	2300      	movs	r3, #0
 810156a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810156c:	463b      	mov	r3, r7
 810156e:	4619      	mov	r1, r3
 8101570:	4805      	ldr	r0, [pc, #20]	; (8101588 <MX_ADC1_Init+0xe4>)
 8101572:	f001 fa0f 	bl	8102994 <HAL_ADC_ConfigChannel>
 8101576:	4603      	mov	r3, r0
 8101578:	2b00      	cmp	r3, #0
 810157a:	d001      	beq.n	8101580 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 810157c:	f000 f968 	bl	8101850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8101580:	bf00      	nop
 8101582:	3728      	adds	r7, #40	; 0x28
 8101584:	46bd      	mov	sp, r7
 8101586:	bd80      	pop	{r7, pc}
 8101588:	10000210 	.word	0x10000210
 810158c:	40022000 	.word	0x40022000
 8101590:	3ef08000 	.word	0x3ef08000

08101594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101594:	b580      	push	{r7, lr}
 8101596:	b09a      	sub	sp, #104	; 0x68
 8101598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810159a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810159e:	2200      	movs	r2, #0
 81015a0:	601a      	str	r2, [r3, #0]
 81015a2:	605a      	str	r2, [r3, #4]
 81015a4:	609a      	str	r2, [r3, #8]
 81015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81015a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81015ac:	2200      	movs	r2, #0
 81015ae:	601a      	str	r2, [r3, #0]
 81015b0:	605a      	str	r2, [r3, #4]
 81015b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81015b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81015b8:	2200      	movs	r2, #0
 81015ba:	601a      	str	r2, [r3, #0]
 81015bc:	605a      	str	r2, [r3, #4]
 81015be:	609a      	str	r2, [r3, #8]
 81015c0:	60da      	str	r2, [r3, #12]
 81015c2:	611a      	str	r2, [r3, #16]
 81015c4:	615a      	str	r2, [r3, #20]
 81015c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81015c8:	1d3b      	adds	r3, r7, #4
 81015ca:	222c      	movs	r2, #44	; 0x2c
 81015cc:	2100      	movs	r1, #0
 81015ce:	4618      	mov	r0, r3
 81015d0:	f006 ff98 	bl	8108504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81015d4:	4b43      	ldr	r3, [pc, #268]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015d6:	4a44      	ldr	r2, [pc, #272]	; (81016e8 <MX_TIM1_Init+0x154>)
 81015d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81015da:	4b42      	ldr	r3, [pc, #264]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015dc:	22ef      	movs	r2, #239	; 0xef
 81015de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81015e0:	4b40      	ldr	r3, [pc, #256]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015e2:	2200      	movs	r2, #0
 81015e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81015e6:	4b3f      	ldr	r3, [pc, #252]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 81015ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81015ee:	4b3d      	ldr	r3, [pc, #244]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015f0:	2200      	movs	r2, #0
 81015f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81015f4:	4b3b      	ldr	r3, [pc, #236]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015f6:	2200      	movs	r2, #0
 81015f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81015fa:	4b3a      	ldr	r3, [pc, #232]	; (81016e4 <MX_TIM1_Init+0x150>)
 81015fc:	2200      	movs	r2, #0
 81015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101600:	4838      	ldr	r0, [pc, #224]	; (81016e4 <MX_TIM1_Init+0x150>)
 8101602:	f004 fe73 	bl	81062ec <HAL_TIM_Base_Init>
 8101606:	4603      	mov	r3, r0
 8101608:	2b00      	cmp	r3, #0
 810160a:	d001      	beq.n	8101610 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 810160c:	f000 f920 	bl	8101850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101614:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810161a:	4619      	mov	r1, r3
 810161c:	4831      	ldr	r0, [pc, #196]	; (81016e4 <MX_TIM1_Init+0x150>)
 810161e:	f005 f831 	bl	8106684 <HAL_TIM_ConfigClockSource>
 8101622:	4603      	mov	r3, r0
 8101624:	2b00      	cmp	r3, #0
 8101626:	d001      	beq.n	810162c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101628:	f000 f912 	bl	8101850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810162c:	482d      	ldr	r0, [pc, #180]	; (81016e4 <MX_TIM1_Init+0x150>)
 810162e:	f004 feb4 	bl	810639a <HAL_TIM_PWM_Init>
 8101632:	4603      	mov	r3, r0
 8101634:	2b00      	cmp	r3, #0
 8101636:	d001      	beq.n	810163c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101638:	f000 f90a 	bl	8101850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810163c:	2300      	movs	r3, #0
 810163e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101640:	2300      	movs	r3, #0
 8101642:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101644:	2300      	movs	r3, #0
 8101646:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810164c:	4619      	mov	r1, r3
 810164e:	4825      	ldr	r0, [pc, #148]	; (81016e4 <MX_TIM1_Init+0x150>)
 8101650:	f005 fd1c 	bl	810708c <HAL_TIMEx_MasterConfigSynchronization>
 8101654:	4603      	mov	r3, r0
 8101656:	2b00      	cmp	r3, #0
 8101658:	d001      	beq.n	810165e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810165a:	f000 f8f9 	bl	8101850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810165e:	2360      	movs	r3, #96	; 0x60
 8101660:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 25;
 8101662:	2319      	movs	r3, #25
 8101664:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101666:	2300      	movs	r3, #0
 8101668:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810166a:	2300      	movs	r3, #0
 810166c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810166e:	2300      	movs	r3, #0
 8101670:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101672:	2300      	movs	r3, #0
 8101674:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101676:	2300      	movs	r3, #0
 8101678:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810167a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810167e:	2200      	movs	r2, #0
 8101680:	4619      	mov	r1, r3
 8101682:	4818      	ldr	r0, [pc, #96]	; (81016e4 <MX_TIM1_Init+0x150>)
 8101684:	f004 feea 	bl	810645c <HAL_TIM_PWM_ConfigChannel>
 8101688:	4603      	mov	r3, r0
 810168a:	2b00      	cmp	r3, #0
 810168c:	d001      	beq.n	8101692 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810168e:	f000 f8df 	bl	8101850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101692:	2300      	movs	r3, #0
 8101694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101696:	2300      	movs	r3, #0
 8101698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810169a:	2300      	movs	r3, #0
 810169c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810169e:	2300      	movs	r3, #0
 81016a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81016a2:	2300      	movs	r3, #0
 81016a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81016aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81016ac:	2300      	movs	r3, #0
 81016ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81016b0:	2300      	movs	r3, #0
 81016b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81016b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81016b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81016ba:	2300      	movs	r3, #0
 81016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81016be:	2300      	movs	r3, #0
 81016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81016c2:	1d3b      	adds	r3, r7, #4
 81016c4:	4619      	mov	r1, r3
 81016c6:	4807      	ldr	r0, [pc, #28]	; (81016e4 <MX_TIM1_Init+0x150>)
 81016c8:	f005 fd6e 	bl	81071a8 <HAL_TIMEx_ConfigBreakDeadTime>
 81016cc:	4603      	mov	r3, r0
 81016ce:	2b00      	cmp	r3, #0
 81016d0:	d001      	beq.n	81016d6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 81016d2:	f000 f8bd 	bl	8101850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81016d6:	4803      	ldr	r0, [pc, #12]	; (81016e4 <MX_TIM1_Init+0x150>)
 81016d8:	f000 f96c 	bl	81019b4 <HAL_TIM_MspPostInit>

}
 81016dc:	bf00      	nop
 81016de:	3768      	adds	r7, #104	; 0x68
 81016e0:	46bd      	mov	sp, r7
 81016e2:	bd80      	pop	{r7, pc}
 81016e4:	10000274 	.word	0x10000274
 81016e8:	40010000 	.word	0x40010000

081016ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81016ec:	b580      	push	{r7, lr}
 81016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81016f0:	4b22      	ldr	r3, [pc, #136]	; (810177c <MX_USART3_UART_Init+0x90>)
 81016f2:	4a23      	ldr	r2, [pc, #140]	; (8101780 <MX_USART3_UART_Init+0x94>)
 81016f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81016f6:	4b21      	ldr	r3, [pc, #132]	; (810177c <MX_USART3_UART_Init+0x90>)
 81016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81016fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81016fe:	4b1f      	ldr	r3, [pc, #124]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101700:	2200      	movs	r2, #0
 8101702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101704:	4b1d      	ldr	r3, [pc, #116]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101706:	2200      	movs	r2, #0
 8101708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810170a:	4b1c      	ldr	r3, [pc, #112]	; (810177c <MX_USART3_UART_Init+0x90>)
 810170c:	2200      	movs	r2, #0
 810170e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101710:	4b1a      	ldr	r3, [pc, #104]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101712:	220c      	movs	r2, #12
 8101714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101716:	4b19      	ldr	r3, [pc, #100]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101718:	2200      	movs	r2, #0
 810171a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810171c:	4b17      	ldr	r3, [pc, #92]	; (810177c <MX_USART3_UART_Init+0x90>)
 810171e:	2200      	movs	r2, #0
 8101720:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101722:	4b16      	ldr	r3, [pc, #88]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101724:	2200      	movs	r2, #0
 8101726:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101728:	4b14      	ldr	r3, [pc, #80]	; (810177c <MX_USART3_UART_Init+0x90>)
 810172a:	2200      	movs	r2, #0
 810172c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810172e:	4b13      	ldr	r3, [pc, #76]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101730:	2200      	movs	r2, #0
 8101732:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101734:	4811      	ldr	r0, [pc, #68]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101736:	f005 fdb5 	bl	81072a4 <HAL_UART_Init>
 810173a:	4603      	mov	r3, r0
 810173c:	2b00      	cmp	r3, #0
 810173e:	d001      	beq.n	8101744 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101740:	f000 f886 	bl	8101850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101744:	2100      	movs	r1, #0
 8101746:	480d      	ldr	r0, [pc, #52]	; (810177c <MX_USART3_UART_Init+0x90>)
 8101748:	f006 fde8 	bl	810831c <HAL_UARTEx_SetTxFifoThreshold>
 810174c:	4603      	mov	r3, r0
 810174e:	2b00      	cmp	r3, #0
 8101750:	d001      	beq.n	8101756 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101752:	f000 f87d 	bl	8101850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101756:	2100      	movs	r1, #0
 8101758:	4808      	ldr	r0, [pc, #32]	; (810177c <MX_USART3_UART_Init+0x90>)
 810175a:	f006 fe1d 	bl	8108398 <HAL_UARTEx_SetRxFifoThreshold>
 810175e:	4603      	mov	r3, r0
 8101760:	2b00      	cmp	r3, #0
 8101762:	d001      	beq.n	8101768 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101764:	f000 f874 	bl	8101850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101768:	4804      	ldr	r0, [pc, #16]	; (810177c <MX_USART3_UART_Init+0x90>)
 810176a:	f006 fd9e 	bl	81082aa <HAL_UARTEx_DisableFifoMode>
 810176e:	4603      	mov	r3, r0
 8101770:	2b00      	cmp	r3, #0
 8101772:	d001      	beq.n	8101778 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101774:	f000 f86c 	bl	8101850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101778:	bf00      	nop
 810177a:	bd80      	pop	{r7, pc}
 810177c:	100002c0 	.word	0x100002c0
 8101780:	40004800 	.word	0x40004800

08101784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101784:	b580      	push	{r7, lr}
 8101786:	b088      	sub	sp, #32
 8101788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810178a:	f107 030c 	add.w	r3, r7, #12
 810178e:	2200      	movs	r2, #0
 8101790:	601a      	str	r2, [r3, #0]
 8101792:	605a      	str	r2, [r3, #4]
 8101794:	609a      	str	r2, [r3, #8]
 8101796:	60da      	str	r2, [r3, #12]
 8101798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810179a:	4b22      	ldr	r3, [pc, #136]	; (8101824 <MX_GPIO_Init+0xa0>)
 810179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017a0:	4a20      	ldr	r2, [pc, #128]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017a2:	f043 0301 	orr.w	r3, r3, #1
 81017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017aa:	4b1e      	ldr	r3, [pc, #120]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017b0:	f003 0301 	and.w	r3, r3, #1
 81017b4:	60bb      	str	r3, [r7, #8]
 81017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81017b8:	4b1a      	ldr	r3, [pc, #104]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017be:	4a19      	ldr	r2, [pc, #100]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017c0:	f043 0310 	orr.w	r3, r3, #16
 81017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017c8:	4b16      	ldr	r3, [pc, #88]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017ce:	f003 0310 	and.w	r3, r3, #16
 81017d2:	607b      	str	r3, [r7, #4]
 81017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81017d6:	4b13      	ldr	r3, [pc, #76]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017dc:	4a11      	ldr	r2, [pc, #68]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017de:	f043 0308 	orr.w	r3, r3, #8
 81017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017e6:	4b0f      	ldr	r3, [pc, #60]	; (8101824 <MX_GPIO_Init+0xa0>)
 81017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017ec:	f003 0308 	and.w	r3, r3, #8
 81017f0:	603b      	str	r3, [r7, #0]
 81017f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81017f4:	2200      	movs	r2, #0
 81017f6:	2120      	movs	r1, #32
 81017f8:	480b      	ldr	r0, [pc, #44]	; (8101828 <MX_GPIO_Init+0xa4>)
 81017fa:	f002 f95f 	bl	8103abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 81017fe:	2320      	movs	r3, #32
 8101800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101802:	2301      	movs	r3, #1
 8101804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101806:	2300      	movs	r3, #0
 8101808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810180a:	2300      	movs	r3, #0
 810180c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810180e:	f107 030c 	add.w	r3, r7, #12
 8101812:	4619      	mov	r1, r3
 8101814:	4804      	ldr	r0, [pc, #16]	; (8101828 <MX_GPIO_Init+0xa4>)
 8101816:	f001 ffa1 	bl	810375c <HAL_GPIO_Init>

}
 810181a:	bf00      	nop
 810181c:	3720      	adds	r7, #32
 810181e:	46bd      	mov	sp, r7
 8101820:	bd80      	pop	{r7, pc}
 8101822:	bf00      	nop
 8101824:	58024400 	.word	0x58024400
 8101828:	58020000 	.word	0x58020000

0810182c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
 810182c:	b580      	push	{r7, lr}
 810182e:	b082      	sub	sp, #8
 8101830:	af00      	add	r7, sp, #0
 8101832:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8101834:	1d39      	adds	r1, r7, #4
 8101836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810183a:	2201      	movs	r2, #1
 810183c:	4803      	ldr	r0, [pc, #12]	; (810184c <__io_putchar+0x20>)
 810183e:	f005 fd81 	bl	8107344 <HAL_UART_Transmit>
	return ch;
 8101842:	687b      	ldr	r3, [r7, #4]
}
 8101844:	4618      	mov	r0, r3
 8101846:	3708      	adds	r7, #8
 8101848:	46bd      	mov	sp, r7
 810184a:	bd80      	pop	{r7, pc}
 810184c:	100002c0 	.word	0x100002c0

08101850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101850:	b480      	push	{r7}
 8101852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101854:	b672      	cpsid	i
}
 8101856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101858:	e7fe      	b.n	8101858 <Error_Handler+0x8>
	...

0810185c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810185c:	b480      	push	{r7}
 810185e:	b083      	sub	sp, #12
 8101860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101862:	4b0a      	ldr	r3, [pc, #40]	; (810188c <HAL_MspInit+0x30>)
 8101864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101868:	4a08      	ldr	r2, [pc, #32]	; (810188c <HAL_MspInit+0x30>)
 810186a:	f043 0302 	orr.w	r3, r3, #2
 810186e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101872:	4b06      	ldr	r3, [pc, #24]	; (810188c <HAL_MspInit+0x30>)
 8101874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101878:	f003 0302 	and.w	r3, r3, #2
 810187c:	607b      	str	r3, [r7, #4]
 810187e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101880:	bf00      	nop
 8101882:	370c      	adds	r7, #12
 8101884:	46bd      	mov	sp, r7
 8101886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188a:	4770      	bx	lr
 810188c:	58024400 	.word	0x58024400

08101890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101890:	b580      	push	{r7, lr}
 8101892:	b0b8      	sub	sp, #224	; 0xe0
 8101894:	af00      	add	r7, sp, #0
 8101896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101898:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810189c:	2200      	movs	r2, #0
 810189e:	601a      	str	r2, [r3, #0]
 81018a0:	605a      	str	r2, [r3, #4]
 81018a2:	609a      	str	r2, [r3, #8]
 81018a4:	60da      	str	r2, [r3, #12]
 81018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81018a8:	f107 0310 	add.w	r3, r7, #16
 81018ac:	22bc      	movs	r2, #188	; 0xbc
 81018ae:	2100      	movs	r1, #0
 81018b0:	4618      	mov	r0, r3
 81018b2:	f006 fe27 	bl	8108504 <memset>
  if(hadc->Instance==ADC1)
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	681b      	ldr	r3, [r3, #0]
 81018ba:	4a2a      	ldr	r2, [pc, #168]	; (8101964 <HAL_ADC_MspInit+0xd4>)
 81018bc:	4293      	cmp	r3, r2
 81018be:	d14d      	bne.n	810195c <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 81018c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81018c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 81018c6:	2301      	movs	r3, #1
 81018c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 81018ca:	2312      	movs	r3, #18
 81018cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 81018ce:	2301      	movs	r3, #1
 81018d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 81018d2:	2302      	movs	r3, #2
 81018d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 81018d6:	2302      	movs	r3, #2
 81018d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 81018da:	23c0      	movs	r3, #192	; 0xc0
 81018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 81018de:	2320      	movs	r3, #32
 81018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 81018e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81018e6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 81018e8:	2300      	movs	r3, #0
 81018ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81018ee:	f107 0310 	add.w	r3, r7, #16
 81018f2:	4618      	mov	r0, r3
 81018f4:	f002 fb6e 	bl	8103fd4 <HAL_RCCEx_PeriphCLKConfig>
 81018f8:	4603      	mov	r3, r0
 81018fa:	2b00      	cmp	r3, #0
 81018fc:	d001      	beq.n	8101902 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 81018fe:	f7ff ffa7 	bl	8101850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101902:	4b19      	ldr	r3, [pc, #100]	; (8101968 <HAL_ADC_MspInit+0xd8>)
 8101904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101908:	4a17      	ldr	r2, [pc, #92]	; (8101968 <HAL_ADC_MspInit+0xd8>)
 810190a:	f043 0320 	orr.w	r3, r3, #32
 810190e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101912:	4b15      	ldr	r3, [pc, #84]	; (8101968 <HAL_ADC_MspInit+0xd8>)
 8101914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101918:	f003 0320 	and.w	r3, r3, #32
 810191c:	60fb      	str	r3, [r7, #12]
 810191e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101920:	4b11      	ldr	r3, [pc, #68]	; (8101968 <HAL_ADC_MspInit+0xd8>)
 8101922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101926:	4a10      	ldr	r2, [pc, #64]	; (8101968 <HAL_ADC_MspInit+0xd8>)
 8101928:	f043 0301 	orr.w	r3, r3, #1
 810192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101930:	4b0d      	ldr	r3, [pc, #52]	; (8101968 <HAL_ADC_MspInit+0xd8>)
 8101932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101936:	f003 0301 	and.w	r3, r3, #1
 810193a:	60bb      	str	r3, [r7, #8]
 810193c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = current_sensor_Pin;
 810193e:	2308      	movs	r3, #8
 8101940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101944:	2303      	movs	r3, #3
 8101946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810194a:	2300      	movs	r3, #0
 810194c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(current_sensor_GPIO_Port, &GPIO_InitStruct);
 8101950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101954:	4619      	mov	r1, r3
 8101956:	4805      	ldr	r0, [pc, #20]	; (810196c <HAL_ADC_MspInit+0xdc>)
 8101958:	f001 ff00 	bl	810375c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 810195c:	bf00      	nop
 810195e:	37e0      	adds	r7, #224	; 0xe0
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}
 8101964:	40022000 	.word	0x40022000
 8101968:	58024400 	.word	0x58024400
 810196c:	58020000 	.word	0x58020000

08101970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101970:	b480      	push	{r7}
 8101972:	b085      	sub	sp, #20
 8101974:	af00      	add	r7, sp, #0
 8101976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101978:	687b      	ldr	r3, [r7, #4]
 810197a:	681b      	ldr	r3, [r3, #0]
 810197c:	4a0b      	ldr	r2, [pc, #44]	; (81019ac <HAL_TIM_Base_MspInit+0x3c>)
 810197e:	4293      	cmp	r3, r2
 8101980:	d10e      	bne.n	81019a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101982:	4b0b      	ldr	r3, [pc, #44]	; (81019b0 <HAL_TIM_Base_MspInit+0x40>)
 8101984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101988:	4a09      	ldr	r2, [pc, #36]	; (81019b0 <HAL_TIM_Base_MspInit+0x40>)
 810198a:	f043 0301 	orr.w	r3, r3, #1
 810198e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101992:	4b07      	ldr	r3, [pc, #28]	; (81019b0 <HAL_TIM_Base_MspInit+0x40>)
 8101994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101998:	f003 0301 	and.w	r3, r3, #1
 810199c:	60fb      	str	r3, [r7, #12]
 810199e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 81019a0:	bf00      	nop
 81019a2:	3714      	adds	r7, #20
 81019a4:	46bd      	mov	sp, r7
 81019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019aa:	4770      	bx	lr
 81019ac:	40010000 	.word	0x40010000
 81019b0:	58024400 	.word	0x58024400

081019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81019b4:	b580      	push	{r7, lr}
 81019b6:	b088      	sub	sp, #32
 81019b8:	af00      	add	r7, sp, #0
 81019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019bc:	f107 030c 	add.w	r3, r7, #12
 81019c0:	2200      	movs	r2, #0
 81019c2:	601a      	str	r2, [r3, #0]
 81019c4:	605a      	str	r2, [r3, #4]
 81019c6:	609a      	str	r2, [r3, #8]
 81019c8:	60da      	str	r2, [r3, #12]
 81019ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	681b      	ldr	r3, [r3, #0]
 81019d0:	4a13      	ldr	r2, [pc, #76]	; (8101a20 <HAL_TIM_MspPostInit+0x6c>)
 81019d2:	4293      	cmp	r3, r2
 81019d4:	d11f      	bne.n	8101a16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 81019d6:	4b13      	ldr	r3, [pc, #76]	; (8101a24 <HAL_TIM_MspPostInit+0x70>)
 81019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019dc:	4a11      	ldr	r2, [pc, #68]	; (8101a24 <HAL_TIM_MspPostInit+0x70>)
 81019de:	f043 0310 	orr.w	r3, r3, #16
 81019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019e6:	4b0f      	ldr	r3, [pc, #60]	; (8101a24 <HAL_TIM_MspPostInit+0x70>)
 81019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ec:	f003 0310 	and.w	r3, r3, #16
 81019f0:	60bb      	str	r3, [r7, #8]
 81019f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81019f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81019f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019fa:	2302      	movs	r3, #2
 81019fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019fe:	2300      	movs	r3, #0
 8101a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a02:	2300      	movs	r3, #0
 8101a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101a06:	2301      	movs	r3, #1
 8101a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a0a:	f107 030c 	add.w	r3, r7, #12
 8101a0e:	4619      	mov	r1, r3
 8101a10:	4805      	ldr	r0, [pc, #20]	; (8101a28 <HAL_TIM_MspPostInit+0x74>)
 8101a12:	f001 fea3 	bl	810375c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101a16:	bf00      	nop
 8101a18:	3720      	adds	r7, #32
 8101a1a:	46bd      	mov	sp, r7
 8101a1c:	bd80      	pop	{r7, pc}
 8101a1e:	bf00      	nop
 8101a20:	40010000 	.word	0x40010000
 8101a24:	58024400 	.word	0x58024400
 8101a28:	58021000 	.word	0x58021000

08101a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101a2c:	b580      	push	{r7, lr}
 8101a2e:	b0b8      	sub	sp, #224	; 0xe0
 8101a30:	af00      	add	r7, sp, #0
 8101a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a38:	2200      	movs	r2, #0
 8101a3a:	601a      	str	r2, [r3, #0]
 8101a3c:	605a      	str	r2, [r3, #4]
 8101a3e:	609a      	str	r2, [r3, #8]
 8101a40:	60da      	str	r2, [r3, #12]
 8101a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a44:	f107 0310 	add.w	r3, r7, #16
 8101a48:	22bc      	movs	r2, #188	; 0xbc
 8101a4a:	2100      	movs	r1, #0
 8101a4c:	4618      	mov	r0, r3
 8101a4e:	f006 fd59 	bl	8108504 <memset>
  if(huart->Instance==USART3)
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a25      	ldr	r2, [pc, #148]	; (8101aec <HAL_UART_MspInit+0xc0>)
 8101a58:	4293      	cmp	r3, r2
 8101a5a:	d142      	bne.n	8101ae2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101a5c:	2302      	movs	r3, #2
 8101a5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101a60:	2300      	movs	r3, #0
 8101a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a66:	f107 0310 	add.w	r3, r7, #16
 8101a6a:	4618      	mov	r0, r3
 8101a6c:	f002 fab2 	bl	8103fd4 <HAL_RCCEx_PeriphCLKConfig>
 8101a70:	4603      	mov	r3, r0
 8101a72:	2b00      	cmp	r3, #0
 8101a74:	d001      	beq.n	8101a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101a76:	f7ff feeb 	bl	8101850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101a7a:	4b1d      	ldr	r3, [pc, #116]	; (8101af0 <HAL_UART_MspInit+0xc4>)
 8101a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a80:	4a1b      	ldr	r2, [pc, #108]	; (8101af0 <HAL_UART_MspInit+0xc4>)
 8101a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101a86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101a8a:	4b19      	ldr	r3, [pc, #100]	; (8101af0 <HAL_UART_MspInit+0xc4>)
 8101a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101a94:	60fb      	str	r3, [r7, #12]
 8101a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a98:	4b15      	ldr	r3, [pc, #84]	; (8101af0 <HAL_UART_MspInit+0xc4>)
 8101a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a9e:	4a14      	ldr	r2, [pc, #80]	; (8101af0 <HAL_UART_MspInit+0xc4>)
 8101aa0:	f043 0308 	orr.w	r3, r3, #8
 8101aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101aa8:	4b11      	ldr	r3, [pc, #68]	; (8101af0 <HAL_UART_MspInit+0xc4>)
 8101aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aae:	f003 0308 	and.w	r3, r3, #8
 8101ab2:	60bb      	str	r3, [r7, #8]
 8101ab4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101abe:	2302      	movs	r3, #2
 8101ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ac4:	2300      	movs	r3, #0
 8101ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101aca:	2300      	movs	r3, #0
 8101acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101ad0:	2307      	movs	r3, #7
 8101ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101ad6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101ada:	4619      	mov	r1, r3
 8101adc:	4805      	ldr	r0, [pc, #20]	; (8101af4 <HAL_UART_MspInit+0xc8>)
 8101ade:	f001 fe3d 	bl	810375c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101ae2:	bf00      	nop
 8101ae4:	37e0      	adds	r7, #224	; 0xe0
 8101ae6:	46bd      	mov	sp, r7
 8101ae8:	bd80      	pop	{r7, pc}
 8101aea:	bf00      	nop
 8101aec:	40004800 	.word	0x40004800
 8101af0:	58024400 	.word	0x58024400
 8101af4:	58020c00 	.word	0x58020c00

08101af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101af8:	b480      	push	{r7}
 8101afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101afc:	e7fe      	b.n	8101afc <NMI_Handler+0x4>

08101afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101afe:	b480      	push	{r7}
 8101b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101b02:	e7fe      	b.n	8101b02 <HardFault_Handler+0x4>

08101b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101b04:	b480      	push	{r7}
 8101b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101b08:	e7fe      	b.n	8101b08 <MemManage_Handler+0x4>

08101b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101b0a:	b480      	push	{r7}
 8101b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101b0e:	e7fe      	b.n	8101b0e <BusFault_Handler+0x4>

08101b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101b10:	b480      	push	{r7}
 8101b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101b14:	e7fe      	b.n	8101b14 <UsageFault_Handler+0x4>

08101b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101b16:	b480      	push	{r7}
 8101b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101b1a:	bf00      	nop
 8101b1c:	46bd      	mov	sp, r7
 8101b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b22:	4770      	bx	lr

08101b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101b24:	b480      	push	{r7}
 8101b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101b28:	bf00      	nop
 8101b2a:	46bd      	mov	sp, r7
 8101b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b30:	4770      	bx	lr

08101b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101b32:	b480      	push	{r7}
 8101b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101b36:	bf00      	nop
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b3e:	4770      	bx	lr

08101b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101b40:	b580      	push	{r7, lr}
 8101b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101b44:	f000 f986 	bl	8101e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101b48:	bf00      	nop
 8101b4a:	bd80      	pop	{r7, pc}

08101b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101b4c:	b480      	push	{r7}
 8101b4e:	af00      	add	r7, sp, #0
	return 1;
 8101b50:	2301      	movs	r3, #1
}
 8101b52:	4618      	mov	r0, r3
 8101b54:	46bd      	mov	sp, r7
 8101b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b5a:	4770      	bx	lr

08101b5c <_kill>:

int _kill(int pid, int sig)
{
 8101b5c:	b580      	push	{r7, lr}
 8101b5e:	b082      	sub	sp, #8
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	6078      	str	r0, [r7, #4]
 8101b64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101b66:	f006 fca3 	bl	81084b0 <__errno>
 8101b6a:	4603      	mov	r3, r0
 8101b6c:	2216      	movs	r2, #22
 8101b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8101b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101b74:	4618      	mov	r0, r3
 8101b76:	3708      	adds	r7, #8
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	bd80      	pop	{r7, pc}

08101b7c <_exit>:

void _exit (int status)
{
 8101b7c:	b580      	push	{r7, lr}
 8101b7e:	b082      	sub	sp, #8
 8101b80:	af00      	add	r7, sp, #0
 8101b82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101b84:	f04f 31ff 	mov.w	r1, #4294967295
 8101b88:	6878      	ldr	r0, [r7, #4]
 8101b8a:	f7ff ffe7 	bl	8101b5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8101b8e:	e7fe      	b.n	8101b8e <_exit+0x12>

08101b90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	b086      	sub	sp, #24
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	60f8      	str	r0, [r7, #12]
 8101b98:	60b9      	str	r1, [r7, #8]
 8101b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b9c:	2300      	movs	r3, #0
 8101b9e:	617b      	str	r3, [r7, #20]
 8101ba0:	e00a      	b.n	8101bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101ba2:	f3af 8000 	nop.w
 8101ba6:	4601      	mov	r1, r0
 8101ba8:	68bb      	ldr	r3, [r7, #8]
 8101baa:	1c5a      	adds	r2, r3, #1
 8101bac:	60ba      	str	r2, [r7, #8]
 8101bae:	b2ca      	uxtb	r2, r1
 8101bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bb2:	697b      	ldr	r3, [r7, #20]
 8101bb4:	3301      	adds	r3, #1
 8101bb6:	617b      	str	r3, [r7, #20]
 8101bb8:	697a      	ldr	r2, [r7, #20]
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	429a      	cmp	r2, r3
 8101bbe:	dbf0      	blt.n	8101ba2 <_read+0x12>
	}

return len;
 8101bc0:	687b      	ldr	r3, [r7, #4]
}
 8101bc2:	4618      	mov	r0, r3
 8101bc4:	3718      	adds	r7, #24
 8101bc6:	46bd      	mov	sp, r7
 8101bc8:	bd80      	pop	{r7, pc}

08101bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101bca:	b580      	push	{r7, lr}
 8101bcc:	b086      	sub	sp, #24
 8101bce:	af00      	add	r7, sp, #0
 8101bd0:	60f8      	str	r0, [r7, #12]
 8101bd2:	60b9      	str	r1, [r7, #8]
 8101bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bd6:	2300      	movs	r3, #0
 8101bd8:	617b      	str	r3, [r7, #20]
 8101bda:	e009      	b.n	8101bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101bdc:	68bb      	ldr	r3, [r7, #8]
 8101bde:	1c5a      	adds	r2, r3, #1
 8101be0:	60ba      	str	r2, [r7, #8]
 8101be2:	781b      	ldrb	r3, [r3, #0]
 8101be4:	4618      	mov	r0, r3
 8101be6:	f7ff fe21 	bl	810182c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101bea:	697b      	ldr	r3, [r7, #20]
 8101bec:	3301      	adds	r3, #1
 8101bee:	617b      	str	r3, [r7, #20]
 8101bf0:	697a      	ldr	r2, [r7, #20]
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	429a      	cmp	r2, r3
 8101bf6:	dbf1      	blt.n	8101bdc <_write+0x12>
	}
	return len;
 8101bf8:	687b      	ldr	r3, [r7, #4]
}
 8101bfa:	4618      	mov	r0, r3
 8101bfc:	3718      	adds	r7, #24
 8101bfe:	46bd      	mov	sp, r7
 8101c00:	bd80      	pop	{r7, pc}

08101c02 <_close>:

int _close(int file)
{
 8101c02:	b480      	push	{r7}
 8101c04:	b083      	sub	sp, #12
 8101c06:	af00      	add	r7, sp, #0
 8101c08:	6078      	str	r0, [r7, #4]
	return -1;
 8101c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101c0e:	4618      	mov	r0, r3
 8101c10:	370c      	adds	r7, #12
 8101c12:	46bd      	mov	sp, r7
 8101c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c18:	4770      	bx	lr

08101c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101c1a:	b480      	push	{r7}
 8101c1c:	b083      	sub	sp, #12
 8101c1e:	af00      	add	r7, sp, #0
 8101c20:	6078      	str	r0, [r7, #4]
 8101c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101c24:	683b      	ldr	r3, [r7, #0]
 8101c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8101c2c:	2300      	movs	r3, #0
}
 8101c2e:	4618      	mov	r0, r3
 8101c30:	370c      	adds	r7, #12
 8101c32:	46bd      	mov	sp, r7
 8101c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c38:	4770      	bx	lr

08101c3a <_isatty>:

int _isatty(int file)
{
 8101c3a:	b480      	push	{r7}
 8101c3c:	b083      	sub	sp, #12
 8101c3e:	af00      	add	r7, sp, #0
 8101c40:	6078      	str	r0, [r7, #4]
	return 1;
 8101c42:	2301      	movs	r3, #1
}
 8101c44:	4618      	mov	r0, r3
 8101c46:	370c      	adds	r7, #12
 8101c48:	46bd      	mov	sp, r7
 8101c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c4e:	4770      	bx	lr

08101c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101c50:	b480      	push	{r7}
 8101c52:	b085      	sub	sp, #20
 8101c54:	af00      	add	r7, sp, #0
 8101c56:	60f8      	str	r0, [r7, #12]
 8101c58:	60b9      	str	r1, [r7, #8]
 8101c5a:	607a      	str	r2, [r7, #4]
	return 0;
 8101c5c:	2300      	movs	r3, #0
}
 8101c5e:	4618      	mov	r0, r3
 8101c60:	3714      	adds	r7, #20
 8101c62:	46bd      	mov	sp, r7
 8101c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c68:	4770      	bx	lr
	...

08101c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101c6c:	b580      	push	{r7, lr}
 8101c6e:	b086      	sub	sp, #24
 8101c70:	af00      	add	r7, sp, #0
 8101c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101c74:	4a14      	ldr	r2, [pc, #80]	; (8101cc8 <_sbrk+0x5c>)
 8101c76:	4b15      	ldr	r3, [pc, #84]	; (8101ccc <_sbrk+0x60>)
 8101c78:	1ad3      	subs	r3, r2, r3
 8101c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101c7c:	697b      	ldr	r3, [r7, #20]
 8101c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101c80:	4b13      	ldr	r3, [pc, #76]	; (8101cd0 <_sbrk+0x64>)
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d102      	bne.n	8101c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101c88:	4b11      	ldr	r3, [pc, #68]	; (8101cd0 <_sbrk+0x64>)
 8101c8a:	4a12      	ldr	r2, [pc, #72]	; (8101cd4 <_sbrk+0x68>)
 8101c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101c8e:	4b10      	ldr	r3, [pc, #64]	; (8101cd0 <_sbrk+0x64>)
 8101c90:	681a      	ldr	r2, [r3, #0]
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	4413      	add	r3, r2
 8101c96:	693a      	ldr	r2, [r7, #16]
 8101c98:	429a      	cmp	r2, r3
 8101c9a:	d207      	bcs.n	8101cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101c9c:	f006 fc08 	bl	81084b0 <__errno>
 8101ca0:	4603      	mov	r3, r0
 8101ca2:	220c      	movs	r2, #12
 8101ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8101caa:	e009      	b.n	8101cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101cac:	4b08      	ldr	r3, [pc, #32]	; (8101cd0 <_sbrk+0x64>)
 8101cae:	681b      	ldr	r3, [r3, #0]
 8101cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101cb2:	4b07      	ldr	r3, [pc, #28]	; (8101cd0 <_sbrk+0x64>)
 8101cb4:	681a      	ldr	r2, [r3, #0]
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	4413      	add	r3, r2
 8101cba:	4a05      	ldr	r2, [pc, #20]	; (8101cd0 <_sbrk+0x64>)
 8101cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101cbe:	68fb      	ldr	r3, [r7, #12]
}
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	3718      	adds	r7, #24
 8101cc4:	46bd      	mov	sp, r7
 8101cc6:	bd80      	pop	{r7, pc}
 8101cc8:	10048000 	.word	0x10048000
 8101ccc:	00000400 	.word	0x00000400
 8101cd0:	10000350 	.word	0x10000350
 8101cd4:	10000368 	.word	0x10000368

08101cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101d10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101cdc:	f7ff fa14 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101ce0:	480c      	ldr	r0, [pc, #48]	; (8101d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101ce2:	490d      	ldr	r1, [pc, #52]	; (8101d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101ce4:	4a0d      	ldr	r2, [pc, #52]	; (8101d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101ce8:	e002      	b.n	8101cf0 <LoopCopyDataInit>

08101cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101cee:	3304      	adds	r3, #4

08101cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101cf4:	d3f9      	bcc.n	8101cea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101cf6:	4a0a      	ldr	r2, [pc, #40]	; (8101d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101cf8:	4c0a      	ldr	r4, [pc, #40]	; (8101d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101cfc:	e001      	b.n	8101d02 <LoopFillZerobss>

08101cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101d00:	3204      	adds	r2, #4

08101d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101d04:	d3fb      	bcc.n	8101cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101d06:	f006 fbd9 	bl	81084bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101d0a:	f7ff fb55 	bl	81013b8 <main>
  bx  lr
 8101d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101d10:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101d14:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101d18:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 8101d1c:	0810d464 	.word	0x0810d464
  ldr r2, =_sbss
 8101d20:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8101d24:	10000368 	.word	0x10000368

08101d28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101d28:	e7fe      	b.n	8101d28 <ADC3_IRQHandler>
	...

08101d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101d2c:	b580      	push	{r7, lr}
 8101d2e:	b082      	sub	sp, #8
 8101d30:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101d32:	4b28      	ldr	r3, [pc, #160]	; (8101dd4 <HAL_Init+0xa8>)
 8101d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d38:	4a26      	ldr	r2, [pc, #152]	; (8101dd4 <HAL_Init+0xa8>)
 8101d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101d42:	4b24      	ldr	r3, [pc, #144]	; (8101dd4 <HAL_Init+0xa8>)
 8101d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101d4c:	603b      	str	r3, [r7, #0]
 8101d4e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101d50:	4b21      	ldr	r3, [pc, #132]	; (8101dd8 <HAL_Init+0xac>)
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101d58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101d5c:	4a1e      	ldr	r2, [pc, #120]	; (8101dd8 <HAL_Init+0xac>)
 8101d5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d62:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d64:	4b1c      	ldr	r3, [pc, #112]	; (8101dd8 <HAL_Init+0xac>)
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	4a1b      	ldr	r2, [pc, #108]	; (8101dd8 <HAL_Init+0xac>)
 8101d6a:	f043 0301 	orr.w	r3, r3, #1
 8101d6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d70:	2003      	movs	r0, #3
 8101d72:	f001 fcad 	bl	81036d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d76:	f001 ff55 	bl	8103c24 <HAL_RCC_GetSysClockFreq>
 8101d7a:	4602      	mov	r2, r0
 8101d7c:	4b15      	ldr	r3, [pc, #84]	; (8101dd4 <HAL_Init+0xa8>)
 8101d7e:	699b      	ldr	r3, [r3, #24]
 8101d80:	0a1b      	lsrs	r3, r3, #8
 8101d82:	f003 030f 	and.w	r3, r3, #15
 8101d86:	4915      	ldr	r1, [pc, #84]	; (8101ddc <HAL_Init+0xb0>)
 8101d88:	5ccb      	ldrb	r3, [r1, r3]
 8101d8a:	f003 031f 	and.w	r3, r3, #31
 8101d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8101d92:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d94:	4b0f      	ldr	r3, [pc, #60]	; (8101dd4 <HAL_Init+0xa8>)
 8101d96:	699b      	ldr	r3, [r3, #24]
 8101d98:	f003 030f 	and.w	r3, r3, #15
 8101d9c:	4a0f      	ldr	r2, [pc, #60]	; (8101ddc <HAL_Init+0xb0>)
 8101d9e:	5cd3      	ldrb	r3, [r2, r3]
 8101da0:	f003 031f 	and.w	r3, r3, #31
 8101da4:	687a      	ldr	r2, [r7, #4]
 8101da6:	fa22 f303 	lsr.w	r3, r2, r3
 8101daa:	4a0d      	ldr	r2, [pc, #52]	; (8101de0 <HAL_Init+0xb4>)
 8101dac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101dae:	4b0c      	ldr	r3, [pc, #48]	; (8101de0 <HAL_Init+0xb4>)
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	4a0c      	ldr	r2, [pc, #48]	; (8101de4 <HAL_Init+0xb8>)
 8101db4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101db6:	2000      	movs	r0, #0
 8101db8:	f000 f816 	bl	8101de8 <HAL_InitTick>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b00      	cmp	r3, #0
 8101dc0:	d001      	beq.n	8101dc6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101dc2:	2301      	movs	r3, #1
 8101dc4:	e002      	b.n	8101dcc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101dc6:	f7ff fd49 	bl	810185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101dca:	2300      	movs	r3, #0
}
 8101dcc:	4618      	mov	r0, r3
 8101dce:	3708      	adds	r7, #8
 8101dd0:	46bd      	mov	sp, r7
 8101dd2:	bd80      	pop	{r7, pc}
 8101dd4:	58024400 	.word	0x58024400
 8101dd8:	40024400 	.word	0x40024400
 8101ddc:	0810cf6c 	.word	0x0810cf6c
 8101de0:	10000004 	.word	0x10000004
 8101de4:	10000000 	.word	0x10000000

08101de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	b082      	sub	sp, #8
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101df0:	4b15      	ldr	r3, [pc, #84]	; (8101e48 <HAL_InitTick+0x60>)
 8101df2:	781b      	ldrb	r3, [r3, #0]
 8101df4:	2b00      	cmp	r3, #0
 8101df6:	d101      	bne.n	8101dfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101df8:	2301      	movs	r3, #1
 8101dfa:	e021      	b.n	8101e40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101dfc:	4b13      	ldr	r3, [pc, #76]	; (8101e4c <HAL_InitTick+0x64>)
 8101dfe:	681a      	ldr	r2, [r3, #0]
 8101e00:	4b11      	ldr	r3, [pc, #68]	; (8101e48 <HAL_InitTick+0x60>)
 8101e02:	781b      	ldrb	r3, [r3, #0]
 8101e04:	4619      	mov	r1, r3
 8101e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8101e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101e12:	4618      	mov	r0, r3
 8101e14:	f001 fc81 	bl	810371a <HAL_SYSTICK_Config>
 8101e18:	4603      	mov	r3, r0
 8101e1a:	2b00      	cmp	r3, #0
 8101e1c:	d001      	beq.n	8101e22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101e1e:	2301      	movs	r3, #1
 8101e20:	e00e      	b.n	8101e40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	2b0f      	cmp	r3, #15
 8101e26:	d80a      	bhi.n	8101e3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101e28:	2200      	movs	r2, #0
 8101e2a:	6879      	ldr	r1, [r7, #4]
 8101e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8101e30:	f001 fc59 	bl	81036e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101e34:	4a06      	ldr	r2, [pc, #24]	; (8101e50 <HAL_InitTick+0x68>)
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101e3a:	2300      	movs	r3, #0
 8101e3c:	e000      	b.n	8101e40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101e3e:	2301      	movs	r3, #1
}
 8101e40:	4618      	mov	r0, r3
 8101e42:	3708      	adds	r7, #8
 8101e44:	46bd      	mov	sp, r7
 8101e46:	bd80      	pop	{r7, pc}
 8101e48:	10000010 	.word	0x10000010
 8101e4c:	10000000 	.word	0x10000000
 8101e50:	1000000c 	.word	0x1000000c

08101e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101e54:	b480      	push	{r7}
 8101e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101e58:	4b06      	ldr	r3, [pc, #24]	; (8101e74 <HAL_IncTick+0x20>)
 8101e5a:	781b      	ldrb	r3, [r3, #0]
 8101e5c:	461a      	mov	r2, r3
 8101e5e:	4b06      	ldr	r3, [pc, #24]	; (8101e78 <HAL_IncTick+0x24>)
 8101e60:	681b      	ldr	r3, [r3, #0]
 8101e62:	4413      	add	r3, r2
 8101e64:	4a04      	ldr	r2, [pc, #16]	; (8101e78 <HAL_IncTick+0x24>)
 8101e66:	6013      	str	r3, [r2, #0]
}
 8101e68:	bf00      	nop
 8101e6a:	46bd      	mov	sp, r7
 8101e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e70:	4770      	bx	lr
 8101e72:	bf00      	nop
 8101e74:	10000010 	.word	0x10000010
 8101e78:	10000354 	.word	0x10000354

08101e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101e7c:	b480      	push	{r7}
 8101e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8101e80:	4b03      	ldr	r3, [pc, #12]	; (8101e90 <HAL_GetTick+0x14>)
 8101e82:	681b      	ldr	r3, [r3, #0]
}
 8101e84:	4618      	mov	r0, r3
 8101e86:	46bd      	mov	sp, r7
 8101e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e8c:	4770      	bx	lr
 8101e8e:	bf00      	nop
 8101e90:	10000354 	.word	0x10000354

08101e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101e94:	b580      	push	{r7, lr}
 8101e96:	b084      	sub	sp, #16
 8101e98:	af00      	add	r7, sp, #0
 8101e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101e9c:	f7ff ffee 	bl	8101e7c <HAL_GetTick>
 8101ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101ea6:	68fb      	ldr	r3, [r7, #12]
 8101ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101eac:	d005      	beq.n	8101eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101eae:	4b0a      	ldr	r3, [pc, #40]	; (8101ed8 <HAL_Delay+0x44>)
 8101eb0:	781b      	ldrb	r3, [r3, #0]
 8101eb2:	461a      	mov	r2, r3
 8101eb4:	68fb      	ldr	r3, [r7, #12]
 8101eb6:	4413      	add	r3, r2
 8101eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101eba:	bf00      	nop
 8101ebc:	f7ff ffde 	bl	8101e7c <HAL_GetTick>
 8101ec0:	4602      	mov	r2, r0
 8101ec2:	68bb      	ldr	r3, [r7, #8]
 8101ec4:	1ad3      	subs	r3, r2, r3
 8101ec6:	68fa      	ldr	r2, [r7, #12]
 8101ec8:	429a      	cmp	r2, r3
 8101eca:	d8f7      	bhi.n	8101ebc <HAL_Delay+0x28>
  {
  }
}
 8101ecc:	bf00      	nop
 8101ece:	bf00      	nop
 8101ed0:	3710      	adds	r7, #16
 8101ed2:	46bd      	mov	sp, r7
 8101ed4:	bd80      	pop	{r7, pc}
 8101ed6:	bf00      	nop
 8101ed8:	10000010 	.word	0x10000010

08101edc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101edc:	b480      	push	{r7}
 8101ede:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101ee0:	4b03      	ldr	r3, [pc, #12]	; (8101ef0 <HAL_GetREVID+0x14>)
 8101ee2:	681b      	ldr	r3, [r3, #0]
 8101ee4:	0c1b      	lsrs	r3, r3, #16
}
 8101ee6:	4618      	mov	r0, r3
 8101ee8:	46bd      	mov	sp, r7
 8101eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eee:	4770      	bx	lr
 8101ef0:	5c001000 	.word	0x5c001000

08101ef4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101ef4:	b480      	push	{r7}
 8101ef6:	b083      	sub	sp, #12
 8101ef8:	af00      	add	r7, sp, #0
 8101efa:	6078      	str	r0, [r7, #4]
 8101efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	689b      	ldr	r3, [r3, #8]
 8101f02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8101f06:	683b      	ldr	r3, [r7, #0]
 8101f08:	431a      	orrs	r2, r3
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	609a      	str	r2, [r3, #8]
}
 8101f0e:	bf00      	nop
 8101f10:	370c      	adds	r7, #12
 8101f12:	46bd      	mov	sp, r7
 8101f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f18:	4770      	bx	lr

08101f1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8101f1a:	b480      	push	{r7}
 8101f1c:	b083      	sub	sp, #12
 8101f1e:	af00      	add	r7, sp, #0
 8101f20:	6078      	str	r0, [r7, #4]
 8101f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	689b      	ldr	r3, [r3, #8]
 8101f28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8101f2c:	683b      	ldr	r3, [r7, #0]
 8101f2e:	431a      	orrs	r2, r3
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	609a      	str	r2, [r3, #8]
}
 8101f34:	bf00      	nop
 8101f36:	370c      	adds	r7, #12
 8101f38:	46bd      	mov	sp, r7
 8101f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f3e:	4770      	bx	lr

08101f40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101f40:	b480      	push	{r7}
 8101f42:	b083      	sub	sp, #12
 8101f44:	af00      	add	r7, sp, #0
 8101f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	689b      	ldr	r3, [r3, #8]
 8101f4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101f50:	4618      	mov	r0, r3
 8101f52:	370c      	adds	r7, #12
 8101f54:	46bd      	mov	sp, r7
 8101f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5a:	4770      	bx	lr

08101f5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101f5c:	b480      	push	{r7}
 8101f5e:	b087      	sub	sp, #28
 8101f60:	af00      	add	r7, sp, #0
 8101f62:	60f8      	str	r0, [r7, #12]
 8101f64:	60b9      	str	r1, [r7, #8]
 8101f66:	607a      	str	r2, [r7, #4]
 8101f68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101f6a:	68fb      	ldr	r3, [r7, #12]
 8101f6c:	3360      	adds	r3, #96	; 0x60
 8101f6e:	461a      	mov	r2, r3
 8101f70:	68bb      	ldr	r3, [r7, #8]
 8101f72:	009b      	lsls	r3, r3, #2
 8101f74:	4413      	add	r3, r2
 8101f76:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101f78:	697b      	ldr	r3, [r7, #20]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101f86:	683b      	ldr	r3, [r7, #0]
 8101f88:	430b      	orrs	r3, r1
 8101f8a:	431a      	orrs	r2, r3
 8101f8c:	697b      	ldr	r3, [r7, #20]
 8101f8e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101f90:	bf00      	nop
 8101f92:	371c      	adds	r7, #28
 8101f94:	46bd      	mov	sp, r7
 8101f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f9a:	4770      	bx	lr

08101f9c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101f9c:	b480      	push	{r7}
 8101f9e:	b085      	sub	sp, #20
 8101fa0:	af00      	add	r7, sp, #0
 8101fa2:	60f8      	str	r0, [r7, #12]
 8101fa4:	60b9      	str	r1, [r7, #8]
 8101fa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	691b      	ldr	r3, [r3, #16]
 8101fac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101fb0:	68bb      	ldr	r3, [r7, #8]
 8101fb2:	f003 031f 	and.w	r3, r3, #31
 8101fb6:	6879      	ldr	r1, [r7, #4]
 8101fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8101fbc:	431a      	orrs	r2, r3
 8101fbe:	68fb      	ldr	r3, [r7, #12]
 8101fc0:	611a      	str	r2, [r3, #16]
}
 8101fc2:	bf00      	nop
 8101fc4:	3714      	adds	r7, #20
 8101fc6:	46bd      	mov	sp, r7
 8101fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fcc:	4770      	bx	lr

08101fce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101fce:	b480      	push	{r7}
 8101fd0:	b087      	sub	sp, #28
 8101fd2:	af00      	add	r7, sp, #0
 8101fd4:	60f8      	str	r0, [r7, #12]
 8101fd6:	60b9      	str	r1, [r7, #8]
 8101fd8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	3360      	adds	r3, #96	; 0x60
 8101fde:	461a      	mov	r2, r3
 8101fe0:	68bb      	ldr	r3, [r7, #8]
 8101fe2:	009b      	lsls	r3, r3, #2
 8101fe4:	4413      	add	r3, r2
 8101fe6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101fe8:	697b      	ldr	r3, [r7, #20]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	431a      	orrs	r2, r3
 8101ff4:	697b      	ldr	r3, [r7, #20]
 8101ff6:	601a      	str	r2, [r3, #0]
  }
}
 8101ff8:	bf00      	nop
 8101ffa:	371c      	adds	r7, #28
 8101ffc:	46bd      	mov	sp, r7
 8101ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102002:	4770      	bx	lr

08102004 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102004:	b480      	push	{r7}
 8102006:	b083      	sub	sp, #12
 8102008:	af00      	add	r7, sp, #0
 810200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	68db      	ldr	r3, [r3, #12]
 8102010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102014:	2b00      	cmp	r3, #0
 8102016:	d101      	bne.n	810201c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102018:	2301      	movs	r3, #1
 810201a:	e000      	b.n	810201e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 810201c:	2300      	movs	r3, #0
}
 810201e:	4618      	mov	r0, r3
 8102020:	370c      	adds	r7, #12
 8102022:	46bd      	mov	sp, r7
 8102024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102028:	4770      	bx	lr

0810202a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 810202a:	b480      	push	{r7}
 810202c:	b087      	sub	sp, #28
 810202e:	af00      	add	r7, sp, #0
 8102030:	60f8      	str	r0, [r7, #12]
 8102032:	60b9      	str	r1, [r7, #8]
 8102034:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102036:	68fb      	ldr	r3, [r7, #12]
 8102038:	3330      	adds	r3, #48	; 0x30
 810203a:	461a      	mov	r2, r3
 810203c:	68bb      	ldr	r3, [r7, #8]
 810203e:	0a1b      	lsrs	r3, r3, #8
 8102040:	009b      	lsls	r3, r3, #2
 8102042:	f003 030c 	and.w	r3, r3, #12
 8102046:	4413      	add	r3, r2
 8102048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810204a:	697b      	ldr	r3, [r7, #20]
 810204c:	681a      	ldr	r2, [r3, #0]
 810204e:	68bb      	ldr	r3, [r7, #8]
 8102050:	f003 031f 	and.w	r3, r3, #31
 8102054:	211f      	movs	r1, #31
 8102056:	fa01 f303 	lsl.w	r3, r1, r3
 810205a:	43db      	mvns	r3, r3
 810205c:	401a      	ands	r2, r3
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	0e9b      	lsrs	r3, r3, #26
 8102062:	f003 011f 	and.w	r1, r3, #31
 8102066:	68bb      	ldr	r3, [r7, #8]
 8102068:	f003 031f 	and.w	r3, r3, #31
 810206c:	fa01 f303 	lsl.w	r3, r1, r3
 8102070:	431a      	orrs	r2, r3
 8102072:	697b      	ldr	r3, [r7, #20]
 8102074:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102076:	bf00      	nop
 8102078:	371c      	adds	r7, #28
 810207a:	46bd      	mov	sp, r7
 810207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102080:	4770      	bx	lr

08102082 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102082:	b480      	push	{r7}
 8102084:	b087      	sub	sp, #28
 8102086:	af00      	add	r7, sp, #0
 8102088:	60f8      	str	r0, [r7, #12]
 810208a:	60b9      	str	r1, [r7, #8]
 810208c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810208e:	68fb      	ldr	r3, [r7, #12]
 8102090:	3314      	adds	r3, #20
 8102092:	461a      	mov	r2, r3
 8102094:	68bb      	ldr	r3, [r7, #8]
 8102096:	0e5b      	lsrs	r3, r3, #25
 8102098:	009b      	lsls	r3, r3, #2
 810209a:	f003 0304 	and.w	r3, r3, #4
 810209e:	4413      	add	r3, r2
 81020a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81020a2:	697b      	ldr	r3, [r7, #20]
 81020a4:	681a      	ldr	r2, [r3, #0]
 81020a6:	68bb      	ldr	r3, [r7, #8]
 81020a8:	0d1b      	lsrs	r3, r3, #20
 81020aa:	f003 031f 	and.w	r3, r3, #31
 81020ae:	2107      	movs	r1, #7
 81020b0:	fa01 f303 	lsl.w	r3, r1, r3
 81020b4:	43db      	mvns	r3, r3
 81020b6:	401a      	ands	r2, r3
 81020b8:	68bb      	ldr	r3, [r7, #8]
 81020ba:	0d1b      	lsrs	r3, r3, #20
 81020bc:	f003 031f 	and.w	r3, r3, #31
 81020c0:	6879      	ldr	r1, [r7, #4]
 81020c2:	fa01 f303 	lsl.w	r3, r1, r3
 81020c6:	431a      	orrs	r2, r3
 81020c8:	697b      	ldr	r3, [r7, #20]
 81020ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81020cc:	bf00      	nop
 81020ce:	371c      	adds	r7, #28
 81020d0:	46bd      	mov	sp, r7
 81020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020d6:	4770      	bx	lr

081020d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81020d8:	b480      	push	{r7}
 81020da:	b085      	sub	sp, #20
 81020dc:	af00      	add	r7, sp, #0
 81020de:	60f8      	str	r0, [r7, #12]
 81020e0:	60b9      	str	r1, [r7, #8]
 81020e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81020ea:	68bb      	ldr	r3, [r7, #8]
 81020ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81020f0:	43db      	mvns	r3, r3
 81020f2:	401a      	ands	r2, r3
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	f003 0318 	and.w	r3, r3, #24
 81020fa:	4908      	ldr	r1, [pc, #32]	; (810211c <LL_ADC_SetChannelSingleDiff+0x44>)
 81020fc:	40d9      	lsrs	r1, r3
 81020fe:	68bb      	ldr	r3, [r7, #8]
 8102100:	400b      	ands	r3, r1
 8102102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102106:	431a      	orrs	r2, r3
 8102108:	68fb      	ldr	r3, [r7, #12]
 810210a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 810210e:	bf00      	nop
 8102110:	3714      	adds	r7, #20
 8102112:	46bd      	mov	sp, r7
 8102114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102118:	4770      	bx	lr
 810211a:	bf00      	nop
 810211c:	000fffff 	.word	0x000fffff

08102120 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102120:	b480      	push	{r7}
 8102122:	b083      	sub	sp, #12
 8102124:	af00      	add	r7, sp, #0
 8102126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	689b      	ldr	r3, [r3, #8]
 810212c:	f003 031f 	and.w	r3, r3, #31
}
 8102130:	4618      	mov	r0, r3
 8102132:	370c      	adds	r7, #12
 8102134:	46bd      	mov	sp, r7
 8102136:	f85d 7b04 	ldr.w	r7, [sp], #4
 810213a:	4770      	bx	lr

0810213c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810213c:	b480      	push	{r7}
 810213e:	b083      	sub	sp, #12
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	689b      	ldr	r3, [r3, #8]
 8102148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 810214c:	4618      	mov	r0, r3
 810214e:	370c      	adds	r7, #12
 8102150:	46bd      	mov	sp, r7
 8102152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102156:	4770      	bx	lr

08102158 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102158:	b480      	push	{r7}
 810215a:	b083      	sub	sp, #12
 810215c:	af00      	add	r7, sp, #0
 810215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	689b      	ldr	r3, [r3, #8]
 8102164:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810216c:	687a      	ldr	r2, [r7, #4]
 810216e:	6093      	str	r3, [r2, #8]
}
 8102170:	bf00      	nop
 8102172:	370c      	adds	r7, #12
 8102174:	46bd      	mov	sp, r7
 8102176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810217a:	4770      	bx	lr

0810217c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 810217c:	b480      	push	{r7}
 810217e:	b083      	sub	sp, #12
 8102180:	af00      	add	r7, sp, #0
 8102182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	689b      	ldr	r3, [r3, #8]
 8102188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810218c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102190:	d101      	bne.n	8102196 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102192:	2301      	movs	r3, #1
 8102194:	e000      	b.n	8102198 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102196:	2300      	movs	r3, #0
}
 8102198:	4618      	mov	r0, r3
 810219a:	370c      	adds	r7, #12
 810219c:	46bd      	mov	sp, r7
 810219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021a2:	4770      	bx	lr

081021a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81021a4:	b480      	push	{r7}
 81021a6:	b083      	sub	sp, #12
 81021a8:	af00      	add	r7, sp, #0
 81021aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	689b      	ldr	r3, [r3, #8]
 81021b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 81021b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81021b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81021c0:	bf00      	nop
 81021c2:	370c      	adds	r7, #12
 81021c4:	46bd      	mov	sp, r7
 81021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ca:	4770      	bx	lr

081021cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81021cc:	b480      	push	{r7}
 81021ce:	b083      	sub	sp, #12
 81021d0:	af00      	add	r7, sp, #0
 81021d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	689b      	ldr	r3, [r3, #8]
 81021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81021dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81021e0:	d101      	bne.n	81021e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81021e2:	2301      	movs	r3, #1
 81021e4:	e000      	b.n	81021e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81021e6:	2300      	movs	r3, #0
}
 81021e8:	4618      	mov	r0, r3
 81021ea:	370c      	adds	r7, #12
 81021ec:	46bd      	mov	sp, r7
 81021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f2:	4770      	bx	lr

081021f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81021f4:	b480      	push	{r7}
 81021f6:	b083      	sub	sp, #12
 81021f8:	af00      	add	r7, sp, #0
 81021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	689b      	ldr	r3, [r3, #8]
 8102200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102208:	f043 0201 	orr.w	r2, r3, #1
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102210:	bf00      	nop
 8102212:	370c      	adds	r7, #12
 8102214:	46bd      	mov	sp, r7
 8102216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810221a:	4770      	bx	lr

0810221c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 810221c:	b480      	push	{r7}
 810221e:	b083      	sub	sp, #12
 8102220:	af00      	add	r7, sp, #0
 8102222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	689b      	ldr	r3, [r3, #8]
 8102228:	f003 0301 	and.w	r3, r3, #1
 810222c:	2b01      	cmp	r3, #1
 810222e:	d101      	bne.n	8102234 <LL_ADC_IsEnabled+0x18>
 8102230:	2301      	movs	r3, #1
 8102232:	e000      	b.n	8102236 <LL_ADC_IsEnabled+0x1a>
 8102234:	2300      	movs	r3, #0
}
 8102236:	4618      	mov	r0, r3
 8102238:	370c      	adds	r7, #12
 810223a:	46bd      	mov	sp, r7
 810223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102240:	4770      	bx	lr

08102242 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8102242:	b480      	push	{r7}
 8102244:	b083      	sub	sp, #12
 8102246:	af00      	add	r7, sp, #0
 8102248:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	689b      	ldr	r3, [r3, #8]
 810224e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102252:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102256:	f043 0204 	orr.w	r2, r3, #4
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 810225e:	bf00      	nop
 8102260:	370c      	adds	r7, #12
 8102262:	46bd      	mov	sp, r7
 8102264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102268:	4770      	bx	lr

0810226a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810226a:	b480      	push	{r7}
 810226c:	b083      	sub	sp, #12
 810226e:	af00      	add	r7, sp, #0
 8102270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	689b      	ldr	r3, [r3, #8]
 8102276:	f003 0304 	and.w	r3, r3, #4
 810227a:	2b04      	cmp	r3, #4
 810227c:	d101      	bne.n	8102282 <LL_ADC_REG_IsConversionOngoing+0x18>
 810227e:	2301      	movs	r3, #1
 8102280:	e000      	b.n	8102284 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102282:	2300      	movs	r3, #0
}
 8102284:	4618      	mov	r0, r3
 8102286:	370c      	adds	r7, #12
 8102288:	46bd      	mov	sp, r7
 810228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228e:	4770      	bx	lr

08102290 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102290:	b480      	push	{r7}
 8102292:	b083      	sub	sp, #12
 8102294:	af00      	add	r7, sp, #0
 8102296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102298:	687b      	ldr	r3, [r7, #4]
 810229a:	689b      	ldr	r3, [r3, #8]
 810229c:	f003 0308 	and.w	r3, r3, #8
 81022a0:	2b08      	cmp	r3, #8
 81022a2:	d101      	bne.n	81022a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81022a4:	2301      	movs	r3, #1
 81022a6:	e000      	b.n	81022aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81022a8:	2300      	movs	r3, #0
}
 81022aa:	4618      	mov	r0, r3
 81022ac:	370c      	adds	r7, #12
 81022ae:	46bd      	mov	sp, r7
 81022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b4:	4770      	bx	lr
	...

081022b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81022b8:	b590      	push	{r4, r7, lr}
 81022ba:	b089      	sub	sp, #36	; 0x24
 81022bc:	af00      	add	r7, sp, #0
 81022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81022c0:	2300      	movs	r3, #0
 81022c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81022c4:	2300      	movs	r3, #0
 81022c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	2b00      	cmp	r3, #0
 81022cc:	d101      	bne.n	81022d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81022ce:	2301      	movs	r3, #1
 81022d0:	e18f      	b.n	81025f2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	68db      	ldr	r3, [r3, #12]
 81022d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022dc:	2b00      	cmp	r3, #0
 81022de:	d109      	bne.n	81022f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81022e0:	6878      	ldr	r0, [r7, #4]
 81022e2:	f7ff fad5 	bl	8101890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	2200      	movs	r2, #0
 81022ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	2200      	movs	r2, #0
 81022f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	4618      	mov	r0, r3
 81022fa:	f7ff ff3f 	bl	810217c <LL_ADC_IsDeepPowerDownEnabled>
 81022fe:	4603      	mov	r3, r0
 8102300:	2b00      	cmp	r3, #0
 8102302:	d004      	beq.n	810230e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	4618      	mov	r0, r3
 810230a:	f7ff ff25 	bl	8102158 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	681b      	ldr	r3, [r3, #0]
 8102312:	4618      	mov	r0, r3
 8102314:	f7ff ff5a 	bl	81021cc <LL_ADC_IsInternalRegulatorEnabled>
 8102318:	4603      	mov	r3, r0
 810231a:	2b00      	cmp	r3, #0
 810231c:	d114      	bne.n	8102348 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	4618      	mov	r0, r3
 8102324:	f7ff ff3e 	bl	81021a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102328:	4b88      	ldr	r3, [pc, #544]	; (810254c <HAL_ADC_Init+0x294>)
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	099b      	lsrs	r3, r3, #6
 810232e:	4a88      	ldr	r2, [pc, #544]	; (8102550 <HAL_ADC_Init+0x298>)
 8102330:	fba2 2303 	umull	r2, r3, r2, r3
 8102334:	099b      	lsrs	r3, r3, #6
 8102336:	3301      	adds	r3, #1
 8102338:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810233a:	e002      	b.n	8102342 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810233c:	68bb      	ldr	r3, [r7, #8]
 810233e:	3b01      	subs	r3, #1
 8102340:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102342:	68bb      	ldr	r3, [r7, #8]
 8102344:	2b00      	cmp	r3, #0
 8102346:	d1f9      	bne.n	810233c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	4618      	mov	r0, r3
 810234e:	f7ff ff3d 	bl	81021cc <LL_ADC_IsInternalRegulatorEnabled>
 8102352:	4603      	mov	r3, r0
 8102354:	2b00      	cmp	r3, #0
 8102356:	d10d      	bne.n	8102374 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810235c:	f043 0210 	orr.w	r2, r3, #16
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102368:	f043 0201 	orr.w	r2, r3, #1
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102370:	2301      	movs	r3, #1
 8102372:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	4618      	mov	r0, r3
 810237a:	f7ff ff76 	bl	810226a <LL_ADC_REG_IsConversionOngoing>
 810237e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102384:	f003 0310 	and.w	r3, r3, #16
 8102388:	2b00      	cmp	r3, #0
 810238a:	f040 8129 	bne.w	81025e0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810238e:	697b      	ldr	r3, [r7, #20]
 8102390:	2b00      	cmp	r3, #0
 8102392:	f040 8125 	bne.w	81025e0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810239a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810239e:	f043 0202 	orr.w	r2, r3, #2
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	4618      	mov	r0, r3
 81023ac:	f7ff ff36 	bl	810221c <LL_ADC_IsEnabled>
 81023b0:	4603      	mov	r3, r0
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d136      	bne.n	8102424 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a66      	ldr	r2, [pc, #408]	; (8102554 <HAL_ADC_Init+0x29c>)
 81023bc:	4293      	cmp	r3, r2
 81023be:	d004      	beq.n	81023ca <HAL_ADC_Init+0x112>
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	4a64      	ldr	r2, [pc, #400]	; (8102558 <HAL_ADC_Init+0x2a0>)
 81023c6:	4293      	cmp	r3, r2
 81023c8:	d10e      	bne.n	81023e8 <HAL_ADC_Init+0x130>
 81023ca:	4862      	ldr	r0, [pc, #392]	; (8102554 <HAL_ADC_Init+0x29c>)
 81023cc:	f7ff ff26 	bl	810221c <LL_ADC_IsEnabled>
 81023d0:	4604      	mov	r4, r0
 81023d2:	4861      	ldr	r0, [pc, #388]	; (8102558 <HAL_ADC_Init+0x2a0>)
 81023d4:	f7ff ff22 	bl	810221c <LL_ADC_IsEnabled>
 81023d8:	4603      	mov	r3, r0
 81023da:	4323      	orrs	r3, r4
 81023dc:	2b00      	cmp	r3, #0
 81023de:	bf0c      	ite	eq
 81023e0:	2301      	moveq	r3, #1
 81023e2:	2300      	movne	r3, #0
 81023e4:	b2db      	uxtb	r3, r3
 81023e6:	e008      	b.n	81023fa <HAL_ADC_Init+0x142>
 81023e8:	485c      	ldr	r0, [pc, #368]	; (810255c <HAL_ADC_Init+0x2a4>)
 81023ea:	f7ff ff17 	bl	810221c <LL_ADC_IsEnabled>
 81023ee:	4603      	mov	r3, r0
 81023f0:	2b00      	cmp	r3, #0
 81023f2:	bf0c      	ite	eq
 81023f4:	2301      	moveq	r3, #1
 81023f6:	2300      	movne	r3, #0
 81023f8:	b2db      	uxtb	r3, r3
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d012      	beq.n	8102424 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	4a54      	ldr	r2, [pc, #336]	; (8102554 <HAL_ADC_Init+0x29c>)
 8102404:	4293      	cmp	r3, r2
 8102406:	d004      	beq.n	8102412 <HAL_ADC_Init+0x15a>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	4a52      	ldr	r2, [pc, #328]	; (8102558 <HAL_ADC_Init+0x2a0>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d101      	bne.n	8102416 <HAL_ADC_Init+0x15e>
 8102412:	4a53      	ldr	r2, [pc, #332]	; (8102560 <HAL_ADC_Init+0x2a8>)
 8102414:	e000      	b.n	8102418 <HAL_ADC_Init+0x160>
 8102416:	4a53      	ldr	r2, [pc, #332]	; (8102564 <HAL_ADC_Init+0x2ac>)
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	685b      	ldr	r3, [r3, #4]
 810241c:	4619      	mov	r1, r3
 810241e:	4610      	mov	r0, r2
 8102420:	f7ff fd68 	bl	8101ef4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102424:	f7ff fd5a 	bl	8101edc <HAL_GetREVID>
 8102428:	4603      	mov	r3, r0
 810242a:	f241 0203 	movw	r2, #4099	; 0x1003
 810242e:	4293      	cmp	r3, r2
 8102430:	d914      	bls.n	810245c <HAL_ADC_Init+0x1a4>
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	689b      	ldr	r3, [r3, #8]
 8102436:	2b10      	cmp	r3, #16
 8102438:	d110      	bne.n	810245c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	7d5b      	ldrb	r3, [r3, #21]
 810243e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102444:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810244a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	7f1b      	ldrb	r3, [r3, #28]
 8102450:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102452:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102454:	f043 030c 	orr.w	r3, r3, #12
 8102458:	61bb      	str	r3, [r7, #24]
 810245a:	e00d      	b.n	8102478 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	7d5b      	ldrb	r3, [r3, #21]
 8102460:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102466:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810246c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	7f1b      	ldrb	r3, [r3, #28]
 8102472:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102474:	4313      	orrs	r3, r2
 8102476:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	7f1b      	ldrb	r3, [r3, #28]
 810247c:	2b01      	cmp	r3, #1
 810247e:	d106      	bne.n	810248e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	6a1b      	ldr	r3, [r3, #32]
 8102484:	3b01      	subs	r3, #1
 8102486:	045b      	lsls	r3, r3, #17
 8102488:	69ba      	ldr	r2, [r7, #24]
 810248a:	4313      	orrs	r3, r2
 810248c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102492:	2b00      	cmp	r3, #0
 8102494:	d009      	beq.n	81024aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810249a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81024a4:	69ba      	ldr	r2, [r7, #24]
 81024a6:	4313      	orrs	r3, r2
 81024a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	68da      	ldr	r2, [r3, #12]
 81024b0:	4b2d      	ldr	r3, [pc, #180]	; (8102568 <HAL_ADC_Init+0x2b0>)
 81024b2:	4013      	ands	r3, r2
 81024b4:	687a      	ldr	r2, [r7, #4]
 81024b6:	6812      	ldr	r2, [r2, #0]
 81024b8:	69b9      	ldr	r1, [r7, #24]
 81024ba:	430b      	orrs	r3, r1
 81024bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	4618      	mov	r0, r3
 81024c4:	f7ff fed1 	bl	810226a <LL_ADC_REG_IsConversionOngoing>
 81024c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	681b      	ldr	r3, [r3, #0]
 81024ce:	4618      	mov	r0, r3
 81024d0:	f7ff fede 	bl	8102290 <LL_ADC_INJ_IsConversionOngoing>
 81024d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81024d6:	693b      	ldr	r3, [r7, #16]
 81024d8:	2b00      	cmp	r3, #0
 81024da:	d15f      	bne.n	810259c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81024dc:	68fb      	ldr	r3, [r7, #12]
 81024de:	2b00      	cmp	r3, #0
 81024e0:	d15c      	bne.n	810259c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	7d1b      	ldrb	r3, [r3, #20]
 81024e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81024ec:	4313      	orrs	r3, r2
 81024ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	68db      	ldr	r3, [r3, #12]
 81024f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81024fa:	f023 0303 	bic.w	r3, r3, #3
 81024fe:	687a      	ldr	r2, [r7, #4]
 8102500:	6812      	ldr	r2, [r2, #0]
 8102502:	69b9      	ldr	r1, [r7, #24]
 8102504:	430b      	orrs	r3, r1
 8102506:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810250e:	2b01      	cmp	r3, #1
 8102510:	d12e      	bne.n	8102570 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102516:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	691a      	ldr	r2, [r3, #16]
 810251e:	4b13      	ldr	r3, [pc, #76]	; (810256c <HAL_ADC_Init+0x2b4>)
 8102520:	4013      	ands	r3, r2
 8102522:	687a      	ldr	r2, [r7, #4]
 8102524:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102526:	3a01      	subs	r2, #1
 8102528:	0411      	lsls	r1, r2, #16
 810252a:	687a      	ldr	r2, [r7, #4]
 810252c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810252e:	4311      	orrs	r1, r2
 8102530:	687a      	ldr	r2, [r7, #4]
 8102532:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102534:	4311      	orrs	r1, r2
 8102536:	687a      	ldr	r2, [r7, #4]
 8102538:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810253a:	430a      	orrs	r2, r1
 810253c:	431a      	orrs	r2, r3
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	f042 0201 	orr.w	r2, r2, #1
 8102546:	611a      	str	r2, [r3, #16]
 8102548:	e01a      	b.n	8102580 <HAL_ADC_Init+0x2c8>
 810254a:	bf00      	nop
 810254c:	10000000 	.word	0x10000000
 8102550:	053e2d63 	.word	0x053e2d63
 8102554:	40022000 	.word	0x40022000
 8102558:	40022100 	.word	0x40022100
 810255c:	58026000 	.word	0x58026000
 8102560:	40022300 	.word	0x40022300
 8102564:	58026300 	.word	0x58026300
 8102568:	fff0c003 	.word	0xfff0c003
 810256c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	691a      	ldr	r2, [r3, #16]
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	f022 0201 	bic.w	r2, r2, #1
 810257e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	691b      	ldr	r3, [r3, #16]
 8102586:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	430a      	orrs	r2, r1
 8102594:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102596:	6878      	ldr	r0, [r7, #4]
 8102598:	f000 fdd6 	bl	8103148 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	68db      	ldr	r3, [r3, #12]
 81025a0:	2b01      	cmp	r3, #1
 81025a2:	d10c      	bne.n	81025be <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81025aa:	f023 010f 	bic.w	r1, r3, #15
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	699b      	ldr	r3, [r3, #24]
 81025b2:	1e5a      	subs	r2, r3, #1
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	430a      	orrs	r2, r1
 81025ba:	631a      	str	r2, [r3, #48]	; 0x30
 81025bc:	e007      	b.n	81025ce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	f022 020f 	bic.w	r2, r2, #15
 81025cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025d2:	f023 0303 	bic.w	r3, r3, #3
 81025d6:	f043 0201 	orr.w	r2, r3, #1
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	655a      	str	r2, [r3, #84]	; 0x54
 81025de:	e007      	b.n	81025f0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025e4:	f043 0210 	orr.w	r2, r3, #16
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81025ec:	2301      	movs	r3, #1
 81025ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81025f0:	7ffb      	ldrb	r3, [r7, #31]
}
 81025f2:	4618      	mov	r0, r3
 81025f4:	3724      	adds	r7, #36	; 0x24
 81025f6:	46bd      	mov	sp, r7
 81025f8:	bd90      	pop	{r4, r7, pc}
 81025fa:	bf00      	nop

081025fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81025fc:	b580      	push	{r7, lr}
 81025fe:	b086      	sub	sp, #24
 8102600:	af00      	add	r7, sp, #0
 8102602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	4a5d      	ldr	r2, [pc, #372]	; (8102780 <HAL_ADC_Start+0x184>)
 810260a:	4293      	cmp	r3, r2
 810260c:	d004      	beq.n	8102618 <HAL_ADC_Start+0x1c>
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	4a5c      	ldr	r2, [pc, #368]	; (8102784 <HAL_ADC_Start+0x188>)
 8102614:	4293      	cmp	r3, r2
 8102616:	d101      	bne.n	810261c <HAL_ADC_Start+0x20>
 8102618:	4b5b      	ldr	r3, [pc, #364]	; (8102788 <HAL_ADC_Start+0x18c>)
 810261a:	e000      	b.n	810261e <HAL_ADC_Start+0x22>
 810261c:	4b5b      	ldr	r3, [pc, #364]	; (810278c <HAL_ADC_Start+0x190>)
 810261e:	4618      	mov	r0, r3
 8102620:	f7ff fd7e 	bl	8102120 <LL_ADC_GetMultimode>
 8102624:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	681b      	ldr	r3, [r3, #0]
 810262a:	4618      	mov	r0, r3
 810262c:	f7ff fe1d 	bl	810226a <LL_ADC_REG_IsConversionOngoing>
 8102630:	4603      	mov	r3, r0
 8102632:	2b00      	cmp	r3, #0
 8102634:	f040 809c 	bne.w	8102770 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810263e:	2b01      	cmp	r3, #1
 8102640:	d101      	bne.n	8102646 <HAL_ADC_Start+0x4a>
 8102642:	2302      	movs	r3, #2
 8102644:	e097      	b.n	8102776 <HAL_ADC_Start+0x17a>
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	2201      	movs	r2, #1
 810264a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 810264e:	6878      	ldr	r0, [r7, #4]
 8102650:	f000 fcf0 	bl	8103034 <ADC_Enable>
 8102654:	4603      	mov	r3, r0
 8102656:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8102658:	7dfb      	ldrb	r3, [r7, #23]
 810265a:	2b00      	cmp	r3, #0
 810265c:	f040 8083 	bne.w	8102766 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102664:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102668:	f023 0301 	bic.w	r3, r3, #1
 810266c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	4a42      	ldr	r2, [pc, #264]	; (8102784 <HAL_ADC_Start+0x188>)
 810267a:	4293      	cmp	r3, r2
 810267c:	d002      	beq.n	8102684 <HAL_ADC_Start+0x88>
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	e000      	b.n	8102686 <HAL_ADC_Start+0x8a>
 8102684:	4b3e      	ldr	r3, [pc, #248]	; (8102780 <HAL_ADC_Start+0x184>)
 8102686:	687a      	ldr	r2, [r7, #4]
 8102688:	6812      	ldr	r2, [r2, #0]
 810268a:	4293      	cmp	r3, r2
 810268c:	d002      	beq.n	8102694 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810268e:	693b      	ldr	r3, [r7, #16]
 8102690:	2b00      	cmp	r3, #0
 8102692:	d105      	bne.n	81026a0 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102698:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026ac:	d106      	bne.n	81026bc <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81026b2:	f023 0206 	bic.w	r2, r3, #6
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	659a      	str	r2, [r3, #88]	; 0x58
 81026ba:	e002      	b.n	81026c2 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	2200      	movs	r2, #0
 81026c0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	221c      	movs	r2, #28
 81026c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	2200      	movs	r2, #0
 81026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	681b      	ldr	r3, [r3, #0]
 81026d6:	4a2b      	ldr	r2, [pc, #172]	; (8102784 <HAL_ADC_Start+0x188>)
 81026d8:	4293      	cmp	r3, r2
 81026da:	d002      	beq.n	81026e2 <HAL_ADC_Start+0xe6>
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	e000      	b.n	81026e4 <HAL_ADC_Start+0xe8>
 81026e2:	4b27      	ldr	r3, [pc, #156]	; (8102780 <HAL_ADC_Start+0x184>)
 81026e4:	687a      	ldr	r2, [r7, #4]
 81026e6:	6812      	ldr	r2, [r2, #0]
 81026e8:	4293      	cmp	r3, r2
 81026ea:	d008      	beq.n	81026fe <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81026ec:	693b      	ldr	r3, [r7, #16]
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d005      	beq.n	81026fe <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81026f2:	693b      	ldr	r3, [r7, #16]
 81026f4:	2b05      	cmp	r3, #5
 81026f6:	d002      	beq.n	81026fe <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81026f8:	693b      	ldr	r3, [r7, #16]
 81026fa:	2b09      	cmp	r3, #9
 81026fc:	d114      	bne.n	8102728 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	68db      	ldr	r3, [r3, #12]
 8102704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102708:	2b00      	cmp	r3, #0
 810270a:	d007      	beq.n	810271c <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102710:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102714:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	4618      	mov	r0, r3
 8102722:	f7ff fd8e 	bl	8102242 <LL_ADC_REG_StartConversion>
 8102726:	e025      	b.n	8102774 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810272c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	4a12      	ldr	r2, [pc, #72]	; (8102784 <HAL_ADC_Start+0x188>)
 810273a:	4293      	cmp	r3, r2
 810273c:	d002      	beq.n	8102744 <HAL_ADC_Start+0x148>
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	e000      	b.n	8102746 <HAL_ADC_Start+0x14a>
 8102744:	4b0e      	ldr	r3, [pc, #56]	; (8102780 <HAL_ADC_Start+0x184>)
 8102746:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8102748:	68fb      	ldr	r3, [r7, #12]
 810274a:	68db      	ldr	r3, [r3, #12]
 810274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102750:	2b00      	cmp	r3, #0
 8102752:	d00f      	beq.n	8102774 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102758:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 810275c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	655a      	str	r2, [r3, #84]	; 0x54
 8102764:	e006      	b.n	8102774 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	2200      	movs	r2, #0
 810276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 810276e:	e001      	b.n	8102774 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8102770:	2302      	movs	r3, #2
 8102772:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8102774:	7dfb      	ldrb	r3, [r7, #23]
}
 8102776:	4618      	mov	r0, r3
 8102778:	3718      	adds	r7, #24
 810277a:	46bd      	mov	sp, r7
 810277c:	bd80      	pop	{r7, pc}
 810277e:	bf00      	nop
 8102780:	40022000 	.word	0x40022000
 8102784:	40022100 	.word	0x40022100
 8102788:	40022300 	.word	0x40022300
 810278c:	58026300 	.word	0x58026300

08102790 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8102790:	b580      	push	{r7, lr}
 8102792:	b088      	sub	sp, #32
 8102794:	af00      	add	r7, sp, #0
 8102796:	6078      	str	r0, [r7, #4]
 8102798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a72      	ldr	r2, [pc, #456]	; (8102968 <HAL_ADC_PollForConversion+0x1d8>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d004      	beq.n	81027ae <HAL_ADC_PollForConversion+0x1e>
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	4a70      	ldr	r2, [pc, #448]	; (810296c <HAL_ADC_PollForConversion+0x1dc>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d101      	bne.n	81027b2 <HAL_ADC_PollForConversion+0x22>
 81027ae:	4b70      	ldr	r3, [pc, #448]	; (8102970 <HAL_ADC_PollForConversion+0x1e0>)
 81027b0:	e000      	b.n	81027b4 <HAL_ADC_PollForConversion+0x24>
 81027b2:	4b70      	ldr	r3, [pc, #448]	; (8102974 <HAL_ADC_PollForConversion+0x1e4>)
 81027b4:	4618      	mov	r0, r3
 81027b6:	f7ff fcb3 	bl	8102120 <LL_ADC_GetMultimode>
 81027ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	691b      	ldr	r3, [r3, #16]
 81027c0:	2b08      	cmp	r3, #8
 81027c2:	d102      	bne.n	81027ca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 81027c4:	2308      	movs	r3, #8
 81027c6:	61fb      	str	r3, [r7, #28]
 81027c8:	e037      	b.n	810283a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81027ca:	697b      	ldr	r3, [r7, #20]
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d005      	beq.n	81027dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81027d0:	697b      	ldr	r3, [r7, #20]
 81027d2:	2b05      	cmp	r3, #5
 81027d4:	d002      	beq.n	81027dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81027d6:	697b      	ldr	r3, [r7, #20]
 81027d8:	2b09      	cmp	r3, #9
 81027da:	d111      	bne.n	8102800 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	68db      	ldr	r3, [r3, #12]
 81027e2:	f003 0301 	and.w	r3, r3, #1
 81027e6:	2b00      	cmp	r3, #0
 81027e8:	d007      	beq.n	81027fa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027ee:	f043 0220 	orr.w	r2, r3, #32
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 81027f6:	2301      	movs	r3, #1
 81027f8:	e0b1      	b.n	810295e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81027fa:	2304      	movs	r3, #4
 81027fc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 81027fe:	e01c      	b.n	810283a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	4a58      	ldr	r2, [pc, #352]	; (8102968 <HAL_ADC_PollForConversion+0x1d8>)
 8102806:	4293      	cmp	r3, r2
 8102808:	d004      	beq.n	8102814 <HAL_ADC_PollForConversion+0x84>
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	4a57      	ldr	r2, [pc, #348]	; (810296c <HAL_ADC_PollForConversion+0x1dc>)
 8102810:	4293      	cmp	r3, r2
 8102812:	d101      	bne.n	8102818 <HAL_ADC_PollForConversion+0x88>
 8102814:	4b56      	ldr	r3, [pc, #344]	; (8102970 <HAL_ADC_PollForConversion+0x1e0>)
 8102816:	e000      	b.n	810281a <HAL_ADC_PollForConversion+0x8a>
 8102818:	4b56      	ldr	r3, [pc, #344]	; (8102974 <HAL_ADC_PollForConversion+0x1e4>)
 810281a:	4618      	mov	r0, r3
 810281c:	f7ff fc8e 	bl	810213c <LL_ADC_GetMultiDMATransfer>
 8102820:	4603      	mov	r3, r0
 8102822:	2b00      	cmp	r3, #0
 8102824:	d007      	beq.n	8102836 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810282a:	f043 0220 	orr.w	r2, r3, #32
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8102832:	2301      	movs	r3, #1
 8102834:	e093      	b.n	810295e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8102836:	2304      	movs	r3, #4
 8102838:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 810283a:	f7ff fb1f 	bl	8101e7c <HAL_GetTick>
 810283e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102840:	e021      	b.n	8102886 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8102842:	683b      	ldr	r3, [r7, #0]
 8102844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102848:	d01d      	beq.n	8102886 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 810284a:	f7ff fb17 	bl	8101e7c <HAL_GetTick>
 810284e:	4602      	mov	r2, r0
 8102850:	693b      	ldr	r3, [r7, #16]
 8102852:	1ad3      	subs	r3, r2, r3
 8102854:	683a      	ldr	r2, [r7, #0]
 8102856:	429a      	cmp	r2, r3
 8102858:	d302      	bcc.n	8102860 <HAL_ADC_PollForConversion+0xd0>
 810285a:	683b      	ldr	r3, [r7, #0]
 810285c:	2b00      	cmp	r3, #0
 810285e:	d112      	bne.n	8102886 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	681a      	ldr	r2, [r3, #0]
 8102866:	69fb      	ldr	r3, [r7, #28]
 8102868:	4013      	ands	r3, r2
 810286a:	2b00      	cmp	r3, #0
 810286c:	d10b      	bne.n	8102886 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102872:	f043 0204 	orr.w	r2, r3, #4
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	2200      	movs	r2, #0
 810287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8102882:	2303      	movs	r3, #3
 8102884:	e06b      	b.n	810295e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	681a      	ldr	r2, [r3, #0]
 810288c:	69fb      	ldr	r3, [r7, #28]
 810288e:	4013      	ands	r3, r2
 8102890:	2b00      	cmp	r3, #0
 8102892:	d0d6      	beq.n	8102842 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102898:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 810289c:	687b      	ldr	r3, [r7, #4]
 810289e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	4618      	mov	r0, r3
 81028a6:	f7ff fbad 	bl	8102004 <LL_ADC_REG_IsTriggerSourceSWStart>
 81028aa:	4603      	mov	r3, r0
 81028ac:	2b00      	cmp	r3, #0
 81028ae:	d01c      	beq.n	81028ea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	7d5b      	ldrb	r3, [r3, #21]
 81028b4:	2b00      	cmp	r3, #0
 81028b6:	d118      	bne.n	81028ea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	681b      	ldr	r3, [r3, #0]
 81028be:	f003 0308 	and.w	r3, r3, #8
 81028c2:	2b08      	cmp	r3, #8
 81028c4:	d111      	bne.n	81028ea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81028da:	2b00      	cmp	r3, #0
 81028dc:	d105      	bne.n	81028ea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028e2:	f043 0201 	orr.w	r2, r3, #1
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	4a1f      	ldr	r2, [pc, #124]	; (810296c <HAL_ADC_PollForConversion+0x1dc>)
 81028f0:	4293      	cmp	r3, r2
 81028f2:	d002      	beq.n	81028fa <HAL_ADC_PollForConversion+0x16a>
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	e000      	b.n	81028fc <HAL_ADC_PollForConversion+0x16c>
 81028fa:	4b1b      	ldr	r3, [pc, #108]	; (8102968 <HAL_ADC_PollForConversion+0x1d8>)
 81028fc:	687a      	ldr	r2, [r7, #4]
 81028fe:	6812      	ldr	r2, [r2, #0]
 8102900:	4293      	cmp	r3, r2
 8102902:	d008      	beq.n	8102916 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102904:	697b      	ldr	r3, [r7, #20]
 8102906:	2b00      	cmp	r3, #0
 8102908:	d005      	beq.n	8102916 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810290a:	697b      	ldr	r3, [r7, #20]
 810290c:	2b05      	cmp	r3, #5
 810290e:	d002      	beq.n	8102916 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102910:	697b      	ldr	r3, [r7, #20]
 8102912:	2b09      	cmp	r3, #9
 8102914:	d104      	bne.n	8102920 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	681b      	ldr	r3, [r3, #0]
 810291a:	68db      	ldr	r3, [r3, #12]
 810291c:	61bb      	str	r3, [r7, #24]
 810291e:	e00c      	b.n	810293a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	681b      	ldr	r3, [r3, #0]
 8102924:	4a11      	ldr	r2, [pc, #68]	; (810296c <HAL_ADC_PollForConversion+0x1dc>)
 8102926:	4293      	cmp	r3, r2
 8102928:	d002      	beq.n	8102930 <HAL_ADC_PollForConversion+0x1a0>
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	e000      	b.n	8102932 <HAL_ADC_PollForConversion+0x1a2>
 8102930:	4b0d      	ldr	r3, [pc, #52]	; (8102968 <HAL_ADC_PollForConversion+0x1d8>)
 8102932:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102934:	68fb      	ldr	r3, [r7, #12]
 8102936:	68db      	ldr	r3, [r3, #12]
 8102938:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 810293a:	69fb      	ldr	r3, [r7, #28]
 810293c:	2b08      	cmp	r3, #8
 810293e:	d104      	bne.n	810294a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	2208      	movs	r2, #8
 8102946:	601a      	str	r2, [r3, #0]
 8102948:	e008      	b.n	810295c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 810294a:	69bb      	ldr	r3, [r7, #24]
 810294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102950:	2b00      	cmp	r3, #0
 8102952:	d103      	bne.n	810295c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	220c      	movs	r2, #12
 810295a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 810295c:	2300      	movs	r3, #0
}
 810295e:	4618      	mov	r0, r3
 8102960:	3720      	adds	r7, #32
 8102962:	46bd      	mov	sp, r7
 8102964:	bd80      	pop	{r7, pc}
 8102966:	bf00      	nop
 8102968:	40022000 	.word	0x40022000
 810296c:	40022100 	.word	0x40022100
 8102970:	40022300 	.word	0x40022300
 8102974:	58026300 	.word	0x58026300

08102978 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8102978:	b480      	push	{r7}
 810297a:	b083      	sub	sp, #12
 810297c:	af00      	add	r7, sp, #0
 810297e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8102986:	4618      	mov	r0, r3
 8102988:	370c      	adds	r7, #12
 810298a:	46bd      	mov	sp, r7
 810298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102990:	4770      	bx	lr
	...

08102994 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102994:	b590      	push	{r4, r7, lr}
 8102996:	b0a1      	sub	sp, #132	; 0x84
 8102998:	af00      	add	r7, sp, #0
 810299a:	6078      	str	r0, [r7, #4]
 810299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810299e:	2300      	movs	r3, #0
 81029a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81029a4:	2300      	movs	r3, #0
 81029a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81029a8:	683b      	ldr	r3, [r7, #0]
 81029aa:	68db      	ldr	r3, [r3, #12]
 81029ac:	4a9d      	ldr	r2, [pc, #628]	; (8102c24 <HAL_ADC_ConfigChannel+0x290>)
 81029ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81029b6:	2b01      	cmp	r3, #1
 81029b8:	d101      	bne.n	81029be <HAL_ADC_ConfigChannel+0x2a>
 81029ba:	2302      	movs	r3, #2
 81029bc:	e321      	b.n	8103002 <HAL_ADC_ConfigChannel+0x66e>
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	2201      	movs	r2, #1
 81029c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4618      	mov	r0, r3
 81029cc:	f7ff fc4d 	bl	810226a <LL_ADC_REG_IsConversionOngoing>
 81029d0:	4603      	mov	r3, r0
 81029d2:	2b00      	cmp	r3, #0
 81029d4:	f040 8306 	bne.w	8102fe4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81029d8:	683b      	ldr	r3, [r7, #0]
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81029e0:	2b00      	cmp	r3, #0
 81029e2:	d108      	bne.n	81029f6 <HAL_ADC_ConfigChannel+0x62>
 81029e4:	683b      	ldr	r3, [r7, #0]
 81029e6:	681b      	ldr	r3, [r3, #0]
 81029e8:	0e9b      	lsrs	r3, r3, #26
 81029ea:	f003 031f 	and.w	r3, r3, #31
 81029ee:	2201      	movs	r2, #1
 81029f0:	fa02 f303 	lsl.w	r3, r2, r3
 81029f4:	e016      	b.n	8102a24 <HAL_ADC_ConfigChannel+0x90>
 81029f6:	683b      	ldr	r3, [r7, #0]
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81029fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81029fe:	fa93 f3a3 	rbit	r3, r3
 8102a02:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102a06:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102a0a:	2b00      	cmp	r3, #0
 8102a0c:	d101      	bne.n	8102a12 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8102a0e:	2320      	movs	r3, #32
 8102a10:	e003      	b.n	8102a1a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8102a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102a14:	fab3 f383 	clz	r3, r3
 8102a18:	b2db      	uxtb	r3, r3
 8102a1a:	f003 031f 	and.w	r3, r3, #31
 8102a1e:	2201      	movs	r2, #1
 8102a20:	fa02 f303 	lsl.w	r3, r2, r3
 8102a24:	687a      	ldr	r2, [r7, #4]
 8102a26:	6812      	ldr	r2, [r2, #0]
 8102a28:	69d1      	ldr	r1, [r2, #28]
 8102a2a:	687a      	ldr	r2, [r7, #4]
 8102a2c:	6812      	ldr	r2, [r2, #0]
 8102a2e:	430b      	orrs	r3, r1
 8102a30:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	6818      	ldr	r0, [r3, #0]
 8102a36:	683b      	ldr	r3, [r7, #0]
 8102a38:	6859      	ldr	r1, [r3, #4]
 8102a3a:	683b      	ldr	r3, [r7, #0]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	461a      	mov	r2, r3
 8102a40:	f7ff faf3 	bl	810202a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	4618      	mov	r0, r3
 8102a4a:	f7ff fc0e 	bl	810226a <LL_ADC_REG_IsConversionOngoing>
 8102a4e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	4618      	mov	r0, r3
 8102a56:	f7ff fc1b 	bl	8102290 <LL_ADC_INJ_IsConversionOngoing>
 8102a5a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102a5e:	2b00      	cmp	r3, #0
 8102a60:	f040 80b3 	bne.w	8102bca <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102a66:	2b00      	cmp	r3, #0
 8102a68:	f040 80af 	bne.w	8102bca <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	6818      	ldr	r0, [r3, #0]
 8102a70:	683b      	ldr	r3, [r7, #0]
 8102a72:	6819      	ldr	r1, [r3, #0]
 8102a74:	683b      	ldr	r3, [r7, #0]
 8102a76:	689b      	ldr	r3, [r3, #8]
 8102a78:	461a      	mov	r2, r3
 8102a7a:	f7ff fb02 	bl	8102082 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102a7e:	4b6a      	ldr	r3, [pc, #424]	; (8102c28 <HAL_ADC_ConfigChannel+0x294>)
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102a8a:	d10b      	bne.n	8102aa4 <HAL_ADC_ConfigChannel+0x110>
 8102a8c:	683b      	ldr	r3, [r7, #0]
 8102a8e:	695a      	ldr	r2, [r3, #20]
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	68db      	ldr	r3, [r3, #12]
 8102a96:	089b      	lsrs	r3, r3, #2
 8102a98:	f003 0307 	and.w	r3, r3, #7
 8102a9c:	005b      	lsls	r3, r3, #1
 8102a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8102aa2:	e01d      	b.n	8102ae0 <HAL_ADC_ConfigChannel+0x14c>
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	68db      	ldr	r3, [r3, #12]
 8102aaa:	f003 0310 	and.w	r3, r3, #16
 8102aae:	2b00      	cmp	r3, #0
 8102ab0:	d10b      	bne.n	8102aca <HAL_ADC_ConfigChannel+0x136>
 8102ab2:	683b      	ldr	r3, [r7, #0]
 8102ab4:	695a      	ldr	r2, [r3, #20]
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	68db      	ldr	r3, [r3, #12]
 8102abc:	089b      	lsrs	r3, r3, #2
 8102abe:	f003 0307 	and.w	r3, r3, #7
 8102ac2:	005b      	lsls	r3, r3, #1
 8102ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8102ac8:	e00a      	b.n	8102ae0 <HAL_ADC_ConfigChannel+0x14c>
 8102aca:	683b      	ldr	r3, [r7, #0]
 8102acc:	695a      	ldr	r2, [r3, #20]
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	68db      	ldr	r3, [r3, #12]
 8102ad4:	089b      	lsrs	r3, r3, #2
 8102ad6:	f003 0304 	and.w	r3, r3, #4
 8102ada:	005b      	lsls	r3, r3, #1
 8102adc:	fa02 f303 	lsl.w	r3, r2, r3
 8102ae0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102ae2:	683b      	ldr	r3, [r7, #0]
 8102ae4:	691b      	ldr	r3, [r3, #16]
 8102ae6:	2b04      	cmp	r3, #4
 8102ae8:	d027      	beq.n	8102b3a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	6818      	ldr	r0, [r3, #0]
 8102aee:	683b      	ldr	r3, [r7, #0]
 8102af0:	6919      	ldr	r1, [r3, #16]
 8102af2:	683b      	ldr	r3, [r7, #0]
 8102af4:	681a      	ldr	r2, [r3, #0]
 8102af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102af8:	f7ff fa30 	bl	8101f5c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	6818      	ldr	r0, [r3, #0]
 8102b00:	683b      	ldr	r3, [r7, #0]
 8102b02:	6919      	ldr	r1, [r3, #16]
 8102b04:	683b      	ldr	r3, [r7, #0]
 8102b06:	7e5b      	ldrb	r3, [r3, #25]
 8102b08:	2b01      	cmp	r3, #1
 8102b0a:	d102      	bne.n	8102b12 <HAL_ADC_ConfigChannel+0x17e>
 8102b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102b10:	e000      	b.n	8102b14 <HAL_ADC_ConfigChannel+0x180>
 8102b12:	2300      	movs	r3, #0
 8102b14:	461a      	mov	r2, r3
 8102b16:	f7ff fa5a 	bl	8101fce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	6818      	ldr	r0, [r3, #0]
 8102b1e:	683b      	ldr	r3, [r7, #0]
 8102b20:	6919      	ldr	r1, [r3, #16]
 8102b22:	683b      	ldr	r3, [r7, #0]
 8102b24:	7e1b      	ldrb	r3, [r3, #24]
 8102b26:	2b01      	cmp	r3, #1
 8102b28:	d102      	bne.n	8102b30 <HAL_ADC_ConfigChannel+0x19c>
 8102b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102b2e:	e000      	b.n	8102b32 <HAL_ADC_ConfigChannel+0x19e>
 8102b30:	2300      	movs	r3, #0
 8102b32:	461a      	mov	r2, r3
 8102b34:	f7ff fa32 	bl	8101f9c <LL_ADC_SetDataRightShift>
 8102b38:	e047      	b.n	8102bca <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b44:	683b      	ldr	r3, [r7, #0]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	069b      	lsls	r3, r3, #26
 8102b4a:	429a      	cmp	r2, r3
 8102b4c:	d107      	bne.n	8102b5e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b5c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b68:	683b      	ldr	r3, [r7, #0]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	069b      	lsls	r3, r3, #26
 8102b6e:	429a      	cmp	r2, r3
 8102b70:	d107      	bne.n	8102b82 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b80:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b8c:	683b      	ldr	r3, [r7, #0]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	069b      	lsls	r3, r3, #26
 8102b92:	429a      	cmp	r2, r3
 8102b94:	d107      	bne.n	8102ba6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102ba4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102ba6:	687b      	ldr	r3, [r7, #4]
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102bb0:	683b      	ldr	r3, [r7, #0]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	069b      	lsls	r3, r3, #26
 8102bb6:	429a      	cmp	r2, r3
 8102bb8:	d107      	bne.n	8102bca <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102bc0:	687b      	ldr	r3, [r7, #4]
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102bc8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4618      	mov	r0, r3
 8102bd0:	f7ff fb24 	bl	810221c <LL_ADC_IsEnabled>
 8102bd4:	4603      	mov	r3, r0
 8102bd6:	2b00      	cmp	r3, #0
 8102bd8:	f040 820d 	bne.w	8102ff6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	6818      	ldr	r0, [r3, #0]
 8102be0:	683b      	ldr	r3, [r7, #0]
 8102be2:	6819      	ldr	r1, [r3, #0]
 8102be4:	683b      	ldr	r3, [r7, #0]
 8102be6:	68db      	ldr	r3, [r3, #12]
 8102be8:	461a      	mov	r2, r3
 8102bea:	f7ff fa75 	bl	81020d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102bee:	683b      	ldr	r3, [r7, #0]
 8102bf0:	68db      	ldr	r3, [r3, #12]
 8102bf2:	4a0c      	ldr	r2, [pc, #48]	; (8102c24 <HAL_ADC_ConfigChannel+0x290>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	f040 8133 	bne.w	8102e60 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102bfe:	683b      	ldr	r3, [r7, #0]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c06:	2b00      	cmp	r3, #0
 8102c08:	d110      	bne.n	8102c2c <HAL_ADC_ConfigChannel+0x298>
 8102c0a:	683b      	ldr	r3, [r7, #0]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	0e9b      	lsrs	r3, r3, #26
 8102c10:	3301      	adds	r3, #1
 8102c12:	f003 031f 	and.w	r3, r3, #31
 8102c16:	2b09      	cmp	r3, #9
 8102c18:	bf94      	ite	ls
 8102c1a:	2301      	movls	r3, #1
 8102c1c:	2300      	movhi	r3, #0
 8102c1e:	b2db      	uxtb	r3, r3
 8102c20:	e01e      	b.n	8102c60 <HAL_ADC_ConfigChannel+0x2cc>
 8102c22:	bf00      	nop
 8102c24:	47ff0000 	.word	0x47ff0000
 8102c28:	5c001000 	.word	0x5c001000
 8102c2c:	683b      	ldr	r3, [r7, #0]
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102c34:	fa93 f3a3 	rbit	r3, r3
 8102c38:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102c40:	2b00      	cmp	r3, #0
 8102c42:	d101      	bne.n	8102c48 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102c44:	2320      	movs	r3, #32
 8102c46:	e003      	b.n	8102c50 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102c4a:	fab3 f383 	clz	r3, r3
 8102c4e:	b2db      	uxtb	r3, r3
 8102c50:	3301      	adds	r3, #1
 8102c52:	f003 031f 	and.w	r3, r3, #31
 8102c56:	2b09      	cmp	r3, #9
 8102c58:	bf94      	ite	ls
 8102c5a:	2301      	movls	r3, #1
 8102c5c:	2300      	movhi	r3, #0
 8102c5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	d079      	beq.n	8102d58 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102c64:	683b      	ldr	r3, [r7, #0]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c6c:	2b00      	cmp	r3, #0
 8102c6e:	d107      	bne.n	8102c80 <HAL_ADC_ConfigChannel+0x2ec>
 8102c70:	683b      	ldr	r3, [r7, #0]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	0e9b      	lsrs	r3, r3, #26
 8102c76:	3301      	adds	r3, #1
 8102c78:	069b      	lsls	r3, r3, #26
 8102c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c7e:	e015      	b.n	8102cac <HAL_ADC_ConfigChannel+0x318>
 8102c80:	683b      	ldr	r3, [r7, #0]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102c88:	fa93 f3a3 	rbit	r3, r3
 8102c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102c90:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d101      	bne.n	8102c9c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102c98:	2320      	movs	r3, #32
 8102c9a:	e003      	b.n	8102ca4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c9e:	fab3 f383 	clz	r3, r3
 8102ca2:	b2db      	uxtb	r3, r3
 8102ca4:	3301      	adds	r3, #1
 8102ca6:	069b      	lsls	r3, r3, #26
 8102ca8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102cac:	683b      	ldr	r3, [r7, #0]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	d109      	bne.n	8102ccc <HAL_ADC_ConfigChannel+0x338>
 8102cb8:	683b      	ldr	r3, [r7, #0]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	0e9b      	lsrs	r3, r3, #26
 8102cbe:	3301      	adds	r3, #1
 8102cc0:	f003 031f 	and.w	r3, r3, #31
 8102cc4:	2101      	movs	r1, #1
 8102cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8102cca:	e017      	b.n	8102cfc <HAL_ADC_ConfigChannel+0x368>
 8102ccc:	683b      	ldr	r3, [r7, #0]
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102cd4:	fa93 f3a3 	rbit	r3, r3
 8102cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102cdc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102ce0:	2b00      	cmp	r3, #0
 8102ce2:	d101      	bne.n	8102ce8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102ce4:	2320      	movs	r3, #32
 8102ce6:	e003      	b.n	8102cf0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102cea:	fab3 f383 	clz	r3, r3
 8102cee:	b2db      	uxtb	r3, r3
 8102cf0:	3301      	adds	r3, #1
 8102cf2:	f003 031f 	and.w	r3, r3, #31
 8102cf6:	2101      	movs	r1, #1
 8102cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8102cfc:	ea42 0103 	orr.w	r1, r2, r3
 8102d00:	683b      	ldr	r3, [r7, #0]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d08:	2b00      	cmp	r3, #0
 8102d0a:	d10a      	bne.n	8102d22 <HAL_ADC_ConfigChannel+0x38e>
 8102d0c:	683b      	ldr	r3, [r7, #0]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	0e9b      	lsrs	r3, r3, #26
 8102d12:	3301      	adds	r3, #1
 8102d14:	f003 021f 	and.w	r2, r3, #31
 8102d18:	4613      	mov	r3, r2
 8102d1a:	005b      	lsls	r3, r3, #1
 8102d1c:	4413      	add	r3, r2
 8102d1e:	051b      	lsls	r3, r3, #20
 8102d20:	e018      	b.n	8102d54 <HAL_ADC_ConfigChannel+0x3c0>
 8102d22:	683b      	ldr	r3, [r7, #0]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d2a:	fa93 f3a3 	rbit	r3, r3
 8102d2e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d101      	bne.n	8102d3e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102d3a:	2320      	movs	r3, #32
 8102d3c:	e003      	b.n	8102d46 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d40:	fab3 f383 	clz	r3, r3
 8102d44:	b2db      	uxtb	r3, r3
 8102d46:	3301      	adds	r3, #1
 8102d48:	f003 021f 	and.w	r2, r3, #31
 8102d4c:	4613      	mov	r3, r2
 8102d4e:	005b      	lsls	r3, r3, #1
 8102d50:	4413      	add	r3, r2
 8102d52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102d54:	430b      	orrs	r3, r1
 8102d56:	e07e      	b.n	8102e56 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102d58:	683b      	ldr	r3, [r7, #0]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d60:	2b00      	cmp	r3, #0
 8102d62:	d107      	bne.n	8102d74 <HAL_ADC_ConfigChannel+0x3e0>
 8102d64:	683b      	ldr	r3, [r7, #0]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	0e9b      	lsrs	r3, r3, #26
 8102d6a:	3301      	adds	r3, #1
 8102d6c:	069b      	lsls	r3, r3, #26
 8102d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d72:	e015      	b.n	8102da0 <HAL_ADC_ConfigChannel+0x40c>
 8102d74:	683b      	ldr	r3, [r7, #0]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d7c:	fa93 f3a3 	rbit	r3, r3
 8102d80:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d88:	2b00      	cmp	r3, #0
 8102d8a:	d101      	bne.n	8102d90 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102d8c:	2320      	movs	r3, #32
 8102d8e:	e003      	b.n	8102d98 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d92:	fab3 f383 	clz	r3, r3
 8102d96:	b2db      	uxtb	r3, r3
 8102d98:	3301      	adds	r3, #1
 8102d9a:	069b      	lsls	r3, r3, #26
 8102d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102da0:	683b      	ldr	r3, [r7, #0]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102da8:	2b00      	cmp	r3, #0
 8102daa:	d109      	bne.n	8102dc0 <HAL_ADC_ConfigChannel+0x42c>
 8102dac:	683b      	ldr	r3, [r7, #0]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	0e9b      	lsrs	r3, r3, #26
 8102db2:	3301      	adds	r3, #1
 8102db4:	f003 031f 	and.w	r3, r3, #31
 8102db8:	2101      	movs	r1, #1
 8102dba:	fa01 f303 	lsl.w	r3, r1, r3
 8102dbe:	e017      	b.n	8102df0 <HAL_ADC_ConfigChannel+0x45c>
 8102dc0:	683b      	ldr	r3, [r7, #0]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dc6:	69fb      	ldr	r3, [r7, #28]
 8102dc8:	fa93 f3a3 	rbit	r3, r3
 8102dcc:	61bb      	str	r3, [r7, #24]
  return result;
 8102dce:	69bb      	ldr	r3, [r7, #24]
 8102dd0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8102dd2:	6a3b      	ldr	r3, [r7, #32]
 8102dd4:	2b00      	cmp	r3, #0
 8102dd6:	d101      	bne.n	8102ddc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102dd8:	2320      	movs	r3, #32
 8102dda:	e003      	b.n	8102de4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102ddc:	6a3b      	ldr	r3, [r7, #32]
 8102dde:	fab3 f383 	clz	r3, r3
 8102de2:	b2db      	uxtb	r3, r3
 8102de4:	3301      	adds	r3, #1
 8102de6:	f003 031f 	and.w	r3, r3, #31
 8102dea:	2101      	movs	r1, #1
 8102dec:	fa01 f303 	lsl.w	r3, r1, r3
 8102df0:	ea42 0103 	orr.w	r1, r2, r3
 8102df4:	683b      	ldr	r3, [r7, #0]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102dfc:	2b00      	cmp	r3, #0
 8102dfe:	d10d      	bne.n	8102e1c <HAL_ADC_ConfigChannel+0x488>
 8102e00:	683b      	ldr	r3, [r7, #0]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	0e9b      	lsrs	r3, r3, #26
 8102e06:	3301      	adds	r3, #1
 8102e08:	f003 021f 	and.w	r2, r3, #31
 8102e0c:	4613      	mov	r3, r2
 8102e0e:	005b      	lsls	r3, r3, #1
 8102e10:	4413      	add	r3, r2
 8102e12:	3b1e      	subs	r3, #30
 8102e14:	051b      	lsls	r3, r3, #20
 8102e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102e1a:	e01b      	b.n	8102e54 <HAL_ADC_ConfigChannel+0x4c0>
 8102e1c:	683b      	ldr	r3, [r7, #0]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102e22:	693b      	ldr	r3, [r7, #16]
 8102e24:	fa93 f3a3 	rbit	r3, r3
 8102e28:	60fb      	str	r3, [r7, #12]
  return result;
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102e2e:	697b      	ldr	r3, [r7, #20]
 8102e30:	2b00      	cmp	r3, #0
 8102e32:	d101      	bne.n	8102e38 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102e34:	2320      	movs	r3, #32
 8102e36:	e003      	b.n	8102e40 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102e38:	697b      	ldr	r3, [r7, #20]
 8102e3a:	fab3 f383 	clz	r3, r3
 8102e3e:	b2db      	uxtb	r3, r3
 8102e40:	3301      	adds	r3, #1
 8102e42:	f003 021f 	and.w	r2, r3, #31
 8102e46:	4613      	mov	r3, r2
 8102e48:	005b      	lsls	r3, r3, #1
 8102e4a:	4413      	add	r3, r2
 8102e4c:	3b1e      	subs	r3, #30
 8102e4e:	051b      	lsls	r3, r3, #20
 8102e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e54:	430b      	orrs	r3, r1
 8102e56:	683a      	ldr	r2, [r7, #0]
 8102e58:	6892      	ldr	r2, [r2, #8]
 8102e5a:	4619      	mov	r1, r3
 8102e5c:	f7ff f911 	bl	8102082 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102e60:	683b      	ldr	r3, [r7, #0]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	2b00      	cmp	r3, #0
 8102e66:	f280 80c6 	bge.w	8102ff6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	4a67      	ldr	r2, [pc, #412]	; (810300c <HAL_ADC_ConfigChannel+0x678>)
 8102e70:	4293      	cmp	r3, r2
 8102e72:	d004      	beq.n	8102e7e <HAL_ADC_ConfigChannel+0x4ea>
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	4a65      	ldr	r2, [pc, #404]	; (8103010 <HAL_ADC_ConfigChannel+0x67c>)
 8102e7a:	4293      	cmp	r3, r2
 8102e7c:	d101      	bne.n	8102e82 <HAL_ADC_ConfigChannel+0x4ee>
 8102e7e:	4b65      	ldr	r3, [pc, #404]	; (8103014 <HAL_ADC_ConfigChannel+0x680>)
 8102e80:	e000      	b.n	8102e84 <HAL_ADC_ConfigChannel+0x4f0>
 8102e82:	4b65      	ldr	r3, [pc, #404]	; (8103018 <HAL_ADC_ConfigChannel+0x684>)
 8102e84:	4618      	mov	r0, r3
 8102e86:	f7ff f85b 	bl	8101f40 <LL_ADC_GetCommonPathInternalCh>
 8102e8a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	4a5e      	ldr	r2, [pc, #376]	; (810300c <HAL_ADC_ConfigChannel+0x678>)
 8102e92:	4293      	cmp	r3, r2
 8102e94:	d004      	beq.n	8102ea0 <HAL_ADC_ConfigChannel+0x50c>
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	681b      	ldr	r3, [r3, #0]
 8102e9a:	4a5d      	ldr	r2, [pc, #372]	; (8103010 <HAL_ADC_ConfigChannel+0x67c>)
 8102e9c:	4293      	cmp	r3, r2
 8102e9e:	d10e      	bne.n	8102ebe <HAL_ADC_ConfigChannel+0x52a>
 8102ea0:	485a      	ldr	r0, [pc, #360]	; (810300c <HAL_ADC_ConfigChannel+0x678>)
 8102ea2:	f7ff f9bb 	bl	810221c <LL_ADC_IsEnabled>
 8102ea6:	4604      	mov	r4, r0
 8102ea8:	4859      	ldr	r0, [pc, #356]	; (8103010 <HAL_ADC_ConfigChannel+0x67c>)
 8102eaa:	f7ff f9b7 	bl	810221c <LL_ADC_IsEnabled>
 8102eae:	4603      	mov	r3, r0
 8102eb0:	4323      	orrs	r3, r4
 8102eb2:	2b00      	cmp	r3, #0
 8102eb4:	bf0c      	ite	eq
 8102eb6:	2301      	moveq	r3, #1
 8102eb8:	2300      	movne	r3, #0
 8102eba:	b2db      	uxtb	r3, r3
 8102ebc:	e008      	b.n	8102ed0 <HAL_ADC_ConfigChannel+0x53c>
 8102ebe:	4857      	ldr	r0, [pc, #348]	; (810301c <HAL_ADC_ConfigChannel+0x688>)
 8102ec0:	f7ff f9ac 	bl	810221c <LL_ADC_IsEnabled>
 8102ec4:	4603      	mov	r3, r0
 8102ec6:	2b00      	cmp	r3, #0
 8102ec8:	bf0c      	ite	eq
 8102eca:	2301      	moveq	r3, #1
 8102ecc:	2300      	movne	r3, #0
 8102ece:	b2db      	uxtb	r3, r3
 8102ed0:	2b00      	cmp	r3, #0
 8102ed2:	d07d      	beq.n	8102fd0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102ed4:	683b      	ldr	r3, [r7, #0]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	4a51      	ldr	r2, [pc, #324]	; (8103020 <HAL_ADC_ConfigChannel+0x68c>)
 8102eda:	4293      	cmp	r3, r2
 8102edc:	d130      	bne.n	8102f40 <HAL_ADC_ConfigChannel+0x5ac>
 8102ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d12b      	bne.n	8102f40 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a4b      	ldr	r2, [pc, #300]	; (810301c <HAL_ADC_ConfigChannel+0x688>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	f040 8081 	bne.w	8102ff6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	4a44      	ldr	r2, [pc, #272]	; (810300c <HAL_ADC_ConfigChannel+0x678>)
 8102efa:	4293      	cmp	r3, r2
 8102efc:	d004      	beq.n	8102f08 <HAL_ADC_ConfigChannel+0x574>
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a43      	ldr	r2, [pc, #268]	; (8103010 <HAL_ADC_ConfigChannel+0x67c>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	d101      	bne.n	8102f0c <HAL_ADC_ConfigChannel+0x578>
 8102f08:	4a42      	ldr	r2, [pc, #264]	; (8103014 <HAL_ADC_ConfigChannel+0x680>)
 8102f0a:	e000      	b.n	8102f0e <HAL_ADC_ConfigChannel+0x57a>
 8102f0c:	4a42      	ldr	r2, [pc, #264]	; (8103018 <HAL_ADC_ConfigChannel+0x684>)
 8102f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102f14:	4619      	mov	r1, r3
 8102f16:	4610      	mov	r0, r2
 8102f18:	f7fe ffff 	bl	8101f1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102f1c:	4b41      	ldr	r3, [pc, #260]	; (8103024 <HAL_ADC_ConfigChannel+0x690>)
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	099b      	lsrs	r3, r3, #6
 8102f22:	4a41      	ldr	r2, [pc, #260]	; (8103028 <HAL_ADC_ConfigChannel+0x694>)
 8102f24:	fba2 2303 	umull	r2, r3, r2, r3
 8102f28:	099b      	lsrs	r3, r3, #6
 8102f2a:	3301      	adds	r3, #1
 8102f2c:	005b      	lsls	r3, r3, #1
 8102f2e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102f30:	e002      	b.n	8102f38 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102f32:	68bb      	ldr	r3, [r7, #8]
 8102f34:	3b01      	subs	r3, #1
 8102f36:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102f38:	68bb      	ldr	r3, [r7, #8]
 8102f3a:	2b00      	cmp	r3, #0
 8102f3c:	d1f9      	bne.n	8102f32 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102f3e:	e05a      	b.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102f40:	683b      	ldr	r3, [r7, #0]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	4a39      	ldr	r2, [pc, #228]	; (810302c <HAL_ADC_ConfigChannel+0x698>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d11e      	bne.n	8102f88 <HAL_ADC_ConfigChannel+0x5f4>
 8102f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d119      	bne.n	8102f88 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a30      	ldr	r2, [pc, #192]	; (810301c <HAL_ADC_ConfigChannel+0x688>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d14b      	bne.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4a2a      	ldr	r2, [pc, #168]	; (810300c <HAL_ADC_ConfigChannel+0x678>)
 8102f64:	4293      	cmp	r3, r2
 8102f66:	d004      	beq.n	8102f72 <HAL_ADC_ConfigChannel+0x5de>
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a28      	ldr	r2, [pc, #160]	; (8103010 <HAL_ADC_ConfigChannel+0x67c>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d101      	bne.n	8102f76 <HAL_ADC_ConfigChannel+0x5e2>
 8102f72:	4a28      	ldr	r2, [pc, #160]	; (8103014 <HAL_ADC_ConfigChannel+0x680>)
 8102f74:	e000      	b.n	8102f78 <HAL_ADC_ConfigChannel+0x5e4>
 8102f76:	4a28      	ldr	r2, [pc, #160]	; (8103018 <HAL_ADC_ConfigChannel+0x684>)
 8102f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102f7e:	4619      	mov	r1, r3
 8102f80:	4610      	mov	r0, r2
 8102f82:	f7fe ffca 	bl	8101f1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f86:	e036      	b.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102f88:	683b      	ldr	r3, [r7, #0]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	4a28      	ldr	r2, [pc, #160]	; (8103030 <HAL_ADC_ConfigChannel+0x69c>)
 8102f8e:	4293      	cmp	r3, r2
 8102f90:	d131      	bne.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
 8102f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102f98:	2b00      	cmp	r3, #0
 8102f9a:	d12c      	bne.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a1e      	ldr	r2, [pc, #120]	; (810301c <HAL_ADC_ConfigChannel+0x688>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d127      	bne.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a18      	ldr	r2, [pc, #96]	; (810300c <HAL_ADC_ConfigChannel+0x678>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d004      	beq.n	8102fba <HAL_ADC_ConfigChannel+0x626>
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	4a16      	ldr	r2, [pc, #88]	; (8103010 <HAL_ADC_ConfigChannel+0x67c>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d101      	bne.n	8102fbe <HAL_ADC_ConfigChannel+0x62a>
 8102fba:	4a16      	ldr	r2, [pc, #88]	; (8103014 <HAL_ADC_ConfigChannel+0x680>)
 8102fbc:	e000      	b.n	8102fc0 <HAL_ADC_ConfigChannel+0x62c>
 8102fbe:	4a16      	ldr	r2, [pc, #88]	; (8103018 <HAL_ADC_ConfigChannel+0x684>)
 8102fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102fc6:	4619      	mov	r1, r3
 8102fc8:	4610      	mov	r0, r2
 8102fca:	f7fe ffa6 	bl	8101f1a <LL_ADC_SetCommonPathInternalCh>
 8102fce:	e012      	b.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fd4:	f043 0220 	orr.w	r2, r3, #32
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102fdc:	2301      	movs	r3, #1
 8102fde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102fe2:	e008      	b.n	8102ff6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fe8:	f043 0220 	orr.w	r2, r3, #32
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102ff0:	2301      	movs	r3, #1
 8102ff2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	2200      	movs	r2, #0
 8102ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102ffe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103002:	4618      	mov	r0, r3
 8103004:	3784      	adds	r7, #132	; 0x84
 8103006:	46bd      	mov	sp, r7
 8103008:	bd90      	pop	{r4, r7, pc}
 810300a:	bf00      	nop
 810300c:	40022000 	.word	0x40022000
 8103010:	40022100 	.word	0x40022100
 8103014:	40022300 	.word	0x40022300
 8103018:	58026300 	.word	0x58026300
 810301c:	58026000 	.word	0x58026000
 8103020:	cb840000 	.word	0xcb840000
 8103024:	10000000 	.word	0x10000000
 8103028:	053e2d63 	.word	0x053e2d63
 810302c:	c7520000 	.word	0xc7520000
 8103030:	cfb80000 	.word	0xcfb80000

08103034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8103034:	b580      	push	{r7, lr}
 8103036:	b084      	sub	sp, #16
 8103038:	af00      	add	r7, sp, #0
 810303a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	4618      	mov	r0, r3
 8103042:	f7ff f8eb 	bl	810221c <LL_ADC_IsEnabled>
 8103046:	4603      	mov	r3, r0
 8103048:	2b00      	cmp	r3, #0
 810304a:	d16e      	bne.n	810312a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	689a      	ldr	r2, [r3, #8]
 8103052:	4b38      	ldr	r3, [pc, #224]	; (8103134 <ADC_Enable+0x100>)
 8103054:	4013      	ands	r3, r2
 8103056:	2b00      	cmp	r3, #0
 8103058:	d00d      	beq.n	8103076 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810305e:	f043 0210 	orr.w	r2, r3, #16
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810306a:	f043 0201 	orr.w	r2, r3, #1
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8103072:	2301      	movs	r3, #1
 8103074:	e05a      	b.n	810312c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	681b      	ldr	r3, [r3, #0]
 810307a:	4618      	mov	r0, r3
 810307c:	f7ff f8ba 	bl	81021f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103080:	f7fe fefc 	bl	8101e7c <HAL_GetTick>
 8103084:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	4a2b      	ldr	r2, [pc, #172]	; (8103138 <ADC_Enable+0x104>)
 810308c:	4293      	cmp	r3, r2
 810308e:	d004      	beq.n	810309a <ADC_Enable+0x66>
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	681b      	ldr	r3, [r3, #0]
 8103094:	4a29      	ldr	r2, [pc, #164]	; (810313c <ADC_Enable+0x108>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d101      	bne.n	810309e <ADC_Enable+0x6a>
 810309a:	4b29      	ldr	r3, [pc, #164]	; (8103140 <ADC_Enable+0x10c>)
 810309c:	e000      	b.n	81030a0 <ADC_Enable+0x6c>
 810309e:	4b29      	ldr	r3, [pc, #164]	; (8103144 <ADC_Enable+0x110>)
 81030a0:	4618      	mov	r0, r3
 81030a2:	f7ff f83d 	bl	8102120 <LL_ADC_GetMultimode>
 81030a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	4a23      	ldr	r2, [pc, #140]	; (810313c <ADC_Enable+0x108>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	d002      	beq.n	81030b8 <ADC_Enable+0x84>
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	e000      	b.n	81030ba <ADC_Enable+0x86>
 81030b8:	4b1f      	ldr	r3, [pc, #124]	; (8103138 <ADC_Enable+0x104>)
 81030ba:	687a      	ldr	r2, [r7, #4]
 81030bc:	6812      	ldr	r2, [r2, #0]
 81030be:	4293      	cmp	r3, r2
 81030c0:	d02c      	beq.n	810311c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81030c2:	68bb      	ldr	r3, [r7, #8]
 81030c4:	2b00      	cmp	r3, #0
 81030c6:	d130      	bne.n	810312a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81030c8:	e028      	b.n	810311c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	4618      	mov	r0, r3
 81030d0:	f7ff f8a4 	bl	810221c <LL_ADC_IsEnabled>
 81030d4:	4603      	mov	r3, r0
 81030d6:	2b00      	cmp	r3, #0
 81030d8:	d104      	bne.n	81030e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	4618      	mov	r0, r3
 81030e0:	f7ff f888 	bl	81021f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81030e4:	f7fe feca 	bl	8101e7c <HAL_GetTick>
 81030e8:	4602      	mov	r2, r0
 81030ea:	68fb      	ldr	r3, [r7, #12]
 81030ec:	1ad3      	subs	r3, r2, r3
 81030ee:	2b02      	cmp	r3, #2
 81030f0:	d914      	bls.n	810311c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	f003 0301 	and.w	r3, r3, #1
 81030fc:	2b01      	cmp	r3, #1
 81030fe:	d00d      	beq.n	810311c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103104:	f043 0210 	orr.w	r2, r3, #16
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103110:	f043 0201 	orr.w	r2, r3, #1
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8103118:	2301      	movs	r3, #1
 810311a:	e007      	b.n	810312c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	f003 0301 	and.w	r3, r3, #1
 8103126:	2b01      	cmp	r3, #1
 8103128:	d1cf      	bne.n	81030ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810312a:	2300      	movs	r3, #0
}
 810312c:	4618      	mov	r0, r3
 810312e:	3710      	adds	r7, #16
 8103130:	46bd      	mov	sp, r7
 8103132:	bd80      	pop	{r7, pc}
 8103134:	8000003f 	.word	0x8000003f
 8103138:	40022000 	.word	0x40022000
 810313c:	40022100 	.word	0x40022100
 8103140:	40022300 	.word	0x40022300
 8103144:	58026300 	.word	0x58026300

08103148 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103148:	b580      	push	{r7, lr}
 810314a:	b084      	sub	sp, #16
 810314c:	af00      	add	r7, sp, #0
 810314e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	4a79      	ldr	r2, [pc, #484]	; (810333c <ADC_ConfigureBoostMode+0x1f4>)
 8103156:	4293      	cmp	r3, r2
 8103158:	d004      	beq.n	8103164 <ADC_ConfigureBoostMode+0x1c>
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	4a78      	ldr	r2, [pc, #480]	; (8103340 <ADC_ConfigureBoostMode+0x1f8>)
 8103160:	4293      	cmp	r3, r2
 8103162:	d109      	bne.n	8103178 <ADC_ConfigureBoostMode+0x30>
 8103164:	4b77      	ldr	r3, [pc, #476]	; (8103344 <ADC_ConfigureBoostMode+0x1fc>)
 8103166:	689b      	ldr	r3, [r3, #8]
 8103168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810316c:	2b00      	cmp	r3, #0
 810316e:	bf14      	ite	ne
 8103170:	2301      	movne	r3, #1
 8103172:	2300      	moveq	r3, #0
 8103174:	b2db      	uxtb	r3, r3
 8103176:	e008      	b.n	810318a <ADC_ConfigureBoostMode+0x42>
 8103178:	4b73      	ldr	r3, [pc, #460]	; (8103348 <ADC_ConfigureBoostMode+0x200>)
 810317a:	689b      	ldr	r3, [r3, #8]
 810317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103180:	2b00      	cmp	r3, #0
 8103182:	bf14      	ite	ne
 8103184:	2301      	movne	r3, #1
 8103186:	2300      	moveq	r3, #0
 8103188:	b2db      	uxtb	r3, r3
 810318a:	2b00      	cmp	r3, #0
 810318c:	d01c      	beq.n	81031c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810318e:	f000 fec3 	bl	8103f18 <HAL_RCC_GetHCLKFreq>
 8103192:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	685b      	ldr	r3, [r3, #4]
 8103198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810319c:	d010      	beq.n	81031c0 <ADC_ConfigureBoostMode+0x78>
 810319e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81031a2:	d871      	bhi.n	8103288 <ADC_ConfigureBoostMode+0x140>
 81031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81031a8:	d002      	beq.n	81031b0 <ADC_ConfigureBoostMode+0x68>
 81031aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81031ae:	d16b      	bne.n	8103288 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	685b      	ldr	r3, [r3, #4]
 81031b4:	0c1b      	lsrs	r3, r3, #16
 81031b6:	68fa      	ldr	r2, [r7, #12]
 81031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 81031bc:	60fb      	str	r3, [r7, #12]
        break;
 81031be:	e066      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81031c0:	68fb      	ldr	r3, [r7, #12]
 81031c2:	089b      	lsrs	r3, r3, #2
 81031c4:	60fb      	str	r3, [r7, #12]
        break;
 81031c6:	e062      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81031c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81031cc:	f001 fe48 	bl	8104e60 <HAL_RCCEx_GetPeriphCLKFreq>
 81031d0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	685b      	ldr	r3, [r3, #4]
 81031d6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81031da:	d051      	beq.n	8103280 <ADC_ConfigureBoostMode+0x138>
 81031dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81031e0:	d854      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 81031e2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81031e6:	d047      	beq.n	8103278 <ADC_ConfigureBoostMode+0x130>
 81031e8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81031ec:	d84e      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 81031ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81031f2:	d03d      	beq.n	8103270 <ADC_ConfigureBoostMode+0x128>
 81031f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81031f8:	d848      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 81031fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031fe:	d033      	beq.n	8103268 <ADC_ConfigureBoostMode+0x120>
 8103200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103204:	d842      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 8103206:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810320a:	d029      	beq.n	8103260 <ADC_ConfigureBoostMode+0x118>
 810320c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103210:	d83c      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 8103212:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103216:	d01a      	beq.n	810324e <ADC_ConfigureBoostMode+0x106>
 8103218:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810321c:	d836      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 810321e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103222:	d014      	beq.n	810324e <ADC_ConfigureBoostMode+0x106>
 8103224:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103228:	d830      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 810322a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810322e:	d00e      	beq.n	810324e <ADC_ConfigureBoostMode+0x106>
 8103230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103234:	d82a      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 8103236:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810323a:	d008      	beq.n	810324e <ADC_ConfigureBoostMode+0x106>
 810323c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103240:	d824      	bhi.n	810328c <ADC_ConfigureBoostMode+0x144>
 8103242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103246:	d002      	beq.n	810324e <ADC_ConfigureBoostMode+0x106>
 8103248:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810324c:	d11e      	bne.n	810328c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	685b      	ldr	r3, [r3, #4]
 8103252:	0c9b      	lsrs	r3, r3, #18
 8103254:	005b      	lsls	r3, r3, #1
 8103256:	68fa      	ldr	r2, [r7, #12]
 8103258:	fbb2 f3f3 	udiv	r3, r2, r3
 810325c:	60fb      	str	r3, [r7, #12]
        break;
 810325e:	e016      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103260:	68fb      	ldr	r3, [r7, #12]
 8103262:	091b      	lsrs	r3, r3, #4
 8103264:	60fb      	str	r3, [r7, #12]
        break;
 8103266:	e012      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103268:	68fb      	ldr	r3, [r7, #12]
 810326a:	095b      	lsrs	r3, r3, #5
 810326c:	60fb      	str	r3, [r7, #12]
        break;
 810326e:	e00e      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103270:	68fb      	ldr	r3, [r7, #12]
 8103272:	099b      	lsrs	r3, r3, #6
 8103274:	60fb      	str	r3, [r7, #12]
        break;
 8103276:	e00a      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103278:	68fb      	ldr	r3, [r7, #12]
 810327a:	09db      	lsrs	r3, r3, #7
 810327c:	60fb      	str	r3, [r7, #12]
        break;
 810327e:	e006      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103280:	68fb      	ldr	r3, [r7, #12]
 8103282:	0a1b      	lsrs	r3, r3, #8
 8103284:	60fb      	str	r3, [r7, #12]
        break;
 8103286:	e002      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
        break;
 8103288:	bf00      	nop
 810328a:	e000      	b.n	810328e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 810328c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810328e:	f7fe fe25 	bl	8101edc <HAL_GetREVID>
 8103292:	4603      	mov	r3, r0
 8103294:	f241 0203 	movw	r2, #4099	; 0x1003
 8103298:	4293      	cmp	r3, r2
 810329a:	d815      	bhi.n	81032c8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 810329c:	68fb      	ldr	r3, [r7, #12]
 810329e:	4a2b      	ldr	r2, [pc, #172]	; (810334c <ADC_ConfigureBoostMode+0x204>)
 81032a0:	4293      	cmp	r3, r2
 81032a2:	d908      	bls.n	81032b6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	689a      	ldr	r2, [r3, #8]
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81032b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81032b4:	e03e      	b.n	8103334 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	689a      	ldr	r2, [r3, #8]
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81032c4:	609a      	str	r2, [r3, #8]
}
 81032c6:	e035      	b.n	8103334 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 81032c8:	68fb      	ldr	r3, [r7, #12]
 81032ca:	085b      	lsrs	r3, r3, #1
 81032cc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81032ce:	68fb      	ldr	r3, [r7, #12]
 81032d0:	4a1f      	ldr	r2, [pc, #124]	; (8103350 <ADC_ConfigureBoostMode+0x208>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d808      	bhi.n	81032e8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	689a      	ldr	r2, [r3, #8]
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 81032e4:	609a      	str	r2, [r3, #8]
}
 81032e6:	e025      	b.n	8103334 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	4a1a      	ldr	r2, [pc, #104]	; (8103354 <ADC_ConfigureBoostMode+0x20c>)
 81032ec:	4293      	cmp	r3, r2
 81032ee:	d80a      	bhi.n	8103306 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	689b      	ldr	r3, [r3, #8]
 81032f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103302:	609a      	str	r2, [r3, #8]
}
 8103304:	e016      	b.n	8103334 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103306:	68fb      	ldr	r3, [r7, #12]
 8103308:	4a13      	ldr	r2, [pc, #76]	; (8103358 <ADC_ConfigureBoostMode+0x210>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d80a      	bhi.n	8103324 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	689b      	ldr	r3, [r3, #8]
 8103314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103320:	609a      	str	r2, [r3, #8]
}
 8103322:	e007      	b.n	8103334 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	689a      	ldr	r2, [r3, #8]
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103332:	609a      	str	r2, [r3, #8]
}
 8103334:	bf00      	nop
 8103336:	3710      	adds	r7, #16
 8103338:	46bd      	mov	sp, r7
 810333a:	bd80      	pop	{r7, pc}
 810333c:	40022000 	.word	0x40022000
 8103340:	40022100 	.word	0x40022100
 8103344:	40022300 	.word	0x40022300
 8103348:	58026300 	.word	0x58026300
 810334c:	01312d00 	.word	0x01312d00
 8103350:	005f5e10 	.word	0x005f5e10
 8103354:	00bebc20 	.word	0x00bebc20
 8103358:	017d7840 	.word	0x017d7840

0810335c <LL_ADC_IsEnabled>:
{
 810335c:	b480      	push	{r7}
 810335e:	b083      	sub	sp, #12
 8103360:	af00      	add	r7, sp, #0
 8103362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	689b      	ldr	r3, [r3, #8]
 8103368:	f003 0301 	and.w	r3, r3, #1
 810336c:	2b01      	cmp	r3, #1
 810336e:	d101      	bne.n	8103374 <LL_ADC_IsEnabled+0x18>
 8103370:	2301      	movs	r3, #1
 8103372:	e000      	b.n	8103376 <LL_ADC_IsEnabled+0x1a>
 8103374:	2300      	movs	r3, #0
}
 8103376:	4618      	mov	r0, r3
 8103378:	370c      	adds	r7, #12
 810337a:	46bd      	mov	sp, r7
 810337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103380:	4770      	bx	lr

08103382 <LL_ADC_REG_IsConversionOngoing>:
{
 8103382:	b480      	push	{r7}
 8103384:	b083      	sub	sp, #12
 8103386:	af00      	add	r7, sp, #0
 8103388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	689b      	ldr	r3, [r3, #8]
 810338e:	f003 0304 	and.w	r3, r3, #4
 8103392:	2b04      	cmp	r3, #4
 8103394:	d101      	bne.n	810339a <LL_ADC_REG_IsConversionOngoing+0x18>
 8103396:	2301      	movs	r3, #1
 8103398:	e000      	b.n	810339c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810339a:	2300      	movs	r3, #0
}
 810339c:	4618      	mov	r0, r3
 810339e:	370c      	adds	r7, #12
 81033a0:	46bd      	mov	sp, r7
 81033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033a6:	4770      	bx	lr

081033a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81033a8:	b590      	push	{r4, r7, lr}
 81033aa:	b09f      	sub	sp, #124	; 0x7c
 81033ac:	af00      	add	r7, sp, #0
 81033ae:	6078      	str	r0, [r7, #4]
 81033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81033b2:	2300      	movs	r3, #0
 81033b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81033be:	2b01      	cmp	r3, #1
 81033c0:	d101      	bne.n	81033c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81033c2:	2302      	movs	r3, #2
 81033c4:	e0c4      	b.n	8103550 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	2201      	movs	r2, #1
 81033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81033ce:	2300      	movs	r3, #0
 81033d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81033d2:	2300      	movs	r3, #0
 81033d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a5f      	ldr	r2, [pc, #380]	; (8103558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d102      	bne.n	81033e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81033e0:	4b5e      	ldr	r3, [pc, #376]	; (810355c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81033e2:	60bb      	str	r3, [r7, #8]
 81033e4:	e001      	b.n	81033ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81033e6:	2300      	movs	r3, #0
 81033e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81033ea:	68bb      	ldr	r3, [r7, #8]
 81033ec:	2b00      	cmp	r3, #0
 81033ee:	d10b      	bne.n	8103408 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033f4:	f043 0220 	orr.w	r2, r3, #32
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	2200      	movs	r2, #0
 8103400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103404:	2301      	movs	r3, #1
 8103406:	e0a3      	b.n	8103550 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103408:	68bb      	ldr	r3, [r7, #8]
 810340a:	4618      	mov	r0, r3
 810340c:	f7ff ffb9 	bl	8103382 <LL_ADC_REG_IsConversionOngoing>
 8103410:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	4618      	mov	r0, r3
 8103418:	f7ff ffb3 	bl	8103382 <LL_ADC_REG_IsConversionOngoing>
 810341c:	4603      	mov	r3, r0
 810341e:	2b00      	cmp	r3, #0
 8103420:	f040 8085 	bne.w	810352e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103426:	2b00      	cmp	r3, #0
 8103428:	f040 8081 	bne.w	810352e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	4a49      	ldr	r2, [pc, #292]	; (8103558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103432:	4293      	cmp	r3, r2
 8103434:	d004      	beq.n	8103440 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	4a48      	ldr	r2, [pc, #288]	; (810355c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810343c:	4293      	cmp	r3, r2
 810343e:	d101      	bne.n	8103444 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103440:	4b47      	ldr	r3, [pc, #284]	; (8103560 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103442:	e000      	b.n	8103446 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103444:	4b47      	ldr	r3, [pc, #284]	; (8103564 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103446:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103448:	683b      	ldr	r3, [r7, #0]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	2b00      	cmp	r3, #0
 810344e:	d03b      	beq.n	81034c8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103452:	689b      	ldr	r3, [r3, #8]
 8103454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103458:	683b      	ldr	r3, [r7, #0]
 810345a:	685b      	ldr	r3, [r3, #4]
 810345c:	431a      	orrs	r2, r3
 810345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103460:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	681b      	ldr	r3, [r3, #0]
 8103466:	4a3c      	ldr	r2, [pc, #240]	; (8103558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103468:	4293      	cmp	r3, r2
 810346a:	d004      	beq.n	8103476 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	4a3a      	ldr	r2, [pc, #232]	; (810355c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103472:	4293      	cmp	r3, r2
 8103474:	d10e      	bne.n	8103494 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103476:	4838      	ldr	r0, [pc, #224]	; (8103558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103478:	f7ff ff70 	bl	810335c <LL_ADC_IsEnabled>
 810347c:	4604      	mov	r4, r0
 810347e:	4837      	ldr	r0, [pc, #220]	; (810355c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103480:	f7ff ff6c 	bl	810335c <LL_ADC_IsEnabled>
 8103484:	4603      	mov	r3, r0
 8103486:	4323      	orrs	r3, r4
 8103488:	2b00      	cmp	r3, #0
 810348a:	bf0c      	ite	eq
 810348c:	2301      	moveq	r3, #1
 810348e:	2300      	movne	r3, #0
 8103490:	b2db      	uxtb	r3, r3
 8103492:	e008      	b.n	81034a6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103494:	4834      	ldr	r0, [pc, #208]	; (8103568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103496:	f7ff ff61 	bl	810335c <LL_ADC_IsEnabled>
 810349a:	4603      	mov	r3, r0
 810349c:	2b00      	cmp	r3, #0
 810349e:	bf0c      	ite	eq
 81034a0:	2301      	moveq	r3, #1
 81034a2:	2300      	movne	r3, #0
 81034a4:	b2db      	uxtb	r3, r3
 81034a6:	2b00      	cmp	r3, #0
 81034a8:	d04b      	beq.n	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034ac:	689b      	ldr	r3, [r3, #8]
 81034ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81034b2:	f023 030f 	bic.w	r3, r3, #15
 81034b6:	683a      	ldr	r2, [r7, #0]
 81034b8:	6811      	ldr	r1, [r2, #0]
 81034ba:	683a      	ldr	r2, [r7, #0]
 81034bc:	6892      	ldr	r2, [r2, #8]
 81034be:	430a      	orrs	r2, r1
 81034c0:	431a      	orrs	r2, r3
 81034c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034c6:	e03c      	b.n	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81034c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034ca:	689b      	ldr	r3, [r3, #8]
 81034cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	681b      	ldr	r3, [r3, #0]
 81034d8:	4a1f      	ldr	r2, [pc, #124]	; (8103558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81034da:	4293      	cmp	r3, r2
 81034dc:	d004      	beq.n	81034e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	4a1e      	ldr	r2, [pc, #120]	; (810355c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81034e4:	4293      	cmp	r3, r2
 81034e6:	d10e      	bne.n	8103506 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81034e8:	481b      	ldr	r0, [pc, #108]	; (8103558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81034ea:	f7ff ff37 	bl	810335c <LL_ADC_IsEnabled>
 81034ee:	4604      	mov	r4, r0
 81034f0:	481a      	ldr	r0, [pc, #104]	; (810355c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81034f2:	f7ff ff33 	bl	810335c <LL_ADC_IsEnabled>
 81034f6:	4603      	mov	r3, r0
 81034f8:	4323      	orrs	r3, r4
 81034fa:	2b00      	cmp	r3, #0
 81034fc:	bf0c      	ite	eq
 81034fe:	2301      	moveq	r3, #1
 8103500:	2300      	movne	r3, #0
 8103502:	b2db      	uxtb	r3, r3
 8103504:	e008      	b.n	8103518 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103506:	4818      	ldr	r0, [pc, #96]	; (8103568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103508:	f7ff ff28 	bl	810335c <LL_ADC_IsEnabled>
 810350c:	4603      	mov	r3, r0
 810350e:	2b00      	cmp	r3, #0
 8103510:	bf0c      	ite	eq
 8103512:	2301      	moveq	r3, #1
 8103514:	2300      	movne	r3, #0
 8103516:	b2db      	uxtb	r3, r3
 8103518:	2b00      	cmp	r3, #0
 810351a:	d012      	beq.n	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 810351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810351e:	689b      	ldr	r3, [r3, #8]
 8103520:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103524:	f023 030f 	bic.w	r3, r3, #15
 8103528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810352a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810352c:	e009      	b.n	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103532:	f043 0220 	orr.w	r2, r3, #32
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810353a:	2301      	movs	r3, #1
 810353c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103540:	e000      	b.n	8103544 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103542:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	2200      	movs	r2, #0
 8103548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810354c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103550:	4618      	mov	r0, r3
 8103552:	377c      	adds	r7, #124	; 0x7c
 8103554:	46bd      	mov	sp, r7
 8103556:	bd90      	pop	{r4, r7, pc}
 8103558:	40022000 	.word	0x40022000
 810355c:	40022100 	.word	0x40022100
 8103560:	40022300 	.word	0x40022300
 8103564:	58026300 	.word	0x58026300
 8103568:	58026000 	.word	0x58026000

0810356c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810356c:	b480      	push	{r7}
 810356e:	b085      	sub	sp, #20
 8103570:	af00      	add	r7, sp, #0
 8103572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	f003 0307 	and.w	r3, r3, #7
 810357a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810357c:	4b0c      	ldr	r3, [pc, #48]	; (81035b0 <__NVIC_SetPriorityGrouping+0x44>)
 810357e:	68db      	ldr	r3, [r3, #12]
 8103580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103582:	68ba      	ldr	r2, [r7, #8]
 8103584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103588:	4013      	ands	r3, r2
 810358a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810358c:	68fb      	ldr	r3, [r7, #12]
 810358e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103590:	68bb      	ldr	r3, [r7, #8]
 8103592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810359c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810359e:	4a04      	ldr	r2, [pc, #16]	; (81035b0 <__NVIC_SetPriorityGrouping+0x44>)
 81035a0:	68bb      	ldr	r3, [r7, #8]
 81035a2:	60d3      	str	r3, [r2, #12]
}
 81035a4:	bf00      	nop
 81035a6:	3714      	adds	r7, #20
 81035a8:	46bd      	mov	sp, r7
 81035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ae:	4770      	bx	lr
 81035b0:	e000ed00 	.word	0xe000ed00

081035b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81035b4:	b480      	push	{r7}
 81035b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81035b8:	4b04      	ldr	r3, [pc, #16]	; (81035cc <__NVIC_GetPriorityGrouping+0x18>)
 81035ba:	68db      	ldr	r3, [r3, #12]
 81035bc:	0a1b      	lsrs	r3, r3, #8
 81035be:	f003 0307 	and.w	r3, r3, #7
}
 81035c2:	4618      	mov	r0, r3
 81035c4:	46bd      	mov	sp, r7
 81035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ca:	4770      	bx	lr
 81035cc:	e000ed00 	.word	0xe000ed00

081035d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81035d0:	b480      	push	{r7}
 81035d2:	b083      	sub	sp, #12
 81035d4:	af00      	add	r7, sp, #0
 81035d6:	4603      	mov	r3, r0
 81035d8:	6039      	str	r1, [r7, #0]
 81035da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81035dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	db0a      	blt.n	81035fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035e4:	683b      	ldr	r3, [r7, #0]
 81035e6:	b2da      	uxtb	r2, r3
 81035e8:	490c      	ldr	r1, [pc, #48]	; (810361c <__NVIC_SetPriority+0x4c>)
 81035ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035ee:	0112      	lsls	r2, r2, #4
 81035f0:	b2d2      	uxtb	r2, r2
 81035f2:	440b      	add	r3, r1
 81035f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81035f8:	e00a      	b.n	8103610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035fa:	683b      	ldr	r3, [r7, #0]
 81035fc:	b2da      	uxtb	r2, r3
 81035fe:	4908      	ldr	r1, [pc, #32]	; (8103620 <__NVIC_SetPriority+0x50>)
 8103600:	88fb      	ldrh	r3, [r7, #6]
 8103602:	f003 030f 	and.w	r3, r3, #15
 8103606:	3b04      	subs	r3, #4
 8103608:	0112      	lsls	r2, r2, #4
 810360a:	b2d2      	uxtb	r2, r2
 810360c:	440b      	add	r3, r1
 810360e:	761a      	strb	r2, [r3, #24]
}
 8103610:	bf00      	nop
 8103612:	370c      	adds	r7, #12
 8103614:	46bd      	mov	sp, r7
 8103616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810361a:	4770      	bx	lr
 810361c:	e000e100 	.word	0xe000e100
 8103620:	e000ed00 	.word	0xe000ed00

08103624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103624:	b480      	push	{r7}
 8103626:	b089      	sub	sp, #36	; 0x24
 8103628:	af00      	add	r7, sp, #0
 810362a:	60f8      	str	r0, [r7, #12]
 810362c:	60b9      	str	r1, [r7, #8]
 810362e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103630:	68fb      	ldr	r3, [r7, #12]
 8103632:	f003 0307 	and.w	r3, r3, #7
 8103636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103638:	69fb      	ldr	r3, [r7, #28]
 810363a:	f1c3 0307 	rsb	r3, r3, #7
 810363e:	2b04      	cmp	r3, #4
 8103640:	bf28      	it	cs
 8103642:	2304      	movcs	r3, #4
 8103644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103646:	69fb      	ldr	r3, [r7, #28]
 8103648:	3304      	adds	r3, #4
 810364a:	2b06      	cmp	r3, #6
 810364c:	d902      	bls.n	8103654 <NVIC_EncodePriority+0x30>
 810364e:	69fb      	ldr	r3, [r7, #28]
 8103650:	3b03      	subs	r3, #3
 8103652:	e000      	b.n	8103656 <NVIC_EncodePriority+0x32>
 8103654:	2300      	movs	r3, #0
 8103656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103658:	f04f 32ff 	mov.w	r2, #4294967295
 810365c:	69bb      	ldr	r3, [r7, #24]
 810365e:	fa02 f303 	lsl.w	r3, r2, r3
 8103662:	43da      	mvns	r2, r3
 8103664:	68bb      	ldr	r3, [r7, #8]
 8103666:	401a      	ands	r2, r3
 8103668:	697b      	ldr	r3, [r7, #20]
 810366a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810366c:	f04f 31ff 	mov.w	r1, #4294967295
 8103670:	697b      	ldr	r3, [r7, #20]
 8103672:	fa01 f303 	lsl.w	r3, r1, r3
 8103676:	43d9      	mvns	r1, r3
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810367c:	4313      	orrs	r3, r2
         );
}
 810367e:	4618      	mov	r0, r3
 8103680:	3724      	adds	r7, #36	; 0x24
 8103682:	46bd      	mov	sp, r7
 8103684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103688:	4770      	bx	lr
	...

0810368c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810368c:	b580      	push	{r7, lr}
 810368e:	b082      	sub	sp, #8
 8103690:	af00      	add	r7, sp, #0
 8103692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	3b01      	subs	r3, #1
 8103698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810369c:	d301      	bcc.n	81036a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810369e:	2301      	movs	r3, #1
 81036a0:	e00f      	b.n	81036c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81036a2:	4a0a      	ldr	r2, [pc, #40]	; (81036cc <SysTick_Config+0x40>)
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	3b01      	subs	r3, #1
 81036a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81036aa:	210f      	movs	r1, #15
 81036ac:	f04f 30ff 	mov.w	r0, #4294967295
 81036b0:	f7ff ff8e 	bl	81035d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81036b4:	4b05      	ldr	r3, [pc, #20]	; (81036cc <SysTick_Config+0x40>)
 81036b6:	2200      	movs	r2, #0
 81036b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81036ba:	4b04      	ldr	r3, [pc, #16]	; (81036cc <SysTick_Config+0x40>)
 81036bc:	2207      	movs	r2, #7
 81036be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81036c0:	2300      	movs	r3, #0
}
 81036c2:	4618      	mov	r0, r3
 81036c4:	3708      	adds	r7, #8
 81036c6:	46bd      	mov	sp, r7
 81036c8:	bd80      	pop	{r7, pc}
 81036ca:	bf00      	nop
 81036cc:	e000e010 	.word	0xe000e010

081036d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81036d0:	b580      	push	{r7, lr}
 81036d2:	b082      	sub	sp, #8
 81036d4:	af00      	add	r7, sp, #0
 81036d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81036d8:	6878      	ldr	r0, [r7, #4]
 81036da:	f7ff ff47 	bl	810356c <__NVIC_SetPriorityGrouping>
}
 81036de:	bf00      	nop
 81036e0:	3708      	adds	r7, #8
 81036e2:	46bd      	mov	sp, r7
 81036e4:	bd80      	pop	{r7, pc}

081036e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81036e6:	b580      	push	{r7, lr}
 81036e8:	b086      	sub	sp, #24
 81036ea:	af00      	add	r7, sp, #0
 81036ec:	4603      	mov	r3, r0
 81036ee:	60b9      	str	r1, [r7, #8]
 81036f0:	607a      	str	r2, [r7, #4]
 81036f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81036f4:	f7ff ff5e 	bl	81035b4 <__NVIC_GetPriorityGrouping>
 81036f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81036fa:	687a      	ldr	r2, [r7, #4]
 81036fc:	68b9      	ldr	r1, [r7, #8]
 81036fe:	6978      	ldr	r0, [r7, #20]
 8103700:	f7ff ff90 	bl	8103624 <NVIC_EncodePriority>
 8103704:	4602      	mov	r2, r0
 8103706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810370a:	4611      	mov	r1, r2
 810370c:	4618      	mov	r0, r3
 810370e:	f7ff ff5f 	bl	81035d0 <__NVIC_SetPriority>
}
 8103712:	bf00      	nop
 8103714:	3718      	adds	r7, #24
 8103716:	46bd      	mov	sp, r7
 8103718:	bd80      	pop	{r7, pc}

0810371a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810371a:	b580      	push	{r7, lr}
 810371c:	b082      	sub	sp, #8
 810371e:	af00      	add	r7, sp, #0
 8103720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103722:	6878      	ldr	r0, [r7, #4]
 8103724:	f7ff ffb2 	bl	810368c <SysTick_Config>
 8103728:	4603      	mov	r3, r0
}
 810372a:	4618      	mov	r0, r3
 810372c:	3708      	adds	r7, #8
 810372e:	46bd      	mov	sp, r7
 8103730:	bd80      	pop	{r7, pc}
	...

08103734 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103734:	b480      	push	{r7}
 8103736:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103738:	4b07      	ldr	r3, [pc, #28]	; (8103758 <HAL_GetCurrentCPUID+0x24>)
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	091b      	lsrs	r3, r3, #4
 810373e:	f003 030f 	and.w	r3, r3, #15
 8103742:	2b07      	cmp	r3, #7
 8103744:	d101      	bne.n	810374a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103746:	2303      	movs	r3, #3
 8103748:	e000      	b.n	810374c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810374a:	2301      	movs	r3, #1
  }
}
 810374c:	4618      	mov	r0, r3
 810374e:	46bd      	mov	sp, r7
 8103750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103754:	4770      	bx	lr
 8103756:	bf00      	nop
 8103758:	e000ed00 	.word	0xe000ed00

0810375c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810375c:	b480      	push	{r7}
 810375e:	b089      	sub	sp, #36	; 0x24
 8103760:	af00      	add	r7, sp, #0
 8103762:	6078      	str	r0, [r7, #4]
 8103764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103766:	2300      	movs	r3, #0
 8103768:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810376a:	4b89      	ldr	r3, [pc, #548]	; (8103990 <HAL_GPIO_Init+0x234>)
 810376c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810376e:	e194      	b.n	8103a9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103770:	683b      	ldr	r3, [r7, #0]
 8103772:	681a      	ldr	r2, [r3, #0]
 8103774:	2101      	movs	r1, #1
 8103776:	69fb      	ldr	r3, [r7, #28]
 8103778:	fa01 f303 	lsl.w	r3, r1, r3
 810377c:	4013      	ands	r3, r2
 810377e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103780:	693b      	ldr	r3, [r7, #16]
 8103782:	2b00      	cmp	r3, #0
 8103784:	f000 8186 	beq.w	8103a94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103788:	683b      	ldr	r3, [r7, #0]
 810378a:	685b      	ldr	r3, [r3, #4]
 810378c:	f003 0303 	and.w	r3, r3, #3
 8103790:	2b01      	cmp	r3, #1
 8103792:	d005      	beq.n	81037a0 <HAL_GPIO_Init+0x44>
 8103794:	683b      	ldr	r3, [r7, #0]
 8103796:	685b      	ldr	r3, [r3, #4]
 8103798:	f003 0303 	and.w	r3, r3, #3
 810379c:	2b02      	cmp	r3, #2
 810379e:	d130      	bne.n	8103802 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	689b      	ldr	r3, [r3, #8]
 81037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81037a6:	69fb      	ldr	r3, [r7, #28]
 81037a8:	005b      	lsls	r3, r3, #1
 81037aa:	2203      	movs	r2, #3
 81037ac:	fa02 f303 	lsl.w	r3, r2, r3
 81037b0:	43db      	mvns	r3, r3
 81037b2:	69ba      	ldr	r2, [r7, #24]
 81037b4:	4013      	ands	r3, r2
 81037b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81037b8:	683b      	ldr	r3, [r7, #0]
 81037ba:	68da      	ldr	r2, [r3, #12]
 81037bc:	69fb      	ldr	r3, [r7, #28]
 81037be:	005b      	lsls	r3, r3, #1
 81037c0:	fa02 f303 	lsl.w	r3, r2, r3
 81037c4:	69ba      	ldr	r2, [r7, #24]
 81037c6:	4313      	orrs	r3, r2
 81037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	69ba      	ldr	r2, [r7, #24]
 81037ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	685b      	ldr	r3, [r3, #4]
 81037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81037d6:	2201      	movs	r2, #1
 81037d8:	69fb      	ldr	r3, [r7, #28]
 81037da:	fa02 f303 	lsl.w	r3, r2, r3
 81037de:	43db      	mvns	r3, r3
 81037e0:	69ba      	ldr	r2, [r7, #24]
 81037e2:	4013      	ands	r3, r2
 81037e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81037e6:	683b      	ldr	r3, [r7, #0]
 81037e8:	685b      	ldr	r3, [r3, #4]
 81037ea:	091b      	lsrs	r3, r3, #4
 81037ec:	f003 0201 	and.w	r2, r3, #1
 81037f0:	69fb      	ldr	r3, [r7, #28]
 81037f2:	fa02 f303 	lsl.w	r3, r2, r3
 81037f6:	69ba      	ldr	r2, [r7, #24]
 81037f8:	4313      	orrs	r3, r2
 81037fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	69ba      	ldr	r2, [r7, #24]
 8103800:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103802:	683b      	ldr	r3, [r7, #0]
 8103804:	685b      	ldr	r3, [r3, #4]
 8103806:	f003 0303 	and.w	r3, r3, #3
 810380a:	2b03      	cmp	r3, #3
 810380c:	d017      	beq.n	810383e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	68db      	ldr	r3, [r3, #12]
 8103812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103814:	69fb      	ldr	r3, [r7, #28]
 8103816:	005b      	lsls	r3, r3, #1
 8103818:	2203      	movs	r2, #3
 810381a:	fa02 f303 	lsl.w	r3, r2, r3
 810381e:	43db      	mvns	r3, r3
 8103820:	69ba      	ldr	r2, [r7, #24]
 8103822:	4013      	ands	r3, r2
 8103824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103826:	683b      	ldr	r3, [r7, #0]
 8103828:	689a      	ldr	r2, [r3, #8]
 810382a:	69fb      	ldr	r3, [r7, #28]
 810382c:	005b      	lsls	r3, r3, #1
 810382e:	fa02 f303 	lsl.w	r3, r2, r3
 8103832:	69ba      	ldr	r2, [r7, #24]
 8103834:	4313      	orrs	r3, r2
 8103836:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	69ba      	ldr	r2, [r7, #24]
 810383c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810383e:	683b      	ldr	r3, [r7, #0]
 8103840:	685b      	ldr	r3, [r3, #4]
 8103842:	f003 0303 	and.w	r3, r3, #3
 8103846:	2b02      	cmp	r3, #2
 8103848:	d123      	bne.n	8103892 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810384a:	69fb      	ldr	r3, [r7, #28]
 810384c:	08da      	lsrs	r2, r3, #3
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	3208      	adds	r2, #8
 8103852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103858:	69fb      	ldr	r3, [r7, #28]
 810385a:	f003 0307 	and.w	r3, r3, #7
 810385e:	009b      	lsls	r3, r3, #2
 8103860:	220f      	movs	r2, #15
 8103862:	fa02 f303 	lsl.w	r3, r2, r3
 8103866:	43db      	mvns	r3, r3
 8103868:	69ba      	ldr	r2, [r7, #24]
 810386a:	4013      	ands	r3, r2
 810386c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810386e:	683b      	ldr	r3, [r7, #0]
 8103870:	691a      	ldr	r2, [r3, #16]
 8103872:	69fb      	ldr	r3, [r7, #28]
 8103874:	f003 0307 	and.w	r3, r3, #7
 8103878:	009b      	lsls	r3, r3, #2
 810387a:	fa02 f303 	lsl.w	r3, r2, r3
 810387e:	69ba      	ldr	r2, [r7, #24]
 8103880:	4313      	orrs	r3, r2
 8103882:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103884:	69fb      	ldr	r3, [r7, #28]
 8103886:	08da      	lsrs	r2, r3, #3
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	3208      	adds	r2, #8
 810388c:	69b9      	ldr	r1, [r7, #24]
 810388e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	681b      	ldr	r3, [r3, #0]
 8103896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103898:	69fb      	ldr	r3, [r7, #28]
 810389a:	005b      	lsls	r3, r3, #1
 810389c:	2203      	movs	r2, #3
 810389e:	fa02 f303 	lsl.w	r3, r2, r3
 81038a2:	43db      	mvns	r3, r3
 81038a4:	69ba      	ldr	r2, [r7, #24]
 81038a6:	4013      	ands	r3, r2
 81038a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81038aa:	683b      	ldr	r3, [r7, #0]
 81038ac:	685b      	ldr	r3, [r3, #4]
 81038ae:	f003 0203 	and.w	r2, r3, #3
 81038b2:	69fb      	ldr	r3, [r7, #28]
 81038b4:	005b      	lsls	r3, r3, #1
 81038b6:	fa02 f303 	lsl.w	r3, r2, r3
 81038ba:	69ba      	ldr	r2, [r7, #24]
 81038bc:	4313      	orrs	r3, r2
 81038be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	69ba      	ldr	r2, [r7, #24]
 81038c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81038c6:	683b      	ldr	r3, [r7, #0]
 81038c8:	685b      	ldr	r3, [r3, #4]
 81038ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81038ce:	2b00      	cmp	r3, #0
 81038d0:	f000 80e0 	beq.w	8103a94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81038d4:	4b2f      	ldr	r3, [pc, #188]	; (8103994 <HAL_GPIO_Init+0x238>)
 81038d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81038da:	4a2e      	ldr	r2, [pc, #184]	; (8103994 <HAL_GPIO_Init+0x238>)
 81038dc:	f043 0302 	orr.w	r3, r3, #2
 81038e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81038e4:	4b2b      	ldr	r3, [pc, #172]	; (8103994 <HAL_GPIO_Init+0x238>)
 81038e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81038ea:	f003 0302 	and.w	r3, r3, #2
 81038ee:	60fb      	str	r3, [r7, #12]
 81038f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81038f2:	4a29      	ldr	r2, [pc, #164]	; (8103998 <HAL_GPIO_Init+0x23c>)
 81038f4:	69fb      	ldr	r3, [r7, #28]
 81038f6:	089b      	lsrs	r3, r3, #2
 81038f8:	3302      	adds	r3, #2
 81038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103900:	69fb      	ldr	r3, [r7, #28]
 8103902:	f003 0303 	and.w	r3, r3, #3
 8103906:	009b      	lsls	r3, r3, #2
 8103908:	220f      	movs	r2, #15
 810390a:	fa02 f303 	lsl.w	r3, r2, r3
 810390e:	43db      	mvns	r3, r3
 8103910:	69ba      	ldr	r2, [r7, #24]
 8103912:	4013      	ands	r3, r2
 8103914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	4a20      	ldr	r2, [pc, #128]	; (810399c <HAL_GPIO_Init+0x240>)
 810391a:	4293      	cmp	r3, r2
 810391c:	d052      	beq.n	81039c4 <HAL_GPIO_Init+0x268>
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	4a1f      	ldr	r2, [pc, #124]	; (81039a0 <HAL_GPIO_Init+0x244>)
 8103922:	4293      	cmp	r3, r2
 8103924:	d031      	beq.n	810398a <HAL_GPIO_Init+0x22e>
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	4a1e      	ldr	r2, [pc, #120]	; (81039a4 <HAL_GPIO_Init+0x248>)
 810392a:	4293      	cmp	r3, r2
 810392c:	d02b      	beq.n	8103986 <HAL_GPIO_Init+0x22a>
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	4a1d      	ldr	r2, [pc, #116]	; (81039a8 <HAL_GPIO_Init+0x24c>)
 8103932:	4293      	cmp	r3, r2
 8103934:	d025      	beq.n	8103982 <HAL_GPIO_Init+0x226>
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	4a1c      	ldr	r2, [pc, #112]	; (81039ac <HAL_GPIO_Init+0x250>)
 810393a:	4293      	cmp	r3, r2
 810393c:	d01f      	beq.n	810397e <HAL_GPIO_Init+0x222>
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	4a1b      	ldr	r2, [pc, #108]	; (81039b0 <HAL_GPIO_Init+0x254>)
 8103942:	4293      	cmp	r3, r2
 8103944:	d019      	beq.n	810397a <HAL_GPIO_Init+0x21e>
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	4a1a      	ldr	r2, [pc, #104]	; (81039b4 <HAL_GPIO_Init+0x258>)
 810394a:	4293      	cmp	r3, r2
 810394c:	d013      	beq.n	8103976 <HAL_GPIO_Init+0x21a>
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	4a19      	ldr	r2, [pc, #100]	; (81039b8 <HAL_GPIO_Init+0x25c>)
 8103952:	4293      	cmp	r3, r2
 8103954:	d00d      	beq.n	8103972 <HAL_GPIO_Init+0x216>
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	4a18      	ldr	r2, [pc, #96]	; (81039bc <HAL_GPIO_Init+0x260>)
 810395a:	4293      	cmp	r3, r2
 810395c:	d007      	beq.n	810396e <HAL_GPIO_Init+0x212>
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	4a17      	ldr	r2, [pc, #92]	; (81039c0 <HAL_GPIO_Init+0x264>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d101      	bne.n	810396a <HAL_GPIO_Init+0x20e>
 8103966:	2309      	movs	r3, #9
 8103968:	e02d      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 810396a:	230a      	movs	r3, #10
 810396c:	e02b      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 810396e:	2308      	movs	r3, #8
 8103970:	e029      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 8103972:	2307      	movs	r3, #7
 8103974:	e027      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 8103976:	2306      	movs	r3, #6
 8103978:	e025      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 810397a:	2305      	movs	r3, #5
 810397c:	e023      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 810397e:	2304      	movs	r3, #4
 8103980:	e021      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 8103982:	2303      	movs	r3, #3
 8103984:	e01f      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 8103986:	2302      	movs	r3, #2
 8103988:	e01d      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 810398a:	2301      	movs	r3, #1
 810398c:	e01b      	b.n	81039c6 <HAL_GPIO_Init+0x26a>
 810398e:	bf00      	nop
 8103990:	580000c0 	.word	0x580000c0
 8103994:	58024400 	.word	0x58024400
 8103998:	58000400 	.word	0x58000400
 810399c:	58020000 	.word	0x58020000
 81039a0:	58020400 	.word	0x58020400
 81039a4:	58020800 	.word	0x58020800
 81039a8:	58020c00 	.word	0x58020c00
 81039ac:	58021000 	.word	0x58021000
 81039b0:	58021400 	.word	0x58021400
 81039b4:	58021800 	.word	0x58021800
 81039b8:	58021c00 	.word	0x58021c00
 81039bc:	58022000 	.word	0x58022000
 81039c0:	58022400 	.word	0x58022400
 81039c4:	2300      	movs	r3, #0
 81039c6:	69fa      	ldr	r2, [r7, #28]
 81039c8:	f002 0203 	and.w	r2, r2, #3
 81039cc:	0092      	lsls	r2, r2, #2
 81039ce:	4093      	lsls	r3, r2
 81039d0:	69ba      	ldr	r2, [r7, #24]
 81039d2:	4313      	orrs	r3, r2
 81039d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81039d6:	4938      	ldr	r1, [pc, #224]	; (8103ab8 <HAL_GPIO_Init+0x35c>)
 81039d8:	69fb      	ldr	r3, [r7, #28]
 81039da:	089b      	lsrs	r3, r3, #2
 81039dc:	3302      	adds	r3, #2
 81039de:	69ba      	ldr	r2, [r7, #24]
 81039e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81039ec:	693b      	ldr	r3, [r7, #16]
 81039ee:	43db      	mvns	r3, r3
 81039f0:	69ba      	ldr	r2, [r7, #24]
 81039f2:	4013      	ands	r3, r2
 81039f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81039f6:	683b      	ldr	r3, [r7, #0]
 81039f8:	685b      	ldr	r3, [r3, #4]
 81039fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81039fe:	2b00      	cmp	r3, #0
 8103a00:	d003      	beq.n	8103a0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103a02:	69ba      	ldr	r2, [r7, #24]
 8103a04:	693b      	ldr	r3, [r7, #16]
 8103a06:	4313      	orrs	r3, r2
 8103a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a0e:	69bb      	ldr	r3, [r7, #24]
 8103a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103a16:	685b      	ldr	r3, [r3, #4]
 8103a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a1a:	693b      	ldr	r3, [r7, #16]
 8103a1c:	43db      	mvns	r3, r3
 8103a1e:	69ba      	ldr	r2, [r7, #24]
 8103a20:	4013      	ands	r3, r2
 8103a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103a24:	683b      	ldr	r3, [r7, #0]
 8103a26:	685b      	ldr	r3, [r3, #4]
 8103a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a2c:	2b00      	cmp	r3, #0
 8103a2e:	d003      	beq.n	8103a38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103a30:	69ba      	ldr	r2, [r7, #24]
 8103a32:	693b      	ldr	r3, [r7, #16]
 8103a34:	4313      	orrs	r3, r2
 8103a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a3c:	69bb      	ldr	r3, [r7, #24]
 8103a3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103a40:	697b      	ldr	r3, [r7, #20]
 8103a42:	685b      	ldr	r3, [r3, #4]
 8103a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a46:	693b      	ldr	r3, [r7, #16]
 8103a48:	43db      	mvns	r3, r3
 8103a4a:	69ba      	ldr	r2, [r7, #24]
 8103a4c:	4013      	ands	r3, r2
 8103a4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103a50:	683b      	ldr	r3, [r7, #0]
 8103a52:	685b      	ldr	r3, [r3, #4]
 8103a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103a58:	2b00      	cmp	r3, #0
 8103a5a:	d003      	beq.n	8103a64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103a5c:	69ba      	ldr	r2, [r7, #24]
 8103a5e:	693b      	ldr	r3, [r7, #16]
 8103a60:	4313      	orrs	r3, r2
 8103a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103a64:	697b      	ldr	r3, [r7, #20]
 8103a66:	69ba      	ldr	r2, [r7, #24]
 8103a68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103a6a:	697b      	ldr	r3, [r7, #20]
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a70:	693b      	ldr	r3, [r7, #16]
 8103a72:	43db      	mvns	r3, r3
 8103a74:	69ba      	ldr	r2, [r7, #24]
 8103a76:	4013      	ands	r3, r2
 8103a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103a7a:	683b      	ldr	r3, [r7, #0]
 8103a7c:	685b      	ldr	r3, [r3, #4]
 8103a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	d003      	beq.n	8103a8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103a86:	69ba      	ldr	r2, [r7, #24]
 8103a88:	693b      	ldr	r3, [r7, #16]
 8103a8a:	4313      	orrs	r3, r2
 8103a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103a8e:	697b      	ldr	r3, [r7, #20]
 8103a90:	69ba      	ldr	r2, [r7, #24]
 8103a92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103a94:	69fb      	ldr	r3, [r7, #28]
 8103a96:	3301      	adds	r3, #1
 8103a98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103a9a:	683b      	ldr	r3, [r7, #0]
 8103a9c:	681a      	ldr	r2, [r3, #0]
 8103a9e:	69fb      	ldr	r3, [r7, #28]
 8103aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	f47f ae63 	bne.w	8103770 <HAL_GPIO_Init+0x14>
  }
}
 8103aaa:	bf00      	nop
 8103aac:	bf00      	nop
 8103aae:	3724      	adds	r7, #36	; 0x24
 8103ab0:	46bd      	mov	sp, r7
 8103ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab6:	4770      	bx	lr
 8103ab8:	58000400 	.word	0x58000400

08103abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103abc:	b480      	push	{r7}
 8103abe:	b083      	sub	sp, #12
 8103ac0:	af00      	add	r7, sp, #0
 8103ac2:	6078      	str	r0, [r7, #4]
 8103ac4:	460b      	mov	r3, r1
 8103ac6:	807b      	strh	r3, [r7, #2]
 8103ac8:	4613      	mov	r3, r2
 8103aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103acc:	787b      	ldrb	r3, [r7, #1]
 8103ace:	2b00      	cmp	r3, #0
 8103ad0:	d003      	beq.n	8103ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103ad2:	887a      	ldrh	r2, [r7, #2]
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103ad8:	e003      	b.n	8103ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103ada:	887b      	ldrh	r3, [r7, #2]
 8103adc:	041a      	lsls	r2, r3, #16
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	619a      	str	r2, [r3, #24]
}
 8103ae2:	bf00      	nop
 8103ae4:	370c      	adds	r7, #12
 8103ae6:	46bd      	mov	sp, r7
 8103ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aec:	4770      	bx	lr
	...

08103af0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103af0:	b480      	push	{r7}
 8103af2:	b083      	sub	sp, #12
 8103af4:	af00      	add	r7, sp, #0
 8103af6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103af8:	4b05      	ldr	r3, [pc, #20]	; (8103b10 <HAL_HSEM_ActivateNotification+0x20>)
 8103afa:	681a      	ldr	r2, [r3, #0]
 8103afc:	4904      	ldr	r1, [pc, #16]	; (8103b10 <HAL_HSEM_ActivateNotification+0x20>)
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	4313      	orrs	r3, r2
 8103b02:	600b      	str	r3, [r1, #0]
#endif
}
 8103b04:	bf00      	nop
 8103b06:	370c      	adds	r7, #12
 8103b08:	46bd      	mov	sp, r7
 8103b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b0e:	4770      	bx	lr
 8103b10:	58026510 	.word	0x58026510

08103b14 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103b14:	b580      	push	{r7, lr}
 8103b16:	b084      	sub	sp, #16
 8103b18:	af00      	add	r7, sp, #0
 8103b1a:	60f8      	str	r0, [r7, #12]
 8103b1c:	460b      	mov	r3, r1
 8103b1e:	607a      	str	r2, [r7, #4]
 8103b20:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103b22:	4b37      	ldr	r3, [pc, #220]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	f023 0201 	bic.w	r2, r3, #1
 8103b2a:	4935      	ldr	r1, [pc, #212]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b2c:	68fb      	ldr	r3, [r7, #12]
 8103b2e:	4313      	orrs	r3, r2
 8103b30:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	d123      	bne.n	8103b80 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103b38:	f7ff fdfc 	bl	8103734 <HAL_GetCurrentCPUID>
 8103b3c:	4603      	mov	r3, r0
 8103b3e:	2b03      	cmp	r3, #3
 8103b40:	d158      	bne.n	8103bf4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103b42:	4b2f      	ldr	r3, [pc, #188]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b44:	691b      	ldr	r3, [r3, #16]
 8103b46:	4a2e      	ldr	r2, [pc, #184]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b48:	f023 0301 	bic.w	r3, r3, #1
 8103b4c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103b4e:	4b2d      	ldr	r3, [pc, #180]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b50:	691b      	ldr	r3, [r3, #16]
 8103b52:	4a2c      	ldr	r2, [pc, #176]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b54:	f043 0304 	orr.w	r3, r3, #4
 8103b58:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103b5a:	f3bf 8f4f 	dsb	sy
}
 8103b5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103b60:	f3bf 8f6f 	isb	sy
}
 8103b64:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103b66:	7afb      	ldrb	r3, [r7, #11]
 8103b68:	2b01      	cmp	r3, #1
 8103b6a:	d101      	bne.n	8103b70 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103b6c:	bf30      	wfi
 8103b6e:	e000      	b.n	8103b72 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103b70:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103b72:	4b24      	ldr	r3, [pc, #144]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b74:	691b      	ldr	r3, [r3, #16]
 8103b76:	4a23      	ldr	r2, [pc, #140]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b78:	f023 0304 	bic.w	r3, r3, #4
 8103b7c:	6113      	str	r3, [r2, #16]
 8103b7e:	e03c      	b.n	8103bfa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	2b01      	cmp	r3, #1
 8103b84:	d123      	bne.n	8103bce <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103b86:	f7ff fdd5 	bl	8103734 <HAL_GetCurrentCPUID>
 8103b8a:	4603      	mov	r3, r0
 8103b8c:	2b01      	cmp	r3, #1
 8103b8e:	d133      	bne.n	8103bf8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103b90:	4b1b      	ldr	r3, [pc, #108]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b92:	695b      	ldr	r3, [r3, #20]
 8103b94:	4a1a      	ldr	r2, [pc, #104]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b96:	f023 0302 	bic.w	r3, r3, #2
 8103b9a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103b9c:	4b19      	ldr	r3, [pc, #100]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b9e:	691b      	ldr	r3, [r3, #16]
 8103ba0:	4a18      	ldr	r2, [pc, #96]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ba2:	f043 0304 	orr.w	r3, r3, #4
 8103ba6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103ba8:	f3bf 8f4f 	dsb	sy
}
 8103bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103bae:	f3bf 8f6f 	isb	sy
}
 8103bb2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103bb4:	7afb      	ldrb	r3, [r7, #11]
 8103bb6:	2b01      	cmp	r3, #1
 8103bb8:	d101      	bne.n	8103bbe <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103bba:	bf30      	wfi
 8103bbc:	e000      	b.n	8103bc0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103bbe:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103bc0:	4b10      	ldr	r3, [pc, #64]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bc2:	691b      	ldr	r3, [r3, #16]
 8103bc4:	4a0f      	ldr	r2, [pc, #60]	; (8103c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bc6:	f023 0304 	bic.w	r3, r3, #4
 8103bca:	6113      	str	r3, [r2, #16]
 8103bcc:	e015      	b.n	8103bfa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103bce:	f7ff fdb1 	bl	8103734 <HAL_GetCurrentCPUID>
 8103bd2:	4603      	mov	r3, r0
 8103bd4:	2b03      	cmp	r3, #3
 8103bd6:	d106      	bne.n	8103be6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103bd8:	4b09      	ldr	r3, [pc, #36]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bda:	691b      	ldr	r3, [r3, #16]
 8103bdc:	4a08      	ldr	r2, [pc, #32]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bde:	f023 0304 	bic.w	r3, r3, #4
 8103be2:	6113      	str	r3, [r2, #16]
 8103be4:	e009      	b.n	8103bfa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103be6:	4b06      	ldr	r3, [pc, #24]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103be8:	695b      	ldr	r3, [r3, #20]
 8103bea:	4a05      	ldr	r2, [pc, #20]	; (8103c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bec:	f023 0304 	bic.w	r3, r3, #4
 8103bf0:	6153      	str	r3, [r2, #20]
 8103bf2:	e002      	b.n	8103bfa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103bf4:	bf00      	nop
 8103bf6:	e000      	b.n	8103bfa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103bf8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103bfa:	3710      	adds	r7, #16
 8103bfc:	46bd      	mov	sp, r7
 8103bfe:	bd80      	pop	{r7, pc}
 8103c00:	58024800 	.word	0x58024800
 8103c04:	e000ed00 	.word	0xe000ed00

08103c08 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103c08:	b580      	push	{r7, lr}
 8103c0a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103c0c:	f7ff fd92 	bl	8103734 <HAL_GetCurrentCPUID>
 8103c10:	4603      	mov	r3, r0
 8103c12:	2b03      	cmp	r3, #3
 8103c14:	d101      	bne.n	8103c1a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103c16:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103c18:	e001      	b.n	8103c1e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103c1a:	bf40      	sev
    __WFE ();
 8103c1c:	bf20      	wfe
}
 8103c1e:	bf00      	nop
 8103c20:	bd80      	pop	{r7, pc}
	...

08103c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103c24:	b480      	push	{r7}
 8103c26:	b089      	sub	sp, #36	; 0x24
 8103c28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103c2a:	4bb3      	ldr	r3, [pc, #716]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c2c:	691b      	ldr	r3, [r3, #16]
 8103c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103c32:	2b18      	cmp	r3, #24
 8103c34:	f200 8155 	bhi.w	8103ee2 <HAL_RCC_GetSysClockFreq+0x2be>
 8103c38:	a201      	add	r2, pc, #4	; (adr r2, 8103c40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c3e:	bf00      	nop
 8103c40:	08103ca5 	.word	0x08103ca5
 8103c44:	08103ee3 	.word	0x08103ee3
 8103c48:	08103ee3 	.word	0x08103ee3
 8103c4c:	08103ee3 	.word	0x08103ee3
 8103c50:	08103ee3 	.word	0x08103ee3
 8103c54:	08103ee3 	.word	0x08103ee3
 8103c58:	08103ee3 	.word	0x08103ee3
 8103c5c:	08103ee3 	.word	0x08103ee3
 8103c60:	08103ccb 	.word	0x08103ccb
 8103c64:	08103ee3 	.word	0x08103ee3
 8103c68:	08103ee3 	.word	0x08103ee3
 8103c6c:	08103ee3 	.word	0x08103ee3
 8103c70:	08103ee3 	.word	0x08103ee3
 8103c74:	08103ee3 	.word	0x08103ee3
 8103c78:	08103ee3 	.word	0x08103ee3
 8103c7c:	08103ee3 	.word	0x08103ee3
 8103c80:	08103cd1 	.word	0x08103cd1
 8103c84:	08103ee3 	.word	0x08103ee3
 8103c88:	08103ee3 	.word	0x08103ee3
 8103c8c:	08103ee3 	.word	0x08103ee3
 8103c90:	08103ee3 	.word	0x08103ee3
 8103c94:	08103ee3 	.word	0x08103ee3
 8103c98:	08103ee3 	.word	0x08103ee3
 8103c9c:	08103ee3 	.word	0x08103ee3
 8103ca0:	08103cd7 	.word	0x08103cd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ca4:	4b94      	ldr	r3, [pc, #592]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	f003 0320 	and.w	r3, r3, #32
 8103cac:	2b00      	cmp	r3, #0
 8103cae:	d009      	beq.n	8103cc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103cb0:	4b91      	ldr	r3, [pc, #580]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	08db      	lsrs	r3, r3, #3
 8103cb6:	f003 0303 	and.w	r3, r3, #3
 8103cba:	4a90      	ldr	r2, [pc, #576]	; (8103efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8103cc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103cc2:	e111      	b.n	8103ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103cc4:	4b8d      	ldr	r3, [pc, #564]	; (8103efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103cc6:	61bb      	str	r3, [r7, #24]
    break;
 8103cc8:	e10e      	b.n	8103ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103cca:	4b8d      	ldr	r3, [pc, #564]	; (8103f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103ccc:	61bb      	str	r3, [r7, #24]
    break;
 8103cce:	e10b      	b.n	8103ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103cd0:	4b8c      	ldr	r3, [pc, #560]	; (8103f04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103cd2:	61bb      	str	r3, [r7, #24]
    break;
 8103cd4:	e108      	b.n	8103ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103cd6:	4b88      	ldr	r3, [pc, #544]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103cda:	f003 0303 	and.w	r3, r3, #3
 8103cde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103ce0:	4b85      	ldr	r3, [pc, #532]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ce4:	091b      	lsrs	r3, r3, #4
 8103ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103cea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103cec:	4b82      	ldr	r3, [pc, #520]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cf0:	f003 0301 	and.w	r3, r3, #1
 8103cf4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103cf6:	4b80      	ldr	r3, [pc, #512]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103cfa:	08db      	lsrs	r3, r3, #3
 8103cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d00:	68fa      	ldr	r2, [r7, #12]
 8103d02:	fb02 f303 	mul.w	r3, r2, r3
 8103d06:	ee07 3a90 	vmov	s15, r3
 8103d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103d12:	693b      	ldr	r3, [r7, #16]
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	f000 80e1 	beq.w	8103edc <HAL_RCC_GetSysClockFreq+0x2b8>
 8103d1a:	697b      	ldr	r3, [r7, #20]
 8103d1c:	2b02      	cmp	r3, #2
 8103d1e:	f000 8083 	beq.w	8103e28 <HAL_RCC_GetSysClockFreq+0x204>
 8103d22:	697b      	ldr	r3, [r7, #20]
 8103d24:	2b02      	cmp	r3, #2
 8103d26:	f200 80a1 	bhi.w	8103e6c <HAL_RCC_GetSysClockFreq+0x248>
 8103d2a:	697b      	ldr	r3, [r7, #20]
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	d003      	beq.n	8103d38 <HAL_RCC_GetSysClockFreq+0x114>
 8103d30:	697b      	ldr	r3, [r7, #20]
 8103d32:	2b01      	cmp	r3, #1
 8103d34:	d056      	beq.n	8103de4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103d36:	e099      	b.n	8103e6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d38:	4b6f      	ldr	r3, [pc, #444]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	f003 0320 	and.w	r3, r3, #32
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d02d      	beq.n	8103da0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103d44:	4b6c      	ldr	r3, [pc, #432]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	08db      	lsrs	r3, r3, #3
 8103d4a:	f003 0303 	and.w	r3, r3, #3
 8103d4e:	4a6b      	ldr	r2, [pc, #428]	; (8103efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d50:	fa22 f303 	lsr.w	r3, r2, r3
 8103d54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	ee07 3a90 	vmov	s15, r3
 8103d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d60:	693b      	ldr	r3, [r7, #16]
 8103d62:	ee07 3a90 	vmov	s15, r3
 8103d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d6e:	4b62      	ldr	r3, [pc, #392]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d76:	ee07 3a90 	vmov	s15, r3
 8103d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103d82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103d9e:	e087      	b.n	8103eb0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103da0:	693b      	ldr	r3, [r7, #16]
 8103da2:	ee07 3a90 	vmov	s15, r3
 8103da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103daa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103f0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8103dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103db2:	4b51      	ldr	r3, [pc, #324]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dba:	ee07 3a90 	vmov	s15, r3
 8103dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103dc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103de2:	e065      	b.n	8103eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103de4:	693b      	ldr	r3, [r7, #16]
 8103de6:	ee07 3a90 	vmov	s15, r3
 8103dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103df6:	4b40      	ldr	r3, [pc, #256]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dfe:	ee07 3a90 	vmov	s15, r3
 8103e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e26:	e043      	b.n	8103eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e28:	693b      	ldr	r3, [r7, #16]
 8103e2a:	ee07 3a90 	vmov	s15, r3
 8103e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103f14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e3a:	4b2f      	ldr	r3, [pc, #188]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e42:	ee07 3a90 	vmov	s15, r3
 8103e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e6a:	e021      	b.n	8103eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e6c:	693b      	ldr	r3, [r7, #16]
 8103e6e:	ee07 3a90 	vmov	s15, r3
 8103e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e7e:	4b1e      	ldr	r3, [pc, #120]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e86:	ee07 3a90 	vmov	s15, r3
 8103e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103eae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103eb0:	4b11      	ldr	r3, [pc, #68]	; (8103ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103eb4:	0a5b      	lsrs	r3, r3, #9
 8103eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103eba:	3301      	adds	r3, #1
 8103ebc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103ebe:	683b      	ldr	r3, [r7, #0]
 8103ec0:	ee07 3a90 	vmov	s15, r3
 8103ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8103ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103ed4:	ee17 3a90 	vmov	r3, s15
 8103ed8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103eda:	e005      	b.n	8103ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103edc:	2300      	movs	r3, #0
 8103ede:	61bb      	str	r3, [r7, #24]
    break;
 8103ee0:	e002      	b.n	8103ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103ee2:	4b07      	ldr	r3, [pc, #28]	; (8103f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103ee4:	61bb      	str	r3, [r7, #24]
    break;
 8103ee6:	bf00      	nop
  }

  return sysclockfreq;
 8103ee8:	69bb      	ldr	r3, [r7, #24]
}
 8103eea:	4618      	mov	r0, r3
 8103eec:	3724      	adds	r7, #36	; 0x24
 8103eee:	46bd      	mov	sp, r7
 8103ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ef4:	4770      	bx	lr
 8103ef6:	bf00      	nop
 8103ef8:	58024400 	.word	0x58024400
 8103efc:	03d09000 	.word	0x03d09000
 8103f00:	003d0900 	.word	0x003d0900
 8103f04:	007a1200 	.word	0x007a1200
 8103f08:	46000000 	.word	0x46000000
 8103f0c:	4c742400 	.word	0x4c742400
 8103f10:	4a742400 	.word	0x4a742400
 8103f14:	4af42400 	.word	0x4af42400

08103f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103f18:	b580      	push	{r7, lr}
 8103f1a:	b082      	sub	sp, #8
 8103f1c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103f1e:	f7ff fe81 	bl	8103c24 <HAL_RCC_GetSysClockFreq>
 8103f22:	4602      	mov	r2, r0
 8103f24:	4b11      	ldr	r3, [pc, #68]	; (8103f6c <HAL_RCC_GetHCLKFreq+0x54>)
 8103f26:	699b      	ldr	r3, [r3, #24]
 8103f28:	0a1b      	lsrs	r3, r3, #8
 8103f2a:	f003 030f 	and.w	r3, r3, #15
 8103f2e:	4910      	ldr	r1, [pc, #64]	; (8103f70 <HAL_RCC_GetHCLKFreq+0x58>)
 8103f30:	5ccb      	ldrb	r3, [r1, r3]
 8103f32:	f003 031f 	and.w	r3, r3, #31
 8103f36:	fa22 f303 	lsr.w	r3, r2, r3
 8103f3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103f3c:	4b0b      	ldr	r3, [pc, #44]	; (8103f6c <HAL_RCC_GetHCLKFreq+0x54>)
 8103f3e:	699b      	ldr	r3, [r3, #24]
 8103f40:	f003 030f 	and.w	r3, r3, #15
 8103f44:	4a0a      	ldr	r2, [pc, #40]	; (8103f70 <HAL_RCC_GetHCLKFreq+0x58>)
 8103f46:	5cd3      	ldrb	r3, [r2, r3]
 8103f48:	f003 031f 	and.w	r3, r3, #31
 8103f4c:	687a      	ldr	r2, [r7, #4]
 8103f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8103f52:	4a08      	ldr	r2, [pc, #32]	; (8103f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f54:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103f56:	4b07      	ldr	r3, [pc, #28]	; (8103f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f58:	681b      	ldr	r3, [r3, #0]
 8103f5a:	4a07      	ldr	r2, [pc, #28]	; (8103f78 <HAL_RCC_GetHCLKFreq+0x60>)
 8103f5c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103f5e:	4b05      	ldr	r3, [pc, #20]	; (8103f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f60:	681b      	ldr	r3, [r3, #0]
}
 8103f62:	4618      	mov	r0, r3
 8103f64:	3708      	adds	r7, #8
 8103f66:	46bd      	mov	sp, r7
 8103f68:	bd80      	pop	{r7, pc}
 8103f6a:	bf00      	nop
 8103f6c:	58024400 	.word	0x58024400
 8103f70:	0810cf6c 	.word	0x0810cf6c
 8103f74:	10000004 	.word	0x10000004
 8103f78:	10000000 	.word	0x10000000

08103f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103f7c:	b580      	push	{r7, lr}
 8103f7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103f80:	f7ff ffca 	bl	8103f18 <HAL_RCC_GetHCLKFreq>
 8103f84:	4602      	mov	r2, r0
 8103f86:	4b06      	ldr	r3, [pc, #24]	; (8103fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103f88:	69db      	ldr	r3, [r3, #28]
 8103f8a:	091b      	lsrs	r3, r3, #4
 8103f8c:	f003 0307 	and.w	r3, r3, #7
 8103f90:	4904      	ldr	r1, [pc, #16]	; (8103fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103f92:	5ccb      	ldrb	r3, [r1, r3]
 8103f94:	f003 031f 	and.w	r3, r3, #31
 8103f98:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103f9c:	4618      	mov	r0, r3
 8103f9e:	bd80      	pop	{r7, pc}
 8103fa0:	58024400 	.word	0x58024400
 8103fa4:	0810cf6c 	.word	0x0810cf6c

08103fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103fa8:	b580      	push	{r7, lr}
 8103faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103fac:	f7ff ffb4 	bl	8103f18 <HAL_RCC_GetHCLKFreq>
 8103fb0:	4602      	mov	r2, r0
 8103fb2:	4b06      	ldr	r3, [pc, #24]	; (8103fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8103fb4:	69db      	ldr	r3, [r3, #28]
 8103fb6:	0a1b      	lsrs	r3, r3, #8
 8103fb8:	f003 0307 	and.w	r3, r3, #7
 8103fbc:	4904      	ldr	r1, [pc, #16]	; (8103fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8103fbe:	5ccb      	ldrb	r3, [r1, r3]
 8103fc0:	f003 031f 	and.w	r3, r3, #31
 8103fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103fc8:	4618      	mov	r0, r3
 8103fca:	bd80      	pop	{r7, pc}
 8103fcc:	58024400 	.word	0x58024400
 8103fd0:	0810cf6c 	.word	0x0810cf6c

08103fd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103fd4:	b580      	push	{r7, lr}
 8103fd6:	b086      	sub	sp, #24
 8103fd8:	af00      	add	r7, sp, #0
 8103fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103fdc:	2300      	movs	r3, #0
 8103fde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103fe0:	2300      	movs	r3, #0
 8103fe2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d03f      	beq.n	8104070 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103ff8:	d02a      	beq.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103ffe:	d824      	bhi.n	810404a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104004:	d018      	beq.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810400a:	d81e      	bhi.n	810404a <HAL_RCCEx_PeriphCLKConfig+0x76>
 810400c:	2b00      	cmp	r3, #0
 810400e:	d003      	beq.n	8104018 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104014:	d007      	beq.n	8104026 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8104016:	e018      	b.n	810404a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104018:	4ba3      	ldr	r3, [pc, #652]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810401c:	4aa2      	ldr	r2, [pc, #648]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810401e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104024:	e015      	b.n	8104052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	3304      	adds	r3, #4
 810402a:	2102      	movs	r1, #2
 810402c:	4618      	mov	r0, r3
 810402e:	f001 fff9 	bl	8106024 <RCCEx_PLL2_Config>
 8104032:	4603      	mov	r3, r0
 8104034:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104036:	e00c      	b.n	8104052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	3324      	adds	r3, #36	; 0x24
 810403c:	2102      	movs	r1, #2
 810403e:	4618      	mov	r0, r3
 8104040:	f002 f8a2 	bl	8106188 <RCCEx_PLL3_Config>
 8104044:	4603      	mov	r3, r0
 8104046:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104048:	e003      	b.n	8104052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810404a:	2301      	movs	r3, #1
 810404c:	75fb      	strb	r3, [r7, #23]
      break;
 810404e:	e000      	b.n	8104052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104052:	7dfb      	ldrb	r3, [r7, #23]
 8104054:	2b00      	cmp	r3, #0
 8104056:	d109      	bne.n	810406c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104058:	4b93      	ldr	r3, [pc, #588]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810405a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810405c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104064:	4990      	ldr	r1, [pc, #576]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104066:	4313      	orrs	r3, r2
 8104068:	650b      	str	r3, [r1, #80]	; 0x50
 810406a:	e001      	b.n	8104070 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810406c:	7dfb      	ldrb	r3, [r7, #23]
 810406e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104078:	2b00      	cmp	r3, #0
 810407a:	d03d      	beq.n	81040f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104080:	2b04      	cmp	r3, #4
 8104082:	d826      	bhi.n	81040d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104084:	a201      	add	r2, pc, #4	; (adr r2, 810408c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8104086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810408a:	bf00      	nop
 810408c:	081040a1 	.word	0x081040a1
 8104090:	081040af 	.word	0x081040af
 8104094:	081040c1 	.word	0x081040c1
 8104098:	081040d9 	.word	0x081040d9
 810409c:	081040d9 	.word	0x081040d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040a0:	4b81      	ldr	r3, [pc, #516]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040a4:	4a80      	ldr	r2, [pc, #512]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040ac:	e015      	b.n	81040da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	3304      	adds	r3, #4
 81040b2:	2100      	movs	r1, #0
 81040b4:	4618      	mov	r0, r3
 81040b6:	f001 ffb5 	bl	8106024 <RCCEx_PLL2_Config>
 81040ba:	4603      	mov	r3, r0
 81040bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040be:	e00c      	b.n	81040da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	3324      	adds	r3, #36	; 0x24
 81040c4:	2100      	movs	r1, #0
 81040c6:	4618      	mov	r0, r3
 81040c8:	f002 f85e 	bl	8106188 <RCCEx_PLL3_Config>
 81040cc:	4603      	mov	r3, r0
 81040ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81040d0:	e003      	b.n	81040da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81040d2:	2301      	movs	r3, #1
 81040d4:	75fb      	strb	r3, [r7, #23]
      break;
 81040d6:	e000      	b.n	81040da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81040d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040da:	7dfb      	ldrb	r3, [r7, #23]
 81040dc:	2b00      	cmp	r3, #0
 81040de:	d109      	bne.n	81040f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81040e0:	4b71      	ldr	r3, [pc, #452]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040e4:	f023 0207 	bic.w	r2, r3, #7
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040ec:	496e      	ldr	r1, [pc, #440]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81040ee:	4313      	orrs	r3, r2
 81040f0:	650b      	str	r3, [r1, #80]	; 0x50
 81040f2:	e001      	b.n	81040f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040f4:	7dfb      	ldrb	r3, [r7, #23]
 81040f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104100:	2b00      	cmp	r3, #0
 8104102:	d042      	beq.n	810418a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810410c:	d02b      	beq.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810410e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104112:	d825      	bhi.n	8104160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104114:	2bc0      	cmp	r3, #192	; 0xc0
 8104116:	d028      	beq.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104118:	2bc0      	cmp	r3, #192	; 0xc0
 810411a:	d821      	bhi.n	8104160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810411c:	2b80      	cmp	r3, #128	; 0x80
 810411e:	d016      	beq.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104120:	2b80      	cmp	r3, #128	; 0x80
 8104122:	d81d      	bhi.n	8104160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104124:	2b00      	cmp	r3, #0
 8104126:	d002      	beq.n	810412e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104128:	2b40      	cmp	r3, #64	; 0x40
 810412a:	d007      	beq.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x168>
 810412c:	e018      	b.n	8104160 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810412e:	4b5e      	ldr	r3, [pc, #376]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104132:	4a5d      	ldr	r2, [pc, #372]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810413a:	e017      	b.n	810416c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	3304      	adds	r3, #4
 8104140:	2100      	movs	r1, #0
 8104142:	4618      	mov	r0, r3
 8104144:	f001 ff6e 	bl	8106024 <RCCEx_PLL2_Config>
 8104148:	4603      	mov	r3, r0
 810414a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810414c:	e00e      	b.n	810416c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	3324      	adds	r3, #36	; 0x24
 8104152:	2100      	movs	r1, #0
 8104154:	4618      	mov	r0, r3
 8104156:	f002 f817 	bl	8106188 <RCCEx_PLL3_Config>
 810415a:	4603      	mov	r3, r0
 810415c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810415e:	e005      	b.n	810416c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104160:	2301      	movs	r3, #1
 8104162:	75fb      	strb	r3, [r7, #23]
      break;
 8104164:	e002      	b.n	810416c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104166:	bf00      	nop
 8104168:	e000      	b.n	810416c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810416a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810416c:	7dfb      	ldrb	r3, [r7, #23]
 810416e:	2b00      	cmp	r3, #0
 8104170:	d109      	bne.n	8104186 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104172:	4b4d      	ldr	r3, [pc, #308]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104176:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810417e:	494a      	ldr	r1, [pc, #296]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104180:	4313      	orrs	r3, r2
 8104182:	650b      	str	r3, [r1, #80]	; 0x50
 8104184:	e001      	b.n	810418a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104186:	7dfb      	ldrb	r3, [r7, #23]
 8104188:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104192:	2b00      	cmp	r3, #0
 8104194:	d049      	beq.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810419c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041a0:	d030      	beq.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81041a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041a6:	d82a      	bhi.n	81041fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81041a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81041ac:	d02c      	beq.n	8104208 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81041ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81041b2:	d824      	bhi.n	81041fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81041b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041b8:	d018      	beq.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 81041ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041be:	d81e      	bhi.n	81041fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	d003      	beq.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81041c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81041c8:	d007      	beq.n	81041da <HAL_RCCEx_PeriphCLKConfig+0x206>
 81041ca:	e018      	b.n	81041fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041cc:	4b36      	ldr	r3, [pc, #216]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041d0:	4a35      	ldr	r2, [pc, #212]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81041d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81041d8:	e017      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	3304      	adds	r3, #4
 81041de:	2100      	movs	r1, #0
 81041e0:	4618      	mov	r0, r3
 81041e2:	f001 ff1f 	bl	8106024 <RCCEx_PLL2_Config>
 81041e6:	4603      	mov	r3, r0
 81041e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81041ea:	e00e      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	3324      	adds	r3, #36	; 0x24
 81041f0:	2100      	movs	r1, #0
 81041f2:	4618      	mov	r0, r3
 81041f4:	f001 ffc8 	bl	8106188 <RCCEx_PLL3_Config>
 81041f8:	4603      	mov	r3, r0
 81041fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81041fc:	e005      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81041fe:	2301      	movs	r3, #1
 8104200:	75fb      	strb	r3, [r7, #23]
      break;
 8104202:	e002      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104204:	bf00      	nop
 8104206:	e000      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104208:	bf00      	nop
    }

    if(ret == HAL_OK)
 810420a:	7dfb      	ldrb	r3, [r7, #23]
 810420c:	2b00      	cmp	r3, #0
 810420e:	d10a      	bne.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104210:	4b25      	ldr	r3, [pc, #148]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104214:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810421e:	4922      	ldr	r1, [pc, #136]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104220:	4313      	orrs	r3, r2
 8104222:	658b      	str	r3, [r1, #88]	; 0x58
 8104224:	e001      	b.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104226:	7dfb      	ldrb	r3, [r7, #23]
 8104228:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104232:	2b00      	cmp	r3, #0
 8104234:	d04b      	beq.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810423c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104240:	d030      	beq.n	81042a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104246:	d82a      	bhi.n	810429e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104248:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810424c:	d02e      	beq.n	81042ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 810424e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104252:	d824      	bhi.n	810429e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104258:	d018      	beq.n	810428c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810425a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810425e:	d81e      	bhi.n	810429e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104260:	2b00      	cmp	r3, #0
 8104262:	d003      	beq.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104268:	d007      	beq.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810426a:	e018      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810426c:	4b0e      	ldr	r3, [pc, #56]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104270:	4a0d      	ldr	r2, [pc, #52]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104278:	e019      	b.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	3304      	adds	r3, #4
 810427e:	2100      	movs	r1, #0
 8104280:	4618      	mov	r0, r3
 8104282:	f001 fecf 	bl	8106024 <RCCEx_PLL2_Config>
 8104286:	4603      	mov	r3, r0
 8104288:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810428a:	e010      	b.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	3324      	adds	r3, #36	; 0x24
 8104290:	2100      	movs	r1, #0
 8104292:	4618      	mov	r0, r3
 8104294:	f001 ff78 	bl	8106188 <RCCEx_PLL3_Config>
 8104298:	4603      	mov	r3, r0
 810429a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810429c:	e007      	b.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810429e:	2301      	movs	r3, #1
 81042a0:	75fb      	strb	r3, [r7, #23]
      break;
 81042a2:	e004      	b.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81042a4:	bf00      	nop
 81042a6:	e002      	b.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81042a8:	58024400 	.word	0x58024400
      break;
 81042ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042ae:	7dfb      	ldrb	r3, [r7, #23]
 81042b0:	2b00      	cmp	r3, #0
 81042b2:	d10a      	bne.n	81042ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81042b4:	4b99      	ldr	r3, [pc, #612]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81042b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81042c2:	4996      	ldr	r1, [pc, #600]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81042c4:	4313      	orrs	r3, r2
 81042c6:	658b      	str	r3, [r1, #88]	; 0x58
 81042c8:	e001      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ca:	7dfb      	ldrb	r3, [r7, #23]
 81042cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d032      	beq.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81042de:	2b30      	cmp	r3, #48	; 0x30
 81042e0:	d01c      	beq.n	810431c <HAL_RCCEx_PeriphCLKConfig+0x348>
 81042e2:	2b30      	cmp	r3, #48	; 0x30
 81042e4:	d817      	bhi.n	8104316 <HAL_RCCEx_PeriphCLKConfig+0x342>
 81042e6:	2b20      	cmp	r3, #32
 81042e8:	d00c      	beq.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0x330>
 81042ea:	2b20      	cmp	r3, #32
 81042ec:	d813      	bhi.n	8104316 <HAL_RCCEx_PeriphCLKConfig+0x342>
 81042ee:	2b00      	cmp	r3, #0
 81042f0:	d016      	beq.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 81042f2:	2b10      	cmp	r3, #16
 81042f4:	d10f      	bne.n	8104316 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81042f6:	4b89      	ldr	r3, [pc, #548]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042fa:	4a88      	ldr	r2, [pc, #544]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81042fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104300:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104302:	e00e      	b.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	3304      	adds	r3, #4
 8104308:	2102      	movs	r1, #2
 810430a:	4618      	mov	r0, r3
 810430c:	f001 fe8a 	bl	8106024 <RCCEx_PLL2_Config>
 8104310:	4603      	mov	r3, r0
 8104312:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104314:	e005      	b.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104316:	2301      	movs	r3, #1
 8104318:	75fb      	strb	r3, [r7, #23]
      break;
 810431a:	e002      	b.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810431c:	bf00      	nop
 810431e:	e000      	b.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104322:	7dfb      	ldrb	r3, [r7, #23]
 8104324:	2b00      	cmp	r3, #0
 8104326:	d109      	bne.n	810433c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104328:	4b7c      	ldr	r3, [pc, #496]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810432c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104334:	4979      	ldr	r1, [pc, #484]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104336:	4313      	orrs	r3, r2
 8104338:	64cb      	str	r3, [r1, #76]	; 0x4c
 810433a:	e001      	b.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810433c:	7dfb      	ldrb	r3, [r7, #23]
 810433e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104348:	2b00      	cmp	r3, #0
 810434a:	d047      	beq.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104354:	d030      	beq.n	81043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810435a:	d82a      	bhi.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810435c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104360:	d02c      	beq.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8104362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104366:	d824      	bhi.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810436c:	d018      	beq.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104372:	d81e      	bhi.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104374:	2b00      	cmp	r3, #0
 8104376:	d003      	beq.n	8104380 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8104378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810437c:	d007      	beq.n	810438e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810437e:	e018      	b.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104380:	4b66      	ldr	r3, [pc, #408]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104384:	4a65      	ldr	r2, [pc, #404]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810438a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810438c:	e017      	b.n	81043be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	3304      	adds	r3, #4
 8104392:	2100      	movs	r1, #0
 8104394:	4618      	mov	r0, r3
 8104396:	f001 fe45 	bl	8106024 <RCCEx_PLL2_Config>
 810439a:	4603      	mov	r3, r0
 810439c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810439e:	e00e      	b.n	81043be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	3324      	adds	r3, #36	; 0x24
 81043a4:	2100      	movs	r1, #0
 81043a6:	4618      	mov	r0, r3
 81043a8:	f001 feee 	bl	8106188 <RCCEx_PLL3_Config>
 81043ac:	4603      	mov	r3, r0
 81043ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81043b0:	e005      	b.n	81043be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043b2:	2301      	movs	r3, #1
 81043b4:	75fb      	strb	r3, [r7, #23]
      break;
 81043b6:	e002      	b.n	81043be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81043b8:	bf00      	nop
 81043ba:	e000      	b.n	81043be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81043bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043be:	7dfb      	ldrb	r3, [r7, #23]
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	d109      	bne.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81043c4:	4b55      	ldr	r3, [pc, #340]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043d0:	4952      	ldr	r1, [pc, #328]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81043d2:	4313      	orrs	r3, r2
 81043d4:	650b      	str	r3, [r1, #80]	; 0x50
 81043d6:	e001      	b.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043d8:	7dfb      	ldrb	r3, [r7, #23]
 81043da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d049      	beq.n	810447c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81043ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81043f0:	d02e      	beq.n	8104450 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 81043f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81043f6:	d828      	bhi.n	810444a <HAL_RCCEx_PeriphCLKConfig+0x476>
 81043f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81043fc:	d02a      	beq.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0x480>
 81043fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104402:	d822      	bhi.n	810444a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104404:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104408:	d026      	beq.n	8104458 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810440a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810440e:	d81c      	bhi.n	810444a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104414:	d010      	beq.n	8104438 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8104416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810441a:	d816      	bhi.n	810444a <HAL_RCCEx_PeriphCLKConfig+0x476>
 810441c:	2b00      	cmp	r3, #0
 810441e:	d01d      	beq.n	810445c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8104420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104424:	d111      	bne.n	810444a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	3304      	adds	r3, #4
 810442a:	2101      	movs	r1, #1
 810442c:	4618      	mov	r0, r3
 810442e:	f001 fdf9 	bl	8106024 <RCCEx_PLL2_Config>
 8104432:	4603      	mov	r3, r0
 8104434:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104436:	e012      	b.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	3324      	adds	r3, #36	; 0x24
 810443c:	2101      	movs	r1, #1
 810443e:	4618      	mov	r0, r3
 8104440:	f001 fea2 	bl	8106188 <RCCEx_PLL3_Config>
 8104444:	4603      	mov	r3, r0
 8104446:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104448:	e009      	b.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810444a:	2301      	movs	r3, #1
 810444c:	75fb      	strb	r3, [r7, #23]
      break;
 810444e:	e006      	b.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104450:	bf00      	nop
 8104452:	e004      	b.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104454:	bf00      	nop
 8104456:	e002      	b.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104458:	bf00      	nop
 810445a:	e000      	b.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810445c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810445e:	7dfb      	ldrb	r3, [r7, #23]
 8104460:	2b00      	cmp	r3, #0
 8104462:	d109      	bne.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104464:	4b2d      	ldr	r3, [pc, #180]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104468:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104470:	492a      	ldr	r1, [pc, #168]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104472:	4313      	orrs	r3, r2
 8104474:	650b      	str	r3, [r1, #80]	; 0x50
 8104476:	e001      	b.n	810447c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104478:	7dfb      	ldrb	r3, [r7, #23]
 810447a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810447c:	687b      	ldr	r3, [r7, #4]
 810447e:	681b      	ldr	r3, [r3, #0]
 8104480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104484:	2b00      	cmp	r3, #0
 8104486:	d04d      	beq.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810448e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104492:	d02e      	beq.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8104494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104498:	d828      	bhi.n	81044ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 810449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810449e:	d02a      	beq.n	81044f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 81044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044a4:	d822      	bhi.n	81044ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044aa:	d026      	beq.n	81044fa <HAL_RCCEx_PeriphCLKConfig+0x526>
 81044ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044b0:	d81c      	bhi.n	81044ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044b6:	d010      	beq.n	81044da <HAL_RCCEx_PeriphCLKConfig+0x506>
 81044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044bc:	d816      	bhi.n	81044ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 81044be:	2b00      	cmp	r3, #0
 81044c0:	d01d      	beq.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81044c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81044c6:	d111      	bne.n	81044ec <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	3304      	adds	r3, #4
 81044cc:	2101      	movs	r1, #1
 81044ce:	4618      	mov	r0, r3
 81044d0:	f001 fda8 	bl	8106024 <RCCEx_PLL2_Config>
 81044d4:	4603      	mov	r3, r0
 81044d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81044d8:	e012      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	3324      	adds	r3, #36	; 0x24
 81044de:	2101      	movs	r1, #1
 81044e0:	4618      	mov	r0, r3
 81044e2:	f001 fe51 	bl	8106188 <RCCEx_PLL3_Config>
 81044e6:	4603      	mov	r3, r0
 81044e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81044ea:	e009      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81044ec:	2301      	movs	r3, #1
 81044ee:	75fb      	strb	r3, [r7, #23]
      break;
 81044f0:	e006      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81044f2:	bf00      	nop
 81044f4:	e004      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81044f6:	bf00      	nop
 81044f8:	e002      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81044fa:	bf00      	nop
 81044fc:	e000      	b.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81044fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104500:	7dfb      	ldrb	r3, [r7, #23]
 8104502:	2b00      	cmp	r3, #0
 8104504:	d10c      	bne.n	8104520 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104506:	4b05      	ldr	r3, [pc, #20]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810450a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104514:	4901      	ldr	r1, [pc, #4]	; (810451c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104516:	4313      	orrs	r3, r2
 8104518:	658b      	str	r3, [r1, #88]	; 0x58
 810451a:	e003      	b.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810451c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104520:	7dfb      	ldrb	r3, [r7, #23]
 8104522:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810452c:	2b00      	cmp	r3, #0
 810452e:	d02f      	beq.n	8104590 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104538:	d00e      	beq.n	8104558 <HAL_RCCEx_PeriphCLKConfig+0x584>
 810453a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810453e:	d814      	bhi.n	810456a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8104540:	2b00      	cmp	r3, #0
 8104542:	d015      	beq.n	8104570 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104548:	d10f      	bne.n	810456a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810454a:	4bb0      	ldr	r3, [pc, #704]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810454e:	4aaf      	ldr	r2, [pc, #700]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104556:	e00c      	b.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	3304      	adds	r3, #4
 810455c:	2101      	movs	r1, #1
 810455e:	4618      	mov	r0, r3
 8104560:	f001 fd60 	bl	8106024 <RCCEx_PLL2_Config>
 8104564:	4603      	mov	r3, r0
 8104566:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104568:	e003      	b.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810456a:	2301      	movs	r3, #1
 810456c:	75fb      	strb	r3, [r7, #23]
      break;
 810456e:	e000      	b.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8104570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104572:	7dfb      	ldrb	r3, [r7, #23]
 8104574:	2b00      	cmp	r3, #0
 8104576:	d109      	bne.n	810458c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104578:	4ba4      	ldr	r3, [pc, #656]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810457c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104584:	49a1      	ldr	r1, [pc, #644]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104586:	4313      	orrs	r3, r2
 8104588:	650b      	str	r3, [r1, #80]	; 0x50
 810458a:	e001      	b.n	8104590 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810458c:	7dfb      	ldrb	r3, [r7, #23]
 810458e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104598:	2b00      	cmp	r3, #0
 810459a:	d032      	beq.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045a0:	2b03      	cmp	r3, #3
 81045a2:	d81b      	bhi.n	81045dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 81045a4:	a201      	add	r2, pc, #4	; (adr r2, 81045ac <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045aa:	bf00      	nop
 81045ac:	081045e3 	.word	0x081045e3
 81045b0:	081045bd 	.word	0x081045bd
 81045b4:	081045cb 	.word	0x081045cb
 81045b8:	081045e3 	.word	0x081045e3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045bc:	4b93      	ldr	r3, [pc, #588]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045c0:	4a92      	ldr	r2, [pc, #584]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81045c8:	e00c      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	3304      	adds	r3, #4
 81045ce:	2102      	movs	r1, #2
 81045d0:	4618      	mov	r0, r3
 81045d2:	f001 fd27 	bl	8106024 <RCCEx_PLL2_Config>
 81045d6:	4603      	mov	r3, r0
 81045d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81045da:	e003      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81045dc:	2301      	movs	r3, #1
 81045de:	75fb      	strb	r3, [r7, #23]
      break;
 81045e0:	e000      	b.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81045e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045e4:	7dfb      	ldrb	r3, [r7, #23]
 81045e6:	2b00      	cmp	r3, #0
 81045e8:	d109      	bne.n	81045fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81045ea:	4b88      	ldr	r3, [pc, #544]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81045ee:	f023 0203 	bic.w	r2, r3, #3
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045f6:	4985      	ldr	r1, [pc, #532]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81045f8:	4313      	orrs	r3, r2
 81045fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 81045fc:	e001      	b.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045fe:	7dfb      	ldrb	r3, [r7, #23]
 8104600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	681b      	ldr	r3, [r3, #0]
 8104606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810460a:	2b00      	cmp	r3, #0
 810460c:	f000 8088 	beq.w	8104720 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104610:	4b7f      	ldr	r3, [pc, #508]	; (8104810 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	4a7e      	ldr	r2, [pc, #504]	; (8104810 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810461a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810461c:	f7fd fc2e 	bl	8101e7c <HAL_GetTick>
 8104620:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104622:	e009      	b.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104624:	f7fd fc2a 	bl	8101e7c <HAL_GetTick>
 8104628:	4602      	mov	r2, r0
 810462a:	693b      	ldr	r3, [r7, #16]
 810462c:	1ad3      	subs	r3, r2, r3
 810462e:	2b64      	cmp	r3, #100	; 0x64
 8104630:	d902      	bls.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104632:	2303      	movs	r3, #3
 8104634:	75fb      	strb	r3, [r7, #23]
        break;
 8104636:	e005      	b.n	8104644 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104638:	4b75      	ldr	r3, [pc, #468]	; (8104810 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104640:	2b00      	cmp	r3, #0
 8104642:	d0ef      	beq.n	8104624 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104644:	7dfb      	ldrb	r3, [r7, #23]
 8104646:	2b00      	cmp	r3, #0
 8104648:	d168      	bne.n	810471c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810464a:	4b70      	ldr	r3, [pc, #448]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810464c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104654:	4053      	eors	r3, r2
 8104656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810465a:	2b00      	cmp	r3, #0
 810465c:	d013      	beq.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810465e:	4b6b      	ldr	r3, [pc, #428]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104666:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104668:	4b68      	ldr	r3, [pc, #416]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810466c:	4a67      	ldr	r2, [pc, #412]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810466e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104672:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104674:	4b65      	ldr	r3, [pc, #404]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104678:	4a64      	ldr	r2, [pc, #400]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810467a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810467e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104680:	4a62      	ldr	r2, [pc, #392]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104682:	68fb      	ldr	r3, [r7, #12]
 8104684:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104690:	d115      	bne.n	81046be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104692:	f7fd fbf3 	bl	8101e7c <HAL_GetTick>
 8104696:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104698:	e00b      	b.n	81046b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810469a:	f7fd fbef 	bl	8101e7c <HAL_GetTick>
 810469e:	4602      	mov	r2, r0
 81046a0:	693b      	ldr	r3, [r7, #16]
 81046a2:	1ad3      	subs	r3, r2, r3
 81046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 81046a8:	4293      	cmp	r3, r2
 81046aa:	d902      	bls.n	81046b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81046ac:	2303      	movs	r3, #3
 81046ae:	75fb      	strb	r3, [r7, #23]
            break;
 81046b0:	e005      	b.n	81046be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81046b2:	4b56      	ldr	r3, [pc, #344]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81046b6:	f003 0302 	and.w	r3, r3, #2
 81046ba:	2b00      	cmp	r3, #0
 81046bc:	d0ed      	beq.n	810469a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81046be:	7dfb      	ldrb	r3, [r7, #23]
 81046c0:	2b00      	cmp	r3, #0
 81046c2:	d128      	bne.n	8104716 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81046ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81046d2:	d10f      	bne.n	81046f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81046d4:	4b4d      	ldr	r3, [pc, #308]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046d6:	691b      	ldr	r3, [r3, #16]
 81046d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81046e2:	091b      	lsrs	r3, r3, #4
 81046e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81046e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81046ec:	4947      	ldr	r1, [pc, #284]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046ee:	4313      	orrs	r3, r2
 81046f0:	610b      	str	r3, [r1, #16]
 81046f2:	e005      	b.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81046f4:	4b45      	ldr	r3, [pc, #276]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046f6:	691b      	ldr	r3, [r3, #16]
 81046f8:	4a44      	ldr	r2, [pc, #272]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81046fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81046fe:	6113      	str	r3, [r2, #16]
 8104700:	4b42      	ldr	r3, [pc, #264]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810470a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810470e:	493f      	ldr	r1, [pc, #252]	; (810480c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104710:	4313      	orrs	r3, r2
 8104712:	670b      	str	r3, [r1, #112]	; 0x70
 8104714:	e004      	b.n	8104720 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104716:	7dfb      	ldrb	r3, [r7, #23]
 8104718:	75bb      	strb	r3, [r7, #22]
 810471a:	e001      	b.n	8104720 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810471c:	7dfb      	ldrb	r3, [r7, #23]
 810471e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	f003 0301 	and.w	r3, r3, #1
 8104728:	2b00      	cmp	r3, #0
 810472a:	f000 8083 	beq.w	8104834 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104732:	2b28      	cmp	r3, #40	; 0x28
 8104734:	d866      	bhi.n	8104804 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104736:	a201      	add	r2, pc, #4	; (adr r2, 810473c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810473c:	08104815 	.word	0x08104815
 8104740:	08104805 	.word	0x08104805
 8104744:	08104805 	.word	0x08104805
 8104748:	08104805 	.word	0x08104805
 810474c:	08104805 	.word	0x08104805
 8104750:	08104805 	.word	0x08104805
 8104754:	08104805 	.word	0x08104805
 8104758:	08104805 	.word	0x08104805
 810475c:	081047e1 	.word	0x081047e1
 8104760:	08104805 	.word	0x08104805
 8104764:	08104805 	.word	0x08104805
 8104768:	08104805 	.word	0x08104805
 810476c:	08104805 	.word	0x08104805
 8104770:	08104805 	.word	0x08104805
 8104774:	08104805 	.word	0x08104805
 8104778:	08104805 	.word	0x08104805
 810477c:	081047f3 	.word	0x081047f3
 8104780:	08104805 	.word	0x08104805
 8104784:	08104805 	.word	0x08104805
 8104788:	08104805 	.word	0x08104805
 810478c:	08104805 	.word	0x08104805
 8104790:	08104805 	.word	0x08104805
 8104794:	08104805 	.word	0x08104805
 8104798:	08104805 	.word	0x08104805
 810479c:	08104815 	.word	0x08104815
 81047a0:	08104805 	.word	0x08104805
 81047a4:	08104805 	.word	0x08104805
 81047a8:	08104805 	.word	0x08104805
 81047ac:	08104805 	.word	0x08104805
 81047b0:	08104805 	.word	0x08104805
 81047b4:	08104805 	.word	0x08104805
 81047b8:	08104805 	.word	0x08104805
 81047bc:	08104815 	.word	0x08104815
 81047c0:	08104805 	.word	0x08104805
 81047c4:	08104805 	.word	0x08104805
 81047c8:	08104805 	.word	0x08104805
 81047cc:	08104805 	.word	0x08104805
 81047d0:	08104805 	.word	0x08104805
 81047d4:	08104805 	.word	0x08104805
 81047d8:	08104805 	.word	0x08104805
 81047dc:	08104815 	.word	0x08104815
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	3304      	adds	r3, #4
 81047e4:	2101      	movs	r1, #1
 81047e6:	4618      	mov	r0, r3
 81047e8:	f001 fc1c 	bl	8106024 <RCCEx_PLL2_Config>
 81047ec:	4603      	mov	r3, r0
 81047ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81047f0:	e011      	b.n	8104816 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	3324      	adds	r3, #36	; 0x24
 81047f6:	2101      	movs	r1, #1
 81047f8:	4618      	mov	r0, r3
 81047fa:	f001 fcc5 	bl	8106188 <RCCEx_PLL3_Config>
 81047fe:	4603      	mov	r3, r0
 8104800:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104802:	e008      	b.n	8104816 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104804:	2301      	movs	r3, #1
 8104806:	75fb      	strb	r3, [r7, #23]
      break;
 8104808:	e005      	b.n	8104816 <HAL_RCCEx_PeriphCLKConfig+0x842>
 810480a:	bf00      	nop
 810480c:	58024400 	.word	0x58024400
 8104810:	58024800 	.word	0x58024800
      break;
 8104814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104816:	7dfb      	ldrb	r3, [r7, #23]
 8104818:	2b00      	cmp	r3, #0
 810481a:	d109      	bne.n	8104830 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810481c:	4b96      	ldr	r3, [pc, #600]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104820:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104828:	4993      	ldr	r1, [pc, #588]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810482a:	4313      	orrs	r3, r2
 810482c:	654b      	str	r3, [r1, #84]	; 0x54
 810482e:	e001      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104830:	7dfb      	ldrb	r3, [r7, #23]
 8104832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	f003 0302 	and.w	r3, r3, #2
 810483c:	2b00      	cmp	r3, #0
 810483e:	d038      	beq.n	81048b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104844:	2b05      	cmp	r3, #5
 8104846:	d821      	bhi.n	810488c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104848:	a201      	add	r2, pc, #4	; (adr r2, 8104850 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810484e:	bf00      	nop
 8104850:	08104893 	.word	0x08104893
 8104854:	08104869 	.word	0x08104869
 8104858:	0810487b 	.word	0x0810487b
 810485c:	08104893 	.word	0x08104893
 8104860:	08104893 	.word	0x08104893
 8104864:	08104893 	.word	0x08104893
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	3304      	adds	r3, #4
 810486c:	2101      	movs	r1, #1
 810486e:	4618      	mov	r0, r3
 8104870:	f001 fbd8 	bl	8106024 <RCCEx_PLL2_Config>
 8104874:	4603      	mov	r3, r0
 8104876:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104878:	e00c      	b.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	3324      	adds	r3, #36	; 0x24
 810487e:	2101      	movs	r1, #1
 8104880:	4618      	mov	r0, r3
 8104882:	f001 fc81 	bl	8106188 <RCCEx_PLL3_Config>
 8104886:	4603      	mov	r3, r0
 8104888:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810488a:	e003      	b.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810488c:	2301      	movs	r3, #1
 810488e:	75fb      	strb	r3, [r7, #23]
      break;
 8104890:	e000      	b.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8104892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104894:	7dfb      	ldrb	r3, [r7, #23]
 8104896:	2b00      	cmp	r3, #0
 8104898:	d109      	bne.n	81048ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810489a:	4b77      	ldr	r3, [pc, #476]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810489e:	f023 0207 	bic.w	r2, r3, #7
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81048a6:	4974      	ldr	r1, [pc, #464]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81048a8:	4313      	orrs	r3, r2
 81048aa:	654b      	str	r3, [r1, #84]	; 0x54
 81048ac:	e001      	b.n	81048b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048ae:	7dfb      	ldrb	r3, [r7, #23]
 81048b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	f003 0304 	and.w	r3, r3, #4
 81048ba:	2b00      	cmp	r3, #0
 81048bc:	d03a      	beq.n	8104934 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81048c4:	2b05      	cmp	r3, #5
 81048c6:	d821      	bhi.n	810490c <HAL_RCCEx_PeriphCLKConfig+0x938>
 81048c8:	a201      	add	r2, pc, #4	; (adr r2, 81048d0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048ce:	bf00      	nop
 81048d0:	08104913 	.word	0x08104913
 81048d4:	081048e9 	.word	0x081048e9
 81048d8:	081048fb 	.word	0x081048fb
 81048dc:	08104913 	.word	0x08104913
 81048e0:	08104913 	.word	0x08104913
 81048e4:	08104913 	.word	0x08104913
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	3304      	adds	r3, #4
 81048ec:	2101      	movs	r1, #1
 81048ee:	4618      	mov	r0, r3
 81048f0:	f001 fb98 	bl	8106024 <RCCEx_PLL2_Config>
 81048f4:	4603      	mov	r3, r0
 81048f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81048f8:	e00c      	b.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	3324      	adds	r3, #36	; 0x24
 81048fe:	2101      	movs	r1, #1
 8104900:	4618      	mov	r0, r3
 8104902:	f001 fc41 	bl	8106188 <RCCEx_PLL3_Config>
 8104906:	4603      	mov	r3, r0
 8104908:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810490a:	e003      	b.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810490c:	2301      	movs	r3, #1
 810490e:	75fb      	strb	r3, [r7, #23]
      break;
 8104910:	e000      	b.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104914:	7dfb      	ldrb	r3, [r7, #23]
 8104916:	2b00      	cmp	r3, #0
 8104918:	d10a      	bne.n	8104930 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810491a:	4b57      	ldr	r3, [pc, #348]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810491e:	f023 0207 	bic.w	r2, r3, #7
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104928:	4953      	ldr	r1, [pc, #332]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810492a:	4313      	orrs	r3, r2
 810492c:	658b      	str	r3, [r1, #88]	; 0x58
 810492e:	e001      	b.n	8104934 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104930:	7dfb      	ldrb	r3, [r7, #23]
 8104932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	f003 0320 	and.w	r3, r3, #32
 810493c:	2b00      	cmp	r3, #0
 810493e:	d04b      	beq.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810494a:	d02e      	beq.n	81049aa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810494c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104950:	d828      	bhi.n	81049a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104956:	d02a      	beq.n	81049ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810495c:	d822      	bhi.n	81049a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810495e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104962:	d026      	beq.n	81049b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104968:	d81c      	bhi.n	81049a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810496a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810496e:	d010      	beq.n	8104992 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8104970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104974:	d816      	bhi.n	81049a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104976:	2b00      	cmp	r3, #0
 8104978:	d01d      	beq.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810497a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810497e:	d111      	bne.n	81049a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	3304      	adds	r3, #4
 8104984:	2100      	movs	r1, #0
 8104986:	4618      	mov	r0, r3
 8104988:	f001 fb4c 	bl	8106024 <RCCEx_PLL2_Config>
 810498c:	4603      	mov	r3, r0
 810498e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104990:	e012      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	3324      	adds	r3, #36	; 0x24
 8104996:	2102      	movs	r1, #2
 8104998:	4618      	mov	r0, r3
 810499a:	f001 fbf5 	bl	8106188 <RCCEx_PLL3_Config>
 810499e:	4603      	mov	r3, r0
 81049a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81049a2:	e009      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81049a4:	2301      	movs	r3, #1
 81049a6:	75fb      	strb	r3, [r7, #23]
      break;
 81049a8:	e006      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049aa:	bf00      	nop
 81049ac:	e004      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049ae:	bf00      	nop
 81049b0:	e002      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049b2:	bf00      	nop
 81049b4:	e000      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81049b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049b8:	7dfb      	ldrb	r3, [r7, #23]
 81049ba:	2b00      	cmp	r3, #0
 81049bc:	d10a      	bne.n	81049d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81049be:	4b2e      	ldr	r3, [pc, #184]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81049cc:	492a      	ldr	r1, [pc, #168]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81049ce:	4313      	orrs	r3, r2
 81049d0:	654b      	str	r3, [r1, #84]	; 0x54
 81049d2:	e001      	b.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049d4:	7dfb      	ldrb	r3, [r7, #23]
 81049d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	681b      	ldr	r3, [r3, #0]
 81049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81049e0:	2b00      	cmp	r3, #0
 81049e2:	d04d      	beq.n	8104a80 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81049ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81049ee:	d02e      	beq.n	8104a4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81049f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81049f4:	d828      	bhi.n	8104a48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81049fa:	d02a      	beq.n	8104a52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104a00:	d822      	bhi.n	8104a48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104a06:	d026      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104a08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104a0c:	d81c      	bhi.n	8104a48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104a12:	d010      	beq.n	8104a36 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104a18:	d816      	bhi.n	8104a48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104a1a:	2b00      	cmp	r3, #0
 8104a1c:	d01d      	beq.n	8104a5a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8104a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104a22:	d111      	bne.n	8104a48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	3304      	adds	r3, #4
 8104a28:	2100      	movs	r1, #0
 8104a2a:	4618      	mov	r0, r3
 8104a2c:	f001 fafa 	bl	8106024 <RCCEx_PLL2_Config>
 8104a30:	4603      	mov	r3, r0
 8104a32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104a34:	e012      	b.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	3324      	adds	r3, #36	; 0x24
 8104a3a:	2102      	movs	r1, #2
 8104a3c:	4618      	mov	r0, r3
 8104a3e:	f001 fba3 	bl	8106188 <RCCEx_PLL3_Config>
 8104a42:	4603      	mov	r3, r0
 8104a44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104a46:	e009      	b.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104a48:	2301      	movs	r3, #1
 8104a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8104a4c:	e006      	b.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a4e:	bf00      	nop
 8104a50:	e004      	b.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a52:	bf00      	nop
 8104a54:	e002      	b.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a56:	bf00      	nop
 8104a58:	e000      	b.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104a5c:	7dfb      	ldrb	r3, [r7, #23]
 8104a5e:	2b00      	cmp	r3, #0
 8104a60:	d10c      	bne.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104a62:	4b05      	ldr	r3, [pc, #20]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104a70:	4901      	ldr	r1, [pc, #4]	; (8104a78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104a72:	4313      	orrs	r3, r2
 8104a74:	658b      	str	r3, [r1, #88]	; 0x58
 8104a76:	e003      	b.n	8104a80 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104a78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a7c:	7dfb      	ldrb	r3, [r7, #23]
 8104a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104a80:	687b      	ldr	r3, [r7, #4]
 8104a82:	681b      	ldr	r3, [r3, #0]
 8104a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104a88:	2b00      	cmp	r3, #0
 8104a8a:	d04b      	beq.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104a92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104a96:	d02e      	beq.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104a98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104a9c:	d828      	bhi.n	8104af0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104aa2:	d02a      	beq.n	8104afa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104aa8:	d822      	bhi.n	8104af0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104aaa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104aae:	d026      	beq.n	8104afe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8104ab0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104ab4:	d81c      	bhi.n	8104af0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104aba:	d010      	beq.n	8104ade <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8104abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104ac0:	d816      	bhi.n	8104af0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104ac2:	2b00      	cmp	r3, #0
 8104ac4:	d01d      	beq.n	8104b02 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104aca:	d111      	bne.n	8104af0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	3304      	adds	r3, #4
 8104ad0:	2100      	movs	r1, #0
 8104ad2:	4618      	mov	r0, r3
 8104ad4:	f001 faa6 	bl	8106024 <RCCEx_PLL2_Config>
 8104ad8:	4603      	mov	r3, r0
 8104ada:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104adc:	e012      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104ade:	687b      	ldr	r3, [r7, #4]
 8104ae0:	3324      	adds	r3, #36	; 0x24
 8104ae2:	2102      	movs	r1, #2
 8104ae4:	4618      	mov	r0, r3
 8104ae6:	f001 fb4f 	bl	8106188 <RCCEx_PLL3_Config>
 8104aea:	4603      	mov	r3, r0
 8104aec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104aee:	e009      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104af0:	2301      	movs	r3, #1
 8104af2:	75fb      	strb	r3, [r7, #23]
      break;
 8104af4:	e006      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104af6:	bf00      	nop
 8104af8:	e004      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104afa:	bf00      	nop
 8104afc:	e002      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104afe:	bf00      	nop
 8104b00:	e000      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b04:	7dfb      	ldrb	r3, [r7, #23]
 8104b06:	2b00      	cmp	r3, #0
 8104b08:	d10a      	bne.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104b0a:	4b9d      	ldr	r3, [pc, #628]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104b18:	4999      	ldr	r1, [pc, #612]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b1a:	4313      	orrs	r3, r2
 8104b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8104b1e:	e001      	b.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b20:	7dfb      	ldrb	r3, [r7, #23]
 8104b22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104b24:	687b      	ldr	r3, [r7, #4]
 8104b26:	681b      	ldr	r3, [r3, #0]
 8104b28:	f003 0308 	and.w	r3, r3, #8
 8104b2c:	2b00      	cmp	r3, #0
 8104b2e:	d01a      	beq.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104b3a:	d10a      	bne.n	8104b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	3324      	adds	r3, #36	; 0x24
 8104b40:	2102      	movs	r1, #2
 8104b42:	4618      	mov	r0, r3
 8104b44:	f001 fb20 	bl	8106188 <RCCEx_PLL3_Config>
 8104b48:	4603      	mov	r3, r0
 8104b4a:	2b00      	cmp	r3, #0
 8104b4c:	d001      	beq.n	8104b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8104b4e:	2301      	movs	r3, #1
 8104b50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104b52:	4b8b      	ldr	r3, [pc, #556]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104b60:	4987      	ldr	r1, [pc, #540]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b62:	4313      	orrs	r3, r2
 8104b64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	681b      	ldr	r3, [r3, #0]
 8104b6a:	f003 0310 	and.w	r3, r3, #16
 8104b6e:	2b00      	cmp	r3, #0
 8104b70:	d01a      	beq.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b7c:	d10a      	bne.n	8104b94 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	3324      	adds	r3, #36	; 0x24
 8104b82:	2102      	movs	r1, #2
 8104b84:	4618      	mov	r0, r3
 8104b86:	f001 faff 	bl	8106188 <RCCEx_PLL3_Config>
 8104b8a:	4603      	mov	r3, r0
 8104b8c:	2b00      	cmp	r3, #0
 8104b8e:	d001      	beq.n	8104b94 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8104b90:	2301      	movs	r3, #1
 8104b92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104b94:	4b7a      	ldr	r3, [pc, #488]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104ba2:	4977      	ldr	r1, [pc, #476]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104bb0:	2b00      	cmp	r3, #0
 8104bb2:	d034      	beq.n	8104c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104bbe:	d01d      	beq.n	8104bfc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8104bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104bc4:	d817      	bhi.n	8104bf6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104bc6:	2b00      	cmp	r3, #0
 8104bc8:	d003      	beq.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8104bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104bce:	d009      	beq.n	8104be4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104bd0:	e011      	b.n	8104bf6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	3304      	adds	r3, #4
 8104bd6:	2100      	movs	r1, #0
 8104bd8:	4618      	mov	r0, r3
 8104bda:	f001 fa23 	bl	8106024 <RCCEx_PLL2_Config>
 8104bde:	4603      	mov	r3, r0
 8104be0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104be2:	e00c      	b.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	3324      	adds	r3, #36	; 0x24
 8104be8:	2102      	movs	r1, #2
 8104bea:	4618      	mov	r0, r3
 8104bec:	f001 facc 	bl	8106188 <RCCEx_PLL3_Config>
 8104bf0:	4603      	mov	r3, r0
 8104bf2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104bf4:	e003      	b.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104bf6:	2301      	movs	r3, #1
 8104bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8104bfa:	e000      	b.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104bfe:	7dfb      	ldrb	r3, [r7, #23]
 8104c00:	2b00      	cmp	r3, #0
 8104c02:	d10a      	bne.n	8104c1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104c04:	4b5e      	ldr	r3, [pc, #376]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104c12:	495b      	ldr	r1, [pc, #364]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c14:	4313      	orrs	r3, r2
 8104c16:	658b      	str	r3, [r1, #88]	; 0x58
 8104c18:	e001      	b.n	8104c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c1a:	7dfb      	ldrb	r3, [r7, #23]
 8104c1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	681b      	ldr	r3, [r3, #0]
 8104c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104c26:	2b00      	cmp	r3, #0
 8104c28:	d033      	beq.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104c34:	d01c      	beq.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104c3a:	d816      	bhi.n	8104c6a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104c40:	d003      	beq.n	8104c4a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8104c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c46:	d007      	beq.n	8104c58 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104c48:	e00f      	b.n	8104c6a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c4a:	4b4d      	ldr	r3, [pc, #308]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c4e:	4a4c      	ldr	r2, [pc, #304]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104c56:	e00c      	b.n	8104c72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	3324      	adds	r3, #36	; 0x24
 8104c5c:	2101      	movs	r1, #1
 8104c5e:	4618      	mov	r0, r3
 8104c60:	f001 fa92 	bl	8106188 <RCCEx_PLL3_Config>
 8104c64:	4603      	mov	r3, r0
 8104c66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104c68:	e003      	b.n	8104c72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c6a:	2301      	movs	r3, #1
 8104c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8104c6e:	e000      	b.n	8104c72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8104c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c72:	7dfb      	ldrb	r3, [r7, #23]
 8104c74:	2b00      	cmp	r3, #0
 8104c76:	d10a      	bne.n	8104c8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104c78:	4b41      	ldr	r3, [pc, #260]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c86:	493e      	ldr	r1, [pc, #248]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104c88:	4313      	orrs	r3, r2
 8104c8a:	654b      	str	r3, [r1, #84]	; 0x54
 8104c8c:	e001      	b.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c8e:	7dfb      	ldrb	r3, [r7, #23]
 8104c90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104c9a:	2b00      	cmp	r3, #0
 8104c9c:	d029      	beq.n	8104cf2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ca2:	2b00      	cmp	r3, #0
 8104ca4:	d003      	beq.n	8104cae <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8104ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104caa:	d007      	beq.n	8104cbc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8104cac:	e00f      	b.n	8104cce <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cae:	4b34      	ldr	r3, [pc, #208]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104cb2:	4a33      	ldr	r2, [pc, #204]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104cba:	e00b      	b.n	8104cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	3304      	adds	r3, #4
 8104cc0:	2102      	movs	r1, #2
 8104cc2:	4618      	mov	r0, r3
 8104cc4:	f001 f9ae 	bl	8106024 <RCCEx_PLL2_Config>
 8104cc8:	4603      	mov	r3, r0
 8104cca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104ccc:	e002      	b.n	8104cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8104cce:	2301      	movs	r3, #1
 8104cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8104cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104cd4:	7dfb      	ldrb	r3, [r7, #23]
 8104cd6:	2b00      	cmp	r3, #0
 8104cd8:	d109      	bne.n	8104cee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104cda:	4b29      	ldr	r3, [pc, #164]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ce6:	4926      	ldr	r1, [pc, #152]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104ce8:	4313      	orrs	r3, r2
 8104cea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104cec:	e001      	b.n	8104cf2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cee:	7dfb      	ldrb	r3, [r7, #23]
 8104cf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d00a      	beq.n	8104d14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	3324      	adds	r3, #36	; 0x24
 8104d02:	2102      	movs	r1, #2
 8104d04:	4618      	mov	r0, r3
 8104d06:	f001 fa3f 	bl	8106188 <RCCEx_PLL3_Config>
 8104d0a:	4603      	mov	r3, r0
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d001      	beq.n	8104d14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104d10:	2301      	movs	r3, #1
 8104d12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104d1c:	2b00      	cmp	r3, #0
 8104d1e:	d033      	beq.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104d28:	d017      	beq.n	8104d5a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104d2e:	d811      	bhi.n	8104d54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104d34:	d013      	beq.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104d3a:	d80b      	bhi.n	8104d54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d010      	beq.n	8104d62 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8104d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d44:	d106      	bne.n	8104d54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d46:	4b0e      	ldr	r3, [pc, #56]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d4a:	4a0d      	ldr	r2, [pc, #52]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104d52:	e007      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d54:	2301      	movs	r3, #1
 8104d56:	75fb      	strb	r3, [r7, #23]
      break;
 8104d58:	e004      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104d5a:	bf00      	nop
 8104d5c:	e002      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104d5e:	bf00      	nop
 8104d60:	e000      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d64:	7dfb      	ldrb	r3, [r7, #23]
 8104d66:	2b00      	cmp	r3, #0
 8104d68:	d10c      	bne.n	8104d84 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104d6a:	4b05      	ldr	r3, [pc, #20]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d76:	4902      	ldr	r1, [pc, #8]	; (8104d80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104d78:	4313      	orrs	r3, r2
 8104d7a:	654b      	str	r3, [r1, #84]	; 0x54
 8104d7c:	e004      	b.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8104d7e:	bf00      	nop
 8104d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d84:	7dfb      	ldrb	r3, [r7, #23]
 8104d86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	681b      	ldr	r3, [r3, #0]
 8104d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104d90:	2b00      	cmp	r3, #0
 8104d92:	d008      	beq.n	8104da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104d94:	4b31      	ldr	r3, [pc, #196]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104da0:	492e      	ldr	r1, [pc, #184]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104da2:	4313      	orrs	r3, r2
 8104da4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	681b      	ldr	r3, [r3, #0]
 8104daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104dae:	2b00      	cmp	r3, #0
 8104db0:	d009      	beq.n	8104dc6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104db2:	4b2a      	ldr	r3, [pc, #168]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104db4:	691b      	ldr	r3, [r3, #16]
 8104db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104dc0:	4926      	ldr	r1, [pc, #152]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104dc2:	4313      	orrs	r3, r2
 8104dc4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104dce:	2b00      	cmp	r3, #0
 8104dd0:	d008      	beq.n	8104de4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104dd2:	4b22      	ldr	r3, [pc, #136]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104dd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104dde:	491f      	ldr	r1, [pc, #124]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104de0:	4313      	orrs	r3, r2
 8104de2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	681b      	ldr	r3, [r3, #0]
 8104de8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104dec:	2b00      	cmp	r3, #0
 8104dee:	d00d      	beq.n	8104e0c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104df0:	4b1a      	ldr	r3, [pc, #104]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104df2:	691b      	ldr	r3, [r3, #16]
 8104df4:	4a19      	ldr	r2, [pc, #100]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104dfa:	6113      	str	r3, [r2, #16]
 8104dfc:	4b17      	ldr	r3, [pc, #92]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104dfe:	691a      	ldr	r2, [r3, #16]
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104e06:	4915      	ldr	r1, [pc, #84]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e08:	4313      	orrs	r3, r2
 8104e0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	2b00      	cmp	r3, #0
 8104e12:	da08      	bge.n	8104e26 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104e14:	4b11      	ldr	r3, [pc, #68]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e20:	490e      	ldr	r1, [pc, #56]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e22:	4313      	orrs	r3, r2
 8104e24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104e2e:	2b00      	cmp	r3, #0
 8104e30:	d009      	beq.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104e32:	4b0a      	ldr	r3, [pc, #40]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104e40:	4906      	ldr	r1, [pc, #24]	; (8104e5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104e42:	4313      	orrs	r3, r2
 8104e44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104e46:	7dbb      	ldrb	r3, [r7, #22]
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d101      	bne.n	8104e50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104e4c:	2300      	movs	r3, #0
 8104e4e:	e000      	b.n	8104e52 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8104e50:	2301      	movs	r3, #1
}
 8104e52:	4618      	mov	r0, r3
 8104e54:	3718      	adds	r7, #24
 8104e56:	46bd      	mov	sp, r7
 8104e58:	bd80      	pop	{r7, pc}
 8104e5a:	bf00      	nop
 8104e5c:	58024400 	.word	0x58024400

08104e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8104e60:	b580      	push	{r7, lr}
 8104e62:	b090      	sub	sp, #64	; 0x40
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e6e:	f040 8095 	bne.w	8104f9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8104e72:	4b97      	ldr	r3, [pc, #604]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e76:	f003 0307 	and.w	r3, r3, #7
 8104e7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104e7e:	2b04      	cmp	r3, #4
 8104e80:	f200 8088 	bhi.w	8104f94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8104e84:	a201      	add	r2, pc, #4	; (adr r2, 8104e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8104e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e8a:	bf00      	nop
 8104e8c:	08104ea1 	.word	0x08104ea1
 8104e90:	08104ec9 	.word	0x08104ec9
 8104e94:	08104ef1 	.word	0x08104ef1
 8104e98:	08104f8d 	.word	0x08104f8d
 8104e9c:	08104f19 	.word	0x08104f19
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ea0:	4b8b      	ldr	r3, [pc, #556]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104eac:	d108      	bne.n	8104ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104eb2:	4618      	mov	r0, r3
 8104eb4:	f000 ff64 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8104eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104eba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104ebc:	f000 bc94 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104ec0:	2300      	movs	r3, #0
 8104ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ec4:	f000 bc90 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ec8:	4b81      	ldr	r3, [pc, #516]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104ed4:	d108      	bne.n	8104ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ed6:	f107 0318 	add.w	r3, r7, #24
 8104eda:	4618      	mov	r0, r3
 8104edc:	f000 fca8 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104ee0:	69bb      	ldr	r3, [r7, #24]
 8104ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104ee4:	f000 bc80 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104ee8:	2300      	movs	r3, #0
 8104eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104eec:	f000 bc7c 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104ef0:	4b77      	ldr	r3, [pc, #476]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104efc:	d108      	bne.n	8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104efe:	f107 030c 	add.w	r3, r7, #12
 8104f02:	4618      	mov	r0, r3
 8104f04:	f000 fde8 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104f0c:	f000 bc6c 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104f10:	2300      	movs	r3, #0
 8104f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f14:	f000 bc68 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104f18:	4b6d      	ldr	r3, [pc, #436]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104f20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104f22:	4b6b      	ldr	r3, [pc, #428]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	f003 0304 	and.w	r3, r3, #4
 8104f2a:	2b04      	cmp	r3, #4
 8104f2c:	d10c      	bne.n	8104f48 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8104f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f30:	2b00      	cmp	r3, #0
 8104f32:	d109      	bne.n	8104f48 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104f34:	4b66      	ldr	r3, [pc, #408]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	08db      	lsrs	r3, r3, #3
 8104f3a:	f003 0303 	and.w	r3, r3, #3
 8104f3e:	4a65      	ldr	r2, [pc, #404]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8104f40:	fa22 f303 	lsr.w	r3, r2, r3
 8104f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f46:	e01f      	b.n	8104f88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104f48:	4b61      	ldr	r3, [pc, #388]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f54:	d106      	bne.n	8104f64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8104f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f5c:	d102      	bne.n	8104f64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104f5e:	4b5e      	ldr	r3, [pc, #376]	; (81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8104f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f62:	e011      	b.n	8104f88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104f64:	4b5a      	ldr	r3, [pc, #360]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f70:	d106      	bne.n	8104f80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8104f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f78:	d102      	bne.n	8104f80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104f7a:	4b58      	ldr	r3, [pc, #352]	; (81050dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8104f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f7e:	e003      	b.n	8104f88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104f80:	2300      	movs	r3, #0
 8104f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104f84:	f000 bc30 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104f88:	f000 bc2e 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104f8c:	4b54      	ldr	r3, [pc, #336]	; (81050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8104f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f90:	f000 bc2a 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8104f94:	2300      	movs	r3, #0
 8104f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f98:	f000 bc26 	b.w	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104fa2:	f040 809f 	bne.w	81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8104fa6:	4b4a      	ldr	r3, [pc, #296]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104faa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104fae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fb6:	d04d      	beq.n	8105054 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8104fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fbe:	f200 8084 	bhi.w	81050ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fc4:	2bc0      	cmp	r3, #192	; 0xc0
 8104fc6:	d07d      	beq.n	81050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8104fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fca:	2bc0      	cmp	r3, #192	; 0xc0
 8104fcc:	d87d      	bhi.n	81050ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fd0:	2b80      	cmp	r3, #128	; 0x80
 8104fd2:	d02d      	beq.n	8105030 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8104fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fd6:	2b80      	cmp	r3, #128	; 0x80
 8104fd8:	d877      	bhi.n	81050ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fdc:	2b00      	cmp	r3, #0
 8104fde:	d003      	beq.n	8104fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8104fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fe2:	2b40      	cmp	r3, #64	; 0x40
 8104fe4:	d012      	beq.n	810500c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8104fe6:	e070      	b.n	81050ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104fe8:	4b39      	ldr	r3, [pc, #228]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104ff4:	d107      	bne.n	8105006 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104ffa:	4618      	mov	r0, r3
 8104ffc:	f000 fec0 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105004:	e3f0      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105006:	2300      	movs	r3, #0
 8105008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810500a:	e3ed      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810500c:	4b30      	ldr	r3, [pc, #192]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105018:	d107      	bne.n	810502a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810501a:	f107 0318 	add.w	r3, r7, #24
 810501e:	4618      	mov	r0, r3
 8105020:	f000 fc06 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105024:	69bb      	ldr	r3, [r7, #24]
 8105026:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105028:	e3de      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810502a:	2300      	movs	r3, #0
 810502c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810502e:	e3db      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105030:	4b27      	ldr	r3, [pc, #156]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105032:	681b      	ldr	r3, [r3, #0]
 8105034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810503c:	d107      	bne.n	810504e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810503e:	f107 030c 	add.w	r3, r7, #12
 8105042:	4618      	mov	r0, r3
 8105044:	f000 fd48 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105048:	68fb      	ldr	r3, [r7, #12]
 810504a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810504c:	e3cc      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810504e:	2300      	movs	r3, #0
 8105050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105052:	e3c9      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105054:	4b1e      	ldr	r3, [pc, #120]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810505c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810505e:	4b1c      	ldr	r3, [pc, #112]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105060:	681b      	ldr	r3, [r3, #0]
 8105062:	f003 0304 	and.w	r3, r3, #4
 8105066:	2b04      	cmp	r3, #4
 8105068:	d10c      	bne.n	8105084 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810506c:	2b00      	cmp	r3, #0
 810506e:	d109      	bne.n	8105084 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105070:	4b17      	ldr	r3, [pc, #92]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	08db      	lsrs	r3, r3, #3
 8105076:	f003 0303 	and.w	r3, r3, #3
 810507a:	4a16      	ldr	r2, [pc, #88]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 810507c:	fa22 f303 	lsr.w	r3, r2, r3
 8105080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105082:	e01e      	b.n	81050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105084:	4b12      	ldr	r3, [pc, #72]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810508c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105090:	d106      	bne.n	81050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8105092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105098:	d102      	bne.n	81050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810509a:	4b0f      	ldr	r3, [pc, #60]	; (81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 810509c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810509e:	e010      	b.n	81050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81050a0:	4b0b      	ldr	r3, [pc, #44]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81050a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81050ac:	d106      	bne.n	81050bc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 81050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050b4:	d102      	bne.n	81050bc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81050b6:	4b09      	ldr	r3, [pc, #36]	; (81050dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 81050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81050ba:	e002      	b.n	81050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81050bc:	2300      	movs	r3, #0
 81050be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81050c0:	e392      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81050c2:	e391      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81050c4:	4b06      	ldr	r3, [pc, #24]	; (81050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 81050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050c8:	e38e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81050ca:	2300      	movs	r3, #0
 81050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050ce:	e38b      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81050d0:	58024400 	.word	0x58024400
 81050d4:	03d09000 	.word	0x03d09000
 81050d8:	003d0900 	.word	0x003d0900
 81050dc:	007a1200 	.word	0x007a1200
 81050e0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81050ea:	f040 809c 	bne.w	8105226 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 81050ee:	4b9d      	ldr	r3, [pc, #628]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81050f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81050f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81050fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81050fe:	d054      	beq.n	81051aa <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8105100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105106:	f200 808b 	bhi.w	8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810510c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105110:	f000 8083 	beq.w	810521a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8105114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105116:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810511a:	f200 8081 	bhi.w	8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105124:	d02f      	beq.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8105126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810512c:	d878      	bhi.n	8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 810512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105130:	2b00      	cmp	r3, #0
 8105132:	d004      	beq.n	810513e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8105134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810513a:	d012      	beq.n	8105162 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 810513c:	e070      	b.n	8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810513e:	4b89      	ldr	r3, [pc, #548]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810514a:	d107      	bne.n	810515c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810514c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105150:	4618      	mov	r0, r3
 8105152:	f000 fe15 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105158:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810515a:	e345      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810515c:	2300      	movs	r3, #0
 810515e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105160:	e342      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105162:	4b80      	ldr	r3, [pc, #512]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810516a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810516e:	d107      	bne.n	8105180 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105170:	f107 0318 	add.w	r3, r7, #24
 8105174:	4618      	mov	r0, r3
 8105176:	f000 fb5b 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810517a:	69bb      	ldr	r3, [r7, #24]
 810517c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810517e:	e333      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105180:	2300      	movs	r3, #0
 8105182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105184:	e330      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105186:	4b77      	ldr	r3, [pc, #476]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810518e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105192:	d107      	bne.n	81051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105194:	f107 030c 	add.w	r3, r7, #12
 8105198:	4618      	mov	r0, r3
 810519a:	f000 fc9d 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810519e:	68fb      	ldr	r3, [r7, #12]
 81051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81051a2:	e321      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81051a4:	2300      	movs	r3, #0
 81051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051a8:	e31e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81051aa:	4b6e      	ldr	r3, [pc, #440]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81051b2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81051b4:	4b6b      	ldr	r3, [pc, #428]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	f003 0304 	and.w	r3, r3, #4
 81051bc:	2b04      	cmp	r3, #4
 81051be:	d10c      	bne.n	81051da <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 81051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d109      	bne.n	81051da <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81051c6:	4b67      	ldr	r3, [pc, #412]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051c8:	681b      	ldr	r3, [r3, #0]
 81051ca:	08db      	lsrs	r3, r3, #3
 81051cc:	f003 0303 	and.w	r3, r3, #3
 81051d0:	4a65      	ldr	r2, [pc, #404]	; (8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 81051d2:	fa22 f303 	lsr.w	r3, r2, r3
 81051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81051d8:	e01e      	b.n	8105218 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81051da:	4b62      	ldr	r3, [pc, #392]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81051e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81051e6:	d106      	bne.n	81051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 81051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81051ee:	d102      	bne.n	81051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81051f0:	4b5e      	ldr	r3, [pc, #376]	; (810536c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 81051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81051f4:	e010      	b.n	8105218 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81051f6:	4b5b      	ldr	r3, [pc, #364]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81051fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105202:	d106      	bne.n	8105212 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8105204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810520a:	d102      	bne.n	8105212 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810520c:	4b58      	ldr	r3, [pc, #352]	; (8105370 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 810520e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105210:	e002      	b.n	8105218 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105212:	2300      	movs	r3, #0
 8105214:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105216:	e2e7      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105218:	e2e6      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810521a:	4b56      	ldr	r3, [pc, #344]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 810521c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810521e:	e2e3      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8105220:	2300      	movs	r3, #0
 8105222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105224:	e2e0      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810522c:	f040 80a7 	bne.w	810537e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8105230:	4b4c      	ldr	r3, [pc, #304]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105234:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8105238:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810523c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105240:	d055      	beq.n	81052ee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8105242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105248:	f200 8096 	bhi.w	8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 810524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810524e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105252:	f000 8084 	beq.w	810535e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8105256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810525c:	f200 808c 	bhi.w	8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105266:	d030      	beq.n	81052ca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8105268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810526a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810526e:	f200 8083 	bhi.w	8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105274:	2b00      	cmp	r3, #0
 8105276:	d004      	beq.n	8105282 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8105278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810527a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810527e:	d012      	beq.n	81052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8105280:	e07a      	b.n	8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105282:	4b38      	ldr	r3, [pc, #224]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810528a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810528e:	d107      	bne.n	81052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105294:	4618      	mov	r0, r3
 8105296:	f000 fd73 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810529c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810529e:	e2a3      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81052a0:	2300      	movs	r3, #0
 81052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81052a4:	e2a0      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052a6:	4b2f      	ldr	r3, [pc, #188]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81052a8:	681b      	ldr	r3, [r3, #0]
 81052aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81052b2:	d107      	bne.n	81052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052b4:	f107 0318 	add.w	r3, r7, #24
 81052b8:	4618      	mov	r0, r3
 81052ba:	f000 fab9 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81052be:	69bb      	ldr	r3, [r7, #24]
 81052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 81052c2:	e291      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81052c4:	2300      	movs	r3, #0
 81052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81052c8:	e28e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81052ca:	4b26      	ldr	r3, [pc, #152]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052d6:	d107      	bne.n	81052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052d8:	f107 030c 	add.w	r3, r7, #12
 81052dc:	4618      	mov	r0, r3
 81052de:	f000 fbfb 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81052e2:	68fb      	ldr	r3, [r7, #12]
 81052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81052e6:	e27f      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81052e8:	2300      	movs	r3, #0
 81052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81052ec:	e27c      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81052ee:	4b1d      	ldr	r3, [pc, #116]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81052f6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81052f8:	4b1a      	ldr	r3, [pc, #104]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	f003 0304 	and.w	r3, r3, #4
 8105300:	2b04      	cmp	r3, #4
 8105302:	d10c      	bne.n	810531e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8105304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105306:	2b00      	cmp	r3, #0
 8105308:	d109      	bne.n	810531e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810530a:	4b16      	ldr	r3, [pc, #88]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810530c:	681b      	ldr	r3, [r3, #0]
 810530e:	08db      	lsrs	r3, r3, #3
 8105310:	f003 0303 	and.w	r3, r3, #3
 8105314:	4a14      	ldr	r2, [pc, #80]	; (8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8105316:	fa22 f303 	lsr.w	r3, r2, r3
 810531a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810531c:	e01e      	b.n	810535c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810531e:	4b11      	ldr	r3, [pc, #68]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810532a:	d106      	bne.n	810533a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810532e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105332:	d102      	bne.n	810533a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105334:	4b0d      	ldr	r3, [pc, #52]	; (810536c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8105336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105338:	e010      	b.n	810535c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810533a:	4b0a      	ldr	r3, [pc, #40]	; (8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810533c:	681b      	ldr	r3, [r3, #0]
 810533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105346:	d106      	bne.n	8105356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8105348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810534a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810534e:	d102      	bne.n	8105356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105350:	4b07      	ldr	r3, [pc, #28]	; (8105370 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8105352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105354:	e002      	b.n	810535c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105356:	2300      	movs	r3, #0
 8105358:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810535a:	e245      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810535c:	e244      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810535e:	4b05      	ldr	r3, [pc, #20]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8105360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105362:	e241      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105364:	58024400 	.word	0x58024400
 8105368:	03d09000 	.word	0x03d09000
 810536c:	003d0900 	.word	0x003d0900
 8105370:	007a1200 	.word	0x007a1200
 8105374:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8105378:	2300      	movs	r3, #0
 810537a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810537c:	e234      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105384:	f040 809c 	bne.w	81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8105388:	4b9b      	ldr	r3, [pc, #620]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810538c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8105390:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105398:	d054      	beq.n	8105444 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 810539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810539c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053a0:	f200 808b 	bhi.w	81054ba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81053aa:	f000 8083 	beq.w	81054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 81053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81053b4:	f200 8081 	bhi.w	81054ba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053be:	d02f      	beq.n	8105420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 81053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053c6:	d878      	bhi.n	81054ba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053ca:	2b00      	cmp	r3, #0
 81053cc:	d004      	beq.n	81053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 81053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81053d4:	d012      	beq.n	81053fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 81053d6:	e070      	b.n	81054ba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81053d8:	4b87      	ldr	r3, [pc, #540]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81053e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053e4:	d107      	bne.n	81053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81053e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81053ea:	4618      	mov	r0, r3
 81053ec:	f000 fcc8 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81053f4:	e1f8      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81053f6:	2300      	movs	r3, #0
 81053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81053fa:	e1f5      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81053fc:	4b7e      	ldr	r3, [pc, #504]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105408:	d107      	bne.n	810541a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810540a:	f107 0318 	add.w	r3, r7, #24
 810540e:	4618      	mov	r0, r3
 8105410:	f000 fa0e 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105414:	69bb      	ldr	r3, [r7, #24]
 8105416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105418:	e1e6      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810541a:	2300      	movs	r3, #0
 810541c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810541e:	e1e3      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105420:	4b75      	ldr	r3, [pc, #468]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105422:	681b      	ldr	r3, [r3, #0]
 8105424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810542c:	d107      	bne.n	810543e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810542e:	f107 030c 	add.w	r3, r7, #12
 8105432:	4618      	mov	r0, r3
 8105434:	f000 fb50 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810543c:	e1d4      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810543e:	2300      	movs	r3, #0
 8105440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105442:	e1d1      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105444:	4b6c      	ldr	r3, [pc, #432]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810544c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810544e:	4b6a      	ldr	r3, [pc, #424]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	f003 0304 	and.w	r3, r3, #4
 8105456:	2b04      	cmp	r3, #4
 8105458:	d10c      	bne.n	8105474 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810545c:	2b00      	cmp	r3, #0
 810545e:	d109      	bne.n	8105474 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105460:	4b65      	ldr	r3, [pc, #404]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	08db      	lsrs	r3, r3, #3
 8105466:	f003 0303 	and.w	r3, r3, #3
 810546a:	4a64      	ldr	r2, [pc, #400]	; (81055fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 810546c:	fa22 f303 	lsr.w	r3, r2, r3
 8105470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105472:	e01e      	b.n	81054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105474:	4b60      	ldr	r3, [pc, #384]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105476:	681b      	ldr	r3, [r3, #0]
 8105478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105480:	d106      	bne.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8105482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105488:	d102      	bne.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810548a:	4b5d      	ldr	r3, [pc, #372]	; (8105600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 810548c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810548e:	e010      	b.n	81054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105490:	4b59      	ldr	r3, [pc, #356]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810549c:	d106      	bne.n	81054ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 810549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81054a4:	d102      	bne.n	81054ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81054a6:	4b57      	ldr	r3, [pc, #348]	; (8105604 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81054aa:	e002      	b.n	81054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81054ac:	2300      	movs	r3, #0
 81054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81054b0:	e19a      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81054b2:	e199      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81054b4:	4b54      	ldr	r3, [pc, #336]	; (8105608 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81054b8:	e196      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81054ba:	2300      	movs	r3, #0
 81054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81054be:	e193      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81054c6:	d173      	bne.n	81055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81054c8:	4b4b      	ldr	r3, [pc, #300]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81054cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81054d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054d8:	d02f      	beq.n	810553a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 81054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054e0:	d863      	bhi.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 81054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054e4:	2b00      	cmp	r3, #0
 81054e6:	d004      	beq.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 81054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054ee:	d012      	beq.n	8105516 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 81054f0:	e05b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81054f2:	4b41      	ldr	r3, [pc, #260]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81054fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81054fe:	d107      	bne.n	8105510 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105500:	f107 0318 	add.w	r3, r7, #24
 8105504:	4618      	mov	r0, r3
 8105506:	f000 f993 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810550a:	69bb      	ldr	r3, [r7, #24]
 810550c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810550e:	e16b      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105510:	2300      	movs	r3, #0
 8105512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105514:	e168      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105516:	4b38      	ldr	r3, [pc, #224]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810551e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105522:	d107      	bne.n	8105534 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105524:	f107 030c 	add.w	r3, r7, #12
 8105528:	4618      	mov	r0, r3
 810552a:	f000 fad5 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810552e:	697b      	ldr	r3, [r7, #20]
 8105530:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105532:	e159      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105534:	2300      	movs	r3, #0
 8105536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105538:	e156      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810553a:	4b2f      	ldr	r3, [pc, #188]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810553e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105542:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105544:	4b2c      	ldr	r3, [pc, #176]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	f003 0304 	and.w	r3, r3, #4
 810554c:	2b04      	cmp	r3, #4
 810554e:	d10c      	bne.n	810556a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8105550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105552:	2b00      	cmp	r3, #0
 8105554:	d109      	bne.n	810556a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105556:	4b28      	ldr	r3, [pc, #160]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	08db      	lsrs	r3, r3, #3
 810555c:	f003 0303 	and.w	r3, r3, #3
 8105560:	4a26      	ldr	r2, [pc, #152]	; (81055fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8105562:	fa22 f303 	lsr.w	r3, r2, r3
 8105566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105568:	e01e      	b.n	81055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810556a:	4b23      	ldr	r3, [pc, #140]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105576:	d106      	bne.n	8105586 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8105578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810557a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810557e:	d102      	bne.n	8105586 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105580:	4b1f      	ldr	r3, [pc, #124]	; (8105600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8105582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105584:	e010      	b.n	81055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105586:	4b1c      	ldr	r3, [pc, #112]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810558e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105592:	d106      	bne.n	81055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8105594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810559a:	d102      	bne.n	81055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810559c:	4b19      	ldr	r3, [pc, #100]	; (8105604 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 810559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 81055a0:	e002      	b.n	81055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81055a2:	2300      	movs	r3, #0
 81055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81055a6:	e11f      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81055a8:	e11e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 81055aa:	2300      	movs	r3, #0
 81055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81055ae:	e11b      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055b6:	d13e      	bne.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81055b8:	4b0f      	ldr	r3, [pc, #60]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81055bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81055c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055c4:	2b00      	cmp	r3, #0
 81055c6:	d004      	beq.n	81055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 81055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055ce:	d01d      	beq.n	810560c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 81055d0:	e02e      	b.n	8105630 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81055d2:	4b09      	ldr	r3, [pc, #36]	; (81055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81055da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81055de:	d107      	bne.n	81055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81055e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81055e4:	4618      	mov	r0, r3
 81055e6:	f000 fbcb 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81055ee:	e0fb      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81055f0:	2300      	movs	r3, #0
 81055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81055f4:	e0f8      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81055f6:	bf00      	nop
 81055f8:	58024400 	.word	0x58024400
 81055fc:	03d09000 	.word	0x03d09000
 8105600:	003d0900 	.word	0x003d0900
 8105604:	007a1200 	.word	0x007a1200
 8105608:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810560c:	4b79      	ldr	r3, [pc, #484]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105618:	d107      	bne.n	810562a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810561a:	f107 0318 	add.w	r3, r7, #24
 810561e:	4618      	mov	r0, r3
 8105620:	f000 f906 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105624:	6a3b      	ldr	r3, [r7, #32]
 8105626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105628:	e0de      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810562a:	2300      	movs	r3, #0
 810562c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810562e:	e0db      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8105630:	2300      	movs	r3, #0
 8105632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105634:	e0d8      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810563c:	f040 8085 	bne.w	810574a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8105640:	4b6c      	ldr	r3, [pc, #432]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105644:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8105648:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810564c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105650:	d06b      	beq.n	810572a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8105652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105658:	d874      	bhi.n	8105744 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810565c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105660:	d056      	beq.n	8105710 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8105662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105668:	d86c      	bhi.n	8105744 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810566c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105670:	d03b      	beq.n	81056ea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8105672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105674:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105678:	d864      	bhi.n	8105744 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105680:	d021      	beq.n	81056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8105682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105688:	d85c      	bhi.n	8105744 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810568c:	2b00      	cmp	r3, #0
 810568e:	d004      	beq.n	810569a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8105690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105696:	d004      	beq.n	81056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8105698:	e054      	b.n	8105744 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810569a:	f000 f8b3 	bl	8105804 <HAL_RCCEx_GetD3PCLK1Freq>
 810569e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 81056a0:	e0a2      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81056a2:	4b54      	ldr	r3, [pc, #336]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81056a4:	681b      	ldr	r3, [r3, #0]
 81056a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81056aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81056ae:	d107      	bne.n	81056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81056b0:	f107 0318 	add.w	r3, r7, #24
 81056b4:	4618      	mov	r0, r3
 81056b6:	f000 f8bb 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81056ba:	69fb      	ldr	r3, [r7, #28]
 81056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81056be:	e093      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81056c0:	2300      	movs	r3, #0
 81056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81056c4:	e090      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81056c6:	4b4b      	ldr	r3, [pc, #300]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81056ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81056d2:	d107      	bne.n	81056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81056d4:	f107 030c 	add.w	r3, r7, #12
 81056d8:	4618      	mov	r0, r3
 81056da:	f000 f9fd 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81056de:	693b      	ldr	r3, [r7, #16]
 81056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81056e2:	e081      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81056e4:	2300      	movs	r3, #0
 81056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81056e8:	e07e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81056ea:	4b42      	ldr	r3, [pc, #264]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	f003 0304 	and.w	r3, r3, #4
 81056f2:	2b04      	cmp	r3, #4
 81056f4:	d109      	bne.n	810570a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81056f6:	4b3f      	ldr	r3, [pc, #252]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81056f8:	681b      	ldr	r3, [r3, #0]
 81056fa:	08db      	lsrs	r3, r3, #3
 81056fc:	f003 0303 	and.w	r3, r3, #3
 8105700:	4a3d      	ldr	r2, [pc, #244]	; (81057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8105702:	fa22 f303 	lsr.w	r3, r2, r3
 8105706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105708:	e06e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810570a:	2300      	movs	r3, #0
 810570c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810570e:	e06b      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105710:	4b38      	ldr	r3, [pc, #224]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105712:	681b      	ldr	r3, [r3, #0]
 8105714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810571c:	d102      	bne.n	8105724 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 810571e:	4b37      	ldr	r3, [pc, #220]	; (81057fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8105720:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105722:	e061      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105724:	2300      	movs	r3, #0
 8105726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105728:	e05e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810572a:	4b32      	ldr	r3, [pc, #200]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810572c:	681b      	ldr	r3, [r3, #0]
 810572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105736:	d102      	bne.n	810573e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8105738:	4b31      	ldr	r3, [pc, #196]	; (8105800 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810573a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810573c:	e054      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810573e:	2300      	movs	r3, #0
 8105740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105742:	e051      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8105744:	2300      	movs	r3, #0
 8105746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105748:	e04e      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105750:	d148      	bne.n	81057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8105752:	4b28      	ldr	r3, [pc, #160]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810575a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810575e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105762:	d02a      	beq.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8105764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810576a:	d838      	bhi.n	81057de <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 810576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810576e:	2b00      	cmp	r3, #0
 8105770:	d004      	beq.n	810577c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8105772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105778:	d00d      	beq.n	8105796 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 810577a:	e030      	b.n	81057de <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810577c:	4b1d      	ldr	r3, [pc, #116]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810577e:	681b      	ldr	r3, [r3, #0]
 8105780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105788:	d102      	bne.n	8105790 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 810578a:	4b1d      	ldr	r3, [pc, #116]	; (8105800 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810578c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810578e:	e02b      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8105790:	2300      	movs	r3, #0
 8105792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105794:	e028      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105796:	4b17      	ldr	r3, [pc, #92]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810579e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81057a2:	d107      	bne.n	81057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81057a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81057a8:	4618      	mov	r0, r3
 81057aa:	f000 fae9 	bl	8105d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81057b2:	e019      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81057b4:	2300      	movs	r3, #0
 81057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057b8:	e016      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81057ba:	4b0e      	ldr	r3, [pc, #56]	; (81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81057c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81057c6:	d107      	bne.n	81057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81057c8:	f107 0318 	add.w	r3, r7, #24
 81057cc:	4618      	mov	r0, r3
 81057ce:	f000 f82f 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81057d2:	69fb      	ldr	r3, [r7, #28]
 81057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81057d6:	e007      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81057d8:	2300      	movs	r3, #0
 81057da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057dc:	e004      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81057de:	2300      	movs	r3, #0
 81057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81057e2:	e001      	b.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 81057e4:	2300      	movs	r3, #0
 81057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81057ea:	4618      	mov	r0, r3
 81057ec:	3740      	adds	r7, #64	; 0x40
 81057ee:	46bd      	mov	sp, r7
 81057f0:	bd80      	pop	{r7, pc}
 81057f2:	bf00      	nop
 81057f4:	58024400 	.word	0x58024400
 81057f8:	03d09000 	.word	0x03d09000
 81057fc:	003d0900 	.word	0x003d0900
 8105800:	007a1200 	.word	0x007a1200

08105804 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105804:	b580      	push	{r7, lr}
 8105806:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105808:	f7fe fb86 	bl	8103f18 <HAL_RCC_GetHCLKFreq>
 810580c:	4602      	mov	r2, r0
 810580e:	4b06      	ldr	r3, [pc, #24]	; (8105828 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105810:	6a1b      	ldr	r3, [r3, #32]
 8105812:	091b      	lsrs	r3, r3, #4
 8105814:	f003 0307 	and.w	r3, r3, #7
 8105818:	4904      	ldr	r1, [pc, #16]	; (810582c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810581a:	5ccb      	ldrb	r3, [r1, r3]
 810581c:	f003 031f 	and.w	r3, r3, #31
 8105820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105824:	4618      	mov	r0, r3
 8105826:	bd80      	pop	{r7, pc}
 8105828:	58024400 	.word	0x58024400
 810582c:	0810cf6c 	.word	0x0810cf6c

08105830 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105830:	b480      	push	{r7}
 8105832:	b089      	sub	sp, #36	; 0x24
 8105834:	af00      	add	r7, sp, #0
 8105836:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105838:	4ba1      	ldr	r3, [pc, #644]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810583c:	f003 0303 	and.w	r3, r3, #3
 8105840:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105842:	4b9f      	ldr	r3, [pc, #636]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105846:	0b1b      	lsrs	r3, r3, #12
 8105848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810584c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810584e:	4b9c      	ldr	r3, [pc, #624]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105852:	091b      	lsrs	r3, r3, #4
 8105854:	f003 0301 	and.w	r3, r3, #1
 8105858:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810585a:	4b99      	ldr	r3, [pc, #612]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810585e:	08db      	lsrs	r3, r3, #3
 8105860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105864:	693a      	ldr	r2, [r7, #16]
 8105866:	fb02 f303 	mul.w	r3, r2, r3
 810586a:	ee07 3a90 	vmov	s15, r3
 810586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105872:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105876:	697b      	ldr	r3, [r7, #20]
 8105878:	2b00      	cmp	r3, #0
 810587a:	f000 8111 	beq.w	8105aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810587e:	69bb      	ldr	r3, [r7, #24]
 8105880:	2b02      	cmp	r3, #2
 8105882:	f000 8083 	beq.w	810598c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105886:	69bb      	ldr	r3, [r7, #24]
 8105888:	2b02      	cmp	r3, #2
 810588a:	f200 80a1 	bhi.w	81059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810588e:	69bb      	ldr	r3, [r7, #24]
 8105890:	2b00      	cmp	r3, #0
 8105892:	d003      	beq.n	810589c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105894:	69bb      	ldr	r3, [r7, #24]
 8105896:	2b01      	cmp	r3, #1
 8105898:	d056      	beq.n	8105948 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810589a:	e099      	b.n	81059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810589c:	4b88      	ldr	r3, [pc, #544]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	f003 0320 	and.w	r3, r3, #32
 81058a4:	2b00      	cmp	r3, #0
 81058a6:	d02d      	beq.n	8105904 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81058a8:	4b85      	ldr	r3, [pc, #532]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	08db      	lsrs	r3, r3, #3
 81058ae:	f003 0303 	and.w	r3, r3, #3
 81058b2:	4a84      	ldr	r2, [pc, #528]	; (8105ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81058b4:	fa22 f303 	lsr.w	r3, r2, r3
 81058b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81058ba:	68bb      	ldr	r3, [r7, #8]
 81058bc:	ee07 3a90 	vmov	s15, r3
 81058c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058c4:	697b      	ldr	r3, [r7, #20]
 81058c6:	ee07 3a90 	vmov	s15, r3
 81058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058d2:	4b7b      	ldr	r3, [pc, #492]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058da:	ee07 3a90 	vmov	s15, r3
 81058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81058e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105902:	e087      	b.n	8105a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105904:	697b      	ldr	r3, [r7, #20]
 8105906:	ee07 3a90 	vmov	s15, r3
 810590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810590e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105acc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105916:	4b6a      	ldr	r3, [pc, #424]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810591e:	ee07 3a90 	vmov	s15, r3
 8105922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105926:	ed97 6a03 	vldr	s12, [r7, #12]
 810592a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105946:	e065      	b.n	8105a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105948:	697b      	ldr	r3, [r7, #20]
 810594a:	ee07 3a90 	vmov	s15, r3
 810594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105952:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810595a:	4b59      	ldr	r3, [pc, #356]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105962:	ee07 3a90 	vmov	s15, r3
 8105966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810596a:	ed97 6a03 	vldr	s12, [r7, #12]
 810596e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810597a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810597e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810598a:	e043      	b.n	8105a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810598c:	697b      	ldr	r3, [r7, #20]
 810598e:	ee07 3a90 	vmov	s15, r3
 8105992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105996:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810599a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810599e:	4b48      	ldr	r3, [pc, #288]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059a6:	ee07 3a90 	vmov	s15, r3
 81059aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81059b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81059b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81059ce:	e021      	b.n	8105a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81059d0:	697b      	ldr	r3, [r7, #20]
 81059d2:	ee07 3a90 	vmov	s15, r3
 81059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059e2:	4b37      	ldr	r3, [pc, #220]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059ea:	ee07 3a90 	vmov	s15, r3
 81059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81059f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105a12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105a14:	4b2a      	ldr	r3, [pc, #168]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a18:	0a5b      	lsrs	r3, r3, #9
 8105a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a1e:	ee07 3a90 	vmov	s15, r3
 8105a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a3a:	ee17 2a90 	vmov	r2, s15
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105a42:	4b1f      	ldr	r3, [pc, #124]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a46:	0c1b      	lsrs	r3, r3, #16
 8105a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a4c:	ee07 3a90 	vmov	s15, r3
 8105a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a68:	ee17 2a90 	vmov	r2, s15
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105a70:	4b13      	ldr	r3, [pc, #76]	; (8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a74:	0e1b      	lsrs	r3, r3, #24
 8105a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a7a:	ee07 3a90 	vmov	s15, r3
 8105a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a96:	ee17 2a90 	vmov	r2, s15
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105a9e:	e008      	b.n	8105ab2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	2200      	movs	r2, #0
 8105aa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	2200      	movs	r2, #0
 8105aaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	2200      	movs	r2, #0
 8105ab0:	609a      	str	r2, [r3, #8]
}
 8105ab2:	bf00      	nop
 8105ab4:	3724      	adds	r7, #36	; 0x24
 8105ab6:	46bd      	mov	sp, r7
 8105ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105abc:	4770      	bx	lr
 8105abe:	bf00      	nop
 8105ac0:	58024400 	.word	0x58024400
 8105ac4:	03d09000 	.word	0x03d09000
 8105ac8:	46000000 	.word	0x46000000
 8105acc:	4c742400 	.word	0x4c742400
 8105ad0:	4a742400 	.word	0x4a742400
 8105ad4:	4af42400 	.word	0x4af42400

08105ad8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105ad8:	b480      	push	{r7}
 8105ada:	b089      	sub	sp, #36	; 0x24
 8105adc:	af00      	add	r7, sp, #0
 8105ade:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105ae0:	4ba1      	ldr	r3, [pc, #644]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ae4:	f003 0303 	and.w	r3, r3, #3
 8105ae8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105aea:	4b9f      	ldr	r3, [pc, #636]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105aee:	0d1b      	lsrs	r3, r3, #20
 8105af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105af4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105af6:	4b9c      	ldr	r3, [pc, #624]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105afa:	0a1b      	lsrs	r3, r3, #8
 8105afc:	f003 0301 	and.w	r3, r3, #1
 8105b00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105b02:	4b99      	ldr	r3, [pc, #612]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b06:	08db      	lsrs	r3, r3, #3
 8105b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105b0c:	693a      	ldr	r2, [r7, #16]
 8105b0e:	fb02 f303 	mul.w	r3, r2, r3
 8105b12:	ee07 3a90 	vmov	s15, r3
 8105b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105b1e:	697b      	ldr	r3, [r7, #20]
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	f000 8111 	beq.w	8105d48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105b26:	69bb      	ldr	r3, [r7, #24]
 8105b28:	2b02      	cmp	r3, #2
 8105b2a:	f000 8083 	beq.w	8105c34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105b2e:	69bb      	ldr	r3, [r7, #24]
 8105b30:	2b02      	cmp	r3, #2
 8105b32:	f200 80a1 	bhi.w	8105c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105b36:	69bb      	ldr	r3, [r7, #24]
 8105b38:	2b00      	cmp	r3, #0
 8105b3a:	d003      	beq.n	8105b44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105b3c:	69bb      	ldr	r3, [r7, #24]
 8105b3e:	2b01      	cmp	r3, #1
 8105b40:	d056      	beq.n	8105bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105b42:	e099      	b.n	8105c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105b44:	4b88      	ldr	r3, [pc, #544]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b46:	681b      	ldr	r3, [r3, #0]
 8105b48:	f003 0320 	and.w	r3, r3, #32
 8105b4c:	2b00      	cmp	r3, #0
 8105b4e:	d02d      	beq.n	8105bac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105b50:	4b85      	ldr	r3, [pc, #532]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b52:	681b      	ldr	r3, [r3, #0]
 8105b54:	08db      	lsrs	r3, r3, #3
 8105b56:	f003 0303 	and.w	r3, r3, #3
 8105b5a:	4a84      	ldr	r2, [pc, #528]	; (8105d6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8105b60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105b62:	68bb      	ldr	r3, [r7, #8]
 8105b64:	ee07 3a90 	vmov	s15, r3
 8105b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b6c:	697b      	ldr	r3, [r7, #20]
 8105b6e:	ee07 3a90 	vmov	s15, r3
 8105b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b7a:	4b7b      	ldr	r3, [pc, #492]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b82:	ee07 3a90 	vmov	s15, r3
 8105b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105baa:	e087      	b.n	8105cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105bac:	697b      	ldr	r3, [r7, #20]
 8105bae:	ee07 3a90 	vmov	s15, r3
 8105bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105d74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bbe:	4b6a      	ldr	r3, [pc, #424]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bc6:	ee07 3a90 	vmov	s15, r3
 8105bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105bee:	e065      	b.n	8105cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105bf0:	697b      	ldr	r3, [r7, #20]
 8105bf2:	ee07 3a90 	vmov	s15, r3
 8105bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bfa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c02:	4b59      	ldr	r3, [pc, #356]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c0a:	ee07 3a90 	vmov	s15, r3
 8105c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c32:	e043      	b.n	8105cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c34:	697b      	ldr	r3, [r7, #20]
 8105c36:	ee07 3a90 	vmov	s15, r3
 8105c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c46:	4b48      	ldr	r3, [pc, #288]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c4e:	ee07 3a90 	vmov	s15, r3
 8105c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c76:	e021      	b.n	8105cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c78:	697b      	ldr	r3, [r7, #20]
 8105c7a:	ee07 3a90 	vmov	s15, r3
 8105c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c8a:	4b37      	ldr	r3, [pc, #220]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c92:	ee07 3a90 	vmov	s15, r3
 8105c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105cba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105cbc:	4b2a      	ldr	r3, [pc, #168]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cc0:	0a5b      	lsrs	r3, r3, #9
 8105cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105cc6:	ee07 3a90 	vmov	s15, r3
 8105cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ce2:	ee17 2a90 	vmov	r2, s15
 8105ce6:	687b      	ldr	r3, [r7, #4]
 8105ce8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105cea:	4b1f      	ldr	r3, [pc, #124]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cee:	0c1b      	lsrs	r3, r3, #16
 8105cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105cf4:	ee07 3a90 	vmov	s15, r3
 8105cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d10:	ee17 2a90 	vmov	r2, s15
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105d18:	4b13      	ldr	r3, [pc, #76]	; (8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d1c:	0e1b      	lsrs	r3, r3, #24
 8105d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105d22:	ee07 3a90 	vmov	s15, r3
 8105d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d3e:	ee17 2a90 	vmov	r2, s15
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105d46:	e008      	b.n	8105d5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	2200      	movs	r2, #0
 8105d4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105d4e:	687b      	ldr	r3, [r7, #4]
 8105d50:	2200      	movs	r2, #0
 8105d52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	2200      	movs	r2, #0
 8105d58:	609a      	str	r2, [r3, #8]
}
 8105d5a:	bf00      	nop
 8105d5c:	3724      	adds	r7, #36	; 0x24
 8105d5e:	46bd      	mov	sp, r7
 8105d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d64:	4770      	bx	lr
 8105d66:	bf00      	nop
 8105d68:	58024400 	.word	0x58024400
 8105d6c:	03d09000 	.word	0x03d09000
 8105d70:	46000000 	.word	0x46000000
 8105d74:	4c742400 	.word	0x4c742400
 8105d78:	4a742400 	.word	0x4a742400
 8105d7c:	4af42400 	.word	0x4af42400

08105d80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8105d80:	b480      	push	{r7}
 8105d82:	b089      	sub	sp, #36	; 0x24
 8105d84:	af00      	add	r7, sp, #0
 8105d86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105d88:	4ba0      	ldr	r3, [pc, #640]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d8c:	f003 0303 	and.w	r3, r3, #3
 8105d90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8105d92:	4b9e      	ldr	r3, [pc, #632]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d96:	091b      	lsrs	r3, r3, #4
 8105d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105d9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105d9e:	4b9b      	ldr	r3, [pc, #620]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105da2:	f003 0301 	and.w	r3, r3, #1
 8105da6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105da8:	4b98      	ldr	r3, [pc, #608]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105dac:	08db      	lsrs	r3, r3, #3
 8105dae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105db2:	693a      	ldr	r2, [r7, #16]
 8105db4:	fb02 f303 	mul.w	r3, r2, r3
 8105db8:	ee07 3a90 	vmov	s15, r3
 8105dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105dc4:	697b      	ldr	r3, [r7, #20]
 8105dc6:	2b00      	cmp	r3, #0
 8105dc8:	f000 8111 	beq.w	8105fee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105dcc:	69bb      	ldr	r3, [r7, #24]
 8105dce:	2b02      	cmp	r3, #2
 8105dd0:	f000 8083 	beq.w	8105eda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105dd4:	69bb      	ldr	r3, [r7, #24]
 8105dd6:	2b02      	cmp	r3, #2
 8105dd8:	f200 80a1 	bhi.w	8105f1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105ddc:	69bb      	ldr	r3, [r7, #24]
 8105dde:	2b00      	cmp	r3, #0
 8105de0:	d003      	beq.n	8105dea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105de2:	69bb      	ldr	r3, [r7, #24]
 8105de4:	2b01      	cmp	r3, #1
 8105de6:	d056      	beq.n	8105e96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105de8:	e099      	b.n	8105f1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105dea:	4b88      	ldr	r3, [pc, #544]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	f003 0320 	and.w	r3, r3, #32
 8105df2:	2b00      	cmp	r3, #0
 8105df4:	d02d      	beq.n	8105e52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105df6:	4b85      	ldr	r3, [pc, #532]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	08db      	lsrs	r3, r3, #3
 8105dfc:	f003 0303 	and.w	r3, r3, #3
 8105e00:	4a83      	ldr	r2, [pc, #524]	; (8106010 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105e02:	fa22 f303 	lsr.w	r3, r2, r3
 8105e06:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e08:	68bb      	ldr	r3, [r7, #8]
 8105e0a:	ee07 3a90 	vmov	s15, r3
 8105e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e12:	697b      	ldr	r3, [r7, #20]
 8105e14:	ee07 3a90 	vmov	s15, r3
 8105e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e20:	4b7a      	ldr	r3, [pc, #488]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e28:	ee07 3a90 	vmov	s15, r3
 8105e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e34:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105e50:	e087      	b.n	8105f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e52:	697b      	ldr	r3, [r7, #20]
 8105e54:	ee07 3a90 	vmov	s15, r3
 8105e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106018 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e64:	4b69      	ldr	r3, [pc, #420]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e6c:	ee07 3a90 	vmov	s15, r3
 8105e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e78:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105e94:	e065      	b.n	8105f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e96:	697b      	ldr	r3, [r7, #20]
 8105e98:	ee07 3a90 	vmov	s15, r3
 8105e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ea0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810601c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ea8:	4b58      	ldr	r3, [pc, #352]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105eb0:	ee07 3a90 	vmov	s15, r3
 8105eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ebc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ed4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105ed8:	e043      	b.n	8105f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105eda:	697b      	ldr	r3, [r7, #20]
 8105edc:	ee07 3a90 	vmov	s15, r3
 8105ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ee4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105eec:	4b47      	ldr	r3, [pc, #284]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ef4:	ee07 3a90 	vmov	s15, r3
 8105ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f00:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105f1c:	e021      	b.n	8105f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f1e:	697b      	ldr	r3, [r7, #20]
 8105f20:	ee07 3a90 	vmov	s15, r3
 8105f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f28:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106018 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f30:	4b36      	ldr	r3, [pc, #216]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f38:	ee07 3a90 	vmov	s15, r3
 8105f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105f60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8105f62:	4b2a      	ldr	r3, [pc, #168]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f66:	0a5b      	lsrs	r3, r3, #9
 8105f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105f6c:	ee07 3a90 	vmov	s15, r3
 8105f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f88:	ee17 2a90 	vmov	r2, s15
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8105f90:	4b1e      	ldr	r3, [pc, #120]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f94:	0c1b      	lsrs	r3, r3, #16
 8105f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105f9a:	ee07 3a90 	vmov	s15, r3
 8105f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8105fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105fb6:	ee17 2a90 	vmov	r2, s15
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8105fbe:	4b13      	ldr	r3, [pc, #76]	; (810600c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105fc2:	0e1b      	lsrs	r3, r3, #24
 8105fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105fc8:	ee07 3a90 	vmov	s15, r3
 8105fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8105fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105fe4:	ee17 2a90 	vmov	r2, s15
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105fec:	e008      	b.n	8106000 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	2200      	movs	r2, #0
 8105ff2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	2200      	movs	r2, #0
 8105ff8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	2200      	movs	r2, #0
 8105ffe:	609a      	str	r2, [r3, #8]
}
 8106000:	bf00      	nop
 8106002:	3724      	adds	r7, #36	; 0x24
 8106004:	46bd      	mov	sp, r7
 8106006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810600a:	4770      	bx	lr
 810600c:	58024400 	.word	0x58024400
 8106010:	03d09000 	.word	0x03d09000
 8106014:	46000000 	.word	0x46000000
 8106018:	4c742400 	.word	0x4c742400
 810601c:	4a742400 	.word	0x4a742400
 8106020:	4af42400 	.word	0x4af42400

08106024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106024:	b580      	push	{r7, lr}
 8106026:	b084      	sub	sp, #16
 8106028:	af00      	add	r7, sp, #0
 810602a:	6078      	str	r0, [r7, #4]
 810602c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810602e:	2300      	movs	r3, #0
 8106030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106032:	4b54      	ldr	r3, [pc, #336]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106036:	f003 0303 	and.w	r3, r3, #3
 810603a:	2b03      	cmp	r3, #3
 810603c:	d101      	bne.n	8106042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810603e:	2301      	movs	r3, #1
 8106040:	e09b      	b.n	810617a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106042:	4b50      	ldr	r3, [pc, #320]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106044:	681b      	ldr	r3, [r3, #0]
 8106046:	4a4f      	ldr	r2, [pc, #316]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810604c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810604e:	f7fb ff15 	bl	8101e7c <HAL_GetTick>
 8106052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106054:	e008      	b.n	8106068 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106056:	f7fb ff11 	bl	8101e7c <HAL_GetTick>
 810605a:	4602      	mov	r2, r0
 810605c:	68bb      	ldr	r3, [r7, #8]
 810605e:	1ad3      	subs	r3, r2, r3
 8106060:	2b02      	cmp	r3, #2
 8106062:	d901      	bls.n	8106068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106064:	2303      	movs	r3, #3
 8106066:	e088      	b.n	810617a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106068:	4b46      	ldr	r3, [pc, #280]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106070:	2b00      	cmp	r3, #0
 8106072:	d1f0      	bne.n	8106056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106074:	4b43      	ldr	r3, [pc, #268]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	031b      	lsls	r3, r3, #12
 8106082:	4940      	ldr	r1, [pc, #256]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106084:	4313      	orrs	r3, r2
 8106086:	628b      	str	r3, [r1, #40]	; 0x28
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	685b      	ldr	r3, [r3, #4]
 810608c:	3b01      	subs	r3, #1
 810608e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	689b      	ldr	r3, [r3, #8]
 8106096:	3b01      	subs	r3, #1
 8106098:	025b      	lsls	r3, r3, #9
 810609a:	b29b      	uxth	r3, r3
 810609c:	431a      	orrs	r2, r3
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	68db      	ldr	r3, [r3, #12]
 81060a2:	3b01      	subs	r3, #1
 81060a4:	041b      	lsls	r3, r3, #16
 81060a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81060aa:	431a      	orrs	r2, r3
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	691b      	ldr	r3, [r3, #16]
 81060b0:	3b01      	subs	r3, #1
 81060b2:	061b      	lsls	r3, r3, #24
 81060b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81060b8:	4932      	ldr	r1, [pc, #200]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060ba:	4313      	orrs	r3, r2
 81060bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81060be:	4b31      	ldr	r3, [pc, #196]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	695b      	ldr	r3, [r3, #20]
 81060ca:	492e      	ldr	r1, [pc, #184]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060cc:	4313      	orrs	r3, r2
 81060ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81060d0:	4b2c      	ldr	r3, [pc, #176]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060d4:	f023 0220 	bic.w	r2, r3, #32
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	699b      	ldr	r3, [r3, #24]
 81060dc:	4929      	ldr	r1, [pc, #164]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060de:	4313      	orrs	r3, r2
 81060e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81060e2:	4b28      	ldr	r3, [pc, #160]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060e6:	4a27      	ldr	r2, [pc, #156]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060e8:	f023 0310 	bic.w	r3, r3, #16
 81060ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81060ee:	4b25      	ldr	r3, [pc, #148]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 81060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81060f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81060fa:	687a      	ldr	r2, [r7, #4]
 81060fc:	69d2      	ldr	r2, [r2, #28]
 81060fe:	00d2      	lsls	r2, r2, #3
 8106100:	4920      	ldr	r1, [pc, #128]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106102:	4313      	orrs	r3, r2
 8106104:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106106:	4b1f      	ldr	r3, [pc, #124]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810610a:	4a1e      	ldr	r2, [pc, #120]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810610c:	f043 0310 	orr.w	r3, r3, #16
 8106110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106112:	683b      	ldr	r3, [r7, #0]
 8106114:	2b00      	cmp	r3, #0
 8106116:	d106      	bne.n	8106126 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106118:	4b1a      	ldr	r3, [pc, #104]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810611c:	4a19      	ldr	r2, [pc, #100]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810611e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106124:	e00f      	b.n	8106146 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106126:	683b      	ldr	r3, [r7, #0]
 8106128:	2b01      	cmp	r3, #1
 810612a:	d106      	bne.n	810613a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810612c:	4b15      	ldr	r3, [pc, #84]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106130:	4a14      	ldr	r2, [pc, #80]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106136:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106138:	e005      	b.n	8106146 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810613a:	4b12      	ldr	r3, [pc, #72]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810613e:	4a11      	ldr	r2, [pc, #68]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106146:	4b0f      	ldr	r3, [pc, #60]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	4a0e      	ldr	r2, [pc, #56]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810614c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106152:	f7fb fe93 	bl	8101e7c <HAL_GetTick>
 8106156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106158:	e008      	b.n	810616c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810615a:	f7fb fe8f 	bl	8101e7c <HAL_GetTick>
 810615e:	4602      	mov	r2, r0
 8106160:	68bb      	ldr	r3, [r7, #8]
 8106162:	1ad3      	subs	r3, r2, r3
 8106164:	2b02      	cmp	r3, #2
 8106166:	d901      	bls.n	810616c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106168:	2303      	movs	r3, #3
 810616a:	e006      	b.n	810617a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810616c:	4b05      	ldr	r3, [pc, #20]	; (8106184 <RCCEx_PLL2_Config+0x160>)
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106174:	2b00      	cmp	r3, #0
 8106176:	d0f0      	beq.n	810615a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106178:	7bfb      	ldrb	r3, [r7, #15]
}
 810617a:	4618      	mov	r0, r3
 810617c:	3710      	adds	r7, #16
 810617e:	46bd      	mov	sp, r7
 8106180:	bd80      	pop	{r7, pc}
 8106182:	bf00      	nop
 8106184:	58024400 	.word	0x58024400

08106188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106188:	b580      	push	{r7, lr}
 810618a:	b084      	sub	sp, #16
 810618c:	af00      	add	r7, sp, #0
 810618e:	6078      	str	r0, [r7, #4]
 8106190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106192:	2300      	movs	r3, #0
 8106194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106196:	4b54      	ldr	r3, [pc, #336]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810619a:	f003 0303 	and.w	r3, r3, #3
 810619e:	2b03      	cmp	r3, #3
 81061a0:	d101      	bne.n	81061a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81061a2:	2301      	movs	r3, #1
 81061a4:	e09b      	b.n	81062de <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81061a6:	4b50      	ldr	r3, [pc, #320]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a4f      	ldr	r2, [pc, #316]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81061ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81061b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81061b2:	f7fb fe63 	bl	8101e7c <HAL_GetTick>
 81061b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81061b8:	e008      	b.n	81061cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81061ba:	f7fb fe5f 	bl	8101e7c <HAL_GetTick>
 81061be:	4602      	mov	r2, r0
 81061c0:	68bb      	ldr	r3, [r7, #8]
 81061c2:	1ad3      	subs	r3, r2, r3
 81061c4:	2b02      	cmp	r3, #2
 81061c6:	d901      	bls.n	81061cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81061c8:	2303      	movs	r3, #3
 81061ca:	e088      	b.n	81062de <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81061cc:	4b46      	ldr	r3, [pc, #280]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81061ce:	681b      	ldr	r3, [r3, #0]
 81061d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81061d4:	2b00      	cmp	r3, #0
 81061d6:	d1f0      	bne.n	81061ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81061d8:	4b43      	ldr	r3, [pc, #268]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	051b      	lsls	r3, r3, #20
 81061e6:	4940      	ldr	r1, [pc, #256]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81061e8:	4313      	orrs	r3, r2
 81061ea:	628b      	str	r3, [r1, #40]	; 0x28
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	685b      	ldr	r3, [r3, #4]
 81061f0:	3b01      	subs	r3, #1
 81061f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	689b      	ldr	r3, [r3, #8]
 81061fa:	3b01      	subs	r3, #1
 81061fc:	025b      	lsls	r3, r3, #9
 81061fe:	b29b      	uxth	r3, r3
 8106200:	431a      	orrs	r2, r3
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	68db      	ldr	r3, [r3, #12]
 8106206:	3b01      	subs	r3, #1
 8106208:	041b      	lsls	r3, r3, #16
 810620a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810620e:	431a      	orrs	r2, r3
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	691b      	ldr	r3, [r3, #16]
 8106214:	3b01      	subs	r3, #1
 8106216:	061b      	lsls	r3, r3, #24
 8106218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810621c:	4932      	ldr	r1, [pc, #200]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 810621e:	4313      	orrs	r3, r2
 8106220:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106222:	4b31      	ldr	r3, [pc, #196]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	695b      	ldr	r3, [r3, #20]
 810622e:	492e      	ldr	r1, [pc, #184]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106230:	4313      	orrs	r3, r2
 8106232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106234:	4b2c      	ldr	r3, [pc, #176]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106238:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	699b      	ldr	r3, [r3, #24]
 8106240:	4929      	ldr	r1, [pc, #164]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106242:	4313      	orrs	r3, r2
 8106244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106246:	4b28      	ldr	r3, [pc, #160]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810624a:	4a27      	ldr	r2, [pc, #156]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 810624c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106252:	4b25      	ldr	r3, [pc, #148]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810625a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810625e:	687a      	ldr	r2, [r7, #4]
 8106260:	69d2      	ldr	r2, [r2, #28]
 8106262:	00d2      	lsls	r2, r2, #3
 8106264:	4920      	ldr	r1, [pc, #128]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106266:	4313      	orrs	r3, r2
 8106268:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810626a:	4b1f      	ldr	r3, [pc, #124]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 810626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810626e:	4a1e      	ldr	r2, [pc, #120]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106276:	683b      	ldr	r3, [r7, #0]
 8106278:	2b00      	cmp	r3, #0
 810627a:	d106      	bne.n	810628a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810627c:	4b1a      	ldr	r3, [pc, #104]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 810627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106280:	4a19      	ldr	r2, [pc, #100]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106288:	e00f      	b.n	81062aa <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810628a:	683b      	ldr	r3, [r7, #0]
 810628c:	2b01      	cmp	r3, #1
 810628e:	d106      	bne.n	810629e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106290:	4b15      	ldr	r3, [pc, #84]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106294:	4a14      	ldr	r2, [pc, #80]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 8106296:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810629a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810629c:	e005      	b.n	81062aa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810629e:	4b12      	ldr	r3, [pc, #72]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062a2:	4a11      	ldr	r2, [pc, #68]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81062a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81062a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81062aa:	4b0f      	ldr	r3, [pc, #60]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81062ac:	681b      	ldr	r3, [r3, #0]
 81062ae:	4a0e      	ldr	r2, [pc, #56]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81062b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81062b6:	f7fb fde1 	bl	8101e7c <HAL_GetTick>
 81062ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81062bc:	e008      	b.n	81062d0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81062be:	f7fb fddd 	bl	8101e7c <HAL_GetTick>
 81062c2:	4602      	mov	r2, r0
 81062c4:	68bb      	ldr	r3, [r7, #8]
 81062c6:	1ad3      	subs	r3, r2, r3
 81062c8:	2b02      	cmp	r3, #2
 81062ca:	d901      	bls.n	81062d0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81062cc:	2303      	movs	r3, #3
 81062ce:	e006      	b.n	81062de <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81062d0:	4b05      	ldr	r3, [pc, #20]	; (81062e8 <RCCEx_PLL3_Config+0x160>)
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81062d8:	2b00      	cmp	r3, #0
 81062da:	d0f0      	beq.n	81062be <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81062de:	4618      	mov	r0, r3
 81062e0:	3710      	adds	r7, #16
 81062e2:	46bd      	mov	sp, r7
 81062e4:	bd80      	pop	{r7, pc}
 81062e6:	bf00      	nop
 81062e8:	58024400 	.word	0x58024400

081062ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81062ec:	b580      	push	{r7, lr}
 81062ee:	b082      	sub	sp, #8
 81062f0:	af00      	add	r7, sp, #0
 81062f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	2b00      	cmp	r3, #0
 81062f8:	d101      	bne.n	81062fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81062fa:	2301      	movs	r3, #1
 81062fc:	e049      	b.n	8106392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106304:	b2db      	uxtb	r3, r3
 8106306:	2b00      	cmp	r3, #0
 8106308:	d106      	bne.n	8106318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	2200      	movs	r2, #0
 810630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106312:	6878      	ldr	r0, [r7, #4]
 8106314:	f7fb fb2c 	bl	8101970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	2202      	movs	r2, #2
 810631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106320:	687b      	ldr	r3, [r7, #4]
 8106322:	681a      	ldr	r2, [r3, #0]
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	3304      	adds	r3, #4
 8106328:	4619      	mov	r1, r3
 810632a:	4610      	mov	r0, r2
 810632c:	f000 faa2 	bl	8106874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	2201      	movs	r2, #1
 8106334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	2201      	movs	r2, #1
 810633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	2201      	movs	r2, #1
 8106344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	2201      	movs	r2, #1
 810634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	2201      	movs	r2, #1
 8106354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	2201      	movs	r2, #1
 810635c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	2201      	movs	r2, #1
 8106364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	2201      	movs	r2, #1
 810636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	2201      	movs	r2, #1
 8106374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	2201      	movs	r2, #1
 810637c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	2201      	movs	r2, #1
 8106384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	2201      	movs	r2, #1
 810638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106390:	2300      	movs	r3, #0
}
 8106392:	4618      	mov	r0, r3
 8106394:	3708      	adds	r7, #8
 8106396:	46bd      	mov	sp, r7
 8106398:	bd80      	pop	{r7, pc}

0810639a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810639a:	b580      	push	{r7, lr}
 810639c:	b082      	sub	sp, #8
 810639e:	af00      	add	r7, sp, #0
 81063a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d101      	bne.n	81063ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81063a8:	2301      	movs	r3, #1
 81063aa:	e049      	b.n	8106440 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81063b2:	b2db      	uxtb	r3, r3
 81063b4:	2b00      	cmp	r3, #0
 81063b6:	d106      	bne.n	81063c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	2200      	movs	r2, #0
 81063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81063c0:	6878      	ldr	r0, [r7, #4]
 81063c2:	f000 f841 	bl	8106448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	2202      	movs	r2, #2
 81063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	681a      	ldr	r2, [r3, #0]
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	3304      	adds	r3, #4
 81063d6:	4619      	mov	r1, r3
 81063d8:	4610      	mov	r0, r2
 81063da:	f000 fa4b 	bl	8106874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	2201      	movs	r2, #1
 81063e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	2201      	movs	r2, #1
 81063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	2201      	movs	r2, #1
 81063f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	2201      	movs	r2, #1
 81063fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	2201      	movs	r2, #1
 8106402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	2201      	movs	r2, #1
 810640a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	2201      	movs	r2, #1
 8106412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	2201      	movs	r2, #1
 810641a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	2201      	movs	r2, #1
 8106422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	2201      	movs	r2, #1
 810642a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	2201      	movs	r2, #1
 8106432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	2201      	movs	r2, #1
 810643a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810643e:	2300      	movs	r3, #0
}
 8106440:	4618      	mov	r0, r3
 8106442:	3708      	adds	r7, #8
 8106444:	46bd      	mov	sp, r7
 8106446:	bd80      	pop	{r7, pc}

08106448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106448:	b480      	push	{r7}
 810644a:	b083      	sub	sp, #12
 810644c:	af00      	add	r7, sp, #0
 810644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106450:	bf00      	nop
 8106452:	370c      	adds	r7, #12
 8106454:	46bd      	mov	sp, r7
 8106456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810645a:	4770      	bx	lr

0810645c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810645c:	b580      	push	{r7, lr}
 810645e:	b086      	sub	sp, #24
 8106460:	af00      	add	r7, sp, #0
 8106462:	60f8      	str	r0, [r7, #12]
 8106464:	60b9      	str	r1, [r7, #8]
 8106466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106468:	2300      	movs	r3, #0
 810646a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810646c:	68fb      	ldr	r3, [r7, #12]
 810646e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106472:	2b01      	cmp	r3, #1
 8106474:	d101      	bne.n	810647a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8106476:	2302      	movs	r3, #2
 8106478:	e0ff      	b.n	810667a <HAL_TIM_PWM_ConfigChannel+0x21e>
 810647a:	68fb      	ldr	r3, [r7, #12]
 810647c:	2201      	movs	r2, #1
 810647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	2b14      	cmp	r3, #20
 8106486:	f200 80f0 	bhi.w	810666a <HAL_TIM_PWM_ConfigChannel+0x20e>
 810648a:	a201      	add	r2, pc, #4	; (adr r2, 8106490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106490:	081064e5 	.word	0x081064e5
 8106494:	0810666b 	.word	0x0810666b
 8106498:	0810666b 	.word	0x0810666b
 810649c:	0810666b 	.word	0x0810666b
 81064a0:	08106525 	.word	0x08106525
 81064a4:	0810666b 	.word	0x0810666b
 81064a8:	0810666b 	.word	0x0810666b
 81064ac:	0810666b 	.word	0x0810666b
 81064b0:	08106567 	.word	0x08106567
 81064b4:	0810666b 	.word	0x0810666b
 81064b8:	0810666b 	.word	0x0810666b
 81064bc:	0810666b 	.word	0x0810666b
 81064c0:	081065a7 	.word	0x081065a7
 81064c4:	0810666b 	.word	0x0810666b
 81064c8:	0810666b 	.word	0x0810666b
 81064cc:	0810666b 	.word	0x0810666b
 81064d0:	081065e9 	.word	0x081065e9
 81064d4:	0810666b 	.word	0x0810666b
 81064d8:	0810666b 	.word	0x0810666b
 81064dc:	0810666b 	.word	0x0810666b
 81064e0:	08106629 	.word	0x08106629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81064e4:	68fb      	ldr	r3, [r7, #12]
 81064e6:	681b      	ldr	r3, [r3, #0]
 81064e8:	68b9      	ldr	r1, [r7, #8]
 81064ea:	4618      	mov	r0, r3
 81064ec:	f000 fa5c 	bl	81069a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81064f0:	68fb      	ldr	r3, [r7, #12]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	699a      	ldr	r2, [r3, #24]
 81064f6:	68fb      	ldr	r3, [r7, #12]
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	f042 0208 	orr.w	r2, r2, #8
 81064fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106500:	68fb      	ldr	r3, [r7, #12]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	699a      	ldr	r2, [r3, #24]
 8106506:	68fb      	ldr	r3, [r7, #12]
 8106508:	681b      	ldr	r3, [r3, #0]
 810650a:	f022 0204 	bic.w	r2, r2, #4
 810650e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106510:	68fb      	ldr	r3, [r7, #12]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	6999      	ldr	r1, [r3, #24]
 8106516:	68bb      	ldr	r3, [r7, #8]
 8106518:	691a      	ldr	r2, [r3, #16]
 810651a:	68fb      	ldr	r3, [r7, #12]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	430a      	orrs	r2, r1
 8106520:	619a      	str	r2, [r3, #24]
      break;
 8106522:	e0a5      	b.n	8106670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106524:	68fb      	ldr	r3, [r7, #12]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	68b9      	ldr	r1, [r7, #8]
 810652a:	4618      	mov	r0, r3
 810652c:	f000 facc 	bl	8106ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106530:	68fb      	ldr	r3, [r7, #12]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	699a      	ldr	r2, [r3, #24]
 8106536:	68fb      	ldr	r3, [r7, #12]
 8106538:	681b      	ldr	r3, [r3, #0]
 810653a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810653e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106540:	68fb      	ldr	r3, [r7, #12]
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	699a      	ldr	r2, [r3, #24]
 8106546:	68fb      	ldr	r3, [r7, #12]
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810654e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	6999      	ldr	r1, [r3, #24]
 8106556:	68bb      	ldr	r3, [r7, #8]
 8106558:	691b      	ldr	r3, [r3, #16]
 810655a:	021a      	lsls	r2, r3, #8
 810655c:	68fb      	ldr	r3, [r7, #12]
 810655e:	681b      	ldr	r3, [r3, #0]
 8106560:	430a      	orrs	r2, r1
 8106562:	619a      	str	r2, [r3, #24]
      break;
 8106564:	e084      	b.n	8106670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106566:	68fb      	ldr	r3, [r7, #12]
 8106568:	681b      	ldr	r3, [r3, #0]
 810656a:	68b9      	ldr	r1, [r7, #8]
 810656c:	4618      	mov	r0, r3
 810656e:	f000 fb35 	bl	8106bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106572:	68fb      	ldr	r3, [r7, #12]
 8106574:	681b      	ldr	r3, [r3, #0]
 8106576:	69da      	ldr	r2, [r3, #28]
 8106578:	68fb      	ldr	r3, [r7, #12]
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	f042 0208 	orr.w	r2, r2, #8
 8106580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106582:	68fb      	ldr	r3, [r7, #12]
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	69da      	ldr	r2, [r3, #28]
 8106588:	68fb      	ldr	r3, [r7, #12]
 810658a:	681b      	ldr	r3, [r3, #0]
 810658c:	f022 0204 	bic.w	r2, r2, #4
 8106590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106592:	68fb      	ldr	r3, [r7, #12]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	69d9      	ldr	r1, [r3, #28]
 8106598:	68bb      	ldr	r3, [r7, #8]
 810659a:	691a      	ldr	r2, [r3, #16]
 810659c:	68fb      	ldr	r3, [r7, #12]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	430a      	orrs	r2, r1
 81065a2:	61da      	str	r2, [r3, #28]
      break;
 81065a4:	e064      	b.n	8106670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81065a6:	68fb      	ldr	r3, [r7, #12]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	68b9      	ldr	r1, [r7, #8]
 81065ac:	4618      	mov	r0, r3
 81065ae:	f000 fb9d 	bl	8106cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	69da      	ldr	r2, [r3, #28]
 81065b8:	68fb      	ldr	r3, [r7, #12]
 81065ba:	681b      	ldr	r3, [r3, #0]
 81065bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81065c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81065c2:	68fb      	ldr	r3, [r7, #12]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	69da      	ldr	r2, [r3, #28]
 81065c8:	68fb      	ldr	r3, [r7, #12]
 81065ca:	681b      	ldr	r3, [r3, #0]
 81065cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81065d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81065d2:	68fb      	ldr	r3, [r7, #12]
 81065d4:	681b      	ldr	r3, [r3, #0]
 81065d6:	69d9      	ldr	r1, [r3, #28]
 81065d8:	68bb      	ldr	r3, [r7, #8]
 81065da:	691b      	ldr	r3, [r3, #16]
 81065dc:	021a      	lsls	r2, r3, #8
 81065de:	68fb      	ldr	r3, [r7, #12]
 81065e0:	681b      	ldr	r3, [r3, #0]
 81065e2:	430a      	orrs	r2, r1
 81065e4:	61da      	str	r2, [r3, #28]
      break;
 81065e6:	e043      	b.n	8106670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81065e8:	68fb      	ldr	r3, [r7, #12]
 81065ea:	681b      	ldr	r3, [r3, #0]
 81065ec:	68b9      	ldr	r1, [r7, #8]
 81065ee:	4618      	mov	r0, r3
 81065f0:	f000 fbe6 	bl	8106dc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81065f4:	68fb      	ldr	r3, [r7, #12]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81065fa:	68fb      	ldr	r3, [r7, #12]
 81065fc:	681b      	ldr	r3, [r3, #0]
 81065fe:	f042 0208 	orr.w	r2, r2, #8
 8106602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106604:	68fb      	ldr	r3, [r7, #12]
 8106606:	681b      	ldr	r3, [r3, #0]
 8106608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810660a:	68fb      	ldr	r3, [r7, #12]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	f022 0204 	bic.w	r2, r2, #4
 8106612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106614:	68fb      	ldr	r3, [r7, #12]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810661a:	68bb      	ldr	r3, [r7, #8]
 810661c:	691a      	ldr	r2, [r3, #16]
 810661e:	68fb      	ldr	r3, [r7, #12]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	430a      	orrs	r2, r1
 8106624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8106626:	e023      	b.n	8106670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	68b9      	ldr	r1, [r7, #8]
 810662e:	4618      	mov	r0, r3
 8106630:	f000 fc2a 	bl	8106e88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106634:	68fb      	ldr	r3, [r7, #12]
 8106636:	681b      	ldr	r3, [r3, #0]
 8106638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810663a:	68fb      	ldr	r3, [r7, #12]
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106644:	68fb      	ldr	r3, [r7, #12]
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810664a:	68fb      	ldr	r3, [r7, #12]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106654:	68fb      	ldr	r3, [r7, #12]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810665a:	68bb      	ldr	r3, [r7, #8]
 810665c:	691b      	ldr	r3, [r3, #16]
 810665e:	021a      	lsls	r2, r3, #8
 8106660:	68fb      	ldr	r3, [r7, #12]
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	430a      	orrs	r2, r1
 8106666:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8106668:	e002      	b.n	8106670 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810666a:	2301      	movs	r3, #1
 810666c:	75fb      	strb	r3, [r7, #23]
      break;
 810666e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106670:	68fb      	ldr	r3, [r7, #12]
 8106672:	2200      	movs	r2, #0
 8106674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106678:	7dfb      	ldrb	r3, [r7, #23]
}
 810667a:	4618      	mov	r0, r3
 810667c:	3718      	adds	r7, #24
 810667e:	46bd      	mov	sp, r7
 8106680:	bd80      	pop	{r7, pc}
 8106682:	bf00      	nop

08106684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8106684:	b580      	push	{r7, lr}
 8106686:	b084      	sub	sp, #16
 8106688:	af00      	add	r7, sp, #0
 810668a:	6078      	str	r0, [r7, #4]
 810668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810668e:	2300      	movs	r3, #0
 8106690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106698:	2b01      	cmp	r3, #1
 810669a:	d101      	bne.n	81066a0 <HAL_TIM_ConfigClockSource+0x1c>
 810669c:	2302      	movs	r3, #2
 810669e:	e0de      	b.n	810685e <HAL_TIM_ConfigClockSource+0x1da>
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	2201      	movs	r2, #1
 81066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	2202      	movs	r2, #2
 81066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	681b      	ldr	r3, [r3, #0]
 81066b4:	689b      	ldr	r3, [r3, #8]
 81066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81066b8:	68bb      	ldr	r3, [r7, #8]
 81066ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81066be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81066c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81066c4:	68bb      	ldr	r3, [r7, #8]
 81066c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81066ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	68ba      	ldr	r2, [r7, #8]
 81066d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81066d4:	683b      	ldr	r3, [r7, #0]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	4a63      	ldr	r2, [pc, #396]	; (8106868 <HAL_TIM_ConfigClockSource+0x1e4>)
 81066da:	4293      	cmp	r3, r2
 81066dc:	f000 80a9 	beq.w	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 81066e0:	4a61      	ldr	r2, [pc, #388]	; (8106868 <HAL_TIM_ConfigClockSource+0x1e4>)
 81066e2:	4293      	cmp	r3, r2
 81066e4:	f200 80ae 	bhi.w	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 81066e8:	4a60      	ldr	r2, [pc, #384]	; (810686c <HAL_TIM_ConfigClockSource+0x1e8>)
 81066ea:	4293      	cmp	r3, r2
 81066ec:	f000 80a1 	beq.w	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 81066f0:	4a5e      	ldr	r2, [pc, #376]	; (810686c <HAL_TIM_ConfigClockSource+0x1e8>)
 81066f2:	4293      	cmp	r3, r2
 81066f4:	f200 80a6 	bhi.w	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 81066f8:	4a5d      	ldr	r2, [pc, #372]	; (8106870 <HAL_TIM_ConfigClockSource+0x1ec>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	f000 8099 	beq.w	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 8106700:	4a5b      	ldr	r2, [pc, #364]	; (8106870 <HAL_TIM_ConfigClockSource+0x1ec>)
 8106702:	4293      	cmp	r3, r2
 8106704:	f200 809e 	bhi.w	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106708:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810670c:	f000 8091 	beq.w	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 8106710:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106714:	f200 8096 	bhi.w	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810671c:	f000 8089 	beq.w	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 8106720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106724:	f200 808e 	bhi.w	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810672c:	d03e      	beq.n	81067ac <HAL_TIM_ConfigClockSource+0x128>
 810672e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106732:	f200 8087 	bhi.w	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810673a:	f000 8086 	beq.w	810684a <HAL_TIM_ConfigClockSource+0x1c6>
 810673e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106742:	d87f      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106744:	2b70      	cmp	r3, #112	; 0x70
 8106746:	d01a      	beq.n	810677e <HAL_TIM_ConfigClockSource+0xfa>
 8106748:	2b70      	cmp	r3, #112	; 0x70
 810674a:	d87b      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 810674c:	2b60      	cmp	r3, #96	; 0x60
 810674e:	d050      	beq.n	81067f2 <HAL_TIM_ConfigClockSource+0x16e>
 8106750:	2b60      	cmp	r3, #96	; 0x60
 8106752:	d877      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106754:	2b50      	cmp	r3, #80	; 0x50
 8106756:	d03c      	beq.n	81067d2 <HAL_TIM_ConfigClockSource+0x14e>
 8106758:	2b50      	cmp	r3, #80	; 0x50
 810675a:	d873      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 810675c:	2b40      	cmp	r3, #64	; 0x40
 810675e:	d058      	beq.n	8106812 <HAL_TIM_ConfigClockSource+0x18e>
 8106760:	2b40      	cmp	r3, #64	; 0x40
 8106762:	d86f      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106764:	2b30      	cmp	r3, #48	; 0x30
 8106766:	d064      	beq.n	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 8106768:	2b30      	cmp	r3, #48	; 0x30
 810676a:	d86b      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 810676c:	2b20      	cmp	r3, #32
 810676e:	d060      	beq.n	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 8106770:	2b20      	cmp	r3, #32
 8106772:	d867      	bhi.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
 8106774:	2b00      	cmp	r3, #0
 8106776:	d05c      	beq.n	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 8106778:	2b10      	cmp	r3, #16
 810677a:	d05a      	beq.n	8106832 <HAL_TIM_ConfigClockSource+0x1ae>
 810677c:	e062      	b.n	8106844 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	6818      	ldr	r0, [r3, #0]
 8106782:	683b      	ldr	r3, [r7, #0]
 8106784:	6899      	ldr	r1, [r3, #8]
 8106786:	683b      	ldr	r3, [r7, #0]
 8106788:	685a      	ldr	r2, [r3, #4]
 810678a:	683b      	ldr	r3, [r7, #0]
 810678c:	68db      	ldr	r3, [r3, #12]
 810678e:	f000 fc5d 	bl	810704c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	689b      	ldr	r3, [r3, #8]
 8106798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810679a:	68bb      	ldr	r3, [r7, #8]
 810679c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81067a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	68ba      	ldr	r2, [r7, #8]
 81067a8:	609a      	str	r2, [r3, #8]
      break;
 81067aa:	e04f      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	6818      	ldr	r0, [r3, #0]
 81067b0:	683b      	ldr	r3, [r7, #0]
 81067b2:	6899      	ldr	r1, [r3, #8]
 81067b4:	683b      	ldr	r3, [r7, #0]
 81067b6:	685a      	ldr	r2, [r3, #4]
 81067b8:	683b      	ldr	r3, [r7, #0]
 81067ba:	68db      	ldr	r3, [r3, #12]
 81067bc:	f000 fc46 	bl	810704c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	689a      	ldr	r2, [r3, #8]
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81067ce:	609a      	str	r2, [r3, #8]
      break;
 81067d0:	e03c      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	6818      	ldr	r0, [r3, #0]
 81067d6:	683b      	ldr	r3, [r7, #0]
 81067d8:	6859      	ldr	r1, [r3, #4]
 81067da:	683b      	ldr	r3, [r7, #0]
 81067dc:	68db      	ldr	r3, [r3, #12]
 81067de:	461a      	mov	r2, r3
 81067e0:	f000 fbb8 	bl	8106f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	681b      	ldr	r3, [r3, #0]
 81067e8:	2150      	movs	r1, #80	; 0x50
 81067ea:	4618      	mov	r0, r3
 81067ec:	f000 fc11 	bl	8107012 <TIM_ITRx_SetConfig>
      break;
 81067f0:	e02c      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	6818      	ldr	r0, [r3, #0]
 81067f6:	683b      	ldr	r3, [r7, #0]
 81067f8:	6859      	ldr	r1, [r3, #4]
 81067fa:	683b      	ldr	r3, [r7, #0]
 81067fc:	68db      	ldr	r3, [r3, #12]
 81067fe:	461a      	mov	r2, r3
 8106800:	f000 fbd7 	bl	8106fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	2160      	movs	r1, #96	; 0x60
 810680a:	4618      	mov	r0, r3
 810680c:	f000 fc01 	bl	8107012 <TIM_ITRx_SetConfig>
      break;
 8106810:	e01c      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	6818      	ldr	r0, [r3, #0]
 8106816:	683b      	ldr	r3, [r7, #0]
 8106818:	6859      	ldr	r1, [r3, #4]
 810681a:	683b      	ldr	r3, [r7, #0]
 810681c:	68db      	ldr	r3, [r3, #12]
 810681e:	461a      	mov	r2, r3
 8106820:	f000 fb98 	bl	8106f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	681b      	ldr	r3, [r3, #0]
 8106828:	2140      	movs	r1, #64	; 0x40
 810682a:	4618      	mov	r0, r3
 810682c:	f000 fbf1 	bl	8107012 <TIM_ITRx_SetConfig>
      break;
 8106830:	e00c      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	681a      	ldr	r2, [r3, #0]
 8106836:	683b      	ldr	r3, [r7, #0]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	4619      	mov	r1, r3
 810683c:	4610      	mov	r0, r2
 810683e:	f000 fbe8 	bl	8107012 <TIM_ITRx_SetConfig>
      break;
 8106842:	e003      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8106844:	2301      	movs	r3, #1
 8106846:	73fb      	strb	r3, [r7, #15]
      break;
 8106848:	e000      	b.n	810684c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810684a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	2201      	movs	r2, #1
 8106850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106854:	687b      	ldr	r3, [r7, #4]
 8106856:	2200      	movs	r2, #0
 8106858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810685c:	7bfb      	ldrb	r3, [r7, #15]
}
 810685e:	4618      	mov	r0, r3
 8106860:	3710      	adds	r7, #16
 8106862:	46bd      	mov	sp, r7
 8106864:	bd80      	pop	{r7, pc}
 8106866:	bf00      	nop
 8106868:	00100040 	.word	0x00100040
 810686c:	00100030 	.word	0x00100030
 8106870:	00100020 	.word	0x00100020

08106874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8106874:	b480      	push	{r7}
 8106876:	b085      	sub	sp, #20
 8106878:	af00      	add	r7, sp, #0
 810687a:	6078      	str	r0, [r7, #4]
 810687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	4a40      	ldr	r2, [pc, #256]	; (8106988 <TIM_Base_SetConfig+0x114>)
 8106888:	4293      	cmp	r3, r2
 810688a:	d013      	beq.n	81068b4 <TIM_Base_SetConfig+0x40>
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106892:	d00f      	beq.n	81068b4 <TIM_Base_SetConfig+0x40>
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	4a3d      	ldr	r2, [pc, #244]	; (810698c <TIM_Base_SetConfig+0x118>)
 8106898:	4293      	cmp	r3, r2
 810689a:	d00b      	beq.n	81068b4 <TIM_Base_SetConfig+0x40>
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	4a3c      	ldr	r2, [pc, #240]	; (8106990 <TIM_Base_SetConfig+0x11c>)
 81068a0:	4293      	cmp	r3, r2
 81068a2:	d007      	beq.n	81068b4 <TIM_Base_SetConfig+0x40>
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	4a3b      	ldr	r2, [pc, #236]	; (8106994 <TIM_Base_SetConfig+0x120>)
 81068a8:	4293      	cmp	r3, r2
 81068aa:	d003      	beq.n	81068b4 <TIM_Base_SetConfig+0x40>
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	4a3a      	ldr	r2, [pc, #232]	; (8106998 <TIM_Base_SetConfig+0x124>)
 81068b0:	4293      	cmp	r3, r2
 81068b2:	d108      	bne.n	81068c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81068b4:	68fb      	ldr	r3, [r7, #12]
 81068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81068ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81068bc:	683b      	ldr	r3, [r7, #0]
 81068be:	685b      	ldr	r3, [r3, #4]
 81068c0:	68fa      	ldr	r2, [r7, #12]
 81068c2:	4313      	orrs	r3, r2
 81068c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	4a2f      	ldr	r2, [pc, #188]	; (8106988 <TIM_Base_SetConfig+0x114>)
 81068ca:	4293      	cmp	r3, r2
 81068cc:	d01f      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81068d4:	d01b      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068d6:	687b      	ldr	r3, [r7, #4]
 81068d8:	4a2c      	ldr	r2, [pc, #176]	; (810698c <TIM_Base_SetConfig+0x118>)
 81068da:	4293      	cmp	r3, r2
 81068dc:	d017      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	4a2b      	ldr	r2, [pc, #172]	; (8106990 <TIM_Base_SetConfig+0x11c>)
 81068e2:	4293      	cmp	r3, r2
 81068e4:	d013      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068e6:	687b      	ldr	r3, [r7, #4]
 81068e8:	4a2a      	ldr	r2, [pc, #168]	; (8106994 <TIM_Base_SetConfig+0x120>)
 81068ea:	4293      	cmp	r3, r2
 81068ec:	d00f      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	4a29      	ldr	r2, [pc, #164]	; (8106998 <TIM_Base_SetConfig+0x124>)
 81068f2:	4293      	cmp	r3, r2
 81068f4:	d00b      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	4a28      	ldr	r2, [pc, #160]	; (810699c <TIM_Base_SetConfig+0x128>)
 81068fa:	4293      	cmp	r3, r2
 81068fc:	d007      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	4a27      	ldr	r2, [pc, #156]	; (81069a0 <TIM_Base_SetConfig+0x12c>)
 8106902:	4293      	cmp	r3, r2
 8106904:	d003      	beq.n	810690e <TIM_Base_SetConfig+0x9a>
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	4a26      	ldr	r2, [pc, #152]	; (81069a4 <TIM_Base_SetConfig+0x130>)
 810690a:	4293      	cmp	r3, r2
 810690c:	d108      	bne.n	8106920 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810690e:	68fb      	ldr	r3, [r7, #12]
 8106910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106916:	683b      	ldr	r3, [r7, #0]
 8106918:	68db      	ldr	r3, [r3, #12]
 810691a:	68fa      	ldr	r2, [r7, #12]
 810691c:	4313      	orrs	r3, r2
 810691e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106920:	68fb      	ldr	r3, [r7, #12]
 8106922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8106926:	683b      	ldr	r3, [r7, #0]
 8106928:	695b      	ldr	r3, [r3, #20]
 810692a:	4313      	orrs	r3, r2
 810692c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	68fa      	ldr	r2, [r7, #12]
 8106932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106934:	683b      	ldr	r3, [r7, #0]
 8106936:	689a      	ldr	r2, [r3, #8]
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810693c:	683b      	ldr	r3, [r7, #0]
 810693e:	681a      	ldr	r2, [r3, #0]
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	4a10      	ldr	r2, [pc, #64]	; (8106988 <TIM_Base_SetConfig+0x114>)
 8106948:	4293      	cmp	r3, r2
 810694a:	d00f      	beq.n	810696c <TIM_Base_SetConfig+0xf8>
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	4a12      	ldr	r2, [pc, #72]	; (8106998 <TIM_Base_SetConfig+0x124>)
 8106950:	4293      	cmp	r3, r2
 8106952:	d00b      	beq.n	810696c <TIM_Base_SetConfig+0xf8>
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	4a11      	ldr	r2, [pc, #68]	; (810699c <TIM_Base_SetConfig+0x128>)
 8106958:	4293      	cmp	r3, r2
 810695a:	d007      	beq.n	810696c <TIM_Base_SetConfig+0xf8>
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	4a10      	ldr	r2, [pc, #64]	; (81069a0 <TIM_Base_SetConfig+0x12c>)
 8106960:	4293      	cmp	r3, r2
 8106962:	d003      	beq.n	810696c <TIM_Base_SetConfig+0xf8>
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	4a0f      	ldr	r2, [pc, #60]	; (81069a4 <TIM_Base_SetConfig+0x130>)
 8106968:	4293      	cmp	r3, r2
 810696a:	d103      	bne.n	8106974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810696c:	683b      	ldr	r3, [r7, #0]
 810696e:	691a      	ldr	r2, [r3, #16]
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	2201      	movs	r2, #1
 8106978:	615a      	str	r2, [r3, #20]
}
 810697a:	bf00      	nop
 810697c:	3714      	adds	r7, #20
 810697e:	46bd      	mov	sp, r7
 8106980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106984:	4770      	bx	lr
 8106986:	bf00      	nop
 8106988:	40010000 	.word	0x40010000
 810698c:	40000400 	.word	0x40000400
 8106990:	40000800 	.word	0x40000800
 8106994:	40000c00 	.word	0x40000c00
 8106998:	40010400 	.word	0x40010400
 810699c:	40014000 	.word	0x40014000
 81069a0:	40014400 	.word	0x40014400
 81069a4:	40014800 	.word	0x40014800

081069a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81069a8:	b480      	push	{r7}
 81069aa:	b087      	sub	sp, #28
 81069ac:	af00      	add	r7, sp, #0
 81069ae:	6078      	str	r0, [r7, #4]
 81069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	6a1b      	ldr	r3, [r3, #32]
 81069b6:	f023 0201 	bic.w	r2, r3, #1
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81069be:	687b      	ldr	r3, [r7, #4]
 81069c0:	6a1b      	ldr	r3, [r3, #32]
 81069c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	685b      	ldr	r3, [r3, #4]
 81069c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81069ca:	687b      	ldr	r3, [r7, #4]
 81069cc:	699b      	ldr	r3, [r3, #24]
 81069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81069d0:	68fb      	ldr	r3, [r7, #12]
 81069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81069dc:	68fb      	ldr	r3, [r7, #12]
 81069de:	f023 0303 	bic.w	r3, r3, #3
 81069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81069e4:	683b      	ldr	r3, [r7, #0]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	68fa      	ldr	r2, [r7, #12]
 81069ea:	4313      	orrs	r3, r2
 81069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81069ee:	697b      	ldr	r3, [r7, #20]
 81069f0:	f023 0302 	bic.w	r3, r3, #2
 81069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81069f6:	683b      	ldr	r3, [r7, #0]
 81069f8:	689b      	ldr	r3, [r3, #8]
 81069fa:	697a      	ldr	r2, [r7, #20]
 81069fc:	4313      	orrs	r3, r2
 81069fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	4a2c      	ldr	r2, [pc, #176]	; (8106ab4 <TIM_OC1_SetConfig+0x10c>)
 8106a04:	4293      	cmp	r3, r2
 8106a06:	d00f      	beq.n	8106a28 <TIM_OC1_SetConfig+0x80>
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	4a2b      	ldr	r2, [pc, #172]	; (8106ab8 <TIM_OC1_SetConfig+0x110>)
 8106a0c:	4293      	cmp	r3, r2
 8106a0e:	d00b      	beq.n	8106a28 <TIM_OC1_SetConfig+0x80>
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	4a2a      	ldr	r2, [pc, #168]	; (8106abc <TIM_OC1_SetConfig+0x114>)
 8106a14:	4293      	cmp	r3, r2
 8106a16:	d007      	beq.n	8106a28 <TIM_OC1_SetConfig+0x80>
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	4a29      	ldr	r2, [pc, #164]	; (8106ac0 <TIM_OC1_SetConfig+0x118>)
 8106a1c:	4293      	cmp	r3, r2
 8106a1e:	d003      	beq.n	8106a28 <TIM_OC1_SetConfig+0x80>
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	4a28      	ldr	r2, [pc, #160]	; (8106ac4 <TIM_OC1_SetConfig+0x11c>)
 8106a24:	4293      	cmp	r3, r2
 8106a26:	d10c      	bne.n	8106a42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106a28:	697b      	ldr	r3, [r7, #20]
 8106a2a:	f023 0308 	bic.w	r3, r3, #8
 8106a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106a30:	683b      	ldr	r3, [r7, #0]
 8106a32:	68db      	ldr	r3, [r3, #12]
 8106a34:	697a      	ldr	r2, [r7, #20]
 8106a36:	4313      	orrs	r3, r2
 8106a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106a3a:	697b      	ldr	r3, [r7, #20]
 8106a3c:	f023 0304 	bic.w	r3, r3, #4
 8106a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	4a1b      	ldr	r2, [pc, #108]	; (8106ab4 <TIM_OC1_SetConfig+0x10c>)
 8106a46:	4293      	cmp	r3, r2
 8106a48:	d00f      	beq.n	8106a6a <TIM_OC1_SetConfig+0xc2>
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	4a1a      	ldr	r2, [pc, #104]	; (8106ab8 <TIM_OC1_SetConfig+0x110>)
 8106a4e:	4293      	cmp	r3, r2
 8106a50:	d00b      	beq.n	8106a6a <TIM_OC1_SetConfig+0xc2>
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	4a19      	ldr	r2, [pc, #100]	; (8106abc <TIM_OC1_SetConfig+0x114>)
 8106a56:	4293      	cmp	r3, r2
 8106a58:	d007      	beq.n	8106a6a <TIM_OC1_SetConfig+0xc2>
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	4a18      	ldr	r2, [pc, #96]	; (8106ac0 <TIM_OC1_SetConfig+0x118>)
 8106a5e:	4293      	cmp	r3, r2
 8106a60:	d003      	beq.n	8106a6a <TIM_OC1_SetConfig+0xc2>
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	4a17      	ldr	r2, [pc, #92]	; (8106ac4 <TIM_OC1_SetConfig+0x11c>)
 8106a66:	4293      	cmp	r3, r2
 8106a68:	d111      	bne.n	8106a8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106a6a:	693b      	ldr	r3, [r7, #16]
 8106a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106a72:	693b      	ldr	r3, [r7, #16]
 8106a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106a7a:	683b      	ldr	r3, [r7, #0]
 8106a7c:	695b      	ldr	r3, [r3, #20]
 8106a7e:	693a      	ldr	r2, [r7, #16]
 8106a80:	4313      	orrs	r3, r2
 8106a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106a84:	683b      	ldr	r3, [r7, #0]
 8106a86:	699b      	ldr	r3, [r3, #24]
 8106a88:	693a      	ldr	r2, [r7, #16]
 8106a8a:	4313      	orrs	r3, r2
 8106a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	693a      	ldr	r2, [r7, #16]
 8106a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	68fa      	ldr	r2, [r7, #12]
 8106a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106a9a:	683b      	ldr	r3, [r7, #0]
 8106a9c:	685a      	ldr	r2, [r3, #4]
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	697a      	ldr	r2, [r7, #20]
 8106aa6:	621a      	str	r2, [r3, #32]
}
 8106aa8:	bf00      	nop
 8106aaa:	371c      	adds	r7, #28
 8106aac:	46bd      	mov	sp, r7
 8106aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ab2:	4770      	bx	lr
 8106ab4:	40010000 	.word	0x40010000
 8106ab8:	40010400 	.word	0x40010400
 8106abc:	40014000 	.word	0x40014000
 8106ac0:	40014400 	.word	0x40014400
 8106ac4:	40014800 	.word	0x40014800

08106ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106ac8:	b480      	push	{r7}
 8106aca:	b087      	sub	sp, #28
 8106acc:	af00      	add	r7, sp, #0
 8106ace:	6078      	str	r0, [r7, #4]
 8106ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	6a1b      	ldr	r3, [r3, #32]
 8106ad6:	f023 0210 	bic.w	r2, r3, #16
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	6a1b      	ldr	r3, [r3, #32]
 8106ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	685b      	ldr	r3, [r3, #4]
 8106ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	699b      	ldr	r3, [r3, #24]
 8106aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106afc:	68fb      	ldr	r3, [r7, #12]
 8106afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106b04:	683b      	ldr	r3, [r7, #0]
 8106b06:	681b      	ldr	r3, [r3, #0]
 8106b08:	021b      	lsls	r3, r3, #8
 8106b0a:	68fa      	ldr	r2, [r7, #12]
 8106b0c:	4313      	orrs	r3, r2
 8106b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106b10:	697b      	ldr	r3, [r7, #20]
 8106b12:	f023 0320 	bic.w	r3, r3, #32
 8106b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106b18:	683b      	ldr	r3, [r7, #0]
 8106b1a:	689b      	ldr	r3, [r3, #8]
 8106b1c:	011b      	lsls	r3, r3, #4
 8106b1e:	697a      	ldr	r2, [r7, #20]
 8106b20:	4313      	orrs	r3, r2
 8106b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	4a28      	ldr	r2, [pc, #160]	; (8106bc8 <TIM_OC2_SetConfig+0x100>)
 8106b28:	4293      	cmp	r3, r2
 8106b2a:	d003      	beq.n	8106b34 <TIM_OC2_SetConfig+0x6c>
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	4a27      	ldr	r2, [pc, #156]	; (8106bcc <TIM_OC2_SetConfig+0x104>)
 8106b30:	4293      	cmp	r3, r2
 8106b32:	d10d      	bne.n	8106b50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106b34:	697b      	ldr	r3, [r7, #20]
 8106b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106b3c:	683b      	ldr	r3, [r7, #0]
 8106b3e:	68db      	ldr	r3, [r3, #12]
 8106b40:	011b      	lsls	r3, r3, #4
 8106b42:	697a      	ldr	r2, [r7, #20]
 8106b44:	4313      	orrs	r3, r2
 8106b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106b48:	697b      	ldr	r3, [r7, #20]
 8106b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	4a1d      	ldr	r2, [pc, #116]	; (8106bc8 <TIM_OC2_SetConfig+0x100>)
 8106b54:	4293      	cmp	r3, r2
 8106b56:	d00f      	beq.n	8106b78 <TIM_OC2_SetConfig+0xb0>
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	4a1c      	ldr	r2, [pc, #112]	; (8106bcc <TIM_OC2_SetConfig+0x104>)
 8106b5c:	4293      	cmp	r3, r2
 8106b5e:	d00b      	beq.n	8106b78 <TIM_OC2_SetConfig+0xb0>
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	4a1b      	ldr	r2, [pc, #108]	; (8106bd0 <TIM_OC2_SetConfig+0x108>)
 8106b64:	4293      	cmp	r3, r2
 8106b66:	d007      	beq.n	8106b78 <TIM_OC2_SetConfig+0xb0>
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	4a1a      	ldr	r2, [pc, #104]	; (8106bd4 <TIM_OC2_SetConfig+0x10c>)
 8106b6c:	4293      	cmp	r3, r2
 8106b6e:	d003      	beq.n	8106b78 <TIM_OC2_SetConfig+0xb0>
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	4a19      	ldr	r2, [pc, #100]	; (8106bd8 <TIM_OC2_SetConfig+0x110>)
 8106b74:	4293      	cmp	r3, r2
 8106b76:	d113      	bne.n	8106ba0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106b78:	693b      	ldr	r3, [r7, #16]
 8106b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106b80:	693b      	ldr	r3, [r7, #16]
 8106b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106b88:	683b      	ldr	r3, [r7, #0]
 8106b8a:	695b      	ldr	r3, [r3, #20]
 8106b8c:	009b      	lsls	r3, r3, #2
 8106b8e:	693a      	ldr	r2, [r7, #16]
 8106b90:	4313      	orrs	r3, r2
 8106b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106b94:	683b      	ldr	r3, [r7, #0]
 8106b96:	699b      	ldr	r3, [r3, #24]
 8106b98:	009b      	lsls	r3, r3, #2
 8106b9a:	693a      	ldr	r2, [r7, #16]
 8106b9c:	4313      	orrs	r3, r2
 8106b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	693a      	ldr	r2, [r7, #16]
 8106ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	68fa      	ldr	r2, [r7, #12]
 8106baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106bac:	683b      	ldr	r3, [r7, #0]
 8106bae:	685a      	ldr	r2, [r3, #4]
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	697a      	ldr	r2, [r7, #20]
 8106bb8:	621a      	str	r2, [r3, #32]
}
 8106bba:	bf00      	nop
 8106bbc:	371c      	adds	r7, #28
 8106bbe:	46bd      	mov	sp, r7
 8106bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bc4:	4770      	bx	lr
 8106bc6:	bf00      	nop
 8106bc8:	40010000 	.word	0x40010000
 8106bcc:	40010400 	.word	0x40010400
 8106bd0:	40014000 	.word	0x40014000
 8106bd4:	40014400 	.word	0x40014400
 8106bd8:	40014800 	.word	0x40014800

08106bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106bdc:	b480      	push	{r7}
 8106bde:	b087      	sub	sp, #28
 8106be0:	af00      	add	r7, sp, #0
 8106be2:	6078      	str	r0, [r7, #4]
 8106be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106be6:	687b      	ldr	r3, [r7, #4]
 8106be8:	6a1b      	ldr	r3, [r3, #32]
 8106bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	6a1b      	ldr	r3, [r3, #32]
 8106bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	685b      	ldr	r3, [r3, #4]
 8106bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	69db      	ldr	r3, [r3, #28]
 8106c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8106c04:	68fb      	ldr	r3, [r7, #12]
 8106c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106c10:	68fb      	ldr	r3, [r7, #12]
 8106c12:	f023 0303 	bic.w	r3, r3, #3
 8106c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106c18:	683b      	ldr	r3, [r7, #0]
 8106c1a:	681b      	ldr	r3, [r3, #0]
 8106c1c:	68fa      	ldr	r2, [r7, #12]
 8106c1e:	4313      	orrs	r3, r2
 8106c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106c22:	697b      	ldr	r3, [r7, #20]
 8106c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106c2a:	683b      	ldr	r3, [r7, #0]
 8106c2c:	689b      	ldr	r3, [r3, #8]
 8106c2e:	021b      	lsls	r3, r3, #8
 8106c30:	697a      	ldr	r2, [r7, #20]
 8106c32:	4313      	orrs	r3, r2
 8106c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106c36:	687b      	ldr	r3, [r7, #4]
 8106c38:	4a27      	ldr	r2, [pc, #156]	; (8106cd8 <TIM_OC3_SetConfig+0xfc>)
 8106c3a:	4293      	cmp	r3, r2
 8106c3c:	d003      	beq.n	8106c46 <TIM_OC3_SetConfig+0x6a>
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	4a26      	ldr	r2, [pc, #152]	; (8106cdc <TIM_OC3_SetConfig+0x100>)
 8106c42:	4293      	cmp	r3, r2
 8106c44:	d10d      	bne.n	8106c62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106c46:	697b      	ldr	r3, [r7, #20]
 8106c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106c4e:	683b      	ldr	r3, [r7, #0]
 8106c50:	68db      	ldr	r3, [r3, #12]
 8106c52:	021b      	lsls	r3, r3, #8
 8106c54:	697a      	ldr	r2, [r7, #20]
 8106c56:	4313      	orrs	r3, r2
 8106c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106c5a:	697b      	ldr	r3, [r7, #20]
 8106c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	4a1c      	ldr	r2, [pc, #112]	; (8106cd8 <TIM_OC3_SetConfig+0xfc>)
 8106c66:	4293      	cmp	r3, r2
 8106c68:	d00f      	beq.n	8106c8a <TIM_OC3_SetConfig+0xae>
 8106c6a:	687b      	ldr	r3, [r7, #4]
 8106c6c:	4a1b      	ldr	r2, [pc, #108]	; (8106cdc <TIM_OC3_SetConfig+0x100>)
 8106c6e:	4293      	cmp	r3, r2
 8106c70:	d00b      	beq.n	8106c8a <TIM_OC3_SetConfig+0xae>
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	4a1a      	ldr	r2, [pc, #104]	; (8106ce0 <TIM_OC3_SetConfig+0x104>)
 8106c76:	4293      	cmp	r3, r2
 8106c78:	d007      	beq.n	8106c8a <TIM_OC3_SetConfig+0xae>
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	4a19      	ldr	r2, [pc, #100]	; (8106ce4 <TIM_OC3_SetConfig+0x108>)
 8106c7e:	4293      	cmp	r3, r2
 8106c80:	d003      	beq.n	8106c8a <TIM_OC3_SetConfig+0xae>
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	4a18      	ldr	r2, [pc, #96]	; (8106ce8 <TIM_OC3_SetConfig+0x10c>)
 8106c86:	4293      	cmp	r3, r2
 8106c88:	d113      	bne.n	8106cb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106c8a:	693b      	ldr	r3, [r7, #16]
 8106c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106c92:	693b      	ldr	r3, [r7, #16]
 8106c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106c9a:	683b      	ldr	r3, [r7, #0]
 8106c9c:	695b      	ldr	r3, [r3, #20]
 8106c9e:	011b      	lsls	r3, r3, #4
 8106ca0:	693a      	ldr	r2, [r7, #16]
 8106ca2:	4313      	orrs	r3, r2
 8106ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106ca6:	683b      	ldr	r3, [r7, #0]
 8106ca8:	699b      	ldr	r3, [r3, #24]
 8106caa:	011b      	lsls	r3, r3, #4
 8106cac:	693a      	ldr	r2, [r7, #16]
 8106cae:	4313      	orrs	r3, r2
 8106cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	693a      	ldr	r2, [r7, #16]
 8106cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	68fa      	ldr	r2, [r7, #12]
 8106cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106cbe:	683b      	ldr	r3, [r7, #0]
 8106cc0:	685a      	ldr	r2, [r3, #4]
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	697a      	ldr	r2, [r7, #20]
 8106cca:	621a      	str	r2, [r3, #32]
}
 8106ccc:	bf00      	nop
 8106cce:	371c      	adds	r7, #28
 8106cd0:	46bd      	mov	sp, r7
 8106cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cd6:	4770      	bx	lr
 8106cd8:	40010000 	.word	0x40010000
 8106cdc:	40010400 	.word	0x40010400
 8106ce0:	40014000 	.word	0x40014000
 8106ce4:	40014400 	.word	0x40014400
 8106ce8:	40014800 	.word	0x40014800

08106cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106cec:	b480      	push	{r7}
 8106cee:	b087      	sub	sp, #28
 8106cf0:	af00      	add	r7, sp, #0
 8106cf2:	6078      	str	r0, [r7, #4]
 8106cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	6a1b      	ldr	r3, [r3, #32]
 8106cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	6a1b      	ldr	r3, [r3, #32]
 8106d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	685b      	ldr	r3, [r3, #4]
 8106d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	69db      	ldr	r3, [r3, #28]
 8106d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8106d14:	68fb      	ldr	r3, [r7, #12]
 8106d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8106d20:	68fb      	ldr	r3, [r7, #12]
 8106d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106d28:	683b      	ldr	r3, [r7, #0]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	021b      	lsls	r3, r3, #8
 8106d2e:	68fa      	ldr	r2, [r7, #12]
 8106d30:	4313      	orrs	r3, r2
 8106d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106d34:	693b      	ldr	r3, [r7, #16]
 8106d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8106d3c:	683b      	ldr	r3, [r7, #0]
 8106d3e:	689b      	ldr	r3, [r3, #8]
 8106d40:	031b      	lsls	r3, r3, #12
 8106d42:	693a      	ldr	r2, [r7, #16]
 8106d44:	4313      	orrs	r3, r2
 8106d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	4a18      	ldr	r2, [pc, #96]	; (8106dac <TIM_OC4_SetConfig+0xc0>)
 8106d4c:	4293      	cmp	r3, r2
 8106d4e:	d00f      	beq.n	8106d70 <TIM_OC4_SetConfig+0x84>
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	4a17      	ldr	r2, [pc, #92]	; (8106db0 <TIM_OC4_SetConfig+0xc4>)
 8106d54:	4293      	cmp	r3, r2
 8106d56:	d00b      	beq.n	8106d70 <TIM_OC4_SetConfig+0x84>
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	4a16      	ldr	r2, [pc, #88]	; (8106db4 <TIM_OC4_SetConfig+0xc8>)
 8106d5c:	4293      	cmp	r3, r2
 8106d5e:	d007      	beq.n	8106d70 <TIM_OC4_SetConfig+0x84>
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	4a15      	ldr	r2, [pc, #84]	; (8106db8 <TIM_OC4_SetConfig+0xcc>)
 8106d64:	4293      	cmp	r3, r2
 8106d66:	d003      	beq.n	8106d70 <TIM_OC4_SetConfig+0x84>
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	4a14      	ldr	r2, [pc, #80]	; (8106dbc <TIM_OC4_SetConfig+0xd0>)
 8106d6c:	4293      	cmp	r3, r2
 8106d6e:	d109      	bne.n	8106d84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106d70:	697b      	ldr	r3, [r7, #20]
 8106d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106d78:	683b      	ldr	r3, [r7, #0]
 8106d7a:	695b      	ldr	r3, [r3, #20]
 8106d7c:	019b      	lsls	r3, r3, #6
 8106d7e:	697a      	ldr	r2, [r7, #20]
 8106d80:	4313      	orrs	r3, r2
 8106d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	697a      	ldr	r2, [r7, #20]
 8106d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	68fa      	ldr	r2, [r7, #12]
 8106d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106d90:	683b      	ldr	r3, [r7, #0]
 8106d92:	685a      	ldr	r2, [r3, #4]
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	693a      	ldr	r2, [r7, #16]
 8106d9c:	621a      	str	r2, [r3, #32]
}
 8106d9e:	bf00      	nop
 8106da0:	371c      	adds	r7, #28
 8106da2:	46bd      	mov	sp, r7
 8106da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106da8:	4770      	bx	lr
 8106daa:	bf00      	nop
 8106dac:	40010000 	.word	0x40010000
 8106db0:	40010400 	.word	0x40010400
 8106db4:	40014000 	.word	0x40014000
 8106db8:	40014400 	.word	0x40014400
 8106dbc:	40014800 	.word	0x40014800

08106dc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106dc0:	b480      	push	{r7}
 8106dc2:	b087      	sub	sp, #28
 8106dc4:	af00      	add	r7, sp, #0
 8106dc6:	6078      	str	r0, [r7, #4]
 8106dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	6a1b      	ldr	r3, [r3, #32]
 8106dce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106dd2:	687b      	ldr	r3, [r7, #4]
 8106dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	6a1b      	ldr	r3, [r3, #32]
 8106dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	685b      	ldr	r3, [r3, #4]
 8106de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106de2:	687b      	ldr	r3, [r7, #4]
 8106de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106de8:	68fb      	ldr	r3, [r7, #12]
 8106dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106df4:	683b      	ldr	r3, [r7, #0]
 8106df6:	681b      	ldr	r3, [r3, #0]
 8106df8:	68fa      	ldr	r2, [r7, #12]
 8106dfa:	4313      	orrs	r3, r2
 8106dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8106dfe:	693b      	ldr	r3, [r7, #16]
 8106e00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106e06:	683b      	ldr	r3, [r7, #0]
 8106e08:	689b      	ldr	r3, [r3, #8]
 8106e0a:	041b      	lsls	r3, r3, #16
 8106e0c:	693a      	ldr	r2, [r7, #16]
 8106e0e:	4313      	orrs	r3, r2
 8106e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106e12:	687b      	ldr	r3, [r7, #4]
 8106e14:	4a17      	ldr	r2, [pc, #92]	; (8106e74 <TIM_OC5_SetConfig+0xb4>)
 8106e16:	4293      	cmp	r3, r2
 8106e18:	d00f      	beq.n	8106e3a <TIM_OC5_SetConfig+0x7a>
 8106e1a:	687b      	ldr	r3, [r7, #4]
 8106e1c:	4a16      	ldr	r2, [pc, #88]	; (8106e78 <TIM_OC5_SetConfig+0xb8>)
 8106e1e:	4293      	cmp	r3, r2
 8106e20:	d00b      	beq.n	8106e3a <TIM_OC5_SetConfig+0x7a>
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	4a15      	ldr	r2, [pc, #84]	; (8106e7c <TIM_OC5_SetConfig+0xbc>)
 8106e26:	4293      	cmp	r3, r2
 8106e28:	d007      	beq.n	8106e3a <TIM_OC5_SetConfig+0x7a>
 8106e2a:	687b      	ldr	r3, [r7, #4]
 8106e2c:	4a14      	ldr	r2, [pc, #80]	; (8106e80 <TIM_OC5_SetConfig+0xc0>)
 8106e2e:	4293      	cmp	r3, r2
 8106e30:	d003      	beq.n	8106e3a <TIM_OC5_SetConfig+0x7a>
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	4a13      	ldr	r2, [pc, #76]	; (8106e84 <TIM_OC5_SetConfig+0xc4>)
 8106e36:	4293      	cmp	r3, r2
 8106e38:	d109      	bne.n	8106e4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106e3a:	697b      	ldr	r3, [r7, #20]
 8106e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106e40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106e42:	683b      	ldr	r3, [r7, #0]
 8106e44:	695b      	ldr	r3, [r3, #20]
 8106e46:	021b      	lsls	r3, r3, #8
 8106e48:	697a      	ldr	r2, [r7, #20]
 8106e4a:	4313      	orrs	r3, r2
 8106e4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	697a      	ldr	r2, [r7, #20]
 8106e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	68fa      	ldr	r2, [r7, #12]
 8106e58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106e5a:	683b      	ldr	r3, [r7, #0]
 8106e5c:	685a      	ldr	r2, [r3, #4]
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	693a      	ldr	r2, [r7, #16]
 8106e66:	621a      	str	r2, [r3, #32]
}
 8106e68:	bf00      	nop
 8106e6a:	371c      	adds	r7, #28
 8106e6c:	46bd      	mov	sp, r7
 8106e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e72:	4770      	bx	lr
 8106e74:	40010000 	.word	0x40010000
 8106e78:	40010400 	.word	0x40010400
 8106e7c:	40014000 	.word	0x40014000
 8106e80:	40014400 	.word	0x40014400
 8106e84:	40014800 	.word	0x40014800

08106e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106e88:	b480      	push	{r7}
 8106e8a:	b087      	sub	sp, #28
 8106e8c:	af00      	add	r7, sp, #0
 8106e8e:	6078      	str	r0, [r7, #4]
 8106e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106e92:	687b      	ldr	r3, [r7, #4]
 8106e94:	6a1b      	ldr	r3, [r3, #32]
 8106e96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106e9e:	687b      	ldr	r3, [r7, #4]
 8106ea0:	6a1b      	ldr	r3, [r3, #32]
 8106ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106ea4:	687b      	ldr	r3, [r7, #4]
 8106ea6:	685b      	ldr	r3, [r3, #4]
 8106ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106eaa:	687b      	ldr	r3, [r7, #4]
 8106eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106eb0:	68fb      	ldr	r3, [r7, #12]
 8106eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106ebc:	683b      	ldr	r3, [r7, #0]
 8106ebe:	681b      	ldr	r3, [r3, #0]
 8106ec0:	021b      	lsls	r3, r3, #8
 8106ec2:	68fa      	ldr	r2, [r7, #12]
 8106ec4:	4313      	orrs	r3, r2
 8106ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106ec8:	693b      	ldr	r3, [r7, #16]
 8106eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106ed0:	683b      	ldr	r3, [r7, #0]
 8106ed2:	689b      	ldr	r3, [r3, #8]
 8106ed4:	051b      	lsls	r3, r3, #20
 8106ed6:	693a      	ldr	r2, [r7, #16]
 8106ed8:	4313      	orrs	r3, r2
 8106eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	4a18      	ldr	r2, [pc, #96]	; (8106f40 <TIM_OC6_SetConfig+0xb8>)
 8106ee0:	4293      	cmp	r3, r2
 8106ee2:	d00f      	beq.n	8106f04 <TIM_OC6_SetConfig+0x7c>
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	4a17      	ldr	r2, [pc, #92]	; (8106f44 <TIM_OC6_SetConfig+0xbc>)
 8106ee8:	4293      	cmp	r3, r2
 8106eea:	d00b      	beq.n	8106f04 <TIM_OC6_SetConfig+0x7c>
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	4a16      	ldr	r2, [pc, #88]	; (8106f48 <TIM_OC6_SetConfig+0xc0>)
 8106ef0:	4293      	cmp	r3, r2
 8106ef2:	d007      	beq.n	8106f04 <TIM_OC6_SetConfig+0x7c>
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	4a15      	ldr	r2, [pc, #84]	; (8106f4c <TIM_OC6_SetConfig+0xc4>)
 8106ef8:	4293      	cmp	r3, r2
 8106efa:	d003      	beq.n	8106f04 <TIM_OC6_SetConfig+0x7c>
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	4a14      	ldr	r2, [pc, #80]	; (8106f50 <TIM_OC6_SetConfig+0xc8>)
 8106f00:	4293      	cmp	r3, r2
 8106f02:	d109      	bne.n	8106f18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106f04:	697b      	ldr	r3, [r7, #20]
 8106f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8106f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8106f0c:	683b      	ldr	r3, [r7, #0]
 8106f0e:	695b      	ldr	r3, [r3, #20]
 8106f10:	029b      	lsls	r3, r3, #10
 8106f12:	697a      	ldr	r2, [r7, #20]
 8106f14:	4313      	orrs	r3, r2
 8106f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	697a      	ldr	r2, [r7, #20]
 8106f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	68fa      	ldr	r2, [r7, #12]
 8106f22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106f24:	683b      	ldr	r3, [r7, #0]
 8106f26:	685a      	ldr	r2, [r3, #4]
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	693a      	ldr	r2, [r7, #16]
 8106f30:	621a      	str	r2, [r3, #32]
}
 8106f32:	bf00      	nop
 8106f34:	371c      	adds	r7, #28
 8106f36:	46bd      	mov	sp, r7
 8106f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f3c:	4770      	bx	lr
 8106f3e:	bf00      	nop
 8106f40:	40010000 	.word	0x40010000
 8106f44:	40010400 	.word	0x40010400
 8106f48:	40014000 	.word	0x40014000
 8106f4c:	40014400 	.word	0x40014400
 8106f50:	40014800 	.word	0x40014800

08106f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106f54:	b480      	push	{r7}
 8106f56:	b087      	sub	sp, #28
 8106f58:	af00      	add	r7, sp, #0
 8106f5a:	60f8      	str	r0, [r7, #12]
 8106f5c:	60b9      	str	r1, [r7, #8]
 8106f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8106f60:	68fb      	ldr	r3, [r7, #12]
 8106f62:	6a1b      	ldr	r3, [r3, #32]
 8106f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106f66:	68fb      	ldr	r3, [r7, #12]
 8106f68:	6a1b      	ldr	r3, [r3, #32]
 8106f6a:	f023 0201 	bic.w	r2, r3, #1
 8106f6e:	68fb      	ldr	r3, [r7, #12]
 8106f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106f72:	68fb      	ldr	r3, [r7, #12]
 8106f74:	699b      	ldr	r3, [r3, #24]
 8106f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106f78:	693b      	ldr	r3, [r7, #16]
 8106f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8106f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	011b      	lsls	r3, r3, #4
 8106f84:	693a      	ldr	r2, [r7, #16]
 8106f86:	4313      	orrs	r3, r2
 8106f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106f8a:	697b      	ldr	r3, [r7, #20]
 8106f8c:	f023 030a 	bic.w	r3, r3, #10
 8106f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106f92:	697a      	ldr	r2, [r7, #20]
 8106f94:	68bb      	ldr	r3, [r7, #8]
 8106f96:	4313      	orrs	r3, r2
 8106f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8106f9a:	68fb      	ldr	r3, [r7, #12]
 8106f9c:	693a      	ldr	r2, [r7, #16]
 8106f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106fa0:	68fb      	ldr	r3, [r7, #12]
 8106fa2:	697a      	ldr	r2, [r7, #20]
 8106fa4:	621a      	str	r2, [r3, #32]
}
 8106fa6:	bf00      	nop
 8106fa8:	371c      	adds	r7, #28
 8106faa:	46bd      	mov	sp, r7
 8106fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fb0:	4770      	bx	lr

08106fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106fb2:	b480      	push	{r7}
 8106fb4:	b087      	sub	sp, #28
 8106fb6:	af00      	add	r7, sp, #0
 8106fb8:	60f8      	str	r0, [r7, #12]
 8106fba:	60b9      	str	r1, [r7, #8]
 8106fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106fbe:	68fb      	ldr	r3, [r7, #12]
 8106fc0:	6a1b      	ldr	r3, [r3, #32]
 8106fc2:	f023 0210 	bic.w	r2, r3, #16
 8106fc6:	68fb      	ldr	r3, [r7, #12]
 8106fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106fca:	68fb      	ldr	r3, [r7, #12]
 8106fcc:	699b      	ldr	r3, [r3, #24]
 8106fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106fd0:	68fb      	ldr	r3, [r7, #12]
 8106fd2:	6a1b      	ldr	r3, [r3, #32]
 8106fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106fd6:	697b      	ldr	r3, [r7, #20]
 8106fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	031b      	lsls	r3, r3, #12
 8106fe2:	697a      	ldr	r2, [r7, #20]
 8106fe4:	4313      	orrs	r3, r2
 8106fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106fe8:	693b      	ldr	r3, [r7, #16]
 8106fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8106fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8106ff0:	68bb      	ldr	r3, [r7, #8]
 8106ff2:	011b      	lsls	r3, r3, #4
 8106ff4:	693a      	ldr	r2, [r7, #16]
 8106ff6:	4313      	orrs	r3, r2
 8106ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8106ffa:	68fb      	ldr	r3, [r7, #12]
 8106ffc:	697a      	ldr	r2, [r7, #20]
 8106ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107000:	68fb      	ldr	r3, [r7, #12]
 8107002:	693a      	ldr	r2, [r7, #16]
 8107004:	621a      	str	r2, [r3, #32]
}
 8107006:	bf00      	nop
 8107008:	371c      	adds	r7, #28
 810700a:	46bd      	mov	sp, r7
 810700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107010:	4770      	bx	lr

08107012 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8107012:	b480      	push	{r7}
 8107014:	b085      	sub	sp, #20
 8107016:	af00      	add	r7, sp, #0
 8107018:	6078      	str	r0, [r7, #4]
 810701a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	689b      	ldr	r3, [r3, #8]
 8107020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107022:	68fb      	ldr	r3, [r7, #12]
 8107024:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8107028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810702c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810702e:	683a      	ldr	r2, [r7, #0]
 8107030:	68fb      	ldr	r3, [r7, #12]
 8107032:	4313      	orrs	r3, r2
 8107034:	f043 0307 	orr.w	r3, r3, #7
 8107038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810703a:	687b      	ldr	r3, [r7, #4]
 810703c:	68fa      	ldr	r2, [r7, #12]
 810703e:	609a      	str	r2, [r3, #8]
}
 8107040:	bf00      	nop
 8107042:	3714      	adds	r7, #20
 8107044:	46bd      	mov	sp, r7
 8107046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704a:	4770      	bx	lr

0810704c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810704c:	b480      	push	{r7}
 810704e:	b087      	sub	sp, #28
 8107050:	af00      	add	r7, sp, #0
 8107052:	60f8      	str	r0, [r7, #12]
 8107054:	60b9      	str	r1, [r7, #8]
 8107056:	607a      	str	r2, [r7, #4]
 8107058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810705a:	68fb      	ldr	r3, [r7, #12]
 810705c:	689b      	ldr	r3, [r3, #8]
 810705e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107060:	697b      	ldr	r3, [r7, #20]
 8107062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8107068:	683b      	ldr	r3, [r7, #0]
 810706a:	021a      	lsls	r2, r3, #8
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	431a      	orrs	r2, r3
 8107070:	68bb      	ldr	r3, [r7, #8]
 8107072:	4313      	orrs	r3, r2
 8107074:	697a      	ldr	r2, [r7, #20]
 8107076:	4313      	orrs	r3, r2
 8107078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810707a:	68fb      	ldr	r3, [r7, #12]
 810707c:	697a      	ldr	r2, [r7, #20]
 810707e:	609a      	str	r2, [r3, #8]
}
 8107080:	bf00      	nop
 8107082:	371c      	adds	r7, #28
 8107084:	46bd      	mov	sp, r7
 8107086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708a:	4770      	bx	lr

0810708c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810708c:	b480      	push	{r7}
 810708e:	b085      	sub	sp, #20
 8107090:	af00      	add	r7, sp, #0
 8107092:	6078      	str	r0, [r7, #4]
 8107094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810709c:	2b01      	cmp	r3, #1
 810709e:	d101      	bne.n	81070a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81070a0:	2302      	movs	r3, #2
 81070a2:	e06d      	b.n	8107180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81070a4:	687b      	ldr	r3, [r7, #4]
 81070a6:	2201      	movs	r2, #1
 81070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	2202      	movs	r2, #2
 81070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	681b      	ldr	r3, [r3, #0]
 81070b8:	685b      	ldr	r3, [r3, #4]
 81070ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	681b      	ldr	r3, [r3, #0]
 81070c0:	689b      	ldr	r3, [r3, #8]
 81070c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	681b      	ldr	r3, [r3, #0]
 81070c8:	4a30      	ldr	r2, [pc, #192]	; (810718c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81070ca:	4293      	cmp	r3, r2
 81070cc:	d004      	beq.n	81070d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	4a2f      	ldr	r2, [pc, #188]	; (8107190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81070d4:	4293      	cmp	r3, r2
 81070d6:	d108      	bne.n	81070ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81070d8:	68fb      	ldr	r3, [r7, #12]
 81070da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81070de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81070e0:	683b      	ldr	r3, [r7, #0]
 81070e2:	685b      	ldr	r3, [r3, #4]
 81070e4:	68fa      	ldr	r2, [r7, #12]
 81070e6:	4313      	orrs	r3, r2
 81070e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81070ea:	68fb      	ldr	r3, [r7, #12]
 81070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81070f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81070f2:	683b      	ldr	r3, [r7, #0]
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	68fa      	ldr	r2, [r7, #12]
 81070f8:	4313      	orrs	r3, r2
 81070fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	68fa      	ldr	r2, [r7, #12]
 8107102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107104:	687b      	ldr	r3, [r7, #4]
 8107106:	681b      	ldr	r3, [r3, #0]
 8107108:	4a20      	ldr	r2, [pc, #128]	; (810718c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810710a:	4293      	cmp	r3, r2
 810710c:	d022      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107116:	d01d      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	681b      	ldr	r3, [r3, #0]
 810711c:	4a1d      	ldr	r2, [pc, #116]	; (8107194 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810711e:	4293      	cmp	r3, r2
 8107120:	d018      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	4a1c      	ldr	r2, [pc, #112]	; (8107198 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107128:	4293      	cmp	r3, r2
 810712a:	d013      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	681b      	ldr	r3, [r3, #0]
 8107130:	4a1a      	ldr	r2, [pc, #104]	; (810719c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107132:	4293      	cmp	r3, r2
 8107134:	d00e      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	681b      	ldr	r3, [r3, #0]
 810713a:	4a15      	ldr	r2, [pc, #84]	; (8107190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810713c:	4293      	cmp	r3, r2
 810713e:	d009      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	681b      	ldr	r3, [r3, #0]
 8107144:	4a16      	ldr	r2, [pc, #88]	; (81071a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107146:	4293      	cmp	r3, r2
 8107148:	d004      	beq.n	8107154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	4a15      	ldr	r2, [pc, #84]	; (81071a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107150:	4293      	cmp	r3, r2
 8107152:	d10c      	bne.n	810716e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107154:	68bb      	ldr	r3, [r7, #8]
 8107156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810715a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810715c:	683b      	ldr	r3, [r7, #0]
 810715e:	689b      	ldr	r3, [r3, #8]
 8107160:	68ba      	ldr	r2, [r7, #8]
 8107162:	4313      	orrs	r3, r2
 8107164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107166:	687b      	ldr	r3, [r7, #4]
 8107168:	681b      	ldr	r3, [r3, #0]
 810716a:	68ba      	ldr	r2, [r7, #8]
 810716c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	2201      	movs	r2, #1
 8107172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	2200      	movs	r2, #0
 810717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810717e:	2300      	movs	r3, #0
}
 8107180:	4618      	mov	r0, r3
 8107182:	3714      	adds	r7, #20
 8107184:	46bd      	mov	sp, r7
 8107186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810718a:	4770      	bx	lr
 810718c:	40010000 	.word	0x40010000
 8107190:	40010400 	.word	0x40010400
 8107194:	40000400 	.word	0x40000400
 8107198:	40000800 	.word	0x40000800
 810719c:	40000c00 	.word	0x40000c00
 81071a0:	40001800 	.word	0x40001800
 81071a4:	40014000 	.word	0x40014000

081071a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81071a8:	b480      	push	{r7}
 81071aa:	b085      	sub	sp, #20
 81071ac:	af00      	add	r7, sp, #0
 81071ae:	6078      	str	r0, [r7, #4]
 81071b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81071b2:	2300      	movs	r3, #0
 81071b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81071b6:	687b      	ldr	r3, [r7, #4]
 81071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81071bc:	2b01      	cmp	r3, #1
 81071be:	d101      	bne.n	81071c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81071c0:	2302      	movs	r3, #2
 81071c2:	e065      	b.n	8107290 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81071c4:	687b      	ldr	r3, [r7, #4]
 81071c6:	2201      	movs	r2, #1
 81071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81071cc:	68fb      	ldr	r3, [r7, #12]
 81071ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81071d2:	683b      	ldr	r3, [r7, #0]
 81071d4:	68db      	ldr	r3, [r3, #12]
 81071d6:	4313      	orrs	r3, r2
 81071d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81071da:	68fb      	ldr	r3, [r7, #12]
 81071dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81071e0:	683b      	ldr	r3, [r7, #0]
 81071e2:	689b      	ldr	r3, [r3, #8]
 81071e4:	4313      	orrs	r3, r2
 81071e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81071e8:	68fb      	ldr	r3, [r7, #12]
 81071ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81071ee:	683b      	ldr	r3, [r7, #0]
 81071f0:	685b      	ldr	r3, [r3, #4]
 81071f2:	4313      	orrs	r3, r2
 81071f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81071f6:	68fb      	ldr	r3, [r7, #12]
 81071f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 81071fc:	683b      	ldr	r3, [r7, #0]
 81071fe:	681b      	ldr	r3, [r3, #0]
 8107200:	4313      	orrs	r3, r2
 8107202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107204:	68fb      	ldr	r3, [r7, #12]
 8107206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810720a:	683b      	ldr	r3, [r7, #0]
 810720c:	691b      	ldr	r3, [r3, #16]
 810720e:	4313      	orrs	r3, r2
 8107210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107212:	68fb      	ldr	r3, [r7, #12]
 8107214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107218:	683b      	ldr	r3, [r7, #0]
 810721a:	695b      	ldr	r3, [r3, #20]
 810721c:	4313      	orrs	r3, r2
 810721e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107220:	68fb      	ldr	r3, [r7, #12]
 8107222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107226:	683b      	ldr	r3, [r7, #0]
 8107228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810722a:	4313      	orrs	r3, r2
 810722c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107234:	683b      	ldr	r3, [r7, #0]
 8107236:	699b      	ldr	r3, [r3, #24]
 8107238:	041b      	lsls	r3, r3, #16
 810723a:	4313      	orrs	r3, r2
 810723c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810723e:	687b      	ldr	r3, [r7, #4]
 8107240:	681b      	ldr	r3, [r3, #0]
 8107242:	4a16      	ldr	r2, [pc, #88]	; (810729c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107244:	4293      	cmp	r3, r2
 8107246:	d004      	beq.n	8107252 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107248:	687b      	ldr	r3, [r7, #4]
 810724a:	681b      	ldr	r3, [r3, #0]
 810724c:	4a14      	ldr	r2, [pc, #80]	; (81072a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810724e:	4293      	cmp	r3, r2
 8107250:	d115      	bne.n	810727e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107252:	68fb      	ldr	r3, [r7, #12]
 8107254:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107258:	683b      	ldr	r3, [r7, #0]
 810725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810725c:	051b      	lsls	r3, r3, #20
 810725e:	4313      	orrs	r3, r2
 8107260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107262:	68fb      	ldr	r3, [r7, #12]
 8107264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107268:	683b      	ldr	r3, [r7, #0]
 810726a:	69db      	ldr	r3, [r3, #28]
 810726c:	4313      	orrs	r3, r2
 810726e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107270:	68fb      	ldr	r3, [r7, #12]
 8107272:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107276:	683b      	ldr	r3, [r7, #0]
 8107278:	6a1b      	ldr	r3, [r3, #32]
 810727a:	4313      	orrs	r3, r2
 810727c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810727e:	687b      	ldr	r3, [r7, #4]
 8107280:	681b      	ldr	r3, [r3, #0]
 8107282:	68fa      	ldr	r2, [r7, #12]
 8107284:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107286:	687b      	ldr	r3, [r7, #4]
 8107288:	2200      	movs	r2, #0
 810728a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810728e:	2300      	movs	r3, #0
}
 8107290:	4618      	mov	r0, r3
 8107292:	3714      	adds	r7, #20
 8107294:	46bd      	mov	sp, r7
 8107296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810729a:	4770      	bx	lr
 810729c:	40010000 	.word	0x40010000
 81072a0:	40010400 	.word	0x40010400

081072a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81072a4:	b580      	push	{r7, lr}
 81072a6:	b082      	sub	sp, #8
 81072a8:	af00      	add	r7, sp, #0
 81072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	2b00      	cmp	r3, #0
 81072b0:	d101      	bne.n	81072b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81072b2:	2301      	movs	r3, #1
 81072b4:	e042      	b.n	810733c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81072b6:	687b      	ldr	r3, [r7, #4]
 81072b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81072bc:	2b00      	cmp	r3, #0
 81072be:	d106      	bne.n	81072ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	2200      	movs	r2, #0
 81072c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81072c8:	6878      	ldr	r0, [r7, #4]
 81072ca:	f7fa fbaf 	bl	8101a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	2224      	movs	r2, #36	; 0x24
 81072d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	681a      	ldr	r2, [r3, #0]
 81072dc:	687b      	ldr	r3, [r7, #4]
 81072de:	681b      	ldr	r3, [r3, #0]
 81072e0:	f022 0201 	bic.w	r2, r2, #1
 81072e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81072e6:	6878      	ldr	r0, [r7, #4]
 81072e8:	f000 f8c2 	bl	8107470 <UART_SetConfig>
 81072ec:	4603      	mov	r3, r0
 81072ee:	2b01      	cmp	r3, #1
 81072f0:	d101      	bne.n	81072f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81072f2:	2301      	movs	r3, #1
 81072f4:	e022      	b.n	810733c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81072fa:	2b00      	cmp	r3, #0
 81072fc:	d002      	beq.n	8107304 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81072fe:	6878      	ldr	r0, [r7, #4]
 8107300:	f000 fe1e 	bl	8107f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	681b      	ldr	r3, [r3, #0]
 8107308:	685a      	ldr	r2, [r3, #4]
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	681b      	ldr	r3, [r3, #0]
 810730e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	681b      	ldr	r3, [r3, #0]
 8107318:	689a      	ldr	r2, [r3, #8]
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	681b      	ldr	r3, [r3, #0]
 810731e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	681a      	ldr	r2, [r3, #0]
 810732a:	687b      	ldr	r3, [r7, #4]
 810732c:	681b      	ldr	r3, [r3, #0]
 810732e:	f042 0201 	orr.w	r2, r2, #1
 8107332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107334:	6878      	ldr	r0, [r7, #4]
 8107336:	f000 fea5 	bl	8108084 <UART_CheckIdleState>
 810733a:	4603      	mov	r3, r0
}
 810733c:	4618      	mov	r0, r3
 810733e:	3708      	adds	r7, #8
 8107340:	46bd      	mov	sp, r7
 8107342:	bd80      	pop	{r7, pc}

08107344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107344:	b580      	push	{r7, lr}
 8107346:	b08a      	sub	sp, #40	; 0x28
 8107348:	af02      	add	r7, sp, #8
 810734a:	60f8      	str	r0, [r7, #12]
 810734c:	60b9      	str	r1, [r7, #8]
 810734e:	603b      	str	r3, [r7, #0]
 8107350:	4613      	mov	r3, r2
 8107352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810735a:	2b20      	cmp	r3, #32
 810735c:	f040 8083 	bne.w	8107466 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107360:	68bb      	ldr	r3, [r7, #8]
 8107362:	2b00      	cmp	r3, #0
 8107364:	d002      	beq.n	810736c <HAL_UART_Transmit+0x28>
 8107366:	88fb      	ldrh	r3, [r7, #6]
 8107368:	2b00      	cmp	r3, #0
 810736a:	d101      	bne.n	8107370 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810736c:	2301      	movs	r3, #1
 810736e:	e07b      	b.n	8107468 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107370:	68fb      	ldr	r3, [r7, #12]
 8107372:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107376:	2b01      	cmp	r3, #1
 8107378:	d101      	bne.n	810737e <HAL_UART_Transmit+0x3a>
 810737a:	2302      	movs	r3, #2
 810737c:	e074      	b.n	8107468 <HAL_UART_Transmit+0x124>
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	2201      	movs	r2, #1
 8107382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	2200      	movs	r2, #0
 810738a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810738e:	68fb      	ldr	r3, [r7, #12]
 8107390:	2221      	movs	r2, #33	; 0x21
 8107392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107396:	f7fa fd71 	bl	8101e7c <HAL_GetTick>
 810739a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810739c:	68fb      	ldr	r3, [r7, #12]
 810739e:	88fa      	ldrh	r2, [r7, #6]
 81073a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	88fa      	ldrh	r2, [r7, #6]
 81073a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81073ac:	68fb      	ldr	r3, [r7, #12]
 81073ae:	689b      	ldr	r3, [r3, #8]
 81073b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81073b4:	d108      	bne.n	81073c8 <HAL_UART_Transmit+0x84>
 81073b6:	68fb      	ldr	r3, [r7, #12]
 81073b8:	691b      	ldr	r3, [r3, #16]
 81073ba:	2b00      	cmp	r3, #0
 81073bc:	d104      	bne.n	81073c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81073be:	2300      	movs	r3, #0
 81073c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81073c2:	68bb      	ldr	r3, [r7, #8]
 81073c4:	61bb      	str	r3, [r7, #24]
 81073c6:	e003      	b.n	81073d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81073c8:	68bb      	ldr	r3, [r7, #8]
 81073ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81073cc:	2300      	movs	r3, #0
 81073ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	2200      	movs	r2, #0
 81073d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81073d8:	e02c      	b.n	8107434 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81073da:	683b      	ldr	r3, [r7, #0]
 81073dc:	9300      	str	r3, [sp, #0]
 81073de:	697b      	ldr	r3, [r7, #20]
 81073e0:	2200      	movs	r2, #0
 81073e2:	2180      	movs	r1, #128	; 0x80
 81073e4:	68f8      	ldr	r0, [r7, #12]
 81073e6:	f000 fe98 	bl	810811a <UART_WaitOnFlagUntilTimeout>
 81073ea:	4603      	mov	r3, r0
 81073ec:	2b00      	cmp	r3, #0
 81073ee:	d001      	beq.n	81073f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81073f0:	2303      	movs	r3, #3
 81073f2:	e039      	b.n	8107468 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81073f4:	69fb      	ldr	r3, [r7, #28]
 81073f6:	2b00      	cmp	r3, #0
 81073f8:	d10b      	bne.n	8107412 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81073fa:	69bb      	ldr	r3, [r7, #24]
 81073fc:	881b      	ldrh	r3, [r3, #0]
 81073fe:	461a      	mov	r2, r3
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	681b      	ldr	r3, [r3, #0]
 8107404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810740a:	69bb      	ldr	r3, [r7, #24]
 810740c:	3302      	adds	r3, #2
 810740e:	61bb      	str	r3, [r7, #24]
 8107410:	e007      	b.n	8107422 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107412:	69fb      	ldr	r3, [r7, #28]
 8107414:	781a      	ldrb	r2, [r3, #0]
 8107416:	68fb      	ldr	r3, [r7, #12]
 8107418:	681b      	ldr	r3, [r3, #0]
 810741a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810741c:	69fb      	ldr	r3, [r7, #28]
 810741e:	3301      	adds	r3, #1
 8107420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107422:	68fb      	ldr	r3, [r7, #12]
 8107424:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107428:	b29b      	uxth	r3, r3
 810742a:	3b01      	subs	r3, #1
 810742c:	b29a      	uxth	r2, r3
 810742e:	68fb      	ldr	r3, [r7, #12]
 8107430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810743a:	b29b      	uxth	r3, r3
 810743c:	2b00      	cmp	r3, #0
 810743e:	d1cc      	bne.n	81073da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107440:	683b      	ldr	r3, [r7, #0]
 8107442:	9300      	str	r3, [sp, #0]
 8107444:	697b      	ldr	r3, [r7, #20]
 8107446:	2200      	movs	r2, #0
 8107448:	2140      	movs	r1, #64	; 0x40
 810744a:	68f8      	ldr	r0, [r7, #12]
 810744c:	f000 fe65 	bl	810811a <UART_WaitOnFlagUntilTimeout>
 8107450:	4603      	mov	r3, r0
 8107452:	2b00      	cmp	r3, #0
 8107454:	d001      	beq.n	810745a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107456:	2303      	movs	r3, #3
 8107458:	e006      	b.n	8107468 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810745a:	68fb      	ldr	r3, [r7, #12]
 810745c:	2220      	movs	r2, #32
 810745e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8107462:	2300      	movs	r3, #0
 8107464:	e000      	b.n	8107468 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107466:	2302      	movs	r3, #2
  }
}
 8107468:	4618      	mov	r0, r3
 810746a:	3720      	adds	r7, #32
 810746c:	46bd      	mov	sp, r7
 810746e:	bd80      	pop	{r7, pc}

08107470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107474:	b092      	sub	sp, #72	; 0x48
 8107476:	af00      	add	r7, sp, #0
 8107478:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810747a:	2300      	movs	r3, #0
 810747c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107480:	697b      	ldr	r3, [r7, #20]
 8107482:	689a      	ldr	r2, [r3, #8]
 8107484:	697b      	ldr	r3, [r7, #20]
 8107486:	691b      	ldr	r3, [r3, #16]
 8107488:	431a      	orrs	r2, r3
 810748a:	697b      	ldr	r3, [r7, #20]
 810748c:	695b      	ldr	r3, [r3, #20]
 810748e:	431a      	orrs	r2, r3
 8107490:	697b      	ldr	r3, [r7, #20]
 8107492:	69db      	ldr	r3, [r3, #28]
 8107494:	4313      	orrs	r3, r2
 8107496:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107498:	697b      	ldr	r3, [r7, #20]
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	681a      	ldr	r2, [r3, #0]
 810749e:	4bbd      	ldr	r3, [pc, #756]	; (8107794 <UART_SetConfig+0x324>)
 81074a0:	4013      	ands	r3, r2
 81074a2:	697a      	ldr	r2, [r7, #20]
 81074a4:	6812      	ldr	r2, [r2, #0]
 81074a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81074a8:	430b      	orrs	r3, r1
 81074aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81074ac:	697b      	ldr	r3, [r7, #20]
 81074ae:	681b      	ldr	r3, [r3, #0]
 81074b0:	685b      	ldr	r3, [r3, #4]
 81074b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81074b6:	697b      	ldr	r3, [r7, #20]
 81074b8:	68da      	ldr	r2, [r3, #12]
 81074ba:	697b      	ldr	r3, [r7, #20]
 81074bc:	681b      	ldr	r3, [r3, #0]
 81074be:	430a      	orrs	r2, r1
 81074c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81074c2:	697b      	ldr	r3, [r7, #20]
 81074c4:	699b      	ldr	r3, [r3, #24]
 81074c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81074c8:	697b      	ldr	r3, [r7, #20]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	4ab2      	ldr	r2, [pc, #712]	; (8107798 <UART_SetConfig+0x328>)
 81074ce:	4293      	cmp	r3, r2
 81074d0:	d004      	beq.n	81074dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81074d2:	697b      	ldr	r3, [r7, #20]
 81074d4:	6a1b      	ldr	r3, [r3, #32]
 81074d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81074d8:	4313      	orrs	r3, r2
 81074da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81074dc:	697b      	ldr	r3, [r7, #20]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	689b      	ldr	r3, [r3, #8]
 81074e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81074e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81074ea:	697a      	ldr	r2, [r7, #20]
 81074ec:	6812      	ldr	r2, [r2, #0]
 81074ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81074f0:	430b      	orrs	r3, r1
 81074f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81074f4:	697b      	ldr	r3, [r7, #20]
 81074f6:	681b      	ldr	r3, [r3, #0]
 81074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81074fa:	f023 010f 	bic.w	r1, r3, #15
 81074fe:	697b      	ldr	r3, [r7, #20]
 8107500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107502:	697b      	ldr	r3, [r7, #20]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	430a      	orrs	r2, r1
 8107508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810750a:	697b      	ldr	r3, [r7, #20]
 810750c:	681b      	ldr	r3, [r3, #0]
 810750e:	4aa3      	ldr	r2, [pc, #652]	; (810779c <UART_SetConfig+0x32c>)
 8107510:	4293      	cmp	r3, r2
 8107512:	d177      	bne.n	8107604 <UART_SetConfig+0x194>
 8107514:	4ba2      	ldr	r3, [pc, #648]	; (81077a0 <UART_SetConfig+0x330>)
 8107516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810751c:	2b28      	cmp	r3, #40	; 0x28
 810751e:	d86d      	bhi.n	81075fc <UART_SetConfig+0x18c>
 8107520:	a201      	add	r2, pc, #4	; (adr r2, 8107528 <UART_SetConfig+0xb8>)
 8107522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107526:	bf00      	nop
 8107528:	081075cd 	.word	0x081075cd
 810752c:	081075fd 	.word	0x081075fd
 8107530:	081075fd 	.word	0x081075fd
 8107534:	081075fd 	.word	0x081075fd
 8107538:	081075fd 	.word	0x081075fd
 810753c:	081075fd 	.word	0x081075fd
 8107540:	081075fd 	.word	0x081075fd
 8107544:	081075fd 	.word	0x081075fd
 8107548:	081075d5 	.word	0x081075d5
 810754c:	081075fd 	.word	0x081075fd
 8107550:	081075fd 	.word	0x081075fd
 8107554:	081075fd 	.word	0x081075fd
 8107558:	081075fd 	.word	0x081075fd
 810755c:	081075fd 	.word	0x081075fd
 8107560:	081075fd 	.word	0x081075fd
 8107564:	081075fd 	.word	0x081075fd
 8107568:	081075dd 	.word	0x081075dd
 810756c:	081075fd 	.word	0x081075fd
 8107570:	081075fd 	.word	0x081075fd
 8107574:	081075fd 	.word	0x081075fd
 8107578:	081075fd 	.word	0x081075fd
 810757c:	081075fd 	.word	0x081075fd
 8107580:	081075fd 	.word	0x081075fd
 8107584:	081075fd 	.word	0x081075fd
 8107588:	081075e5 	.word	0x081075e5
 810758c:	081075fd 	.word	0x081075fd
 8107590:	081075fd 	.word	0x081075fd
 8107594:	081075fd 	.word	0x081075fd
 8107598:	081075fd 	.word	0x081075fd
 810759c:	081075fd 	.word	0x081075fd
 81075a0:	081075fd 	.word	0x081075fd
 81075a4:	081075fd 	.word	0x081075fd
 81075a8:	081075ed 	.word	0x081075ed
 81075ac:	081075fd 	.word	0x081075fd
 81075b0:	081075fd 	.word	0x081075fd
 81075b4:	081075fd 	.word	0x081075fd
 81075b8:	081075fd 	.word	0x081075fd
 81075bc:	081075fd 	.word	0x081075fd
 81075c0:	081075fd 	.word	0x081075fd
 81075c4:	081075fd 	.word	0x081075fd
 81075c8:	081075f5 	.word	0x081075f5
 81075cc:	2301      	movs	r3, #1
 81075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075d2:	e220      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81075d4:	2304      	movs	r3, #4
 81075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075da:	e21c      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81075dc:	2308      	movs	r3, #8
 81075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075e2:	e218      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81075e4:	2310      	movs	r3, #16
 81075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075ea:	e214      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81075ec:	2320      	movs	r3, #32
 81075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075f2:	e210      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81075f4:	2340      	movs	r3, #64	; 0x40
 81075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075fa:	e20c      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81075fc:	2380      	movs	r3, #128	; 0x80
 81075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107602:	e208      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107604:	697b      	ldr	r3, [r7, #20]
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	4a66      	ldr	r2, [pc, #408]	; (81077a4 <UART_SetConfig+0x334>)
 810760a:	4293      	cmp	r3, r2
 810760c:	d130      	bne.n	8107670 <UART_SetConfig+0x200>
 810760e:	4b64      	ldr	r3, [pc, #400]	; (81077a0 <UART_SetConfig+0x330>)
 8107610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107612:	f003 0307 	and.w	r3, r3, #7
 8107616:	2b05      	cmp	r3, #5
 8107618:	d826      	bhi.n	8107668 <UART_SetConfig+0x1f8>
 810761a:	a201      	add	r2, pc, #4	; (adr r2, 8107620 <UART_SetConfig+0x1b0>)
 810761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107620:	08107639 	.word	0x08107639
 8107624:	08107641 	.word	0x08107641
 8107628:	08107649 	.word	0x08107649
 810762c:	08107651 	.word	0x08107651
 8107630:	08107659 	.word	0x08107659
 8107634:	08107661 	.word	0x08107661
 8107638:	2300      	movs	r3, #0
 810763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810763e:	e1ea      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107640:	2304      	movs	r3, #4
 8107642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107646:	e1e6      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107648:	2308      	movs	r3, #8
 810764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810764e:	e1e2      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107650:	2310      	movs	r3, #16
 8107652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107656:	e1de      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107658:	2320      	movs	r3, #32
 810765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810765e:	e1da      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107660:	2340      	movs	r3, #64	; 0x40
 8107662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107666:	e1d6      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107668:	2380      	movs	r3, #128	; 0x80
 810766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810766e:	e1d2      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107670:	697b      	ldr	r3, [r7, #20]
 8107672:	681b      	ldr	r3, [r3, #0]
 8107674:	4a4c      	ldr	r2, [pc, #304]	; (81077a8 <UART_SetConfig+0x338>)
 8107676:	4293      	cmp	r3, r2
 8107678:	d130      	bne.n	81076dc <UART_SetConfig+0x26c>
 810767a:	4b49      	ldr	r3, [pc, #292]	; (81077a0 <UART_SetConfig+0x330>)
 810767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810767e:	f003 0307 	and.w	r3, r3, #7
 8107682:	2b05      	cmp	r3, #5
 8107684:	d826      	bhi.n	81076d4 <UART_SetConfig+0x264>
 8107686:	a201      	add	r2, pc, #4	; (adr r2, 810768c <UART_SetConfig+0x21c>)
 8107688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810768c:	081076a5 	.word	0x081076a5
 8107690:	081076ad 	.word	0x081076ad
 8107694:	081076b5 	.word	0x081076b5
 8107698:	081076bd 	.word	0x081076bd
 810769c:	081076c5 	.word	0x081076c5
 81076a0:	081076cd 	.word	0x081076cd
 81076a4:	2300      	movs	r3, #0
 81076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076aa:	e1b4      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076ac:	2304      	movs	r3, #4
 81076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076b2:	e1b0      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076b4:	2308      	movs	r3, #8
 81076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076ba:	e1ac      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076bc:	2310      	movs	r3, #16
 81076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076c2:	e1a8      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076c4:	2320      	movs	r3, #32
 81076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076ca:	e1a4      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076cc:	2340      	movs	r3, #64	; 0x40
 81076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076d2:	e1a0      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076d4:	2380      	movs	r3, #128	; 0x80
 81076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076da:	e19c      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81076dc:	697b      	ldr	r3, [r7, #20]
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	4a32      	ldr	r2, [pc, #200]	; (81077ac <UART_SetConfig+0x33c>)
 81076e2:	4293      	cmp	r3, r2
 81076e4:	d130      	bne.n	8107748 <UART_SetConfig+0x2d8>
 81076e6:	4b2e      	ldr	r3, [pc, #184]	; (81077a0 <UART_SetConfig+0x330>)
 81076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81076ea:	f003 0307 	and.w	r3, r3, #7
 81076ee:	2b05      	cmp	r3, #5
 81076f0:	d826      	bhi.n	8107740 <UART_SetConfig+0x2d0>
 81076f2:	a201      	add	r2, pc, #4	; (adr r2, 81076f8 <UART_SetConfig+0x288>)
 81076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076f8:	08107711 	.word	0x08107711
 81076fc:	08107719 	.word	0x08107719
 8107700:	08107721 	.word	0x08107721
 8107704:	08107729 	.word	0x08107729
 8107708:	08107731 	.word	0x08107731
 810770c:	08107739 	.word	0x08107739
 8107710:	2300      	movs	r3, #0
 8107712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107716:	e17e      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107718:	2304      	movs	r3, #4
 810771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810771e:	e17a      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107720:	2308      	movs	r3, #8
 8107722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107726:	e176      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107728:	2310      	movs	r3, #16
 810772a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810772e:	e172      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107730:	2320      	movs	r3, #32
 8107732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107736:	e16e      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107738:	2340      	movs	r3, #64	; 0x40
 810773a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810773e:	e16a      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107740:	2380      	movs	r3, #128	; 0x80
 8107742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107746:	e166      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107748:	697b      	ldr	r3, [r7, #20]
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	4a18      	ldr	r2, [pc, #96]	; (81077b0 <UART_SetConfig+0x340>)
 810774e:	4293      	cmp	r3, r2
 8107750:	d140      	bne.n	81077d4 <UART_SetConfig+0x364>
 8107752:	4b13      	ldr	r3, [pc, #76]	; (81077a0 <UART_SetConfig+0x330>)
 8107754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107756:	f003 0307 	and.w	r3, r3, #7
 810775a:	2b05      	cmp	r3, #5
 810775c:	d836      	bhi.n	81077cc <UART_SetConfig+0x35c>
 810775e:	a201      	add	r2, pc, #4	; (adr r2, 8107764 <UART_SetConfig+0x2f4>)
 8107760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107764:	0810777d 	.word	0x0810777d
 8107768:	08107785 	.word	0x08107785
 810776c:	0810778d 	.word	0x0810778d
 8107770:	081077b5 	.word	0x081077b5
 8107774:	081077bd 	.word	0x081077bd
 8107778:	081077c5 	.word	0x081077c5
 810777c:	2300      	movs	r3, #0
 810777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107782:	e148      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107784:	2304      	movs	r3, #4
 8107786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810778a:	e144      	b.n	8107a16 <UART_SetConfig+0x5a6>
 810778c:	2308      	movs	r3, #8
 810778e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107792:	e140      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107794:	cfff69f3 	.word	0xcfff69f3
 8107798:	58000c00 	.word	0x58000c00
 810779c:	40011000 	.word	0x40011000
 81077a0:	58024400 	.word	0x58024400
 81077a4:	40004400 	.word	0x40004400
 81077a8:	40004800 	.word	0x40004800
 81077ac:	40004c00 	.word	0x40004c00
 81077b0:	40005000 	.word	0x40005000
 81077b4:	2310      	movs	r3, #16
 81077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077ba:	e12c      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81077bc:	2320      	movs	r3, #32
 81077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077c2:	e128      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81077c4:	2340      	movs	r3, #64	; 0x40
 81077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077ca:	e124      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81077cc:	2380      	movs	r3, #128	; 0x80
 81077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81077d2:	e120      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81077d4:	697b      	ldr	r3, [r7, #20]
 81077d6:	681b      	ldr	r3, [r3, #0]
 81077d8:	4acb      	ldr	r2, [pc, #812]	; (8107b08 <UART_SetConfig+0x698>)
 81077da:	4293      	cmp	r3, r2
 81077dc:	d176      	bne.n	81078cc <UART_SetConfig+0x45c>
 81077de:	4bcb      	ldr	r3, [pc, #812]	; (8107b0c <UART_SetConfig+0x69c>)
 81077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81077e6:	2b28      	cmp	r3, #40	; 0x28
 81077e8:	d86c      	bhi.n	81078c4 <UART_SetConfig+0x454>
 81077ea:	a201      	add	r2, pc, #4	; (adr r2, 81077f0 <UART_SetConfig+0x380>)
 81077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077f0:	08107895 	.word	0x08107895
 81077f4:	081078c5 	.word	0x081078c5
 81077f8:	081078c5 	.word	0x081078c5
 81077fc:	081078c5 	.word	0x081078c5
 8107800:	081078c5 	.word	0x081078c5
 8107804:	081078c5 	.word	0x081078c5
 8107808:	081078c5 	.word	0x081078c5
 810780c:	081078c5 	.word	0x081078c5
 8107810:	0810789d 	.word	0x0810789d
 8107814:	081078c5 	.word	0x081078c5
 8107818:	081078c5 	.word	0x081078c5
 810781c:	081078c5 	.word	0x081078c5
 8107820:	081078c5 	.word	0x081078c5
 8107824:	081078c5 	.word	0x081078c5
 8107828:	081078c5 	.word	0x081078c5
 810782c:	081078c5 	.word	0x081078c5
 8107830:	081078a5 	.word	0x081078a5
 8107834:	081078c5 	.word	0x081078c5
 8107838:	081078c5 	.word	0x081078c5
 810783c:	081078c5 	.word	0x081078c5
 8107840:	081078c5 	.word	0x081078c5
 8107844:	081078c5 	.word	0x081078c5
 8107848:	081078c5 	.word	0x081078c5
 810784c:	081078c5 	.word	0x081078c5
 8107850:	081078ad 	.word	0x081078ad
 8107854:	081078c5 	.word	0x081078c5
 8107858:	081078c5 	.word	0x081078c5
 810785c:	081078c5 	.word	0x081078c5
 8107860:	081078c5 	.word	0x081078c5
 8107864:	081078c5 	.word	0x081078c5
 8107868:	081078c5 	.word	0x081078c5
 810786c:	081078c5 	.word	0x081078c5
 8107870:	081078b5 	.word	0x081078b5
 8107874:	081078c5 	.word	0x081078c5
 8107878:	081078c5 	.word	0x081078c5
 810787c:	081078c5 	.word	0x081078c5
 8107880:	081078c5 	.word	0x081078c5
 8107884:	081078c5 	.word	0x081078c5
 8107888:	081078c5 	.word	0x081078c5
 810788c:	081078c5 	.word	0x081078c5
 8107890:	081078bd 	.word	0x081078bd
 8107894:	2301      	movs	r3, #1
 8107896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810789a:	e0bc      	b.n	8107a16 <UART_SetConfig+0x5a6>
 810789c:	2304      	movs	r3, #4
 810789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078a2:	e0b8      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81078a4:	2308      	movs	r3, #8
 81078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078aa:	e0b4      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81078ac:	2310      	movs	r3, #16
 81078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078b2:	e0b0      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81078b4:	2320      	movs	r3, #32
 81078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078ba:	e0ac      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81078bc:	2340      	movs	r3, #64	; 0x40
 81078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078c2:	e0a8      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81078c4:	2380      	movs	r3, #128	; 0x80
 81078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81078ca:	e0a4      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81078cc:	697b      	ldr	r3, [r7, #20]
 81078ce:	681b      	ldr	r3, [r3, #0]
 81078d0:	4a8f      	ldr	r2, [pc, #572]	; (8107b10 <UART_SetConfig+0x6a0>)
 81078d2:	4293      	cmp	r3, r2
 81078d4:	d130      	bne.n	8107938 <UART_SetConfig+0x4c8>
 81078d6:	4b8d      	ldr	r3, [pc, #564]	; (8107b0c <UART_SetConfig+0x69c>)
 81078d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078da:	f003 0307 	and.w	r3, r3, #7
 81078de:	2b05      	cmp	r3, #5
 81078e0:	d826      	bhi.n	8107930 <UART_SetConfig+0x4c0>
 81078e2:	a201      	add	r2, pc, #4	; (adr r2, 81078e8 <UART_SetConfig+0x478>)
 81078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078e8:	08107901 	.word	0x08107901
 81078ec:	08107909 	.word	0x08107909
 81078f0:	08107911 	.word	0x08107911
 81078f4:	08107919 	.word	0x08107919
 81078f8:	08107921 	.word	0x08107921
 81078fc:	08107929 	.word	0x08107929
 8107900:	2300      	movs	r3, #0
 8107902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107906:	e086      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107908:	2304      	movs	r3, #4
 810790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810790e:	e082      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107910:	2308      	movs	r3, #8
 8107912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107916:	e07e      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107918:	2310      	movs	r3, #16
 810791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810791e:	e07a      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107920:	2320      	movs	r3, #32
 8107922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107926:	e076      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107928:	2340      	movs	r3, #64	; 0x40
 810792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810792e:	e072      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107930:	2380      	movs	r3, #128	; 0x80
 8107932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107936:	e06e      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107938:	697b      	ldr	r3, [r7, #20]
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	4a75      	ldr	r2, [pc, #468]	; (8107b14 <UART_SetConfig+0x6a4>)
 810793e:	4293      	cmp	r3, r2
 8107940:	d130      	bne.n	81079a4 <UART_SetConfig+0x534>
 8107942:	4b72      	ldr	r3, [pc, #456]	; (8107b0c <UART_SetConfig+0x69c>)
 8107944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107946:	f003 0307 	and.w	r3, r3, #7
 810794a:	2b05      	cmp	r3, #5
 810794c:	d826      	bhi.n	810799c <UART_SetConfig+0x52c>
 810794e:	a201      	add	r2, pc, #4	; (adr r2, 8107954 <UART_SetConfig+0x4e4>)
 8107950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107954:	0810796d 	.word	0x0810796d
 8107958:	08107975 	.word	0x08107975
 810795c:	0810797d 	.word	0x0810797d
 8107960:	08107985 	.word	0x08107985
 8107964:	0810798d 	.word	0x0810798d
 8107968:	08107995 	.word	0x08107995
 810796c:	2300      	movs	r3, #0
 810796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107972:	e050      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107974:	2304      	movs	r3, #4
 8107976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810797a:	e04c      	b.n	8107a16 <UART_SetConfig+0x5a6>
 810797c:	2308      	movs	r3, #8
 810797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107982:	e048      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107984:	2310      	movs	r3, #16
 8107986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810798a:	e044      	b.n	8107a16 <UART_SetConfig+0x5a6>
 810798c:	2320      	movs	r3, #32
 810798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107992:	e040      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107994:	2340      	movs	r3, #64	; 0x40
 8107996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810799a:	e03c      	b.n	8107a16 <UART_SetConfig+0x5a6>
 810799c:	2380      	movs	r3, #128	; 0x80
 810799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079a2:	e038      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81079a4:	697b      	ldr	r3, [r7, #20]
 81079a6:	681b      	ldr	r3, [r3, #0]
 81079a8:	4a5b      	ldr	r2, [pc, #364]	; (8107b18 <UART_SetConfig+0x6a8>)
 81079aa:	4293      	cmp	r3, r2
 81079ac:	d130      	bne.n	8107a10 <UART_SetConfig+0x5a0>
 81079ae:	4b57      	ldr	r3, [pc, #348]	; (8107b0c <UART_SetConfig+0x69c>)
 81079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81079b2:	f003 0307 	and.w	r3, r3, #7
 81079b6:	2b05      	cmp	r3, #5
 81079b8:	d826      	bhi.n	8107a08 <UART_SetConfig+0x598>
 81079ba:	a201      	add	r2, pc, #4	; (adr r2, 81079c0 <UART_SetConfig+0x550>)
 81079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079c0:	081079d9 	.word	0x081079d9
 81079c4:	081079e1 	.word	0x081079e1
 81079c8:	081079e9 	.word	0x081079e9
 81079cc:	081079f1 	.word	0x081079f1
 81079d0:	081079f9 	.word	0x081079f9
 81079d4:	08107a01 	.word	0x08107a01
 81079d8:	2302      	movs	r3, #2
 81079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079de:	e01a      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81079e0:	2304      	movs	r3, #4
 81079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079e6:	e016      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81079e8:	2308      	movs	r3, #8
 81079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079ee:	e012      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81079f0:	2310      	movs	r3, #16
 81079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079f6:	e00e      	b.n	8107a16 <UART_SetConfig+0x5a6>
 81079f8:	2320      	movs	r3, #32
 81079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81079fe:	e00a      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107a00:	2340      	movs	r3, #64	; 0x40
 8107a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a06:	e006      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107a08:	2380      	movs	r3, #128	; 0x80
 8107a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a0e:	e002      	b.n	8107a16 <UART_SetConfig+0x5a6>
 8107a10:	2380      	movs	r3, #128	; 0x80
 8107a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107a16:	697b      	ldr	r3, [r7, #20]
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	4a3f      	ldr	r2, [pc, #252]	; (8107b18 <UART_SetConfig+0x6a8>)
 8107a1c:	4293      	cmp	r3, r2
 8107a1e:	f040 80f8 	bne.w	8107c12 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107a22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107a26:	2b20      	cmp	r3, #32
 8107a28:	dc46      	bgt.n	8107ab8 <UART_SetConfig+0x648>
 8107a2a:	2b02      	cmp	r3, #2
 8107a2c:	f2c0 8082 	blt.w	8107b34 <UART_SetConfig+0x6c4>
 8107a30:	3b02      	subs	r3, #2
 8107a32:	2b1e      	cmp	r3, #30
 8107a34:	d87e      	bhi.n	8107b34 <UART_SetConfig+0x6c4>
 8107a36:	a201      	add	r2, pc, #4	; (adr r2, 8107a3c <UART_SetConfig+0x5cc>)
 8107a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a3c:	08107abf 	.word	0x08107abf
 8107a40:	08107b35 	.word	0x08107b35
 8107a44:	08107ac7 	.word	0x08107ac7
 8107a48:	08107b35 	.word	0x08107b35
 8107a4c:	08107b35 	.word	0x08107b35
 8107a50:	08107b35 	.word	0x08107b35
 8107a54:	08107ad7 	.word	0x08107ad7
 8107a58:	08107b35 	.word	0x08107b35
 8107a5c:	08107b35 	.word	0x08107b35
 8107a60:	08107b35 	.word	0x08107b35
 8107a64:	08107b35 	.word	0x08107b35
 8107a68:	08107b35 	.word	0x08107b35
 8107a6c:	08107b35 	.word	0x08107b35
 8107a70:	08107b35 	.word	0x08107b35
 8107a74:	08107ae7 	.word	0x08107ae7
 8107a78:	08107b35 	.word	0x08107b35
 8107a7c:	08107b35 	.word	0x08107b35
 8107a80:	08107b35 	.word	0x08107b35
 8107a84:	08107b35 	.word	0x08107b35
 8107a88:	08107b35 	.word	0x08107b35
 8107a8c:	08107b35 	.word	0x08107b35
 8107a90:	08107b35 	.word	0x08107b35
 8107a94:	08107b35 	.word	0x08107b35
 8107a98:	08107b35 	.word	0x08107b35
 8107a9c:	08107b35 	.word	0x08107b35
 8107aa0:	08107b35 	.word	0x08107b35
 8107aa4:	08107b35 	.word	0x08107b35
 8107aa8:	08107b35 	.word	0x08107b35
 8107aac:	08107b35 	.word	0x08107b35
 8107ab0:	08107b35 	.word	0x08107b35
 8107ab4:	08107b27 	.word	0x08107b27
 8107ab8:	2b40      	cmp	r3, #64	; 0x40
 8107aba:	d037      	beq.n	8107b2c <UART_SetConfig+0x6bc>
 8107abc:	e03a      	b.n	8107b34 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107abe:	f7fd fea1 	bl	8105804 <HAL_RCCEx_GetD3PCLK1Freq>
 8107ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107ac4:	e03c      	b.n	8107b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107aca:	4618      	mov	r0, r3
 8107acc:	f7fd feb0 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ad4:	e034      	b.n	8107b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107ad6:	f107 0318 	add.w	r3, r7, #24
 8107ada:	4618      	mov	r0, r3
 8107adc:	f7fd fffc 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107ae0:	69fb      	ldr	r3, [r7, #28]
 8107ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ae4:	e02c      	b.n	8107b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107ae6:	4b09      	ldr	r3, [pc, #36]	; (8107b0c <UART_SetConfig+0x69c>)
 8107ae8:	681b      	ldr	r3, [r3, #0]
 8107aea:	f003 0320 	and.w	r3, r3, #32
 8107aee:	2b00      	cmp	r3, #0
 8107af0:	d016      	beq.n	8107b20 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107af2:	4b06      	ldr	r3, [pc, #24]	; (8107b0c <UART_SetConfig+0x69c>)
 8107af4:	681b      	ldr	r3, [r3, #0]
 8107af6:	08db      	lsrs	r3, r3, #3
 8107af8:	f003 0303 	and.w	r3, r3, #3
 8107afc:	4a07      	ldr	r2, [pc, #28]	; (8107b1c <UART_SetConfig+0x6ac>)
 8107afe:	fa22 f303 	lsr.w	r3, r2, r3
 8107b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107b04:	e01c      	b.n	8107b40 <UART_SetConfig+0x6d0>
 8107b06:	bf00      	nop
 8107b08:	40011400 	.word	0x40011400
 8107b0c:	58024400 	.word	0x58024400
 8107b10:	40007800 	.word	0x40007800
 8107b14:	40007c00 	.word	0x40007c00
 8107b18:	58000c00 	.word	0x58000c00
 8107b1c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107b20:	4b9d      	ldr	r3, [pc, #628]	; (8107d98 <UART_SetConfig+0x928>)
 8107b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b24:	e00c      	b.n	8107b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107b26:	4b9d      	ldr	r3, [pc, #628]	; (8107d9c <UART_SetConfig+0x92c>)
 8107b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b2a:	e009      	b.n	8107b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b32:	e005      	b.n	8107b40 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107b34:	2300      	movs	r3, #0
 8107b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107b38:	2301      	movs	r3, #1
 8107b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107b3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107b42:	2b00      	cmp	r3, #0
 8107b44:	f000 81de 	beq.w	8107f04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107b48:	697b      	ldr	r3, [r7, #20]
 8107b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107b4c:	4a94      	ldr	r2, [pc, #592]	; (8107da0 <UART_SetConfig+0x930>)
 8107b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107b52:	461a      	mov	r2, r3
 8107b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8107b5a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107b5c:	697b      	ldr	r3, [r7, #20]
 8107b5e:	685a      	ldr	r2, [r3, #4]
 8107b60:	4613      	mov	r3, r2
 8107b62:	005b      	lsls	r3, r3, #1
 8107b64:	4413      	add	r3, r2
 8107b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107b68:	429a      	cmp	r2, r3
 8107b6a:	d305      	bcc.n	8107b78 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107b6c:	697b      	ldr	r3, [r7, #20]
 8107b6e:	685b      	ldr	r3, [r3, #4]
 8107b70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107b74:	429a      	cmp	r2, r3
 8107b76:	d903      	bls.n	8107b80 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8107b78:	2301      	movs	r3, #1
 8107b7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107b7e:	e1c1      	b.n	8107f04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107b82:	2200      	movs	r2, #0
 8107b84:	60bb      	str	r3, [r7, #8]
 8107b86:	60fa      	str	r2, [r7, #12]
 8107b88:	697b      	ldr	r3, [r7, #20]
 8107b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107b8c:	4a84      	ldr	r2, [pc, #528]	; (8107da0 <UART_SetConfig+0x930>)
 8107b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107b92:	b29b      	uxth	r3, r3
 8107b94:	2200      	movs	r2, #0
 8107b96:	603b      	str	r3, [r7, #0]
 8107b98:	607a      	str	r2, [r7, #4]
 8107b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8107ba2:	f7f9 f8f9 	bl	8100d98 <__aeabi_uldivmod>
 8107ba6:	4602      	mov	r2, r0
 8107ba8:	460b      	mov	r3, r1
 8107baa:	4610      	mov	r0, r2
 8107bac:	4619      	mov	r1, r3
 8107bae:	f04f 0200 	mov.w	r2, #0
 8107bb2:	f04f 0300 	mov.w	r3, #0
 8107bb6:	020b      	lsls	r3, r1, #8
 8107bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107bbc:	0202      	lsls	r2, r0, #8
 8107bbe:	6979      	ldr	r1, [r7, #20]
 8107bc0:	6849      	ldr	r1, [r1, #4]
 8107bc2:	0849      	lsrs	r1, r1, #1
 8107bc4:	2000      	movs	r0, #0
 8107bc6:	460c      	mov	r4, r1
 8107bc8:	4605      	mov	r5, r0
 8107bca:	eb12 0804 	adds.w	r8, r2, r4
 8107bce:	eb43 0905 	adc.w	r9, r3, r5
 8107bd2:	697b      	ldr	r3, [r7, #20]
 8107bd4:	685b      	ldr	r3, [r3, #4]
 8107bd6:	2200      	movs	r2, #0
 8107bd8:	469a      	mov	sl, r3
 8107bda:	4693      	mov	fp, r2
 8107bdc:	4652      	mov	r2, sl
 8107bde:	465b      	mov	r3, fp
 8107be0:	4640      	mov	r0, r8
 8107be2:	4649      	mov	r1, r9
 8107be4:	f7f9 f8d8 	bl	8100d98 <__aeabi_uldivmod>
 8107be8:	4602      	mov	r2, r0
 8107bea:	460b      	mov	r3, r1
 8107bec:	4613      	mov	r3, r2
 8107bee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107bf6:	d308      	bcc.n	8107c0a <UART_SetConfig+0x79a>
 8107bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107bfe:	d204      	bcs.n	8107c0a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107c00:	697b      	ldr	r3, [r7, #20]
 8107c02:	681b      	ldr	r3, [r3, #0]
 8107c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107c06:	60da      	str	r2, [r3, #12]
 8107c08:	e17c      	b.n	8107f04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8107c0a:	2301      	movs	r3, #1
 8107c0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107c10:	e178      	b.n	8107f04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107c12:	697b      	ldr	r3, [r7, #20]
 8107c14:	69db      	ldr	r3, [r3, #28]
 8107c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107c1a:	f040 80c5 	bne.w	8107da8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107c22:	2b20      	cmp	r3, #32
 8107c24:	dc48      	bgt.n	8107cb8 <UART_SetConfig+0x848>
 8107c26:	2b00      	cmp	r3, #0
 8107c28:	db7b      	blt.n	8107d22 <UART_SetConfig+0x8b2>
 8107c2a:	2b20      	cmp	r3, #32
 8107c2c:	d879      	bhi.n	8107d22 <UART_SetConfig+0x8b2>
 8107c2e:	a201      	add	r2, pc, #4	; (adr r2, 8107c34 <UART_SetConfig+0x7c4>)
 8107c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c34:	08107cbf 	.word	0x08107cbf
 8107c38:	08107cc7 	.word	0x08107cc7
 8107c3c:	08107d23 	.word	0x08107d23
 8107c40:	08107d23 	.word	0x08107d23
 8107c44:	08107ccf 	.word	0x08107ccf
 8107c48:	08107d23 	.word	0x08107d23
 8107c4c:	08107d23 	.word	0x08107d23
 8107c50:	08107d23 	.word	0x08107d23
 8107c54:	08107cdf 	.word	0x08107cdf
 8107c58:	08107d23 	.word	0x08107d23
 8107c5c:	08107d23 	.word	0x08107d23
 8107c60:	08107d23 	.word	0x08107d23
 8107c64:	08107d23 	.word	0x08107d23
 8107c68:	08107d23 	.word	0x08107d23
 8107c6c:	08107d23 	.word	0x08107d23
 8107c70:	08107d23 	.word	0x08107d23
 8107c74:	08107cef 	.word	0x08107cef
 8107c78:	08107d23 	.word	0x08107d23
 8107c7c:	08107d23 	.word	0x08107d23
 8107c80:	08107d23 	.word	0x08107d23
 8107c84:	08107d23 	.word	0x08107d23
 8107c88:	08107d23 	.word	0x08107d23
 8107c8c:	08107d23 	.word	0x08107d23
 8107c90:	08107d23 	.word	0x08107d23
 8107c94:	08107d23 	.word	0x08107d23
 8107c98:	08107d23 	.word	0x08107d23
 8107c9c:	08107d23 	.word	0x08107d23
 8107ca0:	08107d23 	.word	0x08107d23
 8107ca4:	08107d23 	.word	0x08107d23
 8107ca8:	08107d23 	.word	0x08107d23
 8107cac:	08107d23 	.word	0x08107d23
 8107cb0:	08107d23 	.word	0x08107d23
 8107cb4:	08107d15 	.word	0x08107d15
 8107cb8:	2b40      	cmp	r3, #64	; 0x40
 8107cba:	d02e      	beq.n	8107d1a <UART_SetConfig+0x8aa>
 8107cbc:	e031      	b.n	8107d22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107cbe:	f7fc f95d 	bl	8103f7c <HAL_RCC_GetPCLK1Freq>
 8107cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107cc4:	e033      	b.n	8107d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107cc6:	f7fc f96f 	bl	8103fa8 <HAL_RCC_GetPCLK2Freq>
 8107cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107ccc:	e02f      	b.n	8107d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107cd2:	4618      	mov	r0, r3
 8107cd4:	f7fd fdac 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107cdc:	e027      	b.n	8107d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cde:	f107 0318 	add.w	r3, r7, #24
 8107ce2:	4618      	mov	r0, r3
 8107ce4:	f7fd fef8 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107ce8:	69fb      	ldr	r3, [r7, #28]
 8107cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107cec:	e01f      	b.n	8107d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107cee:	4b2d      	ldr	r3, [pc, #180]	; (8107da4 <UART_SetConfig+0x934>)
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	f003 0320 	and.w	r3, r3, #32
 8107cf6:	2b00      	cmp	r3, #0
 8107cf8:	d009      	beq.n	8107d0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107cfa:	4b2a      	ldr	r3, [pc, #168]	; (8107da4 <UART_SetConfig+0x934>)
 8107cfc:	681b      	ldr	r3, [r3, #0]
 8107cfe:	08db      	lsrs	r3, r3, #3
 8107d00:	f003 0303 	and.w	r3, r3, #3
 8107d04:	4a24      	ldr	r2, [pc, #144]	; (8107d98 <UART_SetConfig+0x928>)
 8107d06:	fa22 f303 	lsr.w	r3, r2, r3
 8107d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107d0c:	e00f      	b.n	8107d2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107d0e:	4b22      	ldr	r3, [pc, #136]	; (8107d98 <UART_SetConfig+0x928>)
 8107d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d12:	e00c      	b.n	8107d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107d14:	4b21      	ldr	r3, [pc, #132]	; (8107d9c <UART_SetConfig+0x92c>)
 8107d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d18:	e009      	b.n	8107d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d20:	e005      	b.n	8107d2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8107d22:	2300      	movs	r3, #0
 8107d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107d26:	2301      	movs	r3, #1
 8107d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107d30:	2b00      	cmp	r3, #0
 8107d32:	f000 80e7 	beq.w	8107f04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107d36:	697b      	ldr	r3, [r7, #20]
 8107d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d3a:	4a19      	ldr	r2, [pc, #100]	; (8107da0 <UART_SetConfig+0x930>)
 8107d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107d40:	461a      	mov	r2, r3
 8107d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8107d48:	005a      	lsls	r2, r3, #1
 8107d4a:	697b      	ldr	r3, [r7, #20]
 8107d4c:	685b      	ldr	r3, [r3, #4]
 8107d4e:	085b      	lsrs	r3, r3, #1
 8107d50:	441a      	add	r2, r3
 8107d52:	697b      	ldr	r3, [r7, #20]
 8107d54:	685b      	ldr	r3, [r3, #4]
 8107d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8107d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d5e:	2b0f      	cmp	r3, #15
 8107d60:	d916      	bls.n	8107d90 <UART_SetConfig+0x920>
 8107d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107d68:	d212      	bcs.n	8107d90 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d6c:	b29b      	uxth	r3, r3
 8107d6e:	f023 030f 	bic.w	r3, r3, #15
 8107d72:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d76:	085b      	lsrs	r3, r3, #1
 8107d78:	b29b      	uxth	r3, r3
 8107d7a:	f003 0307 	and.w	r3, r3, #7
 8107d7e:	b29a      	uxth	r2, r3
 8107d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8107d82:	4313      	orrs	r3, r2
 8107d84:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8107d86:	697b      	ldr	r3, [r7, #20]
 8107d88:	681b      	ldr	r3, [r3, #0]
 8107d8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8107d8c:	60da      	str	r2, [r3, #12]
 8107d8e:	e0b9      	b.n	8107f04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107d90:	2301      	movs	r3, #1
 8107d92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107d96:	e0b5      	b.n	8107f04 <UART_SetConfig+0xa94>
 8107d98:	03d09000 	.word	0x03d09000
 8107d9c:	003d0900 	.word	0x003d0900
 8107da0:	0810cf7c 	.word	0x0810cf7c
 8107da4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8107da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107dac:	2b20      	cmp	r3, #32
 8107dae:	dc49      	bgt.n	8107e44 <UART_SetConfig+0x9d4>
 8107db0:	2b00      	cmp	r3, #0
 8107db2:	db7c      	blt.n	8107eae <UART_SetConfig+0xa3e>
 8107db4:	2b20      	cmp	r3, #32
 8107db6:	d87a      	bhi.n	8107eae <UART_SetConfig+0xa3e>
 8107db8:	a201      	add	r2, pc, #4	; (adr r2, 8107dc0 <UART_SetConfig+0x950>)
 8107dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107dbe:	bf00      	nop
 8107dc0:	08107e4b 	.word	0x08107e4b
 8107dc4:	08107e53 	.word	0x08107e53
 8107dc8:	08107eaf 	.word	0x08107eaf
 8107dcc:	08107eaf 	.word	0x08107eaf
 8107dd0:	08107e5b 	.word	0x08107e5b
 8107dd4:	08107eaf 	.word	0x08107eaf
 8107dd8:	08107eaf 	.word	0x08107eaf
 8107ddc:	08107eaf 	.word	0x08107eaf
 8107de0:	08107e6b 	.word	0x08107e6b
 8107de4:	08107eaf 	.word	0x08107eaf
 8107de8:	08107eaf 	.word	0x08107eaf
 8107dec:	08107eaf 	.word	0x08107eaf
 8107df0:	08107eaf 	.word	0x08107eaf
 8107df4:	08107eaf 	.word	0x08107eaf
 8107df8:	08107eaf 	.word	0x08107eaf
 8107dfc:	08107eaf 	.word	0x08107eaf
 8107e00:	08107e7b 	.word	0x08107e7b
 8107e04:	08107eaf 	.word	0x08107eaf
 8107e08:	08107eaf 	.word	0x08107eaf
 8107e0c:	08107eaf 	.word	0x08107eaf
 8107e10:	08107eaf 	.word	0x08107eaf
 8107e14:	08107eaf 	.word	0x08107eaf
 8107e18:	08107eaf 	.word	0x08107eaf
 8107e1c:	08107eaf 	.word	0x08107eaf
 8107e20:	08107eaf 	.word	0x08107eaf
 8107e24:	08107eaf 	.word	0x08107eaf
 8107e28:	08107eaf 	.word	0x08107eaf
 8107e2c:	08107eaf 	.word	0x08107eaf
 8107e30:	08107eaf 	.word	0x08107eaf
 8107e34:	08107eaf 	.word	0x08107eaf
 8107e38:	08107eaf 	.word	0x08107eaf
 8107e3c:	08107eaf 	.word	0x08107eaf
 8107e40:	08107ea1 	.word	0x08107ea1
 8107e44:	2b40      	cmp	r3, #64	; 0x40
 8107e46:	d02e      	beq.n	8107ea6 <UART_SetConfig+0xa36>
 8107e48:	e031      	b.n	8107eae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107e4a:	f7fc f897 	bl	8103f7c <HAL_RCC_GetPCLK1Freq>
 8107e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107e50:	e033      	b.n	8107eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107e52:	f7fc f8a9 	bl	8103fa8 <HAL_RCC_GetPCLK2Freq>
 8107e56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107e58:	e02f      	b.n	8107eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107e5e:	4618      	mov	r0, r3
 8107e60:	f7fd fce6 	bl	8105830 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e68:	e027      	b.n	8107eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e6a:	f107 0318 	add.w	r3, r7, #24
 8107e6e:	4618      	mov	r0, r3
 8107e70:	f7fd fe32 	bl	8105ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107e74:	69fb      	ldr	r3, [r7, #28]
 8107e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e78:	e01f      	b.n	8107eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107e7a:	4b2d      	ldr	r3, [pc, #180]	; (8107f30 <UART_SetConfig+0xac0>)
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	f003 0320 	and.w	r3, r3, #32
 8107e82:	2b00      	cmp	r3, #0
 8107e84:	d009      	beq.n	8107e9a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107e86:	4b2a      	ldr	r3, [pc, #168]	; (8107f30 <UART_SetConfig+0xac0>)
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	08db      	lsrs	r3, r3, #3
 8107e8c:	f003 0303 	and.w	r3, r3, #3
 8107e90:	4a28      	ldr	r2, [pc, #160]	; (8107f34 <UART_SetConfig+0xac4>)
 8107e92:	fa22 f303 	lsr.w	r3, r2, r3
 8107e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107e98:	e00f      	b.n	8107eba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8107e9a:	4b26      	ldr	r3, [pc, #152]	; (8107f34 <UART_SetConfig+0xac4>)
 8107e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e9e:	e00c      	b.n	8107eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107ea0:	4b25      	ldr	r3, [pc, #148]	; (8107f38 <UART_SetConfig+0xac8>)
 8107ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ea4:	e009      	b.n	8107eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107eac:	e005      	b.n	8107eba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8107eae:	2300      	movs	r3, #0
 8107eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107eb2:	2301      	movs	r3, #1
 8107eb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8107eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107ebc:	2b00      	cmp	r3, #0
 8107ebe:	d021      	beq.n	8107f04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107ec0:	697b      	ldr	r3, [r7, #20]
 8107ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ec4:	4a1d      	ldr	r2, [pc, #116]	; (8107f3c <UART_SetConfig+0xacc>)
 8107ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107eca:	461a      	mov	r2, r3
 8107ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107ece:	fbb3 f2f2 	udiv	r2, r3, r2
 8107ed2:	697b      	ldr	r3, [r7, #20]
 8107ed4:	685b      	ldr	r3, [r3, #4]
 8107ed6:	085b      	lsrs	r3, r3, #1
 8107ed8:	441a      	add	r2, r3
 8107eda:	697b      	ldr	r3, [r7, #20]
 8107edc:	685b      	ldr	r3, [r3, #4]
 8107ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8107ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ee6:	2b0f      	cmp	r3, #15
 8107ee8:	d909      	bls.n	8107efe <UART_SetConfig+0xa8e>
 8107eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107ef0:	d205      	bcs.n	8107efe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ef4:	b29a      	uxth	r2, r3
 8107ef6:	697b      	ldr	r3, [r7, #20]
 8107ef8:	681b      	ldr	r3, [r3, #0]
 8107efa:	60da      	str	r2, [r3, #12]
 8107efc:	e002      	b.n	8107f04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107efe:	2301      	movs	r3, #1
 8107f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107f04:	697b      	ldr	r3, [r7, #20]
 8107f06:	2201      	movs	r2, #1
 8107f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107f0c:	697b      	ldr	r3, [r7, #20]
 8107f0e:	2201      	movs	r2, #1
 8107f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107f14:	697b      	ldr	r3, [r7, #20]
 8107f16:	2200      	movs	r2, #0
 8107f18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107f1a:	697b      	ldr	r3, [r7, #20]
 8107f1c:	2200      	movs	r2, #0
 8107f1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107f20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107f24:	4618      	mov	r0, r3
 8107f26:	3748      	adds	r7, #72	; 0x48
 8107f28:	46bd      	mov	sp, r7
 8107f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107f2e:	bf00      	nop
 8107f30:	58024400 	.word	0x58024400
 8107f34:	03d09000 	.word	0x03d09000
 8107f38:	003d0900 	.word	0x003d0900
 8107f3c:	0810cf7c 	.word	0x0810cf7c

08107f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107f40:	b480      	push	{r7}
 8107f42:	b083      	sub	sp, #12
 8107f44:	af00      	add	r7, sp, #0
 8107f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f4c:	f003 0301 	and.w	r3, r3, #1
 8107f50:	2b00      	cmp	r3, #0
 8107f52:	d00a      	beq.n	8107f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	681b      	ldr	r3, [r3, #0]
 8107f58:	685b      	ldr	r3, [r3, #4]
 8107f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	681b      	ldr	r3, [r3, #0]
 8107f66:	430a      	orrs	r2, r1
 8107f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f6e:	f003 0302 	and.w	r3, r3, #2
 8107f72:	2b00      	cmp	r3, #0
 8107f74:	d00a      	beq.n	8107f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	685b      	ldr	r3, [r3, #4]
 8107f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	681b      	ldr	r3, [r3, #0]
 8107f88:	430a      	orrs	r2, r1
 8107f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f90:	f003 0304 	and.w	r3, r3, #4
 8107f94:	2b00      	cmp	r3, #0
 8107f96:	d00a      	beq.n	8107fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107f98:	687b      	ldr	r3, [r7, #4]
 8107f9a:	681b      	ldr	r3, [r3, #0]
 8107f9c:	685b      	ldr	r3, [r3, #4]
 8107f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	681b      	ldr	r3, [r3, #0]
 8107faa:	430a      	orrs	r2, r1
 8107fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fb2:	f003 0308 	and.w	r3, r3, #8
 8107fb6:	2b00      	cmp	r3, #0
 8107fb8:	d00a      	beq.n	8107fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107fba:	687b      	ldr	r3, [r7, #4]
 8107fbc:	681b      	ldr	r3, [r3, #0]
 8107fbe:	685b      	ldr	r3, [r3, #4]
 8107fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107fc4:	687b      	ldr	r3, [r7, #4]
 8107fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	681b      	ldr	r3, [r3, #0]
 8107fcc:	430a      	orrs	r2, r1
 8107fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fd4:	f003 0310 	and.w	r3, r3, #16
 8107fd8:	2b00      	cmp	r3, #0
 8107fda:	d00a      	beq.n	8107ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	689b      	ldr	r3, [r3, #8]
 8107fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107fea:	687b      	ldr	r3, [r7, #4]
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	430a      	orrs	r2, r1
 8107ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ff6:	f003 0320 	and.w	r3, r3, #32
 8107ffa:	2b00      	cmp	r3, #0
 8107ffc:	d00a      	beq.n	8108014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	689b      	ldr	r3, [r3, #8]
 8108004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	681b      	ldr	r3, [r3, #0]
 8108010:	430a      	orrs	r2, r1
 8108012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810801c:	2b00      	cmp	r3, #0
 810801e:	d01a      	beq.n	8108056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	685b      	ldr	r3, [r3, #4]
 8108026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	681b      	ldr	r3, [r3, #0]
 8108032:	430a      	orrs	r2, r1
 8108034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810803a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810803e:	d10a      	bne.n	8108056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	681b      	ldr	r3, [r3, #0]
 8108044:	685b      	ldr	r3, [r3, #4]
 8108046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	430a      	orrs	r2, r1
 8108054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810805a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810805e:	2b00      	cmp	r3, #0
 8108060:	d00a      	beq.n	8108078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	681b      	ldr	r3, [r3, #0]
 8108066:	685b      	ldr	r3, [r3, #4]
 8108068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	430a      	orrs	r2, r1
 8108076:	605a      	str	r2, [r3, #4]
  }
}
 8108078:	bf00      	nop
 810807a:	370c      	adds	r7, #12
 810807c:	46bd      	mov	sp, r7
 810807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108082:	4770      	bx	lr

08108084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108084:	b580      	push	{r7, lr}
 8108086:	b086      	sub	sp, #24
 8108088:	af02      	add	r7, sp, #8
 810808a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810808c:	687b      	ldr	r3, [r7, #4]
 810808e:	2200      	movs	r2, #0
 8108090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108094:	f7f9 fef2 	bl	8101e7c <HAL_GetTick>
 8108098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	681b      	ldr	r3, [r3, #0]
 81080a0:	f003 0308 	and.w	r3, r3, #8
 81080a4:	2b08      	cmp	r3, #8
 81080a6:	d10e      	bne.n	81080c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81080a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81080ac:	9300      	str	r3, [sp, #0]
 81080ae:	68fb      	ldr	r3, [r7, #12]
 81080b0:	2200      	movs	r2, #0
 81080b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81080b6:	6878      	ldr	r0, [r7, #4]
 81080b8:	f000 f82f 	bl	810811a <UART_WaitOnFlagUntilTimeout>
 81080bc:	4603      	mov	r3, r0
 81080be:	2b00      	cmp	r3, #0
 81080c0:	d001      	beq.n	81080c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81080c2:	2303      	movs	r3, #3
 81080c4:	e025      	b.n	8108112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	681b      	ldr	r3, [r3, #0]
 81080ca:	681b      	ldr	r3, [r3, #0]
 81080cc:	f003 0304 	and.w	r3, r3, #4
 81080d0:	2b04      	cmp	r3, #4
 81080d2:	d10e      	bne.n	81080f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81080d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81080d8:	9300      	str	r3, [sp, #0]
 81080da:	68fb      	ldr	r3, [r7, #12]
 81080dc:	2200      	movs	r2, #0
 81080de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81080e2:	6878      	ldr	r0, [r7, #4]
 81080e4:	f000 f819 	bl	810811a <UART_WaitOnFlagUntilTimeout>
 81080e8:	4603      	mov	r3, r0
 81080ea:	2b00      	cmp	r3, #0
 81080ec:	d001      	beq.n	81080f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81080ee:	2303      	movs	r3, #3
 81080f0:	e00f      	b.n	8108112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81080f2:	687b      	ldr	r3, [r7, #4]
 81080f4:	2220      	movs	r2, #32
 81080f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81080fa:	687b      	ldr	r3, [r7, #4]
 81080fc:	2220      	movs	r2, #32
 81080fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	2200      	movs	r2, #0
 8108106:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8108108:	687b      	ldr	r3, [r7, #4]
 810810a:	2200      	movs	r2, #0
 810810c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108110:	2300      	movs	r3, #0
}
 8108112:	4618      	mov	r0, r3
 8108114:	3710      	adds	r7, #16
 8108116:	46bd      	mov	sp, r7
 8108118:	bd80      	pop	{r7, pc}

0810811a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810811a:	b580      	push	{r7, lr}
 810811c:	b09c      	sub	sp, #112	; 0x70
 810811e:	af00      	add	r7, sp, #0
 8108120:	60f8      	str	r0, [r7, #12]
 8108122:	60b9      	str	r1, [r7, #8]
 8108124:	603b      	str	r3, [r7, #0]
 8108126:	4613      	mov	r3, r2
 8108128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810812a:	e0a9      	b.n	8108280 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810812c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108132:	f000 80a5 	beq.w	8108280 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108136:	f7f9 fea1 	bl	8101e7c <HAL_GetTick>
 810813a:	4602      	mov	r2, r0
 810813c:	683b      	ldr	r3, [r7, #0]
 810813e:	1ad3      	subs	r3, r2, r3
 8108140:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8108142:	429a      	cmp	r2, r3
 8108144:	d302      	bcc.n	810814c <UART_WaitOnFlagUntilTimeout+0x32>
 8108146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108148:	2b00      	cmp	r3, #0
 810814a:	d140      	bne.n	81081ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810814c:	68fb      	ldr	r3, [r7, #12]
 810814e:	681b      	ldr	r3, [r3, #0]
 8108150:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108154:	e853 3f00 	ldrex	r3, [r3]
 8108158:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810815a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810815c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108160:	667b      	str	r3, [r7, #100]	; 0x64
 8108162:	68fb      	ldr	r3, [r7, #12]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	461a      	mov	r2, r3
 8108168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810816a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810816c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810816e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8108170:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8108172:	e841 2300 	strex	r3, r2, [r1]
 8108176:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8108178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810817a:	2b00      	cmp	r3, #0
 810817c:	d1e6      	bne.n	810814c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810817e:	68fb      	ldr	r3, [r7, #12]
 8108180:	681b      	ldr	r3, [r3, #0]
 8108182:	3308      	adds	r3, #8
 8108184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108188:	e853 3f00 	ldrex	r3, [r3]
 810818c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108190:	f023 0301 	bic.w	r3, r3, #1
 8108194:	663b      	str	r3, [r7, #96]	; 0x60
 8108196:	68fb      	ldr	r3, [r7, #12]
 8108198:	681b      	ldr	r3, [r3, #0]
 810819a:	3308      	adds	r3, #8
 810819c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810819e:	64ba      	str	r2, [r7, #72]	; 0x48
 81081a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81081a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81081a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81081a6:	e841 2300 	strex	r3, r2, [r1]
 81081aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81081ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81081ae:	2b00      	cmp	r3, #0
 81081b0:	d1e5      	bne.n	810817e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81081b2:	68fb      	ldr	r3, [r7, #12]
 81081b4:	2220      	movs	r2, #32
 81081b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81081ba:	68fb      	ldr	r3, [r7, #12]
 81081bc:	2220      	movs	r2, #32
 81081be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81081c2:	68fb      	ldr	r3, [r7, #12]
 81081c4:	2200      	movs	r2, #0
 81081c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81081ca:	2303      	movs	r3, #3
 81081cc:	e069      	b.n	81082a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81081ce:	68fb      	ldr	r3, [r7, #12]
 81081d0:	681b      	ldr	r3, [r3, #0]
 81081d2:	681b      	ldr	r3, [r3, #0]
 81081d4:	f003 0304 	and.w	r3, r3, #4
 81081d8:	2b00      	cmp	r3, #0
 81081da:	d051      	beq.n	8108280 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81081dc:	68fb      	ldr	r3, [r7, #12]
 81081de:	681b      	ldr	r3, [r3, #0]
 81081e0:	69db      	ldr	r3, [r3, #28]
 81081e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81081e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81081ea:	d149      	bne.n	8108280 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81081ec:	68fb      	ldr	r3, [r7, #12]
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81081f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81081f6:	68fb      	ldr	r3, [r7, #12]
 81081f8:	681b      	ldr	r3, [r3, #0]
 81081fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81081fe:	e853 3f00 	ldrex	r3, [r3]
 8108202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810820a:	66fb      	str	r3, [r7, #108]	; 0x6c
 810820c:	68fb      	ldr	r3, [r7, #12]
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	461a      	mov	r2, r3
 8108212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108214:	637b      	str	r3, [r7, #52]	; 0x34
 8108216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810821a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810821c:	e841 2300 	strex	r3, r2, [r1]
 8108220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8108222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108224:	2b00      	cmp	r3, #0
 8108226:	d1e6      	bne.n	81081f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	3308      	adds	r3, #8
 810822e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108230:	697b      	ldr	r3, [r7, #20]
 8108232:	e853 3f00 	ldrex	r3, [r3]
 8108236:	613b      	str	r3, [r7, #16]
   return(result);
 8108238:	693b      	ldr	r3, [r7, #16]
 810823a:	f023 0301 	bic.w	r3, r3, #1
 810823e:	66bb      	str	r3, [r7, #104]	; 0x68
 8108240:	68fb      	ldr	r3, [r7, #12]
 8108242:	681b      	ldr	r3, [r3, #0]
 8108244:	3308      	adds	r3, #8
 8108246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8108248:	623a      	str	r2, [r7, #32]
 810824a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810824c:	69f9      	ldr	r1, [r7, #28]
 810824e:	6a3a      	ldr	r2, [r7, #32]
 8108250:	e841 2300 	strex	r3, r2, [r1]
 8108254:	61bb      	str	r3, [r7, #24]
   return(result);
 8108256:	69bb      	ldr	r3, [r7, #24]
 8108258:	2b00      	cmp	r3, #0
 810825a:	d1e5      	bne.n	8108228 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810825c:	68fb      	ldr	r3, [r7, #12]
 810825e:	2220      	movs	r2, #32
 8108260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8108264:	68fb      	ldr	r3, [r7, #12]
 8108266:	2220      	movs	r2, #32
 8108268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810826c:	68fb      	ldr	r3, [r7, #12]
 810826e:	2220      	movs	r2, #32
 8108270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108274:	68fb      	ldr	r3, [r7, #12]
 8108276:	2200      	movs	r2, #0
 8108278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810827c:	2303      	movs	r3, #3
 810827e:	e010      	b.n	81082a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108280:	68fb      	ldr	r3, [r7, #12]
 8108282:	681b      	ldr	r3, [r3, #0]
 8108284:	69da      	ldr	r2, [r3, #28]
 8108286:	68bb      	ldr	r3, [r7, #8]
 8108288:	4013      	ands	r3, r2
 810828a:	68ba      	ldr	r2, [r7, #8]
 810828c:	429a      	cmp	r2, r3
 810828e:	bf0c      	ite	eq
 8108290:	2301      	moveq	r3, #1
 8108292:	2300      	movne	r3, #0
 8108294:	b2db      	uxtb	r3, r3
 8108296:	461a      	mov	r2, r3
 8108298:	79fb      	ldrb	r3, [r7, #7]
 810829a:	429a      	cmp	r2, r3
 810829c:	f43f af46 	beq.w	810812c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81082a0:	2300      	movs	r3, #0
}
 81082a2:	4618      	mov	r0, r3
 81082a4:	3770      	adds	r7, #112	; 0x70
 81082a6:	46bd      	mov	sp, r7
 81082a8:	bd80      	pop	{r7, pc}

081082aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81082aa:	b480      	push	{r7}
 81082ac:	b085      	sub	sp, #20
 81082ae:	af00      	add	r7, sp, #0
 81082b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81082b2:	687b      	ldr	r3, [r7, #4]
 81082b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81082b8:	2b01      	cmp	r3, #1
 81082ba:	d101      	bne.n	81082c0 <HAL_UARTEx_DisableFifoMode+0x16>
 81082bc:	2302      	movs	r3, #2
 81082be:	e027      	b.n	8108310 <HAL_UARTEx_DisableFifoMode+0x66>
 81082c0:	687b      	ldr	r3, [r7, #4]
 81082c2:	2201      	movs	r2, #1
 81082c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	2224      	movs	r2, #36	; 0x24
 81082cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81082d0:	687b      	ldr	r3, [r7, #4]
 81082d2:	681b      	ldr	r3, [r3, #0]
 81082d4:	681b      	ldr	r3, [r3, #0]
 81082d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	681b      	ldr	r3, [r3, #0]
 81082dc:	681a      	ldr	r2, [r3, #0]
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	f022 0201 	bic.w	r2, r2, #1
 81082e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81082e8:	68fb      	ldr	r3, [r7, #12]
 81082ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81082ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81082f0:	687b      	ldr	r3, [r7, #4]
 81082f2:	2200      	movs	r2, #0
 81082f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	681b      	ldr	r3, [r3, #0]
 81082fa:	68fa      	ldr	r2, [r7, #12]
 81082fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	2220      	movs	r2, #32
 8108302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	2200      	movs	r2, #0
 810830a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810830e:	2300      	movs	r3, #0
}
 8108310:	4618      	mov	r0, r3
 8108312:	3714      	adds	r7, #20
 8108314:	46bd      	mov	sp, r7
 8108316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810831a:	4770      	bx	lr

0810831c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810831c:	b580      	push	{r7, lr}
 810831e:	b084      	sub	sp, #16
 8108320:	af00      	add	r7, sp, #0
 8108322:	6078      	str	r0, [r7, #4]
 8108324:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810832c:	2b01      	cmp	r3, #1
 810832e:	d101      	bne.n	8108334 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108330:	2302      	movs	r3, #2
 8108332:	e02d      	b.n	8108390 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108334:	687b      	ldr	r3, [r7, #4]
 8108336:	2201      	movs	r2, #1
 8108338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	2224      	movs	r2, #36	; 0x24
 8108340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	681b      	ldr	r3, [r3, #0]
 8108348:	681b      	ldr	r3, [r3, #0]
 810834a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	681b      	ldr	r3, [r3, #0]
 8108350:	681a      	ldr	r2, [r3, #0]
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	681b      	ldr	r3, [r3, #0]
 8108356:	f022 0201 	bic.w	r2, r2, #1
 810835a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	681b      	ldr	r3, [r3, #0]
 8108360:	689b      	ldr	r3, [r3, #8]
 8108362:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	681b      	ldr	r3, [r3, #0]
 810836a:	683a      	ldr	r2, [r7, #0]
 810836c:	430a      	orrs	r2, r1
 810836e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108370:	6878      	ldr	r0, [r7, #4]
 8108372:	f000 f84f 	bl	8108414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108376:	687b      	ldr	r3, [r7, #4]
 8108378:	681b      	ldr	r3, [r3, #0]
 810837a:	68fa      	ldr	r2, [r7, #12]
 810837c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	2220      	movs	r2, #32
 8108382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108386:	687b      	ldr	r3, [r7, #4]
 8108388:	2200      	movs	r2, #0
 810838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810838e:	2300      	movs	r3, #0
}
 8108390:	4618      	mov	r0, r3
 8108392:	3710      	adds	r7, #16
 8108394:	46bd      	mov	sp, r7
 8108396:	bd80      	pop	{r7, pc}

08108398 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108398:	b580      	push	{r7, lr}
 810839a:	b084      	sub	sp, #16
 810839c:	af00      	add	r7, sp, #0
 810839e:	6078      	str	r0, [r7, #4]
 81083a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81083a2:	687b      	ldr	r3, [r7, #4]
 81083a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81083a8:	2b01      	cmp	r3, #1
 81083aa:	d101      	bne.n	81083b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81083ac:	2302      	movs	r3, #2
 81083ae:	e02d      	b.n	810840c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81083b0:	687b      	ldr	r3, [r7, #4]
 81083b2:	2201      	movs	r2, #1
 81083b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81083b8:	687b      	ldr	r3, [r7, #4]
 81083ba:	2224      	movs	r2, #36	; 0x24
 81083bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	681b      	ldr	r3, [r3, #0]
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81083c8:	687b      	ldr	r3, [r7, #4]
 81083ca:	681b      	ldr	r3, [r3, #0]
 81083cc:	681a      	ldr	r2, [r3, #0]
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	681b      	ldr	r3, [r3, #0]
 81083d2:	f022 0201 	bic.w	r2, r2, #1
 81083d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	681b      	ldr	r3, [r3, #0]
 81083dc:	689b      	ldr	r3, [r3, #8]
 81083de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	681b      	ldr	r3, [r3, #0]
 81083e6:	683a      	ldr	r2, [r7, #0]
 81083e8:	430a      	orrs	r2, r1
 81083ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81083ec:	6878      	ldr	r0, [r7, #4]
 81083ee:	f000 f811 	bl	8108414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	681b      	ldr	r3, [r3, #0]
 81083f6:	68fa      	ldr	r2, [r7, #12]
 81083f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	2220      	movs	r2, #32
 81083fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	2200      	movs	r2, #0
 8108406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810840a:	2300      	movs	r3, #0
}
 810840c:	4618      	mov	r0, r3
 810840e:	3710      	adds	r7, #16
 8108410:	46bd      	mov	sp, r7
 8108412:	bd80      	pop	{r7, pc}

08108414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108414:	b480      	push	{r7}
 8108416:	b085      	sub	sp, #20
 8108418:	af00      	add	r7, sp, #0
 810841a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108420:	2b00      	cmp	r3, #0
 8108422:	d108      	bne.n	8108436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	2201      	movs	r2, #1
 8108428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	2201      	movs	r2, #1
 8108430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108434:	e031      	b.n	810849a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108436:	2310      	movs	r3, #16
 8108438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810843a:	2310      	movs	r3, #16
 810843c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	681b      	ldr	r3, [r3, #0]
 8108442:	689b      	ldr	r3, [r3, #8]
 8108444:	0e5b      	lsrs	r3, r3, #25
 8108446:	b2db      	uxtb	r3, r3
 8108448:	f003 0307 	and.w	r3, r3, #7
 810844c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	689b      	ldr	r3, [r3, #8]
 8108454:	0f5b      	lsrs	r3, r3, #29
 8108456:	b2db      	uxtb	r3, r3
 8108458:	f003 0307 	and.w	r3, r3, #7
 810845c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810845e:	7bbb      	ldrb	r3, [r7, #14]
 8108460:	7b3a      	ldrb	r2, [r7, #12]
 8108462:	4911      	ldr	r1, [pc, #68]	; (81084a8 <UARTEx_SetNbDataToProcess+0x94>)
 8108464:	5c8a      	ldrb	r2, [r1, r2]
 8108466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810846a:	7b3a      	ldrb	r2, [r7, #12]
 810846c:	490f      	ldr	r1, [pc, #60]	; (81084ac <UARTEx_SetNbDataToProcess+0x98>)
 810846e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108470:	fb93 f3f2 	sdiv	r3, r3, r2
 8108474:	b29a      	uxth	r2, r3
 8108476:	687b      	ldr	r3, [r7, #4]
 8108478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810847c:	7bfb      	ldrb	r3, [r7, #15]
 810847e:	7b7a      	ldrb	r2, [r7, #13]
 8108480:	4909      	ldr	r1, [pc, #36]	; (81084a8 <UARTEx_SetNbDataToProcess+0x94>)
 8108482:	5c8a      	ldrb	r2, [r1, r2]
 8108484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108488:	7b7a      	ldrb	r2, [r7, #13]
 810848a:	4908      	ldr	r1, [pc, #32]	; (81084ac <UARTEx_SetNbDataToProcess+0x98>)
 810848c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810848e:	fb93 f3f2 	sdiv	r3, r3, r2
 8108492:	b29a      	uxth	r2, r3
 8108494:	687b      	ldr	r3, [r7, #4]
 8108496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810849a:	bf00      	nop
 810849c:	3714      	adds	r7, #20
 810849e:	46bd      	mov	sp, r7
 81084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084a4:	4770      	bx	lr
 81084a6:	bf00      	nop
 81084a8:	0810cf94 	.word	0x0810cf94
 81084ac:	0810cf9c 	.word	0x0810cf9c

081084b0 <__errno>:
 81084b0:	4b01      	ldr	r3, [pc, #4]	; (81084b8 <__errno+0x8>)
 81084b2:	6818      	ldr	r0, [r3, #0]
 81084b4:	4770      	bx	lr
 81084b6:	bf00      	nop
 81084b8:	10000014 	.word	0x10000014

081084bc <__libc_init_array>:
 81084bc:	b570      	push	{r4, r5, r6, lr}
 81084be:	4d0d      	ldr	r5, [pc, #52]	; (81084f4 <__libc_init_array+0x38>)
 81084c0:	4c0d      	ldr	r4, [pc, #52]	; (81084f8 <__libc_init_array+0x3c>)
 81084c2:	1b64      	subs	r4, r4, r5
 81084c4:	10a4      	asrs	r4, r4, #2
 81084c6:	2600      	movs	r6, #0
 81084c8:	42a6      	cmp	r6, r4
 81084ca:	d109      	bne.n	81084e0 <__libc_init_array+0x24>
 81084cc:	4d0b      	ldr	r5, [pc, #44]	; (81084fc <__libc_init_array+0x40>)
 81084ce:	4c0c      	ldr	r4, [pc, #48]	; (8108500 <__libc_init_array+0x44>)
 81084d0:	f004 fd1c 	bl	810cf0c <_init>
 81084d4:	1b64      	subs	r4, r4, r5
 81084d6:	10a4      	asrs	r4, r4, #2
 81084d8:	2600      	movs	r6, #0
 81084da:	42a6      	cmp	r6, r4
 81084dc:	d105      	bne.n	81084ea <__libc_init_array+0x2e>
 81084de:	bd70      	pop	{r4, r5, r6, pc}
 81084e0:	f855 3b04 	ldr.w	r3, [r5], #4
 81084e4:	4798      	blx	r3
 81084e6:	3601      	adds	r6, #1
 81084e8:	e7ee      	b.n	81084c8 <__libc_init_array+0xc>
 81084ea:	f855 3b04 	ldr.w	r3, [r5], #4
 81084ee:	4798      	blx	r3
 81084f0:	3601      	adds	r6, #1
 81084f2:	e7f2      	b.n	81084da <__libc_init_array+0x1e>
 81084f4:	0810d45c 	.word	0x0810d45c
 81084f8:	0810d45c 	.word	0x0810d45c
 81084fc:	0810d45c 	.word	0x0810d45c
 8108500:	0810d460 	.word	0x0810d460

08108504 <memset>:
 8108504:	4402      	add	r2, r0
 8108506:	4603      	mov	r3, r0
 8108508:	4293      	cmp	r3, r2
 810850a:	d100      	bne.n	810850e <memset+0xa>
 810850c:	4770      	bx	lr
 810850e:	f803 1b01 	strb.w	r1, [r3], #1
 8108512:	e7f9      	b.n	8108508 <memset+0x4>

08108514 <__cvt>:
 8108514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108518:	ec55 4b10 	vmov	r4, r5, d0
 810851c:	2d00      	cmp	r5, #0
 810851e:	460e      	mov	r6, r1
 8108520:	4619      	mov	r1, r3
 8108522:	462b      	mov	r3, r5
 8108524:	bfbb      	ittet	lt
 8108526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810852a:	461d      	movlt	r5, r3
 810852c:	2300      	movge	r3, #0
 810852e:	232d      	movlt	r3, #45	; 0x2d
 8108530:	700b      	strb	r3, [r1, #0]
 8108532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108534:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108538:	4691      	mov	r9, r2
 810853a:	f023 0820 	bic.w	r8, r3, #32
 810853e:	bfbc      	itt	lt
 8108540:	4622      	movlt	r2, r4
 8108542:	4614      	movlt	r4, r2
 8108544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108548:	d005      	beq.n	8108556 <__cvt+0x42>
 810854a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810854e:	d100      	bne.n	8108552 <__cvt+0x3e>
 8108550:	3601      	adds	r6, #1
 8108552:	2102      	movs	r1, #2
 8108554:	e000      	b.n	8108558 <__cvt+0x44>
 8108556:	2103      	movs	r1, #3
 8108558:	ab03      	add	r3, sp, #12
 810855a:	9301      	str	r3, [sp, #4]
 810855c:	ab02      	add	r3, sp, #8
 810855e:	9300      	str	r3, [sp, #0]
 8108560:	ec45 4b10 	vmov	d0, r4, r5
 8108564:	4653      	mov	r3, sl
 8108566:	4632      	mov	r2, r6
 8108568:	f001 fefa 	bl	810a360 <_dtoa_r>
 810856c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8108570:	4607      	mov	r7, r0
 8108572:	d102      	bne.n	810857a <__cvt+0x66>
 8108574:	f019 0f01 	tst.w	r9, #1
 8108578:	d022      	beq.n	81085c0 <__cvt+0xac>
 810857a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810857e:	eb07 0906 	add.w	r9, r7, r6
 8108582:	d110      	bne.n	81085a6 <__cvt+0x92>
 8108584:	783b      	ldrb	r3, [r7, #0]
 8108586:	2b30      	cmp	r3, #48	; 0x30
 8108588:	d10a      	bne.n	81085a0 <__cvt+0x8c>
 810858a:	2200      	movs	r2, #0
 810858c:	2300      	movs	r3, #0
 810858e:	4620      	mov	r0, r4
 8108590:	4629      	mov	r1, r5
 8108592:	f7f8 fb21 	bl	8100bd8 <__aeabi_dcmpeq>
 8108596:	b918      	cbnz	r0, 81085a0 <__cvt+0x8c>
 8108598:	f1c6 0601 	rsb	r6, r6, #1
 810859c:	f8ca 6000 	str.w	r6, [sl]
 81085a0:	f8da 3000 	ldr.w	r3, [sl]
 81085a4:	4499      	add	r9, r3
 81085a6:	2200      	movs	r2, #0
 81085a8:	2300      	movs	r3, #0
 81085aa:	4620      	mov	r0, r4
 81085ac:	4629      	mov	r1, r5
 81085ae:	f7f8 fb13 	bl	8100bd8 <__aeabi_dcmpeq>
 81085b2:	b108      	cbz	r0, 81085b8 <__cvt+0xa4>
 81085b4:	f8cd 900c 	str.w	r9, [sp, #12]
 81085b8:	2230      	movs	r2, #48	; 0x30
 81085ba:	9b03      	ldr	r3, [sp, #12]
 81085bc:	454b      	cmp	r3, r9
 81085be:	d307      	bcc.n	81085d0 <__cvt+0xbc>
 81085c0:	9b03      	ldr	r3, [sp, #12]
 81085c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81085c4:	1bdb      	subs	r3, r3, r7
 81085c6:	4638      	mov	r0, r7
 81085c8:	6013      	str	r3, [r2, #0]
 81085ca:	b004      	add	sp, #16
 81085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81085d0:	1c59      	adds	r1, r3, #1
 81085d2:	9103      	str	r1, [sp, #12]
 81085d4:	701a      	strb	r2, [r3, #0]
 81085d6:	e7f0      	b.n	81085ba <__cvt+0xa6>

081085d8 <__exponent>:
 81085d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81085da:	4603      	mov	r3, r0
 81085dc:	2900      	cmp	r1, #0
 81085de:	bfb8      	it	lt
 81085e0:	4249      	neglt	r1, r1
 81085e2:	f803 2b02 	strb.w	r2, [r3], #2
 81085e6:	bfb4      	ite	lt
 81085e8:	222d      	movlt	r2, #45	; 0x2d
 81085ea:	222b      	movge	r2, #43	; 0x2b
 81085ec:	2909      	cmp	r1, #9
 81085ee:	7042      	strb	r2, [r0, #1]
 81085f0:	dd2a      	ble.n	8108648 <__exponent+0x70>
 81085f2:	f10d 0407 	add.w	r4, sp, #7
 81085f6:	46a4      	mov	ip, r4
 81085f8:	270a      	movs	r7, #10
 81085fa:	46a6      	mov	lr, r4
 81085fc:	460a      	mov	r2, r1
 81085fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8108602:	fb07 1516 	mls	r5, r7, r6, r1
 8108606:	3530      	adds	r5, #48	; 0x30
 8108608:	2a63      	cmp	r2, #99	; 0x63
 810860a:	f104 34ff 	add.w	r4, r4, #4294967295
 810860e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8108612:	4631      	mov	r1, r6
 8108614:	dcf1      	bgt.n	81085fa <__exponent+0x22>
 8108616:	3130      	adds	r1, #48	; 0x30
 8108618:	f1ae 0502 	sub.w	r5, lr, #2
 810861c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8108620:	1c44      	adds	r4, r0, #1
 8108622:	4629      	mov	r1, r5
 8108624:	4561      	cmp	r1, ip
 8108626:	d30a      	bcc.n	810863e <__exponent+0x66>
 8108628:	f10d 0209 	add.w	r2, sp, #9
 810862c:	eba2 020e 	sub.w	r2, r2, lr
 8108630:	4565      	cmp	r5, ip
 8108632:	bf88      	it	hi
 8108634:	2200      	movhi	r2, #0
 8108636:	4413      	add	r3, r2
 8108638:	1a18      	subs	r0, r3, r0
 810863a:	b003      	add	sp, #12
 810863c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810863e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8108642:	f804 2f01 	strb.w	r2, [r4, #1]!
 8108646:	e7ed      	b.n	8108624 <__exponent+0x4c>
 8108648:	2330      	movs	r3, #48	; 0x30
 810864a:	3130      	adds	r1, #48	; 0x30
 810864c:	7083      	strb	r3, [r0, #2]
 810864e:	70c1      	strb	r1, [r0, #3]
 8108650:	1d03      	adds	r3, r0, #4
 8108652:	e7f1      	b.n	8108638 <__exponent+0x60>

08108654 <_printf_float>:
 8108654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108658:	ed2d 8b02 	vpush	{d8}
 810865c:	b08d      	sub	sp, #52	; 0x34
 810865e:	460c      	mov	r4, r1
 8108660:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8108664:	4616      	mov	r6, r2
 8108666:	461f      	mov	r7, r3
 8108668:	4605      	mov	r5, r0
 810866a:	f003 f98d 	bl	810b988 <_localeconv_r>
 810866e:	f8d0 a000 	ldr.w	sl, [r0]
 8108672:	4650      	mov	r0, sl
 8108674:	f7f7 fe34 	bl	81002e0 <strlen>
 8108678:	2300      	movs	r3, #0
 810867a:	930a      	str	r3, [sp, #40]	; 0x28
 810867c:	6823      	ldr	r3, [r4, #0]
 810867e:	9305      	str	r3, [sp, #20]
 8108680:	f8d8 3000 	ldr.w	r3, [r8]
 8108684:	f894 b018 	ldrb.w	fp, [r4, #24]
 8108688:	3307      	adds	r3, #7
 810868a:	f023 0307 	bic.w	r3, r3, #7
 810868e:	f103 0208 	add.w	r2, r3, #8
 8108692:	f8c8 2000 	str.w	r2, [r8]
 8108696:	e9d3 2300 	ldrd	r2, r3, [r3]
 810869a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810869e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81086a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81086a6:	9307      	str	r3, [sp, #28]
 81086a8:	f8cd 8018 	str.w	r8, [sp, #24]
 81086ac:	ee08 0a10 	vmov	s16, r0
 81086b0:	4b9f      	ldr	r3, [pc, #636]	; (8108930 <_printf_float+0x2dc>)
 81086b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81086b6:	f04f 32ff 	mov.w	r2, #4294967295
 81086ba:	f7f8 fabf 	bl	8100c3c <__aeabi_dcmpun>
 81086be:	bb88      	cbnz	r0, 8108724 <_printf_float+0xd0>
 81086c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81086c4:	4b9a      	ldr	r3, [pc, #616]	; (8108930 <_printf_float+0x2dc>)
 81086c6:	f04f 32ff 	mov.w	r2, #4294967295
 81086ca:	f7f8 fa99 	bl	8100c00 <__aeabi_dcmple>
 81086ce:	bb48      	cbnz	r0, 8108724 <_printf_float+0xd0>
 81086d0:	2200      	movs	r2, #0
 81086d2:	2300      	movs	r3, #0
 81086d4:	4640      	mov	r0, r8
 81086d6:	4649      	mov	r1, r9
 81086d8:	f7f8 fa88 	bl	8100bec <__aeabi_dcmplt>
 81086dc:	b110      	cbz	r0, 81086e4 <_printf_float+0x90>
 81086de:	232d      	movs	r3, #45	; 0x2d
 81086e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81086e4:	4b93      	ldr	r3, [pc, #588]	; (8108934 <_printf_float+0x2e0>)
 81086e6:	4894      	ldr	r0, [pc, #592]	; (8108938 <_printf_float+0x2e4>)
 81086e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81086ec:	bf94      	ite	ls
 81086ee:	4698      	movls	r8, r3
 81086f0:	4680      	movhi	r8, r0
 81086f2:	2303      	movs	r3, #3
 81086f4:	6123      	str	r3, [r4, #16]
 81086f6:	9b05      	ldr	r3, [sp, #20]
 81086f8:	f023 0204 	bic.w	r2, r3, #4
 81086fc:	6022      	str	r2, [r4, #0]
 81086fe:	f04f 0900 	mov.w	r9, #0
 8108702:	9700      	str	r7, [sp, #0]
 8108704:	4633      	mov	r3, r6
 8108706:	aa0b      	add	r2, sp, #44	; 0x2c
 8108708:	4621      	mov	r1, r4
 810870a:	4628      	mov	r0, r5
 810870c:	f000 f9d8 	bl	8108ac0 <_printf_common>
 8108710:	3001      	adds	r0, #1
 8108712:	f040 8090 	bne.w	8108836 <_printf_float+0x1e2>
 8108716:	f04f 30ff 	mov.w	r0, #4294967295
 810871a:	b00d      	add	sp, #52	; 0x34
 810871c:	ecbd 8b02 	vpop	{d8}
 8108720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108724:	4642      	mov	r2, r8
 8108726:	464b      	mov	r3, r9
 8108728:	4640      	mov	r0, r8
 810872a:	4649      	mov	r1, r9
 810872c:	f7f8 fa86 	bl	8100c3c <__aeabi_dcmpun>
 8108730:	b140      	cbz	r0, 8108744 <_printf_float+0xf0>
 8108732:	464b      	mov	r3, r9
 8108734:	2b00      	cmp	r3, #0
 8108736:	bfbc      	itt	lt
 8108738:	232d      	movlt	r3, #45	; 0x2d
 810873a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810873e:	487f      	ldr	r0, [pc, #508]	; (810893c <_printf_float+0x2e8>)
 8108740:	4b7f      	ldr	r3, [pc, #508]	; (8108940 <_printf_float+0x2ec>)
 8108742:	e7d1      	b.n	81086e8 <_printf_float+0x94>
 8108744:	6863      	ldr	r3, [r4, #4]
 8108746:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810874a:	9206      	str	r2, [sp, #24]
 810874c:	1c5a      	adds	r2, r3, #1
 810874e:	d13f      	bne.n	81087d0 <_printf_float+0x17c>
 8108750:	2306      	movs	r3, #6
 8108752:	6063      	str	r3, [r4, #4]
 8108754:	9b05      	ldr	r3, [sp, #20]
 8108756:	6861      	ldr	r1, [r4, #4]
 8108758:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810875c:	2300      	movs	r3, #0
 810875e:	9303      	str	r3, [sp, #12]
 8108760:	ab0a      	add	r3, sp, #40	; 0x28
 8108762:	e9cd b301 	strd	fp, r3, [sp, #4]
 8108766:	ab09      	add	r3, sp, #36	; 0x24
 8108768:	ec49 8b10 	vmov	d0, r8, r9
 810876c:	9300      	str	r3, [sp, #0]
 810876e:	6022      	str	r2, [r4, #0]
 8108770:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8108774:	4628      	mov	r0, r5
 8108776:	f7ff fecd 	bl	8108514 <__cvt>
 810877a:	9b06      	ldr	r3, [sp, #24]
 810877c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810877e:	2b47      	cmp	r3, #71	; 0x47
 8108780:	4680      	mov	r8, r0
 8108782:	d108      	bne.n	8108796 <_printf_float+0x142>
 8108784:	1cc8      	adds	r0, r1, #3
 8108786:	db02      	blt.n	810878e <_printf_float+0x13a>
 8108788:	6863      	ldr	r3, [r4, #4]
 810878a:	4299      	cmp	r1, r3
 810878c:	dd41      	ble.n	8108812 <_printf_float+0x1be>
 810878e:	f1ab 0b02 	sub.w	fp, fp, #2
 8108792:	fa5f fb8b 	uxtb.w	fp, fp
 8108796:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810879a:	d820      	bhi.n	81087de <_printf_float+0x18a>
 810879c:	3901      	subs	r1, #1
 810879e:	465a      	mov	r2, fp
 81087a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81087a4:	9109      	str	r1, [sp, #36]	; 0x24
 81087a6:	f7ff ff17 	bl	81085d8 <__exponent>
 81087aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81087ac:	1813      	adds	r3, r2, r0
 81087ae:	2a01      	cmp	r2, #1
 81087b0:	4681      	mov	r9, r0
 81087b2:	6123      	str	r3, [r4, #16]
 81087b4:	dc02      	bgt.n	81087bc <_printf_float+0x168>
 81087b6:	6822      	ldr	r2, [r4, #0]
 81087b8:	07d2      	lsls	r2, r2, #31
 81087ba:	d501      	bpl.n	81087c0 <_printf_float+0x16c>
 81087bc:	3301      	adds	r3, #1
 81087be:	6123      	str	r3, [r4, #16]
 81087c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81087c4:	2b00      	cmp	r3, #0
 81087c6:	d09c      	beq.n	8108702 <_printf_float+0xae>
 81087c8:	232d      	movs	r3, #45	; 0x2d
 81087ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81087ce:	e798      	b.n	8108702 <_printf_float+0xae>
 81087d0:	9a06      	ldr	r2, [sp, #24]
 81087d2:	2a47      	cmp	r2, #71	; 0x47
 81087d4:	d1be      	bne.n	8108754 <_printf_float+0x100>
 81087d6:	2b00      	cmp	r3, #0
 81087d8:	d1bc      	bne.n	8108754 <_printf_float+0x100>
 81087da:	2301      	movs	r3, #1
 81087dc:	e7b9      	b.n	8108752 <_printf_float+0xfe>
 81087de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81087e2:	d118      	bne.n	8108816 <_printf_float+0x1c2>
 81087e4:	2900      	cmp	r1, #0
 81087e6:	6863      	ldr	r3, [r4, #4]
 81087e8:	dd0b      	ble.n	8108802 <_printf_float+0x1ae>
 81087ea:	6121      	str	r1, [r4, #16]
 81087ec:	b913      	cbnz	r3, 81087f4 <_printf_float+0x1a0>
 81087ee:	6822      	ldr	r2, [r4, #0]
 81087f0:	07d0      	lsls	r0, r2, #31
 81087f2:	d502      	bpl.n	81087fa <_printf_float+0x1a6>
 81087f4:	3301      	adds	r3, #1
 81087f6:	440b      	add	r3, r1
 81087f8:	6123      	str	r3, [r4, #16]
 81087fa:	65a1      	str	r1, [r4, #88]	; 0x58
 81087fc:	f04f 0900 	mov.w	r9, #0
 8108800:	e7de      	b.n	81087c0 <_printf_float+0x16c>
 8108802:	b913      	cbnz	r3, 810880a <_printf_float+0x1b6>
 8108804:	6822      	ldr	r2, [r4, #0]
 8108806:	07d2      	lsls	r2, r2, #31
 8108808:	d501      	bpl.n	810880e <_printf_float+0x1ba>
 810880a:	3302      	adds	r3, #2
 810880c:	e7f4      	b.n	81087f8 <_printf_float+0x1a4>
 810880e:	2301      	movs	r3, #1
 8108810:	e7f2      	b.n	81087f8 <_printf_float+0x1a4>
 8108812:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8108816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108818:	4299      	cmp	r1, r3
 810881a:	db05      	blt.n	8108828 <_printf_float+0x1d4>
 810881c:	6823      	ldr	r3, [r4, #0]
 810881e:	6121      	str	r1, [r4, #16]
 8108820:	07d8      	lsls	r0, r3, #31
 8108822:	d5ea      	bpl.n	81087fa <_printf_float+0x1a6>
 8108824:	1c4b      	adds	r3, r1, #1
 8108826:	e7e7      	b.n	81087f8 <_printf_float+0x1a4>
 8108828:	2900      	cmp	r1, #0
 810882a:	bfd4      	ite	le
 810882c:	f1c1 0202 	rsble	r2, r1, #2
 8108830:	2201      	movgt	r2, #1
 8108832:	4413      	add	r3, r2
 8108834:	e7e0      	b.n	81087f8 <_printf_float+0x1a4>
 8108836:	6823      	ldr	r3, [r4, #0]
 8108838:	055a      	lsls	r2, r3, #21
 810883a:	d407      	bmi.n	810884c <_printf_float+0x1f8>
 810883c:	6923      	ldr	r3, [r4, #16]
 810883e:	4642      	mov	r2, r8
 8108840:	4631      	mov	r1, r6
 8108842:	4628      	mov	r0, r5
 8108844:	47b8      	blx	r7
 8108846:	3001      	adds	r0, #1
 8108848:	d12c      	bne.n	81088a4 <_printf_float+0x250>
 810884a:	e764      	b.n	8108716 <_printf_float+0xc2>
 810884c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8108850:	f240 80e0 	bls.w	8108a14 <_printf_float+0x3c0>
 8108854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108858:	2200      	movs	r2, #0
 810885a:	2300      	movs	r3, #0
 810885c:	f7f8 f9bc 	bl	8100bd8 <__aeabi_dcmpeq>
 8108860:	2800      	cmp	r0, #0
 8108862:	d034      	beq.n	81088ce <_printf_float+0x27a>
 8108864:	4a37      	ldr	r2, [pc, #220]	; (8108944 <_printf_float+0x2f0>)
 8108866:	2301      	movs	r3, #1
 8108868:	4631      	mov	r1, r6
 810886a:	4628      	mov	r0, r5
 810886c:	47b8      	blx	r7
 810886e:	3001      	adds	r0, #1
 8108870:	f43f af51 	beq.w	8108716 <_printf_float+0xc2>
 8108874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108878:	429a      	cmp	r2, r3
 810887a:	db02      	blt.n	8108882 <_printf_float+0x22e>
 810887c:	6823      	ldr	r3, [r4, #0]
 810887e:	07d8      	lsls	r0, r3, #31
 8108880:	d510      	bpl.n	81088a4 <_printf_float+0x250>
 8108882:	ee18 3a10 	vmov	r3, s16
 8108886:	4652      	mov	r2, sl
 8108888:	4631      	mov	r1, r6
 810888a:	4628      	mov	r0, r5
 810888c:	47b8      	blx	r7
 810888e:	3001      	adds	r0, #1
 8108890:	f43f af41 	beq.w	8108716 <_printf_float+0xc2>
 8108894:	f04f 0800 	mov.w	r8, #0
 8108898:	f104 091a 	add.w	r9, r4, #26
 810889c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810889e:	3b01      	subs	r3, #1
 81088a0:	4543      	cmp	r3, r8
 81088a2:	dc09      	bgt.n	81088b8 <_printf_float+0x264>
 81088a4:	6823      	ldr	r3, [r4, #0]
 81088a6:	079b      	lsls	r3, r3, #30
 81088a8:	f100 8105 	bmi.w	8108ab6 <_printf_float+0x462>
 81088ac:	68e0      	ldr	r0, [r4, #12]
 81088ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81088b0:	4298      	cmp	r0, r3
 81088b2:	bfb8      	it	lt
 81088b4:	4618      	movlt	r0, r3
 81088b6:	e730      	b.n	810871a <_printf_float+0xc6>
 81088b8:	2301      	movs	r3, #1
 81088ba:	464a      	mov	r2, r9
 81088bc:	4631      	mov	r1, r6
 81088be:	4628      	mov	r0, r5
 81088c0:	47b8      	blx	r7
 81088c2:	3001      	adds	r0, #1
 81088c4:	f43f af27 	beq.w	8108716 <_printf_float+0xc2>
 81088c8:	f108 0801 	add.w	r8, r8, #1
 81088cc:	e7e6      	b.n	810889c <_printf_float+0x248>
 81088ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81088d0:	2b00      	cmp	r3, #0
 81088d2:	dc39      	bgt.n	8108948 <_printf_float+0x2f4>
 81088d4:	4a1b      	ldr	r2, [pc, #108]	; (8108944 <_printf_float+0x2f0>)
 81088d6:	2301      	movs	r3, #1
 81088d8:	4631      	mov	r1, r6
 81088da:	4628      	mov	r0, r5
 81088dc:	47b8      	blx	r7
 81088de:	3001      	adds	r0, #1
 81088e0:	f43f af19 	beq.w	8108716 <_printf_float+0xc2>
 81088e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81088e8:	4313      	orrs	r3, r2
 81088ea:	d102      	bne.n	81088f2 <_printf_float+0x29e>
 81088ec:	6823      	ldr	r3, [r4, #0]
 81088ee:	07d9      	lsls	r1, r3, #31
 81088f0:	d5d8      	bpl.n	81088a4 <_printf_float+0x250>
 81088f2:	ee18 3a10 	vmov	r3, s16
 81088f6:	4652      	mov	r2, sl
 81088f8:	4631      	mov	r1, r6
 81088fa:	4628      	mov	r0, r5
 81088fc:	47b8      	blx	r7
 81088fe:	3001      	adds	r0, #1
 8108900:	f43f af09 	beq.w	8108716 <_printf_float+0xc2>
 8108904:	f04f 0900 	mov.w	r9, #0
 8108908:	f104 0a1a 	add.w	sl, r4, #26
 810890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810890e:	425b      	negs	r3, r3
 8108910:	454b      	cmp	r3, r9
 8108912:	dc01      	bgt.n	8108918 <_printf_float+0x2c4>
 8108914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108916:	e792      	b.n	810883e <_printf_float+0x1ea>
 8108918:	2301      	movs	r3, #1
 810891a:	4652      	mov	r2, sl
 810891c:	4631      	mov	r1, r6
 810891e:	4628      	mov	r0, r5
 8108920:	47b8      	blx	r7
 8108922:	3001      	adds	r0, #1
 8108924:	f43f aef7 	beq.w	8108716 <_printf_float+0xc2>
 8108928:	f109 0901 	add.w	r9, r9, #1
 810892c:	e7ee      	b.n	810890c <_printf_float+0x2b8>
 810892e:	bf00      	nop
 8108930:	7fefffff 	.word	0x7fefffff
 8108934:	0810cfa8 	.word	0x0810cfa8
 8108938:	0810cfac 	.word	0x0810cfac
 810893c:	0810cfb4 	.word	0x0810cfb4
 8108940:	0810cfb0 	.word	0x0810cfb0
 8108944:	0810cfb8 	.word	0x0810cfb8
 8108948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810894a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810894c:	429a      	cmp	r2, r3
 810894e:	bfa8      	it	ge
 8108950:	461a      	movge	r2, r3
 8108952:	2a00      	cmp	r2, #0
 8108954:	4691      	mov	r9, r2
 8108956:	dc37      	bgt.n	81089c8 <_printf_float+0x374>
 8108958:	f04f 0b00 	mov.w	fp, #0
 810895c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108960:	f104 021a 	add.w	r2, r4, #26
 8108964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108966:	9305      	str	r3, [sp, #20]
 8108968:	eba3 0309 	sub.w	r3, r3, r9
 810896c:	455b      	cmp	r3, fp
 810896e:	dc33      	bgt.n	81089d8 <_printf_float+0x384>
 8108970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108974:	429a      	cmp	r2, r3
 8108976:	db3b      	blt.n	81089f0 <_printf_float+0x39c>
 8108978:	6823      	ldr	r3, [r4, #0]
 810897a:	07da      	lsls	r2, r3, #31
 810897c:	d438      	bmi.n	81089f0 <_printf_float+0x39c>
 810897e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108980:	9a05      	ldr	r2, [sp, #20]
 8108982:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108984:	1a9a      	subs	r2, r3, r2
 8108986:	eba3 0901 	sub.w	r9, r3, r1
 810898a:	4591      	cmp	r9, r2
 810898c:	bfa8      	it	ge
 810898e:	4691      	movge	r9, r2
 8108990:	f1b9 0f00 	cmp.w	r9, #0
 8108994:	dc35      	bgt.n	8108a02 <_printf_float+0x3ae>
 8108996:	f04f 0800 	mov.w	r8, #0
 810899a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810899e:	f104 0a1a 	add.w	sl, r4, #26
 81089a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81089a6:	1a9b      	subs	r3, r3, r2
 81089a8:	eba3 0309 	sub.w	r3, r3, r9
 81089ac:	4543      	cmp	r3, r8
 81089ae:	f77f af79 	ble.w	81088a4 <_printf_float+0x250>
 81089b2:	2301      	movs	r3, #1
 81089b4:	4652      	mov	r2, sl
 81089b6:	4631      	mov	r1, r6
 81089b8:	4628      	mov	r0, r5
 81089ba:	47b8      	blx	r7
 81089bc:	3001      	adds	r0, #1
 81089be:	f43f aeaa 	beq.w	8108716 <_printf_float+0xc2>
 81089c2:	f108 0801 	add.w	r8, r8, #1
 81089c6:	e7ec      	b.n	81089a2 <_printf_float+0x34e>
 81089c8:	4613      	mov	r3, r2
 81089ca:	4631      	mov	r1, r6
 81089cc:	4642      	mov	r2, r8
 81089ce:	4628      	mov	r0, r5
 81089d0:	47b8      	blx	r7
 81089d2:	3001      	adds	r0, #1
 81089d4:	d1c0      	bne.n	8108958 <_printf_float+0x304>
 81089d6:	e69e      	b.n	8108716 <_printf_float+0xc2>
 81089d8:	2301      	movs	r3, #1
 81089da:	4631      	mov	r1, r6
 81089dc:	4628      	mov	r0, r5
 81089de:	9205      	str	r2, [sp, #20]
 81089e0:	47b8      	blx	r7
 81089e2:	3001      	adds	r0, #1
 81089e4:	f43f ae97 	beq.w	8108716 <_printf_float+0xc2>
 81089e8:	9a05      	ldr	r2, [sp, #20]
 81089ea:	f10b 0b01 	add.w	fp, fp, #1
 81089ee:	e7b9      	b.n	8108964 <_printf_float+0x310>
 81089f0:	ee18 3a10 	vmov	r3, s16
 81089f4:	4652      	mov	r2, sl
 81089f6:	4631      	mov	r1, r6
 81089f8:	4628      	mov	r0, r5
 81089fa:	47b8      	blx	r7
 81089fc:	3001      	adds	r0, #1
 81089fe:	d1be      	bne.n	810897e <_printf_float+0x32a>
 8108a00:	e689      	b.n	8108716 <_printf_float+0xc2>
 8108a02:	9a05      	ldr	r2, [sp, #20]
 8108a04:	464b      	mov	r3, r9
 8108a06:	4442      	add	r2, r8
 8108a08:	4631      	mov	r1, r6
 8108a0a:	4628      	mov	r0, r5
 8108a0c:	47b8      	blx	r7
 8108a0e:	3001      	adds	r0, #1
 8108a10:	d1c1      	bne.n	8108996 <_printf_float+0x342>
 8108a12:	e680      	b.n	8108716 <_printf_float+0xc2>
 8108a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108a16:	2a01      	cmp	r2, #1
 8108a18:	dc01      	bgt.n	8108a1e <_printf_float+0x3ca>
 8108a1a:	07db      	lsls	r3, r3, #31
 8108a1c:	d538      	bpl.n	8108a90 <_printf_float+0x43c>
 8108a1e:	2301      	movs	r3, #1
 8108a20:	4642      	mov	r2, r8
 8108a22:	4631      	mov	r1, r6
 8108a24:	4628      	mov	r0, r5
 8108a26:	47b8      	blx	r7
 8108a28:	3001      	adds	r0, #1
 8108a2a:	f43f ae74 	beq.w	8108716 <_printf_float+0xc2>
 8108a2e:	ee18 3a10 	vmov	r3, s16
 8108a32:	4652      	mov	r2, sl
 8108a34:	4631      	mov	r1, r6
 8108a36:	4628      	mov	r0, r5
 8108a38:	47b8      	blx	r7
 8108a3a:	3001      	adds	r0, #1
 8108a3c:	f43f ae6b 	beq.w	8108716 <_printf_float+0xc2>
 8108a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108a44:	2200      	movs	r2, #0
 8108a46:	2300      	movs	r3, #0
 8108a48:	f7f8 f8c6 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a4c:	b9d8      	cbnz	r0, 8108a86 <_printf_float+0x432>
 8108a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108a50:	f108 0201 	add.w	r2, r8, #1
 8108a54:	3b01      	subs	r3, #1
 8108a56:	4631      	mov	r1, r6
 8108a58:	4628      	mov	r0, r5
 8108a5a:	47b8      	blx	r7
 8108a5c:	3001      	adds	r0, #1
 8108a5e:	d10e      	bne.n	8108a7e <_printf_float+0x42a>
 8108a60:	e659      	b.n	8108716 <_printf_float+0xc2>
 8108a62:	2301      	movs	r3, #1
 8108a64:	4652      	mov	r2, sl
 8108a66:	4631      	mov	r1, r6
 8108a68:	4628      	mov	r0, r5
 8108a6a:	47b8      	blx	r7
 8108a6c:	3001      	adds	r0, #1
 8108a6e:	f43f ae52 	beq.w	8108716 <_printf_float+0xc2>
 8108a72:	f108 0801 	add.w	r8, r8, #1
 8108a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108a78:	3b01      	subs	r3, #1
 8108a7a:	4543      	cmp	r3, r8
 8108a7c:	dcf1      	bgt.n	8108a62 <_printf_float+0x40e>
 8108a7e:	464b      	mov	r3, r9
 8108a80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8108a84:	e6dc      	b.n	8108840 <_printf_float+0x1ec>
 8108a86:	f04f 0800 	mov.w	r8, #0
 8108a8a:	f104 0a1a 	add.w	sl, r4, #26
 8108a8e:	e7f2      	b.n	8108a76 <_printf_float+0x422>
 8108a90:	2301      	movs	r3, #1
 8108a92:	4642      	mov	r2, r8
 8108a94:	e7df      	b.n	8108a56 <_printf_float+0x402>
 8108a96:	2301      	movs	r3, #1
 8108a98:	464a      	mov	r2, r9
 8108a9a:	4631      	mov	r1, r6
 8108a9c:	4628      	mov	r0, r5
 8108a9e:	47b8      	blx	r7
 8108aa0:	3001      	adds	r0, #1
 8108aa2:	f43f ae38 	beq.w	8108716 <_printf_float+0xc2>
 8108aa6:	f108 0801 	add.w	r8, r8, #1
 8108aaa:	68e3      	ldr	r3, [r4, #12]
 8108aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8108aae:	1a5b      	subs	r3, r3, r1
 8108ab0:	4543      	cmp	r3, r8
 8108ab2:	dcf0      	bgt.n	8108a96 <_printf_float+0x442>
 8108ab4:	e6fa      	b.n	81088ac <_printf_float+0x258>
 8108ab6:	f04f 0800 	mov.w	r8, #0
 8108aba:	f104 0919 	add.w	r9, r4, #25
 8108abe:	e7f4      	b.n	8108aaa <_printf_float+0x456>

08108ac0 <_printf_common>:
 8108ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108ac4:	4616      	mov	r6, r2
 8108ac6:	4699      	mov	r9, r3
 8108ac8:	688a      	ldr	r2, [r1, #8]
 8108aca:	690b      	ldr	r3, [r1, #16]
 8108acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108ad0:	4293      	cmp	r3, r2
 8108ad2:	bfb8      	it	lt
 8108ad4:	4613      	movlt	r3, r2
 8108ad6:	6033      	str	r3, [r6, #0]
 8108ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108adc:	4607      	mov	r7, r0
 8108ade:	460c      	mov	r4, r1
 8108ae0:	b10a      	cbz	r2, 8108ae6 <_printf_common+0x26>
 8108ae2:	3301      	adds	r3, #1
 8108ae4:	6033      	str	r3, [r6, #0]
 8108ae6:	6823      	ldr	r3, [r4, #0]
 8108ae8:	0699      	lsls	r1, r3, #26
 8108aea:	bf42      	ittt	mi
 8108aec:	6833      	ldrmi	r3, [r6, #0]
 8108aee:	3302      	addmi	r3, #2
 8108af0:	6033      	strmi	r3, [r6, #0]
 8108af2:	6825      	ldr	r5, [r4, #0]
 8108af4:	f015 0506 	ands.w	r5, r5, #6
 8108af8:	d106      	bne.n	8108b08 <_printf_common+0x48>
 8108afa:	f104 0a19 	add.w	sl, r4, #25
 8108afe:	68e3      	ldr	r3, [r4, #12]
 8108b00:	6832      	ldr	r2, [r6, #0]
 8108b02:	1a9b      	subs	r3, r3, r2
 8108b04:	42ab      	cmp	r3, r5
 8108b06:	dc26      	bgt.n	8108b56 <_printf_common+0x96>
 8108b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108b0c:	1e13      	subs	r3, r2, #0
 8108b0e:	6822      	ldr	r2, [r4, #0]
 8108b10:	bf18      	it	ne
 8108b12:	2301      	movne	r3, #1
 8108b14:	0692      	lsls	r2, r2, #26
 8108b16:	d42b      	bmi.n	8108b70 <_printf_common+0xb0>
 8108b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108b1c:	4649      	mov	r1, r9
 8108b1e:	4638      	mov	r0, r7
 8108b20:	47c0      	blx	r8
 8108b22:	3001      	adds	r0, #1
 8108b24:	d01e      	beq.n	8108b64 <_printf_common+0xa4>
 8108b26:	6823      	ldr	r3, [r4, #0]
 8108b28:	68e5      	ldr	r5, [r4, #12]
 8108b2a:	6832      	ldr	r2, [r6, #0]
 8108b2c:	f003 0306 	and.w	r3, r3, #6
 8108b30:	2b04      	cmp	r3, #4
 8108b32:	bf08      	it	eq
 8108b34:	1aad      	subeq	r5, r5, r2
 8108b36:	68a3      	ldr	r3, [r4, #8]
 8108b38:	6922      	ldr	r2, [r4, #16]
 8108b3a:	bf0c      	ite	eq
 8108b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108b40:	2500      	movne	r5, #0
 8108b42:	4293      	cmp	r3, r2
 8108b44:	bfc4      	itt	gt
 8108b46:	1a9b      	subgt	r3, r3, r2
 8108b48:	18ed      	addgt	r5, r5, r3
 8108b4a:	2600      	movs	r6, #0
 8108b4c:	341a      	adds	r4, #26
 8108b4e:	42b5      	cmp	r5, r6
 8108b50:	d11a      	bne.n	8108b88 <_printf_common+0xc8>
 8108b52:	2000      	movs	r0, #0
 8108b54:	e008      	b.n	8108b68 <_printf_common+0xa8>
 8108b56:	2301      	movs	r3, #1
 8108b58:	4652      	mov	r2, sl
 8108b5a:	4649      	mov	r1, r9
 8108b5c:	4638      	mov	r0, r7
 8108b5e:	47c0      	blx	r8
 8108b60:	3001      	adds	r0, #1
 8108b62:	d103      	bne.n	8108b6c <_printf_common+0xac>
 8108b64:	f04f 30ff 	mov.w	r0, #4294967295
 8108b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108b6c:	3501      	adds	r5, #1
 8108b6e:	e7c6      	b.n	8108afe <_printf_common+0x3e>
 8108b70:	18e1      	adds	r1, r4, r3
 8108b72:	1c5a      	adds	r2, r3, #1
 8108b74:	2030      	movs	r0, #48	; 0x30
 8108b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8108b7a:	4422      	add	r2, r4
 8108b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8108b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8108b84:	3302      	adds	r3, #2
 8108b86:	e7c7      	b.n	8108b18 <_printf_common+0x58>
 8108b88:	2301      	movs	r3, #1
 8108b8a:	4622      	mov	r2, r4
 8108b8c:	4649      	mov	r1, r9
 8108b8e:	4638      	mov	r0, r7
 8108b90:	47c0      	blx	r8
 8108b92:	3001      	adds	r0, #1
 8108b94:	d0e6      	beq.n	8108b64 <_printf_common+0xa4>
 8108b96:	3601      	adds	r6, #1
 8108b98:	e7d9      	b.n	8108b4e <_printf_common+0x8e>
	...

08108b9c <_printf_i>:
 8108b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108ba0:	7e0f      	ldrb	r7, [r1, #24]
 8108ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8108ba4:	2f78      	cmp	r7, #120	; 0x78
 8108ba6:	4691      	mov	r9, r2
 8108ba8:	4680      	mov	r8, r0
 8108baa:	460c      	mov	r4, r1
 8108bac:	469a      	mov	sl, r3
 8108bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8108bb2:	d807      	bhi.n	8108bc4 <_printf_i+0x28>
 8108bb4:	2f62      	cmp	r7, #98	; 0x62
 8108bb6:	d80a      	bhi.n	8108bce <_printf_i+0x32>
 8108bb8:	2f00      	cmp	r7, #0
 8108bba:	f000 80d8 	beq.w	8108d6e <_printf_i+0x1d2>
 8108bbe:	2f58      	cmp	r7, #88	; 0x58
 8108bc0:	f000 80a3 	beq.w	8108d0a <_printf_i+0x16e>
 8108bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8108bcc:	e03a      	b.n	8108c44 <_printf_i+0xa8>
 8108bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8108bd2:	2b15      	cmp	r3, #21
 8108bd4:	d8f6      	bhi.n	8108bc4 <_printf_i+0x28>
 8108bd6:	a101      	add	r1, pc, #4	; (adr r1, 8108bdc <_printf_i+0x40>)
 8108bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108bdc:	08108c35 	.word	0x08108c35
 8108be0:	08108c49 	.word	0x08108c49
 8108be4:	08108bc5 	.word	0x08108bc5
 8108be8:	08108bc5 	.word	0x08108bc5
 8108bec:	08108bc5 	.word	0x08108bc5
 8108bf0:	08108bc5 	.word	0x08108bc5
 8108bf4:	08108c49 	.word	0x08108c49
 8108bf8:	08108bc5 	.word	0x08108bc5
 8108bfc:	08108bc5 	.word	0x08108bc5
 8108c00:	08108bc5 	.word	0x08108bc5
 8108c04:	08108bc5 	.word	0x08108bc5
 8108c08:	08108d55 	.word	0x08108d55
 8108c0c:	08108c79 	.word	0x08108c79
 8108c10:	08108d37 	.word	0x08108d37
 8108c14:	08108bc5 	.word	0x08108bc5
 8108c18:	08108bc5 	.word	0x08108bc5
 8108c1c:	08108d77 	.word	0x08108d77
 8108c20:	08108bc5 	.word	0x08108bc5
 8108c24:	08108c79 	.word	0x08108c79
 8108c28:	08108bc5 	.word	0x08108bc5
 8108c2c:	08108bc5 	.word	0x08108bc5
 8108c30:	08108d3f 	.word	0x08108d3f
 8108c34:	682b      	ldr	r3, [r5, #0]
 8108c36:	1d1a      	adds	r2, r3, #4
 8108c38:	681b      	ldr	r3, [r3, #0]
 8108c3a:	602a      	str	r2, [r5, #0]
 8108c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108c44:	2301      	movs	r3, #1
 8108c46:	e0a3      	b.n	8108d90 <_printf_i+0x1f4>
 8108c48:	6820      	ldr	r0, [r4, #0]
 8108c4a:	6829      	ldr	r1, [r5, #0]
 8108c4c:	0606      	lsls	r6, r0, #24
 8108c4e:	f101 0304 	add.w	r3, r1, #4
 8108c52:	d50a      	bpl.n	8108c6a <_printf_i+0xce>
 8108c54:	680e      	ldr	r6, [r1, #0]
 8108c56:	602b      	str	r3, [r5, #0]
 8108c58:	2e00      	cmp	r6, #0
 8108c5a:	da03      	bge.n	8108c64 <_printf_i+0xc8>
 8108c5c:	232d      	movs	r3, #45	; 0x2d
 8108c5e:	4276      	negs	r6, r6
 8108c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108c64:	485e      	ldr	r0, [pc, #376]	; (8108de0 <_printf_i+0x244>)
 8108c66:	230a      	movs	r3, #10
 8108c68:	e019      	b.n	8108c9e <_printf_i+0x102>
 8108c6a:	680e      	ldr	r6, [r1, #0]
 8108c6c:	602b      	str	r3, [r5, #0]
 8108c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8108c72:	bf18      	it	ne
 8108c74:	b236      	sxthne	r6, r6
 8108c76:	e7ef      	b.n	8108c58 <_printf_i+0xbc>
 8108c78:	682b      	ldr	r3, [r5, #0]
 8108c7a:	6820      	ldr	r0, [r4, #0]
 8108c7c:	1d19      	adds	r1, r3, #4
 8108c7e:	6029      	str	r1, [r5, #0]
 8108c80:	0601      	lsls	r1, r0, #24
 8108c82:	d501      	bpl.n	8108c88 <_printf_i+0xec>
 8108c84:	681e      	ldr	r6, [r3, #0]
 8108c86:	e002      	b.n	8108c8e <_printf_i+0xf2>
 8108c88:	0646      	lsls	r6, r0, #25
 8108c8a:	d5fb      	bpl.n	8108c84 <_printf_i+0xe8>
 8108c8c:	881e      	ldrh	r6, [r3, #0]
 8108c8e:	4854      	ldr	r0, [pc, #336]	; (8108de0 <_printf_i+0x244>)
 8108c90:	2f6f      	cmp	r7, #111	; 0x6f
 8108c92:	bf0c      	ite	eq
 8108c94:	2308      	moveq	r3, #8
 8108c96:	230a      	movne	r3, #10
 8108c98:	2100      	movs	r1, #0
 8108c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8108c9e:	6865      	ldr	r5, [r4, #4]
 8108ca0:	60a5      	str	r5, [r4, #8]
 8108ca2:	2d00      	cmp	r5, #0
 8108ca4:	bfa2      	ittt	ge
 8108ca6:	6821      	ldrge	r1, [r4, #0]
 8108ca8:	f021 0104 	bicge.w	r1, r1, #4
 8108cac:	6021      	strge	r1, [r4, #0]
 8108cae:	b90e      	cbnz	r6, 8108cb4 <_printf_i+0x118>
 8108cb0:	2d00      	cmp	r5, #0
 8108cb2:	d04d      	beq.n	8108d50 <_printf_i+0x1b4>
 8108cb4:	4615      	mov	r5, r2
 8108cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8108cba:	fb03 6711 	mls	r7, r3, r1, r6
 8108cbe:	5dc7      	ldrb	r7, [r0, r7]
 8108cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8108cc4:	4637      	mov	r7, r6
 8108cc6:	42bb      	cmp	r3, r7
 8108cc8:	460e      	mov	r6, r1
 8108cca:	d9f4      	bls.n	8108cb6 <_printf_i+0x11a>
 8108ccc:	2b08      	cmp	r3, #8
 8108cce:	d10b      	bne.n	8108ce8 <_printf_i+0x14c>
 8108cd0:	6823      	ldr	r3, [r4, #0]
 8108cd2:	07de      	lsls	r6, r3, #31
 8108cd4:	d508      	bpl.n	8108ce8 <_printf_i+0x14c>
 8108cd6:	6923      	ldr	r3, [r4, #16]
 8108cd8:	6861      	ldr	r1, [r4, #4]
 8108cda:	4299      	cmp	r1, r3
 8108cdc:	bfde      	ittt	le
 8108cde:	2330      	movle	r3, #48	; 0x30
 8108ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8108ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8108ce8:	1b52      	subs	r2, r2, r5
 8108cea:	6122      	str	r2, [r4, #16]
 8108cec:	f8cd a000 	str.w	sl, [sp]
 8108cf0:	464b      	mov	r3, r9
 8108cf2:	aa03      	add	r2, sp, #12
 8108cf4:	4621      	mov	r1, r4
 8108cf6:	4640      	mov	r0, r8
 8108cf8:	f7ff fee2 	bl	8108ac0 <_printf_common>
 8108cfc:	3001      	adds	r0, #1
 8108cfe:	d14c      	bne.n	8108d9a <_printf_i+0x1fe>
 8108d00:	f04f 30ff 	mov.w	r0, #4294967295
 8108d04:	b004      	add	sp, #16
 8108d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108d0a:	4835      	ldr	r0, [pc, #212]	; (8108de0 <_printf_i+0x244>)
 8108d0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8108d10:	6829      	ldr	r1, [r5, #0]
 8108d12:	6823      	ldr	r3, [r4, #0]
 8108d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8108d18:	6029      	str	r1, [r5, #0]
 8108d1a:	061d      	lsls	r5, r3, #24
 8108d1c:	d514      	bpl.n	8108d48 <_printf_i+0x1ac>
 8108d1e:	07df      	lsls	r7, r3, #31
 8108d20:	bf44      	itt	mi
 8108d22:	f043 0320 	orrmi.w	r3, r3, #32
 8108d26:	6023      	strmi	r3, [r4, #0]
 8108d28:	b91e      	cbnz	r6, 8108d32 <_printf_i+0x196>
 8108d2a:	6823      	ldr	r3, [r4, #0]
 8108d2c:	f023 0320 	bic.w	r3, r3, #32
 8108d30:	6023      	str	r3, [r4, #0]
 8108d32:	2310      	movs	r3, #16
 8108d34:	e7b0      	b.n	8108c98 <_printf_i+0xfc>
 8108d36:	6823      	ldr	r3, [r4, #0]
 8108d38:	f043 0320 	orr.w	r3, r3, #32
 8108d3c:	6023      	str	r3, [r4, #0]
 8108d3e:	2378      	movs	r3, #120	; 0x78
 8108d40:	4828      	ldr	r0, [pc, #160]	; (8108de4 <_printf_i+0x248>)
 8108d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108d46:	e7e3      	b.n	8108d10 <_printf_i+0x174>
 8108d48:	0659      	lsls	r1, r3, #25
 8108d4a:	bf48      	it	mi
 8108d4c:	b2b6      	uxthmi	r6, r6
 8108d4e:	e7e6      	b.n	8108d1e <_printf_i+0x182>
 8108d50:	4615      	mov	r5, r2
 8108d52:	e7bb      	b.n	8108ccc <_printf_i+0x130>
 8108d54:	682b      	ldr	r3, [r5, #0]
 8108d56:	6826      	ldr	r6, [r4, #0]
 8108d58:	6961      	ldr	r1, [r4, #20]
 8108d5a:	1d18      	adds	r0, r3, #4
 8108d5c:	6028      	str	r0, [r5, #0]
 8108d5e:	0635      	lsls	r5, r6, #24
 8108d60:	681b      	ldr	r3, [r3, #0]
 8108d62:	d501      	bpl.n	8108d68 <_printf_i+0x1cc>
 8108d64:	6019      	str	r1, [r3, #0]
 8108d66:	e002      	b.n	8108d6e <_printf_i+0x1d2>
 8108d68:	0670      	lsls	r0, r6, #25
 8108d6a:	d5fb      	bpl.n	8108d64 <_printf_i+0x1c8>
 8108d6c:	8019      	strh	r1, [r3, #0]
 8108d6e:	2300      	movs	r3, #0
 8108d70:	6123      	str	r3, [r4, #16]
 8108d72:	4615      	mov	r5, r2
 8108d74:	e7ba      	b.n	8108cec <_printf_i+0x150>
 8108d76:	682b      	ldr	r3, [r5, #0]
 8108d78:	1d1a      	adds	r2, r3, #4
 8108d7a:	602a      	str	r2, [r5, #0]
 8108d7c:	681d      	ldr	r5, [r3, #0]
 8108d7e:	6862      	ldr	r2, [r4, #4]
 8108d80:	2100      	movs	r1, #0
 8108d82:	4628      	mov	r0, r5
 8108d84:	f7f7 fab4 	bl	81002f0 <memchr>
 8108d88:	b108      	cbz	r0, 8108d8e <_printf_i+0x1f2>
 8108d8a:	1b40      	subs	r0, r0, r5
 8108d8c:	6060      	str	r0, [r4, #4]
 8108d8e:	6863      	ldr	r3, [r4, #4]
 8108d90:	6123      	str	r3, [r4, #16]
 8108d92:	2300      	movs	r3, #0
 8108d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108d98:	e7a8      	b.n	8108cec <_printf_i+0x150>
 8108d9a:	6923      	ldr	r3, [r4, #16]
 8108d9c:	462a      	mov	r2, r5
 8108d9e:	4649      	mov	r1, r9
 8108da0:	4640      	mov	r0, r8
 8108da2:	47d0      	blx	sl
 8108da4:	3001      	adds	r0, #1
 8108da6:	d0ab      	beq.n	8108d00 <_printf_i+0x164>
 8108da8:	6823      	ldr	r3, [r4, #0]
 8108daa:	079b      	lsls	r3, r3, #30
 8108dac:	d413      	bmi.n	8108dd6 <_printf_i+0x23a>
 8108dae:	68e0      	ldr	r0, [r4, #12]
 8108db0:	9b03      	ldr	r3, [sp, #12]
 8108db2:	4298      	cmp	r0, r3
 8108db4:	bfb8      	it	lt
 8108db6:	4618      	movlt	r0, r3
 8108db8:	e7a4      	b.n	8108d04 <_printf_i+0x168>
 8108dba:	2301      	movs	r3, #1
 8108dbc:	4632      	mov	r2, r6
 8108dbe:	4649      	mov	r1, r9
 8108dc0:	4640      	mov	r0, r8
 8108dc2:	47d0      	blx	sl
 8108dc4:	3001      	adds	r0, #1
 8108dc6:	d09b      	beq.n	8108d00 <_printf_i+0x164>
 8108dc8:	3501      	adds	r5, #1
 8108dca:	68e3      	ldr	r3, [r4, #12]
 8108dcc:	9903      	ldr	r1, [sp, #12]
 8108dce:	1a5b      	subs	r3, r3, r1
 8108dd0:	42ab      	cmp	r3, r5
 8108dd2:	dcf2      	bgt.n	8108dba <_printf_i+0x21e>
 8108dd4:	e7eb      	b.n	8108dae <_printf_i+0x212>
 8108dd6:	2500      	movs	r5, #0
 8108dd8:	f104 0619 	add.w	r6, r4, #25
 8108ddc:	e7f5      	b.n	8108dca <_printf_i+0x22e>
 8108dde:	bf00      	nop
 8108de0:	0810cfba 	.word	0x0810cfba
 8108de4:	0810cfcb 	.word	0x0810cfcb

08108de8 <_scanf_float>:
 8108de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108dec:	b087      	sub	sp, #28
 8108dee:	4617      	mov	r7, r2
 8108df0:	9303      	str	r3, [sp, #12]
 8108df2:	688b      	ldr	r3, [r1, #8]
 8108df4:	1e5a      	subs	r2, r3, #1
 8108df6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8108dfa:	bf83      	ittte	hi
 8108dfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8108e00:	195b      	addhi	r3, r3, r5
 8108e02:	9302      	strhi	r3, [sp, #8]
 8108e04:	2300      	movls	r3, #0
 8108e06:	bf86      	itte	hi
 8108e08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8108e0c:	608b      	strhi	r3, [r1, #8]
 8108e0e:	9302      	strls	r3, [sp, #8]
 8108e10:	680b      	ldr	r3, [r1, #0]
 8108e12:	468b      	mov	fp, r1
 8108e14:	2500      	movs	r5, #0
 8108e16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8108e1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8108e1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8108e22:	4680      	mov	r8, r0
 8108e24:	460c      	mov	r4, r1
 8108e26:	465e      	mov	r6, fp
 8108e28:	46aa      	mov	sl, r5
 8108e2a:	46a9      	mov	r9, r5
 8108e2c:	9501      	str	r5, [sp, #4]
 8108e2e:	68a2      	ldr	r2, [r4, #8]
 8108e30:	b152      	cbz	r2, 8108e48 <_scanf_float+0x60>
 8108e32:	683b      	ldr	r3, [r7, #0]
 8108e34:	781b      	ldrb	r3, [r3, #0]
 8108e36:	2b4e      	cmp	r3, #78	; 0x4e
 8108e38:	d864      	bhi.n	8108f04 <_scanf_float+0x11c>
 8108e3a:	2b40      	cmp	r3, #64	; 0x40
 8108e3c:	d83c      	bhi.n	8108eb8 <_scanf_float+0xd0>
 8108e3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108e42:	b2c8      	uxtb	r0, r1
 8108e44:	280e      	cmp	r0, #14
 8108e46:	d93a      	bls.n	8108ebe <_scanf_float+0xd6>
 8108e48:	f1b9 0f00 	cmp.w	r9, #0
 8108e4c:	d003      	beq.n	8108e56 <_scanf_float+0x6e>
 8108e4e:	6823      	ldr	r3, [r4, #0]
 8108e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108e54:	6023      	str	r3, [r4, #0]
 8108e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108e5a:	f1ba 0f01 	cmp.w	sl, #1
 8108e5e:	f200 8113 	bhi.w	8109088 <_scanf_float+0x2a0>
 8108e62:	455e      	cmp	r6, fp
 8108e64:	f200 8105 	bhi.w	8109072 <_scanf_float+0x28a>
 8108e68:	2501      	movs	r5, #1
 8108e6a:	4628      	mov	r0, r5
 8108e6c:	b007      	add	sp, #28
 8108e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108e72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8108e76:	2a0d      	cmp	r2, #13
 8108e78:	d8e6      	bhi.n	8108e48 <_scanf_float+0x60>
 8108e7a:	a101      	add	r1, pc, #4	; (adr r1, 8108e80 <_scanf_float+0x98>)
 8108e7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8108e80:	08108fbf 	.word	0x08108fbf
 8108e84:	08108e49 	.word	0x08108e49
 8108e88:	08108e49 	.word	0x08108e49
 8108e8c:	08108e49 	.word	0x08108e49
 8108e90:	0810901f 	.word	0x0810901f
 8108e94:	08108ff7 	.word	0x08108ff7
 8108e98:	08108e49 	.word	0x08108e49
 8108e9c:	08108e49 	.word	0x08108e49
 8108ea0:	08108fcd 	.word	0x08108fcd
 8108ea4:	08108e49 	.word	0x08108e49
 8108ea8:	08108e49 	.word	0x08108e49
 8108eac:	08108e49 	.word	0x08108e49
 8108eb0:	08108e49 	.word	0x08108e49
 8108eb4:	08108f85 	.word	0x08108f85
 8108eb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8108ebc:	e7db      	b.n	8108e76 <_scanf_float+0x8e>
 8108ebe:	290e      	cmp	r1, #14
 8108ec0:	d8c2      	bhi.n	8108e48 <_scanf_float+0x60>
 8108ec2:	a001      	add	r0, pc, #4	; (adr r0, 8108ec8 <_scanf_float+0xe0>)
 8108ec4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108ec8:	08108f77 	.word	0x08108f77
 8108ecc:	08108e49 	.word	0x08108e49
 8108ed0:	08108f77 	.word	0x08108f77
 8108ed4:	0810900b 	.word	0x0810900b
 8108ed8:	08108e49 	.word	0x08108e49
 8108edc:	08108f25 	.word	0x08108f25
 8108ee0:	08108f61 	.word	0x08108f61
 8108ee4:	08108f61 	.word	0x08108f61
 8108ee8:	08108f61 	.word	0x08108f61
 8108eec:	08108f61 	.word	0x08108f61
 8108ef0:	08108f61 	.word	0x08108f61
 8108ef4:	08108f61 	.word	0x08108f61
 8108ef8:	08108f61 	.word	0x08108f61
 8108efc:	08108f61 	.word	0x08108f61
 8108f00:	08108f61 	.word	0x08108f61
 8108f04:	2b6e      	cmp	r3, #110	; 0x6e
 8108f06:	d809      	bhi.n	8108f1c <_scanf_float+0x134>
 8108f08:	2b60      	cmp	r3, #96	; 0x60
 8108f0a:	d8b2      	bhi.n	8108e72 <_scanf_float+0x8a>
 8108f0c:	2b54      	cmp	r3, #84	; 0x54
 8108f0e:	d077      	beq.n	8109000 <_scanf_float+0x218>
 8108f10:	2b59      	cmp	r3, #89	; 0x59
 8108f12:	d199      	bne.n	8108e48 <_scanf_float+0x60>
 8108f14:	2d07      	cmp	r5, #7
 8108f16:	d197      	bne.n	8108e48 <_scanf_float+0x60>
 8108f18:	2508      	movs	r5, #8
 8108f1a:	e029      	b.n	8108f70 <_scanf_float+0x188>
 8108f1c:	2b74      	cmp	r3, #116	; 0x74
 8108f1e:	d06f      	beq.n	8109000 <_scanf_float+0x218>
 8108f20:	2b79      	cmp	r3, #121	; 0x79
 8108f22:	e7f6      	b.n	8108f12 <_scanf_float+0x12a>
 8108f24:	6821      	ldr	r1, [r4, #0]
 8108f26:	05c8      	lsls	r0, r1, #23
 8108f28:	d51a      	bpl.n	8108f60 <_scanf_float+0x178>
 8108f2a:	9b02      	ldr	r3, [sp, #8]
 8108f2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108f30:	6021      	str	r1, [r4, #0]
 8108f32:	f109 0901 	add.w	r9, r9, #1
 8108f36:	b11b      	cbz	r3, 8108f40 <_scanf_float+0x158>
 8108f38:	3b01      	subs	r3, #1
 8108f3a:	3201      	adds	r2, #1
 8108f3c:	9302      	str	r3, [sp, #8]
 8108f3e:	60a2      	str	r2, [r4, #8]
 8108f40:	68a3      	ldr	r3, [r4, #8]
 8108f42:	3b01      	subs	r3, #1
 8108f44:	60a3      	str	r3, [r4, #8]
 8108f46:	6923      	ldr	r3, [r4, #16]
 8108f48:	3301      	adds	r3, #1
 8108f4a:	6123      	str	r3, [r4, #16]
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	3b01      	subs	r3, #1
 8108f50:	2b00      	cmp	r3, #0
 8108f52:	607b      	str	r3, [r7, #4]
 8108f54:	f340 8084 	ble.w	8109060 <_scanf_float+0x278>
 8108f58:	683b      	ldr	r3, [r7, #0]
 8108f5a:	3301      	adds	r3, #1
 8108f5c:	603b      	str	r3, [r7, #0]
 8108f5e:	e766      	b.n	8108e2e <_scanf_float+0x46>
 8108f60:	eb1a 0f05 	cmn.w	sl, r5
 8108f64:	f47f af70 	bne.w	8108e48 <_scanf_float+0x60>
 8108f68:	6822      	ldr	r2, [r4, #0]
 8108f6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8108f6e:	6022      	str	r2, [r4, #0]
 8108f70:	f806 3b01 	strb.w	r3, [r6], #1
 8108f74:	e7e4      	b.n	8108f40 <_scanf_float+0x158>
 8108f76:	6822      	ldr	r2, [r4, #0]
 8108f78:	0610      	lsls	r0, r2, #24
 8108f7a:	f57f af65 	bpl.w	8108e48 <_scanf_float+0x60>
 8108f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8108f82:	e7f4      	b.n	8108f6e <_scanf_float+0x186>
 8108f84:	f1ba 0f00 	cmp.w	sl, #0
 8108f88:	d10e      	bne.n	8108fa8 <_scanf_float+0x1c0>
 8108f8a:	f1b9 0f00 	cmp.w	r9, #0
 8108f8e:	d10e      	bne.n	8108fae <_scanf_float+0x1c6>
 8108f90:	6822      	ldr	r2, [r4, #0]
 8108f92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108f96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108f9a:	d108      	bne.n	8108fae <_scanf_float+0x1c6>
 8108f9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108fa0:	6022      	str	r2, [r4, #0]
 8108fa2:	f04f 0a01 	mov.w	sl, #1
 8108fa6:	e7e3      	b.n	8108f70 <_scanf_float+0x188>
 8108fa8:	f1ba 0f02 	cmp.w	sl, #2
 8108fac:	d055      	beq.n	810905a <_scanf_float+0x272>
 8108fae:	2d01      	cmp	r5, #1
 8108fb0:	d002      	beq.n	8108fb8 <_scanf_float+0x1d0>
 8108fb2:	2d04      	cmp	r5, #4
 8108fb4:	f47f af48 	bne.w	8108e48 <_scanf_float+0x60>
 8108fb8:	3501      	adds	r5, #1
 8108fba:	b2ed      	uxtb	r5, r5
 8108fbc:	e7d8      	b.n	8108f70 <_scanf_float+0x188>
 8108fbe:	f1ba 0f01 	cmp.w	sl, #1
 8108fc2:	f47f af41 	bne.w	8108e48 <_scanf_float+0x60>
 8108fc6:	f04f 0a02 	mov.w	sl, #2
 8108fca:	e7d1      	b.n	8108f70 <_scanf_float+0x188>
 8108fcc:	b97d      	cbnz	r5, 8108fee <_scanf_float+0x206>
 8108fce:	f1b9 0f00 	cmp.w	r9, #0
 8108fd2:	f47f af3c 	bne.w	8108e4e <_scanf_float+0x66>
 8108fd6:	6822      	ldr	r2, [r4, #0]
 8108fd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108fdc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108fe0:	f47f af39 	bne.w	8108e56 <_scanf_float+0x6e>
 8108fe4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108fe8:	6022      	str	r2, [r4, #0]
 8108fea:	2501      	movs	r5, #1
 8108fec:	e7c0      	b.n	8108f70 <_scanf_float+0x188>
 8108fee:	2d03      	cmp	r5, #3
 8108ff0:	d0e2      	beq.n	8108fb8 <_scanf_float+0x1d0>
 8108ff2:	2d05      	cmp	r5, #5
 8108ff4:	e7de      	b.n	8108fb4 <_scanf_float+0x1cc>
 8108ff6:	2d02      	cmp	r5, #2
 8108ff8:	f47f af26 	bne.w	8108e48 <_scanf_float+0x60>
 8108ffc:	2503      	movs	r5, #3
 8108ffe:	e7b7      	b.n	8108f70 <_scanf_float+0x188>
 8109000:	2d06      	cmp	r5, #6
 8109002:	f47f af21 	bne.w	8108e48 <_scanf_float+0x60>
 8109006:	2507      	movs	r5, #7
 8109008:	e7b2      	b.n	8108f70 <_scanf_float+0x188>
 810900a:	6822      	ldr	r2, [r4, #0]
 810900c:	0591      	lsls	r1, r2, #22
 810900e:	f57f af1b 	bpl.w	8108e48 <_scanf_float+0x60>
 8109012:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109016:	6022      	str	r2, [r4, #0]
 8109018:	f8cd 9004 	str.w	r9, [sp, #4]
 810901c:	e7a8      	b.n	8108f70 <_scanf_float+0x188>
 810901e:	6822      	ldr	r2, [r4, #0]
 8109020:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109024:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109028:	d006      	beq.n	8109038 <_scanf_float+0x250>
 810902a:	0550      	lsls	r0, r2, #21
 810902c:	f57f af0c 	bpl.w	8108e48 <_scanf_float+0x60>
 8109030:	f1b9 0f00 	cmp.w	r9, #0
 8109034:	f43f af0f 	beq.w	8108e56 <_scanf_float+0x6e>
 8109038:	0591      	lsls	r1, r2, #22
 810903a:	bf58      	it	pl
 810903c:	9901      	ldrpl	r1, [sp, #4]
 810903e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109042:	bf58      	it	pl
 8109044:	eba9 0101 	subpl.w	r1, r9, r1
 8109048:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810904c:	bf58      	it	pl
 810904e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109052:	6022      	str	r2, [r4, #0]
 8109054:	f04f 0900 	mov.w	r9, #0
 8109058:	e78a      	b.n	8108f70 <_scanf_float+0x188>
 810905a:	f04f 0a03 	mov.w	sl, #3
 810905e:	e787      	b.n	8108f70 <_scanf_float+0x188>
 8109060:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109064:	4639      	mov	r1, r7
 8109066:	4640      	mov	r0, r8
 8109068:	4798      	blx	r3
 810906a:	2800      	cmp	r0, #0
 810906c:	f43f aedf 	beq.w	8108e2e <_scanf_float+0x46>
 8109070:	e6ea      	b.n	8108e48 <_scanf_float+0x60>
 8109072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109076:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810907a:	463a      	mov	r2, r7
 810907c:	4640      	mov	r0, r8
 810907e:	4798      	blx	r3
 8109080:	6923      	ldr	r3, [r4, #16]
 8109082:	3b01      	subs	r3, #1
 8109084:	6123      	str	r3, [r4, #16]
 8109086:	e6ec      	b.n	8108e62 <_scanf_float+0x7a>
 8109088:	1e6b      	subs	r3, r5, #1
 810908a:	2b06      	cmp	r3, #6
 810908c:	d825      	bhi.n	81090da <_scanf_float+0x2f2>
 810908e:	2d02      	cmp	r5, #2
 8109090:	d836      	bhi.n	8109100 <_scanf_float+0x318>
 8109092:	455e      	cmp	r6, fp
 8109094:	f67f aee8 	bls.w	8108e68 <_scanf_float+0x80>
 8109098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810909c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81090a0:	463a      	mov	r2, r7
 81090a2:	4640      	mov	r0, r8
 81090a4:	4798      	blx	r3
 81090a6:	6923      	ldr	r3, [r4, #16]
 81090a8:	3b01      	subs	r3, #1
 81090aa:	6123      	str	r3, [r4, #16]
 81090ac:	e7f1      	b.n	8109092 <_scanf_float+0x2aa>
 81090ae:	9802      	ldr	r0, [sp, #8]
 81090b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81090b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81090b8:	9002      	str	r0, [sp, #8]
 81090ba:	463a      	mov	r2, r7
 81090bc:	4640      	mov	r0, r8
 81090be:	4798      	blx	r3
 81090c0:	6923      	ldr	r3, [r4, #16]
 81090c2:	3b01      	subs	r3, #1
 81090c4:	6123      	str	r3, [r4, #16]
 81090c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81090ca:	fa5f fa8a 	uxtb.w	sl, sl
 81090ce:	f1ba 0f02 	cmp.w	sl, #2
 81090d2:	d1ec      	bne.n	81090ae <_scanf_float+0x2c6>
 81090d4:	3d03      	subs	r5, #3
 81090d6:	b2ed      	uxtb	r5, r5
 81090d8:	1b76      	subs	r6, r6, r5
 81090da:	6823      	ldr	r3, [r4, #0]
 81090dc:	05da      	lsls	r2, r3, #23
 81090de:	d52f      	bpl.n	8109140 <_scanf_float+0x358>
 81090e0:	055b      	lsls	r3, r3, #21
 81090e2:	d510      	bpl.n	8109106 <_scanf_float+0x31e>
 81090e4:	455e      	cmp	r6, fp
 81090e6:	f67f aebf 	bls.w	8108e68 <_scanf_float+0x80>
 81090ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81090ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81090f2:	463a      	mov	r2, r7
 81090f4:	4640      	mov	r0, r8
 81090f6:	4798      	blx	r3
 81090f8:	6923      	ldr	r3, [r4, #16]
 81090fa:	3b01      	subs	r3, #1
 81090fc:	6123      	str	r3, [r4, #16]
 81090fe:	e7f1      	b.n	81090e4 <_scanf_float+0x2fc>
 8109100:	46aa      	mov	sl, r5
 8109102:	9602      	str	r6, [sp, #8]
 8109104:	e7df      	b.n	81090c6 <_scanf_float+0x2de>
 8109106:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810910a:	6923      	ldr	r3, [r4, #16]
 810910c:	2965      	cmp	r1, #101	; 0x65
 810910e:	f103 33ff 	add.w	r3, r3, #4294967295
 8109112:	f106 35ff 	add.w	r5, r6, #4294967295
 8109116:	6123      	str	r3, [r4, #16]
 8109118:	d00c      	beq.n	8109134 <_scanf_float+0x34c>
 810911a:	2945      	cmp	r1, #69	; 0x45
 810911c:	d00a      	beq.n	8109134 <_scanf_float+0x34c>
 810911e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109122:	463a      	mov	r2, r7
 8109124:	4640      	mov	r0, r8
 8109126:	4798      	blx	r3
 8109128:	6923      	ldr	r3, [r4, #16]
 810912a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810912e:	3b01      	subs	r3, #1
 8109130:	1eb5      	subs	r5, r6, #2
 8109132:	6123      	str	r3, [r4, #16]
 8109134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109138:	463a      	mov	r2, r7
 810913a:	4640      	mov	r0, r8
 810913c:	4798      	blx	r3
 810913e:	462e      	mov	r6, r5
 8109140:	6825      	ldr	r5, [r4, #0]
 8109142:	f015 0510 	ands.w	r5, r5, #16
 8109146:	d159      	bne.n	81091fc <_scanf_float+0x414>
 8109148:	7035      	strb	r5, [r6, #0]
 810914a:	6823      	ldr	r3, [r4, #0]
 810914c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109154:	d11b      	bne.n	810918e <_scanf_float+0x3a6>
 8109156:	9b01      	ldr	r3, [sp, #4]
 8109158:	454b      	cmp	r3, r9
 810915a:	eba3 0209 	sub.w	r2, r3, r9
 810915e:	d123      	bne.n	81091a8 <_scanf_float+0x3c0>
 8109160:	2200      	movs	r2, #0
 8109162:	4659      	mov	r1, fp
 8109164:	4640      	mov	r0, r8
 8109166:	f000 ff25 	bl	8109fb4 <_strtod_r>
 810916a:	6822      	ldr	r2, [r4, #0]
 810916c:	9b03      	ldr	r3, [sp, #12]
 810916e:	f012 0f02 	tst.w	r2, #2
 8109172:	ec57 6b10 	vmov	r6, r7, d0
 8109176:	681b      	ldr	r3, [r3, #0]
 8109178:	d021      	beq.n	81091be <_scanf_float+0x3d6>
 810917a:	9903      	ldr	r1, [sp, #12]
 810917c:	1d1a      	adds	r2, r3, #4
 810917e:	600a      	str	r2, [r1, #0]
 8109180:	681b      	ldr	r3, [r3, #0]
 8109182:	e9c3 6700 	strd	r6, r7, [r3]
 8109186:	68e3      	ldr	r3, [r4, #12]
 8109188:	3301      	adds	r3, #1
 810918a:	60e3      	str	r3, [r4, #12]
 810918c:	e66d      	b.n	8108e6a <_scanf_float+0x82>
 810918e:	9b04      	ldr	r3, [sp, #16]
 8109190:	2b00      	cmp	r3, #0
 8109192:	d0e5      	beq.n	8109160 <_scanf_float+0x378>
 8109194:	9905      	ldr	r1, [sp, #20]
 8109196:	230a      	movs	r3, #10
 8109198:	462a      	mov	r2, r5
 810919a:	3101      	adds	r1, #1
 810919c:	4640      	mov	r0, r8
 810919e:	f000 ff91 	bl	810a0c4 <_strtol_r>
 81091a2:	9b04      	ldr	r3, [sp, #16]
 81091a4:	9e05      	ldr	r6, [sp, #20]
 81091a6:	1ac2      	subs	r2, r0, r3
 81091a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81091ac:	429e      	cmp	r6, r3
 81091ae:	bf28      	it	cs
 81091b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81091b4:	4912      	ldr	r1, [pc, #72]	; (8109200 <_scanf_float+0x418>)
 81091b6:	4630      	mov	r0, r6
 81091b8:	f000 f8ba 	bl	8109330 <siprintf>
 81091bc:	e7d0      	b.n	8109160 <_scanf_float+0x378>
 81091be:	9903      	ldr	r1, [sp, #12]
 81091c0:	f012 0f04 	tst.w	r2, #4
 81091c4:	f103 0204 	add.w	r2, r3, #4
 81091c8:	600a      	str	r2, [r1, #0]
 81091ca:	d1d9      	bne.n	8109180 <_scanf_float+0x398>
 81091cc:	f8d3 8000 	ldr.w	r8, [r3]
 81091d0:	ee10 2a10 	vmov	r2, s0
 81091d4:	ee10 0a10 	vmov	r0, s0
 81091d8:	463b      	mov	r3, r7
 81091da:	4639      	mov	r1, r7
 81091dc:	f7f7 fd2e 	bl	8100c3c <__aeabi_dcmpun>
 81091e0:	b128      	cbz	r0, 81091ee <_scanf_float+0x406>
 81091e2:	4808      	ldr	r0, [pc, #32]	; (8109204 <_scanf_float+0x41c>)
 81091e4:	f000 f89e 	bl	8109324 <nanf>
 81091e8:	ed88 0a00 	vstr	s0, [r8]
 81091ec:	e7cb      	b.n	8109186 <_scanf_float+0x39e>
 81091ee:	4630      	mov	r0, r6
 81091f0:	4639      	mov	r1, r7
 81091f2:	f7f7 fd81 	bl	8100cf8 <__aeabi_d2f>
 81091f6:	f8c8 0000 	str.w	r0, [r8]
 81091fa:	e7c4      	b.n	8109186 <_scanf_float+0x39e>
 81091fc:	2500      	movs	r5, #0
 81091fe:	e634      	b.n	8108e6a <_scanf_float+0x82>
 8109200:	0810cfdc 	.word	0x0810cfdc
 8109204:	0810d450 	.word	0x0810d450

08109208 <iprintf>:
 8109208:	b40f      	push	{r0, r1, r2, r3}
 810920a:	4b0a      	ldr	r3, [pc, #40]	; (8109234 <iprintf+0x2c>)
 810920c:	b513      	push	{r0, r1, r4, lr}
 810920e:	681c      	ldr	r4, [r3, #0]
 8109210:	b124      	cbz	r4, 810921c <iprintf+0x14>
 8109212:	69a3      	ldr	r3, [r4, #24]
 8109214:	b913      	cbnz	r3, 810921c <iprintf+0x14>
 8109216:	4620      	mov	r0, r4
 8109218:	f001 ffaa 	bl	810b170 <__sinit>
 810921c:	ab05      	add	r3, sp, #20
 810921e:	9a04      	ldr	r2, [sp, #16]
 8109220:	68a1      	ldr	r1, [r4, #8]
 8109222:	9301      	str	r3, [sp, #4]
 8109224:	4620      	mov	r0, r4
 8109226:	f003 fb81 	bl	810c92c <_vfiprintf_r>
 810922a:	b002      	add	sp, #8
 810922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109230:	b004      	add	sp, #16
 8109232:	4770      	bx	lr
 8109234:	10000014 	.word	0x10000014

08109238 <_puts_r>:
 8109238:	b570      	push	{r4, r5, r6, lr}
 810923a:	460e      	mov	r6, r1
 810923c:	4605      	mov	r5, r0
 810923e:	b118      	cbz	r0, 8109248 <_puts_r+0x10>
 8109240:	6983      	ldr	r3, [r0, #24]
 8109242:	b90b      	cbnz	r3, 8109248 <_puts_r+0x10>
 8109244:	f001 ff94 	bl	810b170 <__sinit>
 8109248:	69ab      	ldr	r3, [r5, #24]
 810924a:	68ac      	ldr	r4, [r5, #8]
 810924c:	b913      	cbnz	r3, 8109254 <_puts_r+0x1c>
 810924e:	4628      	mov	r0, r5
 8109250:	f001 ff8e 	bl	810b170 <__sinit>
 8109254:	4b2c      	ldr	r3, [pc, #176]	; (8109308 <_puts_r+0xd0>)
 8109256:	429c      	cmp	r4, r3
 8109258:	d120      	bne.n	810929c <_puts_r+0x64>
 810925a:	686c      	ldr	r4, [r5, #4]
 810925c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810925e:	07db      	lsls	r3, r3, #31
 8109260:	d405      	bmi.n	810926e <_puts_r+0x36>
 8109262:	89a3      	ldrh	r3, [r4, #12]
 8109264:	0598      	lsls	r0, r3, #22
 8109266:	d402      	bmi.n	810926e <_puts_r+0x36>
 8109268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810926a:	f002 fb92 	bl	810b992 <__retarget_lock_acquire_recursive>
 810926e:	89a3      	ldrh	r3, [r4, #12]
 8109270:	0719      	lsls	r1, r3, #28
 8109272:	d51d      	bpl.n	81092b0 <_puts_r+0x78>
 8109274:	6923      	ldr	r3, [r4, #16]
 8109276:	b1db      	cbz	r3, 81092b0 <_puts_r+0x78>
 8109278:	3e01      	subs	r6, #1
 810927a:	68a3      	ldr	r3, [r4, #8]
 810927c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109280:	3b01      	subs	r3, #1
 8109282:	60a3      	str	r3, [r4, #8]
 8109284:	bb39      	cbnz	r1, 81092d6 <_puts_r+0x9e>
 8109286:	2b00      	cmp	r3, #0
 8109288:	da38      	bge.n	81092fc <_puts_r+0xc4>
 810928a:	4622      	mov	r2, r4
 810928c:	210a      	movs	r1, #10
 810928e:	4628      	mov	r0, r5
 8109290:	f000 ff1a 	bl	810a0c8 <__swbuf_r>
 8109294:	3001      	adds	r0, #1
 8109296:	d011      	beq.n	81092bc <_puts_r+0x84>
 8109298:	250a      	movs	r5, #10
 810929a:	e011      	b.n	81092c0 <_puts_r+0x88>
 810929c:	4b1b      	ldr	r3, [pc, #108]	; (810930c <_puts_r+0xd4>)
 810929e:	429c      	cmp	r4, r3
 81092a0:	d101      	bne.n	81092a6 <_puts_r+0x6e>
 81092a2:	68ac      	ldr	r4, [r5, #8]
 81092a4:	e7da      	b.n	810925c <_puts_r+0x24>
 81092a6:	4b1a      	ldr	r3, [pc, #104]	; (8109310 <_puts_r+0xd8>)
 81092a8:	429c      	cmp	r4, r3
 81092aa:	bf08      	it	eq
 81092ac:	68ec      	ldreq	r4, [r5, #12]
 81092ae:	e7d5      	b.n	810925c <_puts_r+0x24>
 81092b0:	4621      	mov	r1, r4
 81092b2:	4628      	mov	r0, r5
 81092b4:	f000 ff5a 	bl	810a16c <__swsetup_r>
 81092b8:	2800      	cmp	r0, #0
 81092ba:	d0dd      	beq.n	8109278 <_puts_r+0x40>
 81092bc:	f04f 35ff 	mov.w	r5, #4294967295
 81092c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81092c2:	07da      	lsls	r2, r3, #31
 81092c4:	d405      	bmi.n	81092d2 <_puts_r+0x9a>
 81092c6:	89a3      	ldrh	r3, [r4, #12]
 81092c8:	059b      	lsls	r3, r3, #22
 81092ca:	d402      	bmi.n	81092d2 <_puts_r+0x9a>
 81092cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81092ce:	f002 fb61 	bl	810b994 <__retarget_lock_release_recursive>
 81092d2:	4628      	mov	r0, r5
 81092d4:	bd70      	pop	{r4, r5, r6, pc}
 81092d6:	2b00      	cmp	r3, #0
 81092d8:	da04      	bge.n	81092e4 <_puts_r+0xac>
 81092da:	69a2      	ldr	r2, [r4, #24]
 81092dc:	429a      	cmp	r2, r3
 81092de:	dc06      	bgt.n	81092ee <_puts_r+0xb6>
 81092e0:	290a      	cmp	r1, #10
 81092e2:	d004      	beq.n	81092ee <_puts_r+0xb6>
 81092e4:	6823      	ldr	r3, [r4, #0]
 81092e6:	1c5a      	adds	r2, r3, #1
 81092e8:	6022      	str	r2, [r4, #0]
 81092ea:	7019      	strb	r1, [r3, #0]
 81092ec:	e7c5      	b.n	810927a <_puts_r+0x42>
 81092ee:	4622      	mov	r2, r4
 81092f0:	4628      	mov	r0, r5
 81092f2:	f000 fee9 	bl	810a0c8 <__swbuf_r>
 81092f6:	3001      	adds	r0, #1
 81092f8:	d1bf      	bne.n	810927a <_puts_r+0x42>
 81092fa:	e7df      	b.n	81092bc <_puts_r+0x84>
 81092fc:	6823      	ldr	r3, [r4, #0]
 81092fe:	250a      	movs	r5, #10
 8109300:	1c5a      	adds	r2, r3, #1
 8109302:	6022      	str	r2, [r4, #0]
 8109304:	701d      	strb	r5, [r3, #0]
 8109306:	e7db      	b.n	81092c0 <_puts_r+0x88>
 8109308:	0810d1ec 	.word	0x0810d1ec
 810930c:	0810d20c 	.word	0x0810d20c
 8109310:	0810d1cc 	.word	0x0810d1cc

08109314 <puts>:
 8109314:	4b02      	ldr	r3, [pc, #8]	; (8109320 <puts+0xc>)
 8109316:	4601      	mov	r1, r0
 8109318:	6818      	ldr	r0, [r3, #0]
 810931a:	f7ff bf8d 	b.w	8109238 <_puts_r>
 810931e:	bf00      	nop
 8109320:	10000014 	.word	0x10000014

08109324 <nanf>:
 8109324:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810932c <nanf+0x8>
 8109328:	4770      	bx	lr
 810932a:	bf00      	nop
 810932c:	7fc00000 	.word	0x7fc00000

08109330 <siprintf>:
 8109330:	b40e      	push	{r1, r2, r3}
 8109332:	b500      	push	{lr}
 8109334:	b09c      	sub	sp, #112	; 0x70
 8109336:	ab1d      	add	r3, sp, #116	; 0x74
 8109338:	9002      	str	r0, [sp, #8]
 810933a:	9006      	str	r0, [sp, #24]
 810933c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109340:	4809      	ldr	r0, [pc, #36]	; (8109368 <siprintf+0x38>)
 8109342:	9107      	str	r1, [sp, #28]
 8109344:	9104      	str	r1, [sp, #16]
 8109346:	4909      	ldr	r1, [pc, #36]	; (810936c <siprintf+0x3c>)
 8109348:	f853 2b04 	ldr.w	r2, [r3], #4
 810934c:	9105      	str	r1, [sp, #20]
 810934e:	6800      	ldr	r0, [r0, #0]
 8109350:	9301      	str	r3, [sp, #4]
 8109352:	a902      	add	r1, sp, #8
 8109354:	f003 f9c0 	bl	810c6d8 <_svfiprintf_r>
 8109358:	9b02      	ldr	r3, [sp, #8]
 810935a:	2200      	movs	r2, #0
 810935c:	701a      	strb	r2, [r3, #0]
 810935e:	b01c      	add	sp, #112	; 0x70
 8109360:	f85d eb04 	ldr.w	lr, [sp], #4
 8109364:	b003      	add	sp, #12
 8109366:	4770      	bx	lr
 8109368:	10000014 	.word	0x10000014
 810936c:	ffff0208 	.word	0xffff0208

08109370 <sulp>:
 8109370:	b570      	push	{r4, r5, r6, lr}
 8109372:	4604      	mov	r4, r0
 8109374:	460d      	mov	r5, r1
 8109376:	ec45 4b10 	vmov	d0, r4, r5
 810937a:	4616      	mov	r6, r2
 810937c:	f002 ff0a 	bl	810c194 <__ulp>
 8109380:	ec51 0b10 	vmov	r0, r1, d0
 8109384:	b17e      	cbz	r6, 81093a6 <sulp+0x36>
 8109386:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810938a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810938e:	2b00      	cmp	r3, #0
 8109390:	dd09      	ble.n	81093a6 <sulp+0x36>
 8109392:	051b      	lsls	r3, r3, #20
 8109394:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109398:	2400      	movs	r4, #0
 810939a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810939e:	4622      	mov	r2, r4
 81093a0:	462b      	mov	r3, r5
 81093a2:	f7f7 f9b1 	bl	8100708 <__aeabi_dmul>
 81093a6:	bd70      	pop	{r4, r5, r6, pc}

081093a8 <_strtod_l>:
 81093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81093ac:	ed2d 8b02 	vpush	{d8}
 81093b0:	b09d      	sub	sp, #116	; 0x74
 81093b2:	461f      	mov	r7, r3
 81093b4:	2300      	movs	r3, #0
 81093b6:	9318      	str	r3, [sp, #96]	; 0x60
 81093b8:	4ba2      	ldr	r3, [pc, #648]	; (8109644 <_strtod_l+0x29c>)
 81093ba:	9213      	str	r2, [sp, #76]	; 0x4c
 81093bc:	681b      	ldr	r3, [r3, #0]
 81093be:	9305      	str	r3, [sp, #20]
 81093c0:	4604      	mov	r4, r0
 81093c2:	4618      	mov	r0, r3
 81093c4:	4688      	mov	r8, r1
 81093c6:	f7f6 ff8b 	bl	81002e0 <strlen>
 81093ca:	f04f 0a00 	mov.w	sl, #0
 81093ce:	4605      	mov	r5, r0
 81093d0:	f04f 0b00 	mov.w	fp, #0
 81093d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 81093d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81093da:	781a      	ldrb	r2, [r3, #0]
 81093dc:	2a2b      	cmp	r2, #43	; 0x2b
 81093de:	d04e      	beq.n	810947e <_strtod_l+0xd6>
 81093e0:	d83b      	bhi.n	810945a <_strtod_l+0xb2>
 81093e2:	2a0d      	cmp	r2, #13
 81093e4:	d834      	bhi.n	8109450 <_strtod_l+0xa8>
 81093e6:	2a08      	cmp	r2, #8
 81093e8:	d834      	bhi.n	8109454 <_strtod_l+0xac>
 81093ea:	2a00      	cmp	r2, #0
 81093ec:	d03e      	beq.n	810946c <_strtod_l+0xc4>
 81093ee:	2300      	movs	r3, #0
 81093f0:	930a      	str	r3, [sp, #40]	; 0x28
 81093f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 81093f4:	7833      	ldrb	r3, [r6, #0]
 81093f6:	2b30      	cmp	r3, #48	; 0x30
 81093f8:	f040 80b0 	bne.w	810955c <_strtod_l+0x1b4>
 81093fc:	7873      	ldrb	r3, [r6, #1]
 81093fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109402:	2b58      	cmp	r3, #88	; 0x58
 8109404:	d168      	bne.n	81094d8 <_strtod_l+0x130>
 8109406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109408:	9301      	str	r3, [sp, #4]
 810940a:	ab18      	add	r3, sp, #96	; 0x60
 810940c:	9702      	str	r7, [sp, #8]
 810940e:	9300      	str	r3, [sp, #0]
 8109410:	4a8d      	ldr	r2, [pc, #564]	; (8109648 <_strtod_l+0x2a0>)
 8109412:	ab19      	add	r3, sp, #100	; 0x64
 8109414:	a917      	add	r1, sp, #92	; 0x5c
 8109416:	4620      	mov	r0, r4
 8109418:	f001 ffae 	bl	810b378 <__gethex>
 810941c:	f010 0707 	ands.w	r7, r0, #7
 8109420:	4605      	mov	r5, r0
 8109422:	d005      	beq.n	8109430 <_strtod_l+0x88>
 8109424:	2f06      	cmp	r7, #6
 8109426:	d12c      	bne.n	8109482 <_strtod_l+0xda>
 8109428:	3601      	adds	r6, #1
 810942a:	2300      	movs	r3, #0
 810942c:	9617      	str	r6, [sp, #92]	; 0x5c
 810942e:	930a      	str	r3, [sp, #40]	; 0x28
 8109430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109432:	2b00      	cmp	r3, #0
 8109434:	f040 8590 	bne.w	8109f58 <_strtod_l+0xbb0>
 8109438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810943a:	b1eb      	cbz	r3, 8109478 <_strtod_l+0xd0>
 810943c:	4652      	mov	r2, sl
 810943e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8109442:	ec43 2b10 	vmov	d0, r2, r3
 8109446:	b01d      	add	sp, #116	; 0x74
 8109448:	ecbd 8b02 	vpop	{d8}
 810944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109450:	2a20      	cmp	r2, #32
 8109452:	d1cc      	bne.n	81093ee <_strtod_l+0x46>
 8109454:	3301      	adds	r3, #1
 8109456:	9317      	str	r3, [sp, #92]	; 0x5c
 8109458:	e7be      	b.n	81093d8 <_strtod_l+0x30>
 810945a:	2a2d      	cmp	r2, #45	; 0x2d
 810945c:	d1c7      	bne.n	81093ee <_strtod_l+0x46>
 810945e:	2201      	movs	r2, #1
 8109460:	920a      	str	r2, [sp, #40]	; 0x28
 8109462:	1c5a      	adds	r2, r3, #1
 8109464:	9217      	str	r2, [sp, #92]	; 0x5c
 8109466:	785b      	ldrb	r3, [r3, #1]
 8109468:	2b00      	cmp	r3, #0
 810946a:	d1c2      	bne.n	81093f2 <_strtod_l+0x4a>
 810946c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810946e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109472:	2b00      	cmp	r3, #0
 8109474:	f040 856e 	bne.w	8109f54 <_strtod_l+0xbac>
 8109478:	4652      	mov	r2, sl
 810947a:	465b      	mov	r3, fp
 810947c:	e7e1      	b.n	8109442 <_strtod_l+0x9a>
 810947e:	2200      	movs	r2, #0
 8109480:	e7ee      	b.n	8109460 <_strtod_l+0xb8>
 8109482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109484:	b13a      	cbz	r2, 8109496 <_strtod_l+0xee>
 8109486:	2135      	movs	r1, #53	; 0x35
 8109488:	a81a      	add	r0, sp, #104	; 0x68
 810948a:	f002 ff8e 	bl	810c3aa <__copybits>
 810948e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109490:	4620      	mov	r0, r4
 8109492:	f002 fb4d 	bl	810bb30 <_Bfree>
 8109496:	3f01      	subs	r7, #1
 8109498:	2f04      	cmp	r7, #4
 810949a:	d806      	bhi.n	81094aa <_strtod_l+0x102>
 810949c:	e8df f007 	tbb	[pc, r7]
 81094a0:	1714030a 	.word	0x1714030a
 81094a4:	0a          	.byte	0x0a
 81094a5:	00          	.byte	0x00
 81094a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 81094aa:	0728      	lsls	r0, r5, #28
 81094ac:	d5c0      	bpl.n	8109430 <_strtod_l+0x88>
 81094ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 81094b2:	e7bd      	b.n	8109430 <_strtod_l+0x88>
 81094b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 81094b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 81094ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81094be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 81094c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 81094c6:	e7f0      	b.n	81094aa <_strtod_l+0x102>
 81094c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 810964c <_strtod_l+0x2a4>
 81094cc:	e7ed      	b.n	81094aa <_strtod_l+0x102>
 81094ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 81094d2:	f04f 3aff 	mov.w	sl, #4294967295
 81094d6:	e7e8      	b.n	81094aa <_strtod_l+0x102>
 81094d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81094da:	1c5a      	adds	r2, r3, #1
 81094dc:	9217      	str	r2, [sp, #92]	; 0x5c
 81094de:	785b      	ldrb	r3, [r3, #1]
 81094e0:	2b30      	cmp	r3, #48	; 0x30
 81094e2:	d0f9      	beq.n	81094d8 <_strtod_l+0x130>
 81094e4:	2b00      	cmp	r3, #0
 81094e6:	d0a3      	beq.n	8109430 <_strtod_l+0x88>
 81094e8:	2301      	movs	r3, #1
 81094ea:	f04f 0900 	mov.w	r9, #0
 81094ee:	9304      	str	r3, [sp, #16]
 81094f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81094f2:	9308      	str	r3, [sp, #32]
 81094f4:	f8cd 901c 	str.w	r9, [sp, #28]
 81094f8:	464f      	mov	r7, r9
 81094fa:	220a      	movs	r2, #10
 81094fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 81094fe:	7806      	ldrb	r6, [r0, #0]
 8109500:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8109504:	b2d9      	uxtb	r1, r3
 8109506:	2909      	cmp	r1, #9
 8109508:	d92a      	bls.n	8109560 <_strtod_l+0x1b8>
 810950a:	9905      	ldr	r1, [sp, #20]
 810950c:	462a      	mov	r2, r5
 810950e:	f003 fb9a 	bl	810cc46 <strncmp>
 8109512:	b398      	cbz	r0, 810957c <_strtod_l+0x1d4>
 8109514:	2000      	movs	r0, #0
 8109516:	4632      	mov	r2, r6
 8109518:	463d      	mov	r5, r7
 810951a:	9005      	str	r0, [sp, #20]
 810951c:	4603      	mov	r3, r0
 810951e:	2a65      	cmp	r2, #101	; 0x65
 8109520:	d001      	beq.n	8109526 <_strtod_l+0x17e>
 8109522:	2a45      	cmp	r2, #69	; 0x45
 8109524:	d118      	bne.n	8109558 <_strtod_l+0x1b0>
 8109526:	b91d      	cbnz	r5, 8109530 <_strtod_l+0x188>
 8109528:	9a04      	ldr	r2, [sp, #16]
 810952a:	4302      	orrs	r2, r0
 810952c:	d09e      	beq.n	810946c <_strtod_l+0xc4>
 810952e:	2500      	movs	r5, #0
 8109530:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8109534:	f108 0201 	add.w	r2, r8, #1
 8109538:	9217      	str	r2, [sp, #92]	; 0x5c
 810953a:	f898 2001 	ldrb.w	r2, [r8, #1]
 810953e:	2a2b      	cmp	r2, #43	; 0x2b
 8109540:	d075      	beq.n	810962e <_strtod_l+0x286>
 8109542:	2a2d      	cmp	r2, #45	; 0x2d
 8109544:	d07b      	beq.n	810963e <_strtod_l+0x296>
 8109546:	f04f 0c00 	mov.w	ip, #0
 810954a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810954e:	2909      	cmp	r1, #9
 8109550:	f240 8082 	bls.w	8109658 <_strtod_l+0x2b0>
 8109554:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109558:	2600      	movs	r6, #0
 810955a:	e09d      	b.n	8109698 <_strtod_l+0x2f0>
 810955c:	2300      	movs	r3, #0
 810955e:	e7c4      	b.n	81094ea <_strtod_l+0x142>
 8109560:	2f08      	cmp	r7, #8
 8109562:	bfd8      	it	le
 8109564:	9907      	ldrle	r1, [sp, #28]
 8109566:	f100 0001 	add.w	r0, r0, #1
 810956a:	bfda      	itte	le
 810956c:	fb02 3301 	mlale	r3, r2, r1, r3
 8109570:	9307      	strle	r3, [sp, #28]
 8109572:	fb02 3909 	mlagt	r9, r2, r9, r3
 8109576:	3701      	adds	r7, #1
 8109578:	9017      	str	r0, [sp, #92]	; 0x5c
 810957a:	e7bf      	b.n	81094fc <_strtod_l+0x154>
 810957c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810957e:	195a      	adds	r2, r3, r5
 8109580:	9217      	str	r2, [sp, #92]	; 0x5c
 8109582:	5d5a      	ldrb	r2, [r3, r5]
 8109584:	2f00      	cmp	r7, #0
 8109586:	d037      	beq.n	81095f8 <_strtod_l+0x250>
 8109588:	9005      	str	r0, [sp, #20]
 810958a:	463d      	mov	r5, r7
 810958c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8109590:	2b09      	cmp	r3, #9
 8109592:	d912      	bls.n	81095ba <_strtod_l+0x212>
 8109594:	2301      	movs	r3, #1
 8109596:	e7c2      	b.n	810951e <_strtod_l+0x176>
 8109598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810959a:	1c5a      	adds	r2, r3, #1
 810959c:	9217      	str	r2, [sp, #92]	; 0x5c
 810959e:	785a      	ldrb	r2, [r3, #1]
 81095a0:	3001      	adds	r0, #1
 81095a2:	2a30      	cmp	r2, #48	; 0x30
 81095a4:	d0f8      	beq.n	8109598 <_strtod_l+0x1f0>
 81095a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 81095aa:	2b08      	cmp	r3, #8
 81095ac:	f200 84d9 	bhi.w	8109f62 <_strtod_l+0xbba>
 81095b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81095b2:	9005      	str	r0, [sp, #20]
 81095b4:	2000      	movs	r0, #0
 81095b6:	9308      	str	r3, [sp, #32]
 81095b8:	4605      	mov	r5, r0
 81095ba:	3a30      	subs	r2, #48	; 0x30
 81095bc:	f100 0301 	add.w	r3, r0, #1
 81095c0:	d014      	beq.n	81095ec <_strtod_l+0x244>
 81095c2:	9905      	ldr	r1, [sp, #20]
 81095c4:	4419      	add	r1, r3
 81095c6:	9105      	str	r1, [sp, #20]
 81095c8:	462b      	mov	r3, r5
 81095ca:	eb00 0e05 	add.w	lr, r0, r5
 81095ce:	210a      	movs	r1, #10
 81095d0:	4573      	cmp	r3, lr
 81095d2:	d113      	bne.n	81095fc <_strtod_l+0x254>
 81095d4:	182b      	adds	r3, r5, r0
 81095d6:	2b08      	cmp	r3, #8
 81095d8:	f105 0501 	add.w	r5, r5, #1
 81095dc:	4405      	add	r5, r0
 81095de:	dc1c      	bgt.n	810961a <_strtod_l+0x272>
 81095e0:	9907      	ldr	r1, [sp, #28]
 81095e2:	230a      	movs	r3, #10
 81095e4:	fb03 2301 	mla	r3, r3, r1, r2
 81095e8:	9307      	str	r3, [sp, #28]
 81095ea:	2300      	movs	r3, #0
 81095ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81095ee:	1c51      	adds	r1, r2, #1
 81095f0:	9117      	str	r1, [sp, #92]	; 0x5c
 81095f2:	7852      	ldrb	r2, [r2, #1]
 81095f4:	4618      	mov	r0, r3
 81095f6:	e7c9      	b.n	810958c <_strtod_l+0x1e4>
 81095f8:	4638      	mov	r0, r7
 81095fa:	e7d2      	b.n	81095a2 <_strtod_l+0x1fa>
 81095fc:	2b08      	cmp	r3, #8
 81095fe:	dc04      	bgt.n	810960a <_strtod_l+0x262>
 8109600:	9e07      	ldr	r6, [sp, #28]
 8109602:	434e      	muls	r6, r1
 8109604:	9607      	str	r6, [sp, #28]
 8109606:	3301      	adds	r3, #1
 8109608:	e7e2      	b.n	81095d0 <_strtod_l+0x228>
 810960a:	f103 0c01 	add.w	ip, r3, #1
 810960e:	f1bc 0f10 	cmp.w	ip, #16
 8109612:	bfd8      	it	le
 8109614:	fb01 f909 	mulle.w	r9, r1, r9
 8109618:	e7f5      	b.n	8109606 <_strtod_l+0x25e>
 810961a:	2d10      	cmp	r5, #16
 810961c:	bfdc      	itt	le
 810961e:	230a      	movle	r3, #10
 8109620:	fb03 2909 	mlale	r9, r3, r9, r2
 8109624:	e7e1      	b.n	81095ea <_strtod_l+0x242>
 8109626:	2300      	movs	r3, #0
 8109628:	9305      	str	r3, [sp, #20]
 810962a:	2301      	movs	r3, #1
 810962c:	e77c      	b.n	8109528 <_strtod_l+0x180>
 810962e:	f04f 0c00 	mov.w	ip, #0
 8109632:	f108 0202 	add.w	r2, r8, #2
 8109636:	9217      	str	r2, [sp, #92]	; 0x5c
 8109638:	f898 2002 	ldrb.w	r2, [r8, #2]
 810963c:	e785      	b.n	810954a <_strtod_l+0x1a2>
 810963e:	f04f 0c01 	mov.w	ip, #1
 8109642:	e7f6      	b.n	8109632 <_strtod_l+0x28a>
 8109644:	0810d294 	.word	0x0810d294
 8109648:	0810cfe4 	.word	0x0810cfe4
 810964c:	7ff00000 	.word	0x7ff00000
 8109650:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109652:	1c51      	adds	r1, r2, #1
 8109654:	9117      	str	r1, [sp, #92]	; 0x5c
 8109656:	7852      	ldrb	r2, [r2, #1]
 8109658:	2a30      	cmp	r2, #48	; 0x30
 810965a:	d0f9      	beq.n	8109650 <_strtod_l+0x2a8>
 810965c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8109660:	2908      	cmp	r1, #8
 8109662:	f63f af79 	bhi.w	8109558 <_strtod_l+0x1b0>
 8109666:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810966a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810966c:	9206      	str	r2, [sp, #24]
 810966e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109670:	1c51      	adds	r1, r2, #1
 8109672:	9117      	str	r1, [sp, #92]	; 0x5c
 8109674:	7852      	ldrb	r2, [r2, #1]
 8109676:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810967a:	2e09      	cmp	r6, #9
 810967c:	d937      	bls.n	81096ee <_strtod_l+0x346>
 810967e:	9e06      	ldr	r6, [sp, #24]
 8109680:	1b89      	subs	r1, r1, r6
 8109682:	2908      	cmp	r1, #8
 8109684:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8109688:	dc02      	bgt.n	8109690 <_strtod_l+0x2e8>
 810968a:	4576      	cmp	r6, lr
 810968c:	bfa8      	it	ge
 810968e:	4676      	movge	r6, lr
 8109690:	f1bc 0f00 	cmp.w	ip, #0
 8109694:	d000      	beq.n	8109698 <_strtod_l+0x2f0>
 8109696:	4276      	negs	r6, r6
 8109698:	2d00      	cmp	r5, #0
 810969a:	d14d      	bne.n	8109738 <_strtod_l+0x390>
 810969c:	9904      	ldr	r1, [sp, #16]
 810969e:	4301      	orrs	r1, r0
 81096a0:	f47f aec6 	bne.w	8109430 <_strtod_l+0x88>
 81096a4:	2b00      	cmp	r3, #0
 81096a6:	f47f aee1 	bne.w	810946c <_strtod_l+0xc4>
 81096aa:	2a69      	cmp	r2, #105	; 0x69
 81096ac:	d027      	beq.n	81096fe <_strtod_l+0x356>
 81096ae:	dc24      	bgt.n	81096fa <_strtod_l+0x352>
 81096b0:	2a49      	cmp	r2, #73	; 0x49
 81096b2:	d024      	beq.n	81096fe <_strtod_l+0x356>
 81096b4:	2a4e      	cmp	r2, #78	; 0x4e
 81096b6:	f47f aed9 	bne.w	810946c <_strtod_l+0xc4>
 81096ba:	499f      	ldr	r1, [pc, #636]	; (8109938 <_strtod_l+0x590>)
 81096bc:	a817      	add	r0, sp, #92	; 0x5c
 81096be:	f002 f8b3 	bl	810b828 <__match>
 81096c2:	2800      	cmp	r0, #0
 81096c4:	f43f aed2 	beq.w	810946c <_strtod_l+0xc4>
 81096c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81096ca:	781b      	ldrb	r3, [r3, #0]
 81096cc:	2b28      	cmp	r3, #40	; 0x28
 81096ce:	d12d      	bne.n	810972c <_strtod_l+0x384>
 81096d0:	499a      	ldr	r1, [pc, #616]	; (810993c <_strtod_l+0x594>)
 81096d2:	aa1a      	add	r2, sp, #104	; 0x68
 81096d4:	a817      	add	r0, sp, #92	; 0x5c
 81096d6:	f002 f8bb 	bl	810b850 <__hexnan>
 81096da:	2805      	cmp	r0, #5
 81096dc:	d126      	bne.n	810972c <_strtod_l+0x384>
 81096de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 81096e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 81096e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 81096e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 81096ec:	e6a0      	b.n	8109430 <_strtod_l+0x88>
 81096ee:	210a      	movs	r1, #10
 81096f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 81096f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 81096f8:	e7b9      	b.n	810966e <_strtod_l+0x2c6>
 81096fa:	2a6e      	cmp	r2, #110	; 0x6e
 81096fc:	e7db      	b.n	81096b6 <_strtod_l+0x30e>
 81096fe:	4990      	ldr	r1, [pc, #576]	; (8109940 <_strtod_l+0x598>)
 8109700:	a817      	add	r0, sp, #92	; 0x5c
 8109702:	f002 f891 	bl	810b828 <__match>
 8109706:	2800      	cmp	r0, #0
 8109708:	f43f aeb0 	beq.w	810946c <_strtod_l+0xc4>
 810970c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810970e:	498d      	ldr	r1, [pc, #564]	; (8109944 <_strtod_l+0x59c>)
 8109710:	3b01      	subs	r3, #1
 8109712:	a817      	add	r0, sp, #92	; 0x5c
 8109714:	9317      	str	r3, [sp, #92]	; 0x5c
 8109716:	f002 f887 	bl	810b828 <__match>
 810971a:	b910      	cbnz	r0, 8109722 <_strtod_l+0x37a>
 810971c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810971e:	3301      	adds	r3, #1
 8109720:	9317      	str	r3, [sp, #92]	; 0x5c
 8109722:	f8df b230 	ldr.w	fp, [pc, #560]	; 8109954 <_strtod_l+0x5ac>
 8109726:	f04f 0a00 	mov.w	sl, #0
 810972a:	e681      	b.n	8109430 <_strtod_l+0x88>
 810972c:	4886      	ldr	r0, [pc, #536]	; (8109948 <_strtod_l+0x5a0>)
 810972e:	f003 fa2f 	bl	810cb90 <nan>
 8109732:	ec5b ab10 	vmov	sl, fp, d0
 8109736:	e67b      	b.n	8109430 <_strtod_l+0x88>
 8109738:	9b05      	ldr	r3, [sp, #20]
 810973a:	9807      	ldr	r0, [sp, #28]
 810973c:	1af3      	subs	r3, r6, r3
 810973e:	2f00      	cmp	r7, #0
 8109740:	bf08      	it	eq
 8109742:	462f      	moveq	r7, r5
 8109744:	2d10      	cmp	r5, #16
 8109746:	9306      	str	r3, [sp, #24]
 8109748:	46a8      	mov	r8, r5
 810974a:	bfa8      	it	ge
 810974c:	f04f 0810 	movge.w	r8, #16
 8109750:	f7f6 ff60 	bl	8100614 <__aeabi_ui2d>
 8109754:	2d09      	cmp	r5, #9
 8109756:	4682      	mov	sl, r0
 8109758:	468b      	mov	fp, r1
 810975a:	dd13      	ble.n	8109784 <_strtod_l+0x3dc>
 810975c:	4b7b      	ldr	r3, [pc, #492]	; (810994c <_strtod_l+0x5a4>)
 810975e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8109762:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8109766:	f7f6 ffcf 	bl	8100708 <__aeabi_dmul>
 810976a:	4682      	mov	sl, r0
 810976c:	4648      	mov	r0, r9
 810976e:	468b      	mov	fp, r1
 8109770:	f7f6 ff50 	bl	8100614 <__aeabi_ui2d>
 8109774:	4602      	mov	r2, r0
 8109776:	460b      	mov	r3, r1
 8109778:	4650      	mov	r0, sl
 810977a:	4659      	mov	r1, fp
 810977c:	f7f6 fe0e 	bl	810039c <__adddf3>
 8109780:	4682      	mov	sl, r0
 8109782:	468b      	mov	fp, r1
 8109784:	2d0f      	cmp	r5, #15
 8109786:	dc38      	bgt.n	81097fa <_strtod_l+0x452>
 8109788:	9b06      	ldr	r3, [sp, #24]
 810978a:	2b00      	cmp	r3, #0
 810978c:	f43f ae50 	beq.w	8109430 <_strtod_l+0x88>
 8109790:	dd24      	ble.n	81097dc <_strtod_l+0x434>
 8109792:	2b16      	cmp	r3, #22
 8109794:	dc0b      	bgt.n	81097ae <_strtod_l+0x406>
 8109796:	496d      	ldr	r1, [pc, #436]	; (810994c <_strtod_l+0x5a4>)
 8109798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810979c:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097a0:	4652      	mov	r2, sl
 81097a2:	465b      	mov	r3, fp
 81097a4:	f7f6 ffb0 	bl	8100708 <__aeabi_dmul>
 81097a8:	4682      	mov	sl, r0
 81097aa:	468b      	mov	fp, r1
 81097ac:	e640      	b.n	8109430 <_strtod_l+0x88>
 81097ae:	9a06      	ldr	r2, [sp, #24]
 81097b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 81097b4:	4293      	cmp	r3, r2
 81097b6:	db20      	blt.n	81097fa <_strtod_l+0x452>
 81097b8:	4c64      	ldr	r4, [pc, #400]	; (810994c <_strtod_l+0x5a4>)
 81097ba:	f1c5 050f 	rsb	r5, r5, #15
 81097be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81097c2:	4652      	mov	r2, sl
 81097c4:	465b      	mov	r3, fp
 81097c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097ca:	f7f6 ff9d 	bl	8100708 <__aeabi_dmul>
 81097ce:	9b06      	ldr	r3, [sp, #24]
 81097d0:	1b5d      	subs	r5, r3, r5
 81097d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81097d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 81097da:	e7e3      	b.n	81097a4 <_strtod_l+0x3fc>
 81097dc:	9b06      	ldr	r3, [sp, #24]
 81097de:	3316      	adds	r3, #22
 81097e0:	db0b      	blt.n	81097fa <_strtod_l+0x452>
 81097e2:	9b05      	ldr	r3, [sp, #20]
 81097e4:	1b9e      	subs	r6, r3, r6
 81097e6:	4b59      	ldr	r3, [pc, #356]	; (810994c <_strtod_l+0x5a4>)
 81097e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 81097ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 81097f0:	4650      	mov	r0, sl
 81097f2:	4659      	mov	r1, fp
 81097f4:	f7f7 f8b2 	bl	810095c <__aeabi_ddiv>
 81097f8:	e7d6      	b.n	81097a8 <_strtod_l+0x400>
 81097fa:	9b06      	ldr	r3, [sp, #24]
 81097fc:	eba5 0808 	sub.w	r8, r5, r8
 8109800:	4498      	add	r8, r3
 8109802:	f1b8 0f00 	cmp.w	r8, #0
 8109806:	dd74      	ble.n	81098f2 <_strtod_l+0x54a>
 8109808:	f018 030f 	ands.w	r3, r8, #15
 810980c:	d00a      	beq.n	8109824 <_strtod_l+0x47c>
 810980e:	494f      	ldr	r1, [pc, #316]	; (810994c <_strtod_l+0x5a4>)
 8109810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109814:	4652      	mov	r2, sl
 8109816:	465b      	mov	r3, fp
 8109818:	e9d1 0100 	ldrd	r0, r1, [r1]
 810981c:	f7f6 ff74 	bl	8100708 <__aeabi_dmul>
 8109820:	4682      	mov	sl, r0
 8109822:	468b      	mov	fp, r1
 8109824:	f038 080f 	bics.w	r8, r8, #15
 8109828:	d04f      	beq.n	81098ca <_strtod_l+0x522>
 810982a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810982e:	dd22      	ble.n	8109876 <_strtod_l+0x4ce>
 8109830:	2500      	movs	r5, #0
 8109832:	462e      	mov	r6, r5
 8109834:	9507      	str	r5, [sp, #28]
 8109836:	9505      	str	r5, [sp, #20]
 8109838:	2322      	movs	r3, #34	; 0x22
 810983a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8109954 <_strtod_l+0x5ac>
 810983e:	6023      	str	r3, [r4, #0]
 8109840:	f04f 0a00 	mov.w	sl, #0
 8109844:	9b07      	ldr	r3, [sp, #28]
 8109846:	2b00      	cmp	r3, #0
 8109848:	f43f adf2 	beq.w	8109430 <_strtod_l+0x88>
 810984c:	9918      	ldr	r1, [sp, #96]	; 0x60
 810984e:	4620      	mov	r0, r4
 8109850:	f002 f96e 	bl	810bb30 <_Bfree>
 8109854:	9905      	ldr	r1, [sp, #20]
 8109856:	4620      	mov	r0, r4
 8109858:	f002 f96a 	bl	810bb30 <_Bfree>
 810985c:	4631      	mov	r1, r6
 810985e:	4620      	mov	r0, r4
 8109860:	f002 f966 	bl	810bb30 <_Bfree>
 8109864:	9907      	ldr	r1, [sp, #28]
 8109866:	4620      	mov	r0, r4
 8109868:	f002 f962 	bl	810bb30 <_Bfree>
 810986c:	4629      	mov	r1, r5
 810986e:	4620      	mov	r0, r4
 8109870:	f002 f95e 	bl	810bb30 <_Bfree>
 8109874:	e5dc      	b.n	8109430 <_strtod_l+0x88>
 8109876:	4b36      	ldr	r3, [pc, #216]	; (8109950 <_strtod_l+0x5a8>)
 8109878:	9304      	str	r3, [sp, #16]
 810987a:	2300      	movs	r3, #0
 810987c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8109880:	4650      	mov	r0, sl
 8109882:	4659      	mov	r1, fp
 8109884:	4699      	mov	r9, r3
 8109886:	f1b8 0f01 	cmp.w	r8, #1
 810988a:	dc21      	bgt.n	81098d0 <_strtod_l+0x528>
 810988c:	b10b      	cbz	r3, 8109892 <_strtod_l+0x4ea>
 810988e:	4682      	mov	sl, r0
 8109890:	468b      	mov	fp, r1
 8109892:	4b2f      	ldr	r3, [pc, #188]	; (8109950 <_strtod_l+0x5a8>)
 8109894:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8109898:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810989c:	4652      	mov	r2, sl
 810989e:	465b      	mov	r3, fp
 81098a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 81098a4:	f7f6 ff30 	bl	8100708 <__aeabi_dmul>
 81098a8:	4b2a      	ldr	r3, [pc, #168]	; (8109954 <_strtod_l+0x5ac>)
 81098aa:	460a      	mov	r2, r1
 81098ac:	400b      	ands	r3, r1
 81098ae:	492a      	ldr	r1, [pc, #168]	; (8109958 <_strtod_l+0x5b0>)
 81098b0:	428b      	cmp	r3, r1
 81098b2:	4682      	mov	sl, r0
 81098b4:	d8bc      	bhi.n	8109830 <_strtod_l+0x488>
 81098b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 81098ba:	428b      	cmp	r3, r1
 81098bc:	bf86      	itte	hi
 81098be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810995c <_strtod_l+0x5b4>
 81098c2:	f04f 3aff 	movhi.w	sl, #4294967295
 81098c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 81098ca:	2300      	movs	r3, #0
 81098cc:	9304      	str	r3, [sp, #16]
 81098ce:	e084      	b.n	81099da <_strtod_l+0x632>
 81098d0:	f018 0f01 	tst.w	r8, #1
 81098d4:	d005      	beq.n	81098e2 <_strtod_l+0x53a>
 81098d6:	9b04      	ldr	r3, [sp, #16]
 81098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098dc:	f7f6 ff14 	bl	8100708 <__aeabi_dmul>
 81098e0:	2301      	movs	r3, #1
 81098e2:	9a04      	ldr	r2, [sp, #16]
 81098e4:	3208      	adds	r2, #8
 81098e6:	f109 0901 	add.w	r9, r9, #1
 81098ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 81098ee:	9204      	str	r2, [sp, #16]
 81098f0:	e7c9      	b.n	8109886 <_strtod_l+0x4de>
 81098f2:	d0ea      	beq.n	81098ca <_strtod_l+0x522>
 81098f4:	f1c8 0800 	rsb	r8, r8, #0
 81098f8:	f018 020f 	ands.w	r2, r8, #15
 81098fc:	d00a      	beq.n	8109914 <_strtod_l+0x56c>
 81098fe:	4b13      	ldr	r3, [pc, #76]	; (810994c <_strtod_l+0x5a4>)
 8109900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109904:	4650      	mov	r0, sl
 8109906:	4659      	mov	r1, fp
 8109908:	e9d3 2300 	ldrd	r2, r3, [r3]
 810990c:	f7f7 f826 	bl	810095c <__aeabi_ddiv>
 8109910:	4682      	mov	sl, r0
 8109912:	468b      	mov	fp, r1
 8109914:	ea5f 1828 	movs.w	r8, r8, asr #4
 8109918:	d0d7      	beq.n	81098ca <_strtod_l+0x522>
 810991a:	f1b8 0f1f 	cmp.w	r8, #31
 810991e:	dd1f      	ble.n	8109960 <_strtod_l+0x5b8>
 8109920:	2500      	movs	r5, #0
 8109922:	462e      	mov	r6, r5
 8109924:	9507      	str	r5, [sp, #28]
 8109926:	9505      	str	r5, [sp, #20]
 8109928:	2322      	movs	r3, #34	; 0x22
 810992a:	f04f 0a00 	mov.w	sl, #0
 810992e:	f04f 0b00 	mov.w	fp, #0
 8109932:	6023      	str	r3, [r4, #0]
 8109934:	e786      	b.n	8109844 <_strtod_l+0x49c>
 8109936:	bf00      	nop
 8109938:	0810cfb5 	.word	0x0810cfb5
 810993c:	0810cff8 	.word	0x0810cff8
 8109940:	0810cfad 	.word	0x0810cfad
 8109944:	0810d13c 	.word	0x0810d13c
 8109948:	0810d450 	.word	0x0810d450
 810994c:	0810d330 	.word	0x0810d330
 8109950:	0810d308 	.word	0x0810d308
 8109954:	7ff00000 	.word	0x7ff00000
 8109958:	7ca00000 	.word	0x7ca00000
 810995c:	7fefffff 	.word	0x7fefffff
 8109960:	f018 0310 	ands.w	r3, r8, #16
 8109964:	bf18      	it	ne
 8109966:	236a      	movne	r3, #106	; 0x6a
 8109968:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8109d18 <_strtod_l+0x970>
 810996c:	9304      	str	r3, [sp, #16]
 810996e:	4650      	mov	r0, sl
 8109970:	4659      	mov	r1, fp
 8109972:	2300      	movs	r3, #0
 8109974:	f018 0f01 	tst.w	r8, #1
 8109978:	d004      	beq.n	8109984 <_strtod_l+0x5dc>
 810997a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810997e:	f7f6 fec3 	bl	8100708 <__aeabi_dmul>
 8109982:	2301      	movs	r3, #1
 8109984:	ea5f 0868 	movs.w	r8, r8, asr #1
 8109988:	f109 0908 	add.w	r9, r9, #8
 810998c:	d1f2      	bne.n	8109974 <_strtod_l+0x5cc>
 810998e:	b10b      	cbz	r3, 8109994 <_strtod_l+0x5ec>
 8109990:	4682      	mov	sl, r0
 8109992:	468b      	mov	fp, r1
 8109994:	9b04      	ldr	r3, [sp, #16]
 8109996:	b1c3      	cbz	r3, 81099ca <_strtod_l+0x622>
 8109998:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810999c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 81099a0:	2b00      	cmp	r3, #0
 81099a2:	4659      	mov	r1, fp
 81099a4:	dd11      	ble.n	81099ca <_strtod_l+0x622>
 81099a6:	2b1f      	cmp	r3, #31
 81099a8:	f340 8124 	ble.w	8109bf4 <_strtod_l+0x84c>
 81099ac:	2b34      	cmp	r3, #52	; 0x34
 81099ae:	bfde      	ittt	le
 81099b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 81099b4:	f04f 33ff 	movle.w	r3, #4294967295
 81099b8:	fa03 f202 	lslle.w	r2, r3, r2
 81099bc:	f04f 0a00 	mov.w	sl, #0
 81099c0:	bfcc      	ite	gt
 81099c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 81099c6:	ea02 0b01 	andle.w	fp, r2, r1
 81099ca:	2200      	movs	r2, #0
 81099cc:	2300      	movs	r3, #0
 81099ce:	4650      	mov	r0, sl
 81099d0:	4659      	mov	r1, fp
 81099d2:	f7f7 f901 	bl	8100bd8 <__aeabi_dcmpeq>
 81099d6:	2800      	cmp	r0, #0
 81099d8:	d1a2      	bne.n	8109920 <_strtod_l+0x578>
 81099da:	9b07      	ldr	r3, [sp, #28]
 81099dc:	9300      	str	r3, [sp, #0]
 81099de:	9908      	ldr	r1, [sp, #32]
 81099e0:	462b      	mov	r3, r5
 81099e2:	463a      	mov	r2, r7
 81099e4:	4620      	mov	r0, r4
 81099e6:	f002 f90b 	bl	810bc00 <__s2b>
 81099ea:	9007      	str	r0, [sp, #28]
 81099ec:	2800      	cmp	r0, #0
 81099ee:	f43f af1f 	beq.w	8109830 <_strtod_l+0x488>
 81099f2:	9b05      	ldr	r3, [sp, #20]
 81099f4:	1b9e      	subs	r6, r3, r6
 81099f6:	9b06      	ldr	r3, [sp, #24]
 81099f8:	2b00      	cmp	r3, #0
 81099fa:	bfb4      	ite	lt
 81099fc:	4633      	movlt	r3, r6
 81099fe:	2300      	movge	r3, #0
 8109a00:	930c      	str	r3, [sp, #48]	; 0x30
 8109a02:	9b06      	ldr	r3, [sp, #24]
 8109a04:	2500      	movs	r5, #0
 8109a06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8109a0a:	9312      	str	r3, [sp, #72]	; 0x48
 8109a0c:	462e      	mov	r6, r5
 8109a0e:	9b07      	ldr	r3, [sp, #28]
 8109a10:	4620      	mov	r0, r4
 8109a12:	6859      	ldr	r1, [r3, #4]
 8109a14:	f002 f84c 	bl	810bab0 <_Balloc>
 8109a18:	9005      	str	r0, [sp, #20]
 8109a1a:	2800      	cmp	r0, #0
 8109a1c:	f43f af0c 	beq.w	8109838 <_strtod_l+0x490>
 8109a20:	9b07      	ldr	r3, [sp, #28]
 8109a22:	691a      	ldr	r2, [r3, #16]
 8109a24:	3202      	adds	r2, #2
 8109a26:	f103 010c 	add.w	r1, r3, #12
 8109a2a:	0092      	lsls	r2, r2, #2
 8109a2c:	300c      	adds	r0, #12
 8109a2e:	f002 f831 	bl	810ba94 <memcpy>
 8109a32:	ec4b ab10 	vmov	d0, sl, fp
 8109a36:	aa1a      	add	r2, sp, #104	; 0x68
 8109a38:	a919      	add	r1, sp, #100	; 0x64
 8109a3a:	4620      	mov	r0, r4
 8109a3c:	f002 fc26 	bl	810c28c <__d2b>
 8109a40:	ec4b ab18 	vmov	d8, sl, fp
 8109a44:	9018      	str	r0, [sp, #96]	; 0x60
 8109a46:	2800      	cmp	r0, #0
 8109a48:	f43f aef6 	beq.w	8109838 <_strtod_l+0x490>
 8109a4c:	2101      	movs	r1, #1
 8109a4e:	4620      	mov	r0, r4
 8109a50:	f002 f970 	bl	810bd34 <__i2b>
 8109a54:	4606      	mov	r6, r0
 8109a56:	2800      	cmp	r0, #0
 8109a58:	f43f aeee 	beq.w	8109838 <_strtod_l+0x490>
 8109a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8109a5e:	9904      	ldr	r1, [sp, #16]
 8109a60:	2b00      	cmp	r3, #0
 8109a62:	bfab      	itete	ge
 8109a64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8109a66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8109a68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8109a6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8109a6e:	bfac      	ite	ge
 8109a70:	eb03 0902 	addge.w	r9, r3, r2
 8109a74:	1ad7      	sublt	r7, r2, r3
 8109a76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8109a78:	eba3 0801 	sub.w	r8, r3, r1
 8109a7c:	4490      	add	r8, r2
 8109a7e:	4ba1      	ldr	r3, [pc, #644]	; (8109d04 <_strtod_l+0x95c>)
 8109a80:	f108 38ff 	add.w	r8, r8, #4294967295
 8109a84:	4598      	cmp	r8, r3
 8109a86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109a8a:	f280 80c7 	bge.w	8109c1c <_strtod_l+0x874>
 8109a8e:	eba3 0308 	sub.w	r3, r3, r8
 8109a92:	2b1f      	cmp	r3, #31
 8109a94:	eba2 0203 	sub.w	r2, r2, r3
 8109a98:	f04f 0101 	mov.w	r1, #1
 8109a9c:	f300 80b1 	bgt.w	8109c02 <_strtod_l+0x85a>
 8109aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8109aa4:	930d      	str	r3, [sp, #52]	; 0x34
 8109aa6:	2300      	movs	r3, #0
 8109aa8:	9308      	str	r3, [sp, #32]
 8109aaa:	eb09 0802 	add.w	r8, r9, r2
 8109aae:	9b04      	ldr	r3, [sp, #16]
 8109ab0:	45c1      	cmp	r9, r8
 8109ab2:	4417      	add	r7, r2
 8109ab4:	441f      	add	r7, r3
 8109ab6:	464b      	mov	r3, r9
 8109ab8:	bfa8      	it	ge
 8109aba:	4643      	movge	r3, r8
 8109abc:	42bb      	cmp	r3, r7
 8109abe:	bfa8      	it	ge
 8109ac0:	463b      	movge	r3, r7
 8109ac2:	2b00      	cmp	r3, #0
 8109ac4:	bfc2      	ittt	gt
 8109ac6:	eba8 0803 	subgt.w	r8, r8, r3
 8109aca:	1aff      	subgt	r7, r7, r3
 8109acc:	eba9 0903 	subgt.w	r9, r9, r3
 8109ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109ad2:	2b00      	cmp	r3, #0
 8109ad4:	dd17      	ble.n	8109b06 <_strtod_l+0x75e>
 8109ad6:	4631      	mov	r1, r6
 8109ad8:	461a      	mov	r2, r3
 8109ada:	4620      	mov	r0, r4
 8109adc:	f002 f9ea 	bl	810beb4 <__pow5mult>
 8109ae0:	4606      	mov	r6, r0
 8109ae2:	2800      	cmp	r0, #0
 8109ae4:	f43f aea8 	beq.w	8109838 <_strtod_l+0x490>
 8109ae8:	4601      	mov	r1, r0
 8109aea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109aec:	4620      	mov	r0, r4
 8109aee:	f002 f937 	bl	810bd60 <__multiply>
 8109af2:	900b      	str	r0, [sp, #44]	; 0x2c
 8109af4:	2800      	cmp	r0, #0
 8109af6:	f43f ae9f 	beq.w	8109838 <_strtod_l+0x490>
 8109afa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109afc:	4620      	mov	r0, r4
 8109afe:	f002 f817 	bl	810bb30 <_Bfree>
 8109b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b04:	9318      	str	r3, [sp, #96]	; 0x60
 8109b06:	f1b8 0f00 	cmp.w	r8, #0
 8109b0a:	f300 808c 	bgt.w	8109c26 <_strtod_l+0x87e>
 8109b0e:	9b06      	ldr	r3, [sp, #24]
 8109b10:	2b00      	cmp	r3, #0
 8109b12:	dd08      	ble.n	8109b26 <_strtod_l+0x77e>
 8109b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109b16:	9905      	ldr	r1, [sp, #20]
 8109b18:	4620      	mov	r0, r4
 8109b1a:	f002 f9cb 	bl	810beb4 <__pow5mult>
 8109b1e:	9005      	str	r0, [sp, #20]
 8109b20:	2800      	cmp	r0, #0
 8109b22:	f43f ae89 	beq.w	8109838 <_strtod_l+0x490>
 8109b26:	2f00      	cmp	r7, #0
 8109b28:	dd08      	ble.n	8109b3c <_strtod_l+0x794>
 8109b2a:	9905      	ldr	r1, [sp, #20]
 8109b2c:	463a      	mov	r2, r7
 8109b2e:	4620      	mov	r0, r4
 8109b30:	f002 fa1a 	bl	810bf68 <__lshift>
 8109b34:	9005      	str	r0, [sp, #20]
 8109b36:	2800      	cmp	r0, #0
 8109b38:	f43f ae7e 	beq.w	8109838 <_strtod_l+0x490>
 8109b3c:	f1b9 0f00 	cmp.w	r9, #0
 8109b40:	dd08      	ble.n	8109b54 <_strtod_l+0x7ac>
 8109b42:	4631      	mov	r1, r6
 8109b44:	464a      	mov	r2, r9
 8109b46:	4620      	mov	r0, r4
 8109b48:	f002 fa0e 	bl	810bf68 <__lshift>
 8109b4c:	4606      	mov	r6, r0
 8109b4e:	2800      	cmp	r0, #0
 8109b50:	f43f ae72 	beq.w	8109838 <_strtod_l+0x490>
 8109b54:	9a05      	ldr	r2, [sp, #20]
 8109b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109b58:	4620      	mov	r0, r4
 8109b5a:	f002 fa91 	bl	810c080 <__mdiff>
 8109b5e:	4605      	mov	r5, r0
 8109b60:	2800      	cmp	r0, #0
 8109b62:	f43f ae69 	beq.w	8109838 <_strtod_l+0x490>
 8109b66:	68c3      	ldr	r3, [r0, #12]
 8109b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8109b6a:	2300      	movs	r3, #0
 8109b6c:	60c3      	str	r3, [r0, #12]
 8109b6e:	4631      	mov	r1, r6
 8109b70:	f002 fa6a 	bl	810c048 <__mcmp>
 8109b74:	2800      	cmp	r0, #0
 8109b76:	da60      	bge.n	8109c3a <_strtod_l+0x892>
 8109b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b7a:	ea53 030a 	orrs.w	r3, r3, sl
 8109b7e:	f040 8082 	bne.w	8109c86 <_strtod_l+0x8de>
 8109b82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109b86:	2b00      	cmp	r3, #0
 8109b88:	d17d      	bne.n	8109c86 <_strtod_l+0x8de>
 8109b8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109b8e:	0d1b      	lsrs	r3, r3, #20
 8109b90:	051b      	lsls	r3, r3, #20
 8109b92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8109b96:	d976      	bls.n	8109c86 <_strtod_l+0x8de>
 8109b98:	696b      	ldr	r3, [r5, #20]
 8109b9a:	b913      	cbnz	r3, 8109ba2 <_strtod_l+0x7fa>
 8109b9c:	692b      	ldr	r3, [r5, #16]
 8109b9e:	2b01      	cmp	r3, #1
 8109ba0:	dd71      	ble.n	8109c86 <_strtod_l+0x8de>
 8109ba2:	4629      	mov	r1, r5
 8109ba4:	2201      	movs	r2, #1
 8109ba6:	4620      	mov	r0, r4
 8109ba8:	f002 f9de 	bl	810bf68 <__lshift>
 8109bac:	4631      	mov	r1, r6
 8109bae:	4605      	mov	r5, r0
 8109bb0:	f002 fa4a 	bl	810c048 <__mcmp>
 8109bb4:	2800      	cmp	r0, #0
 8109bb6:	dd66      	ble.n	8109c86 <_strtod_l+0x8de>
 8109bb8:	9904      	ldr	r1, [sp, #16]
 8109bba:	4a53      	ldr	r2, [pc, #332]	; (8109d08 <_strtod_l+0x960>)
 8109bbc:	465b      	mov	r3, fp
 8109bbe:	2900      	cmp	r1, #0
 8109bc0:	f000 8081 	beq.w	8109cc6 <_strtod_l+0x91e>
 8109bc4:	ea02 010b 	and.w	r1, r2, fp
 8109bc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8109bcc:	dc7b      	bgt.n	8109cc6 <_strtod_l+0x91e>
 8109bce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8109bd2:	f77f aea9 	ble.w	8109928 <_strtod_l+0x580>
 8109bd6:	4b4d      	ldr	r3, [pc, #308]	; (8109d0c <_strtod_l+0x964>)
 8109bd8:	4650      	mov	r0, sl
 8109bda:	4659      	mov	r1, fp
 8109bdc:	2200      	movs	r2, #0
 8109bde:	f7f6 fd93 	bl	8100708 <__aeabi_dmul>
 8109be2:	460b      	mov	r3, r1
 8109be4:	4303      	orrs	r3, r0
 8109be6:	bf08      	it	eq
 8109be8:	2322      	moveq	r3, #34	; 0x22
 8109bea:	4682      	mov	sl, r0
 8109bec:	468b      	mov	fp, r1
 8109bee:	bf08      	it	eq
 8109bf0:	6023      	streq	r3, [r4, #0]
 8109bf2:	e62b      	b.n	810984c <_strtod_l+0x4a4>
 8109bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8109bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8109bfc:	ea03 0a0a 	and.w	sl, r3, sl
 8109c00:	e6e3      	b.n	81099ca <_strtod_l+0x622>
 8109c02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8109c06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8109c0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8109c0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8109c12:	fa01 f308 	lsl.w	r3, r1, r8
 8109c16:	9308      	str	r3, [sp, #32]
 8109c18:	910d      	str	r1, [sp, #52]	; 0x34
 8109c1a:	e746      	b.n	8109aaa <_strtod_l+0x702>
 8109c1c:	2300      	movs	r3, #0
 8109c1e:	9308      	str	r3, [sp, #32]
 8109c20:	2301      	movs	r3, #1
 8109c22:	930d      	str	r3, [sp, #52]	; 0x34
 8109c24:	e741      	b.n	8109aaa <_strtod_l+0x702>
 8109c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109c28:	4642      	mov	r2, r8
 8109c2a:	4620      	mov	r0, r4
 8109c2c:	f002 f99c 	bl	810bf68 <__lshift>
 8109c30:	9018      	str	r0, [sp, #96]	; 0x60
 8109c32:	2800      	cmp	r0, #0
 8109c34:	f47f af6b 	bne.w	8109b0e <_strtod_l+0x766>
 8109c38:	e5fe      	b.n	8109838 <_strtod_l+0x490>
 8109c3a:	465f      	mov	r7, fp
 8109c3c:	d16e      	bne.n	8109d1c <_strtod_l+0x974>
 8109c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109c44:	b342      	cbz	r2, 8109c98 <_strtod_l+0x8f0>
 8109c46:	4a32      	ldr	r2, [pc, #200]	; (8109d10 <_strtod_l+0x968>)
 8109c48:	4293      	cmp	r3, r2
 8109c4a:	d128      	bne.n	8109c9e <_strtod_l+0x8f6>
 8109c4c:	9b04      	ldr	r3, [sp, #16]
 8109c4e:	4651      	mov	r1, sl
 8109c50:	b1eb      	cbz	r3, 8109c8e <_strtod_l+0x8e6>
 8109c52:	4b2d      	ldr	r3, [pc, #180]	; (8109d08 <_strtod_l+0x960>)
 8109c54:	403b      	ands	r3, r7
 8109c56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8109c5e:	d819      	bhi.n	8109c94 <_strtod_l+0x8ec>
 8109c60:	0d1b      	lsrs	r3, r3, #20
 8109c62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109c66:	fa02 f303 	lsl.w	r3, r2, r3
 8109c6a:	4299      	cmp	r1, r3
 8109c6c:	d117      	bne.n	8109c9e <_strtod_l+0x8f6>
 8109c6e:	4b29      	ldr	r3, [pc, #164]	; (8109d14 <_strtod_l+0x96c>)
 8109c70:	429f      	cmp	r7, r3
 8109c72:	d102      	bne.n	8109c7a <_strtod_l+0x8d2>
 8109c74:	3101      	adds	r1, #1
 8109c76:	f43f addf 	beq.w	8109838 <_strtod_l+0x490>
 8109c7a:	4b23      	ldr	r3, [pc, #140]	; (8109d08 <_strtod_l+0x960>)
 8109c7c:	403b      	ands	r3, r7
 8109c7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8109c82:	f04f 0a00 	mov.w	sl, #0
 8109c86:	9b04      	ldr	r3, [sp, #16]
 8109c88:	2b00      	cmp	r3, #0
 8109c8a:	d1a4      	bne.n	8109bd6 <_strtod_l+0x82e>
 8109c8c:	e5de      	b.n	810984c <_strtod_l+0x4a4>
 8109c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8109c92:	e7ea      	b.n	8109c6a <_strtod_l+0x8c2>
 8109c94:	4613      	mov	r3, r2
 8109c96:	e7e8      	b.n	8109c6a <_strtod_l+0x8c2>
 8109c98:	ea53 030a 	orrs.w	r3, r3, sl
 8109c9c:	d08c      	beq.n	8109bb8 <_strtod_l+0x810>
 8109c9e:	9b08      	ldr	r3, [sp, #32]
 8109ca0:	b1db      	cbz	r3, 8109cda <_strtod_l+0x932>
 8109ca2:	423b      	tst	r3, r7
 8109ca4:	d0ef      	beq.n	8109c86 <_strtod_l+0x8de>
 8109ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109ca8:	9a04      	ldr	r2, [sp, #16]
 8109caa:	4650      	mov	r0, sl
 8109cac:	4659      	mov	r1, fp
 8109cae:	b1c3      	cbz	r3, 8109ce2 <_strtod_l+0x93a>
 8109cb0:	f7ff fb5e 	bl	8109370 <sulp>
 8109cb4:	4602      	mov	r2, r0
 8109cb6:	460b      	mov	r3, r1
 8109cb8:	ec51 0b18 	vmov	r0, r1, d8
 8109cbc:	f7f6 fb6e 	bl	810039c <__adddf3>
 8109cc0:	4682      	mov	sl, r0
 8109cc2:	468b      	mov	fp, r1
 8109cc4:	e7df      	b.n	8109c86 <_strtod_l+0x8de>
 8109cc6:	4013      	ands	r3, r2
 8109cc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8109ccc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8109cd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8109cd4:	f04f 3aff 	mov.w	sl, #4294967295
 8109cd8:	e7d5      	b.n	8109c86 <_strtod_l+0x8de>
 8109cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109cdc:	ea13 0f0a 	tst.w	r3, sl
 8109ce0:	e7e0      	b.n	8109ca4 <_strtod_l+0x8fc>
 8109ce2:	f7ff fb45 	bl	8109370 <sulp>
 8109ce6:	4602      	mov	r2, r0
 8109ce8:	460b      	mov	r3, r1
 8109cea:	ec51 0b18 	vmov	r0, r1, d8
 8109cee:	f7f6 fb53 	bl	8100398 <__aeabi_dsub>
 8109cf2:	2200      	movs	r2, #0
 8109cf4:	2300      	movs	r3, #0
 8109cf6:	4682      	mov	sl, r0
 8109cf8:	468b      	mov	fp, r1
 8109cfa:	f7f6 ff6d 	bl	8100bd8 <__aeabi_dcmpeq>
 8109cfe:	2800      	cmp	r0, #0
 8109d00:	d0c1      	beq.n	8109c86 <_strtod_l+0x8de>
 8109d02:	e611      	b.n	8109928 <_strtod_l+0x580>
 8109d04:	fffffc02 	.word	0xfffffc02
 8109d08:	7ff00000 	.word	0x7ff00000
 8109d0c:	39500000 	.word	0x39500000
 8109d10:	000fffff 	.word	0x000fffff
 8109d14:	7fefffff 	.word	0x7fefffff
 8109d18:	0810d010 	.word	0x0810d010
 8109d1c:	4631      	mov	r1, r6
 8109d1e:	4628      	mov	r0, r5
 8109d20:	f002 fb10 	bl	810c344 <__ratio>
 8109d24:	ec59 8b10 	vmov	r8, r9, d0
 8109d28:	ee10 0a10 	vmov	r0, s0
 8109d2c:	2200      	movs	r2, #0
 8109d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109d32:	4649      	mov	r1, r9
 8109d34:	f7f6 ff64 	bl	8100c00 <__aeabi_dcmple>
 8109d38:	2800      	cmp	r0, #0
 8109d3a:	d07a      	beq.n	8109e32 <_strtod_l+0xa8a>
 8109d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109d3e:	2b00      	cmp	r3, #0
 8109d40:	d04a      	beq.n	8109dd8 <_strtod_l+0xa30>
 8109d42:	4b95      	ldr	r3, [pc, #596]	; (8109f98 <_strtod_l+0xbf0>)
 8109d44:	2200      	movs	r2, #0
 8109d46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109d4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109f98 <_strtod_l+0xbf0>
 8109d4e:	f04f 0800 	mov.w	r8, #0
 8109d52:	4b92      	ldr	r3, [pc, #584]	; (8109f9c <_strtod_l+0xbf4>)
 8109d54:	403b      	ands	r3, r7
 8109d56:	930d      	str	r3, [sp, #52]	; 0x34
 8109d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109d5a:	4b91      	ldr	r3, [pc, #580]	; (8109fa0 <_strtod_l+0xbf8>)
 8109d5c:	429a      	cmp	r2, r3
 8109d5e:	f040 80b0 	bne.w	8109ec2 <_strtod_l+0xb1a>
 8109d62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109d66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8109d6a:	ec4b ab10 	vmov	d0, sl, fp
 8109d6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109d72:	f002 fa0f 	bl	810c194 <__ulp>
 8109d76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109d7a:	ec53 2b10 	vmov	r2, r3, d0
 8109d7e:	f7f6 fcc3 	bl	8100708 <__aeabi_dmul>
 8109d82:	4652      	mov	r2, sl
 8109d84:	465b      	mov	r3, fp
 8109d86:	f7f6 fb09 	bl	810039c <__adddf3>
 8109d8a:	460b      	mov	r3, r1
 8109d8c:	4983      	ldr	r1, [pc, #524]	; (8109f9c <_strtod_l+0xbf4>)
 8109d8e:	4a85      	ldr	r2, [pc, #532]	; (8109fa4 <_strtod_l+0xbfc>)
 8109d90:	4019      	ands	r1, r3
 8109d92:	4291      	cmp	r1, r2
 8109d94:	4682      	mov	sl, r0
 8109d96:	d960      	bls.n	8109e5a <_strtod_l+0xab2>
 8109d98:	ee18 3a90 	vmov	r3, s17
 8109d9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8109da0:	4293      	cmp	r3, r2
 8109da2:	d104      	bne.n	8109dae <_strtod_l+0xa06>
 8109da4:	ee18 3a10 	vmov	r3, s16
 8109da8:	3301      	adds	r3, #1
 8109daa:	f43f ad45 	beq.w	8109838 <_strtod_l+0x490>
 8109dae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8109fb0 <_strtod_l+0xc08>
 8109db2:	f04f 3aff 	mov.w	sl, #4294967295
 8109db6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109db8:	4620      	mov	r0, r4
 8109dba:	f001 feb9 	bl	810bb30 <_Bfree>
 8109dbe:	9905      	ldr	r1, [sp, #20]
 8109dc0:	4620      	mov	r0, r4
 8109dc2:	f001 feb5 	bl	810bb30 <_Bfree>
 8109dc6:	4631      	mov	r1, r6
 8109dc8:	4620      	mov	r0, r4
 8109dca:	f001 feb1 	bl	810bb30 <_Bfree>
 8109dce:	4629      	mov	r1, r5
 8109dd0:	4620      	mov	r0, r4
 8109dd2:	f001 fead 	bl	810bb30 <_Bfree>
 8109dd6:	e61a      	b.n	8109a0e <_strtod_l+0x666>
 8109dd8:	f1ba 0f00 	cmp.w	sl, #0
 8109ddc:	d11b      	bne.n	8109e16 <_strtod_l+0xa6e>
 8109dde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109de2:	b9f3      	cbnz	r3, 8109e22 <_strtod_l+0xa7a>
 8109de4:	4b6c      	ldr	r3, [pc, #432]	; (8109f98 <_strtod_l+0xbf0>)
 8109de6:	2200      	movs	r2, #0
 8109de8:	4640      	mov	r0, r8
 8109dea:	4649      	mov	r1, r9
 8109dec:	f7f6 fefe 	bl	8100bec <__aeabi_dcmplt>
 8109df0:	b9d0      	cbnz	r0, 8109e28 <_strtod_l+0xa80>
 8109df2:	4640      	mov	r0, r8
 8109df4:	4649      	mov	r1, r9
 8109df6:	4b6c      	ldr	r3, [pc, #432]	; (8109fa8 <_strtod_l+0xc00>)
 8109df8:	2200      	movs	r2, #0
 8109dfa:	f7f6 fc85 	bl	8100708 <__aeabi_dmul>
 8109dfe:	4680      	mov	r8, r0
 8109e00:	4689      	mov	r9, r1
 8109e02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109e06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8109e0a:	9315      	str	r3, [sp, #84]	; 0x54
 8109e0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109e10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109e14:	e79d      	b.n	8109d52 <_strtod_l+0x9aa>
 8109e16:	f1ba 0f01 	cmp.w	sl, #1
 8109e1a:	d102      	bne.n	8109e22 <_strtod_l+0xa7a>
 8109e1c:	2f00      	cmp	r7, #0
 8109e1e:	f43f ad83 	beq.w	8109928 <_strtod_l+0x580>
 8109e22:	4b62      	ldr	r3, [pc, #392]	; (8109fac <_strtod_l+0xc04>)
 8109e24:	2200      	movs	r2, #0
 8109e26:	e78e      	b.n	8109d46 <_strtod_l+0x99e>
 8109e28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8109fa8 <_strtod_l+0xc00>
 8109e2c:	f04f 0800 	mov.w	r8, #0
 8109e30:	e7e7      	b.n	8109e02 <_strtod_l+0xa5a>
 8109e32:	4b5d      	ldr	r3, [pc, #372]	; (8109fa8 <_strtod_l+0xc00>)
 8109e34:	4640      	mov	r0, r8
 8109e36:	4649      	mov	r1, r9
 8109e38:	2200      	movs	r2, #0
 8109e3a:	f7f6 fc65 	bl	8100708 <__aeabi_dmul>
 8109e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109e40:	4680      	mov	r8, r0
 8109e42:	4689      	mov	r9, r1
 8109e44:	b933      	cbnz	r3, 8109e54 <_strtod_l+0xaac>
 8109e46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109e4a:	900e      	str	r0, [sp, #56]	; 0x38
 8109e4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8109e4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8109e52:	e7dd      	b.n	8109e10 <_strtod_l+0xa68>
 8109e54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8109e58:	e7f9      	b.n	8109e4e <_strtod_l+0xaa6>
 8109e5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109e5e:	9b04      	ldr	r3, [sp, #16]
 8109e60:	2b00      	cmp	r3, #0
 8109e62:	d1a8      	bne.n	8109db6 <_strtod_l+0xa0e>
 8109e64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109e68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109e6a:	0d1b      	lsrs	r3, r3, #20
 8109e6c:	051b      	lsls	r3, r3, #20
 8109e6e:	429a      	cmp	r2, r3
 8109e70:	d1a1      	bne.n	8109db6 <_strtod_l+0xa0e>
 8109e72:	4640      	mov	r0, r8
 8109e74:	4649      	mov	r1, r9
 8109e76:	f7f6 ffa7 	bl	8100dc8 <__aeabi_d2lz>
 8109e7a:	f7f6 fc17 	bl	81006ac <__aeabi_l2d>
 8109e7e:	4602      	mov	r2, r0
 8109e80:	460b      	mov	r3, r1
 8109e82:	4640      	mov	r0, r8
 8109e84:	4649      	mov	r1, r9
 8109e86:	f7f6 fa87 	bl	8100398 <__aeabi_dsub>
 8109e8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109e90:	ea43 030a 	orr.w	r3, r3, sl
 8109e94:	4313      	orrs	r3, r2
 8109e96:	4680      	mov	r8, r0
 8109e98:	4689      	mov	r9, r1
 8109e9a:	d055      	beq.n	8109f48 <_strtod_l+0xba0>
 8109e9c:	a336      	add	r3, pc, #216	; (adr r3, 8109f78 <_strtod_l+0xbd0>)
 8109e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ea2:	f7f6 fea3 	bl	8100bec <__aeabi_dcmplt>
 8109ea6:	2800      	cmp	r0, #0
 8109ea8:	f47f acd0 	bne.w	810984c <_strtod_l+0x4a4>
 8109eac:	a334      	add	r3, pc, #208	; (adr r3, 8109f80 <_strtod_l+0xbd8>)
 8109eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109eb2:	4640      	mov	r0, r8
 8109eb4:	4649      	mov	r1, r9
 8109eb6:	f7f6 feb7 	bl	8100c28 <__aeabi_dcmpgt>
 8109eba:	2800      	cmp	r0, #0
 8109ebc:	f43f af7b 	beq.w	8109db6 <_strtod_l+0xa0e>
 8109ec0:	e4c4      	b.n	810984c <_strtod_l+0x4a4>
 8109ec2:	9b04      	ldr	r3, [sp, #16]
 8109ec4:	b333      	cbz	r3, 8109f14 <_strtod_l+0xb6c>
 8109ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109ec8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109ecc:	d822      	bhi.n	8109f14 <_strtod_l+0xb6c>
 8109ece:	a32e      	add	r3, pc, #184	; (adr r3, 8109f88 <_strtod_l+0xbe0>)
 8109ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ed4:	4640      	mov	r0, r8
 8109ed6:	4649      	mov	r1, r9
 8109ed8:	f7f6 fe92 	bl	8100c00 <__aeabi_dcmple>
 8109edc:	b1a0      	cbz	r0, 8109f08 <_strtod_l+0xb60>
 8109ede:	4649      	mov	r1, r9
 8109ee0:	4640      	mov	r0, r8
 8109ee2:	f7f6 fee9 	bl	8100cb8 <__aeabi_d2uiz>
 8109ee6:	2801      	cmp	r0, #1
 8109ee8:	bf38      	it	cc
 8109eea:	2001      	movcc	r0, #1
 8109eec:	f7f6 fb92 	bl	8100614 <__aeabi_ui2d>
 8109ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109ef2:	4680      	mov	r8, r0
 8109ef4:	4689      	mov	r9, r1
 8109ef6:	bb23      	cbnz	r3, 8109f42 <_strtod_l+0xb9a>
 8109ef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109efc:	9010      	str	r0, [sp, #64]	; 0x40
 8109efe:	9311      	str	r3, [sp, #68]	; 0x44
 8109f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8109f04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109f0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109f0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109f10:	1a9b      	subs	r3, r3, r2
 8109f12:	9309      	str	r3, [sp, #36]	; 0x24
 8109f14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109f18:	eeb0 0a48 	vmov.f32	s0, s16
 8109f1c:	eef0 0a68 	vmov.f32	s1, s17
 8109f20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109f24:	f002 f936 	bl	810c194 <__ulp>
 8109f28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109f2c:	ec53 2b10 	vmov	r2, r3, d0
 8109f30:	f7f6 fbea 	bl	8100708 <__aeabi_dmul>
 8109f34:	ec53 2b18 	vmov	r2, r3, d8
 8109f38:	f7f6 fa30 	bl	810039c <__adddf3>
 8109f3c:	4682      	mov	sl, r0
 8109f3e:	468b      	mov	fp, r1
 8109f40:	e78d      	b.n	8109e5e <_strtod_l+0xab6>
 8109f42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8109f46:	e7db      	b.n	8109f00 <_strtod_l+0xb58>
 8109f48:	a311      	add	r3, pc, #68	; (adr r3, 8109f90 <_strtod_l+0xbe8>)
 8109f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f4e:	f7f6 fe4d 	bl	8100bec <__aeabi_dcmplt>
 8109f52:	e7b2      	b.n	8109eba <_strtod_l+0xb12>
 8109f54:	2300      	movs	r3, #0
 8109f56:	930a      	str	r3, [sp, #40]	; 0x28
 8109f58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109f5c:	6013      	str	r3, [r2, #0]
 8109f5e:	f7ff ba6b 	b.w	8109438 <_strtod_l+0x90>
 8109f62:	2a65      	cmp	r2, #101	; 0x65
 8109f64:	f43f ab5f 	beq.w	8109626 <_strtod_l+0x27e>
 8109f68:	2a45      	cmp	r2, #69	; 0x45
 8109f6a:	f43f ab5c 	beq.w	8109626 <_strtod_l+0x27e>
 8109f6e:	2301      	movs	r3, #1
 8109f70:	f7ff bb94 	b.w	810969c <_strtod_l+0x2f4>
 8109f74:	f3af 8000 	nop.w
 8109f78:	94a03595 	.word	0x94a03595
 8109f7c:	3fdfffff 	.word	0x3fdfffff
 8109f80:	35afe535 	.word	0x35afe535
 8109f84:	3fe00000 	.word	0x3fe00000
 8109f88:	ffc00000 	.word	0xffc00000
 8109f8c:	41dfffff 	.word	0x41dfffff
 8109f90:	94a03595 	.word	0x94a03595
 8109f94:	3fcfffff 	.word	0x3fcfffff
 8109f98:	3ff00000 	.word	0x3ff00000
 8109f9c:	7ff00000 	.word	0x7ff00000
 8109fa0:	7fe00000 	.word	0x7fe00000
 8109fa4:	7c9fffff 	.word	0x7c9fffff
 8109fa8:	3fe00000 	.word	0x3fe00000
 8109fac:	bff00000 	.word	0xbff00000
 8109fb0:	7fefffff 	.word	0x7fefffff

08109fb4 <_strtod_r>:
 8109fb4:	4b01      	ldr	r3, [pc, #4]	; (8109fbc <_strtod_r+0x8>)
 8109fb6:	f7ff b9f7 	b.w	81093a8 <_strtod_l>
 8109fba:	bf00      	nop
 8109fbc:	1000007c 	.word	0x1000007c

08109fc0 <_strtol_l.constprop.0>:
 8109fc0:	2b01      	cmp	r3, #1
 8109fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109fc6:	d001      	beq.n	8109fcc <_strtol_l.constprop.0+0xc>
 8109fc8:	2b24      	cmp	r3, #36	; 0x24
 8109fca:	d906      	bls.n	8109fda <_strtol_l.constprop.0+0x1a>
 8109fcc:	f7fe fa70 	bl	81084b0 <__errno>
 8109fd0:	2316      	movs	r3, #22
 8109fd2:	6003      	str	r3, [r0, #0]
 8109fd4:	2000      	movs	r0, #0
 8109fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109fda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810a0c0 <_strtol_l.constprop.0+0x100>
 8109fde:	460d      	mov	r5, r1
 8109fe0:	462e      	mov	r6, r5
 8109fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109fe6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8109fea:	f017 0708 	ands.w	r7, r7, #8
 8109fee:	d1f7      	bne.n	8109fe0 <_strtol_l.constprop.0+0x20>
 8109ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8109ff2:	d132      	bne.n	810a05a <_strtol_l.constprop.0+0x9a>
 8109ff4:	782c      	ldrb	r4, [r5, #0]
 8109ff6:	2701      	movs	r7, #1
 8109ff8:	1cb5      	adds	r5, r6, #2
 8109ffa:	2b00      	cmp	r3, #0
 8109ffc:	d05b      	beq.n	810a0b6 <_strtol_l.constprop.0+0xf6>
 8109ffe:	2b10      	cmp	r3, #16
 810a000:	d109      	bne.n	810a016 <_strtol_l.constprop.0+0x56>
 810a002:	2c30      	cmp	r4, #48	; 0x30
 810a004:	d107      	bne.n	810a016 <_strtol_l.constprop.0+0x56>
 810a006:	782c      	ldrb	r4, [r5, #0]
 810a008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810a00c:	2c58      	cmp	r4, #88	; 0x58
 810a00e:	d14d      	bne.n	810a0ac <_strtol_l.constprop.0+0xec>
 810a010:	786c      	ldrb	r4, [r5, #1]
 810a012:	2310      	movs	r3, #16
 810a014:	3502      	adds	r5, #2
 810a016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810a01a:	f108 38ff 	add.w	r8, r8, #4294967295
 810a01e:	f04f 0c00 	mov.w	ip, #0
 810a022:	fbb8 f9f3 	udiv	r9, r8, r3
 810a026:	4666      	mov	r6, ip
 810a028:	fb03 8a19 	mls	sl, r3, r9, r8
 810a02c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810a030:	f1be 0f09 	cmp.w	lr, #9
 810a034:	d816      	bhi.n	810a064 <_strtol_l.constprop.0+0xa4>
 810a036:	4674      	mov	r4, lr
 810a038:	42a3      	cmp	r3, r4
 810a03a:	dd24      	ble.n	810a086 <_strtol_l.constprop.0+0xc6>
 810a03c:	f1bc 0f00 	cmp.w	ip, #0
 810a040:	db1e      	blt.n	810a080 <_strtol_l.constprop.0+0xc0>
 810a042:	45b1      	cmp	r9, r6
 810a044:	d31c      	bcc.n	810a080 <_strtol_l.constprop.0+0xc0>
 810a046:	d101      	bne.n	810a04c <_strtol_l.constprop.0+0x8c>
 810a048:	45a2      	cmp	sl, r4
 810a04a:	db19      	blt.n	810a080 <_strtol_l.constprop.0+0xc0>
 810a04c:	fb06 4603 	mla	r6, r6, r3, r4
 810a050:	f04f 0c01 	mov.w	ip, #1
 810a054:	f815 4b01 	ldrb.w	r4, [r5], #1
 810a058:	e7e8      	b.n	810a02c <_strtol_l.constprop.0+0x6c>
 810a05a:	2c2b      	cmp	r4, #43	; 0x2b
 810a05c:	bf04      	itt	eq
 810a05e:	782c      	ldrbeq	r4, [r5, #0]
 810a060:	1cb5      	addeq	r5, r6, #2
 810a062:	e7ca      	b.n	8109ffa <_strtol_l.constprop.0+0x3a>
 810a064:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810a068:	f1be 0f19 	cmp.w	lr, #25
 810a06c:	d801      	bhi.n	810a072 <_strtol_l.constprop.0+0xb2>
 810a06e:	3c37      	subs	r4, #55	; 0x37
 810a070:	e7e2      	b.n	810a038 <_strtol_l.constprop.0+0x78>
 810a072:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810a076:	f1be 0f19 	cmp.w	lr, #25
 810a07a:	d804      	bhi.n	810a086 <_strtol_l.constprop.0+0xc6>
 810a07c:	3c57      	subs	r4, #87	; 0x57
 810a07e:	e7db      	b.n	810a038 <_strtol_l.constprop.0+0x78>
 810a080:	f04f 3cff 	mov.w	ip, #4294967295
 810a084:	e7e6      	b.n	810a054 <_strtol_l.constprop.0+0x94>
 810a086:	f1bc 0f00 	cmp.w	ip, #0
 810a08a:	da05      	bge.n	810a098 <_strtol_l.constprop.0+0xd8>
 810a08c:	2322      	movs	r3, #34	; 0x22
 810a08e:	6003      	str	r3, [r0, #0]
 810a090:	4646      	mov	r6, r8
 810a092:	b942      	cbnz	r2, 810a0a6 <_strtol_l.constprop.0+0xe6>
 810a094:	4630      	mov	r0, r6
 810a096:	e79e      	b.n	8109fd6 <_strtol_l.constprop.0+0x16>
 810a098:	b107      	cbz	r7, 810a09c <_strtol_l.constprop.0+0xdc>
 810a09a:	4276      	negs	r6, r6
 810a09c:	2a00      	cmp	r2, #0
 810a09e:	d0f9      	beq.n	810a094 <_strtol_l.constprop.0+0xd4>
 810a0a0:	f1bc 0f00 	cmp.w	ip, #0
 810a0a4:	d000      	beq.n	810a0a8 <_strtol_l.constprop.0+0xe8>
 810a0a6:	1e69      	subs	r1, r5, #1
 810a0a8:	6011      	str	r1, [r2, #0]
 810a0aa:	e7f3      	b.n	810a094 <_strtol_l.constprop.0+0xd4>
 810a0ac:	2430      	movs	r4, #48	; 0x30
 810a0ae:	2b00      	cmp	r3, #0
 810a0b0:	d1b1      	bne.n	810a016 <_strtol_l.constprop.0+0x56>
 810a0b2:	2308      	movs	r3, #8
 810a0b4:	e7af      	b.n	810a016 <_strtol_l.constprop.0+0x56>
 810a0b6:	2c30      	cmp	r4, #48	; 0x30
 810a0b8:	d0a5      	beq.n	810a006 <_strtol_l.constprop.0+0x46>
 810a0ba:	230a      	movs	r3, #10
 810a0bc:	e7ab      	b.n	810a016 <_strtol_l.constprop.0+0x56>
 810a0be:	bf00      	nop
 810a0c0:	0810d039 	.word	0x0810d039

0810a0c4 <_strtol_r>:
 810a0c4:	f7ff bf7c 	b.w	8109fc0 <_strtol_l.constprop.0>

0810a0c8 <__swbuf_r>:
 810a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a0ca:	460e      	mov	r6, r1
 810a0cc:	4614      	mov	r4, r2
 810a0ce:	4605      	mov	r5, r0
 810a0d0:	b118      	cbz	r0, 810a0da <__swbuf_r+0x12>
 810a0d2:	6983      	ldr	r3, [r0, #24]
 810a0d4:	b90b      	cbnz	r3, 810a0da <__swbuf_r+0x12>
 810a0d6:	f001 f84b 	bl	810b170 <__sinit>
 810a0da:	4b21      	ldr	r3, [pc, #132]	; (810a160 <__swbuf_r+0x98>)
 810a0dc:	429c      	cmp	r4, r3
 810a0de:	d12b      	bne.n	810a138 <__swbuf_r+0x70>
 810a0e0:	686c      	ldr	r4, [r5, #4]
 810a0e2:	69a3      	ldr	r3, [r4, #24]
 810a0e4:	60a3      	str	r3, [r4, #8]
 810a0e6:	89a3      	ldrh	r3, [r4, #12]
 810a0e8:	071a      	lsls	r2, r3, #28
 810a0ea:	d52f      	bpl.n	810a14c <__swbuf_r+0x84>
 810a0ec:	6923      	ldr	r3, [r4, #16]
 810a0ee:	b36b      	cbz	r3, 810a14c <__swbuf_r+0x84>
 810a0f0:	6923      	ldr	r3, [r4, #16]
 810a0f2:	6820      	ldr	r0, [r4, #0]
 810a0f4:	1ac0      	subs	r0, r0, r3
 810a0f6:	6963      	ldr	r3, [r4, #20]
 810a0f8:	b2f6      	uxtb	r6, r6
 810a0fa:	4283      	cmp	r3, r0
 810a0fc:	4637      	mov	r7, r6
 810a0fe:	dc04      	bgt.n	810a10a <__swbuf_r+0x42>
 810a100:	4621      	mov	r1, r4
 810a102:	4628      	mov	r0, r5
 810a104:	f000 ffa0 	bl	810b048 <_fflush_r>
 810a108:	bb30      	cbnz	r0, 810a158 <__swbuf_r+0x90>
 810a10a:	68a3      	ldr	r3, [r4, #8]
 810a10c:	3b01      	subs	r3, #1
 810a10e:	60a3      	str	r3, [r4, #8]
 810a110:	6823      	ldr	r3, [r4, #0]
 810a112:	1c5a      	adds	r2, r3, #1
 810a114:	6022      	str	r2, [r4, #0]
 810a116:	701e      	strb	r6, [r3, #0]
 810a118:	6963      	ldr	r3, [r4, #20]
 810a11a:	3001      	adds	r0, #1
 810a11c:	4283      	cmp	r3, r0
 810a11e:	d004      	beq.n	810a12a <__swbuf_r+0x62>
 810a120:	89a3      	ldrh	r3, [r4, #12]
 810a122:	07db      	lsls	r3, r3, #31
 810a124:	d506      	bpl.n	810a134 <__swbuf_r+0x6c>
 810a126:	2e0a      	cmp	r6, #10
 810a128:	d104      	bne.n	810a134 <__swbuf_r+0x6c>
 810a12a:	4621      	mov	r1, r4
 810a12c:	4628      	mov	r0, r5
 810a12e:	f000 ff8b 	bl	810b048 <_fflush_r>
 810a132:	b988      	cbnz	r0, 810a158 <__swbuf_r+0x90>
 810a134:	4638      	mov	r0, r7
 810a136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a138:	4b0a      	ldr	r3, [pc, #40]	; (810a164 <__swbuf_r+0x9c>)
 810a13a:	429c      	cmp	r4, r3
 810a13c:	d101      	bne.n	810a142 <__swbuf_r+0x7a>
 810a13e:	68ac      	ldr	r4, [r5, #8]
 810a140:	e7cf      	b.n	810a0e2 <__swbuf_r+0x1a>
 810a142:	4b09      	ldr	r3, [pc, #36]	; (810a168 <__swbuf_r+0xa0>)
 810a144:	429c      	cmp	r4, r3
 810a146:	bf08      	it	eq
 810a148:	68ec      	ldreq	r4, [r5, #12]
 810a14a:	e7ca      	b.n	810a0e2 <__swbuf_r+0x1a>
 810a14c:	4621      	mov	r1, r4
 810a14e:	4628      	mov	r0, r5
 810a150:	f000 f80c 	bl	810a16c <__swsetup_r>
 810a154:	2800      	cmp	r0, #0
 810a156:	d0cb      	beq.n	810a0f0 <__swbuf_r+0x28>
 810a158:	f04f 37ff 	mov.w	r7, #4294967295
 810a15c:	e7ea      	b.n	810a134 <__swbuf_r+0x6c>
 810a15e:	bf00      	nop
 810a160:	0810d1ec 	.word	0x0810d1ec
 810a164:	0810d20c 	.word	0x0810d20c
 810a168:	0810d1cc 	.word	0x0810d1cc

0810a16c <__swsetup_r>:
 810a16c:	4b32      	ldr	r3, [pc, #200]	; (810a238 <__swsetup_r+0xcc>)
 810a16e:	b570      	push	{r4, r5, r6, lr}
 810a170:	681d      	ldr	r5, [r3, #0]
 810a172:	4606      	mov	r6, r0
 810a174:	460c      	mov	r4, r1
 810a176:	b125      	cbz	r5, 810a182 <__swsetup_r+0x16>
 810a178:	69ab      	ldr	r3, [r5, #24]
 810a17a:	b913      	cbnz	r3, 810a182 <__swsetup_r+0x16>
 810a17c:	4628      	mov	r0, r5
 810a17e:	f000 fff7 	bl	810b170 <__sinit>
 810a182:	4b2e      	ldr	r3, [pc, #184]	; (810a23c <__swsetup_r+0xd0>)
 810a184:	429c      	cmp	r4, r3
 810a186:	d10f      	bne.n	810a1a8 <__swsetup_r+0x3c>
 810a188:	686c      	ldr	r4, [r5, #4]
 810a18a:	89a3      	ldrh	r3, [r4, #12]
 810a18c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a190:	0719      	lsls	r1, r3, #28
 810a192:	d42c      	bmi.n	810a1ee <__swsetup_r+0x82>
 810a194:	06dd      	lsls	r5, r3, #27
 810a196:	d411      	bmi.n	810a1bc <__swsetup_r+0x50>
 810a198:	2309      	movs	r3, #9
 810a19a:	6033      	str	r3, [r6, #0]
 810a19c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810a1a0:	81a3      	strh	r3, [r4, #12]
 810a1a2:	f04f 30ff 	mov.w	r0, #4294967295
 810a1a6:	e03e      	b.n	810a226 <__swsetup_r+0xba>
 810a1a8:	4b25      	ldr	r3, [pc, #148]	; (810a240 <__swsetup_r+0xd4>)
 810a1aa:	429c      	cmp	r4, r3
 810a1ac:	d101      	bne.n	810a1b2 <__swsetup_r+0x46>
 810a1ae:	68ac      	ldr	r4, [r5, #8]
 810a1b0:	e7eb      	b.n	810a18a <__swsetup_r+0x1e>
 810a1b2:	4b24      	ldr	r3, [pc, #144]	; (810a244 <__swsetup_r+0xd8>)
 810a1b4:	429c      	cmp	r4, r3
 810a1b6:	bf08      	it	eq
 810a1b8:	68ec      	ldreq	r4, [r5, #12]
 810a1ba:	e7e6      	b.n	810a18a <__swsetup_r+0x1e>
 810a1bc:	0758      	lsls	r0, r3, #29
 810a1be:	d512      	bpl.n	810a1e6 <__swsetup_r+0x7a>
 810a1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a1c2:	b141      	cbz	r1, 810a1d6 <__swsetup_r+0x6a>
 810a1c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a1c8:	4299      	cmp	r1, r3
 810a1ca:	d002      	beq.n	810a1d2 <__swsetup_r+0x66>
 810a1cc:	4630      	mov	r0, r6
 810a1ce:	f002 f947 	bl	810c460 <_free_r>
 810a1d2:	2300      	movs	r3, #0
 810a1d4:	6363      	str	r3, [r4, #52]	; 0x34
 810a1d6:	89a3      	ldrh	r3, [r4, #12]
 810a1d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810a1dc:	81a3      	strh	r3, [r4, #12]
 810a1de:	2300      	movs	r3, #0
 810a1e0:	6063      	str	r3, [r4, #4]
 810a1e2:	6923      	ldr	r3, [r4, #16]
 810a1e4:	6023      	str	r3, [r4, #0]
 810a1e6:	89a3      	ldrh	r3, [r4, #12]
 810a1e8:	f043 0308 	orr.w	r3, r3, #8
 810a1ec:	81a3      	strh	r3, [r4, #12]
 810a1ee:	6923      	ldr	r3, [r4, #16]
 810a1f0:	b94b      	cbnz	r3, 810a206 <__swsetup_r+0x9a>
 810a1f2:	89a3      	ldrh	r3, [r4, #12]
 810a1f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810a1f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a1fc:	d003      	beq.n	810a206 <__swsetup_r+0x9a>
 810a1fe:	4621      	mov	r1, r4
 810a200:	4630      	mov	r0, r6
 810a202:	f001 fbed 	bl	810b9e0 <__smakebuf_r>
 810a206:	89a0      	ldrh	r0, [r4, #12]
 810a208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a20c:	f010 0301 	ands.w	r3, r0, #1
 810a210:	d00a      	beq.n	810a228 <__swsetup_r+0xbc>
 810a212:	2300      	movs	r3, #0
 810a214:	60a3      	str	r3, [r4, #8]
 810a216:	6963      	ldr	r3, [r4, #20]
 810a218:	425b      	negs	r3, r3
 810a21a:	61a3      	str	r3, [r4, #24]
 810a21c:	6923      	ldr	r3, [r4, #16]
 810a21e:	b943      	cbnz	r3, 810a232 <__swsetup_r+0xc6>
 810a220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810a224:	d1ba      	bne.n	810a19c <__swsetup_r+0x30>
 810a226:	bd70      	pop	{r4, r5, r6, pc}
 810a228:	0781      	lsls	r1, r0, #30
 810a22a:	bf58      	it	pl
 810a22c:	6963      	ldrpl	r3, [r4, #20]
 810a22e:	60a3      	str	r3, [r4, #8]
 810a230:	e7f4      	b.n	810a21c <__swsetup_r+0xb0>
 810a232:	2000      	movs	r0, #0
 810a234:	e7f7      	b.n	810a226 <__swsetup_r+0xba>
 810a236:	bf00      	nop
 810a238:	10000014 	.word	0x10000014
 810a23c:	0810d1ec 	.word	0x0810d1ec
 810a240:	0810d20c 	.word	0x0810d20c
 810a244:	0810d1cc 	.word	0x0810d1cc

0810a248 <quorem>:
 810a248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a24c:	6903      	ldr	r3, [r0, #16]
 810a24e:	690c      	ldr	r4, [r1, #16]
 810a250:	42a3      	cmp	r3, r4
 810a252:	4607      	mov	r7, r0
 810a254:	f2c0 8081 	blt.w	810a35a <quorem+0x112>
 810a258:	3c01      	subs	r4, #1
 810a25a:	f101 0814 	add.w	r8, r1, #20
 810a25e:	f100 0514 	add.w	r5, r0, #20
 810a262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a266:	9301      	str	r3, [sp, #4]
 810a268:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810a26c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a270:	3301      	adds	r3, #1
 810a272:	429a      	cmp	r2, r3
 810a274:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810a278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810a27c:	fbb2 f6f3 	udiv	r6, r2, r3
 810a280:	d331      	bcc.n	810a2e6 <quorem+0x9e>
 810a282:	f04f 0e00 	mov.w	lr, #0
 810a286:	4640      	mov	r0, r8
 810a288:	46ac      	mov	ip, r5
 810a28a:	46f2      	mov	sl, lr
 810a28c:	f850 2b04 	ldr.w	r2, [r0], #4
 810a290:	b293      	uxth	r3, r2
 810a292:	fb06 e303 	mla	r3, r6, r3, lr
 810a296:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810a29a:	b29b      	uxth	r3, r3
 810a29c:	ebaa 0303 	sub.w	r3, sl, r3
 810a2a0:	f8dc a000 	ldr.w	sl, [ip]
 810a2a4:	0c12      	lsrs	r2, r2, #16
 810a2a6:	fa13 f38a 	uxtah	r3, r3, sl
 810a2aa:	fb06 e202 	mla	r2, r6, r2, lr
 810a2ae:	9300      	str	r3, [sp, #0]
 810a2b0:	9b00      	ldr	r3, [sp, #0]
 810a2b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810a2b6:	b292      	uxth	r2, r2
 810a2b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810a2bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a2c0:	f8bd 3000 	ldrh.w	r3, [sp]
 810a2c4:	4581      	cmp	r9, r0
 810a2c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a2ca:	f84c 3b04 	str.w	r3, [ip], #4
 810a2ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810a2d2:	d2db      	bcs.n	810a28c <quorem+0x44>
 810a2d4:	f855 300b 	ldr.w	r3, [r5, fp]
 810a2d8:	b92b      	cbnz	r3, 810a2e6 <quorem+0x9e>
 810a2da:	9b01      	ldr	r3, [sp, #4]
 810a2dc:	3b04      	subs	r3, #4
 810a2de:	429d      	cmp	r5, r3
 810a2e0:	461a      	mov	r2, r3
 810a2e2:	d32e      	bcc.n	810a342 <quorem+0xfa>
 810a2e4:	613c      	str	r4, [r7, #16]
 810a2e6:	4638      	mov	r0, r7
 810a2e8:	f001 feae 	bl	810c048 <__mcmp>
 810a2ec:	2800      	cmp	r0, #0
 810a2ee:	db24      	blt.n	810a33a <quorem+0xf2>
 810a2f0:	3601      	adds	r6, #1
 810a2f2:	4628      	mov	r0, r5
 810a2f4:	f04f 0c00 	mov.w	ip, #0
 810a2f8:	f858 2b04 	ldr.w	r2, [r8], #4
 810a2fc:	f8d0 e000 	ldr.w	lr, [r0]
 810a300:	b293      	uxth	r3, r2
 810a302:	ebac 0303 	sub.w	r3, ip, r3
 810a306:	0c12      	lsrs	r2, r2, #16
 810a308:	fa13 f38e 	uxtah	r3, r3, lr
 810a30c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810a310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a314:	b29b      	uxth	r3, r3
 810a316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a31a:	45c1      	cmp	r9, r8
 810a31c:	f840 3b04 	str.w	r3, [r0], #4
 810a320:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810a324:	d2e8      	bcs.n	810a2f8 <quorem+0xb0>
 810a326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a32a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a32e:	b922      	cbnz	r2, 810a33a <quorem+0xf2>
 810a330:	3b04      	subs	r3, #4
 810a332:	429d      	cmp	r5, r3
 810a334:	461a      	mov	r2, r3
 810a336:	d30a      	bcc.n	810a34e <quorem+0x106>
 810a338:	613c      	str	r4, [r7, #16]
 810a33a:	4630      	mov	r0, r6
 810a33c:	b003      	add	sp, #12
 810a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a342:	6812      	ldr	r2, [r2, #0]
 810a344:	3b04      	subs	r3, #4
 810a346:	2a00      	cmp	r2, #0
 810a348:	d1cc      	bne.n	810a2e4 <quorem+0x9c>
 810a34a:	3c01      	subs	r4, #1
 810a34c:	e7c7      	b.n	810a2de <quorem+0x96>
 810a34e:	6812      	ldr	r2, [r2, #0]
 810a350:	3b04      	subs	r3, #4
 810a352:	2a00      	cmp	r2, #0
 810a354:	d1f0      	bne.n	810a338 <quorem+0xf0>
 810a356:	3c01      	subs	r4, #1
 810a358:	e7eb      	b.n	810a332 <quorem+0xea>
 810a35a:	2000      	movs	r0, #0
 810a35c:	e7ee      	b.n	810a33c <quorem+0xf4>
	...

0810a360 <_dtoa_r>:
 810a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a364:	ed2d 8b04 	vpush	{d8-d9}
 810a368:	ec57 6b10 	vmov	r6, r7, d0
 810a36c:	b093      	sub	sp, #76	; 0x4c
 810a36e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a370:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810a374:	9106      	str	r1, [sp, #24]
 810a376:	ee10 aa10 	vmov	sl, s0
 810a37a:	4604      	mov	r4, r0
 810a37c:	9209      	str	r2, [sp, #36]	; 0x24
 810a37e:	930c      	str	r3, [sp, #48]	; 0x30
 810a380:	46bb      	mov	fp, r7
 810a382:	b975      	cbnz	r5, 810a3a2 <_dtoa_r+0x42>
 810a384:	2010      	movs	r0, #16
 810a386:	f001 fb6b 	bl	810ba60 <malloc>
 810a38a:	4602      	mov	r2, r0
 810a38c:	6260      	str	r0, [r4, #36]	; 0x24
 810a38e:	b920      	cbnz	r0, 810a39a <_dtoa_r+0x3a>
 810a390:	4ba7      	ldr	r3, [pc, #668]	; (810a630 <_dtoa_r+0x2d0>)
 810a392:	21ea      	movs	r1, #234	; 0xea
 810a394:	48a7      	ldr	r0, [pc, #668]	; (810a634 <_dtoa_r+0x2d4>)
 810a396:	f002 fc89 	bl	810ccac <__assert_func>
 810a39a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810a39e:	6005      	str	r5, [r0, #0]
 810a3a0:	60c5      	str	r5, [r0, #12]
 810a3a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a3a4:	6819      	ldr	r1, [r3, #0]
 810a3a6:	b151      	cbz	r1, 810a3be <_dtoa_r+0x5e>
 810a3a8:	685a      	ldr	r2, [r3, #4]
 810a3aa:	604a      	str	r2, [r1, #4]
 810a3ac:	2301      	movs	r3, #1
 810a3ae:	4093      	lsls	r3, r2
 810a3b0:	608b      	str	r3, [r1, #8]
 810a3b2:	4620      	mov	r0, r4
 810a3b4:	f001 fbbc 	bl	810bb30 <_Bfree>
 810a3b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a3ba:	2200      	movs	r2, #0
 810a3bc:	601a      	str	r2, [r3, #0]
 810a3be:	1e3b      	subs	r3, r7, #0
 810a3c0:	bfaa      	itet	ge
 810a3c2:	2300      	movge	r3, #0
 810a3c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810a3c8:	f8c8 3000 	strge.w	r3, [r8]
 810a3cc:	4b9a      	ldr	r3, [pc, #616]	; (810a638 <_dtoa_r+0x2d8>)
 810a3ce:	bfbc      	itt	lt
 810a3d0:	2201      	movlt	r2, #1
 810a3d2:	f8c8 2000 	strlt.w	r2, [r8]
 810a3d6:	ea33 030b 	bics.w	r3, r3, fp
 810a3da:	d11b      	bne.n	810a414 <_dtoa_r+0xb4>
 810a3dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a3de:	f242 730f 	movw	r3, #9999	; 0x270f
 810a3e2:	6013      	str	r3, [r2, #0]
 810a3e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a3e8:	4333      	orrs	r3, r6
 810a3ea:	f000 8592 	beq.w	810af12 <_dtoa_r+0xbb2>
 810a3ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a3f0:	b963      	cbnz	r3, 810a40c <_dtoa_r+0xac>
 810a3f2:	4b92      	ldr	r3, [pc, #584]	; (810a63c <_dtoa_r+0x2dc>)
 810a3f4:	e022      	b.n	810a43c <_dtoa_r+0xdc>
 810a3f6:	4b92      	ldr	r3, [pc, #584]	; (810a640 <_dtoa_r+0x2e0>)
 810a3f8:	9301      	str	r3, [sp, #4]
 810a3fa:	3308      	adds	r3, #8
 810a3fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a3fe:	6013      	str	r3, [r2, #0]
 810a400:	9801      	ldr	r0, [sp, #4]
 810a402:	b013      	add	sp, #76	; 0x4c
 810a404:	ecbd 8b04 	vpop	{d8-d9}
 810a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a40c:	4b8b      	ldr	r3, [pc, #556]	; (810a63c <_dtoa_r+0x2dc>)
 810a40e:	9301      	str	r3, [sp, #4]
 810a410:	3303      	adds	r3, #3
 810a412:	e7f3      	b.n	810a3fc <_dtoa_r+0x9c>
 810a414:	2200      	movs	r2, #0
 810a416:	2300      	movs	r3, #0
 810a418:	4650      	mov	r0, sl
 810a41a:	4659      	mov	r1, fp
 810a41c:	f7f6 fbdc 	bl	8100bd8 <__aeabi_dcmpeq>
 810a420:	ec4b ab19 	vmov	d9, sl, fp
 810a424:	4680      	mov	r8, r0
 810a426:	b158      	cbz	r0, 810a440 <_dtoa_r+0xe0>
 810a428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a42a:	2301      	movs	r3, #1
 810a42c:	6013      	str	r3, [r2, #0]
 810a42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a430:	2b00      	cmp	r3, #0
 810a432:	f000 856b 	beq.w	810af0c <_dtoa_r+0xbac>
 810a436:	4883      	ldr	r0, [pc, #524]	; (810a644 <_dtoa_r+0x2e4>)
 810a438:	6018      	str	r0, [r3, #0]
 810a43a:	1e43      	subs	r3, r0, #1
 810a43c:	9301      	str	r3, [sp, #4]
 810a43e:	e7df      	b.n	810a400 <_dtoa_r+0xa0>
 810a440:	ec4b ab10 	vmov	d0, sl, fp
 810a444:	aa10      	add	r2, sp, #64	; 0x40
 810a446:	a911      	add	r1, sp, #68	; 0x44
 810a448:	4620      	mov	r0, r4
 810a44a:	f001 ff1f 	bl	810c28c <__d2b>
 810a44e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810a452:	ee08 0a10 	vmov	s16, r0
 810a456:	2d00      	cmp	r5, #0
 810a458:	f000 8084 	beq.w	810a564 <_dtoa_r+0x204>
 810a45c:	ee19 3a90 	vmov	r3, s19
 810a460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a464:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810a468:	4656      	mov	r6, sl
 810a46a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810a46e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810a472:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810a476:	4b74      	ldr	r3, [pc, #464]	; (810a648 <_dtoa_r+0x2e8>)
 810a478:	2200      	movs	r2, #0
 810a47a:	4630      	mov	r0, r6
 810a47c:	4639      	mov	r1, r7
 810a47e:	f7f5 ff8b 	bl	8100398 <__aeabi_dsub>
 810a482:	a365      	add	r3, pc, #404	; (adr r3, 810a618 <_dtoa_r+0x2b8>)
 810a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a488:	f7f6 f93e 	bl	8100708 <__aeabi_dmul>
 810a48c:	a364      	add	r3, pc, #400	; (adr r3, 810a620 <_dtoa_r+0x2c0>)
 810a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a492:	f7f5 ff83 	bl	810039c <__adddf3>
 810a496:	4606      	mov	r6, r0
 810a498:	4628      	mov	r0, r5
 810a49a:	460f      	mov	r7, r1
 810a49c:	f7f6 f8ca 	bl	8100634 <__aeabi_i2d>
 810a4a0:	a361      	add	r3, pc, #388	; (adr r3, 810a628 <_dtoa_r+0x2c8>)
 810a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4a6:	f7f6 f92f 	bl	8100708 <__aeabi_dmul>
 810a4aa:	4602      	mov	r2, r0
 810a4ac:	460b      	mov	r3, r1
 810a4ae:	4630      	mov	r0, r6
 810a4b0:	4639      	mov	r1, r7
 810a4b2:	f7f5 ff73 	bl	810039c <__adddf3>
 810a4b6:	4606      	mov	r6, r0
 810a4b8:	460f      	mov	r7, r1
 810a4ba:	f7f6 fbd5 	bl	8100c68 <__aeabi_d2iz>
 810a4be:	2200      	movs	r2, #0
 810a4c0:	9000      	str	r0, [sp, #0]
 810a4c2:	2300      	movs	r3, #0
 810a4c4:	4630      	mov	r0, r6
 810a4c6:	4639      	mov	r1, r7
 810a4c8:	f7f6 fb90 	bl	8100bec <__aeabi_dcmplt>
 810a4cc:	b150      	cbz	r0, 810a4e4 <_dtoa_r+0x184>
 810a4ce:	9800      	ldr	r0, [sp, #0]
 810a4d0:	f7f6 f8b0 	bl	8100634 <__aeabi_i2d>
 810a4d4:	4632      	mov	r2, r6
 810a4d6:	463b      	mov	r3, r7
 810a4d8:	f7f6 fb7e 	bl	8100bd8 <__aeabi_dcmpeq>
 810a4dc:	b910      	cbnz	r0, 810a4e4 <_dtoa_r+0x184>
 810a4de:	9b00      	ldr	r3, [sp, #0]
 810a4e0:	3b01      	subs	r3, #1
 810a4e2:	9300      	str	r3, [sp, #0]
 810a4e4:	9b00      	ldr	r3, [sp, #0]
 810a4e6:	2b16      	cmp	r3, #22
 810a4e8:	d85a      	bhi.n	810a5a0 <_dtoa_r+0x240>
 810a4ea:	9a00      	ldr	r2, [sp, #0]
 810a4ec:	4b57      	ldr	r3, [pc, #348]	; (810a64c <_dtoa_r+0x2ec>)
 810a4ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4f6:	ec51 0b19 	vmov	r0, r1, d9
 810a4fa:	f7f6 fb77 	bl	8100bec <__aeabi_dcmplt>
 810a4fe:	2800      	cmp	r0, #0
 810a500:	d050      	beq.n	810a5a4 <_dtoa_r+0x244>
 810a502:	9b00      	ldr	r3, [sp, #0]
 810a504:	3b01      	subs	r3, #1
 810a506:	9300      	str	r3, [sp, #0]
 810a508:	2300      	movs	r3, #0
 810a50a:	930b      	str	r3, [sp, #44]	; 0x2c
 810a50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a50e:	1b5d      	subs	r5, r3, r5
 810a510:	1e6b      	subs	r3, r5, #1
 810a512:	9305      	str	r3, [sp, #20]
 810a514:	bf45      	ittet	mi
 810a516:	f1c5 0301 	rsbmi	r3, r5, #1
 810a51a:	9304      	strmi	r3, [sp, #16]
 810a51c:	2300      	movpl	r3, #0
 810a51e:	2300      	movmi	r3, #0
 810a520:	bf4c      	ite	mi
 810a522:	9305      	strmi	r3, [sp, #20]
 810a524:	9304      	strpl	r3, [sp, #16]
 810a526:	9b00      	ldr	r3, [sp, #0]
 810a528:	2b00      	cmp	r3, #0
 810a52a:	db3d      	blt.n	810a5a8 <_dtoa_r+0x248>
 810a52c:	9b05      	ldr	r3, [sp, #20]
 810a52e:	9a00      	ldr	r2, [sp, #0]
 810a530:	920a      	str	r2, [sp, #40]	; 0x28
 810a532:	4413      	add	r3, r2
 810a534:	9305      	str	r3, [sp, #20]
 810a536:	2300      	movs	r3, #0
 810a538:	9307      	str	r3, [sp, #28]
 810a53a:	9b06      	ldr	r3, [sp, #24]
 810a53c:	2b09      	cmp	r3, #9
 810a53e:	f200 8089 	bhi.w	810a654 <_dtoa_r+0x2f4>
 810a542:	2b05      	cmp	r3, #5
 810a544:	bfc4      	itt	gt
 810a546:	3b04      	subgt	r3, #4
 810a548:	9306      	strgt	r3, [sp, #24]
 810a54a:	9b06      	ldr	r3, [sp, #24]
 810a54c:	f1a3 0302 	sub.w	r3, r3, #2
 810a550:	bfcc      	ite	gt
 810a552:	2500      	movgt	r5, #0
 810a554:	2501      	movle	r5, #1
 810a556:	2b03      	cmp	r3, #3
 810a558:	f200 8087 	bhi.w	810a66a <_dtoa_r+0x30a>
 810a55c:	e8df f003 	tbb	[pc, r3]
 810a560:	59383a2d 	.word	0x59383a2d
 810a564:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810a568:	441d      	add	r5, r3
 810a56a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810a56e:	2b20      	cmp	r3, #32
 810a570:	bfc1      	itttt	gt
 810a572:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810a576:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810a57a:	fa0b f303 	lslgt.w	r3, fp, r3
 810a57e:	fa26 f000 	lsrgt.w	r0, r6, r0
 810a582:	bfda      	itte	le
 810a584:	f1c3 0320 	rsble	r3, r3, #32
 810a588:	fa06 f003 	lslle.w	r0, r6, r3
 810a58c:	4318      	orrgt	r0, r3
 810a58e:	f7f6 f841 	bl	8100614 <__aeabi_ui2d>
 810a592:	2301      	movs	r3, #1
 810a594:	4606      	mov	r6, r0
 810a596:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810a59a:	3d01      	subs	r5, #1
 810a59c:	930e      	str	r3, [sp, #56]	; 0x38
 810a59e:	e76a      	b.n	810a476 <_dtoa_r+0x116>
 810a5a0:	2301      	movs	r3, #1
 810a5a2:	e7b2      	b.n	810a50a <_dtoa_r+0x1aa>
 810a5a4:	900b      	str	r0, [sp, #44]	; 0x2c
 810a5a6:	e7b1      	b.n	810a50c <_dtoa_r+0x1ac>
 810a5a8:	9b04      	ldr	r3, [sp, #16]
 810a5aa:	9a00      	ldr	r2, [sp, #0]
 810a5ac:	1a9b      	subs	r3, r3, r2
 810a5ae:	9304      	str	r3, [sp, #16]
 810a5b0:	4253      	negs	r3, r2
 810a5b2:	9307      	str	r3, [sp, #28]
 810a5b4:	2300      	movs	r3, #0
 810a5b6:	930a      	str	r3, [sp, #40]	; 0x28
 810a5b8:	e7bf      	b.n	810a53a <_dtoa_r+0x1da>
 810a5ba:	2300      	movs	r3, #0
 810a5bc:	9308      	str	r3, [sp, #32]
 810a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a5c0:	2b00      	cmp	r3, #0
 810a5c2:	dc55      	bgt.n	810a670 <_dtoa_r+0x310>
 810a5c4:	2301      	movs	r3, #1
 810a5c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a5ca:	461a      	mov	r2, r3
 810a5cc:	9209      	str	r2, [sp, #36]	; 0x24
 810a5ce:	e00c      	b.n	810a5ea <_dtoa_r+0x28a>
 810a5d0:	2301      	movs	r3, #1
 810a5d2:	e7f3      	b.n	810a5bc <_dtoa_r+0x25c>
 810a5d4:	2300      	movs	r3, #0
 810a5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a5d8:	9308      	str	r3, [sp, #32]
 810a5da:	9b00      	ldr	r3, [sp, #0]
 810a5dc:	4413      	add	r3, r2
 810a5de:	9302      	str	r3, [sp, #8]
 810a5e0:	3301      	adds	r3, #1
 810a5e2:	2b01      	cmp	r3, #1
 810a5e4:	9303      	str	r3, [sp, #12]
 810a5e6:	bfb8      	it	lt
 810a5e8:	2301      	movlt	r3, #1
 810a5ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810a5ec:	2200      	movs	r2, #0
 810a5ee:	6042      	str	r2, [r0, #4]
 810a5f0:	2204      	movs	r2, #4
 810a5f2:	f102 0614 	add.w	r6, r2, #20
 810a5f6:	429e      	cmp	r6, r3
 810a5f8:	6841      	ldr	r1, [r0, #4]
 810a5fa:	d93d      	bls.n	810a678 <_dtoa_r+0x318>
 810a5fc:	4620      	mov	r0, r4
 810a5fe:	f001 fa57 	bl	810bab0 <_Balloc>
 810a602:	9001      	str	r0, [sp, #4]
 810a604:	2800      	cmp	r0, #0
 810a606:	d13b      	bne.n	810a680 <_dtoa_r+0x320>
 810a608:	4b11      	ldr	r3, [pc, #68]	; (810a650 <_dtoa_r+0x2f0>)
 810a60a:	4602      	mov	r2, r0
 810a60c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810a610:	e6c0      	b.n	810a394 <_dtoa_r+0x34>
 810a612:	2301      	movs	r3, #1
 810a614:	e7df      	b.n	810a5d6 <_dtoa_r+0x276>
 810a616:	bf00      	nop
 810a618:	636f4361 	.word	0x636f4361
 810a61c:	3fd287a7 	.word	0x3fd287a7
 810a620:	8b60c8b3 	.word	0x8b60c8b3
 810a624:	3fc68a28 	.word	0x3fc68a28
 810a628:	509f79fb 	.word	0x509f79fb
 810a62c:	3fd34413 	.word	0x3fd34413
 810a630:	0810d146 	.word	0x0810d146
 810a634:	0810d15d 	.word	0x0810d15d
 810a638:	7ff00000 	.word	0x7ff00000
 810a63c:	0810d142 	.word	0x0810d142
 810a640:	0810d139 	.word	0x0810d139
 810a644:	0810cfb9 	.word	0x0810cfb9
 810a648:	3ff80000 	.word	0x3ff80000
 810a64c:	0810d330 	.word	0x0810d330
 810a650:	0810d1b8 	.word	0x0810d1b8
 810a654:	2501      	movs	r5, #1
 810a656:	2300      	movs	r3, #0
 810a658:	9306      	str	r3, [sp, #24]
 810a65a:	9508      	str	r5, [sp, #32]
 810a65c:	f04f 33ff 	mov.w	r3, #4294967295
 810a660:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a664:	2200      	movs	r2, #0
 810a666:	2312      	movs	r3, #18
 810a668:	e7b0      	b.n	810a5cc <_dtoa_r+0x26c>
 810a66a:	2301      	movs	r3, #1
 810a66c:	9308      	str	r3, [sp, #32]
 810a66e:	e7f5      	b.n	810a65c <_dtoa_r+0x2fc>
 810a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a672:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a676:	e7b8      	b.n	810a5ea <_dtoa_r+0x28a>
 810a678:	3101      	adds	r1, #1
 810a67a:	6041      	str	r1, [r0, #4]
 810a67c:	0052      	lsls	r2, r2, #1
 810a67e:	e7b8      	b.n	810a5f2 <_dtoa_r+0x292>
 810a680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a682:	9a01      	ldr	r2, [sp, #4]
 810a684:	601a      	str	r2, [r3, #0]
 810a686:	9b03      	ldr	r3, [sp, #12]
 810a688:	2b0e      	cmp	r3, #14
 810a68a:	f200 809d 	bhi.w	810a7c8 <_dtoa_r+0x468>
 810a68e:	2d00      	cmp	r5, #0
 810a690:	f000 809a 	beq.w	810a7c8 <_dtoa_r+0x468>
 810a694:	9b00      	ldr	r3, [sp, #0]
 810a696:	2b00      	cmp	r3, #0
 810a698:	dd32      	ble.n	810a700 <_dtoa_r+0x3a0>
 810a69a:	4ab7      	ldr	r2, [pc, #732]	; (810a978 <_dtoa_r+0x618>)
 810a69c:	f003 030f 	and.w	r3, r3, #15
 810a6a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810a6a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a6a8:	9b00      	ldr	r3, [sp, #0]
 810a6aa:	05d8      	lsls	r0, r3, #23
 810a6ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 810a6b0:	d516      	bpl.n	810a6e0 <_dtoa_r+0x380>
 810a6b2:	4bb2      	ldr	r3, [pc, #712]	; (810a97c <_dtoa_r+0x61c>)
 810a6b4:	ec51 0b19 	vmov	r0, r1, d9
 810a6b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810a6bc:	f7f6 f94e 	bl	810095c <__aeabi_ddiv>
 810a6c0:	f007 070f 	and.w	r7, r7, #15
 810a6c4:	4682      	mov	sl, r0
 810a6c6:	468b      	mov	fp, r1
 810a6c8:	2503      	movs	r5, #3
 810a6ca:	4eac      	ldr	r6, [pc, #688]	; (810a97c <_dtoa_r+0x61c>)
 810a6cc:	b957      	cbnz	r7, 810a6e4 <_dtoa_r+0x384>
 810a6ce:	4642      	mov	r2, r8
 810a6d0:	464b      	mov	r3, r9
 810a6d2:	4650      	mov	r0, sl
 810a6d4:	4659      	mov	r1, fp
 810a6d6:	f7f6 f941 	bl	810095c <__aeabi_ddiv>
 810a6da:	4682      	mov	sl, r0
 810a6dc:	468b      	mov	fp, r1
 810a6de:	e028      	b.n	810a732 <_dtoa_r+0x3d2>
 810a6e0:	2502      	movs	r5, #2
 810a6e2:	e7f2      	b.n	810a6ca <_dtoa_r+0x36a>
 810a6e4:	07f9      	lsls	r1, r7, #31
 810a6e6:	d508      	bpl.n	810a6fa <_dtoa_r+0x39a>
 810a6e8:	4640      	mov	r0, r8
 810a6ea:	4649      	mov	r1, r9
 810a6ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a6f0:	f7f6 f80a 	bl	8100708 <__aeabi_dmul>
 810a6f4:	3501      	adds	r5, #1
 810a6f6:	4680      	mov	r8, r0
 810a6f8:	4689      	mov	r9, r1
 810a6fa:	107f      	asrs	r7, r7, #1
 810a6fc:	3608      	adds	r6, #8
 810a6fe:	e7e5      	b.n	810a6cc <_dtoa_r+0x36c>
 810a700:	f000 809b 	beq.w	810a83a <_dtoa_r+0x4da>
 810a704:	9b00      	ldr	r3, [sp, #0]
 810a706:	4f9d      	ldr	r7, [pc, #628]	; (810a97c <_dtoa_r+0x61c>)
 810a708:	425e      	negs	r6, r3
 810a70a:	4b9b      	ldr	r3, [pc, #620]	; (810a978 <_dtoa_r+0x618>)
 810a70c:	f006 020f 	and.w	r2, r6, #15
 810a710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a718:	ec51 0b19 	vmov	r0, r1, d9
 810a71c:	f7f5 fff4 	bl	8100708 <__aeabi_dmul>
 810a720:	1136      	asrs	r6, r6, #4
 810a722:	4682      	mov	sl, r0
 810a724:	468b      	mov	fp, r1
 810a726:	2300      	movs	r3, #0
 810a728:	2502      	movs	r5, #2
 810a72a:	2e00      	cmp	r6, #0
 810a72c:	d17a      	bne.n	810a824 <_dtoa_r+0x4c4>
 810a72e:	2b00      	cmp	r3, #0
 810a730:	d1d3      	bne.n	810a6da <_dtoa_r+0x37a>
 810a732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a734:	2b00      	cmp	r3, #0
 810a736:	f000 8082 	beq.w	810a83e <_dtoa_r+0x4de>
 810a73a:	4b91      	ldr	r3, [pc, #580]	; (810a980 <_dtoa_r+0x620>)
 810a73c:	2200      	movs	r2, #0
 810a73e:	4650      	mov	r0, sl
 810a740:	4659      	mov	r1, fp
 810a742:	f7f6 fa53 	bl	8100bec <__aeabi_dcmplt>
 810a746:	2800      	cmp	r0, #0
 810a748:	d079      	beq.n	810a83e <_dtoa_r+0x4de>
 810a74a:	9b03      	ldr	r3, [sp, #12]
 810a74c:	2b00      	cmp	r3, #0
 810a74e:	d076      	beq.n	810a83e <_dtoa_r+0x4de>
 810a750:	9b02      	ldr	r3, [sp, #8]
 810a752:	2b00      	cmp	r3, #0
 810a754:	dd36      	ble.n	810a7c4 <_dtoa_r+0x464>
 810a756:	9b00      	ldr	r3, [sp, #0]
 810a758:	4650      	mov	r0, sl
 810a75a:	4659      	mov	r1, fp
 810a75c:	1e5f      	subs	r7, r3, #1
 810a75e:	2200      	movs	r2, #0
 810a760:	4b88      	ldr	r3, [pc, #544]	; (810a984 <_dtoa_r+0x624>)
 810a762:	f7f5 ffd1 	bl	8100708 <__aeabi_dmul>
 810a766:	9e02      	ldr	r6, [sp, #8]
 810a768:	4682      	mov	sl, r0
 810a76a:	468b      	mov	fp, r1
 810a76c:	3501      	adds	r5, #1
 810a76e:	4628      	mov	r0, r5
 810a770:	f7f5 ff60 	bl	8100634 <__aeabi_i2d>
 810a774:	4652      	mov	r2, sl
 810a776:	465b      	mov	r3, fp
 810a778:	f7f5 ffc6 	bl	8100708 <__aeabi_dmul>
 810a77c:	4b82      	ldr	r3, [pc, #520]	; (810a988 <_dtoa_r+0x628>)
 810a77e:	2200      	movs	r2, #0
 810a780:	f7f5 fe0c 	bl	810039c <__adddf3>
 810a784:	46d0      	mov	r8, sl
 810a786:	46d9      	mov	r9, fp
 810a788:	4682      	mov	sl, r0
 810a78a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810a78e:	2e00      	cmp	r6, #0
 810a790:	d158      	bne.n	810a844 <_dtoa_r+0x4e4>
 810a792:	4b7e      	ldr	r3, [pc, #504]	; (810a98c <_dtoa_r+0x62c>)
 810a794:	2200      	movs	r2, #0
 810a796:	4640      	mov	r0, r8
 810a798:	4649      	mov	r1, r9
 810a79a:	f7f5 fdfd 	bl	8100398 <__aeabi_dsub>
 810a79e:	4652      	mov	r2, sl
 810a7a0:	465b      	mov	r3, fp
 810a7a2:	4680      	mov	r8, r0
 810a7a4:	4689      	mov	r9, r1
 810a7a6:	f7f6 fa3f 	bl	8100c28 <__aeabi_dcmpgt>
 810a7aa:	2800      	cmp	r0, #0
 810a7ac:	f040 8295 	bne.w	810acda <_dtoa_r+0x97a>
 810a7b0:	4652      	mov	r2, sl
 810a7b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a7b6:	4640      	mov	r0, r8
 810a7b8:	4649      	mov	r1, r9
 810a7ba:	f7f6 fa17 	bl	8100bec <__aeabi_dcmplt>
 810a7be:	2800      	cmp	r0, #0
 810a7c0:	f040 8289 	bne.w	810acd6 <_dtoa_r+0x976>
 810a7c4:	ec5b ab19 	vmov	sl, fp, d9
 810a7c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a7ca:	2b00      	cmp	r3, #0
 810a7cc:	f2c0 8148 	blt.w	810aa60 <_dtoa_r+0x700>
 810a7d0:	9a00      	ldr	r2, [sp, #0]
 810a7d2:	2a0e      	cmp	r2, #14
 810a7d4:	f300 8144 	bgt.w	810aa60 <_dtoa_r+0x700>
 810a7d8:	4b67      	ldr	r3, [pc, #412]	; (810a978 <_dtoa_r+0x618>)
 810a7da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a7de:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a7e4:	2b00      	cmp	r3, #0
 810a7e6:	f280 80d5 	bge.w	810a994 <_dtoa_r+0x634>
 810a7ea:	9b03      	ldr	r3, [sp, #12]
 810a7ec:	2b00      	cmp	r3, #0
 810a7ee:	f300 80d1 	bgt.w	810a994 <_dtoa_r+0x634>
 810a7f2:	f040 826f 	bne.w	810acd4 <_dtoa_r+0x974>
 810a7f6:	4b65      	ldr	r3, [pc, #404]	; (810a98c <_dtoa_r+0x62c>)
 810a7f8:	2200      	movs	r2, #0
 810a7fa:	4640      	mov	r0, r8
 810a7fc:	4649      	mov	r1, r9
 810a7fe:	f7f5 ff83 	bl	8100708 <__aeabi_dmul>
 810a802:	4652      	mov	r2, sl
 810a804:	465b      	mov	r3, fp
 810a806:	f7f6 fa05 	bl	8100c14 <__aeabi_dcmpge>
 810a80a:	9e03      	ldr	r6, [sp, #12]
 810a80c:	4637      	mov	r7, r6
 810a80e:	2800      	cmp	r0, #0
 810a810:	f040 8245 	bne.w	810ac9e <_dtoa_r+0x93e>
 810a814:	9d01      	ldr	r5, [sp, #4]
 810a816:	2331      	movs	r3, #49	; 0x31
 810a818:	f805 3b01 	strb.w	r3, [r5], #1
 810a81c:	9b00      	ldr	r3, [sp, #0]
 810a81e:	3301      	adds	r3, #1
 810a820:	9300      	str	r3, [sp, #0]
 810a822:	e240      	b.n	810aca6 <_dtoa_r+0x946>
 810a824:	07f2      	lsls	r2, r6, #31
 810a826:	d505      	bpl.n	810a834 <_dtoa_r+0x4d4>
 810a828:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a82c:	f7f5 ff6c 	bl	8100708 <__aeabi_dmul>
 810a830:	3501      	adds	r5, #1
 810a832:	2301      	movs	r3, #1
 810a834:	1076      	asrs	r6, r6, #1
 810a836:	3708      	adds	r7, #8
 810a838:	e777      	b.n	810a72a <_dtoa_r+0x3ca>
 810a83a:	2502      	movs	r5, #2
 810a83c:	e779      	b.n	810a732 <_dtoa_r+0x3d2>
 810a83e:	9f00      	ldr	r7, [sp, #0]
 810a840:	9e03      	ldr	r6, [sp, #12]
 810a842:	e794      	b.n	810a76e <_dtoa_r+0x40e>
 810a844:	9901      	ldr	r1, [sp, #4]
 810a846:	4b4c      	ldr	r3, [pc, #304]	; (810a978 <_dtoa_r+0x618>)
 810a848:	4431      	add	r1, r6
 810a84a:	910d      	str	r1, [sp, #52]	; 0x34
 810a84c:	9908      	ldr	r1, [sp, #32]
 810a84e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810a852:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a856:	2900      	cmp	r1, #0
 810a858:	d043      	beq.n	810a8e2 <_dtoa_r+0x582>
 810a85a:	494d      	ldr	r1, [pc, #308]	; (810a990 <_dtoa_r+0x630>)
 810a85c:	2000      	movs	r0, #0
 810a85e:	f7f6 f87d 	bl	810095c <__aeabi_ddiv>
 810a862:	4652      	mov	r2, sl
 810a864:	465b      	mov	r3, fp
 810a866:	f7f5 fd97 	bl	8100398 <__aeabi_dsub>
 810a86a:	9d01      	ldr	r5, [sp, #4]
 810a86c:	4682      	mov	sl, r0
 810a86e:	468b      	mov	fp, r1
 810a870:	4649      	mov	r1, r9
 810a872:	4640      	mov	r0, r8
 810a874:	f7f6 f9f8 	bl	8100c68 <__aeabi_d2iz>
 810a878:	4606      	mov	r6, r0
 810a87a:	f7f5 fedb 	bl	8100634 <__aeabi_i2d>
 810a87e:	4602      	mov	r2, r0
 810a880:	460b      	mov	r3, r1
 810a882:	4640      	mov	r0, r8
 810a884:	4649      	mov	r1, r9
 810a886:	f7f5 fd87 	bl	8100398 <__aeabi_dsub>
 810a88a:	3630      	adds	r6, #48	; 0x30
 810a88c:	f805 6b01 	strb.w	r6, [r5], #1
 810a890:	4652      	mov	r2, sl
 810a892:	465b      	mov	r3, fp
 810a894:	4680      	mov	r8, r0
 810a896:	4689      	mov	r9, r1
 810a898:	f7f6 f9a8 	bl	8100bec <__aeabi_dcmplt>
 810a89c:	2800      	cmp	r0, #0
 810a89e:	d163      	bne.n	810a968 <_dtoa_r+0x608>
 810a8a0:	4642      	mov	r2, r8
 810a8a2:	464b      	mov	r3, r9
 810a8a4:	4936      	ldr	r1, [pc, #216]	; (810a980 <_dtoa_r+0x620>)
 810a8a6:	2000      	movs	r0, #0
 810a8a8:	f7f5 fd76 	bl	8100398 <__aeabi_dsub>
 810a8ac:	4652      	mov	r2, sl
 810a8ae:	465b      	mov	r3, fp
 810a8b0:	f7f6 f99c 	bl	8100bec <__aeabi_dcmplt>
 810a8b4:	2800      	cmp	r0, #0
 810a8b6:	f040 80b5 	bne.w	810aa24 <_dtoa_r+0x6c4>
 810a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a8bc:	429d      	cmp	r5, r3
 810a8be:	d081      	beq.n	810a7c4 <_dtoa_r+0x464>
 810a8c0:	4b30      	ldr	r3, [pc, #192]	; (810a984 <_dtoa_r+0x624>)
 810a8c2:	2200      	movs	r2, #0
 810a8c4:	4650      	mov	r0, sl
 810a8c6:	4659      	mov	r1, fp
 810a8c8:	f7f5 ff1e 	bl	8100708 <__aeabi_dmul>
 810a8cc:	4b2d      	ldr	r3, [pc, #180]	; (810a984 <_dtoa_r+0x624>)
 810a8ce:	4682      	mov	sl, r0
 810a8d0:	468b      	mov	fp, r1
 810a8d2:	4640      	mov	r0, r8
 810a8d4:	4649      	mov	r1, r9
 810a8d6:	2200      	movs	r2, #0
 810a8d8:	f7f5 ff16 	bl	8100708 <__aeabi_dmul>
 810a8dc:	4680      	mov	r8, r0
 810a8de:	4689      	mov	r9, r1
 810a8e0:	e7c6      	b.n	810a870 <_dtoa_r+0x510>
 810a8e2:	4650      	mov	r0, sl
 810a8e4:	4659      	mov	r1, fp
 810a8e6:	f7f5 ff0f 	bl	8100708 <__aeabi_dmul>
 810a8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a8ec:	9d01      	ldr	r5, [sp, #4]
 810a8ee:	930f      	str	r3, [sp, #60]	; 0x3c
 810a8f0:	4682      	mov	sl, r0
 810a8f2:	468b      	mov	fp, r1
 810a8f4:	4649      	mov	r1, r9
 810a8f6:	4640      	mov	r0, r8
 810a8f8:	f7f6 f9b6 	bl	8100c68 <__aeabi_d2iz>
 810a8fc:	4606      	mov	r6, r0
 810a8fe:	f7f5 fe99 	bl	8100634 <__aeabi_i2d>
 810a902:	3630      	adds	r6, #48	; 0x30
 810a904:	4602      	mov	r2, r0
 810a906:	460b      	mov	r3, r1
 810a908:	4640      	mov	r0, r8
 810a90a:	4649      	mov	r1, r9
 810a90c:	f7f5 fd44 	bl	8100398 <__aeabi_dsub>
 810a910:	f805 6b01 	strb.w	r6, [r5], #1
 810a914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a916:	429d      	cmp	r5, r3
 810a918:	4680      	mov	r8, r0
 810a91a:	4689      	mov	r9, r1
 810a91c:	f04f 0200 	mov.w	r2, #0
 810a920:	d124      	bne.n	810a96c <_dtoa_r+0x60c>
 810a922:	4b1b      	ldr	r3, [pc, #108]	; (810a990 <_dtoa_r+0x630>)
 810a924:	4650      	mov	r0, sl
 810a926:	4659      	mov	r1, fp
 810a928:	f7f5 fd38 	bl	810039c <__adddf3>
 810a92c:	4602      	mov	r2, r0
 810a92e:	460b      	mov	r3, r1
 810a930:	4640      	mov	r0, r8
 810a932:	4649      	mov	r1, r9
 810a934:	f7f6 f978 	bl	8100c28 <__aeabi_dcmpgt>
 810a938:	2800      	cmp	r0, #0
 810a93a:	d173      	bne.n	810aa24 <_dtoa_r+0x6c4>
 810a93c:	4652      	mov	r2, sl
 810a93e:	465b      	mov	r3, fp
 810a940:	4913      	ldr	r1, [pc, #76]	; (810a990 <_dtoa_r+0x630>)
 810a942:	2000      	movs	r0, #0
 810a944:	f7f5 fd28 	bl	8100398 <__aeabi_dsub>
 810a948:	4602      	mov	r2, r0
 810a94a:	460b      	mov	r3, r1
 810a94c:	4640      	mov	r0, r8
 810a94e:	4649      	mov	r1, r9
 810a950:	f7f6 f94c 	bl	8100bec <__aeabi_dcmplt>
 810a954:	2800      	cmp	r0, #0
 810a956:	f43f af35 	beq.w	810a7c4 <_dtoa_r+0x464>
 810a95a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810a95c:	1e6b      	subs	r3, r5, #1
 810a95e:	930f      	str	r3, [sp, #60]	; 0x3c
 810a960:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a964:	2b30      	cmp	r3, #48	; 0x30
 810a966:	d0f8      	beq.n	810a95a <_dtoa_r+0x5fa>
 810a968:	9700      	str	r7, [sp, #0]
 810a96a:	e049      	b.n	810aa00 <_dtoa_r+0x6a0>
 810a96c:	4b05      	ldr	r3, [pc, #20]	; (810a984 <_dtoa_r+0x624>)
 810a96e:	f7f5 fecb 	bl	8100708 <__aeabi_dmul>
 810a972:	4680      	mov	r8, r0
 810a974:	4689      	mov	r9, r1
 810a976:	e7bd      	b.n	810a8f4 <_dtoa_r+0x594>
 810a978:	0810d330 	.word	0x0810d330
 810a97c:	0810d308 	.word	0x0810d308
 810a980:	3ff00000 	.word	0x3ff00000
 810a984:	40240000 	.word	0x40240000
 810a988:	401c0000 	.word	0x401c0000
 810a98c:	40140000 	.word	0x40140000
 810a990:	3fe00000 	.word	0x3fe00000
 810a994:	9d01      	ldr	r5, [sp, #4]
 810a996:	4656      	mov	r6, sl
 810a998:	465f      	mov	r7, fp
 810a99a:	4642      	mov	r2, r8
 810a99c:	464b      	mov	r3, r9
 810a99e:	4630      	mov	r0, r6
 810a9a0:	4639      	mov	r1, r7
 810a9a2:	f7f5 ffdb 	bl	810095c <__aeabi_ddiv>
 810a9a6:	f7f6 f95f 	bl	8100c68 <__aeabi_d2iz>
 810a9aa:	4682      	mov	sl, r0
 810a9ac:	f7f5 fe42 	bl	8100634 <__aeabi_i2d>
 810a9b0:	4642      	mov	r2, r8
 810a9b2:	464b      	mov	r3, r9
 810a9b4:	f7f5 fea8 	bl	8100708 <__aeabi_dmul>
 810a9b8:	4602      	mov	r2, r0
 810a9ba:	460b      	mov	r3, r1
 810a9bc:	4630      	mov	r0, r6
 810a9be:	4639      	mov	r1, r7
 810a9c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810a9c4:	f7f5 fce8 	bl	8100398 <__aeabi_dsub>
 810a9c8:	f805 6b01 	strb.w	r6, [r5], #1
 810a9cc:	9e01      	ldr	r6, [sp, #4]
 810a9ce:	9f03      	ldr	r7, [sp, #12]
 810a9d0:	1bae      	subs	r6, r5, r6
 810a9d2:	42b7      	cmp	r7, r6
 810a9d4:	4602      	mov	r2, r0
 810a9d6:	460b      	mov	r3, r1
 810a9d8:	d135      	bne.n	810aa46 <_dtoa_r+0x6e6>
 810a9da:	f7f5 fcdf 	bl	810039c <__adddf3>
 810a9de:	4642      	mov	r2, r8
 810a9e0:	464b      	mov	r3, r9
 810a9e2:	4606      	mov	r6, r0
 810a9e4:	460f      	mov	r7, r1
 810a9e6:	f7f6 f91f 	bl	8100c28 <__aeabi_dcmpgt>
 810a9ea:	b9d0      	cbnz	r0, 810aa22 <_dtoa_r+0x6c2>
 810a9ec:	4642      	mov	r2, r8
 810a9ee:	464b      	mov	r3, r9
 810a9f0:	4630      	mov	r0, r6
 810a9f2:	4639      	mov	r1, r7
 810a9f4:	f7f6 f8f0 	bl	8100bd8 <__aeabi_dcmpeq>
 810a9f8:	b110      	cbz	r0, 810aa00 <_dtoa_r+0x6a0>
 810a9fa:	f01a 0f01 	tst.w	sl, #1
 810a9fe:	d110      	bne.n	810aa22 <_dtoa_r+0x6c2>
 810aa00:	4620      	mov	r0, r4
 810aa02:	ee18 1a10 	vmov	r1, s16
 810aa06:	f001 f893 	bl	810bb30 <_Bfree>
 810aa0a:	2300      	movs	r3, #0
 810aa0c:	9800      	ldr	r0, [sp, #0]
 810aa0e:	702b      	strb	r3, [r5, #0]
 810aa10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810aa12:	3001      	adds	r0, #1
 810aa14:	6018      	str	r0, [r3, #0]
 810aa16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aa18:	2b00      	cmp	r3, #0
 810aa1a:	f43f acf1 	beq.w	810a400 <_dtoa_r+0xa0>
 810aa1e:	601d      	str	r5, [r3, #0]
 810aa20:	e4ee      	b.n	810a400 <_dtoa_r+0xa0>
 810aa22:	9f00      	ldr	r7, [sp, #0]
 810aa24:	462b      	mov	r3, r5
 810aa26:	461d      	mov	r5, r3
 810aa28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810aa2c:	2a39      	cmp	r2, #57	; 0x39
 810aa2e:	d106      	bne.n	810aa3e <_dtoa_r+0x6de>
 810aa30:	9a01      	ldr	r2, [sp, #4]
 810aa32:	429a      	cmp	r2, r3
 810aa34:	d1f7      	bne.n	810aa26 <_dtoa_r+0x6c6>
 810aa36:	9901      	ldr	r1, [sp, #4]
 810aa38:	2230      	movs	r2, #48	; 0x30
 810aa3a:	3701      	adds	r7, #1
 810aa3c:	700a      	strb	r2, [r1, #0]
 810aa3e:	781a      	ldrb	r2, [r3, #0]
 810aa40:	3201      	adds	r2, #1
 810aa42:	701a      	strb	r2, [r3, #0]
 810aa44:	e790      	b.n	810a968 <_dtoa_r+0x608>
 810aa46:	4ba6      	ldr	r3, [pc, #664]	; (810ace0 <_dtoa_r+0x980>)
 810aa48:	2200      	movs	r2, #0
 810aa4a:	f7f5 fe5d 	bl	8100708 <__aeabi_dmul>
 810aa4e:	2200      	movs	r2, #0
 810aa50:	2300      	movs	r3, #0
 810aa52:	4606      	mov	r6, r0
 810aa54:	460f      	mov	r7, r1
 810aa56:	f7f6 f8bf 	bl	8100bd8 <__aeabi_dcmpeq>
 810aa5a:	2800      	cmp	r0, #0
 810aa5c:	d09d      	beq.n	810a99a <_dtoa_r+0x63a>
 810aa5e:	e7cf      	b.n	810aa00 <_dtoa_r+0x6a0>
 810aa60:	9a08      	ldr	r2, [sp, #32]
 810aa62:	2a00      	cmp	r2, #0
 810aa64:	f000 80d7 	beq.w	810ac16 <_dtoa_r+0x8b6>
 810aa68:	9a06      	ldr	r2, [sp, #24]
 810aa6a:	2a01      	cmp	r2, #1
 810aa6c:	f300 80ba 	bgt.w	810abe4 <_dtoa_r+0x884>
 810aa70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810aa72:	2a00      	cmp	r2, #0
 810aa74:	f000 80b2 	beq.w	810abdc <_dtoa_r+0x87c>
 810aa78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810aa7c:	9e07      	ldr	r6, [sp, #28]
 810aa7e:	9d04      	ldr	r5, [sp, #16]
 810aa80:	9a04      	ldr	r2, [sp, #16]
 810aa82:	441a      	add	r2, r3
 810aa84:	9204      	str	r2, [sp, #16]
 810aa86:	9a05      	ldr	r2, [sp, #20]
 810aa88:	2101      	movs	r1, #1
 810aa8a:	441a      	add	r2, r3
 810aa8c:	4620      	mov	r0, r4
 810aa8e:	9205      	str	r2, [sp, #20]
 810aa90:	f001 f950 	bl	810bd34 <__i2b>
 810aa94:	4607      	mov	r7, r0
 810aa96:	2d00      	cmp	r5, #0
 810aa98:	dd0c      	ble.n	810aab4 <_dtoa_r+0x754>
 810aa9a:	9b05      	ldr	r3, [sp, #20]
 810aa9c:	2b00      	cmp	r3, #0
 810aa9e:	dd09      	ble.n	810aab4 <_dtoa_r+0x754>
 810aaa0:	42ab      	cmp	r3, r5
 810aaa2:	9a04      	ldr	r2, [sp, #16]
 810aaa4:	bfa8      	it	ge
 810aaa6:	462b      	movge	r3, r5
 810aaa8:	1ad2      	subs	r2, r2, r3
 810aaaa:	9204      	str	r2, [sp, #16]
 810aaac:	9a05      	ldr	r2, [sp, #20]
 810aaae:	1aed      	subs	r5, r5, r3
 810aab0:	1ad3      	subs	r3, r2, r3
 810aab2:	9305      	str	r3, [sp, #20]
 810aab4:	9b07      	ldr	r3, [sp, #28]
 810aab6:	b31b      	cbz	r3, 810ab00 <_dtoa_r+0x7a0>
 810aab8:	9b08      	ldr	r3, [sp, #32]
 810aaba:	2b00      	cmp	r3, #0
 810aabc:	f000 80af 	beq.w	810ac1e <_dtoa_r+0x8be>
 810aac0:	2e00      	cmp	r6, #0
 810aac2:	dd13      	ble.n	810aaec <_dtoa_r+0x78c>
 810aac4:	4639      	mov	r1, r7
 810aac6:	4632      	mov	r2, r6
 810aac8:	4620      	mov	r0, r4
 810aaca:	f001 f9f3 	bl	810beb4 <__pow5mult>
 810aace:	ee18 2a10 	vmov	r2, s16
 810aad2:	4601      	mov	r1, r0
 810aad4:	4607      	mov	r7, r0
 810aad6:	4620      	mov	r0, r4
 810aad8:	f001 f942 	bl	810bd60 <__multiply>
 810aadc:	ee18 1a10 	vmov	r1, s16
 810aae0:	4680      	mov	r8, r0
 810aae2:	4620      	mov	r0, r4
 810aae4:	f001 f824 	bl	810bb30 <_Bfree>
 810aae8:	ee08 8a10 	vmov	s16, r8
 810aaec:	9b07      	ldr	r3, [sp, #28]
 810aaee:	1b9a      	subs	r2, r3, r6
 810aaf0:	d006      	beq.n	810ab00 <_dtoa_r+0x7a0>
 810aaf2:	ee18 1a10 	vmov	r1, s16
 810aaf6:	4620      	mov	r0, r4
 810aaf8:	f001 f9dc 	bl	810beb4 <__pow5mult>
 810aafc:	ee08 0a10 	vmov	s16, r0
 810ab00:	2101      	movs	r1, #1
 810ab02:	4620      	mov	r0, r4
 810ab04:	f001 f916 	bl	810bd34 <__i2b>
 810ab08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab0a:	2b00      	cmp	r3, #0
 810ab0c:	4606      	mov	r6, r0
 810ab0e:	f340 8088 	ble.w	810ac22 <_dtoa_r+0x8c2>
 810ab12:	461a      	mov	r2, r3
 810ab14:	4601      	mov	r1, r0
 810ab16:	4620      	mov	r0, r4
 810ab18:	f001 f9cc 	bl	810beb4 <__pow5mult>
 810ab1c:	9b06      	ldr	r3, [sp, #24]
 810ab1e:	2b01      	cmp	r3, #1
 810ab20:	4606      	mov	r6, r0
 810ab22:	f340 8081 	ble.w	810ac28 <_dtoa_r+0x8c8>
 810ab26:	f04f 0800 	mov.w	r8, #0
 810ab2a:	6933      	ldr	r3, [r6, #16]
 810ab2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810ab30:	6918      	ldr	r0, [r3, #16]
 810ab32:	f001 f8af 	bl	810bc94 <__hi0bits>
 810ab36:	f1c0 0020 	rsb	r0, r0, #32
 810ab3a:	9b05      	ldr	r3, [sp, #20]
 810ab3c:	4418      	add	r0, r3
 810ab3e:	f010 001f 	ands.w	r0, r0, #31
 810ab42:	f000 8092 	beq.w	810ac6a <_dtoa_r+0x90a>
 810ab46:	f1c0 0320 	rsb	r3, r0, #32
 810ab4a:	2b04      	cmp	r3, #4
 810ab4c:	f340 808a 	ble.w	810ac64 <_dtoa_r+0x904>
 810ab50:	f1c0 001c 	rsb	r0, r0, #28
 810ab54:	9b04      	ldr	r3, [sp, #16]
 810ab56:	4403      	add	r3, r0
 810ab58:	9304      	str	r3, [sp, #16]
 810ab5a:	9b05      	ldr	r3, [sp, #20]
 810ab5c:	4403      	add	r3, r0
 810ab5e:	4405      	add	r5, r0
 810ab60:	9305      	str	r3, [sp, #20]
 810ab62:	9b04      	ldr	r3, [sp, #16]
 810ab64:	2b00      	cmp	r3, #0
 810ab66:	dd07      	ble.n	810ab78 <_dtoa_r+0x818>
 810ab68:	ee18 1a10 	vmov	r1, s16
 810ab6c:	461a      	mov	r2, r3
 810ab6e:	4620      	mov	r0, r4
 810ab70:	f001 f9fa 	bl	810bf68 <__lshift>
 810ab74:	ee08 0a10 	vmov	s16, r0
 810ab78:	9b05      	ldr	r3, [sp, #20]
 810ab7a:	2b00      	cmp	r3, #0
 810ab7c:	dd05      	ble.n	810ab8a <_dtoa_r+0x82a>
 810ab7e:	4631      	mov	r1, r6
 810ab80:	461a      	mov	r2, r3
 810ab82:	4620      	mov	r0, r4
 810ab84:	f001 f9f0 	bl	810bf68 <__lshift>
 810ab88:	4606      	mov	r6, r0
 810ab8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ab8c:	2b00      	cmp	r3, #0
 810ab8e:	d06e      	beq.n	810ac6e <_dtoa_r+0x90e>
 810ab90:	ee18 0a10 	vmov	r0, s16
 810ab94:	4631      	mov	r1, r6
 810ab96:	f001 fa57 	bl	810c048 <__mcmp>
 810ab9a:	2800      	cmp	r0, #0
 810ab9c:	da67      	bge.n	810ac6e <_dtoa_r+0x90e>
 810ab9e:	9b00      	ldr	r3, [sp, #0]
 810aba0:	3b01      	subs	r3, #1
 810aba2:	ee18 1a10 	vmov	r1, s16
 810aba6:	9300      	str	r3, [sp, #0]
 810aba8:	220a      	movs	r2, #10
 810abaa:	2300      	movs	r3, #0
 810abac:	4620      	mov	r0, r4
 810abae:	f000 ffe1 	bl	810bb74 <__multadd>
 810abb2:	9b08      	ldr	r3, [sp, #32]
 810abb4:	ee08 0a10 	vmov	s16, r0
 810abb8:	2b00      	cmp	r3, #0
 810abba:	f000 81b1 	beq.w	810af20 <_dtoa_r+0xbc0>
 810abbe:	2300      	movs	r3, #0
 810abc0:	4639      	mov	r1, r7
 810abc2:	220a      	movs	r2, #10
 810abc4:	4620      	mov	r0, r4
 810abc6:	f000 ffd5 	bl	810bb74 <__multadd>
 810abca:	9b02      	ldr	r3, [sp, #8]
 810abcc:	2b00      	cmp	r3, #0
 810abce:	4607      	mov	r7, r0
 810abd0:	f300 808e 	bgt.w	810acf0 <_dtoa_r+0x990>
 810abd4:	9b06      	ldr	r3, [sp, #24]
 810abd6:	2b02      	cmp	r3, #2
 810abd8:	dc51      	bgt.n	810ac7e <_dtoa_r+0x91e>
 810abda:	e089      	b.n	810acf0 <_dtoa_r+0x990>
 810abdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810abde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810abe2:	e74b      	b.n	810aa7c <_dtoa_r+0x71c>
 810abe4:	9b03      	ldr	r3, [sp, #12]
 810abe6:	1e5e      	subs	r6, r3, #1
 810abe8:	9b07      	ldr	r3, [sp, #28]
 810abea:	42b3      	cmp	r3, r6
 810abec:	bfbf      	itttt	lt
 810abee:	9b07      	ldrlt	r3, [sp, #28]
 810abf0:	9607      	strlt	r6, [sp, #28]
 810abf2:	1af2      	sublt	r2, r6, r3
 810abf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810abf6:	bfb6      	itet	lt
 810abf8:	189b      	addlt	r3, r3, r2
 810abfa:	1b9e      	subge	r6, r3, r6
 810abfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 810abfe:	9b03      	ldr	r3, [sp, #12]
 810ac00:	bfb8      	it	lt
 810ac02:	2600      	movlt	r6, #0
 810ac04:	2b00      	cmp	r3, #0
 810ac06:	bfb7      	itett	lt
 810ac08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810ac0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810ac10:	1a9d      	sublt	r5, r3, r2
 810ac12:	2300      	movlt	r3, #0
 810ac14:	e734      	b.n	810aa80 <_dtoa_r+0x720>
 810ac16:	9e07      	ldr	r6, [sp, #28]
 810ac18:	9d04      	ldr	r5, [sp, #16]
 810ac1a:	9f08      	ldr	r7, [sp, #32]
 810ac1c:	e73b      	b.n	810aa96 <_dtoa_r+0x736>
 810ac1e:	9a07      	ldr	r2, [sp, #28]
 810ac20:	e767      	b.n	810aaf2 <_dtoa_r+0x792>
 810ac22:	9b06      	ldr	r3, [sp, #24]
 810ac24:	2b01      	cmp	r3, #1
 810ac26:	dc18      	bgt.n	810ac5a <_dtoa_r+0x8fa>
 810ac28:	f1ba 0f00 	cmp.w	sl, #0
 810ac2c:	d115      	bne.n	810ac5a <_dtoa_r+0x8fa>
 810ac2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ac32:	b993      	cbnz	r3, 810ac5a <_dtoa_r+0x8fa>
 810ac34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ac38:	0d1b      	lsrs	r3, r3, #20
 810ac3a:	051b      	lsls	r3, r3, #20
 810ac3c:	b183      	cbz	r3, 810ac60 <_dtoa_r+0x900>
 810ac3e:	9b04      	ldr	r3, [sp, #16]
 810ac40:	3301      	adds	r3, #1
 810ac42:	9304      	str	r3, [sp, #16]
 810ac44:	9b05      	ldr	r3, [sp, #20]
 810ac46:	3301      	adds	r3, #1
 810ac48:	9305      	str	r3, [sp, #20]
 810ac4a:	f04f 0801 	mov.w	r8, #1
 810ac4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ac50:	2b00      	cmp	r3, #0
 810ac52:	f47f af6a 	bne.w	810ab2a <_dtoa_r+0x7ca>
 810ac56:	2001      	movs	r0, #1
 810ac58:	e76f      	b.n	810ab3a <_dtoa_r+0x7da>
 810ac5a:	f04f 0800 	mov.w	r8, #0
 810ac5e:	e7f6      	b.n	810ac4e <_dtoa_r+0x8ee>
 810ac60:	4698      	mov	r8, r3
 810ac62:	e7f4      	b.n	810ac4e <_dtoa_r+0x8ee>
 810ac64:	f43f af7d 	beq.w	810ab62 <_dtoa_r+0x802>
 810ac68:	4618      	mov	r0, r3
 810ac6a:	301c      	adds	r0, #28
 810ac6c:	e772      	b.n	810ab54 <_dtoa_r+0x7f4>
 810ac6e:	9b03      	ldr	r3, [sp, #12]
 810ac70:	2b00      	cmp	r3, #0
 810ac72:	dc37      	bgt.n	810ace4 <_dtoa_r+0x984>
 810ac74:	9b06      	ldr	r3, [sp, #24]
 810ac76:	2b02      	cmp	r3, #2
 810ac78:	dd34      	ble.n	810ace4 <_dtoa_r+0x984>
 810ac7a:	9b03      	ldr	r3, [sp, #12]
 810ac7c:	9302      	str	r3, [sp, #8]
 810ac7e:	9b02      	ldr	r3, [sp, #8]
 810ac80:	b96b      	cbnz	r3, 810ac9e <_dtoa_r+0x93e>
 810ac82:	4631      	mov	r1, r6
 810ac84:	2205      	movs	r2, #5
 810ac86:	4620      	mov	r0, r4
 810ac88:	f000 ff74 	bl	810bb74 <__multadd>
 810ac8c:	4601      	mov	r1, r0
 810ac8e:	4606      	mov	r6, r0
 810ac90:	ee18 0a10 	vmov	r0, s16
 810ac94:	f001 f9d8 	bl	810c048 <__mcmp>
 810ac98:	2800      	cmp	r0, #0
 810ac9a:	f73f adbb 	bgt.w	810a814 <_dtoa_r+0x4b4>
 810ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aca0:	9d01      	ldr	r5, [sp, #4]
 810aca2:	43db      	mvns	r3, r3
 810aca4:	9300      	str	r3, [sp, #0]
 810aca6:	f04f 0800 	mov.w	r8, #0
 810acaa:	4631      	mov	r1, r6
 810acac:	4620      	mov	r0, r4
 810acae:	f000 ff3f 	bl	810bb30 <_Bfree>
 810acb2:	2f00      	cmp	r7, #0
 810acb4:	f43f aea4 	beq.w	810aa00 <_dtoa_r+0x6a0>
 810acb8:	f1b8 0f00 	cmp.w	r8, #0
 810acbc:	d005      	beq.n	810acca <_dtoa_r+0x96a>
 810acbe:	45b8      	cmp	r8, r7
 810acc0:	d003      	beq.n	810acca <_dtoa_r+0x96a>
 810acc2:	4641      	mov	r1, r8
 810acc4:	4620      	mov	r0, r4
 810acc6:	f000 ff33 	bl	810bb30 <_Bfree>
 810acca:	4639      	mov	r1, r7
 810accc:	4620      	mov	r0, r4
 810acce:	f000 ff2f 	bl	810bb30 <_Bfree>
 810acd2:	e695      	b.n	810aa00 <_dtoa_r+0x6a0>
 810acd4:	2600      	movs	r6, #0
 810acd6:	4637      	mov	r7, r6
 810acd8:	e7e1      	b.n	810ac9e <_dtoa_r+0x93e>
 810acda:	9700      	str	r7, [sp, #0]
 810acdc:	4637      	mov	r7, r6
 810acde:	e599      	b.n	810a814 <_dtoa_r+0x4b4>
 810ace0:	40240000 	.word	0x40240000
 810ace4:	9b08      	ldr	r3, [sp, #32]
 810ace6:	2b00      	cmp	r3, #0
 810ace8:	f000 80ca 	beq.w	810ae80 <_dtoa_r+0xb20>
 810acec:	9b03      	ldr	r3, [sp, #12]
 810acee:	9302      	str	r3, [sp, #8]
 810acf0:	2d00      	cmp	r5, #0
 810acf2:	dd05      	ble.n	810ad00 <_dtoa_r+0x9a0>
 810acf4:	4639      	mov	r1, r7
 810acf6:	462a      	mov	r2, r5
 810acf8:	4620      	mov	r0, r4
 810acfa:	f001 f935 	bl	810bf68 <__lshift>
 810acfe:	4607      	mov	r7, r0
 810ad00:	f1b8 0f00 	cmp.w	r8, #0
 810ad04:	d05b      	beq.n	810adbe <_dtoa_r+0xa5e>
 810ad06:	6879      	ldr	r1, [r7, #4]
 810ad08:	4620      	mov	r0, r4
 810ad0a:	f000 fed1 	bl	810bab0 <_Balloc>
 810ad0e:	4605      	mov	r5, r0
 810ad10:	b928      	cbnz	r0, 810ad1e <_dtoa_r+0x9be>
 810ad12:	4b87      	ldr	r3, [pc, #540]	; (810af30 <_dtoa_r+0xbd0>)
 810ad14:	4602      	mov	r2, r0
 810ad16:	f240 21ea 	movw	r1, #746	; 0x2ea
 810ad1a:	f7ff bb3b 	b.w	810a394 <_dtoa_r+0x34>
 810ad1e:	693a      	ldr	r2, [r7, #16]
 810ad20:	3202      	adds	r2, #2
 810ad22:	0092      	lsls	r2, r2, #2
 810ad24:	f107 010c 	add.w	r1, r7, #12
 810ad28:	300c      	adds	r0, #12
 810ad2a:	f000 feb3 	bl	810ba94 <memcpy>
 810ad2e:	2201      	movs	r2, #1
 810ad30:	4629      	mov	r1, r5
 810ad32:	4620      	mov	r0, r4
 810ad34:	f001 f918 	bl	810bf68 <__lshift>
 810ad38:	9b01      	ldr	r3, [sp, #4]
 810ad3a:	f103 0901 	add.w	r9, r3, #1
 810ad3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810ad42:	4413      	add	r3, r2
 810ad44:	9305      	str	r3, [sp, #20]
 810ad46:	f00a 0301 	and.w	r3, sl, #1
 810ad4a:	46b8      	mov	r8, r7
 810ad4c:	9304      	str	r3, [sp, #16]
 810ad4e:	4607      	mov	r7, r0
 810ad50:	4631      	mov	r1, r6
 810ad52:	ee18 0a10 	vmov	r0, s16
 810ad56:	f7ff fa77 	bl	810a248 <quorem>
 810ad5a:	4641      	mov	r1, r8
 810ad5c:	9002      	str	r0, [sp, #8]
 810ad5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810ad62:	ee18 0a10 	vmov	r0, s16
 810ad66:	f001 f96f 	bl	810c048 <__mcmp>
 810ad6a:	463a      	mov	r2, r7
 810ad6c:	9003      	str	r0, [sp, #12]
 810ad6e:	4631      	mov	r1, r6
 810ad70:	4620      	mov	r0, r4
 810ad72:	f001 f985 	bl	810c080 <__mdiff>
 810ad76:	68c2      	ldr	r2, [r0, #12]
 810ad78:	f109 3bff 	add.w	fp, r9, #4294967295
 810ad7c:	4605      	mov	r5, r0
 810ad7e:	bb02      	cbnz	r2, 810adc2 <_dtoa_r+0xa62>
 810ad80:	4601      	mov	r1, r0
 810ad82:	ee18 0a10 	vmov	r0, s16
 810ad86:	f001 f95f 	bl	810c048 <__mcmp>
 810ad8a:	4602      	mov	r2, r0
 810ad8c:	4629      	mov	r1, r5
 810ad8e:	4620      	mov	r0, r4
 810ad90:	9207      	str	r2, [sp, #28]
 810ad92:	f000 fecd 	bl	810bb30 <_Bfree>
 810ad96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810ad9a:	ea43 0102 	orr.w	r1, r3, r2
 810ad9e:	9b04      	ldr	r3, [sp, #16]
 810ada0:	430b      	orrs	r3, r1
 810ada2:	464d      	mov	r5, r9
 810ada4:	d10f      	bne.n	810adc6 <_dtoa_r+0xa66>
 810ada6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810adaa:	d02a      	beq.n	810ae02 <_dtoa_r+0xaa2>
 810adac:	9b03      	ldr	r3, [sp, #12]
 810adae:	2b00      	cmp	r3, #0
 810adb0:	dd02      	ble.n	810adb8 <_dtoa_r+0xa58>
 810adb2:	9b02      	ldr	r3, [sp, #8]
 810adb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810adb8:	f88b a000 	strb.w	sl, [fp]
 810adbc:	e775      	b.n	810acaa <_dtoa_r+0x94a>
 810adbe:	4638      	mov	r0, r7
 810adc0:	e7ba      	b.n	810ad38 <_dtoa_r+0x9d8>
 810adc2:	2201      	movs	r2, #1
 810adc4:	e7e2      	b.n	810ad8c <_dtoa_r+0xa2c>
 810adc6:	9b03      	ldr	r3, [sp, #12]
 810adc8:	2b00      	cmp	r3, #0
 810adca:	db04      	blt.n	810add6 <_dtoa_r+0xa76>
 810adcc:	9906      	ldr	r1, [sp, #24]
 810adce:	430b      	orrs	r3, r1
 810add0:	9904      	ldr	r1, [sp, #16]
 810add2:	430b      	orrs	r3, r1
 810add4:	d122      	bne.n	810ae1c <_dtoa_r+0xabc>
 810add6:	2a00      	cmp	r2, #0
 810add8:	ddee      	ble.n	810adb8 <_dtoa_r+0xa58>
 810adda:	ee18 1a10 	vmov	r1, s16
 810adde:	2201      	movs	r2, #1
 810ade0:	4620      	mov	r0, r4
 810ade2:	f001 f8c1 	bl	810bf68 <__lshift>
 810ade6:	4631      	mov	r1, r6
 810ade8:	ee08 0a10 	vmov	s16, r0
 810adec:	f001 f92c 	bl	810c048 <__mcmp>
 810adf0:	2800      	cmp	r0, #0
 810adf2:	dc03      	bgt.n	810adfc <_dtoa_r+0xa9c>
 810adf4:	d1e0      	bne.n	810adb8 <_dtoa_r+0xa58>
 810adf6:	f01a 0f01 	tst.w	sl, #1
 810adfa:	d0dd      	beq.n	810adb8 <_dtoa_r+0xa58>
 810adfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810ae00:	d1d7      	bne.n	810adb2 <_dtoa_r+0xa52>
 810ae02:	2339      	movs	r3, #57	; 0x39
 810ae04:	f88b 3000 	strb.w	r3, [fp]
 810ae08:	462b      	mov	r3, r5
 810ae0a:	461d      	mov	r5, r3
 810ae0c:	3b01      	subs	r3, #1
 810ae0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810ae12:	2a39      	cmp	r2, #57	; 0x39
 810ae14:	d071      	beq.n	810aefa <_dtoa_r+0xb9a>
 810ae16:	3201      	adds	r2, #1
 810ae18:	701a      	strb	r2, [r3, #0]
 810ae1a:	e746      	b.n	810acaa <_dtoa_r+0x94a>
 810ae1c:	2a00      	cmp	r2, #0
 810ae1e:	dd07      	ble.n	810ae30 <_dtoa_r+0xad0>
 810ae20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810ae24:	d0ed      	beq.n	810ae02 <_dtoa_r+0xaa2>
 810ae26:	f10a 0301 	add.w	r3, sl, #1
 810ae2a:	f88b 3000 	strb.w	r3, [fp]
 810ae2e:	e73c      	b.n	810acaa <_dtoa_r+0x94a>
 810ae30:	9b05      	ldr	r3, [sp, #20]
 810ae32:	f809 ac01 	strb.w	sl, [r9, #-1]
 810ae36:	4599      	cmp	r9, r3
 810ae38:	d047      	beq.n	810aeca <_dtoa_r+0xb6a>
 810ae3a:	ee18 1a10 	vmov	r1, s16
 810ae3e:	2300      	movs	r3, #0
 810ae40:	220a      	movs	r2, #10
 810ae42:	4620      	mov	r0, r4
 810ae44:	f000 fe96 	bl	810bb74 <__multadd>
 810ae48:	45b8      	cmp	r8, r7
 810ae4a:	ee08 0a10 	vmov	s16, r0
 810ae4e:	f04f 0300 	mov.w	r3, #0
 810ae52:	f04f 020a 	mov.w	r2, #10
 810ae56:	4641      	mov	r1, r8
 810ae58:	4620      	mov	r0, r4
 810ae5a:	d106      	bne.n	810ae6a <_dtoa_r+0xb0a>
 810ae5c:	f000 fe8a 	bl	810bb74 <__multadd>
 810ae60:	4680      	mov	r8, r0
 810ae62:	4607      	mov	r7, r0
 810ae64:	f109 0901 	add.w	r9, r9, #1
 810ae68:	e772      	b.n	810ad50 <_dtoa_r+0x9f0>
 810ae6a:	f000 fe83 	bl	810bb74 <__multadd>
 810ae6e:	4639      	mov	r1, r7
 810ae70:	4680      	mov	r8, r0
 810ae72:	2300      	movs	r3, #0
 810ae74:	220a      	movs	r2, #10
 810ae76:	4620      	mov	r0, r4
 810ae78:	f000 fe7c 	bl	810bb74 <__multadd>
 810ae7c:	4607      	mov	r7, r0
 810ae7e:	e7f1      	b.n	810ae64 <_dtoa_r+0xb04>
 810ae80:	9b03      	ldr	r3, [sp, #12]
 810ae82:	9302      	str	r3, [sp, #8]
 810ae84:	9d01      	ldr	r5, [sp, #4]
 810ae86:	ee18 0a10 	vmov	r0, s16
 810ae8a:	4631      	mov	r1, r6
 810ae8c:	f7ff f9dc 	bl	810a248 <quorem>
 810ae90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810ae94:	9b01      	ldr	r3, [sp, #4]
 810ae96:	f805 ab01 	strb.w	sl, [r5], #1
 810ae9a:	1aea      	subs	r2, r5, r3
 810ae9c:	9b02      	ldr	r3, [sp, #8]
 810ae9e:	4293      	cmp	r3, r2
 810aea0:	dd09      	ble.n	810aeb6 <_dtoa_r+0xb56>
 810aea2:	ee18 1a10 	vmov	r1, s16
 810aea6:	2300      	movs	r3, #0
 810aea8:	220a      	movs	r2, #10
 810aeaa:	4620      	mov	r0, r4
 810aeac:	f000 fe62 	bl	810bb74 <__multadd>
 810aeb0:	ee08 0a10 	vmov	s16, r0
 810aeb4:	e7e7      	b.n	810ae86 <_dtoa_r+0xb26>
 810aeb6:	9b02      	ldr	r3, [sp, #8]
 810aeb8:	2b00      	cmp	r3, #0
 810aeba:	bfc8      	it	gt
 810aebc:	461d      	movgt	r5, r3
 810aebe:	9b01      	ldr	r3, [sp, #4]
 810aec0:	bfd8      	it	le
 810aec2:	2501      	movle	r5, #1
 810aec4:	441d      	add	r5, r3
 810aec6:	f04f 0800 	mov.w	r8, #0
 810aeca:	ee18 1a10 	vmov	r1, s16
 810aece:	2201      	movs	r2, #1
 810aed0:	4620      	mov	r0, r4
 810aed2:	f001 f849 	bl	810bf68 <__lshift>
 810aed6:	4631      	mov	r1, r6
 810aed8:	ee08 0a10 	vmov	s16, r0
 810aedc:	f001 f8b4 	bl	810c048 <__mcmp>
 810aee0:	2800      	cmp	r0, #0
 810aee2:	dc91      	bgt.n	810ae08 <_dtoa_r+0xaa8>
 810aee4:	d102      	bne.n	810aeec <_dtoa_r+0xb8c>
 810aee6:	f01a 0f01 	tst.w	sl, #1
 810aeea:	d18d      	bne.n	810ae08 <_dtoa_r+0xaa8>
 810aeec:	462b      	mov	r3, r5
 810aeee:	461d      	mov	r5, r3
 810aef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810aef4:	2a30      	cmp	r2, #48	; 0x30
 810aef6:	d0fa      	beq.n	810aeee <_dtoa_r+0xb8e>
 810aef8:	e6d7      	b.n	810acaa <_dtoa_r+0x94a>
 810aefa:	9a01      	ldr	r2, [sp, #4]
 810aefc:	429a      	cmp	r2, r3
 810aefe:	d184      	bne.n	810ae0a <_dtoa_r+0xaaa>
 810af00:	9b00      	ldr	r3, [sp, #0]
 810af02:	3301      	adds	r3, #1
 810af04:	9300      	str	r3, [sp, #0]
 810af06:	2331      	movs	r3, #49	; 0x31
 810af08:	7013      	strb	r3, [r2, #0]
 810af0a:	e6ce      	b.n	810acaa <_dtoa_r+0x94a>
 810af0c:	4b09      	ldr	r3, [pc, #36]	; (810af34 <_dtoa_r+0xbd4>)
 810af0e:	f7ff ba95 	b.w	810a43c <_dtoa_r+0xdc>
 810af12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af14:	2b00      	cmp	r3, #0
 810af16:	f47f aa6e 	bne.w	810a3f6 <_dtoa_r+0x96>
 810af1a:	4b07      	ldr	r3, [pc, #28]	; (810af38 <_dtoa_r+0xbd8>)
 810af1c:	f7ff ba8e 	b.w	810a43c <_dtoa_r+0xdc>
 810af20:	9b02      	ldr	r3, [sp, #8]
 810af22:	2b00      	cmp	r3, #0
 810af24:	dcae      	bgt.n	810ae84 <_dtoa_r+0xb24>
 810af26:	9b06      	ldr	r3, [sp, #24]
 810af28:	2b02      	cmp	r3, #2
 810af2a:	f73f aea8 	bgt.w	810ac7e <_dtoa_r+0x91e>
 810af2e:	e7a9      	b.n	810ae84 <_dtoa_r+0xb24>
 810af30:	0810d1b8 	.word	0x0810d1b8
 810af34:	0810cfb8 	.word	0x0810cfb8
 810af38:	0810d139 	.word	0x0810d139

0810af3c <__sflush_r>:
 810af3c:	898a      	ldrh	r2, [r1, #12]
 810af3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810af42:	4605      	mov	r5, r0
 810af44:	0710      	lsls	r0, r2, #28
 810af46:	460c      	mov	r4, r1
 810af48:	d458      	bmi.n	810affc <__sflush_r+0xc0>
 810af4a:	684b      	ldr	r3, [r1, #4]
 810af4c:	2b00      	cmp	r3, #0
 810af4e:	dc05      	bgt.n	810af5c <__sflush_r+0x20>
 810af50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810af52:	2b00      	cmp	r3, #0
 810af54:	dc02      	bgt.n	810af5c <__sflush_r+0x20>
 810af56:	2000      	movs	r0, #0
 810af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810af5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810af5e:	2e00      	cmp	r6, #0
 810af60:	d0f9      	beq.n	810af56 <__sflush_r+0x1a>
 810af62:	2300      	movs	r3, #0
 810af64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810af68:	682f      	ldr	r7, [r5, #0]
 810af6a:	602b      	str	r3, [r5, #0]
 810af6c:	d032      	beq.n	810afd4 <__sflush_r+0x98>
 810af6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810af70:	89a3      	ldrh	r3, [r4, #12]
 810af72:	075a      	lsls	r2, r3, #29
 810af74:	d505      	bpl.n	810af82 <__sflush_r+0x46>
 810af76:	6863      	ldr	r3, [r4, #4]
 810af78:	1ac0      	subs	r0, r0, r3
 810af7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810af7c:	b10b      	cbz	r3, 810af82 <__sflush_r+0x46>
 810af7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810af80:	1ac0      	subs	r0, r0, r3
 810af82:	2300      	movs	r3, #0
 810af84:	4602      	mov	r2, r0
 810af86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810af88:	6a21      	ldr	r1, [r4, #32]
 810af8a:	4628      	mov	r0, r5
 810af8c:	47b0      	blx	r6
 810af8e:	1c43      	adds	r3, r0, #1
 810af90:	89a3      	ldrh	r3, [r4, #12]
 810af92:	d106      	bne.n	810afa2 <__sflush_r+0x66>
 810af94:	6829      	ldr	r1, [r5, #0]
 810af96:	291d      	cmp	r1, #29
 810af98:	d82c      	bhi.n	810aff4 <__sflush_r+0xb8>
 810af9a:	4a2a      	ldr	r2, [pc, #168]	; (810b044 <__sflush_r+0x108>)
 810af9c:	40ca      	lsrs	r2, r1
 810af9e:	07d6      	lsls	r6, r2, #31
 810afa0:	d528      	bpl.n	810aff4 <__sflush_r+0xb8>
 810afa2:	2200      	movs	r2, #0
 810afa4:	6062      	str	r2, [r4, #4]
 810afa6:	04d9      	lsls	r1, r3, #19
 810afa8:	6922      	ldr	r2, [r4, #16]
 810afaa:	6022      	str	r2, [r4, #0]
 810afac:	d504      	bpl.n	810afb8 <__sflush_r+0x7c>
 810afae:	1c42      	adds	r2, r0, #1
 810afb0:	d101      	bne.n	810afb6 <__sflush_r+0x7a>
 810afb2:	682b      	ldr	r3, [r5, #0]
 810afb4:	b903      	cbnz	r3, 810afb8 <__sflush_r+0x7c>
 810afb6:	6560      	str	r0, [r4, #84]	; 0x54
 810afb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810afba:	602f      	str	r7, [r5, #0]
 810afbc:	2900      	cmp	r1, #0
 810afbe:	d0ca      	beq.n	810af56 <__sflush_r+0x1a>
 810afc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810afc4:	4299      	cmp	r1, r3
 810afc6:	d002      	beq.n	810afce <__sflush_r+0x92>
 810afc8:	4628      	mov	r0, r5
 810afca:	f001 fa49 	bl	810c460 <_free_r>
 810afce:	2000      	movs	r0, #0
 810afd0:	6360      	str	r0, [r4, #52]	; 0x34
 810afd2:	e7c1      	b.n	810af58 <__sflush_r+0x1c>
 810afd4:	6a21      	ldr	r1, [r4, #32]
 810afd6:	2301      	movs	r3, #1
 810afd8:	4628      	mov	r0, r5
 810afda:	47b0      	blx	r6
 810afdc:	1c41      	adds	r1, r0, #1
 810afde:	d1c7      	bne.n	810af70 <__sflush_r+0x34>
 810afe0:	682b      	ldr	r3, [r5, #0]
 810afe2:	2b00      	cmp	r3, #0
 810afe4:	d0c4      	beq.n	810af70 <__sflush_r+0x34>
 810afe6:	2b1d      	cmp	r3, #29
 810afe8:	d001      	beq.n	810afee <__sflush_r+0xb2>
 810afea:	2b16      	cmp	r3, #22
 810afec:	d101      	bne.n	810aff2 <__sflush_r+0xb6>
 810afee:	602f      	str	r7, [r5, #0]
 810aff0:	e7b1      	b.n	810af56 <__sflush_r+0x1a>
 810aff2:	89a3      	ldrh	r3, [r4, #12]
 810aff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810aff8:	81a3      	strh	r3, [r4, #12]
 810affa:	e7ad      	b.n	810af58 <__sflush_r+0x1c>
 810affc:	690f      	ldr	r7, [r1, #16]
 810affe:	2f00      	cmp	r7, #0
 810b000:	d0a9      	beq.n	810af56 <__sflush_r+0x1a>
 810b002:	0793      	lsls	r3, r2, #30
 810b004:	680e      	ldr	r6, [r1, #0]
 810b006:	bf08      	it	eq
 810b008:	694b      	ldreq	r3, [r1, #20]
 810b00a:	600f      	str	r7, [r1, #0]
 810b00c:	bf18      	it	ne
 810b00e:	2300      	movne	r3, #0
 810b010:	eba6 0807 	sub.w	r8, r6, r7
 810b014:	608b      	str	r3, [r1, #8]
 810b016:	f1b8 0f00 	cmp.w	r8, #0
 810b01a:	dd9c      	ble.n	810af56 <__sflush_r+0x1a>
 810b01c:	6a21      	ldr	r1, [r4, #32]
 810b01e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810b020:	4643      	mov	r3, r8
 810b022:	463a      	mov	r2, r7
 810b024:	4628      	mov	r0, r5
 810b026:	47b0      	blx	r6
 810b028:	2800      	cmp	r0, #0
 810b02a:	dc06      	bgt.n	810b03a <__sflush_r+0xfe>
 810b02c:	89a3      	ldrh	r3, [r4, #12]
 810b02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b032:	81a3      	strh	r3, [r4, #12]
 810b034:	f04f 30ff 	mov.w	r0, #4294967295
 810b038:	e78e      	b.n	810af58 <__sflush_r+0x1c>
 810b03a:	4407      	add	r7, r0
 810b03c:	eba8 0800 	sub.w	r8, r8, r0
 810b040:	e7e9      	b.n	810b016 <__sflush_r+0xda>
 810b042:	bf00      	nop
 810b044:	20400001 	.word	0x20400001

0810b048 <_fflush_r>:
 810b048:	b538      	push	{r3, r4, r5, lr}
 810b04a:	690b      	ldr	r3, [r1, #16]
 810b04c:	4605      	mov	r5, r0
 810b04e:	460c      	mov	r4, r1
 810b050:	b913      	cbnz	r3, 810b058 <_fflush_r+0x10>
 810b052:	2500      	movs	r5, #0
 810b054:	4628      	mov	r0, r5
 810b056:	bd38      	pop	{r3, r4, r5, pc}
 810b058:	b118      	cbz	r0, 810b062 <_fflush_r+0x1a>
 810b05a:	6983      	ldr	r3, [r0, #24]
 810b05c:	b90b      	cbnz	r3, 810b062 <_fflush_r+0x1a>
 810b05e:	f000 f887 	bl	810b170 <__sinit>
 810b062:	4b14      	ldr	r3, [pc, #80]	; (810b0b4 <_fflush_r+0x6c>)
 810b064:	429c      	cmp	r4, r3
 810b066:	d11b      	bne.n	810b0a0 <_fflush_r+0x58>
 810b068:	686c      	ldr	r4, [r5, #4]
 810b06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b06e:	2b00      	cmp	r3, #0
 810b070:	d0ef      	beq.n	810b052 <_fflush_r+0xa>
 810b072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810b074:	07d0      	lsls	r0, r2, #31
 810b076:	d404      	bmi.n	810b082 <_fflush_r+0x3a>
 810b078:	0599      	lsls	r1, r3, #22
 810b07a:	d402      	bmi.n	810b082 <_fflush_r+0x3a>
 810b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b07e:	f000 fc88 	bl	810b992 <__retarget_lock_acquire_recursive>
 810b082:	4628      	mov	r0, r5
 810b084:	4621      	mov	r1, r4
 810b086:	f7ff ff59 	bl	810af3c <__sflush_r>
 810b08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b08c:	07da      	lsls	r2, r3, #31
 810b08e:	4605      	mov	r5, r0
 810b090:	d4e0      	bmi.n	810b054 <_fflush_r+0xc>
 810b092:	89a3      	ldrh	r3, [r4, #12]
 810b094:	059b      	lsls	r3, r3, #22
 810b096:	d4dd      	bmi.n	810b054 <_fflush_r+0xc>
 810b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b09a:	f000 fc7b 	bl	810b994 <__retarget_lock_release_recursive>
 810b09e:	e7d9      	b.n	810b054 <_fflush_r+0xc>
 810b0a0:	4b05      	ldr	r3, [pc, #20]	; (810b0b8 <_fflush_r+0x70>)
 810b0a2:	429c      	cmp	r4, r3
 810b0a4:	d101      	bne.n	810b0aa <_fflush_r+0x62>
 810b0a6:	68ac      	ldr	r4, [r5, #8]
 810b0a8:	e7df      	b.n	810b06a <_fflush_r+0x22>
 810b0aa:	4b04      	ldr	r3, [pc, #16]	; (810b0bc <_fflush_r+0x74>)
 810b0ac:	429c      	cmp	r4, r3
 810b0ae:	bf08      	it	eq
 810b0b0:	68ec      	ldreq	r4, [r5, #12]
 810b0b2:	e7da      	b.n	810b06a <_fflush_r+0x22>
 810b0b4:	0810d1ec 	.word	0x0810d1ec
 810b0b8:	0810d20c 	.word	0x0810d20c
 810b0bc:	0810d1cc 	.word	0x0810d1cc

0810b0c0 <std>:
 810b0c0:	2300      	movs	r3, #0
 810b0c2:	b510      	push	{r4, lr}
 810b0c4:	4604      	mov	r4, r0
 810b0c6:	e9c0 3300 	strd	r3, r3, [r0]
 810b0ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b0ce:	6083      	str	r3, [r0, #8]
 810b0d0:	8181      	strh	r1, [r0, #12]
 810b0d2:	6643      	str	r3, [r0, #100]	; 0x64
 810b0d4:	81c2      	strh	r2, [r0, #14]
 810b0d6:	6183      	str	r3, [r0, #24]
 810b0d8:	4619      	mov	r1, r3
 810b0da:	2208      	movs	r2, #8
 810b0dc:	305c      	adds	r0, #92	; 0x5c
 810b0de:	f7fd fa11 	bl	8108504 <memset>
 810b0e2:	4b05      	ldr	r3, [pc, #20]	; (810b0f8 <std+0x38>)
 810b0e4:	6263      	str	r3, [r4, #36]	; 0x24
 810b0e6:	4b05      	ldr	r3, [pc, #20]	; (810b0fc <std+0x3c>)
 810b0e8:	62a3      	str	r3, [r4, #40]	; 0x28
 810b0ea:	4b05      	ldr	r3, [pc, #20]	; (810b100 <std+0x40>)
 810b0ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 810b0ee:	4b05      	ldr	r3, [pc, #20]	; (810b104 <std+0x44>)
 810b0f0:	6224      	str	r4, [r4, #32]
 810b0f2:	6323      	str	r3, [r4, #48]	; 0x30
 810b0f4:	bd10      	pop	{r4, pc}
 810b0f6:	bf00      	nop
 810b0f8:	0810cbc1 	.word	0x0810cbc1
 810b0fc:	0810cbe3 	.word	0x0810cbe3
 810b100:	0810cc1b 	.word	0x0810cc1b
 810b104:	0810cc3f 	.word	0x0810cc3f

0810b108 <_cleanup_r>:
 810b108:	4901      	ldr	r1, [pc, #4]	; (810b110 <_cleanup_r+0x8>)
 810b10a:	f000 b8af 	b.w	810b26c <_fwalk_reent>
 810b10e:	bf00      	nop
 810b110:	0810b049 	.word	0x0810b049

0810b114 <__sfmoreglue>:
 810b114:	b570      	push	{r4, r5, r6, lr}
 810b116:	2268      	movs	r2, #104	; 0x68
 810b118:	1e4d      	subs	r5, r1, #1
 810b11a:	4355      	muls	r5, r2
 810b11c:	460e      	mov	r6, r1
 810b11e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810b122:	f001 fa09 	bl	810c538 <_malloc_r>
 810b126:	4604      	mov	r4, r0
 810b128:	b140      	cbz	r0, 810b13c <__sfmoreglue+0x28>
 810b12a:	2100      	movs	r1, #0
 810b12c:	e9c0 1600 	strd	r1, r6, [r0]
 810b130:	300c      	adds	r0, #12
 810b132:	60a0      	str	r0, [r4, #8]
 810b134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810b138:	f7fd f9e4 	bl	8108504 <memset>
 810b13c:	4620      	mov	r0, r4
 810b13e:	bd70      	pop	{r4, r5, r6, pc}

0810b140 <__sfp_lock_acquire>:
 810b140:	4801      	ldr	r0, [pc, #4]	; (810b148 <__sfp_lock_acquire+0x8>)
 810b142:	f000 bc26 	b.w	810b992 <__retarget_lock_acquire_recursive>
 810b146:	bf00      	nop
 810b148:	10000359 	.word	0x10000359

0810b14c <__sfp_lock_release>:
 810b14c:	4801      	ldr	r0, [pc, #4]	; (810b154 <__sfp_lock_release+0x8>)
 810b14e:	f000 bc21 	b.w	810b994 <__retarget_lock_release_recursive>
 810b152:	bf00      	nop
 810b154:	10000359 	.word	0x10000359

0810b158 <__sinit_lock_acquire>:
 810b158:	4801      	ldr	r0, [pc, #4]	; (810b160 <__sinit_lock_acquire+0x8>)
 810b15a:	f000 bc1a 	b.w	810b992 <__retarget_lock_acquire_recursive>
 810b15e:	bf00      	nop
 810b160:	1000035a 	.word	0x1000035a

0810b164 <__sinit_lock_release>:
 810b164:	4801      	ldr	r0, [pc, #4]	; (810b16c <__sinit_lock_release+0x8>)
 810b166:	f000 bc15 	b.w	810b994 <__retarget_lock_release_recursive>
 810b16a:	bf00      	nop
 810b16c:	1000035a 	.word	0x1000035a

0810b170 <__sinit>:
 810b170:	b510      	push	{r4, lr}
 810b172:	4604      	mov	r4, r0
 810b174:	f7ff fff0 	bl	810b158 <__sinit_lock_acquire>
 810b178:	69a3      	ldr	r3, [r4, #24]
 810b17a:	b11b      	cbz	r3, 810b184 <__sinit+0x14>
 810b17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b180:	f7ff bff0 	b.w	810b164 <__sinit_lock_release>
 810b184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810b188:	6523      	str	r3, [r4, #80]	; 0x50
 810b18a:	4b13      	ldr	r3, [pc, #76]	; (810b1d8 <__sinit+0x68>)
 810b18c:	4a13      	ldr	r2, [pc, #76]	; (810b1dc <__sinit+0x6c>)
 810b18e:	681b      	ldr	r3, [r3, #0]
 810b190:	62a2      	str	r2, [r4, #40]	; 0x28
 810b192:	42a3      	cmp	r3, r4
 810b194:	bf04      	itt	eq
 810b196:	2301      	moveq	r3, #1
 810b198:	61a3      	streq	r3, [r4, #24]
 810b19a:	4620      	mov	r0, r4
 810b19c:	f000 f820 	bl	810b1e0 <__sfp>
 810b1a0:	6060      	str	r0, [r4, #4]
 810b1a2:	4620      	mov	r0, r4
 810b1a4:	f000 f81c 	bl	810b1e0 <__sfp>
 810b1a8:	60a0      	str	r0, [r4, #8]
 810b1aa:	4620      	mov	r0, r4
 810b1ac:	f000 f818 	bl	810b1e0 <__sfp>
 810b1b0:	2200      	movs	r2, #0
 810b1b2:	60e0      	str	r0, [r4, #12]
 810b1b4:	2104      	movs	r1, #4
 810b1b6:	6860      	ldr	r0, [r4, #4]
 810b1b8:	f7ff ff82 	bl	810b0c0 <std>
 810b1bc:	68a0      	ldr	r0, [r4, #8]
 810b1be:	2201      	movs	r2, #1
 810b1c0:	2109      	movs	r1, #9
 810b1c2:	f7ff ff7d 	bl	810b0c0 <std>
 810b1c6:	68e0      	ldr	r0, [r4, #12]
 810b1c8:	2202      	movs	r2, #2
 810b1ca:	2112      	movs	r1, #18
 810b1cc:	f7ff ff78 	bl	810b0c0 <std>
 810b1d0:	2301      	movs	r3, #1
 810b1d2:	61a3      	str	r3, [r4, #24]
 810b1d4:	e7d2      	b.n	810b17c <__sinit+0xc>
 810b1d6:	bf00      	nop
 810b1d8:	0810cfa4 	.word	0x0810cfa4
 810b1dc:	0810b109 	.word	0x0810b109

0810b1e0 <__sfp>:
 810b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b1e2:	4607      	mov	r7, r0
 810b1e4:	f7ff ffac 	bl	810b140 <__sfp_lock_acquire>
 810b1e8:	4b1e      	ldr	r3, [pc, #120]	; (810b264 <__sfp+0x84>)
 810b1ea:	681e      	ldr	r6, [r3, #0]
 810b1ec:	69b3      	ldr	r3, [r6, #24]
 810b1ee:	b913      	cbnz	r3, 810b1f6 <__sfp+0x16>
 810b1f0:	4630      	mov	r0, r6
 810b1f2:	f7ff ffbd 	bl	810b170 <__sinit>
 810b1f6:	3648      	adds	r6, #72	; 0x48
 810b1f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810b1fc:	3b01      	subs	r3, #1
 810b1fe:	d503      	bpl.n	810b208 <__sfp+0x28>
 810b200:	6833      	ldr	r3, [r6, #0]
 810b202:	b30b      	cbz	r3, 810b248 <__sfp+0x68>
 810b204:	6836      	ldr	r6, [r6, #0]
 810b206:	e7f7      	b.n	810b1f8 <__sfp+0x18>
 810b208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810b20c:	b9d5      	cbnz	r5, 810b244 <__sfp+0x64>
 810b20e:	4b16      	ldr	r3, [pc, #88]	; (810b268 <__sfp+0x88>)
 810b210:	60e3      	str	r3, [r4, #12]
 810b212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b216:	6665      	str	r5, [r4, #100]	; 0x64
 810b218:	f000 fbba 	bl	810b990 <__retarget_lock_init_recursive>
 810b21c:	f7ff ff96 	bl	810b14c <__sfp_lock_release>
 810b220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810b224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810b228:	6025      	str	r5, [r4, #0]
 810b22a:	61a5      	str	r5, [r4, #24]
 810b22c:	2208      	movs	r2, #8
 810b22e:	4629      	mov	r1, r5
 810b230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810b234:	f7fd f966 	bl	8108504 <memset>
 810b238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810b23c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810b240:	4620      	mov	r0, r4
 810b242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b244:	3468      	adds	r4, #104	; 0x68
 810b246:	e7d9      	b.n	810b1fc <__sfp+0x1c>
 810b248:	2104      	movs	r1, #4
 810b24a:	4638      	mov	r0, r7
 810b24c:	f7ff ff62 	bl	810b114 <__sfmoreglue>
 810b250:	4604      	mov	r4, r0
 810b252:	6030      	str	r0, [r6, #0]
 810b254:	2800      	cmp	r0, #0
 810b256:	d1d5      	bne.n	810b204 <__sfp+0x24>
 810b258:	f7ff ff78 	bl	810b14c <__sfp_lock_release>
 810b25c:	230c      	movs	r3, #12
 810b25e:	603b      	str	r3, [r7, #0]
 810b260:	e7ee      	b.n	810b240 <__sfp+0x60>
 810b262:	bf00      	nop
 810b264:	0810cfa4 	.word	0x0810cfa4
 810b268:	ffff0001 	.word	0xffff0001

0810b26c <_fwalk_reent>:
 810b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b270:	4606      	mov	r6, r0
 810b272:	4688      	mov	r8, r1
 810b274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810b278:	2700      	movs	r7, #0
 810b27a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b27e:	f1b9 0901 	subs.w	r9, r9, #1
 810b282:	d505      	bpl.n	810b290 <_fwalk_reent+0x24>
 810b284:	6824      	ldr	r4, [r4, #0]
 810b286:	2c00      	cmp	r4, #0
 810b288:	d1f7      	bne.n	810b27a <_fwalk_reent+0xe>
 810b28a:	4638      	mov	r0, r7
 810b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b290:	89ab      	ldrh	r3, [r5, #12]
 810b292:	2b01      	cmp	r3, #1
 810b294:	d907      	bls.n	810b2a6 <_fwalk_reent+0x3a>
 810b296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b29a:	3301      	adds	r3, #1
 810b29c:	d003      	beq.n	810b2a6 <_fwalk_reent+0x3a>
 810b29e:	4629      	mov	r1, r5
 810b2a0:	4630      	mov	r0, r6
 810b2a2:	47c0      	blx	r8
 810b2a4:	4307      	orrs	r7, r0
 810b2a6:	3568      	adds	r5, #104	; 0x68
 810b2a8:	e7e9      	b.n	810b27e <_fwalk_reent+0x12>

0810b2aa <rshift>:
 810b2aa:	6903      	ldr	r3, [r0, #16]
 810b2ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810b2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b2b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 810b2b8:	f100 0414 	add.w	r4, r0, #20
 810b2bc:	dd45      	ble.n	810b34a <rshift+0xa0>
 810b2be:	f011 011f 	ands.w	r1, r1, #31
 810b2c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810b2c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810b2ca:	d10c      	bne.n	810b2e6 <rshift+0x3c>
 810b2cc:	f100 0710 	add.w	r7, r0, #16
 810b2d0:	4629      	mov	r1, r5
 810b2d2:	42b1      	cmp	r1, r6
 810b2d4:	d334      	bcc.n	810b340 <rshift+0x96>
 810b2d6:	1a9b      	subs	r3, r3, r2
 810b2d8:	009b      	lsls	r3, r3, #2
 810b2da:	1eea      	subs	r2, r5, #3
 810b2dc:	4296      	cmp	r6, r2
 810b2de:	bf38      	it	cc
 810b2e0:	2300      	movcc	r3, #0
 810b2e2:	4423      	add	r3, r4
 810b2e4:	e015      	b.n	810b312 <rshift+0x68>
 810b2e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810b2ea:	f1c1 0820 	rsb	r8, r1, #32
 810b2ee:	40cf      	lsrs	r7, r1
 810b2f0:	f105 0e04 	add.w	lr, r5, #4
 810b2f4:	46a1      	mov	r9, r4
 810b2f6:	4576      	cmp	r6, lr
 810b2f8:	46f4      	mov	ip, lr
 810b2fa:	d815      	bhi.n	810b328 <rshift+0x7e>
 810b2fc:	1a9a      	subs	r2, r3, r2
 810b2fe:	0092      	lsls	r2, r2, #2
 810b300:	3a04      	subs	r2, #4
 810b302:	3501      	adds	r5, #1
 810b304:	42ae      	cmp	r6, r5
 810b306:	bf38      	it	cc
 810b308:	2200      	movcc	r2, #0
 810b30a:	18a3      	adds	r3, r4, r2
 810b30c:	50a7      	str	r7, [r4, r2]
 810b30e:	b107      	cbz	r7, 810b312 <rshift+0x68>
 810b310:	3304      	adds	r3, #4
 810b312:	1b1a      	subs	r2, r3, r4
 810b314:	42a3      	cmp	r3, r4
 810b316:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810b31a:	bf08      	it	eq
 810b31c:	2300      	moveq	r3, #0
 810b31e:	6102      	str	r2, [r0, #16]
 810b320:	bf08      	it	eq
 810b322:	6143      	streq	r3, [r0, #20]
 810b324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b328:	f8dc c000 	ldr.w	ip, [ip]
 810b32c:	fa0c fc08 	lsl.w	ip, ip, r8
 810b330:	ea4c 0707 	orr.w	r7, ip, r7
 810b334:	f849 7b04 	str.w	r7, [r9], #4
 810b338:	f85e 7b04 	ldr.w	r7, [lr], #4
 810b33c:	40cf      	lsrs	r7, r1
 810b33e:	e7da      	b.n	810b2f6 <rshift+0x4c>
 810b340:	f851 cb04 	ldr.w	ip, [r1], #4
 810b344:	f847 cf04 	str.w	ip, [r7, #4]!
 810b348:	e7c3      	b.n	810b2d2 <rshift+0x28>
 810b34a:	4623      	mov	r3, r4
 810b34c:	e7e1      	b.n	810b312 <rshift+0x68>

0810b34e <__hexdig_fun>:
 810b34e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810b352:	2b09      	cmp	r3, #9
 810b354:	d802      	bhi.n	810b35c <__hexdig_fun+0xe>
 810b356:	3820      	subs	r0, #32
 810b358:	b2c0      	uxtb	r0, r0
 810b35a:	4770      	bx	lr
 810b35c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810b360:	2b05      	cmp	r3, #5
 810b362:	d801      	bhi.n	810b368 <__hexdig_fun+0x1a>
 810b364:	3847      	subs	r0, #71	; 0x47
 810b366:	e7f7      	b.n	810b358 <__hexdig_fun+0xa>
 810b368:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810b36c:	2b05      	cmp	r3, #5
 810b36e:	d801      	bhi.n	810b374 <__hexdig_fun+0x26>
 810b370:	3827      	subs	r0, #39	; 0x27
 810b372:	e7f1      	b.n	810b358 <__hexdig_fun+0xa>
 810b374:	2000      	movs	r0, #0
 810b376:	4770      	bx	lr

0810b378 <__gethex>:
 810b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b37c:	ed2d 8b02 	vpush	{d8}
 810b380:	b089      	sub	sp, #36	; 0x24
 810b382:	ee08 0a10 	vmov	s16, r0
 810b386:	9304      	str	r3, [sp, #16]
 810b388:	4bb4      	ldr	r3, [pc, #720]	; (810b65c <__gethex+0x2e4>)
 810b38a:	681b      	ldr	r3, [r3, #0]
 810b38c:	9301      	str	r3, [sp, #4]
 810b38e:	4618      	mov	r0, r3
 810b390:	468b      	mov	fp, r1
 810b392:	4690      	mov	r8, r2
 810b394:	f7f4 ffa4 	bl	81002e0 <strlen>
 810b398:	9b01      	ldr	r3, [sp, #4]
 810b39a:	f8db 2000 	ldr.w	r2, [fp]
 810b39e:	4403      	add	r3, r0
 810b3a0:	4682      	mov	sl, r0
 810b3a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810b3a6:	9305      	str	r3, [sp, #20]
 810b3a8:	1c93      	adds	r3, r2, #2
 810b3aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810b3ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810b3b2:	32fe      	adds	r2, #254	; 0xfe
 810b3b4:	18d1      	adds	r1, r2, r3
 810b3b6:	461f      	mov	r7, r3
 810b3b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 810b3bc:	9100      	str	r1, [sp, #0]
 810b3be:	2830      	cmp	r0, #48	; 0x30
 810b3c0:	d0f8      	beq.n	810b3b4 <__gethex+0x3c>
 810b3c2:	f7ff ffc4 	bl	810b34e <__hexdig_fun>
 810b3c6:	4604      	mov	r4, r0
 810b3c8:	2800      	cmp	r0, #0
 810b3ca:	d13a      	bne.n	810b442 <__gethex+0xca>
 810b3cc:	9901      	ldr	r1, [sp, #4]
 810b3ce:	4652      	mov	r2, sl
 810b3d0:	4638      	mov	r0, r7
 810b3d2:	f001 fc38 	bl	810cc46 <strncmp>
 810b3d6:	4605      	mov	r5, r0
 810b3d8:	2800      	cmp	r0, #0
 810b3da:	d168      	bne.n	810b4ae <__gethex+0x136>
 810b3dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 810b3e0:	eb07 060a 	add.w	r6, r7, sl
 810b3e4:	f7ff ffb3 	bl	810b34e <__hexdig_fun>
 810b3e8:	2800      	cmp	r0, #0
 810b3ea:	d062      	beq.n	810b4b2 <__gethex+0x13a>
 810b3ec:	4633      	mov	r3, r6
 810b3ee:	7818      	ldrb	r0, [r3, #0]
 810b3f0:	2830      	cmp	r0, #48	; 0x30
 810b3f2:	461f      	mov	r7, r3
 810b3f4:	f103 0301 	add.w	r3, r3, #1
 810b3f8:	d0f9      	beq.n	810b3ee <__gethex+0x76>
 810b3fa:	f7ff ffa8 	bl	810b34e <__hexdig_fun>
 810b3fe:	2301      	movs	r3, #1
 810b400:	fab0 f480 	clz	r4, r0
 810b404:	0964      	lsrs	r4, r4, #5
 810b406:	4635      	mov	r5, r6
 810b408:	9300      	str	r3, [sp, #0]
 810b40a:	463a      	mov	r2, r7
 810b40c:	4616      	mov	r6, r2
 810b40e:	3201      	adds	r2, #1
 810b410:	7830      	ldrb	r0, [r6, #0]
 810b412:	f7ff ff9c 	bl	810b34e <__hexdig_fun>
 810b416:	2800      	cmp	r0, #0
 810b418:	d1f8      	bne.n	810b40c <__gethex+0x94>
 810b41a:	9901      	ldr	r1, [sp, #4]
 810b41c:	4652      	mov	r2, sl
 810b41e:	4630      	mov	r0, r6
 810b420:	f001 fc11 	bl	810cc46 <strncmp>
 810b424:	b980      	cbnz	r0, 810b448 <__gethex+0xd0>
 810b426:	b94d      	cbnz	r5, 810b43c <__gethex+0xc4>
 810b428:	eb06 050a 	add.w	r5, r6, sl
 810b42c:	462a      	mov	r2, r5
 810b42e:	4616      	mov	r6, r2
 810b430:	3201      	adds	r2, #1
 810b432:	7830      	ldrb	r0, [r6, #0]
 810b434:	f7ff ff8b 	bl	810b34e <__hexdig_fun>
 810b438:	2800      	cmp	r0, #0
 810b43a:	d1f8      	bne.n	810b42e <__gethex+0xb6>
 810b43c:	1bad      	subs	r5, r5, r6
 810b43e:	00ad      	lsls	r5, r5, #2
 810b440:	e004      	b.n	810b44c <__gethex+0xd4>
 810b442:	2400      	movs	r4, #0
 810b444:	4625      	mov	r5, r4
 810b446:	e7e0      	b.n	810b40a <__gethex+0x92>
 810b448:	2d00      	cmp	r5, #0
 810b44a:	d1f7      	bne.n	810b43c <__gethex+0xc4>
 810b44c:	7833      	ldrb	r3, [r6, #0]
 810b44e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810b452:	2b50      	cmp	r3, #80	; 0x50
 810b454:	d13b      	bne.n	810b4ce <__gethex+0x156>
 810b456:	7873      	ldrb	r3, [r6, #1]
 810b458:	2b2b      	cmp	r3, #43	; 0x2b
 810b45a:	d02c      	beq.n	810b4b6 <__gethex+0x13e>
 810b45c:	2b2d      	cmp	r3, #45	; 0x2d
 810b45e:	d02e      	beq.n	810b4be <__gethex+0x146>
 810b460:	1c71      	adds	r1, r6, #1
 810b462:	f04f 0900 	mov.w	r9, #0
 810b466:	7808      	ldrb	r0, [r1, #0]
 810b468:	f7ff ff71 	bl	810b34e <__hexdig_fun>
 810b46c:	1e43      	subs	r3, r0, #1
 810b46e:	b2db      	uxtb	r3, r3
 810b470:	2b18      	cmp	r3, #24
 810b472:	d82c      	bhi.n	810b4ce <__gethex+0x156>
 810b474:	f1a0 0210 	sub.w	r2, r0, #16
 810b478:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810b47c:	f7ff ff67 	bl	810b34e <__hexdig_fun>
 810b480:	1e43      	subs	r3, r0, #1
 810b482:	b2db      	uxtb	r3, r3
 810b484:	2b18      	cmp	r3, #24
 810b486:	d91d      	bls.n	810b4c4 <__gethex+0x14c>
 810b488:	f1b9 0f00 	cmp.w	r9, #0
 810b48c:	d000      	beq.n	810b490 <__gethex+0x118>
 810b48e:	4252      	negs	r2, r2
 810b490:	4415      	add	r5, r2
 810b492:	f8cb 1000 	str.w	r1, [fp]
 810b496:	b1e4      	cbz	r4, 810b4d2 <__gethex+0x15a>
 810b498:	9b00      	ldr	r3, [sp, #0]
 810b49a:	2b00      	cmp	r3, #0
 810b49c:	bf14      	ite	ne
 810b49e:	2700      	movne	r7, #0
 810b4a0:	2706      	moveq	r7, #6
 810b4a2:	4638      	mov	r0, r7
 810b4a4:	b009      	add	sp, #36	; 0x24
 810b4a6:	ecbd 8b02 	vpop	{d8}
 810b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b4ae:	463e      	mov	r6, r7
 810b4b0:	4625      	mov	r5, r4
 810b4b2:	2401      	movs	r4, #1
 810b4b4:	e7ca      	b.n	810b44c <__gethex+0xd4>
 810b4b6:	f04f 0900 	mov.w	r9, #0
 810b4ba:	1cb1      	adds	r1, r6, #2
 810b4bc:	e7d3      	b.n	810b466 <__gethex+0xee>
 810b4be:	f04f 0901 	mov.w	r9, #1
 810b4c2:	e7fa      	b.n	810b4ba <__gethex+0x142>
 810b4c4:	230a      	movs	r3, #10
 810b4c6:	fb03 0202 	mla	r2, r3, r2, r0
 810b4ca:	3a10      	subs	r2, #16
 810b4cc:	e7d4      	b.n	810b478 <__gethex+0x100>
 810b4ce:	4631      	mov	r1, r6
 810b4d0:	e7df      	b.n	810b492 <__gethex+0x11a>
 810b4d2:	1bf3      	subs	r3, r6, r7
 810b4d4:	3b01      	subs	r3, #1
 810b4d6:	4621      	mov	r1, r4
 810b4d8:	2b07      	cmp	r3, #7
 810b4da:	dc0b      	bgt.n	810b4f4 <__gethex+0x17c>
 810b4dc:	ee18 0a10 	vmov	r0, s16
 810b4e0:	f000 fae6 	bl	810bab0 <_Balloc>
 810b4e4:	4604      	mov	r4, r0
 810b4e6:	b940      	cbnz	r0, 810b4fa <__gethex+0x182>
 810b4e8:	4b5d      	ldr	r3, [pc, #372]	; (810b660 <__gethex+0x2e8>)
 810b4ea:	4602      	mov	r2, r0
 810b4ec:	21de      	movs	r1, #222	; 0xde
 810b4ee:	485d      	ldr	r0, [pc, #372]	; (810b664 <__gethex+0x2ec>)
 810b4f0:	f001 fbdc 	bl	810ccac <__assert_func>
 810b4f4:	3101      	adds	r1, #1
 810b4f6:	105b      	asrs	r3, r3, #1
 810b4f8:	e7ee      	b.n	810b4d8 <__gethex+0x160>
 810b4fa:	f100 0914 	add.w	r9, r0, #20
 810b4fe:	f04f 0b00 	mov.w	fp, #0
 810b502:	f1ca 0301 	rsb	r3, sl, #1
 810b506:	f8cd 9008 	str.w	r9, [sp, #8]
 810b50a:	f8cd b000 	str.w	fp, [sp]
 810b50e:	9306      	str	r3, [sp, #24]
 810b510:	42b7      	cmp	r7, r6
 810b512:	d340      	bcc.n	810b596 <__gethex+0x21e>
 810b514:	9802      	ldr	r0, [sp, #8]
 810b516:	9b00      	ldr	r3, [sp, #0]
 810b518:	f840 3b04 	str.w	r3, [r0], #4
 810b51c:	eba0 0009 	sub.w	r0, r0, r9
 810b520:	1080      	asrs	r0, r0, #2
 810b522:	0146      	lsls	r6, r0, #5
 810b524:	6120      	str	r0, [r4, #16]
 810b526:	4618      	mov	r0, r3
 810b528:	f000 fbb4 	bl	810bc94 <__hi0bits>
 810b52c:	1a30      	subs	r0, r6, r0
 810b52e:	f8d8 6000 	ldr.w	r6, [r8]
 810b532:	42b0      	cmp	r0, r6
 810b534:	dd63      	ble.n	810b5fe <__gethex+0x286>
 810b536:	1b87      	subs	r7, r0, r6
 810b538:	4639      	mov	r1, r7
 810b53a:	4620      	mov	r0, r4
 810b53c:	f000 ff58 	bl	810c3f0 <__any_on>
 810b540:	4682      	mov	sl, r0
 810b542:	b1a8      	cbz	r0, 810b570 <__gethex+0x1f8>
 810b544:	1e7b      	subs	r3, r7, #1
 810b546:	1159      	asrs	r1, r3, #5
 810b548:	f003 021f 	and.w	r2, r3, #31
 810b54c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810b550:	f04f 0a01 	mov.w	sl, #1
 810b554:	fa0a f202 	lsl.w	r2, sl, r2
 810b558:	420a      	tst	r2, r1
 810b55a:	d009      	beq.n	810b570 <__gethex+0x1f8>
 810b55c:	4553      	cmp	r3, sl
 810b55e:	dd05      	ble.n	810b56c <__gethex+0x1f4>
 810b560:	1eb9      	subs	r1, r7, #2
 810b562:	4620      	mov	r0, r4
 810b564:	f000 ff44 	bl	810c3f0 <__any_on>
 810b568:	2800      	cmp	r0, #0
 810b56a:	d145      	bne.n	810b5f8 <__gethex+0x280>
 810b56c:	f04f 0a02 	mov.w	sl, #2
 810b570:	4639      	mov	r1, r7
 810b572:	4620      	mov	r0, r4
 810b574:	f7ff fe99 	bl	810b2aa <rshift>
 810b578:	443d      	add	r5, r7
 810b57a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b57e:	42ab      	cmp	r3, r5
 810b580:	da4c      	bge.n	810b61c <__gethex+0x2a4>
 810b582:	ee18 0a10 	vmov	r0, s16
 810b586:	4621      	mov	r1, r4
 810b588:	f000 fad2 	bl	810bb30 <_Bfree>
 810b58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810b58e:	2300      	movs	r3, #0
 810b590:	6013      	str	r3, [r2, #0]
 810b592:	27a3      	movs	r7, #163	; 0xa3
 810b594:	e785      	b.n	810b4a2 <__gethex+0x12a>
 810b596:	1e73      	subs	r3, r6, #1
 810b598:	9a05      	ldr	r2, [sp, #20]
 810b59a:	9303      	str	r3, [sp, #12]
 810b59c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b5a0:	4293      	cmp	r3, r2
 810b5a2:	d019      	beq.n	810b5d8 <__gethex+0x260>
 810b5a4:	f1bb 0f20 	cmp.w	fp, #32
 810b5a8:	d107      	bne.n	810b5ba <__gethex+0x242>
 810b5aa:	9b02      	ldr	r3, [sp, #8]
 810b5ac:	9a00      	ldr	r2, [sp, #0]
 810b5ae:	f843 2b04 	str.w	r2, [r3], #4
 810b5b2:	9302      	str	r3, [sp, #8]
 810b5b4:	2300      	movs	r3, #0
 810b5b6:	9300      	str	r3, [sp, #0]
 810b5b8:	469b      	mov	fp, r3
 810b5ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810b5be:	f7ff fec6 	bl	810b34e <__hexdig_fun>
 810b5c2:	9b00      	ldr	r3, [sp, #0]
 810b5c4:	f000 000f 	and.w	r0, r0, #15
 810b5c8:	fa00 f00b 	lsl.w	r0, r0, fp
 810b5cc:	4303      	orrs	r3, r0
 810b5ce:	9300      	str	r3, [sp, #0]
 810b5d0:	f10b 0b04 	add.w	fp, fp, #4
 810b5d4:	9b03      	ldr	r3, [sp, #12]
 810b5d6:	e00d      	b.n	810b5f4 <__gethex+0x27c>
 810b5d8:	9b03      	ldr	r3, [sp, #12]
 810b5da:	9a06      	ldr	r2, [sp, #24]
 810b5dc:	4413      	add	r3, r2
 810b5de:	42bb      	cmp	r3, r7
 810b5e0:	d3e0      	bcc.n	810b5a4 <__gethex+0x22c>
 810b5e2:	4618      	mov	r0, r3
 810b5e4:	9901      	ldr	r1, [sp, #4]
 810b5e6:	9307      	str	r3, [sp, #28]
 810b5e8:	4652      	mov	r2, sl
 810b5ea:	f001 fb2c 	bl	810cc46 <strncmp>
 810b5ee:	9b07      	ldr	r3, [sp, #28]
 810b5f0:	2800      	cmp	r0, #0
 810b5f2:	d1d7      	bne.n	810b5a4 <__gethex+0x22c>
 810b5f4:	461e      	mov	r6, r3
 810b5f6:	e78b      	b.n	810b510 <__gethex+0x198>
 810b5f8:	f04f 0a03 	mov.w	sl, #3
 810b5fc:	e7b8      	b.n	810b570 <__gethex+0x1f8>
 810b5fe:	da0a      	bge.n	810b616 <__gethex+0x29e>
 810b600:	1a37      	subs	r7, r6, r0
 810b602:	4621      	mov	r1, r4
 810b604:	ee18 0a10 	vmov	r0, s16
 810b608:	463a      	mov	r2, r7
 810b60a:	f000 fcad 	bl	810bf68 <__lshift>
 810b60e:	1bed      	subs	r5, r5, r7
 810b610:	4604      	mov	r4, r0
 810b612:	f100 0914 	add.w	r9, r0, #20
 810b616:	f04f 0a00 	mov.w	sl, #0
 810b61a:	e7ae      	b.n	810b57a <__gethex+0x202>
 810b61c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810b620:	42a8      	cmp	r0, r5
 810b622:	dd72      	ble.n	810b70a <__gethex+0x392>
 810b624:	1b45      	subs	r5, r0, r5
 810b626:	42ae      	cmp	r6, r5
 810b628:	dc36      	bgt.n	810b698 <__gethex+0x320>
 810b62a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b62e:	2b02      	cmp	r3, #2
 810b630:	d02a      	beq.n	810b688 <__gethex+0x310>
 810b632:	2b03      	cmp	r3, #3
 810b634:	d02c      	beq.n	810b690 <__gethex+0x318>
 810b636:	2b01      	cmp	r3, #1
 810b638:	d11c      	bne.n	810b674 <__gethex+0x2fc>
 810b63a:	42ae      	cmp	r6, r5
 810b63c:	d11a      	bne.n	810b674 <__gethex+0x2fc>
 810b63e:	2e01      	cmp	r6, #1
 810b640:	d112      	bne.n	810b668 <__gethex+0x2f0>
 810b642:	9a04      	ldr	r2, [sp, #16]
 810b644:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810b648:	6013      	str	r3, [r2, #0]
 810b64a:	2301      	movs	r3, #1
 810b64c:	6123      	str	r3, [r4, #16]
 810b64e:	f8c9 3000 	str.w	r3, [r9]
 810b652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b654:	2762      	movs	r7, #98	; 0x62
 810b656:	601c      	str	r4, [r3, #0]
 810b658:	e723      	b.n	810b4a2 <__gethex+0x12a>
 810b65a:	bf00      	nop
 810b65c:	0810d294 	.word	0x0810d294
 810b660:	0810d1b8 	.word	0x0810d1b8
 810b664:	0810d22c 	.word	0x0810d22c
 810b668:	1e71      	subs	r1, r6, #1
 810b66a:	4620      	mov	r0, r4
 810b66c:	f000 fec0 	bl	810c3f0 <__any_on>
 810b670:	2800      	cmp	r0, #0
 810b672:	d1e6      	bne.n	810b642 <__gethex+0x2ca>
 810b674:	ee18 0a10 	vmov	r0, s16
 810b678:	4621      	mov	r1, r4
 810b67a:	f000 fa59 	bl	810bb30 <_Bfree>
 810b67e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810b680:	2300      	movs	r3, #0
 810b682:	6013      	str	r3, [r2, #0]
 810b684:	2750      	movs	r7, #80	; 0x50
 810b686:	e70c      	b.n	810b4a2 <__gethex+0x12a>
 810b688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b68a:	2b00      	cmp	r3, #0
 810b68c:	d1f2      	bne.n	810b674 <__gethex+0x2fc>
 810b68e:	e7d8      	b.n	810b642 <__gethex+0x2ca>
 810b690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b692:	2b00      	cmp	r3, #0
 810b694:	d1d5      	bne.n	810b642 <__gethex+0x2ca>
 810b696:	e7ed      	b.n	810b674 <__gethex+0x2fc>
 810b698:	1e6f      	subs	r7, r5, #1
 810b69a:	f1ba 0f00 	cmp.w	sl, #0
 810b69e:	d131      	bne.n	810b704 <__gethex+0x38c>
 810b6a0:	b127      	cbz	r7, 810b6ac <__gethex+0x334>
 810b6a2:	4639      	mov	r1, r7
 810b6a4:	4620      	mov	r0, r4
 810b6a6:	f000 fea3 	bl	810c3f0 <__any_on>
 810b6aa:	4682      	mov	sl, r0
 810b6ac:	117b      	asrs	r3, r7, #5
 810b6ae:	2101      	movs	r1, #1
 810b6b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810b6b4:	f007 071f 	and.w	r7, r7, #31
 810b6b8:	fa01 f707 	lsl.w	r7, r1, r7
 810b6bc:	421f      	tst	r7, r3
 810b6be:	4629      	mov	r1, r5
 810b6c0:	4620      	mov	r0, r4
 810b6c2:	bf18      	it	ne
 810b6c4:	f04a 0a02 	orrne.w	sl, sl, #2
 810b6c8:	1b76      	subs	r6, r6, r5
 810b6ca:	f7ff fdee 	bl	810b2aa <rshift>
 810b6ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810b6d2:	2702      	movs	r7, #2
 810b6d4:	f1ba 0f00 	cmp.w	sl, #0
 810b6d8:	d048      	beq.n	810b76c <__gethex+0x3f4>
 810b6da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b6de:	2b02      	cmp	r3, #2
 810b6e0:	d015      	beq.n	810b70e <__gethex+0x396>
 810b6e2:	2b03      	cmp	r3, #3
 810b6e4:	d017      	beq.n	810b716 <__gethex+0x39e>
 810b6e6:	2b01      	cmp	r3, #1
 810b6e8:	d109      	bne.n	810b6fe <__gethex+0x386>
 810b6ea:	f01a 0f02 	tst.w	sl, #2
 810b6ee:	d006      	beq.n	810b6fe <__gethex+0x386>
 810b6f0:	f8d9 0000 	ldr.w	r0, [r9]
 810b6f4:	ea4a 0a00 	orr.w	sl, sl, r0
 810b6f8:	f01a 0f01 	tst.w	sl, #1
 810b6fc:	d10e      	bne.n	810b71c <__gethex+0x3a4>
 810b6fe:	f047 0710 	orr.w	r7, r7, #16
 810b702:	e033      	b.n	810b76c <__gethex+0x3f4>
 810b704:	f04f 0a01 	mov.w	sl, #1
 810b708:	e7d0      	b.n	810b6ac <__gethex+0x334>
 810b70a:	2701      	movs	r7, #1
 810b70c:	e7e2      	b.n	810b6d4 <__gethex+0x35c>
 810b70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b710:	f1c3 0301 	rsb	r3, r3, #1
 810b714:	9315      	str	r3, [sp, #84]	; 0x54
 810b716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b718:	2b00      	cmp	r3, #0
 810b71a:	d0f0      	beq.n	810b6fe <__gethex+0x386>
 810b71c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810b720:	f104 0314 	add.w	r3, r4, #20
 810b724:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810b728:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810b72c:	f04f 0c00 	mov.w	ip, #0
 810b730:	4618      	mov	r0, r3
 810b732:	f853 2b04 	ldr.w	r2, [r3], #4
 810b736:	f1b2 3fff 	cmp.w	r2, #4294967295
 810b73a:	d01c      	beq.n	810b776 <__gethex+0x3fe>
 810b73c:	3201      	adds	r2, #1
 810b73e:	6002      	str	r2, [r0, #0]
 810b740:	2f02      	cmp	r7, #2
 810b742:	f104 0314 	add.w	r3, r4, #20
 810b746:	d13f      	bne.n	810b7c8 <__gethex+0x450>
 810b748:	f8d8 2000 	ldr.w	r2, [r8]
 810b74c:	3a01      	subs	r2, #1
 810b74e:	42b2      	cmp	r2, r6
 810b750:	d10a      	bne.n	810b768 <__gethex+0x3f0>
 810b752:	1171      	asrs	r1, r6, #5
 810b754:	2201      	movs	r2, #1
 810b756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810b75a:	f006 061f 	and.w	r6, r6, #31
 810b75e:	fa02 f606 	lsl.w	r6, r2, r6
 810b762:	421e      	tst	r6, r3
 810b764:	bf18      	it	ne
 810b766:	4617      	movne	r7, r2
 810b768:	f047 0720 	orr.w	r7, r7, #32
 810b76c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b76e:	601c      	str	r4, [r3, #0]
 810b770:	9b04      	ldr	r3, [sp, #16]
 810b772:	601d      	str	r5, [r3, #0]
 810b774:	e695      	b.n	810b4a2 <__gethex+0x12a>
 810b776:	4299      	cmp	r1, r3
 810b778:	f843 cc04 	str.w	ip, [r3, #-4]
 810b77c:	d8d8      	bhi.n	810b730 <__gethex+0x3b8>
 810b77e:	68a3      	ldr	r3, [r4, #8]
 810b780:	459b      	cmp	fp, r3
 810b782:	db19      	blt.n	810b7b8 <__gethex+0x440>
 810b784:	6861      	ldr	r1, [r4, #4]
 810b786:	ee18 0a10 	vmov	r0, s16
 810b78a:	3101      	adds	r1, #1
 810b78c:	f000 f990 	bl	810bab0 <_Balloc>
 810b790:	4681      	mov	r9, r0
 810b792:	b918      	cbnz	r0, 810b79c <__gethex+0x424>
 810b794:	4b1a      	ldr	r3, [pc, #104]	; (810b800 <__gethex+0x488>)
 810b796:	4602      	mov	r2, r0
 810b798:	2184      	movs	r1, #132	; 0x84
 810b79a:	e6a8      	b.n	810b4ee <__gethex+0x176>
 810b79c:	6922      	ldr	r2, [r4, #16]
 810b79e:	3202      	adds	r2, #2
 810b7a0:	f104 010c 	add.w	r1, r4, #12
 810b7a4:	0092      	lsls	r2, r2, #2
 810b7a6:	300c      	adds	r0, #12
 810b7a8:	f000 f974 	bl	810ba94 <memcpy>
 810b7ac:	4621      	mov	r1, r4
 810b7ae:	ee18 0a10 	vmov	r0, s16
 810b7b2:	f000 f9bd 	bl	810bb30 <_Bfree>
 810b7b6:	464c      	mov	r4, r9
 810b7b8:	6923      	ldr	r3, [r4, #16]
 810b7ba:	1c5a      	adds	r2, r3, #1
 810b7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b7c0:	6122      	str	r2, [r4, #16]
 810b7c2:	2201      	movs	r2, #1
 810b7c4:	615a      	str	r2, [r3, #20]
 810b7c6:	e7bb      	b.n	810b740 <__gethex+0x3c8>
 810b7c8:	6922      	ldr	r2, [r4, #16]
 810b7ca:	455a      	cmp	r2, fp
 810b7cc:	dd0b      	ble.n	810b7e6 <__gethex+0x46e>
 810b7ce:	2101      	movs	r1, #1
 810b7d0:	4620      	mov	r0, r4
 810b7d2:	f7ff fd6a 	bl	810b2aa <rshift>
 810b7d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b7da:	3501      	adds	r5, #1
 810b7dc:	42ab      	cmp	r3, r5
 810b7de:	f6ff aed0 	blt.w	810b582 <__gethex+0x20a>
 810b7e2:	2701      	movs	r7, #1
 810b7e4:	e7c0      	b.n	810b768 <__gethex+0x3f0>
 810b7e6:	f016 061f 	ands.w	r6, r6, #31
 810b7ea:	d0fa      	beq.n	810b7e2 <__gethex+0x46a>
 810b7ec:	4453      	add	r3, sl
 810b7ee:	f1c6 0620 	rsb	r6, r6, #32
 810b7f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810b7f6:	f000 fa4d 	bl	810bc94 <__hi0bits>
 810b7fa:	42b0      	cmp	r0, r6
 810b7fc:	dbe7      	blt.n	810b7ce <__gethex+0x456>
 810b7fe:	e7f0      	b.n	810b7e2 <__gethex+0x46a>
 810b800:	0810d1b8 	.word	0x0810d1b8

0810b804 <L_shift>:
 810b804:	f1c2 0208 	rsb	r2, r2, #8
 810b808:	0092      	lsls	r2, r2, #2
 810b80a:	b570      	push	{r4, r5, r6, lr}
 810b80c:	f1c2 0620 	rsb	r6, r2, #32
 810b810:	6843      	ldr	r3, [r0, #4]
 810b812:	6804      	ldr	r4, [r0, #0]
 810b814:	fa03 f506 	lsl.w	r5, r3, r6
 810b818:	432c      	orrs	r4, r5
 810b81a:	40d3      	lsrs	r3, r2
 810b81c:	6004      	str	r4, [r0, #0]
 810b81e:	f840 3f04 	str.w	r3, [r0, #4]!
 810b822:	4288      	cmp	r0, r1
 810b824:	d3f4      	bcc.n	810b810 <L_shift+0xc>
 810b826:	bd70      	pop	{r4, r5, r6, pc}

0810b828 <__match>:
 810b828:	b530      	push	{r4, r5, lr}
 810b82a:	6803      	ldr	r3, [r0, #0]
 810b82c:	3301      	adds	r3, #1
 810b82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b832:	b914      	cbnz	r4, 810b83a <__match+0x12>
 810b834:	6003      	str	r3, [r0, #0]
 810b836:	2001      	movs	r0, #1
 810b838:	bd30      	pop	{r4, r5, pc}
 810b83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b83e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810b842:	2d19      	cmp	r5, #25
 810b844:	bf98      	it	ls
 810b846:	3220      	addls	r2, #32
 810b848:	42a2      	cmp	r2, r4
 810b84a:	d0f0      	beq.n	810b82e <__match+0x6>
 810b84c:	2000      	movs	r0, #0
 810b84e:	e7f3      	b.n	810b838 <__match+0x10>

0810b850 <__hexnan>:
 810b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b854:	680b      	ldr	r3, [r1, #0]
 810b856:	115e      	asrs	r6, r3, #5
 810b858:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810b85c:	f013 031f 	ands.w	r3, r3, #31
 810b860:	b087      	sub	sp, #28
 810b862:	bf18      	it	ne
 810b864:	3604      	addne	r6, #4
 810b866:	2500      	movs	r5, #0
 810b868:	1f37      	subs	r7, r6, #4
 810b86a:	4690      	mov	r8, r2
 810b86c:	6802      	ldr	r2, [r0, #0]
 810b86e:	9301      	str	r3, [sp, #4]
 810b870:	4682      	mov	sl, r0
 810b872:	f846 5c04 	str.w	r5, [r6, #-4]
 810b876:	46b9      	mov	r9, r7
 810b878:	463c      	mov	r4, r7
 810b87a:	9502      	str	r5, [sp, #8]
 810b87c:	46ab      	mov	fp, r5
 810b87e:	7851      	ldrb	r1, [r2, #1]
 810b880:	1c53      	adds	r3, r2, #1
 810b882:	9303      	str	r3, [sp, #12]
 810b884:	b341      	cbz	r1, 810b8d8 <__hexnan+0x88>
 810b886:	4608      	mov	r0, r1
 810b888:	9205      	str	r2, [sp, #20]
 810b88a:	9104      	str	r1, [sp, #16]
 810b88c:	f7ff fd5f 	bl	810b34e <__hexdig_fun>
 810b890:	2800      	cmp	r0, #0
 810b892:	d14f      	bne.n	810b934 <__hexnan+0xe4>
 810b894:	9904      	ldr	r1, [sp, #16]
 810b896:	9a05      	ldr	r2, [sp, #20]
 810b898:	2920      	cmp	r1, #32
 810b89a:	d818      	bhi.n	810b8ce <__hexnan+0x7e>
 810b89c:	9b02      	ldr	r3, [sp, #8]
 810b89e:	459b      	cmp	fp, r3
 810b8a0:	dd13      	ble.n	810b8ca <__hexnan+0x7a>
 810b8a2:	454c      	cmp	r4, r9
 810b8a4:	d206      	bcs.n	810b8b4 <__hexnan+0x64>
 810b8a6:	2d07      	cmp	r5, #7
 810b8a8:	dc04      	bgt.n	810b8b4 <__hexnan+0x64>
 810b8aa:	462a      	mov	r2, r5
 810b8ac:	4649      	mov	r1, r9
 810b8ae:	4620      	mov	r0, r4
 810b8b0:	f7ff ffa8 	bl	810b804 <L_shift>
 810b8b4:	4544      	cmp	r4, r8
 810b8b6:	d950      	bls.n	810b95a <__hexnan+0x10a>
 810b8b8:	2300      	movs	r3, #0
 810b8ba:	f1a4 0904 	sub.w	r9, r4, #4
 810b8be:	f844 3c04 	str.w	r3, [r4, #-4]
 810b8c2:	f8cd b008 	str.w	fp, [sp, #8]
 810b8c6:	464c      	mov	r4, r9
 810b8c8:	461d      	mov	r5, r3
 810b8ca:	9a03      	ldr	r2, [sp, #12]
 810b8cc:	e7d7      	b.n	810b87e <__hexnan+0x2e>
 810b8ce:	2929      	cmp	r1, #41	; 0x29
 810b8d0:	d156      	bne.n	810b980 <__hexnan+0x130>
 810b8d2:	3202      	adds	r2, #2
 810b8d4:	f8ca 2000 	str.w	r2, [sl]
 810b8d8:	f1bb 0f00 	cmp.w	fp, #0
 810b8dc:	d050      	beq.n	810b980 <__hexnan+0x130>
 810b8de:	454c      	cmp	r4, r9
 810b8e0:	d206      	bcs.n	810b8f0 <__hexnan+0xa0>
 810b8e2:	2d07      	cmp	r5, #7
 810b8e4:	dc04      	bgt.n	810b8f0 <__hexnan+0xa0>
 810b8e6:	462a      	mov	r2, r5
 810b8e8:	4649      	mov	r1, r9
 810b8ea:	4620      	mov	r0, r4
 810b8ec:	f7ff ff8a 	bl	810b804 <L_shift>
 810b8f0:	4544      	cmp	r4, r8
 810b8f2:	d934      	bls.n	810b95e <__hexnan+0x10e>
 810b8f4:	f1a8 0204 	sub.w	r2, r8, #4
 810b8f8:	4623      	mov	r3, r4
 810b8fa:	f853 1b04 	ldr.w	r1, [r3], #4
 810b8fe:	f842 1f04 	str.w	r1, [r2, #4]!
 810b902:	429f      	cmp	r7, r3
 810b904:	d2f9      	bcs.n	810b8fa <__hexnan+0xaa>
 810b906:	1b3b      	subs	r3, r7, r4
 810b908:	f023 0303 	bic.w	r3, r3, #3
 810b90c:	3304      	adds	r3, #4
 810b90e:	3401      	adds	r4, #1
 810b910:	3e03      	subs	r6, #3
 810b912:	42b4      	cmp	r4, r6
 810b914:	bf88      	it	hi
 810b916:	2304      	movhi	r3, #4
 810b918:	4443      	add	r3, r8
 810b91a:	2200      	movs	r2, #0
 810b91c:	f843 2b04 	str.w	r2, [r3], #4
 810b920:	429f      	cmp	r7, r3
 810b922:	d2fb      	bcs.n	810b91c <__hexnan+0xcc>
 810b924:	683b      	ldr	r3, [r7, #0]
 810b926:	b91b      	cbnz	r3, 810b930 <__hexnan+0xe0>
 810b928:	4547      	cmp	r7, r8
 810b92a:	d127      	bne.n	810b97c <__hexnan+0x12c>
 810b92c:	2301      	movs	r3, #1
 810b92e:	603b      	str	r3, [r7, #0]
 810b930:	2005      	movs	r0, #5
 810b932:	e026      	b.n	810b982 <__hexnan+0x132>
 810b934:	3501      	adds	r5, #1
 810b936:	2d08      	cmp	r5, #8
 810b938:	f10b 0b01 	add.w	fp, fp, #1
 810b93c:	dd06      	ble.n	810b94c <__hexnan+0xfc>
 810b93e:	4544      	cmp	r4, r8
 810b940:	d9c3      	bls.n	810b8ca <__hexnan+0x7a>
 810b942:	2300      	movs	r3, #0
 810b944:	f844 3c04 	str.w	r3, [r4, #-4]
 810b948:	2501      	movs	r5, #1
 810b94a:	3c04      	subs	r4, #4
 810b94c:	6822      	ldr	r2, [r4, #0]
 810b94e:	f000 000f 	and.w	r0, r0, #15
 810b952:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810b956:	6022      	str	r2, [r4, #0]
 810b958:	e7b7      	b.n	810b8ca <__hexnan+0x7a>
 810b95a:	2508      	movs	r5, #8
 810b95c:	e7b5      	b.n	810b8ca <__hexnan+0x7a>
 810b95e:	9b01      	ldr	r3, [sp, #4]
 810b960:	2b00      	cmp	r3, #0
 810b962:	d0df      	beq.n	810b924 <__hexnan+0xd4>
 810b964:	f04f 32ff 	mov.w	r2, #4294967295
 810b968:	f1c3 0320 	rsb	r3, r3, #32
 810b96c:	fa22 f303 	lsr.w	r3, r2, r3
 810b970:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810b974:	401a      	ands	r2, r3
 810b976:	f846 2c04 	str.w	r2, [r6, #-4]
 810b97a:	e7d3      	b.n	810b924 <__hexnan+0xd4>
 810b97c:	3f04      	subs	r7, #4
 810b97e:	e7d1      	b.n	810b924 <__hexnan+0xd4>
 810b980:	2004      	movs	r0, #4
 810b982:	b007      	add	sp, #28
 810b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b988 <_localeconv_r>:
 810b988:	4800      	ldr	r0, [pc, #0]	; (810b98c <_localeconv_r+0x4>)
 810b98a:	4770      	bx	lr
 810b98c:	1000016c 	.word	0x1000016c

0810b990 <__retarget_lock_init_recursive>:
 810b990:	4770      	bx	lr

0810b992 <__retarget_lock_acquire_recursive>:
 810b992:	4770      	bx	lr

0810b994 <__retarget_lock_release_recursive>:
 810b994:	4770      	bx	lr

0810b996 <__swhatbuf_r>:
 810b996:	b570      	push	{r4, r5, r6, lr}
 810b998:	460e      	mov	r6, r1
 810b99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b99e:	2900      	cmp	r1, #0
 810b9a0:	b096      	sub	sp, #88	; 0x58
 810b9a2:	4614      	mov	r4, r2
 810b9a4:	461d      	mov	r5, r3
 810b9a6:	da08      	bge.n	810b9ba <__swhatbuf_r+0x24>
 810b9a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810b9ac:	2200      	movs	r2, #0
 810b9ae:	602a      	str	r2, [r5, #0]
 810b9b0:	061a      	lsls	r2, r3, #24
 810b9b2:	d410      	bmi.n	810b9d6 <__swhatbuf_r+0x40>
 810b9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810b9b8:	e00e      	b.n	810b9d8 <__swhatbuf_r+0x42>
 810b9ba:	466a      	mov	r2, sp
 810b9bc:	f001 f9b6 	bl	810cd2c <_fstat_r>
 810b9c0:	2800      	cmp	r0, #0
 810b9c2:	dbf1      	blt.n	810b9a8 <__swhatbuf_r+0x12>
 810b9c4:	9a01      	ldr	r2, [sp, #4]
 810b9c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810b9ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810b9ce:	425a      	negs	r2, r3
 810b9d0:	415a      	adcs	r2, r3
 810b9d2:	602a      	str	r2, [r5, #0]
 810b9d4:	e7ee      	b.n	810b9b4 <__swhatbuf_r+0x1e>
 810b9d6:	2340      	movs	r3, #64	; 0x40
 810b9d8:	2000      	movs	r0, #0
 810b9da:	6023      	str	r3, [r4, #0]
 810b9dc:	b016      	add	sp, #88	; 0x58
 810b9de:	bd70      	pop	{r4, r5, r6, pc}

0810b9e0 <__smakebuf_r>:
 810b9e0:	898b      	ldrh	r3, [r1, #12]
 810b9e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b9e4:	079d      	lsls	r5, r3, #30
 810b9e6:	4606      	mov	r6, r0
 810b9e8:	460c      	mov	r4, r1
 810b9ea:	d507      	bpl.n	810b9fc <__smakebuf_r+0x1c>
 810b9ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810b9f0:	6023      	str	r3, [r4, #0]
 810b9f2:	6123      	str	r3, [r4, #16]
 810b9f4:	2301      	movs	r3, #1
 810b9f6:	6163      	str	r3, [r4, #20]
 810b9f8:	b002      	add	sp, #8
 810b9fa:	bd70      	pop	{r4, r5, r6, pc}
 810b9fc:	ab01      	add	r3, sp, #4
 810b9fe:	466a      	mov	r2, sp
 810ba00:	f7ff ffc9 	bl	810b996 <__swhatbuf_r>
 810ba04:	9900      	ldr	r1, [sp, #0]
 810ba06:	4605      	mov	r5, r0
 810ba08:	4630      	mov	r0, r6
 810ba0a:	f000 fd95 	bl	810c538 <_malloc_r>
 810ba0e:	b948      	cbnz	r0, 810ba24 <__smakebuf_r+0x44>
 810ba10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ba14:	059a      	lsls	r2, r3, #22
 810ba16:	d4ef      	bmi.n	810b9f8 <__smakebuf_r+0x18>
 810ba18:	f023 0303 	bic.w	r3, r3, #3
 810ba1c:	f043 0302 	orr.w	r3, r3, #2
 810ba20:	81a3      	strh	r3, [r4, #12]
 810ba22:	e7e3      	b.n	810b9ec <__smakebuf_r+0xc>
 810ba24:	4b0d      	ldr	r3, [pc, #52]	; (810ba5c <__smakebuf_r+0x7c>)
 810ba26:	62b3      	str	r3, [r6, #40]	; 0x28
 810ba28:	89a3      	ldrh	r3, [r4, #12]
 810ba2a:	6020      	str	r0, [r4, #0]
 810ba2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810ba30:	81a3      	strh	r3, [r4, #12]
 810ba32:	9b00      	ldr	r3, [sp, #0]
 810ba34:	6163      	str	r3, [r4, #20]
 810ba36:	9b01      	ldr	r3, [sp, #4]
 810ba38:	6120      	str	r0, [r4, #16]
 810ba3a:	b15b      	cbz	r3, 810ba54 <__smakebuf_r+0x74>
 810ba3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ba40:	4630      	mov	r0, r6
 810ba42:	f001 f985 	bl	810cd50 <_isatty_r>
 810ba46:	b128      	cbz	r0, 810ba54 <__smakebuf_r+0x74>
 810ba48:	89a3      	ldrh	r3, [r4, #12]
 810ba4a:	f023 0303 	bic.w	r3, r3, #3
 810ba4e:	f043 0301 	orr.w	r3, r3, #1
 810ba52:	81a3      	strh	r3, [r4, #12]
 810ba54:	89a0      	ldrh	r0, [r4, #12]
 810ba56:	4305      	orrs	r5, r0
 810ba58:	81a5      	strh	r5, [r4, #12]
 810ba5a:	e7cd      	b.n	810b9f8 <__smakebuf_r+0x18>
 810ba5c:	0810b109 	.word	0x0810b109

0810ba60 <malloc>:
 810ba60:	4b02      	ldr	r3, [pc, #8]	; (810ba6c <malloc+0xc>)
 810ba62:	4601      	mov	r1, r0
 810ba64:	6818      	ldr	r0, [r3, #0]
 810ba66:	f000 bd67 	b.w	810c538 <_malloc_r>
 810ba6a:	bf00      	nop
 810ba6c:	10000014 	.word	0x10000014

0810ba70 <__ascii_mbtowc>:
 810ba70:	b082      	sub	sp, #8
 810ba72:	b901      	cbnz	r1, 810ba76 <__ascii_mbtowc+0x6>
 810ba74:	a901      	add	r1, sp, #4
 810ba76:	b142      	cbz	r2, 810ba8a <__ascii_mbtowc+0x1a>
 810ba78:	b14b      	cbz	r3, 810ba8e <__ascii_mbtowc+0x1e>
 810ba7a:	7813      	ldrb	r3, [r2, #0]
 810ba7c:	600b      	str	r3, [r1, #0]
 810ba7e:	7812      	ldrb	r2, [r2, #0]
 810ba80:	1e10      	subs	r0, r2, #0
 810ba82:	bf18      	it	ne
 810ba84:	2001      	movne	r0, #1
 810ba86:	b002      	add	sp, #8
 810ba88:	4770      	bx	lr
 810ba8a:	4610      	mov	r0, r2
 810ba8c:	e7fb      	b.n	810ba86 <__ascii_mbtowc+0x16>
 810ba8e:	f06f 0001 	mvn.w	r0, #1
 810ba92:	e7f8      	b.n	810ba86 <__ascii_mbtowc+0x16>

0810ba94 <memcpy>:
 810ba94:	440a      	add	r2, r1
 810ba96:	4291      	cmp	r1, r2
 810ba98:	f100 33ff 	add.w	r3, r0, #4294967295
 810ba9c:	d100      	bne.n	810baa0 <memcpy+0xc>
 810ba9e:	4770      	bx	lr
 810baa0:	b510      	push	{r4, lr}
 810baa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810baa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 810baaa:	4291      	cmp	r1, r2
 810baac:	d1f9      	bne.n	810baa2 <memcpy+0xe>
 810baae:	bd10      	pop	{r4, pc}

0810bab0 <_Balloc>:
 810bab0:	b570      	push	{r4, r5, r6, lr}
 810bab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810bab4:	4604      	mov	r4, r0
 810bab6:	460d      	mov	r5, r1
 810bab8:	b976      	cbnz	r6, 810bad8 <_Balloc+0x28>
 810baba:	2010      	movs	r0, #16
 810babc:	f7ff ffd0 	bl	810ba60 <malloc>
 810bac0:	4602      	mov	r2, r0
 810bac2:	6260      	str	r0, [r4, #36]	; 0x24
 810bac4:	b920      	cbnz	r0, 810bad0 <_Balloc+0x20>
 810bac6:	4b18      	ldr	r3, [pc, #96]	; (810bb28 <_Balloc+0x78>)
 810bac8:	4818      	ldr	r0, [pc, #96]	; (810bb2c <_Balloc+0x7c>)
 810baca:	2166      	movs	r1, #102	; 0x66
 810bacc:	f001 f8ee 	bl	810ccac <__assert_func>
 810bad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bad4:	6006      	str	r6, [r0, #0]
 810bad6:	60c6      	str	r6, [r0, #12]
 810bad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810bada:	68f3      	ldr	r3, [r6, #12]
 810badc:	b183      	cbz	r3, 810bb00 <_Balloc+0x50>
 810bade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810bae0:	68db      	ldr	r3, [r3, #12]
 810bae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810bae6:	b9b8      	cbnz	r0, 810bb18 <_Balloc+0x68>
 810bae8:	2101      	movs	r1, #1
 810baea:	fa01 f605 	lsl.w	r6, r1, r5
 810baee:	1d72      	adds	r2, r6, #5
 810baf0:	0092      	lsls	r2, r2, #2
 810baf2:	4620      	mov	r0, r4
 810baf4:	f000 fc9d 	bl	810c432 <_calloc_r>
 810baf8:	b160      	cbz	r0, 810bb14 <_Balloc+0x64>
 810bafa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810bafe:	e00e      	b.n	810bb1e <_Balloc+0x6e>
 810bb00:	2221      	movs	r2, #33	; 0x21
 810bb02:	2104      	movs	r1, #4
 810bb04:	4620      	mov	r0, r4
 810bb06:	f000 fc94 	bl	810c432 <_calloc_r>
 810bb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810bb0c:	60f0      	str	r0, [r6, #12]
 810bb0e:	68db      	ldr	r3, [r3, #12]
 810bb10:	2b00      	cmp	r3, #0
 810bb12:	d1e4      	bne.n	810bade <_Balloc+0x2e>
 810bb14:	2000      	movs	r0, #0
 810bb16:	bd70      	pop	{r4, r5, r6, pc}
 810bb18:	6802      	ldr	r2, [r0, #0]
 810bb1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810bb1e:	2300      	movs	r3, #0
 810bb20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810bb24:	e7f7      	b.n	810bb16 <_Balloc+0x66>
 810bb26:	bf00      	nop
 810bb28:	0810d146 	.word	0x0810d146
 810bb2c:	0810d2a8 	.word	0x0810d2a8

0810bb30 <_Bfree>:
 810bb30:	b570      	push	{r4, r5, r6, lr}
 810bb32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810bb34:	4605      	mov	r5, r0
 810bb36:	460c      	mov	r4, r1
 810bb38:	b976      	cbnz	r6, 810bb58 <_Bfree+0x28>
 810bb3a:	2010      	movs	r0, #16
 810bb3c:	f7ff ff90 	bl	810ba60 <malloc>
 810bb40:	4602      	mov	r2, r0
 810bb42:	6268      	str	r0, [r5, #36]	; 0x24
 810bb44:	b920      	cbnz	r0, 810bb50 <_Bfree+0x20>
 810bb46:	4b09      	ldr	r3, [pc, #36]	; (810bb6c <_Bfree+0x3c>)
 810bb48:	4809      	ldr	r0, [pc, #36]	; (810bb70 <_Bfree+0x40>)
 810bb4a:	218a      	movs	r1, #138	; 0x8a
 810bb4c:	f001 f8ae 	bl	810ccac <__assert_func>
 810bb50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bb54:	6006      	str	r6, [r0, #0]
 810bb56:	60c6      	str	r6, [r0, #12]
 810bb58:	b13c      	cbz	r4, 810bb6a <_Bfree+0x3a>
 810bb5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810bb5c:	6862      	ldr	r2, [r4, #4]
 810bb5e:	68db      	ldr	r3, [r3, #12]
 810bb60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810bb64:	6021      	str	r1, [r4, #0]
 810bb66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810bb6a:	bd70      	pop	{r4, r5, r6, pc}
 810bb6c:	0810d146 	.word	0x0810d146
 810bb70:	0810d2a8 	.word	0x0810d2a8

0810bb74 <__multadd>:
 810bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bb78:	690d      	ldr	r5, [r1, #16]
 810bb7a:	4607      	mov	r7, r0
 810bb7c:	460c      	mov	r4, r1
 810bb7e:	461e      	mov	r6, r3
 810bb80:	f101 0c14 	add.w	ip, r1, #20
 810bb84:	2000      	movs	r0, #0
 810bb86:	f8dc 3000 	ldr.w	r3, [ip]
 810bb8a:	b299      	uxth	r1, r3
 810bb8c:	fb02 6101 	mla	r1, r2, r1, r6
 810bb90:	0c1e      	lsrs	r6, r3, #16
 810bb92:	0c0b      	lsrs	r3, r1, #16
 810bb94:	fb02 3306 	mla	r3, r2, r6, r3
 810bb98:	b289      	uxth	r1, r1
 810bb9a:	3001      	adds	r0, #1
 810bb9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810bba0:	4285      	cmp	r5, r0
 810bba2:	f84c 1b04 	str.w	r1, [ip], #4
 810bba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810bbaa:	dcec      	bgt.n	810bb86 <__multadd+0x12>
 810bbac:	b30e      	cbz	r6, 810bbf2 <__multadd+0x7e>
 810bbae:	68a3      	ldr	r3, [r4, #8]
 810bbb0:	42ab      	cmp	r3, r5
 810bbb2:	dc19      	bgt.n	810bbe8 <__multadd+0x74>
 810bbb4:	6861      	ldr	r1, [r4, #4]
 810bbb6:	4638      	mov	r0, r7
 810bbb8:	3101      	adds	r1, #1
 810bbba:	f7ff ff79 	bl	810bab0 <_Balloc>
 810bbbe:	4680      	mov	r8, r0
 810bbc0:	b928      	cbnz	r0, 810bbce <__multadd+0x5a>
 810bbc2:	4602      	mov	r2, r0
 810bbc4:	4b0c      	ldr	r3, [pc, #48]	; (810bbf8 <__multadd+0x84>)
 810bbc6:	480d      	ldr	r0, [pc, #52]	; (810bbfc <__multadd+0x88>)
 810bbc8:	21b5      	movs	r1, #181	; 0xb5
 810bbca:	f001 f86f 	bl	810ccac <__assert_func>
 810bbce:	6922      	ldr	r2, [r4, #16]
 810bbd0:	3202      	adds	r2, #2
 810bbd2:	f104 010c 	add.w	r1, r4, #12
 810bbd6:	0092      	lsls	r2, r2, #2
 810bbd8:	300c      	adds	r0, #12
 810bbda:	f7ff ff5b 	bl	810ba94 <memcpy>
 810bbde:	4621      	mov	r1, r4
 810bbe0:	4638      	mov	r0, r7
 810bbe2:	f7ff ffa5 	bl	810bb30 <_Bfree>
 810bbe6:	4644      	mov	r4, r8
 810bbe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810bbec:	3501      	adds	r5, #1
 810bbee:	615e      	str	r6, [r3, #20]
 810bbf0:	6125      	str	r5, [r4, #16]
 810bbf2:	4620      	mov	r0, r4
 810bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bbf8:	0810d1b8 	.word	0x0810d1b8
 810bbfc:	0810d2a8 	.word	0x0810d2a8

0810bc00 <__s2b>:
 810bc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bc04:	460c      	mov	r4, r1
 810bc06:	4615      	mov	r5, r2
 810bc08:	461f      	mov	r7, r3
 810bc0a:	2209      	movs	r2, #9
 810bc0c:	3308      	adds	r3, #8
 810bc0e:	4606      	mov	r6, r0
 810bc10:	fb93 f3f2 	sdiv	r3, r3, r2
 810bc14:	2100      	movs	r1, #0
 810bc16:	2201      	movs	r2, #1
 810bc18:	429a      	cmp	r2, r3
 810bc1a:	db09      	blt.n	810bc30 <__s2b+0x30>
 810bc1c:	4630      	mov	r0, r6
 810bc1e:	f7ff ff47 	bl	810bab0 <_Balloc>
 810bc22:	b940      	cbnz	r0, 810bc36 <__s2b+0x36>
 810bc24:	4602      	mov	r2, r0
 810bc26:	4b19      	ldr	r3, [pc, #100]	; (810bc8c <__s2b+0x8c>)
 810bc28:	4819      	ldr	r0, [pc, #100]	; (810bc90 <__s2b+0x90>)
 810bc2a:	21ce      	movs	r1, #206	; 0xce
 810bc2c:	f001 f83e 	bl	810ccac <__assert_func>
 810bc30:	0052      	lsls	r2, r2, #1
 810bc32:	3101      	adds	r1, #1
 810bc34:	e7f0      	b.n	810bc18 <__s2b+0x18>
 810bc36:	9b08      	ldr	r3, [sp, #32]
 810bc38:	6143      	str	r3, [r0, #20]
 810bc3a:	2d09      	cmp	r5, #9
 810bc3c:	f04f 0301 	mov.w	r3, #1
 810bc40:	6103      	str	r3, [r0, #16]
 810bc42:	dd16      	ble.n	810bc72 <__s2b+0x72>
 810bc44:	f104 0909 	add.w	r9, r4, #9
 810bc48:	46c8      	mov	r8, r9
 810bc4a:	442c      	add	r4, r5
 810bc4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bc50:	4601      	mov	r1, r0
 810bc52:	3b30      	subs	r3, #48	; 0x30
 810bc54:	220a      	movs	r2, #10
 810bc56:	4630      	mov	r0, r6
 810bc58:	f7ff ff8c 	bl	810bb74 <__multadd>
 810bc5c:	45a0      	cmp	r8, r4
 810bc5e:	d1f5      	bne.n	810bc4c <__s2b+0x4c>
 810bc60:	f1a5 0408 	sub.w	r4, r5, #8
 810bc64:	444c      	add	r4, r9
 810bc66:	1b2d      	subs	r5, r5, r4
 810bc68:	1963      	adds	r3, r4, r5
 810bc6a:	42bb      	cmp	r3, r7
 810bc6c:	db04      	blt.n	810bc78 <__s2b+0x78>
 810bc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bc72:	340a      	adds	r4, #10
 810bc74:	2509      	movs	r5, #9
 810bc76:	e7f6      	b.n	810bc66 <__s2b+0x66>
 810bc78:	f814 3b01 	ldrb.w	r3, [r4], #1
 810bc7c:	4601      	mov	r1, r0
 810bc7e:	3b30      	subs	r3, #48	; 0x30
 810bc80:	220a      	movs	r2, #10
 810bc82:	4630      	mov	r0, r6
 810bc84:	f7ff ff76 	bl	810bb74 <__multadd>
 810bc88:	e7ee      	b.n	810bc68 <__s2b+0x68>
 810bc8a:	bf00      	nop
 810bc8c:	0810d1b8 	.word	0x0810d1b8
 810bc90:	0810d2a8 	.word	0x0810d2a8

0810bc94 <__hi0bits>:
 810bc94:	0c03      	lsrs	r3, r0, #16
 810bc96:	041b      	lsls	r3, r3, #16
 810bc98:	b9d3      	cbnz	r3, 810bcd0 <__hi0bits+0x3c>
 810bc9a:	0400      	lsls	r0, r0, #16
 810bc9c:	2310      	movs	r3, #16
 810bc9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810bca2:	bf04      	itt	eq
 810bca4:	0200      	lsleq	r0, r0, #8
 810bca6:	3308      	addeq	r3, #8
 810bca8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810bcac:	bf04      	itt	eq
 810bcae:	0100      	lsleq	r0, r0, #4
 810bcb0:	3304      	addeq	r3, #4
 810bcb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810bcb6:	bf04      	itt	eq
 810bcb8:	0080      	lsleq	r0, r0, #2
 810bcba:	3302      	addeq	r3, #2
 810bcbc:	2800      	cmp	r0, #0
 810bcbe:	db05      	blt.n	810bccc <__hi0bits+0x38>
 810bcc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810bcc4:	f103 0301 	add.w	r3, r3, #1
 810bcc8:	bf08      	it	eq
 810bcca:	2320      	moveq	r3, #32
 810bccc:	4618      	mov	r0, r3
 810bcce:	4770      	bx	lr
 810bcd0:	2300      	movs	r3, #0
 810bcd2:	e7e4      	b.n	810bc9e <__hi0bits+0xa>

0810bcd4 <__lo0bits>:
 810bcd4:	6803      	ldr	r3, [r0, #0]
 810bcd6:	f013 0207 	ands.w	r2, r3, #7
 810bcda:	4601      	mov	r1, r0
 810bcdc:	d00b      	beq.n	810bcf6 <__lo0bits+0x22>
 810bcde:	07da      	lsls	r2, r3, #31
 810bce0:	d423      	bmi.n	810bd2a <__lo0bits+0x56>
 810bce2:	0798      	lsls	r0, r3, #30
 810bce4:	bf49      	itett	mi
 810bce6:	085b      	lsrmi	r3, r3, #1
 810bce8:	089b      	lsrpl	r3, r3, #2
 810bcea:	2001      	movmi	r0, #1
 810bcec:	600b      	strmi	r3, [r1, #0]
 810bcee:	bf5c      	itt	pl
 810bcf0:	600b      	strpl	r3, [r1, #0]
 810bcf2:	2002      	movpl	r0, #2
 810bcf4:	4770      	bx	lr
 810bcf6:	b298      	uxth	r0, r3
 810bcf8:	b9a8      	cbnz	r0, 810bd26 <__lo0bits+0x52>
 810bcfa:	0c1b      	lsrs	r3, r3, #16
 810bcfc:	2010      	movs	r0, #16
 810bcfe:	b2da      	uxtb	r2, r3
 810bd00:	b90a      	cbnz	r2, 810bd06 <__lo0bits+0x32>
 810bd02:	3008      	adds	r0, #8
 810bd04:	0a1b      	lsrs	r3, r3, #8
 810bd06:	071a      	lsls	r2, r3, #28
 810bd08:	bf04      	itt	eq
 810bd0a:	091b      	lsreq	r3, r3, #4
 810bd0c:	3004      	addeq	r0, #4
 810bd0e:	079a      	lsls	r2, r3, #30
 810bd10:	bf04      	itt	eq
 810bd12:	089b      	lsreq	r3, r3, #2
 810bd14:	3002      	addeq	r0, #2
 810bd16:	07da      	lsls	r2, r3, #31
 810bd18:	d403      	bmi.n	810bd22 <__lo0bits+0x4e>
 810bd1a:	085b      	lsrs	r3, r3, #1
 810bd1c:	f100 0001 	add.w	r0, r0, #1
 810bd20:	d005      	beq.n	810bd2e <__lo0bits+0x5a>
 810bd22:	600b      	str	r3, [r1, #0]
 810bd24:	4770      	bx	lr
 810bd26:	4610      	mov	r0, r2
 810bd28:	e7e9      	b.n	810bcfe <__lo0bits+0x2a>
 810bd2a:	2000      	movs	r0, #0
 810bd2c:	4770      	bx	lr
 810bd2e:	2020      	movs	r0, #32
 810bd30:	4770      	bx	lr
	...

0810bd34 <__i2b>:
 810bd34:	b510      	push	{r4, lr}
 810bd36:	460c      	mov	r4, r1
 810bd38:	2101      	movs	r1, #1
 810bd3a:	f7ff feb9 	bl	810bab0 <_Balloc>
 810bd3e:	4602      	mov	r2, r0
 810bd40:	b928      	cbnz	r0, 810bd4e <__i2b+0x1a>
 810bd42:	4b05      	ldr	r3, [pc, #20]	; (810bd58 <__i2b+0x24>)
 810bd44:	4805      	ldr	r0, [pc, #20]	; (810bd5c <__i2b+0x28>)
 810bd46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810bd4a:	f000 ffaf 	bl	810ccac <__assert_func>
 810bd4e:	2301      	movs	r3, #1
 810bd50:	6144      	str	r4, [r0, #20]
 810bd52:	6103      	str	r3, [r0, #16]
 810bd54:	bd10      	pop	{r4, pc}
 810bd56:	bf00      	nop
 810bd58:	0810d1b8 	.word	0x0810d1b8
 810bd5c:	0810d2a8 	.word	0x0810d2a8

0810bd60 <__multiply>:
 810bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bd64:	4691      	mov	r9, r2
 810bd66:	690a      	ldr	r2, [r1, #16]
 810bd68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810bd6c:	429a      	cmp	r2, r3
 810bd6e:	bfb8      	it	lt
 810bd70:	460b      	movlt	r3, r1
 810bd72:	460c      	mov	r4, r1
 810bd74:	bfbc      	itt	lt
 810bd76:	464c      	movlt	r4, r9
 810bd78:	4699      	movlt	r9, r3
 810bd7a:	6927      	ldr	r7, [r4, #16]
 810bd7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810bd80:	68a3      	ldr	r3, [r4, #8]
 810bd82:	6861      	ldr	r1, [r4, #4]
 810bd84:	eb07 060a 	add.w	r6, r7, sl
 810bd88:	42b3      	cmp	r3, r6
 810bd8a:	b085      	sub	sp, #20
 810bd8c:	bfb8      	it	lt
 810bd8e:	3101      	addlt	r1, #1
 810bd90:	f7ff fe8e 	bl	810bab0 <_Balloc>
 810bd94:	b930      	cbnz	r0, 810bda4 <__multiply+0x44>
 810bd96:	4602      	mov	r2, r0
 810bd98:	4b44      	ldr	r3, [pc, #272]	; (810beac <__multiply+0x14c>)
 810bd9a:	4845      	ldr	r0, [pc, #276]	; (810beb0 <__multiply+0x150>)
 810bd9c:	f240 115d 	movw	r1, #349	; 0x15d
 810bda0:	f000 ff84 	bl	810ccac <__assert_func>
 810bda4:	f100 0514 	add.w	r5, r0, #20
 810bda8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bdac:	462b      	mov	r3, r5
 810bdae:	2200      	movs	r2, #0
 810bdb0:	4543      	cmp	r3, r8
 810bdb2:	d321      	bcc.n	810bdf8 <__multiply+0x98>
 810bdb4:	f104 0314 	add.w	r3, r4, #20
 810bdb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810bdbc:	f109 0314 	add.w	r3, r9, #20
 810bdc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810bdc4:	9202      	str	r2, [sp, #8]
 810bdc6:	1b3a      	subs	r2, r7, r4
 810bdc8:	3a15      	subs	r2, #21
 810bdca:	f022 0203 	bic.w	r2, r2, #3
 810bdce:	3204      	adds	r2, #4
 810bdd0:	f104 0115 	add.w	r1, r4, #21
 810bdd4:	428f      	cmp	r7, r1
 810bdd6:	bf38      	it	cc
 810bdd8:	2204      	movcc	r2, #4
 810bdda:	9201      	str	r2, [sp, #4]
 810bddc:	9a02      	ldr	r2, [sp, #8]
 810bdde:	9303      	str	r3, [sp, #12]
 810bde0:	429a      	cmp	r2, r3
 810bde2:	d80c      	bhi.n	810bdfe <__multiply+0x9e>
 810bde4:	2e00      	cmp	r6, #0
 810bde6:	dd03      	ble.n	810bdf0 <__multiply+0x90>
 810bde8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bdec:	2b00      	cmp	r3, #0
 810bdee:	d05a      	beq.n	810bea6 <__multiply+0x146>
 810bdf0:	6106      	str	r6, [r0, #16]
 810bdf2:	b005      	add	sp, #20
 810bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bdf8:	f843 2b04 	str.w	r2, [r3], #4
 810bdfc:	e7d8      	b.n	810bdb0 <__multiply+0x50>
 810bdfe:	f8b3 a000 	ldrh.w	sl, [r3]
 810be02:	f1ba 0f00 	cmp.w	sl, #0
 810be06:	d024      	beq.n	810be52 <__multiply+0xf2>
 810be08:	f104 0e14 	add.w	lr, r4, #20
 810be0c:	46a9      	mov	r9, r5
 810be0e:	f04f 0c00 	mov.w	ip, #0
 810be12:	f85e 2b04 	ldr.w	r2, [lr], #4
 810be16:	f8d9 1000 	ldr.w	r1, [r9]
 810be1a:	fa1f fb82 	uxth.w	fp, r2
 810be1e:	b289      	uxth	r1, r1
 810be20:	fb0a 110b 	mla	r1, sl, fp, r1
 810be24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810be28:	f8d9 2000 	ldr.w	r2, [r9]
 810be2c:	4461      	add	r1, ip
 810be2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810be32:	fb0a c20b 	mla	r2, sl, fp, ip
 810be36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810be3a:	b289      	uxth	r1, r1
 810be3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810be40:	4577      	cmp	r7, lr
 810be42:	f849 1b04 	str.w	r1, [r9], #4
 810be46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810be4a:	d8e2      	bhi.n	810be12 <__multiply+0xb2>
 810be4c:	9a01      	ldr	r2, [sp, #4]
 810be4e:	f845 c002 	str.w	ip, [r5, r2]
 810be52:	9a03      	ldr	r2, [sp, #12]
 810be54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810be58:	3304      	adds	r3, #4
 810be5a:	f1b9 0f00 	cmp.w	r9, #0
 810be5e:	d020      	beq.n	810bea2 <__multiply+0x142>
 810be60:	6829      	ldr	r1, [r5, #0]
 810be62:	f104 0c14 	add.w	ip, r4, #20
 810be66:	46ae      	mov	lr, r5
 810be68:	f04f 0a00 	mov.w	sl, #0
 810be6c:	f8bc b000 	ldrh.w	fp, [ip]
 810be70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810be74:	fb09 220b 	mla	r2, r9, fp, r2
 810be78:	4492      	add	sl, r2
 810be7a:	b289      	uxth	r1, r1
 810be7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810be80:	f84e 1b04 	str.w	r1, [lr], #4
 810be84:	f85c 2b04 	ldr.w	r2, [ip], #4
 810be88:	f8be 1000 	ldrh.w	r1, [lr]
 810be8c:	0c12      	lsrs	r2, r2, #16
 810be8e:	fb09 1102 	mla	r1, r9, r2, r1
 810be92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810be96:	4567      	cmp	r7, ip
 810be98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810be9c:	d8e6      	bhi.n	810be6c <__multiply+0x10c>
 810be9e:	9a01      	ldr	r2, [sp, #4]
 810bea0:	50a9      	str	r1, [r5, r2]
 810bea2:	3504      	adds	r5, #4
 810bea4:	e79a      	b.n	810bddc <__multiply+0x7c>
 810bea6:	3e01      	subs	r6, #1
 810bea8:	e79c      	b.n	810bde4 <__multiply+0x84>
 810beaa:	bf00      	nop
 810beac:	0810d1b8 	.word	0x0810d1b8
 810beb0:	0810d2a8 	.word	0x0810d2a8

0810beb4 <__pow5mult>:
 810beb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810beb8:	4615      	mov	r5, r2
 810beba:	f012 0203 	ands.w	r2, r2, #3
 810bebe:	4606      	mov	r6, r0
 810bec0:	460f      	mov	r7, r1
 810bec2:	d007      	beq.n	810bed4 <__pow5mult+0x20>
 810bec4:	4c25      	ldr	r4, [pc, #148]	; (810bf5c <__pow5mult+0xa8>)
 810bec6:	3a01      	subs	r2, #1
 810bec8:	2300      	movs	r3, #0
 810beca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bece:	f7ff fe51 	bl	810bb74 <__multadd>
 810bed2:	4607      	mov	r7, r0
 810bed4:	10ad      	asrs	r5, r5, #2
 810bed6:	d03d      	beq.n	810bf54 <__pow5mult+0xa0>
 810bed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810beda:	b97c      	cbnz	r4, 810befc <__pow5mult+0x48>
 810bedc:	2010      	movs	r0, #16
 810bede:	f7ff fdbf 	bl	810ba60 <malloc>
 810bee2:	4602      	mov	r2, r0
 810bee4:	6270      	str	r0, [r6, #36]	; 0x24
 810bee6:	b928      	cbnz	r0, 810bef4 <__pow5mult+0x40>
 810bee8:	4b1d      	ldr	r3, [pc, #116]	; (810bf60 <__pow5mult+0xac>)
 810beea:	481e      	ldr	r0, [pc, #120]	; (810bf64 <__pow5mult+0xb0>)
 810beec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810bef0:	f000 fedc 	bl	810ccac <__assert_func>
 810bef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bef8:	6004      	str	r4, [r0, #0]
 810befa:	60c4      	str	r4, [r0, #12]
 810befc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810bf00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bf04:	b94c      	cbnz	r4, 810bf1a <__pow5mult+0x66>
 810bf06:	f240 2171 	movw	r1, #625	; 0x271
 810bf0a:	4630      	mov	r0, r6
 810bf0c:	f7ff ff12 	bl	810bd34 <__i2b>
 810bf10:	2300      	movs	r3, #0
 810bf12:	f8c8 0008 	str.w	r0, [r8, #8]
 810bf16:	4604      	mov	r4, r0
 810bf18:	6003      	str	r3, [r0, #0]
 810bf1a:	f04f 0900 	mov.w	r9, #0
 810bf1e:	07eb      	lsls	r3, r5, #31
 810bf20:	d50a      	bpl.n	810bf38 <__pow5mult+0x84>
 810bf22:	4639      	mov	r1, r7
 810bf24:	4622      	mov	r2, r4
 810bf26:	4630      	mov	r0, r6
 810bf28:	f7ff ff1a 	bl	810bd60 <__multiply>
 810bf2c:	4639      	mov	r1, r7
 810bf2e:	4680      	mov	r8, r0
 810bf30:	4630      	mov	r0, r6
 810bf32:	f7ff fdfd 	bl	810bb30 <_Bfree>
 810bf36:	4647      	mov	r7, r8
 810bf38:	106d      	asrs	r5, r5, #1
 810bf3a:	d00b      	beq.n	810bf54 <__pow5mult+0xa0>
 810bf3c:	6820      	ldr	r0, [r4, #0]
 810bf3e:	b938      	cbnz	r0, 810bf50 <__pow5mult+0x9c>
 810bf40:	4622      	mov	r2, r4
 810bf42:	4621      	mov	r1, r4
 810bf44:	4630      	mov	r0, r6
 810bf46:	f7ff ff0b 	bl	810bd60 <__multiply>
 810bf4a:	6020      	str	r0, [r4, #0]
 810bf4c:	f8c0 9000 	str.w	r9, [r0]
 810bf50:	4604      	mov	r4, r0
 810bf52:	e7e4      	b.n	810bf1e <__pow5mult+0x6a>
 810bf54:	4638      	mov	r0, r7
 810bf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bf5a:	bf00      	nop
 810bf5c:	0810d3f8 	.word	0x0810d3f8
 810bf60:	0810d146 	.word	0x0810d146
 810bf64:	0810d2a8 	.word	0x0810d2a8

0810bf68 <__lshift>:
 810bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bf6c:	460c      	mov	r4, r1
 810bf6e:	6849      	ldr	r1, [r1, #4]
 810bf70:	6923      	ldr	r3, [r4, #16]
 810bf72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810bf76:	68a3      	ldr	r3, [r4, #8]
 810bf78:	4607      	mov	r7, r0
 810bf7a:	4691      	mov	r9, r2
 810bf7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bf80:	f108 0601 	add.w	r6, r8, #1
 810bf84:	42b3      	cmp	r3, r6
 810bf86:	db0b      	blt.n	810bfa0 <__lshift+0x38>
 810bf88:	4638      	mov	r0, r7
 810bf8a:	f7ff fd91 	bl	810bab0 <_Balloc>
 810bf8e:	4605      	mov	r5, r0
 810bf90:	b948      	cbnz	r0, 810bfa6 <__lshift+0x3e>
 810bf92:	4602      	mov	r2, r0
 810bf94:	4b2a      	ldr	r3, [pc, #168]	; (810c040 <__lshift+0xd8>)
 810bf96:	482b      	ldr	r0, [pc, #172]	; (810c044 <__lshift+0xdc>)
 810bf98:	f240 11d9 	movw	r1, #473	; 0x1d9
 810bf9c:	f000 fe86 	bl	810ccac <__assert_func>
 810bfa0:	3101      	adds	r1, #1
 810bfa2:	005b      	lsls	r3, r3, #1
 810bfa4:	e7ee      	b.n	810bf84 <__lshift+0x1c>
 810bfa6:	2300      	movs	r3, #0
 810bfa8:	f100 0114 	add.w	r1, r0, #20
 810bfac:	f100 0210 	add.w	r2, r0, #16
 810bfb0:	4618      	mov	r0, r3
 810bfb2:	4553      	cmp	r3, sl
 810bfb4:	db37      	blt.n	810c026 <__lshift+0xbe>
 810bfb6:	6920      	ldr	r0, [r4, #16]
 810bfb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810bfbc:	f104 0314 	add.w	r3, r4, #20
 810bfc0:	f019 091f 	ands.w	r9, r9, #31
 810bfc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810bfc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810bfcc:	d02f      	beq.n	810c02e <__lshift+0xc6>
 810bfce:	f1c9 0e20 	rsb	lr, r9, #32
 810bfd2:	468a      	mov	sl, r1
 810bfd4:	f04f 0c00 	mov.w	ip, #0
 810bfd8:	681a      	ldr	r2, [r3, #0]
 810bfda:	fa02 f209 	lsl.w	r2, r2, r9
 810bfde:	ea42 020c 	orr.w	r2, r2, ip
 810bfe2:	f84a 2b04 	str.w	r2, [sl], #4
 810bfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 810bfea:	4298      	cmp	r0, r3
 810bfec:	fa22 fc0e 	lsr.w	ip, r2, lr
 810bff0:	d8f2      	bhi.n	810bfd8 <__lshift+0x70>
 810bff2:	1b03      	subs	r3, r0, r4
 810bff4:	3b15      	subs	r3, #21
 810bff6:	f023 0303 	bic.w	r3, r3, #3
 810bffa:	3304      	adds	r3, #4
 810bffc:	f104 0215 	add.w	r2, r4, #21
 810c000:	4290      	cmp	r0, r2
 810c002:	bf38      	it	cc
 810c004:	2304      	movcc	r3, #4
 810c006:	f841 c003 	str.w	ip, [r1, r3]
 810c00a:	f1bc 0f00 	cmp.w	ip, #0
 810c00e:	d001      	beq.n	810c014 <__lshift+0xac>
 810c010:	f108 0602 	add.w	r6, r8, #2
 810c014:	3e01      	subs	r6, #1
 810c016:	4638      	mov	r0, r7
 810c018:	612e      	str	r6, [r5, #16]
 810c01a:	4621      	mov	r1, r4
 810c01c:	f7ff fd88 	bl	810bb30 <_Bfree>
 810c020:	4628      	mov	r0, r5
 810c022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c026:	f842 0f04 	str.w	r0, [r2, #4]!
 810c02a:	3301      	adds	r3, #1
 810c02c:	e7c1      	b.n	810bfb2 <__lshift+0x4a>
 810c02e:	3904      	subs	r1, #4
 810c030:	f853 2b04 	ldr.w	r2, [r3], #4
 810c034:	f841 2f04 	str.w	r2, [r1, #4]!
 810c038:	4298      	cmp	r0, r3
 810c03a:	d8f9      	bhi.n	810c030 <__lshift+0xc8>
 810c03c:	e7ea      	b.n	810c014 <__lshift+0xac>
 810c03e:	bf00      	nop
 810c040:	0810d1b8 	.word	0x0810d1b8
 810c044:	0810d2a8 	.word	0x0810d2a8

0810c048 <__mcmp>:
 810c048:	b530      	push	{r4, r5, lr}
 810c04a:	6902      	ldr	r2, [r0, #16]
 810c04c:	690c      	ldr	r4, [r1, #16]
 810c04e:	1b12      	subs	r2, r2, r4
 810c050:	d10e      	bne.n	810c070 <__mcmp+0x28>
 810c052:	f100 0314 	add.w	r3, r0, #20
 810c056:	3114      	adds	r1, #20
 810c058:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c05c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c060:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c064:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c068:	42a5      	cmp	r5, r4
 810c06a:	d003      	beq.n	810c074 <__mcmp+0x2c>
 810c06c:	d305      	bcc.n	810c07a <__mcmp+0x32>
 810c06e:	2201      	movs	r2, #1
 810c070:	4610      	mov	r0, r2
 810c072:	bd30      	pop	{r4, r5, pc}
 810c074:	4283      	cmp	r3, r0
 810c076:	d3f3      	bcc.n	810c060 <__mcmp+0x18>
 810c078:	e7fa      	b.n	810c070 <__mcmp+0x28>
 810c07a:	f04f 32ff 	mov.w	r2, #4294967295
 810c07e:	e7f7      	b.n	810c070 <__mcmp+0x28>

0810c080 <__mdiff>:
 810c080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c084:	460c      	mov	r4, r1
 810c086:	4606      	mov	r6, r0
 810c088:	4611      	mov	r1, r2
 810c08a:	4620      	mov	r0, r4
 810c08c:	4690      	mov	r8, r2
 810c08e:	f7ff ffdb 	bl	810c048 <__mcmp>
 810c092:	1e05      	subs	r5, r0, #0
 810c094:	d110      	bne.n	810c0b8 <__mdiff+0x38>
 810c096:	4629      	mov	r1, r5
 810c098:	4630      	mov	r0, r6
 810c09a:	f7ff fd09 	bl	810bab0 <_Balloc>
 810c09e:	b930      	cbnz	r0, 810c0ae <__mdiff+0x2e>
 810c0a0:	4b3a      	ldr	r3, [pc, #232]	; (810c18c <__mdiff+0x10c>)
 810c0a2:	4602      	mov	r2, r0
 810c0a4:	f240 2132 	movw	r1, #562	; 0x232
 810c0a8:	4839      	ldr	r0, [pc, #228]	; (810c190 <__mdiff+0x110>)
 810c0aa:	f000 fdff 	bl	810ccac <__assert_func>
 810c0ae:	2301      	movs	r3, #1
 810c0b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c0b8:	bfa4      	itt	ge
 810c0ba:	4643      	movge	r3, r8
 810c0bc:	46a0      	movge	r8, r4
 810c0be:	4630      	mov	r0, r6
 810c0c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c0c4:	bfa6      	itte	ge
 810c0c6:	461c      	movge	r4, r3
 810c0c8:	2500      	movge	r5, #0
 810c0ca:	2501      	movlt	r5, #1
 810c0cc:	f7ff fcf0 	bl	810bab0 <_Balloc>
 810c0d0:	b920      	cbnz	r0, 810c0dc <__mdiff+0x5c>
 810c0d2:	4b2e      	ldr	r3, [pc, #184]	; (810c18c <__mdiff+0x10c>)
 810c0d4:	4602      	mov	r2, r0
 810c0d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 810c0da:	e7e5      	b.n	810c0a8 <__mdiff+0x28>
 810c0dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c0e0:	6926      	ldr	r6, [r4, #16]
 810c0e2:	60c5      	str	r5, [r0, #12]
 810c0e4:	f104 0914 	add.w	r9, r4, #20
 810c0e8:	f108 0514 	add.w	r5, r8, #20
 810c0ec:	f100 0e14 	add.w	lr, r0, #20
 810c0f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c0f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c0f8:	f108 0210 	add.w	r2, r8, #16
 810c0fc:	46f2      	mov	sl, lr
 810c0fe:	2100      	movs	r1, #0
 810c100:	f859 3b04 	ldr.w	r3, [r9], #4
 810c104:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c108:	fa1f f883 	uxth.w	r8, r3
 810c10c:	fa11 f18b 	uxtah	r1, r1, fp
 810c110:	0c1b      	lsrs	r3, r3, #16
 810c112:	eba1 0808 	sub.w	r8, r1, r8
 810c116:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c11a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c11e:	fa1f f888 	uxth.w	r8, r8
 810c122:	1419      	asrs	r1, r3, #16
 810c124:	454e      	cmp	r6, r9
 810c126:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c12a:	f84a 3b04 	str.w	r3, [sl], #4
 810c12e:	d8e7      	bhi.n	810c100 <__mdiff+0x80>
 810c130:	1b33      	subs	r3, r6, r4
 810c132:	3b15      	subs	r3, #21
 810c134:	f023 0303 	bic.w	r3, r3, #3
 810c138:	3304      	adds	r3, #4
 810c13a:	3415      	adds	r4, #21
 810c13c:	42a6      	cmp	r6, r4
 810c13e:	bf38      	it	cc
 810c140:	2304      	movcc	r3, #4
 810c142:	441d      	add	r5, r3
 810c144:	4473      	add	r3, lr
 810c146:	469e      	mov	lr, r3
 810c148:	462e      	mov	r6, r5
 810c14a:	4566      	cmp	r6, ip
 810c14c:	d30e      	bcc.n	810c16c <__mdiff+0xec>
 810c14e:	f10c 0203 	add.w	r2, ip, #3
 810c152:	1b52      	subs	r2, r2, r5
 810c154:	f022 0203 	bic.w	r2, r2, #3
 810c158:	3d03      	subs	r5, #3
 810c15a:	45ac      	cmp	ip, r5
 810c15c:	bf38      	it	cc
 810c15e:	2200      	movcc	r2, #0
 810c160:	441a      	add	r2, r3
 810c162:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810c166:	b17b      	cbz	r3, 810c188 <__mdiff+0x108>
 810c168:	6107      	str	r7, [r0, #16]
 810c16a:	e7a3      	b.n	810c0b4 <__mdiff+0x34>
 810c16c:	f856 8b04 	ldr.w	r8, [r6], #4
 810c170:	fa11 f288 	uxtah	r2, r1, r8
 810c174:	1414      	asrs	r4, r2, #16
 810c176:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810c17a:	b292      	uxth	r2, r2
 810c17c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810c180:	f84e 2b04 	str.w	r2, [lr], #4
 810c184:	1421      	asrs	r1, r4, #16
 810c186:	e7e0      	b.n	810c14a <__mdiff+0xca>
 810c188:	3f01      	subs	r7, #1
 810c18a:	e7ea      	b.n	810c162 <__mdiff+0xe2>
 810c18c:	0810d1b8 	.word	0x0810d1b8
 810c190:	0810d2a8 	.word	0x0810d2a8

0810c194 <__ulp>:
 810c194:	b082      	sub	sp, #8
 810c196:	ed8d 0b00 	vstr	d0, [sp]
 810c19a:	9b01      	ldr	r3, [sp, #4]
 810c19c:	4912      	ldr	r1, [pc, #72]	; (810c1e8 <__ulp+0x54>)
 810c19e:	4019      	ands	r1, r3
 810c1a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810c1a4:	2900      	cmp	r1, #0
 810c1a6:	dd05      	ble.n	810c1b4 <__ulp+0x20>
 810c1a8:	2200      	movs	r2, #0
 810c1aa:	460b      	mov	r3, r1
 810c1ac:	ec43 2b10 	vmov	d0, r2, r3
 810c1b0:	b002      	add	sp, #8
 810c1b2:	4770      	bx	lr
 810c1b4:	4249      	negs	r1, r1
 810c1b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810c1ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 810c1be:	f04f 0200 	mov.w	r2, #0
 810c1c2:	f04f 0300 	mov.w	r3, #0
 810c1c6:	da04      	bge.n	810c1d2 <__ulp+0x3e>
 810c1c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810c1cc:	fa41 f300 	asr.w	r3, r1, r0
 810c1d0:	e7ec      	b.n	810c1ac <__ulp+0x18>
 810c1d2:	f1a0 0114 	sub.w	r1, r0, #20
 810c1d6:	291e      	cmp	r1, #30
 810c1d8:	bfda      	itte	le
 810c1da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810c1de:	fa20 f101 	lsrle.w	r1, r0, r1
 810c1e2:	2101      	movgt	r1, #1
 810c1e4:	460a      	mov	r2, r1
 810c1e6:	e7e1      	b.n	810c1ac <__ulp+0x18>
 810c1e8:	7ff00000 	.word	0x7ff00000

0810c1ec <__b2d>:
 810c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c1ee:	6905      	ldr	r5, [r0, #16]
 810c1f0:	f100 0714 	add.w	r7, r0, #20
 810c1f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810c1f8:	1f2e      	subs	r6, r5, #4
 810c1fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810c1fe:	4620      	mov	r0, r4
 810c200:	f7ff fd48 	bl	810bc94 <__hi0bits>
 810c204:	f1c0 0320 	rsb	r3, r0, #32
 810c208:	280a      	cmp	r0, #10
 810c20a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810c288 <__b2d+0x9c>
 810c20e:	600b      	str	r3, [r1, #0]
 810c210:	dc14      	bgt.n	810c23c <__b2d+0x50>
 810c212:	f1c0 0e0b 	rsb	lr, r0, #11
 810c216:	fa24 f10e 	lsr.w	r1, r4, lr
 810c21a:	42b7      	cmp	r7, r6
 810c21c:	ea41 030c 	orr.w	r3, r1, ip
 810c220:	bf34      	ite	cc
 810c222:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c226:	2100      	movcs	r1, #0
 810c228:	3015      	adds	r0, #21
 810c22a:	fa04 f000 	lsl.w	r0, r4, r0
 810c22e:	fa21 f10e 	lsr.w	r1, r1, lr
 810c232:	ea40 0201 	orr.w	r2, r0, r1
 810c236:	ec43 2b10 	vmov	d0, r2, r3
 810c23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c23c:	42b7      	cmp	r7, r6
 810c23e:	bf3a      	itte	cc
 810c240:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c244:	f1a5 0608 	subcc.w	r6, r5, #8
 810c248:	2100      	movcs	r1, #0
 810c24a:	380b      	subs	r0, #11
 810c24c:	d017      	beq.n	810c27e <__b2d+0x92>
 810c24e:	f1c0 0c20 	rsb	ip, r0, #32
 810c252:	fa04 f500 	lsl.w	r5, r4, r0
 810c256:	42be      	cmp	r6, r7
 810c258:	fa21 f40c 	lsr.w	r4, r1, ip
 810c25c:	ea45 0504 	orr.w	r5, r5, r4
 810c260:	bf8c      	ite	hi
 810c262:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810c266:	2400      	movls	r4, #0
 810c268:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810c26c:	fa01 f000 	lsl.w	r0, r1, r0
 810c270:	fa24 f40c 	lsr.w	r4, r4, ip
 810c274:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810c278:	ea40 0204 	orr.w	r2, r0, r4
 810c27c:	e7db      	b.n	810c236 <__b2d+0x4a>
 810c27e:	ea44 030c 	orr.w	r3, r4, ip
 810c282:	460a      	mov	r2, r1
 810c284:	e7d7      	b.n	810c236 <__b2d+0x4a>
 810c286:	bf00      	nop
 810c288:	3ff00000 	.word	0x3ff00000

0810c28c <__d2b>:
 810c28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c290:	4689      	mov	r9, r1
 810c292:	2101      	movs	r1, #1
 810c294:	ec57 6b10 	vmov	r6, r7, d0
 810c298:	4690      	mov	r8, r2
 810c29a:	f7ff fc09 	bl	810bab0 <_Balloc>
 810c29e:	4604      	mov	r4, r0
 810c2a0:	b930      	cbnz	r0, 810c2b0 <__d2b+0x24>
 810c2a2:	4602      	mov	r2, r0
 810c2a4:	4b25      	ldr	r3, [pc, #148]	; (810c33c <__d2b+0xb0>)
 810c2a6:	4826      	ldr	r0, [pc, #152]	; (810c340 <__d2b+0xb4>)
 810c2a8:	f240 310a 	movw	r1, #778	; 0x30a
 810c2ac:	f000 fcfe 	bl	810ccac <__assert_func>
 810c2b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810c2b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810c2b8:	bb35      	cbnz	r5, 810c308 <__d2b+0x7c>
 810c2ba:	2e00      	cmp	r6, #0
 810c2bc:	9301      	str	r3, [sp, #4]
 810c2be:	d028      	beq.n	810c312 <__d2b+0x86>
 810c2c0:	4668      	mov	r0, sp
 810c2c2:	9600      	str	r6, [sp, #0]
 810c2c4:	f7ff fd06 	bl	810bcd4 <__lo0bits>
 810c2c8:	9900      	ldr	r1, [sp, #0]
 810c2ca:	b300      	cbz	r0, 810c30e <__d2b+0x82>
 810c2cc:	9a01      	ldr	r2, [sp, #4]
 810c2ce:	f1c0 0320 	rsb	r3, r0, #32
 810c2d2:	fa02 f303 	lsl.w	r3, r2, r3
 810c2d6:	430b      	orrs	r3, r1
 810c2d8:	40c2      	lsrs	r2, r0
 810c2da:	6163      	str	r3, [r4, #20]
 810c2dc:	9201      	str	r2, [sp, #4]
 810c2de:	9b01      	ldr	r3, [sp, #4]
 810c2e0:	61a3      	str	r3, [r4, #24]
 810c2e2:	2b00      	cmp	r3, #0
 810c2e4:	bf14      	ite	ne
 810c2e6:	2202      	movne	r2, #2
 810c2e8:	2201      	moveq	r2, #1
 810c2ea:	6122      	str	r2, [r4, #16]
 810c2ec:	b1d5      	cbz	r5, 810c324 <__d2b+0x98>
 810c2ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c2f2:	4405      	add	r5, r0
 810c2f4:	f8c9 5000 	str.w	r5, [r9]
 810c2f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c2fc:	f8c8 0000 	str.w	r0, [r8]
 810c300:	4620      	mov	r0, r4
 810c302:	b003      	add	sp, #12
 810c304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c30c:	e7d5      	b.n	810c2ba <__d2b+0x2e>
 810c30e:	6161      	str	r1, [r4, #20]
 810c310:	e7e5      	b.n	810c2de <__d2b+0x52>
 810c312:	a801      	add	r0, sp, #4
 810c314:	f7ff fcde 	bl	810bcd4 <__lo0bits>
 810c318:	9b01      	ldr	r3, [sp, #4]
 810c31a:	6163      	str	r3, [r4, #20]
 810c31c:	2201      	movs	r2, #1
 810c31e:	6122      	str	r2, [r4, #16]
 810c320:	3020      	adds	r0, #32
 810c322:	e7e3      	b.n	810c2ec <__d2b+0x60>
 810c324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c32c:	f8c9 0000 	str.w	r0, [r9]
 810c330:	6918      	ldr	r0, [r3, #16]
 810c332:	f7ff fcaf 	bl	810bc94 <__hi0bits>
 810c336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c33a:	e7df      	b.n	810c2fc <__d2b+0x70>
 810c33c:	0810d1b8 	.word	0x0810d1b8
 810c340:	0810d2a8 	.word	0x0810d2a8

0810c344 <__ratio>:
 810c344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c348:	4688      	mov	r8, r1
 810c34a:	4669      	mov	r1, sp
 810c34c:	4681      	mov	r9, r0
 810c34e:	f7ff ff4d 	bl	810c1ec <__b2d>
 810c352:	a901      	add	r1, sp, #4
 810c354:	4640      	mov	r0, r8
 810c356:	ec55 4b10 	vmov	r4, r5, d0
 810c35a:	f7ff ff47 	bl	810c1ec <__b2d>
 810c35e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c362:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c366:	eba3 0c02 	sub.w	ip, r3, r2
 810c36a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c36e:	1a9b      	subs	r3, r3, r2
 810c370:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c374:	ec51 0b10 	vmov	r0, r1, d0
 810c378:	2b00      	cmp	r3, #0
 810c37a:	bfd6      	itet	le
 810c37c:	460a      	movle	r2, r1
 810c37e:	462a      	movgt	r2, r5
 810c380:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c384:	468b      	mov	fp, r1
 810c386:	462f      	mov	r7, r5
 810c388:	bfd4      	ite	le
 810c38a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c38e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c392:	4620      	mov	r0, r4
 810c394:	ee10 2a10 	vmov	r2, s0
 810c398:	465b      	mov	r3, fp
 810c39a:	4639      	mov	r1, r7
 810c39c:	f7f4 fade 	bl	810095c <__aeabi_ddiv>
 810c3a0:	ec41 0b10 	vmov	d0, r0, r1
 810c3a4:	b003      	add	sp, #12
 810c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c3aa <__copybits>:
 810c3aa:	3901      	subs	r1, #1
 810c3ac:	b570      	push	{r4, r5, r6, lr}
 810c3ae:	1149      	asrs	r1, r1, #5
 810c3b0:	6914      	ldr	r4, [r2, #16]
 810c3b2:	3101      	adds	r1, #1
 810c3b4:	f102 0314 	add.w	r3, r2, #20
 810c3b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c3bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c3c0:	1f05      	subs	r5, r0, #4
 810c3c2:	42a3      	cmp	r3, r4
 810c3c4:	d30c      	bcc.n	810c3e0 <__copybits+0x36>
 810c3c6:	1aa3      	subs	r3, r4, r2
 810c3c8:	3b11      	subs	r3, #17
 810c3ca:	f023 0303 	bic.w	r3, r3, #3
 810c3ce:	3211      	adds	r2, #17
 810c3d0:	42a2      	cmp	r2, r4
 810c3d2:	bf88      	it	hi
 810c3d4:	2300      	movhi	r3, #0
 810c3d6:	4418      	add	r0, r3
 810c3d8:	2300      	movs	r3, #0
 810c3da:	4288      	cmp	r0, r1
 810c3dc:	d305      	bcc.n	810c3ea <__copybits+0x40>
 810c3de:	bd70      	pop	{r4, r5, r6, pc}
 810c3e0:	f853 6b04 	ldr.w	r6, [r3], #4
 810c3e4:	f845 6f04 	str.w	r6, [r5, #4]!
 810c3e8:	e7eb      	b.n	810c3c2 <__copybits+0x18>
 810c3ea:	f840 3b04 	str.w	r3, [r0], #4
 810c3ee:	e7f4      	b.n	810c3da <__copybits+0x30>

0810c3f0 <__any_on>:
 810c3f0:	f100 0214 	add.w	r2, r0, #20
 810c3f4:	6900      	ldr	r0, [r0, #16]
 810c3f6:	114b      	asrs	r3, r1, #5
 810c3f8:	4298      	cmp	r0, r3
 810c3fa:	b510      	push	{r4, lr}
 810c3fc:	db11      	blt.n	810c422 <__any_on+0x32>
 810c3fe:	dd0a      	ble.n	810c416 <__any_on+0x26>
 810c400:	f011 011f 	ands.w	r1, r1, #31
 810c404:	d007      	beq.n	810c416 <__any_on+0x26>
 810c406:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c40a:	fa24 f001 	lsr.w	r0, r4, r1
 810c40e:	fa00 f101 	lsl.w	r1, r0, r1
 810c412:	428c      	cmp	r4, r1
 810c414:	d10b      	bne.n	810c42e <__any_on+0x3e>
 810c416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c41a:	4293      	cmp	r3, r2
 810c41c:	d803      	bhi.n	810c426 <__any_on+0x36>
 810c41e:	2000      	movs	r0, #0
 810c420:	bd10      	pop	{r4, pc}
 810c422:	4603      	mov	r3, r0
 810c424:	e7f7      	b.n	810c416 <__any_on+0x26>
 810c426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c42a:	2900      	cmp	r1, #0
 810c42c:	d0f5      	beq.n	810c41a <__any_on+0x2a>
 810c42e:	2001      	movs	r0, #1
 810c430:	e7f6      	b.n	810c420 <__any_on+0x30>

0810c432 <_calloc_r>:
 810c432:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c434:	fba1 2402 	umull	r2, r4, r1, r2
 810c438:	b94c      	cbnz	r4, 810c44e <_calloc_r+0x1c>
 810c43a:	4611      	mov	r1, r2
 810c43c:	9201      	str	r2, [sp, #4]
 810c43e:	f000 f87b 	bl	810c538 <_malloc_r>
 810c442:	9a01      	ldr	r2, [sp, #4]
 810c444:	4605      	mov	r5, r0
 810c446:	b930      	cbnz	r0, 810c456 <_calloc_r+0x24>
 810c448:	4628      	mov	r0, r5
 810c44a:	b003      	add	sp, #12
 810c44c:	bd30      	pop	{r4, r5, pc}
 810c44e:	220c      	movs	r2, #12
 810c450:	6002      	str	r2, [r0, #0]
 810c452:	2500      	movs	r5, #0
 810c454:	e7f8      	b.n	810c448 <_calloc_r+0x16>
 810c456:	4621      	mov	r1, r4
 810c458:	f7fc f854 	bl	8108504 <memset>
 810c45c:	e7f4      	b.n	810c448 <_calloc_r+0x16>
	...

0810c460 <_free_r>:
 810c460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c462:	2900      	cmp	r1, #0
 810c464:	d044      	beq.n	810c4f0 <_free_r+0x90>
 810c466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c46a:	9001      	str	r0, [sp, #4]
 810c46c:	2b00      	cmp	r3, #0
 810c46e:	f1a1 0404 	sub.w	r4, r1, #4
 810c472:	bfb8      	it	lt
 810c474:	18e4      	addlt	r4, r4, r3
 810c476:	f000 fca7 	bl	810cdc8 <__malloc_lock>
 810c47a:	4a1e      	ldr	r2, [pc, #120]	; (810c4f4 <_free_r+0x94>)
 810c47c:	9801      	ldr	r0, [sp, #4]
 810c47e:	6813      	ldr	r3, [r2, #0]
 810c480:	b933      	cbnz	r3, 810c490 <_free_r+0x30>
 810c482:	6063      	str	r3, [r4, #4]
 810c484:	6014      	str	r4, [r2, #0]
 810c486:	b003      	add	sp, #12
 810c488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c48c:	f000 bca2 	b.w	810cdd4 <__malloc_unlock>
 810c490:	42a3      	cmp	r3, r4
 810c492:	d908      	bls.n	810c4a6 <_free_r+0x46>
 810c494:	6825      	ldr	r5, [r4, #0]
 810c496:	1961      	adds	r1, r4, r5
 810c498:	428b      	cmp	r3, r1
 810c49a:	bf01      	itttt	eq
 810c49c:	6819      	ldreq	r1, [r3, #0]
 810c49e:	685b      	ldreq	r3, [r3, #4]
 810c4a0:	1949      	addeq	r1, r1, r5
 810c4a2:	6021      	streq	r1, [r4, #0]
 810c4a4:	e7ed      	b.n	810c482 <_free_r+0x22>
 810c4a6:	461a      	mov	r2, r3
 810c4a8:	685b      	ldr	r3, [r3, #4]
 810c4aa:	b10b      	cbz	r3, 810c4b0 <_free_r+0x50>
 810c4ac:	42a3      	cmp	r3, r4
 810c4ae:	d9fa      	bls.n	810c4a6 <_free_r+0x46>
 810c4b0:	6811      	ldr	r1, [r2, #0]
 810c4b2:	1855      	adds	r5, r2, r1
 810c4b4:	42a5      	cmp	r5, r4
 810c4b6:	d10b      	bne.n	810c4d0 <_free_r+0x70>
 810c4b8:	6824      	ldr	r4, [r4, #0]
 810c4ba:	4421      	add	r1, r4
 810c4bc:	1854      	adds	r4, r2, r1
 810c4be:	42a3      	cmp	r3, r4
 810c4c0:	6011      	str	r1, [r2, #0]
 810c4c2:	d1e0      	bne.n	810c486 <_free_r+0x26>
 810c4c4:	681c      	ldr	r4, [r3, #0]
 810c4c6:	685b      	ldr	r3, [r3, #4]
 810c4c8:	6053      	str	r3, [r2, #4]
 810c4ca:	4421      	add	r1, r4
 810c4cc:	6011      	str	r1, [r2, #0]
 810c4ce:	e7da      	b.n	810c486 <_free_r+0x26>
 810c4d0:	d902      	bls.n	810c4d8 <_free_r+0x78>
 810c4d2:	230c      	movs	r3, #12
 810c4d4:	6003      	str	r3, [r0, #0]
 810c4d6:	e7d6      	b.n	810c486 <_free_r+0x26>
 810c4d8:	6825      	ldr	r5, [r4, #0]
 810c4da:	1961      	adds	r1, r4, r5
 810c4dc:	428b      	cmp	r3, r1
 810c4de:	bf04      	itt	eq
 810c4e0:	6819      	ldreq	r1, [r3, #0]
 810c4e2:	685b      	ldreq	r3, [r3, #4]
 810c4e4:	6063      	str	r3, [r4, #4]
 810c4e6:	bf04      	itt	eq
 810c4e8:	1949      	addeq	r1, r1, r5
 810c4ea:	6021      	streq	r1, [r4, #0]
 810c4ec:	6054      	str	r4, [r2, #4]
 810c4ee:	e7ca      	b.n	810c486 <_free_r+0x26>
 810c4f0:	b003      	add	sp, #12
 810c4f2:	bd30      	pop	{r4, r5, pc}
 810c4f4:	1000035c 	.word	0x1000035c

0810c4f8 <sbrk_aligned>:
 810c4f8:	b570      	push	{r4, r5, r6, lr}
 810c4fa:	4e0e      	ldr	r6, [pc, #56]	; (810c534 <sbrk_aligned+0x3c>)
 810c4fc:	460c      	mov	r4, r1
 810c4fe:	6831      	ldr	r1, [r6, #0]
 810c500:	4605      	mov	r5, r0
 810c502:	b911      	cbnz	r1, 810c50a <sbrk_aligned+0x12>
 810c504:	f000 fb4c 	bl	810cba0 <_sbrk_r>
 810c508:	6030      	str	r0, [r6, #0]
 810c50a:	4621      	mov	r1, r4
 810c50c:	4628      	mov	r0, r5
 810c50e:	f000 fb47 	bl	810cba0 <_sbrk_r>
 810c512:	1c43      	adds	r3, r0, #1
 810c514:	d00a      	beq.n	810c52c <sbrk_aligned+0x34>
 810c516:	1cc4      	adds	r4, r0, #3
 810c518:	f024 0403 	bic.w	r4, r4, #3
 810c51c:	42a0      	cmp	r0, r4
 810c51e:	d007      	beq.n	810c530 <sbrk_aligned+0x38>
 810c520:	1a21      	subs	r1, r4, r0
 810c522:	4628      	mov	r0, r5
 810c524:	f000 fb3c 	bl	810cba0 <_sbrk_r>
 810c528:	3001      	adds	r0, #1
 810c52a:	d101      	bne.n	810c530 <sbrk_aligned+0x38>
 810c52c:	f04f 34ff 	mov.w	r4, #4294967295
 810c530:	4620      	mov	r0, r4
 810c532:	bd70      	pop	{r4, r5, r6, pc}
 810c534:	10000360 	.word	0x10000360

0810c538 <_malloc_r>:
 810c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c53c:	1ccd      	adds	r5, r1, #3
 810c53e:	f025 0503 	bic.w	r5, r5, #3
 810c542:	3508      	adds	r5, #8
 810c544:	2d0c      	cmp	r5, #12
 810c546:	bf38      	it	cc
 810c548:	250c      	movcc	r5, #12
 810c54a:	2d00      	cmp	r5, #0
 810c54c:	4607      	mov	r7, r0
 810c54e:	db01      	blt.n	810c554 <_malloc_r+0x1c>
 810c550:	42a9      	cmp	r1, r5
 810c552:	d905      	bls.n	810c560 <_malloc_r+0x28>
 810c554:	230c      	movs	r3, #12
 810c556:	603b      	str	r3, [r7, #0]
 810c558:	2600      	movs	r6, #0
 810c55a:	4630      	mov	r0, r6
 810c55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c560:	4e2e      	ldr	r6, [pc, #184]	; (810c61c <_malloc_r+0xe4>)
 810c562:	f000 fc31 	bl	810cdc8 <__malloc_lock>
 810c566:	6833      	ldr	r3, [r6, #0]
 810c568:	461c      	mov	r4, r3
 810c56a:	bb34      	cbnz	r4, 810c5ba <_malloc_r+0x82>
 810c56c:	4629      	mov	r1, r5
 810c56e:	4638      	mov	r0, r7
 810c570:	f7ff ffc2 	bl	810c4f8 <sbrk_aligned>
 810c574:	1c43      	adds	r3, r0, #1
 810c576:	4604      	mov	r4, r0
 810c578:	d14d      	bne.n	810c616 <_malloc_r+0xde>
 810c57a:	6834      	ldr	r4, [r6, #0]
 810c57c:	4626      	mov	r6, r4
 810c57e:	2e00      	cmp	r6, #0
 810c580:	d140      	bne.n	810c604 <_malloc_r+0xcc>
 810c582:	6823      	ldr	r3, [r4, #0]
 810c584:	4631      	mov	r1, r6
 810c586:	4638      	mov	r0, r7
 810c588:	eb04 0803 	add.w	r8, r4, r3
 810c58c:	f000 fb08 	bl	810cba0 <_sbrk_r>
 810c590:	4580      	cmp	r8, r0
 810c592:	d13a      	bne.n	810c60a <_malloc_r+0xd2>
 810c594:	6821      	ldr	r1, [r4, #0]
 810c596:	3503      	adds	r5, #3
 810c598:	1a6d      	subs	r5, r5, r1
 810c59a:	f025 0503 	bic.w	r5, r5, #3
 810c59e:	3508      	adds	r5, #8
 810c5a0:	2d0c      	cmp	r5, #12
 810c5a2:	bf38      	it	cc
 810c5a4:	250c      	movcc	r5, #12
 810c5a6:	4629      	mov	r1, r5
 810c5a8:	4638      	mov	r0, r7
 810c5aa:	f7ff ffa5 	bl	810c4f8 <sbrk_aligned>
 810c5ae:	3001      	adds	r0, #1
 810c5b0:	d02b      	beq.n	810c60a <_malloc_r+0xd2>
 810c5b2:	6823      	ldr	r3, [r4, #0]
 810c5b4:	442b      	add	r3, r5
 810c5b6:	6023      	str	r3, [r4, #0]
 810c5b8:	e00e      	b.n	810c5d8 <_malloc_r+0xa0>
 810c5ba:	6822      	ldr	r2, [r4, #0]
 810c5bc:	1b52      	subs	r2, r2, r5
 810c5be:	d41e      	bmi.n	810c5fe <_malloc_r+0xc6>
 810c5c0:	2a0b      	cmp	r2, #11
 810c5c2:	d916      	bls.n	810c5f2 <_malloc_r+0xba>
 810c5c4:	1961      	adds	r1, r4, r5
 810c5c6:	42a3      	cmp	r3, r4
 810c5c8:	6025      	str	r5, [r4, #0]
 810c5ca:	bf18      	it	ne
 810c5cc:	6059      	strne	r1, [r3, #4]
 810c5ce:	6863      	ldr	r3, [r4, #4]
 810c5d0:	bf08      	it	eq
 810c5d2:	6031      	streq	r1, [r6, #0]
 810c5d4:	5162      	str	r2, [r4, r5]
 810c5d6:	604b      	str	r3, [r1, #4]
 810c5d8:	4638      	mov	r0, r7
 810c5da:	f104 060b 	add.w	r6, r4, #11
 810c5de:	f000 fbf9 	bl	810cdd4 <__malloc_unlock>
 810c5e2:	f026 0607 	bic.w	r6, r6, #7
 810c5e6:	1d23      	adds	r3, r4, #4
 810c5e8:	1af2      	subs	r2, r6, r3
 810c5ea:	d0b6      	beq.n	810c55a <_malloc_r+0x22>
 810c5ec:	1b9b      	subs	r3, r3, r6
 810c5ee:	50a3      	str	r3, [r4, r2]
 810c5f0:	e7b3      	b.n	810c55a <_malloc_r+0x22>
 810c5f2:	6862      	ldr	r2, [r4, #4]
 810c5f4:	42a3      	cmp	r3, r4
 810c5f6:	bf0c      	ite	eq
 810c5f8:	6032      	streq	r2, [r6, #0]
 810c5fa:	605a      	strne	r2, [r3, #4]
 810c5fc:	e7ec      	b.n	810c5d8 <_malloc_r+0xa0>
 810c5fe:	4623      	mov	r3, r4
 810c600:	6864      	ldr	r4, [r4, #4]
 810c602:	e7b2      	b.n	810c56a <_malloc_r+0x32>
 810c604:	4634      	mov	r4, r6
 810c606:	6876      	ldr	r6, [r6, #4]
 810c608:	e7b9      	b.n	810c57e <_malloc_r+0x46>
 810c60a:	230c      	movs	r3, #12
 810c60c:	603b      	str	r3, [r7, #0]
 810c60e:	4638      	mov	r0, r7
 810c610:	f000 fbe0 	bl	810cdd4 <__malloc_unlock>
 810c614:	e7a1      	b.n	810c55a <_malloc_r+0x22>
 810c616:	6025      	str	r5, [r4, #0]
 810c618:	e7de      	b.n	810c5d8 <_malloc_r+0xa0>
 810c61a:	bf00      	nop
 810c61c:	1000035c 	.word	0x1000035c

0810c620 <__ssputs_r>:
 810c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c624:	688e      	ldr	r6, [r1, #8]
 810c626:	429e      	cmp	r6, r3
 810c628:	4682      	mov	sl, r0
 810c62a:	460c      	mov	r4, r1
 810c62c:	4690      	mov	r8, r2
 810c62e:	461f      	mov	r7, r3
 810c630:	d838      	bhi.n	810c6a4 <__ssputs_r+0x84>
 810c632:	898a      	ldrh	r2, [r1, #12]
 810c634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c638:	d032      	beq.n	810c6a0 <__ssputs_r+0x80>
 810c63a:	6825      	ldr	r5, [r4, #0]
 810c63c:	6909      	ldr	r1, [r1, #16]
 810c63e:	eba5 0901 	sub.w	r9, r5, r1
 810c642:	6965      	ldr	r5, [r4, #20]
 810c644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c64c:	3301      	adds	r3, #1
 810c64e:	444b      	add	r3, r9
 810c650:	106d      	asrs	r5, r5, #1
 810c652:	429d      	cmp	r5, r3
 810c654:	bf38      	it	cc
 810c656:	461d      	movcc	r5, r3
 810c658:	0553      	lsls	r3, r2, #21
 810c65a:	d531      	bpl.n	810c6c0 <__ssputs_r+0xa0>
 810c65c:	4629      	mov	r1, r5
 810c65e:	f7ff ff6b 	bl	810c538 <_malloc_r>
 810c662:	4606      	mov	r6, r0
 810c664:	b950      	cbnz	r0, 810c67c <__ssputs_r+0x5c>
 810c666:	230c      	movs	r3, #12
 810c668:	f8ca 3000 	str.w	r3, [sl]
 810c66c:	89a3      	ldrh	r3, [r4, #12]
 810c66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c672:	81a3      	strh	r3, [r4, #12]
 810c674:	f04f 30ff 	mov.w	r0, #4294967295
 810c678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c67c:	6921      	ldr	r1, [r4, #16]
 810c67e:	464a      	mov	r2, r9
 810c680:	f7ff fa08 	bl	810ba94 <memcpy>
 810c684:	89a3      	ldrh	r3, [r4, #12]
 810c686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c68e:	81a3      	strh	r3, [r4, #12]
 810c690:	6126      	str	r6, [r4, #16]
 810c692:	6165      	str	r5, [r4, #20]
 810c694:	444e      	add	r6, r9
 810c696:	eba5 0509 	sub.w	r5, r5, r9
 810c69a:	6026      	str	r6, [r4, #0]
 810c69c:	60a5      	str	r5, [r4, #8]
 810c69e:	463e      	mov	r6, r7
 810c6a0:	42be      	cmp	r6, r7
 810c6a2:	d900      	bls.n	810c6a6 <__ssputs_r+0x86>
 810c6a4:	463e      	mov	r6, r7
 810c6a6:	6820      	ldr	r0, [r4, #0]
 810c6a8:	4632      	mov	r2, r6
 810c6aa:	4641      	mov	r1, r8
 810c6ac:	f000 fb72 	bl	810cd94 <memmove>
 810c6b0:	68a3      	ldr	r3, [r4, #8]
 810c6b2:	1b9b      	subs	r3, r3, r6
 810c6b4:	60a3      	str	r3, [r4, #8]
 810c6b6:	6823      	ldr	r3, [r4, #0]
 810c6b8:	4433      	add	r3, r6
 810c6ba:	6023      	str	r3, [r4, #0]
 810c6bc:	2000      	movs	r0, #0
 810c6be:	e7db      	b.n	810c678 <__ssputs_r+0x58>
 810c6c0:	462a      	mov	r2, r5
 810c6c2:	f000 fb8d 	bl	810cde0 <_realloc_r>
 810c6c6:	4606      	mov	r6, r0
 810c6c8:	2800      	cmp	r0, #0
 810c6ca:	d1e1      	bne.n	810c690 <__ssputs_r+0x70>
 810c6cc:	6921      	ldr	r1, [r4, #16]
 810c6ce:	4650      	mov	r0, sl
 810c6d0:	f7ff fec6 	bl	810c460 <_free_r>
 810c6d4:	e7c7      	b.n	810c666 <__ssputs_r+0x46>
	...

0810c6d8 <_svfiprintf_r>:
 810c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c6dc:	4698      	mov	r8, r3
 810c6de:	898b      	ldrh	r3, [r1, #12]
 810c6e0:	061b      	lsls	r3, r3, #24
 810c6e2:	b09d      	sub	sp, #116	; 0x74
 810c6e4:	4607      	mov	r7, r0
 810c6e6:	460d      	mov	r5, r1
 810c6e8:	4614      	mov	r4, r2
 810c6ea:	d50e      	bpl.n	810c70a <_svfiprintf_r+0x32>
 810c6ec:	690b      	ldr	r3, [r1, #16]
 810c6ee:	b963      	cbnz	r3, 810c70a <_svfiprintf_r+0x32>
 810c6f0:	2140      	movs	r1, #64	; 0x40
 810c6f2:	f7ff ff21 	bl	810c538 <_malloc_r>
 810c6f6:	6028      	str	r0, [r5, #0]
 810c6f8:	6128      	str	r0, [r5, #16]
 810c6fa:	b920      	cbnz	r0, 810c706 <_svfiprintf_r+0x2e>
 810c6fc:	230c      	movs	r3, #12
 810c6fe:	603b      	str	r3, [r7, #0]
 810c700:	f04f 30ff 	mov.w	r0, #4294967295
 810c704:	e0d1      	b.n	810c8aa <_svfiprintf_r+0x1d2>
 810c706:	2340      	movs	r3, #64	; 0x40
 810c708:	616b      	str	r3, [r5, #20]
 810c70a:	2300      	movs	r3, #0
 810c70c:	9309      	str	r3, [sp, #36]	; 0x24
 810c70e:	2320      	movs	r3, #32
 810c710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c714:	f8cd 800c 	str.w	r8, [sp, #12]
 810c718:	2330      	movs	r3, #48	; 0x30
 810c71a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810c8c4 <_svfiprintf_r+0x1ec>
 810c71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c722:	f04f 0901 	mov.w	r9, #1
 810c726:	4623      	mov	r3, r4
 810c728:	469a      	mov	sl, r3
 810c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c72e:	b10a      	cbz	r2, 810c734 <_svfiprintf_r+0x5c>
 810c730:	2a25      	cmp	r2, #37	; 0x25
 810c732:	d1f9      	bne.n	810c728 <_svfiprintf_r+0x50>
 810c734:	ebba 0b04 	subs.w	fp, sl, r4
 810c738:	d00b      	beq.n	810c752 <_svfiprintf_r+0x7a>
 810c73a:	465b      	mov	r3, fp
 810c73c:	4622      	mov	r2, r4
 810c73e:	4629      	mov	r1, r5
 810c740:	4638      	mov	r0, r7
 810c742:	f7ff ff6d 	bl	810c620 <__ssputs_r>
 810c746:	3001      	adds	r0, #1
 810c748:	f000 80aa 	beq.w	810c8a0 <_svfiprintf_r+0x1c8>
 810c74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c74e:	445a      	add	r2, fp
 810c750:	9209      	str	r2, [sp, #36]	; 0x24
 810c752:	f89a 3000 	ldrb.w	r3, [sl]
 810c756:	2b00      	cmp	r3, #0
 810c758:	f000 80a2 	beq.w	810c8a0 <_svfiprintf_r+0x1c8>
 810c75c:	2300      	movs	r3, #0
 810c75e:	f04f 32ff 	mov.w	r2, #4294967295
 810c762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c766:	f10a 0a01 	add.w	sl, sl, #1
 810c76a:	9304      	str	r3, [sp, #16]
 810c76c:	9307      	str	r3, [sp, #28]
 810c76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c772:	931a      	str	r3, [sp, #104]	; 0x68
 810c774:	4654      	mov	r4, sl
 810c776:	2205      	movs	r2, #5
 810c778:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c77c:	4851      	ldr	r0, [pc, #324]	; (810c8c4 <_svfiprintf_r+0x1ec>)
 810c77e:	f7f3 fdb7 	bl	81002f0 <memchr>
 810c782:	9a04      	ldr	r2, [sp, #16]
 810c784:	b9d8      	cbnz	r0, 810c7be <_svfiprintf_r+0xe6>
 810c786:	06d0      	lsls	r0, r2, #27
 810c788:	bf44      	itt	mi
 810c78a:	2320      	movmi	r3, #32
 810c78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c790:	0711      	lsls	r1, r2, #28
 810c792:	bf44      	itt	mi
 810c794:	232b      	movmi	r3, #43	; 0x2b
 810c796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c79a:	f89a 3000 	ldrb.w	r3, [sl]
 810c79e:	2b2a      	cmp	r3, #42	; 0x2a
 810c7a0:	d015      	beq.n	810c7ce <_svfiprintf_r+0xf6>
 810c7a2:	9a07      	ldr	r2, [sp, #28]
 810c7a4:	4654      	mov	r4, sl
 810c7a6:	2000      	movs	r0, #0
 810c7a8:	f04f 0c0a 	mov.w	ip, #10
 810c7ac:	4621      	mov	r1, r4
 810c7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c7b2:	3b30      	subs	r3, #48	; 0x30
 810c7b4:	2b09      	cmp	r3, #9
 810c7b6:	d94e      	bls.n	810c856 <_svfiprintf_r+0x17e>
 810c7b8:	b1b0      	cbz	r0, 810c7e8 <_svfiprintf_r+0x110>
 810c7ba:	9207      	str	r2, [sp, #28]
 810c7bc:	e014      	b.n	810c7e8 <_svfiprintf_r+0x110>
 810c7be:	eba0 0308 	sub.w	r3, r0, r8
 810c7c2:	fa09 f303 	lsl.w	r3, r9, r3
 810c7c6:	4313      	orrs	r3, r2
 810c7c8:	9304      	str	r3, [sp, #16]
 810c7ca:	46a2      	mov	sl, r4
 810c7cc:	e7d2      	b.n	810c774 <_svfiprintf_r+0x9c>
 810c7ce:	9b03      	ldr	r3, [sp, #12]
 810c7d0:	1d19      	adds	r1, r3, #4
 810c7d2:	681b      	ldr	r3, [r3, #0]
 810c7d4:	9103      	str	r1, [sp, #12]
 810c7d6:	2b00      	cmp	r3, #0
 810c7d8:	bfbb      	ittet	lt
 810c7da:	425b      	neglt	r3, r3
 810c7dc:	f042 0202 	orrlt.w	r2, r2, #2
 810c7e0:	9307      	strge	r3, [sp, #28]
 810c7e2:	9307      	strlt	r3, [sp, #28]
 810c7e4:	bfb8      	it	lt
 810c7e6:	9204      	strlt	r2, [sp, #16]
 810c7e8:	7823      	ldrb	r3, [r4, #0]
 810c7ea:	2b2e      	cmp	r3, #46	; 0x2e
 810c7ec:	d10c      	bne.n	810c808 <_svfiprintf_r+0x130>
 810c7ee:	7863      	ldrb	r3, [r4, #1]
 810c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 810c7f2:	d135      	bne.n	810c860 <_svfiprintf_r+0x188>
 810c7f4:	9b03      	ldr	r3, [sp, #12]
 810c7f6:	1d1a      	adds	r2, r3, #4
 810c7f8:	681b      	ldr	r3, [r3, #0]
 810c7fa:	9203      	str	r2, [sp, #12]
 810c7fc:	2b00      	cmp	r3, #0
 810c7fe:	bfb8      	it	lt
 810c800:	f04f 33ff 	movlt.w	r3, #4294967295
 810c804:	3402      	adds	r4, #2
 810c806:	9305      	str	r3, [sp, #20]
 810c808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810c8d4 <_svfiprintf_r+0x1fc>
 810c80c:	7821      	ldrb	r1, [r4, #0]
 810c80e:	2203      	movs	r2, #3
 810c810:	4650      	mov	r0, sl
 810c812:	f7f3 fd6d 	bl	81002f0 <memchr>
 810c816:	b140      	cbz	r0, 810c82a <_svfiprintf_r+0x152>
 810c818:	2340      	movs	r3, #64	; 0x40
 810c81a:	eba0 000a 	sub.w	r0, r0, sl
 810c81e:	fa03 f000 	lsl.w	r0, r3, r0
 810c822:	9b04      	ldr	r3, [sp, #16]
 810c824:	4303      	orrs	r3, r0
 810c826:	3401      	adds	r4, #1
 810c828:	9304      	str	r3, [sp, #16]
 810c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c82e:	4826      	ldr	r0, [pc, #152]	; (810c8c8 <_svfiprintf_r+0x1f0>)
 810c830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c834:	2206      	movs	r2, #6
 810c836:	f7f3 fd5b 	bl	81002f0 <memchr>
 810c83a:	2800      	cmp	r0, #0
 810c83c:	d038      	beq.n	810c8b0 <_svfiprintf_r+0x1d8>
 810c83e:	4b23      	ldr	r3, [pc, #140]	; (810c8cc <_svfiprintf_r+0x1f4>)
 810c840:	bb1b      	cbnz	r3, 810c88a <_svfiprintf_r+0x1b2>
 810c842:	9b03      	ldr	r3, [sp, #12]
 810c844:	3307      	adds	r3, #7
 810c846:	f023 0307 	bic.w	r3, r3, #7
 810c84a:	3308      	adds	r3, #8
 810c84c:	9303      	str	r3, [sp, #12]
 810c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c850:	4433      	add	r3, r6
 810c852:	9309      	str	r3, [sp, #36]	; 0x24
 810c854:	e767      	b.n	810c726 <_svfiprintf_r+0x4e>
 810c856:	fb0c 3202 	mla	r2, ip, r2, r3
 810c85a:	460c      	mov	r4, r1
 810c85c:	2001      	movs	r0, #1
 810c85e:	e7a5      	b.n	810c7ac <_svfiprintf_r+0xd4>
 810c860:	2300      	movs	r3, #0
 810c862:	3401      	adds	r4, #1
 810c864:	9305      	str	r3, [sp, #20]
 810c866:	4619      	mov	r1, r3
 810c868:	f04f 0c0a 	mov.w	ip, #10
 810c86c:	4620      	mov	r0, r4
 810c86e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c872:	3a30      	subs	r2, #48	; 0x30
 810c874:	2a09      	cmp	r2, #9
 810c876:	d903      	bls.n	810c880 <_svfiprintf_r+0x1a8>
 810c878:	2b00      	cmp	r3, #0
 810c87a:	d0c5      	beq.n	810c808 <_svfiprintf_r+0x130>
 810c87c:	9105      	str	r1, [sp, #20]
 810c87e:	e7c3      	b.n	810c808 <_svfiprintf_r+0x130>
 810c880:	fb0c 2101 	mla	r1, ip, r1, r2
 810c884:	4604      	mov	r4, r0
 810c886:	2301      	movs	r3, #1
 810c888:	e7f0      	b.n	810c86c <_svfiprintf_r+0x194>
 810c88a:	ab03      	add	r3, sp, #12
 810c88c:	9300      	str	r3, [sp, #0]
 810c88e:	462a      	mov	r2, r5
 810c890:	4b0f      	ldr	r3, [pc, #60]	; (810c8d0 <_svfiprintf_r+0x1f8>)
 810c892:	a904      	add	r1, sp, #16
 810c894:	4638      	mov	r0, r7
 810c896:	f7fb fedd 	bl	8108654 <_printf_float>
 810c89a:	1c42      	adds	r2, r0, #1
 810c89c:	4606      	mov	r6, r0
 810c89e:	d1d6      	bne.n	810c84e <_svfiprintf_r+0x176>
 810c8a0:	89ab      	ldrh	r3, [r5, #12]
 810c8a2:	065b      	lsls	r3, r3, #25
 810c8a4:	f53f af2c 	bmi.w	810c700 <_svfiprintf_r+0x28>
 810c8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c8aa:	b01d      	add	sp, #116	; 0x74
 810c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c8b0:	ab03      	add	r3, sp, #12
 810c8b2:	9300      	str	r3, [sp, #0]
 810c8b4:	462a      	mov	r2, r5
 810c8b6:	4b06      	ldr	r3, [pc, #24]	; (810c8d0 <_svfiprintf_r+0x1f8>)
 810c8b8:	a904      	add	r1, sp, #16
 810c8ba:	4638      	mov	r0, r7
 810c8bc:	f7fc f96e 	bl	8108b9c <_printf_i>
 810c8c0:	e7eb      	b.n	810c89a <_svfiprintf_r+0x1c2>
 810c8c2:	bf00      	nop
 810c8c4:	0810d404 	.word	0x0810d404
 810c8c8:	0810d40e 	.word	0x0810d40e
 810c8cc:	08108655 	.word	0x08108655
 810c8d0:	0810c621 	.word	0x0810c621
 810c8d4:	0810d40a 	.word	0x0810d40a

0810c8d8 <__sfputc_r>:
 810c8d8:	6893      	ldr	r3, [r2, #8]
 810c8da:	3b01      	subs	r3, #1
 810c8dc:	2b00      	cmp	r3, #0
 810c8de:	b410      	push	{r4}
 810c8e0:	6093      	str	r3, [r2, #8]
 810c8e2:	da08      	bge.n	810c8f6 <__sfputc_r+0x1e>
 810c8e4:	6994      	ldr	r4, [r2, #24]
 810c8e6:	42a3      	cmp	r3, r4
 810c8e8:	db01      	blt.n	810c8ee <__sfputc_r+0x16>
 810c8ea:	290a      	cmp	r1, #10
 810c8ec:	d103      	bne.n	810c8f6 <__sfputc_r+0x1e>
 810c8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 810c8f2:	f7fd bbe9 	b.w	810a0c8 <__swbuf_r>
 810c8f6:	6813      	ldr	r3, [r2, #0]
 810c8f8:	1c58      	adds	r0, r3, #1
 810c8fa:	6010      	str	r0, [r2, #0]
 810c8fc:	7019      	strb	r1, [r3, #0]
 810c8fe:	4608      	mov	r0, r1
 810c900:	f85d 4b04 	ldr.w	r4, [sp], #4
 810c904:	4770      	bx	lr

0810c906 <__sfputs_r>:
 810c906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c908:	4606      	mov	r6, r0
 810c90a:	460f      	mov	r7, r1
 810c90c:	4614      	mov	r4, r2
 810c90e:	18d5      	adds	r5, r2, r3
 810c910:	42ac      	cmp	r4, r5
 810c912:	d101      	bne.n	810c918 <__sfputs_r+0x12>
 810c914:	2000      	movs	r0, #0
 810c916:	e007      	b.n	810c928 <__sfputs_r+0x22>
 810c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c91c:	463a      	mov	r2, r7
 810c91e:	4630      	mov	r0, r6
 810c920:	f7ff ffda 	bl	810c8d8 <__sfputc_r>
 810c924:	1c43      	adds	r3, r0, #1
 810c926:	d1f3      	bne.n	810c910 <__sfputs_r+0xa>
 810c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810c92c <_vfiprintf_r>:
 810c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c930:	460d      	mov	r5, r1
 810c932:	b09d      	sub	sp, #116	; 0x74
 810c934:	4614      	mov	r4, r2
 810c936:	4698      	mov	r8, r3
 810c938:	4606      	mov	r6, r0
 810c93a:	b118      	cbz	r0, 810c944 <_vfiprintf_r+0x18>
 810c93c:	6983      	ldr	r3, [r0, #24]
 810c93e:	b90b      	cbnz	r3, 810c944 <_vfiprintf_r+0x18>
 810c940:	f7fe fc16 	bl	810b170 <__sinit>
 810c944:	4b89      	ldr	r3, [pc, #548]	; (810cb6c <_vfiprintf_r+0x240>)
 810c946:	429d      	cmp	r5, r3
 810c948:	d11b      	bne.n	810c982 <_vfiprintf_r+0x56>
 810c94a:	6875      	ldr	r5, [r6, #4]
 810c94c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c94e:	07d9      	lsls	r1, r3, #31
 810c950:	d405      	bmi.n	810c95e <_vfiprintf_r+0x32>
 810c952:	89ab      	ldrh	r3, [r5, #12]
 810c954:	059a      	lsls	r2, r3, #22
 810c956:	d402      	bmi.n	810c95e <_vfiprintf_r+0x32>
 810c958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c95a:	f7ff f81a 	bl	810b992 <__retarget_lock_acquire_recursive>
 810c95e:	89ab      	ldrh	r3, [r5, #12]
 810c960:	071b      	lsls	r3, r3, #28
 810c962:	d501      	bpl.n	810c968 <_vfiprintf_r+0x3c>
 810c964:	692b      	ldr	r3, [r5, #16]
 810c966:	b9eb      	cbnz	r3, 810c9a4 <_vfiprintf_r+0x78>
 810c968:	4629      	mov	r1, r5
 810c96a:	4630      	mov	r0, r6
 810c96c:	f7fd fbfe 	bl	810a16c <__swsetup_r>
 810c970:	b1c0      	cbz	r0, 810c9a4 <_vfiprintf_r+0x78>
 810c972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c974:	07dc      	lsls	r4, r3, #31
 810c976:	d50e      	bpl.n	810c996 <_vfiprintf_r+0x6a>
 810c978:	f04f 30ff 	mov.w	r0, #4294967295
 810c97c:	b01d      	add	sp, #116	; 0x74
 810c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c982:	4b7b      	ldr	r3, [pc, #492]	; (810cb70 <_vfiprintf_r+0x244>)
 810c984:	429d      	cmp	r5, r3
 810c986:	d101      	bne.n	810c98c <_vfiprintf_r+0x60>
 810c988:	68b5      	ldr	r5, [r6, #8]
 810c98a:	e7df      	b.n	810c94c <_vfiprintf_r+0x20>
 810c98c:	4b79      	ldr	r3, [pc, #484]	; (810cb74 <_vfiprintf_r+0x248>)
 810c98e:	429d      	cmp	r5, r3
 810c990:	bf08      	it	eq
 810c992:	68f5      	ldreq	r5, [r6, #12]
 810c994:	e7da      	b.n	810c94c <_vfiprintf_r+0x20>
 810c996:	89ab      	ldrh	r3, [r5, #12]
 810c998:	0598      	lsls	r0, r3, #22
 810c99a:	d4ed      	bmi.n	810c978 <_vfiprintf_r+0x4c>
 810c99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c99e:	f7fe fff9 	bl	810b994 <__retarget_lock_release_recursive>
 810c9a2:	e7e9      	b.n	810c978 <_vfiprintf_r+0x4c>
 810c9a4:	2300      	movs	r3, #0
 810c9a6:	9309      	str	r3, [sp, #36]	; 0x24
 810c9a8:	2320      	movs	r3, #32
 810c9aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 810c9b2:	2330      	movs	r3, #48	; 0x30
 810c9b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810cb78 <_vfiprintf_r+0x24c>
 810c9b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c9bc:	f04f 0901 	mov.w	r9, #1
 810c9c0:	4623      	mov	r3, r4
 810c9c2:	469a      	mov	sl, r3
 810c9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c9c8:	b10a      	cbz	r2, 810c9ce <_vfiprintf_r+0xa2>
 810c9ca:	2a25      	cmp	r2, #37	; 0x25
 810c9cc:	d1f9      	bne.n	810c9c2 <_vfiprintf_r+0x96>
 810c9ce:	ebba 0b04 	subs.w	fp, sl, r4
 810c9d2:	d00b      	beq.n	810c9ec <_vfiprintf_r+0xc0>
 810c9d4:	465b      	mov	r3, fp
 810c9d6:	4622      	mov	r2, r4
 810c9d8:	4629      	mov	r1, r5
 810c9da:	4630      	mov	r0, r6
 810c9dc:	f7ff ff93 	bl	810c906 <__sfputs_r>
 810c9e0:	3001      	adds	r0, #1
 810c9e2:	f000 80aa 	beq.w	810cb3a <_vfiprintf_r+0x20e>
 810c9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c9e8:	445a      	add	r2, fp
 810c9ea:	9209      	str	r2, [sp, #36]	; 0x24
 810c9ec:	f89a 3000 	ldrb.w	r3, [sl]
 810c9f0:	2b00      	cmp	r3, #0
 810c9f2:	f000 80a2 	beq.w	810cb3a <_vfiprintf_r+0x20e>
 810c9f6:	2300      	movs	r3, #0
 810c9f8:	f04f 32ff 	mov.w	r2, #4294967295
 810c9fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ca00:	f10a 0a01 	add.w	sl, sl, #1
 810ca04:	9304      	str	r3, [sp, #16]
 810ca06:	9307      	str	r3, [sp, #28]
 810ca08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ca0c:	931a      	str	r3, [sp, #104]	; 0x68
 810ca0e:	4654      	mov	r4, sl
 810ca10:	2205      	movs	r2, #5
 810ca12:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ca16:	4858      	ldr	r0, [pc, #352]	; (810cb78 <_vfiprintf_r+0x24c>)
 810ca18:	f7f3 fc6a 	bl	81002f0 <memchr>
 810ca1c:	9a04      	ldr	r2, [sp, #16]
 810ca1e:	b9d8      	cbnz	r0, 810ca58 <_vfiprintf_r+0x12c>
 810ca20:	06d1      	lsls	r1, r2, #27
 810ca22:	bf44      	itt	mi
 810ca24:	2320      	movmi	r3, #32
 810ca26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ca2a:	0713      	lsls	r3, r2, #28
 810ca2c:	bf44      	itt	mi
 810ca2e:	232b      	movmi	r3, #43	; 0x2b
 810ca30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ca34:	f89a 3000 	ldrb.w	r3, [sl]
 810ca38:	2b2a      	cmp	r3, #42	; 0x2a
 810ca3a:	d015      	beq.n	810ca68 <_vfiprintf_r+0x13c>
 810ca3c:	9a07      	ldr	r2, [sp, #28]
 810ca3e:	4654      	mov	r4, sl
 810ca40:	2000      	movs	r0, #0
 810ca42:	f04f 0c0a 	mov.w	ip, #10
 810ca46:	4621      	mov	r1, r4
 810ca48:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ca4c:	3b30      	subs	r3, #48	; 0x30
 810ca4e:	2b09      	cmp	r3, #9
 810ca50:	d94e      	bls.n	810caf0 <_vfiprintf_r+0x1c4>
 810ca52:	b1b0      	cbz	r0, 810ca82 <_vfiprintf_r+0x156>
 810ca54:	9207      	str	r2, [sp, #28]
 810ca56:	e014      	b.n	810ca82 <_vfiprintf_r+0x156>
 810ca58:	eba0 0308 	sub.w	r3, r0, r8
 810ca5c:	fa09 f303 	lsl.w	r3, r9, r3
 810ca60:	4313      	orrs	r3, r2
 810ca62:	9304      	str	r3, [sp, #16]
 810ca64:	46a2      	mov	sl, r4
 810ca66:	e7d2      	b.n	810ca0e <_vfiprintf_r+0xe2>
 810ca68:	9b03      	ldr	r3, [sp, #12]
 810ca6a:	1d19      	adds	r1, r3, #4
 810ca6c:	681b      	ldr	r3, [r3, #0]
 810ca6e:	9103      	str	r1, [sp, #12]
 810ca70:	2b00      	cmp	r3, #0
 810ca72:	bfbb      	ittet	lt
 810ca74:	425b      	neglt	r3, r3
 810ca76:	f042 0202 	orrlt.w	r2, r2, #2
 810ca7a:	9307      	strge	r3, [sp, #28]
 810ca7c:	9307      	strlt	r3, [sp, #28]
 810ca7e:	bfb8      	it	lt
 810ca80:	9204      	strlt	r2, [sp, #16]
 810ca82:	7823      	ldrb	r3, [r4, #0]
 810ca84:	2b2e      	cmp	r3, #46	; 0x2e
 810ca86:	d10c      	bne.n	810caa2 <_vfiprintf_r+0x176>
 810ca88:	7863      	ldrb	r3, [r4, #1]
 810ca8a:	2b2a      	cmp	r3, #42	; 0x2a
 810ca8c:	d135      	bne.n	810cafa <_vfiprintf_r+0x1ce>
 810ca8e:	9b03      	ldr	r3, [sp, #12]
 810ca90:	1d1a      	adds	r2, r3, #4
 810ca92:	681b      	ldr	r3, [r3, #0]
 810ca94:	9203      	str	r2, [sp, #12]
 810ca96:	2b00      	cmp	r3, #0
 810ca98:	bfb8      	it	lt
 810ca9a:	f04f 33ff 	movlt.w	r3, #4294967295
 810ca9e:	3402      	adds	r4, #2
 810caa0:	9305      	str	r3, [sp, #20]
 810caa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810cb88 <_vfiprintf_r+0x25c>
 810caa6:	7821      	ldrb	r1, [r4, #0]
 810caa8:	2203      	movs	r2, #3
 810caaa:	4650      	mov	r0, sl
 810caac:	f7f3 fc20 	bl	81002f0 <memchr>
 810cab0:	b140      	cbz	r0, 810cac4 <_vfiprintf_r+0x198>
 810cab2:	2340      	movs	r3, #64	; 0x40
 810cab4:	eba0 000a 	sub.w	r0, r0, sl
 810cab8:	fa03 f000 	lsl.w	r0, r3, r0
 810cabc:	9b04      	ldr	r3, [sp, #16]
 810cabe:	4303      	orrs	r3, r0
 810cac0:	3401      	adds	r4, #1
 810cac2:	9304      	str	r3, [sp, #16]
 810cac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810cac8:	482c      	ldr	r0, [pc, #176]	; (810cb7c <_vfiprintf_r+0x250>)
 810caca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810cace:	2206      	movs	r2, #6
 810cad0:	f7f3 fc0e 	bl	81002f0 <memchr>
 810cad4:	2800      	cmp	r0, #0
 810cad6:	d03f      	beq.n	810cb58 <_vfiprintf_r+0x22c>
 810cad8:	4b29      	ldr	r3, [pc, #164]	; (810cb80 <_vfiprintf_r+0x254>)
 810cada:	bb1b      	cbnz	r3, 810cb24 <_vfiprintf_r+0x1f8>
 810cadc:	9b03      	ldr	r3, [sp, #12]
 810cade:	3307      	adds	r3, #7
 810cae0:	f023 0307 	bic.w	r3, r3, #7
 810cae4:	3308      	adds	r3, #8
 810cae6:	9303      	str	r3, [sp, #12]
 810cae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810caea:	443b      	add	r3, r7
 810caec:	9309      	str	r3, [sp, #36]	; 0x24
 810caee:	e767      	b.n	810c9c0 <_vfiprintf_r+0x94>
 810caf0:	fb0c 3202 	mla	r2, ip, r2, r3
 810caf4:	460c      	mov	r4, r1
 810caf6:	2001      	movs	r0, #1
 810caf8:	e7a5      	b.n	810ca46 <_vfiprintf_r+0x11a>
 810cafa:	2300      	movs	r3, #0
 810cafc:	3401      	adds	r4, #1
 810cafe:	9305      	str	r3, [sp, #20]
 810cb00:	4619      	mov	r1, r3
 810cb02:	f04f 0c0a 	mov.w	ip, #10
 810cb06:	4620      	mov	r0, r4
 810cb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 810cb0c:	3a30      	subs	r2, #48	; 0x30
 810cb0e:	2a09      	cmp	r2, #9
 810cb10:	d903      	bls.n	810cb1a <_vfiprintf_r+0x1ee>
 810cb12:	2b00      	cmp	r3, #0
 810cb14:	d0c5      	beq.n	810caa2 <_vfiprintf_r+0x176>
 810cb16:	9105      	str	r1, [sp, #20]
 810cb18:	e7c3      	b.n	810caa2 <_vfiprintf_r+0x176>
 810cb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 810cb1e:	4604      	mov	r4, r0
 810cb20:	2301      	movs	r3, #1
 810cb22:	e7f0      	b.n	810cb06 <_vfiprintf_r+0x1da>
 810cb24:	ab03      	add	r3, sp, #12
 810cb26:	9300      	str	r3, [sp, #0]
 810cb28:	462a      	mov	r2, r5
 810cb2a:	4b16      	ldr	r3, [pc, #88]	; (810cb84 <_vfiprintf_r+0x258>)
 810cb2c:	a904      	add	r1, sp, #16
 810cb2e:	4630      	mov	r0, r6
 810cb30:	f7fb fd90 	bl	8108654 <_printf_float>
 810cb34:	4607      	mov	r7, r0
 810cb36:	1c78      	adds	r0, r7, #1
 810cb38:	d1d6      	bne.n	810cae8 <_vfiprintf_r+0x1bc>
 810cb3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810cb3c:	07d9      	lsls	r1, r3, #31
 810cb3e:	d405      	bmi.n	810cb4c <_vfiprintf_r+0x220>
 810cb40:	89ab      	ldrh	r3, [r5, #12]
 810cb42:	059a      	lsls	r2, r3, #22
 810cb44:	d402      	bmi.n	810cb4c <_vfiprintf_r+0x220>
 810cb46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810cb48:	f7fe ff24 	bl	810b994 <__retarget_lock_release_recursive>
 810cb4c:	89ab      	ldrh	r3, [r5, #12]
 810cb4e:	065b      	lsls	r3, r3, #25
 810cb50:	f53f af12 	bmi.w	810c978 <_vfiprintf_r+0x4c>
 810cb54:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cb56:	e711      	b.n	810c97c <_vfiprintf_r+0x50>
 810cb58:	ab03      	add	r3, sp, #12
 810cb5a:	9300      	str	r3, [sp, #0]
 810cb5c:	462a      	mov	r2, r5
 810cb5e:	4b09      	ldr	r3, [pc, #36]	; (810cb84 <_vfiprintf_r+0x258>)
 810cb60:	a904      	add	r1, sp, #16
 810cb62:	4630      	mov	r0, r6
 810cb64:	f7fc f81a 	bl	8108b9c <_printf_i>
 810cb68:	e7e4      	b.n	810cb34 <_vfiprintf_r+0x208>
 810cb6a:	bf00      	nop
 810cb6c:	0810d1ec 	.word	0x0810d1ec
 810cb70:	0810d20c 	.word	0x0810d20c
 810cb74:	0810d1cc 	.word	0x0810d1cc
 810cb78:	0810d404 	.word	0x0810d404
 810cb7c:	0810d40e 	.word	0x0810d40e
 810cb80:	08108655 	.word	0x08108655
 810cb84:	0810c907 	.word	0x0810c907
 810cb88:	0810d40a 	.word	0x0810d40a
 810cb8c:	00000000 	.word	0x00000000

0810cb90 <nan>:
 810cb90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810cb98 <nan+0x8>
 810cb94:	4770      	bx	lr
 810cb96:	bf00      	nop
 810cb98:	00000000 	.word	0x00000000
 810cb9c:	7ff80000 	.word	0x7ff80000

0810cba0 <_sbrk_r>:
 810cba0:	b538      	push	{r3, r4, r5, lr}
 810cba2:	4d06      	ldr	r5, [pc, #24]	; (810cbbc <_sbrk_r+0x1c>)
 810cba4:	2300      	movs	r3, #0
 810cba6:	4604      	mov	r4, r0
 810cba8:	4608      	mov	r0, r1
 810cbaa:	602b      	str	r3, [r5, #0]
 810cbac:	f7f5 f85e 	bl	8101c6c <_sbrk>
 810cbb0:	1c43      	adds	r3, r0, #1
 810cbb2:	d102      	bne.n	810cbba <_sbrk_r+0x1a>
 810cbb4:	682b      	ldr	r3, [r5, #0]
 810cbb6:	b103      	cbz	r3, 810cbba <_sbrk_r+0x1a>
 810cbb8:	6023      	str	r3, [r4, #0]
 810cbba:	bd38      	pop	{r3, r4, r5, pc}
 810cbbc:	10000364 	.word	0x10000364

0810cbc0 <__sread>:
 810cbc0:	b510      	push	{r4, lr}
 810cbc2:	460c      	mov	r4, r1
 810cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cbc8:	f000 f93a 	bl	810ce40 <_read_r>
 810cbcc:	2800      	cmp	r0, #0
 810cbce:	bfab      	itete	ge
 810cbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810cbd2:	89a3      	ldrhlt	r3, [r4, #12]
 810cbd4:	181b      	addge	r3, r3, r0
 810cbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810cbda:	bfac      	ite	ge
 810cbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 810cbde:	81a3      	strhlt	r3, [r4, #12]
 810cbe0:	bd10      	pop	{r4, pc}

0810cbe2 <__swrite>:
 810cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cbe6:	461f      	mov	r7, r3
 810cbe8:	898b      	ldrh	r3, [r1, #12]
 810cbea:	05db      	lsls	r3, r3, #23
 810cbec:	4605      	mov	r5, r0
 810cbee:	460c      	mov	r4, r1
 810cbf0:	4616      	mov	r6, r2
 810cbf2:	d505      	bpl.n	810cc00 <__swrite+0x1e>
 810cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cbf8:	2302      	movs	r3, #2
 810cbfa:	2200      	movs	r2, #0
 810cbfc:	f000 f8b8 	bl	810cd70 <_lseek_r>
 810cc00:	89a3      	ldrh	r3, [r4, #12]
 810cc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810cc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810cc0a:	81a3      	strh	r3, [r4, #12]
 810cc0c:	4632      	mov	r2, r6
 810cc0e:	463b      	mov	r3, r7
 810cc10:	4628      	mov	r0, r5
 810cc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810cc16:	f000 b837 	b.w	810cc88 <_write_r>

0810cc1a <__sseek>:
 810cc1a:	b510      	push	{r4, lr}
 810cc1c:	460c      	mov	r4, r1
 810cc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cc22:	f000 f8a5 	bl	810cd70 <_lseek_r>
 810cc26:	1c43      	adds	r3, r0, #1
 810cc28:	89a3      	ldrh	r3, [r4, #12]
 810cc2a:	bf15      	itete	ne
 810cc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 810cc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810cc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810cc36:	81a3      	strheq	r3, [r4, #12]
 810cc38:	bf18      	it	ne
 810cc3a:	81a3      	strhne	r3, [r4, #12]
 810cc3c:	bd10      	pop	{r4, pc}

0810cc3e <__sclose>:
 810cc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cc42:	f000 b851 	b.w	810cce8 <_close_r>

0810cc46 <strncmp>:
 810cc46:	b510      	push	{r4, lr}
 810cc48:	b17a      	cbz	r2, 810cc6a <strncmp+0x24>
 810cc4a:	4603      	mov	r3, r0
 810cc4c:	3901      	subs	r1, #1
 810cc4e:	1884      	adds	r4, r0, r2
 810cc50:	f813 0b01 	ldrb.w	r0, [r3], #1
 810cc54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810cc58:	4290      	cmp	r0, r2
 810cc5a:	d101      	bne.n	810cc60 <strncmp+0x1a>
 810cc5c:	42a3      	cmp	r3, r4
 810cc5e:	d101      	bne.n	810cc64 <strncmp+0x1e>
 810cc60:	1a80      	subs	r0, r0, r2
 810cc62:	bd10      	pop	{r4, pc}
 810cc64:	2800      	cmp	r0, #0
 810cc66:	d1f3      	bne.n	810cc50 <strncmp+0xa>
 810cc68:	e7fa      	b.n	810cc60 <strncmp+0x1a>
 810cc6a:	4610      	mov	r0, r2
 810cc6c:	e7f9      	b.n	810cc62 <strncmp+0x1c>

0810cc6e <__ascii_wctomb>:
 810cc6e:	b149      	cbz	r1, 810cc84 <__ascii_wctomb+0x16>
 810cc70:	2aff      	cmp	r2, #255	; 0xff
 810cc72:	bf85      	ittet	hi
 810cc74:	238a      	movhi	r3, #138	; 0x8a
 810cc76:	6003      	strhi	r3, [r0, #0]
 810cc78:	700a      	strbls	r2, [r1, #0]
 810cc7a:	f04f 30ff 	movhi.w	r0, #4294967295
 810cc7e:	bf98      	it	ls
 810cc80:	2001      	movls	r0, #1
 810cc82:	4770      	bx	lr
 810cc84:	4608      	mov	r0, r1
 810cc86:	4770      	bx	lr

0810cc88 <_write_r>:
 810cc88:	b538      	push	{r3, r4, r5, lr}
 810cc8a:	4d07      	ldr	r5, [pc, #28]	; (810cca8 <_write_r+0x20>)
 810cc8c:	4604      	mov	r4, r0
 810cc8e:	4608      	mov	r0, r1
 810cc90:	4611      	mov	r1, r2
 810cc92:	2200      	movs	r2, #0
 810cc94:	602a      	str	r2, [r5, #0]
 810cc96:	461a      	mov	r2, r3
 810cc98:	f7f4 ff97 	bl	8101bca <_write>
 810cc9c:	1c43      	adds	r3, r0, #1
 810cc9e:	d102      	bne.n	810cca6 <_write_r+0x1e>
 810cca0:	682b      	ldr	r3, [r5, #0]
 810cca2:	b103      	cbz	r3, 810cca6 <_write_r+0x1e>
 810cca4:	6023      	str	r3, [r4, #0]
 810cca6:	bd38      	pop	{r3, r4, r5, pc}
 810cca8:	10000364 	.word	0x10000364

0810ccac <__assert_func>:
 810ccac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ccae:	4614      	mov	r4, r2
 810ccb0:	461a      	mov	r2, r3
 810ccb2:	4b09      	ldr	r3, [pc, #36]	; (810ccd8 <__assert_func+0x2c>)
 810ccb4:	681b      	ldr	r3, [r3, #0]
 810ccb6:	4605      	mov	r5, r0
 810ccb8:	68d8      	ldr	r0, [r3, #12]
 810ccba:	b14c      	cbz	r4, 810ccd0 <__assert_func+0x24>
 810ccbc:	4b07      	ldr	r3, [pc, #28]	; (810ccdc <__assert_func+0x30>)
 810ccbe:	9100      	str	r1, [sp, #0]
 810ccc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ccc4:	4906      	ldr	r1, [pc, #24]	; (810cce0 <__assert_func+0x34>)
 810ccc6:	462b      	mov	r3, r5
 810ccc8:	f000 f81e 	bl	810cd08 <fiprintf>
 810cccc:	f000 f8ca 	bl	810ce64 <abort>
 810ccd0:	4b04      	ldr	r3, [pc, #16]	; (810cce4 <__assert_func+0x38>)
 810ccd2:	461c      	mov	r4, r3
 810ccd4:	e7f3      	b.n	810ccbe <__assert_func+0x12>
 810ccd6:	bf00      	nop
 810ccd8:	10000014 	.word	0x10000014
 810ccdc:	0810d415 	.word	0x0810d415
 810cce0:	0810d422 	.word	0x0810d422
 810cce4:	0810d450 	.word	0x0810d450

0810cce8 <_close_r>:
 810cce8:	b538      	push	{r3, r4, r5, lr}
 810ccea:	4d06      	ldr	r5, [pc, #24]	; (810cd04 <_close_r+0x1c>)
 810ccec:	2300      	movs	r3, #0
 810ccee:	4604      	mov	r4, r0
 810ccf0:	4608      	mov	r0, r1
 810ccf2:	602b      	str	r3, [r5, #0]
 810ccf4:	f7f4 ff85 	bl	8101c02 <_close>
 810ccf8:	1c43      	adds	r3, r0, #1
 810ccfa:	d102      	bne.n	810cd02 <_close_r+0x1a>
 810ccfc:	682b      	ldr	r3, [r5, #0]
 810ccfe:	b103      	cbz	r3, 810cd02 <_close_r+0x1a>
 810cd00:	6023      	str	r3, [r4, #0]
 810cd02:	bd38      	pop	{r3, r4, r5, pc}
 810cd04:	10000364 	.word	0x10000364

0810cd08 <fiprintf>:
 810cd08:	b40e      	push	{r1, r2, r3}
 810cd0a:	b503      	push	{r0, r1, lr}
 810cd0c:	4601      	mov	r1, r0
 810cd0e:	ab03      	add	r3, sp, #12
 810cd10:	4805      	ldr	r0, [pc, #20]	; (810cd28 <fiprintf+0x20>)
 810cd12:	f853 2b04 	ldr.w	r2, [r3], #4
 810cd16:	6800      	ldr	r0, [r0, #0]
 810cd18:	9301      	str	r3, [sp, #4]
 810cd1a:	f7ff fe07 	bl	810c92c <_vfiprintf_r>
 810cd1e:	b002      	add	sp, #8
 810cd20:	f85d eb04 	ldr.w	lr, [sp], #4
 810cd24:	b003      	add	sp, #12
 810cd26:	4770      	bx	lr
 810cd28:	10000014 	.word	0x10000014

0810cd2c <_fstat_r>:
 810cd2c:	b538      	push	{r3, r4, r5, lr}
 810cd2e:	4d07      	ldr	r5, [pc, #28]	; (810cd4c <_fstat_r+0x20>)
 810cd30:	2300      	movs	r3, #0
 810cd32:	4604      	mov	r4, r0
 810cd34:	4608      	mov	r0, r1
 810cd36:	4611      	mov	r1, r2
 810cd38:	602b      	str	r3, [r5, #0]
 810cd3a:	f7f4 ff6e 	bl	8101c1a <_fstat>
 810cd3e:	1c43      	adds	r3, r0, #1
 810cd40:	d102      	bne.n	810cd48 <_fstat_r+0x1c>
 810cd42:	682b      	ldr	r3, [r5, #0]
 810cd44:	b103      	cbz	r3, 810cd48 <_fstat_r+0x1c>
 810cd46:	6023      	str	r3, [r4, #0]
 810cd48:	bd38      	pop	{r3, r4, r5, pc}
 810cd4a:	bf00      	nop
 810cd4c:	10000364 	.word	0x10000364

0810cd50 <_isatty_r>:
 810cd50:	b538      	push	{r3, r4, r5, lr}
 810cd52:	4d06      	ldr	r5, [pc, #24]	; (810cd6c <_isatty_r+0x1c>)
 810cd54:	2300      	movs	r3, #0
 810cd56:	4604      	mov	r4, r0
 810cd58:	4608      	mov	r0, r1
 810cd5a:	602b      	str	r3, [r5, #0]
 810cd5c:	f7f4 ff6d 	bl	8101c3a <_isatty>
 810cd60:	1c43      	adds	r3, r0, #1
 810cd62:	d102      	bne.n	810cd6a <_isatty_r+0x1a>
 810cd64:	682b      	ldr	r3, [r5, #0]
 810cd66:	b103      	cbz	r3, 810cd6a <_isatty_r+0x1a>
 810cd68:	6023      	str	r3, [r4, #0]
 810cd6a:	bd38      	pop	{r3, r4, r5, pc}
 810cd6c:	10000364 	.word	0x10000364

0810cd70 <_lseek_r>:
 810cd70:	b538      	push	{r3, r4, r5, lr}
 810cd72:	4d07      	ldr	r5, [pc, #28]	; (810cd90 <_lseek_r+0x20>)
 810cd74:	4604      	mov	r4, r0
 810cd76:	4608      	mov	r0, r1
 810cd78:	4611      	mov	r1, r2
 810cd7a:	2200      	movs	r2, #0
 810cd7c:	602a      	str	r2, [r5, #0]
 810cd7e:	461a      	mov	r2, r3
 810cd80:	f7f4 ff66 	bl	8101c50 <_lseek>
 810cd84:	1c43      	adds	r3, r0, #1
 810cd86:	d102      	bne.n	810cd8e <_lseek_r+0x1e>
 810cd88:	682b      	ldr	r3, [r5, #0]
 810cd8a:	b103      	cbz	r3, 810cd8e <_lseek_r+0x1e>
 810cd8c:	6023      	str	r3, [r4, #0]
 810cd8e:	bd38      	pop	{r3, r4, r5, pc}
 810cd90:	10000364 	.word	0x10000364

0810cd94 <memmove>:
 810cd94:	4288      	cmp	r0, r1
 810cd96:	b510      	push	{r4, lr}
 810cd98:	eb01 0402 	add.w	r4, r1, r2
 810cd9c:	d902      	bls.n	810cda4 <memmove+0x10>
 810cd9e:	4284      	cmp	r4, r0
 810cda0:	4623      	mov	r3, r4
 810cda2:	d807      	bhi.n	810cdb4 <memmove+0x20>
 810cda4:	1e43      	subs	r3, r0, #1
 810cda6:	42a1      	cmp	r1, r4
 810cda8:	d008      	beq.n	810cdbc <memmove+0x28>
 810cdaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 810cdae:	f803 2f01 	strb.w	r2, [r3, #1]!
 810cdb2:	e7f8      	b.n	810cda6 <memmove+0x12>
 810cdb4:	4402      	add	r2, r0
 810cdb6:	4601      	mov	r1, r0
 810cdb8:	428a      	cmp	r2, r1
 810cdba:	d100      	bne.n	810cdbe <memmove+0x2a>
 810cdbc:	bd10      	pop	{r4, pc}
 810cdbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810cdc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810cdc6:	e7f7      	b.n	810cdb8 <memmove+0x24>

0810cdc8 <__malloc_lock>:
 810cdc8:	4801      	ldr	r0, [pc, #4]	; (810cdd0 <__malloc_lock+0x8>)
 810cdca:	f7fe bde2 	b.w	810b992 <__retarget_lock_acquire_recursive>
 810cdce:	bf00      	nop
 810cdd0:	10000358 	.word	0x10000358

0810cdd4 <__malloc_unlock>:
 810cdd4:	4801      	ldr	r0, [pc, #4]	; (810cddc <__malloc_unlock+0x8>)
 810cdd6:	f7fe bddd 	b.w	810b994 <__retarget_lock_release_recursive>
 810cdda:	bf00      	nop
 810cddc:	10000358 	.word	0x10000358

0810cde0 <_realloc_r>:
 810cde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cde4:	4680      	mov	r8, r0
 810cde6:	4614      	mov	r4, r2
 810cde8:	460e      	mov	r6, r1
 810cdea:	b921      	cbnz	r1, 810cdf6 <_realloc_r+0x16>
 810cdec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810cdf0:	4611      	mov	r1, r2
 810cdf2:	f7ff bba1 	b.w	810c538 <_malloc_r>
 810cdf6:	b92a      	cbnz	r2, 810ce04 <_realloc_r+0x24>
 810cdf8:	f7ff fb32 	bl	810c460 <_free_r>
 810cdfc:	4625      	mov	r5, r4
 810cdfe:	4628      	mov	r0, r5
 810ce00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce04:	f000 f835 	bl	810ce72 <_malloc_usable_size_r>
 810ce08:	4284      	cmp	r4, r0
 810ce0a:	4607      	mov	r7, r0
 810ce0c:	d802      	bhi.n	810ce14 <_realloc_r+0x34>
 810ce0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810ce12:	d812      	bhi.n	810ce3a <_realloc_r+0x5a>
 810ce14:	4621      	mov	r1, r4
 810ce16:	4640      	mov	r0, r8
 810ce18:	f7ff fb8e 	bl	810c538 <_malloc_r>
 810ce1c:	4605      	mov	r5, r0
 810ce1e:	2800      	cmp	r0, #0
 810ce20:	d0ed      	beq.n	810cdfe <_realloc_r+0x1e>
 810ce22:	42bc      	cmp	r4, r7
 810ce24:	4622      	mov	r2, r4
 810ce26:	4631      	mov	r1, r6
 810ce28:	bf28      	it	cs
 810ce2a:	463a      	movcs	r2, r7
 810ce2c:	f7fe fe32 	bl	810ba94 <memcpy>
 810ce30:	4631      	mov	r1, r6
 810ce32:	4640      	mov	r0, r8
 810ce34:	f7ff fb14 	bl	810c460 <_free_r>
 810ce38:	e7e1      	b.n	810cdfe <_realloc_r+0x1e>
 810ce3a:	4635      	mov	r5, r6
 810ce3c:	e7df      	b.n	810cdfe <_realloc_r+0x1e>
	...

0810ce40 <_read_r>:
 810ce40:	b538      	push	{r3, r4, r5, lr}
 810ce42:	4d07      	ldr	r5, [pc, #28]	; (810ce60 <_read_r+0x20>)
 810ce44:	4604      	mov	r4, r0
 810ce46:	4608      	mov	r0, r1
 810ce48:	4611      	mov	r1, r2
 810ce4a:	2200      	movs	r2, #0
 810ce4c:	602a      	str	r2, [r5, #0]
 810ce4e:	461a      	mov	r2, r3
 810ce50:	f7f4 fe9e 	bl	8101b90 <_read>
 810ce54:	1c43      	adds	r3, r0, #1
 810ce56:	d102      	bne.n	810ce5e <_read_r+0x1e>
 810ce58:	682b      	ldr	r3, [r5, #0]
 810ce5a:	b103      	cbz	r3, 810ce5e <_read_r+0x1e>
 810ce5c:	6023      	str	r3, [r4, #0]
 810ce5e:	bd38      	pop	{r3, r4, r5, pc}
 810ce60:	10000364 	.word	0x10000364

0810ce64 <abort>:
 810ce64:	b508      	push	{r3, lr}
 810ce66:	2006      	movs	r0, #6
 810ce68:	f000 f834 	bl	810ced4 <raise>
 810ce6c:	2001      	movs	r0, #1
 810ce6e:	f7f4 fe85 	bl	8101b7c <_exit>

0810ce72 <_malloc_usable_size_r>:
 810ce72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ce76:	1f18      	subs	r0, r3, #4
 810ce78:	2b00      	cmp	r3, #0
 810ce7a:	bfbc      	itt	lt
 810ce7c:	580b      	ldrlt	r3, [r1, r0]
 810ce7e:	18c0      	addlt	r0, r0, r3
 810ce80:	4770      	bx	lr

0810ce82 <_raise_r>:
 810ce82:	291f      	cmp	r1, #31
 810ce84:	b538      	push	{r3, r4, r5, lr}
 810ce86:	4604      	mov	r4, r0
 810ce88:	460d      	mov	r5, r1
 810ce8a:	d904      	bls.n	810ce96 <_raise_r+0x14>
 810ce8c:	2316      	movs	r3, #22
 810ce8e:	6003      	str	r3, [r0, #0]
 810ce90:	f04f 30ff 	mov.w	r0, #4294967295
 810ce94:	bd38      	pop	{r3, r4, r5, pc}
 810ce96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ce98:	b112      	cbz	r2, 810cea0 <_raise_r+0x1e>
 810ce9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ce9e:	b94b      	cbnz	r3, 810ceb4 <_raise_r+0x32>
 810cea0:	4620      	mov	r0, r4
 810cea2:	f000 f831 	bl	810cf08 <_getpid_r>
 810cea6:	462a      	mov	r2, r5
 810cea8:	4601      	mov	r1, r0
 810ceaa:	4620      	mov	r0, r4
 810ceac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ceb0:	f000 b818 	b.w	810cee4 <_kill_r>
 810ceb4:	2b01      	cmp	r3, #1
 810ceb6:	d00a      	beq.n	810cece <_raise_r+0x4c>
 810ceb8:	1c59      	adds	r1, r3, #1
 810ceba:	d103      	bne.n	810cec4 <_raise_r+0x42>
 810cebc:	2316      	movs	r3, #22
 810cebe:	6003      	str	r3, [r0, #0]
 810cec0:	2001      	movs	r0, #1
 810cec2:	e7e7      	b.n	810ce94 <_raise_r+0x12>
 810cec4:	2400      	movs	r4, #0
 810cec6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ceca:	4628      	mov	r0, r5
 810cecc:	4798      	blx	r3
 810cece:	2000      	movs	r0, #0
 810ced0:	e7e0      	b.n	810ce94 <_raise_r+0x12>
	...

0810ced4 <raise>:
 810ced4:	4b02      	ldr	r3, [pc, #8]	; (810cee0 <raise+0xc>)
 810ced6:	4601      	mov	r1, r0
 810ced8:	6818      	ldr	r0, [r3, #0]
 810ceda:	f7ff bfd2 	b.w	810ce82 <_raise_r>
 810cede:	bf00      	nop
 810cee0:	10000014 	.word	0x10000014

0810cee4 <_kill_r>:
 810cee4:	b538      	push	{r3, r4, r5, lr}
 810cee6:	4d07      	ldr	r5, [pc, #28]	; (810cf04 <_kill_r+0x20>)
 810cee8:	2300      	movs	r3, #0
 810ceea:	4604      	mov	r4, r0
 810ceec:	4608      	mov	r0, r1
 810ceee:	4611      	mov	r1, r2
 810cef0:	602b      	str	r3, [r5, #0]
 810cef2:	f7f4 fe33 	bl	8101b5c <_kill>
 810cef6:	1c43      	adds	r3, r0, #1
 810cef8:	d102      	bne.n	810cf00 <_kill_r+0x1c>
 810cefa:	682b      	ldr	r3, [r5, #0]
 810cefc:	b103      	cbz	r3, 810cf00 <_kill_r+0x1c>
 810cefe:	6023      	str	r3, [r4, #0]
 810cf00:	bd38      	pop	{r3, r4, r5, pc}
 810cf02:	bf00      	nop
 810cf04:	10000364 	.word	0x10000364

0810cf08 <_getpid_r>:
 810cf08:	f7f4 be20 	b.w	8101b4c <_getpid>

0810cf0c <_init>:
 810cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cf0e:	bf00      	nop
 810cf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cf12:	bc08      	pop	{r3}
 810cf14:	469e      	mov	lr, r3
 810cf16:	4770      	bx	lr

0810cf18 <_fini>:
 810cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cf1a:	bf00      	nop
 810cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cf1e:	bc08      	pop	{r3}
 810cf20:	469e      	mov	lr, r3
 810cf22:	4770      	bx	lr
