
Ballbot_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcd4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0810df78  0810df78  0001df78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e4e4  0810e4e4  0001e4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e4ec  0810e4ec  0001e4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e4f0  0810e4f0  0001e4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  10000000  0810e4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000350  100001e8  0810e6dc  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000538  0810e6dc  00020538  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cf51  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031b3  00000000  00000000  0003d169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015c0  00000000  00000000  00040320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014a8  00000000  00000000  000418e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c5c8  00000000  00000000  00042d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001db90  00000000  00000000  0007f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018c204  00000000  00000000  0009cee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002290e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007320  00000000  00000000  00229134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810df5c 	.word	0x0810df5c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810df5c 	.word	0x0810df5c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <IMU_MPU6050_Init>:
//65.5 LSB/°/s for ± 500 °/s
float Acc_LSB_Sensitivity = 8192.0;
float Gyro_LSB_Sensitivity = 65.5;


int8_t IMU_MPU6050_Init (void){
 8101138:	b580      	push	{r7, lr}
 810113a:	b086      	sub	sp, #24
 810113c:	af04      	add	r7, sp, #16
	uint8_t Data;
	HAL_StatusTypeDef ret;

	//Double check I2C communication
	ret = HAL_I2C_IsDeviceReady (&hi2c1,MPU6050_ADDR, 2, 1000); //2 trials, 1000ms each
 810113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101142:	2202      	movs	r2, #2
 8101144:	21d0      	movs	r1, #208	; 0xd0
 8101146:	485f      	ldr	r0, [pc, #380]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101148:	f003 fcec 	bl	8104b24 <HAL_I2C_IsDeviceReady>
 810114c:	4603      	mov	r3, r0
 810114e:	71fb      	strb	r3, [r7, #7]
	if(ret!=HAL_OK){
 8101150:	79fb      	ldrb	r3, [r7, #7]
 8101152:	2b00      	cmp	r3, #0
 8101154:	d002      	beq.n	810115c <IMU_MPU6050_Init+0x24>
		return -1;
 8101156:	f04f 33ff 	mov.w	r3, #4294967295
 810115a:	e0af      	b.n	81012bc <IMU_MPU6050_Init+0x184>
	}
	uint8_t check;
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 810115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101160:	9302      	str	r3, [sp, #8]
 8101162:	2301      	movs	r3, #1
 8101164:	9301      	str	r3, [sp, #4]
 8101166:	1d7b      	adds	r3, r7, #5
 8101168:	9300      	str	r3, [sp, #0]
 810116a:	2301      	movs	r3, #1
 810116c:	2275      	movs	r2, #117	; 0x75
 810116e:	21d0      	movs	r1, #208	; 0xd0
 8101170:	4854      	ldr	r0, [pc, #336]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101172:	f003 fbbd 	bl	81048f0 <HAL_I2C_Mem_Read>
 8101176:	4603      	mov	r3, r0
 8101178:	71fb      	strb	r3, [r7, #7]
	if((ret!=HAL_OK) || (check!=0x68)){
 810117a:	79fb      	ldrb	r3, [r7, #7]
 810117c:	2b00      	cmp	r3, #0
 810117e:	d102      	bne.n	8101186 <IMU_MPU6050_Init+0x4e>
 8101180:	797b      	ldrb	r3, [r7, #5]
 8101182:	2b68      	cmp	r3, #104	; 0x68
 8101184:	d002      	beq.n	810118c <IMU_MPU6050_Init+0x54>
		return -1;
 8101186:	f04f 33ff 	mov.w	r3, #4294967295
 810118a:	e097      	b.n	81012bc <IMU_MPU6050_Init+0x184>

	//Initialize

	//Power Management 1 register
	//sensor's normal operation
	Data = 0;
 810118c:	2300      	movs	r3, #0
 810118e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8101190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101194:	9302      	str	r3, [sp, #8]
 8101196:	2301      	movs	r3, #1
 8101198:	9301      	str	r3, [sp, #4]
 810119a:	1dbb      	adds	r3, r7, #6
 810119c:	9300      	str	r3, [sp, #0]
 810119e:	2301      	movs	r3, #1
 81011a0:	226b      	movs	r2, #107	; 0x6b
 81011a2:	21d0      	movs	r1, #208	; 0xd0
 81011a4:	4847      	ldr	r0, [pc, #284]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011a6:	f003 fa8f 	bl	81046c8 <HAL_I2C_Mem_Write>
 81011aa:	4603      	mov	r3, r0
 81011ac:	71fb      	strb	r3, [r7, #7]

	//Accelerometer Configuration register
	//set accelerometer's full scale range to ± 4g (AFS_SEL=1)
	//no self-test
	Data = 0x08;
 81011ae:	2308      	movs	r3, #8
 81011b0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 81011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011b6:	9302      	str	r3, [sp, #8]
 81011b8:	2301      	movs	r3, #1
 81011ba:	9301      	str	r3, [sp, #4]
 81011bc:	1dbb      	adds	r3, r7, #6
 81011be:	9300      	str	r3, [sp, #0]
 81011c0:	2301      	movs	r3, #1
 81011c2:	221c      	movs	r2, #28
 81011c4:	21d0      	movs	r1, #208	; 0xd0
 81011c6:	483f      	ldr	r0, [pc, #252]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011c8:	f003 fa7e 	bl	81046c8 <HAL_I2C_Mem_Write>
 81011cc:	4603      	mov	r3, r0
 81011ce:	71fb      	strb	r3, [r7, #7]

	//Gyroscope Configuration register
	//set gyroscope's full scale range to ± 500 °/s (FS_SEL=1)
	//no self-test
	Data = 0x08;
 81011d0:	2308      	movs	r3, #8
 81011d2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 81011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011d8:	9302      	str	r3, [sp, #8]
 81011da:	2301      	movs	r3, #1
 81011dc:	9301      	str	r3, [sp, #4]
 81011de:	1dbb      	adds	r3, r7, #6
 81011e0:	9300      	str	r3, [sp, #0]
 81011e2:	2301      	movs	r3, #1
 81011e4:	221b      	movs	r2, #27
 81011e6:	21d0      	movs	r1, #208	; 0xd0
 81011e8:	4836      	ldr	r0, [pc, #216]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011ea:	f003 fa6d 	bl	81046c8 <HAL_I2C_Mem_Write>
	//enable Digital Low Pass Filter(DLPF) with the highest bandwidth (DLPF_CFG=1):
	//Acc: 184Hz bandwidth, 2.0ms delay
	//Gyro: 188Hz bandwidth, 1.9ms delay
	//Note with DLPF gyroscope frequency reduces to 1kHz
	//Note acc max frequency is 1KHz
	Data = 0x01;
 81011ee:	2301      	movs	r3, #1
 81011f0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 81011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011f6:	9302      	str	r3, [sp, #8]
 81011f8:	2301      	movs	r3, #1
 81011fa:	9301      	str	r3, [sp, #4]
 81011fc:	1dbb      	adds	r3, r7, #6
 81011fe:	9300      	str	r3, [sp, #0]
 8101200:	2301      	movs	r3, #1
 8101202:	221a      	movs	r2, #26
 8101204:	21d0      	movs	r1, #208	; 0xd0
 8101206:	482f      	ldr	r0, [pc, #188]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101208:	f003 fa5e 	bl	81046c8 <HAL_I2C_Mem_Write>
 810120c:	4603      	mov	r3, r0
 810120e:	71fb      	strb	r3, [r7, #7]

	//Sample Rate Divider register
	//Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
	//set sample rate to 20Hz, 50ms (SMPLRT_DIV=49)
	Data = 0x31;
 8101210:	2331      	movs	r3, #49	; 0x31
 8101212:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8101214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101218:	9302      	str	r3, [sp, #8]
 810121a:	2301      	movs	r3, #1
 810121c:	9301      	str	r3, [sp, #4]
 810121e:	1dbb      	adds	r3, r7, #6
 8101220:	9300      	str	r3, [sp, #0]
 8101222:	2301      	movs	r3, #1
 8101224:	2219      	movs	r2, #25
 8101226:	21d0      	movs	r1, #208	; 0xd0
 8101228:	4826      	ldr	r0, [pc, #152]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810122a:	f003 fa4d 	bl	81046c8 <HAL_I2C_Mem_Write>
 810122e:	4603      	mov	r3, r0
 8101230:	71fb      	strb	r3, [r7, #7]

	//User Control register
	//enable FIFO buffer
	Data = 0x40;
 8101232:	2340      	movs	r3, #64	; 0x40
 8101234:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810123a:	9302      	str	r3, [sp, #8]
 810123c:	2301      	movs	r3, #1
 810123e:	9301      	str	r3, [sp, #4]
 8101240:	1dbb      	adds	r3, r7, #6
 8101242:	9300      	str	r3, [sp, #0]
 8101244:	2301      	movs	r3, #1
 8101246:	226a      	movs	r2, #106	; 0x6a
 8101248:	21d0      	movs	r1, #208	; 0xd0
 810124a:	481e      	ldr	r0, [pc, #120]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810124c:	f003 fa3c 	bl	81046c8 <HAL_I2C_Mem_Write>
 8101250:	4603      	mov	r3, r0
 8101252:	71fb      	strb	r3, [r7, #7]

	//FIFO Enable register
	//select accelerometer's and gyroscope's data for FIFO buffer
	Data = 0x78;
 8101254:	2378      	movs	r3, #120	; 0x78
 8101256:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8101258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810125c:	9302      	str	r3, [sp, #8]
 810125e:	2301      	movs	r3, #1
 8101260:	9301      	str	r3, [sp, #4]
 8101262:	1dbb      	adds	r3, r7, #6
 8101264:	9300      	str	r3, [sp, #0]
 8101266:	2301      	movs	r3, #1
 8101268:	2223      	movs	r2, #35	; 0x23
 810126a:	21d0      	movs	r1, #208	; 0xd0
 810126c:	4815      	ldr	r0, [pc, #84]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810126e:	f003 fa2b 	bl	81046c8 <HAL_I2C_Mem_Write>
 8101272:	4603      	mov	r3, r0
 8101274:	71fb      	strb	r3, [r7, #7]

	//INT Pin / Bypass Enable Configuration register
	//configure interrupt signal (default)
	Data = 0x00;
 8101276:	2300      	movs	r3, #0
 8101278:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 810127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810127e:	9302      	str	r3, [sp, #8]
 8101280:	2301      	movs	r3, #1
 8101282:	9301      	str	r3, [sp, #4]
 8101284:	1dbb      	adds	r3, r7, #6
 8101286:	9300      	str	r3, [sp, #0]
 8101288:	2301      	movs	r3, #1
 810128a:	2237      	movs	r2, #55	; 0x37
 810128c:	21d0      	movs	r1, #208	; 0xd0
 810128e:	480d      	ldr	r0, [pc, #52]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101290:	f003 fa1a 	bl	81046c8 <HAL_I2C_Mem_Write>
 8101294:	4603      	mov	r3, r0
 8101296:	71fb      	strb	r3, [r7, #7]

	//Interrupt Enable register
	//enable Data Ready interrupt (DATA_RDY_EN=1)
	//(write operation to all of the sensor registers has been completed)
	Data = 0x01;
 8101298:	2301      	movs	r3, #1
 810129a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, 1000);
 810129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012a0:	9302      	str	r3, [sp, #8]
 81012a2:	2301      	movs	r3, #1
 81012a4:	9301      	str	r3, [sp, #4]
 81012a6:	1dbb      	adds	r3, r7, #6
 81012a8:	9300      	str	r3, [sp, #0]
 81012aa:	2301      	movs	r3, #1
 81012ac:	2238      	movs	r2, #56	; 0x38
 81012ae:	21d0      	movs	r1, #208	; 0xd0
 81012b0:	4804      	ldr	r0, [pc, #16]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81012b2:	f003 fa09 	bl	81046c8 <HAL_I2C_Mem_Write>
 81012b6:	4603      	mov	r3, r0
 81012b8:	71fb      	strb	r3, [r7, #7]

	return 0;
 81012ba:	2300      	movs	r3, #0
}
 81012bc:	4618      	mov	r0, r3
 81012be:	3708      	adds	r7, #8
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	1000020c 	.word	0x1000020c

081012c8 <json_init>:
void increment_last(int addend);




void json_init(){
 81012c8:	b580      	push	{r7, lr}
 81012ca:	af00      	add	r7, sp, #0
	// Dynamically allocate memory using calloc()
    ptr = (char*)calloc(initial_number, sizeof(char));
 81012cc:	4b0f      	ldr	r3, [pc, #60]	; (810130c <json_init+0x44>)
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	2101      	movs	r1, #1
 81012d2:	4618      	mov	r0, r3
 81012d4:	f008 f8f4 	bl	81094c0 <calloc>
 81012d8:	4603      	mov	r3, r0
 81012da:	461a      	mov	r2, r3
 81012dc:	4b0c      	ldr	r3, [pc, #48]	; (8101310 <json_init+0x48>)
 81012de:	601a      	str	r2, [r3, #0]

    // Check if the memory has been successfully
	// allocated by malloc or not
	if (ptr == NULL) {
 81012e0:	4b0b      	ldr	r3, [pc, #44]	; (8101310 <json_init+0x48>)
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	2b00      	cmp	r3, #0
 81012e6:	d105      	bne.n	81012f4 <json_init+0x2c>
	   printf("Memory not allocated.\n");
 81012e8:	480a      	ldr	r0, [pc, #40]	; (8101314 <json_init+0x4c>)
 81012ea:	f009 f8c9 	bl	810a480 <puts>
	   exit(0);
 81012ee:	2000      	movs	r0, #0
 81012f0:	f008 f8f4 	bl	81094dc <exit>
	}

	strcat(ptr, '{');
 81012f4:	4b06      	ldr	r3, [pc, #24]	; (8101310 <json_init+0x48>)
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	217b      	movs	r1, #123	; 0x7b
 81012fa:	4618      	mov	r0, r3
 81012fc:	f009 f8fe 	bl	810a4fc <strcat>
	last = 2;
 8101300:	4b05      	ldr	r3, [pc, #20]	; (8101318 <json_init+0x50>)
 8101302:	2202      	movs	r2, #2
 8101304:	601a      	str	r2, [r3, #0]
}
 8101306:	bf00      	nop
 8101308:	bd80      	pop	{r7, pc}
 810130a:	bf00      	nop
 810130c:	10000008 	.word	0x10000008
 8101310:	10000204 	.word	0x10000204
 8101314:	0810df78 	.word	0x0810df78
 8101318:	10000208 	.word	0x10000208

0810131c <addElement>:

void extend(){
	ptr = realloc(ptr, initial_number + SHIFT * sizeof(int));
}

void addElement(char (*key)[], int value){
 810131c:	b590      	push	{r4, r7, lr}
 810131e:	b083      	sub	sp, #12
 8101320:	af00      	add	r7, sp, #0
 8101322:	6078      	str	r0, [r7, #4]
 8101324:	6039      	str	r1, [r7, #0]
	strcat(ptr, key);
 8101326:	4b18      	ldr	r3, [pc, #96]	; (8101388 <addElement+0x6c>)
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	6879      	ldr	r1, [r7, #4]
 810132c:	4618      	mov	r0, r3
 810132e:	f009 f8e5 	bl	810a4fc <strcat>
	increment_last(strlen(key));
 8101332:	6878      	ldr	r0, [r7, #4]
 8101334:	f7fe ffd4 	bl	81002e0 <strlen>
 8101338:	4603      	mov	r3, r0
 810133a:	4618      	mov	r0, r3
 810133c:	f000 f842 	bl	81013c4 <increment_last>

	strcat(ptr, SEPARATOR);
 8101340:	4b11      	ldr	r3, [pc, #68]	; (8101388 <addElement+0x6c>)
 8101342:	681b      	ldr	r3, [r3, #0]
 8101344:	223a      	movs	r2, #58	; 0x3a
 8101346:	4611      	mov	r1, r2
 8101348:	4618      	mov	r0, r3
 810134a:	f009 f8d7 	bl	810a4fc <strcat>
	increment_last(strlen(SEPARATOR));
 810134e:	233a      	movs	r3, #58	; 0x3a
 8101350:	4618      	mov	r0, r3
 8101352:	f7fe ffc5 	bl	81002e0 <strlen>
 8101356:	4603      	mov	r3, r0
 8101358:	4618      	mov	r0, r3
 810135a:	f000 f833 	bl	81013c4 <increment_last>

	strcat(ptr,atoi(value));
 810135e:	4b0a      	ldr	r3, [pc, #40]	; (8101388 <addElement+0x6c>)
 8101360:	681c      	ldr	r4, [r3, #0]
 8101362:	6838      	ldr	r0, [r7, #0]
 8101364:	f008 f8a8 	bl	81094b8 <atoi>
 8101368:	4603      	mov	r3, r0
 810136a:	4619      	mov	r1, r3
 810136c:	4620      	mov	r0, r4
 810136e:	f009 f8c5 	bl	810a4fc <strcat>

	strcat(ptr,COMMA);
 8101372:	4b05      	ldr	r3, [pc, #20]	; (8101388 <addElement+0x6c>)
 8101374:	681b      	ldr	r3, [r3, #0]
 8101376:	222c      	movs	r2, #44	; 0x2c
 8101378:	4611      	mov	r1, r2
 810137a:	4618      	mov	r0, r3
 810137c:	f009 f8be 	bl	810a4fc <strcat>


}
 8101380:	bf00      	nop
 8101382:	370c      	adds	r7, #12
 8101384:	46bd      	mov	sp, r7
 8101386:	bd90      	pop	{r4, r7, pc}
 8101388:	10000204 	.word	0x10000204

0810138c <getJSON>:


char* getJSON(){
 810138c:	b580      	push	{r7, lr}
 810138e:	af00      	add	r7, sp, #0
	strcat(ptr,'}');
 8101390:	4b08      	ldr	r3, [pc, #32]	; (81013b4 <getJSON+0x28>)
 8101392:	681b      	ldr	r3, [r3, #0]
 8101394:	217d      	movs	r1, #125	; 0x7d
 8101396:	4618      	mov	r0, r3
 8101398:	f009 f8b0 	bl	810a4fc <strcat>
	//strcat(ptr,'\0');
	strcat(ptr,'\r\n');
 810139c:	4b05      	ldr	r3, [pc, #20]	; (81013b4 <getJSON+0x28>)
 810139e:	681b      	ldr	r3, [r3, #0]
 81013a0:	f640 510a 	movw	r1, #3338	; 0xd0a
 81013a4:	4618      	mov	r0, r3
 81013a6:	f009 f8a9 	bl	810a4fc <strcat>
	return ptr;
 81013aa:	4b02      	ldr	r3, [pc, #8]	; (81013b4 <getJSON+0x28>)
 81013ac:	681b      	ldr	r3, [r3, #0]
}
 81013ae:	4618      	mov	r0, r3
 81013b0:	bd80      	pop	{r7, pc}
 81013b2:	bf00      	nop
 81013b4:	10000204 	.word	0x10000204

081013b8 <json_reset>:

void json_reset(){
 81013b8:	b580      	push	{r7, lr}
 81013ba:	af00      	add	r7, sp, #0
	json_init();
 81013bc:	f7ff ff84 	bl	81012c8 <json_init>
}
 81013c0:	bf00      	nop
 81013c2:	bd80      	pop	{r7, pc}

081013c4 <increment_last>:


void increment_last(int addend){
 81013c4:	b480      	push	{r7}
 81013c6:	b083      	sub	sp, #12
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
	last += addend;
 81013cc:	4b05      	ldr	r3, [pc, #20]	; (81013e4 <increment_last+0x20>)
 81013ce:	681a      	ldr	r2, [r3, #0]
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	4413      	add	r3, r2
 81013d4:	4a03      	ldr	r2, [pc, #12]	; (81013e4 <increment_last+0x20>)
 81013d6:	6013      	str	r3, [r2, #0]
}
 81013d8:	bf00      	nop
 81013da:	370c      	adds	r7, #12
 81013dc:	46bd      	mov	sp, r7
 81013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e2:	4770      	bx	lr
 81013e4:	10000208 	.word	0x10000208

081013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81013e8:	b580      	push	{r7, lr}
 81013ea:	b08a      	sub	sp, #40	; 0x28
 81013ec:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81013ee:	4b3d      	ldr	r3, [pc, #244]	; (81014e4 <main+0xfc>)
 81013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f4:	4a3b      	ldr	r2, [pc, #236]	; (81014e4 <main+0xfc>)
 81013f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013fe:	4b39      	ldr	r3, [pc, #228]	; (81014e4 <main+0xfc>)
 8101400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101408:	603b      	str	r3, [r7, #0]
 810140a:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810140c:	2001      	movs	r0, #1
 810140e:	f003 f8b9 	bl	8104584 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101412:	f004 f847 	bl	81054a4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101416:	2201      	movs	r2, #1
 8101418:	2102      	movs	r1, #2
 810141a:	2000      	movs	r0, #0
 810141c:	f003 ffc8 	bl	81053b0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101420:	4b31      	ldr	r3, [pc, #196]	; (81014e8 <main+0x100>)
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	091b      	lsrs	r3, r3, #4
 8101426:	f003 030f 	and.w	r3, r3, #15
 810142a:	2b07      	cmp	r3, #7
 810142c:	d108      	bne.n	8101440 <main+0x58>
 810142e:	4b2f      	ldr	r3, [pc, #188]	; (81014ec <main+0x104>)
 8101430:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101434:	4a2d      	ldr	r2, [pc, #180]	; (81014ec <main+0x104>)
 8101436:	f043 0301 	orr.w	r3, r3, #1
 810143a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810143e:	e007      	b.n	8101450 <main+0x68>
 8101440:	4b2a      	ldr	r3, [pc, #168]	; (81014ec <main+0x104>)
 8101442:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101446:	4a29      	ldr	r2, [pc, #164]	; (81014ec <main+0x104>)
 8101448:	f043 0301 	orr.w	r3, r3, #1
 810144c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101450:	f001 f812 	bl	8102478 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101454:	f000 fb12 	bl	8101a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8101458:	f000 faf0 	bl	8101a3c <MX_DMA_Init>
  MX_USART3_UART_Init();
 810145c:	f000 faa2 	bl	81019a4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8101460:	f000 f890 	bl	8101584 <MX_TIM1_Init>
  MX_I2C1_Init();
 8101464:	f000 f84e 	bl	8101504 <MX_I2C1_Init>
  MX_TIM2_Init();
 8101468:	f000 f950 	bl	810170c <MX_TIM2_Init>
  MX_TIM3_Init();
 810146c:	f000 f9a2 	bl	81017b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8101470:	f000 f9f6 	bl	8101860 <MX_TIM4_Init>
  MX_UART4_Init();
 8101474:	f000 fa4a 	bl	810190c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

    // IMU SETTINGS
	IMU_MPU6050_Init();
 8101478:	f7ff fe5e 	bl	8101138 <IMU_MPU6050_Init>

	//json init
	json_init();
 810147c:	f7ff ff24 	bl	81012c8 <json_init>

	// TIMERS START
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101480:	2100      	movs	r1, #0
 8101482:	481b      	ldr	r0, [pc, #108]	; (81014f0 <main+0x108>)
 8101484:	f005 fe14 	bl	81070b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101488:	2104      	movs	r1, #4
 810148a:	4819      	ldr	r0, [pc, #100]	; (81014f0 <main+0x108>)
 810148c:	f005 fe10 	bl	81070b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101490:	2108      	movs	r1, #8
 8101492:	4817      	ldr	r0, [pc, #92]	; (81014f0 <main+0x108>)
 8101494:	f005 fe0c 	bl	81070b0 <HAL_TIM_PWM_Start>

	/* UART 4 MSG INIT */
	uint8_t MSG[35] = {'\0'};
 8101498:	2300      	movs	r3, #0
 810149a:	607b      	str	r3, [r7, #4]
 810149c:	f107 0308 	add.w	r3, r7, #8
 81014a0:	221f      	movs	r2, #31
 81014a2:	2100      	movs	r1, #0
 81014a4:	4618      	mov	r0, r3
 81014a6:	f008 f851 	bl	810954c <memset>
	uint8_t X = 0;
 81014aa:	2300      	movs	r3, #0
 81014ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  //readIMU();
	  HAL_Delay(500);
	  */


	  addElement("rocco", 5);
 81014b0:	2105      	movs	r1, #5
 81014b2:	4810      	ldr	r0, [pc, #64]	; (81014f4 <main+0x10c>)
 81014b4:	f7ff ff32 	bl	810131c <addElement>
	  addElement("test", 5);
 81014b8:	2105      	movs	r1, #5
 81014ba:	480f      	ldr	r0, [pc, #60]	; (81014f8 <main+0x110>)
 81014bc:	f7ff ff2e 	bl	810131c <addElement>
	  addElement("rocco2", 5);
 81014c0:	2105      	movs	r1, #5
 81014c2:	480e      	ldr	r0, [pc, #56]	; (81014fc <main+0x114>)
 81014c4:	f7ff ff2a 	bl	810131c <addElement>
	  addElement("rocco3", 5);
 81014c8:	2105      	movs	r1, #5
 81014ca:	480d      	ldr	r0, [pc, #52]	; (8101500 <main+0x118>)
 81014cc:	f7ff ff26 	bl	810131c <addElement>

	  UART_Send(getJSON());
 81014d0:	f7ff ff5c 	bl	810138c <getJSON>
 81014d4:	4603      	mov	r3, r0
 81014d6:	4618      	mov	r0, r3
 81014d8:	f000 fbb4 	bl	8101c44 <UART_Send>
	  json_reset();
 81014dc:	f7ff ff6c 	bl	81013b8 <json_reset>
  {
 81014e0:	e7e6      	b.n	81014b0 <main+0xc8>
 81014e2:	bf00      	nop
 81014e4:	58024400 	.word	0x58024400
 81014e8:	e000ed00 	.word	0xe000ed00
 81014ec:	58026400 	.word	0x58026400
 81014f0:	10000258 	.word	0x10000258
 81014f4:	0810df90 	.word	0x0810df90
 81014f8:	0810df98 	.word	0x0810df98
 81014fc:	0810dfa0 	.word	0x0810dfa0
 8101500:	0810dfa8 	.word	0x0810dfa8

08101504 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101504:	b580      	push	{r7, lr}
 8101506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101508:	4b1b      	ldr	r3, [pc, #108]	; (8101578 <MX_I2C1_Init+0x74>)
 810150a:	4a1c      	ldr	r2, [pc, #112]	; (810157c <MX_I2C1_Init+0x78>)
 810150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810150e:	4b1a      	ldr	r3, [pc, #104]	; (8101578 <MX_I2C1_Init+0x74>)
 8101510:	4a1b      	ldr	r2, [pc, #108]	; (8101580 <MX_I2C1_Init+0x7c>)
 8101512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101514:	4b18      	ldr	r3, [pc, #96]	; (8101578 <MX_I2C1_Init+0x74>)
 8101516:	2200      	movs	r2, #0
 8101518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810151a:	4b17      	ldr	r3, [pc, #92]	; (8101578 <MX_I2C1_Init+0x74>)
 810151c:	2201      	movs	r2, #1
 810151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101520:	4b15      	ldr	r3, [pc, #84]	; (8101578 <MX_I2C1_Init+0x74>)
 8101522:	2200      	movs	r2, #0
 8101524:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101526:	4b14      	ldr	r3, [pc, #80]	; (8101578 <MX_I2C1_Init+0x74>)
 8101528:	2200      	movs	r2, #0
 810152a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810152c:	4b12      	ldr	r3, [pc, #72]	; (8101578 <MX_I2C1_Init+0x74>)
 810152e:	2200      	movs	r2, #0
 8101530:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101532:	4b11      	ldr	r3, [pc, #68]	; (8101578 <MX_I2C1_Init+0x74>)
 8101534:	2200      	movs	r2, #0
 8101536:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101538:	4b0f      	ldr	r3, [pc, #60]	; (8101578 <MX_I2C1_Init+0x74>)
 810153a:	2200      	movs	r2, #0
 810153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810153e:	480e      	ldr	r0, [pc, #56]	; (8101578 <MX_I2C1_Init+0x74>)
 8101540:	f003 f832 	bl	81045a8 <HAL_I2C_Init>
 8101544:	4603      	mov	r3, r0
 8101546:	2b00      	cmp	r3, #0
 8101548:	d001      	beq.n	810154e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810154a:	f000 fba9 	bl	8101ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810154e:	2100      	movs	r1, #0
 8101550:	4809      	ldr	r0, [pc, #36]	; (8101578 <MX_I2C1_Init+0x74>)
 8101552:	f003 fe95 	bl	8105280 <HAL_I2CEx_ConfigAnalogFilter>
 8101556:	4603      	mov	r3, r0
 8101558:	2b00      	cmp	r3, #0
 810155a:	d001      	beq.n	8101560 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810155c:	f000 fba0 	bl	8101ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101560:	2100      	movs	r1, #0
 8101562:	4805      	ldr	r0, [pc, #20]	; (8101578 <MX_I2C1_Init+0x74>)
 8101564:	f003 fed7 	bl	8105316 <HAL_I2CEx_ConfigDigitalFilter>
 8101568:	4603      	mov	r3, r0
 810156a:	2b00      	cmp	r3, #0
 810156c:	d001      	beq.n	8101572 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810156e:	f000 fb97 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101572:	bf00      	nop
 8101574:	bd80      	pop	{r7, pc}
 8101576:	bf00      	nop
 8101578:	1000020c 	.word	0x1000020c
 810157c:	40005400 	.word	0x40005400
 8101580:	307075b1 	.word	0x307075b1

08101584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101584:	b580      	push	{r7, lr}
 8101586:	b09a      	sub	sp, #104	; 0x68
 8101588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810158a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810158e:	2200      	movs	r2, #0
 8101590:	601a      	str	r2, [r3, #0]
 8101592:	605a      	str	r2, [r3, #4]
 8101594:	609a      	str	r2, [r3, #8]
 8101596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101598:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810159c:	2200      	movs	r2, #0
 810159e:	601a      	str	r2, [r3, #0]
 81015a0:	605a      	str	r2, [r3, #4]
 81015a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81015a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81015a8:	2200      	movs	r2, #0
 81015aa:	601a      	str	r2, [r3, #0]
 81015ac:	605a      	str	r2, [r3, #4]
 81015ae:	609a      	str	r2, [r3, #8]
 81015b0:	60da      	str	r2, [r3, #12]
 81015b2:	611a      	str	r2, [r3, #16]
 81015b4:	615a      	str	r2, [r3, #20]
 81015b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81015b8:	1d3b      	adds	r3, r7, #4
 81015ba:	222c      	movs	r2, #44	; 0x2c
 81015bc:	2100      	movs	r1, #0
 81015be:	4618      	mov	r0, r3
 81015c0:	f007 ffc4 	bl	810954c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81015c4:	4b4f      	ldr	r3, [pc, #316]	; (8101704 <MX_TIM1_Init+0x180>)
 81015c6:	4a50      	ldr	r2, [pc, #320]	; (8101708 <MX_TIM1_Init+0x184>)
 81015c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81015ca:	4b4e      	ldr	r3, [pc, #312]	; (8101704 <MX_TIM1_Init+0x180>)
 81015cc:	22ef      	movs	r2, #239	; 0xef
 81015ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81015d0:	4b4c      	ldr	r3, [pc, #304]	; (8101704 <MX_TIM1_Init+0x180>)
 81015d2:	2200      	movs	r2, #0
 81015d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81015d6:	4b4b      	ldr	r3, [pc, #300]	; (8101704 <MX_TIM1_Init+0x180>)
 81015d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 81015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81015de:	4b49      	ldr	r3, [pc, #292]	; (8101704 <MX_TIM1_Init+0x180>)
 81015e0:	2200      	movs	r2, #0
 81015e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81015e4:	4b47      	ldr	r3, [pc, #284]	; (8101704 <MX_TIM1_Init+0x180>)
 81015e6:	2200      	movs	r2, #0
 81015e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81015ea:	4b46      	ldr	r3, [pc, #280]	; (8101704 <MX_TIM1_Init+0x180>)
 81015ec:	2200      	movs	r2, #0
 81015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81015f0:	4844      	ldr	r0, [pc, #272]	; (8101704 <MX_TIM1_Init+0x180>)
 81015f2:	f005 fca5 	bl	8106f40 <HAL_TIM_Base_Init>
 81015f6:	4603      	mov	r3, r0
 81015f8:	2b00      	cmp	r3, #0
 81015fa:	d001      	beq.n	8101600 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 81015fc:	f000 fb50 	bl	8101ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101604:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101606:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810160a:	4619      	mov	r1, r3
 810160c:	483d      	ldr	r0, [pc, #244]	; (8101704 <MX_TIM1_Init+0x180>)
 810160e:	f006 f817 	bl	8107640 <HAL_TIM_ConfigClockSource>
 8101612:	4603      	mov	r3, r0
 8101614:	2b00      	cmp	r3, #0
 8101616:	d001      	beq.n	810161c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101618:	f000 fb42 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810161c:	4839      	ldr	r0, [pc, #228]	; (8101704 <MX_TIM1_Init+0x180>)
 810161e:	f005 fce6 	bl	8106fee <HAL_TIM_PWM_Init>
 8101622:	4603      	mov	r3, r0
 8101624:	2b00      	cmp	r3, #0
 8101626:	d001      	beq.n	810162c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101628:	f000 fb3a 	bl	8101ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810162c:	2300      	movs	r3, #0
 810162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101630:	2300      	movs	r3, #0
 8101632:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101634:	2300      	movs	r3, #0
 8101636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101638:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810163c:	4619      	mov	r1, r3
 810163e:	4831      	ldr	r0, [pc, #196]	; (8101704 <MX_TIM1_Init+0x180>)
 8101640:	f006 fd28 	bl	8108094 <HAL_TIMEx_MasterConfigSynchronization>
 8101644:	4603      	mov	r3, r0
 8101646:	2b00      	cmp	r3, #0
 8101648:	d001      	beq.n	810164e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810164a:	f000 fb29 	bl	8101ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810164e:	2360      	movs	r3, #96	; 0x60
 8101650:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8101652:	2300      	movs	r3, #0
 8101654:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101656:	2300      	movs	r3, #0
 8101658:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810165a:	2300      	movs	r3, #0
 810165c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810165e:	2300      	movs	r3, #0
 8101660:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101662:	2300      	movs	r3, #0
 8101664:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101666:	2300      	movs	r3, #0
 8101668:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810166a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810166e:	2200      	movs	r2, #0
 8101670:	4619      	mov	r1, r3
 8101672:	4824      	ldr	r0, [pc, #144]	; (8101704 <MX_TIM1_Init+0x180>)
 8101674:	f005 fed0 	bl	8107418 <HAL_TIM_PWM_ConfigChannel>
 8101678:	4603      	mov	r3, r0
 810167a:	2b00      	cmp	r3, #0
 810167c:	d001      	beq.n	8101682 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810167e:	f000 fb0f 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101686:	2204      	movs	r2, #4
 8101688:	4619      	mov	r1, r3
 810168a:	481e      	ldr	r0, [pc, #120]	; (8101704 <MX_TIM1_Init+0x180>)
 810168c:	f005 fec4 	bl	8107418 <HAL_TIM_PWM_ConfigChannel>
 8101690:	4603      	mov	r3, r0
 8101692:	2b00      	cmp	r3, #0
 8101694:	d001      	beq.n	810169a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101696:	f000 fb03 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810169a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810169e:	2208      	movs	r2, #8
 81016a0:	4619      	mov	r1, r3
 81016a2:	4818      	ldr	r0, [pc, #96]	; (8101704 <MX_TIM1_Init+0x180>)
 81016a4:	f005 feb8 	bl	8107418 <HAL_TIM_PWM_ConfigChannel>
 81016a8:	4603      	mov	r3, r0
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d001      	beq.n	81016b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81016ae:	f000 faf7 	bl	8101ca0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81016b2:	2300      	movs	r3, #0
 81016b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81016b6:	2300      	movs	r3, #0
 81016b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81016ba:	2300      	movs	r3, #0
 81016bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81016be:	2300      	movs	r3, #0
 81016c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81016c2:	2300      	movs	r3, #0
 81016c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81016ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81016cc:	2300      	movs	r3, #0
 81016ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81016d0:	2300      	movs	r3, #0
 81016d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81016d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81016d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81016da:	2300      	movs	r3, #0
 81016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81016de:	2300      	movs	r3, #0
 81016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81016e2:	1d3b      	adds	r3, r7, #4
 81016e4:	4619      	mov	r1, r3
 81016e6:	4807      	ldr	r0, [pc, #28]	; (8101704 <MX_TIM1_Init+0x180>)
 81016e8:	f006 fd62 	bl	81081b0 <HAL_TIMEx_ConfigBreakDeadTime>
 81016ec:	4603      	mov	r3, r0
 81016ee:	2b00      	cmp	r3, #0
 81016f0:	d001      	beq.n	81016f6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 81016f2:	f000 fad5 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81016f6:	4803      	ldr	r0, [pc, #12]	; (8101704 <MX_TIM1_Init+0x180>)
 81016f8:	f000 fc72 	bl	8101fe0 <HAL_TIM_MspPostInit>

}
 81016fc:	bf00      	nop
 81016fe:	3768      	adds	r7, #104	; 0x68
 8101700:	46bd      	mov	sp, r7
 8101702:	bd80      	pop	{r7, pc}
 8101704:	10000258 	.word	0x10000258
 8101708:	40010000 	.word	0x40010000

0810170c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 810170c:	b580      	push	{r7, lr}
 810170e:	b08c      	sub	sp, #48	; 0x30
 8101710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101712:	f107 030c 	add.w	r3, r7, #12
 8101716:	2224      	movs	r2, #36	; 0x24
 8101718:	2100      	movs	r1, #0
 810171a:	4618      	mov	r0, r3
 810171c:	f007 ff16 	bl	810954c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101720:	463b      	mov	r3, r7
 8101722:	2200      	movs	r2, #0
 8101724:	601a      	str	r2, [r3, #0]
 8101726:	605a      	str	r2, [r3, #4]
 8101728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810172a:	4b21      	ldr	r3, [pc, #132]	; (81017b0 <MX_TIM2_Init+0xa4>)
 810172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8101732:	4b1f      	ldr	r3, [pc, #124]	; (81017b0 <MX_TIM2_Init+0xa4>)
 8101734:	2200      	movs	r2, #0
 8101736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101738:	4b1d      	ldr	r3, [pc, #116]	; (81017b0 <MX_TIM2_Init+0xa4>)
 810173a:	2200      	movs	r2, #0
 810173c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2652 - 1;
 810173e:	4b1c      	ldr	r3, [pc, #112]	; (81017b0 <MX_TIM2_Init+0xa4>)
 8101740:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101746:	4b1a      	ldr	r3, [pc, #104]	; (81017b0 <MX_TIM2_Init+0xa4>)
 8101748:	2200      	movs	r2, #0
 810174a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810174c:	4b18      	ldr	r3, [pc, #96]	; (81017b0 <MX_TIM2_Init+0xa4>)
 810174e:	2200      	movs	r2, #0
 8101750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101752:	2303      	movs	r3, #3
 8101754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101756:	2300      	movs	r3, #0
 8101758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810175a:	2301      	movs	r3, #1
 810175c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810175e:	2300      	movs	r3, #0
 8101760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101762:	230a      	movs	r3, #10
 8101764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101766:	2300      	movs	r3, #0
 8101768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810176a:	2301      	movs	r3, #1
 810176c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810176e:	2300      	movs	r3, #0
 8101770:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101772:	2300      	movs	r3, #0
 8101774:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8101776:	f107 030c 	add.w	r3, r7, #12
 810177a:	4619      	mov	r1, r3
 810177c:	480c      	ldr	r0, [pc, #48]	; (81017b0 <MX_TIM2_Init+0xa4>)
 810177e:	f005 fda5 	bl	81072cc <HAL_TIM_Encoder_Init>
 8101782:	4603      	mov	r3, r0
 8101784:	2b00      	cmp	r3, #0
 8101786:	d001      	beq.n	810178c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8101788:	f000 fa8a 	bl	8101ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810178c:	2300      	movs	r3, #0
 810178e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101790:	2300      	movs	r3, #0
 8101792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101794:	463b      	mov	r3, r7
 8101796:	4619      	mov	r1, r3
 8101798:	4805      	ldr	r0, [pc, #20]	; (81017b0 <MX_TIM2_Init+0xa4>)
 810179a:	f006 fc7b 	bl	8108094 <HAL_TIMEx_MasterConfigSynchronization>
 810179e:	4603      	mov	r3, r0
 81017a0:	2b00      	cmp	r3, #0
 81017a2:	d001      	beq.n	81017a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 81017a4:	f000 fa7c 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81017a8:	bf00      	nop
 81017aa:	3730      	adds	r7, #48	; 0x30
 81017ac:	46bd      	mov	sp, r7
 81017ae:	bd80      	pop	{r7, pc}
 81017b0:	100002a4 	.word	0x100002a4

081017b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81017b4:	b580      	push	{r7, lr}
 81017b6:	b08c      	sub	sp, #48	; 0x30
 81017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81017ba:	f107 030c 	add.w	r3, r7, #12
 81017be:	2224      	movs	r2, #36	; 0x24
 81017c0:	2100      	movs	r1, #0
 81017c2:	4618      	mov	r0, r3
 81017c4:	f007 fec2 	bl	810954c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81017c8:	463b      	mov	r3, r7
 81017ca:	2200      	movs	r2, #0
 81017cc:	601a      	str	r2, [r3, #0]
 81017ce:	605a      	str	r2, [r3, #4]
 81017d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81017d2:	4b21      	ldr	r3, [pc, #132]	; (8101858 <MX_TIM3_Init+0xa4>)
 81017d4:	4a21      	ldr	r2, [pc, #132]	; (810185c <MX_TIM3_Init+0xa8>)
 81017d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 81017d8:	4b1f      	ldr	r3, [pc, #124]	; (8101858 <MX_TIM3_Init+0xa4>)
 81017da:	2200      	movs	r2, #0
 81017dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81017de:	4b1e      	ldr	r3, [pc, #120]	; (8101858 <MX_TIM3_Init+0xa4>)
 81017e0:	2200      	movs	r2, #0
 81017e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2652 - 1;
 81017e4:	4b1c      	ldr	r3, [pc, #112]	; (8101858 <MX_TIM3_Init+0xa4>)
 81017e6:	f640 225b 	movw	r2, #2651	; 0xa5b
 81017ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81017ec:	4b1a      	ldr	r3, [pc, #104]	; (8101858 <MX_TIM3_Init+0xa4>)
 81017ee:	2200      	movs	r2, #0
 81017f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81017f2:	4b19      	ldr	r3, [pc, #100]	; (8101858 <MX_TIM3_Init+0xa4>)
 81017f4:	2200      	movs	r2, #0
 81017f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81017f8:	2303      	movs	r3, #3
 81017fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81017fc:	2300      	movs	r3, #0
 81017fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101800:	2301      	movs	r3, #1
 8101802:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101804:	2300      	movs	r3, #0
 8101806:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101808:	230a      	movs	r3, #10
 810180a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810180c:	2300      	movs	r3, #0
 810180e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101810:	2301      	movs	r3, #1
 8101812:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101814:	2300      	movs	r3, #0
 8101816:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101818:	2300      	movs	r3, #0
 810181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 810181c:	f107 030c 	add.w	r3, r7, #12
 8101820:	4619      	mov	r1, r3
 8101822:	480d      	ldr	r0, [pc, #52]	; (8101858 <MX_TIM3_Init+0xa4>)
 8101824:	f005 fd52 	bl	81072cc <HAL_TIM_Encoder_Init>
 8101828:	4603      	mov	r3, r0
 810182a:	2b00      	cmp	r3, #0
 810182c:	d001      	beq.n	8101832 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 810182e:	f000 fa37 	bl	8101ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101832:	2300      	movs	r3, #0
 8101834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101836:	2300      	movs	r3, #0
 8101838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810183a:	463b      	mov	r3, r7
 810183c:	4619      	mov	r1, r3
 810183e:	4806      	ldr	r0, [pc, #24]	; (8101858 <MX_TIM3_Init+0xa4>)
 8101840:	f006 fc28 	bl	8108094 <HAL_TIMEx_MasterConfigSynchronization>
 8101844:	4603      	mov	r3, r0
 8101846:	2b00      	cmp	r3, #0
 8101848:	d001      	beq.n	810184e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 810184a:	f000 fa29 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 810184e:	bf00      	nop
 8101850:	3730      	adds	r7, #48	; 0x30
 8101852:	46bd      	mov	sp, r7
 8101854:	bd80      	pop	{r7, pc}
 8101856:	bf00      	nop
 8101858:	100002f0 	.word	0x100002f0
 810185c:	40000400 	.word	0x40000400

08101860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8101860:	b580      	push	{r7, lr}
 8101862:	b08c      	sub	sp, #48	; 0x30
 8101864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101866:	f107 030c 	add.w	r3, r7, #12
 810186a:	2224      	movs	r2, #36	; 0x24
 810186c:	2100      	movs	r1, #0
 810186e:	4618      	mov	r0, r3
 8101870:	f007 fe6c 	bl	810954c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101874:	463b      	mov	r3, r7
 8101876:	2200      	movs	r2, #0
 8101878:	601a      	str	r2, [r3, #0]
 810187a:	605a      	str	r2, [r3, #4]
 810187c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810187e:	4b21      	ldr	r3, [pc, #132]	; (8101904 <MX_TIM4_Init+0xa4>)
 8101880:	4a21      	ldr	r2, [pc, #132]	; (8101908 <MX_TIM4_Init+0xa8>)
 8101882:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8101884:	4b1f      	ldr	r3, [pc, #124]	; (8101904 <MX_TIM4_Init+0xa4>)
 8101886:	2200      	movs	r2, #0
 8101888:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 810188a:	4b1e      	ldr	r3, [pc, #120]	; (8101904 <MX_TIM4_Init+0xa4>)
 810188c:	2200      	movs	r2, #0
 810188e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2652 - 1;
 8101890:	4b1c      	ldr	r3, [pc, #112]	; (8101904 <MX_TIM4_Init+0xa4>)
 8101892:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101896:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101898:	4b1a      	ldr	r3, [pc, #104]	; (8101904 <MX_TIM4_Init+0xa4>)
 810189a:	2200      	movs	r2, #0
 810189c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810189e:	4b19      	ldr	r3, [pc, #100]	; (8101904 <MX_TIM4_Init+0xa4>)
 81018a0:	2200      	movs	r2, #0
 81018a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81018a4:	2303      	movs	r3, #3
 81018a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81018a8:	2300      	movs	r3, #0
 81018aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81018ac:	2301      	movs	r3, #1
 81018ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81018b0:	2300      	movs	r3, #0
 81018b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 81018b4:	230a      	movs	r3, #10
 81018b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81018b8:	2300      	movs	r3, #0
 81018ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81018bc:	2301      	movs	r3, #1
 81018be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81018c0:	2300      	movs	r3, #0
 81018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 81018c4:	2300      	movs	r3, #0
 81018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 81018c8:	f107 030c 	add.w	r3, r7, #12
 81018cc:	4619      	mov	r1, r3
 81018ce:	480d      	ldr	r0, [pc, #52]	; (8101904 <MX_TIM4_Init+0xa4>)
 81018d0:	f005 fcfc 	bl	81072cc <HAL_TIM_Encoder_Init>
 81018d4:	4603      	mov	r3, r0
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	d001      	beq.n	81018de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 81018da:	f000 f9e1 	bl	8101ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81018de:	2300      	movs	r3, #0
 81018e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81018e2:	2300      	movs	r3, #0
 81018e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81018e6:	463b      	mov	r3, r7
 81018e8:	4619      	mov	r1, r3
 81018ea:	4806      	ldr	r0, [pc, #24]	; (8101904 <MX_TIM4_Init+0xa4>)
 81018ec:	f006 fbd2 	bl	8108094 <HAL_TIMEx_MasterConfigSynchronization>
 81018f0:	4603      	mov	r3, r0
 81018f2:	2b00      	cmp	r3, #0
 81018f4:	d001      	beq.n	81018fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 81018f6:	f000 f9d3 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 81018fa:	bf00      	nop
 81018fc:	3730      	adds	r7, #48	; 0x30
 81018fe:	46bd      	mov	sp, r7
 8101900:	bd80      	pop	{r7, pc}
 8101902:	bf00      	nop
 8101904:	1000033c 	.word	0x1000033c
 8101908:	40000800 	.word	0x40000800

0810190c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 810190c:	b580      	push	{r7, lr}
 810190e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8101910:	4b22      	ldr	r3, [pc, #136]	; (810199c <MX_UART4_Init+0x90>)
 8101912:	4a23      	ldr	r2, [pc, #140]	; (81019a0 <MX_UART4_Init+0x94>)
 8101914:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8101916:	4b21      	ldr	r3, [pc, #132]	; (810199c <MX_UART4_Init+0x90>)
 8101918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810191c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 810191e:	4b1f      	ldr	r3, [pc, #124]	; (810199c <MX_UART4_Init+0x90>)
 8101920:	2200      	movs	r2, #0
 8101922:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8101924:	4b1d      	ldr	r3, [pc, #116]	; (810199c <MX_UART4_Init+0x90>)
 8101926:	2200      	movs	r2, #0
 8101928:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 810192a:	4b1c      	ldr	r3, [pc, #112]	; (810199c <MX_UART4_Init+0x90>)
 810192c:	2200      	movs	r2, #0
 810192e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8101930:	4b1a      	ldr	r3, [pc, #104]	; (810199c <MX_UART4_Init+0x90>)
 8101932:	220c      	movs	r2, #12
 8101934:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101936:	4b19      	ldr	r3, [pc, #100]	; (810199c <MX_UART4_Init+0x90>)
 8101938:	2200      	movs	r2, #0
 810193a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 810193c:	4b17      	ldr	r3, [pc, #92]	; (810199c <MX_UART4_Init+0x90>)
 810193e:	2200      	movs	r2, #0
 8101940:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101942:	4b16      	ldr	r3, [pc, #88]	; (810199c <MX_UART4_Init+0x90>)
 8101944:	2200      	movs	r2, #0
 8101946:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101948:	4b14      	ldr	r3, [pc, #80]	; (810199c <MX_UART4_Init+0x90>)
 810194a:	2200      	movs	r2, #0
 810194c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810194e:	4b13      	ldr	r3, [pc, #76]	; (810199c <MX_UART4_Init+0x90>)
 8101950:	2200      	movs	r2, #0
 8101952:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8101954:	4811      	ldr	r0, [pc, #68]	; (810199c <MX_UART4_Init+0x90>)
 8101956:	f006 fca9 	bl	81082ac <HAL_UART_Init>
 810195a:	4603      	mov	r3, r0
 810195c:	2b00      	cmp	r3, #0
 810195e:	d001      	beq.n	8101964 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8101960:	f000 f99e 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101964:	2100      	movs	r1, #0
 8101966:	480d      	ldr	r0, [pc, #52]	; (810199c <MX_UART4_Init+0x90>)
 8101968:	f007 fcdc 	bl	8109324 <HAL_UARTEx_SetTxFifoThreshold>
 810196c:	4603      	mov	r3, r0
 810196e:	2b00      	cmp	r3, #0
 8101970:	d001      	beq.n	8101976 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8101972:	f000 f995 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101976:	2100      	movs	r1, #0
 8101978:	4808      	ldr	r0, [pc, #32]	; (810199c <MX_UART4_Init+0x90>)
 810197a:	f007 fd11 	bl	81093a0 <HAL_UARTEx_SetRxFifoThreshold>
 810197e:	4603      	mov	r3, r0
 8101980:	2b00      	cmp	r3, #0
 8101982:	d001      	beq.n	8101988 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8101984:	f000 f98c 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8101988:	4804      	ldr	r0, [pc, #16]	; (810199c <MX_UART4_Init+0x90>)
 810198a:	f007 fc92 	bl	81092b2 <HAL_UARTEx_DisableFifoMode>
 810198e:	4603      	mov	r3, r0
 8101990:	2b00      	cmp	r3, #0
 8101992:	d001      	beq.n	8101998 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8101994:	f000 f984 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8101998:	bf00      	nop
 810199a:	bd80      	pop	{r7, pc}
 810199c:	10000388 	.word	0x10000388
 81019a0:	40004c00 	.word	0x40004c00

081019a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81019a4:	b580      	push	{r7, lr}
 81019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81019a8:	4b22      	ldr	r3, [pc, #136]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019aa:	4a23      	ldr	r2, [pc, #140]	; (8101a38 <MX_USART3_UART_Init+0x94>)
 81019ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81019ae:	4b21      	ldr	r3, [pc, #132]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81019b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81019b6:	4b1f      	ldr	r3, [pc, #124]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019b8:	2200      	movs	r2, #0
 81019ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81019bc:	4b1d      	ldr	r3, [pc, #116]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019be:	2200      	movs	r2, #0
 81019c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81019c2:	4b1c      	ldr	r3, [pc, #112]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019c4:	2200      	movs	r2, #0
 81019c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81019c8:	4b1a      	ldr	r3, [pc, #104]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019ca:	220c      	movs	r2, #12
 81019cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81019ce:	4b19      	ldr	r3, [pc, #100]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019d0:	2200      	movs	r2, #0
 81019d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81019d4:	4b17      	ldr	r3, [pc, #92]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019d6:	2200      	movs	r2, #0
 81019d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81019da:	4b16      	ldr	r3, [pc, #88]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019dc:	2200      	movs	r2, #0
 81019de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81019e0:	4b14      	ldr	r3, [pc, #80]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019e2:	2200      	movs	r2, #0
 81019e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81019e6:	4b13      	ldr	r3, [pc, #76]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019e8:	2200      	movs	r2, #0
 81019ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81019ec:	4811      	ldr	r0, [pc, #68]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 81019ee:	f006 fc5d 	bl	81082ac <HAL_UART_Init>
 81019f2:	4603      	mov	r3, r0
 81019f4:	2b00      	cmp	r3, #0
 81019f6:	d001      	beq.n	81019fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81019f8:	f000 f952 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81019fc:	2100      	movs	r1, #0
 81019fe:	480d      	ldr	r0, [pc, #52]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 8101a00:	f007 fc90 	bl	8109324 <HAL_UARTEx_SetTxFifoThreshold>
 8101a04:	4603      	mov	r3, r0
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d001      	beq.n	8101a0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101a0a:	f000 f949 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101a0e:	2100      	movs	r1, #0
 8101a10:	4808      	ldr	r0, [pc, #32]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 8101a12:	f007 fcc5 	bl	81093a0 <HAL_UARTEx_SetRxFifoThreshold>
 8101a16:	4603      	mov	r3, r0
 8101a18:	2b00      	cmp	r3, #0
 8101a1a:	d001      	beq.n	8101a20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101a1c:	f000 f940 	bl	8101ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101a20:	4804      	ldr	r0, [pc, #16]	; (8101a34 <MX_USART3_UART_Init+0x90>)
 8101a22:	f007 fc46 	bl	81092b2 <HAL_UARTEx_DisableFifoMode>
 8101a26:	4603      	mov	r3, r0
 8101a28:	2b00      	cmp	r3, #0
 8101a2a:	d001      	beq.n	8101a30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101a2c:	f000 f938 	bl	8101ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101a30:	bf00      	nop
 8101a32:	bd80      	pop	{r7, pc}
 8101a34:	10000418 	.word	0x10000418
 8101a38:	40004800 	.word	0x40004800

08101a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101a3c:	b580      	push	{r7, lr}
 8101a3e:	b082      	sub	sp, #8
 8101a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101a42:	4b0d      	ldr	r3, [pc, #52]	; (8101a78 <MX_DMA_Init+0x3c>)
 8101a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a48:	4a0b      	ldr	r2, [pc, #44]	; (8101a78 <MX_DMA_Init+0x3c>)
 8101a4a:	f043 0301 	orr.w	r3, r3, #1
 8101a4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a52:	4b09      	ldr	r3, [pc, #36]	; (8101a78 <MX_DMA_Init+0x3c>)
 8101a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a58:	f003 0301 	and.w	r3, r3, #1
 8101a5c:	607b      	str	r3, [r7, #4]
 8101a5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101a60:	2200      	movs	r2, #0
 8101a62:	2100      	movs	r1, #0
 8101a64:	200b      	movs	r0, #11
 8101a66:	f000 fe96 	bl	8102796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101a6a:	200b      	movs	r0, #11
 8101a6c:	f000 fead 	bl	81027ca <HAL_NVIC_EnableIRQ>

}
 8101a70:	bf00      	nop
 8101a72:	3708      	adds	r7, #8
 8101a74:	46bd      	mov	sp, r7
 8101a76:	bd80      	pop	{r7, pc}
 8101a78:	58024400 	.word	0x58024400

08101a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101a7c:	b580      	push	{r7, lr}
 8101a7e:	b08c      	sub	sp, #48	; 0x30
 8101a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a82:	f107 031c 	add.w	r3, r7, #28
 8101a86:	2200      	movs	r2, #0
 8101a88:	601a      	str	r2, [r3, #0]
 8101a8a:	605a      	str	r2, [r3, #4]
 8101a8c:	609a      	str	r2, [r3, #8]
 8101a8e:	60da      	str	r2, [r3, #12]
 8101a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101a92:	4b66      	ldr	r3, [pc, #408]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a98:	4a64      	ldr	r2, [pc, #400]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101a9a:	f043 0304 	orr.w	r3, r3, #4
 8101a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101aa2:	4b62      	ldr	r3, [pc, #392]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aa8:	f003 0304 	and.w	r3, r3, #4
 8101aac:	61bb      	str	r3, [r7, #24]
 8101aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ab0:	4b5e      	ldr	r3, [pc, #376]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ab6:	4a5d      	ldr	r2, [pc, #372]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101ab8:	f043 0301 	orr.w	r3, r3, #1
 8101abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ac0:	4b5a      	ldr	r3, [pc, #360]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ac6:	f003 0301 	and.w	r3, r3, #1
 8101aca:	617b      	str	r3, [r7, #20]
 8101acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101ace:	4b57      	ldr	r3, [pc, #348]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ad4:	4a55      	ldr	r2, [pc, #340]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101ad6:	f043 0302 	orr.w	r3, r3, #2
 8101ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ade:	4b53      	ldr	r3, [pc, #332]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ae4:	f003 0302 	and.w	r3, r3, #2
 8101ae8:	613b      	str	r3, [r7, #16]
 8101aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101aec:	4b4f      	ldr	r3, [pc, #316]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101af2:	4a4e      	ldr	r2, [pc, #312]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101af4:	f043 0310 	orr.w	r3, r3, #16
 8101af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101afc:	4b4b      	ldr	r3, [pc, #300]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b02:	f003 0310 	and.w	r3, r3, #16
 8101b06:	60fb      	str	r3, [r7, #12]
 8101b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b0a:	4b48      	ldr	r3, [pc, #288]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b10:	4a46      	ldr	r2, [pc, #280]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101b12:	f043 0308 	orr.w	r3, r3, #8
 8101b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b1a:	4b44      	ldr	r3, [pc, #272]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b20:	f003 0308 	and.w	r3, r3, #8
 8101b24:	60bb      	str	r3, [r7, #8]
 8101b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101b28:	4b40      	ldr	r3, [pc, #256]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b2e:	4a3f      	ldr	r2, [pc, #252]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b38:	4b3c      	ldr	r3, [pc, #240]	; (8101c2c <MX_GPIO_Init+0x1b0>)
 8101b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101b42:	607b      	str	r3, [r7, #4]
 8101b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8101b46:	2200      	movs	r2, #0
 8101b48:	f244 0181 	movw	r1, #16513	; 0x4081
 8101b4c:	4838      	ldr	r0, [pc, #224]	; (8101c30 <MX_GPIO_Init+0x1b4>)
 8101b4e:	f002 fcdb 	bl	8104508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_2_Pin|DIR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101b52:	2200      	movs	r2, #0
 8101b54:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8101b58:	4836      	ldr	r0, [pc, #216]	; (8101c34 <MX_GPIO_Init+0x1b8>)
 8101b5a:	f002 fcd5 	bl	8104508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8101b5e:	2200      	movs	r2, #0
 8101b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8101b64:	4834      	ldr	r0, [pc, #208]	; (8101c38 <MX_GPIO_Init+0x1bc>)
 8101b66:	f002 fccf 	bl	8104508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8101b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101b70:	2300      	movs	r3, #0
 8101b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b74:	2300      	movs	r3, #0
 8101b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101b78:	f107 031c 	add.w	r3, r7, #28
 8101b7c:	4619      	mov	r1, r3
 8101b7e:	482f      	ldr	r0, [pc, #188]	; (8101c3c <MX_GPIO_Init+0x1c0>)
 8101b80:	f002 fb12 	bl	81041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101b84:	2301      	movs	r3, #1
 8101b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101b88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b8e:	2300      	movs	r3, #0
 8101b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101b92:	f107 031c 	add.w	r3, r7, #28
 8101b96:	4619      	mov	r1, r3
 8101b98:	4828      	ldr	r0, [pc, #160]	; (8101c3c <MX_GPIO_Init+0x1c0>)
 8101b9a:	f002 fb05 	bl	81041a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8101b9e:	f244 0381 	movw	r3, #16513	; 0x4081
 8101ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101ba4:	2301      	movs	r3, #1
 8101ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ba8:	2300      	movs	r3, #0
 8101baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bac:	2300      	movs	r3, #0
 8101bae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101bb0:	f107 031c 	add.w	r3, r7, #28
 8101bb4:	4619      	mov	r1, r3
 8101bb6:	481e      	ldr	r0, [pc, #120]	; (8101c30 <MX_GPIO_Init+0x1b4>)
 8101bb8:	f002 faf6 	bl	81041a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin DIR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|DIR_3_Pin|LD2_Pin;
 8101bbc:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8101bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101bc2:	2301      	movs	r3, #1
 8101bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc6:	2300      	movs	r3, #0
 8101bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bca:	2300      	movs	r3, #0
 8101bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101bce:	f107 031c 	add.w	r3, r7, #28
 8101bd2:	4619      	mov	r1, r3
 8101bd4:	4817      	ldr	r0, [pc, #92]	; (8101c34 <MX_GPIO_Init+0x1b8>)
 8101bd6:	f002 fae7 	bl	81041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8101bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101be0:	2301      	movs	r3, #1
 8101be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101be4:	2300      	movs	r3, #0
 8101be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101be8:	2300      	movs	r3, #0
 8101bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8101bec:	f107 031c 	add.w	r3, r7, #28
 8101bf0:	4619      	mov	r1, r3
 8101bf2:	4811      	ldr	r0, [pc, #68]	; (8101c38 <MX_GPIO_Init+0x1bc>)
 8101bf4:	f002 fad8 	bl	81041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8101bf8:	2380      	movs	r3, #128	; 0x80
 8101bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101bfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c02:	2300      	movs	r3, #0
 8101c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8101c06:	f107 031c 	add.w	r3, r7, #28
 8101c0a:	4619      	mov	r1, r3
 8101c0c:	480c      	ldr	r0, [pc, #48]	; (8101c40 <MX_GPIO_Init+0x1c4>)
 8101c0e:	f002 facb 	bl	81041a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8101c12:	2200      	movs	r2, #0
 8101c14:	2100      	movs	r1, #0
 8101c16:	2006      	movs	r0, #6
 8101c18:	f000 fdbd 	bl	8102796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8101c1c:	2006      	movs	r0, #6
 8101c1e:	f000 fdd4 	bl	81027ca <HAL_NVIC_EnableIRQ>

}
 8101c22:	bf00      	nop
 8101c24:	3730      	adds	r7, #48	; 0x30
 8101c26:	46bd      	mov	sp, r7
 8101c28:	bd80      	pop	{r7, pc}
 8101c2a:	bf00      	nop
 8101c2c:	58024400 	.word	0x58024400
 8101c30:	58020400 	.word	0x58020400
 8101c34:	58021000 	.word	0x58021000
 8101c38:	58020c00 	.word	0x58020c00
 8101c3c:	58020800 	.word	0x58020800
 8101c40:	58021800 	.word	0x58021800

08101c44 <UART_Send>:

/* USER CODE BEGIN 4 */



int UART_Send(char (*output)[]) {
 8101c44:	b580      	push	{r7, lr}
 8101c46:	b082      	sub	sp, #8
 8101c48:	af00      	add	r7, sp, #0
 8101c4a:	6078      	str	r0, [r7, #4]
	printf("passa...\r\n");
 8101c4c:	4809      	ldr	r0, [pc, #36]	; (8101c74 <UART_Send+0x30>)
 8101c4e:	f008 fc17 	bl	810a480 <puts>
	HAL_UART_Transmit(&huart4, output , strlen(output), 0xFFFF);
 8101c52:	6878      	ldr	r0, [r7, #4]
 8101c54:	f7fe fb44 	bl	81002e0 <strlen>
 8101c58:	4603      	mov	r3, r0
 8101c5a:	b29a      	uxth	r2, r3
 8101c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101c60:	6879      	ldr	r1, [r7, #4]
 8101c62:	4805      	ldr	r0, [pc, #20]	; (8101c78 <UART_Send+0x34>)
 8101c64:	f006 fb72 	bl	810834c <HAL_UART_Transmit>
	return output;
 8101c68:	687b      	ldr	r3, [r7, #4]
}
 8101c6a:	4618      	mov	r0, r3
 8101c6c:	3708      	adds	r7, #8
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	bd80      	pop	{r7, pc}
 8101c72:	bf00      	nop
 8101c74:	0810dfb0 	.word	0x0810dfb0
 8101c78:	10000388 	.word	0x10000388

08101c7c <__io_putchar>:


int __io_putchar(int ch) {
 8101c7c:	b580      	push	{r7, lr}
 8101c7e:	b082      	sub	sp, #8
 8101c80:	af00      	add	r7, sp, #0
 8101c82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101c84:	1d39      	adds	r1, r7, #4
 8101c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101c8a:	2201      	movs	r2, #1
 8101c8c:	4803      	ldr	r0, [pc, #12]	; (8101c9c <__io_putchar+0x20>)
 8101c8e:	f006 fb5d 	bl	810834c <HAL_UART_Transmit>
	return ch;
 8101c92:	687b      	ldr	r3, [r7, #4]
}
 8101c94:	4618      	mov	r0, r3
 8101c96:	3708      	adds	r7, #8
 8101c98:	46bd      	mov	sp, r7
 8101c9a:	bd80      	pop	{r7, pc}
 8101c9c:	10000418 	.word	0x10000418

08101ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101ca0:	b480      	push	{r7}
 8101ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101ca4:	b672      	cpsid	i
}
 8101ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101ca8:	e7fe      	b.n	8101ca8 <Error_Handler+0x8>
	...

08101cac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101cac:	b480      	push	{r7}
 8101cae:	b083      	sub	sp, #12
 8101cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101cb2:	4b0a      	ldr	r3, [pc, #40]	; (8101cdc <HAL_MspInit+0x30>)
 8101cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cb8:	4a08      	ldr	r2, [pc, #32]	; (8101cdc <HAL_MspInit+0x30>)
 8101cba:	f043 0302 	orr.w	r3, r3, #2
 8101cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101cc2:	4b06      	ldr	r3, [pc, #24]	; (8101cdc <HAL_MspInit+0x30>)
 8101cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cc8:	f003 0302 	and.w	r3, r3, #2
 8101ccc:	607b      	str	r3, [r7, #4]
 8101cce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101cd0:	bf00      	nop
 8101cd2:	370c      	adds	r7, #12
 8101cd4:	46bd      	mov	sp, r7
 8101cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cda:	4770      	bx	lr
 8101cdc:	58024400 	.word	0x58024400

08101ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101ce0:	b580      	push	{r7, lr}
 8101ce2:	b0b8      	sub	sp, #224	; 0xe0
 8101ce4:	af00      	add	r7, sp, #0
 8101ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ce8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101cec:	2200      	movs	r2, #0
 8101cee:	601a      	str	r2, [r3, #0]
 8101cf0:	605a      	str	r2, [r3, #4]
 8101cf2:	609a      	str	r2, [r3, #8]
 8101cf4:	60da      	str	r2, [r3, #12]
 8101cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cf8:	f107 0310 	add.w	r3, r7, #16
 8101cfc:	22bc      	movs	r2, #188	; 0xbc
 8101cfe:	2100      	movs	r1, #0
 8101d00:	4618      	mov	r0, r3
 8101d02:	f007 fc23 	bl	810954c <memset>
  if(hi2c->Instance==I2C1)
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	681b      	ldr	r3, [r3, #0]
 8101d0a:	4a25      	ldr	r2, [pc, #148]	; (8101da0 <HAL_I2C_MspInit+0xc0>)
 8101d0c:	4293      	cmp	r3, r2
 8101d0e:	d142      	bne.n	8101d96 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101d10:	2308      	movs	r3, #8
 8101d12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101d14:	2300      	movs	r3, #0
 8101d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d1a:	f107 0310 	add.w	r3, r7, #16
 8101d1e:	4618      	mov	r0, r3
 8101d20:	f003 fda6 	bl	8105870 <HAL_RCCEx_PeriphCLKConfig>
 8101d24:	4603      	mov	r3, r0
 8101d26:	2b00      	cmp	r3, #0
 8101d28:	d001      	beq.n	8101d2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101d2a:	f7ff ffb9 	bl	8101ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d2e:	4b1d      	ldr	r3, [pc, #116]	; (8101da4 <HAL_I2C_MspInit+0xc4>)
 8101d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d34:	4a1b      	ldr	r2, [pc, #108]	; (8101da4 <HAL_I2C_MspInit+0xc4>)
 8101d36:	f043 0302 	orr.w	r3, r3, #2
 8101d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d3e:	4b19      	ldr	r3, [pc, #100]	; (8101da4 <HAL_I2C_MspInit+0xc4>)
 8101d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d44:	f003 0302 	and.w	r3, r3, #2
 8101d48:	60fb      	str	r3, [r7, #12]
 8101d4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8101d4c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101d50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101d54:	2312      	movs	r3, #18
 8101d56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d5a:	2300      	movs	r3, #0
 8101d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d60:	2300      	movs	r3, #0
 8101d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101d66:	2304      	movs	r3, #4
 8101d68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d70:	4619      	mov	r1, r3
 8101d72:	480d      	ldr	r0, [pc, #52]	; (8101da8 <HAL_I2C_MspInit+0xc8>)
 8101d74:	f002 fa18 	bl	81041a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d78:	4b0a      	ldr	r3, [pc, #40]	; (8101da4 <HAL_I2C_MspInit+0xc4>)
 8101d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d7e:	4a09      	ldr	r2, [pc, #36]	; (8101da4 <HAL_I2C_MspInit+0xc4>)
 8101d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101d84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d88:	4b06      	ldr	r3, [pc, #24]	; (8101da4 <HAL_I2C_MspInit+0xc4>)
 8101d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101d92:	60bb      	str	r3, [r7, #8]
 8101d94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101d96:	bf00      	nop
 8101d98:	37e0      	adds	r7, #224	; 0xe0
 8101d9a:	46bd      	mov	sp, r7
 8101d9c:	bd80      	pop	{r7, pc}
 8101d9e:	bf00      	nop
 8101da0:	40005400 	.word	0x40005400
 8101da4:	58024400 	.word	0x58024400
 8101da8:	58020400 	.word	0x58020400

08101dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101dac:	b480      	push	{r7}
 8101dae:	b085      	sub	sp, #20
 8101db0:	af00      	add	r7, sp, #0
 8101db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	681b      	ldr	r3, [r3, #0]
 8101db8:	4a0b      	ldr	r2, [pc, #44]	; (8101de8 <HAL_TIM_Base_MspInit+0x3c>)
 8101dba:	4293      	cmp	r3, r2
 8101dbc:	d10e      	bne.n	8101ddc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101dbe:	4b0b      	ldr	r3, [pc, #44]	; (8101dec <HAL_TIM_Base_MspInit+0x40>)
 8101dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101dc4:	4a09      	ldr	r2, [pc, #36]	; (8101dec <HAL_TIM_Base_MspInit+0x40>)
 8101dc6:	f043 0301 	orr.w	r3, r3, #1
 8101dca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101dce:	4b07      	ldr	r3, [pc, #28]	; (8101dec <HAL_TIM_Base_MspInit+0x40>)
 8101dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101dd4:	f003 0301 	and.w	r3, r3, #1
 8101dd8:	60fb      	str	r3, [r7, #12]
 8101dda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101ddc:	bf00      	nop
 8101dde:	3714      	adds	r7, #20
 8101de0:	46bd      	mov	sp, r7
 8101de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de6:	4770      	bx	lr
 8101de8:	40010000 	.word	0x40010000
 8101dec:	58024400 	.word	0x58024400

08101df0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8101df0:	b580      	push	{r7, lr}
 8101df2:	b090      	sub	sp, #64	; 0x40
 8101df4:	af00      	add	r7, sp, #0
 8101df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101dfc:	2200      	movs	r2, #0
 8101dfe:	601a      	str	r2, [r3, #0]
 8101e00:	605a      	str	r2, [r3, #4]
 8101e02:	609a      	str	r2, [r3, #8]
 8101e04:	60da      	str	r2, [r3, #12]
 8101e06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e10:	d14d      	bne.n	8101eae <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101e12:	4b6c      	ldr	r3, [pc, #432]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e18:	4a6a      	ldr	r2, [pc, #424]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e1a:	f043 0301 	orr.w	r3, r3, #1
 8101e1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e22:	4b68      	ldr	r3, [pc, #416]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e28:	f003 0301 	and.w	r3, r3, #1
 8101e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8101e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e30:	4b64      	ldr	r3, [pc, #400]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e36:	4a63      	ldr	r2, [pc, #396]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e38:	f043 0301 	orr.w	r3, r3, #1
 8101e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e40:	4b60      	ldr	r3, [pc, #384]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e46:	f003 0301 	and.w	r3, r3, #1
 8101e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8101e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e4e:	4b5d      	ldr	r3, [pc, #372]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e54:	4a5b      	ldr	r2, [pc, #364]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e56:	f043 0302 	orr.w	r3, r3, #2
 8101e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e5e:	4b59      	ldr	r3, [pc, #356]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e64:	f003 0302 	and.w	r3, r3, #2
 8101e68:	623b      	str	r3, [r7, #32]
 8101e6a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101e6c:	2301      	movs	r3, #1
 8101e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e70:	2302      	movs	r3, #2
 8101e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e74:	2300      	movs	r3, #0
 8101e76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e78:	2300      	movs	r3, #0
 8101e7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101e7c:	2301      	movs	r3, #1
 8101e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101e84:	4619      	mov	r1, r3
 8101e86:	4850      	ldr	r0, [pc, #320]	; (8101fc8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8101e88:	f002 f98e 	bl	81041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101e8c:	2308      	movs	r3, #8
 8101e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e90:	2302      	movs	r3, #2
 8101e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e94:	2300      	movs	r3, #0
 8101e96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e98:	2300      	movs	r3, #0
 8101e9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101e9c:	2301      	movs	r3, #1
 8101e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101ea4:	4619      	mov	r1, r3
 8101ea6:	4849      	ldr	r0, [pc, #292]	; (8101fcc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8101ea8:	f002 f97e 	bl	81041a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8101eac:	e086      	b.n	8101fbc <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM3)
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	4a47      	ldr	r2, [pc, #284]	; (8101fd0 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8101eb4:	4293      	cmp	r3, r2
 8101eb6:	d14d      	bne.n	8101f54 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101eb8:	4b42      	ldr	r3, [pc, #264]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ebe:	4a41      	ldr	r2, [pc, #260]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ec0:	f043 0302 	orr.w	r3, r3, #2
 8101ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101ec8:	4b3e      	ldr	r3, [pc, #248]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ece:	f003 0302 	and.w	r3, r3, #2
 8101ed2:	61fb      	str	r3, [r7, #28]
 8101ed4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ed6:	4b3b      	ldr	r3, [pc, #236]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101edc:	4a39      	ldr	r2, [pc, #228]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ede:	f043 0301 	orr.w	r3, r3, #1
 8101ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ee6:	4b37      	ldr	r3, [pc, #220]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101eec:	f003 0301 	and.w	r3, r3, #1
 8101ef0:	61bb      	str	r3, [r7, #24]
 8101ef2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101ef4:	4b33      	ldr	r3, [pc, #204]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101efa:	4a32      	ldr	r2, [pc, #200]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101efc:	f043 0304 	orr.w	r3, r3, #4
 8101f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f04:	4b2f      	ldr	r3, [pc, #188]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f0a:	f003 0304 	and.w	r3, r3, #4
 8101f0e:	617b      	str	r3, [r7, #20]
 8101f10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101f12:	2340      	movs	r3, #64	; 0x40
 8101f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f16:	2302      	movs	r3, #2
 8101f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f1a:	2300      	movs	r3, #0
 8101f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f1e:	2300      	movs	r3, #0
 8101f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f22:	2302      	movs	r3, #2
 8101f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101f2a:	4619      	mov	r1, r3
 8101f2c:	4826      	ldr	r0, [pc, #152]	; (8101fc8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8101f2e:	f002 f93b 	bl	81041a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101f32:	2380      	movs	r3, #128	; 0x80
 8101f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f36:	2302      	movs	r3, #2
 8101f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f3a:	2300      	movs	r3, #0
 8101f3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f3e:	2300      	movs	r3, #0
 8101f40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f42:	2302      	movs	r3, #2
 8101f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101f4a:	4619      	mov	r1, r3
 8101f4c:	4821      	ldr	r0, [pc, #132]	; (8101fd4 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8101f4e:	f002 f92b 	bl	81041a8 <HAL_GPIO_Init>
}
 8101f52:	e033      	b.n	8101fbc <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM4)
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	4a1f      	ldr	r2, [pc, #124]	; (8101fd8 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8101f5a:	4293      	cmp	r3, r2
 8101f5c:	d12e      	bne.n	8101fbc <HAL_TIM_Encoder_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8101f5e:	4b19      	ldr	r3, [pc, #100]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f64:	4a17      	ldr	r2, [pc, #92]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f66:	f043 0304 	orr.w	r3, r3, #4
 8101f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f6e:	4b15      	ldr	r3, [pc, #84]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f74:	f003 0304 	and.w	r3, r3, #4
 8101f78:	613b      	str	r3, [r7, #16]
 8101f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101f7c:	4b11      	ldr	r3, [pc, #68]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f82:	4a10      	ldr	r2, [pc, #64]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f84:	f043 0308 	orr.w	r3, r3, #8
 8101f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f8c:	4b0d      	ldr	r3, [pc, #52]	; (8101fc4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f92:	f003 0308 	and.w	r3, r3, #8
 8101f96:	60fb      	str	r3, [r7, #12]
 8101f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8101f9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8101f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fa0:	2302      	movs	r3, #2
 8101fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fa4:	2300      	movs	r3, #0
 8101fa6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fa8:	2300      	movs	r3, #0
 8101faa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101fac:	2302      	movs	r3, #2
 8101fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101fb4:	4619      	mov	r1, r3
 8101fb6:	4809      	ldr	r0, [pc, #36]	; (8101fdc <HAL_TIM_Encoder_MspInit+0x1ec>)
 8101fb8:	f002 f8f6 	bl	81041a8 <HAL_GPIO_Init>
}
 8101fbc:	bf00      	nop
 8101fbe:	3740      	adds	r7, #64	; 0x40
 8101fc0:	46bd      	mov	sp, r7
 8101fc2:	bd80      	pop	{r7, pc}
 8101fc4:	58024400 	.word	0x58024400
 8101fc8:	58020000 	.word	0x58020000
 8101fcc:	58020400 	.word	0x58020400
 8101fd0:	40000400 	.word	0x40000400
 8101fd4:	58020800 	.word	0x58020800
 8101fd8:	40000800 	.word	0x40000800
 8101fdc:	58020c00 	.word	0x58020c00

08101fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101fe0:	b580      	push	{r7, lr}
 8101fe2:	b088      	sub	sp, #32
 8101fe4:	af00      	add	r7, sp, #0
 8101fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fe8:	f107 030c 	add.w	r3, r7, #12
 8101fec:	2200      	movs	r2, #0
 8101fee:	601a      	str	r2, [r3, #0]
 8101ff0:	605a      	str	r2, [r3, #4]
 8101ff2:	609a      	str	r2, [r3, #8]
 8101ff4:	60da      	str	r2, [r3, #12]
 8101ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	4a13      	ldr	r2, [pc, #76]	; (810204c <HAL_TIM_MspPostInit+0x6c>)
 8101ffe:	4293      	cmp	r3, r2
 8102000:	d11f      	bne.n	8102042 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8102002:	4b13      	ldr	r3, [pc, #76]	; (8102050 <HAL_TIM_MspPostInit+0x70>)
 8102004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102008:	4a11      	ldr	r2, [pc, #68]	; (8102050 <HAL_TIM_MspPostInit+0x70>)
 810200a:	f043 0310 	orr.w	r3, r3, #16
 810200e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102012:	4b0f      	ldr	r3, [pc, #60]	; (8102050 <HAL_TIM_MspPostInit+0x70>)
 8102014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102018:	f003 0310 	and.w	r3, r3, #16
 810201c:	60bb      	str	r3, [r7, #8]
 810201e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8102020:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8102024:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102026:	2302      	movs	r3, #2
 8102028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810202a:	2300      	movs	r3, #0
 810202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810202e:	2300      	movs	r3, #0
 8102030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8102032:	2301      	movs	r3, #1
 8102034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102036:	f107 030c 	add.w	r3, r7, #12
 810203a:	4619      	mov	r1, r3
 810203c:	4805      	ldr	r0, [pc, #20]	; (8102054 <HAL_TIM_MspPostInit+0x74>)
 810203e:	f002 f8b3 	bl	81041a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8102042:	bf00      	nop
 8102044:	3720      	adds	r7, #32
 8102046:	46bd      	mov	sp, r7
 8102048:	bd80      	pop	{r7, pc}
 810204a:	bf00      	nop
 810204c:	40010000 	.word	0x40010000
 8102050:	58024400 	.word	0x58024400
 8102054:	58021000 	.word	0x58021000

08102058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102058:	b580      	push	{r7, lr}
 810205a:	b0ba      	sub	sp, #232	; 0xe8
 810205c:	af00      	add	r7, sp, #0
 810205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102060:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102064:	2200      	movs	r2, #0
 8102066:	601a      	str	r2, [r3, #0]
 8102068:	605a      	str	r2, [r3, #4]
 810206a:	609a      	str	r2, [r3, #8]
 810206c:	60da      	str	r2, [r3, #12]
 810206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102070:	f107 0318 	add.w	r3, r7, #24
 8102074:	22bc      	movs	r2, #188	; 0xbc
 8102076:	2100      	movs	r1, #0
 8102078:	4618      	mov	r0, r3
 810207a:	f007 fa67 	bl	810954c <memset>
  if(huart->Instance==UART4)
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	4a60      	ldr	r2, [pc, #384]	; (8102204 <HAL_UART_MspInit+0x1ac>)
 8102084:	4293      	cmp	r3, r2
 8102086:	d170      	bne.n	810216a <HAL_UART_MspInit+0x112>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8102088:	2302      	movs	r3, #2
 810208a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810208c:	2300      	movs	r3, #0
 810208e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102092:	f107 0318 	add.w	r3, r7, #24
 8102096:	4618      	mov	r0, r3
 8102098:	f003 fbea 	bl	8105870 <HAL_RCCEx_PeriphCLKConfig>
 810209c:	4603      	mov	r3, r0
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d001      	beq.n	81020a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81020a2:	f7ff fdfd 	bl	8101ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 81020a6:	4b58      	ldr	r3, [pc, #352]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81020a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020ac:	4a56      	ldr	r2, [pc, #344]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81020ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81020b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81020b6:	4b54      	ldr	r3, [pc, #336]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81020c0:	617b      	str	r3, [r7, #20]
 81020c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81020c4:	4b50      	ldr	r3, [pc, #320]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020ca:	4a4f      	ldr	r2, [pc, #316]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81020cc:	f043 0304 	orr.w	r3, r3, #4
 81020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020d4:	4b4c      	ldr	r3, [pc, #304]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020da:	f003 0304 	and.w	r3, r3, #4
 81020de:	613b      	str	r3, [r7, #16]
 81020e0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81020e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81020e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020ea:	2302      	movs	r3, #2
 81020ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020f0:	2300      	movs	r3, #0
 81020f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020f6:	2300      	movs	r3, #0
 81020f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 81020fc:	2308      	movs	r3, #8
 81020fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102102:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102106:	4619      	mov	r1, r3
 8102108:	4840      	ldr	r0, [pc, #256]	; (810220c <HAL_UART_MspInit+0x1b4>)
 810210a:	f002 f84d 	bl	81041a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 810210e:	4b40      	ldr	r3, [pc, #256]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102110:	4a40      	ldr	r2, [pc, #256]	; (8102214 <HAL_UART_MspInit+0x1bc>)
 8102112:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8102114:	4b3e      	ldr	r3, [pc, #248]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102116:	2240      	movs	r2, #64	; 0x40
 8102118:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810211a:	4b3d      	ldr	r3, [pc, #244]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 810211c:	2240      	movs	r2, #64	; 0x40
 810211e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102120:	4b3b      	ldr	r3, [pc, #236]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102122:	2200      	movs	r2, #0
 8102124:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102126:	4b3a      	ldr	r3, [pc, #232]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810212c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810212e:	4b38      	ldr	r3, [pc, #224]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102130:	2200      	movs	r2, #0
 8102132:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102134:	4b36      	ldr	r3, [pc, #216]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102136:	2200      	movs	r2, #0
 8102138:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 810213a:	4b35      	ldr	r3, [pc, #212]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 810213c:	2200      	movs	r2, #0
 810213e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8102140:	4b33      	ldr	r3, [pc, #204]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102142:	2200      	movs	r2, #0
 8102144:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102146:	4b32      	ldr	r3, [pc, #200]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102148:	2200      	movs	r2, #0
 810214a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 810214c:	4830      	ldr	r0, [pc, #192]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 810214e:	f000 fb6b 	bl	8102828 <HAL_DMA_Init>
 8102152:	4603      	mov	r3, r0
 8102154:	2b00      	cmp	r3, #0
 8102156:	d001      	beq.n	810215c <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8102158:	f7ff fda2 	bl	8101ca0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	4a2c      	ldr	r2, [pc, #176]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102160:	679a      	str	r2, [r3, #120]	; 0x78
 8102162:	4a2b      	ldr	r2, [pc, #172]	; (8102210 <HAL_UART_MspInit+0x1b8>)
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102168:	e047      	b.n	81021fa <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	681b      	ldr	r3, [r3, #0]
 810216e:	4a2a      	ldr	r2, [pc, #168]	; (8102218 <HAL_UART_MspInit+0x1c0>)
 8102170:	4293      	cmp	r3, r2
 8102172:	d142      	bne.n	81021fa <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102174:	2302      	movs	r3, #2
 8102176:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102178:	2300      	movs	r3, #0
 810217a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810217e:	f107 0318 	add.w	r3, r7, #24
 8102182:	4618      	mov	r0, r3
 8102184:	f003 fb74 	bl	8105870 <HAL_RCCEx_PeriphCLKConfig>
 8102188:	4603      	mov	r3, r0
 810218a:	2b00      	cmp	r3, #0
 810218c:	d001      	beq.n	8102192 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 810218e:	f7ff fd87 	bl	8101ca0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8102192:	4b1d      	ldr	r3, [pc, #116]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 8102194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102198:	4a1b      	ldr	r2, [pc, #108]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 810219a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810219e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81021a2:	4b19      	ldr	r3, [pc, #100]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81021a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81021a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81021ac:	60fb      	str	r3, [r7, #12]
 81021ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81021b0:	4b15      	ldr	r3, [pc, #84]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021b6:	4a14      	ldr	r2, [pc, #80]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81021b8:	f043 0308 	orr.w	r3, r3, #8
 81021bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021c0:	4b11      	ldr	r3, [pc, #68]	; (8102208 <HAL_UART_MspInit+0x1b0>)
 81021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021c6:	f003 0308 	and.w	r3, r3, #8
 81021ca:	60bb      	str	r3, [r7, #8]
 81021cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 81021d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021d6:	2302      	movs	r3, #2
 81021d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021dc:	2300      	movs	r3, #0
 81021de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021e2:	2300      	movs	r3, #0
 81021e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81021e8:	2307      	movs	r3, #7
 81021ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81021ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81021f2:	4619      	mov	r1, r3
 81021f4:	4809      	ldr	r0, [pc, #36]	; (810221c <HAL_UART_MspInit+0x1c4>)
 81021f6:	f001 ffd7 	bl	81041a8 <HAL_GPIO_Init>
}
 81021fa:	bf00      	nop
 81021fc:	37e8      	adds	r7, #232	; 0xe8
 81021fe:	46bd      	mov	sp, r7
 8102200:	bd80      	pop	{r7, pc}
 8102202:	bf00      	nop
 8102204:	40004c00 	.word	0x40004c00
 8102208:	58024400 	.word	0x58024400
 810220c:	58020800 	.word	0x58020800
 8102210:	100004a8 	.word	0x100004a8
 8102214:	40020010 	.word	0x40020010
 8102218:	40004800 	.word	0x40004800
 810221c:	58020c00 	.word	0x58020c00

08102220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102220:	b480      	push	{r7}
 8102222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102224:	e7fe      	b.n	8102224 <NMI_Handler+0x4>

08102226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102226:	b480      	push	{r7}
 8102228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810222a:	e7fe      	b.n	810222a <HardFault_Handler+0x4>

0810222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810222c:	b480      	push	{r7}
 810222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102230:	e7fe      	b.n	8102230 <MemManage_Handler+0x4>

08102232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102232:	b480      	push	{r7}
 8102234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102236:	e7fe      	b.n	8102236 <BusFault_Handler+0x4>

08102238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102238:	b480      	push	{r7}
 810223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810223c:	e7fe      	b.n	810223c <UsageFault_Handler+0x4>

0810223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810223e:	b480      	push	{r7}
 8102240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102242:	bf00      	nop
 8102244:	46bd      	mov	sp, r7
 8102246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810224a:	4770      	bx	lr

0810224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810224c:	b480      	push	{r7}
 810224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102250:	bf00      	nop
 8102252:	46bd      	mov	sp, r7
 8102254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102258:	4770      	bx	lr

0810225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810225a:	b480      	push	{r7}
 810225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810225e:	bf00      	nop
 8102260:	46bd      	mov	sp, r7
 8102262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102266:	4770      	bx	lr

08102268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102268:	b580      	push	{r7, lr}
 810226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810226c:	f000 f998 	bl	81025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102270:	bf00      	nop
 8102272:	bd80      	pop	{r7, pc}

08102274 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8102274:	b580      	push	{r7, lr}
 8102276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8102278:	2001      	movs	r0, #1
 810227a:	f002 f95e 	bl	810453a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 810227e:	bf00      	nop
 8102280:	bd80      	pop	{r7, pc}
	...

08102284 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102284:	b580      	push	{r7, lr}
 8102286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8102288:	4802      	ldr	r0, [pc, #8]	; (8102294 <DMA1_Stream0_IRQHandler+0x10>)
 810228a:	f000 fe27 	bl	8102edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810228e:	bf00      	nop
 8102290:	bd80      	pop	{r7, pc}
 8102292:	bf00      	nop
 8102294:	100004a8 	.word	0x100004a8

08102298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102298:	b480      	push	{r7}
 810229a:	af00      	add	r7, sp, #0
	return 1;
 810229c:	2301      	movs	r3, #1
}
 810229e:	4618      	mov	r0, r3
 81022a0:	46bd      	mov	sp, r7
 81022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a6:	4770      	bx	lr

081022a8 <_kill>:

int _kill(int pid, int sig)
{
 81022a8:	b580      	push	{r7, lr}
 81022aa:	b082      	sub	sp, #8
 81022ac:	af00      	add	r7, sp, #0
 81022ae:	6078      	str	r0, [r7, #4]
 81022b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81022b2:	f007 f90d 	bl	81094d0 <__errno>
 81022b6:	4603      	mov	r3, r0
 81022b8:	2216      	movs	r2, #22
 81022ba:	601a      	str	r2, [r3, #0]
	return -1;
 81022bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022c0:	4618      	mov	r0, r3
 81022c2:	3708      	adds	r7, #8
 81022c4:	46bd      	mov	sp, r7
 81022c6:	bd80      	pop	{r7, pc}

081022c8 <_exit>:

void _exit (int status)
{
 81022c8:	b580      	push	{r7, lr}
 81022ca:	b082      	sub	sp, #8
 81022cc:	af00      	add	r7, sp, #0
 81022ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81022d0:	f04f 31ff 	mov.w	r1, #4294967295
 81022d4:	6878      	ldr	r0, [r7, #4]
 81022d6:	f7ff ffe7 	bl	81022a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 81022da:	e7fe      	b.n	81022da <_exit+0x12>

081022dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81022dc:	b580      	push	{r7, lr}
 81022de:	b086      	sub	sp, #24
 81022e0:	af00      	add	r7, sp, #0
 81022e2:	60f8      	str	r0, [r7, #12]
 81022e4:	60b9      	str	r1, [r7, #8]
 81022e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022e8:	2300      	movs	r3, #0
 81022ea:	617b      	str	r3, [r7, #20]
 81022ec:	e00a      	b.n	8102304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81022ee:	f3af 8000 	nop.w
 81022f2:	4601      	mov	r1, r0
 81022f4:	68bb      	ldr	r3, [r7, #8]
 81022f6:	1c5a      	adds	r2, r3, #1
 81022f8:	60ba      	str	r2, [r7, #8]
 81022fa:	b2ca      	uxtb	r2, r1
 81022fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022fe:	697b      	ldr	r3, [r7, #20]
 8102300:	3301      	adds	r3, #1
 8102302:	617b      	str	r3, [r7, #20]
 8102304:	697a      	ldr	r2, [r7, #20]
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	429a      	cmp	r2, r3
 810230a:	dbf0      	blt.n	81022ee <_read+0x12>
	}

return len;
 810230c:	687b      	ldr	r3, [r7, #4]
}
 810230e:	4618      	mov	r0, r3
 8102310:	3718      	adds	r7, #24
 8102312:	46bd      	mov	sp, r7
 8102314:	bd80      	pop	{r7, pc}

08102316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102316:	b580      	push	{r7, lr}
 8102318:	b086      	sub	sp, #24
 810231a:	af00      	add	r7, sp, #0
 810231c:	60f8      	str	r0, [r7, #12]
 810231e:	60b9      	str	r1, [r7, #8]
 8102320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102322:	2300      	movs	r3, #0
 8102324:	617b      	str	r3, [r7, #20]
 8102326:	e009      	b.n	810233c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102328:	68bb      	ldr	r3, [r7, #8]
 810232a:	1c5a      	adds	r2, r3, #1
 810232c:	60ba      	str	r2, [r7, #8]
 810232e:	781b      	ldrb	r3, [r3, #0]
 8102330:	4618      	mov	r0, r3
 8102332:	f7ff fca3 	bl	8101c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102336:	697b      	ldr	r3, [r7, #20]
 8102338:	3301      	adds	r3, #1
 810233a:	617b      	str	r3, [r7, #20]
 810233c:	697a      	ldr	r2, [r7, #20]
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	429a      	cmp	r2, r3
 8102342:	dbf1      	blt.n	8102328 <_write+0x12>
	}
	return len;
 8102344:	687b      	ldr	r3, [r7, #4]
}
 8102346:	4618      	mov	r0, r3
 8102348:	3718      	adds	r7, #24
 810234a:	46bd      	mov	sp, r7
 810234c:	bd80      	pop	{r7, pc}

0810234e <_close>:

int _close(int file)
{
 810234e:	b480      	push	{r7}
 8102350:	b083      	sub	sp, #12
 8102352:	af00      	add	r7, sp, #0
 8102354:	6078      	str	r0, [r7, #4]
	return -1;
 8102356:	f04f 33ff 	mov.w	r3, #4294967295
}
 810235a:	4618      	mov	r0, r3
 810235c:	370c      	adds	r7, #12
 810235e:	46bd      	mov	sp, r7
 8102360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102364:	4770      	bx	lr

08102366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102366:	b480      	push	{r7}
 8102368:	b083      	sub	sp, #12
 810236a:	af00      	add	r7, sp, #0
 810236c:	6078      	str	r0, [r7, #4]
 810236e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102370:	683b      	ldr	r3, [r7, #0]
 8102372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102376:	605a      	str	r2, [r3, #4]
	return 0;
 8102378:	2300      	movs	r3, #0
}
 810237a:	4618      	mov	r0, r3
 810237c:	370c      	adds	r7, #12
 810237e:	46bd      	mov	sp, r7
 8102380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102384:	4770      	bx	lr

08102386 <_isatty>:

int _isatty(int file)
{
 8102386:	b480      	push	{r7}
 8102388:	b083      	sub	sp, #12
 810238a:	af00      	add	r7, sp, #0
 810238c:	6078      	str	r0, [r7, #4]
	return 1;
 810238e:	2301      	movs	r3, #1
}
 8102390:	4618      	mov	r0, r3
 8102392:	370c      	adds	r7, #12
 8102394:	46bd      	mov	sp, r7
 8102396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239a:	4770      	bx	lr

0810239c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810239c:	b480      	push	{r7}
 810239e:	b085      	sub	sp, #20
 81023a0:	af00      	add	r7, sp, #0
 81023a2:	60f8      	str	r0, [r7, #12]
 81023a4:	60b9      	str	r1, [r7, #8]
 81023a6:	607a      	str	r2, [r7, #4]
	return 0;
 81023a8:	2300      	movs	r3, #0
}
 81023aa:	4618      	mov	r0, r3
 81023ac:	3714      	adds	r7, #20
 81023ae:	46bd      	mov	sp, r7
 81023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023b4:	4770      	bx	lr
	...

081023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81023b8:	b580      	push	{r7, lr}
 81023ba:	b086      	sub	sp, #24
 81023bc:	af00      	add	r7, sp, #0
 81023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81023c0:	4a14      	ldr	r2, [pc, #80]	; (8102414 <_sbrk+0x5c>)
 81023c2:	4b15      	ldr	r3, [pc, #84]	; (8102418 <_sbrk+0x60>)
 81023c4:	1ad3      	subs	r3, r2, r3
 81023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81023c8:	697b      	ldr	r3, [r7, #20]
 81023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81023cc:	4b13      	ldr	r3, [pc, #76]	; (810241c <_sbrk+0x64>)
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	2b00      	cmp	r3, #0
 81023d2:	d102      	bne.n	81023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81023d4:	4b11      	ldr	r3, [pc, #68]	; (810241c <_sbrk+0x64>)
 81023d6:	4a12      	ldr	r2, [pc, #72]	; (8102420 <_sbrk+0x68>)
 81023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81023da:	4b10      	ldr	r3, [pc, #64]	; (810241c <_sbrk+0x64>)
 81023dc:	681a      	ldr	r2, [r3, #0]
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	4413      	add	r3, r2
 81023e2:	693a      	ldr	r2, [r7, #16]
 81023e4:	429a      	cmp	r2, r3
 81023e6:	d207      	bcs.n	81023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81023e8:	f007 f872 	bl	81094d0 <__errno>
 81023ec:	4603      	mov	r3, r0
 81023ee:	220c      	movs	r2, #12
 81023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81023f2:	f04f 33ff 	mov.w	r3, #4294967295
 81023f6:	e009      	b.n	810240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81023f8:	4b08      	ldr	r3, [pc, #32]	; (810241c <_sbrk+0x64>)
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81023fe:	4b07      	ldr	r3, [pc, #28]	; (810241c <_sbrk+0x64>)
 8102400:	681a      	ldr	r2, [r3, #0]
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	4413      	add	r3, r2
 8102406:	4a05      	ldr	r2, [pc, #20]	; (810241c <_sbrk+0x64>)
 8102408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810240a:	68fb      	ldr	r3, [r7, #12]
}
 810240c:	4618      	mov	r0, r3
 810240e:	3718      	adds	r7, #24
 8102410:	46bd      	mov	sp, r7
 8102412:	bd80      	pop	{r7, pc}
 8102414:	10048000 	.word	0x10048000
 8102418:	00000400 	.word	0x00000400
 810241c:	10000520 	.word	0x10000520
 8102420:	10000538 	.word	0x10000538

08102424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102424:	f8df d034 	ldr.w	sp, [pc, #52]	; 810245c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102428:	f7fe fe6e 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810242c:	480c      	ldr	r0, [pc, #48]	; (8102460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810242e:	490d      	ldr	r1, [pc, #52]	; (8102464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102430:	4a0d      	ldr	r2, [pc, #52]	; (8102468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102434:	e002      	b.n	810243c <LoopCopyDataInit>

08102436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810243a:	3304      	adds	r3, #4

0810243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102440:	d3f9      	bcc.n	8102436 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102442:	4a0a      	ldr	r2, [pc, #40]	; (810246c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102444:	4c0a      	ldr	r4, [pc, #40]	; (8102470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102448:	e001      	b.n	810244e <LoopFillZerobss>

0810244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810244c:	3204      	adds	r2, #4

0810244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102450:	d3fb      	bcc.n	810244a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102452:	f007 f857 	bl	8109504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102456:	f7fe ffc7 	bl	81013e8 <main>
  bx  lr
 810245a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810245c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102460:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102464:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 8102468:	0810e4f4 	.word	0x0810e4f4
  ldr r2, =_sbss
 810246c:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8102470:	10000538 	.word	0x10000538

08102474 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102474:	e7fe      	b.n	8102474 <ADC3_IRQHandler>
	...

08102478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102478:	b580      	push	{r7, lr}
 810247a:	b082      	sub	sp, #8
 810247c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810247e:	4b28      	ldr	r3, [pc, #160]	; (8102520 <HAL_Init+0xa8>)
 8102480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102484:	4a26      	ldr	r2, [pc, #152]	; (8102520 <HAL_Init+0xa8>)
 8102486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810248a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810248e:	4b24      	ldr	r3, [pc, #144]	; (8102520 <HAL_Init+0xa8>)
 8102490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102498:	603b      	str	r3, [r7, #0]
 810249a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810249c:	4b21      	ldr	r3, [pc, #132]	; (8102524 <HAL_Init+0xac>)
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81024a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81024a8:	4a1e      	ldr	r2, [pc, #120]	; (8102524 <HAL_Init+0xac>)
 81024aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81024ae:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81024b0:	4b1c      	ldr	r3, [pc, #112]	; (8102524 <HAL_Init+0xac>)
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	4a1b      	ldr	r2, [pc, #108]	; (8102524 <HAL_Init+0xac>)
 81024b6:	f043 0301 	orr.w	r3, r3, #1
 81024ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81024bc:	2003      	movs	r0, #3
 81024be:	f000 f95f 	bl	8102780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81024c2:	f002 fffd 	bl	81054c0 <HAL_RCC_GetSysClockFreq>
 81024c6:	4602      	mov	r2, r0
 81024c8:	4b15      	ldr	r3, [pc, #84]	; (8102520 <HAL_Init+0xa8>)
 81024ca:	699b      	ldr	r3, [r3, #24]
 81024cc:	0a1b      	lsrs	r3, r3, #8
 81024ce:	f003 030f 	and.w	r3, r3, #15
 81024d2:	4915      	ldr	r1, [pc, #84]	; (8102528 <HAL_Init+0xb0>)
 81024d4:	5ccb      	ldrb	r3, [r1, r3]
 81024d6:	f003 031f 	and.w	r3, r3, #31
 81024da:	fa22 f303 	lsr.w	r3, r2, r3
 81024de:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024e0:	4b0f      	ldr	r3, [pc, #60]	; (8102520 <HAL_Init+0xa8>)
 81024e2:	699b      	ldr	r3, [r3, #24]
 81024e4:	f003 030f 	and.w	r3, r3, #15
 81024e8:	4a0f      	ldr	r2, [pc, #60]	; (8102528 <HAL_Init+0xb0>)
 81024ea:	5cd3      	ldrb	r3, [r2, r3]
 81024ec:	f003 031f 	and.w	r3, r3, #31
 81024f0:	687a      	ldr	r2, [r7, #4]
 81024f2:	fa22 f303 	lsr.w	r3, r2, r3
 81024f6:	4a0d      	ldr	r2, [pc, #52]	; (810252c <HAL_Init+0xb4>)
 81024f8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81024fa:	4b0c      	ldr	r3, [pc, #48]	; (810252c <HAL_Init+0xb4>)
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	4a0c      	ldr	r2, [pc, #48]	; (8102530 <HAL_Init+0xb8>)
 8102500:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102502:	2000      	movs	r0, #0
 8102504:	f000 f816 	bl	8102534 <HAL_InitTick>
 8102508:	4603      	mov	r3, r0
 810250a:	2b00      	cmp	r3, #0
 810250c:	d001      	beq.n	8102512 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810250e:	2301      	movs	r3, #1
 8102510:	e002      	b.n	8102518 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102512:	f7ff fbcb 	bl	8101cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102516:	2300      	movs	r3, #0
}
 8102518:	4618      	mov	r0, r3
 810251a:	3708      	adds	r7, #8
 810251c:	46bd      	mov	sp, r7
 810251e:	bd80      	pop	{r7, pc}
 8102520:	58024400 	.word	0x58024400
 8102524:	40024400 	.word	0x40024400
 8102528:	0810dff8 	.word	0x0810dff8
 810252c:	10000004 	.word	0x10000004
 8102530:	10000000 	.word	0x10000000

08102534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102534:	b580      	push	{r7, lr}
 8102536:	b082      	sub	sp, #8
 8102538:	af00      	add	r7, sp, #0
 810253a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810253c:	4b15      	ldr	r3, [pc, #84]	; (8102594 <HAL_InitTick+0x60>)
 810253e:	781b      	ldrb	r3, [r3, #0]
 8102540:	2b00      	cmp	r3, #0
 8102542:	d101      	bne.n	8102548 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102544:	2301      	movs	r3, #1
 8102546:	e021      	b.n	810258c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102548:	4b13      	ldr	r3, [pc, #76]	; (8102598 <HAL_InitTick+0x64>)
 810254a:	681a      	ldr	r2, [r3, #0]
 810254c:	4b11      	ldr	r3, [pc, #68]	; (8102594 <HAL_InitTick+0x60>)
 810254e:	781b      	ldrb	r3, [r3, #0]
 8102550:	4619      	mov	r1, r3
 8102552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102556:	fbb3 f3f1 	udiv	r3, r3, r1
 810255a:	fbb2 f3f3 	udiv	r3, r2, r3
 810255e:	4618      	mov	r0, r3
 8102560:	f000 f941 	bl	81027e6 <HAL_SYSTICK_Config>
 8102564:	4603      	mov	r3, r0
 8102566:	2b00      	cmp	r3, #0
 8102568:	d001      	beq.n	810256e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810256a:	2301      	movs	r3, #1
 810256c:	e00e      	b.n	810258c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	2b0f      	cmp	r3, #15
 8102572:	d80a      	bhi.n	810258a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102574:	2200      	movs	r2, #0
 8102576:	6879      	ldr	r1, [r7, #4]
 8102578:	f04f 30ff 	mov.w	r0, #4294967295
 810257c:	f000 f90b 	bl	8102796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102580:	4a06      	ldr	r2, [pc, #24]	; (810259c <HAL_InitTick+0x68>)
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102586:	2300      	movs	r3, #0
 8102588:	e000      	b.n	810258c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810258a:	2301      	movs	r3, #1
}
 810258c:	4618      	mov	r0, r3
 810258e:	3708      	adds	r7, #8
 8102590:	46bd      	mov	sp, r7
 8102592:	bd80      	pop	{r7, pc}
 8102594:	10000010 	.word	0x10000010
 8102598:	10000000 	.word	0x10000000
 810259c:	1000000c 	.word	0x1000000c

081025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81025a0:	b480      	push	{r7}
 81025a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81025a4:	4b06      	ldr	r3, [pc, #24]	; (81025c0 <HAL_IncTick+0x20>)
 81025a6:	781b      	ldrb	r3, [r3, #0]
 81025a8:	461a      	mov	r2, r3
 81025aa:	4b06      	ldr	r3, [pc, #24]	; (81025c4 <HAL_IncTick+0x24>)
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4413      	add	r3, r2
 81025b0:	4a04      	ldr	r2, [pc, #16]	; (81025c4 <HAL_IncTick+0x24>)
 81025b2:	6013      	str	r3, [r2, #0]
}
 81025b4:	bf00      	nop
 81025b6:	46bd      	mov	sp, r7
 81025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025bc:	4770      	bx	lr
 81025be:	bf00      	nop
 81025c0:	10000010 	.word	0x10000010
 81025c4:	10000524 	.word	0x10000524

081025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81025c8:	b480      	push	{r7}
 81025ca:	af00      	add	r7, sp, #0
  return uwTick;
 81025cc:	4b03      	ldr	r3, [pc, #12]	; (81025dc <HAL_GetTick+0x14>)
 81025ce:	681b      	ldr	r3, [r3, #0]
}
 81025d0:	4618      	mov	r0, r3
 81025d2:	46bd      	mov	sp, r7
 81025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d8:	4770      	bx	lr
 81025da:	bf00      	nop
 81025dc:	10000524 	.word	0x10000524

081025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81025e0:	b480      	push	{r7}
 81025e2:	b085      	sub	sp, #20
 81025e4:	af00      	add	r7, sp, #0
 81025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	f003 0307 	and.w	r3, r3, #7
 81025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81025f0:	4b0c      	ldr	r3, [pc, #48]	; (8102624 <__NVIC_SetPriorityGrouping+0x44>)
 81025f2:	68db      	ldr	r3, [r3, #12]
 81025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81025f6:	68ba      	ldr	r2, [r7, #8]
 81025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81025fc:	4013      	ands	r3, r2
 81025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102600:	68fb      	ldr	r3, [r7, #12]
 8102602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102604:	68bb      	ldr	r3, [r7, #8]
 8102606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102612:	4a04      	ldr	r2, [pc, #16]	; (8102624 <__NVIC_SetPriorityGrouping+0x44>)
 8102614:	68bb      	ldr	r3, [r7, #8]
 8102616:	60d3      	str	r3, [r2, #12]
}
 8102618:	bf00      	nop
 810261a:	3714      	adds	r7, #20
 810261c:	46bd      	mov	sp, r7
 810261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102622:	4770      	bx	lr
 8102624:	e000ed00 	.word	0xe000ed00

08102628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102628:	b480      	push	{r7}
 810262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810262c:	4b04      	ldr	r3, [pc, #16]	; (8102640 <__NVIC_GetPriorityGrouping+0x18>)
 810262e:	68db      	ldr	r3, [r3, #12]
 8102630:	0a1b      	lsrs	r3, r3, #8
 8102632:	f003 0307 	and.w	r3, r3, #7
}
 8102636:	4618      	mov	r0, r3
 8102638:	46bd      	mov	sp, r7
 810263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810263e:	4770      	bx	lr
 8102640:	e000ed00 	.word	0xe000ed00

08102644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102644:	b480      	push	{r7}
 8102646:	b083      	sub	sp, #12
 8102648:	af00      	add	r7, sp, #0
 810264a:	4603      	mov	r3, r0
 810264c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810264e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102652:	2b00      	cmp	r3, #0
 8102654:	db0b      	blt.n	810266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102656:	88fb      	ldrh	r3, [r7, #6]
 8102658:	f003 021f 	and.w	r2, r3, #31
 810265c:	4907      	ldr	r1, [pc, #28]	; (810267c <__NVIC_EnableIRQ+0x38>)
 810265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102662:	095b      	lsrs	r3, r3, #5
 8102664:	2001      	movs	r0, #1
 8102666:	fa00 f202 	lsl.w	r2, r0, r2
 810266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810266e:	bf00      	nop
 8102670:	370c      	adds	r7, #12
 8102672:	46bd      	mov	sp, r7
 8102674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102678:	4770      	bx	lr
 810267a:	bf00      	nop
 810267c:	e000e100 	.word	0xe000e100

08102680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102680:	b480      	push	{r7}
 8102682:	b083      	sub	sp, #12
 8102684:	af00      	add	r7, sp, #0
 8102686:	4603      	mov	r3, r0
 8102688:	6039      	str	r1, [r7, #0]
 810268a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102690:	2b00      	cmp	r3, #0
 8102692:	db0a      	blt.n	81026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102694:	683b      	ldr	r3, [r7, #0]
 8102696:	b2da      	uxtb	r2, r3
 8102698:	490c      	ldr	r1, [pc, #48]	; (81026cc <__NVIC_SetPriority+0x4c>)
 810269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810269e:	0112      	lsls	r2, r2, #4
 81026a0:	b2d2      	uxtb	r2, r2
 81026a2:	440b      	add	r3, r1
 81026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81026a8:	e00a      	b.n	81026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81026aa:	683b      	ldr	r3, [r7, #0]
 81026ac:	b2da      	uxtb	r2, r3
 81026ae:	4908      	ldr	r1, [pc, #32]	; (81026d0 <__NVIC_SetPriority+0x50>)
 81026b0:	88fb      	ldrh	r3, [r7, #6]
 81026b2:	f003 030f 	and.w	r3, r3, #15
 81026b6:	3b04      	subs	r3, #4
 81026b8:	0112      	lsls	r2, r2, #4
 81026ba:	b2d2      	uxtb	r2, r2
 81026bc:	440b      	add	r3, r1
 81026be:	761a      	strb	r2, [r3, #24]
}
 81026c0:	bf00      	nop
 81026c2:	370c      	adds	r7, #12
 81026c4:	46bd      	mov	sp, r7
 81026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026ca:	4770      	bx	lr
 81026cc:	e000e100 	.word	0xe000e100
 81026d0:	e000ed00 	.word	0xe000ed00

081026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81026d4:	b480      	push	{r7}
 81026d6:	b089      	sub	sp, #36	; 0x24
 81026d8:	af00      	add	r7, sp, #0
 81026da:	60f8      	str	r0, [r7, #12]
 81026dc:	60b9      	str	r1, [r7, #8]
 81026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81026e0:	68fb      	ldr	r3, [r7, #12]
 81026e2:	f003 0307 	and.w	r3, r3, #7
 81026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81026e8:	69fb      	ldr	r3, [r7, #28]
 81026ea:	f1c3 0307 	rsb	r3, r3, #7
 81026ee:	2b04      	cmp	r3, #4
 81026f0:	bf28      	it	cs
 81026f2:	2304      	movcs	r3, #4
 81026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81026f6:	69fb      	ldr	r3, [r7, #28]
 81026f8:	3304      	adds	r3, #4
 81026fa:	2b06      	cmp	r3, #6
 81026fc:	d902      	bls.n	8102704 <NVIC_EncodePriority+0x30>
 81026fe:	69fb      	ldr	r3, [r7, #28]
 8102700:	3b03      	subs	r3, #3
 8102702:	e000      	b.n	8102706 <NVIC_EncodePriority+0x32>
 8102704:	2300      	movs	r3, #0
 8102706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102708:	f04f 32ff 	mov.w	r2, #4294967295
 810270c:	69bb      	ldr	r3, [r7, #24]
 810270e:	fa02 f303 	lsl.w	r3, r2, r3
 8102712:	43da      	mvns	r2, r3
 8102714:	68bb      	ldr	r3, [r7, #8]
 8102716:	401a      	ands	r2, r3
 8102718:	697b      	ldr	r3, [r7, #20]
 810271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810271c:	f04f 31ff 	mov.w	r1, #4294967295
 8102720:	697b      	ldr	r3, [r7, #20]
 8102722:	fa01 f303 	lsl.w	r3, r1, r3
 8102726:	43d9      	mvns	r1, r3
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810272c:	4313      	orrs	r3, r2
         );
}
 810272e:	4618      	mov	r0, r3
 8102730:	3724      	adds	r7, #36	; 0x24
 8102732:	46bd      	mov	sp, r7
 8102734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102738:	4770      	bx	lr
	...

0810273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810273c:	b580      	push	{r7, lr}
 810273e:	b082      	sub	sp, #8
 8102740:	af00      	add	r7, sp, #0
 8102742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	3b01      	subs	r3, #1
 8102748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810274c:	d301      	bcc.n	8102752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810274e:	2301      	movs	r3, #1
 8102750:	e00f      	b.n	8102772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102752:	4a0a      	ldr	r2, [pc, #40]	; (810277c <SysTick_Config+0x40>)
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	3b01      	subs	r3, #1
 8102758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810275a:	210f      	movs	r1, #15
 810275c:	f04f 30ff 	mov.w	r0, #4294967295
 8102760:	f7ff ff8e 	bl	8102680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102764:	4b05      	ldr	r3, [pc, #20]	; (810277c <SysTick_Config+0x40>)
 8102766:	2200      	movs	r2, #0
 8102768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810276a:	4b04      	ldr	r3, [pc, #16]	; (810277c <SysTick_Config+0x40>)
 810276c:	2207      	movs	r2, #7
 810276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102770:	2300      	movs	r3, #0
}
 8102772:	4618      	mov	r0, r3
 8102774:	3708      	adds	r7, #8
 8102776:	46bd      	mov	sp, r7
 8102778:	bd80      	pop	{r7, pc}
 810277a:	bf00      	nop
 810277c:	e000e010 	.word	0xe000e010

08102780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102780:	b580      	push	{r7, lr}
 8102782:	b082      	sub	sp, #8
 8102784:	af00      	add	r7, sp, #0
 8102786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102788:	6878      	ldr	r0, [r7, #4]
 810278a:	f7ff ff29 	bl	81025e0 <__NVIC_SetPriorityGrouping>
}
 810278e:	bf00      	nop
 8102790:	3708      	adds	r7, #8
 8102792:	46bd      	mov	sp, r7
 8102794:	bd80      	pop	{r7, pc}

08102796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102796:	b580      	push	{r7, lr}
 8102798:	b086      	sub	sp, #24
 810279a:	af00      	add	r7, sp, #0
 810279c:	4603      	mov	r3, r0
 810279e:	60b9      	str	r1, [r7, #8]
 81027a0:	607a      	str	r2, [r7, #4]
 81027a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81027a4:	f7ff ff40 	bl	8102628 <__NVIC_GetPriorityGrouping>
 81027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81027aa:	687a      	ldr	r2, [r7, #4]
 81027ac:	68b9      	ldr	r1, [r7, #8]
 81027ae:	6978      	ldr	r0, [r7, #20]
 81027b0:	f7ff ff90 	bl	81026d4 <NVIC_EncodePriority>
 81027b4:	4602      	mov	r2, r0
 81027b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81027ba:	4611      	mov	r1, r2
 81027bc:	4618      	mov	r0, r3
 81027be:	f7ff ff5f 	bl	8102680 <__NVIC_SetPriority>
}
 81027c2:	bf00      	nop
 81027c4:	3718      	adds	r7, #24
 81027c6:	46bd      	mov	sp, r7
 81027c8:	bd80      	pop	{r7, pc}

081027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81027ca:	b580      	push	{r7, lr}
 81027cc:	b082      	sub	sp, #8
 81027ce:	af00      	add	r7, sp, #0
 81027d0:	4603      	mov	r3, r0
 81027d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81027d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027d8:	4618      	mov	r0, r3
 81027da:	f7ff ff33 	bl	8102644 <__NVIC_EnableIRQ>
}
 81027de:	bf00      	nop
 81027e0:	3708      	adds	r7, #8
 81027e2:	46bd      	mov	sp, r7
 81027e4:	bd80      	pop	{r7, pc}

081027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81027e6:	b580      	push	{r7, lr}
 81027e8:	b082      	sub	sp, #8
 81027ea:	af00      	add	r7, sp, #0
 81027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81027ee:	6878      	ldr	r0, [r7, #4]
 81027f0:	f7ff ffa4 	bl	810273c <SysTick_Config>
 81027f4:	4603      	mov	r3, r0
}
 81027f6:	4618      	mov	r0, r3
 81027f8:	3708      	adds	r7, #8
 81027fa:	46bd      	mov	sp, r7
 81027fc:	bd80      	pop	{r7, pc}
	...

08102800 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102800:	b480      	push	{r7}
 8102802:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102804:	4b07      	ldr	r3, [pc, #28]	; (8102824 <HAL_GetCurrentCPUID+0x24>)
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	091b      	lsrs	r3, r3, #4
 810280a:	f003 030f 	and.w	r3, r3, #15
 810280e:	2b07      	cmp	r3, #7
 8102810:	d101      	bne.n	8102816 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102812:	2303      	movs	r3, #3
 8102814:	e000      	b.n	8102818 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102816:	2301      	movs	r3, #1
  }
}
 8102818:	4618      	mov	r0, r3
 810281a:	46bd      	mov	sp, r7
 810281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102820:	4770      	bx	lr
 8102822:	bf00      	nop
 8102824:	e000ed00 	.word	0xe000ed00

08102828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8102828:	b580      	push	{r7, lr}
 810282a:	b086      	sub	sp, #24
 810282c:	af00      	add	r7, sp, #0
 810282e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102830:	f7ff feca 	bl	81025c8 <HAL_GetTick>
 8102834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102836:	687b      	ldr	r3, [r7, #4]
 8102838:	2b00      	cmp	r3, #0
 810283a:	d101      	bne.n	8102840 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 810283c:	2301      	movs	r3, #1
 810283e:	e314      	b.n	8102e6a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	681b      	ldr	r3, [r3, #0]
 8102844:	4a66      	ldr	r2, [pc, #408]	; (81029e0 <HAL_DMA_Init+0x1b8>)
 8102846:	4293      	cmp	r3, r2
 8102848:	d04a      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	681b      	ldr	r3, [r3, #0]
 810284e:	4a65      	ldr	r2, [pc, #404]	; (81029e4 <HAL_DMA_Init+0x1bc>)
 8102850:	4293      	cmp	r3, r2
 8102852:	d045      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	4a63      	ldr	r2, [pc, #396]	; (81029e8 <HAL_DMA_Init+0x1c0>)
 810285a:	4293      	cmp	r3, r2
 810285c:	d040      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	681b      	ldr	r3, [r3, #0]
 8102862:	4a62      	ldr	r2, [pc, #392]	; (81029ec <HAL_DMA_Init+0x1c4>)
 8102864:	4293      	cmp	r3, r2
 8102866:	d03b      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	4a60      	ldr	r2, [pc, #384]	; (81029f0 <HAL_DMA_Init+0x1c8>)
 810286e:	4293      	cmp	r3, r2
 8102870:	d036      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	4a5f      	ldr	r2, [pc, #380]	; (81029f4 <HAL_DMA_Init+0x1cc>)
 8102878:	4293      	cmp	r3, r2
 810287a:	d031      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	4a5d      	ldr	r2, [pc, #372]	; (81029f8 <HAL_DMA_Init+0x1d0>)
 8102882:	4293      	cmp	r3, r2
 8102884:	d02c      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	4a5c      	ldr	r2, [pc, #368]	; (81029fc <HAL_DMA_Init+0x1d4>)
 810288c:	4293      	cmp	r3, r2
 810288e:	d027      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	4a5a      	ldr	r2, [pc, #360]	; (8102a00 <HAL_DMA_Init+0x1d8>)
 8102896:	4293      	cmp	r3, r2
 8102898:	d022      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	4a59      	ldr	r2, [pc, #356]	; (8102a04 <HAL_DMA_Init+0x1dc>)
 81028a0:	4293      	cmp	r3, r2
 81028a2:	d01d      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	4a57      	ldr	r2, [pc, #348]	; (8102a08 <HAL_DMA_Init+0x1e0>)
 81028aa:	4293      	cmp	r3, r2
 81028ac:	d018      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	681b      	ldr	r3, [r3, #0]
 81028b2:	4a56      	ldr	r2, [pc, #344]	; (8102a0c <HAL_DMA_Init+0x1e4>)
 81028b4:	4293      	cmp	r3, r2
 81028b6:	d013      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	4a54      	ldr	r2, [pc, #336]	; (8102a10 <HAL_DMA_Init+0x1e8>)
 81028be:	4293      	cmp	r3, r2
 81028c0:	d00e      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	4a53      	ldr	r2, [pc, #332]	; (8102a14 <HAL_DMA_Init+0x1ec>)
 81028c8:	4293      	cmp	r3, r2
 81028ca:	d009      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	4a51      	ldr	r2, [pc, #324]	; (8102a18 <HAL_DMA_Init+0x1f0>)
 81028d2:	4293      	cmp	r3, r2
 81028d4:	d004      	beq.n	81028e0 <HAL_DMA_Init+0xb8>
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	4a50      	ldr	r2, [pc, #320]	; (8102a1c <HAL_DMA_Init+0x1f4>)
 81028dc:	4293      	cmp	r3, r2
 81028de:	d101      	bne.n	81028e4 <HAL_DMA_Init+0xbc>
 81028e0:	2301      	movs	r3, #1
 81028e2:	e000      	b.n	81028e6 <HAL_DMA_Init+0xbe>
 81028e4:	2300      	movs	r3, #0
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	f000 813b 	beq.w	8102b62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	2202      	movs	r2, #2
 81028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	2200      	movs	r2, #0
 81028f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	4a37      	ldr	r2, [pc, #220]	; (81029e0 <HAL_DMA_Init+0x1b8>)
 8102902:	4293      	cmp	r3, r2
 8102904:	d04a      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	681b      	ldr	r3, [r3, #0]
 810290a:	4a36      	ldr	r2, [pc, #216]	; (81029e4 <HAL_DMA_Init+0x1bc>)
 810290c:	4293      	cmp	r3, r2
 810290e:	d045      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	4a34      	ldr	r2, [pc, #208]	; (81029e8 <HAL_DMA_Init+0x1c0>)
 8102916:	4293      	cmp	r3, r2
 8102918:	d040      	beq.n	810299c <HAL_DMA_Init+0x174>
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	4a33      	ldr	r2, [pc, #204]	; (81029ec <HAL_DMA_Init+0x1c4>)
 8102920:	4293      	cmp	r3, r2
 8102922:	d03b      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	4a31      	ldr	r2, [pc, #196]	; (81029f0 <HAL_DMA_Init+0x1c8>)
 810292a:	4293      	cmp	r3, r2
 810292c:	d036      	beq.n	810299c <HAL_DMA_Init+0x174>
 810292e:	687b      	ldr	r3, [r7, #4]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	4a30      	ldr	r2, [pc, #192]	; (81029f4 <HAL_DMA_Init+0x1cc>)
 8102934:	4293      	cmp	r3, r2
 8102936:	d031      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	4a2e      	ldr	r2, [pc, #184]	; (81029f8 <HAL_DMA_Init+0x1d0>)
 810293e:	4293      	cmp	r3, r2
 8102940:	d02c      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	4a2d      	ldr	r2, [pc, #180]	; (81029fc <HAL_DMA_Init+0x1d4>)
 8102948:	4293      	cmp	r3, r2
 810294a:	d027      	beq.n	810299c <HAL_DMA_Init+0x174>
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	4a2b      	ldr	r2, [pc, #172]	; (8102a00 <HAL_DMA_Init+0x1d8>)
 8102952:	4293      	cmp	r3, r2
 8102954:	d022      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	681b      	ldr	r3, [r3, #0]
 810295a:	4a2a      	ldr	r2, [pc, #168]	; (8102a04 <HAL_DMA_Init+0x1dc>)
 810295c:	4293      	cmp	r3, r2
 810295e:	d01d      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	4a28      	ldr	r2, [pc, #160]	; (8102a08 <HAL_DMA_Init+0x1e0>)
 8102966:	4293      	cmp	r3, r2
 8102968:	d018      	beq.n	810299c <HAL_DMA_Init+0x174>
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	4a27      	ldr	r2, [pc, #156]	; (8102a0c <HAL_DMA_Init+0x1e4>)
 8102970:	4293      	cmp	r3, r2
 8102972:	d013      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	4a25      	ldr	r2, [pc, #148]	; (8102a10 <HAL_DMA_Init+0x1e8>)
 810297a:	4293      	cmp	r3, r2
 810297c:	d00e      	beq.n	810299c <HAL_DMA_Init+0x174>
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	681b      	ldr	r3, [r3, #0]
 8102982:	4a24      	ldr	r2, [pc, #144]	; (8102a14 <HAL_DMA_Init+0x1ec>)
 8102984:	4293      	cmp	r3, r2
 8102986:	d009      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	4a22      	ldr	r2, [pc, #136]	; (8102a18 <HAL_DMA_Init+0x1f0>)
 810298e:	4293      	cmp	r3, r2
 8102990:	d004      	beq.n	810299c <HAL_DMA_Init+0x174>
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	4a21      	ldr	r2, [pc, #132]	; (8102a1c <HAL_DMA_Init+0x1f4>)
 8102998:	4293      	cmp	r3, r2
 810299a:	d108      	bne.n	81029ae <HAL_DMA_Init+0x186>
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	681a      	ldr	r2, [r3, #0]
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	f022 0201 	bic.w	r2, r2, #1
 81029aa:	601a      	str	r2, [r3, #0]
 81029ac:	e007      	b.n	81029be <HAL_DMA_Init+0x196>
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	681a      	ldr	r2, [r3, #0]
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
 81029b8:	f022 0201 	bic.w	r2, r2, #1
 81029bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81029be:	e02f      	b.n	8102a20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81029c0:	f7ff fe02 	bl	81025c8 <HAL_GetTick>
 81029c4:	4602      	mov	r2, r0
 81029c6:	693b      	ldr	r3, [r7, #16]
 81029c8:	1ad3      	subs	r3, r2, r3
 81029ca:	2b05      	cmp	r3, #5
 81029cc:	d928      	bls.n	8102a20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	2220      	movs	r2, #32
 81029d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	2203      	movs	r2, #3
 81029d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81029dc:	2301      	movs	r3, #1
 81029de:	e244      	b.n	8102e6a <HAL_DMA_Init+0x642>
 81029e0:	40020010 	.word	0x40020010
 81029e4:	40020028 	.word	0x40020028
 81029e8:	40020040 	.word	0x40020040
 81029ec:	40020058 	.word	0x40020058
 81029f0:	40020070 	.word	0x40020070
 81029f4:	40020088 	.word	0x40020088
 81029f8:	400200a0 	.word	0x400200a0
 81029fc:	400200b8 	.word	0x400200b8
 8102a00:	40020410 	.word	0x40020410
 8102a04:	40020428 	.word	0x40020428
 8102a08:	40020440 	.word	0x40020440
 8102a0c:	40020458 	.word	0x40020458
 8102a10:	40020470 	.word	0x40020470
 8102a14:	40020488 	.word	0x40020488
 8102a18:	400204a0 	.word	0x400204a0
 8102a1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	f003 0301 	and.w	r3, r3, #1
 8102a2a:	2b00      	cmp	r3, #0
 8102a2c:	d1c8      	bne.n	81029c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102a36:	697a      	ldr	r2, [r7, #20]
 8102a38:	4b84      	ldr	r3, [pc, #528]	; (8102c4c <HAL_DMA_Init+0x424>)
 8102a3a:	4013      	ands	r3, r2
 8102a3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	691b      	ldr	r3, [r3, #16]
 8102a4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102a52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	699b      	ldr	r3, [r3, #24]
 8102a58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102a5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	6a1b      	ldr	r3, [r3, #32]
 8102a64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102a66:	697a      	ldr	r2, [r7, #20]
 8102a68:	4313      	orrs	r3, r2
 8102a6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102a70:	2b04      	cmp	r3, #4
 8102a72:	d107      	bne.n	8102a84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a7c:	4313      	orrs	r3, r2
 8102a7e:	697a      	ldr	r2, [r7, #20]
 8102a80:	4313      	orrs	r3, r2
 8102a82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102a84:	4b72      	ldr	r3, [pc, #456]	; (8102c50 <HAL_DMA_Init+0x428>)
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	0c1b      	lsrs	r3, r3, #16
 8102a8a:	041b      	lsls	r3, r3, #16
 8102a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102a90:	d328      	bcc.n	8102ae4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	685b      	ldr	r3, [r3, #4]
 8102a96:	2b28      	cmp	r3, #40	; 0x28
 8102a98:	d903      	bls.n	8102aa2 <HAL_DMA_Init+0x27a>
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	685b      	ldr	r3, [r3, #4]
 8102a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8102aa0:	d917      	bls.n	8102ad2 <HAL_DMA_Init+0x2aa>
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	685b      	ldr	r3, [r3, #4]
 8102aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8102aa8:	d903      	bls.n	8102ab2 <HAL_DMA_Init+0x28a>
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	685b      	ldr	r3, [r3, #4]
 8102aae:	2b42      	cmp	r3, #66	; 0x42
 8102ab0:	d90f      	bls.n	8102ad2 <HAL_DMA_Init+0x2aa>
 8102ab2:	687b      	ldr	r3, [r7, #4]
 8102ab4:	685b      	ldr	r3, [r3, #4]
 8102ab6:	2b46      	cmp	r3, #70	; 0x46
 8102ab8:	d903      	bls.n	8102ac2 <HAL_DMA_Init+0x29a>
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	685b      	ldr	r3, [r3, #4]
 8102abe:	2b48      	cmp	r3, #72	; 0x48
 8102ac0:	d907      	bls.n	8102ad2 <HAL_DMA_Init+0x2aa>
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	685b      	ldr	r3, [r3, #4]
 8102ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8102ac8:	d905      	bls.n	8102ad6 <HAL_DMA_Init+0x2ae>
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	685b      	ldr	r3, [r3, #4]
 8102ace:	2b52      	cmp	r3, #82	; 0x52
 8102ad0:	d801      	bhi.n	8102ad6 <HAL_DMA_Init+0x2ae>
 8102ad2:	2301      	movs	r3, #1
 8102ad4:	e000      	b.n	8102ad8 <HAL_DMA_Init+0x2b0>
 8102ad6:	2300      	movs	r3, #0
 8102ad8:	2b00      	cmp	r3, #0
 8102ada:	d003      	beq.n	8102ae4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102adc:	697b      	ldr	r3, [r7, #20]
 8102ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102ae2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	697a      	ldr	r2, [r7, #20]
 8102aea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	695b      	ldr	r3, [r3, #20]
 8102af2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102af4:	697b      	ldr	r3, [r7, #20]
 8102af6:	f023 0307 	bic.w	r3, r3, #7
 8102afa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b00:	697a      	ldr	r2, [r7, #20]
 8102b02:	4313      	orrs	r3, r2
 8102b04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b0a:	2b04      	cmp	r3, #4
 8102b0c:	d117      	bne.n	8102b3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b12:	697a      	ldr	r2, [r7, #20]
 8102b14:	4313      	orrs	r3, r2
 8102b16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b1c:	2b00      	cmp	r3, #0
 8102b1e:	d00e      	beq.n	8102b3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102b20:	6878      	ldr	r0, [r7, #4]
 8102b22:	f001 f9b7 	bl	8103e94 <DMA_CheckFifoParam>
 8102b26:	4603      	mov	r3, r0
 8102b28:	2b00      	cmp	r3, #0
 8102b2a:	d008      	beq.n	8102b3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102b2c:	687b      	ldr	r3, [r7, #4]
 8102b2e:	2240      	movs	r2, #64	; 0x40
 8102b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	2201      	movs	r2, #1
 8102b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102b3a:	2301      	movs	r3, #1
 8102b3c:	e195      	b.n	8102e6a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102b3e:	687b      	ldr	r3, [r7, #4]
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	697a      	ldr	r2, [r7, #20]
 8102b44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102b46:	6878      	ldr	r0, [r7, #4]
 8102b48:	f001 f8f2 	bl	8103d30 <DMA_CalcBaseAndBitshift>
 8102b4c:	4603      	mov	r3, r0
 8102b4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b54:	f003 031f 	and.w	r3, r3, #31
 8102b58:	223f      	movs	r2, #63	; 0x3f
 8102b5a:	409a      	lsls	r2, r3
 8102b5c:	68bb      	ldr	r3, [r7, #8]
 8102b5e:	609a      	str	r2, [r3, #8]
 8102b60:	e0cb      	b.n	8102cfa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	4a3b      	ldr	r2, [pc, #236]	; (8102c54 <HAL_DMA_Init+0x42c>)
 8102b68:	4293      	cmp	r3, r2
 8102b6a:	d022      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	4a39      	ldr	r2, [pc, #228]	; (8102c58 <HAL_DMA_Init+0x430>)
 8102b72:	4293      	cmp	r3, r2
 8102b74:	d01d      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	681b      	ldr	r3, [r3, #0]
 8102b7a:	4a38      	ldr	r2, [pc, #224]	; (8102c5c <HAL_DMA_Init+0x434>)
 8102b7c:	4293      	cmp	r3, r2
 8102b7e:	d018      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	4a36      	ldr	r2, [pc, #216]	; (8102c60 <HAL_DMA_Init+0x438>)
 8102b86:	4293      	cmp	r3, r2
 8102b88:	d013      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	4a35      	ldr	r2, [pc, #212]	; (8102c64 <HAL_DMA_Init+0x43c>)
 8102b90:	4293      	cmp	r3, r2
 8102b92:	d00e      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	4a33      	ldr	r2, [pc, #204]	; (8102c68 <HAL_DMA_Init+0x440>)
 8102b9a:	4293      	cmp	r3, r2
 8102b9c:	d009      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	4a32      	ldr	r2, [pc, #200]	; (8102c6c <HAL_DMA_Init+0x444>)
 8102ba4:	4293      	cmp	r3, r2
 8102ba6:	d004      	beq.n	8102bb2 <HAL_DMA_Init+0x38a>
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	4a30      	ldr	r2, [pc, #192]	; (8102c70 <HAL_DMA_Init+0x448>)
 8102bae:	4293      	cmp	r3, r2
 8102bb0:	d101      	bne.n	8102bb6 <HAL_DMA_Init+0x38e>
 8102bb2:	2301      	movs	r3, #1
 8102bb4:	e000      	b.n	8102bb8 <HAL_DMA_Init+0x390>
 8102bb6:	2300      	movs	r3, #0
 8102bb8:	2b00      	cmp	r3, #0
 8102bba:	f000 8095 	beq.w	8102ce8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	4a24      	ldr	r2, [pc, #144]	; (8102c54 <HAL_DMA_Init+0x42c>)
 8102bc4:	4293      	cmp	r3, r2
 8102bc6:	d021      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	4a22      	ldr	r2, [pc, #136]	; (8102c58 <HAL_DMA_Init+0x430>)
 8102bce:	4293      	cmp	r3, r2
 8102bd0:	d01c      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	4a21      	ldr	r2, [pc, #132]	; (8102c5c <HAL_DMA_Init+0x434>)
 8102bd8:	4293      	cmp	r3, r2
 8102bda:	d017      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	4a1f      	ldr	r2, [pc, #124]	; (8102c60 <HAL_DMA_Init+0x438>)
 8102be2:	4293      	cmp	r3, r2
 8102be4:	d012      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	4a1e      	ldr	r2, [pc, #120]	; (8102c64 <HAL_DMA_Init+0x43c>)
 8102bec:	4293      	cmp	r3, r2
 8102bee:	d00d      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	4a1c      	ldr	r2, [pc, #112]	; (8102c68 <HAL_DMA_Init+0x440>)
 8102bf6:	4293      	cmp	r3, r2
 8102bf8:	d008      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4a1b      	ldr	r2, [pc, #108]	; (8102c6c <HAL_DMA_Init+0x444>)
 8102c00:	4293      	cmp	r3, r2
 8102c02:	d003      	beq.n	8102c0c <HAL_DMA_Init+0x3e4>
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	4a19      	ldr	r2, [pc, #100]	; (8102c70 <HAL_DMA_Init+0x448>)
 8102c0a:	4293      	cmp	r3, r2
 8102c0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	2202      	movs	r2, #2
 8102c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	2200      	movs	r2, #0
 8102c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102c26:	697b      	ldr	r3, [r7, #20]
 8102c28:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102c2c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102c30:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	689b      	ldr	r3, [r3, #8]
 8102c36:	2b40      	cmp	r3, #64	; 0x40
 8102c38:	d01c      	beq.n	8102c74 <HAL_DMA_Init+0x44c>
 8102c3a:	687b      	ldr	r3, [r7, #4]
 8102c3c:	689b      	ldr	r3, [r3, #8]
 8102c3e:	2b80      	cmp	r3, #128	; 0x80
 8102c40:	d102      	bne.n	8102c48 <HAL_DMA_Init+0x420>
 8102c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102c46:	e016      	b.n	8102c76 <HAL_DMA_Init+0x44e>
 8102c48:	2300      	movs	r3, #0
 8102c4a:	e014      	b.n	8102c76 <HAL_DMA_Init+0x44e>
 8102c4c:	fe10803f 	.word	0xfe10803f
 8102c50:	5c001000 	.word	0x5c001000
 8102c54:	58025408 	.word	0x58025408
 8102c58:	5802541c 	.word	0x5802541c
 8102c5c:	58025430 	.word	0x58025430
 8102c60:	58025444 	.word	0x58025444
 8102c64:	58025458 	.word	0x58025458
 8102c68:	5802546c 	.word	0x5802546c
 8102c6c:	58025480 	.word	0x58025480
 8102c70:	58025494 	.word	0x58025494
 8102c74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102c76:	687a      	ldr	r2, [r7, #4]
 8102c78:	68d2      	ldr	r2, [r2, #12]
 8102c7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	691b      	ldr	r3, [r3, #16]
 8102c82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	695b      	ldr	r3, [r3, #20]
 8102c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	699b      	ldr	r3, [r3, #24]
 8102c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	69db      	ldr	r3, [r3, #28]
 8102c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	6a1b      	ldr	r3, [r3, #32]
 8102ca2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102ca4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102ca6:	697a      	ldr	r2, [r7, #20]
 8102ca8:	4313      	orrs	r3, r2
 8102caa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	697a      	ldr	r2, [r7, #20]
 8102cb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	461a      	mov	r2, r3
 8102cba:	4b6e      	ldr	r3, [pc, #440]	; (8102e74 <HAL_DMA_Init+0x64c>)
 8102cbc:	4413      	add	r3, r2
 8102cbe:	4a6e      	ldr	r2, [pc, #440]	; (8102e78 <HAL_DMA_Init+0x650>)
 8102cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8102cc4:	091b      	lsrs	r3, r3, #4
 8102cc6:	009a      	lsls	r2, r3, #2
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102ccc:	6878      	ldr	r0, [r7, #4]
 8102cce:	f001 f82f 	bl	8103d30 <DMA_CalcBaseAndBitshift>
 8102cd2:	4603      	mov	r3, r0
 8102cd4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102cda:	f003 031f 	and.w	r3, r3, #31
 8102cde:	2201      	movs	r2, #1
 8102ce0:	409a      	lsls	r2, r3
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	605a      	str	r2, [r3, #4]
 8102ce6:	e008      	b.n	8102cfa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	2240      	movs	r2, #64	; 0x40
 8102cec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	2203      	movs	r2, #3
 8102cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102cf6:	2301      	movs	r3, #1
 8102cf8:	e0b7      	b.n	8102e6a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	4a5f      	ldr	r2, [pc, #380]	; (8102e7c <HAL_DMA_Init+0x654>)
 8102d00:	4293      	cmp	r3, r2
 8102d02:	d072      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a5d      	ldr	r2, [pc, #372]	; (8102e80 <HAL_DMA_Init+0x658>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d06d      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a5c      	ldr	r2, [pc, #368]	; (8102e84 <HAL_DMA_Init+0x65c>)
 8102d14:	4293      	cmp	r3, r2
 8102d16:	d068      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4a5a      	ldr	r2, [pc, #360]	; (8102e88 <HAL_DMA_Init+0x660>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d063      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a59      	ldr	r2, [pc, #356]	; (8102e8c <HAL_DMA_Init+0x664>)
 8102d28:	4293      	cmp	r3, r2
 8102d2a:	d05e      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	4a57      	ldr	r2, [pc, #348]	; (8102e90 <HAL_DMA_Init+0x668>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d059      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a56      	ldr	r2, [pc, #344]	; (8102e94 <HAL_DMA_Init+0x66c>)
 8102d3c:	4293      	cmp	r3, r2
 8102d3e:	d054      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	4a54      	ldr	r2, [pc, #336]	; (8102e98 <HAL_DMA_Init+0x670>)
 8102d46:	4293      	cmp	r3, r2
 8102d48:	d04f      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	4a53      	ldr	r2, [pc, #332]	; (8102e9c <HAL_DMA_Init+0x674>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d04a      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a51      	ldr	r2, [pc, #324]	; (8102ea0 <HAL_DMA_Init+0x678>)
 8102d5a:	4293      	cmp	r3, r2
 8102d5c:	d045      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a50      	ldr	r2, [pc, #320]	; (8102ea4 <HAL_DMA_Init+0x67c>)
 8102d64:	4293      	cmp	r3, r2
 8102d66:	d040      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	4a4e      	ldr	r2, [pc, #312]	; (8102ea8 <HAL_DMA_Init+0x680>)
 8102d6e:	4293      	cmp	r3, r2
 8102d70:	d03b      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a4d      	ldr	r2, [pc, #308]	; (8102eac <HAL_DMA_Init+0x684>)
 8102d78:	4293      	cmp	r3, r2
 8102d7a:	d036      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a4b      	ldr	r2, [pc, #300]	; (8102eb0 <HAL_DMA_Init+0x688>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d031      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a4a      	ldr	r2, [pc, #296]	; (8102eb4 <HAL_DMA_Init+0x68c>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d02c      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a48      	ldr	r2, [pc, #288]	; (8102eb8 <HAL_DMA_Init+0x690>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d027      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a47      	ldr	r2, [pc, #284]	; (8102ebc <HAL_DMA_Init+0x694>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d022      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a45      	ldr	r2, [pc, #276]	; (8102ec0 <HAL_DMA_Init+0x698>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d01d      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a44      	ldr	r2, [pc, #272]	; (8102ec4 <HAL_DMA_Init+0x69c>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d018      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a42      	ldr	r2, [pc, #264]	; (8102ec8 <HAL_DMA_Init+0x6a0>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d013      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a41      	ldr	r2, [pc, #260]	; (8102ecc <HAL_DMA_Init+0x6a4>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d00e      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a3f      	ldr	r2, [pc, #252]	; (8102ed0 <HAL_DMA_Init+0x6a8>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d009      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a3e      	ldr	r2, [pc, #248]	; (8102ed4 <HAL_DMA_Init+0x6ac>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d004      	beq.n	8102dea <HAL_DMA_Init+0x5c2>
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a3c      	ldr	r2, [pc, #240]	; (8102ed8 <HAL_DMA_Init+0x6b0>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d101      	bne.n	8102dee <HAL_DMA_Init+0x5c6>
 8102dea:	2301      	movs	r3, #1
 8102dec:	e000      	b.n	8102df0 <HAL_DMA_Init+0x5c8>
 8102dee:	2300      	movs	r3, #0
 8102df0:	2b00      	cmp	r3, #0
 8102df2:	d032      	beq.n	8102e5a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102df4:	6878      	ldr	r0, [r7, #4]
 8102df6:	f001 f8c9 	bl	8103f8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	689b      	ldr	r3, [r3, #8]
 8102dfe:	2b80      	cmp	r3, #128	; 0x80
 8102e00:	d102      	bne.n	8102e08 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	2200      	movs	r2, #0
 8102e06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	685a      	ldr	r2, [r3, #4]
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e10:	b2d2      	uxtb	r2, r2
 8102e12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102e18:	687a      	ldr	r2, [r7, #4]
 8102e1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102e1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	685b      	ldr	r3, [r3, #4]
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d010      	beq.n	8102e48 <HAL_DMA_Init+0x620>
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	685b      	ldr	r3, [r3, #4]
 8102e2a:	2b08      	cmp	r3, #8
 8102e2c:	d80c      	bhi.n	8102e48 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102e2e:	6878      	ldr	r0, [r7, #4]
 8102e30:	f001 f946 	bl	81040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e38:	2200      	movs	r2, #0
 8102e3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102e40:	687a      	ldr	r2, [r7, #4]
 8102e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102e44:	605a      	str	r2, [r3, #4]
 8102e46:	e008      	b.n	8102e5a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	2200      	movs	r2, #0
 8102e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	2200      	movs	r2, #0
 8102e52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	2200      	movs	r2, #0
 8102e58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	2200      	movs	r2, #0
 8102e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	2201      	movs	r2, #1
 8102e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102e68:	2300      	movs	r3, #0
}
 8102e6a:	4618      	mov	r0, r3
 8102e6c:	3718      	adds	r7, #24
 8102e6e:	46bd      	mov	sp, r7
 8102e70:	bd80      	pop	{r7, pc}
 8102e72:	bf00      	nop
 8102e74:	a7fdabf8 	.word	0xa7fdabf8
 8102e78:	cccccccd 	.word	0xcccccccd
 8102e7c:	40020010 	.word	0x40020010
 8102e80:	40020028 	.word	0x40020028
 8102e84:	40020040 	.word	0x40020040
 8102e88:	40020058 	.word	0x40020058
 8102e8c:	40020070 	.word	0x40020070
 8102e90:	40020088 	.word	0x40020088
 8102e94:	400200a0 	.word	0x400200a0
 8102e98:	400200b8 	.word	0x400200b8
 8102e9c:	40020410 	.word	0x40020410
 8102ea0:	40020428 	.word	0x40020428
 8102ea4:	40020440 	.word	0x40020440
 8102ea8:	40020458 	.word	0x40020458
 8102eac:	40020470 	.word	0x40020470
 8102eb0:	40020488 	.word	0x40020488
 8102eb4:	400204a0 	.word	0x400204a0
 8102eb8:	400204b8 	.word	0x400204b8
 8102ebc:	58025408 	.word	0x58025408
 8102ec0:	5802541c 	.word	0x5802541c
 8102ec4:	58025430 	.word	0x58025430
 8102ec8:	58025444 	.word	0x58025444
 8102ecc:	58025458 	.word	0x58025458
 8102ed0:	5802546c 	.word	0x5802546c
 8102ed4:	58025480 	.word	0x58025480
 8102ed8:	58025494 	.word	0x58025494

08102edc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102edc:	b580      	push	{r7, lr}
 8102ede:	b08a      	sub	sp, #40	; 0x28
 8102ee0:	af00      	add	r7, sp, #0
 8102ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102ee4:	2300      	movs	r3, #0
 8102ee6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102ee8:	4b67      	ldr	r3, [pc, #412]	; (8103088 <HAL_DMA_IRQHandler+0x1ac>)
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a67      	ldr	r2, [pc, #412]	; (810308c <HAL_DMA_IRQHandler+0x1b0>)
 8102eee:	fba2 2303 	umull	r2, r3, r2, r3
 8102ef2:	0a9b      	lsrs	r3, r3, #10
 8102ef4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102efa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f00:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8102f02:	6a3b      	ldr	r3, [r7, #32]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102f08:	69fb      	ldr	r3, [r7, #28]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	4a5f      	ldr	r2, [pc, #380]	; (8103090 <HAL_DMA_IRQHandler+0x1b4>)
 8102f14:	4293      	cmp	r3, r2
 8102f16:	d04a      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	4a5d      	ldr	r2, [pc, #372]	; (8103094 <HAL_DMA_IRQHandler+0x1b8>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d045      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4a5c      	ldr	r2, [pc, #368]	; (8103098 <HAL_DMA_IRQHandler+0x1bc>)
 8102f28:	4293      	cmp	r3, r2
 8102f2a:	d040      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4a5a      	ldr	r2, [pc, #360]	; (810309c <HAL_DMA_IRQHandler+0x1c0>)
 8102f32:	4293      	cmp	r3, r2
 8102f34:	d03b      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	4a59      	ldr	r2, [pc, #356]	; (81030a0 <HAL_DMA_IRQHandler+0x1c4>)
 8102f3c:	4293      	cmp	r3, r2
 8102f3e:	d036      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	4a57      	ldr	r2, [pc, #348]	; (81030a4 <HAL_DMA_IRQHandler+0x1c8>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d031      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	4a56      	ldr	r2, [pc, #344]	; (81030a8 <HAL_DMA_IRQHandler+0x1cc>)
 8102f50:	4293      	cmp	r3, r2
 8102f52:	d02c      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a54      	ldr	r2, [pc, #336]	; (81030ac <HAL_DMA_IRQHandler+0x1d0>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d027      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4a53      	ldr	r2, [pc, #332]	; (81030b0 <HAL_DMA_IRQHandler+0x1d4>)
 8102f64:	4293      	cmp	r3, r2
 8102f66:	d022      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a51      	ldr	r2, [pc, #324]	; (81030b4 <HAL_DMA_IRQHandler+0x1d8>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d01d      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4a50      	ldr	r2, [pc, #320]	; (81030b8 <HAL_DMA_IRQHandler+0x1dc>)
 8102f78:	4293      	cmp	r3, r2
 8102f7a:	d018      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4a4e      	ldr	r2, [pc, #312]	; (81030bc <HAL_DMA_IRQHandler+0x1e0>)
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d013      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	4a4d      	ldr	r2, [pc, #308]	; (81030c0 <HAL_DMA_IRQHandler+0x1e4>)
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d00e      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a4b      	ldr	r2, [pc, #300]	; (81030c4 <HAL_DMA_IRQHandler+0x1e8>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d009      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a4a      	ldr	r2, [pc, #296]	; (81030c8 <HAL_DMA_IRQHandler+0x1ec>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d004      	beq.n	8102fae <HAL_DMA_IRQHandler+0xd2>
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a48      	ldr	r2, [pc, #288]	; (81030cc <HAL_DMA_IRQHandler+0x1f0>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d101      	bne.n	8102fb2 <HAL_DMA_IRQHandler+0xd6>
 8102fae:	2301      	movs	r3, #1
 8102fb0:	e000      	b.n	8102fb4 <HAL_DMA_IRQHandler+0xd8>
 8102fb2:	2300      	movs	r3, #0
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	f000 842b 	beq.w	8103810 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102fbe:	f003 031f 	and.w	r3, r3, #31
 8102fc2:	2208      	movs	r2, #8
 8102fc4:	409a      	lsls	r2, r3
 8102fc6:	69bb      	ldr	r3, [r7, #24]
 8102fc8:	4013      	ands	r3, r2
 8102fca:	2b00      	cmp	r3, #0
 8102fcc:	f000 80a2 	beq.w	8103114 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	4a2e      	ldr	r2, [pc, #184]	; (8103090 <HAL_DMA_IRQHandler+0x1b4>)
 8102fd6:	4293      	cmp	r3, r2
 8102fd8:	d04a      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a2d      	ldr	r2, [pc, #180]	; (8103094 <HAL_DMA_IRQHandler+0x1b8>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d045      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a2b      	ldr	r2, [pc, #172]	; (8103098 <HAL_DMA_IRQHandler+0x1bc>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d040      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a2a      	ldr	r2, [pc, #168]	; (810309c <HAL_DMA_IRQHandler+0x1c0>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d03b      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a28      	ldr	r2, [pc, #160]	; (81030a0 <HAL_DMA_IRQHandler+0x1c4>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d036      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4a27      	ldr	r2, [pc, #156]	; (81030a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103008:	4293      	cmp	r3, r2
 810300a:	d031      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a25      	ldr	r2, [pc, #148]	; (81030a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d02c      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a24      	ldr	r2, [pc, #144]	; (81030ac <HAL_DMA_IRQHandler+0x1d0>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d027      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	4a22      	ldr	r2, [pc, #136]	; (81030b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d022      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a21      	ldr	r2, [pc, #132]	; (81030b4 <HAL_DMA_IRQHandler+0x1d8>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d01d      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a1f      	ldr	r2, [pc, #124]	; (81030b8 <HAL_DMA_IRQHandler+0x1dc>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d018      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	4a1e      	ldr	r2, [pc, #120]	; (81030bc <HAL_DMA_IRQHandler+0x1e0>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d013      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	4a1c      	ldr	r2, [pc, #112]	; (81030c0 <HAL_DMA_IRQHandler+0x1e4>)
 810304e:	4293      	cmp	r3, r2
 8103050:	d00e      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a1b      	ldr	r2, [pc, #108]	; (81030c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d009      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	4a19      	ldr	r2, [pc, #100]	; (81030c8 <HAL_DMA_IRQHandler+0x1ec>)
 8103062:	4293      	cmp	r3, r2
 8103064:	d004      	beq.n	8103070 <HAL_DMA_IRQHandler+0x194>
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a18      	ldr	r2, [pc, #96]	; (81030cc <HAL_DMA_IRQHandler+0x1f0>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d12f      	bne.n	81030d0 <HAL_DMA_IRQHandler+0x1f4>
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	f003 0304 	and.w	r3, r3, #4
 810307a:	2b00      	cmp	r3, #0
 810307c:	bf14      	ite	ne
 810307e:	2301      	movne	r3, #1
 8103080:	2300      	moveq	r3, #0
 8103082:	b2db      	uxtb	r3, r3
 8103084:	e02e      	b.n	81030e4 <HAL_DMA_IRQHandler+0x208>
 8103086:	bf00      	nop
 8103088:	10000000 	.word	0x10000000
 810308c:	1b4e81b5 	.word	0x1b4e81b5
 8103090:	40020010 	.word	0x40020010
 8103094:	40020028 	.word	0x40020028
 8103098:	40020040 	.word	0x40020040
 810309c:	40020058 	.word	0x40020058
 81030a0:	40020070 	.word	0x40020070
 81030a4:	40020088 	.word	0x40020088
 81030a8:	400200a0 	.word	0x400200a0
 81030ac:	400200b8 	.word	0x400200b8
 81030b0:	40020410 	.word	0x40020410
 81030b4:	40020428 	.word	0x40020428
 81030b8:	40020440 	.word	0x40020440
 81030bc:	40020458 	.word	0x40020458
 81030c0:	40020470 	.word	0x40020470
 81030c4:	40020488 	.word	0x40020488
 81030c8:	400204a0 	.word	0x400204a0
 81030cc:	400204b8 	.word	0x400204b8
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	f003 0308 	and.w	r3, r3, #8
 81030da:	2b00      	cmp	r3, #0
 81030dc:	bf14      	ite	ne
 81030de:	2301      	movne	r3, #1
 81030e0:	2300      	moveq	r3, #0
 81030e2:	b2db      	uxtb	r3, r3
 81030e4:	2b00      	cmp	r3, #0
 81030e6:	d015      	beq.n	8103114 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	681a      	ldr	r2, [r3, #0]
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	f022 0204 	bic.w	r2, r2, #4
 81030f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030fc:	f003 031f 	and.w	r3, r3, #31
 8103100:	2208      	movs	r2, #8
 8103102:	409a      	lsls	r2, r3
 8103104:	6a3b      	ldr	r3, [r7, #32]
 8103106:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810310c:	f043 0201 	orr.w	r2, r3, #1
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103118:	f003 031f 	and.w	r3, r3, #31
 810311c:	69ba      	ldr	r2, [r7, #24]
 810311e:	fa22 f303 	lsr.w	r3, r2, r3
 8103122:	f003 0301 	and.w	r3, r3, #1
 8103126:	2b00      	cmp	r3, #0
 8103128:	d06e      	beq.n	8103208 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	4a69      	ldr	r2, [pc, #420]	; (81032d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103130:	4293      	cmp	r3, r2
 8103132:	d04a      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	4a67      	ldr	r2, [pc, #412]	; (81032d8 <HAL_DMA_IRQHandler+0x3fc>)
 810313a:	4293      	cmp	r3, r2
 810313c:	d045      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4a66      	ldr	r2, [pc, #408]	; (81032dc <HAL_DMA_IRQHandler+0x400>)
 8103144:	4293      	cmp	r3, r2
 8103146:	d040      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a64      	ldr	r2, [pc, #400]	; (81032e0 <HAL_DMA_IRQHandler+0x404>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d03b      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	4a63      	ldr	r2, [pc, #396]	; (81032e4 <HAL_DMA_IRQHandler+0x408>)
 8103158:	4293      	cmp	r3, r2
 810315a:	d036      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	4a61      	ldr	r2, [pc, #388]	; (81032e8 <HAL_DMA_IRQHandler+0x40c>)
 8103162:	4293      	cmp	r3, r2
 8103164:	d031      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	4a60      	ldr	r2, [pc, #384]	; (81032ec <HAL_DMA_IRQHandler+0x410>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d02c      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a5e      	ldr	r2, [pc, #376]	; (81032f0 <HAL_DMA_IRQHandler+0x414>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d027      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a5d      	ldr	r2, [pc, #372]	; (81032f4 <HAL_DMA_IRQHandler+0x418>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d022      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	4a5b      	ldr	r2, [pc, #364]	; (81032f8 <HAL_DMA_IRQHandler+0x41c>)
 810318a:	4293      	cmp	r3, r2
 810318c:	d01d      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	4a5a      	ldr	r2, [pc, #360]	; (81032fc <HAL_DMA_IRQHandler+0x420>)
 8103194:	4293      	cmp	r3, r2
 8103196:	d018      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	4a58      	ldr	r2, [pc, #352]	; (8103300 <HAL_DMA_IRQHandler+0x424>)
 810319e:	4293      	cmp	r3, r2
 81031a0:	d013      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	4a57      	ldr	r2, [pc, #348]	; (8103304 <HAL_DMA_IRQHandler+0x428>)
 81031a8:	4293      	cmp	r3, r2
 81031aa:	d00e      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	4a55      	ldr	r2, [pc, #340]	; (8103308 <HAL_DMA_IRQHandler+0x42c>)
 81031b2:	4293      	cmp	r3, r2
 81031b4:	d009      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	4a54      	ldr	r2, [pc, #336]	; (810330c <HAL_DMA_IRQHandler+0x430>)
 81031bc:	4293      	cmp	r3, r2
 81031be:	d004      	beq.n	81031ca <HAL_DMA_IRQHandler+0x2ee>
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	4a52      	ldr	r2, [pc, #328]	; (8103310 <HAL_DMA_IRQHandler+0x434>)
 81031c6:	4293      	cmp	r3, r2
 81031c8:	d10a      	bne.n	81031e0 <HAL_DMA_IRQHandler+0x304>
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	695b      	ldr	r3, [r3, #20]
 81031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81031d4:	2b00      	cmp	r3, #0
 81031d6:	bf14      	ite	ne
 81031d8:	2301      	movne	r3, #1
 81031da:	2300      	moveq	r3, #0
 81031dc:	b2db      	uxtb	r3, r3
 81031de:	e003      	b.n	81031e8 <HAL_DMA_IRQHandler+0x30c>
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	2300      	movs	r3, #0
 81031e8:	2b00      	cmp	r3, #0
 81031ea:	d00d      	beq.n	8103208 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031f0:	f003 031f 	and.w	r3, r3, #31
 81031f4:	2201      	movs	r2, #1
 81031f6:	409a      	lsls	r2, r3
 81031f8:	6a3b      	ldr	r3, [r7, #32]
 81031fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103200:	f043 0202 	orr.w	r2, r3, #2
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810320c:	f003 031f 	and.w	r3, r3, #31
 8103210:	2204      	movs	r2, #4
 8103212:	409a      	lsls	r2, r3
 8103214:	69bb      	ldr	r3, [r7, #24]
 8103216:	4013      	ands	r3, r2
 8103218:	2b00      	cmp	r3, #0
 810321a:	f000 808f 	beq.w	810333c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	4a2c      	ldr	r2, [pc, #176]	; (81032d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103224:	4293      	cmp	r3, r2
 8103226:	d04a      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	4a2a      	ldr	r2, [pc, #168]	; (81032d8 <HAL_DMA_IRQHandler+0x3fc>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d045      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	4a29      	ldr	r2, [pc, #164]	; (81032dc <HAL_DMA_IRQHandler+0x400>)
 8103238:	4293      	cmp	r3, r2
 810323a:	d040      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4a27      	ldr	r2, [pc, #156]	; (81032e0 <HAL_DMA_IRQHandler+0x404>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d03b      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	4a26      	ldr	r2, [pc, #152]	; (81032e4 <HAL_DMA_IRQHandler+0x408>)
 810324c:	4293      	cmp	r3, r2
 810324e:	d036      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	4a24      	ldr	r2, [pc, #144]	; (81032e8 <HAL_DMA_IRQHandler+0x40c>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d031      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	4a23      	ldr	r2, [pc, #140]	; (81032ec <HAL_DMA_IRQHandler+0x410>)
 8103260:	4293      	cmp	r3, r2
 8103262:	d02c      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4a21      	ldr	r2, [pc, #132]	; (81032f0 <HAL_DMA_IRQHandler+0x414>)
 810326a:	4293      	cmp	r3, r2
 810326c:	d027      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	4a20      	ldr	r2, [pc, #128]	; (81032f4 <HAL_DMA_IRQHandler+0x418>)
 8103274:	4293      	cmp	r3, r2
 8103276:	d022      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	681b      	ldr	r3, [r3, #0]
 810327c:	4a1e      	ldr	r2, [pc, #120]	; (81032f8 <HAL_DMA_IRQHandler+0x41c>)
 810327e:	4293      	cmp	r3, r2
 8103280:	d01d      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4a1d      	ldr	r2, [pc, #116]	; (81032fc <HAL_DMA_IRQHandler+0x420>)
 8103288:	4293      	cmp	r3, r2
 810328a:	d018      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	4a1b      	ldr	r2, [pc, #108]	; (8103300 <HAL_DMA_IRQHandler+0x424>)
 8103292:	4293      	cmp	r3, r2
 8103294:	d013      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4a1a      	ldr	r2, [pc, #104]	; (8103304 <HAL_DMA_IRQHandler+0x428>)
 810329c:	4293      	cmp	r3, r2
 810329e:	d00e      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	4a18      	ldr	r2, [pc, #96]	; (8103308 <HAL_DMA_IRQHandler+0x42c>)
 81032a6:	4293      	cmp	r3, r2
 81032a8:	d009      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	4a17      	ldr	r2, [pc, #92]	; (810330c <HAL_DMA_IRQHandler+0x430>)
 81032b0:	4293      	cmp	r3, r2
 81032b2:	d004      	beq.n	81032be <HAL_DMA_IRQHandler+0x3e2>
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	4a15      	ldr	r2, [pc, #84]	; (8103310 <HAL_DMA_IRQHandler+0x434>)
 81032ba:	4293      	cmp	r3, r2
 81032bc:	d12a      	bne.n	8103314 <HAL_DMA_IRQHandler+0x438>
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	f003 0302 	and.w	r3, r3, #2
 81032c8:	2b00      	cmp	r3, #0
 81032ca:	bf14      	ite	ne
 81032cc:	2301      	movne	r3, #1
 81032ce:	2300      	moveq	r3, #0
 81032d0:	b2db      	uxtb	r3, r3
 81032d2:	e023      	b.n	810331c <HAL_DMA_IRQHandler+0x440>
 81032d4:	40020010 	.word	0x40020010
 81032d8:	40020028 	.word	0x40020028
 81032dc:	40020040 	.word	0x40020040
 81032e0:	40020058 	.word	0x40020058
 81032e4:	40020070 	.word	0x40020070
 81032e8:	40020088 	.word	0x40020088
 81032ec:	400200a0 	.word	0x400200a0
 81032f0:	400200b8 	.word	0x400200b8
 81032f4:	40020410 	.word	0x40020410
 81032f8:	40020428 	.word	0x40020428
 81032fc:	40020440 	.word	0x40020440
 8103300:	40020458 	.word	0x40020458
 8103304:	40020470 	.word	0x40020470
 8103308:	40020488 	.word	0x40020488
 810330c:	400204a0 	.word	0x400204a0
 8103310:	400204b8 	.word	0x400204b8
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	2300      	movs	r3, #0
 810331c:	2b00      	cmp	r3, #0
 810331e:	d00d      	beq.n	810333c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103324:	f003 031f 	and.w	r3, r3, #31
 8103328:	2204      	movs	r2, #4
 810332a:	409a      	lsls	r2, r3
 810332c:	6a3b      	ldr	r3, [r7, #32]
 810332e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103334:	f043 0204 	orr.w	r2, r3, #4
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103340:	f003 031f 	and.w	r3, r3, #31
 8103344:	2210      	movs	r2, #16
 8103346:	409a      	lsls	r2, r3
 8103348:	69bb      	ldr	r3, [r7, #24]
 810334a:	4013      	ands	r3, r2
 810334c:	2b00      	cmp	r3, #0
 810334e:	f000 80a6 	beq.w	810349e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	4a85      	ldr	r2, [pc, #532]	; (810356c <HAL_DMA_IRQHandler+0x690>)
 8103358:	4293      	cmp	r3, r2
 810335a:	d04a      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	681b      	ldr	r3, [r3, #0]
 8103360:	4a83      	ldr	r2, [pc, #524]	; (8103570 <HAL_DMA_IRQHandler+0x694>)
 8103362:	4293      	cmp	r3, r2
 8103364:	d045      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	4a82      	ldr	r2, [pc, #520]	; (8103574 <HAL_DMA_IRQHandler+0x698>)
 810336c:	4293      	cmp	r3, r2
 810336e:	d040      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	4a80      	ldr	r2, [pc, #512]	; (8103578 <HAL_DMA_IRQHandler+0x69c>)
 8103376:	4293      	cmp	r3, r2
 8103378:	d03b      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a7f      	ldr	r2, [pc, #508]	; (810357c <HAL_DMA_IRQHandler+0x6a0>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d036      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a7d      	ldr	r2, [pc, #500]	; (8103580 <HAL_DMA_IRQHandler+0x6a4>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d031      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a7c      	ldr	r2, [pc, #496]	; (8103584 <HAL_DMA_IRQHandler+0x6a8>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d02c      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	4a7a      	ldr	r2, [pc, #488]	; (8103588 <HAL_DMA_IRQHandler+0x6ac>)
 810339e:	4293      	cmp	r3, r2
 81033a0:	d027      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	4a79      	ldr	r2, [pc, #484]	; (810358c <HAL_DMA_IRQHandler+0x6b0>)
 81033a8:	4293      	cmp	r3, r2
 81033aa:	d022      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	4a77      	ldr	r2, [pc, #476]	; (8103590 <HAL_DMA_IRQHandler+0x6b4>)
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d01d      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4a76      	ldr	r2, [pc, #472]	; (8103594 <HAL_DMA_IRQHandler+0x6b8>)
 81033bc:	4293      	cmp	r3, r2
 81033be:	d018      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a74      	ldr	r2, [pc, #464]	; (8103598 <HAL_DMA_IRQHandler+0x6bc>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d013      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4a73      	ldr	r2, [pc, #460]	; (810359c <HAL_DMA_IRQHandler+0x6c0>)
 81033d0:	4293      	cmp	r3, r2
 81033d2:	d00e      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4a71      	ldr	r2, [pc, #452]	; (81035a0 <HAL_DMA_IRQHandler+0x6c4>)
 81033da:	4293      	cmp	r3, r2
 81033dc:	d009      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4a70      	ldr	r2, [pc, #448]	; (81035a4 <HAL_DMA_IRQHandler+0x6c8>)
 81033e4:	4293      	cmp	r3, r2
 81033e6:	d004      	beq.n	81033f2 <HAL_DMA_IRQHandler+0x516>
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	4a6e      	ldr	r2, [pc, #440]	; (81035a8 <HAL_DMA_IRQHandler+0x6cc>)
 81033ee:	4293      	cmp	r3, r2
 81033f0:	d10a      	bne.n	8103408 <HAL_DMA_IRQHandler+0x52c>
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	f003 0308 	and.w	r3, r3, #8
 81033fc:	2b00      	cmp	r3, #0
 81033fe:	bf14      	ite	ne
 8103400:	2301      	movne	r3, #1
 8103402:	2300      	moveq	r3, #0
 8103404:	b2db      	uxtb	r3, r3
 8103406:	e009      	b.n	810341c <HAL_DMA_IRQHandler+0x540>
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	f003 0304 	and.w	r3, r3, #4
 8103412:	2b00      	cmp	r3, #0
 8103414:	bf14      	ite	ne
 8103416:	2301      	movne	r3, #1
 8103418:	2300      	moveq	r3, #0
 810341a:	b2db      	uxtb	r3, r3
 810341c:	2b00      	cmp	r3, #0
 810341e:	d03e      	beq.n	810349e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103424:	f003 031f 	and.w	r3, r3, #31
 8103428:	2210      	movs	r2, #16
 810342a:	409a      	lsls	r2, r3
 810342c:	6a3b      	ldr	r3, [r7, #32]
 810342e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810343a:	2b00      	cmp	r3, #0
 810343c:	d018      	beq.n	8103470 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103448:	2b00      	cmp	r3, #0
 810344a:	d108      	bne.n	810345e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103450:	2b00      	cmp	r3, #0
 8103452:	d024      	beq.n	810349e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103458:	6878      	ldr	r0, [r7, #4]
 810345a:	4798      	blx	r3
 810345c:	e01f      	b.n	810349e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103462:	2b00      	cmp	r3, #0
 8103464:	d01b      	beq.n	810349e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810346a:	6878      	ldr	r0, [r7, #4]
 810346c:	4798      	blx	r3
 810346e:	e016      	b.n	810349e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810347a:	2b00      	cmp	r3, #0
 810347c:	d107      	bne.n	810348e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	681a      	ldr	r2, [r3, #0]
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	f022 0208 	bic.w	r2, r2, #8
 810348c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103492:	2b00      	cmp	r3, #0
 8103494:	d003      	beq.n	810349e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810349a:	6878      	ldr	r0, [r7, #4]
 810349c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034a2:	f003 031f 	and.w	r3, r3, #31
 81034a6:	2220      	movs	r2, #32
 81034a8:	409a      	lsls	r2, r3
 81034aa:	69bb      	ldr	r3, [r7, #24]
 81034ac:	4013      	ands	r3, r2
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	f000 8110 	beq.w	81036d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	4a2c      	ldr	r2, [pc, #176]	; (810356c <HAL_DMA_IRQHandler+0x690>)
 81034ba:	4293      	cmp	r3, r2
 81034bc:	d04a      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	681b      	ldr	r3, [r3, #0]
 81034c2:	4a2b      	ldr	r2, [pc, #172]	; (8103570 <HAL_DMA_IRQHandler+0x694>)
 81034c4:	4293      	cmp	r3, r2
 81034c6:	d045      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	4a29      	ldr	r2, [pc, #164]	; (8103574 <HAL_DMA_IRQHandler+0x698>)
 81034ce:	4293      	cmp	r3, r2
 81034d0:	d040      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	4a28      	ldr	r2, [pc, #160]	; (8103578 <HAL_DMA_IRQHandler+0x69c>)
 81034d8:	4293      	cmp	r3, r2
 81034da:	d03b      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	4a26      	ldr	r2, [pc, #152]	; (810357c <HAL_DMA_IRQHandler+0x6a0>)
 81034e2:	4293      	cmp	r3, r2
 81034e4:	d036      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	4a25      	ldr	r2, [pc, #148]	; (8103580 <HAL_DMA_IRQHandler+0x6a4>)
 81034ec:	4293      	cmp	r3, r2
 81034ee:	d031      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	4a23      	ldr	r2, [pc, #140]	; (8103584 <HAL_DMA_IRQHandler+0x6a8>)
 81034f6:	4293      	cmp	r3, r2
 81034f8:	d02c      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	4a22      	ldr	r2, [pc, #136]	; (8103588 <HAL_DMA_IRQHandler+0x6ac>)
 8103500:	4293      	cmp	r3, r2
 8103502:	d027      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	4a20      	ldr	r2, [pc, #128]	; (810358c <HAL_DMA_IRQHandler+0x6b0>)
 810350a:	4293      	cmp	r3, r2
 810350c:	d022      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a1f      	ldr	r2, [pc, #124]	; (8103590 <HAL_DMA_IRQHandler+0x6b4>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d01d      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a1d      	ldr	r2, [pc, #116]	; (8103594 <HAL_DMA_IRQHandler+0x6b8>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d018      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a1c      	ldr	r2, [pc, #112]	; (8103598 <HAL_DMA_IRQHandler+0x6bc>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d013      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a1a      	ldr	r2, [pc, #104]	; (810359c <HAL_DMA_IRQHandler+0x6c0>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d00e      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a19      	ldr	r2, [pc, #100]	; (81035a0 <HAL_DMA_IRQHandler+0x6c4>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d009      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a17      	ldr	r2, [pc, #92]	; (81035a4 <HAL_DMA_IRQHandler+0x6c8>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d004      	beq.n	8103554 <HAL_DMA_IRQHandler+0x678>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a16      	ldr	r2, [pc, #88]	; (81035a8 <HAL_DMA_IRQHandler+0x6cc>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d12b      	bne.n	81035ac <HAL_DMA_IRQHandler+0x6d0>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	f003 0310 	and.w	r3, r3, #16
 810355e:	2b00      	cmp	r3, #0
 8103560:	bf14      	ite	ne
 8103562:	2301      	movne	r3, #1
 8103564:	2300      	moveq	r3, #0
 8103566:	b2db      	uxtb	r3, r3
 8103568:	e02a      	b.n	81035c0 <HAL_DMA_IRQHandler+0x6e4>
 810356a:	bf00      	nop
 810356c:	40020010 	.word	0x40020010
 8103570:	40020028 	.word	0x40020028
 8103574:	40020040 	.word	0x40020040
 8103578:	40020058 	.word	0x40020058
 810357c:	40020070 	.word	0x40020070
 8103580:	40020088 	.word	0x40020088
 8103584:	400200a0 	.word	0x400200a0
 8103588:	400200b8 	.word	0x400200b8
 810358c:	40020410 	.word	0x40020410
 8103590:	40020428 	.word	0x40020428
 8103594:	40020440 	.word	0x40020440
 8103598:	40020458 	.word	0x40020458
 810359c:	40020470 	.word	0x40020470
 81035a0:	40020488 	.word	0x40020488
 81035a4:	400204a0 	.word	0x400204a0
 81035a8:	400204b8 	.word	0x400204b8
 81035ac:	687b      	ldr	r3, [r7, #4]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	f003 0302 	and.w	r3, r3, #2
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	bf14      	ite	ne
 81035ba:	2301      	movne	r3, #1
 81035bc:	2300      	moveq	r3, #0
 81035be:	b2db      	uxtb	r3, r3
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	f000 8087 	beq.w	81036d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81035ca:	f003 031f 	and.w	r3, r3, #31
 81035ce:	2220      	movs	r2, #32
 81035d0:	409a      	lsls	r2, r3
 81035d2:	6a3b      	ldr	r3, [r7, #32]
 81035d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81035dc:	b2db      	uxtb	r3, r3
 81035de:	2b04      	cmp	r3, #4
 81035e0:	d139      	bne.n	8103656 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	681a      	ldr	r2, [r3, #0]
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	f022 0216 	bic.w	r2, r2, #22
 81035f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	695a      	ldr	r2, [r3, #20]
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103600:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103606:	2b00      	cmp	r3, #0
 8103608:	d103      	bne.n	8103612 <HAL_DMA_IRQHandler+0x736>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810360e:	2b00      	cmp	r3, #0
 8103610:	d007      	beq.n	8103622 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	681a      	ldr	r2, [r3, #0]
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	681b      	ldr	r3, [r3, #0]
 810361c:	f022 0208 	bic.w	r2, r2, #8
 8103620:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103626:	f003 031f 	and.w	r3, r3, #31
 810362a:	223f      	movs	r2, #63	; 0x3f
 810362c:	409a      	lsls	r2, r3
 810362e:	6a3b      	ldr	r3, [r7, #32]
 8103630:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	2201      	movs	r2, #1
 8103636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	2200      	movs	r2, #0
 810363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103646:	2b00      	cmp	r3, #0
 8103648:	f000 834a 	beq.w	8103ce0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103650:	6878      	ldr	r0, [r7, #4]
 8103652:	4798      	blx	r3
          }
          return;
 8103654:	e344      	b.n	8103ce0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103660:	2b00      	cmp	r3, #0
 8103662:	d018      	beq.n	8103696 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810366e:	2b00      	cmp	r3, #0
 8103670:	d108      	bne.n	8103684 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103676:	2b00      	cmp	r3, #0
 8103678:	d02c      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810367e:	6878      	ldr	r0, [r7, #4]
 8103680:	4798      	blx	r3
 8103682:	e027      	b.n	81036d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103688:	2b00      	cmp	r3, #0
 810368a:	d023      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103690:	6878      	ldr	r0, [r7, #4]
 8103692:	4798      	blx	r3
 8103694:	e01e      	b.n	81036d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	681b      	ldr	r3, [r3, #0]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81036a0:	2b00      	cmp	r3, #0
 81036a2:	d10f      	bne.n	81036c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	681b      	ldr	r3, [r3, #0]
 81036a8:	681a      	ldr	r2, [r3, #0]
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	f022 0210 	bic.w	r2, r2, #16
 81036b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	2201      	movs	r2, #1
 81036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	2200      	movs	r2, #0
 81036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81036c8:	2b00      	cmp	r3, #0
 81036ca:	d003      	beq.n	81036d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81036d0:	6878      	ldr	r0, [r7, #4]
 81036d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036d8:	2b00      	cmp	r3, #0
 81036da:	f000 8306 	beq.w	8103cea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036e2:	f003 0301 	and.w	r3, r3, #1
 81036e6:	2b00      	cmp	r3, #0
 81036e8:	f000 8088 	beq.w	81037fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	2204      	movs	r2, #4
 81036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	4a7a      	ldr	r2, [pc, #488]	; (81038e4 <HAL_DMA_IRQHandler+0xa08>)
 81036fa:	4293      	cmp	r3, r2
 81036fc:	d04a      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	4a79      	ldr	r2, [pc, #484]	; (81038e8 <HAL_DMA_IRQHandler+0xa0c>)
 8103704:	4293      	cmp	r3, r2
 8103706:	d045      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	681b      	ldr	r3, [r3, #0]
 810370c:	4a77      	ldr	r2, [pc, #476]	; (81038ec <HAL_DMA_IRQHandler+0xa10>)
 810370e:	4293      	cmp	r3, r2
 8103710:	d040      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	4a76      	ldr	r2, [pc, #472]	; (81038f0 <HAL_DMA_IRQHandler+0xa14>)
 8103718:	4293      	cmp	r3, r2
 810371a:	d03b      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	681b      	ldr	r3, [r3, #0]
 8103720:	4a74      	ldr	r2, [pc, #464]	; (81038f4 <HAL_DMA_IRQHandler+0xa18>)
 8103722:	4293      	cmp	r3, r2
 8103724:	d036      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	4a73      	ldr	r2, [pc, #460]	; (81038f8 <HAL_DMA_IRQHandler+0xa1c>)
 810372c:	4293      	cmp	r3, r2
 810372e:	d031      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	4a71      	ldr	r2, [pc, #452]	; (81038fc <HAL_DMA_IRQHandler+0xa20>)
 8103736:	4293      	cmp	r3, r2
 8103738:	d02c      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	681b      	ldr	r3, [r3, #0]
 810373e:	4a70      	ldr	r2, [pc, #448]	; (8103900 <HAL_DMA_IRQHandler+0xa24>)
 8103740:	4293      	cmp	r3, r2
 8103742:	d027      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	4a6e      	ldr	r2, [pc, #440]	; (8103904 <HAL_DMA_IRQHandler+0xa28>)
 810374a:	4293      	cmp	r3, r2
 810374c:	d022      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	681b      	ldr	r3, [r3, #0]
 8103752:	4a6d      	ldr	r2, [pc, #436]	; (8103908 <HAL_DMA_IRQHandler+0xa2c>)
 8103754:	4293      	cmp	r3, r2
 8103756:	d01d      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	4a6b      	ldr	r2, [pc, #428]	; (810390c <HAL_DMA_IRQHandler+0xa30>)
 810375e:	4293      	cmp	r3, r2
 8103760:	d018      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	4a6a      	ldr	r2, [pc, #424]	; (8103910 <HAL_DMA_IRQHandler+0xa34>)
 8103768:	4293      	cmp	r3, r2
 810376a:	d013      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	4a68      	ldr	r2, [pc, #416]	; (8103914 <HAL_DMA_IRQHandler+0xa38>)
 8103772:	4293      	cmp	r3, r2
 8103774:	d00e      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	4a67      	ldr	r2, [pc, #412]	; (8103918 <HAL_DMA_IRQHandler+0xa3c>)
 810377c:	4293      	cmp	r3, r2
 810377e:	d009      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	4a65      	ldr	r2, [pc, #404]	; (810391c <HAL_DMA_IRQHandler+0xa40>)
 8103786:	4293      	cmp	r3, r2
 8103788:	d004      	beq.n	8103794 <HAL_DMA_IRQHandler+0x8b8>
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	4a64      	ldr	r2, [pc, #400]	; (8103920 <HAL_DMA_IRQHandler+0xa44>)
 8103790:	4293      	cmp	r3, r2
 8103792:	d108      	bne.n	81037a6 <HAL_DMA_IRQHandler+0x8ca>
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	681a      	ldr	r2, [r3, #0]
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	f022 0201 	bic.w	r2, r2, #1
 81037a2:	601a      	str	r2, [r3, #0]
 81037a4:	e007      	b.n	81037b6 <HAL_DMA_IRQHandler+0x8da>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	681a      	ldr	r2, [r3, #0]
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	f022 0201 	bic.w	r2, r2, #1
 81037b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81037b6:	68fb      	ldr	r3, [r7, #12]
 81037b8:	3301      	adds	r3, #1
 81037ba:	60fb      	str	r3, [r7, #12]
 81037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81037be:	429a      	cmp	r2, r3
 81037c0:	d307      	bcc.n	81037d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	f003 0301 	and.w	r3, r3, #1
 81037cc:	2b00      	cmp	r3, #0
 81037ce:	d1f2      	bne.n	81037b6 <HAL_DMA_IRQHandler+0x8da>
 81037d0:	e000      	b.n	81037d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81037d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	681b      	ldr	r3, [r3, #0]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	f003 0301 	and.w	r3, r3, #1
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d004      	beq.n	81037ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	2203      	movs	r2, #3
 81037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81037ea:	e003      	b.n	81037f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	2201      	movs	r2, #1
 81037f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	2200      	movs	r2, #0
 81037f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103800:	2b00      	cmp	r3, #0
 8103802:	f000 8272 	beq.w	8103cea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810380a:	6878      	ldr	r0, [r7, #4]
 810380c:	4798      	blx	r3
 810380e:	e26c      	b.n	8103cea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	4a43      	ldr	r2, [pc, #268]	; (8103924 <HAL_DMA_IRQHandler+0xa48>)
 8103816:	4293      	cmp	r3, r2
 8103818:	d022      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 810381a:	687b      	ldr	r3, [r7, #4]
 810381c:	681b      	ldr	r3, [r3, #0]
 810381e:	4a42      	ldr	r2, [pc, #264]	; (8103928 <HAL_DMA_IRQHandler+0xa4c>)
 8103820:	4293      	cmp	r3, r2
 8103822:	d01d      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	4a40      	ldr	r2, [pc, #256]	; (810392c <HAL_DMA_IRQHandler+0xa50>)
 810382a:	4293      	cmp	r3, r2
 810382c:	d018      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	681b      	ldr	r3, [r3, #0]
 8103832:	4a3f      	ldr	r2, [pc, #252]	; (8103930 <HAL_DMA_IRQHandler+0xa54>)
 8103834:	4293      	cmp	r3, r2
 8103836:	d013      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	4a3d      	ldr	r2, [pc, #244]	; (8103934 <HAL_DMA_IRQHandler+0xa58>)
 810383e:	4293      	cmp	r3, r2
 8103840:	d00e      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	681b      	ldr	r3, [r3, #0]
 8103846:	4a3c      	ldr	r2, [pc, #240]	; (8103938 <HAL_DMA_IRQHandler+0xa5c>)
 8103848:	4293      	cmp	r3, r2
 810384a:	d009      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	681b      	ldr	r3, [r3, #0]
 8103850:	4a3a      	ldr	r2, [pc, #232]	; (810393c <HAL_DMA_IRQHandler+0xa60>)
 8103852:	4293      	cmp	r3, r2
 8103854:	d004      	beq.n	8103860 <HAL_DMA_IRQHandler+0x984>
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	681b      	ldr	r3, [r3, #0]
 810385a:	4a39      	ldr	r2, [pc, #228]	; (8103940 <HAL_DMA_IRQHandler+0xa64>)
 810385c:	4293      	cmp	r3, r2
 810385e:	d101      	bne.n	8103864 <HAL_DMA_IRQHandler+0x988>
 8103860:	2301      	movs	r3, #1
 8103862:	e000      	b.n	8103866 <HAL_DMA_IRQHandler+0x98a>
 8103864:	2300      	movs	r3, #0
 8103866:	2b00      	cmp	r3, #0
 8103868:	f000 823f 	beq.w	8103cea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103878:	f003 031f 	and.w	r3, r3, #31
 810387c:	2204      	movs	r2, #4
 810387e:	409a      	lsls	r2, r3
 8103880:	697b      	ldr	r3, [r7, #20]
 8103882:	4013      	ands	r3, r2
 8103884:	2b00      	cmp	r3, #0
 8103886:	f000 80cd 	beq.w	8103a24 <HAL_DMA_IRQHandler+0xb48>
 810388a:	693b      	ldr	r3, [r7, #16]
 810388c:	f003 0304 	and.w	r3, r3, #4
 8103890:	2b00      	cmp	r3, #0
 8103892:	f000 80c7 	beq.w	8103a24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810389a:	f003 031f 	and.w	r3, r3, #31
 810389e:	2204      	movs	r2, #4
 81038a0:	409a      	lsls	r2, r3
 81038a2:	69fb      	ldr	r3, [r7, #28]
 81038a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038a6:	693b      	ldr	r3, [r7, #16]
 81038a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d049      	beq.n	8103944 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81038b0:	693b      	ldr	r3, [r7, #16]
 81038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81038b6:	2b00      	cmp	r3, #0
 81038b8:	d109      	bne.n	81038ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81038be:	2b00      	cmp	r3, #0
 81038c0:	f000 8210 	beq.w	8103ce4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81038c8:	6878      	ldr	r0, [r7, #4]
 81038ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038cc:	e20a      	b.n	8103ce4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	f000 8206 	beq.w	8103ce4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038dc:	6878      	ldr	r0, [r7, #4]
 81038de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038e0:	e200      	b.n	8103ce4 <HAL_DMA_IRQHandler+0xe08>
 81038e2:	bf00      	nop
 81038e4:	40020010 	.word	0x40020010
 81038e8:	40020028 	.word	0x40020028
 81038ec:	40020040 	.word	0x40020040
 81038f0:	40020058 	.word	0x40020058
 81038f4:	40020070 	.word	0x40020070
 81038f8:	40020088 	.word	0x40020088
 81038fc:	400200a0 	.word	0x400200a0
 8103900:	400200b8 	.word	0x400200b8
 8103904:	40020410 	.word	0x40020410
 8103908:	40020428 	.word	0x40020428
 810390c:	40020440 	.word	0x40020440
 8103910:	40020458 	.word	0x40020458
 8103914:	40020470 	.word	0x40020470
 8103918:	40020488 	.word	0x40020488
 810391c:	400204a0 	.word	0x400204a0
 8103920:	400204b8 	.word	0x400204b8
 8103924:	58025408 	.word	0x58025408
 8103928:	5802541c 	.word	0x5802541c
 810392c:	58025430 	.word	0x58025430
 8103930:	58025444 	.word	0x58025444
 8103934:	58025458 	.word	0x58025458
 8103938:	5802546c 	.word	0x5802546c
 810393c:	58025480 	.word	0x58025480
 8103940:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103944:	693b      	ldr	r3, [r7, #16]
 8103946:	f003 0320 	and.w	r3, r3, #32
 810394a:	2b00      	cmp	r3, #0
 810394c:	d160      	bne.n	8103a10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	681b      	ldr	r3, [r3, #0]
 8103952:	4a7f      	ldr	r2, [pc, #508]	; (8103b50 <HAL_DMA_IRQHandler+0xc74>)
 8103954:	4293      	cmp	r3, r2
 8103956:	d04a      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	4a7d      	ldr	r2, [pc, #500]	; (8103b54 <HAL_DMA_IRQHandler+0xc78>)
 810395e:	4293      	cmp	r3, r2
 8103960:	d045      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	4a7c      	ldr	r2, [pc, #496]	; (8103b58 <HAL_DMA_IRQHandler+0xc7c>)
 8103968:	4293      	cmp	r3, r2
 810396a:	d040      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	4a7a      	ldr	r2, [pc, #488]	; (8103b5c <HAL_DMA_IRQHandler+0xc80>)
 8103972:	4293      	cmp	r3, r2
 8103974:	d03b      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	681b      	ldr	r3, [r3, #0]
 810397a:	4a79      	ldr	r2, [pc, #484]	; (8103b60 <HAL_DMA_IRQHandler+0xc84>)
 810397c:	4293      	cmp	r3, r2
 810397e:	d036      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	4a77      	ldr	r2, [pc, #476]	; (8103b64 <HAL_DMA_IRQHandler+0xc88>)
 8103986:	4293      	cmp	r3, r2
 8103988:	d031      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	681b      	ldr	r3, [r3, #0]
 810398e:	4a76      	ldr	r2, [pc, #472]	; (8103b68 <HAL_DMA_IRQHandler+0xc8c>)
 8103990:	4293      	cmp	r3, r2
 8103992:	d02c      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	4a74      	ldr	r2, [pc, #464]	; (8103b6c <HAL_DMA_IRQHandler+0xc90>)
 810399a:	4293      	cmp	r3, r2
 810399c:	d027      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	4a73      	ldr	r2, [pc, #460]	; (8103b70 <HAL_DMA_IRQHandler+0xc94>)
 81039a4:	4293      	cmp	r3, r2
 81039a6:	d022      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	4a71      	ldr	r2, [pc, #452]	; (8103b74 <HAL_DMA_IRQHandler+0xc98>)
 81039ae:	4293      	cmp	r3, r2
 81039b0:	d01d      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	4a70      	ldr	r2, [pc, #448]	; (8103b78 <HAL_DMA_IRQHandler+0xc9c>)
 81039b8:	4293      	cmp	r3, r2
 81039ba:	d018      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4a6e      	ldr	r2, [pc, #440]	; (8103b7c <HAL_DMA_IRQHandler+0xca0>)
 81039c2:	4293      	cmp	r3, r2
 81039c4:	d013      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	4a6d      	ldr	r2, [pc, #436]	; (8103b80 <HAL_DMA_IRQHandler+0xca4>)
 81039cc:	4293      	cmp	r3, r2
 81039ce:	d00e      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	4a6b      	ldr	r2, [pc, #428]	; (8103b84 <HAL_DMA_IRQHandler+0xca8>)
 81039d6:	4293      	cmp	r3, r2
 81039d8:	d009      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	4a6a      	ldr	r2, [pc, #424]	; (8103b88 <HAL_DMA_IRQHandler+0xcac>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	d004      	beq.n	81039ee <HAL_DMA_IRQHandler+0xb12>
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	4a68      	ldr	r2, [pc, #416]	; (8103b8c <HAL_DMA_IRQHandler+0xcb0>)
 81039ea:	4293      	cmp	r3, r2
 81039ec:	d108      	bne.n	8103a00 <HAL_DMA_IRQHandler+0xb24>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	681a      	ldr	r2, [r3, #0]
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f022 0208 	bic.w	r2, r2, #8
 81039fc:	601a      	str	r2, [r3, #0]
 81039fe:	e007      	b.n	8103a10 <HAL_DMA_IRQHandler+0xb34>
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	681a      	ldr	r2, [r3, #0]
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	681b      	ldr	r3, [r3, #0]
 8103a0a:	f022 0204 	bic.w	r2, r2, #4
 8103a0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	f000 8165 	beq.w	8103ce4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a1e:	6878      	ldr	r0, [r7, #4]
 8103a20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a22:	e15f      	b.n	8103ce4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a28:	f003 031f 	and.w	r3, r3, #31
 8103a2c:	2202      	movs	r2, #2
 8103a2e:	409a      	lsls	r2, r3
 8103a30:	697b      	ldr	r3, [r7, #20]
 8103a32:	4013      	ands	r3, r2
 8103a34:	2b00      	cmp	r3, #0
 8103a36:	f000 80c5 	beq.w	8103bc4 <HAL_DMA_IRQHandler+0xce8>
 8103a3a:	693b      	ldr	r3, [r7, #16]
 8103a3c:	f003 0302 	and.w	r3, r3, #2
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	f000 80bf 	beq.w	8103bc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a4a:	f003 031f 	and.w	r3, r3, #31
 8103a4e:	2202      	movs	r2, #2
 8103a50:	409a      	lsls	r2, r3
 8103a52:	69fb      	ldr	r3, [r7, #28]
 8103a54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a56:	693b      	ldr	r3, [r7, #16]
 8103a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d018      	beq.n	8103a92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103a60:	693b      	ldr	r3, [r7, #16]
 8103a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	d109      	bne.n	8103a7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a6e:	2b00      	cmp	r3, #0
 8103a70:	f000 813a 	beq.w	8103ce8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a78:	6878      	ldr	r0, [r7, #4]
 8103a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a7c:	e134      	b.n	8103ce8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	f000 8130 	beq.w	8103ce8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103a8c:	6878      	ldr	r0, [r7, #4]
 8103a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a90:	e12a      	b.n	8103ce8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103a92:	693b      	ldr	r3, [r7, #16]
 8103a94:	f003 0320 	and.w	r3, r3, #32
 8103a98:	2b00      	cmp	r3, #0
 8103a9a:	f040 8089 	bne.w	8103bb0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	4a2b      	ldr	r2, [pc, #172]	; (8103b50 <HAL_DMA_IRQHandler+0xc74>)
 8103aa4:	4293      	cmp	r3, r2
 8103aa6:	d04a      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	4a29      	ldr	r2, [pc, #164]	; (8103b54 <HAL_DMA_IRQHandler+0xc78>)
 8103aae:	4293      	cmp	r3, r2
 8103ab0:	d045      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	4a28      	ldr	r2, [pc, #160]	; (8103b58 <HAL_DMA_IRQHandler+0xc7c>)
 8103ab8:	4293      	cmp	r3, r2
 8103aba:	d040      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	4a26      	ldr	r2, [pc, #152]	; (8103b5c <HAL_DMA_IRQHandler+0xc80>)
 8103ac2:	4293      	cmp	r3, r2
 8103ac4:	d03b      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	4a25      	ldr	r2, [pc, #148]	; (8103b60 <HAL_DMA_IRQHandler+0xc84>)
 8103acc:	4293      	cmp	r3, r2
 8103ace:	d036      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	4a23      	ldr	r2, [pc, #140]	; (8103b64 <HAL_DMA_IRQHandler+0xc88>)
 8103ad6:	4293      	cmp	r3, r2
 8103ad8:	d031      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	681b      	ldr	r3, [r3, #0]
 8103ade:	4a22      	ldr	r2, [pc, #136]	; (8103b68 <HAL_DMA_IRQHandler+0xc8c>)
 8103ae0:	4293      	cmp	r3, r2
 8103ae2:	d02c      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	4a20      	ldr	r2, [pc, #128]	; (8103b6c <HAL_DMA_IRQHandler+0xc90>)
 8103aea:	4293      	cmp	r3, r2
 8103aec:	d027      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	4a1f      	ldr	r2, [pc, #124]	; (8103b70 <HAL_DMA_IRQHandler+0xc94>)
 8103af4:	4293      	cmp	r3, r2
 8103af6:	d022      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	4a1d      	ldr	r2, [pc, #116]	; (8103b74 <HAL_DMA_IRQHandler+0xc98>)
 8103afe:	4293      	cmp	r3, r2
 8103b00:	d01d      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	4a1c      	ldr	r2, [pc, #112]	; (8103b78 <HAL_DMA_IRQHandler+0xc9c>)
 8103b08:	4293      	cmp	r3, r2
 8103b0a:	d018      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	4a1a      	ldr	r2, [pc, #104]	; (8103b7c <HAL_DMA_IRQHandler+0xca0>)
 8103b12:	4293      	cmp	r3, r2
 8103b14:	d013      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	4a19      	ldr	r2, [pc, #100]	; (8103b80 <HAL_DMA_IRQHandler+0xca4>)
 8103b1c:	4293      	cmp	r3, r2
 8103b1e:	d00e      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	681b      	ldr	r3, [r3, #0]
 8103b24:	4a17      	ldr	r2, [pc, #92]	; (8103b84 <HAL_DMA_IRQHandler+0xca8>)
 8103b26:	4293      	cmp	r3, r2
 8103b28:	d009      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	4a16      	ldr	r2, [pc, #88]	; (8103b88 <HAL_DMA_IRQHandler+0xcac>)
 8103b30:	4293      	cmp	r3, r2
 8103b32:	d004      	beq.n	8103b3e <HAL_DMA_IRQHandler+0xc62>
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	4a14      	ldr	r2, [pc, #80]	; (8103b8c <HAL_DMA_IRQHandler+0xcb0>)
 8103b3a:	4293      	cmp	r3, r2
 8103b3c:	d128      	bne.n	8103b90 <HAL_DMA_IRQHandler+0xcb4>
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	681b      	ldr	r3, [r3, #0]
 8103b42:	681a      	ldr	r2, [r3, #0]
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	681b      	ldr	r3, [r3, #0]
 8103b48:	f022 0214 	bic.w	r2, r2, #20
 8103b4c:	601a      	str	r2, [r3, #0]
 8103b4e:	e027      	b.n	8103ba0 <HAL_DMA_IRQHandler+0xcc4>
 8103b50:	40020010 	.word	0x40020010
 8103b54:	40020028 	.word	0x40020028
 8103b58:	40020040 	.word	0x40020040
 8103b5c:	40020058 	.word	0x40020058
 8103b60:	40020070 	.word	0x40020070
 8103b64:	40020088 	.word	0x40020088
 8103b68:	400200a0 	.word	0x400200a0
 8103b6c:	400200b8 	.word	0x400200b8
 8103b70:	40020410 	.word	0x40020410
 8103b74:	40020428 	.word	0x40020428
 8103b78:	40020440 	.word	0x40020440
 8103b7c:	40020458 	.word	0x40020458
 8103b80:	40020470 	.word	0x40020470
 8103b84:	40020488 	.word	0x40020488
 8103b88:	400204a0 	.word	0x400204a0
 8103b8c:	400204b8 	.word	0x400204b8
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	681b      	ldr	r3, [r3, #0]
 8103b94:	681a      	ldr	r2, [r3, #0]
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	681b      	ldr	r3, [r3, #0]
 8103b9a:	f022 020a 	bic.w	r2, r2, #10
 8103b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	2201      	movs	r2, #1
 8103ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	2200      	movs	r2, #0
 8103bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bb4:	2b00      	cmp	r3, #0
 8103bb6:	f000 8097 	beq.w	8103ce8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bbe:	6878      	ldr	r0, [r7, #4]
 8103bc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103bc2:	e091      	b.n	8103ce8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bc8:	f003 031f 	and.w	r3, r3, #31
 8103bcc:	2208      	movs	r2, #8
 8103bce:	409a      	lsls	r2, r3
 8103bd0:	697b      	ldr	r3, [r7, #20]
 8103bd2:	4013      	ands	r3, r2
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	f000 8088 	beq.w	8103cea <HAL_DMA_IRQHandler+0xe0e>
 8103bda:	693b      	ldr	r3, [r7, #16]
 8103bdc:	f003 0308 	and.w	r3, r3, #8
 8103be0:	2b00      	cmp	r3, #0
 8103be2:	f000 8082 	beq.w	8103cea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	681b      	ldr	r3, [r3, #0]
 8103bea:	4a41      	ldr	r2, [pc, #260]	; (8103cf0 <HAL_DMA_IRQHandler+0xe14>)
 8103bec:	4293      	cmp	r3, r2
 8103bee:	d04a      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	4a3f      	ldr	r2, [pc, #252]	; (8103cf4 <HAL_DMA_IRQHandler+0xe18>)
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d045      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	4a3e      	ldr	r2, [pc, #248]	; (8103cf8 <HAL_DMA_IRQHandler+0xe1c>)
 8103c00:	4293      	cmp	r3, r2
 8103c02:	d040      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	4a3c      	ldr	r2, [pc, #240]	; (8103cfc <HAL_DMA_IRQHandler+0xe20>)
 8103c0a:	4293      	cmp	r3, r2
 8103c0c:	d03b      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	4a3b      	ldr	r2, [pc, #236]	; (8103d00 <HAL_DMA_IRQHandler+0xe24>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d036      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a39      	ldr	r2, [pc, #228]	; (8103d04 <HAL_DMA_IRQHandler+0xe28>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d031      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a38      	ldr	r2, [pc, #224]	; (8103d08 <HAL_DMA_IRQHandler+0xe2c>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d02c      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a36      	ldr	r2, [pc, #216]	; (8103d0c <HAL_DMA_IRQHandler+0xe30>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d027      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a35      	ldr	r2, [pc, #212]	; (8103d10 <HAL_DMA_IRQHandler+0xe34>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d022      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a33      	ldr	r2, [pc, #204]	; (8103d14 <HAL_DMA_IRQHandler+0xe38>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d01d      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a32      	ldr	r2, [pc, #200]	; (8103d18 <HAL_DMA_IRQHandler+0xe3c>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d018      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a30      	ldr	r2, [pc, #192]	; (8103d1c <HAL_DMA_IRQHandler+0xe40>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d013      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a2f      	ldr	r2, [pc, #188]	; (8103d20 <HAL_DMA_IRQHandler+0xe44>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d00e      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a2d      	ldr	r2, [pc, #180]	; (8103d24 <HAL_DMA_IRQHandler+0xe48>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d009      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a2c      	ldr	r2, [pc, #176]	; (8103d28 <HAL_DMA_IRQHandler+0xe4c>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d004      	beq.n	8103c86 <HAL_DMA_IRQHandler+0xdaa>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a2a      	ldr	r2, [pc, #168]	; (8103d2c <HAL_DMA_IRQHandler+0xe50>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d108      	bne.n	8103c98 <HAL_DMA_IRQHandler+0xdbc>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	681a      	ldr	r2, [r3, #0]
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	f022 021c 	bic.w	r2, r2, #28
 8103c94:	601a      	str	r2, [r3, #0]
 8103c96:	e007      	b.n	8103ca8 <HAL_DMA_IRQHandler+0xdcc>
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	681a      	ldr	r2, [r3, #0]
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	f022 020e 	bic.w	r2, r2, #14
 8103ca6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cac:	f003 031f 	and.w	r3, r3, #31
 8103cb0:	2201      	movs	r2, #1
 8103cb2:	409a      	lsls	r2, r3
 8103cb4:	69fb      	ldr	r3, [r7, #28]
 8103cb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	2201      	movs	r2, #1
 8103cbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	2201      	movs	r2, #1
 8103cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	2200      	movs	r2, #0
 8103cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103cd2:	2b00      	cmp	r3, #0
 8103cd4:	d009      	beq.n	8103cea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103cd6:	687b      	ldr	r3, [r7, #4]
 8103cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103cda:	6878      	ldr	r0, [r7, #4]
 8103cdc:	4798      	blx	r3
 8103cde:	e004      	b.n	8103cea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103ce0:	bf00      	nop
 8103ce2:	e002      	b.n	8103cea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ce4:	bf00      	nop
 8103ce6:	e000      	b.n	8103cea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ce8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103cea:	3728      	adds	r7, #40	; 0x28
 8103cec:	46bd      	mov	sp, r7
 8103cee:	bd80      	pop	{r7, pc}
 8103cf0:	40020010 	.word	0x40020010
 8103cf4:	40020028 	.word	0x40020028
 8103cf8:	40020040 	.word	0x40020040
 8103cfc:	40020058 	.word	0x40020058
 8103d00:	40020070 	.word	0x40020070
 8103d04:	40020088 	.word	0x40020088
 8103d08:	400200a0 	.word	0x400200a0
 8103d0c:	400200b8 	.word	0x400200b8
 8103d10:	40020410 	.word	0x40020410
 8103d14:	40020428 	.word	0x40020428
 8103d18:	40020440 	.word	0x40020440
 8103d1c:	40020458 	.word	0x40020458
 8103d20:	40020470 	.word	0x40020470
 8103d24:	40020488 	.word	0x40020488
 8103d28:	400204a0 	.word	0x400204a0
 8103d2c:	400204b8 	.word	0x400204b8

08103d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103d30:	b480      	push	{r7}
 8103d32:	b085      	sub	sp, #20
 8103d34:	af00      	add	r7, sp, #0
 8103d36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	4a43      	ldr	r2, [pc, #268]	; (8103e4c <DMA_CalcBaseAndBitshift+0x11c>)
 8103d3e:	4293      	cmp	r3, r2
 8103d40:	d04a      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	4a42      	ldr	r2, [pc, #264]	; (8103e50 <DMA_CalcBaseAndBitshift+0x120>)
 8103d48:	4293      	cmp	r3, r2
 8103d4a:	d045      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	4a40      	ldr	r2, [pc, #256]	; (8103e54 <DMA_CalcBaseAndBitshift+0x124>)
 8103d52:	4293      	cmp	r3, r2
 8103d54:	d040      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	681b      	ldr	r3, [r3, #0]
 8103d5a:	4a3f      	ldr	r2, [pc, #252]	; (8103e58 <DMA_CalcBaseAndBitshift+0x128>)
 8103d5c:	4293      	cmp	r3, r2
 8103d5e:	d03b      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	4a3d      	ldr	r2, [pc, #244]	; (8103e5c <DMA_CalcBaseAndBitshift+0x12c>)
 8103d66:	4293      	cmp	r3, r2
 8103d68:	d036      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	4a3c      	ldr	r2, [pc, #240]	; (8103e60 <DMA_CalcBaseAndBitshift+0x130>)
 8103d70:	4293      	cmp	r3, r2
 8103d72:	d031      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	4a3a      	ldr	r2, [pc, #232]	; (8103e64 <DMA_CalcBaseAndBitshift+0x134>)
 8103d7a:	4293      	cmp	r3, r2
 8103d7c:	d02c      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	4a39      	ldr	r2, [pc, #228]	; (8103e68 <DMA_CalcBaseAndBitshift+0x138>)
 8103d84:	4293      	cmp	r3, r2
 8103d86:	d027      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	4a37      	ldr	r2, [pc, #220]	; (8103e6c <DMA_CalcBaseAndBitshift+0x13c>)
 8103d8e:	4293      	cmp	r3, r2
 8103d90:	d022      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	4a36      	ldr	r2, [pc, #216]	; (8103e70 <DMA_CalcBaseAndBitshift+0x140>)
 8103d98:	4293      	cmp	r3, r2
 8103d9a:	d01d      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	4a34      	ldr	r2, [pc, #208]	; (8103e74 <DMA_CalcBaseAndBitshift+0x144>)
 8103da2:	4293      	cmp	r3, r2
 8103da4:	d018      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	4a33      	ldr	r2, [pc, #204]	; (8103e78 <DMA_CalcBaseAndBitshift+0x148>)
 8103dac:	4293      	cmp	r3, r2
 8103dae:	d013      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	4a31      	ldr	r2, [pc, #196]	; (8103e7c <DMA_CalcBaseAndBitshift+0x14c>)
 8103db6:	4293      	cmp	r3, r2
 8103db8:	d00e      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	4a30      	ldr	r2, [pc, #192]	; (8103e80 <DMA_CalcBaseAndBitshift+0x150>)
 8103dc0:	4293      	cmp	r3, r2
 8103dc2:	d009      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	4a2e      	ldr	r2, [pc, #184]	; (8103e84 <DMA_CalcBaseAndBitshift+0x154>)
 8103dca:	4293      	cmp	r3, r2
 8103dcc:	d004      	beq.n	8103dd8 <DMA_CalcBaseAndBitshift+0xa8>
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	4a2d      	ldr	r2, [pc, #180]	; (8103e88 <DMA_CalcBaseAndBitshift+0x158>)
 8103dd4:	4293      	cmp	r3, r2
 8103dd6:	d101      	bne.n	8103ddc <DMA_CalcBaseAndBitshift+0xac>
 8103dd8:	2301      	movs	r3, #1
 8103dda:	e000      	b.n	8103dde <DMA_CalcBaseAndBitshift+0xae>
 8103ddc:	2300      	movs	r3, #0
 8103dde:	2b00      	cmp	r3, #0
 8103de0:	d026      	beq.n	8103e30 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	b2db      	uxtb	r3, r3
 8103de8:	3b10      	subs	r3, #16
 8103dea:	4a28      	ldr	r2, [pc, #160]	; (8103e8c <DMA_CalcBaseAndBitshift+0x15c>)
 8103dec:	fba2 2303 	umull	r2, r3, r2, r3
 8103df0:	091b      	lsrs	r3, r3, #4
 8103df2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	f003 0307 	and.w	r3, r3, #7
 8103dfa:	4a25      	ldr	r2, [pc, #148]	; (8103e90 <DMA_CalcBaseAndBitshift+0x160>)
 8103dfc:	5cd3      	ldrb	r3, [r2, r3]
 8103dfe:	461a      	mov	r2, r3
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	2b03      	cmp	r3, #3
 8103e08:	d909      	bls.n	8103e1e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103e12:	f023 0303 	bic.w	r3, r3, #3
 8103e16:	1d1a      	adds	r2, r3, #4
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8103e1c:	e00e      	b.n	8103e3c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103e26:	f023 0303 	bic.w	r3, r3, #3
 8103e2a:	687a      	ldr	r2, [r7, #4]
 8103e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8103e2e:	e005      	b.n	8103e3c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103e40:	4618      	mov	r0, r3
 8103e42:	3714      	adds	r7, #20
 8103e44:	46bd      	mov	sp, r7
 8103e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e4a:	4770      	bx	lr
 8103e4c:	40020010 	.word	0x40020010
 8103e50:	40020028 	.word	0x40020028
 8103e54:	40020040 	.word	0x40020040
 8103e58:	40020058 	.word	0x40020058
 8103e5c:	40020070 	.word	0x40020070
 8103e60:	40020088 	.word	0x40020088
 8103e64:	400200a0 	.word	0x400200a0
 8103e68:	400200b8 	.word	0x400200b8
 8103e6c:	40020410 	.word	0x40020410
 8103e70:	40020428 	.word	0x40020428
 8103e74:	40020440 	.word	0x40020440
 8103e78:	40020458 	.word	0x40020458
 8103e7c:	40020470 	.word	0x40020470
 8103e80:	40020488 	.word	0x40020488
 8103e84:	400204a0 	.word	0x400204a0
 8103e88:	400204b8 	.word	0x400204b8
 8103e8c:	aaaaaaab 	.word	0xaaaaaaab
 8103e90:	0810e008 	.word	0x0810e008

08103e94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103e94:	b480      	push	{r7}
 8103e96:	b085      	sub	sp, #20
 8103e98:	af00      	add	r7, sp, #0
 8103e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103e9c:	2300      	movs	r3, #0
 8103e9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	699b      	ldr	r3, [r3, #24]
 8103ea4:	2b00      	cmp	r3, #0
 8103ea6:	d120      	bne.n	8103eea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103eac:	2b03      	cmp	r3, #3
 8103eae:	d858      	bhi.n	8103f62 <DMA_CheckFifoParam+0xce>
 8103eb0:	a201      	add	r2, pc, #4	; (adr r2, 8103eb8 <DMA_CheckFifoParam+0x24>)
 8103eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103eb6:	bf00      	nop
 8103eb8:	08103ec9 	.word	0x08103ec9
 8103ebc:	08103edb 	.word	0x08103edb
 8103ec0:	08103ec9 	.word	0x08103ec9
 8103ec4:	08103f63 	.word	0x08103f63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103ed0:	2b00      	cmp	r3, #0
 8103ed2:	d048      	beq.n	8103f66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103ed4:	2301      	movs	r3, #1
 8103ed6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103ed8:	e045      	b.n	8103f66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ede:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103ee2:	d142      	bne.n	8103f6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103ee4:	2301      	movs	r3, #1
 8103ee6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103ee8:	e03f      	b.n	8103f6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	699b      	ldr	r3, [r3, #24]
 8103eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ef2:	d123      	bne.n	8103f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ef8:	2b03      	cmp	r3, #3
 8103efa:	d838      	bhi.n	8103f6e <DMA_CheckFifoParam+0xda>
 8103efc:	a201      	add	r2, pc, #4	; (adr r2, 8103f04 <DMA_CheckFifoParam+0x70>)
 8103efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f02:	bf00      	nop
 8103f04:	08103f15 	.word	0x08103f15
 8103f08:	08103f1b 	.word	0x08103f1b
 8103f0c:	08103f15 	.word	0x08103f15
 8103f10:	08103f2d 	.word	0x08103f2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8103f14:	2301      	movs	r3, #1
 8103f16:	73fb      	strb	r3, [r7, #15]
        break;
 8103f18:	e030      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103f22:	2b00      	cmp	r3, #0
 8103f24:	d025      	beq.n	8103f72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8103f26:	2301      	movs	r3, #1
 8103f28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103f2a:	e022      	b.n	8103f72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103f34:	d11f      	bne.n	8103f76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8103f36:	2301      	movs	r3, #1
 8103f38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103f3a:	e01c      	b.n	8103f76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f40:	2b02      	cmp	r3, #2
 8103f42:	d902      	bls.n	8103f4a <DMA_CheckFifoParam+0xb6>
 8103f44:	2b03      	cmp	r3, #3
 8103f46:	d003      	beq.n	8103f50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103f48:	e018      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103f4a:	2301      	movs	r3, #1
 8103f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8103f4e:	e015      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	d00e      	beq.n	8103f7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103f5c:	2301      	movs	r3, #1
 8103f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8103f60:	e00b      	b.n	8103f7a <DMA_CheckFifoParam+0xe6>
        break;
 8103f62:	bf00      	nop
 8103f64:	e00a      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        break;
 8103f66:	bf00      	nop
 8103f68:	e008      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        break;
 8103f6a:	bf00      	nop
 8103f6c:	e006      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        break;
 8103f6e:	bf00      	nop
 8103f70:	e004      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        break;
 8103f72:	bf00      	nop
 8103f74:	e002      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
        break;
 8103f76:	bf00      	nop
 8103f78:	e000      	b.n	8103f7c <DMA_CheckFifoParam+0xe8>
    break;
 8103f7a:	bf00      	nop
    }
  }

  return status;
 8103f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103f7e:	4618      	mov	r0, r3
 8103f80:	3714      	adds	r7, #20
 8103f82:	46bd      	mov	sp, r7
 8103f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f88:	4770      	bx	lr
 8103f8a:	bf00      	nop

08103f8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103f8c:	b480      	push	{r7}
 8103f8e:	b085      	sub	sp, #20
 8103f90:	af00      	add	r7, sp, #0
 8103f92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	4a3a      	ldr	r2, [pc, #232]	; (8104088 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d022      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a38      	ldr	r2, [pc, #224]	; (810408c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d01d      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a37      	ldr	r2, [pc, #220]	; (8104090 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d018      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	4a35      	ldr	r2, [pc, #212]	; (8104094 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d013      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	4a34      	ldr	r2, [pc, #208]	; (8104098 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d00e      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	4a32      	ldr	r2, [pc, #200]	; (810409c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8103fd2:	4293      	cmp	r3, r2
 8103fd4:	d009      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	4a31      	ldr	r2, [pc, #196]	; (81040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d004      	beq.n	8103fea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	4a2f      	ldr	r2, [pc, #188]	; (81040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d101      	bne.n	8103fee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103fea:	2301      	movs	r3, #1
 8103fec:	e000      	b.n	8103ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8103fee:	2300      	movs	r3, #0
 8103ff0:	2b00      	cmp	r3, #0
 8103ff2:	d01c      	beq.n	810402e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	b2db      	uxtb	r3, r3
 8103ffa:	3b08      	subs	r3, #8
 8103ffc:	4a2a      	ldr	r2, [pc, #168]	; (81040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8103ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8104002:	091b      	lsrs	r3, r3, #4
 8104004:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104006:	68fb      	ldr	r3, [r7, #12]
 8104008:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 810400c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104010:	009b      	lsls	r3, r3, #2
 8104012:	461a      	mov	r2, r3
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	4a24      	ldr	r2, [pc, #144]	; (81040ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 810401c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810401e:	68fb      	ldr	r3, [r7, #12]
 8104020:	f003 031f 	and.w	r3, r3, #31
 8104024:	2201      	movs	r2, #1
 8104026:	409a      	lsls	r2, r3
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 810402c:	e026      	b.n	810407c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	b2db      	uxtb	r3, r3
 8104034:	3b10      	subs	r3, #16
 8104036:	4a1e      	ldr	r2, [pc, #120]	; (81040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104038:	fba2 2303 	umull	r2, r3, r2, r3
 810403c:	091b      	lsrs	r3, r3, #4
 810403e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104040:	68bb      	ldr	r3, [r7, #8]
 8104042:	4a1c      	ldr	r2, [pc, #112]	; (81040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104044:	4293      	cmp	r3, r2
 8104046:	d806      	bhi.n	8104056 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104048:	68bb      	ldr	r3, [r7, #8]
 810404a:	4a1b      	ldr	r2, [pc, #108]	; (81040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d902      	bls.n	8104056 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	3308      	adds	r3, #8
 8104054:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104056:	68fb      	ldr	r3, [r7, #12]
 8104058:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 810405c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104060:	009b      	lsls	r3, r3, #2
 8104062:	461a      	mov	r2, r3
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	4a14      	ldr	r2, [pc, #80]	; (81040bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 810406c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	f003 031f 	and.w	r3, r3, #31
 8104074:	2201      	movs	r2, #1
 8104076:	409a      	lsls	r2, r3
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	669a      	str	r2, [r3, #104]	; 0x68
}
 810407c:	bf00      	nop
 810407e:	3714      	adds	r7, #20
 8104080:	46bd      	mov	sp, r7
 8104082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104086:	4770      	bx	lr
 8104088:	58025408 	.word	0x58025408
 810408c:	5802541c 	.word	0x5802541c
 8104090:	58025430 	.word	0x58025430
 8104094:	58025444 	.word	0x58025444
 8104098:	58025458 	.word	0x58025458
 810409c:	5802546c 	.word	0x5802546c
 81040a0:	58025480 	.word	0x58025480
 81040a4:	58025494 	.word	0x58025494
 81040a8:	cccccccd 	.word	0xcccccccd
 81040ac:	58025880 	.word	0x58025880
 81040b0:	aaaaaaab 	.word	0xaaaaaaab
 81040b4:	400204b8 	.word	0x400204b8
 81040b8:	4002040f 	.word	0x4002040f
 81040bc:	40020880 	.word	0x40020880

081040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81040c0:	b480      	push	{r7}
 81040c2:	b085      	sub	sp, #20
 81040c4:	af00      	add	r7, sp, #0
 81040c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	685b      	ldr	r3, [r3, #4]
 81040cc:	b2db      	uxtb	r3, r3
 81040ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	2b00      	cmp	r3, #0
 81040d4:	d04a      	beq.n	810416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81040d6:	68fb      	ldr	r3, [r7, #12]
 81040d8:	2b08      	cmp	r3, #8
 81040da:	d847      	bhi.n	810416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	4a25      	ldr	r2, [pc, #148]	; (8104178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81040e2:	4293      	cmp	r3, r2
 81040e4:	d022      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	4a24      	ldr	r2, [pc, #144]	; (810417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81040ec:	4293      	cmp	r3, r2
 81040ee:	d01d      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	4a22      	ldr	r2, [pc, #136]	; (8104180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81040f6:	4293      	cmp	r3, r2
 81040f8:	d018      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	681b      	ldr	r3, [r3, #0]
 81040fe:	4a21      	ldr	r2, [pc, #132]	; (8104184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104100:	4293      	cmp	r3, r2
 8104102:	d013      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	4a1f      	ldr	r2, [pc, #124]	; (8104188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810410a:	4293      	cmp	r3, r2
 810410c:	d00e      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	681b      	ldr	r3, [r3, #0]
 8104112:	4a1e      	ldr	r2, [pc, #120]	; (810418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104114:	4293      	cmp	r3, r2
 8104116:	d009      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	4a1c      	ldr	r2, [pc, #112]	; (8104190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810411e:	4293      	cmp	r3, r2
 8104120:	d004      	beq.n	810412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	4a1b      	ldr	r2, [pc, #108]	; (8104194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104128:	4293      	cmp	r3, r2
 810412a:	d101      	bne.n	8104130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 810412c:	2301      	movs	r3, #1
 810412e:	e000      	b.n	8104132 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104130:	2300      	movs	r3, #0
 8104132:	2b00      	cmp	r3, #0
 8104134:	d00a      	beq.n	810414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104136:	68fa      	ldr	r2, [r7, #12]
 8104138:	4b17      	ldr	r3, [pc, #92]	; (8104198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810413a:	4413      	add	r3, r2
 810413c:	009b      	lsls	r3, r3, #2
 810413e:	461a      	mov	r2, r3
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	4a15      	ldr	r2, [pc, #84]	; (810419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104148:	671a      	str	r2, [r3, #112]	; 0x70
 810414a:	e009      	b.n	8104160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810414c:	68fa      	ldr	r2, [r7, #12]
 810414e:	4b14      	ldr	r3, [pc, #80]	; (81041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104150:	4413      	add	r3, r2
 8104152:	009b      	lsls	r3, r3, #2
 8104154:	461a      	mov	r2, r3
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	4a11      	ldr	r2, [pc, #68]	; (81041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810415e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104160:	68fb      	ldr	r3, [r7, #12]
 8104162:	3b01      	subs	r3, #1
 8104164:	2201      	movs	r2, #1
 8104166:	409a      	lsls	r2, r3
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 810416c:	bf00      	nop
 810416e:	3714      	adds	r7, #20
 8104170:	46bd      	mov	sp, r7
 8104172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104176:	4770      	bx	lr
 8104178:	58025408 	.word	0x58025408
 810417c:	5802541c 	.word	0x5802541c
 8104180:	58025430 	.word	0x58025430
 8104184:	58025444 	.word	0x58025444
 8104188:	58025458 	.word	0x58025458
 810418c:	5802546c 	.word	0x5802546c
 8104190:	58025480 	.word	0x58025480
 8104194:	58025494 	.word	0x58025494
 8104198:	1600963f 	.word	0x1600963f
 810419c:	58025940 	.word	0x58025940
 81041a0:	1000823f 	.word	0x1000823f
 81041a4:	40020940 	.word	0x40020940

081041a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81041a8:	b480      	push	{r7}
 81041aa:	b089      	sub	sp, #36	; 0x24
 81041ac:	af00      	add	r7, sp, #0
 81041ae:	6078      	str	r0, [r7, #4]
 81041b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81041b2:	2300      	movs	r3, #0
 81041b4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81041b6:	4b89      	ldr	r3, [pc, #548]	; (81043dc <HAL_GPIO_Init+0x234>)
 81041b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81041ba:	e194      	b.n	81044e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81041bc:	683b      	ldr	r3, [r7, #0]
 81041be:	681a      	ldr	r2, [r3, #0]
 81041c0:	2101      	movs	r1, #1
 81041c2:	69fb      	ldr	r3, [r7, #28]
 81041c4:	fa01 f303 	lsl.w	r3, r1, r3
 81041c8:	4013      	ands	r3, r2
 81041ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81041cc:	693b      	ldr	r3, [r7, #16]
 81041ce:	2b00      	cmp	r3, #0
 81041d0:	f000 8186 	beq.w	81044e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81041d4:	683b      	ldr	r3, [r7, #0]
 81041d6:	685b      	ldr	r3, [r3, #4]
 81041d8:	f003 0303 	and.w	r3, r3, #3
 81041dc:	2b01      	cmp	r3, #1
 81041de:	d005      	beq.n	81041ec <HAL_GPIO_Init+0x44>
 81041e0:	683b      	ldr	r3, [r7, #0]
 81041e2:	685b      	ldr	r3, [r3, #4]
 81041e4:	f003 0303 	and.w	r3, r3, #3
 81041e8:	2b02      	cmp	r3, #2
 81041ea:	d130      	bne.n	810424e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	689b      	ldr	r3, [r3, #8]
 81041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81041f2:	69fb      	ldr	r3, [r7, #28]
 81041f4:	005b      	lsls	r3, r3, #1
 81041f6:	2203      	movs	r2, #3
 81041f8:	fa02 f303 	lsl.w	r3, r2, r3
 81041fc:	43db      	mvns	r3, r3
 81041fe:	69ba      	ldr	r2, [r7, #24]
 8104200:	4013      	ands	r3, r2
 8104202:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104204:	683b      	ldr	r3, [r7, #0]
 8104206:	68da      	ldr	r2, [r3, #12]
 8104208:	69fb      	ldr	r3, [r7, #28]
 810420a:	005b      	lsls	r3, r3, #1
 810420c:	fa02 f303 	lsl.w	r3, r2, r3
 8104210:	69ba      	ldr	r2, [r7, #24]
 8104212:	4313      	orrs	r3, r2
 8104214:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	69ba      	ldr	r2, [r7, #24]
 810421a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	685b      	ldr	r3, [r3, #4]
 8104220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104222:	2201      	movs	r2, #1
 8104224:	69fb      	ldr	r3, [r7, #28]
 8104226:	fa02 f303 	lsl.w	r3, r2, r3
 810422a:	43db      	mvns	r3, r3
 810422c:	69ba      	ldr	r2, [r7, #24]
 810422e:	4013      	ands	r3, r2
 8104230:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104232:	683b      	ldr	r3, [r7, #0]
 8104234:	685b      	ldr	r3, [r3, #4]
 8104236:	091b      	lsrs	r3, r3, #4
 8104238:	f003 0201 	and.w	r2, r3, #1
 810423c:	69fb      	ldr	r3, [r7, #28]
 810423e:	fa02 f303 	lsl.w	r3, r2, r3
 8104242:	69ba      	ldr	r2, [r7, #24]
 8104244:	4313      	orrs	r3, r2
 8104246:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	69ba      	ldr	r2, [r7, #24]
 810424c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810424e:	683b      	ldr	r3, [r7, #0]
 8104250:	685b      	ldr	r3, [r3, #4]
 8104252:	f003 0303 	and.w	r3, r3, #3
 8104256:	2b03      	cmp	r3, #3
 8104258:	d017      	beq.n	810428a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	68db      	ldr	r3, [r3, #12]
 810425e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104260:	69fb      	ldr	r3, [r7, #28]
 8104262:	005b      	lsls	r3, r3, #1
 8104264:	2203      	movs	r2, #3
 8104266:	fa02 f303 	lsl.w	r3, r2, r3
 810426a:	43db      	mvns	r3, r3
 810426c:	69ba      	ldr	r2, [r7, #24]
 810426e:	4013      	ands	r3, r2
 8104270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104272:	683b      	ldr	r3, [r7, #0]
 8104274:	689a      	ldr	r2, [r3, #8]
 8104276:	69fb      	ldr	r3, [r7, #28]
 8104278:	005b      	lsls	r3, r3, #1
 810427a:	fa02 f303 	lsl.w	r3, r2, r3
 810427e:	69ba      	ldr	r2, [r7, #24]
 8104280:	4313      	orrs	r3, r2
 8104282:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	69ba      	ldr	r2, [r7, #24]
 8104288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810428a:	683b      	ldr	r3, [r7, #0]
 810428c:	685b      	ldr	r3, [r3, #4]
 810428e:	f003 0303 	and.w	r3, r3, #3
 8104292:	2b02      	cmp	r3, #2
 8104294:	d123      	bne.n	81042de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104296:	69fb      	ldr	r3, [r7, #28]
 8104298:	08da      	lsrs	r2, r3, #3
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	3208      	adds	r2, #8
 810429e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81042a4:	69fb      	ldr	r3, [r7, #28]
 81042a6:	f003 0307 	and.w	r3, r3, #7
 81042aa:	009b      	lsls	r3, r3, #2
 81042ac:	220f      	movs	r2, #15
 81042ae:	fa02 f303 	lsl.w	r3, r2, r3
 81042b2:	43db      	mvns	r3, r3
 81042b4:	69ba      	ldr	r2, [r7, #24]
 81042b6:	4013      	ands	r3, r2
 81042b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81042ba:	683b      	ldr	r3, [r7, #0]
 81042bc:	691a      	ldr	r2, [r3, #16]
 81042be:	69fb      	ldr	r3, [r7, #28]
 81042c0:	f003 0307 	and.w	r3, r3, #7
 81042c4:	009b      	lsls	r3, r3, #2
 81042c6:	fa02 f303 	lsl.w	r3, r2, r3
 81042ca:	69ba      	ldr	r2, [r7, #24]
 81042cc:	4313      	orrs	r3, r2
 81042ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81042d0:	69fb      	ldr	r3, [r7, #28]
 81042d2:	08da      	lsrs	r2, r3, #3
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	3208      	adds	r2, #8
 81042d8:	69b9      	ldr	r1, [r7, #24]
 81042da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81042e4:	69fb      	ldr	r3, [r7, #28]
 81042e6:	005b      	lsls	r3, r3, #1
 81042e8:	2203      	movs	r2, #3
 81042ea:	fa02 f303 	lsl.w	r3, r2, r3
 81042ee:	43db      	mvns	r3, r3
 81042f0:	69ba      	ldr	r2, [r7, #24]
 81042f2:	4013      	ands	r3, r2
 81042f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81042f6:	683b      	ldr	r3, [r7, #0]
 81042f8:	685b      	ldr	r3, [r3, #4]
 81042fa:	f003 0203 	and.w	r2, r3, #3
 81042fe:	69fb      	ldr	r3, [r7, #28]
 8104300:	005b      	lsls	r3, r3, #1
 8104302:	fa02 f303 	lsl.w	r3, r2, r3
 8104306:	69ba      	ldr	r2, [r7, #24]
 8104308:	4313      	orrs	r3, r2
 810430a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	69ba      	ldr	r2, [r7, #24]
 8104310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104312:	683b      	ldr	r3, [r7, #0]
 8104314:	685b      	ldr	r3, [r3, #4]
 8104316:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810431a:	2b00      	cmp	r3, #0
 810431c:	f000 80e0 	beq.w	81044e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104320:	4b2f      	ldr	r3, [pc, #188]	; (81043e0 <HAL_GPIO_Init+0x238>)
 8104322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104326:	4a2e      	ldr	r2, [pc, #184]	; (81043e0 <HAL_GPIO_Init+0x238>)
 8104328:	f043 0302 	orr.w	r3, r3, #2
 810432c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104330:	4b2b      	ldr	r3, [pc, #172]	; (81043e0 <HAL_GPIO_Init+0x238>)
 8104332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104336:	f003 0302 	and.w	r3, r3, #2
 810433a:	60fb      	str	r3, [r7, #12]
 810433c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810433e:	4a29      	ldr	r2, [pc, #164]	; (81043e4 <HAL_GPIO_Init+0x23c>)
 8104340:	69fb      	ldr	r3, [r7, #28]
 8104342:	089b      	lsrs	r3, r3, #2
 8104344:	3302      	adds	r3, #2
 8104346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810434a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810434c:	69fb      	ldr	r3, [r7, #28]
 810434e:	f003 0303 	and.w	r3, r3, #3
 8104352:	009b      	lsls	r3, r3, #2
 8104354:	220f      	movs	r2, #15
 8104356:	fa02 f303 	lsl.w	r3, r2, r3
 810435a:	43db      	mvns	r3, r3
 810435c:	69ba      	ldr	r2, [r7, #24]
 810435e:	4013      	ands	r3, r2
 8104360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	4a20      	ldr	r2, [pc, #128]	; (81043e8 <HAL_GPIO_Init+0x240>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d052      	beq.n	8104410 <HAL_GPIO_Init+0x268>
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	4a1f      	ldr	r2, [pc, #124]	; (81043ec <HAL_GPIO_Init+0x244>)
 810436e:	4293      	cmp	r3, r2
 8104370:	d031      	beq.n	81043d6 <HAL_GPIO_Init+0x22e>
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	4a1e      	ldr	r2, [pc, #120]	; (81043f0 <HAL_GPIO_Init+0x248>)
 8104376:	4293      	cmp	r3, r2
 8104378:	d02b      	beq.n	81043d2 <HAL_GPIO_Init+0x22a>
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	4a1d      	ldr	r2, [pc, #116]	; (81043f4 <HAL_GPIO_Init+0x24c>)
 810437e:	4293      	cmp	r3, r2
 8104380:	d025      	beq.n	81043ce <HAL_GPIO_Init+0x226>
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	4a1c      	ldr	r2, [pc, #112]	; (81043f8 <HAL_GPIO_Init+0x250>)
 8104386:	4293      	cmp	r3, r2
 8104388:	d01f      	beq.n	81043ca <HAL_GPIO_Init+0x222>
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	4a1b      	ldr	r2, [pc, #108]	; (81043fc <HAL_GPIO_Init+0x254>)
 810438e:	4293      	cmp	r3, r2
 8104390:	d019      	beq.n	81043c6 <HAL_GPIO_Init+0x21e>
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	4a1a      	ldr	r2, [pc, #104]	; (8104400 <HAL_GPIO_Init+0x258>)
 8104396:	4293      	cmp	r3, r2
 8104398:	d013      	beq.n	81043c2 <HAL_GPIO_Init+0x21a>
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	4a19      	ldr	r2, [pc, #100]	; (8104404 <HAL_GPIO_Init+0x25c>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d00d      	beq.n	81043be <HAL_GPIO_Init+0x216>
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	4a18      	ldr	r2, [pc, #96]	; (8104408 <HAL_GPIO_Init+0x260>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d007      	beq.n	81043ba <HAL_GPIO_Init+0x212>
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	4a17      	ldr	r2, [pc, #92]	; (810440c <HAL_GPIO_Init+0x264>)
 81043ae:	4293      	cmp	r3, r2
 81043b0:	d101      	bne.n	81043b6 <HAL_GPIO_Init+0x20e>
 81043b2:	2309      	movs	r3, #9
 81043b4:	e02d      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043b6:	230a      	movs	r3, #10
 81043b8:	e02b      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043ba:	2308      	movs	r3, #8
 81043bc:	e029      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043be:	2307      	movs	r3, #7
 81043c0:	e027      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043c2:	2306      	movs	r3, #6
 81043c4:	e025      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043c6:	2305      	movs	r3, #5
 81043c8:	e023      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043ca:	2304      	movs	r3, #4
 81043cc:	e021      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043ce:	2303      	movs	r3, #3
 81043d0:	e01f      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043d2:	2302      	movs	r3, #2
 81043d4:	e01d      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043d6:	2301      	movs	r3, #1
 81043d8:	e01b      	b.n	8104412 <HAL_GPIO_Init+0x26a>
 81043da:	bf00      	nop
 81043dc:	580000c0 	.word	0x580000c0
 81043e0:	58024400 	.word	0x58024400
 81043e4:	58000400 	.word	0x58000400
 81043e8:	58020000 	.word	0x58020000
 81043ec:	58020400 	.word	0x58020400
 81043f0:	58020800 	.word	0x58020800
 81043f4:	58020c00 	.word	0x58020c00
 81043f8:	58021000 	.word	0x58021000
 81043fc:	58021400 	.word	0x58021400
 8104400:	58021800 	.word	0x58021800
 8104404:	58021c00 	.word	0x58021c00
 8104408:	58022000 	.word	0x58022000
 810440c:	58022400 	.word	0x58022400
 8104410:	2300      	movs	r3, #0
 8104412:	69fa      	ldr	r2, [r7, #28]
 8104414:	f002 0203 	and.w	r2, r2, #3
 8104418:	0092      	lsls	r2, r2, #2
 810441a:	4093      	lsls	r3, r2
 810441c:	69ba      	ldr	r2, [r7, #24]
 810441e:	4313      	orrs	r3, r2
 8104420:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104422:	4938      	ldr	r1, [pc, #224]	; (8104504 <HAL_GPIO_Init+0x35c>)
 8104424:	69fb      	ldr	r3, [r7, #28]
 8104426:	089b      	lsrs	r3, r3, #2
 8104428:	3302      	adds	r3, #2
 810442a:	69ba      	ldr	r2, [r7, #24]
 810442c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104438:	693b      	ldr	r3, [r7, #16]
 810443a:	43db      	mvns	r3, r3
 810443c:	69ba      	ldr	r2, [r7, #24]
 810443e:	4013      	ands	r3, r2
 8104440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104442:	683b      	ldr	r3, [r7, #0]
 8104444:	685b      	ldr	r3, [r3, #4]
 8104446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810444a:	2b00      	cmp	r3, #0
 810444c:	d003      	beq.n	8104456 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810444e:	69ba      	ldr	r2, [r7, #24]
 8104450:	693b      	ldr	r3, [r7, #16]
 8104452:	4313      	orrs	r3, r2
 8104454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810445a:	69bb      	ldr	r3, [r7, #24]
 810445c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810445e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104462:	685b      	ldr	r3, [r3, #4]
 8104464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104466:	693b      	ldr	r3, [r7, #16]
 8104468:	43db      	mvns	r3, r3
 810446a:	69ba      	ldr	r2, [r7, #24]
 810446c:	4013      	ands	r3, r2
 810446e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104470:	683b      	ldr	r3, [r7, #0]
 8104472:	685b      	ldr	r3, [r3, #4]
 8104474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104478:	2b00      	cmp	r3, #0
 810447a:	d003      	beq.n	8104484 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810447c:	69ba      	ldr	r2, [r7, #24]
 810447e:	693b      	ldr	r3, [r7, #16]
 8104480:	4313      	orrs	r3, r2
 8104482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104488:	69bb      	ldr	r3, [r7, #24]
 810448a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810448c:	697b      	ldr	r3, [r7, #20]
 810448e:	685b      	ldr	r3, [r3, #4]
 8104490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104492:	693b      	ldr	r3, [r7, #16]
 8104494:	43db      	mvns	r3, r3
 8104496:	69ba      	ldr	r2, [r7, #24]
 8104498:	4013      	ands	r3, r2
 810449a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810449c:	683b      	ldr	r3, [r7, #0]
 810449e:	685b      	ldr	r3, [r3, #4]
 81044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	d003      	beq.n	81044b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81044a8:	69ba      	ldr	r2, [r7, #24]
 81044aa:	693b      	ldr	r3, [r7, #16]
 81044ac:	4313      	orrs	r3, r2
 81044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81044b0:	697b      	ldr	r3, [r7, #20]
 81044b2:	69ba      	ldr	r2, [r7, #24]
 81044b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81044b6:	697b      	ldr	r3, [r7, #20]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81044bc:	693b      	ldr	r3, [r7, #16]
 81044be:	43db      	mvns	r3, r3
 81044c0:	69ba      	ldr	r2, [r7, #24]
 81044c2:	4013      	ands	r3, r2
 81044c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81044c6:	683b      	ldr	r3, [r7, #0]
 81044c8:	685b      	ldr	r3, [r3, #4]
 81044ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d003      	beq.n	81044da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81044d2:	69ba      	ldr	r2, [r7, #24]
 81044d4:	693b      	ldr	r3, [r7, #16]
 81044d6:	4313      	orrs	r3, r2
 81044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81044da:	697b      	ldr	r3, [r7, #20]
 81044dc:	69ba      	ldr	r2, [r7, #24]
 81044de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81044e0:	69fb      	ldr	r3, [r7, #28]
 81044e2:	3301      	adds	r3, #1
 81044e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81044e6:	683b      	ldr	r3, [r7, #0]
 81044e8:	681a      	ldr	r2, [r3, #0]
 81044ea:	69fb      	ldr	r3, [r7, #28]
 81044ec:	fa22 f303 	lsr.w	r3, r2, r3
 81044f0:	2b00      	cmp	r3, #0
 81044f2:	f47f ae63 	bne.w	81041bc <HAL_GPIO_Init+0x14>
  }
}
 81044f6:	bf00      	nop
 81044f8:	bf00      	nop
 81044fa:	3724      	adds	r7, #36	; 0x24
 81044fc:	46bd      	mov	sp, r7
 81044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104502:	4770      	bx	lr
 8104504:	58000400 	.word	0x58000400

08104508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104508:	b480      	push	{r7}
 810450a:	b083      	sub	sp, #12
 810450c:	af00      	add	r7, sp, #0
 810450e:	6078      	str	r0, [r7, #4]
 8104510:	460b      	mov	r3, r1
 8104512:	807b      	strh	r3, [r7, #2]
 8104514:	4613      	mov	r3, r2
 8104516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104518:	787b      	ldrb	r3, [r7, #1]
 810451a:	2b00      	cmp	r3, #0
 810451c:	d003      	beq.n	8104526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810451e:	887a      	ldrh	r2, [r7, #2]
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104524:	e003      	b.n	810452e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104526:	887b      	ldrh	r3, [r7, #2]
 8104528:	041a      	lsls	r2, r3, #16
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	619a      	str	r2, [r3, #24]
}
 810452e:	bf00      	nop
 8104530:	370c      	adds	r7, #12
 8104532:	46bd      	mov	sp, r7
 8104534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104538:	4770      	bx	lr

0810453a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810453a:	b580      	push	{r7, lr}
 810453c:	b082      	sub	sp, #8
 810453e:	af00      	add	r7, sp, #0
 8104540:	4603      	mov	r3, r0
 8104542:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8104544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104548:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 810454c:	88fb      	ldrh	r3, [r7, #6]
 810454e:	4013      	ands	r3, r2
 8104550:	2b00      	cmp	r3, #0
 8104552:	d008      	beq.n	8104566 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8104554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104558:	88fb      	ldrh	r3, [r7, #6]
 810455a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810455e:	88fb      	ldrh	r3, [r7, #6]
 8104560:	4618      	mov	r0, r3
 8104562:	f000 f804 	bl	810456e <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8104566:	bf00      	nop
 8104568:	3708      	adds	r7, #8
 810456a:	46bd      	mov	sp, r7
 810456c:	bd80      	pop	{r7, pc}

0810456e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 810456e:	b480      	push	{r7}
 8104570:	b083      	sub	sp, #12
 8104572:	af00      	add	r7, sp, #0
 8104574:	4603      	mov	r3, r0
 8104576:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8104578:	bf00      	nop
 810457a:	370c      	adds	r7, #12
 810457c:	46bd      	mov	sp, r7
 810457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104582:	4770      	bx	lr

08104584 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104584:	b480      	push	{r7}
 8104586:	b083      	sub	sp, #12
 8104588:	af00      	add	r7, sp, #0
 810458a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810458c:	4b05      	ldr	r3, [pc, #20]	; (81045a4 <HAL_HSEM_ActivateNotification+0x20>)
 810458e:	681a      	ldr	r2, [r3, #0]
 8104590:	4904      	ldr	r1, [pc, #16]	; (81045a4 <HAL_HSEM_ActivateNotification+0x20>)
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	4313      	orrs	r3, r2
 8104596:	600b      	str	r3, [r1, #0]
#endif
}
 8104598:	bf00      	nop
 810459a:	370c      	adds	r7, #12
 810459c:	46bd      	mov	sp, r7
 810459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045a2:	4770      	bx	lr
 81045a4:	58026510 	.word	0x58026510

081045a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81045a8:	b580      	push	{r7, lr}
 81045aa:	b082      	sub	sp, #8
 81045ac:	af00      	add	r7, sp, #0
 81045ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	2b00      	cmp	r3, #0
 81045b4:	d101      	bne.n	81045ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81045b6:	2301      	movs	r3, #1
 81045b8:	e081      	b.n	81046be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81045c0:	b2db      	uxtb	r3, r3
 81045c2:	2b00      	cmp	r3, #0
 81045c4:	d106      	bne.n	81045d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	2200      	movs	r2, #0
 81045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81045ce:	6878      	ldr	r0, [r7, #4]
 81045d0:	f7fd fb86 	bl	8101ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	2224      	movs	r2, #36	; 0x24
 81045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	681a      	ldr	r2, [r3, #0]
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	f022 0201 	bic.w	r2, r2, #1
 81045ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	685a      	ldr	r2, [r3, #4]
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81045f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	689a      	ldr	r2, [r3, #8]
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104608:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	68db      	ldr	r3, [r3, #12]
 810460e:	2b01      	cmp	r3, #1
 8104610:	d107      	bne.n	8104622 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	689a      	ldr	r2, [r3, #8]
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	681b      	ldr	r3, [r3, #0]
 810461a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810461e:	609a      	str	r2, [r3, #8]
 8104620:	e006      	b.n	8104630 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	689a      	ldr	r2, [r3, #8]
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810462e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	68db      	ldr	r3, [r3, #12]
 8104634:	2b02      	cmp	r3, #2
 8104636:	d104      	bne.n	8104642 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104640:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	685b      	ldr	r3, [r3, #4]
 8104648:	687a      	ldr	r2, [r7, #4]
 810464a:	6812      	ldr	r2, [r2, #0]
 810464c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104654:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	68da      	ldr	r2, [r3, #12]
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	681b      	ldr	r3, [r3, #0]
 8104660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104664:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	691a      	ldr	r2, [r3, #16]
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	695b      	ldr	r3, [r3, #20]
 810466e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	699b      	ldr	r3, [r3, #24]
 8104676:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	681b      	ldr	r3, [r3, #0]
 810467c:	430a      	orrs	r2, r1
 810467e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	69d9      	ldr	r1, [r3, #28]
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	6a1a      	ldr	r2, [r3, #32]
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	430a      	orrs	r2, r1
 810468e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	681a      	ldr	r2, [r3, #0]
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	f042 0201 	orr.w	r2, r2, #1
 810469e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	2200      	movs	r2, #0
 81046a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	2220      	movs	r2, #32
 81046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	2200      	movs	r2, #0
 81046b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	2200      	movs	r2, #0
 81046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81046bc:	2300      	movs	r3, #0
}
 81046be:	4618      	mov	r0, r3
 81046c0:	3708      	adds	r7, #8
 81046c2:	46bd      	mov	sp, r7
 81046c4:	bd80      	pop	{r7, pc}
	...

081046c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81046c8:	b580      	push	{r7, lr}
 81046ca:	b088      	sub	sp, #32
 81046cc:	af02      	add	r7, sp, #8
 81046ce:	60f8      	str	r0, [r7, #12]
 81046d0:	4608      	mov	r0, r1
 81046d2:	4611      	mov	r1, r2
 81046d4:	461a      	mov	r2, r3
 81046d6:	4603      	mov	r3, r0
 81046d8:	817b      	strh	r3, [r7, #10]
 81046da:	460b      	mov	r3, r1
 81046dc:	813b      	strh	r3, [r7, #8]
 81046de:	4613      	mov	r3, r2
 81046e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81046e2:	68fb      	ldr	r3, [r7, #12]
 81046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81046e8:	b2db      	uxtb	r3, r3
 81046ea:	2b20      	cmp	r3, #32
 81046ec:	f040 80f9 	bne.w	81048e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81046f0:	6a3b      	ldr	r3, [r7, #32]
 81046f2:	2b00      	cmp	r3, #0
 81046f4:	d002      	beq.n	81046fc <HAL_I2C_Mem_Write+0x34>
 81046f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81046f8:	2b00      	cmp	r3, #0
 81046fa:	d105      	bne.n	8104708 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104702:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104704:	2301      	movs	r3, #1
 8104706:	e0ed      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810470e:	2b01      	cmp	r3, #1
 8104710:	d101      	bne.n	8104716 <HAL_I2C_Mem_Write+0x4e>
 8104712:	2302      	movs	r3, #2
 8104714:	e0e6      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
 8104716:	68fb      	ldr	r3, [r7, #12]
 8104718:	2201      	movs	r2, #1
 810471a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810471e:	f7fd ff53 	bl	81025c8 <HAL_GetTick>
 8104722:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104724:	697b      	ldr	r3, [r7, #20]
 8104726:	9300      	str	r3, [sp, #0]
 8104728:	2319      	movs	r3, #25
 810472a:	2201      	movs	r2, #1
 810472c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104730:	68f8      	ldr	r0, [r7, #12]
 8104732:	f000 fbcb 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104736:	4603      	mov	r3, r0
 8104738:	2b00      	cmp	r3, #0
 810473a:	d001      	beq.n	8104740 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 810473c:	2301      	movs	r3, #1
 810473e:	e0d1      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	2221      	movs	r2, #33	; 0x21
 8104744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104748:	68fb      	ldr	r3, [r7, #12]
 810474a:	2240      	movs	r2, #64	; 0x40
 810474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	2200      	movs	r2, #0
 8104754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104756:	68fb      	ldr	r3, [r7, #12]
 8104758:	6a3a      	ldr	r2, [r7, #32]
 810475a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	2200      	movs	r2, #0
 8104766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104768:	88f8      	ldrh	r0, [r7, #6]
 810476a:	893a      	ldrh	r2, [r7, #8]
 810476c:	8979      	ldrh	r1, [r7, #10]
 810476e:	697b      	ldr	r3, [r7, #20]
 8104770:	9301      	str	r3, [sp, #4]
 8104772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104774:	9300      	str	r3, [sp, #0]
 8104776:	4603      	mov	r3, r0
 8104778:	68f8      	ldr	r0, [r7, #12]
 810477a:	f000 fadb 	bl	8104d34 <I2C_RequestMemoryWrite>
 810477e:	4603      	mov	r3, r0
 8104780:	2b00      	cmp	r3, #0
 8104782:	d005      	beq.n	8104790 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104784:	68fb      	ldr	r3, [r7, #12]
 8104786:	2200      	movs	r2, #0
 8104788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810478c:	2301      	movs	r3, #1
 810478e:	e0a9      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104794:	b29b      	uxth	r3, r3
 8104796:	2bff      	cmp	r3, #255	; 0xff
 8104798:	d90e      	bls.n	81047b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	22ff      	movs	r2, #255	; 0xff
 810479e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81047a0:	68fb      	ldr	r3, [r7, #12]
 81047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81047a4:	b2da      	uxtb	r2, r3
 81047a6:	8979      	ldrh	r1, [r7, #10]
 81047a8:	2300      	movs	r3, #0
 81047aa:	9300      	str	r3, [sp, #0]
 81047ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81047b0:	68f8      	ldr	r0, [r7, #12]
 81047b2:	f000 fd33 	bl	810521c <I2C_TransferConfig>
 81047b6:	e00f      	b.n	81047d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81047b8:	68fb      	ldr	r3, [r7, #12]
 81047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81047bc:	b29a      	uxth	r2, r3
 81047be:	68fb      	ldr	r3, [r7, #12]
 81047c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81047c2:	68fb      	ldr	r3, [r7, #12]
 81047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81047c6:	b2da      	uxtb	r2, r3
 81047c8:	8979      	ldrh	r1, [r7, #10]
 81047ca:	2300      	movs	r3, #0
 81047cc:	9300      	str	r3, [sp, #0]
 81047ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81047d2:	68f8      	ldr	r0, [r7, #12]
 81047d4:	f000 fd22 	bl	810521c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81047d8:	697a      	ldr	r2, [r7, #20]
 81047da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81047dc:	68f8      	ldr	r0, [r7, #12]
 81047de:	f000 fbb5 	bl	8104f4c <I2C_WaitOnTXISFlagUntilTimeout>
 81047e2:	4603      	mov	r3, r0
 81047e4:	2b00      	cmp	r3, #0
 81047e6:	d001      	beq.n	81047ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81047e8:	2301      	movs	r3, #1
 81047ea:	e07b      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81047ec:	68fb      	ldr	r3, [r7, #12]
 81047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047f0:	781a      	ldrb	r2, [r3, #0]
 81047f2:	68fb      	ldr	r3, [r7, #12]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047fc:	1c5a      	adds	r2, r3, #1
 81047fe:	68fb      	ldr	r3, [r7, #12]
 8104800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104802:	68fb      	ldr	r3, [r7, #12]
 8104804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104806:	b29b      	uxth	r3, r3
 8104808:	3b01      	subs	r3, #1
 810480a:	b29a      	uxth	r2, r3
 810480c:	68fb      	ldr	r3, [r7, #12]
 810480e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104810:	68fb      	ldr	r3, [r7, #12]
 8104812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104814:	3b01      	subs	r3, #1
 8104816:	b29a      	uxth	r2, r3
 8104818:	68fb      	ldr	r3, [r7, #12]
 810481a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104820:	b29b      	uxth	r3, r3
 8104822:	2b00      	cmp	r3, #0
 8104824:	d034      	beq.n	8104890 <HAL_I2C_Mem_Write+0x1c8>
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810482a:	2b00      	cmp	r3, #0
 810482c:	d130      	bne.n	8104890 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810482e:	697b      	ldr	r3, [r7, #20]
 8104830:	9300      	str	r3, [sp, #0]
 8104832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104834:	2200      	movs	r2, #0
 8104836:	2180      	movs	r1, #128	; 0x80
 8104838:	68f8      	ldr	r0, [r7, #12]
 810483a:	f000 fb47 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 810483e:	4603      	mov	r3, r0
 8104840:	2b00      	cmp	r3, #0
 8104842:	d001      	beq.n	8104848 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104844:	2301      	movs	r3, #1
 8104846:	e04d      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104848:	68fb      	ldr	r3, [r7, #12]
 810484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810484c:	b29b      	uxth	r3, r3
 810484e:	2bff      	cmp	r3, #255	; 0xff
 8104850:	d90e      	bls.n	8104870 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104852:	68fb      	ldr	r3, [r7, #12]
 8104854:	22ff      	movs	r2, #255	; 0xff
 8104856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810485c:	b2da      	uxtb	r2, r3
 810485e:	8979      	ldrh	r1, [r7, #10]
 8104860:	2300      	movs	r3, #0
 8104862:	9300      	str	r3, [sp, #0]
 8104864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104868:	68f8      	ldr	r0, [r7, #12]
 810486a:	f000 fcd7 	bl	810521c <I2C_TransferConfig>
 810486e:	e00f      	b.n	8104890 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104870:	68fb      	ldr	r3, [r7, #12]
 8104872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104874:	b29a      	uxth	r2, r3
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810487e:	b2da      	uxtb	r2, r3
 8104880:	8979      	ldrh	r1, [r7, #10]
 8104882:	2300      	movs	r3, #0
 8104884:	9300      	str	r3, [sp, #0]
 8104886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810488a:	68f8      	ldr	r0, [r7, #12]
 810488c:	f000 fcc6 	bl	810521c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104894:	b29b      	uxth	r3, r3
 8104896:	2b00      	cmp	r3, #0
 8104898:	d19e      	bne.n	81047d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810489a:	697a      	ldr	r2, [r7, #20]
 810489c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810489e:	68f8      	ldr	r0, [r7, #12]
 81048a0:	f000 fb94 	bl	8104fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 81048a4:	4603      	mov	r3, r0
 81048a6:	2b00      	cmp	r3, #0
 81048a8:	d001      	beq.n	81048ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81048aa:	2301      	movs	r3, #1
 81048ac:	e01a      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81048ae:	68fb      	ldr	r3, [r7, #12]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	2220      	movs	r2, #32
 81048b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81048b6:	68fb      	ldr	r3, [r7, #12]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	6859      	ldr	r1, [r3, #4]
 81048bc:	68fb      	ldr	r3, [r7, #12]
 81048be:	681a      	ldr	r2, [r3, #0]
 81048c0:	4b0a      	ldr	r3, [pc, #40]	; (81048ec <HAL_I2C_Mem_Write+0x224>)
 81048c2:	400b      	ands	r3, r1
 81048c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	2220      	movs	r2, #32
 81048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81048ce:	68fb      	ldr	r3, [r7, #12]
 81048d0:	2200      	movs	r2, #0
 81048d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81048d6:	68fb      	ldr	r3, [r7, #12]
 81048d8:	2200      	movs	r2, #0
 81048da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81048de:	2300      	movs	r3, #0
 81048e0:	e000      	b.n	81048e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81048e2:	2302      	movs	r3, #2
  }
}
 81048e4:	4618      	mov	r0, r3
 81048e6:	3718      	adds	r7, #24
 81048e8:	46bd      	mov	sp, r7
 81048ea:	bd80      	pop	{r7, pc}
 81048ec:	fe00e800 	.word	0xfe00e800

081048f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81048f0:	b580      	push	{r7, lr}
 81048f2:	b088      	sub	sp, #32
 81048f4:	af02      	add	r7, sp, #8
 81048f6:	60f8      	str	r0, [r7, #12]
 81048f8:	4608      	mov	r0, r1
 81048fa:	4611      	mov	r1, r2
 81048fc:	461a      	mov	r2, r3
 81048fe:	4603      	mov	r3, r0
 8104900:	817b      	strh	r3, [r7, #10]
 8104902:	460b      	mov	r3, r1
 8104904:	813b      	strh	r3, [r7, #8]
 8104906:	4613      	mov	r3, r2
 8104908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104910:	b2db      	uxtb	r3, r3
 8104912:	2b20      	cmp	r3, #32
 8104914:	f040 80fd 	bne.w	8104b12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8104918:	6a3b      	ldr	r3, [r7, #32]
 810491a:	2b00      	cmp	r3, #0
 810491c:	d002      	beq.n	8104924 <HAL_I2C_Mem_Read+0x34>
 810491e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104920:	2b00      	cmp	r3, #0
 8104922:	d105      	bne.n	8104930 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104924:	68fb      	ldr	r3, [r7, #12]
 8104926:	f44f 7200 	mov.w	r2, #512	; 0x200
 810492a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810492c:	2301      	movs	r3, #1
 810492e:	e0f1      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104936:	2b01      	cmp	r3, #1
 8104938:	d101      	bne.n	810493e <HAL_I2C_Mem_Read+0x4e>
 810493a:	2302      	movs	r3, #2
 810493c:	e0ea      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	2201      	movs	r2, #1
 8104942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104946:	f7fd fe3f 	bl	81025c8 <HAL_GetTick>
 810494a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810494c:	697b      	ldr	r3, [r7, #20]
 810494e:	9300      	str	r3, [sp, #0]
 8104950:	2319      	movs	r3, #25
 8104952:	2201      	movs	r2, #1
 8104954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104958:	68f8      	ldr	r0, [r7, #12]
 810495a:	f000 fab7 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 810495e:	4603      	mov	r3, r0
 8104960:	2b00      	cmp	r3, #0
 8104962:	d001      	beq.n	8104968 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8104964:	2301      	movs	r3, #1
 8104966:	e0d5      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	2222      	movs	r2, #34	; 0x22
 810496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104970:	68fb      	ldr	r3, [r7, #12]
 8104972:	2240      	movs	r2, #64	; 0x40
 8104974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104978:	68fb      	ldr	r3, [r7, #12]
 810497a:	2200      	movs	r2, #0
 810497c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810497e:	68fb      	ldr	r3, [r7, #12]
 8104980:	6a3a      	ldr	r2, [r7, #32]
 8104982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810498a:	68fb      	ldr	r3, [r7, #12]
 810498c:	2200      	movs	r2, #0
 810498e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104990:	88f8      	ldrh	r0, [r7, #6]
 8104992:	893a      	ldrh	r2, [r7, #8]
 8104994:	8979      	ldrh	r1, [r7, #10]
 8104996:	697b      	ldr	r3, [r7, #20]
 8104998:	9301      	str	r3, [sp, #4]
 810499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810499c:	9300      	str	r3, [sp, #0]
 810499e:	4603      	mov	r3, r0
 81049a0:	68f8      	ldr	r0, [r7, #12]
 81049a2:	f000 fa1b 	bl	8104ddc <I2C_RequestMemoryRead>
 81049a6:	4603      	mov	r3, r0
 81049a8:	2b00      	cmp	r3, #0
 81049aa:	d005      	beq.n	81049b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	2200      	movs	r2, #0
 81049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81049b4:	2301      	movs	r3, #1
 81049b6:	e0ad      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049bc:	b29b      	uxth	r3, r3
 81049be:	2bff      	cmp	r3, #255	; 0xff
 81049c0:	d90e      	bls.n	81049e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	22ff      	movs	r2, #255	; 0xff
 81049c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81049c8:	68fb      	ldr	r3, [r7, #12]
 81049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049cc:	b2da      	uxtb	r2, r3
 81049ce:	8979      	ldrh	r1, [r7, #10]
 81049d0:	4b52      	ldr	r3, [pc, #328]	; (8104b1c <HAL_I2C_Mem_Read+0x22c>)
 81049d2:	9300      	str	r3, [sp, #0]
 81049d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81049d8:	68f8      	ldr	r0, [r7, #12]
 81049da:	f000 fc1f 	bl	810521c <I2C_TransferConfig>
 81049de:	e00f      	b.n	8104a00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049e4:	b29a      	uxth	r2, r3
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81049ea:	68fb      	ldr	r3, [r7, #12]
 81049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049ee:	b2da      	uxtb	r2, r3
 81049f0:	8979      	ldrh	r1, [r7, #10]
 81049f2:	4b4a      	ldr	r3, [pc, #296]	; (8104b1c <HAL_I2C_Mem_Read+0x22c>)
 81049f4:	9300      	str	r3, [sp, #0]
 81049f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81049fa:	68f8      	ldr	r0, [r7, #12]
 81049fc:	f000 fc0e 	bl	810521c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104a00:	697b      	ldr	r3, [r7, #20]
 8104a02:	9300      	str	r3, [sp, #0]
 8104a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a06:	2200      	movs	r2, #0
 8104a08:	2104      	movs	r1, #4
 8104a0a:	68f8      	ldr	r0, [r7, #12]
 8104a0c:	f000 fa5e 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104a10:	4603      	mov	r3, r0
 8104a12:	2b00      	cmp	r3, #0
 8104a14:	d001      	beq.n	8104a1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8104a16:	2301      	movs	r3, #1
 8104a18:	e07c      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104a1a:	68fb      	ldr	r3, [r7, #12]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104a20:	68fb      	ldr	r3, [r7, #12]
 8104a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a24:	b2d2      	uxtb	r2, r2
 8104a26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a2c:	1c5a      	adds	r2, r3, #1
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104a32:	68fb      	ldr	r3, [r7, #12]
 8104a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a36:	3b01      	subs	r3, #1
 8104a38:	b29a      	uxth	r2, r3
 8104a3a:	68fb      	ldr	r3, [r7, #12]
 8104a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104a3e:	68fb      	ldr	r3, [r7, #12]
 8104a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a42:	b29b      	uxth	r3, r3
 8104a44:	3b01      	subs	r3, #1
 8104a46:	b29a      	uxth	r2, r3
 8104a48:	68fb      	ldr	r3, [r7, #12]
 8104a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a50:	b29b      	uxth	r3, r3
 8104a52:	2b00      	cmp	r3, #0
 8104a54:	d034      	beq.n	8104ac0 <HAL_I2C_Mem_Read+0x1d0>
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a5a:	2b00      	cmp	r3, #0
 8104a5c:	d130      	bne.n	8104ac0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104a5e:	697b      	ldr	r3, [r7, #20]
 8104a60:	9300      	str	r3, [sp, #0]
 8104a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a64:	2200      	movs	r2, #0
 8104a66:	2180      	movs	r1, #128	; 0x80
 8104a68:	68f8      	ldr	r0, [r7, #12]
 8104a6a:	f000 fa2f 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104a6e:	4603      	mov	r3, r0
 8104a70:	2b00      	cmp	r3, #0
 8104a72:	d001      	beq.n	8104a78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8104a74:	2301      	movs	r3, #1
 8104a76:	e04d      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a7c:	b29b      	uxth	r3, r3
 8104a7e:	2bff      	cmp	r3, #255	; 0xff
 8104a80:	d90e      	bls.n	8104aa0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104a82:	68fb      	ldr	r3, [r7, #12]
 8104a84:	22ff      	movs	r2, #255	; 0xff
 8104a86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8104a88:	68fb      	ldr	r3, [r7, #12]
 8104a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a8c:	b2da      	uxtb	r2, r3
 8104a8e:	8979      	ldrh	r1, [r7, #10]
 8104a90:	2300      	movs	r3, #0
 8104a92:	9300      	str	r3, [sp, #0]
 8104a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104a98:	68f8      	ldr	r0, [r7, #12]
 8104a9a:	f000 fbbf 	bl	810521c <I2C_TransferConfig>
 8104a9e:	e00f      	b.n	8104ac0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104aa4:	b29a      	uxth	r2, r3
 8104aa6:	68fb      	ldr	r3, [r7, #12]
 8104aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104aaa:	68fb      	ldr	r3, [r7, #12]
 8104aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104aae:	b2da      	uxtb	r2, r3
 8104ab0:	8979      	ldrh	r1, [r7, #10]
 8104ab2:	2300      	movs	r3, #0
 8104ab4:	9300      	str	r3, [sp, #0]
 8104ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104aba:	68f8      	ldr	r0, [r7, #12]
 8104abc:	f000 fbae 	bl	810521c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ac4:	b29b      	uxth	r3, r3
 8104ac6:	2b00      	cmp	r3, #0
 8104ac8:	d19a      	bne.n	8104a00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104aca:	697a      	ldr	r2, [r7, #20]
 8104acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104ace:	68f8      	ldr	r0, [r7, #12]
 8104ad0:	f000 fa7c 	bl	8104fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8104ad4:	4603      	mov	r3, r0
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d001      	beq.n	8104ade <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8104ada:	2301      	movs	r3, #1
 8104adc:	e01a      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104ade:	68fb      	ldr	r3, [r7, #12]
 8104ae0:	681b      	ldr	r3, [r3, #0]
 8104ae2:	2220      	movs	r2, #32
 8104ae4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104ae6:	68fb      	ldr	r3, [r7, #12]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	6859      	ldr	r1, [r3, #4]
 8104aec:	68fb      	ldr	r3, [r7, #12]
 8104aee:	681a      	ldr	r2, [r3, #0]
 8104af0:	4b0b      	ldr	r3, [pc, #44]	; (8104b20 <HAL_I2C_Mem_Read+0x230>)
 8104af2:	400b      	ands	r3, r1
 8104af4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104af6:	68fb      	ldr	r3, [r7, #12]
 8104af8:	2220      	movs	r2, #32
 8104afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104afe:	68fb      	ldr	r3, [r7, #12]
 8104b00:	2200      	movs	r2, #0
 8104b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104b06:	68fb      	ldr	r3, [r7, #12]
 8104b08:	2200      	movs	r2, #0
 8104b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104b0e:	2300      	movs	r3, #0
 8104b10:	e000      	b.n	8104b14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104b12:	2302      	movs	r3, #2
  }
}
 8104b14:	4618      	mov	r0, r3
 8104b16:	3718      	adds	r7, #24
 8104b18:	46bd      	mov	sp, r7
 8104b1a:	bd80      	pop	{r7, pc}
 8104b1c:	80002400 	.word	0x80002400
 8104b20:	fe00e800 	.word	0xfe00e800

08104b24 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8104b24:	b580      	push	{r7, lr}
 8104b26:	b08a      	sub	sp, #40	; 0x28
 8104b28:	af02      	add	r7, sp, #8
 8104b2a:	60f8      	str	r0, [r7, #12]
 8104b2c:	607a      	str	r2, [r7, #4]
 8104b2e:	603b      	str	r3, [r7, #0]
 8104b30:	460b      	mov	r3, r1
 8104b32:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8104b34:	2300      	movs	r3, #0
 8104b36:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104b38:	68fb      	ldr	r3, [r7, #12]
 8104b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104b3e:	b2db      	uxtb	r3, r3
 8104b40:	2b20      	cmp	r3, #32
 8104b42:	f040 80f1 	bne.w	8104d28 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104b46:	68fb      	ldr	r3, [r7, #12]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	699b      	ldr	r3, [r3, #24]
 8104b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104b54:	d101      	bne.n	8104b5a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8104b56:	2302      	movs	r3, #2
 8104b58:	e0e7      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104b5a:	68fb      	ldr	r3, [r7, #12]
 8104b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104b60:	2b01      	cmp	r3, #1
 8104b62:	d101      	bne.n	8104b68 <HAL_I2C_IsDeviceReady+0x44>
 8104b64:	2302      	movs	r3, #2
 8104b66:	e0e0      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	2201      	movs	r2, #1
 8104b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104b70:	68fb      	ldr	r3, [r7, #12]
 8104b72:	2224      	movs	r2, #36	; 0x24
 8104b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b78:	68fb      	ldr	r3, [r7, #12]
 8104b7a:	2200      	movs	r2, #0
 8104b7c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8104b7e:	68fb      	ldr	r3, [r7, #12]
 8104b80:	68db      	ldr	r3, [r3, #12]
 8104b82:	2b01      	cmp	r3, #1
 8104b84:	d107      	bne.n	8104b96 <HAL_I2C_IsDeviceReady+0x72>
 8104b86:	897b      	ldrh	r3, [r7, #10]
 8104b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104b94:	e004      	b.n	8104ba0 <HAL_I2C_IsDeviceReady+0x7c>
 8104b96:	897b      	ldrh	r3, [r7, #10]
 8104b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104b9c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8104ba0:	68fa      	ldr	r2, [r7, #12]
 8104ba2:	6812      	ldr	r2, [r2, #0]
 8104ba4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8104ba6:	f7fd fd0f 	bl	81025c8 <HAL_GetTick>
 8104baa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104bac:	68fb      	ldr	r3, [r7, #12]
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	699b      	ldr	r3, [r3, #24]
 8104bb2:	f003 0320 	and.w	r3, r3, #32
 8104bb6:	2b20      	cmp	r3, #32
 8104bb8:	bf0c      	ite	eq
 8104bba:	2301      	moveq	r3, #1
 8104bbc:	2300      	movne	r3, #0
 8104bbe:	b2db      	uxtb	r3, r3
 8104bc0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104bc2:	68fb      	ldr	r3, [r7, #12]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	699b      	ldr	r3, [r3, #24]
 8104bc8:	f003 0310 	and.w	r3, r3, #16
 8104bcc:	2b10      	cmp	r3, #16
 8104bce:	bf0c      	ite	eq
 8104bd0:	2301      	moveq	r3, #1
 8104bd2:	2300      	movne	r3, #0
 8104bd4:	b2db      	uxtb	r3, r3
 8104bd6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104bd8:	e034      	b.n	8104c44 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8104bda:	683b      	ldr	r3, [r7, #0]
 8104bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104be0:	d01a      	beq.n	8104c18 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104be2:	f7fd fcf1 	bl	81025c8 <HAL_GetTick>
 8104be6:	4602      	mov	r2, r0
 8104be8:	69bb      	ldr	r3, [r7, #24]
 8104bea:	1ad3      	subs	r3, r2, r3
 8104bec:	683a      	ldr	r2, [r7, #0]
 8104bee:	429a      	cmp	r2, r3
 8104bf0:	d302      	bcc.n	8104bf8 <HAL_I2C_IsDeviceReady+0xd4>
 8104bf2:	683b      	ldr	r3, [r7, #0]
 8104bf4:	2b00      	cmp	r3, #0
 8104bf6:	d10f      	bne.n	8104c18 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	2220      	movs	r2, #32
 8104bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104c00:	68fb      	ldr	r3, [r7, #12]
 8104c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104c04:	f043 0220 	orr.w	r2, r3, #32
 8104c08:	68fb      	ldr	r3, [r7, #12]
 8104c0a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	2200      	movs	r2, #0
 8104c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8104c14:	2301      	movs	r3, #1
 8104c16:	e088      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104c18:	68fb      	ldr	r3, [r7, #12]
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	699b      	ldr	r3, [r3, #24]
 8104c1e:	f003 0320 	and.w	r3, r3, #32
 8104c22:	2b20      	cmp	r3, #32
 8104c24:	bf0c      	ite	eq
 8104c26:	2301      	moveq	r3, #1
 8104c28:	2300      	movne	r3, #0
 8104c2a:	b2db      	uxtb	r3, r3
 8104c2c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	699b      	ldr	r3, [r3, #24]
 8104c34:	f003 0310 	and.w	r3, r3, #16
 8104c38:	2b10      	cmp	r3, #16
 8104c3a:	bf0c      	ite	eq
 8104c3c:	2301      	moveq	r3, #1
 8104c3e:	2300      	movne	r3, #0
 8104c40:	b2db      	uxtb	r3, r3
 8104c42:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104c44:	7ffb      	ldrb	r3, [r7, #31]
 8104c46:	2b00      	cmp	r3, #0
 8104c48:	d102      	bne.n	8104c50 <HAL_I2C_IsDeviceReady+0x12c>
 8104c4a:	7fbb      	ldrb	r3, [r7, #30]
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d0c4      	beq.n	8104bda <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	699b      	ldr	r3, [r3, #24]
 8104c56:	f003 0310 	and.w	r3, r3, #16
 8104c5a:	2b10      	cmp	r3, #16
 8104c5c:	d01a      	beq.n	8104c94 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104c5e:	69bb      	ldr	r3, [r7, #24]
 8104c60:	9300      	str	r3, [sp, #0]
 8104c62:	683b      	ldr	r3, [r7, #0]
 8104c64:	2200      	movs	r2, #0
 8104c66:	2120      	movs	r1, #32
 8104c68:	68f8      	ldr	r0, [r7, #12]
 8104c6a:	f000 f92f 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104c6e:	4603      	mov	r3, r0
 8104c70:	2b00      	cmp	r3, #0
 8104c72:	d001      	beq.n	8104c78 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8104c74:	2301      	movs	r3, #1
 8104c76:	e058      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	2220      	movs	r2, #32
 8104c7e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8104c80:	68fb      	ldr	r3, [r7, #12]
 8104c82:	2220      	movs	r2, #32
 8104c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	2200      	movs	r2, #0
 8104c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8104c90:	2300      	movs	r3, #0
 8104c92:	e04a      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104c94:	69bb      	ldr	r3, [r7, #24]
 8104c96:	9300      	str	r3, [sp, #0]
 8104c98:	683b      	ldr	r3, [r7, #0]
 8104c9a:	2200      	movs	r2, #0
 8104c9c:	2120      	movs	r1, #32
 8104c9e:	68f8      	ldr	r0, [r7, #12]
 8104ca0:	f000 f914 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104ca4:	4603      	mov	r3, r0
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	d001      	beq.n	8104cae <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8104caa:	2301      	movs	r3, #1
 8104cac:	e03d      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	2210      	movs	r2, #16
 8104cb4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104cb6:	68fb      	ldr	r3, [r7, #12]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	2220      	movs	r2, #32
 8104cbc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8104cbe:	697b      	ldr	r3, [r7, #20]
 8104cc0:	687a      	ldr	r2, [r7, #4]
 8104cc2:	429a      	cmp	r2, r3
 8104cc4:	d118      	bne.n	8104cf8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104cc6:	68fb      	ldr	r3, [r7, #12]
 8104cc8:	681b      	ldr	r3, [r3, #0]
 8104cca:	685a      	ldr	r2, [r3, #4]
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	681b      	ldr	r3, [r3, #0]
 8104cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104cd4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104cd6:	69bb      	ldr	r3, [r7, #24]
 8104cd8:	9300      	str	r3, [sp, #0]
 8104cda:	683b      	ldr	r3, [r7, #0]
 8104cdc:	2200      	movs	r2, #0
 8104cde:	2120      	movs	r1, #32
 8104ce0:	68f8      	ldr	r0, [r7, #12]
 8104ce2:	f000 f8f3 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104ce6:	4603      	mov	r3, r0
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d001      	beq.n	8104cf0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8104cec:	2301      	movs	r3, #1
 8104cee:	e01c      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	2220      	movs	r2, #32
 8104cf6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8104cf8:	697b      	ldr	r3, [r7, #20]
 8104cfa:	3301      	adds	r3, #1
 8104cfc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8104cfe:	697b      	ldr	r3, [r7, #20]
 8104d00:	687a      	ldr	r2, [r7, #4]
 8104d02:	429a      	cmp	r2, r3
 8104d04:	f63f af3b 	bhi.w	8104b7e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	2220      	movs	r2, #32
 8104d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104d14:	f043 0220 	orr.w	r2, r3, #32
 8104d18:	68fb      	ldr	r3, [r7, #12]
 8104d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d1c:	68fb      	ldr	r3, [r7, #12]
 8104d1e:	2200      	movs	r2, #0
 8104d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8104d24:	2301      	movs	r3, #1
 8104d26:	e000      	b.n	8104d2a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8104d28:	2302      	movs	r3, #2
  }
}
 8104d2a:	4618      	mov	r0, r3
 8104d2c:	3720      	adds	r7, #32
 8104d2e:	46bd      	mov	sp, r7
 8104d30:	bd80      	pop	{r7, pc}
	...

08104d34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8104d34:	b580      	push	{r7, lr}
 8104d36:	b086      	sub	sp, #24
 8104d38:	af02      	add	r7, sp, #8
 8104d3a:	60f8      	str	r0, [r7, #12]
 8104d3c:	4608      	mov	r0, r1
 8104d3e:	4611      	mov	r1, r2
 8104d40:	461a      	mov	r2, r3
 8104d42:	4603      	mov	r3, r0
 8104d44:	817b      	strh	r3, [r7, #10]
 8104d46:	460b      	mov	r3, r1
 8104d48:	813b      	strh	r3, [r7, #8]
 8104d4a:	4613      	mov	r3, r2
 8104d4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8104d4e:	88fb      	ldrh	r3, [r7, #6]
 8104d50:	b2da      	uxtb	r2, r3
 8104d52:	8979      	ldrh	r1, [r7, #10]
 8104d54:	4b20      	ldr	r3, [pc, #128]	; (8104dd8 <I2C_RequestMemoryWrite+0xa4>)
 8104d56:	9300      	str	r3, [sp, #0]
 8104d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104d5c:	68f8      	ldr	r0, [r7, #12]
 8104d5e:	f000 fa5d 	bl	810521c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104d62:	69fa      	ldr	r2, [r7, #28]
 8104d64:	69b9      	ldr	r1, [r7, #24]
 8104d66:	68f8      	ldr	r0, [r7, #12]
 8104d68:	f000 f8f0 	bl	8104f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8104d6c:	4603      	mov	r3, r0
 8104d6e:	2b00      	cmp	r3, #0
 8104d70:	d001      	beq.n	8104d76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8104d72:	2301      	movs	r3, #1
 8104d74:	e02c      	b.n	8104dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104d76:	88fb      	ldrh	r3, [r7, #6]
 8104d78:	2b01      	cmp	r3, #1
 8104d7a:	d105      	bne.n	8104d88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104d7c:	893b      	ldrh	r3, [r7, #8]
 8104d7e:	b2da      	uxtb	r2, r3
 8104d80:	68fb      	ldr	r3, [r7, #12]
 8104d82:	681b      	ldr	r3, [r3, #0]
 8104d84:	629a      	str	r2, [r3, #40]	; 0x28
 8104d86:	e015      	b.n	8104db4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104d88:	893b      	ldrh	r3, [r7, #8]
 8104d8a:	0a1b      	lsrs	r3, r3, #8
 8104d8c:	b29b      	uxth	r3, r3
 8104d8e:	b2da      	uxtb	r2, r3
 8104d90:	68fb      	ldr	r3, [r7, #12]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104d96:	69fa      	ldr	r2, [r7, #28]
 8104d98:	69b9      	ldr	r1, [r7, #24]
 8104d9a:	68f8      	ldr	r0, [r7, #12]
 8104d9c:	f000 f8d6 	bl	8104f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8104da0:	4603      	mov	r3, r0
 8104da2:	2b00      	cmp	r3, #0
 8104da4:	d001      	beq.n	8104daa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8104da6:	2301      	movs	r3, #1
 8104da8:	e012      	b.n	8104dd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104daa:	893b      	ldrh	r3, [r7, #8]
 8104dac:	b2da      	uxtb	r2, r3
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8104db4:	69fb      	ldr	r3, [r7, #28]
 8104db6:	9300      	str	r3, [sp, #0]
 8104db8:	69bb      	ldr	r3, [r7, #24]
 8104dba:	2200      	movs	r2, #0
 8104dbc:	2180      	movs	r1, #128	; 0x80
 8104dbe:	68f8      	ldr	r0, [r7, #12]
 8104dc0:	f000 f884 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104dc4:	4603      	mov	r3, r0
 8104dc6:	2b00      	cmp	r3, #0
 8104dc8:	d001      	beq.n	8104dce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8104dca:	2301      	movs	r3, #1
 8104dcc:	e000      	b.n	8104dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8104dce:	2300      	movs	r3, #0
}
 8104dd0:	4618      	mov	r0, r3
 8104dd2:	3710      	adds	r7, #16
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	bd80      	pop	{r7, pc}
 8104dd8:	80002000 	.word	0x80002000

08104ddc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104ddc:	b580      	push	{r7, lr}
 8104dde:	b086      	sub	sp, #24
 8104de0:	af02      	add	r7, sp, #8
 8104de2:	60f8      	str	r0, [r7, #12]
 8104de4:	4608      	mov	r0, r1
 8104de6:	4611      	mov	r1, r2
 8104de8:	461a      	mov	r2, r3
 8104dea:	4603      	mov	r3, r0
 8104dec:	817b      	strh	r3, [r7, #10]
 8104dee:	460b      	mov	r3, r1
 8104df0:	813b      	strh	r3, [r7, #8]
 8104df2:	4613      	mov	r3, r2
 8104df4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8104df6:	88fb      	ldrh	r3, [r7, #6]
 8104df8:	b2da      	uxtb	r2, r3
 8104dfa:	8979      	ldrh	r1, [r7, #10]
 8104dfc:	4b20      	ldr	r3, [pc, #128]	; (8104e80 <I2C_RequestMemoryRead+0xa4>)
 8104dfe:	9300      	str	r3, [sp, #0]
 8104e00:	2300      	movs	r3, #0
 8104e02:	68f8      	ldr	r0, [r7, #12]
 8104e04:	f000 fa0a 	bl	810521c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104e08:	69fa      	ldr	r2, [r7, #28]
 8104e0a:	69b9      	ldr	r1, [r7, #24]
 8104e0c:	68f8      	ldr	r0, [r7, #12]
 8104e0e:	f000 f89d 	bl	8104f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8104e12:	4603      	mov	r3, r0
 8104e14:	2b00      	cmp	r3, #0
 8104e16:	d001      	beq.n	8104e1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104e18:	2301      	movs	r3, #1
 8104e1a:	e02c      	b.n	8104e76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104e1c:	88fb      	ldrh	r3, [r7, #6]
 8104e1e:	2b01      	cmp	r3, #1
 8104e20:	d105      	bne.n	8104e2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104e22:	893b      	ldrh	r3, [r7, #8]
 8104e24:	b2da      	uxtb	r2, r3
 8104e26:	68fb      	ldr	r3, [r7, #12]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8104e2c:	e015      	b.n	8104e5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104e2e:	893b      	ldrh	r3, [r7, #8]
 8104e30:	0a1b      	lsrs	r3, r3, #8
 8104e32:	b29b      	uxth	r3, r3
 8104e34:	b2da      	uxtb	r2, r3
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104e3c:	69fa      	ldr	r2, [r7, #28]
 8104e3e:	69b9      	ldr	r1, [r7, #24]
 8104e40:	68f8      	ldr	r0, [r7, #12]
 8104e42:	f000 f883 	bl	8104f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8104e46:	4603      	mov	r3, r0
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d001      	beq.n	8104e50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104e4c:	2301      	movs	r3, #1
 8104e4e:	e012      	b.n	8104e76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104e50:	893b      	ldrh	r3, [r7, #8]
 8104e52:	b2da      	uxtb	r2, r3
 8104e54:	68fb      	ldr	r3, [r7, #12]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8104e5a:	69fb      	ldr	r3, [r7, #28]
 8104e5c:	9300      	str	r3, [sp, #0]
 8104e5e:	69bb      	ldr	r3, [r7, #24]
 8104e60:	2200      	movs	r2, #0
 8104e62:	2140      	movs	r1, #64	; 0x40
 8104e64:	68f8      	ldr	r0, [r7, #12]
 8104e66:	f000 f831 	bl	8104ecc <I2C_WaitOnFlagUntilTimeout>
 8104e6a:	4603      	mov	r3, r0
 8104e6c:	2b00      	cmp	r3, #0
 8104e6e:	d001      	beq.n	8104e74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8104e70:	2301      	movs	r3, #1
 8104e72:	e000      	b.n	8104e76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8104e74:	2300      	movs	r3, #0
}
 8104e76:	4618      	mov	r0, r3
 8104e78:	3710      	adds	r7, #16
 8104e7a:	46bd      	mov	sp, r7
 8104e7c:	bd80      	pop	{r7, pc}
 8104e7e:	bf00      	nop
 8104e80:	80002000 	.word	0x80002000

08104e84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104e84:	b480      	push	{r7}
 8104e86:	b083      	sub	sp, #12
 8104e88:	af00      	add	r7, sp, #0
 8104e8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	699b      	ldr	r3, [r3, #24]
 8104e92:	f003 0302 	and.w	r3, r3, #2
 8104e96:	2b02      	cmp	r3, #2
 8104e98:	d103      	bne.n	8104ea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	2200      	movs	r2, #0
 8104ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	699b      	ldr	r3, [r3, #24]
 8104ea8:	f003 0301 	and.w	r3, r3, #1
 8104eac:	2b01      	cmp	r3, #1
 8104eae:	d007      	beq.n	8104ec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	681b      	ldr	r3, [r3, #0]
 8104eb4:	699a      	ldr	r2, [r3, #24]
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	681b      	ldr	r3, [r3, #0]
 8104eba:	f042 0201 	orr.w	r2, r2, #1
 8104ebe:	619a      	str	r2, [r3, #24]
  }
}
 8104ec0:	bf00      	nop
 8104ec2:	370c      	adds	r7, #12
 8104ec4:	46bd      	mov	sp, r7
 8104ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104eca:	4770      	bx	lr

08104ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104ecc:	b580      	push	{r7, lr}
 8104ece:	b084      	sub	sp, #16
 8104ed0:	af00      	add	r7, sp, #0
 8104ed2:	60f8      	str	r0, [r7, #12]
 8104ed4:	60b9      	str	r1, [r7, #8]
 8104ed6:	603b      	str	r3, [r7, #0]
 8104ed8:	4613      	mov	r3, r2
 8104eda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104edc:	e022      	b.n	8104f24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104ede:	683b      	ldr	r3, [r7, #0]
 8104ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ee4:	d01e      	beq.n	8104f24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104ee6:	f7fd fb6f 	bl	81025c8 <HAL_GetTick>
 8104eea:	4602      	mov	r2, r0
 8104eec:	69bb      	ldr	r3, [r7, #24]
 8104eee:	1ad3      	subs	r3, r2, r3
 8104ef0:	683a      	ldr	r2, [r7, #0]
 8104ef2:	429a      	cmp	r2, r3
 8104ef4:	d302      	bcc.n	8104efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8104ef6:	683b      	ldr	r3, [r7, #0]
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	d113      	bne.n	8104f24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104efc:	68fb      	ldr	r3, [r7, #12]
 8104efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f00:	f043 0220 	orr.w	r2, r3, #32
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	2220      	movs	r2, #32
 8104f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104f10:	68fb      	ldr	r3, [r7, #12]
 8104f12:	2200      	movs	r2, #0
 8104f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	2200      	movs	r2, #0
 8104f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8104f20:	2301      	movs	r3, #1
 8104f22:	e00f      	b.n	8104f44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104f24:	68fb      	ldr	r3, [r7, #12]
 8104f26:	681b      	ldr	r3, [r3, #0]
 8104f28:	699a      	ldr	r2, [r3, #24]
 8104f2a:	68bb      	ldr	r3, [r7, #8]
 8104f2c:	4013      	ands	r3, r2
 8104f2e:	68ba      	ldr	r2, [r7, #8]
 8104f30:	429a      	cmp	r2, r3
 8104f32:	bf0c      	ite	eq
 8104f34:	2301      	moveq	r3, #1
 8104f36:	2300      	movne	r3, #0
 8104f38:	b2db      	uxtb	r3, r3
 8104f3a:	461a      	mov	r2, r3
 8104f3c:	79fb      	ldrb	r3, [r7, #7]
 8104f3e:	429a      	cmp	r2, r3
 8104f40:	d0cd      	beq.n	8104ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8104f42:	2300      	movs	r3, #0
}
 8104f44:	4618      	mov	r0, r3
 8104f46:	3710      	adds	r7, #16
 8104f48:	46bd      	mov	sp, r7
 8104f4a:	bd80      	pop	{r7, pc}

08104f4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104f4c:	b580      	push	{r7, lr}
 8104f4e:	b084      	sub	sp, #16
 8104f50:	af00      	add	r7, sp, #0
 8104f52:	60f8      	str	r0, [r7, #12]
 8104f54:	60b9      	str	r1, [r7, #8]
 8104f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104f58:	e02c      	b.n	8104fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104f5a:	687a      	ldr	r2, [r7, #4]
 8104f5c:	68b9      	ldr	r1, [r7, #8]
 8104f5e:	68f8      	ldr	r0, [r7, #12]
 8104f60:	f000 f870 	bl	8105044 <I2C_IsErrorOccurred>
 8104f64:	4603      	mov	r3, r0
 8104f66:	2b00      	cmp	r3, #0
 8104f68:	d001      	beq.n	8104f6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104f6a:	2301      	movs	r3, #1
 8104f6c:	e02a      	b.n	8104fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104f6e:	68bb      	ldr	r3, [r7, #8]
 8104f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104f74:	d01e      	beq.n	8104fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104f76:	f7fd fb27 	bl	81025c8 <HAL_GetTick>
 8104f7a:	4602      	mov	r2, r0
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	1ad3      	subs	r3, r2, r3
 8104f80:	68ba      	ldr	r2, [r7, #8]
 8104f82:	429a      	cmp	r2, r3
 8104f84:	d302      	bcc.n	8104f8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8104f86:	68bb      	ldr	r3, [r7, #8]
 8104f88:	2b00      	cmp	r3, #0
 8104f8a:	d113      	bne.n	8104fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104f8c:	68fb      	ldr	r3, [r7, #12]
 8104f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f90:	f043 0220 	orr.w	r2, r3, #32
 8104f94:	68fb      	ldr	r3, [r7, #12]
 8104f96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104f98:	68fb      	ldr	r3, [r7, #12]
 8104f9a:	2220      	movs	r2, #32
 8104f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	2200      	movs	r2, #0
 8104fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104fa8:	68fb      	ldr	r3, [r7, #12]
 8104faa:	2200      	movs	r2, #0
 8104fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8104fb0:	2301      	movs	r3, #1
 8104fb2:	e007      	b.n	8104fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104fb4:	68fb      	ldr	r3, [r7, #12]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	699b      	ldr	r3, [r3, #24]
 8104fba:	f003 0302 	and.w	r3, r3, #2
 8104fbe:	2b02      	cmp	r3, #2
 8104fc0:	d1cb      	bne.n	8104f5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8104fc2:	2300      	movs	r3, #0
}
 8104fc4:	4618      	mov	r0, r3
 8104fc6:	3710      	adds	r7, #16
 8104fc8:	46bd      	mov	sp, r7
 8104fca:	bd80      	pop	{r7, pc}

08104fcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104fcc:	b580      	push	{r7, lr}
 8104fce:	b084      	sub	sp, #16
 8104fd0:	af00      	add	r7, sp, #0
 8104fd2:	60f8      	str	r0, [r7, #12]
 8104fd4:	60b9      	str	r1, [r7, #8]
 8104fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104fd8:	e028      	b.n	810502c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104fda:	687a      	ldr	r2, [r7, #4]
 8104fdc:	68b9      	ldr	r1, [r7, #8]
 8104fde:	68f8      	ldr	r0, [r7, #12]
 8104fe0:	f000 f830 	bl	8105044 <I2C_IsErrorOccurred>
 8104fe4:	4603      	mov	r3, r0
 8104fe6:	2b00      	cmp	r3, #0
 8104fe8:	d001      	beq.n	8104fee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104fea:	2301      	movs	r3, #1
 8104fec:	e026      	b.n	810503c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104fee:	f7fd faeb 	bl	81025c8 <HAL_GetTick>
 8104ff2:	4602      	mov	r2, r0
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	1ad3      	subs	r3, r2, r3
 8104ff8:	68ba      	ldr	r2, [r7, #8]
 8104ffa:	429a      	cmp	r2, r3
 8104ffc:	d302      	bcc.n	8105004 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104ffe:	68bb      	ldr	r3, [r7, #8]
 8105000:	2b00      	cmp	r3, #0
 8105002:	d113      	bne.n	810502c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105004:	68fb      	ldr	r3, [r7, #12]
 8105006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105008:	f043 0220 	orr.w	r2, r3, #32
 810500c:	68fb      	ldr	r3, [r7, #12]
 810500e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	2220      	movs	r2, #32
 8105014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105018:	68fb      	ldr	r3, [r7, #12]
 810501a:	2200      	movs	r2, #0
 810501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105020:	68fb      	ldr	r3, [r7, #12]
 8105022:	2200      	movs	r2, #0
 8105024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105028:	2301      	movs	r3, #1
 810502a:	e007      	b.n	810503c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810502c:	68fb      	ldr	r3, [r7, #12]
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	699b      	ldr	r3, [r3, #24]
 8105032:	f003 0320 	and.w	r3, r3, #32
 8105036:	2b20      	cmp	r3, #32
 8105038:	d1cf      	bne.n	8104fda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810503a:	2300      	movs	r3, #0
}
 810503c:	4618      	mov	r0, r3
 810503e:	3710      	adds	r7, #16
 8105040:	46bd      	mov	sp, r7
 8105042:	bd80      	pop	{r7, pc}

08105044 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105044:	b580      	push	{r7, lr}
 8105046:	b08a      	sub	sp, #40	; 0x28
 8105048:	af00      	add	r7, sp, #0
 810504a:	60f8      	str	r0, [r7, #12]
 810504c:	60b9      	str	r1, [r7, #8]
 810504e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105050:	2300      	movs	r3, #0
 8105052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8105056:	68fb      	ldr	r3, [r7, #12]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	699b      	ldr	r3, [r3, #24]
 810505c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810505e:	2300      	movs	r3, #0
 8105060:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8105066:	69bb      	ldr	r3, [r7, #24]
 8105068:	f003 0310 	and.w	r3, r3, #16
 810506c:	2b00      	cmp	r3, #0
 810506e:	d075      	beq.n	810515c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105070:	68fb      	ldr	r3, [r7, #12]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	2210      	movs	r2, #16
 8105076:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105078:	e056      	b.n	8105128 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810507a:	68bb      	ldr	r3, [r7, #8]
 810507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105080:	d052      	beq.n	8105128 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105082:	f7fd faa1 	bl	81025c8 <HAL_GetTick>
 8105086:	4602      	mov	r2, r0
 8105088:	69fb      	ldr	r3, [r7, #28]
 810508a:	1ad3      	subs	r3, r2, r3
 810508c:	68ba      	ldr	r2, [r7, #8]
 810508e:	429a      	cmp	r2, r3
 8105090:	d302      	bcc.n	8105098 <I2C_IsErrorOccurred+0x54>
 8105092:	68bb      	ldr	r3, [r7, #8]
 8105094:	2b00      	cmp	r3, #0
 8105096:	d147      	bne.n	8105128 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8105098:	68fb      	ldr	r3, [r7, #12]
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	685b      	ldr	r3, [r3, #4]
 810509e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81050a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81050a4:	68fb      	ldr	r3, [r7, #12]
 81050a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81050aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81050ac:	68fb      	ldr	r3, [r7, #12]
 81050ae:	681b      	ldr	r3, [r3, #0]
 81050b0:	699b      	ldr	r3, [r3, #24]
 81050b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81050b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81050ba:	d12e      	bne.n	810511a <I2C_IsErrorOccurred+0xd6>
 81050bc:	697b      	ldr	r3, [r7, #20]
 81050be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81050c2:	d02a      	beq.n	810511a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81050c4:	7cfb      	ldrb	r3, [r7, #19]
 81050c6:	2b20      	cmp	r3, #32
 81050c8:	d027      	beq.n	810511a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81050ca:	68fb      	ldr	r3, [r7, #12]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	685a      	ldr	r2, [r3, #4]
 81050d0:	68fb      	ldr	r3, [r7, #12]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81050d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81050da:	f7fd fa75 	bl	81025c8 <HAL_GetTick>
 81050de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81050e0:	e01b      	b.n	810511a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81050e2:	f7fd fa71 	bl	81025c8 <HAL_GetTick>
 81050e6:	4602      	mov	r2, r0
 81050e8:	69fb      	ldr	r3, [r7, #28]
 81050ea:	1ad3      	subs	r3, r2, r3
 81050ec:	2b19      	cmp	r3, #25
 81050ee:	d914      	bls.n	810511a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81050f0:	68fb      	ldr	r3, [r7, #12]
 81050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050f4:	f043 0220 	orr.w	r2, r3, #32
 81050f8:	68fb      	ldr	r3, [r7, #12]
 81050fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 81050fc:	68fb      	ldr	r3, [r7, #12]
 81050fe:	2220      	movs	r2, #32
 8105100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8105104:	68fb      	ldr	r3, [r7, #12]
 8105106:	2200      	movs	r2, #0
 8105108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 810510c:	68fb      	ldr	r3, [r7, #12]
 810510e:	2200      	movs	r2, #0
 8105110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8105114:	2301      	movs	r3, #1
 8105116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810511a:	68fb      	ldr	r3, [r7, #12]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	699b      	ldr	r3, [r3, #24]
 8105120:	f003 0320 	and.w	r3, r3, #32
 8105124:	2b20      	cmp	r3, #32
 8105126:	d1dc      	bne.n	81050e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105128:	68fb      	ldr	r3, [r7, #12]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	699b      	ldr	r3, [r3, #24]
 810512e:	f003 0320 	and.w	r3, r3, #32
 8105132:	2b20      	cmp	r3, #32
 8105134:	d003      	beq.n	810513e <I2C_IsErrorOccurred+0xfa>
 8105136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810513a:	2b00      	cmp	r3, #0
 810513c:	d09d      	beq.n	810507a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810513e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105142:	2b00      	cmp	r3, #0
 8105144:	d103      	bne.n	810514e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105146:	68fb      	ldr	r3, [r7, #12]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	2220      	movs	r2, #32
 810514c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810514e:	6a3b      	ldr	r3, [r7, #32]
 8105150:	f043 0304 	orr.w	r3, r3, #4
 8105154:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8105156:	2301      	movs	r3, #1
 8105158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810515c:	68fb      	ldr	r3, [r7, #12]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	699b      	ldr	r3, [r3, #24]
 8105162:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8105164:	69bb      	ldr	r3, [r7, #24]
 8105166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810516a:	2b00      	cmp	r3, #0
 810516c:	d00b      	beq.n	8105186 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810516e:	6a3b      	ldr	r3, [r7, #32]
 8105170:	f043 0301 	orr.w	r3, r3, #1
 8105174:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105176:	68fb      	ldr	r3, [r7, #12]
 8105178:	681b      	ldr	r3, [r3, #0]
 810517a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810517e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105180:	2301      	movs	r3, #1
 8105182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8105186:	69bb      	ldr	r3, [r7, #24]
 8105188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810518c:	2b00      	cmp	r3, #0
 810518e:	d00b      	beq.n	81051a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105190:	6a3b      	ldr	r3, [r7, #32]
 8105192:	f043 0308 	orr.w	r3, r3, #8
 8105196:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	681b      	ldr	r3, [r3, #0]
 810519c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81051a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81051a2:	2301      	movs	r3, #1
 81051a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81051a8:	69bb      	ldr	r3, [r7, #24]
 81051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81051ae:	2b00      	cmp	r3, #0
 81051b0:	d00b      	beq.n	81051ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81051b2:	6a3b      	ldr	r3, [r7, #32]
 81051b4:	f043 0302 	orr.w	r3, r3, #2
 81051b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81051ba:	68fb      	ldr	r3, [r7, #12]
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	f44f 7200 	mov.w	r2, #512	; 0x200
 81051c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81051c4:	2301      	movs	r3, #1
 81051c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81051ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81051ce:	2b00      	cmp	r3, #0
 81051d0:	d01c      	beq.n	810520c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81051d2:	68f8      	ldr	r0, [r7, #12]
 81051d4:	f7ff fe56 	bl	8104e84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81051d8:	68fb      	ldr	r3, [r7, #12]
 81051da:	681b      	ldr	r3, [r3, #0]
 81051dc:	6859      	ldr	r1, [r3, #4]
 81051de:	68fb      	ldr	r3, [r7, #12]
 81051e0:	681a      	ldr	r2, [r3, #0]
 81051e2:	4b0d      	ldr	r3, [pc, #52]	; (8105218 <I2C_IsErrorOccurred+0x1d4>)
 81051e4:	400b      	ands	r3, r1
 81051e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81051e8:	68fb      	ldr	r3, [r7, #12]
 81051ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81051ec:	6a3b      	ldr	r3, [r7, #32]
 81051ee:	431a      	orrs	r2, r3
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	2220      	movs	r2, #32
 81051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81051fc:	68fb      	ldr	r3, [r7, #12]
 81051fe:	2200      	movs	r2, #0
 8105200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105204:	68fb      	ldr	r3, [r7, #12]
 8105206:	2200      	movs	r2, #0
 8105208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 810520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8105210:	4618      	mov	r0, r3
 8105212:	3728      	adds	r7, #40	; 0x28
 8105214:	46bd      	mov	sp, r7
 8105216:	bd80      	pop	{r7, pc}
 8105218:	fe00e800 	.word	0xfe00e800

0810521c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810521c:	b480      	push	{r7}
 810521e:	b087      	sub	sp, #28
 8105220:	af00      	add	r7, sp, #0
 8105222:	60f8      	str	r0, [r7, #12]
 8105224:	607b      	str	r3, [r7, #4]
 8105226:	460b      	mov	r3, r1
 8105228:	817b      	strh	r3, [r7, #10]
 810522a:	4613      	mov	r3, r2
 810522c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810522e:	897b      	ldrh	r3, [r7, #10]
 8105230:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105234:	7a7b      	ldrb	r3, [r7, #9]
 8105236:	041b      	lsls	r3, r3, #16
 8105238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810523c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105242:	6a3b      	ldr	r3, [r7, #32]
 8105244:	4313      	orrs	r3, r2
 8105246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810524a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810524c:	68fb      	ldr	r3, [r7, #12]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	685a      	ldr	r2, [r3, #4]
 8105252:	6a3b      	ldr	r3, [r7, #32]
 8105254:	0d5b      	lsrs	r3, r3, #21
 8105256:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810525a:	4b08      	ldr	r3, [pc, #32]	; (810527c <I2C_TransferConfig+0x60>)
 810525c:	430b      	orrs	r3, r1
 810525e:	43db      	mvns	r3, r3
 8105260:	ea02 0103 	and.w	r1, r2, r3
 8105264:	68fb      	ldr	r3, [r7, #12]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	697a      	ldr	r2, [r7, #20]
 810526a:	430a      	orrs	r2, r1
 810526c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810526e:	bf00      	nop
 8105270:	371c      	adds	r7, #28
 8105272:	46bd      	mov	sp, r7
 8105274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105278:	4770      	bx	lr
 810527a:	bf00      	nop
 810527c:	03ff63ff 	.word	0x03ff63ff

08105280 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105280:	b480      	push	{r7}
 8105282:	b083      	sub	sp, #12
 8105284:	af00      	add	r7, sp, #0
 8105286:	6078      	str	r0, [r7, #4]
 8105288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105290:	b2db      	uxtb	r3, r3
 8105292:	2b20      	cmp	r3, #32
 8105294:	d138      	bne.n	8105308 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810529c:	2b01      	cmp	r3, #1
 810529e:	d101      	bne.n	81052a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81052a0:	2302      	movs	r3, #2
 81052a2:	e032      	b.n	810530a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	2201      	movs	r2, #1
 81052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	2224      	movs	r2, #36	; 0x24
 81052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	681a      	ldr	r2, [r3, #0]
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	681b      	ldr	r3, [r3, #0]
 81052be:	f022 0201 	bic.w	r2, r2, #1
 81052c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	681b      	ldr	r3, [r3, #0]
 81052c8:	681a      	ldr	r2, [r3, #0]
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81052d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	6819      	ldr	r1, [r3, #0]
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	683a      	ldr	r2, [r7, #0]
 81052e0:	430a      	orrs	r2, r1
 81052e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	681b      	ldr	r3, [r3, #0]
 81052e8:	681a      	ldr	r2, [r3, #0]
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	f042 0201 	orr.w	r2, r2, #1
 81052f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	2220      	movs	r2, #32
 81052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	2200      	movs	r2, #0
 8105300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105304:	2300      	movs	r3, #0
 8105306:	e000      	b.n	810530a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105308:	2302      	movs	r3, #2
  }
}
 810530a:	4618      	mov	r0, r3
 810530c:	370c      	adds	r7, #12
 810530e:	46bd      	mov	sp, r7
 8105310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105314:	4770      	bx	lr

08105316 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105316:	b480      	push	{r7}
 8105318:	b085      	sub	sp, #20
 810531a:	af00      	add	r7, sp, #0
 810531c:	6078      	str	r0, [r7, #4]
 810531e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105326:	b2db      	uxtb	r3, r3
 8105328:	2b20      	cmp	r3, #32
 810532a:	d139      	bne.n	81053a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105332:	2b01      	cmp	r3, #1
 8105334:	d101      	bne.n	810533a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105336:	2302      	movs	r3, #2
 8105338:	e033      	b.n	81053a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	2201      	movs	r2, #1
 810533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	2224      	movs	r2, #36	; 0x24
 8105346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	681b      	ldr	r3, [r3, #0]
 810534e:	681a      	ldr	r2, [r3, #0]
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	f022 0201 	bic.w	r2, r2, #1
 8105358:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105362:	68fb      	ldr	r3, [r7, #12]
 8105364:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105368:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810536a:	683b      	ldr	r3, [r7, #0]
 810536c:	021b      	lsls	r3, r3, #8
 810536e:	68fa      	ldr	r2, [r7, #12]
 8105370:	4313      	orrs	r3, r2
 8105372:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	68fa      	ldr	r2, [r7, #12]
 810537a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	681a      	ldr	r2, [r3, #0]
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	f042 0201 	orr.w	r2, r2, #1
 810538a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	2220      	movs	r2, #32
 8105390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	2200      	movs	r2, #0
 8105398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810539c:	2300      	movs	r3, #0
 810539e:	e000      	b.n	81053a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81053a0:	2302      	movs	r3, #2
  }
}
 81053a2:	4618      	mov	r0, r3
 81053a4:	3714      	adds	r7, #20
 81053a6:	46bd      	mov	sp, r7
 81053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053ac:	4770      	bx	lr
	...

081053b0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81053b0:	b580      	push	{r7, lr}
 81053b2:	b084      	sub	sp, #16
 81053b4:	af00      	add	r7, sp, #0
 81053b6:	60f8      	str	r0, [r7, #12]
 81053b8:	460b      	mov	r3, r1
 81053ba:	607a      	str	r2, [r7, #4]
 81053bc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81053be:	4b37      	ldr	r3, [pc, #220]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	f023 0201 	bic.w	r2, r3, #1
 81053c6:	4935      	ldr	r1, [pc, #212]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 81053c8:	68fb      	ldr	r3, [r7, #12]
 81053ca:	4313      	orrs	r3, r2
 81053cc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	2b00      	cmp	r3, #0
 81053d2:	d123      	bne.n	810541c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81053d4:	f7fd fa14 	bl	8102800 <HAL_GetCurrentCPUID>
 81053d8:	4603      	mov	r3, r0
 81053da:	2b03      	cmp	r3, #3
 81053dc:	d158      	bne.n	8105490 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81053de:	4b2f      	ldr	r3, [pc, #188]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 81053e0:	691b      	ldr	r3, [r3, #16]
 81053e2:	4a2e      	ldr	r2, [pc, #184]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 81053e4:	f023 0301 	bic.w	r3, r3, #1
 81053e8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81053ea:	4b2d      	ldr	r3, [pc, #180]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053ec:	691b      	ldr	r3, [r3, #16]
 81053ee:	4a2c      	ldr	r2, [pc, #176]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053f0:	f043 0304 	orr.w	r3, r3, #4
 81053f4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81053f6:	f3bf 8f4f 	dsb	sy
}
 81053fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81053fc:	f3bf 8f6f 	isb	sy
}
 8105400:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105402:	7afb      	ldrb	r3, [r7, #11]
 8105404:	2b01      	cmp	r3, #1
 8105406:	d101      	bne.n	810540c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105408:	bf30      	wfi
 810540a:	e000      	b.n	810540e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810540c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810540e:	4b24      	ldr	r3, [pc, #144]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105410:	691b      	ldr	r3, [r3, #16]
 8105412:	4a23      	ldr	r2, [pc, #140]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105414:	f023 0304 	bic.w	r3, r3, #4
 8105418:	6113      	str	r3, [r2, #16]
 810541a:	e03c      	b.n	8105496 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	2b01      	cmp	r3, #1
 8105420:	d123      	bne.n	810546a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105422:	f7fd f9ed 	bl	8102800 <HAL_GetCurrentCPUID>
 8105426:	4603      	mov	r3, r0
 8105428:	2b01      	cmp	r3, #1
 810542a:	d133      	bne.n	8105494 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810542c:	4b1b      	ldr	r3, [pc, #108]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 810542e:	695b      	ldr	r3, [r3, #20]
 8105430:	4a1a      	ldr	r2, [pc, #104]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105432:	f023 0302 	bic.w	r3, r3, #2
 8105436:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105438:	4b19      	ldr	r3, [pc, #100]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810543a:	691b      	ldr	r3, [r3, #16]
 810543c:	4a18      	ldr	r2, [pc, #96]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810543e:	f043 0304 	orr.w	r3, r3, #4
 8105442:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105444:	f3bf 8f4f 	dsb	sy
}
 8105448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810544a:	f3bf 8f6f 	isb	sy
}
 810544e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105450:	7afb      	ldrb	r3, [r7, #11]
 8105452:	2b01      	cmp	r3, #1
 8105454:	d101      	bne.n	810545a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105456:	bf30      	wfi
 8105458:	e000      	b.n	810545c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810545a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810545c:	4b10      	ldr	r3, [pc, #64]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810545e:	691b      	ldr	r3, [r3, #16]
 8105460:	4a0f      	ldr	r2, [pc, #60]	; (81054a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105462:	f023 0304 	bic.w	r3, r3, #4
 8105466:	6113      	str	r3, [r2, #16]
 8105468:	e015      	b.n	8105496 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810546a:	f7fd f9c9 	bl	8102800 <HAL_GetCurrentCPUID>
 810546e:	4603      	mov	r3, r0
 8105470:	2b03      	cmp	r3, #3
 8105472:	d106      	bne.n	8105482 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105474:	4b09      	ldr	r3, [pc, #36]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105476:	691b      	ldr	r3, [r3, #16]
 8105478:	4a08      	ldr	r2, [pc, #32]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 810547a:	f023 0304 	bic.w	r3, r3, #4
 810547e:	6113      	str	r3, [r2, #16]
 8105480:	e009      	b.n	8105496 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105482:	4b06      	ldr	r3, [pc, #24]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105484:	695b      	ldr	r3, [r3, #20]
 8105486:	4a05      	ldr	r2, [pc, #20]	; (810549c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105488:	f023 0304 	bic.w	r3, r3, #4
 810548c:	6153      	str	r3, [r2, #20]
 810548e:	e002      	b.n	8105496 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105490:	bf00      	nop
 8105492:	e000      	b.n	8105496 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105494:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105496:	3710      	adds	r7, #16
 8105498:	46bd      	mov	sp, r7
 810549a:	bd80      	pop	{r7, pc}
 810549c:	58024800 	.word	0x58024800
 81054a0:	e000ed00 	.word	0xe000ed00

081054a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81054a4:	b580      	push	{r7, lr}
 81054a6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81054a8:	f7fd f9aa 	bl	8102800 <HAL_GetCurrentCPUID>
 81054ac:	4603      	mov	r3, r0
 81054ae:	2b03      	cmp	r3, #3
 81054b0:	d101      	bne.n	81054b6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81054b2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81054b4:	e001      	b.n	81054ba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81054b6:	bf40      	sev
    __WFE ();
 81054b8:	bf20      	wfe
}
 81054ba:	bf00      	nop
 81054bc:	bd80      	pop	{r7, pc}
	...

081054c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81054c0:	b480      	push	{r7}
 81054c2:	b089      	sub	sp, #36	; 0x24
 81054c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81054c6:	4bb3      	ldr	r3, [pc, #716]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81054c8:	691b      	ldr	r3, [r3, #16]
 81054ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81054ce:	2b18      	cmp	r3, #24
 81054d0:	f200 8155 	bhi.w	810577e <HAL_RCC_GetSysClockFreq+0x2be>
 81054d4:	a201      	add	r2, pc, #4	; (adr r2, 81054dc <HAL_RCC_GetSysClockFreq+0x1c>)
 81054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054da:	bf00      	nop
 81054dc:	08105541 	.word	0x08105541
 81054e0:	0810577f 	.word	0x0810577f
 81054e4:	0810577f 	.word	0x0810577f
 81054e8:	0810577f 	.word	0x0810577f
 81054ec:	0810577f 	.word	0x0810577f
 81054f0:	0810577f 	.word	0x0810577f
 81054f4:	0810577f 	.word	0x0810577f
 81054f8:	0810577f 	.word	0x0810577f
 81054fc:	08105567 	.word	0x08105567
 8105500:	0810577f 	.word	0x0810577f
 8105504:	0810577f 	.word	0x0810577f
 8105508:	0810577f 	.word	0x0810577f
 810550c:	0810577f 	.word	0x0810577f
 8105510:	0810577f 	.word	0x0810577f
 8105514:	0810577f 	.word	0x0810577f
 8105518:	0810577f 	.word	0x0810577f
 810551c:	0810556d 	.word	0x0810556d
 8105520:	0810577f 	.word	0x0810577f
 8105524:	0810577f 	.word	0x0810577f
 8105528:	0810577f 	.word	0x0810577f
 810552c:	0810577f 	.word	0x0810577f
 8105530:	0810577f 	.word	0x0810577f
 8105534:	0810577f 	.word	0x0810577f
 8105538:	0810577f 	.word	0x0810577f
 810553c:	08105573 	.word	0x08105573
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105540:	4b94      	ldr	r3, [pc, #592]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	f003 0320 	and.w	r3, r3, #32
 8105548:	2b00      	cmp	r3, #0
 810554a:	d009      	beq.n	8105560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810554c:	4b91      	ldr	r3, [pc, #580]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	08db      	lsrs	r3, r3, #3
 8105552:	f003 0303 	and.w	r3, r3, #3
 8105556:	4a90      	ldr	r2, [pc, #576]	; (8105798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105558:	fa22 f303 	lsr.w	r3, r2, r3
 810555c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810555e:	e111      	b.n	8105784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105560:	4b8d      	ldr	r3, [pc, #564]	; (8105798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105562:	61bb      	str	r3, [r7, #24]
    break;
 8105564:	e10e      	b.n	8105784 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105566:	4b8d      	ldr	r3, [pc, #564]	; (810579c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105568:	61bb      	str	r3, [r7, #24]
    break;
 810556a:	e10b      	b.n	8105784 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810556c:	4b8c      	ldr	r3, [pc, #560]	; (81057a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810556e:	61bb      	str	r3, [r7, #24]
    break;
 8105570:	e108      	b.n	8105784 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105572:	4b88      	ldr	r3, [pc, #544]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105576:	f003 0303 	and.w	r3, r3, #3
 810557a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810557c:	4b85      	ldr	r3, [pc, #532]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105580:	091b      	lsrs	r3, r3, #4
 8105582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105586:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105588:	4b82      	ldr	r3, [pc, #520]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810558c:	f003 0301 	and.w	r3, r3, #1
 8105590:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105592:	4b80      	ldr	r3, [pc, #512]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105596:	08db      	lsrs	r3, r3, #3
 8105598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810559c:	68fa      	ldr	r2, [r7, #12]
 810559e:	fb02 f303 	mul.w	r3, r2, r3
 81055a2:	ee07 3a90 	vmov	s15, r3
 81055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81055ae:	693b      	ldr	r3, [r7, #16]
 81055b0:	2b00      	cmp	r3, #0
 81055b2:	f000 80e1 	beq.w	8105778 <HAL_RCC_GetSysClockFreq+0x2b8>
 81055b6:	697b      	ldr	r3, [r7, #20]
 81055b8:	2b02      	cmp	r3, #2
 81055ba:	f000 8083 	beq.w	81056c4 <HAL_RCC_GetSysClockFreq+0x204>
 81055be:	697b      	ldr	r3, [r7, #20]
 81055c0:	2b02      	cmp	r3, #2
 81055c2:	f200 80a1 	bhi.w	8105708 <HAL_RCC_GetSysClockFreq+0x248>
 81055c6:	697b      	ldr	r3, [r7, #20]
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d003      	beq.n	81055d4 <HAL_RCC_GetSysClockFreq+0x114>
 81055cc:	697b      	ldr	r3, [r7, #20]
 81055ce:	2b01      	cmp	r3, #1
 81055d0:	d056      	beq.n	8105680 <HAL_RCC_GetSysClockFreq+0x1c0>
 81055d2:	e099      	b.n	8105708 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055d4:	4b6f      	ldr	r3, [pc, #444]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	f003 0320 	and.w	r3, r3, #32
 81055dc:	2b00      	cmp	r3, #0
 81055de:	d02d      	beq.n	810563c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81055e0:	4b6c      	ldr	r3, [pc, #432]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055e2:	681b      	ldr	r3, [r3, #0]
 81055e4:	08db      	lsrs	r3, r3, #3
 81055e6:	f003 0303 	and.w	r3, r3, #3
 81055ea:	4a6b      	ldr	r2, [pc, #428]	; (8105798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81055ec:	fa22 f303 	lsr.w	r3, r2, r3
 81055f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	ee07 3a90 	vmov	s15, r3
 81055f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055fc:	693b      	ldr	r3, [r7, #16]
 81055fe:	ee07 3a90 	vmov	s15, r3
 8105602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810560a:	4b62      	ldr	r3, [pc, #392]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105612:	ee07 3a90 	vmov	s15, r3
 8105616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810561a:	ed97 6a02 	vldr	s12, [r7, #8]
 810561e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810562a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810563a:	e087      	b.n	810574c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810563c:	693b      	ldr	r3, [r7, #16]
 810563e:	ee07 3a90 	vmov	s15, r3
 8105642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105646:	eddf 6a58 	vldr	s13, [pc, #352]	; 81057a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810564e:	4b51      	ldr	r3, [pc, #324]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105656:	ee07 3a90 	vmov	s15, r3
 810565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810565e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105662:	eddf 5a50 	vldr	s11, [pc, #320]	; 81057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810566e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105676:	ee67 7a27 	vmul.f32	s15, s14, s15
 810567a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810567e:	e065      	b.n	810574c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105680:	693b      	ldr	r3, [r7, #16]
 8105682:	ee07 3a90 	vmov	s15, r3
 8105686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810568a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81057ac <HAL_RCC_GetSysClockFreq+0x2ec>
 810568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105692:	4b40      	ldr	r3, [pc, #256]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810569a:	ee07 3a90 	vmov	s15, r3
 810569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81056a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81056c2:	e043      	b.n	810574c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81056c4:	693b      	ldr	r3, [r7, #16]
 81056c6:	ee07 3a90 	vmov	s15, r3
 81056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 81057b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056d6:	4b2f      	ldr	r3, [pc, #188]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056de:	ee07 3a90 	vmov	s15, r3
 81056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81056ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105706:	e021      	b.n	810574c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105708:	693b      	ldr	r3, [r7, #16]
 810570a:	ee07 3a90 	vmov	s15, r3
 810570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105712:	eddf 6a26 	vldr	s13, [pc, #152]	; 81057ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8105716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810571a:	4b1e      	ldr	r3, [pc, #120]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105722:	ee07 3a90 	vmov	s15, r3
 8105726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810572a:	ed97 6a02 	vldr	s12, [r7, #8]
 810572e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810573a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810574a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810574c:	4b11      	ldr	r3, [pc, #68]	; (8105794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105750:	0a5b      	lsrs	r3, r3, #9
 8105752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105756:	3301      	adds	r3, #1
 8105758:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810575a:	683b      	ldr	r3, [r7, #0]
 810575c:	ee07 3a90 	vmov	s15, r3
 8105760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105764:	edd7 6a07 	vldr	s13, [r7, #28]
 8105768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810576c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105770:	ee17 3a90 	vmov	r3, s15
 8105774:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8105776:	e005      	b.n	8105784 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8105778:	2300      	movs	r3, #0
 810577a:	61bb      	str	r3, [r7, #24]
    break;
 810577c:	e002      	b.n	8105784 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810577e:	4b07      	ldr	r3, [pc, #28]	; (810579c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105780:	61bb      	str	r3, [r7, #24]
    break;
 8105782:	bf00      	nop
  }

  return sysclockfreq;
 8105784:	69bb      	ldr	r3, [r7, #24]
}
 8105786:	4618      	mov	r0, r3
 8105788:	3724      	adds	r7, #36	; 0x24
 810578a:	46bd      	mov	sp, r7
 810578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105790:	4770      	bx	lr
 8105792:	bf00      	nop
 8105794:	58024400 	.word	0x58024400
 8105798:	03d09000 	.word	0x03d09000
 810579c:	003d0900 	.word	0x003d0900
 81057a0:	007a1200 	.word	0x007a1200
 81057a4:	46000000 	.word	0x46000000
 81057a8:	4c742400 	.word	0x4c742400
 81057ac:	4a742400 	.word	0x4a742400
 81057b0:	4af42400 	.word	0x4af42400

081057b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81057b4:	b580      	push	{r7, lr}
 81057b6:	b082      	sub	sp, #8
 81057b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81057ba:	f7ff fe81 	bl	81054c0 <HAL_RCC_GetSysClockFreq>
 81057be:	4602      	mov	r2, r0
 81057c0:	4b11      	ldr	r3, [pc, #68]	; (8105808 <HAL_RCC_GetHCLKFreq+0x54>)
 81057c2:	699b      	ldr	r3, [r3, #24]
 81057c4:	0a1b      	lsrs	r3, r3, #8
 81057c6:	f003 030f 	and.w	r3, r3, #15
 81057ca:	4910      	ldr	r1, [pc, #64]	; (810580c <HAL_RCC_GetHCLKFreq+0x58>)
 81057cc:	5ccb      	ldrb	r3, [r1, r3]
 81057ce:	f003 031f 	and.w	r3, r3, #31
 81057d2:	fa22 f303 	lsr.w	r3, r2, r3
 81057d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81057d8:	4b0b      	ldr	r3, [pc, #44]	; (8105808 <HAL_RCC_GetHCLKFreq+0x54>)
 81057da:	699b      	ldr	r3, [r3, #24]
 81057dc:	f003 030f 	and.w	r3, r3, #15
 81057e0:	4a0a      	ldr	r2, [pc, #40]	; (810580c <HAL_RCC_GetHCLKFreq+0x58>)
 81057e2:	5cd3      	ldrb	r3, [r2, r3]
 81057e4:	f003 031f 	and.w	r3, r3, #31
 81057e8:	687a      	ldr	r2, [r7, #4]
 81057ea:	fa22 f303 	lsr.w	r3, r2, r3
 81057ee:	4a08      	ldr	r2, [pc, #32]	; (8105810 <HAL_RCC_GetHCLKFreq+0x5c>)
 81057f0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81057f2:	4b07      	ldr	r3, [pc, #28]	; (8105810 <HAL_RCC_GetHCLKFreq+0x5c>)
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	4a07      	ldr	r2, [pc, #28]	; (8105814 <HAL_RCC_GetHCLKFreq+0x60>)
 81057f8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81057fa:	4b05      	ldr	r3, [pc, #20]	; (8105810 <HAL_RCC_GetHCLKFreq+0x5c>)
 81057fc:	681b      	ldr	r3, [r3, #0]
}
 81057fe:	4618      	mov	r0, r3
 8105800:	3708      	adds	r7, #8
 8105802:	46bd      	mov	sp, r7
 8105804:	bd80      	pop	{r7, pc}
 8105806:	bf00      	nop
 8105808:	58024400 	.word	0x58024400
 810580c:	0810dff8 	.word	0x0810dff8
 8105810:	10000004 	.word	0x10000004
 8105814:	10000000 	.word	0x10000000

08105818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105818:	b580      	push	{r7, lr}
 810581a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810581c:	f7ff ffca 	bl	81057b4 <HAL_RCC_GetHCLKFreq>
 8105820:	4602      	mov	r2, r0
 8105822:	4b06      	ldr	r3, [pc, #24]	; (810583c <HAL_RCC_GetPCLK1Freq+0x24>)
 8105824:	69db      	ldr	r3, [r3, #28]
 8105826:	091b      	lsrs	r3, r3, #4
 8105828:	f003 0307 	and.w	r3, r3, #7
 810582c:	4904      	ldr	r1, [pc, #16]	; (8105840 <HAL_RCC_GetPCLK1Freq+0x28>)
 810582e:	5ccb      	ldrb	r3, [r1, r3]
 8105830:	f003 031f 	and.w	r3, r3, #31
 8105834:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105838:	4618      	mov	r0, r3
 810583a:	bd80      	pop	{r7, pc}
 810583c:	58024400 	.word	0x58024400
 8105840:	0810dff8 	.word	0x0810dff8

08105844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105844:	b580      	push	{r7, lr}
 8105846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105848:	f7ff ffb4 	bl	81057b4 <HAL_RCC_GetHCLKFreq>
 810584c:	4602      	mov	r2, r0
 810584e:	4b06      	ldr	r3, [pc, #24]	; (8105868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105850:	69db      	ldr	r3, [r3, #28]
 8105852:	0a1b      	lsrs	r3, r3, #8
 8105854:	f003 0307 	and.w	r3, r3, #7
 8105858:	4904      	ldr	r1, [pc, #16]	; (810586c <HAL_RCC_GetPCLK2Freq+0x28>)
 810585a:	5ccb      	ldrb	r3, [r1, r3]
 810585c:	f003 031f 	and.w	r3, r3, #31
 8105860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105864:	4618      	mov	r0, r3
 8105866:	bd80      	pop	{r7, pc}
 8105868:	58024400 	.word	0x58024400
 810586c:	0810dff8 	.word	0x0810dff8

08105870 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105870:	b580      	push	{r7, lr}
 8105872:	b086      	sub	sp, #24
 8105874:	af00      	add	r7, sp, #0
 8105876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105878:	2300      	movs	r3, #0
 810587a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810587c:	2300      	movs	r3, #0
 810587e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105888:	2b00      	cmp	r3, #0
 810588a:	d03f      	beq.n	810590c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105894:	d02a      	beq.n	81058ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105896:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810589a:	d824      	bhi.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810589c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81058a0:	d018      	beq.n	81058d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81058a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81058a6:	d81e      	bhi.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d003      	beq.n	81058b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81058ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81058b0:	d007      	beq.n	81058c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81058b2:	e018      	b.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058b4:	4ba3      	ldr	r3, [pc, #652]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058b8:	4aa2      	ldr	r2, [pc, #648]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81058ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81058be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81058c0:	e015      	b.n	81058ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	3304      	adds	r3, #4
 81058c6:	2102      	movs	r1, #2
 81058c8:	4618      	mov	r0, r3
 81058ca:	f001 f9d5 	bl	8106c78 <RCCEx_PLL2_Config>
 81058ce:	4603      	mov	r3, r0
 81058d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81058d2:	e00c      	b.n	81058ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	3324      	adds	r3, #36	; 0x24
 81058d8:	2102      	movs	r1, #2
 81058da:	4618      	mov	r0, r3
 81058dc:	f001 fa7e 	bl	8106ddc <RCCEx_PLL3_Config>
 81058e0:	4603      	mov	r3, r0
 81058e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81058e4:	e003      	b.n	81058ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81058e6:	2301      	movs	r3, #1
 81058e8:	75fb      	strb	r3, [r7, #23]
      break;
 81058ea:	e000      	b.n	81058ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81058ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81058ee:	7dfb      	ldrb	r3, [r7, #23]
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	d109      	bne.n	8105908 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81058f4:	4b93      	ldr	r3, [pc, #588]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81058f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105900:	4990      	ldr	r1, [pc, #576]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105902:	4313      	orrs	r3, r2
 8105904:	650b      	str	r3, [r1, #80]	; 0x50
 8105906:	e001      	b.n	810590c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105908:	7dfb      	ldrb	r3, [r7, #23]
 810590a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105914:	2b00      	cmp	r3, #0
 8105916:	d03d      	beq.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810591c:	2b04      	cmp	r3, #4
 810591e:	d826      	bhi.n	810596e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8105920:	a201      	add	r2, pc, #4	; (adr r2, 8105928 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8105922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105926:	bf00      	nop
 8105928:	0810593d 	.word	0x0810593d
 810592c:	0810594b 	.word	0x0810594b
 8105930:	0810595d 	.word	0x0810595d
 8105934:	08105975 	.word	0x08105975
 8105938:	08105975 	.word	0x08105975
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810593c:	4b81      	ldr	r3, [pc, #516]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105940:	4a80      	ldr	r2, [pc, #512]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105948:	e015      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810594a:	687b      	ldr	r3, [r7, #4]
 810594c:	3304      	adds	r3, #4
 810594e:	2100      	movs	r1, #0
 8105950:	4618      	mov	r0, r3
 8105952:	f001 f991 	bl	8106c78 <RCCEx_PLL2_Config>
 8105956:	4603      	mov	r3, r0
 8105958:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810595a:	e00c      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	3324      	adds	r3, #36	; 0x24
 8105960:	2100      	movs	r1, #0
 8105962:	4618      	mov	r0, r3
 8105964:	f001 fa3a 	bl	8106ddc <RCCEx_PLL3_Config>
 8105968:	4603      	mov	r3, r0
 810596a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810596c:	e003      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810596e:	2301      	movs	r3, #1
 8105970:	75fb      	strb	r3, [r7, #23]
      break;
 8105972:	e000      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105976:	7dfb      	ldrb	r3, [r7, #23]
 8105978:	2b00      	cmp	r3, #0
 810597a:	d109      	bne.n	8105990 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810597c:	4b71      	ldr	r3, [pc, #452]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105980:	f023 0207 	bic.w	r2, r3, #7
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105988:	496e      	ldr	r1, [pc, #440]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810598a:	4313      	orrs	r3, r2
 810598c:	650b      	str	r3, [r1, #80]	; 0x50
 810598e:	e001      	b.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105990:	7dfb      	ldrb	r3, [r7, #23]
 8105992:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810599c:	2b00      	cmp	r3, #0
 810599e:	d042      	beq.n	8105a26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81059a8:	d02b      	beq.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 81059aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81059ae:	d825      	bhi.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81059b0:	2bc0      	cmp	r3, #192	; 0xc0
 81059b2:	d028      	beq.n	8105a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81059b4:	2bc0      	cmp	r3, #192	; 0xc0
 81059b6:	d821      	bhi.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81059b8:	2b80      	cmp	r3, #128	; 0x80
 81059ba:	d016      	beq.n	81059ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81059bc:	2b80      	cmp	r3, #128	; 0x80
 81059be:	d81d      	bhi.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81059c0:	2b00      	cmp	r3, #0
 81059c2:	d002      	beq.n	81059ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81059c4:	2b40      	cmp	r3, #64	; 0x40
 81059c6:	d007      	beq.n	81059d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81059c8:	e018      	b.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059ca:	4b5e      	ldr	r3, [pc, #376]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059ce:	4a5d      	ldr	r2, [pc, #372]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81059d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81059d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81059d6:	e017      	b.n	8105a08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	3304      	adds	r3, #4
 81059dc:	2100      	movs	r1, #0
 81059de:	4618      	mov	r0, r3
 81059e0:	f001 f94a 	bl	8106c78 <RCCEx_PLL2_Config>
 81059e4:	4603      	mov	r3, r0
 81059e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81059e8:	e00e      	b.n	8105a08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81059ea:	687b      	ldr	r3, [r7, #4]
 81059ec:	3324      	adds	r3, #36	; 0x24
 81059ee:	2100      	movs	r1, #0
 81059f0:	4618      	mov	r0, r3
 81059f2:	f001 f9f3 	bl	8106ddc <RCCEx_PLL3_Config>
 81059f6:	4603      	mov	r3, r0
 81059f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81059fa:	e005      	b.n	8105a08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81059fc:	2301      	movs	r3, #1
 81059fe:	75fb      	strb	r3, [r7, #23]
      break;
 8105a00:	e002      	b.n	8105a08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105a02:	bf00      	nop
 8105a04:	e000      	b.n	8105a08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a08:	7dfb      	ldrb	r3, [r7, #23]
 8105a0a:	2b00      	cmp	r3, #0
 8105a0c:	d109      	bne.n	8105a22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105a0e:	4b4d      	ldr	r3, [pc, #308]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a1a:	494a      	ldr	r1, [pc, #296]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a1c:	4313      	orrs	r3, r2
 8105a1e:	650b      	str	r3, [r1, #80]	; 0x50
 8105a20:	e001      	b.n	8105a26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a22:	7dfb      	ldrb	r3, [r7, #23]
 8105a24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105a2e:	2b00      	cmp	r3, #0
 8105a30:	d049      	beq.n	8105ac6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105a3c:	d030      	beq.n	8105aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105a42:	d82a      	bhi.n	8105a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105a44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105a48:	d02c      	beq.n	8105aa4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105a4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105a4e:	d824      	bhi.n	8105a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105a54:	d018      	beq.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105a5a:	d81e      	bhi.n	8105a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105a5c:	2b00      	cmp	r3, #0
 8105a5e:	d003      	beq.n	8105a68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a64:	d007      	beq.n	8105a76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105a66:	e018      	b.n	8105a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a68:	4b36      	ldr	r3, [pc, #216]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a6c:	4a35      	ldr	r2, [pc, #212]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105a74:	e017      	b.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	3304      	adds	r3, #4
 8105a7a:	2100      	movs	r1, #0
 8105a7c:	4618      	mov	r0, r3
 8105a7e:	f001 f8fb 	bl	8106c78 <RCCEx_PLL2_Config>
 8105a82:	4603      	mov	r3, r0
 8105a84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105a86:	e00e      	b.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	3324      	adds	r3, #36	; 0x24
 8105a8c:	2100      	movs	r1, #0
 8105a8e:	4618      	mov	r0, r3
 8105a90:	f001 f9a4 	bl	8106ddc <RCCEx_PLL3_Config>
 8105a94:	4603      	mov	r3, r0
 8105a96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105a98:	e005      	b.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105a9a:	2301      	movs	r3, #1
 8105a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8105a9e:	e002      	b.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105aa0:	bf00      	nop
 8105aa2:	e000      	b.n	8105aa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105aa6:	7dfb      	ldrb	r3, [r7, #23]
 8105aa8:	2b00      	cmp	r3, #0
 8105aaa:	d10a      	bne.n	8105ac2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105aac:	4b25      	ldr	r3, [pc, #148]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ab0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105aba:	4922      	ldr	r1, [pc, #136]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105abc:	4313      	orrs	r3, r2
 8105abe:	658b      	str	r3, [r1, #88]	; 0x58
 8105ac0:	e001      	b.n	8105ac6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ac2:	7dfb      	ldrb	r3, [r7, #23]
 8105ac4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d04b      	beq.n	8105b6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105adc:	d030      	beq.n	8105b40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105ae2:	d82a      	bhi.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105ae8:	d02e      	beq.n	8105b48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8105aea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105aee:	d824      	bhi.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105af4:	d018      	beq.n	8105b28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105afa:	d81e      	bhi.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105afc:	2b00      	cmp	r3, #0
 8105afe:	d003      	beq.n	8105b08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105b04:	d007      	beq.n	8105b16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105b06:	e018      	b.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b08:	4b0e      	ldr	r3, [pc, #56]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b0c:	4a0d      	ldr	r2, [pc, #52]	; (8105b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b14:	e019      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	3304      	adds	r3, #4
 8105b1a:	2100      	movs	r1, #0
 8105b1c:	4618      	mov	r0, r3
 8105b1e:	f001 f8ab 	bl	8106c78 <RCCEx_PLL2_Config>
 8105b22:	4603      	mov	r3, r0
 8105b24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105b26:	e010      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	3324      	adds	r3, #36	; 0x24
 8105b2c:	2100      	movs	r1, #0
 8105b2e:	4618      	mov	r0, r3
 8105b30:	f001 f954 	bl	8106ddc <RCCEx_PLL3_Config>
 8105b34:	4603      	mov	r3, r0
 8105b36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b38:	e007      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105b3a:	2301      	movs	r3, #1
 8105b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8105b3e:	e004      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105b40:	bf00      	nop
 8105b42:	e002      	b.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105b44:	58024400 	.word	0x58024400
      break;
 8105b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b4a:	7dfb      	ldrb	r3, [r7, #23]
 8105b4c:	2b00      	cmp	r3, #0
 8105b4e:	d10a      	bne.n	8105b66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105b50:	4b99      	ldr	r3, [pc, #612]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105b5e:	4996      	ldr	r1, [pc, #600]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105b60:	4313      	orrs	r3, r2
 8105b62:	658b      	str	r3, [r1, #88]	; 0x58
 8105b64:	e001      	b.n	8105b6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b66:	7dfb      	ldrb	r3, [r7, #23]
 8105b68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105b72:	2b00      	cmp	r3, #0
 8105b74:	d032      	beq.n	8105bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105b7a:	2b30      	cmp	r3, #48	; 0x30
 8105b7c:	d01c      	beq.n	8105bb8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105b7e:	2b30      	cmp	r3, #48	; 0x30
 8105b80:	d817      	bhi.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105b82:	2b20      	cmp	r3, #32
 8105b84:	d00c      	beq.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8105b86:	2b20      	cmp	r3, #32
 8105b88:	d813      	bhi.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105b8a:	2b00      	cmp	r3, #0
 8105b8c:	d016      	beq.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105b8e:	2b10      	cmp	r3, #16
 8105b90:	d10f      	bne.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b92:	4b89      	ldr	r3, [pc, #548]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b96:	4a88      	ldr	r2, [pc, #544]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105b9e:	e00e      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	3304      	adds	r3, #4
 8105ba4:	2102      	movs	r1, #2
 8105ba6:	4618      	mov	r0, r3
 8105ba8:	f001 f866 	bl	8106c78 <RCCEx_PLL2_Config>
 8105bac:	4603      	mov	r3, r0
 8105bae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105bb0:	e005      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105bb2:	2301      	movs	r3, #1
 8105bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8105bb6:	e002      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105bb8:	bf00      	nop
 8105bba:	e000      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bbe:	7dfb      	ldrb	r3, [r7, #23]
 8105bc0:	2b00      	cmp	r3, #0
 8105bc2:	d109      	bne.n	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105bc4:	4b7c      	ldr	r3, [pc, #496]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105bd0:	4979      	ldr	r1, [pc, #484]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105bd2:	4313      	orrs	r3, r2
 8105bd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105bd6:	e001      	b.n	8105bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bd8:	7dfb      	ldrb	r3, [r7, #23]
 8105bda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105be4:	2b00      	cmp	r3, #0
 8105be6:	d047      	beq.n	8105c78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105bf0:	d030      	beq.n	8105c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8105bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105bf6:	d82a      	bhi.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105bfc:	d02c      	beq.n	8105c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8105bfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105c02:	d824      	bhi.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c08:	d018      	beq.n	8105c3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8105c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c0e:	d81e      	bhi.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105c10:	2b00      	cmp	r3, #0
 8105c12:	d003      	beq.n	8105c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8105c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105c18:	d007      	beq.n	8105c2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8105c1a:	e018      	b.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c1c:	4b66      	ldr	r3, [pc, #408]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c20:	4a65      	ldr	r2, [pc, #404]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105c28:	e017      	b.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	3304      	adds	r3, #4
 8105c2e:	2100      	movs	r1, #0
 8105c30:	4618      	mov	r0, r3
 8105c32:	f001 f821 	bl	8106c78 <RCCEx_PLL2_Config>
 8105c36:	4603      	mov	r3, r0
 8105c38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105c3a:	e00e      	b.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	3324      	adds	r3, #36	; 0x24
 8105c40:	2100      	movs	r1, #0
 8105c42:	4618      	mov	r0, r3
 8105c44:	f001 f8ca 	bl	8106ddc <RCCEx_PLL3_Config>
 8105c48:	4603      	mov	r3, r0
 8105c4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105c4c:	e005      	b.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105c4e:	2301      	movs	r3, #1
 8105c50:	75fb      	strb	r3, [r7, #23]
      break;
 8105c52:	e002      	b.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105c54:	bf00      	nop
 8105c56:	e000      	b.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c5a:	7dfb      	ldrb	r3, [r7, #23]
 8105c5c:	2b00      	cmp	r3, #0
 8105c5e:	d109      	bne.n	8105c74 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105c60:	4b55      	ldr	r3, [pc, #340]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105c68:	687b      	ldr	r3, [r7, #4]
 8105c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c6c:	4952      	ldr	r1, [pc, #328]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105c6e:	4313      	orrs	r3, r2
 8105c70:	650b      	str	r3, [r1, #80]	; 0x50
 8105c72:	e001      	b.n	8105c78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c74:	7dfb      	ldrb	r3, [r7, #23]
 8105c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	681b      	ldr	r3, [r3, #0]
 8105c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105c80:	2b00      	cmp	r3, #0
 8105c82:	d049      	beq.n	8105d18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105c8c:	d02e      	beq.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105c92:	d828      	bhi.n	8105ce6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105c94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105c98:	d02a      	beq.n	8105cf0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8105c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105c9e:	d822      	bhi.n	8105ce6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105ca0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105ca4:	d026      	beq.n	8105cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8105ca6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105caa:	d81c      	bhi.n	8105ce6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105cb0:	d010      	beq.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105cb6:	d816      	bhi.n	8105ce6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d01d      	beq.n	8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105cc0:	d111      	bne.n	8105ce6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	3304      	adds	r3, #4
 8105cc6:	2101      	movs	r1, #1
 8105cc8:	4618      	mov	r0, r3
 8105cca:	f000 ffd5 	bl	8106c78 <RCCEx_PLL2_Config>
 8105cce:	4603      	mov	r3, r0
 8105cd0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105cd2:	e012      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	3324      	adds	r3, #36	; 0x24
 8105cd8:	2101      	movs	r1, #1
 8105cda:	4618      	mov	r0, r3
 8105cdc:	f001 f87e 	bl	8106ddc <RCCEx_PLL3_Config>
 8105ce0:	4603      	mov	r3, r0
 8105ce2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105ce4:	e009      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105ce6:	2301      	movs	r3, #1
 8105ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8105cea:	e006      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105cec:	bf00      	nop
 8105cee:	e004      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105cf0:	bf00      	nop
 8105cf2:	e002      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105cf4:	bf00      	nop
 8105cf6:	e000      	b.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105cfa:	7dfb      	ldrb	r3, [r7, #23]
 8105cfc:	2b00      	cmp	r3, #0
 8105cfe:	d109      	bne.n	8105d14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105d00:	4b2d      	ldr	r3, [pc, #180]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105d0c:	492a      	ldr	r1, [pc, #168]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d0e:	4313      	orrs	r3, r2
 8105d10:	650b      	str	r3, [r1, #80]	; 0x50
 8105d12:	e001      	b.n	8105d18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d14:	7dfb      	ldrb	r3, [r7, #23]
 8105d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105d20:	2b00      	cmp	r3, #0
 8105d22:	d04d      	beq.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105d2e:	d02e      	beq.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8105d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105d34:	d828      	bhi.n	8105d88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105d3a:	d02a      	beq.n	8105d92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8105d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105d40:	d822      	bhi.n	8105d88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105d42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105d46:	d026      	beq.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8105d48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105d4c:	d81c      	bhi.n	8105d88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d52:	d010      	beq.n	8105d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8105d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d58:	d816      	bhi.n	8105d88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105d5a:	2b00      	cmp	r3, #0
 8105d5c:	d01d      	beq.n	8105d9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8105d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105d62:	d111      	bne.n	8105d88 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	3304      	adds	r3, #4
 8105d68:	2101      	movs	r1, #1
 8105d6a:	4618      	mov	r0, r3
 8105d6c:	f000 ff84 	bl	8106c78 <RCCEx_PLL2_Config>
 8105d70:	4603      	mov	r3, r0
 8105d72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105d74:	e012      	b.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	3324      	adds	r3, #36	; 0x24
 8105d7a:	2101      	movs	r1, #1
 8105d7c:	4618      	mov	r0, r3
 8105d7e:	f001 f82d 	bl	8106ddc <RCCEx_PLL3_Config>
 8105d82:	4603      	mov	r3, r0
 8105d84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105d86:	e009      	b.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105d88:	2301      	movs	r3, #1
 8105d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8105d8c:	e006      	b.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105d8e:	bf00      	nop
 8105d90:	e004      	b.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105d92:	bf00      	nop
 8105d94:	e002      	b.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105d96:	bf00      	nop
 8105d98:	e000      	b.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d9c:	7dfb      	ldrb	r3, [r7, #23]
 8105d9e:	2b00      	cmp	r3, #0
 8105da0:	d10c      	bne.n	8105dbc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105da2:	4b05      	ldr	r3, [pc, #20]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105da6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105db0:	4901      	ldr	r1, [pc, #4]	; (8105db8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105db2:	4313      	orrs	r3, r2
 8105db4:	658b      	str	r3, [r1, #88]	; 0x58
 8105db6:	e003      	b.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dbc:	7dfb      	ldrb	r3, [r7, #23]
 8105dbe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d02f      	beq.n	8105e2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105dd4:	d00e      	beq.n	8105df4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8105dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105dda:	d814      	bhi.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8105ddc:	2b00      	cmp	r3, #0
 8105dde:	d015      	beq.n	8105e0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8105de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105de4:	d10f      	bne.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105de6:	4bb0      	ldr	r3, [pc, #704]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dea:	4aaf      	ldr	r2, [pc, #700]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105df2:	e00c      	b.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	3304      	adds	r3, #4
 8105df8:	2101      	movs	r1, #1
 8105dfa:	4618      	mov	r0, r3
 8105dfc:	f000 ff3c 	bl	8106c78 <RCCEx_PLL2_Config>
 8105e00:	4603      	mov	r3, r0
 8105e02:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105e04:	e003      	b.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105e06:	2301      	movs	r3, #1
 8105e08:	75fb      	strb	r3, [r7, #23]
      break;
 8105e0a:	e000      	b.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e0e:	7dfb      	ldrb	r3, [r7, #23]
 8105e10:	2b00      	cmp	r3, #0
 8105e12:	d109      	bne.n	8105e28 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105e14:	4ba4      	ldr	r3, [pc, #656]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e20:	49a1      	ldr	r1, [pc, #644]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105e22:	4313      	orrs	r3, r2
 8105e24:	650b      	str	r3, [r1, #80]	; 0x50
 8105e26:	e001      	b.n	8105e2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e28:	7dfb      	ldrb	r3, [r7, #23]
 8105e2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105e34:	2b00      	cmp	r3, #0
 8105e36:	d032      	beq.n	8105e9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105e3c:	2b03      	cmp	r3, #3
 8105e3e:	d81b      	bhi.n	8105e78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8105e40:	a201      	add	r2, pc, #4	; (adr r2, 8105e48 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8105e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e46:	bf00      	nop
 8105e48:	08105e7f 	.word	0x08105e7f
 8105e4c:	08105e59 	.word	0x08105e59
 8105e50:	08105e67 	.word	0x08105e67
 8105e54:	08105e7f 	.word	0x08105e7f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e58:	4b93      	ldr	r3, [pc, #588]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e5c:	4a92      	ldr	r2, [pc, #584]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105e64:	e00c      	b.n	8105e80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	3304      	adds	r3, #4
 8105e6a:	2102      	movs	r1, #2
 8105e6c:	4618      	mov	r0, r3
 8105e6e:	f000 ff03 	bl	8106c78 <RCCEx_PLL2_Config>
 8105e72:	4603      	mov	r3, r0
 8105e74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105e76:	e003      	b.n	8105e80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105e78:	2301      	movs	r3, #1
 8105e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8105e7c:	e000      	b.n	8105e80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8105e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e80:	7dfb      	ldrb	r3, [r7, #23]
 8105e82:	2b00      	cmp	r3, #0
 8105e84:	d109      	bne.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105e86:	4b88      	ldr	r3, [pc, #544]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e8a:	f023 0203 	bic.w	r2, r3, #3
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105e92:	4985      	ldr	r1, [pc, #532]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105e94:	4313      	orrs	r3, r2
 8105e96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105e98:	e001      	b.n	8105e9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e9a:	7dfb      	ldrb	r3, [r7, #23]
 8105e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105e9e:	687b      	ldr	r3, [r7, #4]
 8105ea0:	681b      	ldr	r3, [r3, #0]
 8105ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105ea6:	2b00      	cmp	r3, #0
 8105ea8:	f000 8088 	beq.w	8105fbc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105eac:	4b7f      	ldr	r3, [pc, #508]	; (81060ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	4a7e      	ldr	r2, [pc, #504]	; (81060ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105eb8:	f7fc fb86 	bl	81025c8 <HAL_GetTick>
 8105ebc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105ebe:	e009      	b.n	8105ed4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105ec0:	f7fc fb82 	bl	81025c8 <HAL_GetTick>
 8105ec4:	4602      	mov	r2, r0
 8105ec6:	693b      	ldr	r3, [r7, #16]
 8105ec8:	1ad3      	subs	r3, r2, r3
 8105eca:	2b64      	cmp	r3, #100	; 0x64
 8105ecc:	d902      	bls.n	8105ed4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8105ece:	2303      	movs	r3, #3
 8105ed0:	75fb      	strb	r3, [r7, #23]
        break;
 8105ed2:	e005      	b.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105ed4:	4b75      	ldr	r3, [pc, #468]	; (81060ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105edc:	2b00      	cmp	r3, #0
 8105ede:	d0ef      	beq.n	8105ec0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8105ee0:	7dfb      	ldrb	r3, [r7, #23]
 8105ee2:	2b00      	cmp	r3, #0
 8105ee4:	d168      	bne.n	8105fb8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105ee6:	4b70      	ldr	r3, [pc, #448]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105ef0:	4053      	eors	r3, r2
 8105ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	d013      	beq.n	8105f22 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105efa:	4b6b      	ldr	r3, [pc, #428]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105f02:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105f04:	4b68      	ldr	r3, [pc, #416]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f08:	4a67      	ldr	r2, [pc, #412]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105f0e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105f10:	4b65      	ldr	r3, [pc, #404]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f14:	4a64      	ldr	r2, [pc, #400]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105f1a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105f1c:	4a62      	ldr	r2, [pc, #392]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f1e:	68fb      	ldr	r3, [r7, #12]
 8105f20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105f2c:	d115      	bne.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105f2e:	f7fc fb4b 	bl	81025c8 <HAL_GetTick>
 8105f32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105f34:	e00b      	b.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105f36:	f7fc fb47 	bl	81025c8 <HAL_GetTick>
 8105f3a:	4602      	mov	r2, r0
 8105f3c:	693b      	ldr	r3, [r7, #16]
 8105f3e:	1ad3      	subs	r3, r2, r3
 8105f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8105f44:	4293      	cmp	r3, r2
 8105f46:	d902      	bls.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8105f48:	2303      	movs	r3, #3
 8105f4a:	75fb      	strb	r3, [r7, #23]
            break;
 8105f4c:	e005      	b.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105f4e:	4b56      	ldr	r3, [pc, #344]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f52:	f003 0302 	and.w	r3, r3, #2
 8105f56:	2b00      	cmp	r3, #0
 8105f58:	d0ed      	beq.n	8105f36 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8105f5a:	7dfb      	ldrb	r3, [r7, #23]
 8105f5c:	2b00      	cmp	r3, #0
 8105f5e:	d128      	bne.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105f6e:	d10f      	bne.n	8105f90 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8105f70:	4b4d      	ldr	r3, [pc, #308]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f72:	691b      	ldr	r3, [r3, #16]
 8105f74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105f7e:	091b      	lsrs	r3, r3, #4
 8105f80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105f84:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105f88:	4947      	ldr	r1, [pc, #284]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f8a:	4313      	orrs	r3, r2
 8105f8c:	610b      	str	r3, [r1, #16]
 8105f8e:	e005      	b.n	8105f9c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8105f90:	4b45      	ldr	r3, [pc, #276]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f92:	691b      	ldr	r3, [r3, #16]
 8105f94:	4a44      	ldr	r2, [pc, #272]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105f9a:	6113      	str	r3, [r2, #16]
 8105f9c:	4b42      	ldr	r3, [pc, #264]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105faa:	493f      	ldr	r1, [pc, #252]	; (81060a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fac:	4313      	orrs	r3, r2
 8105fae:	670b      	str	r3, [r1, #112]	; 0x70
 8105fb0:	e004      	b.n	8105fbc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105fb2:	7dfb      	ldrb	r3, [r7, #23]
 8105fb4:	75bb      	strb	r3, [r7, #22]
 8105fb6:	e001      	b.n	8105fbc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fb8:	7dfb      	ldrb	r3, [r7, #23]
 8105fba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	f003 0301 	and.w	r3, r3, #1
 8105fc4:	2b00      	cmp	r3, #0
 8105fc6:	f000 8083 	beq.w	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105fce:	2b28      	cmp	r3, #40	; 0x28
 8105fd0:	d866      	bhi.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8105fd2:	a201      	add	r2, pc, #4	; (adr r2, 8105fd8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8105fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fd8:	081060b1 	.word	0x081060b1
 8105fdc:	081060a1 	.word	0x081060a1
 8105fe0:	081060a1 	.word	0x081060a1
 8105fe4:	081060a1 	.word	0x081060a1
 8105fe8:	081060a1 	.word	0x081060a1
 8105fec:	081060a1 	.word	0x081060a1
 8105ff0:	081060a1 	.word	0x081060a1
 8105ff4:	081060a1 	.word	0x081060a1
 8105ff8:	0810607d 	.word	0x0810607d
 8105ffc:	081060a1 	.word	0x081060a1
 8106000:	081060a1 	.word	0x081060a1
 8106004:	081060a1 	.word	0x081060a1
 8106008:	081060a1 	.word	0x081060a1
 810600c:	081060a1 	.word	0x081060a1
 8106010:	081060a1 	.word	0x081060a1
 8106014:	081060a1 	.word	0x081060a1
 8106018:	0810608f 	.word	0x0810608f
 810601c:	081060a1 	.word	0x081060a1
 8106020:	081060a1 	.word	0x081060a1
 8106024:	081060a1 	.word	0x081060a1
 8106028:	081060a1 	.word	0x081060a1
 810602c:	081060a1 	.word	0x081060a1
 8106030:	081060a1 	.word	0x081060a1
 8106034:	081060a1 	.word	0x081060a1
 8106038:	081060b1 	.word	0x081060b1
 810603c:	081060a1 	.word	0x081060a1
 8106040:	081060a1 	.word	0x081060a1
 8106044:	081060a1 	.word	0x081060a1
 8106048:	081060a1 	.word	0x081060a1
 810604c:	081060a1 	.word	0x081060a1
 8106050:	081060a1 	.word	0x081060a1
 8106054:	081060a1 	.word	0x081060a1
 8106058:	081060b1 	.word	0x081060b1
 810605c:	081060a1 	.word	0x081060a1
 8106060:	081060a1 	.word	0x081060a1
 8106064:	081060a1 	.word	0x081060a1
 8106068:	081060a1 	.word	0x081060a1
 810606c:	081060a1 	.word	0x081060a1
 8106070:	081060a1 	.word	0x081060a1
 8106074:	081060a1 	.word	0x081060a1
 8106078:	081060b1 	.word	0x081060b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	3304      	adds	r3, #4
 8106080:	2101      	movs	r1, #1
 8106082:	4618      	mov	r0, r3
 8106084:	f000 fdf8 	bl	8106c78 <RCCEx_PLL2_Config>
 8106088:	4603      	mov	r3, r0
 810608a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810608c:	e011      	b.n	81060b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	3324      	adds	r3, #36	; 0x24
 8106092:	2101      	movs	r1, #1
 8106094:	4618      	mov	r0, r3
 8106096:	f000 fea1 	bl	8106ddc <RCCEx_PLL3_Config>
 810609a:	4603      	mov	r3, r0
 810609c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810609e:	e008      	b.n	81060b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81060a0:	2301      	movs	r3, #1
 81060a2:	75fb      	strb	r3, [r7, #23]
      break;
 81060a4:	e005      	b.n	81060b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 81060a6:	bf00      	nop
 81060a8:	58024400 	.word	0x58024400
 81060ac:	58024800 	.word	0x58024800
      break;
 81060b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81060b2:	7dfb      	ldrb	r3, [r7, #23]
 81060b4:	2b00      	cmp	r3, #0
 81060b6:	d109      	bne.n	81060cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81060b8:	4b96      	ldr	r3, [pc, #600]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81060bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81060c4:	4993      	ldr	r1, [pc, #588]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81060c6:	4313      	orrs	r3, r2
 81060c8:	654b      	str	r3, [r1, #84]	; 0x54
 81060ca:	e001      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060cc:	7dfb      	ldrb	r3, [r7, #23]
 81060ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	681b      	ldr	r3, [r3, #0]
 81060d4:	f003 0302 	and.w	r3, r3, #2
 81060d8:	2b00      	cmp	r3, #0
 81060da:	d038      	beq.n	810614e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81060e0:	2b05      	cmp	r3, #5
 81060e2:	d821      	bhi.n	8106128 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81060e4:	a201      	add	r2, pc, #4	; (adr r2, 81060ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060ea:	bf00      	nop
 81060ec:	0810612f 	.word	0x0810612f
 81060f0:	08106105 	.word	0x08106105
 81060f4:	08106117 	.word	0x08106117
 81060f8:	0810612f 	.word	0x0810612f
 81060fc:	0810612f 	.word	0x0810612f
 8106100:	0810612f 	.word	0x0810612f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	3304      	adds	r3, #4
 8106108:	2101      	movs	r1, #1
 810610a:	4618      	mov	r0, r3
 810610c:	f000 fdb4 	bl	8106c78 <RCCEx_PLL2_Config>
 8106110:	4603      	mov	r3, r0
 8106112:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106114:	e00c      	b.n	8106130 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	3324      	adds	r3, #36	; 0x24
 810611a:	2101      	movs	r1, #1
 810611c:	4618      	mov	r0, r3
 810611e:	f000 fe5d 	bl	8106ddc <RCCEx_PLL3_Config>
 8106122:	4603      	mov	r3, r0
 8106124:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106126:	e003      	b.n	8106130 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106128:	2301      	movs	r3, #1
 810612a:	75fb      	strb	r3, [r7, #23]
      break;
 810612c:	e000      	b.n	8106130 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 810612e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106130:	7dfb      	ldrb	r3, [r7, #23]
 8106132:	2b00      	cmp	r3, #0
 8106134:	d109      	bne.n	810614a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106136:	4b77      	ldr	r3, [pc, #476]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810613a:	f023 0207 	bic.w	r2, r3, #7
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106142:	4974      	ldr	r1, [pc, #464]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106144:	4313      	orrs	r3, r2
 8106146:	654b      	str	r3, [r1, #84]	; 0x54
 8106148:	e001      	b.n	810614e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810614a:	7dfb      	ldrb	r3, [r7, #23]
 810614c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	681b      	ldr	r3, [r3, #0]
 8106152:	f003 0304 	and.w	r3, r3, #4
 8106156:	2b00      	cmp	r3, #0
 8106158:	d03a      	beq.n	81061d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106160:	2b05      	cmp	r3, #5
 8106162:	d821      	bhi.n	81061a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8106164:	a201      	add	r2, pc, #4	; (adr r2, 810616c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8106166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810616a:	bf00      	nop
 810616c:	081061af 	.word	0x081061af
 8106170:	08106185 	.word	0x08106185
 8106174:	08106197 	.word	0x08106197
 8106178:	081061af 	.word	0x081061af
 810617c:	081061af 	.word	0x081061af
 8106180:	081061af 	.word	0x081061af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106184:	687b      	ldr	r3, [r7, #4]
 8106186:	3304      	adds	r3, #4
 8106188:	2101      	movs	r1, #1
 810618a:	4618      	mov	r0, r3
 810618c:	f000 fd74 	bl	8106c78 <RCCEx_PLL2_Config>
 8106190:	4603      	mov	r3, r0
 8106192:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106194:	e00c      	b.n	81061b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	3324      	adds	r3, #36	; 0x24
 810619a:	2101      	movs	r1, #1
 810619c:	4618      	mov	r0, r3
 810619e:	f000 fe1d 	bl	8106ddc <RCCEx_PLL3_Config>
 81061a2:	4603      	mov	r3, r0
 81061a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81061a6:	e003      	b.n	81061b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81061a8:	2301      	movs	r3, #1
 81061aa:	75fb      	strb	r3, [r7, #23]
      break;
 81061ac:	e000      	b.n	81061b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 81061ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81061b0:	7dfb      	ldrb	r3, [r7, #23]
 81061b2:	2b00      	cmp	r3, #0
 81061b4:	d10a      	bne.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81061b6:	4b57      	ldr	r3, [pc, #348]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81061ba:	f023 0207 	bic.w	r2, r3, #7
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81061c4:	4953      	ldr	r1, [pc, #332]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81061c6:	4313      	orrs	r3, r2
 81061c8:	658b      	str	r3, [r1, #88]	; 0x58
 81061ca:	e001      	b.n	81061d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061cc:	7dfb      	ldrb	r3, [r7, #23]
 81061ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	f003 0320 	and.w	r3, r3, #32
 81061d8:	2b00      	cmp	r3, #0
 81061da:	d04b      	beq.n	8106274 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81061e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81061e6:	d02e      	beq.n	8106246 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81061e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81061ec:	d828      	bhi.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81061f2:	d02a      	beq.n	810624a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81061f8:	d822      	bhi.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81061fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81061fe:	d026      	beq.n	810624e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106200:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106204:	d81c      	bhi.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810620a:	d010      	beq.n	810622e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106210:	d816      	bhi.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106212:	2b00      	cmp	r3, #0
 8106214:	d01d      	beq.n	8106252 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8106216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810621a:	d111      	bne.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810621c:	687b      	ldr	r3, [r7, #4]
 810621e:	3304      	adds	r3, #4
 8106220:	2100      	movs	r1, #0
 8106222:	4618      	mov	r0, r3
 8106224:	f000 fd28 	bl	8106c78 <RCCEx_PLL2_Config>
 8106228:	4603      	mov	r3, r0
 810622a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810622c:	e012      	b.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	3324      	adds	r3, #36	; 0x24
 8106232:	2102      	movs	r1, #2
 8106234:	4618      	mov	r0, r3
 8106236:	f000 fdd1 	bl	8106ddc <RCCEx_PLL3_Config>
 810623a:	4603      	mov	r3, r0
 810623c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810623e:	e009      	b.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106240:	2301      	movs	r3, #1
 8106242:	75fb      	strb	r3, [r7, #23]
      break;
 8106244:	e006      	b.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106246:	bf00      	nop
 8106248:	e004      	b.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810624a:	bf00      	nop
 810624c:	e002      	b.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810624e:	bf00      	nop
 8106250:	e000      	b.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106254:	7dfb      	ldrb	r3, [r7, #23]
 8106256:	2b00      	cmp	r3, #0
 8106258:	d10a      	bne.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810625a:	4b2e      	ldr	r3, [pc, #184]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810625e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106268:	492a      	ldr	r1, [pc, #168]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810626a:	4313      	orrs	r3, r2
 810626c:	654b      	str	r3, [r1, #84]	; 0x54
 810626e:	e001      	b.n	8106274 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106270:	7dfb      	ldrb	r3, [r7, #23]
 8106272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	681b      	ldr	r3, [r3, #0]
 8106278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810627c:	2b00      	cmp	r3, #0
 810627e:	d04d      	beq.n	810631c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810628a:	d02e      	beq.n	81062ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810628c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106290:	d828      	bhi.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8106292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106296:	d02a      	beq.n	81062ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8106298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810629c:	d822      	bhi.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810629e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81062a2:	d026      	beq.n	81062f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81062a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81062a8:	d81c      	bhi.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81062aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81062ae:	d010      	beq.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 81062b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81062b4:	d816      	bhi.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81062b6:	2b00      	cmp	r3, #0
 81062b8:	d01d      	beq.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 81062ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81062be:	d111      	bne.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	3304      	adds	r3, #4
 81062c4:	2100      	movs	r1, #0
 81062c6:	4618      	mov	r0, r3
 81062c8:	f000 fcd6 	bl	8106c78 <RCCEx_PLL2_Config>
 81062cc:	4603      	mov	r3, r0
 81062ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81062d0:	e012      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	3324      	adds	r3, #36	; 0x24
 81062d6:	2102      	movs	r1, #2
 81062d8:	4618      	mov	r0, r3
 81062da:	f000 fd7f 	bl	8106ddc <RCCEx_PLL3_Config>
 81062de:	4603      	mov	r3, r0
 81062e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81062e2:	e009      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81062e4:	2301      	movs	r3, #1
 81062e6:	75fb      	strb	r3, [r7, #23]
      break;
 81062e8:	e006      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81062ea:	bf00      	nop
 81062ec:	e004      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81062ee:	bf00      	nop
 81062f0:	e002      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81062f2:	bf00      	nop
 81062f4:	e000      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81062f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81062f8:	7dfb      	ldrb	r3, [r7, #23]
 81062fa:	2b00      	cmp	r3, #0
 81062fc:	d10c      	bne.n	8106318 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81062fe:	4b05      	ldr	r3, [pc, #20]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106302:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810630c:	4901      	ldr	r1, [pc, #4]	; (8106314 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810630e:	4313      	orrs	r3, r2
 8106310:	658b      	str	r3, [r1, #88]	; 0x58
 8106312:	e003      	b.n	810631c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8106314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106318:	7dfb      	ldrb	r3, [r7, #23]
 810631a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106324:	2b00      	cmp	r3, #0
 8106326:	d04b      	beq.n	81063c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810632e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106332:	d02e      	beq.n	8106392 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8106334:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106338:	d828      	bhi.n	810638c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810633a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810633e:	d02a      	beq.n	8106396 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8106340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106344:	d822      	bhi.n	810638c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106346:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810634a:	d026      	beq.n	810639a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 810634c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106350:	d81c      	bhi.n	810638c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106356:	d010      	beq.n	810637a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8106358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810635c:	d816      	bhi.n	810638c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810635e:	2b00      	cmp	r3, #0
 8106360:	d01d      	beq.n	810639e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8106362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106366:	d111      	bne.n	810638c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	3304      	adds	r3, #4
 810636c:	2100      	movs	r1, #0
 810636e:	4618      	mov	r0, r3
 8106370:	f000 fc82 	bl	8106c78 <RCCEx_PLL2_Config>
 8106374:	4603      	mov	r3, r0
 8106376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106378:	e012      	b.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	3324      	adds	r3, #36	; 0x24
 810637e:	2102      	movs	r1, #2
 8106380:	4618      	mov	r0, r3
 8106382:	f000 fd2b 	bl	8106ddc <RCCEx_PLL3_Config>
 8106386:	4603      	mov	r3, r0
 8106388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810638a:	e009      	b.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810638c:	2301      	movs	r3, #1
 810638e:	75fb      	strb	r3, [r7, #23]
      break;
 8106390:	e006      	b.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106392:	bf00      	nop
 8106394:	e004      	b.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106396:	bf00      	nop
 8106398:	e002      	b.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810639a:	bf00      	nop
 810639c:	e000      	b.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063a0:	7dfb      	ldrb	r3, [r7, #23]
 81063a2:	2b00      	cmp	r3, #0
 81063a4:	d10a      	bne.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81063a6:	4b9d      	ldr	r3, [pc, #628]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81063b4:	4999      	ldr	r1, [pc, #612]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81063b6:	4313      	orrs	r3, r2
 81063b8:	658b      	str	r3, [r1, #88]	; 0x58
 81063ba:	e001      	b.n	81063c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063bc:	7dfb      	ldrb	r3, [r7, #23]
 81063be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	f003 0308 	and.w	r3, r3, #8
 81063c8:	2b00      	cmp	r3, #0
 81063ca:	d01a      	beq.n	8106402 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81063d6:	d10a      	bne.n	81063ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81063d8:	687b      	ldr	r3, [r7, #4]
 81063da:	3324      	adds	r3, #36	; 0x24
 81063dc:	2102      	movs	r1, #2
 81063de:	4618      	mov	r0, r3
 81063e0:	f000 fcfc 	bl	8106ddc <RCCEx_PLL3_Config>
 81063e4:	4603      	mov	r3, r0
 81063e6:	2b00      	cmp	r3, #0
 81063e8:	d001      	beq.n	81063ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81063ea:	2301      	movs	r3, #1
 81063ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81063ee:	4b8b      	ldr	r3, [pc, #556]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81063fc:	4987      	ldr	r1, [pc, #540]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81063fe:	4313      	orrs	r3, r2
 8106400:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	f003 0310 	and.w	r3, r3, #16
 810640a:	2b00      	cmp	r3, #0
 810640c:	d01a      	beq.n	8106444 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106418:	d10a      	bne.n	8106430 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	3324      	adds	r3, #36	; 0x24
 810641e:	2102      	movs	r1, #2
 8106420:	4618      	mov	r0, r3
 8106422:	f000 fcdb 	bl	8106ddc <RCCEx_PLL3_Config>
 8106426:	4603      	mov	r3, r0
 8106428:	2b00      	cmp	r3, #0
 810642a:	d001      	beq.n	8106430 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 810642c:	2301      	movs	r3, #1
 810642e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106430:	4b7a      	ldr	r3, [pc, #488]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810643e:	4977      	ldr	r1, [pc, #476]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106440:	4313      	orrs	r3, r2
 8106442:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	681b      	ldr	r3, [r3, #0]
 8106448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810644c:	2b00      	cmp	r3, #0
 810644e:	d034      	beq.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810645a:	d01d      	beq.n	8106498 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 810645c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106460:	d817      	bhi.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8106462:	2b00      	cmp	r3, #0
 8106464:	d003      	beq.n	810646e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8106466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810646a:	d009      	beq.n	8106480 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 810646c:	e011      	b.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	3304      	adds	r3, #4
 8106472:	2100      	movs	r1, #0
 8106474:	4618      	mov	r0, r3
 8106476:	f000 fbff 	bl	8106c78 <RCCEx_PLL2_Config>
 810647a:	4603      	mov	r3, r0
 810647c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810647e:	e00c      	b.n	810649a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	3324      	adds	r3, #36	; 0x24
 8106484:	2102      	movs	r1, #2
 8106486:	4618      	mov	r0, r3
 8106488:	f000 fca8 	bl	8106ddc <RCCEx_PLL3_Config>
 810648c:	4603      	mov	r3, r0
 810648e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106490:	e003      	b.n	810649a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106492:	2301      	movs	r3, #1
 8106494:	75fb      	strb	r3, [r7, #23]
      break;
 8106496:	e000      	b.n	810649a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8106498:	bf00      	nop
    }

    if(ret == HAL_OK)
 810649a:	7dfb      	ldrb	r3, [r7, #23]
 810649c:	2b00      	cmp	r3, #0
 810649e:	d10a      	bne.n	81064b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81064a0:	4b5e      	ldr	r3, [pc, #376]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81064ae:	495b      	ldr	r1, [pc, #364]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81064b0:	4313      	orrs	r3, r2
 81064b2:	658b      	str	r3, [r1, #88]	; 0x58
 81064b4:	e001      	b.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064b6:	7dfb      	ldrb	r3, [r7, #23]
 81064b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	681b      	ldr	r3, [r3, #0]
 81064be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81064c2:	2b00      	cmp	r3, #0
 81064c4:	d033      	beq.n	810652e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81064cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81064d0:	d01c      	beq.n	810650c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81064d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81064d6:	d816      	bhi.n	8106506 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81064d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81064dc:	d003      	beq.n	81064e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81064de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81064e2:	d007      	beq.n	81064f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81064e4:	e00f      	b.n	8106506 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064e6:	4b4d      	ldr	r3, [pc, #308]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064ea:	4a4c      	ldr	r2, [pc, #304]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81064ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81064f2:	e00c      	b.n	810650e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	3324      	adds	r3, #36	; 0x24
 81064f8:	2101      	movs	r1, #1
 81064fa:	4618      	mov	r0, r3
 81064fc:	f000 fc6e 	bl	8106ddc <RCCEx_PLL3_Config>
 8106500:	4603      	mov	r3, r0
 8106502:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8106504:	e003      	b.n	810650e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106506:	2301      	movs	r3, #1
 8106508:	75fb      	strb	r3, [r7, #23]
      break;
 810650a:	e000      	b.n	810650e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 810650c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810650e:	7dfb      	ldrb	r3, [r7, #23]
 8106510:	2b00      	cmp	r3, #0
 8106512:	d10a      	bne.n	810652a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106514:	4b41      	ldr	r3, [pc, #260]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106522:	493e      	ldr	r1, [pc, #248]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106524:	4313      	orrs	r3, r2
 8106526:	654b      	str	r3, [r1, #84]	; 0x54
 8106528:	e001      	b.n	810652e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810652a:	7dfb      	ldrb	r3, [r7, #23]
 810652c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106536:	2b00      	cmp	r3, #0
 8106538:	d029      	beq.n	810658e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810653e:	2b00      	cmp	r3, #0
 8106540:	d003      	beq.n	810654a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8106542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106546:	d007      	beq.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8106548:	e00f      	b.n	810656a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810654a:	4b34      	ldr	r3, [pc, #208]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810654e:	4a33      	ldr	r2, [pc, #204]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106556:	e00b      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	3304      	adds	r3, #4
 810655c:	2102      	movs	r1, #2
 810655e:	4618      	mov	r0, r3
 8106560:	f000 fb8a 	bl	8106c78 <RCCEx_PLL2_Config>
 8106564:	4603      	mov	r3, r0
 8106566:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106568:	e002      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810656a:	2301      	movs	r3, #1
 810656c:	75fb      	strb	r3, [r7, #23]
      break;
 810656e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106570:	7dfb      	ldrb	r3, [r7, #23]
 8106572:	2b00      	cmp	r3, #0
 8106574:	d109      	bne.n	810658a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106576:	4b29      	ldr	r3, [pc, #164]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810657a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106582:	4926      	ldr	r1, [pc, #152]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106584:	4313      	orrs	r3, r2
 8106586:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106588:	e001      	b.n	810658e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810658a:	7dfb      	ldrb	r3, [r7, #23]
 810658c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106596:	2b00      	cmp	r3, #0
 8106598:	d00a      	beq.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	3324      	adds	r3, #36	; 0x24
 810659e:	2102      	movs	r1, #2
 81065a0:	4618      	mov	r0, r3
 81065a2:	f000 fc1b 	bl	8106ddc <RCCEx_PLL3_Config>
 81065a6:	4603      	mov	r3, r0
 81065a8:	2b00      	cmp	r3, #0
 81065aa:	d001      	beq.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81065ac:	2301      	movs	r3, #1
 81065ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	681b      	ldr	r3, [r3, #0]
 81065b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81065b8:	2b00      	cmp	r3, #0
 81065ba:	d033      	beq.n	8106624 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81065c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81065c4:	d017      	beq.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81065c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81065ca:	d811      	bhi.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81065d0:	d013      	beq.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81065d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81065d6:	d80b      	bhi.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81065d8:	2b00      	cmp	r3, #0
 81065da:	d010      	beq.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81065dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81065e0:	d106      	bne.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065e2:	4b0e      	ldr	r3, [pc, #56]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065e6:	4a0d      	ldr	r2, [pc, #52]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81065e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81065ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81065ee:	e007      	b.n	8106600 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81065f0:	2301      	movs	r3, #1
 81065f2:	75fb      	strb	r3, [r7, #23]
      break;
 81065f4:	e004      	b.n	8106600 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81065f6:	bf00      	nop
 81065f8:	e002      	b.n	8106600 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81065fa:	bf00      	nop
 81065fc:	e000      	b.n	8106600 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81065fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106600:	7dfb      	ldrb	r3, [r7, #23]
 8106602:	2b00      	cmp	r3, #0
 8106604:	d10c      	bne.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106606:	4b05      	ldr	r3, [pc, #20]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810660a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810660e:	687b      	ldr	r3, [r7, #4]
 8106610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106612:	4902      	ldr	r1, [pc, #8]	; (810661c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106614:	4313      	orrs	r3, r2
 8106616:	654b      	str	r3, [r1, #84]	; 0x54
 8106618:	e004      	b.n	8106624 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810661a:	bf00      	nop
 810661c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106620:	7dfb      	ldrb	r3, [r7, #23]
 8106622:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810662c:	2b00      	cmp	r3, #0
 810662e:	d008      	beq.n	8106642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106630:	4b31      	ldr	r3, [pc, #196]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106634:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810663c:	492e      	ldr	r1, [pc, #184]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810663e:	4313      	orrs	r3, r2
 8106640:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	681b      	ldr	r3, [r3, #0]
 8106646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810664a:	2b00      	cmp	r3, #0
 810664c:	d009      	beq.n	8106662 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810664e:	4b2a      	ldr	r3, [pc, #168]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106650:	691b      	ldr	r3, [r3, #16]
 8106652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810665c:	4926      	ldr	r1, [pc, #152]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810665e:	4313      	orrs	r3, r2
 8106660:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	681b      	ldr	r3, [r3, #0]
 8106666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810666a:	2b00      	cmp	r3, #0
 810666c:	d008      	beq.n	8106680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810666e:	4b22      	ldr	r3, [pc, #136]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106672:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810667a:	491f      	ldr	r1, [pc, #124]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810667c:	4313      	orrs	r3, r2
 810667e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106688:	2b00      	cmp	r3, #0
 810668a:	d00d      	beq.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810668c:	4b1a      	ldr	r3, [pc, #104]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810668e:	691b      	ldr	r3, [r3, #16]
 8106690:	4a19      	ldr	r2, [pc, #100]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106692:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8106696:	6113      	str	r3, [r2, #16]
 8106698:	4b17      	ldr	r3, [pc, #92]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810669a:	691a      	ldr	r2, [r3, #16]
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81066a2:	4915      	ldr	r1, [pc, #84]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81066a4:	4313      	orrs	r3, r2
 81066a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	2b00      	cmp	r3, #0
 81066ae:	da08      	bge.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81066b0:	4b11      	ldr	r3, [pc, #68]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81066b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81066b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066bc:	490e      	ldr	r1, [pc, #56]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81066be:	4313      	orrs	r3, r2
 81066c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81066c2:	687b      	ldr	r3, [r7, #4]
 81066c4:	681b      	ldr	r3, [r3, #0]
 81066c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81066ca:	2b00      	cmp	r3, #0
 81066cc:	d009      	beq.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81066ce:	4b0a      	ldr	r3, [pc, #40]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81066dc:	4906      	ldr	r1, [pc, #24]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81066de:	4313      	orrs	r3, r2
 81066e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81066e2:	7dbb      	ldrb	r3, [r7, #22]
 81066e4:	2b00      	cmp	r3, #0
 81066e6:	d101      	bne.n	81066ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81066e8:	2300      	movs	r3, #0
 81066ea:	e000      	b.n	81066ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81066ec:	2301      	movs	r3, #1
}
 81066ee:	4618      	mov	r0, r3
 81066f0:	3718      	adds	r7, #24
 81066f2:	46bd      	mov	sp, r7
 81066f4:	bd80      	pop	{r7, pc}
 81066f6:	bf00      	nop
 81066f8:	58024400 	.word	0x58024400

081066fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81066fc:	b580      	push	{r7, lr}
 81066fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106700:	f7ff f858 	bl	81057b4 <HAL_RCC_GetHCLKFreq>
 8106704:	4602      	mov	r2, r0
 8106706:	4b06      	ldr	r3, [pc, #24]	; (8106720 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106708:	6a1b      	ldr	r3, [r3, #32]
 810670a:	091b      	lsrs	r3, r3, #4
 810670c:	f003 0307 	and.w	r3, r3, #7
 8106710:	4904      	ldr	r1, [pc, #16]	; (8106724 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106712:	5ccb      	ldrb	r3, [r1, r3]
 8106714:	f003 031f 	and.w	r3, r3, #31
 8106718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810671c:	4618      	mov	r0, r3
 810671e:	bd80      	pop	{r7, pc}
 8106720:	58024400 	.word	0x58024400
 8106724:	0810dff8 	.word	0x0810dff8

08106728 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106728:	b480      	push	{r7}
 810672a:	b089      	sub	sp, #36	; 0x24
 810672c:	af00      	add	r7, sp, #0
 810672e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106730:	4ba1      	ldr	r3, [pc, #644]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106734:	f003 0303 	and.w	r3, r3, #3
 8106738:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810673a:	4b9f      	ldr	r3, [pc, #636]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810673e:	0b1b      	lsrs	r3, r3, #12
 8106740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106744:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106746:	4b9c      	ldr	r3, [pc, #624]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810674a:	091b      	lsrs	r3, r3, #4
 810674c:	f003 0301 	and.w	r3, r3, #1
 8106750:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106752:	4b99      	ldr	r3, [pc, #612]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106756:	08db      	lsrs	r3, r3, #3
 8106758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810675c:	693a      	ldr	r2, [r7, #16]
 810675e:	fb02 f303 	mul.w	r3, r2, r3
 8106762:	ee07 3a90 	vmov	s15, r3
 8106766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810676a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810676e:	697b      	ldr	r3, [r7, #20]
 8106770:	2b00      	cmp	r3, #0
 8106772:	f000 8111 	beq.w	8106998 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106776:	69bb      	ldr	r3, [r7, #24]
 8106778:	2b02      	cmp	r3, #2
 810677a:	f000 8083 	beq.w	8106884 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810677e:	69bb      	ldr	r3, [r7, #24]
 8106780:	2b02      	cmp	r3, #2
 8106782:	f200 80a1 	bhi.w	81068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106786:	69bb      	ldr	r3, [r7, #24]
 8106788:	2b00      	cmp	r3, #0
 810678a:	d003      	beq.n	8106794 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810678c:	69bb      	ldr	r3, [r7, #24]
 810678e:	2b01      	cmp	r3, #1
 8106790:	d056      	beq.n	8106840 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106792:	e099      	b.n	81068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106794:	4b88      	ldr	r3, [pc, #544]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	f003 0320 	and.w	r3, r3, #32
 810679c:	2b00      	cmp	r3, #0
 810679e:	d02d      	beq.n	81067fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81067a0:	4b85      	ldr	r3, [pc, #532]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81067a2:	681b      	ldr	r3, [r3, #0]
 81067a4:	08db      	lsrs	r3, r3, #3
 81067a6:	f003 0303 	and.w	r3, r3, #3
 81067aa:	4a84      	ldr	r2, [pc, #528]	; (81069bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81067ac:	fa22 f303 	lsr.w	r3, r2, r3
 81067b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81067b2:	68bb      	ldr	r3, [r7, #8]
 81067b4:	ee07 3a90 	vmov	s15, r3
 81067b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067bc:	697b      	ldr	r3, [r7, #20]
 81067be:	ee07 3a90 	vmov	s15, r3
 81067c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067ca:	4b7b      	ldr	r3, [pc, #492]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067d2:	ee07 3a90 	vmov	s15, r3
 81067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067da:	ed97 6a03 	vldr	s12, [r7, #12]
 81067de:	eddf 5a78 	vldr	s11, [pc, #480]	; 81069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81067fa:	e087      	b.n	810690c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81067fc:	697b      	ldr	r3, [r7, #20]
 81067fe:	ee07 3a90 	vmov	s15, r3
 8106802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106806:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81069c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810680e:	4b6a      	ldr	r3, [pc, #424]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106816:	ee07 3a90 	vmov	s15, r3
 810681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810681e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106822:	eddf 5a67 	vldr	s11, [pc, #412]	; 81069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810682e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106836:	ee67 7a27 	vmul.f32	s15, s14, s15
 810683a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810683e:	e065      	b.n	810690c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106840:	697b      	ldr	r3, [r7, #20]
 8106842:	ee07 3a90 	vmov	s15, r3
 8106846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810684a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810684e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106852:	4b59      	ldr	r3, [pc, #356]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810685a:	ee07 3a90 	vmov	s15, r3
 810685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106862:	ed97 6a03 	vldr	s12, [r7, #12]
 8106866:	eddf 5a56 	vldr	s11, [pc, #344]	; 81069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810686a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810686e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810687e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106882:	e043      	b.n	810690c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106884:	697b      	ldr	r3, [r7, #20]
 8106886:	ee07 3a90 	vmov	s15, r3
 810688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810688e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81069cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106896:	4b48      	ldr	r3, [pc, #288]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810689e:	ee07 3a90 	vmov	s15, r3
 81068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81068aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 81069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81068c6:	e021      	b.n	810690c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81068c8:	697b      	ldr	r3, [r7, #20]
 81068ca:	ee07 3a90 	vmov	s15, r3
 81068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068da:	4b37      	ldr	r3, [pc, #220]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068e2:	ee07 3a90 	vmov	s15, r3
 81068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81068ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 81069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810690a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810690c:	4b2a      	ldr	r3, [pc, #168]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106910:	0a5b      	lsrs	r3, r3, #9
 8106912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106916:	ee07 3a90 	vmov	s15, r3
 810691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810691e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106926:	edd7 6a07 	vldr	s13, [r7, #28]
 810692a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810692e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106932:	ee17 2a90 	vmov	r2, s15
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810693a:	4b1f      	ldr	r3, [pc, #124]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810693e:	0c1b      	lsrs	r3, r3, #16
 8106940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106944:	ee07 3a90 	vmov	s15, r3
 8106948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810694c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106954:	edd7 6a07 	vldr	s13, [r7, #28]
 8106958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810695c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106960:	ee17 2a90 	vmov	r2, s15
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106968:	4b13      	ldr	r3, [pc, #76]	; (81069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810696c:	0e1b      	lsrs	r3, r3, #24
 810696e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106972:	ee07 3a90 	vmov	s15, r3
 8106976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810697a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810697e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106982:	edd7 6a07 	vldr	s13, [r7, #28]
 8106986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810698a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810698e:	ee17 2a90 	vmov	r2, s15
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106996:	e008      	b.n	81069aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	2200      	movs	r2, #0
 810699c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	2200      	movs	r2, #0
 81069a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	2200      	movs	r2, #0
 81069a8:	609a      	str	r2, [r3, #8]
}
 81069aa:	bf00      	nop
 81069ac:	3724      	adds	r7, #36	; 0x24
 81069ae:	46bd      	mov	sp, r7
 81069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069b4:	4770      	bx	lr
 81069b6:	bf00      	nop
 81069b8:	58024400 	.word	0x58024400
 81069bc:	03d09000 	.word	0x03d09000
 81069c0:	46000000 	.word	0x46000000
 81069c4:	4c742400 	.word	0x4c742400
 81069c8:	4a742400 	.word	0x4a742400
 81069cc:	4af42400 	.word	0x4af42400

081069d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81069d0:	b480      	push	{r7}
 81069d2:	b089      	sub	sp, #36	; 0x24
 81069d4:	af00      	add	r7, sp, #0
 81069d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81069d8:	4ba1      	ldr	r3, [pc, #644]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069dc:	f003 0303 	and.w	r3, r3, #3
 81069e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81069e2:	4b9f      	ldr	r3, [pc, #636]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069e6:	0d1b      	lsrs	r3, r3, #20
 81069e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81069ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81069ee:	4b9c      	ldr	r3, [pc, #624]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069f2:	0a1b      	lsrs	r3, r3, #8
 81069f4:	f003 0301 	and.w	r3, r3, #1
 81069f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81069fa:	4b99      	ldr	r3, [pc, #612]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81069fe:	08db      	lsrs	r3, r3, #3
 8106a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106a04:	693a      	ldr	r2, [r7, #16]
 8106a06:	fb02 f303 	mul.w	r3, r2, r3
 8106a0a:	ee07 3a90 	vmov	s15, r3
 8106a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106a16:	697b      	ldr	r3, [r7, #20]
 8106a18:	2b00      	cmp	r3, #0
 8106a1a:	f000 8111 	beq.w	8106c40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106a1e:	69bb      	ldr	r3, [r7, #24]
 8106a20:	2b02      	cmp	r3, #2
 8106a22:	f000 8083 	beq.w	8106b2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106a26:	69bb      	ldr	r3, [r7, #24]
 8106a28:	2b02      	cmp	r3, #2
 8106a2a:	f200 80a1 	bhi.w	8106b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106a2e:	69bb      	ldr	r3, [r7, #24]
 8106a30:	2b00      	cmp	r3, #0
 8106a32:	d003      	beq.n	8106a3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106a34:	69bb      	ldr	r3, [r7, #24]
 8106a36:	2b01      	cmp	r3, #1
 8106a38:	d056      	beq.n	8106ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106a3a:	e099      	b.n	8106b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106a3c:	4b88      	ldr	r3, [pc, #544]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a3e:	681b      	ldr	r3, [r3, #0]
 8106a40:	f003 0320 	and.w	r3, r3, #32
 8106a44:	2b00      	cmp	r3, #0
 8106a46:	d02d      	beq.n	8106aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a48:	4b85      	ldr	r3, [pc, #532]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	08db      	lsrs	r3, r3, #3
 8106a4e:	f003 0303 	and.w	r3, r3, #3
 8106a52:	4a84      	ldr	r2, [pc, #528]	; (8106c64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106a54:	fa22 f303 	lsr.w	r3, r2, r3
 8106a58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106a5a:	68bb      	ldr	r3, [r7, #8]
 8106a5c:	ee07 3a90 	vmov	s15, r3
 8106a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a64:	697b      	ldr	r3, [r7, #20]
 8106a66:	ee07 3a90 	vmov	s15, r3
 8106a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a72:	4b7b      	ldr	r3, [pc, #492]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a7a:	ee07 3a90 	vmov	s15, r3
 8106a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106aa2:	e087      	b.n	8106bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106aa4:	697b      	ldr	r3, [r7, #20]
 8106aa6:	ee07 3a90 	vmov	s15, r3
 8106aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106c6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ab6:	4b6a      	ldr	r3, [pc, #424]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106abe:	ee07 3a90 	vmov	s15, r3
 8106ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106aca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106ae6:	e065      	b.n	8106bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106ae8:	697b      	ldr	r3, [r7, #20]
 8106aea:	ee07 3a90 	vmov	s15, r3
 8106aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106af2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106afa:	4b59      	ldr	r3, [pc, #356]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b02:	ee07 3a90 	vmov	s15, r3
 8106b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b2a:	e043      	b.n	8106bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106b2c:	697b      	ldr	r3, [r7, #20]
 8106b2e:	ee07 3a90 	vmov	s15, r3
 8106b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b3e:	4b48      	ldr	r3, [pc, #288]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b46:	ee07 3a90 	vmov	s15, r3
 8106b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b6e:	e021      	b.n	8106bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106b70:	697b      	ldr	r3, [r7, #20]
 8106b72:	ee07 3a90 	vmov	s15, r3
 8106b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b82:	4b37      	ldr	r3, [pc, #220]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b8a:	ee07 3a90 	vmov	s15, r3
 8106b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106bb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106bb4:	4b2a      	ldr	r3, [pc, #168]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106bb8:	0a5b      	lsrs	r3, r3, #9
 8106bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106bbe:	ee07 3a90 	vmov	s15, r3
 8106bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8106bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106bda:	ee17 2a90 	vmov	r2, s15
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106be2:	4b1f      	ldr	r3, [pc, #124]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106be6:	0c1b      	lsrs	r3, r3, #16
 8106be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106bec:	ee07 3a90 	vmov	s15, r3
 8106bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c08:	ee17 2a90 	vmov	r2, s15
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106c10:	4b13      	ldr	r3, [pc, #76]	; (8106c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c14:	0e1b      	lsrs	r3, r3, #24
 8106c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c1a:	ee07 3a90 	vmov	s15, r3
 8106c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c36:	ee17 2a90 	vmov	r2, s15
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106c3e:	e008      	b.n	8106c52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	2200      	movs	r2, #0
 8106c44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106c46:	687b      	ldr	r3, [r7, #4]
 8106c48:	2200      	movs	r2, #0
 8106c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	2200      	movs	r2, #0
 8106c50:	609a      	str	r2, [r3, #8]
}
 8106c52:	bf00      	nop
 8106c54:	3724      	adds	r7, #36	; 0x24
 8106c56:	46bd      	mov	sp, r7
 8106c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c5c:	4770      	bx	lr
 8106c5e:	bf00      	nop
 8106c60:	58024400 	.word	0x58024400
 8106c64:	03d09000 	.word	0x03d09000
 8106c68:	46000000 	.word	0x46000000
 8106c6c:	4c742400 	.word	0x4c742400
 8106c70:	4a742400 	.word	0x4a742400
 8106c74:	4af42400 	.word	0x4af42400

08106c78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106c78:	b580      	push	{r7, lr}
 8106c7a:	b084      	sub	sp, #16
 8106c7c:	af00      	add	r7, sp, #0
 8106c7e:	6078      	str	r0, [r7, #4]
 8106c80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106c82:	2300      	movs	r3, #0
 8106c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106c86:	4b54      	ldr	r3, [pc, #336]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c8a:	f003 0303 	and.w	r3, r3, #3
 8106c8e:	2b03      	cmp	r3, #3
 8106c90:	d101      	bne.n	8106c96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106c92:	2301      	movs	r3, #1
 8106c94:	e09b      	b.n	8106dce <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106c96:	4b50      	ldr	r3, [pc, #320]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	4a4f      	ldr	r2, [pc, #316]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106ca2:	f7fb fc91 	bl	81025c8 <HAL_GetTick>
 8106ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106ca8:	e008      	b.n	8106cbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106caa:	f7fb fc8d 	bl	81025c8 <HAL_GetTick>
 8106cae:	4602      	mov	r2, r0
 8106cb0:	68bb      	ldr	r3, [r7, #8]
 8106cb2:	1ad3      	subs	r3, r2, r3
 8106cb4:	2b02      	cmp	r3, #2
 8106cb6:	d901      	bls.n	8106cbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106cb8:	2303      	movs	r3, #3
 8106cba:	e088      	b.n	8106dce <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106cbc:	4b46      	ldr	r3, [pc, #280]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106cc4:	2b00      	cmp	r3, #0
 8106cc6:	d1f0      	bne.n	8106caa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106cc8:	4b43      	ldr	r3, [pc, #268]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ccc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	681b      	ldr	r3, [r3, #0]
 8106cd4:	031b      	lsls	r3, r3, #12
 8106cd6:	4940      	ldr	r1, [pc, #256]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106cd8:	4313      	orrs	r3, r2
 8106cda:	628b      	str	r3, [r1, #40]	; 0x28
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	685b      	ldr	r3, [r3, #4]
 8106ce0:	3b01      	subs	r3, #1
 8106ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	689b      	ldr	r3, [r3, #8]
 8106cea:	3b01      	subs	r3, #1
 8106cec:	025b      	lsls	r3, r3, #9
 8106cee:	b29b      	uxth	r3, r3
 8106cf0:	431a      	orrs	r2, r3
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	68db      	ldr	r3, [r3, #12]
 8106cf6:	3b01      	subs	r3, #1
 8106cf8:	041b      	lsls	r3, r3, #16
 8106cfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106cfe:	431a      	orrs	r2, r3
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	691b      	ldr	r3, [r3, #16]
 8106d04:	3b01      	subs	r3, #1
 8106d06:	061b      	lsls	r3, r3, #24
 8106d08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106d0c:	4932      	ldr	r1, [pc, #200]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d0e:	4313      	orrs	r3, r2
 8106d10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106d12:	4b31      	ldr	r3, [pc, #196]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106d1a:	687b      	ldr	r3, [r7, #4]
 8106d1c:	695b      	ldr	r3, [r3, #20]
 8106d1e:	492e      	ldr	r1, [pc, #184]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d20:	4313      	orrs	r3, r2
 8106d22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106d24:	4b2c      	ldr	r3, [pc, #176]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d28:	f023 0220 	bic.w	r2, r3, #32
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	699b      	ldr	r3, [r3, #24]
 8106d30:	4929      	ldr	r1, [pc, #164]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d32:	4313      	orrs	r3, r2
 8106d34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106d36:	4b28      	ldr	r3, [pc, #160]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d3a:	4a27      	ldr	r2, [pc, #156]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d3c:	f023 0310 	bic.w	r3, r3, #16
 8106d40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106d42:	4b25      	ldr	r3, [pc, #148]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106d4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106d4e:	687a      	ldr	r2, [r7, #4]
 8106d50:	69d2      	ldr	r2, [r2, #28]
 8106d52:	00d2      	lsls	r2, r2, #3
 8106d54:	4920      	ldr	r1, [pc, #128]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d56:	4313      	orrs	r3, r2
 8106d58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106d5a:	4b1f      	ldr	r3, [pc, #124]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d5e:	4a1e      	ldr	r2, [pc, #120]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d60:	f043 0310 	orr.w	r3, r3, #16
 8106d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106d66:	683b      	ldr	r3, [r7, #0]
 8106d68:	2b00      	cmp	r3, #0
 8106d6a:	d106      	bne.n	8106d7a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106d6c:	4b1a      	ldr	r3, [pc, #104]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d70:	4a19      	ldr	r2, [pc, #100]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106d78:	e00f      	b.n	8106d9a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106d7a:	683b      	ldr	r3, [r7, #0]
 8106d7c:	2b01      	cmp	r3, #1
 8106d7e:	d106      	bne.n	8106d8e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106d80:	4b15      	ldr	r3, [pc, #84]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d84:	4a14      	ldr	r2, [pc, #80]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106d8c:	e005      	b.n	8106d9a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106d8e:	4b12      	ldr	r3, [pc, #72]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d92:	4a11      	ldr	r2, [pc, #68]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106d98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106d9a:	4b0f      	ldr	r3, [pc, #60]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106d9c:	681b      	ldr	r3, [r3, #0]
 8106d9e:	4a0e      	ldr	r2, [pc, #56]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106da0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106da6:	f7fb fc0f 	bl	81025c8 <HAL_GetTick>
 8106daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106dac:	e008      	b.n	8106dc0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106dae:	f7fb fc0b 	bl	81025c8 <HAL_GetTick>
 8106db2:	4602      	mov	r2, r0
 8106db4:	68bb      	ldr	r3, [r7, #8]
 8106db6:	1ad3      	subs	r3, r2, r3
 8106db8:	2b02      	cmp	r3, #2
 8106dba:	d901      	bls.n	8106dc0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106dbc:	2303      	movs	r3, #3
 8106dbe:	e006      	b.n	8106dce <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106dc0:	4b05      	ldr	r3, [pc, #20]	; (8106dd8 <RCCEx_PLL2_Config+0x160>)
 8106dc2:	681b      	ldr	r3, [r3, #0]
 8106dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106dc8:	2b00      	cmp	r3, #0
 8106dca:	d0f0      	beq.n	8106dae <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8106dce:	4618      	mov	r0, r3
 8106dd0:	3710      	adds	r7, #16
 8106dd2:	46bd      	mov	sp, r7
 8106dd4:	bd80      	pop	{r7, pc}
 8106dd6:	bf00      	nop
 8106dd8:	58024400 	.word	0x58024400

08106ddc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106ddc:	b580      	push	{r7, lr}
 8106dde:	b084      	sub	sp, #16
 8106de0:	af00      	add	r7, sp, #0
 8106de2:	6078      	str	r0, [r7, #4]
 8106de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106de6:	2300      	movs	r3, #0
 8106de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106dea:	4b54      	ldr	r3, [pc, #336]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106dee:	f003 0303 	and.w	r3, r3, #3
 8106df2:	2b03      	cmp	r3, #3
 8106df4:	d101      	bne.n	8106dfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106df6:	2301      	movs	r3, #1
 8106df8:	e09b      	b.n	8106f32 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106dfa:	4b50      	ldr	r3, [pc, #320]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106dfc:	681b      	ldr	r3, [r3, #0]
 8106dfe:	4a4f      	ldr	r2, [pc, #316]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106e06:	f7fb fbdf 	bl	81025c8 <HAL_GetTick>
 8106e0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106e0c:	e008      	b.n	8106e20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106e0e:	f7fb fbdb 	bl	81025c8 <HAL_GetTick>
 8106e12:	4602      	mov	r2, r0
 8106e14:	68bb      	ldr	r3, [r7, #8]
 8106e16:	1ad3      	subs	r3, r2, r3
 8106e18:	2b02      	cmp	r3, #2
 8106e1a:	d901      	bls.n	8106e20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106e1c:	2303      	movs	r3, #3
 8106e1e:	e088      	b.n	8106f32 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106e20:	4b46      	ldr	r3, [pc, #280]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e22:	681b      	ldr	r3, [r3, #0]
 8106e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e28:	2b00      	cmp	r3, #0
 8106e2a:	d1f0      	bne.n	8106e0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106e2c:	4b43      	ldr	r3, [pc, #268]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106e30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	051b      	lsls	r3, r3, #20
 8106e3a:	4940      	ldr	r1, [pc, #256]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e3c:	4313      	orrs	r3, r2
 8106e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	685b      	ldr	r3, [r3, #4]
 8106e44:	3b01      	subs	r3, #1
 8106e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106e4a:	687b      	ldr	r3, [r7, #4]
 8106e4c:	689b      	ldr	r3, [r3, #8]
 8106e4e:	3b01      	subs	r3, #1
 8106e50:	025b      	lsls	r3, r3, #9
 8106e52:	b29b      	uxth	r3, r3
 8106e54:	431a      	orrs	r2, r3
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	68db      	ldr	r3, [r3, #12]
 8106e5a:	3b01      	subs	r3, #1
 8106e5c:	041b      	lsls	r3, r3, #16
 8106e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106e62:	431a      	orrs	r2, r3
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	691b      	ldr	r3, [r3, #16]
 8106e68:	3b01      	subs	r3, #1
 8106e6a:	061b      	lsls	r3, r3, #24
 8106e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106e70:	4932      	ldr	r1, [pc, #200]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e72:	4313      	orrs	r3, r2
 8106e74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106e76:	4b31      	ldr	r3, [pc, #196]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	695b      	ldr	r3, [r3, #20]
 8106e82:	492e      	ldr	r1, [pc, #184]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e84:	4313      	orrs	r3, r2
 8106e86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106e88:	4b2c      	ldr	r3, [pc, #176]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	699b      	ldr	r3, [r3, #24]
 8106e94:	4929      	ldr	r1, [pc, #164]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e96:	4313      	orrs	r3, r2
 8106e98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106e9a:	4b28      	ldr	r3, [pc, #160]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e9e:	4a27      	ldr	r2, [pc, #156]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106ea6:	4b25      	ldr	r3, [pc, #148]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106eae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106eb2:	687a      	ldr	r2, [r7, #4]
 8106eb4:	69d2      	ldr	r2, [r2, #28]
 8106eb6:	00d2      	lsls	r2, r2, #3
 8106eb8:	4920      	ldr	r1, [pc, #128]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106eba:	4313      	orrs	r3, r2
 8106ebc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106ebe:	4b1f      	ldr	r3, [pc, #124]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ec2:	4a1e      	ldr	r2, [pc, #120]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106eca:	683b      	ldr	r3, [r7, #0]
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d106      	bne.n	8106ede <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106ed0:	4b1a      	ldr	r3, [pc, #104]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ed4:	4a19      	ldr	r2, [pc, #100]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ed6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106edc:	e00f      	b.n	8106efe <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106ede:	683b      	ldr	r3, [r7, #0]
 8106ee0:	2b01      	cmp	r3, #1
 8106ee2:	d106      	bne.n	8106ef2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106ee4:	4b15      	ldr	r3, [pc, #84]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ee8:	4a14      	ldr	r2, [pc, #80]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106eea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106ef0:	e005      	b.n	8106efe <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106ef2:	4b12      	ldr	r3, [pc, #72]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ef6:	4a11      	ldr	r2, [pc, #68]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106efc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106efe:	4b0f      	ldr	r3, [pc, #60]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	4a0e      	ldr	r2, [pc, #56]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106f0a:	f7fb fb5d 	bl	81025c8 <HAL_GetTick>
 8106f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106f10:	e008      	b.n	8106f24 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106f12:	f7fb fb59 	bl	81025c8 <HAL_GetTick>
 8106f16:	4602      	mov	r2, r0
 8106f18:	68bb      	ldr	r3, [r7, #8]
 8106f1a:	1ad3      	subs	r3, r2, r3
 8106f1c:	2b02      	cmp	r3, #2
 8106f1e:	d901      	bls.n	8106f24 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106f20:	2303      	movs	r3, #3
 8106f22:	e006      	b.n	8106f32 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106f24:	4b05      	ldr	r3, [pc, #20]	; (8106f3c <RCCEx_PLL3_Config+0x160>)
 8106f26:	681b      	ldr	r3, [r3, #0]
 8106f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f2c:	2b00      	cmp	r3, #0
 8106f2e:	d0f0      	beq.n	8106f12 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8106f32:	4618      	mov	r0, r3
 8106f34:	3710      	adds	r7, #16
 8106f36:	46bd      	mov	sp, r7
 8106f38:	bd80      	pop	{r7, pc}
 8106f3a:	bf00      	nop
 8106f3c:	58024400 	.word	0x58024400

08106f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106f40:	b580      	push	{r7, lr}
 8106f42:	b082      	sub	sp, #8
 8106f44:	af00      	add	r7, sp, #0
 8106f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106f48:	687b      	ldr	r3, [r7, #4]
 8106f4a:	2b00      	cmp	r3, #0
 8106f4c:	d101      	bne.n	8106f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106f4e:	2301      	movs	r3, #1
 8106f50:	e049      	b.n	8106fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106f58:	b2db      	uxtb	r3, r3
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d106      	bne.n	8106f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	2200      	movs	r2, #0
 8106f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106f66:	6878      	ldr	r0, [r7, #4]
 8106f68:	f7fa ff20 	bl	8101dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	2202      	movs	r2, #2
 8106f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681a      	ldr	r2, [r3, #0]
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	3304      	adds	r3, #4
 8106f7c:	4619      	mov	r1, r3
 8106f7e:	4610      	mov	r0, r2
 8106f80:	f000 fc56 	bl	8107830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	2201      	movs	r2, #1
 8106f88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	2201      	movs	r2, #1
 8106f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	2201      	movs	r2, #1
 8106f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	2201      	movs	r2, #1
 8106fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	2201      	movs	r2, #1
 8106fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	2201      	movs	r2, #1
 8106fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	2201      	movs	r2, #1
 8106fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	2201      	movs	r2, #1
 8106fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	2201      	movs	r2, #1
 8106fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	2201      	movs	r2, #1
 8106fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	2201      	movs	r2, #1
 8106fd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	2201      	movs	r2, #1
 8106fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106fe4:	2300      	movs	r3, #0
}
 8106fe6:	4618      	mov	r0, r3
 8106fe8:	3708      	adds	r7, #8
 8106fea:	46bd      	mov	sp, r7
 8106fec:	bd80      	pop	{r7, pc}

08106fee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106fee:	b580      	push	{r7, lr}
 8106ff0:	b082      	sub	sp, #8
 8106ff2:	af00      	add	r7, sp, #0
 8106ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	2b00      	cmp	r3, #0
 8106ffa:	d101      	bne.n	8107000 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106ffc:	2301      	movs	r3, #1
 8106ffe:	e049      	b.n	8107094 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107006:	b2db      	uxtb	r3, r3
 8107008:	2b00      	cmp	r3, #0
 810700a:	d106      	bne.n	810701a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	2200      	movs	r2, #0
 8107010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8107014:	6878      	ldr	r0, [r7, #4]
 8107016:	f000 f841 	bl	810709c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	2202      	movs	r2, #2
 810701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	681a      	ldr	r2, [r3, #0]
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	3304      	adds	r3, #4
 810702a:	4619      	mov	r1, r3
 810702c:	4610      	mov	r0, r2
 810702e:	f000 fbff 	bl	8107830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	2201      	movs	r2, #1
 8107036:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810703a:	687b      	ldr	r3, [r7, #4]
 810703c:	2201      	movs	r2, #1
 810703e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107042:	687b      	ldr	r3, [r7, #4]
 8107044:	2201      	movs	r2, #1
 8107046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810704a:	687b      	ldr	r3, [r7, #4]
 810704c:	2201      	movs	r2, #1
 810704e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	2201      	movs	r2, #1
 8107056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	2201      	movs	r2, #1
 810705e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	2201      	movs	r2, #1
 8107066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810706a:	687b      	ldr	r3, [r7, #4]
 810706c:	2201      	movs	r2, #1
 810706e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	2201      	movs	r2, #1
 8107076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	2201      	movs	r2, #1
 810707e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107082:	687b      	ldr	r3, [r7, #4]
 8107084:	2201      	movs	r2, #1
 8107086:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	2201      	movs	r2, #1
 810708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107092:	2300      	movs	r3, #0
}
 8107094:	4618      	mov	r0, r3
 8107096:	3708      	adds	r7, #8
 8107098:	46bd      	mov	sp, r7
 810709a:	bd80      	pop	{r7, pc}

0810709c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810709c:	b480      	push	{r7}
 810709e:	b083      	sub	sp, #12
 81070a0:	af00      	add	r7, sp, #0
 81070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81070a4:	bf00      	nop
 81070a6:	370c      	adds	r7, #12
 81070a8:	46bd      	mov	sp, r7
 81070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070ae:	4770      	bx	lr

081070b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81070b0:	b580      	push	{r7, lr}
 81070b2:	b084      	sub	sp, #16
 81070b4:	af00      	add	r7, sp, #0
 81070b6:	6078      	str	r0, [r7, #4]
 81070b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81070ba:	683b      	ldr	r3, [r7, #0]
 81070bc:	2b00      	cmp	r3, #0
 81070be:	d109      	bne.n	81070d4 <HAL_TIM_PWM_Start+0x24>
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81070c6:	b2db      	uxtb	r3, r3
 81070c8:	2b01      	cmp	r3, #1
 81070ca:	bf14      	ite	ne
 81070cc:	2301      	movne	r3, #1
 81070ce:	2300      	moveq	r3, #0
 81070d0:	b2db      	uxtb	r3, r3
 81070d2:	e03c      	b.n	810714e <HAL_TIM_PWM_Start+0x9e>
 81070d4:	683b      	ldr	r3, [r7, #0]
 81070d6:	2b04      	cmp	r3, #4
 81070d8:	d109      	bne.n	81070ee <HAL_TIM_PWM_Start+0x3e>
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81070e0:	b2db      	uxtb	r3, r3
 81070e2:	2b01      	cmp	r3, #1
 81070e4:	bf14      	ite	ne
 81070e6:	2301      	movne	r3, #1
 81070e8:	2300      	moveq	r3, #0
 81070ea:	b2db      	uxtb	r3, r3
 81070ec:	e02f      	b.n	810714e <HAL_TIM_PWM_Start+0x9e>
 81070ee:	683b      	ldr	r3, [r7, #0]
 81070f0:	2b08      	cmp	r3, #8
 81070f2:	d109      	bne.n	8107108 <HAL_TIM_PWM_Start+0x58>
 81070f4:	687b      	ldr	r3, [r7, #4]
 81070f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81070fa:	b2db      	uxtb	r3, r3
 81070fc:	2b01      	cmp	r3, #1
 81070fe:	bf14      	ite	ne
 8107100:	2301      	movne	r3, #1
 8107102:	2300      	moveq	r3, #0
 8107104:	b2db      	uxtb	r3, r3
 8107106:	e022      	b.n	810714e <HAL_TIM_PWM_Start+0x9e>
 8107108:	683b      	ldr	r3, [r7, #0]
 810710a:	2b0c      	cmp	r3, #12
 810710c:	d109      	bne.n	8107122 <HAL_TIM_PWM_Start+0x72>
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107114:	b2db      	uxtb	r3, r3
 8107116:	2b01      	cmp	r3, #1
 8107118:	bf14      	ite	ne
 810711a:	2301      	movne	r3, #1
 810711c:	2300      	moveq	r3, #0
 810711e:	b2db      	uxtb	r3, r3
 8107120:	e015      	b.n	810714e <HAL_TIM_PWM_Start+0x9e>
 8107122:	683b      	ldr	r3, [r7, #0]
 8107124:	2b10      	cmp	r3, #16
 8107126:	d109      	bne.n	810713c <HAL_TIM_PWM_Start+0x8c>
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810712e:	b2db      	uxtb	r3, r3
 8107130:	2b01      	cmp	r3, #1
 8107132:	bf14      	ite	ne
 8107134:	2301      	movne	r3, #1
 8107136:	2300      	moveq	r3, #0
 8107138:	b2db      	uxtb	r3, r3
 810713a:	e008      	b.n	810714e <HAL_TIM_PWM_Start+0x9e>
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8107142:	b2db      	uxtb	r3, r3
 8107144:	2b01      	cmp	r3, #1
 8107146:	bf14      	ite	ne
 8107148:	2301      	movne	r3, #1
 810714a:	2300      	moveq	r3, #0
 810714c:	b2db      	uxtb	r3, r3
 810714e:	2b00      	cmp	r3, #0
 8107150:	d001      	beq.n	8107156 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8107152:	2301      	movs	r3, #1
 8107154:	e0a1      	b.n	810729a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107156:	683b      	ldr	r3, [r7, #0]
 8107158:	2b00      	cmp	r3, #0
 810715a:	d104      	bne.n	8107166 <HAL_TIM_PWM_Start+0xb6>
 810715c:	687b      	ldr	r3, [r7, #4]
 810715e:	2202      	movs	r2, #2
 8107160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107164:	e023      	b.n	81071ae <HAL_TIM_PWM_Start+0xfe>
 8107166:	683b      	ldr	r3, [r7, #0]
 8107168:	2b04      	cmp	r3, #4
 810716a:	d104      	bne.n	8107176 <HAL_TIM_PWM_Start+0xc6>
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	2202      	movs	r2, #2
 8107170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107174:	e01b      	b.n	81071ae <HAL_TIM_PWM_Start+0xfe>
 8107176:	683b      	ldr	r3, [r7, #0]
 8107178:	2b08      	cmp	r3, #8
 810717a:	d104      	bne.n	8107186 <HAL_TIM_PWM_Start+0xd6>
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	2202      	movs	r2, #2
 8107180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107184:	e013      	b.n	81071ae <HAL_TIM_PWM_Start+0xfe>
 8107186:	683b      	ldr	r3, [r7, #0]
 8107188:	2b0c      	cmp	r3, #12
 810718a:	d104      	bne.n	8107196 <HAL_TIM_PWM_Start+0xe6>
 810718c:	687b      	ldr	r3, [r7, #4]
 810718e:	2202      	movs	r2, #2
 8107190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107194:	e00b      	b.n	81071ae <HAL_TIM_PWM_Start+0xfe>
 8107196:	683b      	ldr	r3, [r7, #0]
 8107198:	2b10      	cmp	r3, #16
 810719a:	d104      	bne.n	81071a6 <HAL_TIM_PWM_Start+0xf6>
 810719c:	687b      	ldr	r3, [r7, #4]
 810719e:	2202      	movs	r2, #2
 81071a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81071a4:	e003      	b.n	81071ae <HAL_TIM_PWM_Start+0xfe>
 81071a6:	687b      	ldr	r3, [r7, #4]
 81071a8:	2202      	movs	r2, #2
 81071aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81071ae:	687b      	ldr	r3, [r7, #4]
 81071b0:	681b      	ldr	r3, [r3, #0]
 81071b2:	2201      	movs	r2, #1
 81071b4:	6839      	ldr	r1, [r7, #0]
 81071b6:	4618      	mov	r0, r3
 81071b8:	f000 ff46 	bl	8108048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	681b      	ldr	r3, [r3, #0]
 81071c0:	4a38      	ldr	r2, [pc, #224]	; (81072a4 <HAL_TIM_PWM_Start+0x1f4>)
 81071c2:	4293      	cmp	r3, r2
 81071c4:	d013      	beq.n	81071ee <HAL_TIM_PWM_Start+0x13e>
 81071c6:	687b      	ldr	r3, [r7, #4]
 81071c8:	681b      	ldr	r3, [r3, #0]
 81071ca:	4a37      	ldr	r2, [pc, #220]	; (81072a8 <HAL_TIM_PWM_Start+0x1f8>)
 81071cc:	4293      	cmp	r3, r2
 81071ce:	d00e      	beq.n	81071ee <HAL_TIM_PWM_Start+0x13e>
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	681b      	ldr	r3, [r3, #0]
 81071d4:	4a35      	ldr	r2, [pc, #212]	; (81072ac <HAL_TIM_PWM_Start+0x1fc>)
 81071d6:	4293      	cmp	r3, r2
 81071d8:	d009      	beq.n	81071ee <HAL_TIM_PWM_Start+0x13e>
 81071da:	687b      	ldr	r3, [r7, #4]
 81071dc:	681b      	ldr	r3, [r3, #0]
 81071de:	4a34      	ldr	r2, [pc, #208]	; (81072b0 <HAL_TIM_PWM_Start+0x200>)
 81071e0:	4293      	cmp	r3, r2
 81071e2:	d004      	beq.n	81071ee <HAL_TIM_PWM_Start+0x13e>
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	681b      	ldr	r3, [r3, #0]
 81071e8:	4a32      	ldr	r2, [pc, #200]	; (81072b4 <HAL_TIM_PWM_Start+0x204>)
 81071ea:	4293      	cmp	r3, r2
 81071ec:	d101      	bne.n	81071f2 <HAL_TIM_PWM_Start+0x142>
 81071ee:	2301      	movs	r3, #1
 81071f0:	e000      	b.n	81071f4 <HAL_TIM_PWM_Start+0x144>
 81071f2:	2300      	movs	r3, #0
 81071f4:	2b00      	cmp	r3, #0
 81071f6:	d007      	beq.n	8107208 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	681b      	ldr	r3, [r3, #0]
 81071fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	681b      	ldr	r3, [r3, #0]
 8107202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107206:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107208:	687b      	ldr	r3, [r7, #4]
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	4a25      	ldr	r2, [pc, #148]	; (81072a4 <HAL_TIM_PWM_Start+0x1f4>)
 810720e:	4293      	cmp	r3, r2
 8107210:	d022      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810721a:	d01d      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 810721c:	687b      	ldr	r3, [r7, #4]
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	4a25      	ldr	r2, [pc, #148]	; (81072b8 <HAL_TIM_PWM_Start+0x208>)
 8107222:	4293      	cmp	r3, r2
 8107224:	d018      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	681b      	ldr	r3, [r3, #0]
 810722a:	4a24      	ldr	r2, [pc, #144]	; (81072bc <HAL_TIM_PWM_Start+0x20c>)
 810722c:	4293      	cmp	r3, r2
 810722e:	d013      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	4a22      	ldr	r2, [pc, #136]	; (81072c0 <HAL_TIM_PWM_Start+0x210>)
 8107236:	4293      	cmp	r3, r2
 8107238:	d00e      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	681b      	ldr	r3, [r3, #0]
 810723e:	4a1a      	ldr	r2, [pc, #104]	; (81072a8 <HAL_TIM_PWM_Start+0x1f8>)
 8107240:	4293      	cmp	r3, r2
 8107242:	d009      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	4a1e      	ldr	r2, [pc, #120]	; (81072c4 <HAL_TIM_PWM_Start+0x214>)
 810724a:	4293      	cmp	r3, r2
 810724c:	d004      	beq.n	8107258 <HAL_TIM_PWM_Start+0x1a8>
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	681b      	ldr	r3, [r3, #0]
 8107252:	4a16      	ldr	r2, [pc, #88]	; (81072ac <HAL_TIM_PWM_Start+0x1fc>)
 8107254:	4293      	cmp	r3, r2
 8107256:	d115      	bne.n	8107284 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	681b      	ldr	r3, [r3, #0]
 810725c:	689a      	ldr	r2, [r3, #8]
 810725e:	4b1a      	ldr	r3, [pc, #104]	; (81072c8 <HAL_TIM_PWM_Start+0x218>)
 8107260:	4013      	ands	r3, r2
 8107262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	2b06      	cmp	r3, #6
 8107268:	d015      	beq.n	8107296 <HAL_TIM_PWM_Start+0x1e6>
 810726a:	68fb      	ldr	r3, [r7, #12]
 810726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107270:	d011      	beq.n	8107296 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8107272:	687b      	ldr	r3, [r7, #4]
 8107274:	681b      	ldr	r3, [r3, #0]
 8107276:	681a      	ldr	r2, [r3, #0]
 8107278:	687b      	ldr	r3, [r7, #4]
 810727a:	681b      	ldr	r3, [r3, #0]
 810727c:	f042 0201 	orr.w	r2, r2, #1
 8107280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107282:	e008      	b.n	8107296 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	681b      	ldr	r3, [r3, #0]
 8107288:	681a      	ldr	r2, [r3, #0]
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	f042 0201 	orr.w	r2, r2, #1
 8107292:	601a      	str	r2, [r3, #0]
 8107294:	e000      	b.n	8107298 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107298:	2300      	movs	r3, #0
}
 810729a:	4618      	mov	r0, r3
 810729c:	3710      	adds	r7, #16
 810729e:	46bd      	mov	sp, r7
 81072a0:	bd80      	pop	{r7, pc}
 81072a2:	bf00      	nop
 81072a4:	40010000 	.word	0x40010000
 81072a8:	40010400 	.word	0x40010400
 81072ac:	40014000 	.word	0x40014000
 81072b0:	40014400 	.word	0x40014400
 81072b4:	40014800 	.word	0x40014800
 81072b8:	40000400 	.word	0x40000400
 81072bc:	40000800 	.word	0x40000800
 81072c0:	40000c00 	.word	0x40000c00
 81072c4:	40001800 	.word	0x40001800
 81072c8:	00010007 	.word	0x00010007

081072cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81072cc:	b580      	push	{r7, lr}
 81072ce:	b086      	sub	sp, #24
 81072d0:	af00      	add	r7, sp, #0
 81072d2:	6078      	str	r0, [r7, #4]
 81072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	2b00      	cmp	r3, #0
 81072da:	d101      	bne.n	81072e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 81072dc:	2301      	movs	r3, #1
 81072de:	e097      	b.n	8107410 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81072e6:	b2db      	uxtb	r3, r3
 81072e8:	2b00      	cmp	r3, #0
 81072ea:	d106      	bne.n	81072fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81072ec:	687b      	ldr	r3, [r7, #4]
 81072ee:	2200      	movs	r2, #0
 81072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 81072f4:	6878      	ldr	r0, [r7, #4]
 81072f6:	f7fa fd7b 	bl	8101df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	2202      	movs	r2, #2
 81072fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	689b      	ldr	r3, [r3, #8]
 8107308:	687a      	ldr	r2, [r7, #4]
 810730a:	6812      	ldr	r2, [r2, #0]
 810730c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8107310:	f023 0307 	bic.w	r3, r3, #7
 8107314:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	681a      	ldr	r2, [r3, #0]
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	3304      	adds	r3, #4
 810731e:	4619      	mov	r1, r3
 8107320:	4610      	mov	r0, r2
 8107322:	f000 fa85 	bl	8107830 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107326:	687b      	ldr	r3, [r7, #4]
 8107328:	681b      	ldr	r3, [r3, #0]
 810732a:	689b      	ldr	r3, [r3, #8]
 810732c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810732e:	687b      	ldr	r3, [r7, #4]
 8107330:	681b      	ldr	r3, [r3, #0]
 8107332:	699b      	ldr	r3, [r3, #24]
 8107334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8107336:	687b      	ldr	r3, [r7, #4]
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	6a1b      	ldr	r3, [r3, #32]
 810733c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810733e:	683b      	ldr	r3, [r7, #0]
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	697a      	ldr	r2, [r7, #20]
 8107344:	4313      	orrs	r3, r2
 8107346:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8107348:	693b      	ldr	r3, [r7, #16]
 810734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810734e:	f023 0303 	bic.w	r3, r3, #3
 8107352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8107354:	683b      	ldr	r3, [r7, #0]
 8107356:	689a      	ldr	r2, [r3, #8]
 8107358:	683b      	ldr	r3, [r7, #0]
 810735a:	699b      	ldr	r3, [r3, #24]
 810735c:	021b      	lsls	r3, r3, #8
 810735e:	4313      	orrs	r3, r2
 8107360:	693a      	ldr	r2, [r7, #16]
 8107362:	4313      	orrs	r3, r2
 8107364:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8107366:	693b      	ldr	r3, [r7, #16]
 8107368:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 810736c:	f023 030c 	bic.w	r3, r3, #12
 8107370:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8107372:	693b      	ldr	r3, [r7, #16]
 8107374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810737c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810737e:	683b      	ldr	r3, [r7, #0]
 8107380:	68da      	ldr	r2, [r3, #12]
 8107382:	683b      	ldr	r3, [r7, #0]
 8107384:	69db      	ldr	r3, [r3, #28]
 8107386:	021b      	lsls	r3, r3, #8
 8107388:	4313      	orrs	r3, r2
 810738a:	693a      	ldr	r2, [r7, #16]
 810738c:	4313      	orrs	r3, r2
 810738e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8107390:	683b      	ldr	r3, [r7, #0]
 8107392:	691b      	ldr	r3, [r3, #16]
 8107394:	011a      	lsls	r2, r3, #4
 8107396:	683b      	ldr	r3, [r7, #0]
 8107398:	6a1b      	ldr	r3, [r3, #32]
 810739a:	031b      	lsls	r3, r3, #12
 810739c:	4313      	orrs	r3, r2
 810739e:	693a      	ldr	r2, [r7, #16]
 81073a0:	4313      	orrs	r3, r2
 81073a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81073aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81073ac:	68fb      	ldr	r3, [r7, #12]
 81073ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81073b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81073b4:	683b      	ldr	r3, [r7, #0]
 81073b6:	685a      	ldr	r2, [r3, #4]
 81073b8:	683b      	ldr	r3, [r7, #0]
 81073ba:	695b      	ldr	r3, [r3, #20]
 81073bc:	011b      	lsls	r3, r3, #4
 81073be:	4313      	orrs	r3, r2
 81073c0:	68fa      	ldr	r2, [r7, #12]
 81073c2:	4313      	orrs	r3, r2
 81073c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81073c6:	687b      	ldr	r3, [r7, #4]
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	697a      	ldr	r2, [r7, #20]
 81073cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	693a      	ldr	r2, [r7, #16]
 81073d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81073d6:	687b      	ldr	r3, [r7, #4]
 81073d8:	681b      	ldr	r3, [r3, #0]
 81073da:	68fa      	ldr	r2, [r7, #12]
 81073dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	2201      	movs	r2, #1
 81073e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	2201      	movs	r2, #1
 81073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81073ee:	687b      	ldr	r3, [r7, #4]
 81073f0:	2201      	movs	r2, #1
 81073f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81073f6:	687b      	ldr	r3, [r7, #4]
 81073f8:	2201      	movs	r2, #1
 81073fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81073fe:	687b      	ldr	r3, [r7, #4]
 8107400:	2201      	movs	r2, #1
 8107402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	2201      	movs	r2, #1
 810740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810740e:	2300      	movs	r3, #0
}
 8107410:	4618      	mov	r0, r3
 8107412:	3718      	adds	r7, #24
 8107414:	46bd      	mov	sp, r7
 8107416:	bd80      	pop	{r7, pc}

08107418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107418:	b580      	push	{r7, lr}
 810741a:	b086      	sub	sp, #24
 810741c:	af00      	add	r7, sp, #0
 810741e:	60f8      	str	r0, [r7, #12]
 8107420:	60b9      	str	r1, [r7, #8]
 8107422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107424:	2300      	movs	r3, #0
 8107426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107428:	68fb      	ldr	r3, [r7, #12]
 810742a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810742e:	2b01      	cmp	r3, #1
 8107430:	d101      	bne.n	8107436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8107432:	2302      	movs	r3, #2
 8107434:	e0ff      	b.n	8107636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8107436:	68fb      	ldr	r3, [r7, #12]
 8107438:	2201      	movs	r2, #1
 810743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810743e:	687b      	ldr	r3, [r7, #4]
 8107440:	2b14      	cmp	r3, #20
 8107442:	f200 80f0 	bhi.w	8107626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107446:	a201      	add	r2, pc, #4	; (adr r2, 810744c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810744c:	081074a1 	.word	0x081074a1
 8107450:	08107627 	.word	0x08107627
 8107454:	08107627 	.word	0x08107627
 8107458:	08107627 	.word	0x08107627
 810745c:	081074e1 	.word	0x081074e1
 8107460:	08107627 	.word	0x08107627
 8107464:	08107627 	.word	0x08107627
 8107468:	08107627 	.word	0x08107627
 810746c:	08107523 	.word	0x08107523
 8107470:	08107627 	.word	0x08107627
 8107474:	08107627 	.word	0x08107627
 8107478:	08107627 	.word	0x08107627
 810747c:	08107563 	.word	0x08107563
 8107480:	08107627 	.word	0x08107627
 8107484:	08107627 	.word	0x08107627
 8107488:	08107627 	.word	0x08107627
 810748c:	081075a5 	.word	0x081075a5
 8107490:	08107627 	.word	0x08107627
 8107494:	08107627 	.word	0x08107627
 8107498:	08107627 	.word	0x08107627
 810749c:	081075e5 	.word	0x081075e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81074a0:	68fb      	ldr	r3, [r7, #12]
 81074a2:	681b      	ldr	r3, [r3, #0]
 81074a4:	68b9      	ldr	r1, [r7, #8]
 81074a6:	4618      	mov	r0, r3
 81074a8:	f000 fa5c 	bl	8107964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81074ac:	68fb      	ldr	r3, [r7, #12]
 81074ae:	681b      	ldr	r3, [r3, #0]
 81074b0:	699a      	ldr	r2, [r3, #24]
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	f042 0208 	orr.w	r2, r2, #8
 81074ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81074bc:	68fb      	ldr	r3, [r7, #12]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	699a      	ldr	r2, [r3, #24]
 81074c2:	68fb      	ldr	r3, [r7, #12]
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	f022 0204 	bic.w	r2, r2, #4
 81074ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	6999      	ldr	r1, [r3, #24]
 81074d2:	68bb      	ldr	r3, [r7, #8]
 81074d4:	691a      	ldr	r2, [r3, #16]
 81074d6:	68fb      	ldr	r3, [r7, #12]
 81074d8:	681b      	ldr	r3, [r3, #0]
 81074da:	430a      	orrs	r2, r1
 81074dc:	619a      	str	r2, [r3, #24]
      break;
 81074de:	e0a5      	b.n	810762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81074e0:	68fb      	ldr	r3, [r7, #12]
 81074e2:	681b      	ldr	r3, [r3, #0]
 81074e4:	68b9      	ldr	r1, [r7, #8]
 81074e6:	4618      	mov	r0, r3
 81074e8:	f000 facc 	bl	8107a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81074ec:	68fb      	ldr	r3, [r7, #12]
 81074ee:	681b      	ldr	r3, [r3, #0]
 81074f0:	699a      	ldr	r2, [r3, #24]
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81074fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81074fc:	68fb      	ldr	r3, [r7, #12]
 81074fe:	681b      	ldr	r3, [r3, #0]
 8107500:	699a      	ldr	r2, [r3, #24]
 8107502:	68fb      	ldr	r3, [r7, #12]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810750a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810750c:	68fb      	ldr	r3, [r7, #12]
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	6999      	ldr	r1, [r3, #24]
 8107512:	68bb      	ldr	r3, [r7, #8]
 8107514:	691b      	ldr	r3, [r3, #16]
 8107516:	021a      	lsls	r2, r3, #8
 8107518:	68fb      	ldr	r3, [r7, #12]
 810751a:	681b      	ldr	r3, [r3, #0]
 810751c:	430a      	orrs	r2, r1
 810751e:	619a      	str	r2, [r3, #24]
      break;
 8107520:	e084      	b.n	810762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8107522:	68fb      	ldr	r3, [r7, #12]
 8107524:	681b      	ldr	r3, [r3, #0]
 8107526:	68b9      	ldr	r1, [r7, #8]
 8107528:	4618      	mov	r0, r3
 810752a:	f000 fb35 	bl	8107b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810752e:	68fb      	ldr	r3, [r7, #12]
 8107530:	681b      	ldr	r3, [r3, #0]
 8107532:	69da      	ldr	r2, [r3, #28]
 8107534:	68fb      	ldr	r3, [r7, #12]
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	f042 0208 	orr.w	r2, r2, #8
 810753c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810753e:	68fb      	ldr	r3, [r7, #12]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	69da      	ldr	r2, [r3, #28]
 8107544:	68fb      	ldr	r3, [r7, #12]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	f022 0204 	bic.w	r2, r2, #4
 810754c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810754e:	68fb      	ldr	r3, [r7, #12]
 8107550:	681b      	ldr	r3, [r3, #0]
 8107552:	69d9      	ldr	r1, [r3, #28]
 8107554:	68bb      	ldr	r3, [r7, #8]
 8107556:	691a      	ldr	r2, [r3, #16]
 8107558:	68fb      	ldr	r3, [r7, #12]
 810755a:	681b      	ldr	r3, [r3, #0]
 810755c:	430a      	orrs	r2, r1
 810755e:	61da      	str	r2, [r3, #28]
      break;
 8107560:	e064      	b.n	810762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8107562:	68fb      	ldr	r3, [r7, #12]
 8107564:	681b      	ldr	r3, [r3, #0]
 8107566:	68b9      	ldr	r1, [r7, #8]
 8107568:	4618      	mov	r0, r3
 810756a:	f000 fb9d 	bl	8107ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810756e:	68fb      	ldr	r3, [r7, #12]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	69da      	ldr	r2, [r3, #28]
 8107574:	68fb      	ldr	r3, [r7, #12]
 8107576:	681b      	ldr	r3, [r3, #0]
 8107578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810757c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810757e:	68fb      	ldr	r3, [r7, #12]
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	69da      	ldr	r2, [r3, #28]
 8107584:	68fb      	ldr	r3, [r7, #12]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810758c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810758e:	68fb      	ldr	r3, [r7, #12]
 8107590:	681b      	ldr	r3, [r3, #0]
 8107592:	69d9      	ldr	r1, [r3, #28]
 8107594:	68bb      	ldr	r3, [r7, #8]
 8107596:	691b      	ldr	r3, [r3, #16]
 8107598:	021a      	lsls	r2, r3, #8
 810759a:	68fb      	ldr	r3, [r7, #12]
 810759c:	681b      	ldr	r3, [r3, #0]
 810759e:	430a      	orrs	r2, r1
 81075a0:	61da      	str	r2, [r3, #28]
      break;
 81075a2:	e043      	b.n	810762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81075a4:	68fb      	ldr	r3, [r7, #12]
 81075a6:	681b      	ldr	r3, [r3, #0]
 81075a8:	68b9      	ldr	r1, [r7, #8]
 81075aa:	4618      	mov	r0, r3
 81075ac:	f000 fbe6 	bl	8107d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81075b0:	68fb      	ldr	r3, [r7, #12]
 81075b2:	681b      	ldr	r3, [r3, #0]
 81075b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81075b6:	68fb      	ldr	r3, [r7, #12]
 81075b8:	681b      	ldr	r3, [r3, #0]
 81075ba:	f042 0208 	orr.w	r2, r2, #8
 81075be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	681b      	ldr	r3, [r3, #0]
 81075ca:	f022 0204 	bic.w	r2, r2, #4
 81075ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81075d0:	68fb      	ldr	r3, [r7, #12]
 81075d2:	681b      	ldr	r3, [r3, #0]
 81075d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81075d6:	68bb      	ldr	r3, [r7, #8]
 81075d8:	691a      	ldr	r2, [r3, #16]
 81075da:	68fb      	ldr	r3, [r7, #12]
 81075dc:	681b      	ldr	r3, [r3, #0]
 81075de:	430a      	orrs	r2, r1
 81075e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81075e2:	e023      	b.n	810762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81075e4:	68fb      	ldr	r3, [r7, #12]
 81075e6:	681b      	ldr	r3, [r3, #0]
 81075e8:	68b9      	ldr	r1, [r7, #8]
 81075ea:	4618      	mov	r0, r3
 81075ec:	f000 fc2a 	bl	8107e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81075f0:	68fb      	ldr	r3, [r7, #12]
 81075f2:	681b      	ldr	r3, [r3, #0]
 81075f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81075f6:	68fb      	ldr	r3, [r7, #12]
 81075f8:	681b      	ldr	r3, [r3, #0]
 81075fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81075fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107600:	68fb      	ldr	r3, [r7, #12]
 8107602:	681b      	ldr	r3, [r3, #0]
 8107604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107606:	68fb      	ldr	r3, [r7, #12]
 8107608:	681b      	ldr	r3, [r3, #0]
 810760a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810760e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107610:	68fb      	ldr	r3, [r7, #12]
 8107612:	681b      	ldr	r3, [r3, #0]
 8107614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107616:	68bb      	ldr	r3, [r7, #8]
 8107618:	691b      	ldr	r3, [r3, #16]
 810761a:	021a      	lsls	r2, r3, #8
 810761c:	68fb      	ldr	r3, [r7, #12]
 810761e:	681b      	ldr	r3, [r3, #0]
 8107620:	430a      	orrs	r2, r1
 8107622:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107624:	e002      	b.n	810762c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8107626:	2301      	movs	r3, #1
 8107628:	75fb      	strb	r3, [r7, #23]
      break;
 810762a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810762c:	68fb      	ldr	r3, [r7, #12]
 810762e:	2200      	movs	r2, #0
 8107630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107634:	7dfb      	ldrb	r3, [r7, #23]
}
 8107636:	4618      	mov	r0, r3
 8107638:	3718      	adds	r7, #24
 810763a:	46bd      	mov	sp, r7
 810763c:	bd80      	pop	{r7, pc}
 810763e:	bf00      	nop

08107640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8107640:	b580      	push	{r7, lr}
 8107642:	b084      	sub	sp, #16
 8107644:	af00      	add	r7, sp, #0
 8107646:	6078      	str	r0, [r7, #4]
 8107648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810764a:	2300      	movs	r3, #0
 810764c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810764e:	687b      	ldr	r3, [r7, #4]
 8107650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107654:	2b01      	cmp	r3, #1
 8107656:	d101      	bne.n	810765c <HAL_TIM_ConfigClockSource+0x1c>
 8107658:	2302      	movs	r3, #2
 810765a:	e0de      	b.n	810781a <HAL_TIM_ConfigClockSource+0x1da>
 810765c:	687b      	ldr	r3, [r7, #4]
 810765e:	2201      	movs	r2, #1
 8107660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107664:	687b      	ldr	r3, [r7, #4]
 8107666:	2202      	movs	r2, #2
 8107668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810766c:	687b      	ldr	r3, [r7, #4]
 810766e:	681b      	ldr	r3, [r3, #0]
 8107670:	689b      	ldr	r3, [r3, #8]
 8107672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8107674:	68bb      	ldr	r3, [r7, #8]
 8107676:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810767a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810767e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107680:	68bb      	ldr	r3, [r7, #8]
 8107682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	68ba      	ldr	r2, [r7, #8]
 810768e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8107690:	683b      	ldr	r3, [r7, #0]
 8107692:	681b      	ldr	r3, [r3, #0]
 8107694:	4a63      	ldr	r2, [pc, #396]	; (8107824 <HAL_TIM_ConfigClockSource+0x1e4>)
 8107696:	4293      	cmp	r3, r2
 8107698:	f000 80a9 	beq.w	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 810769c:	4a61      	ldr	r2, [pc, #388]	; (8107824 <HAL_TIM_ConfigClockSource+0x1e4>)
 810769e:	4293      	cmp	r3, r2
 81076a0:	f200 80ae 	bhi.w	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 81076a4:	4a60      	ldr	r2, [pc, #384]	; (8107828 <HAL_TIM_ConfigClockSource+0x1e8>)
 81076a6:	4293      	cmp	r3, r2
 81076a8:	f000 80a1 	beq.w	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 81076ac:	4a5e      	ldr	r2, [pc, #376]	; (8107828 <HAL_TIM_ConfigClockSource+0x1e8>)
 81076ae:	4293      	cmp	r3, r2
 81076b0:	f200 80a6 	bhi.w	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 81076b4:	4a5d      	ldr	r2, [pc, #372]	; (810782c <HAL_TIM_ConfigClockSource+0x1ec>)
 81076b6:	4293      	cmp	r3, r2
 81076b8:	f000 8099 	beq.w	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 81076bc:	4a5b      	ldr	r2, [pc, #364]	; (810782c <HAL_TIM_ConfigClockSource+0x1ec>)
 81076be:	4293      	cmp	r3, r2
 81076c0:	f200 809e 	bhi.w	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 81076c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81076c8:	f000 8091 	beq.w	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 81076cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81076d0:	f200 8096 	bhi.w	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 81076d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81076d8:	f000 8089 	beq.w	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 81076dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81076e0:	f200 808e 	bhi.w	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 81076e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81076e8:	d03e      	beq.n	8107768 <HAL_TIM_ConfigClockSource+0x128>
 81076ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81076ee:	f200 8087 	bhi.w	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 81076f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81076f6:	f000 8086 	beq.w	8107806 <HAL_TIM_ConfigClockSource+0x1c6>
 81076fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81076fe:	d87f      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107700:	2b70      	cmp	r3, #112	; 0x70
 8107702:	d01a      	beq.n	810773a <HAL_TIM_ConfigClockSource+0xfa>
 8107704:	2b70      	cmp	r3, #112	; 0x70
 8107706:	d87b      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107708:	2b60      	cmp	r3, #96	; 0x60
 810770a:	d050      	beq.n	81077ae <HAL_TIM_ConfigClockSource+0x16e>
 810770c:	2b60      	cmp	r3, #96	; 0x60
 810770e:	d877      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107710:	2b50      	cmp	r3, #80	; 0x50
 8107712:	d03c      	beq.n	810778e <HAL_TIM_ConfigClockSource+0x14e>
 8107714:	2b50      	cmp	r3, #80	; 0x50
 8107716:	d873      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107718:	2b40      	cmp	r3, #64	; 0x40
 810771a:	d058      	beq.n	81077ce <HAL_TIM_ConfigClockSource+0x18e>
 810771c:	2b40      	cmp	r3, #64	; 0x40
 810771e:	d86f      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107720:	2b30      	cmp	r3, #48	; 0x30
 8107722:	d064      	beq.n	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 8107724:	2b30      	cmp	r3, #48	; 0x30
 8107726:	d86b      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107728:	2b20      	cmp	r3, #32
 810772a:	d060      	beq.n	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 810772c:	2b20      	cmp	r3, #32
 810772e:	d867      	bhi.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
 8107730:	2b00      	cmp	r3, #0
 8107732:	d05c      	beq.n	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 8107734:	2b10      	cmp	r3, #16
 8107736:	d05a      	beq.n	81077ee <HAL_TIM_ConfigClockSource+0x1ae>
 8107738:	e062      	b.n	8107800 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	6818      	ldr	r0, [r3, #0]
 810773e:	683b      	ldr	r3, [r7, #0]
 8107740:	6899      	ldr	r1, [r3, #8]
 8107742:	683b      	ldr	r3, [r7, #0]
 8107744:	685a      	ldr	r2, [r3, #4]
 8107746:	683b      	ldr	r3, [r7, #0]
 8107748:	68db      	ldr	r3, [r3, #12]
 810774a:	f000 fc5d 	bl	8108008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810774e:	687b      	ldr	r3, [r7, #4]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	689b      	ldr	r3, [r3, #8]
 8107754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8107756:	68bb      	ldr	r3, [r7, #8]
 8107758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810775c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810775e:	687b      	ldr	r3, [r7, #4]
 8107760:	681b      	ldr	r3, [r3, #0]
 8107762:	68ba      	ldr	r2, [r7, #8]
 8107764:	609a      	str	r2, [r3, #8]
      break;
 8107766:	e04f      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	6818      	ldr	r0, [r3, #0]
 810776c:	683b      	ldr	r3, [r7, #0]
 810776e:	6899      	ldr	r1, [r3, #8]
 8107770:	683b      	ldr	r3, [r7, #0]
 8107772:	685a      	ldr	r2, [r3, #4]
 8107774:	683b      	ldr	r3, [r7, #0]
 8107776:	68db      	ldr	r3, [r3, #12]
 8107778:	f000 fc46 	bl	8108008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810777c:	687b      	ldr	r3, [r7, #4]
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	689a      	ldr	r2, [r3, #8]
 8107782:	687b      	ldr	r3, [r7, #4]
 8107784:	681b      	ldr	r3, [r3, #0]
 8107786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810778a:	609a      	str	r2, [r3, #8]
      break;
 810778c:	e03c      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810778e:	687b      	ldr	r3, [r7, #4]
 8107790:	6818      	ldr	r0, [r3, #0]
 8107792:	683b      	ldr	r3, [r7, #0]
 8107794:	6859      	ldr	r1, [r3, #4]
 8107796:	683b      	ldr	r3, [r7, #0]
 8107798:	68db      	ldr	r3, [r3, #12]
 810779a:	461a      	mov	r2, r3
 810779c:	f000 fbb8 	bl	8107f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	681b      	ldr	r3, [r3, #0]
 81077a4:	2150      	movs	r1, #80	; 0x50
 81077a6:	4618      	mov	r0, r3
 81077a8:	f000 fc11 	bl	8107fce <TIM_ITRx_SetConfig>
      break;
 81077ac:	e02c      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	6818      	ldr	r0, [r3, #0]
 81077b2:	683b      	ldr	r3, [r7, #0]
 81077b4:	6859      	ldr	r1, [r3, #4]
 81077b6:	683b      	ldr	r3, [r7, #0]
 81077b8:	68db      	ldr	r3, [r3, #12]
 81077ba:	461a      	mov	r2, r3
 81077bc:	f000 fbd7 	bl	8107f6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	681b      	ldr	r3, [r3, #0]
 81077c4:	2160      	movs	r1, #96	; 0x60
 81077c6:	4618      	mov	r0, r3
 81077c8:	f000 fc01 	bl	8107fce <TIM_ITRx_SetConfig>
      break;
 81077cc:	e01c      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81077ce:	687b      	ldr	r3, [r7, #4]
 81077d0:	6818      	ldr	r0, [r3, #0]
 81077d2:	683b      	ldr	r3, [r7, #0]
 81077d4:	6859      	ldr	r1, [r3, #4]
 81077d6:	683b      	ldr	r3, [r7, #0]
 81077d8:	68db      	ldr	r3, [r3, #12]
 81077da:	461a      	mov	r2, r3
 81077dc:	f000 fb98 	bl	8107f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	681b      	ldr	r3, [r3, #0]
 81077e4:	2140      	movs	r1, #64	; 0x40
 81077e6:	4618      	mov	r0, r3
 81077e8:	f000 fbf1 	bl	8107fce <TIM_ITRx_SetConfig>
      break;
 81077ec:	e00c      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	681a      	ldr	r2, [r3, #0]
 81077f2:	683b      	ldr	r3, [r7, #0]
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	4619      	mov	r1, r3
 81077f8:	4610      	mov	r0, r2
 81077fa:	f000 fbe8 	bl	8107fce <TIM_ITRx_SetConfig>
      break;
 81077fe:	e003      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8107800:	2301      	movs	r3, #1
 8107802:	73fb      	strb	r3, [r7, #15]
      break;
 8107804:	e000      	b.n	8107808 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8107806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	2201      	movs	r2, #1
 810780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	2200      	movs	r2, #0
 8107814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107818:	7bfb      	ldrb	r3, [r7, #15]
}
 810781a:	4618      	mov	r0, r3
 810781c:	3710      	adds	r7, #16
 810781e:	46bd      	mov	sp, r7
 8107820:	bd80      	pop	{r7, pc}
 8107822:	bf00      	nop
 8107824:	00100040 	.word	0x00100040
 8107828:	00100030 	.word	0x00100030
 810782c:	00100020 	.word	0x00100020

08107830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107830:	b480      	push	{r7}
 8107832:	b085      	sub	sp, #20
 8107834:	af00      	add	r7, sp, #0
 8107836:	6078      	str	r0, [r7, #4]
 8107838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	681b      	ldr	r3, [r3, #0]
 810783e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	4a40      	ldr	r2, [pc, #256]	; (8107944 <TIM_Base_SetConfig+0x114>)
 8107844:	4293      	cmp	r3, r2
 8107846:	d013      	beq.n	8107870 <TIM_Base_SetConfig+0x40>
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810784e:	d00f      	beq.n	8107870 <TIM_Base_SetConfig+0x40>
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	4a3d      	ldr	r2, [pc, #244]	; (8107948 <TIM_Base_SetConfig+0x118>)
 8107854:	4293      	cmp	r3, r2
 8107856:	d00b      	beq.n	8107870 <TIM_Base_SetConfig+0x40>
 8107858:	687b      	ldr	r3, [r7, #4]
 810785a:	4a3c      	ldr	r2, [pc, #240]	; (810794c <TIM_Base_SetConfig+0x11c>)
 810785c:	4293      	cmp	r3, r2
 810785e:	d007      	beq.n	8107870 <TIM_Base_SetConfig+0x40>
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	4a3b      	ldr	r2, [pc, #236]	; (8107950 <TIM_Base_SetConfig+0x120>)
 8107864:	4293      	cmp	r3, r2
 8107866:	d003      	beq.n	8107870 <TIM_Base_SetConfig+0x40>
 8107868:	687b      	ldr	r3, [r7, #4]
 810786a:	4a3a      	ldr	r2, [pc, #232]	; (8107954 <TIM_Base_SetConfig+0x124>)
 810786c:	4293      	cmp	r3, r2
 810786e:	d108      	bne.n	8107882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107870:	68fb      	ldr	r3, [r7, #12]
 8107872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107878:	683b      	ldr	r3, [r7, #0]
 810787a:	685b      	ldr	r3, [r3, #4]
 810787c:	68fa      	ldr	r2, [r7, #12]
 810787e:	4313      	orrs	r3, r2
 8107880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	4a2f      	ldr	r2, [pc, #188]	; (8107944 <TIM_Base_SetConfig+0x114>)
 8107886:	4293      	cmp	r3, r2
 8107888:	d01f      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107890:	d01b      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	4a2c      	ldr	r2, [pc, #176]	; (8107948 <TIM_Base_SetConfig+0x118>)
 8107896:	4293      	cmp	r3, r2
 8107898:	d017      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	4a2b      	ldr	r2, [pc, #172]	; (810794c <TIM_Base_SetConfig+0x11c>)
 810789e:	4293      	cmp	r3, r2
 81078a0:	d013      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	4a2a      	ldr	r2, [pc, #168]	; (8107950 <TIM_Base_SetConfig+0x120>)
 81078a6:	4293      	cmp	r3, r2
 81078a8:	d00f      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 81078aa:	687b      	ldr	r3, [r7, #4]
 81078ac:	4a29      	ldr	r2, [pc, #164]	; (8107954 <TIM_Base_SetConfig+0x124>)
 81078ae:	4293      	cmp	r3, r2
 81078b0:	d00b      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	4a28      	ldr	r2, [pc, #160]	; (8107958 <TIM_Base_SetConfig+0x128>)
 81078b6:	4293      	cmp	r3, r2
 81078b8:	d007      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	4a27      	ldr	r2, [pc, #156]	; (810795c <TIM_Base_SetConfig+0x12c>)
 81078be:	4293      	cmp	r3, r2
 81078c0:	d003      	beq.n	81078ca <TIM_Base_SetConfig+0x9a>
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	4a26      	ldr	r2, [pc, #152]	; (8107960 <TIM_Base_SetConfig+0x130>)
 81078c6:	4293      	cmp	r3, r2
 81078c8:	d108      	bne.n	81078dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81078ca:	68fb      	ldr	r3, [r7, #12]
 81078cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81078d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81078d2:	683b      	ldr	r3, [r7, #0]
 81078d4:	68db      	ldr	r3, [r3, #12]
 81078d6:	68fa      	ldr	r2, [r7, #12]
 81078d8:	4313      	orrs	r3, r2
 81078da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81078dc:	68fb      	ldr	r3, [r7, #12]
 81078de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81078e2:	683b      	ldr	r3, [r7, #0]
 81078e4:	695b      	ldr	r3, [r3, #20]
 81078e6:	4313      	orrs	r3, r2
 81078e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81078ea:	687b      	ldr	r3, [r7, #4]
 81078ec:	68fa      	ldr	r2, [r7, #12]
 81078ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81078f0:	683b      	ldr	r3, [r7, #0]
 81078f2:	689a      	ldr	r2, [r3, #8]
 81078f4:	687b      	ldr	r3, [r7, #4]
 81078f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81078f8:	683b      	ldr	r3, [r7, #0]
 81078fa:	681a      	ldr	r2, [r3, #0]
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	4a10      	ldr	r2, [pc, #64]	; (8107944 <TIM_Base_SetConfig+0x114>)
 8107904:	4293      	cmp	r3, r2
 8107906:	d00f      	beq.n	8107928 <TIM_Base_SetConfig+0xf8>
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	4a12      	ldr	r2, [pc, #72]	; (8107954 <TIM_Base_SetConfig+0x124>)
 810790c:	4293      	cmp	r3, r2
 810790e:	d00b      	beq.n	8107928 <TIM_Base_SetConfig+0xf8>
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	4a11      	ldr	r2, [pc, #68]	; (8107958 <TIM_Base_SetConfig+0x128>)
 8107914:	4293      	cmp	r3, r2
 8107916:	d007      	beq.n	8107928 <TIM_Base_SetConfig+0xf8>
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	4a10      	ldr	r2, [pc, #64]	; (810795c <TIM_Base_SetConfig+0x12c>)
 810791c:	4293      	cmp	r3, r2
 810791e:	d003      	beq.n	8107928 <TIM_Base_SetConfig+0xf8>
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	4a0f      	ldr	r2, [pc, #60]	; (8107960 <TIM_Base_SetConfig+0x130>)
 8107924:	4293      	cmp	r3, r2
 8107926:	d103      	bne.n	8107930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107928:	683b      	ldr	r3, [r7, #0]
 810792a:	691a      	ldr	r2, [r3, #16]
 810792c:	687b      	ldr	r3, [r7, #4]
 810792e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	2201      	movs	r2, #1
 8107934:	615a      	str	r2, [r3, #20]
}
 8107936:	bf00      	nop
 8107938:	3714      	adds	r7, #20
 810793a:	46bd      	mov	sp, r7
 810793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107940:	4770      	bx	lr
 8107942:	bf00      	nop
 8107944:	40010000 	.word	0x40010000
 8107948:	40000400 	.word	0x40000400
 810794c:	40000800 	.word	0x40000800
 8107950:	40000c00 	.word	0x40000c00
 8107954:	40010400 	.word	0x40010400
 8107958:	40014000 	.word	0x40014000
 810795c:	40014400 	.word	0x40014400
 8107960:	40014800 	.word	0x40014800

08107964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107964:	b480      	push	{r7}
 8107966:	b087      	sub	sp, #28
 8107968:	af00      	add	r7, sp, #0
 810796a:	6078      	str	r0, [r7, #4]
 810796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810796e:	687b      	ldr	r3, [r7, #4]
 8107970:	6a1b      	ldr	r3, [r3, #32]
 8107972:	f023 0201 	bic.w	r2, r3, #1
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	6a1b      	ldr	r3, [r3, #32]
 810797e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	685b      	ldr	r3, [r3, #4]
 8107984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	699b      	ldr	r3, [r3, #24]
 810798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810798c:	68fb      	ldr	r3, [r7, #12]
 810798e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107998:	68fb      	ldr	r3, [r7, #12]
 810799a:	f023 0303 	bic.w	r3, r3, #3
 810799e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81079a0:	683b      	ldr	r3, [r7, #0]
 81079a2:	681b      	ldr	r3, [r3, #0]
 81079a4:	68fa      	ldr	r2, [r7, #12]
 81079a6:	4313      	orrs	r3, r2
 81079a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81079aa:	697b      	ldr	r3, [r7, #20]
 81079ac:	f023 0302 	bic.w	r3, r3, #2
 81079b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81079b2:	683b      	ldr	r3, [r7, #0]
 81079b4:	689b      	ldr	r3, [r3, #8]
 81079b6:	697a      	ldr	r2, [r7, #20]
 81079b8:	4313      	orrs	r3, r2
 81079ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81079bc:	687b      	ldr	r3, [r7, #4]
 81079be:	4a2c      	ldr	r2, [pc, #176]	; (8107a70 <TIM_OC1_SetConfig+0x10c>)
 81079c0:	4293      	cmp	r3, r2
 81079c2:	d00f      	beq.n	81079e4 <TIM_OC1_SetConfig+0x80>
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	4a2b      	ldr	r2, [pc, #172]	; (8107a74 <TIM_OC1_SetConfig+0x110>)
 81079c8:	4293      	cmp	r3, r2
 81079ca:	d00b      	beq.n	81079e4 <TIM_OC1_SetConfig+0x80>
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	4a2a      	ldr	r2, [pc, #168]	; (8107a78 <TIM_OC1_SetConfig+0x114>)
 81079d0:	4293      	cmp	r3, r2
 81079d2:	d007      	beq.n	81079e4 <TIM_OC1_SetConfig+0x80>
 81079d4:	687b      	ldr	r3, [r7, #4]
 81079d6:	4a29      	ldr	r2, [pc, #164]	; (8107a7c <TIM_OC1_SetConfig+0x118>)
 81079d8:	4293      	cmp	r3, r2
 81079da:	d003      	beq.n	81079e4 <TIM_OC1_SetConfig+0x80>
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	4a28      	ldr	r2, [pc, #160]	; (8107a80 <TIM_OC1_SetConfig+0x11c>)
 81079e0:	4293      	cmp	r3, r2
 81079e2:	d10c      	bne.n	81079fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81079e4:	697b      	ldr	r3, [r7, #20]
 81079e6:	f023 0308 	bic.w	r3, r3, #8
 81079ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81079ec:	683b      	ldr	r3, [r7, #0]
 81079ee:	68db      	ldr	r3, [r3, #12]
 81079f0:	697a      	ldr	r2, [r7, #20]
 81079f2:	4313      	orrs	r3, r2
 81079f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81079f6:	697b      	ldr	r3, [r7, #20]
 81079f8:	f023 0304 	bic.w	r3, r3, #4
 81079fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	4a1b      	ldr	r2, [pc, #108]	; (8107a70 <TIM_OC1_SetConfig+0x10c>)
 8107a02:	4293      	cmp	r3, r2
 8107a04:	d00f      	beq.n	8107a26 <TIM_OC1_SetConfig+0xc2>
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	4a1a      	ldr	r2, [pc, #104]	; (8107a74 <TIM_OC1_SetConfig+0x110>)
 8107a0a:	4293      	cmp	r3, r2
 8107a0c:	d00b      	beq.n	8107a26 <TIM_OC1_SetConfig+0xc2>
 8107a0e:	687b      	ldr	r3, [r7, #4]
 8107a10:	4a19      	ldr	r2, [pc, #100]	; (8107a78 <TIM_OC1_SetConfig+0x114>)
 8107a12:	4293      	cmp	r3, r2
 8107a14:	d007      	beq.n	8107a26 <TIM_OC1_SetConfig+0xc2>
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	4a18      	ldr	r2, [pc, #96]	; (8107a7c <TIM_OC1_SetConfig+0x118>)
 8107a1a:	4293      	cmp	r3, r2
 8107a1c:	d003      	beq.n	8107a26 <TIM_OC1_SetConfig+0xc2>
 8107a1e:	687b      	ldr	r3, [r7, #4]
 8107a20:	4a17      	ldr	r2, [pc, #92]	; (8107a80 <TIM_OC1_SetConfig+0x11c>)
 8107a22:	4293      	cmp	r3, r2
 8107a24:	d111      	bne.n	8107a4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107a26:	693b      	ldr	r3, [r7, #16]
 8107a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107a2e:	693b      	ldr	r3, [r7, #16]
 8107a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107a36:	683b      	ldr	r3, [r7, #0]
 8107a38:	695b      	ldr	r3, [r3, #20]
 8107a3a:	693a      	ldr	r2, [r7, #16]
 8107a3c:	4313      	orrs	r3, r2
 8107a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107a40:	683b      	ldr	r3, [r7, #0]
 8107a42:	699b      	ldr	r3, [r3, #24]
 8107a44:	693a      	ldr	r2, [r7, #16]
 8107a46:	4313      	orrs	r3, r2
 8107a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	693a      	ldr	r2, [r7, #16]
 8107a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107a50:	687b      	ldr	r3, [r7, #4]
 8107a52:	68fa      	ldr	r2, [r7, #12]
 8107a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107a56:	683b      	ldr	r3, [r7, #0]
 8107a58:	685a      	ldr	r2, [r3, #4]
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	697a      	ldr	r2, [r7, #20]
 8107a62:	621a      	str	r2, [r3, #32]
}
 8107a64:	bf00      	nop
 8107a66:	371c      	adds	r7, #28
 8107a68:	46bd      	mov	sp, r7
 8107a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a6e:	4770      	bx	lr
 8107a70:	40010000 	.word	0x40010000
 8107a74:	40010400 	.word	0x40010400
 8107a78:	40014000 	.word	0x40014000
 8107a7c:	40014400 	.word	0x40014400
 8107a80:	40014800 	.word	0x40014800

08107a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107a84:	b480      	push	{r7}
 8107a86:	b087      	sub	sp, #28
 8107a88:	af00      	add	r7, sp, #0
 8107a8a:	6078      	str	r0, [r7, #4]
 8107a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107a8e:	687b      	ldr	r3, [r7, #4]
 8107a90:	6a1b      	ldr	r3, [r3, #32]
 8107a92:	f023 0210 	bic.w	r2, r3, #16
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	6a1b      	ldr	r3, [r3, #32]
 8107a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	685b      	ldr	r3, [r3, #4]
 8107aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	699b      	ldr	r3, [r3, #24]
 8107aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107aac:	68fb      	ldr	r3, [r7, #12]
 8107aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107ab8:	68fb      	ldr	r3, [r7, #12]
 8107aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107ac0:	683b      	ldr	r3, [r7, #0]
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	021b      	lsls	r3, r3, #8
 8107ac6:	68fa      	ldr	r2, [r7, #12]
 8107ac8:	4313      	orrs	r3, r2
 8107aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107acc:	697b      	ldr	r3, [r7, #20]
 8107ace:	f023 0320 	bic.w	r3, r3, #32
 8107ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107ad4:	683b      	ldr	r3, [r7, #0]
 8107ad6:	689b      	ldr	r3, [r3, #8]
 8107ad8:	011b      	lsls	r3, r3, #4
 8107ada:	697a      	ldr	r2, [r7, #20]
 8107adc:	4313      	orrs	r3, r2
 8107ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	4a28      	ldr	r2, [pc, #160]	; (8107b84 <TIM_OC2_SetConfig+0x100>)
 8107ae4:	4293      	cmp	r3, r2
 8107ae6:	d003      	beq.n	8107af0 <TIM_OC2_SetConfig+0x6c>
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	4a27      	ldr	r2, [pc, #156]	; (8107b88 <TIM_OC2_SetConfig+0x104>)
 8107aec:	4293      	cmp	r3, r2
 8107aee:	d10d      	bne.n	8107b0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107af0:	697b      	ldr	r3, [r7, #20]
 8107af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107af8:	683b      	ldr	r3, [r7, #0]
 8107afa:	68db      	ldr	r3, [r3, #12]
 8107afc:	011b      	lsls	r3, r3, #4
 8107afe:	697a      	ldr	r2, [r7, #20]
 8107b00:	4313      	orrs	r3, r2
 8107b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107b04:	697b      	ldr	r3, [r7, #20]
 8107b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	4a1d      	ldr	r2, [pc, #116]	; (8107b84 <TIM_OC2_SetConfig+0x100>)
 8107b10:	4293      	cmp	r3, r2
 8107b12:	d00f      	beq.n	8107b34 <TIM_OC2_SetConfig+0xb0>
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	4a1c      	ldr	r2, [pc, #112]	; (8107b88 <TIM_OC2_SetConfig+0x104>)
 8107b18:	4293      	cmp	r3, r2
 8107b1a:	d00b      	beq.n	8107b34 <TIM_OC2_SetConfig+0xb0>
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	4a1b      	ldr	r2, [pc, #108]	; (8107b8c <TIM_OC2_SetConfig+0x108>)
 8107b20:	4293      	cmp	r3, r2
 8107b22:	d007      	beq.n	8107b34 <TIM_OC2_SetConfig+0xb0>
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	4a1a      	ldr	r2, [pc, #104]	; (8107b90 <TIM_OC2_SetConfig+0x10c>)
 8107b28:	4293      	cmp	r3, r2
 8107b2a:	d003      	beq.n	8107b34 <TIM_OC2_SetConfig+0xb0>
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	4a19      	ldr	r2, [pc, #100]	; (8107b94 <TIM_OC2_SetConfig+0x110>)
 8107b30:	4293      	cmp	r3, r2
 8107b32:	d113      	bne.n	8107b5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107b34:	693b      	ldr	r3, [r7, #16]
 8107b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107b3c:	693b      	ldr	r3, [r7, #16]
 8107b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107b44:	683b      	ldr	r3, [r7, #0]
 8107b46:	695b      	ldr	r3, [r3, #20]
 8107b48:	009b      	lsls	r3, r3, #2
 8107b4a:	693a      	ldr	r2, [r7, #16]
 8107b4c:	4313      	orrs	r3, r2
 8107b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107b50:	683b      	ldr	r3, [r7, #0]
 8107b52:	699b      	ldr	r3, [r3, #24]
 8107b54:	009b      	lsls	r3, r3, #2
 8107b56:	693a      	ldr	r2, [r7, #16]
 8107b58:	4313      	orrs	r3, r2
 8107b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	693a      	ldr	r2, [r7, #16]
 8107b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	68fa      	ldr	r2, [r7, #12]
 8107b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107b68:	683b      	ldr	r3, [r7, #0]
 8107b6a:	685a      	ldr	r2, [r3, #4]
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	697a      	ldr	r2, [r7, #20]
 8107b74:	621a      	str	r2, [r3, #32]
}
 8107b76:	bf00      	nop
 8107b78:	371c      	adds	r7, #28
 8107b7a:	46bd      	mov	sp, r7
 8107b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b80:	4770      	bx	lr
 8107b82:	bf00      	nop
 8107b84:	40010000 	.word	0x40010000
 8107b88:	40010400 	.word	0x40010400
 8107b8c:	40014000 	.word	0x40014000
 8107b90:	40014400 	.word	0x40014400
 8107b94:	40014800 	.word	0x40014800

08107b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107b98:	b480      	push	{r7}
 8107b9a:	b087      	sub	sp, #28
 8107b9c:	af00      	add	r7, sp, #0
 8107b9e:	6078      	str	r0, [r7, #4]
 8107ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	6a1b      	ldr	r3, [r3, #32]
 8107ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107bae:	687b      	ldr	r3, [r7, #4]
 8107bb0:	6a1b      	ldr	r3, [r3, #32]
 8107bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	685b      	ldr	r3, [r3, #4]
 8107bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	69db      	ldr	r3, [r3, #28]
 8107bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107bc0:	68fb      	ldr	r3, [r7, #12]
 8107bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107bcc:	68fb      	ldr	r3, [r7, #12]
 8107bce:	f023 0303 	bic.w	r3, r3, #3
 8107bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107bd4:	683b      	ldr	r3, [r7, #0]
 8107bd6:	681b      	ldr	r3, [r3, #0]
 8107bd8:	68fa      	ldr	r2, [r7, #12]
 8107bda:	4313      	orrs	r3, r2
 8107bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107bde:	697b      	ldr	r3, [r7, #20]
 8107be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107be6:	683b      	ldr	r3, [r7, #0]
 8107be8:	689b      	ldr	r3, [r3, #8]
 8107bea:	021b      	lsls	r3, r3, #8
 8107bec:	697a      	ldr	r2, [r7, #20]
 8107bee:	4313      	orrs	r3, r2
 8107bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	4a27      	ldr	r2, [pc, #156]	; (8107c94 <TIM_OC3_SetConfig+0xfc>)
 8107bf6:	4293      	cmp	r3, r2
 8107bf8:	d003      	beq.n	8107c02 <TIM_OC3_SetConfig+0x6a>
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	4a26      	ldr	r2, [pc, #152]	; (8107c98 <TIM_OC3_SetConfig+0x100>)
 8107bfe:	4293      	cmp	r3, r2
 8107c00:	d10d      	bne.n	8107c1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107c02:	697b      	ldr	r3, [r7, #20]
 8107c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107c0a:	683b      	ldr	r3, [r7, #0]
 8107c0c:	68db      	ldr	r3, [r3, #12]
 8107c0e:	021b      	lsls	r3, r3, #8
 8107c10:	697a      	ldr	r2, [r7, #20]
 8107c12:	4313      	orrs	r3, r2
 8107c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107c16:	697b      	ldr	r3, [r7, #20]
 8107c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	4a1c      	ldr	r2, [pc, #112]	; (8107c94 <TIM_OC3_SetConfig+0xfc>)
 8107c22:	4293      	cmp	r3, r2
 8107c24:	d00f      	beq.n	8107c46 <TIM_OC3_SetConfig+0xae>
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	4a1b      	ldr	r2, [pc, #108]	; (8107c98 <TIM_OC3_SetConfig+0x100>)
 8107c2a:	4293      	cmp	r3, r2
 8107c2c:	d00b      	beq.n	8107c46 <TIM_OC3_SetConfig+0xae>
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	4a1a      	ldr	r2, [pc, #104]	; (8107c9c <TIM_OC3_SetConfig+0x104>)
 8107c32:	4293      	cmp	r3, r2
 8107c34:	d007      	beq.n	8107c46 <TIM_OC3_SetConfig+0xae>
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	4a19      	ldr	r2, [pc, #100]	; (8107ca0 <TIM_OC3_SetConfig+0x108>)
 8107c3a:	4293      	cmp	r3, r2
 8107c3c:	d003      	beq.n	8107c46 <TIM_OC3_SetConfig+0xae>
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	4a18      	ldr	r2, [pc, #96]	; (8107ca4 <TIM_OC3_SetConfig+0x10c>)
 8107c42:	4293      	cmp	r3, r2
 8107c44:	d113      	bne.n	8107c6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107c46:	693b      	ldr	r3, [r7, #16]
 8107c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107c4e:	693b      	ldr	r3, [r7, #16]
 8107c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107c56:	683b      	ldr	r3, [r7, #0]
 8107c58:	695b      	ldr	r3, [r3, #20]
 8107c5a:	011b      	lsls	r3, r3, #4
 8107c5c:	693a      	ldr	r2, [r7, #16]
 8107c5e:	4313      	orrs	r3, r2
 8107c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107c62:	683b      	ldr	r3, [r7, #0]
 8107c64:	699b      	ldr	r3, [r3, #24]
 8107c66:	011b      	lsls	r3, r3, #4
 8107c68:	693a      	ldr	r2, [r7, #16]
 8107c6a:	4313      	orrs	r3, r2
 8107c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107c6e:	687b      	ldr	r3, [r7, #4]
 8107c70:	693a      	ldr	r2, [r7, #16]
 8107c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	68fa      	ldr	r2, [r7, #12]
 8107c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107c7a:	683b      	ldr	r3, [r7, #0]
 8107c7c:	685a      	ldr	r2, [r3, #4]
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	697a      	ldr	r2, [r7, #20]
 8107c86:	621a      	str	r2, [r3, #32]
}
 8107c88:	bf00      	nop
 8107c8a:	371c      	adds	r7, #28
 8107c8c:	46bd      	mov	sp, r7
 8107c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c92:	4770      	bx	lr
 8107c94:	40010000 	.word	0x40010000
 8107c98:	40010400 	.word	0x40010400
 8107c9c:	40014000 	.word	0x40014000
 8107ca0:	40014400 	.word	0x40014400
 8107ca4:	40014800 	.word	0x40014800

08107ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107ca8:	b480      	push	{r7}
 8107caa:	b087      	sub	sp, #28
 8107cac:	af00      	add	r7, sp, #0
 8107cae:	6078      	str	r0, [r7, #4]
 8107cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107cb2:	687b      	ldr	r3, [r7, #4]
 8107cb4:	6a1b      	ldr	r3, [r3, #32]
 8107cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107cbe:	687b      	ldr	r3, [r7, #4]
 8107cc0:	6a1b      	ldr	r3, [r3, #32]
 8107cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	685b      	ldr	r3, [r3, #4]
 8107cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	69db      	ldr	r3, [r3, #28]
 8107cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107cd0:	68fb      	ldr	r3, [r7, #12]
 8107cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107cdc:	68fb      	ldr	r3, [r7, #12]
 8107cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107ce4:	683b      	ldr	r3, [r7, #0]
 8107ce6:	681b      	ldr	r3, [r3, #0]
 8107ce8:	021b      	lsls	r3, r3, #8
 8107cea:	68fa      	ldr	r2, [r7, #12]
 8107cec:	4313      	orrs	r3, r2
 8107cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107cf0:	693b      	ldr	r3, [r7, #16]
 8107cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107cf8:	683b      	ldr	r3, [r7, #0]
 8107cfa:	689b      	ldr	r3, [r3, #8]
 8107cfc:	031b      	lsls	r3, r3, #12
 8107cfe:	693a      	ldr	r2, [r7, #16]
 8107d00:	4313      	orrs	r3, r2
 8107d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	4a18      	ldr	r2, [pc, #96]	; (8107d68 <TIM_OC4_SetConfig+0xc0>)
 8107d08:	4293      	cmp	r3, r2
 8107d0a:	d00f      	beq.n	8107d2c <TIM_OC4_SetConfig+0x84>
 8107d0c:	687b      	ldr	r3, [r7, #4]
 8107d0e:	4a17      	ldr	r2, [pc, #92]	; (8107d6c <TIM_OC4_SetConfig+0xc4>)
 8107d10:	4293      	cmp	r3, r2
 8107d12:	d00b      	beq.n	8107d2c <TIM_OC4_SetConfig+0x84>
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	4a16      	ldr	r2, [pc, #88]	; (8107d70 <TIM_OC4_SetConfig+0xc8>)
 8107d18:	4293      	cmp	r3, r2
 8107d1a:	d007      	beq.n	8107d2c <TIM_OC4_SetConfig+0x84>
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	4a15      	ldr	r2, [pc, #84]	; (8107d74 <TIM_OC4_SetConfig+0xcc>)
 8107d20:	4293      	cmp	r3, r2
 8107d22:	d003      	beq.n	8107d2c <TIM_OC4_SetConfig+0x84>
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	4a14      	ldr	r2, [pc, #80]	; (8107d78 <TIM_OC4_SetConfig+0xd0>)
 8107d28:	4293      	cmp	r3, r2
 8107d2a:	d109      	bne.n	8107d40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107d2c:	697b      	ldr	r3, [r7, #20]
 8107d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107d34:	683b      	ldr	r3, [r7, #0]
 8107d36:	695b      	ldr	r3, [r3, #20]
 8107d38:	019b      	lsls	r3, r3, #6
 8107d3a:	697a      	ldr	r2, [r7, #20]
 8107d3c:	4313      	orrs	r3, r2
 8107d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	697a      	ldr	r2, [r7, #20]
 8107d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	68fa      	ldr	r2, [r7, #12]
 8107d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107d4c:	683b      	ldr	r3, [r7, #0]
 8107d4e:	685a      	ldr	r2, [r3, #4]
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	693a      	ldr	r2, [r7, #16]
 8107d58:	621a      	str	r2, [r3, #32]
}
 8107d5a:	bf00      	nop
 8107d5c:	371c      	adds	r7, #28
 8107d5e:	46bd      	mov	sp, r7
 8107d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d64:	4770      	bx	lr
 8107d66:	bf00      	nop
 8107d68:	40010000 	.word	0x40010000
 8107d6c:	40010400 	.word	0x40010400
 8107d70:	40014000 	.word	0x40014000
 8107d74:	40014400 	.word	0x40014400
 8107d78:	40014800 	.word	0x40014800

08107d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107d7c:	b480      	push	{r7}
 8107d7e:	b087      	sub	sp, #28
 8107d80:	af00      	add	r7, sp, #0
 8107d82:	6078      	str	r0, [r7, #4]
 8107d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	6a1b      	ldr	r3, [r3, #32]
 8107d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107d8e:	687b      	ldr	r3, [r7, #4]
 8107d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	6a1b      	ldr	r3, [r3, #32]
 8107d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d98:	687b      	ldr	r3, [r7, #4]
 8107d9a:	685b      	ldr	r3, [r3, #4]
 8107d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107da4:	68fb      	ldr	r3, [r7, #12]
 8107da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107db0:	683b      	ldr	r3, [r7, #0]
 8107db2:	681b      	ldr	r3, [r3, #0]
 8107db4:	68fa      	ldr	r2, [r7, #12]
 8107db6:	4313      	orrs	r3, r2
 8107db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107dba:	693b      	ldr	r3, [r7, #16]
 8107dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107dc2:	683b      	ldr	r3, [r7, #0]
 8107dc4:	689b      	ldr	r3, [r3, #8]
 8107dc6:	041b      	lsls	r3, r3, #16
 8107dc8:	693a      	ldr	r2, [r7, #16]
 8107dca:	4313      	orrs	r3, r2
 8107dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	4a17      	ldr	r2, [pc, #92]	; (8107e30 <TIM_OC5_SetConfig+0xb4>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d00f      	beq.n	8107df6 <TIM_OC5_SetConfig+0x7a>
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	4a16      	ldr	r2, [pc, #88]	; (8107e34 <TIM_OC5_SetConfig+0xb8>)
 8107dda:	4293      	cmp	r3, r2
 8107ddc:	d00b      	beq.n	8107df6 <TIM_OC5_SetConfig+0x7a>
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	4a15      	ldr	r2, [pc, #84]	; (8107e38 <TIM_OC5_SetConfig+0xbc>)
 8107de2:	4293      	cmp	r3, r2
 8107de4:	d007      	beq.n	8107df6 <TIM_OC5_SetConfig+0x7a>
 8107de6:	687b      	ldr	r3, [r7, #4]
 8107de8:	4a14      	ldr	r2, [pc, #80]	; (8107e3c <TIM_OC5_SetConfig+0xc0>)
 8107dea:	4293      	cmp	r3, r2
 8107dec:	d003      	beq.n	8107df6 <TIM_OC5_SetConfig+0x7a>
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	4a13      	ldr	r2, [pc, #76]	; (8107e40 <TIM_OC5_SetConfig+0xc4>)
 8107df2:	4293      	cmp	r3, r2
 8107df4:	d109      	bne.n	8107e0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107df6:	697b      	ldr	r3, [r7, #20]
 8107df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107dfe:	683b      	ldr	r3, [r7, #0]
 8107e00:	695b      	ldr	r3, [r3, #20]
 8107e02:	021b      	lsls	r3, r3, #8
 8107e04:	697a      	ldr	r2, [r7, #20]
 8107e06:	4313      	orrs	r3, r2
 8107e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	697a      	ldr	r2, [r7, #20]
 8107e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	68fa      	ldr	r2, [r7, #12]
 8107e14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107e16:	683b      	ldr	r3, [r7, #0]
 8107e18:	685a      	ldr	r2, [r3, #4]
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	693a      	ldr	r2, [r7, #16]
 8107e22:	621a      	str	r2, [r3, #32]
}
 8107e24:	bf00      	nop
 8107e26:	371c      	adds	r7, #28
 8107e28:	46bd      	mov	sp, r7
 8107e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e2e:	4770      	bx	lr
 8107e30:	40010000 	.word	0x40010000
 8107e34:	40010400 	.word	0x40010400
 8107e38:	40014000 	.word	0x40014000
 8107e3c:	40014400 	.word	0x40014400
 8107e40:	40014800 	.word	0x40014800

08107e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107e44:	b480      	push	{r7}
 8107e46:	b087      	sub	sp, #28
 8107e48:	af00      	add	r7, sp, #0
 8107e4a:	6078      	str	r0, [r7, #4]
 8107e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	6a1b      	ldr	r3, [r3, #32]
 8107e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	6a1b      	ldr	r3, [r3, #32]
 8107e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e60:	687b      	ldr	r3, [r7, #4]
 8107e62:	685b      	ldr	r3, [r3, #4]
 8107e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107e6c:	68fb      	ldr	r3, [r7, #12]
 8107e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107e78:	683b      	ldr	r3, [r7, #0]
 8107e7a:	681b      	ldr	r3, [r3, #0]
 8107e7c:	021b      	lsls	r3, r3, #8
 8107e7e:	68fa      	ldr	r2, [r7, #12]
 8107e80:	4313      	orrs	r3, r2
 8107e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107e84:	693b      	ldr	r3, [r7, #16]
 8107e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107e8c:	683b      	ldr	r3, [r7, #0]
 8107e8e:	689b      	ldr	r3, [r3, #8]
 8107e90:	051b      	lsls	r3, r3, #20
 8107e92:	693a      	ldr	r2, [r7, #16]
 8107e94:	4313      	orrs	r3, r2
 8107e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	4a18      	ldr	r2, [pc, #96]	; (8107efc <TIM_OC6_SetConfig+0xb8>)
 8107e9c:	4293      	cmp	r3, r2
 8107e9e:	d00f      	beq.n	8107ec0 <TIM_OC6_SetConfig+0x7c>
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	4a17      	ldr	r2, [pc, #92]	; (8107f00 <TIM_OC6_SetConfig+0xbc>)
 8107ea4:	4293      	cmp	r3, r2
 8107ea6:	d00b      	beq.n	8107ec0 <TIM_OC6_SetConfig+0x7c>
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	4a16      	ldr	r2, [pc, #88]	; (8107f04 <TIM_OC6_SetConfig+0xc0>)
 8107eac:	4293      	cmp	r3, r2
 8107eae:	d007      	beq.n	8107ec0 <TIM_OC6_SetConfig+0x7c>
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	4a15      	ldr	r2, [pc, #84]	; (8107f08 <TIM_OC6_SetConfig+0xc4>)
 8107eb4:	4293      	cmp	r3, r2
 8107eb6:	d003      	beq.n	8107ec0 <TIM_OC6_SetConfig+0x7c>
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	4a14      	ldr	r2, [pc, #80]	; (8107f0c <TIM_OC6_SetConfig+0xc8>)
 8107ebc:	4293      	cmp	r3, r2
 8107ebe:	d109      	bne.n	8107ed4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107ec0:	697b      	ldr	r3, [r7, #20]
 8107ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107ec8:	683b      	ldr	r3, [r7, #0]
 8107eca:	695b      	ldr	r3, [r3, #20]
 8107ecc:	029b      	lsls	r3, r3, #10
 8107ece:	697a      	ldr	r2, [r7, #20]
 8107ed0:	4313      	orrs	r3, r2
 8107ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	697a      	ldr	r2, [r7, #20]
 8107ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107eda:	687b      	ldr	r3, [r7, #4]
 8107edc:	68fa      	ldr	r2, [r7, #12]
 8107ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107ee0:	683b      	ldr	r3, [r7, #0]
 8107ee2:	685a      	ldr	r2, [r3, #4]
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	693a      	ldr	r2, [r7, #16]
 8107eec:	621a      	str	r2, [r3, #32]
}
 8107eee:	bf00      	nop
 8107ef0:	371c      	adds	r7, #28
 8107ef2:	46bd      	mov	sp, r7
 8107ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ef8:	4770      	bx	lr
 8107efa:	bf00      	nop
 8107efc:	40010000 	.word	0x40010000
 8107f00:	40010400 	.word	0x40010400
 8107f04:	40014000 	.word	0x40014000
 8107f08:	40014400 	.word	0x40014400
 8107f0c:	40014800 	.word	0x40014800

08107f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8107f10:	b480      	push	{r7}
 8107f12:	b087      	sub	sp, #28
 8107f14:	af00      	add	r7, sp, #0
 8107f16:	60f8      	str	r0, [r7, #12]
 8107f18:	60b9      	str	r1, [r7, #8]
 8107f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8107f1c:	68fb      	ldr	r3, [r7, #12]
 8107f1e:	6a1b      	ldr	r3, [r3, #32]
 8107f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107f22:	68fb      	ldr	r3, [r7, #12]
 8107f24:	6a1b      	ldr	r3, [r3, #32]
 8107f26:	f023 0201 	bic.w	r2, r3, #1
 8107f2a:	68fb      	ldr	r3, [r7, #12]
 8107f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107f2e:	68fb      	ldr	r3, [r7, #12]
 8107f30:	699b      	ldr	r3, [r3, #24]
 8107f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107f34:	693b      	ldr	r3, [r7, #16]
 8107f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	011b      	lsls	r3, r3, #4
 8107f40:	693a      	ldr	r2, [r7, #16]
 8107f42:	4313      	orrs	r3, r2
 8107f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8107f46:	697b      	ldr	r3, [r7, #20]
 8107f48:	f023 030a 	bic.w	r3, r3, #10
 8107f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8107f4e:	697a      	ldr	r2, [r7, #20]
 8107f50:	68bb      	ldr	r3, [r7, #8]
 8107f52:	4313      	orrs	r3, r2
 8107f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8107f56:	68fb      	ldr	r3, [r7, #12]
 8107f58:	693a      	ldr	r2, [r7, #16]
 8107f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107f5c:	68fb      	ldr	r3, [r7, #12]
 8107f5e:	697a      	ldr	r2, [r7, #20]
 8107f60:	621a      	str	r2, [r3, #32]
}
 8107f62:	bf00      	nop
 8107f64:	371c      	adds	r7, #28
 8107f66:	46bd      	mov	sp, r7
 8107f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f6c:	4770      	bx	lr

08107f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8107f6e:	b480      	push	{r7}
 8107f70:	b087      	sub	sp, #28
 8107f72:	af00      	add	r7, sp, #0
 8107f74:	60f8      	str	r0, [r7, #12]
 8107f76:	60b9      	str	r1, [r7, #8]
 8107f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107f7a:	68fb      	ldr	r3, [r7, #12]
 8107f7c:	6a1b      	ldr	r3, [r3, #32]
 8107f7e:	f023 0210 	bic.w	r2, r3, #16
 8107f82:	68fb      	ldr	r3, [r7, #12]
 8107f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107f86:	68fb      	ldr	r3, [r7, #12]
 8107f88:	699b      	ldr	r3, [r3, #24]
 8107f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107f8c:	68fb      	ldr	r3, [r7, #12]
 8107f8e:	6a1b      	ldr	r3, [r3, #32]
 8107f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107f92:	697b      	ldr	r3, [r7, #20]
 8107f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	031b      	lsls	r3, r3, #12
 8107f9e:	697a      	ldr	r2, [r7, #20]
 8107fa0:	4313      	orrs	r3, r2
 8107fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107fa4:	693b      	ldr	r3, [r7, #16]
 8107fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8107fac:	68bb      	ldr	r3, [r7, #8]
 8107fae:	011b      	lsls	r3, r3, #4
 8107fb0:	693a      	ldr	r2, [r7, #16]
 8107fb2:	4313      	orrs	r3, r2
 8107fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107fb6:	68fb      	ldr	r3, [r7, #12]
 8107fb8:	697a      	ldr	r2, [r7, #20]
 8107fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107fbc:	68fb      	ldr	r3, [r7, #12]
 8107fbe:	693a      	ldr	r2, [r7, #16]
 8107fc0:	621a      	str	r2, [r3, #32]
}
 8107fc2:	bf00      	nop
 8107fc4:	371c      	adds	r7, #28
 8107fc6:	46bd      	mov	sp, r7
 8107fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fcc:	4770      	bx	lr

08107fce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8107fce:	b480      	push	{r7}
 8107fd0:	b085      	sub	sp, #20
 8107fd2:	af00      	add	r7, sp, #0
 8107fd4:	6078      	str	r0, [r7, #4]
 8107fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	689b      	ldr	r3, [r3, #8]
 8107fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107fde:	68fb      	ldr	r3, [r7, #12]
 8107fe0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8107fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8107fea:	683a      	ldr	r2, [r7, #0]
 8107fec:	68fb      	ldr	r3, [r7, #12]
 8107fee:	4313      	orrs	r3, r2
 8107ff0:	f043 0307 	orr.w	r3, r3, #7
 8107ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	68fa      	ldr	r2, [r7, #12]
 8107ffa:	609a      	str	r2, [r3, #8]
}
 8107ffc:	bf00      	nop
 8107ffe:	3714      	adds	r7, #20
 8108000:	46bd      	mov	sp, r7
 8108002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108006:	4770      	bx	lr

08108008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8108008:	b480      	push	{r7}
 810800a:	b087      	sub	sp, #28
 810800c:	af00      	add	r7, sp, #0
 810800e:	60f8      	str	r0, [r7, #12]
 8108010:	60b9      	str	r1, [r7, #8]
 8108012:	607a      	str	r2, [r7, #4]
 8108014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8108016:	68fb      	ldr	r3, [r7, #12]
 8108018:	689b      	ldr	r3, [r3, #8]
 810801a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810801c:	697b      	ldr	r3, [r7, #20]
 810801e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8108024:	683b      	ldr	r3, [r7, #0]
 8108026:	021a      	lsls	r2, r3, #8
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	431a      	orrs	r2, r3
 810802c:	68bb      	ldr	r3, [r7, #8]
 810802e:	4313      	orrs	r3, r2
 8108030:	697a      	ldr	r2, [r7, #20]
 8108032:	4313      	orrs	r3, r2
 8108034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108036:	68fb      	ldr	r3, [r7, #12]
 8108038:	697a      	ldr	r2, [r7, #20]
 810803a:	609a      	str	r2, [r3, #8]
}
 810803c:	bf00      	nop
 810803e:	371c      	adds	r7, #28
 8108040:	46bd      	mov	sp, r7
 8108042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108046:	4770      	bx	lr

08108048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8108048:	b480      	push	{r7}
 810804a:	b087      	sub	sp, #28
 810804c:	af00      	add	r7, sp, #0
 810804e:	60f8      	str	r0, [r7, #12]
 8108050:	60b9      	str	r1, [r7, #8]
 8108052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8108054:	68bb      	ldr	r3, [r7, #8]
 8108056:	f003 031f 	and.w	r3, r3, #31
 810805a:	2201      	movs	r2, #1
 810805c:	fa02 f303 	lsl.w	r3, r2, r3
 8108060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8108062:	68fb      	ldr	r3, [r7, #12]
 8108064:	6a1a      	ldr	r2, [r3, #32]
 8108066:	697b      	ldr	r3, [r7, #20]
 8108068:	43db      	mvns	r3, r3
 810806a:	401a      	ands	r2, r3
 810806c:	68fb      	ldr	r3, [r7, #12]
 810806e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108070:	68fb      	ldr	r3, [r7, #12]
 8108072:	6a1a      	ldr	r2, [r3, #32]
 8108074:	68bb      	ldr	r3, [r7, #8]
 8108076:	f003 031f 	and.w	r3, r3, #31
 810807a:	6879      	ldr	r1, [r7, #4]
 810807c:	fa01 f303 	lsl.w	r3, r1, r3
 8108080:	431a      	orrs	r2, r3
 8108082:	68fb      	ldr	r3, [r7, #12]
 8108084:	621a      	str	r2, [r3, #32]
}
 8108086:	bf00      	nop
 8108088:	371c      	adds	r7, #28
 810808a:	46bd      	mov	sp, r7
 810808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108090:	4770      	bx	lr
	...

08108094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108094:	b480      	push	{r7}
 8108096:	b085      	sub	sp, #20
 8108098:	af00      	add	r7, sp, #0
 810809a:	6078      	str	r0, [r7, #4]
 810809c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81080a4:	2b01      	cmp	r3, #1
 81080a6:	d101      	bne.n	81080ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81080a8:	2302      	movs	r3, #2
 81080aa:	e06d      	b.n	8108188 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81080ac:	687b      	ldr	r3, [r7, #4]
 81080ae:	2201      	movs	r2, #1
 81080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	2202      	movs	r2, #2
 81080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	681b      	ldr	r3, [r3, #0]
 81080c0:	685b      	ldr	r3, [r3, #4]
 81080c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	681b      	ldr	r3, [r3, #0]
 81080c8:	689b      	ldr	r3, [r3, #8]
 81080ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	681b      	ldr	r3, [r3, #0]
 81080d0:	4a30      	ldr	r2, [pc, #192]	; (8108194 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81080d2:	4293      	cmp	r3, r2
 81080d4:	d004      	beq.n	81080e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	681b      	ldr	r3, [r3, #0]
 81080da:	4a2f      	ldr	r2, [pc, #188]	; (8108198 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81080dc:	4293      	cmp	r3, r2
 81080de:	d108      	bne.n	81080f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81080e0:	68fb      	ldr	r3, [r7, #12]
 81080e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81080e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81080e8:	683b      	ldr	r3, [r7, #0]
 81080ea:	685b      	ldr	r3, [r3, #4]
 81080ec:	68fa      	ldr	r2, [r7, #12]
 81080ee:	4313      	orrs	r3, r2
 81080f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81080f2:	68fb      	ldr	r3, [r7, #12]
 81080f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81080f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81080fa:	683b      	ldr	r3, [r7, #0]
 81080fc:	681b      	ldr	r3, [r3, #0]
 81080fe:	68fa      	ldr	r2, [r7, #12]
 8108100:	4313      	orrs	r3, r2
 8108102:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108104:	687b      	ldr	r3, [r7, #4]
 8108106:	681b      	ldr	r3, [r3, #0]
 8108108:	68fa      	ldr	r2, [r7, #12]
 810810a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	681b      	ldr	r3, [r3, #0]
 8108110:	4a20      	ldr	r2, [pc, #128]	; (8108194 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108112:	4293      	cmp	r3, r2
 8108114:	d022      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	681b      	ldr	r3, [r3, #0]
 810811a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810811e:	d01d      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	681b      	ldr	r3, [r3, #0]
 8108124:	4a1d      	ldr	r2, [pc, #116]	; (810819c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108126:	4293      	cmp	r3, r2
 8108128:	d018      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	681b      	ldr	r3, [r3, #0]
 810812e:	4a1c      	ldr	r2, [pc, #112]	; (81081a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108130:	4293      	cmp	r3, r2
 8108132:	d013      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108134:	687b      	ldr	r3, [r7, #4]
 8108136:	681b      	ldr	r3, [r3, #0]
 8108138:	4a1a      	ldr	r2, [pc, #104]	; (81081a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810813a:	4293      	cmp	r3, r2
 810813c:	d00e      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	4a15      	ldr	r2, [pc, #84]	; (8108198 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108144:	4293      	cmp	r3, r2
 8108146:	d009      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108148:	687b      	ldr	r3, [r7, #4]
 810814a:	681b      	ldr	r3, [r3, #0]
 810814c:	4a16      	ldr	r2, [pc, #88]	; (81081a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810814e:	4293      	cmp	r3, r2
 8108150:	d004      	beq.n	810815c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108152:	687b      	ldr	r3, [r7, #4]
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	4a15      	ldr	r2, [pc, #84]	; (81081ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108158:	4293      	cmp	r3, r2
 810815a:	d10c      	bne.n	8108176 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810815c:	68bb      	ldr	r3, [r7, #8]
 810815e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108162:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108164:	683b      	ldr	r3, [r7, #0]
 8108166:	689b      	ldr	r3, [r3, #8]
 8108168:	68ba      	ldr	r2, [r7, #8]
 810816a:	4313      	orrs	r3, r2
 810816c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	681b      	ldr	r3, [r3, #0]
 8108172:	68ba      	ldr	r2, [r7, #8]
 8108174:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	2201      	movs	r2, #1
 810817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	2200      	movs	r2, #0
 8108182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8108186:	2300      	movs	r3, #0
}
 8108188:	4618      	mov	r0, r3
 810818a:	3714      	adds	r7, #20
 810818c:	46bd      	mov	sp, r7
 810818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108192:	4770      	bx	lr
 8108194:	40010000 	.word	0x40010000
 8108198:	40010400 	.word	0x40010400
 810819c:	40000400 	.word	0x40000400
 81081a0:	40000800 	.word	0x40000800
 81081a4:	40000c00 	.word	0x40000c00
 81081a8:	40001800 	.word	0x40001800
 81081ac:	40014000 	.word	0x40014000

081081b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81081b0:	b480      	push	{r7}
 81081b2:	b085      	sub	sp, #20
 81081b4:	af00      	add	r7, sp, #0
 81081b6:	6078      	str	r0, [r7, #4]
 81081b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81081ba:	2300      	movs	r3, #0
 81081bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81081c4:	2b01      	cmp	r3, #1
 81081c6:	d101      	bne.n	81081cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81081c8:	2302      	movs	r3, #2
 81081ca:	e065      	b.n	8108298 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	2201      	movs	r2, #1
 81081d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81081d4:	68fb      	ldr	r3, [r7, #12]
 81081d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81081da:	683b      	ldr	r3, [r7, #0]
 81081dc:	68db      	ldr	r3, [r3, #12]
 81081de:	4313      	orrs	r3, r2
 81081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81081e2:	68fb      	ldr	r3, [r7, #12]
 81081e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81081e8:	683b      	ldr	r3, [r7, #0]
 81081ea:	689b      	ldr	r3, [r3, #8]
 81081ec:	4313      	orrs	r3, r2
 81081ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81081f0:	68fb      	ldr	r3, [r7, #12]
 81081f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81081f6:	683b      	ldr	r3, [r7, #0]
 81081f8:	685b      	ldr	r3, [r3, #4]
 81081fa:	4313      	orrs	r3, r2
 81081fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81081fe:	68fb      	ldr	r3, [r7, #12]
 8108200:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8108204:	683b      	ldr	r3, [r7, #0]
 8108206:	681b      	ldr	r3, [r3, #0]
 8108208:	4313      	orrs	r3, r2
 810820a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810820c:	68fb      	ldr	r3, [r7, #12]
 810820e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108212:	683b      	ldr	r3, [r7, #0]
 8108214:	691b      	ldr	r3, [r3, #16]
 8108216:	4313      	orrs	r3, r2
 8108218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810821a:	68fb      	ldr	r3, [r7, #12]
 810821c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8108220:	683b      	ldr	r3, [r7, #0]
 8108222:	695b      	ldr	r3, [r3, #20]
 8108224:	4313      	orrs	r3, r2
 8108226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810822e:	683b      	ldr	r3, [r7, #0]
 8108230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108232:	4313      	orrs	r3, r2
 8108234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8108236:	68fb      	ldr	r3, [r7, #12]
 8108238:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810823c:	683b      	ldr	r3, [r7, #0]
 810823e:	699b      	ldr	r3, [r3, #24]
 8108240:	041b      	lsls	r3, r3, #16
 8108242:	4313      	orrs	r3, r2
 8108244:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	4a16      	ldr	r2, [pc, #88]	; (81082a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810824c:	4293      	cmp	r3, r2
 810824e:	d004      	beq.n	810825a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	681b      	ldr	r3, [r3, #0]
 8108254:	4a14      	ldr	r2, [pc, #80]	; (81082a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8108256:	4293      	cmp	r3, r2
 8108258:	d115      	bne.n	8108286 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810825a:	68fb      	ldr	r3, [r7, #12]
 810825c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8108260:	683b      	ldr	r3, [r7, #0]
 8108262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108264:	051b      	lsls	r3, r3, #20
 8108266:	4313      	orrs	r3, r2
 8108268:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810826a:	68fb      	ldr	r3, [r7, #12]
 810826c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8108270:	683b      	ldr	r3, [r7, #0]
 8108272:	69db      	ldr	r3, [r3, #28]
 8108274:	4313      	orrs	r3, r2
 8108276:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8108278:	68fb      	ldr	r3, [r7, #12]
 810827a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810827e:	683b      	ldr	r3, [r7, #0]
 8108280:	6a1b      	ldr	r3, [r3, #32]
 8108282:	4313      	orrs	r3, r2
 8108284:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	681b      	ldr	r3, [r3, #0]
 810828a:	68fa      	ldr	r2, [r7, #12]
 810828c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810828e:	687b      	ldr	r3, [r7, #4]
 8108290:	2200      	movs	r2, #0
 8108292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8108296:	2300      	movs	r3, #0
}
 8108298:	4618      	mov	r0, r3
 810829a:	3714      	adds	r7, #20
 810829c:	46bd      	mov	sp, r7
 810829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082a2:	4770      	bx	lr
 81082a4:	40010000 	.word	0x40010000
 81082a8:	40010400 	.word	0x40010400

081082ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81082ac:	b580      	push	{r7, lr}
 81082ae:	b082      	sub	sp, #8
 81082b0:	af00      	add	r7, sp, #0
 81082b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81082b4:	687b      	ldr	r3, [r7, #4]
 81082b6:	2b00      	cmp	r3, #0
 81082b8:	d101      	bne.n	81082be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81082ba:	2301      	movs	r3, #1
 81082bc:	e042      	b.n	8108344 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81082be:	687b      	ldr	r3, [r7, #4]
 81082c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81082c4:	2b00      	cmp	r3, #0
 81082c6:	d106      	bne.n	81082d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	2200      	movs	r2, #0
 81082cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81082d0:	6878      	ldr	r0, [r7, #4]
 81082d2:	f7f9 fec1 	bl	8102058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	2224      	movs	r2, #36	; 0x24
 81082da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	681a      	ldr	r2, [r3, #0]
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	f022 0201 	bic.w	r2, r2, #1
 81082ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81082ee:	6878      	ldr	r0, [r7, #4]
 81082f0:	f000 f8c2 	bl	8108478 <UART_SetConfig>
 81082f4:	4603      	mov	r3, r0
 81082f6:	2b01      	cmp	r3, #1
 81082f8:	d101      	bne.n	81082fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81082fa:	2301      	movs	r3, #1
 81082fc:	e022      	b.n	8108344 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108302:	2b00      	cmp	r3, #0
 8108304:	d002      	beq.n	810830c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108306:	6878      	ldr	r0, [r7, #4]
 8108308:	f000 fe1e 	bl	8108f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	685a      	ldr	r2, [r3, #4]
 8108312:	687b      	ldr	r3, [r7, #4]
 8108314:	681b      	ldr	r3, [r3, #0]
 8108316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810831a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	689a      	ldr	r2, [r3, #8]
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	681b      	ldr	r3, [r3, #0]
 8108326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810832a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	681b      	ldr	r3, [r3, #0]
 8108330:	681a      	ldr	r2, [r3, #0]
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	681b      	ldr	r3, [r3, #0]
 8108336:	f042 0201 	orr.w	r2, r2, #1
 810833a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810833c:	6878      	ldr	r0, [r7, #4]
 810833e:	f000 fea5 	bl	810908c <UART_CheckIdleState>
 8108342:	4603      	mov	r3, r0
}
 8108344:	4618      	mov	r0, r3
 8108346:	3708      	adds	r7, #8
 8108348:	46bd      	mov	sp, r7
 810834a:	bd80      	pop	{r7, pc}

0810834c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810834c:	b580      	push	{r7, lr}
 810834e:	b08a      	sub	sp, #40	; 0x28
 8108350:	af02      	add	r7, sp, #8
 8108352:	60f8      	str	r0, [r7, #12]
 8108354:	60b9      	str	r1, [r7, #8]
 8108356:	603b      	str	r3, [r7, #0]
 8108358:	4613      	mov	r3, r2
 810835a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810835c:	68fb      	ldr	r3, [r7, #12]
 810835e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108362:	2b20      	cmp	r3, #32
 8108364:	f040 8083 	bne.w	810846e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8108368:	68bb      	ldr	r3, [r7, #8]
 810836a:	2b00      	cmp	r3, #0
 810836c:	d002      	beq.n	8108374 <HAL_UART_Transmit+0x28>
 810836e:	88fb      	ldrh	r3, [r7, #6]
 8108370:	2b00      	cmp	r3, #0
 8108372:	d101      	bne.n	8108378 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8108374:	2301      	movs	r3, #1
 8108376:	e07b      	b.n	8108470 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8108378:	68fb      	ldr	r3, [r7, #12]
 810837a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810837e:	2b01      	cmp	r3, #1
 8108380:	d101      	bne.n	8108386 <HAL_UART_Transmit+0x3a>
 8108382:	2302      	movs	r3, #2
 8108384:	e074      	b.n	8108470 <HAL_UART_Transmit+0x124>
 8108386:	68fb      	ldr	r3, [r7, #12]
 8108388:	2201      	movs	r2, #1
 810838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810838e:	68fb      	ldr	r3, [r7, #12]
 8108390:	2200      	movs	r2, #0
 8108392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	2221      	movs	r2, #33	; 0x21
 810839a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810839e:	f7fa f913 	bl	81025c8 <HAL_GetTick>
 81083a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81083a4:	68fb      	ldr	r3, [r7, #12]
 81083a6:	88fa      	ldrh	r2, [r7, #6]
 81083a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81083ac:	68fb      	ldr	r3, [r7, #12]
 81083ae:	88fa      	ldrh	r2, [r7, #6]
 81083b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81083b4:	68fb      	ldr	r3, [r7, #12]
 81083b6:	689b      	ldr	r3, [r3, #8]
 81083b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81083bc:	d108      	bne.n	81083d0 <HAL_UART_Transmit+0x84>
 81083be:	68fb      	ldr	r3, [r7, #12]
 81083c0:	691b      	ldr	r3, [r3, #16]
 81083c2:	2b00      	cmp	r3, #0
 81083c4:	d104      	bne.n	81083d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81083c6:	2300      	movs	r3, #0
 81083c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81083ca:	68bb      	ldr	r3, [r7, #8]
 81083cc:	61bb      	str	r3, [r7, #24]
 81083ce:	e003      	b.n	81083d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81083d0:	68bb      	ldr	r3, [r7, #8]
 81083d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81083d4:	2300      	movs	r3, #0
 81083d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81083d8:	68fb      	ldr	r3, [r7, #12]
 81083da:	2200      	movs	r2, #0
 81083dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81083e0:	e02c      	b.n	810843c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81083e2:	683b      	ldr	r3, [r7, #0]
 81083e4:	9300      	str	r3, [sp, #0]
 81083e6:	697b      	ldr	r3, [r7, #20]
 81083e8:	2200      	movs	r2, #0
 81083ea:	2180      	movs	r1, #128	; 0x80
 81083ec:	68f8      	ldr	r0, [r7, #12]
 81083ee:	f000 fe98 	bl	8109122 <UART_WaitOnFlagUntilTimeout>
 81083f2:	4603      	mov	r3, r0
 81083f4:	2b00      	cmp	r3, #0
 81083f6:	d001      	beq.n	81083fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81083f8:	2303      	movs	r3, #3
 81083fa:	e039      	b.n	8108470 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81083fc:	69fb      	ldr	r3, [r7, #28]
 81083fe:	2b00      	cmp	r3, #0
 8108400:	d10b      	bne.n	810841a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108402:	69bb      	ldr	r3, [r7, #24]
 8108404:	881b      	ldrh	r3, [r3, #0]
 8108406:	461a      	mov	r2, r3
 8108408:	68fb      	ldr	r3, [r7, #12]
 810840a:	681b      	ldr	r3, [r3, #0]
 810840c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8108412:	69bb      	ldr	r3, [r7, #24]
 8108414:	3302      	adds	r3, #2
 8108416:	61bb      	str	r3, [r7, #24]
 8108418:	e007      	b.n	810842a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810841a:	69fb      	ldr	r3, [r7, #28]
 810841c:	781a      	ldrb	r2, [r3, #0]
 810841e:	68fb      	ldr	r3, [r7, #12]
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8108424:	69fb      	ldr	r3, [r7, #28]
 8108426:	3301      	adds	r3, #1
 8108428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810842a:	68fb      	ldr	r3, [r7, #12]
 810842c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108430:	b29b      	uxth	r3, r3
 8108432:	3b01      	subs	r3, #1
 8108434:	b29a      	uxth	r2, r3
 8108436:	68fb      	ldr	r3, [r7, #12]
 8108438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810843c:	68fb      	ldr	r3, [r7, #12]
 810843e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108442:	b29b      	uxth	r3, r3
 8108444:	2b00      	cmp	r3, #0
 8108446:	d1cc      	bne.n	81083e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108448:	683b      	ldr	r3, [r7, #0]
 810844a:	9300      	str	r3, [sp, #0]
 810844c:	697b      	ldr	r3, [r7, #20]
 810844e:	2200      	movs	r2, #0
 8108450:	2140      	movs	r1, #64	; 0x40
 8108452:	68f8      	ldr	r0, [r7, #12]
 8108454:	f000 fe65 	bl	8109122 <UART_WaitOnFlagUntilTimeout>
 8108458:	4603      	mov	r3, r0
 810845a:	2b00      	cmp	r3, #0
 810845c:	d001      	beq.n	8108462 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810845e:	2303      	movs	r3, #3
 8108460:	e006      	b.n	8108470 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108462:	68fb      	ldr	r3, [r7, #12]
 8108464:	2220      	movs	r2, #32
 8108466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810846a:	2300      	movs	r3, #0
 810846c:	e000      	b.n	8108470 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810846e:	2302      	movs	r3, #2
  }
}
 8108470:	4618      	mov	r0, r3
 8108472:	3720      	adds	r7, #32
 8108474:	46bd      	mov	sp, r7
 8108476:	bd80      	pop	{r7, pc}

08108478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810847c:	b092      	sub	sp, #72	; 0x48
 810847e:	af00      	add	r7, sp, #0
 8108480:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108482:	2300      	movs	r3, #0
 8108484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108488:	697b      	ldr	r3, [r7, #20]
 810848a:	689a      	ldr	r2, [r3, #8]
 810848c:	697b      	ldr	r3, [r7, #20]
 810848e:	691b      	ldr	r3, [r3, #16]
 8108490:	431a      	orrs	r2, r3
 8108492:	697b      	ldr	r3, [r7, #20]
 8108494:	695b      	ldr	r3, [r3, #20]
 8108496:	431a      	orrs	r2, r3
 8108498:	697b      	ldr	r3, [r7, #20]
 810849a:	69db      	ldr	r3, [r3, #28]
 810849c:	4313      	orrs	r3, r2
 810849e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81084a0:	697b      	ldr	r3, [r7, #20]
 81084a2:	681b      	ldr	r3, [r3, #0]
 81084a4:	681a      	ldr	r2, [r3, #0]
 81084a6:	4bbd      	ldr	r3, [pc, #756]	; (810879c <UART_SetConfig+0x324>)
 81084a8:	4013      	ands	r3, r2
 81084aa:	697a      	ldr	r2, [r7, #20]
 81084ac:	6812      	ldr	r2, [r2, #0]
 81084ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81084b0:	430b      	orrs	r3, r1
 81084b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81084b4:	697b      	ldr	r3, [r7, #20]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	685b      	ldr	r3, [r3, #4]
 81084ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81084be:	697b      	ldr	r3, [r7, #20]
 81084c0:	68da      	ldr	r2, [r3, #12]
 81084c2:	697b      	ldr	r3, [r7, #20]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	430a      	orrs	r2, r1
 81084c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81084ca:	697b      	ldr	r3, [r7, #20]
 81084cc:	699b      	ldr	r3, [r3, #24]
 81084ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81084d0:	697b      	ldr	r3, [r7, #20]
 81084d2:	681b      	ldr	r3, [r3, #0]
 81084d4:	4ab2      	ldr	r2, [pc, #712]	; (81087a0 <UART_SetConfig+0x328>)
 81084d6:	4293      	cmp	r3, r2
 81084d8:	d004      	beq.n	81084e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81084da:	697b      	ldr	r3, [r7, #20]
 81084dc:	6a1b      	ldr	r3, [r3, #32]
 81084de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81084e0:	4313      	orrs	r3, r2
 81084e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81084e4:	697b      	ldr	r3, [r7, #20]
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	689b      	ldr	r3, [r3, #8]
 81084ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81084ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81084f2:	697a      	ldr	r2, [r7, #20]
 81084f4:	6812      	ldr	r2, [r2, #0]
 81084f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81084f8:	430b      	orrs	r3, r1
 81084fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81084fc:	697b      	ldr	r3, [r7, #20]
 81084fe:	681b      	ldr	r3, [r3, #0]
 8108500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108502:	f023 010f 	bic.w	r1, r3, #15
 8108506:	697b      	ldr	r3, [r7, #20]
 8108508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810850a:	697b      	ldr	r3, [r7, #20]
 810850c:	681b      	ldr	r3, [r3, #0]
 810850e:	430a      	orrs	r2, r1
 8108510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108512:	697b      	ldr	r3, [r7, #20]
 8108514:	681b      	ldr	r3, [r3, #0]
 8108516:	4aa3      	ldr	r2, [pc, #652]	; (81087a4 <UART_SetConfig+0x32c>)
 8108518:	4293      	cmp	r3, r2
 810851a:	d177      	bne.n	810860c <UART_SetConfig+0x194>
 810851c:	4ba2      	ldr	r3, [pc, #648]	; (81087a8 <UART_SetConfig+0x330>)
 810851e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108524:	2b28      	cmp	r3, #40	; 0x28
 8108526:	d86d      	bhi.n	8108604 <UART_SetConfig+0x18c>
 8108528:	a201      	add	r2, pc, #4	; (adr r2, 8108530 <UART_SetConfig+0xb8>)
 810852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810852e:	bf00      	nop
 8108530:	081085d5 	.word	0x081085d5
 8108534:	08108605 	.word	0x08108605
 8108538:	08108605 	.word	0x08108605
 810853c:	08108605 	.word	0x08108605
 8108540:	08108605 	.word	0x08108605
 8108544:	08108605 	.word	0x08108605
 8108548:	08108605 	.word	0x08108605
 810854c:	08108605 	.word	0x08108605
 8108550:	081085dd 	.word	0x081085dd
 8108554:	08108605 	.word	0x08108605
 8108558:	08108605 	.word	0x08108605
 810855c:	08108605 	.word	0x08108605
 8108560:	08108605 	.word	0x08108605
 8108564:	08108605 	.word	0x08108605
 8108568:	08108605 	.word	0x08108605
 810856c:	08108605 	.word	0x08108605
 8108570:	081085e5 	.word	0x081085e5
 8108574:	08108605 	.word	0x08108605
 8108578:	08108605 	.word	0x08108605
 810857c:	08108605 	.word	0x08108605
 8108580:	08108605 	.word	0x08108605
 8108584:	08108605 	.word	0x08108605
 8108588:	08108605 	.word	0x08108605
 810858c:	08108605 	.word	0x08108605
 8108590:	081085ed 	.word	0x081085ed
 8108594:	08108605 	.word	0x08108605
 8108598:	08108605 	.word	0x08108605
 810859c:	08108605 	.word	0x08108605
 81085a0:	08108605 	.word	0x08108605
 81085a4:	08108605 	.word	0x08108605
 81085a8:	08108605 	.word	0x08108605
 81085ac:	08108605 	.word	0x08108605
 81085b0:	081085f5 	.word	0x081085f5
 81085b4:	08108605 	.word	0x08108605
 81085b8:	08108605 	.word	0x08108605
 81085bc:	08108605 	.word	0x08108605
 81085c0:	08108605 	.word	0x08108605
 81085c4:	08108605 	.word	0x08108605
 81085c8:	08108605 	.word	0x08108605
 81085cc:	08108605 	.word	0x08108605
 81085d0:	081085fd 	.word	0x081085fd
 81085d4:	2301      	movs	r3, #1
 81085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085da:	e220      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81085dc:	2304      	movs	r3, #4
 81085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085e2:	e21c      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81085e4:	2308      	movs	r3, #8
 81085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ea:	e218      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81085ec:	2310      	movs	r3, #16
 81085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085f2:	e214      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81085f4:	2320      	movs	r3, #32
 81085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085fa:	e210      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81085fc:	2340      	movs	r3, #64	; 0x40
 81085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108602:	e20c      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108604:	2380      	movs	r3, #128	; 0x80
 8108606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810860a:	e208      	b.n	8108a1e <UART_SetConfig+0x5a6>
 810860c:	697b      	ldr	r3, [r7, #20]
 810860e:	681b      	ldr	r3, [r3, #0]
 8108610:	4a66      	ldr	r2, [pc, #408]	; (81087ac <UART_SetConfig+0x334>)
 8108612:	4293      	cmp	r3, r2
 8108614:	d130      	bne.n	8108678 <UART_SetConfig+0x200>
 8108616:	4b64      	ldr	r3, [pc, #400]	; (81087a8 <UART_SetConfig+0x330>)
 8108618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810861a:	f003 0307 	and.w	r3, r3, #7
 810861e:	2b05      	cmp	r3, #5
 8108620:	d826      	bhi.n	8108670 <UART_SetConfig+0x1f8>
 8108622:	a201      	add	r2, pc, #4	; (adr r2, 8108628 <UART_SetConfig+0x1b0>)
 8108624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108628:	08108641 	.word	0x08108641
 810862c:	08108649 	.word	0x08108649
 8108630:	08108651 	.word	0x08108651
 8108634:	08108659 	.word	0x08108659
 8108638:	08108661 	.word	0x08108661
 810863c:	08108669 	.word	0x08108669
 8108640:	2300      	movs	r3, #0
 8108642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108646:	e1ea      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108648:	2304      	movs	r3, #4
 810864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810864e:	e1e6      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108650:	2308      	movs	r3, #8
 8108652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108656:	e1e2      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108658:	2310      	movs	r3, #16
 810865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810865e:	e1de      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108660:	2320      	movs	r3, #32
 8108662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108666:	e1da      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108668:	2340      	movs	r3, #64	; 0x40
 810866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810866e:	e1d6      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108670:	2380      	movs	r3, #128	; 0x80
 8108672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108676:	e1d2      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108678:	697b      	ldr	r3, [r7, #20]
 810867a:	681b      	ldr	r3, [r3, #0]
 810867c:	4a4c      	ldr	r2, [pc, #304]	; (81087b0 <UART_SetConfig+0x338>)
 810867e:	4293      	cmp	r3, r2
 8108680:	d130      	bne.n	81086e4 <UART_SetConfig+0x26c>
 8108682:	4b49      	ldr	r3, [pc, #292]	; (81087a8 <UART_SetConfig+0x330>)
 8108684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108686:	f003 0307 	and.w	r3, r3, #7
 810868a:	2b05      	cmp	r3, #5
 810868c:	d826      	bhi.n	81086dc <UART_SetConfig+0x264>
 810868e:	a201      	add	r2, pc, #4	; (adr r2, 8108694 <UART_SetConfig+0x21c>)
 8108690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108694:	081086ad 	.word	0x081086ad
 8108698:	081086b5 	.word	0x081086b5
 810869c:	081086bd 	.word	0x081086bd
 81086a0:	081086c5 	.word	0x081086c5
 81086a4:	081086cd 	.word	0x081086cd
 81086a8:	081086d5 	.word	0x081086d5
 81086ac:	2300      	movs	r3, #0
 81086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086b2:	e1b4      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086b4:	2304      	movs	r3, #4
 81086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086ba:	e1b0      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086bc:	2308      	movs	r3, #8
 81086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086c2:	e1ac      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086c4:	2310      	movs	r3, #16
 81086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086ca:	e1a8      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086cc:	2320      	movs	r3, #32
 81086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086d2:	e1a4      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086d4:	2340      	movs	r3, #64	; 0x40
 81086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086da:	e1a0      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086dc:	2380      	movs	r3, #128	; 0x80
 81086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086e2:	e19c      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81086e4:	697b      	ldr	r3, [r7, #20]
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	4a32      	ldr	r2, [pc, #200]	; (81087b4 <UART_SetConfig+0x33c>)
 81086ea:	4293      	cmp	r3, r2
 81086ec:	d130      	bne.n	8108750 <UART_SetConfig+0x2d8>
 81086ee:	4b2e      	ldr	r3, [pc, #184]	; (81087a8 <UART_SetConfig+0x330>)
 81086f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81086f2:	f003 0307 	and.w	r3, r3, #7
 81086f6:	2b05      	cmp	r3, #5
 81086f8:	d826      	bhi.n	8108748 <UART_SetConfig+0x2d0>
 81086fa:	a201      	add	r2, pc, #4	; (adr r2, 8108700 <UART_SetConfig+0x288>)
 81086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108700:	08108719 	.word	0x08108719
 8108704:	08108721 	.word	0x08108721
 8108708:	08108729 	.word	0x08108729
 810870c:	08108731 	.word	0x08108731
 8108710:	08108739 	.word	0x08108739
 8108714:	08108741 	.word	0x08108741
 8108718:	2300      	movs	r3, #0
 810871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810871e:	e17e      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108720:	2304      	movs	r3, #4
 8108722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108726:	e17a      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108728:	2308      	movs	r3, #8
 810872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810872e:	e176      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108730:	2310      	movs	r3, #16
 8108732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108736:	e172      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108738:	2320      	movs	r3, #32
 810873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810873e:	e16e      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108740:	2340      	movs	r3, #64	; 0x40
 8108742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108746:	e16a      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108748:	2380      	movs	r3, #128	; 0x80
 810874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810874e:	e166      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108750:	697b      	ldr	r3, [r7, #20]
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	4a18      	ldr	r2, [pc, #96]	; (81087b8 <UART_SetConfig+0x340>)
 8108756:	4293      	cmp	r3, r2
 8108758:	d140      	bne.n	81087dc <UART_SetConfig+0x364>
 810875a:	4b13      	ldr	r3, [pc, #76]	; (81087a8 <UART_SetConfig+0x330>)
 810875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810875e:	f003 0307 	and.w	r3, r3, #7
 8108762:	2b05      	cmp	r3, #5
 8108764:	d836      	bhi.n	81087d4 <UART_SetConfig+0x35c>
 8108766:	a201      	add	r2, pc, #4	; (adr r2, 810876c <UART_SetConfig+0x2f4>)
 8108768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810876c:	08108785 	.word	0x08108785
 8108770:	0810878d 	.word	0x0810878d
 8108774:	08108795 	.word	0x08108795
 8108778:	081087bd 	.word	0x081087bd
 810877c:	081087c5 	.word	0x081087c5
 8108780:	081087cd 	.word	0x081087cd
 8108784:	2300      	movs	r3, #0
 8108786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810878a:	e148      	b.n	8108a1e <UART_SetConfig+0x5a6>
 810878c:	2304      	movs	r3, #4
 810878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108792:	e144      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108794:	2308      	movs	r3, #8
 8108796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810879a:	e140      	b.n	8108a1e <UART_SetConfig+0x5a6>
 810879c:	cfff69f3 	.word	0xcfff69f3
 81087a0:	58000c00 	.word	0x58000c00
 81087a4:	40011000 	.word	0x40011000
 81087a8:	58024400 	.word	0x58024400
 81087ac:	40004400 	.word	0x40004400
 81087b0:	40004800 	.word	0x40004800
 81087b4:	40004c00 	.word	0x40004c00
 81087b8:	40005000 	.word	0x40005000
 81087bc:	2310      	movs	r3, #16
 81087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087c2:	e12c      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81087c4:	2320      	movs	r3, #32
 81087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087ca:	e128      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81087cc:	2340      	movs	r3, #64	; 0x40
 81087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087d2:	e124      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81087d4:	2380      	movs	r3, #128	; 0x80
 81087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087da:	e120      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81087dc:	697b      	ldr	r3, [r7, #20]
 81087de:	681b      	ldr	r3, [r3, #0]
 81087e0:	4acb      	ldr	r2, [pc, #812]	; (8108b10 <UART_SetConfig+0x698>)
 81087e2:	4293      	cmp	r3, r2
 81087e4:	d176      	bne.n	81088d4 <UART_SetConfig+0x45c>
 81087e6:	4bcb      	ldr	r3, [pc, #812]	; (8108b14 <UART_SetConfig+0x69c>)
 81087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81087ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81087ee:	2b28      	cmp	r3, #40	; 0x28
 81087f0:	d86c      	bhi.n	81088cc <UART_SetConfig+0x454>
 81087f2:	a201      	add	r2, pc, #4	; (adr r2, 81087f8 <UART_SetConfig+0x380>)
 81087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087f8:	0810889d 	.word	0x0810889d
 81087fc:	081088cd 	.word	0x081088cd
 8108800:	081088cd 	.word	0x081088cd
 8108804:	081088cd 	.word	0x081088cd
 8108808:	081088cd 	.word	0x081088cd
 810880c:	081088cd 	.word	0x081088cd
 8108810:	081088cd 	.word	0x081088cd
 8108814:	081088cd 	.word	0x081088cd
 8108818:	081088a5 	.word	0x081088a5
 810881c:	081088cd 	.word	0x081088cd
 8108820:	081088cd 	.word	0x081088cd
 8108824:	081088cd 	.word	0x081088cd
 8108828:	081088cd 	.word	0x081088cd
 810882c:	081088cd 	.word	0x081088cd
 8108830:	081088cd 	.word	0x081088cd
 8108834:	081088cd 	.word	0x081088cd
 8108838:	081088ad 	.word	0x081088ad
 810883c:	081088cd 	.word	0x081088cd
 8108840:	081088cd 	.word	0x081088cd
 8108844:	081088cd 	.word	0x081088cd
 8108848:	081088cd 	.word	0x081088cd
 810884c:	081088cd 	.word	0x081088cd
 8108850:	081088cd 	.word	0x081088cd
 8108854:	081088cd 	.word	0x081088cd
 8108858:	081088b5 	.word	0x081088b5
 810885c:	081088cd 	.word	0x081088cd
 8108860:	081088cd 	.word	0x081088cd
 8108864:	081088cd 	.word	0x081088cd
 8108868:	081088cd 	.word	0x081088cd
 810886c:	081088cd 	.word	0x081088cd
 8108870:	081088cd 	.word	0x081088cd
 8108874:	081088cd 	.word	0x081088cd
 8108878:	081088bd 	.word	0x081088bd
 810887c:	081088cd 	.word	0x081088cd
 8108880:	081088cd 	.word	0x081088cd
 8108884:	081088cd 	.word	0x081088cd
 8108888:	081088cd 	.word	0x081088cd
 810888c:	081088cd 	.word	0x081088cd
 8108890:	081088cd 	.word	0x081088cd
 8108894:	081088cd 	.word	0x081088cd
 8108898:	081088c5 	.word	0x081088c5
 810889c:	2301      	movs	r3, #1
 810889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088a2:	e0bc      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088a4:	2304      	movs	r3, #4
 81088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088aa:	e0b8      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088ac:	2308      	movs	r3, #8
 81088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088b2:	e0b4      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088b4:	2310      	movs	r3, #16
 81088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088ba:	e0b0      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088bc:	2320      	movs	r3, #32
 81088be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088c2:	e0ac      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088c4:	2340      	movs	r3, #64	; 0x40
 81088c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088ca:	e0a8      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088cc:	2380      	movs	r3, #128	; 0x80
 81088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088d2:	e0a4      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81088d4:	697b      	ldr	r3, [r7, #20]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	4a8f      	ldr	r2, [pc, #572]	; (8108b18 <UART_SetConfig+0x6a0>)
 81088da:	4293      	cmp	r3, r2
 81088dc:	d130      	bne.n	8108940 <UART_SetConfig+0x4c8>
 81088de:	4b8d      	ldr	r3, [pc, #564]	; (8108b14 <UART_SetConfig+0x69c>)
 81088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088e2:	f003 0307 	and.w	r3, r3, #7
 81088e6:	2b05      	cmp	r3, #5
 81088e8:	d826      	bhi.n	8108938 <UART_SetConfig+0x4c0>
 81088ea:	a201      	add	r2, pc, #4	; (adr r2, 81088f0 <UART_SetConfig+0x478>)
 81088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088f0:	08108909 	.word	0x08108909
 81088f4:	08108911 	.word	0x08108911
 81088f8:	08108919 	.word	0x08108919
 81088fc:	08108921 	.word	0x08108921
 8108900:	08108929 	.word	0x08108929
 8108904:	08108931 	.word	0x08108931
 8108908:	2300      	movs	r3, #0
 810890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810890e:	e086      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108910:	2304      	movs	r3, #4
 8108912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108916:	e082      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108918:	2308      	movs	r3, #8
 810891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810891e:	e07e      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108920:	2310      	movs	r3, #16
 8108922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108926:	e07a      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108928:	2320      	movs	r3, #32
 810892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810892e:	e076      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108930:	2340      	movs	r3, #64	; 0x40
 8108932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108936:	e072      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108938:	2380      	movs	r3, #128	; 0x80
 810893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810893e:	e06e      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108940:	697b      	ldr	r3, [r7, #20]
 8108942:	681b      	ldr	r3, [r3, #0]
 8108944:	4a75      	ldr	r2, [pc, #468]	; (8108b1c <UART_SetConfig+0x6a4>)
 8108946:	4293      	cmp	r3, r2
 8108948:	d130      	bne.n	81089ac <UART_SetConfig+0x534>
 810894a:	4b72      	ldr	r3, [pc, #456]	; (8108b14 <UART_SetConfig+0x69c>)
 810894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810894e:	f003 0307 	and.w	r3, r3, #7
 8108952:	2b05      	cmp	r3, #5
 8108954:	d826      	bhi.n	81089a4 <UART_SetConfig+0x52c>
 8108956:	a201      	add	r2, pc, #4	; (adr r2, 810895c <UART_SetConfig+0x4e4>)
 8108958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810895c:	08108975 	.word	0x08108975
 8108960:	0810897d 	.word	0x0810897d
 8108964:	08108985 	.word	0x08108985
 8108968:	0810898d 	.word	0x0810898d
 810896c:	08108995 	.word	0x08108995
 8108970:	0810899d 	.word	0x0810899d
 8108974:	2300      	movs	r3, #0
 8108976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810897a:	e050      	b.n	8108a1e <UART_SetConfig+0x5a6>
 810897c:	2304      	movs	r3, #4
 810897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108982:	e04c      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108984:	2308      	movs	r3, #8
 8108986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810898a:	e048      	b.n	8108a1e <UART_SetConfig+0x5a6>
 810898c:	2310      	movs	r3, #16
 810898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108992:	e044      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108994:	2320      	movs	r3, #32
 8108996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810899a:	e040      	b.n	8108a1e <UART_SetConfig+0x5a6>
 810899c:	2340      	movs	r3, #64	; 0x40
 810899e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089a2:	e03c      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81089a4:	2380      	movs	r3, #128	; 0x80
 81089a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089aa:	e038      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81089ac:	697b      	ldr	r3, [r7, #20]
 81089ae:	681b      	ldr	r3, [r3, #0]
 81089b0:	4a5b      	ldr	r2, [pc, #364]	; (8108b20 <UART_SetConfig+0x6a8>)
 81089b2:	4293      	cmp	r3, r2
 81089b4:	d130      	bne.n	8108a18 <UART_SetConfig+0x5a0>
 81089b6:	4b57      	ldr	r3, [pc, #348]	; (8108b14 <UART_SetConfig+0x69c>)
 81089b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81089ba:	f003 0307 	and.w	r3, r3, #7
 81089be:	2b05      	cmp	r3, #5
 81089c0:	d826      	bhi.n	8108a10 <UART_SetConfig+0x598>
 81089c2:	a201      	add	r2, pc, #4	; (adr r2, 81089c8 <UART_SetConfig+0x550>)
 81089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089c8:	081089e1 	.word	0x081089e1
 81089cc:	081089e9 	.word	0x081089e9
 81089d0:	081089f1 	.word	0x081089f1
 81089d4:	081089f9 	.word	0x081089f9
 81089d8:	08108a01 	.word	0x08108a01
 81089dc:	08108a09 	.word	0x08108a09
 81089e0:	2302      	movs	r3, #2
 81089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089e6:	e01a      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81089e8:	2304      	movs	r3, #4
 81089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089ee:	e016      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81089f0:	2308      	movs	r3, #8
 81089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089f6:	e012      	b.n	8108a1e <UART_SetConfig+0x5a6>
 81089f8:	2310      	movs	r3, #16
 81089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089fe:	e00e      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108a00:	2320      	movs	r3, #32
 8108a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a06:	e00a      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108a08:	2340      	movs	r3, #64	; 0x40
 8108a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a0e:	e006      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108a10:	2380      	movs	r3, #128	; 0x80
 8108a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a16:	e002      	b.n	8108a1e <UART_SetConfig+0x5a6>
 8108a18:	2380      	movs	r3, #128	; 0x80
 8108a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108a1e:	697b      	ldr	r3, [r7, #20]
 8108a20:	681b      	ldr	r3, [r3, #0]
 8108a22:	4a3f      	ldr	r2, [pc, #252]	; (8108b20 <UART_SetConfig+0x6a8>)
 8108a24:	4293      	cmp	r3, r2
 8108a26:	f040 80f8 	bne.w	8108c1a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108a2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108a2e:	2b20      	cmp	r3, #32
 8108a30:	dc46      	bgt.n	8108ac0 <UART_SetConfig+0x648>
 8108a32:	2b02      	cmp	r3, #2
 8108a34:	f2c0 8082 	blt.w	8108b3c <UART_SetConfig+0x6c4>
 8108a38:	3b02      	subs	r3, #2
 8108a3a:	2b1e      	cmp	r3, #30
 8108a3c:	d87e      	bhi.n	8108b3c <UART_SetConfig+0x6c4>
 8108a3e:	a201      	add	r2, pc, #4	; (adr r2, 8108a44 <UART_SetConfig+0x5cc>)
 8108a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a44:	08108ac7 	.word	0x08108ac7
 8108a48:	08108b3d 	.word	0x08108b3d
 8108a4c:	08108acf 	.word	0x08108acf
 8108a50:	08108b3d 	.word	0x08108b3d
 8108a54:	08108b3d 	.word	0x08108b3d
 8108a58:	08108b3d 	.word	0x08108b3d
 8108a5c:	08108adf 	.word	0x08108adf
 8108a60:	08108b3d 	.word	0x08108b3d
 8108a64:	08108b3d 	.word	0x08108b3d
 8108a68:	08108b3d 	.word	0x08108b3d
 8108a6c:	08108b3d 	.word	0x08108b3d
 8108a70:	08108b3d 	.word	0x08108b3d
 8108a74:	08108b3d 	.word	0x08108b3d
 8108a78:	08108b3d 	.word	0x08108b3d
 8108a7c:	08108aef 	.word	0x08108aef
 8108a80:	08108b3d 	.word	0x08108b3d
 8108a84:	08108b3d 	.word	0x08108b3d
 8108a88:	08108b3d 	.word	0x08108b3d
 8108a8c:	08108b3d 	.word	0x08108b3d
 8108a90:	08108b3d 	.word	0x08108b3d
 8108a94:	08108b3d 	.word	0x08108b3d
 8108a98:	08108b3d 	.word	0x08108b3d
 8108a9c:	08108b3d 	.word	0x08108b3d
 8108aa0:	08108b3d 	.word	0x08108b3d
 8108aa4:	08108b3d 	.word	0x08108b3d
 8108aa8:	08108b3d 	.word	0x08108b3d
 8108aac:	08108b3d 	.word	0x08108b3d
 8108ab0:	08108b3d 	.word	0x08108b3d
 8108ab4:	08108b3d 	.word	0x08108b3d
 8108ab8:	08108b3d 	.word	0x08108b3d
 8108abc:	08108b2f 	.word	0x08108b2f
 8108ac0:	2b40      	cmp	r3, #64	; 0x40
 8108ac2:	d037      	beq.n	8108b34 <UART_SetConfig+0x6bc>
 8108ac4:	e03a      	b.n	8108b3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108ac6:	f7fd fe19 	bl	81066fc <HAL_RCCEx_GetD3PCLK1Freq>
 8108aca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108acc:	e03c      	b.n	8108b48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108ad2:	4618      	mov	r0, r3
 8108ad4:	f7fd fe28 	bl	8106728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108adc:	e034      	b.n	8108b48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108ade:	f107 0318 	add.w	r3, r7, #24
 8108ae2:	4618      	mov	r0, r3
 8108ae4:	f7fd ff74 	bl	81069d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108ae8:	69fb      	ldr	r3, [r7, #28]
 8108aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108aec:	e02c      	b.n	8108b48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108aee:	4b09      	ldr	r3, [pc, #36]	; (8108b14 <UART_SetConfig+0x69c>)
 8108af0:	681b      	ldr	r3, [r3, #0]
 8108af2:	f003 0320 	and.w	r3, r3, #32
 8108af6:	2b00      	cmp	r3, #0
 8108af8:	d016      	beq.n	8108b28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108afa:	4b06      	ldr	r3, [pc, #24]	; (8108b14 <UART_SetConfig+0x69c>)
 8108afc:	681b      	ldr	r3, [r3, #0]
 8108afe:	08db      	lsrs	r3, r3, #3
 8108b00:	f003 0303 	and.w	r3, r3, #3
 8108b04:	4a07      	ldr	r2, [pc, #28]	; (8108b24 <UART_SetConfig+0x6ac>)
 8108b06:	fa22 f303 	lsr.w	r3, r2, r3
 8108b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108b0c:	e01c      	b.n	8108b48 <UART_SetConfig+0x6d0>
 8108b0e:	bf00      	nop
 8108b10:	40011400 	.word	0x40011400
 8108b14:	58024400 	.word	0x58024400
 8108b18:	40007800 	.word	0x40007800
 8108b1c:	40007c00 	.word	0x40007c00
 8108b20:	58000c00 	.word	0x58000c00
 8108b24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108b28:	4b9d      	ldr	r3, [pc, #628]	; (8108da0 <UART_SetConfig+0x928>)
 8108b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b2c:	e00c      	b.n	8108b48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108b2e:	4b9d      	ldr	r3, [pc, #628]	; (8108da4 <UART_SetConfig+0x92c>)
 8108b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b32:	e009      	b.n	8108b48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b3a:	e005      	b.n	8108b48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108b3c:	2300      	movs	r3, #0
 8108b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108b40:	2301      	movs	r3, #1
 8108b42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108b46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b4a:	2b00      	cmp	r3, #0
 8108b4c:	f000 81de 	beq.w	8108f0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108b50:	697b      	ldr	r3, [r7, #20]
 8108b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108b54:	4a94      	ldr	r2, [pc, #592]	; (8108da8 <UART_SetConfig+0x930>)
 8108b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108b5a:	461a      	mov	r2, r3
 8108b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108b62:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108b64:	697b      	ldr	r3, [r7, #20]
 8108b66:	685a      	ldr	r2, [r3, #4]
 8108b68:	4613      	mov	r3, r2
 8108b6a:	005b      	lsls	r3, r3, #1
 8108b6c:	4413      	add	r3, r2
 8108b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108b70:	429a      	cmp	r2, r3
 8108b72:	d305      	bcc.n	8108b80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108b74:	697b      	ldr	r3, [r7, #20]
 8108b76:	685b      	ldr	r3, [r3, #4]
 8108b78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108b7c:	429a      	cmp	r2, r3
 8108b7e:	d903      	bls.n	8108b88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108b80:	2301      	movs	r3, #1
 8108b82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108b86:	e1c1      	b.n	8108f0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b8a:	2200      	movs	r2, #0
 8108b8c:	60bb      	str	r3, [r7, #8]
 8108b8e:	60fa      	str	r2, [r7, #12]
 8108b90:	697b      	ldr	r3, [r7, #20]
 8108b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108b94:	4a84      	ldr	r2, [pc, #528]	; (8108da8 <UART_SetConfig+0x930>)
 8108b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108b9a:	b29b      	uxth	r3, r3
 8108b9c:	2200      	movs	r2, #0
 8108b9e:	603b      	str	r3, [r7, #0]
 8108ba0:	607a      	str	r2, [r7, #4]
 8108ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108baa:	f7f8 f8f5 	bl	8100d98 <__aeabi_uldivmod>
 8108bae:	4602      	mov	r2, r0
 8108bb0:	460b      	mov	r3, r1
 8108bb2:	4610      	mov	r0, r2
 8108bb4:	4619      	mov	r1, r3
 8108bb6:	f04f 0200 	mov.w	r2, #0
 8108bba:	f04f 0300 	mov.w	r3, #0
 8108bbe:	020b      	lsls	r3, r1, #8
 8108bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108bc4:	0202      	lsls	r2, r0, #8
 8108bc6:	6979      	ldr	r1, [r7, #20]
 8108bc8:	6849      	ldr	r1, [r1, #4]
 8108bca:	0849      	lsrs	r1, r1, #1
 8108bcc:	2000      	movs	r0, #0
 8108bce:	460c      	mov	r4, r1
 8108bd0:	4605      	mov	r5, r0
 8108bd2:	eb12 0804 	adds.w	r8, r2, r4
 8108bd6:	eb43 0905 	adc.w	r9, r3, r5
 8108bda:	697b      	ldr	r3, [r7, #20]
 8108bdc:	685b      	ldr	r3, [r3, #4]
 8108bde:	2200      	movs	r2, #0
 8108be0:	469a      	mov	sl, r3
 8108be2:	4693      	mov	fp, r2
 8108be4:	4652      	mov	r2, sl
 8108be6:	465b      	mov	r3, fp
 8108be8:	4640      	mov	r0, r8
 8108bea:	4649      	mov	r1, r9
 8108bec:	f7f8 f8d4 	bl	8100d98 <__aeabi_uldivmod>
 8108bf0:	4602      	mov	r2, r0
 8108bf2:	460b      	mov	r3, r1
 8108bf4:	4613      	mov	r3, r2
 8108bf6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108bfe:	d308      	bcc.n	8108c12 <UART_SetConfig+0x79a>
 8108c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108c06:	d204      	bcs.n	8108c12 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108c08:	697b      	ldr	r3, [r7, #20]
 8108c0a:	681b      	ldr	r3, [r3, #0]
 8108c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108c0e:	60da      	str	r2, [r3, #12]
 8108c10:	e17c      	b.n	8108f0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108c12:	2301      	movs	r3, #1
 8108c14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108c18:	e178      	b.n	8108f0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108c1a:	697b      	ldr	r3, [r7, #20]
 8108c1c:	69db      	ldr	r3, [r3, #28]
 8108c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108c22:	f040 80c5 	bne.w	8108db0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108c26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108c2a:	2b20      	cmp	r3, #32
 8108c2c:	dc48      	bgt.n	8108cc0 <UART_SetConfig+0x848>
 8108c2e:	2b00      	cmp	r3, #0
 8108c30:	db7b      	blt.n	8108d2a <UART_SetConfig+0x8b2>
 8108c32:	2b20      	cmp	r3, #32
 8108c34:	d879      	bhi.n	8108d2a <UART_SetConfig+0x8b2>
 8108c36:	a201      	add	r2, pc, #4	; (adr r2, 8108c3c <UART_SetConfig+0x7c4>)
 8108c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c3c:	08108cc7 	.word	0x08108cc7
 8108c40:	08108ccf 	.word	0x08108ccf
 8108c44:	08108d2b 	.word	0x08108d2b
 8108c48:	08108d2b 	.word	0x08108d2b
 8108c4c:	08108cd7 	.word	0x08108cd7
 8108c50:	08108d2b 	.word	0x08108d2b
 8108c54:	08108d2b 	.word	0x08108d2b
 8108c58:	08108d2b 	.word	0x08108d2b
 8108c5c:	08108ce7 	.word	0x08108ce7
 8108c60:	08108d2b 	.word	0x08108d2b
 8108c64:	08108d2b 	.word	0x08108d2b
 8108c68:	08108d2b 	.word	0x08108d2b
 8108c6c:	08108d2b 	.word	0x08108d2b
 8108c70:	08108d2b 	.word	0x08108d2b
 8108c74:	08108d2b 	.word	0x08108d2b
 8108c78:	08108d2b 	.word	0x08108d2b
 8108c7c:	08108cf7 	.word	0x08108cf7
 8108c80:	08108d2b 	.word	0x08108d2b
 8108c84:	08108d2b 	.word	0x08108d2b
 8108c88:	08108d2b 	.word	0x08108d2b
 8108c8c:	08108d2b 	.word	0x08108d2b
 8108c90:	08108d2b 	.word	0x08108d2b
 8108c94:	08108d2b 	.word	0x08108d2b
 8108c98:	08108d2b 	.word	0x08108d2b
 8108c9c:	08108d2b 	.word	0x08108d2b
 8108ca0:	08108d2b 	.word	0x08108d2b
 8108ca4:	08108d2b 	.word	0x08108d2b
 8108ca8:	08108d2b 	.word	0x08108d2b
 8108cac:	08108d2b 	.word	0x08108d2b
 8108cb0:	08108d2b 	.word	0x08108d2b
 8108cb4:	08108d2b 	.word	0x08108d2b
 8108cb8:	08108d2b 	.word	0x08108d2b
 8108cbc:	08108d1d 	.word	0x08108d1d
 8108cc0:	2b40      	cmp	r3, #64	; 0x40
 8108cc2:	d02e      	beq.n	8108d22 <UART_SetConfig+0x8aa>
 8108cc4:	e031      	b.n	8108d2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108cc6:	f7fc fda7 	bl	8105818 <HAL_RCC_GetPCLK1Freq>
 8108cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108ccc:	e033      	b.n	8108d36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108cce:	f7fc fdb9 	bl	8105844 <HAL_RCC_GetPCLK2Freq>
 8108cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108cd4:	e02f      	b.n	8108d36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108cda:	4618      	mov	r0, r3
 8108cdc:	f7fd fd24 	bl	8106728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108ce4:	e027      	b.n	8108d36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108ce6:	f107 0318 	add.w	r3, r7, #24
 8108cea:	4618      	mov	r0, r3
 8108cec:	f7fd fe70 	bl	81069d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108cf0:	69fb      	ldr	r3, [r7, #28]
 8108cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108cf4:	e01f      	b.n	8108d36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108cf6:	4b2d      	ldr	r3, [pc, #180]	; (8108dac <UART_SetConfig+0x934>)
 8108cf8:	681b      	ldr	r3, [r3, #0]
 8108cfa:	f003 0320 	and.w	r3, r3, #32
 8108cfe:	2b00      	cmp	r3, #0
 8108d00:	d009      	beq.n	8108d16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108d02:	4b2a      	ldr	r3, [pc, #168]	; (8108dac <UART_SetConfig+0x934>)
 8108d04:	681b      	ldr	r3, [r3, #0]
 8108d06:	08db      	lsrs	r3, r3, #3
 8108d08:	f003 0303 	and.w	r3, r3, #3
 8108d0c:	4a24      	ldr	r2, [pc, #144]	; (8108da0 <UART_SetConfig+0x928>)
 8108d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8108d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108d14:	e00f      	b.n	8108d36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108d16:	4b22      	ldr	r3, [pc, #136]	; (8108da0 <UART_SetConfig+0x928>)
 8108d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d1a:	e00c      	b.n	8108d36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108d1c:	4b21      	ldr	r3, [pc, #132]	; (8108da4 <UART_SetConfig+0x92c>)
 8108d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d20:	e009      	b.n	8108d36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d28:	e005      	b.n	8108d36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108d2a:	2300      	movs	r3, #0
 8108d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108d2e:	2301      	movs	r3, #1
 8108d30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108d38:	2b00      	cmp	r3, #0
 8108d3a:	f000 80e7 	beq.w	8108f0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108d3e:	697b      	ldr	r3, [r7, #20]
 8108d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d42:	4a19      	ldr	r2, [pc, #100]	; (8108da8 <UART_SetConfig+0x930>)
 8108d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108d48:	461a      	mov	r2, r3
 8108d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8108d50:	005a      	lsls	r2, r3, #1
 8108d52:	697b      	ldr	r3, [r7, #20]
 8108d54:	685b      	ldr	r3, [r3, #4]
 8108d56:	085b      	lsrs	r3, r3, #1
 8108d58:	441a      	add	r2, r3
 8108d5a:	697b      	ldr	r3, [r7, #20]
 8108d5c:	685b      	ldr	r3, [r3, #4]
 8108d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108d62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d66:	2b0f      	cmp	r3, #15
 8108d68:	d916      	bls.n	8108d98 <UART_SetConfig+0x920>
 8108d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108d70:	d212      	bcs.n	8108d98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d74:	b29b      	uxth	r3, r3
 8108d76:	f023 030f 	bic.w	r3, r3, #15
 8108d7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d7e:	085b      	lsrs	r3, r3, #1
 8108d80:	b29b      	uxth	r3, r3
 8108d82:	f003 0307 	and.w	r3, r3, #7
 8108d86:	b29a      	uxth	r2, r3
 8108d88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108d8a:	4313      	orrs	r3, r2
 8108d8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8108d8e:	697b      	ldr	r3, [r7, #20]
 8108d90:	681b      	ldr	r3, [r3, #0]
 8108d92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108d94:	60da      	str	r2, [r3, #12]
 8108d96:	e0b9      	b.n	8108f0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108d98:	2301      	movs	r3, #1
 8108d9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108d9e:	e0b5      	b.n	8108f0c <UART_SetConfig+0xa94>
 8108da0:	03d09000 	.word	0x03d09000
 8108da4:	003d0900 	.word	0x003d0900
 8108da8:	0810e010 	.word	0x0810e010
 8108dac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108db0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108db4:	2b20      	cmp	r3, #32
 8108db6:	dc49      	bgt.n	8108e4c <UART_SetConfig+0x9d4>
 8108db8:	2b00      	cmp	r3, #0
 8108dba:	db7c      	blt.n	8108eb6 <UART_SetConfig+0xa3e>
 8108dbc:	2b20      	cmp	r3, #32
 8108dbe:	d87a      	bhi.n	8108eb6 <UART_SetConfig+0xa3e>
 8108dc0:	a201      	add	r2, pc, #4	; (adr r2, 8108dc8 <UART_SetConfig+0x950>)
 8108dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108dc6:	bf00      	nop
 8108dc8:	08108e53 	.word	0x08108e53
 8108dcc:	08108e5b 	.word	0x08108e5b
 8108dd0:	08108eb7 	.word	0x08108eb7
 8108dd4:	08108eb7 	.word	0x08108eb7
 8108dd8:	08108e63 	.word	0x08108e63
 8108ddc:	08108eb7 	.word	0x08108eb7
 8108de0:	08108eb7 	.word	0x08108eb7
 8108de4:	08108eb7 	.word	0x08108eb7
 8108de8:	08108e73 	.word	0x08108e73
 8108dec:	08108eb7 	.word	0x08108eb7
 8108df0:	08108eb7 	.word	0x08108eb7
 8108df4:	08108eb7 	.word	0x08108eb7
 8108df8:	08108eb7 	.word	0x08108eb7
 8108dfc:	08108eb7 	.word	0x08108eb7
 8108e00:	08108eb7 	.word	0x08108eb7
 8108e04:	08108eb7 	.word	0x08108eb7
 8108e08:	08108e83 	.word	0x08108e83
 8108e0c:	08108eb7 	.word	0x08108eb7
 8108e10:	08108eb7 	.word	0x08108eb7
 8108e14:	08108eb7 	.word	0x08108eb7
 8108e18:	08108eb7 	.word	0x08108eb7
 8108e1c:	08108eb7 	.word	0x08108eb7
 8108e20:	08108eb7 	.word	0x08108eb7
 8108e24:	08108eb7 	.word	0x08108eb7
 8108e28:	08108eb7 	.word	0x08108eb7
 8108e2c:	08108eb7 	.word	0x08108eb7
 8108e30:	08108eb7 	.word	0x08108eb7
 8108e34:	08108eb7 	.word	0x08108eb7
 8108e38:	08108eb7 	.word	0x08108eb7
 8108e3c:	08108eb7 	.word	0x08108eb7
 8108e40:	08108eb7 	.word	0x08108eb7
 8108e44:	08108eb7 	.word	0x08108eb7
 8108e48:	08108ea9 	.word	0x08108ea9
 8108e4c:	2b40      	cmp	r3, #64	; 0x40
 8108e4e:	d02e      	beq.n	8108eae <UART_SetConfig+0xa36>
 8108e50:	e031      	b.n	8108eb6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108e52:	f7fc fce1 	bl	8105818 <HAL_RCC_GetPCLK1Freq>
 8108e56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108e58:	e033      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108e5a:	f7fc fcf3 	bl	8105844 <HAL_RCC_GetPCLK2Freq>
 8108e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108e60:	e02f      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108e66:	4618      	mov	r0, r3
 8108e68:	f7fd fc5e 	bl	8106728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108e70:	e027      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108e72:	f107 0318 	add.w	r3, r7, #24
 8108e76:	4618      	mov	r0, r3
 8108e78:	f7fd fdaa 	bl	81069d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108e7c:	69fb      	ldr	r3, [r7, #28]
 8108e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108e80:	e01f      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108e82:	4b2d      	ldr	r3, [pc, #180]	; (8108f38 <UART_SetConfig+0xac0>)
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	f003 0320 	and.w	r3, r3, #32
 8108e8a:	2b00      	cmp	r3, #0
 8108e8c:	d009      	beq.n	8108ea2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108e8e:	4b2a      	ldr	r3, [pc, #168]	; (8108f38 <UART_SetConfig+0xac0>)
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	08db      	lsrs	r3, r3, #3
 8108e94:	f003 0303 	and.w	r3, r3, #3
 8108e98:	4a28      	ldr	r2, [pc, #160]	; (8108f3c <UART_SetConfig+0xac4>)
 8108e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8108e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108ea0:	e00f      	b.n	8108ec2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108ea2:	4b26      	ldr	r3, [pc, #152]	; (8108f3c <UART_SetConfig+0xac4>)
 8108ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108ea6:	e00c      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108ea8:	4b25      	ldr	r3, [pc, #148]	; (8108f40 <UART_SetConfig+0xac8>)
 8108eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108eac:	e009      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108eb4:	e005      	b.n	8108ec2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108eb6:	2300      	movs	r3, #0
 8108eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108eba:	2301      	movs	r3, #1
 8108ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8108ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ec4:	2b00      	cmp	r3, #0
 8108ec6:	d021      	beq.n	8108f0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108ec8:	697b      	ldr	r3, [r7, #20]
 8108eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ecc:	4a1d      	ldr	r2, [pc, #116]	; (8108f44 <UART_SetConfig+0xacc>)
 8108ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108ed2:	461a      	mov	r2, r3
 8108ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8108eda:	697b      	ldr	r3, [r7, #20]
 8108edc:	685b      	ldr	r3, [r3, #4]
 8108ede:	085b      	lsrs	r3, r3, #1
 8108ee0:	441a      	add	r2, r3
 8108ee2:	697b      	ldr	r3, [r7, #20]
 8108ee4:	685b      	ldr	r3, [r3, #4]
 8108ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8108eea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108eee:	2b0f      	cmp	r3, #15
 8108ef0:	d909      	bls.n	8108f06 <UART_SetConfig+0xa8e>
 8108ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108ef8:	d205      	bcs.n	8108f06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108efc:	b29a      	uxth	r2, r3
 8108efe:	697b      	ldr	r3, [r7, #20]
 8108f00:	681b      	ldr	r3, [r3, #0]
 8108f02:	60da      	str	r2, [r3, #12]
 8108f04:	e002      	b.n	8108f0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108f06:	2301      	movs	r3, #1
 8108f08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108f0c:	697b      	ldr	r3, [r7, #20]
 8108f0e:	2201      	movs	r2, #1
 8108f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108f14:	697b      	ldr	r3, [r7, #20]
 8108f16:	2201      	movs	r2, #1
 8108f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108f1c:	697b      	ldr	r3, [r7, #20]
 8108f1e:	2200      	movs	r2, #0
 8108f20:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8108f22:	697b      	ldr	r3, [r7, #20]
 8108f24:	2200      	movs	r2, #0
 8108f26:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8108f28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8108f2c:	4618      	mov	r0, r3
 8108f2e:	3748      	adds	r7, #72	; 0x48
 8108f30:	46bd      	mov	sp, r7
 8108f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108f36:	bf00      	nop
 8108f38:	58024400 	.word	0x58024400
 8108f3c:	03d09000 	.word	0x03d09000
 8108f40:	003d0900 	.word	0x003d0900
 8108f44:	0810e010 	.word	0x0810e010

08108f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108f48:	b480      	push	{r7}
 8108f4a:	b083      	sub	sp, #12
 8108f4c:	af00      	add	r7, sp, #0
 8108f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108f50:	687b      	ldr	r3, [r7, #4]
 8108f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f54:	f003 0301 	and.w	r3, r3, #1
 8108f58:	2b00      	cmp	r3, #0
 8108f5a:	d00a      	beq.n	8108f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	685b      	ldr	r3, [r3, #4]
 8108f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108f66:	687b      	ldr	r3, [r7, #4]
 8108f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108f6a:	687b      	ldr	r3, [r7, #4]
 8108f6c:	681b      	ldr	r3, [r3, #0]
 8108f6e:	430a      	orrs	r2, r1
 8108f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108f72:	687b      	ldr	r3, [r7, #4]
 8108f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f76:	f003 0302 	and.w	r3, r3, #2
 8108f7a:	2b00      	cmp	r3, #0
 8108f7c:	d00a      	beq.n	8108f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	681b      	ldr	r3, [r3, #0]
 8108f82:	685b      	ldr	r3, [r3, #4]
 8108f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108f8c:	687b      	ldr	r3, [r7, #4]
 8108f8e:	681b      	ldr	r3, [r3, #0]
 8108f90:	430a      	orrs	r2, r1
 8108f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f98:	f003 0304 	and.w	r3, r3, #4
 8108f9c:	2b00      	cmp	r3, #0
 8108f9e:	d00a      	beq.n	8108fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	681b      	ldr	r3, [r3, #0]
 8108fa4:	685b      	ldr	r3, [r3, #4]
 8108fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108fae:	687b      	ldr	r3, [r7, #4]
 8108fb0:	681b      	ldr	r3, [r3, #0]
 8108fb2:	430a      	orrs	r2, r1
 8108fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108fba:	f003 0308 	and.w	r3, r3, #8
 8108fbe:	2b00      	cmp	r3, #0
 8108fc0:	d00a      	beq.n	8108fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	681b      	ldr	r3, [r3, #0]
 8108fc6:	685b      	ldr	r3, [r3, #4]
 8108fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108fd0:	687b      	ldr	r3, [r7, #4]
 8108fd2:	681b      	ldr	r3, [r3, #0]
 8108fd4:	430a      	orrs	r2, r1
 8108fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108fdc:	f003 0310 	and.w	r3, r3, #16
 8108fe0:	2b00      	cmp	r3, #0
 8108fe2:	d00a      	beq.n	8108ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	681b      	ldr	r3, [r3, #0]
 8108fe8:	689b      	ldr	r3, [r3, #8]
 8108fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108fee:	687b      	ldr	r3, [r7, #4]
 8108ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	681b      	ldr	r3, [r3, #0]
 8108ff6:	430a      	orrs	r2, r1
 8108ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ffe:	f003 0320 	and.w	r3, r3, #32
 8109002:	2b00      	cmp	r3, #0
 8109004:	d00a      	beq.n	810901c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109006:	687b      	ldr	r3, [r7, #4]
 8109008:	681b      	ldr	r3, [r3, #0]
 810900a:	689b      	ldr	r3, [r3, #8]
 810900c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109010:	687b      	ldr	r3, [r7, #4]
 8109012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8109014:	687b      	ldr	r3, [r7, #4]
 8109016:	681b      	ldr	r3, [r3, #0]
 8109018:	430a      	orrs	r2, r1
 810901a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109024:	2b00      	cmp	r3, #0
 8109026:	d01a      	beq.n	810905e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109028:	687b      	ldr	r3, [r7, #4]
 810902a:	681b      	ldr	r3, [r3, #0]
 810902c:	685b      	ldr	r3, [r3, #4]
 810902e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	430a      	orrs	r2, r1
 810903c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109046:	d10a      	bne.n	810905e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109048:	687b      	ldr	r3, [r7, #4]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	685b      	ldr	r3, [r3, #4]
 810904e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	430a      	orrs	r2, r1
 810905c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109066:	2b00      	cmp	r3, #0
 8109068:	d00a      	beq.n	8109080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810906a:	687b      	ldr	r3, [r7, #4]
 810906c:	681b      	ldr	r3, [r3, #0]
 810906e:	685b      	ldr	r3, [r3, #4]
 8109070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109078:	687b      	ldr	r3, [r7, #4]
 810907a:	681b      	ldr	r3, [r3, #0]
 810907c:	430a      	orrs	r2, r1
 810907e:	605a      	str	r2, [r3, #4]
  }
}
 8109080:	bf00      	nop
 8109082:	370c      	adds	r7, #12
 8109084:	46bd      	mov	sp, r7
 8109086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810908a:	4770      	bx	lr

0810908c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810908c:	b580      	push	{r7, lr}
 810908e:	b086      	sub	sp, #24
 8109090:	af02      	add	r7, sp, #8
 8109092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	2200      	movs	r2, #0
 8109098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810909c:	f7f9 fa94 	bl	81025c8 <HAL_GetTick>
 81090a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81090a2:	687b      	ldr	r3, [r7, #4]
 81090a4:	681b      	ldr	r3, [r3, #0]
 81090a6:	681b      	ldr	r3, [r3, #0]
 81090a8:	f003 0308 	and.w	r3, r3, #8
 81090ac:	2b08      	cmp	r3, #8
 81090ae:	d10e      	bne.n	81090ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81090b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81090b4:	9300      	str	r3, [sp, #0]
 81090b6:	68fb      	ldr	r3, [r7, #12]
 81090b8:	2200      	movs	r2, #0
 81090ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81090be:	6878      	ldr	r0, [r7, #4]
 81090c0:	f000 f82f 	bl	8109122 <UART_WaitOnFlagUntilTimeout>
 81090c4:	4603      	mov	r3, r0
 81090c6:	2b00      	cmp	r3, #0
 81090c8:	d001      	beq.n	81090ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81090ca:	2303      	movs	r3, #3
 81090cc:	e025      	b.n	810911a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	681b      	ldr	r3, [r3, #0]
 81090d2:	681b      	ldr	r3, [r3, #0]
 81090d4:	f003 0304 	and.w	r3, r3, #4
 81090d8:	2b04      	cmp	r3, #4
 81090da:	d10e      	bne.n	81090fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81090dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81090e0:	9300      	str	r3, [sp, #0]
 81090e2:	68fb      	ldr	r3, [r7, #12]
 81090e4:	2200      	movs	r2, #0
 81090e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81090ea:	6878      	ldr	r0, [r7, #4]
 81090ec:	f000 f819 	bl	8109122 <UART_WaitOnFlagUntilTimeout>
 81090f0:	4603      	mov	r3, r0
 81090f2:	2b00      	cmp	r3, #0
 81090f4:	d001      	beq.n	81090fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81090f6:	2303      	movs	r3, #3
 81090f8:	e00f      	b.n	810911a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81090fa:	687b      	ldr	r3, [r7, #4]
 81090fc:	2220      	movs	r2, #32
 81090fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	2220      	movs	r2, #32
 8109106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810910a:	687b      	ldr	r3, [r7, #4]
 810910c:	2200      	movs	r2, #0
 810910e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	2200      	movs	r2, #0
 8109114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109118:	2300      	movs	r3, #0
}
 810911a:	4618      	mov	r0, r3
 810911c:	3710      	adds	r7, #16
 810911e:	46bd      	mov	sp, r7
 8109120:	bd80      	pop	{r7, pc}

08109122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109122:	b580      	push	{r7, lr}
 8109124:	b09c      	sub	sp, #112	; 0x70
 8109126:	af00      	add	r7, sp, #0
 8109128:	60f8      	str	r0, [r7, #12]
 810912a:	60b9      	str	r1, [r7, #8]
 810912c:	603b      	str	r3, [r7, #0]
 810912e:	4613      	mov	r3, r2
 8109130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109132:	e0a9      	b.n	8109288 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109136:	f1b3 3fff 	cmp.w	r3, #4294967295
 810913a:	f000 80a5 	beq.w	8109288 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810913e:	f7f9 fa43 	bl	81025c8 <HAL_GetTick>
 8109142:	4602      	mov	r2, r0
 8109144:	683b      	ldr	r3, [r7, #0]
 8109146:	1ad3      	subs	r3, r2, r3
 8109148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810914a:	429a      	cmp	r2, r3
 810914c:	d302      	bcc.n	8109154 <UART_WaitOnFlagUntilTimeout+0x32>
 810914e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109150:	2b00      	cmp	r3, #0
 8109152:	d140      	bne.n	81091d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8109154:	68fb      	ldr	r3, [r7, #12]
 8109156:	681b      	ldr	r3, [r3, #0]
 8109158:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810915a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810915c:	e853 3f00 	ldrex	r3, [r3]
 8109160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8109162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109168:	667b      	str	r3, [r7, #100]	; 0x64
 810916a:	68fb      	ldr	r3, [r7, #12]
 810916c:	681b      	ldr	r3, [r3, #0]
 810916e:	461a      	mov	r2, r3
 8109170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8109172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8109174:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8109178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810917a:	e841 2300 	strex	r3, r2, [r1]
 810917e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8109180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109182:	2b00      	cmp	r3, #0
 8109184:	d1e6      	bne.n	8109154 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109186:	68fb      	ldr	r3, [r7, #12]
 8109188:	681b      	ldr	r3, [r3, #0]
 810918a:	3308      	adds	r3, #8
 810918c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109190:	e853 3f00 	ldrex	r3, [r3]
 8109194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8109196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109198:	f023 0301 	bic.w	r3, r3, #1
 810919c:	663b      	str	r3, [r7, #96]	; 0x60
 810919e:	68fb      	ldr	r3, [r7, #12]
 81091a0:	681b      	ldr	r3, [r3, #0]
 81091a2:	3308      	adds	r3, #8
 81091a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81091a6:	64ba      	str	r2, [r7, #72]	; 0x48
 81091a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81091aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81091ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81091ae:	e841 2300 	strex	r3, r2, [r1]
 81091b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81091b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81091b6:	2b00      	cmp	r3, #0
 81091b8:	d1e5      	bne.n	8109186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81091ba:	68fb      	ldr	r3, [r7, #12]
 81091bc:	2220      	movs	r2, #32
 81091be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81091c2:	68fb      	ldr	r3, [r7, #12]
 81091c4:	2220      	movs	r2, #32
 81091c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81091ca:	68fb      	ldr	r3, [r7, #12]
 81091cc:	2200      	movs	r2, #0
 81091ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81091d2:	2303      	movs	r3, #3
 81091d4:	e069      	b.n	81092aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81091d6:	68fb      	ldr	r3, [r7, #12]
 81091d8:	681b      	ldr	r3, [r3, #0]
 81091da:	681b      	ldr	r3, [r3, #0]
 81091dc:	f003 0304 	and.w	r3, r3, #4
 81091e0:	2b00      	cmp	r3, #0
 81091e2:	d051      	beq.n	8109288 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81091e4:	68fb      	ldr	r3, [r7, #12]
 81091e6:	681b      	ldr	r3, [r3, #0]
 81091e8:	69db      	ldr	r3, [r3, #28]
 81091ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81091ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81091f2:	d149      	bne.n	8109288 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81091f4:	68fb      	ldr	r3, [r7, #12]
 81091f6:	681b      	ldr	r3, [r3, #0]
 81091f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81091fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81091fe:	68fb      	ldr	r3, [r7, #12]
 8109200:	681b      	ldr	r3, [r3, #0]
 8109202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109206:	e853 3f00 	ldrex	r3, [r3]
 810920a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810920e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8109214:	68fb      	ldr	r3, [r7, #12]
 8109216:	681b      	ldr	r3, [r3, #0]
 8109218:	461a      	mov	r2, r3
 810921a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810921c:	637b      	str	r3, [r7, #52]	; 0x34
 810921e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8109222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109224:	e841 2300 	strex	r3, r2, [r1]
 8109228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810922c:	2b00      	cmp	r3, #0
 810922e:	d1e6      	bne.n	81091fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109230:	68fb      	ldr	r3, [r7, #12]
 8109232:	681b      	ldr	r3, [r3, #0]
 8109234:	3308      	adds	r3, #8
 8109236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109238:	697b      	ldr	r3, [r7, #20]
 810923a:	e853 3f00 	ldrex	r3, [r3]
 810923e:	613b      	str	r3, [r7, #16]
   return(result);
 8109240:	693b      	ldr	r3, [r7, #16]
 8109242:	f023 0301 	bic.w	r3, r3, #1
 8109246:	66bb      	str	r3, [r7, #104]	; 0x68
 8109248:	68fb      	ldr	r3, [r7, #12]
 810924a:	681b      	ldr	r3, [r3, #0]
 810924c:	3308      	adds	r3, #8
 810924e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8109250:	623a      	str	r2, [r7, #32]
 8109252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109254:	69f9      	ldr	r1, [r7, #28]
 8109256:	6a3a      	ldr	r2, [r7, #32]
 8109258:	e841 2300 	strex	r3, r2, [r1]
 810925c:	61bb      	str	r3, [r7, #24]
   return(result);
 810925e:	69bb      	ldr	r3, [r7, #24]
 8109260:	2b00      	cmp	r3, #0
 8109262:	d1e5      	bne.n	8109230 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8109264:	68fb      	ldr	r3, [r7, #12]
 8109266:	2220      	movs	r2, #32
 8109268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810926c:	68fb      	ldr	r3, [r7, #12]
 810926e:	2220      	movs	r2, #32
 8109270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109274:	68fb      	ldr	r3, [r7, #12]
 8109276:	2220      	movs	r2, #32
 8109278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810927c:	68fb      	ldr	r3, [r7, #12]
 810927e:	2200      	movs	r2, #0
 8109280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8109284:	2303      	movs	r3, #3
 8109286:	e010      	b.n	81092aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109288:	68fb      	ldr	r3, [r7, #12]
 810928a:	681b      	ldr	r3, [r3, #0]
 810928c:	69da      	ldr	r2, [r3, #28]
 810928e:	68bb      	ldr	r3, [r7, #8]
 8109290:	4013      	ands	r3, r2
 8109292:	68ba      	ldr	r2, [r7, #8]
 8109294:	429a      	cmp	r2, r3
 8109296:	bf0c      	ite	eq
 8109298:	2301      	moveq	r3, #1
 810929a:	2300      	movne	r3, #0
 810929c:	b2db      	uxtb	r3, r3
 810929e:	461a      	mov	r2, r3
 81092a0:	79fb      	ldrb	r3, [r7, #7]
 81092a2:	429a      	cmp	r2, r3
 81092a4:	f43f af46 	beq.w	8109134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81092a8:	2300      	movs	r3, #0
}
 81092aa:	4618      	mov	r0, r3
 81092ac:	3770      	adds	r7, #112	; 0x70
 81092ae:	46bd      	mov	sp, r7
 81092b0:	bd80      	pop	{r7, pc}

081092b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81092b2:	b480      	push	{r7}
 81092b4:	b085      	sub	sp, #20
 81092b6:	af00      	add	r7, sp, #0
 81092b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81092ba:	687b      	ldr	r3, [r7, #4]
 81092bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81092c0:	2b01      	cmp	r3, #1
 81092c2:	d101      	bne.n	81092c8 <HAL_UARTEx_DisableFifoMode+0x16>
 81092c4:	2302      	movs	r3, #2
 81092c6:	e027      	b.n	8109318 <HAL_UARTEx_DisableFifoMode+0x66>
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	2201      	movs	r2, #1
 81092cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	2224      	movs	r2, #36	; 0x24
 81092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	681b      	ldr	r3, [r3, #0]
 81092dc:	681b      	ldr	r3, [r3, #0]
 81092de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	681b      	ldr	r3, [r3, #0]
 81092e4:	681a      	ldr	r2, [r3, #0]
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	681b      	ldr	r3, [r3, #0]
 81092ea:	f022 0201 	bic.w	r2, r2, #1
 81092ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81092f0:	68fb      	ldr	r3, [r7, #12]
 81092f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81092f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	2200      	movs	r2, #0
 81092fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	681b      	ldr	r3, [r3, #0]
 8109302:	68fa      	ldr	r2, [r7, #12]
 8109304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	2220      	movs	r2, #32
 810930a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	2200      	movs	r2, #0
 8109312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109316:	2300      	movs	r3, #0
}
 8109318:	4618      	mov	r0, r3
 810931a:	3714      	adds	r7, #20
 810931c:	46bd      	mov	sp, r7
 810931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109322:	4770      	bx	lr

08109324 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109324:	b580      	push	{r7, lr}
 8109326:	b084      	sub	sp, #16
 8109328:	af00      	add	r7, sp, #0
 810932a:	6078      	str	r0, [r7, #4]
 810932c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109334:	2b01      	cmp	r3, #1
 8109336:	d101      	bne.n	810933c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109338:	2302      	movs	r3, #2
 810933a:	e02d      	b.n	8109398 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	2201      	movs	r2, #1
 8109340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	2224      	movs	r2, #36	; 0x24
 8109348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	681b      	ldr	r3, [r3, #0]
 8109350:	681b      	ldr	r3, [r3, #0]
 8109352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109354:	687b      	ldr	r3, [r7, #4]
 8109356:	681b      	ldr	r3, [r3, #0]
 8109358:	681a      	ldr	r2, [r3, #0]
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	681b      	ldr	r3, [r3, #0]
 810935e:	f022 0201 	bic.w	r2, r2, #1
 8109362:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109364:	687b      	ldr	r3, [r7, #4]
 8109366:	681b      	ldr	r3, [r3, #0]
 8109368:	689b      	ldr	r3, [r3, #8]
 810936a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	681b      	ldr	r3, [r3, #0]
 8109372:	683a      	ldr	r2, [r7, #0]
 8109374:	430a      	orrs	r2, r1
 8109376:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109378:	6878      	ldr	r0, [r7, #4]
 810937a:	f000 f84f 	bl	810941c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810937e:	687b      	ldr	r3, [r7, #4]
 8109380:	681b      	ldr	r3, [r3, #0]
 8109382:	68fa      	ldr	r2, [r7, #12]
 8109384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	2220      	movs	r2, #32
 810938a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	2200      	movs	r2, #0
 8109392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109396:	2300      	movs	r3, #0
}
 8109398:	4618      	mov	r0, r3
 810939a:	3710      	adds	r7, #16
 810939c:	46bd      	mov	sp, r7
 810939e:	bd80      	pop	{r7, pc}

081093a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81093a0:	b580      	push	{r7, lr}
 81093a2:	b084      	sub	sp, #16
 81093a4:	af00      	add	r7, sp, #0
 81093a6:	6078      	str	r0, [r7, #4]
 81093a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81093b0:	2b01      	cmp	r3, #1
 81093b2:	d101      	bne.n	81093b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81093b4:	2302      	movs	r3, #2
 81093b6:	e02d      	b.n	8109414 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	2201      	movs	r2, #1
 81093bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	2224      	movs	r2, #36	; 0x24
 81093c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	681b      	ldr	r3, [r3, #0]
 81093cc:	681b      	ldr	r3, [r3, #0]
 81093ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	681b      	ldr	r3, [r3, #0]
 81093d4:	681a      	ldr	r2, [r3, #0]
 81093d6:	687b      	ldr	r3, [r7, #4]
 81093d8:	681b      	ldr	r3, [r3, #0]
 81093da:	f022 0201 	bic.w	r2, r2, #1
 81093de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81093e0:	687b      	ldr	r3, [r7, #4]
 81093e2:	681b      	ldr	r3, [r3, #0]
 81093e4:	689b      	ldr	r3, [r3, #8]
 81093e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	681b      	ldr	r3, [r3, #0]
 81093ee:	683a      	ldr	r2, [r7, #0]
 81093f0:	430a      	orrs	r2, r1
 81093f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81093f4:	6878      	ldr	r0, [r7, #4]
 81093f6:	f000 f811 	bl	810941c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	681b      	ldr	r3, [r3, #0]
 81093fe:	68fa      	ldr	r2, [r7, #12]
 8109400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	2220      	movs	r2, #32
 8109406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	2200      	movs	r2, #0
 810940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109412:	2300      	movs	r3, #0
}
 8109414:	4618      	mov	r0, r3
 8109416:	3710      	adds	r7, #16
 8109418:	46bd      	mov	sp, r7
 810941a:	bd80      	pop	{r7, pc}

0810941c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810941c:	b480      	push	{r7}
 810941e:	b085      	sub	sp, #20
 8109420:	af00      	add	r7, sp, #0
 8109422:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109428:	2b00      	cmp	r3, #0
 810942a:	d108      	bne.n	810943e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	2201      	movs	r2, #1
 8109430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109434:	687b      	ldr	r3, [r7, #4]
 8109436:	2201      	movs	r2, #1
 8109438:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810943c:	e031      	b.n	81094a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810943e:	2310      	movs	r3, #16
 8109440:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109442:	2310      	movs	r3, #16
 8109444:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109446:	687b      	ldr	r3, [r7, #4]
 8109448:	681b      	ldr	r3, [r3, #0]
 810944a:	689b      	ldr	r3, [r3, #8]
 810944c:	0e5b      	lsrs	r3, r3, #25
 810944e:	b2db      	uxtb	r3, r3
 8109450:	f003 0307 	and.w	r3, r3, #7
 8109454:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109456:	687b      	ldr	r3, [r7, #4]
 8109458:	681b      	ldr	r3, [r3, #0]
 810945a:	689b      	ldr	r3, [r3, #8]
 810945c:	0f5b      	lsrs	r3, r3, #29
 810945e:	b2db      	uxtb	r3, r3
 8109460:	f003 0307 	and.w	r3, r3, #7
 8109464:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109466:	7bbb      	ldrb	r3, [r7, #14]
 8109468:	7b3a      	ldrb	r2, [r7, #12]
 810946a:	4911      	ldr	r1, [pc, #68]	; (81094b0 <UARTEx_SetNbDataToProcess+0x94>)
 810946c:	5c8a      	ldrb	r2, [r1, r2]
 810946e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109472:	7b3a      	ldrb	r2, [r7, #12]
 8109474:	490f      	ldr	r1, [pc, #60]	; (81094b4 <UARTEx_SetNbDataToProcess+0x98>)
 8109476:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109478:	fb93 f3f2 	sdiv	r3, r3, r2
 810947c:	b29a      	uxth	r2, r3
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109484:	7bfb      	ldrb	r3, [r7, #15]
 8109486:	7b7a      	ldrb	r2, [r7, #13]
 8109488:	4909      	ldr	r1, [pc, #36]	; (81094b0 <UARTEx_SetNbDataToProcess+0x94>)
 810948a:	5c8a      	ldrb	r2, [r1, r2]
 810948c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109490:	7b7a      	ldrb	r2, [r7, #13]
 8109492:	4908      	ldr	r1, [pc, #32]	; (81094b4 <UARTEx_SetNbDataToProcess+0x98>)
 8109494:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109496:	fb93 f3f2 	sdiv	r3, r3, r2
 810949a:	b29a      	uxth	r2, r3
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81094a2:	bf00      	nop
 81094a4:	3714      	adds	r7, #20
 81094a6:	46bd      	mov	sp, r7
 81094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ac:	4770      	bx	lr
 81094ae:	bf00      	nop
 81094b0:	0810e028 	.word	0x0810e028
 81094b4:	0810e030 	.word	0x0810e030

081094b8 <atoi>:
 81094b8:	220a      	movs	r2, #10
 81094ba:	2100      	movs	r1, #0
 81094bc:	f001 bedc 	b.w	810b278 <strtol>

081094c0 <calloc>:
 81094c0:	4b02      	ldr	r3, [pc, #8]	; (81094cc <calloc+0xc>)
 81094c2:	460a      	mov	r2, r1
 81094c4:	4601      	mov	r1, r0
 81094c6:	6818      	ldr	r0, [r3, #0]
 81094c8:	f000 b848 	b.w	810955c <_calloc_r>
 81094cc:	10000014 	.word	0x10000014

081094d0 <__errno>:
 81094d0:	4b01      	ldr	r3, [pc, #4]	; (81094d8 <__errno+0x8>)
 81094d2:	6818      	ldr	r0, [r3, #0]
 81094d4:	4770      	bx	lr
 81094d6:	bf00      	nop
 81094d8:	10000014 	.word	0x10000014

081094dc <exit>:
 81094dc:	b508      	push	{r3, lr}
 81094de:	4b07      	ldr	r3, [pc, #28]	; (81094fc <exit+0x20>)
 81094e0:	4604      	mov	r4, r0
 81094e2:	b113      	cbz	r3, 81094ea <exit+0xe>
 81094e4:	2100      	movs	r1, #0
 81094e6:	f3af 8000 	nop.w
 81094ea:	4b05      	ldr	r3, [pc, #20]	; (8109500 <exit+0x24>)
 81094ec:	6818      	ldr	r0, [r3, #0]
 81094ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 81094f0:	b103      	cbz	r3, 81094f4 <exit+0x18>
 81094f2:	4798      	blx	r3
 81094f4:	4620      	mov	r0, r4
 81094f6:	f7f8 fee7 	bl	81022c8 <_exit>
 81094fa:	bf00      	nop
 81094fc:	00000000 	.word	0x00000000
 8109500:	0810e038 	.word	0x0810e038

08109504 <__libc_init_array>:
 8109504:	b570      	push	{r4, r5, r6, lr}
 8109506:	4d0d      	ldr	r5, [pc, #52]	; (810953c <__libc_init_array+0x38>)
 8109508:	4c0d      	ldr	r4, [pc, #52]	; (8109540 <__libc_init_array+0x3c>)
 810950a:	1b64      	subs	r4, r4, r5
 810950c:	10a4      	asrs	r4, r4, #2
 810950e:	2600      	movs	r6, #0
 8109510:	42a6      	cmp	r6, r4
 8109512:	d109      	bne.n	8109528 <__libc_init_array+0x24>
 8109514:	4d0b      	ldr	r5, [pc, #44]	; (8109544 <__libc_init_array+0x40>)
 8109516:	4c0c      	ldr	r4, [pc, #48]	; (8109548 <__libc_init_array+0x44>)
 8109518:	f004 fd20 	bl	810df5c <_init>
 810951c:	1b64      	subs	r4, r4, r5
 810951e:	10a4      	asrs	r4, r4, #2
 8109520:	2600      	movs	r6, #0
 8109522:	42a6      	cmp	r6, r4
 8109524:	d105      	bne.n	8109532 <__libc_init_array+0x2e>
 8109526:	bd70      	pop	{r4, r5, r6, pc}
 8109528:	f855 3b04 	ldr.w	r3, [r5], #4
 810952c:	4798      	blx	r3
 810952e:	3601      	adds	r6, #1
 8109530:	e7ee      	b.n	8109510 <__libc_init_array+0xc>
 8109532:	f855 3b04 	ldr.w	r3, [r5], #4
 8109536:	4798      	blx	r3
 8109538:	3601      	adds	r6, #1
 810953a:	e7f2      	b.n	8109522 <__libc_init_array+0x1e>
 810953c:	0810e4ec 	.word	0x0810e4ec
 8109540:	0810e4ec 	.word	0x0810e4ec
 8109544:	0810e4ec 	.word	0x0810e4ec
 8109548:	0810e4f0 	.word	0x0810e4f0

0810954c <memset>:
 810954c:	4402      	add	r2, r0
 810954e:	4603      	mov	r3, r0
 8109550:	4293      	cmp	r3, r2
 8109552:	d100      	bne.n	8109556 <memset+0xa>
 8109554:	4770      	bx	lr
 8109556:	f803 1b01 	strb.w	r1, [r3], #1
 810955a:	e7f9      	b.n	8109550 <memset+0x4>

0810955c <_calloc_r>:
 810955c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810955e:	fba1 2402 	umull	r2, r4, r1, r2
 8109562:	b94c      	cbnz	r4, 8109578 <_calloc_r+0x1c>
 8109564:	4611      	mov	r1, r2
 8109566:	9201      	str	r2, [sp, #4]
 8109568:	f000 f82e 	bl	81095c8 <_malloc_r>
 810956c:	9a01      	ldr	r2, [sp, #4]
 810956e:	4605      	mov	r5, r0
 8109570:	b930      	cbnz	r0, 8109580 <_calloc_r+0x24>
 8109572:	4628      	mov	r0, r5
 8109574:	b003      	add	sp, #12
 8109576:	bd30      	pop	{r4, r5, pc}
 8109578:	220c      	movs	r2, #12
 810957a:	6002      	str	r2, [r0, #0]
 810957c:	2500      	movs	r5, #0
 810957e:	e7f8      	b.n	8109572 <_calloc_r+0x16>
 8109580:	4621      	mov	r1, r4
 8109582:	f7ff ffe3 	bl	810954c <memset>
 8109586:	e7f4      	b.n	8109572 <_calloc_r+0x16>

08109588 <sbrk_aligned>:
 8109588:	b570      	push	{r4, r5, r6, lr}
 810958a:	4e0e      	ldr	r6, [pc, #56]	; (81095c4 <sbrk_aligned+0x3c>)
 810958c:	460c      	mov	r4, r1
 810958e:	6831      	ldr	r1, [r6, #0]
 8109590:	4605      	mov	r5, r0
 8109592:	b911      	cbnz	r1, 810959a <sbrk_aligned+0x12>
 8109594:	f000 ff7c 	bl	810a490 <_sbrk_r>
 8109598:	6030      	str	r0, [r6, #0]
 810959a:	4621      	mov	r1, r4
 810959c:	4628      	mov	r0, r5
 810959e:	f000 ff77 	bl	810a490 <_sbrk_r>
 81095a2:	1c43      	adds	r3, r0, #1
 81095a4:	d00a      	beq.n	81095bc <sbrk_aligned+0x34>
 81095a6:	1cc4      	adds	r4, r0, #3
 81095a8:	f024 0403 	bic.w	r4, r4, #3
 81095ac:	42a0      	cmp	r0, r4
 81095ae:	d007      	beq.n	81095c0 <sbrk_aligned+0x38>
 81095b0:	1a21      	subs	r1, r4, r0
 81095b2:	4628      	mov	r0, r5
 81095b4:	f000 ff6c 	bl	810a490 <_sbrk_r>
 81095b8:	3001      	adds	r0, #1
 81095ba:	d101      	bne.n	81095c0 <sbrk_aligned+0x38>
 81095bc:	f04f 34ff 	mov.w	r4, #4294967295
 81095c0:	4620      	mov	r0, r4
 81095c2:	bd70      	pop	{r4, r5, r6, pc}
 81095c4:	1000052c 	.word	0x1000052c

081095c8 <_malloc_r>:
 81095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81095cc:	1ccd      	adds	r5, r1, #3
 81095ce:	f025 0503 	bic.w	r5, r5, #3
 81095d2:	3508      	adds	r5, #8
 81095d4:	2d0c      	cmp	r5, #12
 81095d6:	bf38      	it	cc
 81095d8:	250c      	movcc	r5, #12
 81095da:	2d00      	cmp	r5, #0
 81095dc:	4607      	mov	r7, r0
 81095de:	db01      	blt.n	81095e4 <_malloc_r+0x1c>
 81095e0:	42a9      	cmp	r1, r5
 81095e2:	d905      	bls.n	81095f0 <_malloc_r+0x28>
 81095e4:	230c      	movs	r3, #12
 81095e6:	603b      	str	r3, [r7, #0]
 81095e8:	2600      	movs	r6, #0
 81095ea:	4630      	mov	r0, r6
 81095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81095f0:	4e2e      	ldr	r6, [pc, #184]	; (81096ac <_malloc_r+0xe4>)
 81095f2:	f003 fb41 	bl	810cc78 <__malloc_lock>
 81095f6:	6833      	ldr	r3, [r6, #0]
 81095f8:	461c      	mov	r4, r3
 81095fa:	bb34      	cbnz	r4, 810964a <_malloc_r+0x82>
 81095fc:	4629      	mov	r1, r5
 81095fe:	4638      	mov	r0, r7
 8109600:	f7ff ffc2 	bl	8109588 <sbrk_aligned>
 8109604:	1c43      	adds	r3, r0, #1
 8109606:	4604      	mov	r4, r0
 8109608:	d14d      	bne.n	81096a6 <_malloc_r+0xde>
 810960a:	6834      	ldr	r4, [r6, #0]
 810960c:	4626      	mov	r6, r4
 810960e:	2e00      	cmp	r6, #0
 8109610:	d140      	bne.n	8109694 <_malloc_r+0xcc>
 8109612:	6823      	ldr	r3, [r4, #0]
 8109614:	4631      	mov	r1, r6
 8109616:	4638      	mov	r0, r7
 8109618:	eb04 0803 	add.w	r8, r4, r3
 810961c:	f000 ff38 	bl	810a490 <_sbrk_r>
 8109620:	4580      	cmp	r8, r0
 8109622:	d13a      	bne.n	810969a <_malloc_r+0xd2>
 8109624:	6821      	ldr	r1, [r4, #0]
 8109626:	3503      	adds	r5, #3
 8109628:	1a6d      	subs	r5, r5, r1
 810962a:	f025 0503 	bic.w	r5, r5, #3
 810962e:	3508      	adds	r5, #8
 8109630:	2d0c      	cmp	r5, #12
 8109632:	bf38      	it	cc
 8109634:	250c      	movcc	r5, #12
 8109636:	4629      	mov	r1, r5
 8109638:	4638      	mov	r0, r7
 810963a:	f7ff ffa5 	bl	8109588 <sbrk_aligned>
 810963e:	3001      	adds	r0, #1
 8109640:	d02b      	beq.n	810969a <_malloc_r+0xd2>
 8109642:	6823      	ldr	r3, [r4, #0]
 8109644:	442b      	add	r3, r5
 8109646:	6023      	str	r3, [r4, #0]
 8109648:	e00e      	b.n	8109668 <_malloc_r+0xa0>
 810964a:	6822      	ldr	r2, [r4, #0]
 810964c:	1b52      	subs	r2, r2, r5
 810964e:	d41e      	bmi.n	810968e <_malloc_r+0xc6>
 8109650:	2a0b      	cmp	r2, #11
 8109652:	d916      	bls.n	8109682 <_malloc_r+0xba>
 8109654:	1961      	adds	r1, r4, r5
 8109656:	42a3      	cmp	r3, r4
 8109658:	6025      	str	r5, [r4, #0]
 810965a:	bf18      	it	ne
 810965c:	6059      	strne	r1, [r3, #4]
 810965e:	6863      	ldr	r3, [r4, #4]
 8109660:	bf08      	it	eq
 8109662:	6031      	streq	r1, [r6, #0]
 8109664:	5162      	str	r2, [r4, r5]
 8109666:	604b      	str	r3, [r1, #4]
 8109668:	4638      	mov	r0, r7
 810966a:	f104 060b 	add.w	r6, r4, #11
 810966e:	f003 fb09 	bl	810cc84 <__malloc_unlock>
 8109672:	f026 0607 	bic.w	r6, r6, #7
 8109676:	1d23      	adds	r3, r4, #4
 8109678:	1af2      	subs	r2, r6, r3
 810967a:	d0b6      	beq.n	81095ea <_malloc_r+0x22>
 810967c:	1b9b      	subs	r3, r3, r6
 810967e:	50a3      	str	r3, [r4, r2]
 8109680:	e7b3      	b.n	81095ea <_malloc_r+0x22>
 8109682:	6862      	ldr	r2, [r4, #4]
 8109684:	42a3      	cmp	r3, r4
 8109686:	bf0c      	ite	eq
 8109688:	6032      	streq	r2, [r6, #0]
 810968a:	605a      	strne	r2, [r3, #4]
 810968c:	e7ec      	b.n	8109668 <_malloc_r+0xa0>
 810968e:	4623      	mov	r3, r4
 8109690:	6864      	ldr	r4, [r4, #4]
 8109692:	e7b2      	b.n	81095fa <_malloc_r+0x32>
 8109694:	4634      	mov	r4, r6
 8109696:	6876      	ldr	r6, [r6, #4]
 8109698:	e7b9      	b.n	810960e <_malloc_r+0x46>
 810969a:	230c      	movs	r3, #12
 810969c:	603b      	str	r3, [r7, #0]
 810969e:	4638      	mov	r0, r7
 81096a0:	f003 faf0 	bl	810cc84 <__malloc_unlock>
 81096a4:	e7a1      	b.n	81095ea <_malloc_r+0x22>
 81096a6:	6025      	str	r5, [r4, #0]
 81096a8:	e7de      	b.n	8109668 <_malloc_r+0xa0>
 81096aa:	bf00      	nop
 81096ac:	10000528 	.word	0x10000528

081096b0 <__cvt>:
 81096b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81096b4:	ec55 4b10 	vmov	r4, r5, d0
 81096b8:	2d00      	cmp	r5, #0
 81096ba:	460e      	mov	r6, r1
 81096bc:	4619      	mov	r1, r3
 81096be:	462b      	mov	r3, r5
 81096c0:	bfbb      	ittet	lt
 81096c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81096c6:	461d      	movlt	r5, r3
 81096c8:	2300      	movge	r3, #0
 81096ca:	232d      	movlt	r3, #45	; 0x2d
 81096cc:	700b      	strb	r3, [r1, #0]
 81096ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81096d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81096d4:	4691      	mov	r9, r2
 81096d6:	f023 0820 	bic.w	r8, r3, #32
 81096da:	bfbc      	itt	lt
 81096dc:	4622      	movlt	r2, r4
 81096de:	4614      	movlt	r4, r2
 81096e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81096e4:	d005      	beq.n	81096f2 <__cvt+0x42>
 81096e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81096ea:	d100      	bne.n	81096ee <__cvt+0x3e>
 81096ec:	3601      	adds	r6, #1
 81096ee:	2102      	movs	r1, #2
 81096f0:	e000      	b.n	81096f4 <__cvt+0x44>
 81096f2:	2103      	movs	r1, #3
 81096f4:	ab03      	add	r3, sp, #12
 81096f6:	9301      	str	r3, [sp, #4]
 81096f8:	ab02      	add	r3, sp, #8
 81096fa:	9300      	str	r3, [sp, #0]
 81096fc:	ec45 4b10 	vmov	d0, r4, r5
 8109700:	4653      	mov	r3, sl
 8109702:	4632      	mov	r2, r6
 8109704:	f001 ff10 	bl	810b528 <_dtoa_r>
 8109708:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810970c:	4607      	mov	r7, r0
 810970e:	d102      	bne.n	8109716 <__cvt+0x66>
 8109710:	f019 0f01 	tst.w	r9, #1
 8109714:	d022      	beq.n	810975c <__cvt+0xac>
 8109716:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810971a:	eb07 0906 	add.w	r9, r7, r6
 810971e:	d110      	bne.n	8109742 <__cvt+0x92>
 8109720:	783b      	ldrb	r3, [r7, #0]
 8109722:	2b30      	cmp	r3, #48	; 0x30
 8109724:	d10a      	bne.n	810973c <__cvt+0x8c>
 8109726:	2200      	movs	r2, #0
 8109728:	2300      	movs	r3, #0
 810972a:	4620      	mov	r0, r4
 810972c:	4629      	mov	r1, r5
 810972e:	f7f7 fa53 	bl	8100bd8 <__aeabi_dcmpeq>
 8109732:	b918      	cbnz	r0, 810973c <__cvt+0x8c>
 8109734:	f1c6 0601 	rsb	r6, r6, #1
 8109738:	f8ca 6000 	str.w	r6, [sl]
 810973c:	f8da 3000 	ldr.w	r3, [sl]
 8109740:	4499      	add	r9, r3
 8109742:	2200      	movs	r2, #0
 8109744:	2300      	movs	r3, #0
 8109746:	4620      	mov	r0, r4
 8109748:	4629      	mov	r1, r5
 810974a:	f7f7 fa45 	bl	8100bd8 <__aeabi_dcmpeq>
 810974e:	b108      	cbz	r0, 8109754 <__cvt+0xa4>
 8109750:	f8cd 900c 	str.w	r9, [sp, #12]
 8109754:	2230      	movs	r2, #48	; 0x30
 8109756:	9b03      	ldr	r3, [sp, #12]
 8109758:	454b      	cmp	r3, r9
 810975a:	d307      	bcc.n	810976c <__cvt+0xbc>
 810975c:	9b03      	ldr	r3, [sp, #12]
 810975e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109760:	1bdb      	subs	r3, r3, r7
 8109762:	4638      	mov	r0, r7
 8109764:	6013      	str	r3, [r2, #0]
 8109766:	b004      	add	sp, #16
 8109768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810976c:	1c59      	adds	r1, r3, #1
 810976e:	9103      	str	r1, [sp, #12]
 8109770:	701a      	strb	r2, [r3, #0]
 8109772:	e7f0      	b.n	8109756 <__cvt+0xa6>

08109774 <__exponent>:
 8109774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109776:	4603      	mov	r3, r0
 8109778:	2900      	cmp	r1, #0
 810977a:	bfb8      	it	lt
 810977c:	4249      	neglt	r1, r1
 810977e:	f803 2b02 	strb.w	r2, [r3], #2
 8109782:	bfb4      	ite	lt
 8109784:	222d      	movlt	r2, #45	; 0x2d
 8109786:	222b      	movge	r2, #43	; 0x2b
 8109788:	2909      	cmp	r1, #9
 810978a:	7042      	strb	r2, [r0, #1]
 810978c:	dd2a      	ble.n	81097e4 <__exponent+0x70>
 810978e:	f10d 0407 	add.w	r4, sp, #7
 8109792:	46a4      	mov	ip, r4
 8109794:	270a      	movs	r7, #10
 8109796:	46a6      	mov	lr, r4
 8109798:	460a      	mov	r2, r1
 810979a:	fb91 f6f7 	sdiv	r6, r1, r7
 810979e:	fb07 1516 	mls	r5, r7, r6, r1
 81097a2:	3530      	adds	r5, #48	; 0x30
 81097a4:	2a63      	cmp	r2, #99	; 0x63
 81097a6:	f104 34ff 	add.w	r4, r4, #4294967295
 81097aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 81097ae:	4631      	mov	r1, r6
 81097b0:	dcf1      	bgt.n	8109796 <__exponent+0x22>
 81097b2:	3130      	adds	r1, #48	; 0x30
 81097b4:	f1ae 0502 	sub.w	r5, lr, #2
 81097b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 81097bc:	1c44      	adds	r4, r0, #1
 81097be:	4629      	mov	r1, r5
 81097c0:	4561      	cmp	r1, ip
 81097c2:	d30a      	bcc.n	81097da <__exponent+0x66>
 81097c4:	f10d 0209 	add.w	r2, sp, #9
 81097c8:	eba2 020e 	sub.w	r2, r2, lr
 81097cc:	4565      	cmp	r5, ip
 81097ce:	bf88      	it	hi
 81097d0:	2200      	movhi	r2, #0
 81097d2:	4413      	add	r3, r2
 81097d4:	1a18      	subs	r0, r3, r0
 81097d6:	b003      	add	sp, #12
 81097d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81097da:	f811 2b01 	ldrb.w	r2, [r1], #1
 81097de:	f804 2f01 	strb.w	r2, [r4, #1]!
 81097e2:	e7ed      	b.n	81097c0 <__exponent+0x4c>
 81097e4:	2330      	movs	r3, #48	; 0x30
 81097e6:	3130      	adds	r1, #48	; 0x30
 81097e8:	7083      	strb	r3, [r0, #2]
 81097ea:	70c1      	strb	r1, [r0, #3]
 81097ec:	1d03      	adds	r3, r0, #4
 81097ee:	e7f1      	b.n	81097d4 <__exponent+0x60>

081097f0 <_printf_float>:
 81097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81097f4:	ed2d 8b02 	vpush	{d8}
 81097f8:	b08d      	sub	sp, #52	; 0x34
 81097fa:	460c      	mov	r4, r1
 81097fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109800:	4616      	mov	r6, r2
 8109802:	461f      	mov	r7, r3
 8109804:	4605      	mov	r5, r0
 8109806:	f003 f9a3 	bl	810cb50 <_localeconv_r>
 810980a:	f8d0 a000 	ldr.w	sl, [r0]
 810980e:	4650      	mov	r0, sl
 8109810:	f7f6 fd66 	bl	81002e0 <strlen>
 8109814:	2300      	movs	r3, #0
 8109816:	930a      	str	r3, [sp, #40]	; 0x28
 8109818:	6823      	ldr	r3, [r4, #0]
 810981a:	9305      	str	r3, [sp, #20]
 810981c:	f8d8 3000 	ldr.w	r3, [r8]
 8109820:	f894 b018 	ldrb.w	fp, [r4, #24]
 8109824:	3307      	adds	r3, #7
 8109826:	f023 0307 	bic.w	r3, r3, #7
 810982a:	f103 0208 	add.w	r2, r3, #8
 810982e:	f8c8 2000 	str.w	r2, [r8]
 8109832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109836:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810983a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810983e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109842:	9307      	str	r3, [sp, #28]
 8109844:	f8cd 8018 	str.w	r8, [sp, #24]
 8109848:	ee08 0a10 	vmov	s16, r0
 810984c:	4b9f      	ldr	r3, [pc, #636]	; (8109acc <_printf_float+0x2dc>)
 810984e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109852:	f04f 32ff 	mov.w	r2, #4294967295
 8109856:	f7f7 f9f1 	bl	8100c3c <__aeabi_dcmpun>
 810985a:	bb88      	cbnz	r0, 81098c0 <_printf_float+0xd0>
 810985c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109860:	4b9a      	ldr	r3, [pc, #616]	; (8109acc <_printf_float+0x2dc>)
 8109862:	f04f 32ff 	mov.w	r2, #4294967295
 8109866:	f7f7 f9cb 	bl	8100c00 <__aeabi_dcmple>
 810986a:	bb48      	cbnz	r0, 81098c0 <_printf_float+0xd0>
 810986c:	2200      	movs	r2, #0
 810986e:	2300      	movs	r3, #0
 8109870:	4640      	mov	r0, r8
 8109872:	4649      	mov	r1, r9
 8109874:	f7f7 f9ba 	bl	8100bec <__aeabi_dcmplt>
 8109878:	b110      	cbz	r0, 8109880 <_printf_float+0x90>
 810987a:	232d      	movs	r3, #45	; 0x2d
 810987c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109880:	4b93      	ldr	r3, [pc, #588]	; (8109ad0 <_printf_float+0x2e0>)
 8109882:	4894      	ldr	r0, [pc, #592]	; (8109ad4 <_printf_float+0x2e4>)
 8109884:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8109888:	bf94      	ite	ls
 810988a:	4698      	movls	r8, r3
 810988c:	4680      	movhi	r8, r0
 810988e:	2303      	movs	r3, #3
 8109890:	6123      	str	r3, [r4, #16]
 8109892:	9b05      	ldr	r3, [sp, #20]
 8109894:	f023 0204 	bic.w	r2, r3, #4
 8109898:	6022      	str	r2, [r4, #0]
 810989a:	f04f 0900 	mov.w	r9, #0
 810989e:	9700      	str	r7, [sp, #0]
 81098a0:	4633      	mov	r3, r6
 81098a2:	aa0b      	add	r2, sp, #44	; 0x2c
 81098a4:	4621      	mov	r1, r4
 81098a6:	4628      	mov	r0, r5
 81098a8:	f000 f9d8 	bl	8109c5c <_printf_common>
 81098ac:	3001      	adds	r0, #1
 81098ae:	f040 8090 	bne.w	81099d2 <_printf_float+0x1e2>
 81098b2:	f04f 30ff 	mov.w	r0, #4294967295
 81098b6:	b00d      	add	sp, #52	; 0x34
 81098b8:	ecbd 8b02 	vpop	{d8}
 81098bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81098c0:	4642      	mov	r2, r8
 81098c2:	464b      	mov	r3, r9
 81098c4:	4640      	mov	r0, r8
 81098c6:	4649      	mov	r1, r9
 81098c8:	f7f7 f9b8 	bl	8100c3c <__aeabi_dcmpun>
 81098cc:	b140      	cbz	r0, 81098e0 <_printf_float+0xf0>
 81098ce:	464b      	mov	r3, r9
 81098d0:	2b00      	cmp	r3, #0
 81098d2:	bfbc      	itt	lt
 81098d4:	232d      	movlt	r3, #45	; 0x2d
 81098d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81098da:	487f      	ldr	r0, [pc, #508]	; (8109ad8 <_printf_float+0x2e8>)
 81098dc:	4b7f      	ldr	r3, [pc, #508]	; (8109adc <_printf_float+0x2ec>)
 81098de:	e7d1      	b.n	8109884 <_printf_float+0x94>
 81098e0:	6863      	ldr	r3, [r4, #4]
 81098e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81098e6:	9206      	str	r2, [sp, #24]
 81098e8:	1c5a      	adds	r2, r3, #1
 81098ea:	d13f      	bne.n	810996c <_printf_float+0x17c>
 81098ec:	2306      	movs	r3, #6
 81098ee:	6063      	str	r3, [r4, #4]
 81098f0:	9b05      	ldr	r3, [sp, #20]
 81098f2:	6861      	ldr	r1, [r4, #4]
 81098f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81098f8:	2300      	movs	r3, #0
 81098fa:	9303      	str	r3, [sp, #12]
 81098fc:	ab0a      	add	r3, sp, #40	; 0x28
 81098fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109902:	ab09      	add	r3, sp, #36	; 0x24
 8109904:	ec49 8b10 	vmov	d0, r8, r9
 8109908:	9300      	str	r3, [sp, #0]
 810990a:	6022      	str	r2, [r4, #0]
 810990c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109910:	4628      	mov	r0, r5
 8109912:	f7ff fecd 	bl	81096b0 <__cvt>
 8109916:	9b06      	ldr	r3, [sp, #24]
 8109918:	9909      	ldr	r1, [sp, #36]	; 0x24
 810991a:	2b47      	cmp	r3, #71	; 0x47
 810991c:	4680      	mov	r8, r0
 810991e:	d108      	bne.n	8109932 <_printf_float+0x142>
 8109920:	1cc8      	adds	r0, r1, #3
 8109922:	db02      	blt.n	810992a <_printf_float+0x13a>
 8109924:	6863      	ldr	r3, [r4, #4]
 8109926:	4299      	cmp	r1, r3
 8109928:	dd41      	ble.n	81099ae <_printf_float+0x1be>
 810992a:	f1ab 0b02 	sub.w	fp, fp, #2
 810992e:	fa5f fb8b 	uxtb.w	fp, fp
 8109932:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109936:	d820      	bhi.n	810997a <_printf_float+0x18a>
 8109938:	3901      	subs	r1, #1
 810993a:	465a      	mov	r2, fp
 810993c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109940:	9109      	str	r1, [sp, #36]	; 0x24
 8109942:	f7ff ff17 	bl	8109774 <__exponent>
 8109946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109948:	1813      	adds	r3, r2, r0
 810994a:	2a01      	cmp	r2, #1
 810994c:	4681      	mov	r9, r0
 810994e:	6123      	str	r3, [r4, #16]
 8109950:	dc02      	bgt.n	8109958 <_printf_float+0x168>
 8109952:	6822      	ldr	r2, [r4, #0]
 8109954:	07d2      	lsls	r2, r2, #31
 8109956:	d501      	bpl.n	810995c <_printf_float+0x16c>
 8109958:	3301      	adds	r3, #1
 810995a:	6123      	str	r3, [r4, #16]
 810995c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109960:	2b00      	cmp	r3, #0
 8109962:	d09c      	beq.n	810989e <_printf_float+0xae>
 8109964:	232d      	movs	r3, #45	; 0x2d
 8109966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810996a:	e798      	b.n	810989e <_printf_float+0xae>
 810996c:	9a06      	ldr	r2, [sp, #24]
 810996e:	2a47      	cmp	r2, #71	; 0x47
 8109970:	d1be      	bne.n	81098f0 <_printf_float+0x100>
 8109972:	2b00      	cmp	r3, #0
 8109974:	d1bc      	bne.n	81098f0 <_printf_float+0x100>
 8109976:	2301      	movs	r3, #1
 8109978:	e7b9      	b.n	81098ee <_printf_float+0xfe>
 810997a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810997e:	d118      	bne.n	81099b2 <_printf_float+0x1c2>
 8109980:	2900      	cmp	r1, #0
 8109982:	6863      	ldr	r3, [r4, #4]
 8109984:	dd0b      	ble.n	810999e <_printf_float+0x1ae>
 8109986:	6121      	str	r1, [r4, #16]
 8109988:	b913      	cbnz	r3, 8109990 <_printf_float+0x1a0>
 810998a:	6822      	ldr	r2, [r4, #0]
 810998c:	07d0      	lsls	r0, r2, #31
 810998e:	d502      	bpl.n	8109996 <_printf_float+0x1a6>
 8109990:	3301      	adds	r3, #1
 8109992:	440b      	add	r3, r1
 8109994:	6123      	str	r3, [r4, #16]
 8109996:	65a1      	str	r1, [r4, #88]	; 0x58
 8109998:	f04f 0900 	mov.w	r9, #0
 810999c:	e7de      	b.n	810995c <_printf_float+0x16c>
 810999e:	b913      	cbnz	r3, 81099a6 <_printf_float+0x1b6>
 81099a0:	6822      	ldr	r2, [r4, #0]
 81099a2:	07d2      	lsls	r2, r2, #31
 81099a4:	d501      	bpl.n	81099aa <_printf_float+0x1ba>
 81099a6:	3302      	adds	r3, #2
 81099a8:	e7f4      	b.n	8109994 <_printf_float+0x1a4>
 81099aa:	2301      	movs	r3, #1
 81099ac:	e7f2      	b.n	8109994 <_printf_float+0x1a4>
 81099ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81099b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81099b4:	4299      	cmp	r1, r3
 81099b6:	db05      	blt.n	81099c4 <_printf_float+0x1d4>
 81099b8:	6823      	ldr	r3, [r4, #0]
 81099ba:	6121      	str	r1, [r4, #16]
 81099bc:	07d8      	lsls	r0, r3, #31
 81099be:	d5ea      	bpl.n	8109996 <_printf_float+0x1a6>
 81099c0:	1c4b      	adds	r3, r1, #1
 81099c2:	e7e7      	b.n	8109994 <_printf_float+0x1a4>
 81099c4:	2900      	cmp	r1, #0
 81099c6:	bfd4      	ite	le
 81099c8:	f1c1 0202 	rsble	r2, r1, #2
 81099cc:	2201      	movgt	r2, #1
 81099ce:	4413      	add	r3, r2
 81099d0:	e7e0      	b.n	8109994 <_printf_float+0x1a4>
 81099d2:	6823      	ldr	r3, [r4, #0]
 81099d4:	055a      	lsls	r2, r3, #21
 81099d6:	d407      	bmi.n	81099e8 <_printf_float+0x1f8>
 81099d8:	6923      	ldr	r3, [r4, #16]
 81099da:	4642      	mov	r2, r8
 81099dc:	4631      	mov	r1, r6
 81099de:	4628      	mov	r0, r5
 81099e0:	47b8      	blx	r7
 81099e2:	3001      	adds	r0, #1
 81099e4:	d12c      	bne.n	8109a40 <_printf_float+0x250>
 81099e6:	e764      	b.n	81098b2 <_printf_float+0xc2>
 81099e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81099ec:	f240 80e0 	bls.w	8109bb0 <_printf_float+0x3c0>
 81099f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81099f4:	2200      	movs	r2, #0
 81099f6:	2300      	movs	r3, #0
 81099f8:	f7f7 f8ee 	bl	8100bd8 <__aeabi_dcmpeq>
 81099fc:	2800      	cmp	r0, #0
 81099fe:	d034      	beq.n	8109a6a <_printf_float+0x27a>
 8109a00:	4a37      	ldr	r2, [pc, #220]	; (8109ae0 <_printf_float+0x2f0>)
 8109a02:	2301      	movs	r3, #1
 8109a04:	4631      	mov	r1, r6
 8109a06:	4628      	mov	r0, r5
 8109a08:	47b8      	blx	r7
 8109a0a:	3001      	adds	r0, #1
 8109a0c:	f43f af51 	beq.w	81098b2 <_printf_float+0xc2>
 8109a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109a14:	429a      	cmp	r2, r3
 8109a16:	db02      	blt.n	8109a1e <_printf_float+0x22e>
 8109a18:	6823      	ldr	r3, [r4, #0]
 8109a1a:	07d8      	lsls	r0, r3, #31
 8109a1c:	d510      	bpl.n	8109a40 <_printf_float+0x250>
 8109a1e:	ee18 3a10 	vmov	r3, s16
 8109a22:	4652      	mov	r2, sl
 8109a24:	4631      	mov	r1, r6
 8109a26:	4628      	mov	r0, r5
 8109a28:	47b8      	blx	r7
 8109a2a:	3001      	adds	r0, #1
 8109a2c:	f43f af41 	beq.w	81098b2 <_printf_float+0xc2>
 8109a30:	f04f 0800 	mov.w	r8, #0
 8109a34:	f104 091a 	add.w	r9, r4, #26
 8109a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109a3a:	3b01      	subs	r3, #1
 8109a3c:	4543      	cmp	r3, r8
 8109a3e:	dc09      	bgt.n	8109a54 <_printf_float+0x264>
 8109a40:	6823      	ldr	r3, [r4, #0]
 8109a42:	079b      	lsls	r3, r3, #30
 8109a44:	f100 8105 	bmi.w	8109c52 <_printf_float+0x462>
 8109a48:	68e0      	ldr	r0, [r4, #12]
 8109a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109a4c:	4298      	cmp	r0, r3
 8109a4e:	bfb8      	it	lt
 8109a50:	4618      	movlt	r0, r3
 8109a52:	e730      	b.n	81098b6 <_printf_float+0xc6>
 8109a54:	2301      	movs	r3, #1
 8109a56:	464a      	mov	r2, r9
 8109a58:	4631      	mov	r1, r6
 8109a5a:	4628      	mov	r0, r5
 8109a5c:	47b8      	blx	r7
 8109a5e:	3001      	adds	r0, #1
 8109a60:	f43f af27 	beq.w	81098b2 <_printf_float+0xc2>
 8109a64:	f108 0801 	add.w	r8, r8, #1
 8109a68:	e7e6      	b.n	8109a38 <_printf_float+0x248>
 8109a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109a6c:	2b00      	cmp	r3, #0
 8109a6e:	dc39      	bgt.n	8109ae4 <_printf_float+0x2f4>
 8109a70:	4a1b      	ldr	r2, [pc, #108]	; (8109ae0 <_printf_float+0x2f0>)
 8109a72:	2301      	movs	r3, #1
 8109a74:	4631      	mov	r1, r6
 8109a76:	4628      	mov	r0, r5
 8109a78:	47b8      	blx	r7
 8109a7a:	3001      	adds	r0, #1
 8109a7c:	f43f af19 	beq.w	81098b2 <_printf_float+0xc2>
 8109a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109a84:	4313      	orrs	r3, r2
 8109a86:	d102      	bne.n	8109a8e <_printf_float+0x29e>
 8109a88:	6823      	ldr	r3, [r4, #0]
 8109a8a:	07d9      	lsls	r1, r3, #31
 8109a8c:	d5d8      	bpl.n	8109a40 <_printf_float+0x250>
 8109a8e:	ee18 3a10 	vmov	r3, s16
 8109a92:	4652      	mov	r2, sl
 8109a94:	4631      	mov	r1, r6
 8109a96:	4628      	mov	r0, r5
 8109a98:	47b8      	blx	r7
 8109a9a:	3001      	adds	r0, #1
 8109a9c:	f43f af09 	beq.w	81098b2 <_printf_float+0xc2>
 8109aa0:	f04f 0900 	mov.w	r9, #0
 8109aa4:	f104 0a1a 	add.w	sl, r4, #26
 8109aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109aaa:	425b      	negs	r3, r3
 8109aac:	454b      	cmp	r3, r9
 8109aae:	dc01      	bgt.n	8109ab4 <_printf_float+0x2c4>
 8109ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109ab2:	e792      	b.n	81099da <_printf_float+0x1ea>
 8109ab4:	2301      	movs	r3, #1
 8109ab6:	4652      	mov	r2, sl
 8109ab8:	4631      	mov	r1, r6
 8109aba:	4628      	mov	r0, r5
 8109abc:	47b8      	blx	r7
 8109abe:	3001      	adds	r0, #1
 8109ac0:	f43f aef7 	beq.w	81098b2 <_printf_float+0xc2>
 8109ac4:	f109 0901 	add.w	r9, r9, #1
 8109ac8:	e7ee      	b.n	8109aa8 <_printf_float+0x2b8>
 8109aca:	bf00      	nop
 8109acc:	7fefffff 	.word	0x7fefffff
 8109ad0:	0810e03c 	.word	0x0810e03c
 8109ad4:	0810e040 	.word	0x0810e040
 8109ad8:	0810e048 	.word	0x0810e048
 8109adc:	0810e044 	.word	0x0810e044
 8109ae0:	0810e04c 	.word	0x0810e04c
 8109ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109ae8:	429a      	cmp	r2, r3
 8109aea:	bfa8      	it	ge
 8109aec:	461a      	movge	r2, r3
 8109aee:	2a00      	cmp	r2, #0
 8109af0:	4691      	mov	r9, r2
 8109af2:	dc37      	bgt.n	8109b64 <_printf_float+0x374>
 8109af4:	f04f 0b00 	mov.w	fp, #0
 8109af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109afc:	f104 021a 	add.w	r2, r4, #26
 8109b00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109b02:	9305      	str	r3, [sp, #20]
 8109b04:	eba3 0309 	sub.w	r3, r3, r9
 8109b08:	455b      	cmp	r3, fp
 8109b0a:	dc33      	bgt.n	8109b74 <_printf_float+0x384>
 8109b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109b10:	429a      	cmp	r2, r3
 8109b12:	db3b      	blt.n	8109b8c <_printf_float+0x39c>
 8109b14:	6823      	ldr	r3, [r4, #0]
 8109b16:	07da      	lsls	r2, r3, #31
 8109b18:	d438      	bmi.n	8109b8c <_printf_float+0x39c>
 8109b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109b1c:	9a05      	ldr	r2, [sp, #20]
 8109b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109b20:	1a9a      	subs	r2, r3, r2
 8109b22:	eba3 0901 	sub.w	r9, r3, r1
 8109b26:	4591      	cmp	r9, r2
 8109b28:	bfa8      	it	ge
 8109b2a:	4691      	movge	r9, r2
 8109b2c:	f1b9 0f00 	cmp.w	r9, #0
 8109b30:	dc35      	bgt.n	8109b9e <_printf_float+0x3ae>
 8109b32:	f04f 0800 	mov.w	r8, #0
 8109b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109b3a:	f104 0a1a 	add.w	sl, r4, #26
 8109b3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109b42:	1a9b      	subs	r3, r3, r2
 8109b44:	eba3 0309 	sub.w	r3, r3, r9
 8109b48:	4543      	cmp	r3, r8
 8109b4a:	f77f af79 	ble.w	8109a40 <_printf_float+0x250>
 8109b4e:	2301      	movs	r3, #1
 8109b50:	4652      	mov	r2, sl
 8109b52:	4631      	mov	r1, r6
 8109b54:	4628      	mov	r0, r5
 8109b56:	47b8      	blx	r7
 8109b58:	3001      	adds	r0, #1
 8109b5a:	f43f aeaa 	beq.w	81098b2 <_printf_float+0xc2>
 8109b5e:	f108 0801 	add.w	r8, r8, #1
 8109b62:	e7ec      	b.n	8109b3e <_printf_float+0x34e>
 8109b64:	4613      	mov	r3, r2
 8109b66:	4631      	mov	r1, r6
 8109b68:	4642      	mov	r2, r8
 8109b6a:	4628      	mov	r0, r5
 8109b6c:	47b8      	blx	r7
 8109b6e:	3001      	adds	r0, #1
 8109b70:	d1c0      	bne.n	8109af4 <_printf_float+0x304>
 8109b72:	e69e      	b.n	81098b2 <_printf_float+0xc2>
 8109b74:	2301      	movs	r3, #1
 8109b76:	4631      	mov	r1, r6
 8109b78:	4628      	mov	r0, r5
 8109b7a:	9205      	str	r2, [sp, #20]
 8109b7c:	47b8      	blx	r7
 8109b7e:	3001      	adds	r0, #1
 8109b80:	f43f ae97 	beq.w	81098b2 <_printf_float+0xc2>
 8109b84:	9a05      	ldr	r2, [sp, #20]
 8109b86:	f10b 0b01 	add.w	fp, fp, #1
 8109b8a:	e7b9      	b.n	8109b00 <_printf_float+0x310>
 8109b8c:	ee18 3a10 	vmov	r3, s16
 8109b90:	4652      	mov	r2, sl
 8109b92:	4631      	mov	r1, r6
 8109b94:	4628      	mov	r0, r5
 8109b96:	47b8      	blx	r7
 8109b98:	3001      	adds	r0, #1
 8109b9a:	d1be      	bne.n	8109b1a <_printf_float+0x32a>
 8109b9c:	e689      	b.n	81098b2 <_printf_float+0xc2>
 8109b9e:	9a05      	ldr	r2, [sp, #20]
 8109ba0:	464b      	mov	r3, r9
 8109ba2:	4442      	add	r2, r8
 8109ba4:	4631      	mov	r1, r6
 8109ba6:	4628      	mov	r0, r5
 8109ba8:	47b8      	blx	r7
 8109baa:	3001      	adds	r0, #1
 8109bac:	d1c1      	bne.n	8109b32 <_printf_float+0x342>
 8109bae:	e680      	b.n	81098b2 <_printf_float+0xc2>
 8109bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109bb2:	2a01      	cmp	r2, #1
 8109bb4:	dc01      	bgt.n	8109bba <_printf_float+0x3ca>
 8109bb6:	07db      	lsls	r3, r3, #31
 8109bb8:	d538      	bpl.n	8109c2c <_printf_float+0x43c>
 8109bba:	2301      	movs	r3, #1
 8109bbc:	4642      	mov	r2, r8
 8109bbe:	4631      	mov	r1, r6
 8109bc0:	4628      	mov	r0, r5
 8109bc2:	47b8      	blx	r7
 8109bc4:	3001      	adds	r0, #1
 8109bc6:	f43f ae74 	beq.w	81098b2 <_printf_float+0xc2>
 8109bca:	ee18 3a10 	vmov	r3, s16
 8109bce:	4652      	mov	r2, sl
 8109bd0:	4631      	mov	r1, r6
 8109bd2:	4628      	mov	r0, r5
 8109bd4:	47b8      	blx	r7
 8109bd6:	3001      	adds	r0, #1
 8109bd8:	f43f ae6b 	beq.w	81098b2 <_printf_float+0xc2>
 8109bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109be0:	2200      	movs	r2, #0
 8109be2:	2300      	movs	r3, #0
 8109be4:	f7f6 fff8 	bl	8100bd8 <__aeabi_dcmpeq>
 8109be8:	b9d8      	cbnz	r0, 8109c22 <_printf_float+0x432>
 8109bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109bec:	f108 0201 	add.w	r2, r8, #1
 8109bf0:	3b01      	subs	r3, #1
 8109bf2:	4631      	mov	r1, r6
 8109bf4:	4628      	mov	r0, r5
 8109bf6:	47b8      	blx	r7
 8109bf8:	3001      	adds	r0, #1
 8109bfa:	d10e      	bne.n	8109c1a <_printf_float+0x42a>
 8109bfc:	e659      	b.n	81098b2 <_printf_float+0xc2>
 8109bfe:	2301      	movs	r3, #1
 8109c00:	4652      	mov	r2, sl
 8109c02:	4631      	mov	r1, r6
 8109c04:	4628      	mov	r0, r5
 8109c06:	47b8      	blx	r7
 8109c08:	3001      	adds	r0, #1
 8109c0a:	f43f ae52 	beq.w	81098b2 <_printf_float+0xc2>
 8109c0e:	f108 0801 	add.w	r8, r8, #1
 8109c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109c14:	3b01      	subs	r3, #1
 8109c16:	4543      	cmp	r3, r8
 8109c18:	dcf1      	bgt.n	8109bfe <_printf_float+0x40e>
 8109c1a:	464b      	mov	r3, r9
 8109c1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109c20:	e6dc      	b.n	81099dc <_printf_float+0x1ec>
 8109c22:	f04f 0800 	mov.w	r8, #0
 8109c26:	f104 0a1a 	add.w	sl, r4, #26
 8109c2a:	e7f2      	b.n	8109c12 <_printf_float+0x422>
 8109c2c:	2301      	movs	r3, #1
 8109c2e:	4642      	mov	r2, r8
 8109c30:	e7df      	b.n	8109bf2 <_printf_float+0x402>
 8109c32:	2301      	movs	r3, #1
 8109c34:	464a      	mov	r2, r9
 8109c36:	4631      	mov	r1, r6
 8109c38:	4628      	mov	r0, r5
 8109c3a:	47b8      	blx	r7
 8109c3c:	3001      	adds	r0, #1
 8109c3e:	f43f ae38 	beq.w	81098b2 <_printf_float+0xc2>
 8109c42:	f108 0801 	add.w	r8, r8, #1
 8109c46:	68e3      	ldr	r3, [r4, #12]
 8109c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8109c4a:	1a5b      	subs	r3, r3, r1
 8109c4c:	4543      	cmp	r3, r8
 8109c4e:	dcf0      	bgt.n	8109c32 <_printf_float+0x442>
 8109c50:	e6fa      	b.n	8109a48 <_printf_float+0x258>
 8109c52:	f04f 0800 	mov.w	r8, #0
 8109c56:	f104 0919 	add.w	r9, r4, #25
 8109c5a:	e7f4      	b.n	8109c46 <_printf_float+0x456>

08109c5c <_printf_common>:
 8109c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109c60:	4616      	mov	r6, r2
 8109c62:	4699      	mov	r9, r3
 8109c64:	688a      	ldr	r2, [r1, #8]
 8109c66:	690b      	ldr	r3, [r1, #16]
 8109c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109c6c:	4293      	cmp	r3, r2
 8109c6e:	bfb8      	it	lt
 8109c70:	4613      	movlt	r3, r2
 8109c72:	6033      	str	r3, [r6, #0]
 8109c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109c78:	4607      	mov	r7, r0
 8109c7a:	460c      	mov	r4, r1
 8109c7c:	b10a      	cbz	r2, 8109c82 <_printf_common+0x26>
 8109c7e:	3301      	adds	r3, #1
 8109c80:	6033      	str	r3, [r6, #0]
 8109c82:	6823      	ldr	r3, [r4, #0]
 8109c84:	0699      	lsls	r1, r3, #26
 8109c86:	bf42      	ittt	mi
 8109c88:	6833      	ldrmi	r3, [r6, #0]
 8109c8a:	3302      	addmi	r3, #2
 8109c8c:	6033      	strmi	r3, [r6, #0]
 8109c8e:	6825      	ldr	r5, [r4, #0]
 8109c90:	f015 0506 	ands.w	r5, r5, #6
 8109c94:	d106      	bne.n	8109ca4 <_printf_common+0x48>
 8109c96:	f104 0a19 	add.w	sl, r4, #25
 8109c9a:	68e3      	ldr	r3, [r4, #12]
 8109c9c:	6832      	ldr	r2, [r6, #0]
 8109c9e:	1a9b      	subs	r3, r3, r2
 8109ca0:	42ab      	cmp	r3, r5
 8109ca2:	dc26      	bgt.n	8109cf2 <_printf_common+0x96>
 8109ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109ca8:	1e13      	subs	r3, r2, #0
 8109caa:	6822      	ldr	r2, [r4, #0]
 8109cac:	bf18      	it	ne
 8109cae:	2301      	movne	r3, #1
 8109cb0:	0692      	lsls	r2, r2, #26
 8109cb2:	d42b      	bmi.n	8109d0c <_printf_common+0xb0>
 8109cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109cb8:	4649      	mov	r1, r9
 8109cba:	4638      	mov	r0, r7
 8109cbc:	47c0      	blx	r8
 8109cbe:	3001      	adds	r0, #1
 8109cc0:	d01e      	beq.n	8109d00 <_printf_common+0xa4>
 8109cc2:	6823      	ldr	r3, [r4, #0]
 8109cc4:	68e5      	ldr	r5, [r4, #12]
 8109cc6:	6832      	ldr	r2, [r6, #0]
 8109cc8:	f003 0306 	and.w	r3, r3, #6
 8109ccc:	2b04      	cmp	r3, #4
 8109cce:	bf08      	it	eq
 8109cd0:	1aad      	subeq	r5, r5, r2
 8109cd2:	68a3      	ldr	r3, [r4, #8]
 8109cd4:	6922      	ldr	r2, [r4, #16]
 8109cd6:	bf0c      	ite	eq
 8109cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109cdc:	2500      	movne	r5, #0
 8109cde:	4293      	cmp	r3, r2
 8109ce0:	bfc4      	itt	gt
 8109ce2:	1a9b      	subgt	r3, r3, r2
 8109ce4:	18ed      	addgt	r5, r5, r3
 8109ce6:	2600      	movs	r6, #0
 8109ce8:	341a      	adds	r4, #26
 8109cea:	42b5      	cmp	r5, r6
 8109cec:	d11a      	bne.n	8109d24 <_printf_common+0xc8>
 8109cee:	2000      	movs	r0, #0
 8109cf0:	e008      	b.n	8109d04 <_printf_common+0xa8>
 8109cf2:	2301      	movs	r3, #1
 8109cf4:	4652      	mov	r2, sl
 8109cf6:	4649      	mov	r1, r9
 8109cf8:	4638      	mov	r0, r7
 8109cfa:	47c0      	blx	r8
 8109cfc:	3001      	adds	r0, #1
 8109cfe:	d103      	bne.n	8109d08 <_printf_common+0xac>
 8109d00:	f04f 30ff 	mov.w	r0, #4294967295
 8109d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109d08:	3501      	adds	r5, #1
 8109d0a:	e7c6      	b.n	8109c9a <_printf_common+0x3e>
 8109d0c:	18e1      	adds	r1, r4, r3
 8109d0e:	1c5a      	adds	r2, r3, #1
 8109d10:	2030      	movs	r0, #48	; 0x30
 8109d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109d16:	4422      	add	r2, r4
 8109d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109d20:	3302      	adds	r3, #2
 8109d22:	e7c7      	b.n	8109cb4 <_printf_common+0x58>
 8109d24:	2301      	movs	r3, #1
 8109d26:	4622      	mov	r2, r4
 8109d28:	4649      	mov	r1, r9
 8109d2a:	4638      	mov	r0, r7
 8109d2c:	47c0      	blx	r8
 8109d2e:	3001      	adds	r0, #1
 8109d30:	d0e6      	beq.n	8109d00 <_printf_common+0xa4>
 8109d32:	3601      	adds	r6, #1
 8109d34:	e7d9      	b.n	8109cea <_printf_common+0x8e>
	...

08109d38 <_printf_i>:
 8109d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109d3c:	7e0f      	ldrb	r7, [r1, #24]
 8109d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109d40:	2f78      	cmp	r7, #120	; 0x78
 8109d42:	4691      	mov	r9, r2
 8109d44:	4680      	mov	r8, r0
 8109d46:	460c      	mov	r4, r1
 8109d48:	469a      	mov	sl, r3
 8109d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109d4e:	d807      	bhi.n	8109d60 <_printf_i+0x28>
 8109d50:	2f62      	cmp	r7, #98	; 0x62
 8109d52:	d80a      	bhi.n	8109d6a <_printf_i+0x32>
 8109d54:	2f00      	cmp	r7, #0
 8109d56:	f000 80d8 	beq.w	8109f0a <_printf_i+0x1d2>
 8109d5a:	2f58      	cmp	r7, #88	; 0x58
 8109d5c:	f000 80a3 	beq.w	8109ea6 <_printf_i+0x16e>
 8109d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109d68:	e03a      	b.n	8109de0 <_printf_i+0xa8>
 8109d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109d6e:	2b15      	cmp	r3, #21
 8109d70:	d8f6      	bhi.n	8109d60 <_printf_i+0x28>
 8109d72:	a101      	add	r1, pc, #4	; (adr r1, 8109d78 <_printf_i+0x40>)
 8109d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109d78:	08109dd1 	.word	0x08109dd1
 8109d7c:	08109de5 	.word	0x08109de5
 8109d80:	08109d61 	.word	0x08109d61
 8109d84:	08109d61 	.word	0x08109d61
 8109d88:	08109d61 	.word	0x08109d61
 8109d8c:	08109d61 	.word	0x08109d61
 8109d90:	08109de5 	.word	0x08109de5
 8109d94:	08109d61 	.word	0x08109d61
 8109d98:	08109d61 	.word	0x08109d61
 8109d9c:	08109d61 	.word	0x08109d61
 8109da0:	08109d61 	.word	0x08109d61
 8109da4:	08109ef1 	.word	0x08109ef1
 8109da8:	08109e15 	.word	0x08109e15
 8109dac:	08109ed3 	.word	0x08109ed3
 8109db0:	08109d61 	.word	0x08109d61
 8109db4:	08109d61 	.word	0x08109d61
 8109db8:	08109f13 	.word	0x08109f13
 8109dbc:	08109d61 	.word	0x08109d61
 8109dc0:	08109e15 	.word	0x08109e15
 8109dc4:	08109d61 	.word	0x08109d61
 8109dc8:	08109d61 	.word	0x08109d61
 8109dcc:	08109edb 	.word	0x08109edb
 8109dd0:	682b      	ldr	r3, [r5, #0]
 8109dd2:	1d1a      	adds	r2, r3, #4
 8109dd4:	681b      	ldr	r3, [r3, #0]
 8109dd6:	602a      	str	r2, [r5, #0]
 8109dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109de0:	2301      	movs	r3, #1
 8109de2:	e0a3      	b.n	8109f2c <_printf_i+0x1f4>
 8109de4:	6820      	ldr	r0, [r4, #0]
 8109de6:	6829      	ldr	r1, [r5, #0]
 8109de8:	0606      	lsls	r6, r0, #24
 8109dea:	f101 0304 	add.w	r3, r1, #4
 8109dee:	d50a      	bpl.n	8109e06 <_printf_i+0xce>
 8109df0:	680e      	ldr	r6, [r1, #0]
 8109df2:	602b      	str	r3, [r5, #0]
 8109df4:	2e00      	cmp	r6, #0
 8109df6:	da03      	bge.n	8109e00 <_printf_i+0xc8>
 8109df8:	232d      	movs	r3, #45	; 0x2d
 8109dfa:	4276      	negs	r6, r6
 8109dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109e00:	485e      	ldr	r0, [pc, #376]	; (8109f7c <_printf_i+0x244>)
 8109e02:	230a      	movs	r3, #10
 8109e04:	e019      	b.n	8109e3a <_printf_i+0x102>
 8109e06:	680e      	ldr	r6, [r1, #0]
 8109e08:	602b      	str	r3, [r5, #0]
 8109e0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8109e0e:	bf18      	it	ne
 8109e10:	b236      	sxthne	r6, r6
 8109e12:	e7ef      	b.n	8109df4 <_printf_i+0xbc>
 8109e14:	682b      	ldr	r3, [r5, #0]
 8109e16:	6820      	ldr	r0, [r4, #0]
 8109e18:	1d19      	adds	r1, r3, #4
 8109e1a:	6029      	str	r1, [r5, #0]
 8109e1c:	0601      	lsls	r1, r0, #24
 8109e1e:	d501      	bpl.n	8109e24 <_printf_i+0xec>
 8109e20:	681e      	ldr	r6, [r3, #0]
 8109e22:	e002      	b.n	8109e2a <_printf_i+0xf2>
 8109e24:	0646      	lsls	r6, r0, #25
 8109e26:	d5fb      	bpl.n	8109e20 <_printf_i+0xe8>
 8109e28:	881e      	ldrh	r6, [r3, #0]
 8109e2a:	4854      	ldr	r0, [pc, #336]	; (8109f7c <_printf_i+0x244>)
 8109e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8109e2e:	bf0c      	ite	eq
 8109e30:	2308      	moveq	r3, #8
 8109e32:	230a      	movne	r3, #10
 8109e34:	2100      	movs	r1, #0
 8109e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109e3a:	6865      	ldr	r5, [r4, #4]
 8109e3c:	60a5      	str	r5, [r4, #8]
 8109e3e:	2d00      	cmp	r5, #0
 8109e40:	bfa2      	ittt	ge
 8109e42:	6821      	ldrge	r1, [r4, #0]
 8109e44:	f021 0104 	bicge.w	r1, r1, #4
 8109e48:	6021      	strge	r1, [r4, #0]
 8109e4a:	b90e      	cbnz	r6, 8109e50 <_printf_i+0x118>
 8109e4c:	2d00      	cmp	r5, #0
 8109e4e:	d04d      	beq.n	8109eec <_printf_i+0x1b4>
 8109e50:	4615      	mov	r5, r2
 8109e52:	fbb6 f1f3 	udiv	r1, r6, r3
 8109e56:	fb03 6711 	mls	r7, r3, r1, r6
 8109e5a:	5dc7      	ldrb	r7, [r0, r7]
 8109e5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109e60:	4637      	mov	r7, r6
 8109e62:	42bb      	cmp	r3, r7
 8109e64:	460e      	mov	r6, r1
 8109e66:	d9f4      	bls.n	8109e52 <_printf_i+0x11a>
 8109e68:	2b08      	cmp	r3, #8
 8109e6a:	d10b      	bne.n	8109e84 <_printf_i+0x14c>
 8109e6c:	6823      	ldr	r3, [r4, #0]
 8109e6e:	07de      	lsls	r6, r3, #31
 8109e70:	d508      	bpl.n	8109e84 <_printf_i+0x14c>
 8109e72:	6923      	ldr	r3, [r4, #16]
 8109e74:	6861      	ldr	r1, [r4, #4]
 8109e76:	4299      	cmp	r1, r3
 8109e78:	bfde      	ittt	le
 8109e7a:	2330      	movle	r3, #48	; 0x30
 8109e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109e80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109e84:	1b52      	subs	r2, r2, r5
 8109e86:	6122      	str	r2, [r4, #16]
 8109e88:	f8cd a000 	str.w	sl, [sp]
 8109e8c:	464b      	mov	r3, r9
 8109e8e:	aa03      	add	r2, sp, #12
 8109e90:	4621      	mov	r1, r4
 8109e92:	4640      	mov	r0, r8
 8109e94:	f7ff fee2 	bl	8109c5c <_printf_common>
 8109e98:	3001      	adds	r0, #1
 8109e9a:	d14c      	bne.n	8109f36 <_printf_i+0x1fe>
 8109e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8109ea0:	b004      	add	sp, #16
 8109ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109ea6:	4835      	ldr	r0, [pc, #212]	; (8109f7c <_printf_i+0x244>)
 8109ea8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109eac:	6829      	ldr	r1, [r5, #0]
 8109eae:	6823      	ldr	r3, [r4, #0]
 8109eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8109eb4:	6029      	str	r1, [r5, #0]
 8109eb6:	061d      	lsls	r5, r3, #24
 8109eb8:	d514      	bpl.n	8109ee4 <_printf_i+0x1ac>
 8109eba:	07df      	lsls	r7, r3, #31
 8109ebc:	bf44      	itt	mi
 8109ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8109ec2:	6023      	strmi	r3, [r4, #0]
 8109ec4:	b91e      	cbnz	r6, 8109ece <_printf_i+0x196>
 8109ec6:	6823      	ldr	r3, [r4, #0]
 8109ec8:	f023 0320 	bic.w	r3, r3, #32
 8109ecc:	6023      	str	r3, [r4, #0]
 8109ece:	2310      	movs	r3, #16
 8109ed0:	e7b0      	b.n	8109e34 <_printf_i+0xfc>
 8109ed2:	6823      	ldr	r3, [r4, #0]
 8109ed4:	f043 0320 	orr.w	r3, r3, #32
 8109ed8:	6023      	str	r3, [r4, #0]
 8109eda:	2378      	movs	r3, #120	; 0x78
 8109edc:	4828      	ldr	r0, [pc, #160]	; (8109f80 <_printf_i+0x248>)
 8109ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8109ee2:	e7e3      	b.n	8109eac <_printf_i+0x174>
 8109ee4:	0659      	lsls	r1, r3, #25
 8109ee6:	bf48      	it	mi
 8109ee8:	b2b6      	uxthmi	r6, r6
 8109eea:	e7e6      	b.n	8109eba <_printf_i+0x182>
 8109eec:	4615      	mov	r5, r2
 8109eee:	e7bb      	b.n	8109e68 <_printf_i+0x130>
 8109ef0:	682b      	ldr	r3, [r5, #0]
 8109ef2:	6826      	ldr	r6, [r4, #0]
 8109ef4:	6961      	ldr	r1, [r4, #20]
 8109ef6:	1d18      	adds	r0, r3, #4
 8109ef8:	6028      	str	r0, [r5, #0]
 8109efa:	0635      	lsls	r5, r6, #24
 8109efc:	681b      	ldr	r3, [r3, #0]
 8109efe:	d501      	bpl.n	8109f04 <_printf_i+0x1cc>
 8109f00:	6019      	str	r1, [r3, #0]
 8109f02:	e002      	b.n	8109f0a <_printf_i+0x1d2>
 8109f04:	0670      	lsls	r0, r6, #25
 8109f06:	d5fb      	bpl.n	8109f00 <_printf_i+0x1c8>
 8109f08:	8019      	strh	r1, [r3, #0]
 8109f0a:	2300      	movs	r3, #0
 8109f0c:	6123      	str	r3, [r4, #16]
 8109f0e:	4615      	mov	r5, r2
 8109f10:	e7ba      	b.n	8109e88 <_printf_i+0x150>
 8109f12:	682b      	ldr	r3, [r5, #0]
 8109f14:	1d1a      	adds	r2, r3, #4
 8109f16:	602a      	str	r2, [r5, #0]
 8109f18:	681d      	ldr	r5, [r3, #0]
 8109f1a:	6862      	ldr	r2, [r4, #4]
 8109f1c:	2100      	movs	r1, #0
 8109f1e:	4628      	mov	r0, r5
 8109f20:	f7f6 f9e6 	bl	81002f0 <memchr>
 8109f24:	b108      	cbz	r0, 8109f2a <_printf_i+0x1f2>
 8109f26:	1b40      	subs	r0, r0, r5
 8109f28:	6060      	str	r0, [r4, #4]
 8109f2a:	6863      	ldr	r3, [r4, #4]
 8109f2c:	6123      	str	r3, [r4, #16]
 8109f2e:	2300      	movs	r3, #0
 8109f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109f34:	e7a8      	b.n	8109e88 <_printf_i+0x150>
 8109f36:	6923      	ldr	r3, [r4, #16]
 8109f38:	462a      	mov	r2, r5
 8109f3a:	4649      	mov	r1, r9
 8109f3c:	4640      	mov	r0, r8
 8109f3e:	47d0      	blx	sl
 8109f40:	3001      	adds	r0, #1
 8109f42:	d0ab      	beq.n	8109e9c <_printf_i+0x164>
 8109f44:	6823      	ldr	r3, [r4, #0]
 8109f46:	079b      	lsls	r3, r3, #30
 8109f48:	d413      	bmi.n	8109f72 <_printf_i+0x23a>
 8109f4a:	68e0      	ldr	r0, [r4, #12]
 8109f4c:	9b03      	ldr	r3, [sp, #12]
 8109f4e:	4298      	cmp	r0, r3
 8109f50:	bfb8      	it	lt
 8109f52:	4618      	movlt	r0, r3
 8109f54:	e7a4      	b.n	8109ea0 <_printf_i+0x168>
 8109f56:	2301      	movs	r3, #1
 8109f58:	4632      	mov	r2, r6
 8109f5a:	4649      	mov	r1, r9
 8109f5c:	4640      	mov	r0, r8
 8109f5e:	47d0      	blx	sl
 8109f60:	3001      	adds	r0, #1
 8109f62:	d09b      	beq.n	8109e9c <_printf_i+0x164>
 8109f64:	3501      	adds	r5, #1
 8109f66:	68e3      	ldr	r3, [r4, #12]
 8109f68:	9903      	ldr	r1, [sp, #12]
 8109f6a:	1a5b      	subs	r3, r3, r1
 8109f6c:	42ab      	cmp	r3, r5
 8109f6e:	dcf2      	bgt.n	8109f56 <_printf_i+0x21e>
 8109f70:	e7eb      	b.n	8109f4a <_printf_i+0x212>
 8109f72:	2500      	movs	r5, #0
 8109f74:	f104 0619 	add.w	r6, r4, #25
 8109f78:	e7f5      	b.n	8109f66 <_printf_i+0x22e>
 8109f7a:	bf00      	nop
 8109f7c:	0810e04e 	.word	0x0810e04e
 8109f80:	0810e05f 	.word	0x0810e05f

08109f84 <_scanf_float>:
 8109f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f88:	b087      	sub	sp, #28
 8109f8a:	4617      	mov	r7, r2
 8109f8c:	9303      	str	r3, [sp, #12]
 8109f8e:	688b      	ldr	r3, [r1, #8]
 8109f90:	1e5a      	subs	r2, r3, #1
 8109f92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8109f96:	bf83      	ittte	hi
 8109f98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109f9c:	195b      	addhi	r3, r3, r5
 8109f9e:	9302      	strhi	r3, [sp, #8]
 8109fa0:	2300      	movls	r3, #0
 8109fa2:	bf86      	itte	hi
 8109fa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8109fa8:	608b      	strhi	r3, [r1, #8]
 8109faa:	9302      	strls	r3, [sp, #8]
 8109fac:	680b      	ldr	r3, [r1, #0]
 8109fae:	468b      	mov	fp, r1
 8109fb0:	2500      	movs	r5, #0
 8109fb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8109fb6:	f84b 3b1c 	str.w	r3, [fp], #28
 8109fba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109fbe:	4680      	mov	r8, r0
 8109fc0:	460c      	mov	r4, r1
 8109fc2:	465e      	mov	r6, fp
 8109fc4:	46aa      	mov	sl, r5
 8109fc6:	46a9      	mov	r9, r5
 8109fc8:	9501      	str	r5, [sp, #4]
 8109fca:	68a2      	ldr	r2, [r4, #8]
 8109fcc:	b152      	cbz	r2, 8109fe4 <_scanf_float+0x60>
 8109fce:	683b      	ldr	r3, [r7, #0]
 8109fd0:	781b      	ldrb	r3, [r3, #0]
 8109fd2:	2b4e      	cmp	r3, #78	; 0x4e
 8109fd4:	d864      	bhi.n	810a0a0 <_scanf_float+0x11c>
 8109fd6:	2b40      	cmp	r3, #64	; 0x40
 8109fd8:	d83c      	bhi.n	810a054 <_scanf_float+0xd0>
 8109fda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8109fde:	b2c8      	uxtb	r0, r1
 8109fe0:	280e      	cmp	r0, #14
 8109fe2:	d93a      	bls.n	810a05a <_scanf_float+0xd6>
 8109fe4:	f1b9 0f00 	cmp.w	r9, #0
 8109fe8:	d003      	beq.n	8109ff2 <_scanf_float+0x6e>
 8109fea:	6823      	ldr	r3, [r4, #0]
 8109fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109ff0:	6023      	str	r3, [r4, #0]
 8109ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109ff6:	f1ba 0f01 	cmp.w	sl, #1
 8109ffa:	f200 8113 	bhi.w	810a224 <_scanf_float+0x2a0>
 8109ffe:	455e      	cmp	r6, fp
 810a000:	f200 8105 	bhi.w	810a20e <_scanf_float+0x28a>
 810a004:	2501      	movs	r5, #1
 810a006:	4628      	mov	r0, r5
 810a008:	b007      	add	sp, #28
 810a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a00e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810a012:	2a0d      	cmp	r2, #13
 810a014:	d8e6      	bhi.n	8109fe4 <_scanf_float+0x60>
 810a016:	a101      	add	r1, pc, #4	; (adr r1, 810a01c <_scanf_float+0x98>)
 810a018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a01c:	0810a15b 	.word	0x0810a15b
 810a020:	08109fe5 	.word	0x08109fe5
 810a024:	08109fe5 	.word	0x08109fe5
 810a028:	08109fe5 	.word	0x08109fe5
 810a02c:	0810a1bb 	.word	0x0810a1bb
 810a030:	0810a193 	.word	0x0810a193
 810a034:	08109fe5 	.word	0x08109fe5
 810a038:	08109fe5 	.word	0x08109fe5
 810a03c:	0810a169 	.word	0x0810a169
 810a040:	08109fe5 	.word	0x08109fe5
 810a044:	08109fe5 	.word	0x08109fe5
 810a048:	08109fe5 	.word	0x08109fe5
 810a04c:	08109fe5 	.word	0x08109fe5
 810a050:	0810a121 	.word	0x0810a121
 810a054:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810a058:	e7db      	b.n	810a012 <_scanf_float+0x8e>
 810a05a:	290e      	cmp	r1, #14
 810a05c:	d8c2      	bhi.n	8109fe4 <_scanf_float+0x60>
 810a05e:	a001      	add	r0, pc, #4	; (adr r0, 810a064 <_scanf_float+0xe0>)
 810a060:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a064:	0810a113 	.word	0x0810a113
 810a068:	08109fe5 	.word	0x08109fe5
 810a06c:	0810a113 	.word	0x0810a113
 810a070:	0810a1a7 	.word	0x0810a1a7
 810a074:	08109fe5 	.word	0x08109fe5
 810a078:	0810a0c1 	.word	0x0810a0c1
 810a07c:	0810a0fd 	.word	0x0810a0fd
 810a080:	0810a0fd 	.word	0x0810a0fd
 810a084:	0810a0fd 	.word	0x0810a0fd
 810a088:	0810a0fd 	.word	0x0810a0fd
 810a08c:	0810a0fd 	.word	0x0810a0fd
 810a090:	0810a0fd 	.word	0x0810a0fd
 810a094:	0810a0fd 	.word	0x0810a0fd
 810a098:	0810a0fd 	.word	0x0810a0fd
 810a09c:	0810a0fd 	.word	0x0810a0fd
 810a0a0:	2b6e      	cmp	r3, #110	; 0x6e
 810a0a2:	d809      	bhi.n	810a0b8 <_scanf_float+0x134>
 810a0a4:	2b60      	cmp	r3, #96	; 0x60
 810a0a6:	d8b2      	bhi.n	810a00e <_scanf_float+0x8a>
 810a0a8:	2b54      	cmp	r3, #84	; 0x54
 810a0aa:	d077      	beq.n	810a19c <_scanf_float+0x218>
 810a0ac:	2b59      	cmp	r3, #89	; 0x59
 810a0ae:	d199      	bne.n	8109fe4 <_scanf_float+0x60>
 810a0b0:	2d07      	cmp	r5, #7
 810a0b2:	d197      	bne.n	8109fe4 <_scanf_float+0x60>
 810a0b4:	2508      	movs	r5, #8
 810a0b6:	e029      	b.n	810a10c <_scanf_float+0x188>
 810a0b8:	2b74      	cmp	r3, #116	; 0x74
 810a0ba:	d06f      	beq.n	810a19c <_scanf_float+0x218>
 810a0bc:	2b79      	cmp	r3, #121	; 0x79
 810a0be:	e7f6      	b.n	810a0ae <_scanf_float+0x12a>
 810a0c0:	6821      	ldr	r1, [r4, #0]
 810a0c2:	05c8      	lsls	r0, r1, #23
 810a0c4:	d51a      	bpl.n	810a0fc <_scanf_float+0x178>
 810a0c6:	9b02      	ldr	r3, [sp, #8]
 810a0c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810a0cc:	6021      	str	r1, [r4, #0]
 810a0ce:	f109 0901 	add.w	r9, r9, #1
 810a0d2:	b11b      	cbz	r3, 810a0dc <_scanf_float+0x158>
 810a0d4:	3b01      	subs	r3, #1
 810a0d6:	3201      	adds	r2, #1
 810a0d8:	9302      	str	r3, [sp, #8]
 810a0da:	60a2      	str	r2, [r4, #8]
 810a0dc:	68a3      	ldr	r3, [r4, #8]
 810a0de:	3b01      	subs	r3, #1
 810a0e0:	60a3      	str	r3, [r4, #8]
 810a0e2:	6923      	ldr	r3, [r4, #16]
 810a0e4:	3301      	adds	r3, #1
 810a0e6:	6123      	str	r3, [r4, #16]
 810a0e8:	687b      	ldr	r3, [r7, #4]
 810a0ea:	3b01      	subs	r3, #1
 810a0ec:	2b00      	cmp	r3, #0
 810a0ee:	607b      	str	r3, [r7, #4]
 810a0f0:	f340 8084 	ble.w	810a1fc <_scanf_float+0x278>
 810a0f4:	683b      	ldr	r3, [r7, #0]
 810a0f6:	3301      	adds	r3, #1
 810a0f8:	603b      	str	r3, [r7, #0]
 810a0fa:	e766      	b.n	8109fca <_scanf_float+0x46>
 810a0fc:	eb1a 0f05 	cmn.w	sl, r5
 810a100:	f47f af70 	bne.w	8109fe4 <_scanf_float+0x60>
 810a104:	6822      	ldr	r2, [r4, #0]
 810a106:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810a10a:	6022      	str	r2, [r4, #0]
 810a10c:	f806 3b01 	strb.w	r3, [r6], #1
 810a110:	e7e4      	b.n	810a0dc <_scanf_float+0x158>
 810a112:	6822      	ldr	r2, [r4, #0]
 810a114:	0610      	lsls	r0, r2, #24
 810a116:	f57f af65 	bpl.w	8109fe4 <_scanf_float+0x60>
 810a11a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810a11e:	e7f4      	b.n	810a10a <_scanf_float+0x186>
 810a120:	f1ba 0f00 	cmp.w	sl, #0
 810a124:	d10e      	bne.n	810a144 <_scanf_float+0x1c0>
 810a126:	f1b9 0f00 	cmp.w	r9, #0
 810a12a:	d10e      	bne.n	810a14a <_scanf_float+0x1c6>
 810a12c:	6822      	ldr	r2, [r4, #0]
 810a12e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a132:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a136:	d108      	bne.n	810a14a <_scanf_float+0x1c6>
 810a138:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a13c:	6022      	str	r2, [r4, #0]
 810a13e:	f04f 0a01 	mov.w	sl, #1
 810a142:	e7e3      	b.n	810a10c <_scanf_float+0x188>
 810a144:	f1ba 0f02 	cmp.w	sl, #2
 810a148:	d055      	beq.n	810a1f6 <_scanf_float+0x272>
 810a14a:	2d01      	cmp	r5, #1
 810a14c:	d002      	beq.n	810a154 <_scanf_float+0x1d0>
 810a14e:	2d04      	cmp	r5, #4
 810a150:	f47f af48 	bne.w	8109fe4 <_scanf_float+0x60>
 810a154:	3501      	adds	r5, #1
 810a156:	b2ed      	uxtb	r5, r5
 810a158:	e7d8      	b.n	810a10c <_scanf_float+0x188>
 810a15a:	f1ba 0f01 	cmp.w	sl, #1
 810a15e:	f47f af41 	bne.w	8109fe4 <_scanf_float+0x60>
 810a162:	f04f 0a02 	mov.w	sl, #2
 810a166:	e7d1      	b.n	810a10c <_scanf_float+0x188>
 810a168:	b97d      	cbnz	r5, 810a18a <_scanf_float+0x206>
 810a16a:	f1b9 0f00 	cmp.w	r9, #0
 810a16e:	f47f af3c 	bne.w	8109fea <_scanf_float+0x66>
 810a172:	6822      	ldr	r2, [r4, #0]
 810a174:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a178:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a17c:	f47f af39 	bne.w	8109ff2 <_scanf_float+0x6e>
 810a180:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a184:	6022      	str	r2, [r4, #0]
 810a186:	2501      	movs	r5, #1
 810a188:	e7c0      	b.n	810a10c <_scanf_float+0x188>
 810a18a:	2d03      	cmp	r5, #3
 810a18c:	d0e2      	beq.n	810a154 <_scanf_float+0x1d0>
 810a18e:	2d05      	cmp	r5, #5
 810a190:	e7de      	b.n	810a150 <_scanf_float+0x1cc>
 810a192:	2d02      	cmp	r5, #2
 810a194:	f47f af26 	bne.w	8109fe4 <_scanf_float+0x60>
 810a198:	2503      	movs	r5, #3
 810a19a:	e7b7      	b.n	810a10c <_scanf_float+0x188>
 810a19c:	2d06      	cmp	r5, #6
 810a19e:	f47f af21 	bne.w	8109fe4 <_scanf_float+0x60>
 810a1a2:	2507      	movs	r5, #7
 810a1a4:	e7b2      	b.n	810a10c <_scanf_float+0x188>
 810a1a6:	6822      	ldr	r2, [r4, #0]
 810a1a8:	0591      	lsls	r1, r2, #22
 810a1aa:	f57f af1b 	bpl.w	8109fe4 <_scanf_float+0x60>
 810a1ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810a1b2:	6022      	str	r2, [r4, #0]
 810a1b4:	f8cd 9004 	str.w	r9, [sp, #4]
 810a1b8:	e7a8      	b.n	810a10c <_scanf_float+0x188>
 810a1ba:	6822      	ldr	r2, [r4, #0]
 810a1bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810a1c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810a1c4:	d006      	beq.n	810a1d4 <_scanf_float+0x250>
 810a1c6:	0550      	lsls	r0, r2, #21
 810a1c8:	f57f af0c 	bpl.w	8109fe4 <_scanf_float+0x60>
 810a1cc:	f1b9 0f00 	cmp.w	r9, #0
 810a1d0:	f43f af0f 	beq.w	8109ff2 <_scanf_float+0x6e>
 810a1d4:	0591      	lsls	r1, r2, #22
 810a1d6:	bf58      	it	pl
 810a1d8:	9901      	ldrpl	r1, [sp, #4]
 810a1da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a1de:	bf58      	it	pl
 810a1e0:	eba9 0101 	subpl.w	r1, r9, r1
 810a1e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810a1e8:	bf58      	it	pl
 810a1ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a1ee:	6022      	str	r2, [r4, #0]
 810a1f0:	f04f 0900 	mov.w	r9, #0
 810a1f4:	e78a      	b.n	810a10c <_scanf_float+0x188>
 810a1f6:	f04f 0a03 	mov.w	sl, #3
 810a1fa:	e787      	b.n	810a10c <_scanf_float+0x188>
 810a1fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810a200:	4639      	mov	r1, r7
 810a202:	4640      	mov	r0, r8
 810a204:	4798      	blx	r3
 810a206:	2800      	cmp	r0, #0
 810a208:	f43f aedf 	beq.w	8109fca <_scanf_float+0x46>
 810a20c:	e6ea      	b.n	8109fe4 <_scanf_float+0x60>
 810a20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a212:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a216:	463a      	mov	r2, r7
 810a218:	4640      	mov	r0, r8
 810a21a:	4798      	blx	r3
 810a21c:	6923      	ldr	r3, [r4, #16]
 810a21e:	3b01      	subs	r3, #1
 810a220:	6123      	str	r3, [r4, #16]
 810a222:	e6ec      	b.n	8109ffe <_scanf_float+0x7a>
 810a224:	1e6b      	subs	r3, r5, #1
 810a226:	2b06      	cmp	r3, #6
 810a228:	d825      	bhi.n	810a276 <_scanf_float+0x2f2>
 810a22a:	2d02      	cmp	r5, #2
 810a22c:	d836      	bhi.n	810a29c <_scanf_float+0x318>
 810a22e:	455e      	cmp	r6, fp
 810a230:	f67f aee8 	bls.w	810a004 <_scanf_float+0x80>
 810a234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a238:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a23c:	463a      	mov	r2, r7
 810a23e:	4640      	mov	r0, r8
 810a240:	4798      	blx	r3
 810a242:	6923      	ldr	r3, [r4, #16]
 810a244:	3b01      	subs	r3, #1
 810a246:	6123      	str	r3, [r4, #16]
 810a248:	e7f1      	b.n	810a22e <_scanf_float+0x2aa>
 810a24a:	9802      	ldr	r0, [sp, #8]
 810a24c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a250:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810a254:	9002      	str	r0, [sp, #8]
 810a256:	463a      	mov	r2, r7
 810a258:	4640      	mov	r0, r8
 810a25a:	4798      	blx	r3
 810a25c:	6923      	ldr	r3, [r4, #16]
 810a25e:	3b01      	subs	r3, #1
 810a260:	6123      	str	r3, [r4, #16]
 810a262:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a266:	fa5f fa8a 	uxtb.w	sl, sl
 810a26a:	f1ba 0f02 	cmp.w	sl, #2
 810a26e:	d1ec      	bne.n	810a24a <_scanf_float+0x2c6>
 810a270:	3d03      	subs	r5, #3
 810a272:	b2ed      	uxtb	r5, r5
 810a274:	1b76      	subs	r6, r6, r5
 810a276:	6823      	ldr	r3, [r4, #0]
 810a278:	05da      	lsls	r2, r3, #23
 810a27a:	d52f      	bpl.n	810a2dc <_scanf_float+0x358>
 810a27c:	055b      	lsls	r3, r3, #21
 810a27e:	d510      	bpl.n	810a2a2 <_scanf_float+0x31e>
 810a280:	455e      	cmp	r6, fp
 810a282:	f67f aebf 	bls.w	810a004 <_scanf_float+0x80>
 810a286:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a28a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a28e:	463a      	mov	r2, r7
 810a290:	4640      	mov	r0, r8
 810a292:	4798      	blx	r3
 810a294:	6923      	ldr	r3, [r4, #16]
 810a296:	3b01      	subs	r3, #1
 810a298:	6123      	str	r3, [r4, #16]
 810a29a:	e7f1      	b.n	810a280 <_scanf_float+0x2fc>
 810a29c:	46aa      	mov	sl, r5
 810a29e:	9602      	str	r6, [sp, #8]
 810a2a0:	e7df      	b.n	810a262 <_scanf_float+0x2de>
 810a2a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a2a6:	6923      	ldr	r3, [r4, #16]
 810a2a8:	2965      	cmp	r1, #101	; 0x65
 810a2aa:	f103 33ff 	add.w	r3, r3, #4294967295
 810a2ae:	f106 35ff 	add.w	r5, r6, #4294967295
 810a2b2:	6123      	str	r3, [r4, #16]
 810a2b4:	d00c      	beq.n	810a2d0 <_scanf_float+0x34c>
 810a2b6:	2945      	cmp	r1, #69	; 0x45
 810a2b8:	d00a      	beq.n	810a2d0 <_scanf_float+0x34c>
 810a2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a2be:	463a      	mov	r2, r7
 810a2c0:	4640      	mov	r0, r8
 810a2c2:	4798      	blx	r3
 810a2c4:	6923      	ldr	r3, [r4, #16]
 810a2c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a2ca:	3b01      	subs	r3, #1
 810a2cc:	1eb5      	subs	r5, r6, #2
 810a2ce:	6123      	str	r3, [r4, #16]
 810a2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a2d4:	463a      	mov	r2, r7
 810a2d6:	4640      	mov	r0, r8
 810a2d8:	4798      	blx	r3
 810a2da:	462e      	mov	r6, r5
 810a2dc:	6825      	ldr	r5, [r4, #0]
 810a2de:	f015 0510 	ands.w	r5, r5, #16
 810a2e2:	d159      	bne.n	810a398 <_scanf_float+0x414>
 810a2e4:	7035      	strb	r5, [r6, #0]
 810a2e6:	6823      	ldr	r3, [r4, #0]
 810a2e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810a2ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a2f0:	d11b      	bne.n	810a32a <_scanf_float+0x3a6>
 810a2f2:	9b01      	ldr	r3, [sp, #4]
 810a2f4:	454b      	cmp	r3, r9
 810a2f6:	eba3 0209 	sub.w	r2, r3, r9
 810a2fa:	d123      	bne.n	810a344 <_scanf_float+0x3c0>
 810a2fc:	2200      	movs	r2, #0
 810a2fe:	4659      	mov	r1, fp
 810a300:	4640      	mov	r0, r8
 810a302:	f000 ff2f 	bl	810b164 <_strtod_r>
 810a306:	6822      	ldr	r2, [r4, #0]
 810a308:	9b03      	ldr	r3, [sp, #12]
 810a30a:	f012 0f02 	tst.w	r2, #2
 810a30e:	ec57 6b10 	vmov	r6, r7, d0
 810a312:	681b      	ldr	r3, [r3, #0]
 810a314:	d021      	beq.n	810a35a <_scanf_float+0x3d6>
 810a316:	9903      	ldr	r1, [sp, #12]
 810a318:	1d1a      	adds	r2, r3, #4
 810a31a:	600a      	str	r2, [r1, #0]
 810a31c:	681b      	ldr	r3, [r3, #0]
 810a31e:	e9c3 6700 	strd	r6, r7, [r3]
 810a322:	68e3      	ldr	r3, [r4, #12]
 810a324:	3301      	adds	r3, #1
 810a326:	60e3      	str	r3, [r4, #12]
 810a328:	e66d      	b.n	810a006 <_scanf_float+0x82>
 810a32a:	9b04      	ldr	r3, [sp, #16]
 810a32c:	2b00      	cmp	r3, #0
 810a32e:	d0e5      	beq.n	810a2fc <_scanf_float+0x378>
 810a330:	9905      	ldr	r1, [sp, #20]
 810a332:	230a      	movs	r3, #10
 810a334:	462a      	mov	r2, r5
 810a336:	3101      	adds	r1, #1
 810a338:	4640      	mov	r0, r8
 810a33a:	f000 ff9b 	bl	810b274 <_strtol_r>
 810a33e:	9b04      	ldr	r3, [sp, #16]
 810a340:	9e05      	ldr	r6, [sp, #20]
 810a342:	1ac2      	subs	r2, r0, r3
 810a344:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810a348:	429e      	cmp	r6, r3
 810a34a:	bf28      	it	cs
 810a34c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810a350:	4912      	ldr	r1, [pc, #72]	; (810a39c <_scanf_float+0x418>)
 810a352:	4630      	mov	r0, r6
 810a354:	f000 f8b2 	bl	810a4bc <siprintf>
 810a358:	e7d0      	b.n	810a2fc <_scanf_float+0x378>
 810a35a:	9903      	ldr	r1, [sp, #12]
 810a35c:	f012 0f04 	tst.w	r2, #4
 810a360:	f103 0204 	add.w	r2, r3, #4
 810a364:	600a      	str	r2, [r1, #0]
 810a366:	d1d9      	bne.n	810a31c <_scanf_float+0x398>
 810a368:	f8d3 8000 	ldr.w	r8, [r3]
 810a36c:	ee10 2a10 	vmov	r2, s0
 810a370:	ee10 0a10 	vmov	r0, s0
 810a374:	463b      	mov	r3, r7
 810a376:	4639      	mov	r1, r7
 810a378:	f7f6 fc60 	bl	8100c3c <__aeabi_dcmpun>
 810a37c:	b128      	cbz	r0, 810a38a <_scanf_float+0x406>
 810a37e:	4808      	ldr	r0, [pc, #32]	; (810a3a0 <_scanf_float+0x41c>)
 810a380:	f000 f896 	bl	810a4b0 <nanf>
 810a384:	ed88 0a00 	vstr	s0, [r8]
 810a388:	e7cb      	b.n	810a322 <_scanf_float+0x39e>
 810a38a:	4630      	mov	r0, r6
 810a38c:	4639      	mov	r1, r7
 810a38e:	f7f6 fcb3 	bl	8100cf8 <__aeabi_d2f>
 810a392:	f8c8 0000 	str.w	r0, [r8]
 810a396:	e7c4      	b.n	810a322 <_scanf_float+0x39e>
 810a398:	2500      	movs	r5, #0
 810a39a:	e634      	b.n	810a006 <_scanf_float+0x82>
 810a39c:	0810e070 	.word	0x0810e070
 810a3a0:	0810e4e0 	.word	0x0810e4e0

0810a3a4 <_puts_r>:
 810a3a4:	b570      	push	{r4, r5, r6, lr}
 810a3a6:	460e      	mov	r6, r1
 810a3a8:	4605      	mov	r5, r0
 810a3aa:	b118      	cbz	r0, 810a3b4 <_puts_r+0x10>
 810a3ac:	6983      	ldr	r3, [r0, #24]
 810a3ae:	b90b      	cbnz	r3, 810a3b4 <_puts_r+0x10>
 810a3b0:	f001 ffc2 	bl	810c338 <__sinit>
 810a3b4:	69ab      	ldr	r3, [r5, #24]
 810a3b6:	68ac      	ldr	r4, [r5, #8]
 810a3b8:	b913      	cbnz	r3, 810a3c0 <_puts_r+0x1c>
 810a3ba:	4628      	mov	r0, r5
 810a3bc:	f001 ffbc 	bl	810c338 <__sinit>
 810a3c0:	4b2c      	ldr	r3, [pc, #176]	; (810a474 <_puts_r+0xd0>)
 810a3c2:	429c      	cmp	r4, r3
 810a3c4:	d120      	bne.n	810a408 <_puts_r+0x64>
 810a3c6:	686c      	ldr	r4, [r5, #4]
 810a3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a3ca:	07db      	lsls	r3, r3, #31
 810a3cc:	d405      	bmi.n	810a3da <_puts_r+0x36>
 810a3ce:	89a3      	ldrh	r3, [r4, #12]
 810a3d0:	0598      	lsls	r0, r3, #22
 810a3d2:	d402      	bmi.n	810a3da <_puts_r+0x36>
 810a3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a3d6:	f002 fbc0 	bl	810cb5a <__retarget_lock_acquire_recursive>
 810a3da:	89a3      	ldrh	r3, [r4, #12]
 810a3dc:	0719      	lsls	r1, r3, #28
 810a3de:	d51d      	bpl.n	810a41c <_puts_r+0x78>
 810a3e0:	6923      	ldr	r3, [r4, #16]
 810a3e2:	b1db      	cbz	r3, 810a41c <_puts_r+0x78>
 810a3e4:	3e01      	subs	r6, #1
 810a3e6:	68a3      	ldr	r3, [r4, #8]
 810a3e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a3ec:	3b01      	subs	r3, #1
 810a3ee:	60a3      	str	r3, [r4, #8]
 810a3f0:	bb39      	cbnz	r1, 810a442 <_puts_r+0x9e>
 810a3f2:	2b00      	cmp	r3, #0
 810a3f4:	da38      	bge.n	810a468 <_puts_r+0xc4>
 810a3f6:	4622      	mov	r2, r4
 810a3f8:	210a      	movs	r1, #10
 810a3fa:	4628      	mov	r0, r5
 810a3fc:	f000 ff46 	bl	810b28c <__swbuf_r>
 810a400:	3001      	adds	r0, #1
 810a402:	d011      	beq.n	810a428 <_puts_r+0x84>
 810a404:	250a      	movs	r5, #10
 810a406:	e011      	b.n	810a42c <_puts_r+0x88>
 810a408:	4b1b      	ldr	r3, [pc, #108]	; (810a478 <_puts_r+0xd4>)
 810a40a:	429c      	cmp	r4, r3
 810a40c:	d101      	bne.n	810a412 <_puts_r+0x6e>
 810a40e:	68ac      	ldr	r4, [r5, #8]
 810a410:	e7da      	b.n	810a3c8 <_puts_r+0x24>
 810a412:	4b1a      	ldr	r3, [pc, #104]	; (810a47c <_puts_r+0xd8>)
 810a414:	429c      	cmp	r4, r3
 810a416:	bf08      	it	eq
 810a418:	68ec      	ldreq	r4, [r5, #12]
 810a41a:	e7d5      	b.n	810a3c8 <_puts_r+0x24>
 810a41c:	4621      	mov	r1, r4
 810a41e:	4628      	mov	r0, r5
 810a420:	f000 ff86 	bl	810b330 <__swsetup_r>
 810a424:	2800      	cmp	r0, #0
 810a426:	d0dd      	beq.n	810a3e4 <_puts_r+0x40>
 810a428:	f04f 35ff 	mov.w	r5, #4294967295
 810a42c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a42e:	07da      	lsls	r2, r3, #31
 810a430:	d405      	bmi.n	810a43e <_puts_r+0x9a>
 810a432:	89a3      	ldrh	r3, [r4, #12]
 810a434:	059b      	lsls	r3, r3, #22
 810a436:	d402      	bmi.n	810a43e <_puts_r+0x9a>
 810a438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a43a:	f002 fb8f 	bl	810cb5c <__retarget_lock_release_recursive>
 810a43e:	4628      	mov	r0, r5
 810a440:	bd70      	pop	{r4, r5, r6, pc}
 810a442:	2b00      	cmp	r3, #0
 810a444:	da04      	bge.n	810a450 <_puts_r+0xac>
 810a446:	69a2      	ldr	r2, [r4, #24]
 810a448:	429a      	cmp	r2, r3
 810a44a:	dc06      	bgt.n	810a45a <_puts_r+0xb6>
 810a44c:	290a      	cmp	r1, #10
 810a44e:	d004      	beq.n	810a45a <_puts_r+0xb6>
 810a450:	6823      	ldr	r3, [r4, #0]
 810a452:	1c5a      	adds	r2, r3, #1
 810a454:	6022      	str	r2, [r4, #0]
 810a456:	7019      	strb	r1, [r3, #0]
 810a458:	e7c5      	b.n	810a3e6 <_puts_r+0x42>
 810a45a:	4622      	mov	r2, r4
 810a45c:	4628      	mov	r0, r5
 810a45e:	f000 ff15 	bl	810b28c <__swbuf_r>
 810a462:	3001      	adds	r0, #1
 810a464:	d1bf      	bne.n	810a3e6 <_puts_r+0x42>
 810a466:	e7df      	b.n	810a428 <_puts_r+0x84>
 810a468:	6823      	ldr	r3, [r4, #0]
 810a46a:	250a      	movs	r5, #10
 810a46c:	1c5a      	adds	r2, r3, #1
 810a46e:	6022      	str	r2, [r4, #0]
 810a470:	701d      	strb	r5, [r3, #0]
 810a472:	e7db      	b.n	810a42c <_puts_r+0x88>
 810a474:	0810e27c 	.word	0x0810e27c
 810a478:	0810e29c 	.word	0x0810e29c
 810a47c:	0810e25c 	.word	0x0810e25c

0810a480 <puts>:
 810a480:	4b02      	ldr	r3, [pc, #8]	; (810a48c <puts+0xc>)
 810a482:	4601      	mov	r1, r0
 810a484:	6818      	ldr	r0, [r3, #0]
 810a486:	f7ff bf8d 	b.w	810a3a4 <_puts_r>
 810a48a:	bf00      	nop
 810a48c:	10000014 	.word	0x10000014

0810a490 <_sbrk_r>:
 810a490:	b538      	push	{r3, r4, r5, lr}
 810a492:	4d06      	ldr	r5, [pc, #24]	; (810a4ac <_sbrk_r+0x1c>)
 810a494:	2300      	movs	r3, #0
 810a496:	4604      	mov	r4, r0
 810a498:	4608      	mov	r0, r1
 810a49a:	602b      	str	r3, [r5, #0]
 810a49c:	f7f7 ff8c 	bl	81023b8 <_sbrk>
 810a4a0:	1c43      	adds	r3, r0, #1
 810a4a2:	d102      	bne.n	810a4aa <_sbrk_r+0x1a>
 810a4a4:	682b      	ldr	r3, [r5, #0]
 810a4a6:	b103      	cbz	r3, 810a4aa <_sbrk_r+0x1a>
 810a4a8:	6023      	str	r3, [r4, #0]
 810a4aa:	bd38      	pop	{r3, r4, r5, pc}
 810a4ac:	10000534 	.word	0x10000534

0810a4b0 <nanf>:
 810a4b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810a4b8 <nanf+0x8>
 810a4b4:	4770      	bx	lr
 810a4b6:	bf00      	nop
 810a4b8:	7fc00000 	.word	0x7fc00000

0810a4bc <siprintf>:
 810a4bc:	b40e      	push	{r1, r2, r3}
 810a4be:	b500      	push	{lr}
 810a4c0:	b09c      	sub	sp, #112	; 0x70
 810a4c2:	ab1d      	add	r3, sp, #116	; 0x74
 810a4c4:	9002      	str	r0, [sp, #8]
 810a4c6:	9006      	str	r0, [sp, #24]
 810a4c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810a4cc:	4809      	ldr	r0, [pc, #36]	; (810a4f4 <siprintf+0x38>)
 810a4ce:	9107      	str	r1, [sp, #28]
 810a4d0:	9104      	str	r1, [sp, #16]
 810a4d2:	4909      	ldr	r1, [pc, #36]	; (810a4f8 <siprintf+0x3c>)
 810a4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 810a4d8:	9105      	str	r1, [sp, #20]
 810a4da:	6800      	ldr	r0, [r0, #0]
 810a4dc:	9301      	str	r3, [sp, #4]
 810a4de:	a902      	add	r1, sp, #8
 810a4e0:	f003 f96e 	bl	810d7c0 <_svfiprintf_r>
 810a4e4:	9b02      	ldr	r3, [sp, #8]
 810a4e6:	2200      	movs	r2, #0
 810a4e8:	701a      	strb	r2, [r3, #0]
 810a4ea:	b01c      	add	sp, #112	; 0x70
 810a4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 810a4f0:	b003      	add	sp, #12
 810a4f2:	4770      	bx	lr
 810a4f4:	10000014 	.word	0x10000014
 810a4f8:	ffff0208 	.word	0xffff0208

0810a4fc <strcat>:
 810a4fc:	b510      	push	{r4, lr}
 810a4fe:	4602      	mov	r2, r0
 810a500:	7814      	ldrb	r4, [r2, #0]
 810a502:	4613      	mov	r3, r2
 810a504:	3201      	adds	r2, #1
 810a506:	2c00      	cmp	r4, #0
 810a508:	d1fa      	bne.n	810a500 <strcat+0x4>
 810a50a:	3b01      	subs	r3, #1
 810a50c:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a510:	f803 2f01 	strb.w	r2, [r3, #1]!
 810a514:	2a00      	cmp	r2, #0
 810a516:	d1f9      	bne.n	810a50c <strcat+0x10>
 810a518:	bd10      	pop	{r4, pc}

0810a51a <sulp>:
 810a51a:	b570      	push	{r4, r5, r6, lr}
 810a51c:	4604      	mov	r4, r0
 810a51e:	460d      	mov	r5, r1
 810a520:	ec45 4b10 	vmov	d0, r4, r5
 810a524:	4616      	mov	r6, r2
 810a526:	f002 ff25 	bl	810d374 <__ulp>
 810a52a:	ec51 0b10 	vmov	r0, r1, d0
 810a52e:	b17e      	cbz	r6, 810a550 <sulp+0x36>
 810a530:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810a534:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a538:	2b00      	cmp	r3, #0
 810a53a:	dd09      	ble.n	810a550 <sulp+0x36>
 810a53c:	051b      	lsls	r3, r3, #20
 810a53e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810a542:	2400      	movs	r4, #0
 810a544:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810a548:	4622      	mov	r2, r4
 810a54a:	462b      	mov	r3, r5
 810a54c:	f7f6 f8dc 	bl	8100708 <__aeabi_dmul>
 810a550:	bd70      	pop	{r4, r5, r6, pc}
 810a552:	0000      	movs	r0, r0
 810a554:	0000      	movs	r0, r0
	...

0810a558 <_strtod_l>:
 810a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a55c:	ed2d 8b02 	vpush	{d8}
 810a560:	b09d      	sub	sp, #116	; 0x74
 810a562:	461f      	mov	r7, r3
 810a564:	2300      	movs	r3, #0
 810a566:	9318      	str	r3, [sp, #96]	; 0x60
 810a568:	4ba2      	ldr	r3, [pc, #648]	; (810a7f4 <_strtod_l+0x29c>)
 810a56a:	9213      	str	r2, [sp, #76]	; 0x4c
 810a56c:	681b      	ldr	r3, [r3, #0]
 810a56e:	9305      	str	r3, [sp, #20]
 810a570:	4604      	mov	r4, r0
 810a572:	4618      	mov	r0, r3
 810a574:	4688      	mov	r8, r1
 810a576:	f7f5 feb3 	bl	81002e0 <strlen>
 810a57a:	f04f 0a00 	mov.w	sl, #0
 810a57e:	4605      	mov	r5, r0
 810a580:	f04f 0b00 	mov.w	fp, #0
 810a584:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a58a:	781a      	ldrb	r2, [r3, #0]
 810a58c:	2a2b      	cmp	r2, #43	; 0x2b
 810a58e:	d04e      	beq.n	810a62e <_strtod_l+0xd6>
 810a590:	d83b      	bhi.n	810a60a <_strtod_l+0xb2>
 810a592:	2a0d      	cmp	r2, #13
 810a594:	d834      	bhi.n	810a600 <_strtod_l+0xa8>
 810a596:	2a08      	cmp	r2, #8
 810a598:	d834      	bhi.n	810a604 <_strtod_l+0xac>
 810a59a:	2a00      	cmp	r2, #0
 810a59c:	d03e      	beq.n	810a61c <_strtod_l+0xc4>
 810a59e:	2300      	movs	r3, #0
 810a5a0:	930a      	str	r3, [sp, #40]	; 0x28
 810a5a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a5a4:	7833      	ldrb	r3, [r6, #0]
 810a5a6:	2b30      	cmp	r3, #48	; 0x30
 810a5a8:	f040 80b0 	bne.w	810a70c <_strtod_l+0x1b4>
 810a5ac:	7873      	ldrb	r3, [r6, #1]
 810a5ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a5b2:	2b58      	cmp	r3, #88	; 0x58
 810a5b4:	d168      	bne.n	810a688 <_strtod_l+0x130>
 810a5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a5b8:	9301      	str	r3, [sp, #4]
 810a5ba:	ab18      	add	r3, sp, #96	; 0x60
 810a5bc:	9702      	str	r7, [sp, #8]
 810a5be:	9300      	str	r3, [sp, #0]
 810a5c0:	4a8d      	ldr	r2, [pc, #564]	; (810a7f8 <_strtod_l+0x2a0>)
 810a5c2:	ab19      	add	r3, sp, #100	; 0x64
 810a5c4:	a917      	add	r1, sp, #92	; 0x5c
 810a5c6:	4620      	mov	r0, r4
 810a5c8:	f001 ffba 	bl	810c540 <__gethex>
 810a5cc:	f010 0707 	ands.w	r7, r0, #7
 810a5d0:	4605      	mov	r5, r0
 810a5d2:	d005      	beq.n	810a5e0 <_strtod_l+0x88>
 810a5d4:	2f06      	cmp	r7, #6
 810a5d6:	d12c      	bne.n	810a632 <_strtod_l+0xda>
 810a5d8:	3601      	adds	r6, #1
 810a5da:	2300      	movs	r3, #0
 810a5dc:	9617      	str	r6, [sp, #92]	; 0x5c
 810a5de:	930a      	str	r3, [sp, #40]	; 0x28
 810a5e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a5e2:	2b00      	cmp	r3, #0
 810a5e4:	f040 8590 	bne.w	810b108 <_strtod_l+0xbb0>
 810a5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a5ea:	b1eb      	cbz	r3, 810a628 <_strtod_l+0xd0>
 810a5ec:	4652      	mov	r2, sl
 810a5ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a5f2:	ec43 2b10 	vmov	d0, r2, r3
 810a5f6:	b01d      	add	sp, #116	; 0x74
 810a5f8:	ecbd 8b02 	vpop	{d8}
 810a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a600:	2a20      	cmp	r2, #32
 810a602:	d1cc      	bne.n	810a59e <_strtod_l+0x46>
 810a604:	3301      	adds	r3, #1
 810a606:	9317      	str	r3, [sp, #92]	; 0x5c
 810a608:	e7be      	b.n	810a588 <_strtod_l+0x30>
 810a60a:	2a2d      	cmp	r2, #45	; 0x2d
 810a60c:	d1c7      	bne.n	810a59e <_strtod_l+0x46>
 810a60e:	2201      	movs	r2, #1
 810a610:	920a      	str	r2, [sp, #40]	; 0x28
 810a612:	1c5a      	adds	r2, r3, #1
 810a614:	9217      	str	r2, [sp, #92]	; 0x5c
 810a616:	785b      	ldrb	r3, [r3, #1]
 810a618:	2b00      	cmp	r3, #0
 810a61a:	d1c2      	bne.n	810a5a2 <_strtod_l+0x4a>
 810a61c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a61e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a622:	2b00      	cmp	r3, #0
 810a624:	f040 856e 	bne.w	810b104 <_strtod_l+0xbac>
 810a628:	4652      	mov	r2, sl
 810a62a:	465b      	mov	r3, fp
 810a62c:	e7e1      	b.n	810a5f2 <_strtod_l+0x9a>
 810a62e:	2200      	movs	r2, #0
 810a630:	e7ee      	b.n	810a610 <_strtod_l+0xb8>
 810a632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a634:	b13a      	cbz	r2, 810a646 <_strtod_l+0xee>
 810a636:	2135      	movs	r1, #53	; 0x35
 810a638:	a81a      	add	r0, sp, #104	; 0x68
 810a63a:	f002 ffa6 	bl	810d58a <__copybits>
 810a63e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a640:	4620      	mov	r0, r4
 810a642:	f002 fb65 	bl	810cd10 <_Bfree>
 810a646:	3f01      	subs	r7, #1
 810a648:	2f04      	cmp	r7, #4
 810a64a:	d806      	bhi.n	810a65a <_strtod_l+0x102>
 810a64c:	e8df f007 	tbb	[pc, r7]
 810a650:	1714030a 	.word	0x1714030a
 810a654:	0a          	.byte	0x0a
 810a655:	00          	.byte	0x00
 810a656:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810a65a:	0728      	lsls	r0, r5, #28
 810a65c:	d5c0      	bpl.n	810a5e0 <_strtod_l+0x88>
 810a65e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810a662:	e7bd      	b.n	810a5e0 <_strtod_l+0x88>
 810a664:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810a668:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810a66a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a66e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a672:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810a676:	e7f0      	b.n	810a65a <_strtod_l+0x102>
 810a678:	f8df b180 	ldr.w	fp, [pc, #384]	; 810a7fc <_strtod_l+0x2a4>
 810a67c:	e7ed      	b.n	810a65a <_strtod_l+0x102>
 810a67e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810a682:	f04f 3aff 	mov.w	sl, #4294967295
 810a686:	e7e8      	b.n	810a65a <_strtod_l+0x102>
 810a688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a68a:	1c5a      	adds	r2, r3, #1
 810a68c:	9217      	str	r2, [sp, #92]	; 0x5c
 810a68e:	785b      	ldrb	r3, [r3, #1]
 810a690:	2b30      	cmp	r3, #48	; 0x30
 810a692:	d0f9      	beq.n	810a688 <_strtod_l+0x130>
 810a694:	2b00      	cmp	r3, #0
 810a696:	d0a3      	beq.n	810a5e0 <_strtod_l+0x88>
 810a698:	2301      	movs	r3, #1
 810a69a:	f04f 0900 	mov.w	r9, #0
 810a69e:	9304      	str	r3, [sp, #16]
 810a6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a6a2:	9308      	str	r3, [sp, #32]
 810a6a4:	f8cd 901c 	str.w	r9, [sp, #28]
 810a6a8:	464f      	mov	r7, r9
 810a6aa:	220a      	movs	r2, #10
 810a6ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810a6ae:	7806      	ldrb	r6, [r0, #0]
 810a6b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a6b4:	b2d9      	uxtb	r1, r3
 810a6b6:	2909      	cmp	r1, #9
 810a6b8:	d92a      	bls.n	810a710 <_strtod_l+0x1b8>
 810a6ba:	9905      	ldr	r1, [sp, #20]
 810a6bc:	462a      	mov	r2, r5
 810a6be:	f003 fb26 	bl	810dd0e <strncmp>
 810a6c2:	b398      	cbz	r0, 810a72c <_strtod_l+0x1d4>
 810a6c4:	2000      	movs	r0, #0
 810a6c6:	4632      	mov	r2, r6
 810a6c8:	463d      	mov	r5, r7
 810a6ca:	9005      	str	r0, [sp, #20]
 810a6cc:	4603      	mov	r3, r0
 810a6ce:	2a65      	cmp	r2, #101	; 0x65
 810a6d0:	d001      	beq.n	810a6d6 <_strtod_l+0x17e>
 810a6d2:	2a45      	cmp	r2, #69	; 0x45
 810a6d4:	d118      	bne.n	810a708 <_strtod_l+0x1b0>
 810a6d6:	b91d      	cbnz	r5, 810a6e0 <_strtod_l+0x188>
 810a6d8:	9a04      	ldr	r2, [sp, #16]
 810a6da:	4302      	orrs	r2, r0
 810a6dc:	d09e      	beq.n	810a61c <_strtod_l+0xc4>
 810a6de:	2500      	movs	r5, #0
 810a6e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810a6e4:	f108 0201 	add.w	r2, r8, #1
 810a6e8:	9217      	str	r2, [sp, #92]	; 0x5c
 810a6ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 810a6ee:	2a2b      	cmp	r2, #43	; 0x2b
 810a6f0:	d075      	beq.n	810a7de <_strtod_l+0x286>
 810a6f2:	2a2d      	cmp	r2, #45	; 0x2d
 810a6f4:	d07b      	beq.n	810a7ee <_strtod_l+0x296>
 810a6f6:	f04f 0c00 	mov.w	ip, #0
 810a6fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a6fe:	2909      	cmp	r1, #9
 810a700:	f240 8082 	bls.w	810a808 <_strtod_l+0x2b0>
 810a704:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a708:	2600      	movs	r6, #0
 810a70a:	e09d      	b.n	810a848 <_strtod_l+0x2f0>
 810a70c:	2300      	movs	r3, #0
 810a70e:	e7c4      	b.n	810a69a <_strtod_l+0x142>
 810a710:	2f08      	cmp	r7, #8
 810a712:	bfd8      	it	le
 810a714:	9907      	ldrle	r1, [sp, #28]
 810a716:	f100 0001 	add.w	r0, r0, #1
 810a71a:	bfda      	itte	le
 810a71c:	fb02 3301 	mlale	r3, r2, r1, r3
 810a720:	9307      	strle	r3, [sp, #28]
 810a722:	fb02 3909 	mlagt	r9, r2, r9, r3
 810a726:	3701      	adds	r7, #1
 810a728:	9017      	str	r0, [sp, #92]	; 0x5c
 810a72a:	e7bf      	b.n	810a6ac <_strtod_l+0x154>
 810a72c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a72e:	195a      	adds	r2, r3, r5
 810a730:	9217      	str	r2, [sp, #92]	; 0x5c
 810a732:	5d5a      	ldrb	r2, [r3, r5]
 810a734:	2f00      	cmp	r7, #0
 810a736:	d037      	beq.n	810a7a8 <_strtod_l+0x250>
 810a738:	9005      	str	r0, [sp, #20]
 810a73a:	463d      	mov	r5, r7
 810a73c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a740:	2b09      	cmp	r3, #9
 810a742:	d912      	bls.n	810a76a <_strtod_l+0x212>
 810a744:	2301      	movs	r3, #1
 810a746:	e7c2      	b.n	810a6ce <_strtod_l+0x176>
 810a748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a74a:	1c5a      	adds	r2, r3, #1
 810a74c:	9217      	str	r2, [sp, #92]	; 0x5c
 810a74e:	785a      	ldrb	r2, [r3, #1]
 810a750:	3001      	adds	r0, #1
 810a752:	2a30      	cmp	r2, #48	; 0x30
 810a754:	d0f8      	beq.n	810a748 <_strtod_l+0x1f0>
 810a756:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a75a:	2b08      	cmp	r3, #8
 810a75c:	f200 84d9 	bhi.w	810b112 <_strtod_l+0xbba>
 810a760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a762:	9005      	str	r0, [sp, #20]
 810a764:	2000      	movs	r0, #0
 810a766:	9308      	str	r3, [sp, #32]
 810a768:	4605      	mov	r5, r0
 810a76a:	3a30      	subs	r2, #48	; 0x30
 810a76c:	f100 0301 	add.w	r3, r0, #1
 810a770:	d014      	beq.n	810a79c <_strtod_l+0x244>
 810a772:	9905      	ldr	r1, [sp, #20]
 810a774:	4419      	add	r1, r3
 810a776:	9105      	str	r1, [sp, #20]
 810a778:	462b      	mov	r3, r5
 810a77a:	eb00 0e05 	add.w	lr, r0, r5
 810a77e:	210a      	movs	r1, #10
 810a780:	4573      	cmp	r3, lr
 810a782:	d113      	bne.n	810a7ac <_strtod_l+0x254>
 810a784:	182b      	adds	r3, r5, r0
 810a786:	2b08      	cmp	r3, #8
 810a788:	f105 0501 	add.w	r5, r5, #1
 810a78c:	4405      	add	r5, r0
 810a78e:	dc1c      	bgt.n	810a7ca <_strtod_l+0x272>
 810a790:	9907      	ldr	r1, [sp, #28]
 810a792:	230a      	movs	r3, #10
 810a794:	fb03 2301 	mla	r3, r3, r1, r2
 810a798:	9307      	str	r3, [sp, #28]
 810a79a:	2300      	movs	r3, #0
 810a79c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a79e:	1c51      	adds	r1, r2, #1
 810a7a0:	9117      	str	r1, [sp, #92]	; 0x5c
 810a7a2:	7852      	ldrb	r2, [r2, #1]
 810a7a4:	4618      	mov	r0, r3
 810a7a6:	e7c9      	b.n	810a73c <_strtod_l+0x1e4>
 810a7a8:	4638      	mov	r0, r7
 810a7aa:	e7d2      	b.n	810a752 <_strtod_l+0x1fa>
 810a7ac:	2b08      	cmp	r3, #8
 810a7ae:	dc04      	bgt.n	810a7ba <_strtod_l+0x262>
 810a7b0:	9e07      	ldr	r6, [sp, #28]
 810a7b2:	434e      	muls	r6, r1
 810a7b4:	9607      	str	r6, [sp, #28]
 810a7b6:	3301      	adds	r3, #1
 810a7b8:	e7e2      	b.n	810a780 <_strtod_l+0x228>
 810a7ba:	f103 0c01 	add.w	ip, r3, #1
 810a7be:	f1bc 0f10 	cmp.w	ip, #16
 810a7c2:	bfd8      	it	le
 810a7c4:	fb01 f909 	mulle.w	r9, r1, r9
 810a7c8:	e7f5      	b.n	810a7b6 <_strtod_l+0x25e>
 810a7ca:	2d10      	cmp	r5, #16
 810a7cc:	bfdc      	itt	le
 810a7ce:	230a      	movle	r3, #10
 810a7d0:	fb03 2909 	mlale	r9, r3, r9, r2
 810a7d4:	e7e1      	b.n	810a79a <_strtod_l+0x242>
 810a7d6:	2300      	movs	r3, #0
 810a7d8:	9305      	str	r3, [sp, #20]
 810a7da:	2301      	movs	r3, #1
 810a7dc:	e77c      	b.n	810a6d8 <_strtod_l+0x180>
 810a7de:	f04f 0c00 	mov.w	ip, #0
 810a7e2:	f108 0202 	add.w	r2, r8, #2
 810a7e6:	9217      	str	r2, [sp, #92]	; 0x5c
 810a7e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 810a7ec:	e785      	b.n	810a6fa <_strtod_l+0x1a2>
 810a7ee:	f04f 0c01 	mov.w	ip, #1
 810a7f2:	e7f6      	b.n	810a7e2 <_strtod_l+0x28a>
 810a7f4:	0810e324 	.word	0x0810e324
 810a7f8:	0810e078 	.word	0x0810e078
 810a7fc:	7ff00000 	.word	0x7ff00000
 810a800:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a802:	1c51      	adds	r1, r2, #1
 810a804:	9117      	str	r1, [sp, #92]	; 0x5c
 810a806:	7852      	ldrb	r2, [r2, #1]
 810a808:	2a30      	cmp	r2, #48	; 0x30
 810a80a:	d0f9      	beq.n	810a800 <_strtod_l+0x2a8>
 810a80c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a810:	2908      	cmp	r1, #8
 810a812:	f63f af79 	bhi.w	810a708 <_strtod_l+0x1b0>
 810a816:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a81a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a81c:	9206      	str	r2, [sp, #24]
 810a81e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a820:	1c51      	adds	r1, r2, #1
 810a822:	9117      	str	r1, [sp, #92]	; 0x5c
 810a824:	7852      	ldrb	r2, [r2, #1]
 810a826:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810a82a:	2e09      	cmp	r6, #9
 810a82c:	d937      	bls.n	810a89e <_strtod_l+0x346>
 810a82e:	9e06      	ldr	r6, [sp, #24]
 810a830:	1b89      	subs	r1, r1, r6
 810a832:	2908      	cmp	r1, #8
 810a834:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810a838:	dc02      	bgt.n	810a840 <_strtod_l+0x2e8>
 810a83a:	4576      	cmp	r6, lr
 810a83c:	bfa8      	it	ge
 810a83e:	4676      	movge	r6, lr
 810a840:	f1bc 0f00 	cmp.w	ip, #0
 810a844:	d000      	beq.n	810a848 <_strtod_l+0x2f0>
 810a846:	4276      	negs	r6, r6
 810a848:	2d00      	cmp	r5, #0
 810a84a:	d14d      	bne.n	810a8e8 <_strtod_l+0x390>
 810a84c:	9904      	ldr	r1, [sp, #16]
 810a84e:	4301      	orrs	r1, r0
 810a850:	f47f aec6 	bne.w	810a5e0 <_strtod_l+0x88>
 810a854:	2b00      	cmp	r3, #0
 810a856:	f47f aee1 	bne.w	810a61c <_strtod_l+0xc4>
 810a85a:	2a69      	cmp	r2, #105	; 0x69
 810a85c:	d027      	beq.n	810a8ae <_strtod_l+0x356>
 810a85e:	dc24      	bgt.n	810a8aa <_strtod_l+0x352>
 810a860:	2a49      	cmp	r2, #73	; 0x49
 810a862:	d024      	beq.n	810a8ae <_strtod_l+0x356>
 810a864:	2a4e      	cmp	r2, #78	; 0x4e
 810a866:	f47f aed9 	bne.w	810a61c <_strtod_l+0xc4>
 810a86a:	499f      	ldr	r1, [pc, #636]	; (810aae8 <_strtod_l+0x590>)
 810a86c:	a817      	add	r0, sp, #92	; 0x5c
 810a86e:	f002 f8bf 	bl	810c9f0 <__match>
 810a872:	2800      	cmp	r0, #0
 810a874:	f43f aed2 	beq.w	810a61c <_strtod_l+0xc4>
 810a878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a87a:	781b      	ldrb	r3, [r3, #0]
 810a87c:	2b28      	cmp	r3, #40	; 0x28
 810a87e:	d12d      	bne.n	810a8dc <_strtod_l+0x384>
 810a880:	499a      	ldr	r1, [pc, #616]	; (810aaec <_strtod_l+0x594>)
 810a882:	aa1a      	add	r2, sp, #104	; 0x68
 810a884:	a817      	add	r0, sp, #92	; 0x5c
 810a886:	f002 f8c7 	bl	810ca18 <__hexnan>
 810a88a:	2805      	cmp	r0, #5
 810a88c:	d126      	bne.n	810a8dc <_strtod_l+0x384>
 810a88e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810a890:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810a894:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810a898:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810a89c:	e6a0      	b.n	810a5e0 <_strtod_l+0x88>
 810a89e:	210a      	movs	r1, #10
 810a8a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 810a8a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810a8a8:	e7b9      	b.n	810a81e <_strtod_l+0x2c6>
 810a8aa:	2a6e      	cmp	r2, #110	; 0x6e
 810a8ac:	e7db      	b.n	810a866 <_strtod_l+0x30e>
 810a8ae:	4990      	ldr	r1, [pc, #576]	; (810aaf0 <_strtod_l+0x598>)
 810a8b0:	a817      	add	r0, sp, #92	; 0x5c
 810a8b2:	f002 f89d 	bl	810c9f0 <__match>
 810a8b6:	2800      	cmp	r0, #0
 810a8b8:	f43f aeb0 	beq.w	810a61c <_strtod_l+0xc4>
 810a8bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a8be:	498d      	ldr	r1, [pc, #564]	; (810aaf4 <_strtod_l+0x59c>)
 810a8c0:	3b01      	subs	r3, #1
 810a8c2:	a817      	add	r0, sp, #92	; 0x5c
 810a8c4:	9317      	str	r3, [sp, #92]	; 0x5c
 810a8c6:	f002 f893 	bl	810c9f0 <__match>
 810a8ca:	b910      	cbnz	r0, 810a8d2 <_strtod_l+0x37a>
 810a8cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a8ce:	3301      	adds	r3, #1
 810a8d0:	9317      	str	r3, [sp, #92]	; 0x5c
 810a8d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 810ab04 <_strtod_l+0x5ac>
 810a8d6:	f04f 0a00 	mov.w	sl, #0
 810a8da:	e681      	b.n	810a5e0 <_strtod_l+0x88>
 810a8dc:	4886      	ldr	r0, [pc, #536]	; (810aaf8 <_strtod_l+0x5a0>)
 810a8de:	f003 f9cb 	bl	810dc78 <nan>
 810a8e2:	ec5b ab10 	vmov	sl, fp, d0
 810a8e6:	e67b      	b.n	810a5e0 <_strtod_l+0x88>
 810a8e8:	9b05      	ldr	r3, [sp, #20]
 810a8ea:	9807      	ldr	r0, [sp, #28]
 810a8ec:	1af3      	subs	r3, r6, r3
 810a8ee:	2f00      	cmp	r7, #0
 810a8f0:	bf08      	it	eq
 810a8f2:	462f      	moveq	r7, r5
 810a8f4:	2d10      	cmp	r5, #16
 810a8f6:	9306      	str	r3, [sp, #24]
 810a8f8:	46a8      	mov	r8, r5
 810a8fa:	bfa8      	it	ge
 810a8fc:	f04f 0810 	movge.w	r8, #16
 810a900:	f7f5 fe88 	bl	8100614 <__aeabi_ui2d>
 810a904:	2d09      	cmp	r5, #9
 810a906:	4682      	mov	sl, r0
 810a908:	468b      	mov	fp, r1
 810a90a:	dd13      	ble.n	810a934 <_strtod_l+0x3dc>
 810a90c:	4b7b      	ldr	r3, [pc, #492]	; (810aafc <_strtod_l+0x5a4>)
 810a90e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810a912:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a916:	f7f5 fef7 	bl	8100708 <__aeabi_dmul>
 810a91a:	4682      	mov	sl, r0
 810a91c:	4648      	mov	r0, r9
 810a91e:	468b      	mov	fp, r1
 810a920:	f7f5 fe78 	bl	8100614 <__aeabi_ui2d>
 810a924:	4602      	mov	r2, r0
 810a926:	460b      	mov	r3, r1
 810a928:	4650      	mov	r0, sl
 810a92a:	4659      	mov	r1, fp
 810a92c:	f7f5 fd36 	bl	810039c <__adddf3>
 810a930:	4682      	mov	sl, r0
 810a932:	468b      	mov	fp, r1
 810a934:	2d0f      	cmp	r5, #15
 810a936:	dc38      	bgt.n	810a9aa <_strtod_l+0x452>
 810a938:	9b06      	ldr	r3, [sp, #24]
 810a93a:	2b00      	cmp	r3, #0
 810a93c:	f43f ae50 	beq.w	810a5e0 <_strtod_l+0x88>
 810a940:	dd24      	ble.n	810a98c <_strtod_l+0x434>
 810a942:	2b16      	cmp	r3, #22
 810a944:	dc0b      	bgt.n	810a95e <_strtod_l+0x406>
 810a946:	496d      	ldr	r1, [pc, #436]	; (810aafc <_strtod_l+0x5a4>)
 810a948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a950:	4652      	mov	r2, sl
 810a952:	465b      	mov	r3, fp
 810a954:	f7f5 fed8 	bl	8100708 <__aeabi_dmul>
 810a958:	4682      	mov	sl, r0
 810a95a:	468b      	mov	fp, r1
 810a95c:	e640      	b.n	810a5e0 <_strtod_l+0x88>
 810a95e:	9a06      	ldr	r2, [sp, #24]
 810a960:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810a964:	4293      	cmp	r3, r2
 810a966:	db20      	blt.n	810a9aa <_strtod_l+0x452>
 810a968:	4c64      	ldr	r4, [pc, #400]	; (810aafc <_strtod_l+0x5a4>)
 810a96a:	f1c5 050f 	rsb	r5, r5, #15
 810a96e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810a972:	4652      	mov	r2, sl
 810a974:	465b      	mov	r3, fp
 810a976:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a97a:	f7f5 fec5 	bl	8100708 <__aeabi_dmul>
 810a97e:	9b06      	ldr	r3, [sp, #24]
 810a980:	1b5d      	subs	r5, r3, r5
 810a982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810a986:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a98a:	e7e3      	b.n	810a954 <_strtod_l+0x3fc>
 810a98c:	9b06      	ldr	r3, [sp, #24]
 810a98e:	3316      	adds	r3, #22
 810a990:	db0b      	blt.n	810a9aa <_strtod_l+0x452>
 810a992:	9b05      	ldr	r3, [sp, #20]
 810a994:	1b9e      	subs	r6, r3, r6
 810a996:	4b59      	ldr	r3, [pc, #356]	; (810aafc <_strtod_l+0x5a4>)
 810a998:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810a99c:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a9a0:	4650      	mov	r0, sl
 810a9a2:	4659      	mov	r1, fp
 810a9a4:	f7f5 ffda 	bl	810095c <__aeabi_ddiv>
 810a9a8:	e7d6      	b.n	810a958 <_strtod_l+0x400>
 810a9aa:	9b06      	ldr	r3, [sp, #24]
 810a9ac:	eba5 0808 	sub.w	r8, r5, r8
 810a9b0:	4498      	add	r8, r3
 810a9b2:	f1b8 0f00 	cmp.w	r8, #0
 810a9b6:	dd74      	ble.n	810aaa2 <_strtod_l+0x54a>
 810a9b8:	f018 030f 	ands.w	r3, r8, #15
 810a9bc:	d00a      	beq.n	810a9d4 <_strtod_l+0x47c>
 810a9be:	494f      	ldr	r1, [pc, #316]	; (810aafc <_strtod_l+0x5a4>)
 810a9c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a9c4:	4652      	mov	r2, sl
 810a9c6:	465b      	mov	r3, fp
 810a9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a9cc:	f7f5 fe9c 	bl	8100708 <__aeabi_dmul>
 810a9d0:	4682      	mov	sl, r0
 810a9d2:	468b      	mov	fp, r1
 810a9d4:	f038 080f 	bics.w	r8, r8, #15
 810a9d8:	d04f      	beq.n	810aa7a <_strtod_l+0x522>
 810a9da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810a9de:	dd22      	ble.n	810aa26 <_strtod_l+0x4ce>
 810a9e0:	2500      	movs	r5, #0
 810a9e2:	462e      	mov	r6, r5
 810a9e4:	9507      	str	r5, [sp, #28]
 810a9e6:	9505      	str	r5, [sp, #20]
 810a9e8:	2322      	movs	r3, #34	; 0x22
 810a9ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 810ab04 <_strtod_l+0x5ac>
 810a9ee:	6023      	str	r3, [r4, #0]
 810a9f0:	f04f 0a00 	mov.w	sl, #0
 810a9f4:	9b07      	ldr	r3, [sp, #28]
 810a9f6:	2b00      	cmp	r3, #0
 810a9f8:	f43f adf2 	beq.w	810a5e0 <_strtod_l+0x88>
 810a9fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a9fe:	4620      	mov	r0, r4
 810aa00:	f002 f986 	bl	810cd10 <_Bfree>
 810aa04:	9905      	ldr	r1, [sp, #20]
 810aa06:	4620      	mov	r0, r4
 810aa08:	f002 f982 	bl	810cd10 <_Bfree>
 810aa0c:	4631      	mov	r1, r6
 810aa0e:	4620      	mov	r0, r4
 810aa10:	f002 f97e 	bl	810cd10 <_Bfree>
 810aa14:	9907      	ldr	r1, [sp, #28]
 810aa16:	4620      	mov	r0, r4
 810aa18:	f002 f97a 	bl	810cd10 <_Bfree>
 810aa1c:	4629      	mov	r1, r5
 810aa1e:	4620      	mov	r0, r4
 810aa20:	f002 f976 	bl	810cd10 <_Bfree>
 810aa24:	e5dc      	b.n	810a5e0 <_strtod_l+0x88>
 810aa26:	4b36      	ldr	r3, [pc, #216]	; (810ab00 <_strtod_l+0x5a8>)
 810aa28:	9304      	str	r3, [sp, #16]
 810aa2a:	2300      	movs	r3, #0
 810aa2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 810aa30:	4650      	mov	r0, sl
 810aa32:	4659      	mov	r1, fp
 810aa34:	4699      	mov	r9, r3
 810aa36:	f1b8 0f01 	cmp.w	r8, #1
 810aa3a:	dc21      	bgt.n	810aa80 <_strtod_l+0x528>
 810aa3c:	b10b      	cbz	r3, 810aa42 <_strtod_l+0x4ea>
 810aa3e:	4682      	mov	sl, r0
 810aa40:	468b      	mov	fp, r1
 810aa42:	4b2f      	ldr	r3, [pc, #188]	; (810ab00 <_strtod_l+0x5a8>)
 810aa44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810aa48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810aa4c:	4652      	mov	r2, sl
 810aa4e:	465b      	mov	r3, fp
 810aa50:	e9d9 0100 	ldrd	r0, r1, [r9]
 810aa54:	f7f5 fe58 	bl	8100708 <__aeabi_dmul>
 810aa58:	4b2a      	ldr	r3, [pc, #168]	; (810ab04 <_strtod_l+0x5ac>)
 810aa5a:	460a      	mov	r2, r1
 810aa5c:	400b      	ands	r3, r1
 810aa5e:	492a      	ldr	r1, [pc, #168]	; (810ab08 <_strtod_l+0x5b0>)
 810aa60:	428b      	cmp	r3, r1
 810aa62:	4682      	mov	sl, r0
 810aa64:	d8bc      	bhi.n	810a9e0 <_strtod_l+0x488>
 810aa66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810aa6a:	428b      	cmp	r3, r1
 810aa6c:	bf86      	itte	hi
 810aa6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810ab0c <_strtod_l+0x5b4>
 810aa72:	f04f 3aff 	movhi.w	sl, #4294967295
 810aa76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810aa7a:	2300      	movs	r3, #0
 810aa7c:	9304      	str	r3, [sp, #16]
 810aa7e:	e084      	b.n	810ab8a <_strtod_l+0x632>
 810aa80:	f018 0f01 	tst.w	r8, #1
 810aa84:	d005      	beq.n	810aa92 <_strtod_l+0x53a>
 810aa86:	9b04      	ldr	r3, [sp, #16]
 810aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa8c:	f7f5 fe3c 	bl	8100708 <__aeabi_dmul>
 810aa90:	2301      	movs	r3, #1
 810aa92:	9a04      	ldr	r2, [sp, #16]
 810aa94:	3208      	adds	r2, #8
 810aa96:	f109 0901 	add.w	r9, r9, #1
 810aa9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810aa9e:	9204      	str	r2, [sp, #16]
 810aaa0:	e7c9      	b.n	810aa36 <_strtod_l+0x4de>
 810aaa2:	d0ea      	beq.n	810aa7a <_strtod_l+0x522>
 810aaa4:	f1c8 0800 	rsb	r8, r8, #0
 810aaa8:	f018 020f 	ands.w	r2, r8, #15
 810aaac:	d00a      	beq.n	810aac4 <_strtod_l+0x56c>
 810aaae:	4b13      	ldr	r3, [pc, #76]	; (810aafc <_strtod_l+0x5a4>)
 810aab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810aab4:	4650      	mov	r0, sl
 810aab6:	4659      	mov	r1, fp
 810aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aabc:	f7f5 ff4e 	bl	810095c <__aeabi_ddiv>
 810aac0:	4682      	mov	sl, r0
 810aac2:	468b      	mov	fp, r1
 810aac4:	ea5f 1828 	movs.w	r8, r8, asr #4
 810aac8:	d0d7      	beq.n	810aa7a <_strtod_l+0x522>
 810aaca:	f1b8 0f1f 	cmp.w	r8, #31
 810aace:	dd1f      	ble.n	810ab10 <_strtod_l+0x5b8>
 810aad0:	2500      	movs	r5, #0
 810aad2:	462e      	mov	r6, r5
 810aad4:	9507      	str	r5, [sp, #28]
 810aad6:	9505      	str	r5, [sp, #20]
 810aad8:	2322      	movs	r3, #34	; 0x22
 810aada:	f04f 0a00 	mov.w	sl, #0
 810aade:	f04f 0b00 	mov.w	fp, #0
 810aae2:	6023      	str	r3, [r4, #0]
 810aae4:	e786      	b.n	810a9f4 <_strtod_l+0x49c>
 810aae6:	bf00      	nop
 810aae8:	0810e049 	.word	0x0810e049
 810aaec:	0810e08c 	.word	0x0810e08c
 810aaf0:	0810e041 	.word	0x0810e041
 810aaf4:	0810e1cc 	.word	0x0810e1cc
 810aaf8:	0810e4e0 	.word	0x0810e4e0
 810aafc:	0810e3c0 	.word	0x0810e3c0
 810ab00:	0810e398 	.word	0x0810e398
 810ab04:	7ff00000 	.word	0x7ff00000
 810ab08:	7ca00000 	.word	0x7ca00000
 810ab0c:	7fefffff 	.word	0x7fefffff
 810ab10:	f018 0310 	ands.w	r3, r8, #16
 810ab14:	bf18      	it	ne
 810ab16:	236a      	movne	r3, #106	; 0x6a
 810ab18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810aec8 <_strtod_l+0x970>
 810ab1c:	9304      	str	r3, [sp, #16]
 810ab1e:	4650      	mov	r0, sl
 810ab20:	4659      	mov	r1, fp
 810ab22:	2300      	movs	r3, #0
 810ab24:	f018 0f01 	tst.w	r8, #1
 810ab28:	d004      	beq.n	810ab34 <_strtod_l+0x5dc>
 810ab2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810ab2e:	f7f5 fdeb 	bl	8100708 <__aeabi_dmul>
 810ab32:	2301      	movs	r3, #1
 810ab34:	ea5f 0868 	movs.w	r8, r8, asr #1
 810ab38:	f109 0908 	add.w	r9, r9, #8
 810ab3c:	d1f2      	bne.n	810ab24 <_strtod_l+0x5cc>
 810ab3e:	b10b      	cbz	r3, 810ab44 <_strtod_l+0x5ec>
 810ab40:	4682      	mov	sl, r0
 810ab42:	468b      	mov	fp, r1
 810ab44:	9b04      	ldr	r3, [sp, #16]
 810ab46:	b1c3      	cbz	r3, 810ab7a <_strtod_l+0x622>
 810ab48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810ab4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810ab50:	2b00      	cmp	r3, #0
 810ab52:	4659      	mov	r1, fp
 810ab54:	dd11      	ble.n	810ab7a <_strtod_l+0x622>
 810ab56:	2b1f      	cmp	r3, #31
 810ab58:	f340 8124 	ble.w	810ada4 <_strtod_l+0x84c>
 810ab5c:	2b34      	cmp	r3, #52	; 0x34
 810ab5e:	bfde      	ittt	le
 810ab60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810ab64:	f04f 33ff 	movle.w	r3, #4294967295
 810ab68:	fa03 f202 	lslle.w	r2, r3, r2
 810ab6c:	f04f 0a00 	mov.w	sl, #0
 810ab70:	bfcc      	ite	gt
 810ab72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810ab76:	ea02 0b01 	andle.w	fp, r2, r1
 810ab7a:	2200      	movs	r2, #0
 810ab7c:	2300      	movs	r3, #0
 810ab7e:	4650      	mov	r0, sl
 810ab80:	4659      	mov	r1, fp
 810ab82:	f7f6 f829 	bl	8100bd8 <__aeabi_dcmpeq>
 810ab86:	2800      	cmp	r0, #0
 810ab88:	d1a2      	bne.n	810aad0 <_strtod_l+0x578>
 810ab8a:	9b07      	ldr	r3, [sp, #28]
 810ab8c:	9300      	str	r3, [sp, #0]
 810ab8e:	9908      	ldr	r1, [sp, #32]
 810ab90:	462b      	mov	r3, r5
 810ab92:	463a      	mov	r2, r7
 810ab94:	4620      	mov	r0, r4
 810ab96:	f002 f923 	bl	810cde0 <__s2b>
 810ab9a:	9007      	str	r0, [sp, #28]
 810ab9c:	2800      	cmp	r0, #0
 810ab9e:	f43f af1f 	beq.w	810a9e0 <_strtod_l+0x488>
 810aba2:	9b05      	ldr	r3, [sp, #20]
 810aba4:	1b9e      	subs	r6, r3, r6
 810aba6:	9b06      	ldr	r3, [sp, #24]
 810aba8:	2b00      	cmp	r3, #0
 810abaa:	bfb4      	ite	lt
 810abac:	4633      	movlt	r3, r6
 810abae:	2300      	movge	r3, #0
 810abb0:	930c      	str	r3, [sp, #48]	; 0x30
 810abb2:	9b06      	ldr	r3, [sp, #24]
 810abb4:	2500      	movs	r5, #0
 810abb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810abba:	9312      	str	r3, [sp, #72]	; 0x48
 810abbc:	462e      	mov	r6, r5
 810abbe:	9b07      	ldr	r3, [sp, #28]
 810abc0:	4620      	mov	r0, r4
 810abc2:	6859      	ldr	r1, [r3, #4]
 810abc4:	f002 f864 	bl	810cc90 <_Balloc>
 810abc8:	9005      	str	r0, [sp, #20]
 810abca:	2800      	cmp	r0, #0
 810abcc:	f43f af0c 	beq.w	810a9e8 <_strtod_l+0x490>
 810abd0:	9b07      	ldr	r3, [sp, #28]
 810abd2:	691a      	ldr	r2, [r3, #16]
 810abd4:	3202      	adds	r2, #2
 810abd6:	f103 010c 	add.w	r1, r3, #12
 810abda:	0092      	lsls	r2, r2, #2
 810abdc:	300c      	adds	r0, #12
 810abde:	f002 f83d 	bl	810cc5c <memcpy>
 810abe2:	ec4b ab10 	vmov	d0, sl, fp
 810abe6:	aa1a      	add	r2, sp, #104	; 0x68
 810abe8:	a919      	add	r1, sp, #100	; 0x64
 810abea:	4620      	mov	r0, r4
 810abec:	f002 fc3e 	bl	810d46c <__d2b>
 810abf0:	ec4b ab18 	vmov	d8, sl, fp
 810abf4:	9018      	str	r0, [sp, #96]	; 0x60
 810abf6:	2800      	cmp	r0, #0
 810abf8:	f43f aef6 	beq.w	810a9e8 <_strtod_l+0x490>
 810abfc:	2101      	movs	r1, #1
 810abfe:	4620      	mov	r0, r4
 810ac00:	f002 f988 	bl	810cf14 <__i2b>
 810ac04:	4606      	mov	r6, r0
 810ac06:	2800      	cmp	r0, #0
 810ac08:	f43f aeee 	beq.w	810a9e8 <_strtod_l+0x490>
 810ac0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810ac0e:	9904      	ldr	r1, [sp, #16]
 810ac10:	2b00      	cmp	r3, #0
 810ac12:	bfab      	itete	ge
 810ac14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810ac16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810ac18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810ac1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810ac1e:	bfac      	ite	ge
 810ac20:	eb03 0902 	addge.w	r9, r3, r2
 810ac24:	1ad7      	sublt	r7, r2, r3
 810ac26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810ac28:	eba3 0801 	sub.w	r8, r3, r1
 810ac2c:	4490      	add	r8, r2
 810ac2e:	4ba1      	ldr	r3, [pc, #644]	; (810aeb4 <_strtod_l+0x95c>)
 810ac30:	f108 38ff 	add.w	r8, r8, #4294967295
 810ac34:	4598      	cmp	r8, r3
 810ac36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810ac3a:	f280 80c7 	bge.w	810adcc <_strtod_l+0x874>
 810ac3e:	eba3 0308 	sub.w	r3, r3, r8
 810ac42:	2b1f      	cmp	r3, #31
 810ac44:	eba2 0203 	sub.w	r2, r2, r3
 810ac48:	f04f 0101 	mov.w	r1, #1
 810ac4c:	f300 80b1 	bgt.w	810adb2 <_strtod_l+0x85a>
 810ac50:	fa01 f303 	lsl.w	r3, r1, r3
 810ac54:	930d      	str	r3, [sp, #52]	; 0x34
 810ac56:	2300      	movs	r3, #0
 810ac58:	9308      	str	r3, [sp, #32]
 810ac5a:	eb09 0802 	add.w	r8, r9, r2
 810ac5e:	9b04      	ldr	r3, [sp, #16]
 810ac60:	45c1      	cmp	r9, r8
 810ac62:	4417      	add	r7, r2
 810ac64:	441f      	add	r7, r3
 810ac66:	464b      	mov	r3, r9
 810ac68:	bfa8      	it	ge
 810ac6a:	4643      	movge	r3, r8
 810ac6c:	42bb      	cmp	r3, r7
 810ac6e:	bfa8      	it	ge
 810ac70:	463b      	movge	r3, r7
 810ac72:	2b00      	cmp	r3, #0
 810ac74:	bfc2      	ittt	gt
 810ac76:	eba8 0803 	subgt.w	r8, r8, r3
 810ac7a:	1aff      	subgt	r7, r7, r3
 810ac7c:	eba9 0903 	subgt.w	r9, r9, r3
 810ac80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810ac82:	2b00      	cmp	r3, #0
 810ac84:	dd17      	ble.n	810acb6 <_strtod_l+0x75e>
 810ac86:	4631      	mov	r1, r6
 810ac88:	461a      	mov	r2, r3
 810ac8a:	4620      	mov	r0, r4
 810ac8c:	f002 fa02 	bl	810d094 <__pow5mult>
 810ac90:	4606      	mov	r6, r0
 810ac92:	2800      	cmp	r0, #0
 810ac94:	f43f aea8 	beq.w	810a9e8 <_strtod_l+0x490>
 810ac98:	4601      	mov	r1, r0
 810ac9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810ac9c:	4620      	mov	r0, r4
 810ac9e:	f002 f94f 	bl	810cf40 <__multiply>
 810aca2:	900b      	str	r0, [sp, #44]	; 0x2c
 810aca4:	2800      	cmp	r0, #0
 810aca6:	f43f ae9f 	beq.w	810a9e8 <_strtod_l+0x490>
 810acaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 810acac:	4620      	mov	r0, r4
 810acae:	f002 f82f 	bl	810cd10 <_Bfree>
 810acb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810acb4:	9318      	str	r3, [sp, #96]	; 0x60
 810acb6:	f1b8 0f00 	cmp.w	r8, #0
 810acba:	f300 808c 	bgt.w	810add6 <_strtod_l+0x87e>
 810acbe:	9b06      	ldr	r3, [sp, #24]
 810acc0:	2b00      	cmp	r3, #0
 810acc2:	dd08      	ble.n	810acd6 <_strtod_l+0x77e>
 810acc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810acc6:	9905      	ldr	r1, [sp, #20]
 810acc8:	4620      	mov	r0, r4
 810acca:	f002 f9e3 	bl	810d094 <__pow5mult>
 810acce:	9005      	str	r0, [sp, #20]
 810acd0:	2800      	cmp	r0, #0
 810acd2:	f43f ae89 	beq.w	810a9e8 <_strtod_l+0x490>
 810acd6:	2f00      	cmp	r7, #0
 810acd8:	dd08      	ble.n	810acec <_strtod_l+0x794>
 810acda:	9905      	ldr	r1, [sp, #20]
 810acdc:	463a      	mov	r2, r7
 810acde:	4620      	mov	r0, r4
 810ace0:	f002 fa32 	bl	810d148 <__lshift>
 810ace4:	9005      	str	r0, [sp, #20]
 810ace6:	2800      	cmp	r0, #0
 810ace8:	f43f ae7e 	beq.w	810a9e8 <_strtod_l+0x490>
 810acec:	f1b9 0f00 	cmp.w	r9, #0
 810acf0:	dd08      	ble.n	810ad04 <_strtod_l+0x7ac>
 810acf2:	4631      	mov	r1, r6
 810acf4:	464a      	mov	r2, r9
 810acf6:	4620      	mov	r0, r4
 810acf8:	f002 fa26 	bl	810d148 <__lshift>
 810acfc:	4606      	mov	r6, r0
 810acfe:	2800      	cmp	r0, #0
 810ad00:	f43f ae72 	beq.w	810a9e8 <_strtod_l+0x490>
 810ad04:	9a05      	ldr	r2, [sp, #20]
 810ad06:	9918      	ldr	r1, [sp, #96]	; 0x60
 810ad08:	4620      	mov	r0, r4
 810ad0a:	f002 faa9 	bl	810d260 <__mdiff>
 810ad0e:	4605      	mov	r5, r0
 810ad10:	2800      	cmp	r0, #0
 810ad12:	f43f ae69 	beq.w	810a9e8 <_strtod_l+0x490>
 810ad16:	68c3      	ldr	r3, [r0, #12]
 810ad18:	930b      	str	r3, [sp, #44]	; 0x2c
 810ad1a:	2300      	movs	r3, #0
 810ad1c:	60c3      	str	r3, [r0, #12]
 810ad1e:	4631      	mov	r1, r6
 810ad20:	f002 fa82 	bl	810d228 <__mcmp>
 810ad24:	2800      	cmp	r0, #0
 810ad26:	da60      	bge.n	810adea <_strtod_l+0x892>
 810ad28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ad2a:	ea53 030a 	orrs.w	r3, r3, sl
 810ad2e:	f040 8082 	bne.w	810ae36 <_strtod_l+0x8de>
 810ad32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	d17d      	bne.n	810ae36 <_strtod_l+0x8de>
 810ad3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ad3e:	0d1b      	lsrs	r3, r3, #20
 810ad40:	051b      	lsls	r3, r3, #20
 810ad42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810ad46:	d976      	bls.n	810ae36 <_strtod_l+0x8de>
 810ad48:	696b      	ldr	r3, [r5, #20]
 810ad4a:	b913      	cbnz	r3, 810ad52 <_strtod_l+0x7fa>
 810ad4c:	692b      	ldr	r3, [r5, #16]
 810ad4e:	2b01      	cmp	r3, #1
 810ad50:	dd71      	ble.n	810ae36 <_strtod_l+0x8de>
 810ad52:	4629      	mov	r1, r5
 810ad54:	2201      	movs	r2, #1
 810ad56:	4620      	mov	r0, r4
 810ad58:	f002 f9f6 	bl	810d148 <__lshift>
 810ad5c:	4631      	mov	r1, r6
 810ad5e:	4605      	mov	r5, r0
 810ad60:	f002 fa62 	bl	810d228 <__mcmp>
 810ad64:	2800      	cmp	r0, #0
 810ad66:	dd66      	ble.n	810ae36 <_strtod_l+0x8de>
 810ad68:	9904      	ldr	r1, [sp, #16]
 810ad6a:	4a53      	ldr	r2, [pc, #332]	; (810aeb8 <_strtod_l+0x960>)
 810ad6c:	465b      	mov	r3, fp
 810ad6e:	2900      	cmp	r1, #0
 810ad70:	f000 8081 	beq.w	810ae76 <_strtod_l+0x91e>
 810ad74:	ea02 010b 	and.w	r1, r2, fp
 810ad78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810ad7c:	dc7b      	bgt.n	810ae76 <_strtod_l+0x91e>
 810ad7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810ad82:	f77f aea9 	ble.w	810aad8 <_strtod_l+0x580>
 810ad86:	4b4d      	ldr	r3, [pc, #308]	; (810aebc <_strtod_l+0x964>)
 810ad88:	4650      	mov	r0, sl
 810ad8a:	4659      	mov	r1, fp
 810ad8c:	2200      	movs	r2, #0
 810ad8e:	f7f5 fcbb 	bl	8100708 <__aeabi_dmul>
 810ad92:	460b      	mov	r3, r1
 810ad94:	4303      	orrs	r3, r0
 810ad96:	bf08      	it	eq
 810ad98:	2322      	moveq	r3, #34	; 0x22
 810ad9a:	4682      	mov	sl, r0
 810ad9c:	468b      	mov	fp, r1
 810ad9e:	bf08      	it	eq
 810ada0:	6023      	streq	r3, [r4, #0]
 810ada2:	e62b      	b.n	810a9fc <_strtod_l+0x4a4>
 810ada4:	f04f 32ff 	mov.w	r2, #4294967295
 810ada8:	fa02 f303 	lsl.w	r3, r2, r3
 810adac:	ea03 0a0a 	and.w	sl, r3, sl
 810adb0:	e6e3      	b.n	810ab7a <_strtod_l+0x622>
 810adb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810adb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810adba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810adbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810adc2:	fa01 f308 	lsl.w	r3, r1, r8
 810adc6:	9308      	str	r3, [sp, #32]
 810adc8:	910d      	str	r1, [sp, #52]	; 0x34
 810adca:	e746      	b.n	810ac5a <_strtod_l+0x702>
 810adcc:	2300      	movs	r3, #0
 810adce:	9308      	str	r3, [sp, #32]
 810add0:	2301      	movs	r3, #1
 810add2:	930d      	str	r3, [sp, #52]	; 0x34
 810add4:	e741      	b.n	810ac5a <_strtod_l+0x702>
 810add6:	9918      	ldr	r1, [sp, #96]	; 0x60
 810add8:	4642      	mov	r2, r8
 810adda:	4620      	mov	r0, r4
 810addc:	f002 f9b4 	bl	810d148 <__lshift>
 810ade0:	9018      	str	r0, [sp, #96]	; 0x60
 810ade2:	2800      	cmp	r0, #0
 810ade4:	f47f af6b 	bne.w	810acbe <_strtod_l+0x766>
 810ade8:	e5fe      	b.n	810a9e8 <_strtod_l+0x490>
 810adea:	465f      	mov	r7, fp
 810adec:	d16e      	bne.n	810aecc <_strtod_l+0x974>
 810adee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810adf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810adf4:	b342      	cbz	r2, 810ae48 <_strtod_l+0x8f0>
 810adf6:	4a32      	ldr	r2, [pc, #200]	; (810aec0 <_strtod_l+0x968>)
 810adf8:	4293      	cmp	r3, r2
 810adfa:	d128      	bne.n	810ae4e <_strtod_l+0x8f6>
 810adfc:	9b04      	ldr	r3, [sp, #16]
 810adfe:	4651      	mov	r1, sl
 810ae00:	b1eb      	cbz	r3, 810ae3e <_strtod_l+0x8e6>
 810ae02:	4b2d      	ldr	r3, [pc, #180]	; (810aeb8 <_strtod_l+0x960>)
 810ae04:	403b      	ands	r3, r7
 810ae06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 810ae0e:	d819      	bhi.n	810ae44 <_strtod_l+0x8ec>
 810ae10:	0d1b      	lsrs	r3, r3, #20
 810ae12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810ae16:	fa02 f303 	lsl.w	r3, r2, r3
 810ae1a:	4299      	cmp	r1, r3
 810ae1c:	d117      	bne.n	810ae4e <_strtod_l+0x8f6>
 810ae1e:	4b29      	ldr	r3, [pc, #164]	; (810aec4 <_strtod_l+0x96c>)
 810ae20:	429f      	cmp	r7, r3
 810ae22:	d102      	bne.n	810ae2a <_strtod_l+0x8d2>
 810ae24:	3101      	adds	r1, #1
 810ae26:	f43f addf 	beq.w	810a9e8 <_strtod_l+0x490>
 810ae2a:	4b23      	ldr	r3, [pc, #140]	; (810aeb8 <_strtod_l+0x960>)
 810ae2c:	403b      	ands	r3, r7
 810ae2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810ae32:	f04f 0a00 	mov.w	sl, #0
 810ae36:	9b04      	ldr	r3, [sp, #16]
 810ae38:	2b00      	cmp	r3, #0
 810ae3a:	d1a4      	bne.n	810ad86 <_strtod_l+0x82e>
 810ae3c:	e5de      	b.n	810a9fc <_strtod_l+0x4a4>
 810ae3e:	f04f 33ff 	mov.w	r3, #4294967295
 810ae42:	e7ea      	b.n	810ae1a <_strtod_l+0x8c2>
 810ae44:	4613      	mov	r3, r2
 810ae46:	e7e8      	b.n	810ae1a <_strtod_l+0x8c2>
 810ae48:	ea53 030a 	orrs.w	r3, r3, sl
 810ae4c:	d08c      	beq.n	810ad68 <_strtod_l+0x810>
 810ae4e:	9b08      	ldr	r3, [sp, #32]
 810ae50:	b1db      	cbz	r3, 810ae8a <_strtod_l+0x932>
 810ae52:	423b      	tst	r3, r7
 810ae54:	d0ef      	beq.n	810ae36 <_strtod_l+0x8de>
 810ae56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ae58:	9a04      	ldr	r2, [sp, #16]
 810ae5a:	4650      	mov	r0, sl
 810ae5c:	4659      	mov	r1, fp
 810ae5e:	b1c3      	cbz	r3, 810ae92 <_strtod_l+0x93a>
 810ae60:	f7ff fb5b 	bl	810a51a <sulp>
 810ae64:	4602      	mov	r2, r0
 810ae66:	460b      	mov	r3, r1
 810ae68:	ec51 0b18 	vmov	r0, r1, d8
 810ae6c:	f7f5 fa96 	bl	810039c <__adddf3>
 810ae70:	4682      	mov	sl, r0
 810ae72:	468b      	mov	fp, r1
 810ae74:	e7df      	b.n	810ae36 <_strtod_l+0x8de>
 810ae76:	4013      	ands	r3, r2
 810ae78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810ae7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810ae80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810ae84:	f04f 3aff 	mov.w	sl, #4294967295
 810ae88:	e7d5      	b.n	810ae36 <_strtod_l+0x8de>
 810ae8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ae8c:	ea13 0f0a 	tst.w	r3, sl
 810ae90:	e7e0      	b.n	810ae54 <_strtod_l+0x8fc>
 810ae92:	f7ff fb42 	bl	810a51a <sulp>
 810ae96:	4602      	mov	r2, r0
 810ae98:	460b      	mov	r3, r1
 810ae9a:	ec51 0b18 	vmov	r0, r1, d8
 810ae9e:	f7f5 fa7b 	bl	8100398 <__aeabi_dsub>
 810aea2:	2200      	movs	r2, #0
 810aea4:	2300      	movs	r3, #0
 810aea6:	4682      	mov	sl, r0
 810aea8:	468b      	mov	fp, r1
 810aeaa:	f7f5 fe95 	bl	8100bd8 <__aeabi_dcmpeq>
 810aeae:	2800      	cmp	r0, #0
 810aeb0:	d0c1      	beq.n	810ae36 <_strtod_l+0x8de>
 810aeb2:	e611      	b.n	810aad8 <_strtod_l+0x580>
 810aeb4:	fffffc02 	.word	0xfffffc02
 810aeb8:	7ff00000 	.word	0x7ff00000
 810aebc:	39500000 	.word	0x39500000
 810aec0:	000fffff 	.word	0x000fffff
 810aec4:	7fefffff 	.word	0x7fefffff
 810aec8:	0810e0a0 	.word	0x0810e0a0
 810aecc:	4631      	mov	r1, r6
 810aece:	4628      	mov	r0, r5
 810aed0:	f002 fb28 	bl	810d524 <__ratio>
 810aed4:	ec59 8b10 	vmov	r8, r9, d0
 810aed8:	ee10 0a10 	vmov	r0, s0
 810aedc:	2200      	movs	r2, #0
 810aede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810aee2:	4649      	mov	r1, r9
 810aee4:	f7f5 fe8c 	bl	8100c00 <__aeabi_dcmple>
 810aee8:	2800      	cmp	r0, #0
 810aeea:	d07a      	beq.n	810afe2 <_strtod_l+0xa8a>
 810aeec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aeee:	2b00      	cmp	r3, #0
 810aef0:	d04a      	beq.n	810af88 <_strtod_l+0xa30>
 810aef2:	4b95      	ldr	r3, [pc, #596]	; (810b148 <_strtod_l+0xbf0>)
 810aef4:	2200      	movs	r2, #0
 810aef6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810aefa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810b148 <_strtod_l+0xbf0>
 810aefe:	f04f 0800 	mov.w	r8, #0
 810af02:	4b92      	ldr	r3, [pc, #584]	; (810b14c <_strtod_l+0xbf4>)
 810af04:	403b      	ands	r3, r7
 810af06:	930d      	str	r3, [sp, #52]	; 0x34
 810af08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810af0a:	4b91      	ldr	r3, [pc, #580]	; (810b150 <_strtod_l+0xbf8>)
 810af0c:	429a      	cmp	r2, r3
 810af0e:	f040 80b0 	bne.w	810b072 <_strtod_l+0xb1a>
 810af12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810af16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810af1a:	ec4b ab10 	vmov	d0, sl, fp
 810af1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810af22:	f002 fa27 	bl	810d374 <__ulp>
 810af26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810af2a:	ec53 2b10 	vmov	r2, r3, d0
 810af2e:	f7f5 fbeb 	bl	8100708 <__aeabi_dmul>
 810af32:	4652      	mov	r2, sl
 810af34:	465b      	mov	r3, fp
 810af36:	f7f5 fa31 	bl	810039c <__adddf3>
 810af3a:	460b      	mov	r3, r1
 810af3c:	4983      	ldr	r1, [pc, #524]	; (810b14c <_strtod_l+0xbf4>)
 810af3e:	4a85      	ldr	r2, [pc, #532]	; (810b154 <_strtod_l+0xbfc>)
 810af40:	4019      	ands	r1, r3
 810af42:	4291      	cmp	r1, r2
 810af44:	4682      	mov	sl, r0
 810af46:	d960      	bls.n	810b00a <_strtod_l+0xab2>
 810af48:	ee18 3a90 	vmov	r3, s17
 810af4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810af50:	4293      	cmp	r3, r2
 810af52:	d104      	bne.n	810af5e <_strtod_l+0xa06>
 810af54:	ee18 3a10 	vmov	r3, s16
 810af58:	3301      	adds	r3, #1
 810af5a:	f43f ad45 	beq.w	810a9e8 <_strtod_l+0x490>
 810af5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 810b160 <_strtod_l+0xc08>
 810af62:	f04f 3aff 	mov.w	sl, #4294967295
 810af66:	9918      	ldr	r1, [sp, #96]	; 0x60
 810af68:	4620      	mov	r0, r4
 810af6a:	f001 fed1 	bl	810cd10 <_Bfree>
 810af6e:	9905      	ldr	r1, [sp, #20]
 810af70:	4620      	mov	r0, r4
 810af72:	f001 fecd 	bl	810cd10 <_Bfree>
 810af76:	4631      	mov	r1, r6
 810af78:	4620      	mov	r0, r4
 810af7a:	f001 fec9 	bl	810cd10 <_Bfree>
 810af7e:	4629      	mov	r1, r5
 810af80:	4620      	mov	r0, r4
 810af82:	f001 fec5 	bl	810cd10 <_Bfree>
 810af86:	e61a      	b.n	810abbe <_strtod_l+0x666>
 810af88:	f1ba 0f00 	cmp.w	sl, #0
 810af8c:	d11b      	bne.n	810afc6 <_strtod_l+0xa6e>
 810af8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810af92:	b9f3      	cbnz	r3, 810afd2 <_strtod_l+0xa7a>
 810af94:	4b6c      	ldr	r3, [pc, #432]	; (810b148 <_strtod_l+0xbf0>)
 810af96:	2200      	movs	r2, #0
 810af98:	4640      	mov	r0, r8
 810af9a:	4649      	mov	r1, r9
 810af9c:	f7f5 fe26 	bl	8100bec <__aeabi_dcmplt>
 810afa0:	b9d0      	cbnz	r0, 810afd8 <_strtod_l+0xa80>
 810afa2:	4640      	mov	r0, r8
 810afa4:	4649      	mov	r1, r9
 810afa6:	4b6c      	ldr	r3, [pc, #432]	; (810b158 <_strtod_l+0xc00>)
 810afa8:	2200      	movs	r2, #0
 810afaa:	f7f5 fbad 	bl	8100708 <__aeabi_dmul>
 810afae:	4680      	mov	r8, r0
 810afb0:	4689      	mov	r9, r1
 810afb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810afb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810afba:	9315      	str	r3, [sp, #84]	; 0x54
 810afbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810afc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810afc4:	e79d      	b.n	810af02 <_strtod_l+0x9aa>
 810afc6:	f1ba 0f01 	cmp.w	sl, #1
 810afca:	d102      	bne.n	810afd2 <_strtod_l+0xa7a>
 810afcc:	2f00      	cmp	r7, #0
 810afce:	f43f ad83 	beq.w	810aad8 <_strtod_l+0x580>
 810afd2:	4b62      	ldr	r3, [pc, #392]	; (810b15c <_strtod_l+0xc04>)
 810afd4:	2200      	movs	r2, #0
 810afd6:	e78e      	b.n	810aef6 <_strtod_l+0x99e>
 810afd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810b158 <_strtod_l+0xc00>
 810afdc:	f04f 0800 	mov.w	r8, #0
 810afe0:	e7e7      	b.n	810afb2 <_strtod_l+0xa5a>
 810afe2:	4b5d      	ldr	r3, [pc, #372]	; (810b158 <_strtod_l+0xc00>)
 810afe4:	4640      	mov	r0, r8
 810afe6:	4649      	mov	r1, r9
 810afe8:	2200      	movs	r2, #0
 810afea:	f7f5 fb8d 	bl	8100708 <__aeabi_dmul>
 810afee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aff0:	4680      	mov	r8, r0
 810aff2:	4689      	mov	r9, r1
 810aff4:	b933      	cbnz	r3, 810b004 <_strtod_l+0xaac>
 810aff6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810affa:	900e      	str	r0, [sp, #56]	; 0x38
 810affc:	930f      	str	r3, [sp, #60]	; 0x3c
 810affe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810b002:	e7dd      	b.n	810afc0 <_strtod_l+0xa68>
 810b004:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810b008:	e7f9      	b.n	810affe <_strtod_l+0xaa6>
 810b00a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810b00e:	9b04      	ldr	r3, [sp, #16]
 810b010:	2b00      	cmp	r3, #0
 810b012:	d1a8      	bne.n	810af66 <_strtod_l+0xa0e>
 810b014:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810b018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b01a:	0d1b      	lsrs	r3, r3, #20
 810b01c:	051b      	lsls	r3, r3, #20
 810b01e:	429a      	cmp	r2, r3
 810b020:	d1a1      	bne.n	810af66 <_strtod_l+0xa0e>
 810b022:	4640      	mov	r0, r8
 810b024:	4649      	mov	r1, r9
 810b026:	f7f5 fecf 	bl	8100dc8 <__aeabi_d2lz>
 810b02a:	f7f5 fb3f 	bl	81006ac <__aeabi_l2d>
 810b02e:	4602      	mov	r2, r0
 810b030:	460b      	mov	r3, r1
 810b032:	4640      	mov	r0, r8
 810b034:	4649      	mov	r1, r9
 810b036:	f7f5 f9af 	bl	8100398 <__aeabi_dsub>
 810b03a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810b03c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b040:	ea43 030a 	orr.w	r3, r3, sl
 810b044:	4313      	orrs	r3, r2
 810b046:	4680      	mov	r8, r0
 810b048:	4689      	mov	r9, r1
 810b04a:	d055      	beq.n	810b0f8 <_strtod_l+0xba0>
 810b04c:	a336      	add	r3, pc, #216	; (adr r3, 810b128 <_strtod_l+0xbd0>)
 810b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b052:	f7f5 fdcb 	bl	8100bec <__aeabi_dcmplt>
 810b056:	2800      	cmp	r0, #0
 810b058:	f47f acd0 	bne.w	810a9fc <_strtod_l+0x4a4>
 810b05c:	a334      	add	r3, pc, #208	; (adr r3, 810b130 <_strtod_l+0xbd8>)
 810b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b062:	4640      	mov	r0, r8
 810b064:	4649      	mov	r1, r9
 810b066:	f7f5 fddf 	bl	8100c28 <__aeabi_dcmpgt>
 810b06a:	2800      	cmp	r0, #0
 810b06c:	f43f af7b 	beq.w	810af66 <_strtod_l+0xa0e>
 810b070:	e4c4      	b.n	810a9fc <_strtod_l+0x4a4>
 810b072:	9b04      	ldr	r3, [sp, #16]
 810b074:	b333      	cbz	r3, 810b0c4 <_strtod_l+0xb6c>
 810b076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b078:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810b07c:	d822      	bhi.n	810b0c4 <_strtod_l+0xb6c>
 810b07e:	a32e      	add	r3, pc, #184	; (adr r3, 810b138 <_strtod_l+0xbe0>)
 810b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b084:	4640      	mov	r0, r8
 810b086:	4649      	mov	r1, r9
 810b088:	f7f5 fdba 	bl	8100c00 <__aeabi_dcmple>
 810b08c:	b1a0      	cbz	r0, 810b0b8 <_strtod_l+0xb60>
 810b08e:	4649      	mov	r1, r9
 810b090:	4640      	mov	r0, r8
 810b092:	f7f5 fe11 	bl	8100cb8 <__aeabi_d2uiz>
 810b096:	2801      	cmp	r0, #1
 810b098:	bf38      	it	cc
 810b09a:	2001      	movcc	r0, #1
 810b09c:	f7f5 faba 	bl	8100614 <__aeabi_ui2d>
 810b0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b0a2:	4680      	mov	r8, r0
 810b0a4:	4689      	mov	r9, r1
 810b0a6:	bb23      	cbnz	r3, 810b0f2 <_strtod_l+0xb9a>
 810b0a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b0ac:	9010      	str	r0, [sp, #64]	; 0x40
 810b0ae:	9311      	str	r3, [sp, #68]	; 0x44
 810b0b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810b0b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b0ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b0bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810b0c0:	1a9b      	subs	r3, r3, r2
 810b0c2:	9309      	str	r3, [sp, #36]	; 0x24
 810b0c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810b0c8:	eeb0 0a48 	vmov.f32	s0, s16
 810b0cc:	eef0 0a68 	vmov.f32	s1, s17
 810b0d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810b0d4:	f002 f94e 	bl	810d374 <__ulp>
 810b0d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810b0dc:	ec53 2b10 	vmov	r2, r3, d0
 810b0e0:	f7f5 fb12 	bl	8100708 <__aeabi_dmul>
 810b0e4:	ec53 2b18 	vmov	r2, r3, d8
 810b0e8:	f7f5 f958 	bl	810039c <__adddf3>
 810b0ec:	4682      	mov	sl, r0
 810b0ee:	468b      	mov	fp, r1
 810b0f0:	e78d      	b.n	810b00e <_strtod_l+0xab6>
 810b0f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810b0f6:	e7db      	b.n	810b0b0 <_strtod_l+0xb58>
 810b0f8:	a311      	add	r3, pc, #68	; (adr r3, 810b140 <_strtod_l+0xbe8>)
 810b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b0fe:	f7f5 fd75 	bl	8100bec <__aeabi_dcmplt>
 810b102:	e7b2      	b.n	810b06a <_strtod_l+0xb12>
 810b104:	2300      	movs	r3, #0
 810b106:	930a      	str	r3, [sp, #40]	; 0x28
 810b108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810b10a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810b10c:	6013      	str	r3, [r2, #0]
 810b10e:	f7ff ba6b 	b.w	810a5e8 <_strtod_l+0x90>
 810b112:	2a65      	cmp	r2, #101	; 0x65
 810b114:	f43f ab5f 	beq.w	810a7d6 <_strtod_l+0x27e>
 810b118:	2a45      	cmp	r2, #69	; 0x45
 810b11a:	f43f ab5c 	beq.w	810a7d6 <_strtod_l+0x27e>
 810b11e:	2301      	movs	r3, #1
 810b120:	f7ff bb94 	b.w	810a84c <_strtod_l+0x2f4>
 810b124:	f3af 8000 	nop.w
 810b128:	94a03595 	.word	0x94a03595
 810b12c:	3fdfffff 	.word	0x3fdfffff
 810b130:	35afe535 	.word	0x35afe535
 810b134:	3fe00000 	.word	0x3fe00000
 810b138:	ffc00000 	.word	0xffc00000
 810b13c:	41dfffff 	.word	0x41dfffff
 810b140:	94a03595 	.word	0x94a03595
 810b144:	3fcfffff 	.word	0x3fcfffff
 810b148:	3ff00000 	.word	0x3ff00000
 810b14c:	7ff00000 	.word	0x7ff00000
 810b150:	7fe00000 	.word	0x7fe00000
 810b154:	7c9fffff 	.word	0x7c9fffff
 810b158:	3fe00000 	.word	0x3fe00000
 810b15c:	bff00000 	.word	0xbff00000
 810b160:	7fefffff 	.word	0x7fefffff

0810b164 <_strtod_r>:
 810b164:	4b01      	ldr	r3, [pc, #4]	; (810b16c <_strtod_r+0x8>)
 810b166:	f7ff b9f7 	b.w	810a558 <_strtod_l>
 810b16a:	bf00      	nop
 810b16c:	1000007c 	.word	0x1000007c

0810b170 <_strtol_l.constprop.0>:
 810b170:	2b01      	cmp	r3, #1
 810b172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b176:	d001      	beq.n	810b17c <_strtol_l.constprop.0+0xc>
 810b178:	2b24      	cmp	r3, #36	; 0x24
 810b17a:	d906      	bls.n	810b18a <_strtol_l.constprop.0+0x1a>
 810b17c:	f7fe f9a8 	bl	81094d0 <__errno>
 810b180:	2316      	movs	r3, #22
 810b182:	6003      	str	r3, [r0, #0]
 810b184:	2000      	movs	r0, #0
 810b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b18a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810b270 <_strtol_l.constprop.0+0x100>
 810b18e:	460d      	mov	r5, r1
 810b190:	462e      	mov	r6, r5
 810b192:	f815 4b01 	ldrb.w	r4, [r5], #1
 810b196:	f814 700c 	ldrb.w	r7, [r4, ip]
 810b19a:	f017 0708 	ands.w	r7, r7, #8
 810b19e:	d1f7      	bne.n	810b190 <_strtol_l.constprop.0+0x20>
 810b1a0:	2c2d      	cmp	r4, #45	; 0x2d
 810b1a2:	d132      	bne.n	810b20a <_strtol_l.constprop.0+0x9a>
 810b1a4:	782c      	ldrb	r4, [r5, #0]
 810b1a6:	2701      	movs	r7, #1
 810b1a8:	1cb5      	adds	r5, r6, #2
 810b1aa:	2b00      	cmp	r3, #0
 810b1ac:	d05b      	beq.n	810b266 <_strtol_l.constprop.0+0xf6>
 810b1ae:	2b10      	cmp	r3, #16
 810b1b0:	d109      	bne.n	810b1c6 <_strtol_l.constprop.0+0x56>
 810b1b2:	2c30      	cmp	r4, #48	; 0x30
 810b1b4:	d107      	bne.n	810b1c6 <_strtol_l.constprop.0+0x56>
 810b1b6:	782c      	ldrb	r4, [r5, #0]
 810b1b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810b1bc:	2c58      	cmp	r4, #88	; 0x58
 810b1be:	d14d      	bne.n	810b25c <_strtol_l.constprop.0+0xec>
 810b1c0:	786c      	ldrb	r4, [r5, #1]
 810b1c2:	2310      	movs	r3, #16
 810b1c4:	3502      	adds	r5, #2
 810b1c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810b1ca:	f108 38ff 	add.w	r8, r8, #4294967295
 810b1ce:	f04f 0c00 	mov.w	ip, #0
 810b1d2:	fbb8 f9f3 	udiv	r9, r8, r3
 810b1d6:	4666      	mov	r6, ip
 810b1d8:	fb03 8a19 	mls	sl, r3, r9, r8
 810b1dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810b1e0:	f1be 0f09 	cmp.w	lr, #9
 810b1e4:	d816      	bhi.n	810b214 <_strtol_l.constprop.0+0xa4>
 810b1e6:	4674      	mov	r4, lr
 810b1e8:	42a3      	cmp	r3, r4
 810b1ea:	dd24      	ble.n	810b236 <_strtol_l.constprop.0+0xc6>
 810b1ec:	f1bc 0f00 	cmp.w	ip, #0
 810b1f0:	db1e      	blt.n	810b230 <_strtol_l.constprop.0+0xc0>
 810b1f2:	45b1      	cmp	r9, r6
 810b1f4:	d31c      	bcc.n	810b230 <_strtol_l.constprop.0+0xc0>
 810b1f6:	d101      	bne.n	810b1fc <_strtol_l.constprop.0+0x8c>
 810b1f8:	45a2      	cmp	sl, r4
 810b1fa:	db19      	blt.n	810b230 <_strtol_l.constprop.0+0xc0>
 810b1fc:	fb06 4603 	mla	r6, r6, r3, r4
 810b200:	f04f 0c01 	mov.w	ip, #1
 810b204:	f815 4b01 	ldrb.w	r4, [r5], #1
 810b208:	e7e8      	b.n	810b1dc <_strtol_l.constprop.0+0x6c>
 810b20a:	2c2b      	cmp	r4, #43	; 0x2b
 810b20c:	bf04      	itt	eq
 810b20e:	782c      	ldrbeq	r4, [r5, #0]
 810b210:	1cb5      	addeq	r5, r6, #2
 810b212:	e7ca      	b.n	810b1aa <_strtol_l.constprop.0+0x3a>
 810b214:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810b218:	f1be 0f19 	cmp.w	lr, #25
 810b21c:	d801      	bhi.n	810b222 <_strtol_l.constprop.0+0xb2>
 810b21e:	3c37      	subs	r4, #55	; 0x37
 810b220:	e7e2      	b.n	810b1e8 <_strtol_l.constprop.0+0x78>
 810b222:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810b226:	f1be 0f19 	cmp.w	lr, #25
 810b22a:	d804      	bhi.n	810b236 <_strtol_l.constprop.0+0xc6>
 810b22c:	3c57      	subs	r4, #87	; 0x57
 810b22e:	e7db      	b.n	810b1e8 <_strtol_l.constprop.0+0x78>
 810b230:	f04f 3cff 	mov.w	ip, #4294967295
 810b234:	e7e6      	b.n	810b204 <_strtol_l.constprop.0+0x94>
 810b236:	f1bc 0f00 	cmp.w	ip, #0
 810b23a:	da05      	bge.n	810b248 <_strtol_l.constprop.0+0xd8>
 810b23c:	2322      	movs	r3, #34	; 0x22
 810b23e:	6003      	str	r3, [r0, #0]
 810b240:	4646      	mov	r6, r8
 810b242:	b942      	cbnz	r2, 810b256 <_strtol_l.constprop.0+0xe6>
 810b244:	4630      	mov	r0, r6
 810b246:	e79e      	b.n	810b186 <_strtol_l.constprop.0+0x16>
 810b248:	b107      	cbz	r7, 810b24c <_strtol_l.constprop.0+0xdc>
 810b24a:	4276      	negs	r6, r6
 810b24c:	2a00      	cmp	r2, #0
 810b24e:	d0f9      	beq.n	810b244 <_strtol_l.constprop.0+0xd4>
 810b250:	f1bc 0f00 	cmp.w	ip, #0
 810b254:	d000      	beq.n	810b258 <_strtol_l.constprop.0+0xe8>
 810b256:	1e69      	subs	r1, r5, #1
 810b258:	6011      	str	r1, [r2, #0]
 810b25a:	e7f3      	b.n	810b244 <_strtol_l.constprop.0+0xd4>
 810b25c:	2430      	movs	r4, #48	; 0x30
 810b25e:	2b00      	cmp	r3, #0
 810b260:	d1b1      	bne.n	810b1c6 <_strtol_l.constprop.0+0x56>
 810b262:	2308      	movs	r3, #8
 810b264:	e7af      	b.n	810b1c6 <_strtol_l.constprop.0+0x56>
 810b266:	2c30      	cmp	r4, #48	; 0x30
 810b268:	d0a5      	beq.n	810b1b6 <_strtol_l.constprop.0+0x46>
 810b26a:	230a      	movs	r3, #10
 810b26c:	e7ab      	b.n	810b1c6 <_strtol_l.constprop.0+0x56>
 810b26e:	bf00      	nop
 810b270:	0810e0c9 	.word	0x0810e0c9

0810b274 <_strtol_r>:
 810b274:	f7ff bf7c 	b.w	810b170 <_strtol_l.constprop.0>

0810b278 <strtol>:
 810b278:	4613      	mov	r3, r2
 810b27a:	460a      	mov	r2, r1
 810b27c:	4601      	mov	r1, r0
 810b27e:	4802      	ldr	r0, [pc, #8]	; (810b288 <strtol+0x10>)
 810b280:	6800      	ldr	r0, [r0, #0]
 810b282:	f7ff bf75 	b.w	810b170 <_strtol_l.constprop.0>
 810b286:	bf00      	nop
 810b288:	10000014 	.word	0x10000014

0810b28c <__swbuf_r>:
 810b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b28e:	460e      	mov	r6, r1
 810b290:	4614      	mov	r4, r2
 810b292:	4605      	mov	r5, r0
 810b294:	b118      	cbz	r0, 810b29e <__swbuf_r+0x12>
 810b296:	6983      	ldr	r3, [r0, #24]
 810b298:	b90b      	cbnz	r3, 810b29e <__swbuf_r+0x12>
 810b29a:	f001 f84d 	bl	810c338 <__sinit>
 810b29e:	4b21      	ldr	r3, [pc, #132]	; (810b324 <__swbuf_r+0x98>)
 810b2a0:	429c      	cmp	r4, r3
 810b2a2:	d12b      	bne.n	810b2fc <__swbuf_r+0x70>
 810b2a4:	686c      	ldr	r4, [r5, #4]
 810b2a6:	69a3      	ldr	r3, [r4, #24]
 810b2a8:	60a3      	str	r3, [r4, #8]
 810b2aa:	89a3      	ldrh	r3, [r4, #12]
 810b2ac:	071a      	lsls	r2, r3, #28
 810b2ae:	d52f      	bpl.n	810b310 <__swbuf_r+0x84>
 810b2b0:	6923      	ldr	r3, [r4, #16]
 810b2b2:	b36b      	cbz	r3, 810b310 <__swbuf_r+0x84>
 810b2b4:	6923      	ldr	r3, [r4, #16]
 810b2b6:	6820      	ldr	r0, [r4, #0]
 810b2b8:	1ac0      	subs	r0, r0, r3
 810b2ba:	6963      	ldr	r3, [r4, #20]
 810b2bc:	b2f6      	uxtb	r6, r6
 810b2be:	4283      	cmp	r3, r0
 810b2c0:	4637      	mov	r7, r6
 810b2c2:	dc04      	bgt.n	810b2ce <__swbuf_r+0x42>
 810b2c4:	4621      	mov	r1, r4
 810b2c6:	4628      	mov	r0, r5
 810b2c8:	f000 ffa2 	bl	810c210 <_fflush_r>
 810b2cc:	bb30      	cbnz	r0, 810b31c <__swbuf_r+0x90>
 810b2ce:	68a3      	ldr	r3, [r4, #8]
 810b2d0:	3b01      	subs	r3, #1
 810b2d2:	60a3      	str	r3, [r4, #8]
 810b2d4:	6823      	ldr	r3, [r4, #0]
 810b2d6:	1c5a      	adds	r2, r3, #1
 810b2d8:	6022      	str	r2, [r4, #0]
 810b2da:	701e      	strb	r6, [r3, #0]
 810b2dc:	6963      	ldr	r3, [r4, #20]
 810b2de:	3001      	adds	r0, #1
 810b2e0:	4283      	cmp	r3, r0
 810b2e2:	d004      	beq.n	810b2ee <__swbuf_r+0x62>
 810b2e4:	89a3      	ldrh	r3, [r4, #12]
 810b2e6:	07db      	lsls	r3, r3, #31
 810b2e8:	d506      	bpl.n	810b2f8 <__swbuf_r+0x6c>
 810b2ea:	2e0a      	cmp	r6, #10
 810b2ec:	d104      	bne.n	810b2f8 <__swbuf_r+0x6c>
 810b2ee:	4621      	mov	r1, r4
 810b2f0:	4628      	mov	r0, r5
 810b2f2:	f000 ff8d 	bl	810c210 <_fflush_r>
 810b2f6:	b988      	cbnz	r0, 810b31c <__swbuf_r+0x90>
 810b2f8:	4638      	mov	r0, r7
 810b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b2fc:	4b0a      	ldr	r3, [pc, #40]	; (810b328 <__swbuf_r+0x9c>)
 810b2fe:	429c      	cmp	r4, r3
 810b300:	d101      	bne.n	810b306 <__swbuf_r+0x7a>
 810b302:	68ac      	ldr	r4, [r5, #8]
 810b304:	e7cf      	b.n	810b2a6 <__swbuf_r+0x1a>
 810b306:	4b09      	ldr	r3, [pc, #36]	; (810b32c <__swbuf_r+0xa0>)
 810b308:	429c      	cmp	r4, r3
 810b30a:	bf08      	it	eq
 810b30c:	68ec      	ldreq	r4, [r5, #12]
 810b30e:	e7ca      	b.n	810b2a6 <__swbuf_r+0x1a>
 810b310:	4621      	mov	r1, r4
 810b312:	4628      	mov	r0, r5
 810b314:	f000 f80c 	bl	810b330 <__swsetup_r>
 810b318:	2800      	cmp	r0, #0
 810b31a:	d0cb      	beq.n	810b2b4 <__swbuf_r+0x28>
 810b31c:	f04f 37ff 	mov.w	r7, #4294967295
 810b320:	e7ea      	b.n	810b2f8 <__swbuf_r+0x6c>
 810b322:	bf00      	nop
 810b324:	0810e27c 	.word	0x0810e27c
 810b328:	0810e29c 	.word	0x0810e29c
 810b32c:	0810e25c 	.word	0x0810e25c

0810b330 <__swsetup_r>:
 810b330:	4b32      	ldr	r3, [pc, #200]	; (810b3fc <__swsetup_r+0xcc>)
 810b332:	b570      	push	{r4, r5, r6, lr}
 810b334:	681d      	ldr	r5, [r3, #0]
 810b336:	4606      	mov	r6, r0
 810b338:	460c      	mov	r4, r1
 810b33a:	b125      	cbz	r5, 810b346 <__swsetup_r+0x16>
 810b33c:	69ab      	ldr	r3, [r5, #24]
 810b33e:	b913      	cbnz	r3, 810b346 <__swsetup_r+0x16>
 810b340:	4628      	mov	r0, r5
 810b342:	f000 fff9 	bl	810c338 <__sinit>
 810b346:	4b2e      	ldr	r3, [pc, #184]	; (810b400 <__swsetup_r+0xd0>)
 810b348:	429c      	cmp	r4, r3
 810b34a:	d10f      	bne.n	810b36c <__swsetup_r+0x3c>
 810b34c:	686c      	ldr	r4, [r5, #4]
 810b34e:	89a3      	ldrh	r3, [r4, #12]
 810b350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b354:	0719      	lsls	r1, r3, #28
 810b356:	d42c      	bmi.n	810b3b2 <__swsetup_r+0x82>
 810b358:	06dd      	lsls	r5, r3, #27
 810b35a:	d411      	bmi.n	810b380 <__swsetup_r+0x50>
 810b35c:	2309      	movs	r3, #9
 810b35e:	6033      	str	r3, [r6, #0]
 810b360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b364:	81a3      	strh	r3, [r4, #12]
 810b366:	f04f 30ff 	mov.w	r0, #4294967295
 810b36a:	e03e      	b.n	810b3ea <__swsetup_r+0xba>
 810b36c:	4b25      	ldr	r3, [pc, #148]	; (810b404 <__swsetup_r+0xd4>)
 810b36e:	429c      	cmp	r4, r3
 810b370:	d101      	bne.n	810b376 <__swsetup_r+0x46>
 810b372:	68ac      	ldr	r4, [r5, #8]
 810b374:	e7eb      	b.n	810b34e <__swsetup_r+0x1e>
 810b376:	4b24      	ldr	r3, [pc, #144]	; (810b408 <__swsetup_r+0xd8>)
 810b378:	429c      	cmp	r4, r3
 810b37a:	bf08      	it	eq
 810b37c:	68ec      	ldreq	r4, [r5, #12]
 810b37e:	e7e6      	b.n	810b34e <__swsetup_r+0x1e>
 810b380:	0758      	lsls	r0, r3, #29
 810b382:	d512      	bpl.n	810b3aa <__swsetup_r+0x7a>
 810b384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b386:	b141      	cbz	r1, 810b39a <__swsetup_r+0x6a>
 810b388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b38c:	4299      	cmp	r1, r3
 810b38e:	d002      	beq.n	810b396 <__swsetup_r+0x66>
 810b390:	4630      	mov	r0, r6
 810b392:	f002 f93f 	bl	810d614 <_free_r>
 810b396:	2300      	movs	r3, #0
 810b398:	6363      	str	r3, [r4, #52]	; 0x34
 810b39a:	89a3      	ldrh	r3, [r4, #12]
 810b39c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b3a0:	81a3      	strh	r3, [r4, #12]
 810b3a2:	2300      	movs	r3, #0
 810b3a4:	6063      	str	r3, [r4, #4]
 810b3a6:	6923      	ldr	r3, [r4, #16]
 810b3a8:	6023      	str	r3, [r4, #0]
 810b3aa:	89a3      	ldrh	r3, [r4, #12]
 810b3ac:	f043 0308 	orr.w	r3, r3, #8
 810b3b0:	81a3      	strh	r3, [r4, #12]
 810b3b2:	6923      	ldr	r3, [r4, #16]
 810b3b4:	b94b      	cbnz	r3, 810b3ca <__swsetup_r+0x9a>
 810b3b6:	89a3      	ldrh	r3, [r4, #12]
 810b3b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b3c0:	d003      	beq.n	810b3ca <__swsetup_r+0x9a>
 810b3c2:	4621      	mov	r1, r4
 810b3c4:	4630      	mov	r0, r6
 810b3c6:	f001 fbef 	bl	810cba8 <__smakebuf_r>
 810b3ca:	89a0      	ldrh	r0, [r4, #12]
 810b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b3d0:	f010 0301 	ands.w	r3, r0, #1
 810b3d4:	d00a      	beq.n	810b3ec <__swsetup_r+0xbc>
 810b3d6:	2300      	movs	r3, #0
 810b3d8:	60a3      	str	r3, [r4, #8]
 810b3da:	6963      	ldr	r3, [r4, #20]
 810b3dc:	425b      	negs	r3, r3
 810b3de:	61a3      	str	r3, [r4, #24]
 810b3e0:	6923      	ldr	r3, [r4, #16]
 810b3e2:	b943      	cbnz	r3, 810b3f6 <__swsetup_r+0xc6>
 810b3e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b3e8:	d1ba      	bne.n	810b360 <__swsetup_r+0x30>
 810b3ea:	bd70      	pop	{r4, r5, r6, pc}
 810b3ec:	0781      	lsls	r1, r0, #30
 810b3ee:	bf58      	it	pl
 810b3f0:	6963      	ldrpl	r3, [r4, #20]
 810b3f2:	60a3      	str	r3, [r4, #8]
 810b3f4:	e7f4      	b.n	810b3e0 <__swsetup_r+0xb0>
 810b3f6:	2000      	movs	r0, #0
 810b3f8:	e7f7      	b.n	810b3ea <__swsetup_r+0xba>
 810b3fa:	bf00      	nop
 810b3fc:	10000014 	.word	0x10000014
 810b400:	0810e27c 	.word	0x0810e27c
 810b404:	0810e29c 	.word	0x0810e29c
 810b408:	0810e25c 	.word	0x0810e25c

0810b40c <quorem>:
 810b40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b410:	6903      	ldr	r3, [r0, #16]
 810b412:	690c      	ldr	r4, [r1, #16]
 810b414:	42a3      	cmp	r3, r4
 810b416:	4607      	mov	r7, r0
 810b418:	f2c0 8081 	blt.w	810b51e <quorem+0x112>
 810b41c:	3c01      	subs	r4, #1
 810b41e:	f101 0814 	add.w	r8, r1, #20
 810b422:	f100 0514 	add.w	r5, r0, #20
 810b426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b42a:	9301      	str	r3, [sp, #4]
 810b42c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810b430:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b434:	3301      	adds	r3, #1
 810b436:	429a      	cmp	r2, r3
 810b438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810b43c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810b440:	fbb2 f6f3 	udiv	r6, r2, r3
 810b444:	d331      	bcc.n	810b4aa <quorem+0x9e>
 810b446:	f04f 0e00 	mov.w	lr, #0
 810b44a:	4640      	mov	r0, r8
 810b44c:	46ac      	mov	ip, r5
 810b44e:	46f2      	mov	sl, lr
 810b450:	f850 2b04 	ldr.w	r2, [r0], #4
 810b454:	b293      	uxth	r3, r2
 810b456:	fb06 e303 	mla	r3, r6, r3, lr
 810b45a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810b45e:	b29b      	uxth	r3, r3
 810b460:	ebaa 0303 	sub.w	r3, sl, r3
 810b464:	f8dc a000 	ldr.w	sl, [ip]
 810b468:	0c12      	lsrs	r2, r2, #16
 810b46a:	fa13 f38a 	uxtah	r3, r3, sl
 810b46e:	fb06 e202 	mla	r2, r6, r2, lr
 810b472:	9300      	str	r3, [sp, #0]
 810b474:	9b00      	ldr	r3, [sp, #0]
 810b476:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810b47a:	b292      	uxth	r2, r2
 810b47c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810b480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b484:	f8bd 3000 	ldrh.w	r3, [sp]
 810b488:	4581      	cmp	r9, r0
 810b48a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b48e:	f84c 3b04 	str.w	r3, [ip], #4
 810b492:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810b496:	d2db      	bcs.n	810b450 <quorem+0x44>
 810b498:	f855 300b 	ldr.w	r3, [r5, fp]
 810b49c:	b92b      	cbnz	r3, 810b4aa <quorem+0x9e>
 810b49e:	9b01      	ldr	r3, [sp, #4]
 810b4a0:	3b04      	subs	r3, #4
 810b4a2:	429d      	cmp	r5, r3
 810b4a4:	461a      	mov	r2, r3
 810b4a6:	d32e      	bcc.n	810b506 <quorem+0xfa>
 810b4a8:	613c      	str	r4, [r7, #16]
 810b4aa:	4638      	mov	r0, r7
 810b4ac:	f001 febc 	bl	810d228 <__mcmp>
 810b4b0:	2800      	cmp	r0, #0
 810b4b2:	db24      	blt.n	810b4fe <quorem+0xf2>
 810b4b4:	3601      	adds	r6, #1
 810b4b6:	4628      	mov	r0, r5
 810b4b8:	f04f 0c00 	mov.w	ip, #0
 810b4bc:	f858 2b04 	ldr.w	r2, [r8], #4
 810b4c0:	f8d0 e000 	ldr.w	lr, [r0]
 810b4c4:	b293      	uxth	r3, r2
 810b4c6:	ebac 0303 	sub.w	r3, ip, r3
 810b4ca:	0c12      	lsrs	r2, r2, #16
 810b4cc:	fa13 f38e 	uxtah	r3, r3, lr
 810b4d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810b4d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b4d8:	b29b      	uxth	r3, r3
 810b4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b4de:	45c1      	cmp	r9, r8
 810b4e0:	f840 3b04 	str.w	r3, [r0], #4
 810b4e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810b4e8:	d2e8      	bcs.n	810b4bc <quorem+0xb0>
 810b4ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b4ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b4f2:	b922      	cbnz	r2, 810b4fe <quorem+0xf2>
 810b4f4:	3b04      	subs	r3, #4
 810b4f6:	429d      	cmp	r5, r3
 810b4f8:	461a      	mov	r2, r3
 810b4fa:	d30a      	bcc.n	810b512 <quorem+0x106>
 810b4fc:	613c      	str	r4, [r7, #16]
 810b4fe:	4630      	mov	r0, r6
 810b500:	b003      	add	sp, #12
 810b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b506:	6812      	ldr	r2, [r2, #0]
 810b508:	3b04      	subs	r3, #4
 810b50a:	2a00      	cmp	r2, #0
 810b50c:	d1cc      	bne.n	810b4a8 <quorem+0x9c>
 810b50e:	3c01      	subs	r4, #1
 810b510:	e7c7      	b.n	810b4a2 <quorem+0x96>
 810b512:	6812      	ldr	r2, [r2, #0]
 810b514:	3b04      	subs	r3, #4
 810b516:	2a00      	cmp	r2, #0
 810b518:	d1f0      	bne.n	810b4fc <quorem+0xf0>
 810b51a:	3c01      	subs	r4, #1
 810b51c:	e7eb      	b.n	810b4f6 <quorem+0xea>
 810b51e:	2000      	movs	r0, #0
 810b520:	e7ee      	b.n	810b500 <quorem+0xf4>
 810b522:	0000      	movs	r0, r0
 810b524:	0000      	movs	r0, r0
	...

0810b528 <_dtoa_r>:
 810b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b52c:	ed2d 8b04 	vpush	{d8-d9}
 810b530:	ec57 6b10 	vmov	r6, r7, d0
 810b534:	b093      	sub	sp, #76	; 0x4c
 810b536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810b538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810b53c:	9106      	str	r1, [sp, #24]
 810b53e:	ee10 aa10 	vmov	sl, s0
 810b542:	4604      	mov	r4, r0
 810b544:	9209      	str	r2, [sp, #36]	; 0x24
 810b546:	930c      	str	r3, [sp, #48]	; 0x30
 810b548:	46bb      	mov	fp, r7
 810b54a:	b975      	cbnz	r5, 810b56a <_dtoa_r+0x42>
 810b54c:	2010      	movs	r0, #16
 810b54e:	f001 fb6b 	bl	810cc28 <malloc>
 810b552:	4602      	mov	r2, r0
 810b554:	6260      	str	r0, [r4, #36]	; 0x24
 810b556:	b920      	cbnz	r0, 810b562 <_dtoa_r+0x3a>
 810b558:	4ba7      	ldr	r3, [pc, #668]	; (810b7f8 <_dtoa_r+0x2d0>)
 810b55a:	21ea      	movs	r1, #234	; 0xea
 810b55c:	48a7      	ldr	r0, [pc, #668]	; (810b7fc <_dtoa_r+0x2d4>)
 810b55e:	f002 fc09 	bl	810dd74 <__assert_func>
 810b562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810b566:	6005      	str	r5, [r0, #0]
 810b568:	60c5      	str	r5, [r0, #12]
 810b56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b56c:	6819      	ldr	r1, [r3, #0]
 810b56e:	b151      	cbz	r1, 810b586 <_dtoa_r+0x5e>
 810b570:	685a      	ldr	r2, [r3, #4]
 810b572:	604a      	str	r2, [r1, #4]
 810b574:	2301      	movs	r3, #1
 810b576:	4093      	lsls	r3, r2
 810b578:	608b      	str	r3, [r1, #8]
 810b57a:	4620      	mov	r0, r4
 810b57c:	f001 fbc8 	bl	810cd10 <_Bfree>
 810b580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b582:	2200      	movs	r2, #0
 810b584:	601a      	str	r2, [r3, #0]
 810b586:	1e3b      	subs	r3, r7, #0
 810b588:	bfaa      	itet	ge
 810b58a:	2300      	movge	r3, #0
 810b58c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810b590:	f8c8 3000 	strge.w	r3, [r8]
 810b594:	4b9a      	ldr	r3, [pc, #616]	; (810b800 <_dtoa_r+0x2d8>)
 810b596:	bfbc      	itt	lt
 810b598:	2201      	movlt	r2, #1
 810b59a:	f8c8 2000 	strlt.w	r2, [r8]
 810b59e:	ea33 030b 	bics.w	r3, r3, fp
 810b5a2:	d11b      	bne.n	810b5dc <_dtoa_r+0xb4>
 810b5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810b5a6:	f242 730f 	movw	r3, #9999	; 0x270f
 810b5aa:	6013      	str	r3, [r2, #0]
 810b5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b5b0:	4333      	orrs	r3, r6
 810b5b2:	f000 8592 	beq.w	810c0da <_dtoa_r+0xbb2>
 810b5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b5b8:	b963      	cbnz	r3, 810b5d4 <_dtoa_r+0xac>
 810b5ba:	4b92      	ldr	r3, [pc, #584]	; (810b804 <_dtoa_r+0x2dc>)
 810b5bc:	e022      	b.n	810b604 <_dtoa_r+0xdc>
 810b5be:	4b92      	ldr	r3, [pc, #584]	; (810b808 <_dtoa_r+0x2e0>)
 810b5c0:	9301      	str	r3, [sp, #4]
 810b5c2:	3308      	adds	r3, #8
 810b5c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b5c6:	6013      	str	r3, [r2, #0]
 810b5c8:	9801      	ldr	r0, [sp, #4]
 810b5ca:	b013      	add	sp, #76	; 0x4c
 810b5cc:	ecbd 8b04 	vpop	{d8-d9}
 810b5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b5d4:	4b8b      	ldr	r3, [pc, #556]	; (810b804 <_dtoa_r+0x2dc>)
 810b5d6:	9301      	str	r3, [sp, #4]
 810b5d8:	3303      	adds	r3, #3
 810b5da:	e7f3      	b.n	810b5c4 <_dtoa_r+0x9c>
 810b5dc:	2200      	movs	r2, #0
 810b5de:	2300      	movs	r3, #0
 810b5e0:	4650      	mov	r0, sl
 810b5e2:	4659      	mov	r1, fp
 810b5e4:	f7f5 faf8 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5e8:	ec4b ab19 	vmov	d9, sl, fp
 810b5ec:	4680      	mov	r8, r0
 810b5ee:	b158      	cbz	r0, 810b608 <_dtoa_r+0xe0>
 810b5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810b5f2:	2301      	movs	r3, #1
 810b5f4:	6013      	str	r3, [r2, #0]
 810b5f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b5f8:	2b00      	cmp	r3, #0
 810b5fa:	f000 856b 	beq.w	810c0d4 <_dtoa_r+0xbac>
 810b5fe:	4883      	ldr	r0, [pc, #524]	; (810b80c <_dtoa_r+0x2e4>)
 810b600:	6018      	str	r0, [r3, #0]
 810b602:	1e43      	subs	r3, r0, #1
 810b604:	9301      	str	r3, [sp, #4]
 810b606:	e7df      	b.n	810b5c8 <_dtoa_r+0xa0>
 810b608:	ec4b ab10 	vmov	d0, sl, fp
 810b60c:	aa10      	add	r2, sp, #64	; 0x40
 810b60e:	a911      	add	r1, sp, #68	; 0x44
 810b610:	4620      	mov	r0, r4
 810b612:	f001 ff2b 	bl	810d46c <__d2b>
 810b616:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810b61a:	ee08 0a10 	vmov	s16, r0
 810b61e:	2d00      	cmp	r5, #0
 810b620:	f000 8084 	beq.w	810b72c <_dtoa_r+0x204>
 810b624:	ee19 3a90 	vmov	r3, s19
 810b628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b62c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810b630:	4656      	mov	r6, sl
 810b632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810b636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810b63a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810b63e:	4b74      	ldr	r3, [pc, #464]	; (810b810 <_dtoa_r+0x2e8>)
 810b640:	2200      	movs	r2, #0
 810b642:	4630      	mov	r0, r6
 810b644:	4639      	mov	r1, r7
 810b646:	f7f4 fea7 	bl	8100398 <__aeabi_dsub>
 810b64a:	a365      	add	r3, pc, #404	; (adr r3, 810b7e0 <_dtoa_r+0x2b8>)
 810b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b650:	f7f5 f85a 	bl	8100708 <__aeabi_dmul>
 810b654:	a364      	add	r3, pc, #400	; (adr r3, 810b7e8 <_dtoa_r+0x2c0>)
 810b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b65a:	f7f4 fe9f 	bl	810039c <__adddf3>
 810b65e:	4606      	mov	r6, r0
 810b660:	4628      	mov	r0, r5
 810b662:	460f      	mov	r7, r1
 810b664:	f7f4 ffe6 	bl	8100634 <__aeabi_i2d>
 810b668:	a361      	add	r3, pc, #388	; (adr r3, 810b7f0 <_dtoa_r+0x2c8>)
 810b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b66e:	f7f5 f84b 	bl	8100708 <__aeabi_dmul>
 810b672:	4602      	mov	r2, r0
 810b674:	460b      	mov	r3, r1
 810b676:	4630      	mov	r0, r6
 810b678:	4639      	mov	r1, r7
 810b67a:	f7f4 fe8f 	bl	810039c <__adddf3>
 810b67e:	4606      	mov	r6, r0
 810b680:	460f      	mov	r7, r1
 810b682:	f7f5 faf1 	bl	8100c68 <__aeabi_d2iz>
 810b686:	2200      	movs	r2, #0
 810b688:	9000      	str	r0, [sp, #0]
 810b68a:	2300      	movs	r3, #0
 810b68c:	4630      	mov	r0, r6
 810b68e:	4639      	mov	r1, r7
 810b690:	f7f5 faac 	bl	8100bec <__aeabi_dcmplt>
 810b694:	b150      	cbz	r0, 810b6ac <_dtoa_r+0x184>
 810b696:	9800      	ldr	r0, [sp, #0]
 810b698:	f7f4 ffcc 	bl	8100634 <__aeabi_i2d>
 810b69c:	4632      	mov	r2, r6
 810b69e:	463b      	mov	r3, r7
 810b6a0:	f7f5 fa9a 	bl	8100bd8 <__aeabi_dcmpeq>
 810b6a4:	b910      	cbnz	r0, 810b6ac <_dtoa_r+0x184>
 810b6a6:	9b00      	ldr	r3, [sp, #0]
 810b6a8:	3b01      	subs	r3, #1
 810b6aa:	9300      	str	r3, [sp, #0]
 810b6ac:	9b00      	ldr	r3, [sp, #0]
 810b6ae:	2b16      	cmp	r3, #22
 810b6b0:	d85a      	bhi.n	810b768 <_dtoa_r+0x240>
 810b6b2:	9a00      	ldr	r2, [sp, #0]
 810b6b4:	4b57      	ldr	r3, [pc, #348]	; (810b814 <_dtoa_r+0x2ec>)
 810b6b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b6be:	ec51 0b19 	vmov	r0, r1, d9
 810b6c2:	f7f5 fa93 	bl	8100bec <__aeabi_dcmplt>
 810b6c6:	2800      	cmp	r0, #0
 810b6c8:	d050      	beq.n	810b76c <_dtoa_r+0x244>
 810b6ca:	9b00      	ldr	r3, [sp, #0]
 810b6cc:	3b01      	subs	r3, #1
 810b6ce:	9300      	str	r3, [sp, #0]
 810b6d0:	2300      	movs	r3, #0
 810b6d2:	930b      	str	r3, [sp, #44]	; 0x2c
 810b6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b6d6:	1b5d      	subs	r5, r3, r5
 810b6d8:	1e6b      	subs	r3, r5, #1
 810b6da:	9305      	str	r3, [sp, #20]
 810b6dc:	bf45      	ittet	mi
 810b6de:	f1c5 0301 	rsbmi	r3, r5, #1
 810b6e2:	9304      	strmi	r3, [sp, #16]
 810b6e4:	2300      	movpl	r3, #0
 810b6e6:	2300      	movmi	r3, #0
 810b6e8:	bf4c      	ite	mi
 810b6ea:	9305      	strmi	r3, [sp, #20]
 810b6ec:	9304      	strpl	r3, [sp, #16]
 810b6ee:	9b00      	ldr	r3, [sp, #0]
 810b6f0:	2b00      	cmp	r3, #0
 810b6f2:	db3d      	blt.n	810b770 <_dtoa_r+0x248>
 810b6f4:	9b05      	ldr	r3, [sp, #20]
 810b6f6:	9a00      	ldr	r2, [sp, #0]
 810b6f8:	920a      	str	r2, [sp, #40]	; 0x28
 810b6fa:	4413      	add	r3, r2
 810b6fc:	9305      	str	r3, [sp, #20]
 810b6fe:	2300      	movs	r3, #0
 810b700:	9307      	str	r3, [sp, #28]
 810b702:	9b06      	ldr	r3, [sp, #24]
 810b704:	2b09      	cmp	r3, #9
 810b706:	f200 8089 	bhi.w	810b81c <_dtoa_r+0x2f4>
 810b70a:	2b05      	cmp	r3, #5
 810b70c:	bfc4      	itt	gt
 810b70e:	3b04      	subgt	r3, #4
 810b710:	9306      	strgt	r3, [sp, #24]
 810b712:	9b06      	ldr	r3, [sp, #24]
 810b714:	f1a3 0302 	sub.w	r3, r3, #2
 810b718:	bfcc      	ite	gt
 810b71a:	2500      	movgt	r5, #0
 810b71c:	2501      	movle	r5, #1
 810b71e:	2b03      	cmp	r3, #3
 810b720:	f200 8087 	bhi.w	810b832 <_dtoa_r+0x30a>
 810b724:	e8df f003 	tbb	[pc, r3]
 810b728:	59383a2d 	.word	0x59383a2d
 810b72c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b730:	441d      	add	r5, r3
 810b732:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b736:	2b20      	cmp	r3, #32
 810b738:	bfc1      	itttt	gt
 810b73a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b73e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810b742:	fa0b f303 	lslgt.w	r3, fp, r3
 810b746:	fa26 f000 	lsrgt.w	r0, r6, r0
 810b74a:	bfda      	itte	le
 810b74c:	f1c3 0320 	rsble	r3, r3, #32
 810b750:	fa06 f003 	lslle.w	r0, r6, r3
 810b754:	4318      	orrgt	r0, r3
 810b756:	f7f4 ff5d 	bl	8100614 <__aeabi_ui2d>
 810b75a:	2301      	movs	r3, #1
 810b75c:	4606      	mov	r6, r0
 810b75e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810b762:	3d01      	subs	r5, #1
 810b764:	930e      	str	r3, [sp, #56]	; 0x38
 810b766:	e76a      	b.n	810b63e <_dtoa_r+0x116>
 810b768:	2301      	movs	r3, #1
 810b76a:	e7b2      	b.n	810b6d2 <_dtoa_r+0x1aa>
 810b76c:	900b      	str	r0, [sp, #44]	; 0x2c
 810b76e:	e7b1      	b.n	810b6d4 <_dtoa_r+0x1ac>
 810b770:	9b04      	ldr	r3, [sp, #16]
 810b772:	9a00      	ldr	r2, [sp, #0]
 810b774:	1a9b      	subs	r3, r3, r2
 810b776:	9304      	str	r3, [sp, #16]
 810b778:	4253      	negs	r3, r2
 810b77a:	9307      	str	r3, [sp, #28]
 810b77c:	2300      	movs	r3, #0
 810b77e:	930a      	str	r3, [sp, #40]	; 0x28
 810b780:	e7bf      	b.n	810b702 <_dtoa_r+0x1da>
 810b782:	2300      	movs	r3, #0
 810b784:	9308      	str	r3, [sp, #32]
 810b786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b788:	2b00      	cmp	r3, #0
 810b78a:	dc55      	bgt.n	810b838 <_dtoa_r+0x310>
 810b78c:	2301      	movs	r3, #1
 810b78e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b792:	461a      	mov	r2, r3
 810b794:	9209      	str	r2, [sp, #36]	; 0x24
 810b796:	e00c      	b.n	810b7b2 <_dtoa_r+0x28a>
 810b798:	2301      	movs	r3, #1
 810b79a:	e7f3      	b.n	810b784 <_dtoa_r+0x25c>
 810b79c:	2300      	movs	r3, #0
 810b79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b7a0:	9308      	str	r3, [sp, #32]
 810b7a2:	9b00      	ldr	r3, [sp, #0]
 810b7a4:	4413      	add	r3, r2
 810b7a6:	9302      	str	r3, [sp, #8]
 810b7a8:	3301      	adds	r3, #1
 810b7aa:	2b01      	cmp	r3, #1
 810b7ac:	9303      	str	r3, [sp, #12]
 810b7ae:	bfb8      	it	lt
 810b7b0:	2301      	movlt	r3, #1
 810b7b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810b7b4:	2200      	movs	r2, #0
 810b7b6:	6042      	str	r2, [r0, #4]
 810b7b8:	2204      	movs	r2, #4
 810b7ba:	f102 0614 	add.w	r6, r2, #20
 810b7be:	429e      	cmp	r6, r3
 810b7c0:	6841      	ldr	r1, [r0, #4]
 810b7c2:	d93d      	bls.n	810b840 <_dtoa_r+0x318>
 810b7c4:	4620      	mov	r0, r4
 810b7c6:	f001 fa63 	bl	810cc90 <_Balloc>
 810b7ca:	9001      	str	r0, [sp, #4]
 810b7cc:	2800      	cmp	r0, #0
 810b7ce:	d13b      	bne.n	810b848 <_dtoa_r+0x320>
 810b7d0:	4b11      	ldr	r3, [pc, #68]	; (810b818 <_dtoa_r+0x2f0>)
 810b7d2:	4602      	mov	r2, r0
 810b7d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810b7d8:	e6c0      	b.n	810b55c <_dtoa_r+0x34>
 810b7da:	2301      	movs	r3, #1
 810b7dc:	e7df      	b.n	810b79e <_dtoa_r+0x276>
 810b7de:	bf00      	nop
 810b7e0:	636f4361 	.word	0x636f4361
 810b7e4:	3fd287a7 	.word	0x3fd287a7
 810b7e8:	8b60c8b3 	.word	0x8b60c8b3
 810b7ec:	3fc68a28 	.word	0x3fc68a28
 810b7f0:	509f79fb 	.word	0x509f79fb
 810b7f4:	3fd34413 	.word	0x3fd34413
 810b7f8:	0810e1d6 	.word	0x0810e1d6
 810b7fc:	0810e1ed 	.word	0x0810e1ed
 810b800:	7ff00000 	.word	0x7ff00000
 810b804:	0810e1d2 	.word	0x0810e1d2
 810b808:	0810e1c9 	.word	0x0810e1c9
 810b80c:	0810e04d 	.word	0x0810e04d
 810b810:	3ff80000 	.word	0x3ff80000
 810b814:	0810e3c0 	.word	0x0810e3c0
 810b818:	0810e248 	.word	0x0810e248
 810b81c:	2501      	movs	r5, #1
 810b81e:	2300      	movs	r3, #0
 810b820:	9306      	str	r3, [sp, #24]
 810b822:	9508      	str	r5, [sp, #32]
 810b824:	f04f 33ff 	mov.w	r3, #4294967295
 810b828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b82c:	2200      	movs	r2, #0
 810b82e:	2312      	movs	r3, #18
 810b830:	e7b0      	b.n	810b794 <_dtoa_r+0x26c>
 810b832:	2301      	movs	r3, #1
 810b834:	9308      	str	r3, [sp, #32]
 810b836:	e7f5      	b.n	810b824 <_dtoa_r+0x2fc>
 810b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b83a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b83e:	e7b8      	b.n	810b7b2 <_dtoa_r+0x28a>
 810b840:	3101      	adds	r1, #1
 810b842:	6041      	str	r1, [r0, #4]
 810b844:	0052      	lsls	r2, r2, #1
 810b846:	e7b8      	b.n	810b7ba <_dtoa_r+0x292>
 810b848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b84a:	9a01      	ldr	r2, [sp, #4]
 810b84c:	601a      	str	r2, [r3, #0]
 810b84e:	9b03      	ldr	r3, [sp, #12]
 810b850:	2b0e      	cmp	r3, #14
 810b852:	f200 809d 	bhi.w	810b990 <_dtoa_r+0x468>
 810b856:	2d00      	cmp	r5, #0
 810b858:	f000 809a 	beq.w	810b990 <_dtoa_r+0x468>
 810b85c:	9b00      	ldr	r3, [sp, #0]
 810b85e:	2b00      	cmp	r3, #0
 810b860:	dd32      	ble.n	810b8c8 <_dtoa_r+0x3a0>
 810b862:	4ab7      	ldr	r2, [pc, #732]	; (810bb40 <_dtoa_r+0x618>)
 810b864:	f003 030f 	and.w	r3, r3, #15
 810b868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b870:	9b00      	ldr	r3, [sp, #0]
 810b872:	05d8      	lsls	r0, r3, #23
 810b874:	ea4f 1723 	mov.w	r7, r3, asr #4
 810b878:	d516      	bpl.n	810b8a8 <_dtoa_r+0x380>
 810b87a:	4bb2      	ldr	r3, [pc, #712]	; (810bb44 <_dtoa_r+0x61c>)
 810b87c:	ec51 0b19 	vmov	r0, r1, d9
 810b880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b884:	f7f5 f86a 	bl	810095c <__aeabi_ddiv>
 810b888:	f007 070f 	and.w	r7, r7, #15
 810b88c:	4682      	mov	sl, r0
 810b88e:	468b      	mov	fp, r1
 810b890:	2503      	movs	r5, #3
 810b892:	4eac      	ldr	r6, [pc, #688]	; (810bb44 <_dtoa_r+0x61c>)
 810b894:	b957      	cbnz	r7, 810b8ac <_dtoa_r+0x384>
 810b896:	4642      	mov	r2, r8
 810b898:	464b      	mov	r3, r9
 810b89a:	4650      	mov	r0, sl
 810b89c:	4659      	mov	r1, fp
 810b89e:	f7f5 f85d 	bl	810095c <__aeabi_ddiv>
 810b8a2:	4682      	mov	sl, r0
 810b8a4:	468b      	mov	fp, r1
 810b8a6:	e028      	b.n	810b8fa <_dtoa_r+0x3d2>
 810b8a8:	2502      	movs	r5, #2
 810b8aa:	e7f2      	b.n	810b892 <_dtoa_r+0x36a>
 810b8ac:	07f9      	lsls	r1, r7, #31
 810b8ae:	d508      	bpl.n	810b8c2 <_dtoa_r+0x39a>
 810b8b0:	4640      	mov	r0, r8
 810b8b2:	4649      	mov	r1, r9
 810b8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810b8b8:	f7f4 ff26 	bl	8100708 <__aeabi_dmul>
 810b8bc:	3501      	adds	r5, #1
 810b8be:	4680      	mov	r8, r0
 810b8c0:	4689      	mov	r9, r1
 810b8c2:	107f      	asrs	r7, r7, #1
 810b8c4:	3608      	adds	r6, #8
 810b8c6:	e7e5      	b.n	810b894 <_dtoa_r+0x36c>
 810b8c8:	f000 809b 	beq.w	810ba02 <_dtoa_r+0x4da>
 810b8cc:	9b00      	ldr	r3, [sp, #0]
 810b8ce:	4f9d      	ldr	r7, [pc, #628]	; (810bb44 <_dtoa_r+0x61c>)
 810b8d0:	425e      	negs	r6, r3
 810b8d2:	4b9b      	ldr	r3, [pc, #620]	; (810bb40 <_dtoa_r+0x618>)
 810b8d4:	f006 020f 	and.w	r2, r6, #15
 810b8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b8e0:	ec51 0b19 	vmov	r0, r1, d9
 810b8e4:	f7f4 ff10 	bl	8100708 <__aeabi_dmul>
 810b8e8:	1136      	asrs	r6, r6, #4
 810b8ea:	4682      	mov	sl, r0
 810b8ec:	468b      	mov	fp, r1
 810b8ee:	2300      	movs	r3, #0
 810b8f0:	2502      	movs	r5, #2
 810b8f2:	2e00      	cmp	r6, #0
 810b8f4:	d17a      	bne.n	810b9ec <_dtoa_r+0x4c4>
 810b8f6:	2b00      	cmp	r3, #0
 810b8f8:	d1d3      	bne.n	810b8a2 <_dtoa_r+0x37a>
 810b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b8fc:	2b00      	cmp	r3, #0
 810b8fe:	f000 8082 	beq.w	810ba06 <_dtoa_r+0x4de>
 810b902:	4b91      	ldr	r3, [pc, #580]	; (810bb48 <_dtoa_r+0x620>)
 810b904:	2200      	movs	r2, #0
 810b906:	4650      	mov	r0, sl
 810b908:	4659      	mov	r1, fp
 810b90a:	f7f5 f96f 	bl	8100bec <__aeabi_dcmplt>
 810b90e:	2800      	cmp	r0, #0
 810b910:	d079      	beq.n	810ba06 <_dtoa_r+0x4de>
 810b912:	9b03      	ldr	r3, [sp, #12]
 810b914:	2b00      	cmp	r3, #0
 810b916:	d076      	beq.n	810ba06 <_dtoa_r+0x4de>
 810b918:	9b02      	ldr	r3, [sp, #8]
 810b91a:	2b00      	cmp	r3, #0
 810b91c:	dd36      	ble.n	810b98c <_dtoa_r+0x464>
 810b91e:	9b00      	ldr	r3, [sp, #0]
 810b920:	4650      	mov	r0, sl
 810b922:	4659      	mov	r1, fp
 810b924:	1e5f      	subs	r7, r3, #1
 810b926:	2200      	movs	r2, #0
 810b928:	4b88      	ldr	r3, [pc, #544]	; (810bb4c <_dtoa_r+0x624>)
 810b92a:	f7f4 feed 	bl	8100708 <__aeabi_dmul>
 810b92e:	9e02      	ldr	r6, [sp, #8]
 810b930:	4682      	mov	sl, r0
 810b932:	468b      	mov	fp, r1
 810b934:	3501      	adds	r5, #1
 810b936:	4628      	mov	r0, r5
 810b938:	f7f4 fe7c 	bl	8100634 <__aeabi_i2d>
 810b93c:	4652      	mov	r2, sl
 810b93e:	465b      	mov	r3, fp
 810b940:	f7f4 fee2 	bl	8100708 <__aeabi_dmul>
 810b944:	4b82      	ldr	r3, [pc, #520]	; (810bb50 <_dtoa_r+0x628>)
 810b946:	2200      	movs	r2, #0
 810b948:	f7f4 fd28 	bl	810039c <__adddf3>
 810b94c:	46d0      	mov	r8, sl
 810b94e:	46d9      	mov	r9, fp
 810b950:	4682      	mov	sl, r0
 810b952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810b956:	2e00      	cmp	r6, #0
 810b958:	d158      	bne.n	810ba0c <_dtoa_r+0x4e4>
 810b95a:	4b7e      	ldr	r3, [pc, #504]	; (810bb54 <_dtoa_r+0x62c>)
 810b95c:	2200      	movs	r2, #0
 810b95e:	4640      	mov	r0, r8
 810b960:	4649      	mov	r1, r9
 810b962:	f7f4 fd19 	bl	8100398 <__aeabi_dsub>
 810b966:	4652      	mov	r2, sl
 810b968:	465b      	mov	r3, fp
 810b96a:	4680      	mov	r8, r0
 810b96c:	4689      	mov	r9, r1
 810b96e:	f7f5 f95b 	bl	8100c28 <__aeabi_dcmpgt>
 810b972:	2800      	cmp	r0, #0
 810b974:	f040 8295 	bne.w	810bea2 <_dtoa_r+0x97a>
 810b978:	4652      	mov	r2, sl
 810b97a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b97e:	4640      	mov	r0, r8
 810b980:	4649      	mov	r1, r9
 810b982:	f7f5 f933 	bl	8100bec <__aeabi_dcmplt>
 810b986:	2800      	cmp	r0, #0
 810b988:	f040 8289 	bne.w	810be9e <_dtoa_r+0x976>
 810b98c:	ec5b ab19 	vmov	sl, fp, d9
 810b990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b992:	2b00      	cmp	r3, #0
 810b994:	f2c0 8148 	blt.w	810bc28 <_dtoa_r+0x700>
 810b998:	9a00      	ldr	r2, [sp, #0]
 810b99a:	2a0e      	cmp	r2, #14
 810b99c:	f300 8144 	bgt.w	810bc28 <_dtoa_r+0x700>
 810b9a0:	4b67      	ldr	r3, [pc, #412]	; (810bb40 <_dtoa_r+0x618>)
 810b9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b9a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	f280 80d5 	bge.w	810bb5c <_dtoa_r+0x634>
 810b9b2:	9b03      	ldr	r3, [sp, #12]
 810b9b4:	2b00      	cmp	r3, #0
 810b9b6:	f300 80d1 	bgt.w	810bb5c <_dtoa_r+0x634>
 810b9ba:	f040 826f 	bne.w	810be9c <_dtoa_r+0x974>
 810b9be:	4b65      	ldr	r3, [pc, #404]	; (810bb54 <_dtoa_r+0x62c>)
 810b9c0:	2200      	movs	r2, #0
 810b9c2:	4640      	mov	r0, r8
 810b9c4:	4649      	mov	r1, r9
 810b9c6:	f7f4 fe9f 	bl	8100708 <__aeabi_dmul>
 810b9ca:	4652      	mov	r2, sl
 810b9cc:	465b      	mov	r3, fp
 810b9ce:	f7f5 f921 	bl	8100c14 <__aeabi_dcmpge>
 810b9d2:	9e03      	ldr	r6, [sp, #12]
 810b9d4:	4637      	mov	r7, r6
 810b9d6:	2800      	cmp	r0, #0
 810b9d8:	f040 8245 	bne.w	810be66 <_dtoa_r+0x93e>
 810b9dc:	9d01      	ldr	r5, [sp, #4]
 810b9de:	2331      	movs	r3, #49	; 0x31
 810b9e0:	f805 3b01 	strb.w	r3, [r5], #1
 810b9e4:	9b00      	ldr	r3, [sp, #0]
 810b9e6:	3301      	adds	r3, #1
 810b9e8:	9300      	str	r3, [sp, #0]
 810b9ea:	e240      	b.n	810be6e <_dtoa_r+0x946>
 810b9ec:	07f2      	lsls	r2, r6, #31
 810b9ee:	d505      	bpl.n	810b9fc <_dtoa_r+0x4d4>
 810b9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b9f4:	f7f4 fe88 	bl	8100708 <__aeabi_dmul>
 810b9f8:	3501      	adds	r5, #1
 810b9fa:	2301      	movs	r3, #1
 810b9fc:	1076      	asrs	r6, r6, #1
 810b9fe:	3708      	adds	r7, #8
 810ba00:	e777      	b.n	810b8f2 <_dtoa_r+0x3ca>
 810ba02:	2502      	movs	r5, #2
 810ba04:	e779      	b.n	810b8fa <_dtoa_r+0x3d2>
 810ba06:	9f00      	ldr	r7, [sp, #0]
 810ba08:	9e03      	ldr	r6, [sp, #12]
 810ba0a:	e794      	b.n	810b936 <_dtoa_r+0x40e>
 810ba0c:	9901      	ldr	r1, [sp, #4]
 810ba0e:	4b4c      	ldr	r3, [pc, #304]	; (810bb40 <_dtoa_r+0x618>)
 810ba10:	4431      	add	r1, r6
 810ba12:	910d      	str	r1, [sp, #52]	; 0x34
 810ba14:	9908      	ldr	r1, [sp, #32]
 810ba16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810ba1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810ba1e:	2900      	cmp	r1, #0
 810ba20:	d043      	beq.n	810baaa <_dtoa_r+0x582>
 810ba22:	494d      	ldr	r1, [pc, #308]	; (810bb58 <_dtoa_r+0x630>)
 810ba24:	2000      	movs	r0, #0
 810ba26:	f7f4 ff99 	bl	810095c <__aeabi_ddiv>
 810ba2a:	4652      	mov	r2, sl
 810ba2c:	465b      	mov	r3, fp
 810ba2e:	f7f4 fcb3 	bl	8100398 <__aeabi_dsub>
 810ba32:	9d01      	ldr	r5, [sp, #4]
 810ba34:	4682      	mov	sl, r0
 810ba36:	468b      	mov	fp, r1
 810ba38:	4649      	mov	r1, r9
 810ba3a:	4640      	mov	r0, r8
 810ba3c:	f7f5 f914 	bl	8100c68 <__aeabi_d2iz>
 810ba40:	4606      	mov	r6, r0
 810ba42:	f7f4 fdf7 	bl	8100634 <__aeabi_i2d>
 810ba46:	4602      	mov	r2, r0
 810ba48:	460b      	mov	r3, r1
 810ba4a:	4640      	mov	r0, r8
 810ba4c:	4649      	mov	r1, r9
 810ba4e:	f7f4 fca3 	bl	8100398 <__aeabi_dsub>
 810ba52:	3630      	adds	r6, #48	; 0x30
 810ba54:	f805 6b01 	strb.w	r6, [r5], #1
 810ba58:	4652      	mov	r2, sl
 810ba5a:	465b      	mov	r3, fp
 810ba5c:	4680      	mov	r8, r0
 810ba5e:	4689      	mov	r9, r1
 810ba60:	f7f5 f8c4 	bl	8100bec <__aeabi_dcmplt>
 810ba64:	2800      	cmp	r0, #0
 810ba66:	d163      	bne.n	810bb30 <_dtoa_r+0x608>
 810ba68:	4642      	mov	r2, r8
 810ba6a:	464b      	mov	r3, r9
 810ba6c:	4936      	ldr	r1, [pc, #216]	; (810bb48 <_dtoa_r+0x620>)
 810ba6e:	2000      	movs	r0, #0
 810ba70:	f7f4 fc92 	bl	8100398 <__aeabi_dsub>
 810ba74:	4652      	mov	r2, sl
 810ba76:	465b      	mov	r3, fp
 810ba78:	f7f5 f8b8 	bl	8100bec <__aeabi_dcmplt>
 810ba7c:	2800      	cmp	r0, #0
 810ba7e:	f040 80b5 	bne.w	810bbec <_dtoa_r+0x6c4>
 810ba82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ba84:	429d      	cmp	r5, r3
 810ba86:	d081      	beq.n	810b98c <_dtoa_r+0x464>
 810ba88:	4b30      	ldr	r3, [pc, #192]	; (810bb4c <_dtoa_r+0x624>)
 810ba8a:	2200      	movs	r2, #0
 810ba8c:	4650      	mov	r0, sl
 810ba8e:	4659      	mov	r1, fp
 810ba90:	f7f4 fe3a 	bl	8100708 <__aeabi_dmul>
 810ba94:	4b2d      	ldr	r3, [pc, #180]	; (810bb4c <_dtoa_r+0x624>)
 810ba96:	4682      	mov	sl, r0
 810ba98:	468b      	mov	fp, r1
 810ba9a:	4640      	mov	r0, r8
 810ba9c:	4649      	mov	r1, r9
 810ba9e:	2200      	movs	r2, #0
 810baa0:	f7f4 fe32 	bl	8100708 <__aeabi_dmul>
 810baa4:	4680      	mov	r8, r0
 810baa6:	4689      	mov	r9, r1
 810baa8:	e7c6      	b.n	810ba38 <_dtoa_r+0x510>
 810baaa:	4650      	mov	r0, sl
 810baac:	4659      	mov	r1, fp
 810baae:	f7f4 fe2b 	bl	8100708 <__aeabi_dmul>
 810bab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810bab4:	9d01      	ldr	r5, [sp, #4]
 810bab6:	930f      	str	r3, [sp, #60]	; 0x3c
 810bab8:	4682      	mov	sl, r0
 810baba:	468b      	mov	fp, r1
 810babc:	4649      	mov	r1, r9
 810babe:	4640      	mov	r0, r8
 810bac0:	f7f5 f8d2 	bl	8100c68 <__aeabi_d2iz>
 810bac4:	4606      	mov	r6, r0
 810bac6:	f7f4 fdb5 	bl	8100634 <__aeabi_i2d>
 810baca:	3630      	adds	r6, #48	; 0x30
 810bacc:	4602      	mov	r2, r0
 810bace:	460b      	mov	r3, r1
 810bad0:	4640      	mov	r0, r8
 810bad2:	4649      	mov	r1, r9
 810bad4:	f7f4 fc60 	bl	8100398 <__aeabi_dsub>
 810bad8:	f805 6b01 	strb.w	r6, [r5], #1
 810badc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810bade:	429d      	cmp	r5, r3
 810bae0:	4680      	mov	r8, r0
 810bae2:	4689      	mov	r9, r1
 810bae4:	f04f 0200 	mov.w	r2, #0
 810bae8:	d124      	bne.n	810bb34 <_dtoa_r+0x60c>
 810baea:	4b1b      	ldr	r3, [pc, #108]	; (810bb58 <_dtoa_r+0x630>)
 810baec:	4650      	mov	r0, sl
 810baee:	4659      	mov	r1, fp
 810baf0:	f7f4 fc54 	bl	810039c <__adddf3>
 810baf4:	4602      	mov	r2, r0
 810baf6:	460b      	mov	r3, r1
 810baf8:	4640      	mov	r0, r8
 810bafa:	4649      	mov	r1, r9
 810bafc:	f7f5 f894 	bl	8100c28 <__aeabi_dcmpgt>
 810bb00:	2800      	cmp	r0, #0
 810bb02:	d173      	bne.n	810bbec <_dtoa_r+0x6c4>
 810bb04:	4652      	mov	r2, sl
 810bb06:	465b      	mov	r3, fp
 810bb08:	4913      	ldr	r1, [pc, #76]	; (810bb58 <_dtoa_r+0x630>)
 810bb0a:	2000      	movs	r0, #0
 810bb0c:	f7f4 fc44 	bl	8100398 <__aeabi_dsub>
 810bb10:	4602      	mov	r2, r0
 810bb12:	460b      	mov	r3, r1
 810bb14:	4640      	mov	r0, r8
 810bb16:	4649      	mov	r1, r9
 810bb18:	f7f5 f868 	bl	8100bec <__aeabi_dcmplt>
 810bb1c:	2800      	cmp	r0, #0
 810bb1e:	f43f af35 	beq.w	810b98c <_dtoa_r+0x464>
 810bb22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810bb24:	1e6b      	subs	r3, r5, #1
 810bb26:	930f      	str	r3, [sp, #60]	; 0x3c
 810bb28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810bb2c:	2b30      	cmp	r3, #48	; 0x30
 810bb2e:	d0f8      	beq.n	810bb22 <_dtoa_r+0x5fa>
 810bb30:	9700      	str	r7, [sp, #0]
 810bb32:	e049      	b.n	810bbc8 <_dtoa_r+0x6a0>
 810bb34:	4b05      	ldr	r3, [pc, #20]	; (810bb4c <_dtoa_r+0x624>)
 810bb36:	f7f4 fde7 	bl	8100708 <__aeabi_dmul>
 810bb3a:	4680      	mov	r8, r0
 810bb3c:	4689      	mov	r9, r1
 810bb3e:	e7bd      	b.n	810babc <_dtoa_r+0x594>
 810bb40:	0810e3c0 	.word	0x0810e3c0
 810bb44:	0810e398 	.word	0x0810e398
 810bb48:	3ff00000 	.word	0x3ff00000
 810bb4c:	40240000 	.word	0x40240000
 810bb50:	401c0000 	.word	0x401c0000
 810bb54:	40140000 	.word	0x40140000
 810bb58:	3fe00000 	.word	0x3fe00000
 810bb5c:	9d01      	ldr	r5, [sp, #4]
 810bb5e:	4656      	mov	r6, sl
 810bb60:	465f      	mov	r7, fp
 810bb62:	4642      	mov	r2, r8
 810bb64:	464b      	mov	r3, r9
 810bb66:	4630      	mov	r0, r6
 810bb68:	4639      	mov	r1, r7
 810bb6a:	f7f4 fef7 	bl	810095c <__aeabi_ddiv>
 810bb6e:	f7f5 f87b 	bl	8100c68 <__aeabi_d2iz>
 810bb72:	4682      	mov	sl, r0
 810bb74:	f7f4 fd5e 	bl	8100634 <__aeabi_i2d>
 810bb78:	4642      	mov	r2, r8
 810bb7a:	464b      	mov	r3, r9
 810bb7c:	f7f4 fdc4 	bl	8100708 <__aeabi_dmul>
 810bb80:	4602      	mov	r2, r0
 810bb82:	460b      	mov	r3, r1
 810bb84:	4630      	mov	r0, r6
 810bb86:	4639      	mov	r1, r7
 810bb88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810bb8c:	f7f4 fc04 	bl	8100398 <__aeabi_dsub>
 810bb90:	f805 6b01 	strb.w	r6, [r5], #1
 810bb94:	9e01      	ldr	r6, [sp, #4]
 810bb96:	9f03      	ldr	r7, [sp, #12]
 810bb98:	1bae      	subs	r6, r5, r6
 810bb9a:	42b7      	cmp	r7, r6
 810bb9c:	4602      	mov	r2, r0
 810bb9e:	460b      	mov	r3, r1
 810bba0:	d135      	bne.n	810bc0e <_dtoa_r+0x6e6>
 810bba2:	f7f4 fbfb 	bl	810039c <__adddf3>
 810bba6:	4642      	mov	r2, r8
 810bba8:	464b      	mov	r3, r9
 810bbaa:	4606      	mov	r6, r0
 810bbac:	460f      	mov	r7, r1
 810bbae:	f7f5 f83b 	bl	8100c28 <__aeabi_dcmpgt>
 810bbb2:	b9d0      	cbnz	r0, 810bbea <_dtoa_r+0x6c2>
 810bbb4:	4642      	mov	r2, r8
 810bbb6:	464b      	mov	r3, r9
 810bbb8:	4630      	mov	r0, r6
 810bbba:	4639      	mov	r1, r7
 810bbbc:	f7f5 f80c 	bl	8100bd8 <__aeabi_dcmpeq>
 810bbc0:	b110      	cbz	r0, 810bbc8 <_dtoa_r+0x6a0>
 810bbc2:	f01a 0f01 	tst.w	sl, #1
 810bbc6:	d110      	bne.n	810bbea <_dtoa_r+0x6c2>
 810bbc8:	4620      	mov	r0, r4
 810bbca:	ee18 1a10 	vmov	r1, s16
 810bbce:	f001 f89f 	bl	810cd10 <_Bfree>
 810bbd2:	2300      	movs	r3, #0
 810bbd4:	9800      	ldr	r0, [sp, #0]
 810bbd6:	702b      	strb	r3, [r5, #0]
 810bbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bbda:	3001      	adds	r0, #1
 810bbdc:	6018      	str	r0, [r3, #0]
 810bbde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bbe0:	2b00      	cmp	r3, #0
 810bbe2:	f43f acf1 	beq.w	810b5c8 <_dtoa_r+0xa0>
 810bbe6:	601d      	str	r5, [r3, #0]
 810bbe8:	e4ee      	b.n	810b5c8 <_dtoa_r+0xa0>
 810bbea:	9f00      	ldr	r7, [sp, #0]
 810bbec:	462b      	mov	r3, r5
 810bbee:	461d      	mov	r5, r3
 810bbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810bbf4:	2a39      	cmp	r2, #57	; 0x39
 810bbf6:	d106      	bne.n	810bc06 <_dtoa_r+0x6de>
 810bbf8:	9a01      	ldr	r2, [sp, #4]
 810bbfa:	429a      	cmp	r2, r3
 810bbfc:	d1f7      	bne.n	810bbee <_dtoa_r+0x6c6>
 810bbfe:	9901      	ldr	r1, [sp, #4]
 810bc00:	2230      	movs	r2, #48	; 0x30
 810bc02:	3701      	adds	r7, #1
 810bc04:	700a      	strb	r2, [r1, #0]
 810bc06:	781a      	ldrb	r2, [r3, #0]
 810bc08:	3201      	adds	r2, #1
 810bc0a:	701a      	strb	r2, [r3, #0]
 810bc0c:	e790      	b.n	810bb30 <_dtoa_r+0x608>
 810bc0e:	4ba6      	ldr	r3, [pc, #664]	; (810bea8 <_dtoa_r+0x980>)
 810bc10:	2200      	movs	r2, #0
 810bc12:	f7f4 fd79 	bl	8100708 <__aeabi_dmul>
 810bc16:	2200      	movs	r2, #0
 810bc18:	2300      	movs	r3, #0
 810bc1a:	4606      	mov	r6, r0
 810bc1c:	460f      	mov	r7, r1
 810bc1e:	f7f4 ffdb 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc22:	2800      	cmp	r0, #0
 810bc24:	d09d      	beq.n	810bb62 <_dtoa_r+0x63a>
 810bc26:	e7cf      	b.n	810bbc8 <_dtoa_r+0x6a0>
 810bc28:	9a08      	ldr	r2, [sp, #32]
 810bc2a:	2a00      	cmp	r2, #0
 810bc2c:	f000 80d7 	beq.w	810bdde <_dtoa_r+0x8b6>
 810bc30:	9a06      	ldr	r2, [sp, #24]
 810bc32:	2a01      	cmp	r2, #1
 810bc34:	f300 80ba 	bgt.w	810bdac <_dtoa_r+0x884>
 810bc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810bc3a:	2a00      	cmp	r2, #0
 810bc3c:	f000 80b2 	beq.w	810bda4 <_dtoa_r+0x87c>
 810bc40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810bc44:	9e07      	ldr	r6, [sp, #28]
 810bc46:	9d04      	ldr	r5, [sp, #16]
 810bc48:	9a04      	ldr	r2, [sp, #16]
 810bc4a:	441a      	add	r2, r3
 810bc4c:	9204      	str	r2, [sp, #16]
 810bc4e:	9a05      	ldr	r2, [sp, #20]
 810bc50:	2101      	movs	r1, #1
 810bc52:	441a      	add	r2, r3
 810bc54:	4620      	mov	r0, r4
 810bc56:	9205      	str	r2, [sp, #20]
 810bc58:	f001 f95c 	bl	810cf14 <__i2b>
 810bc5c:	4607      	mov	r7, r0
 810bc5e:	2d00      	cmp	r5, #0
 810bc60:	dd0c      	ble.n	810bc7c <_dtoa_r+0x754>
 810bc62:	9b05      	ldr	r3, [sp, #20]
 810bc64:	2b00      	cmp	r3, #0
 810bc66:	dd09      	ble.n	810bc7c <_dtoa_r+0x754>
 810bc68:	42ab      	cmp	r3, r5
 810bc6a:	9a04      	ldr	r2, [sp, #16]
 810bc6c:	bfa8      	it	ge
 810bc6e:	462b      	movge	r3, r5
 810bc70:	1ad2      	subs	r2, r2, r3
 810bc72:	9204      	str	r2, [sp, #16]
 810bc74:	9a05      	ldr	r2, [sp, #20]
 810bc76:	1aed      	subs	r5, r5, r3
 810bc78:	1ad3      	subs	r3, r2, r3
 810bc7a:	9305      	str	r3, [sp, #20]
 810bc7c:	9b07      	ldr	r3, [sp, #28]
 810bc7e:	b31b      	cbz	r3, 810bcc8 <_dtoa_r+0x7a0>
 810bc80:	9b08      	ldr	r3, [sp, #32]
 810bc82:	2b00      	cmp	r3, #0
 810bc84:	f000 80af 	beq.w	810bde6 <_dtoa_r+0x8be>
 810bc88:	2e00      	cmp	r6, #0
 810bc8a:	dd13      	ble.n	810bcb4 <_dtoa_r+0x78c>
 810bc8c:	4639      	mov	r1, r7
 810bc8e:	4632      	mov	r2, r6
 810bc90:	4620      	mov	r0, r4
 810bc92:	f001 f9ff 	bl	810d094 <__pow5mult>
 810bc96:	ee18 2a10 	vmov	r2, s16
 810bc9a:	4601      	mov	r1, r0
 810bc9c:	4607      	mov	r7, r0
 810bc9e:	4620      	mov	r0, r4
 810bca0:	f001 f94e 	bl	810cf40 <__multiply>
 810bca4:	ee18 1a10 	vmov	r1, s16
 810bca8:	4680      	mov	r8, r0
 810bcaa:	4620      	mov	r0, r4
 810bcac:	f001 f830 	bl	810cd10 <_Bfree>
 810bcb0:	ee08 8a10 	vmov	s16, r8
 810bcb4:	9b07      	ldr	r3, [sp, #28]
 810bcb6:	1b9a      	subs	r2, r3, r6
 810bcb8:	d006      	beq.n	810bcc8 <_dtoa_r+0x7a0>
 810bcba:	ee18 1a10 	vmov	r1, s16
 810bcbe:	4620      	mov	r0, r4
 810bcc0:	f001 f9e8 	bl	810d094 <__pow5mult>
 810bcc4:	ee08 0a10 	vmov	s16, r0
 810bcc8:	2101      	movs	r1, #1
 810bcca:	4620      	mov	r0, r4
 810bccc:	f001 f922 	bl	810cf14 <__i2b>
 810bcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bcd2:	2b00      	cmp	r3, #0
 810bcd4:	4606      	mov	r6, r0
 810bcd6:	f340 8088 	ble.w	810bdea <_dtoa_r+0x8c2>
 810bcda:	461a      	mov	r2, r3
 810bcdc:	4601      	mov	r1, r0
 810bcde:	4620      	mov	r0, r4
 810bce0:	f001 f9d8 	bl	810d094 <__pow5mult>
 810bce4:	9b06      	ldr	r3, [sp, #24]
 810bce6:	2b01      	cmp	r3, #1
 810bce8:	4606      	mov	r6, r0
 810bcea:	f340 8081 	ble.w	810bdf0 <_dtoa_r+0x8c8>
 810bcee:	f04f 0800 	mov.w	r8, #0
 810bcf2:	6933      	ldr	r3, [r6, #16]
 810bcf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810bcf8:	6918      	ldr	r0, [r3, #16]
 810bcfa:	f001 f8bb 	bl	810ce74 <__hi0bits>
 810bcfe:	f1c0 0020 	rsb	r0, r0, #32
 810bd02:	9b05      	ldr	r3, [sp, #20]
 810bd04:	4418      	add	r0, r3
 810bd06:	f010 001f 	ands.w	r0, r0, #31
 810bd0a:	f000 8092 	beq.w	810be32 <_dtoa_r+0x90a>
 810bd0e:	f1c0 0320 	rsb	r3, r0, #32
 810bd12:	2b04      	cmp	r3, #4
 810bd14:	f340 808a 	ble.w	810be2c <_dtoa_r+0x904>
 810bd18:	f1c0 001c 	rsb	r0, r0, #28
 810bd1c:	9b04      	ldr	r3, [sp, #16]
 810bd1e:	4403      	add	r3, r0
 810bd20:	9304      	str	r3, [sp, #16]
 810bd22:	9b05      	ldr	r3, [sp, #20]
 810bd24:	4403      	add	r3, r0
 810bd26:	4405      	add	r5, r0
 810bd28:	9305      	str	r3, [sp, #20]
 810bd2a:	9b04      	ldr	r3, [sp, #16]
 810bd2c:	2b00      	cmp	r3, #0
 810bd2e:	dd07      	ble.n	810bd40 <_dtoa_r+0x818>
 810bd30:	ee18 1a10 	vmov	r1, s16
 810bd34:	461a      	mov	r2, r3
 810bd36:	4620      	mov	r0, r4
 810bd38:	f001 fa06 	bl	810d148 <__lshift>
 810bd3c:	ee08 0a10 	vmov	s16, r0
 810bd40:	9b05      	ldr	r3, [sp, #20]
 810bd42:	2b00      	cmp	r3, #0
 810bd44:	dd05      	ble.n	810bd52 <_dtoa_r+0x82a>
 810bd46:	4631      	mov	r1, r6
 810bd48:	461a      	mov	r2, r3
 810bd4a:	4620      	mov	r0, r4
 810bd4c:	f001 f9fc 	bl	810d148 <__lshift>
 810bd50:	4606      	mov	r6, r0
 810bd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bd54:	2b00      	cmp	r3, #0
 810bd56:	d06e      	beq.n	810be36 <_dtoa_r+0x90e>
 810bd58:	ee18 0a10 	vmov	r0, s16
 810bd5c:	4631      	mov	r1, r6
 810bd5e:	f001 fa63 	bl	810d228 <__mcmp>
 810bd62:	2800      	cmp	r0, #0
 810bd64:	da67      	bge.n	810be36 <_dtoa_r+0x90e>
 810bd66:	9b00      	ldr	r3, [sp, #0]
 810bd68:	3b01      	subs	r3, #1
 810bd6a:	ee18 1a10 	vmov	r1, s16
 810bd6e:	9300      	str	r3, [sp, #0]
 810bd70:	220a      	movs	r2, #10
 810bd72:	2300      	movs	r3, #0
 810bd74:	4620      	mov	r0, r4
 810bd76:	f000 ffed 	bl	810cd54 <__multadd>
 810bd7a:	9b08      	ldr	r3, [sp, #32]
 810bd7c:	ee08 0a10 	vmov	s16, r0
 810bd80:	2b00      	cmp	r3, #0
 810bd82:	f000 81b1 	beq.w	810c0e8 <_dtoa_r+0xbc0>
 810bd86:	2300      	movs	r3, #0
 810bd88:	4639      	mov	r1, r7
 810bd8a:	220a      	movs	r2, #10
 810bd8c:	4620      	mov	r0, r4
 810bd8e:	f000 ffe1 	bl	810cd54 <__multadd>
 810bd92:	9b02      	ldr	r3, [sp, #8]
 810bd94:	2b00      	cmp	r3, #0
 810bd96:	4607      	mov	r7, r0
 810bd98:	f300 808e 	bgt.w	810beb8 <_dtoa_r+0x990>
 810bd9c:	9b06      	ldr	r3, [sp, #24]
 810bd9e:	2b02      	cmp	r3, #2
 810bda0:	dc51      	bgt.n	810be46 <_dtoa_r+0x91e>
 810bda2:	e089      	b.n	810beb8 <_dtoa_r+0x990>
 810bda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bda6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810bdaa:	e74b      	b.n	810bc44 <_dtoa_r+0x71c>
 810bdac:	9b03      	ldr	r3, [sp, #12]
 810bdae:	1e5e      	subs	r6, r3, #1
 810bdb0:	9b07      	ldr	r3, [sp, #28]
 810bdb2:	42b3      	cmp	r3, r6
 810bdb4:	bfbf      	itttt	lt
 810bdb6:	9b07      	ldrlt	r3, [sp, #28]
 810bdb8:	9607      	strlt	r6, [sp, #28]
 810bdba:	1af2      	sublt	r2, r6, r3
 810bdbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810bdbe:	bfb6      	itet	lt
 810bdc0:	189b      	addlt	r3, r3, r2
 810bdc2:	1b9e      	subge	r6, r3, r6
 810bdc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 810bdc6:	9b03      	ldr	r3, [sp, #12]
 810bdc8:	bfb8      	it	lt
 810bdca:	2600      	movlt	r6, #0
 810bdcc:	2b00      	cmp	r3, #0
 810bdce:	bfb7      	itett	lt
 810bdd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810bdd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810bdd8:	1a9d      	sublt	r5, r3, r2
 810bdda:	2300      	movlt	r3, #0
 810bddc:	e734      	b.n	810bc48 <_dtoa_r+0x720>
 810bdde:	9e07      	ldr	r6, [sp, #28]
 810bde0:	9d04      	ldr	r5, [sp, #16]
 810bde2:	9f08      	ldr	r7, [sp, #32]
 810bde4:	e73b      	b.n	810bc5e <_dtoa_r+0x736>
 810bde6:	9a07      	ldr	r2, [sp, #28]
 810bde8:	e767      	b.n	810bcba <_dtoa_r+0x792>
 810bdea:	9b06      	ldr	r3, [sp, #24]
 810bdec:	2b01      	cmp	r3, #1
 810bdee:	dc18      	bgt.n	810be22 <_dtoa_r+0x8fa>
 810bdf0:	f1ba 0f00 	cmp.w	sl, #0
 810bdf4:	d115      	bne.n	810be22 <_dtoa_r+0x8fa>
 810bdf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810bdfa:	b993      	cbnz	r3, 810be22 <_dtoa_r+0x8fa>
 810bdfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810be00:	0d1b      	lsrs	r3, r3, #20
 810be02:	051b      	lsls	r3, r3, #20
 810be04:	b183      	cbz	r3, 810be28 <_dtoa_r+0x900>
 810be06:	9b04      	ldr	r3, [sp, #16]
 810be08:	3301      	adds	r3, #1
 810be0a:	9304      	str	r3, [sp, #16]
 810be0c:	9b05      	ldr	r3, [sp, #20]
 810be0e:	3301      	adds	r3, #1
 810be10:	9305      	str	r3, [sp, #20]
 810be12:	f04f 0801 	mov.w	r8, #1
 810be16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810be18:	2b00      	cmp	r3, #0
 810be1a:	f47f af6a 	bne.w	810bcf2 <_dtoa_r+0x7ca>
 810be1e:	2001      	movs	r0, #1
 810be20:	e76f      	b.n	810bd02 <_dtoa_r+0x7da>
 810be22:	f04f 0800 	mov.w	r8, #0
 810be26:	e7f6      	b.n	810be16 <_dtoa_r+0x8ee>
 810be28:	4698      	mov	r8, r3
 810be2a:	e7f4      	b.n	810be16 <_dtoa_r+0x8ee>
 810be2c:	f43f af7d 	beq.w	810bd2a <_dtoa_r+0x802>
 810be30:	4618      	mov	r0, r3
 810be32:	301c      	adds	r0, #28
 810be34:	e772      	b.n	810bd1c <_dtoa_r+0x7f4>
 810be36:	9b03      	ldr	r3, [sp, #12]
 810be38:	2b00      	cmp	r3, #0
 810be3a:	dc37      	bgt.n	810beac <_dtoa_r+0x984>
 810be3c:	9b06      	ldr	r3, [sp, #24]
 810be3e:	2b02      	cmp	r3, #2
 810be40:	dd34      	ble.n	810beac <_dtoa_r+0x984>
 810be42:	9b03      	ldr	r3, [sp, #12]
 810be44:	9302      	str	r3, [sp, #8]
 810be46:	9b02      	ldr	r3, [sp, #8]
 810be48:	b96b      	cbnz	r3, 810be66 <_dtoa_r+0x93e>
 810be4a:	4631      	mov	r1, r6
 810be4c:	2205      	movs	r2, #5
 810be4e:	4620      	mov	r0, r4
 810be50:	f000 ff80 	bl	810cd54 <__multadd>
 810be54:	4601      	mov	r1, r0
 810be56:	4606      	mov	r6, r0
 810be58:	ee18 0a10 	vmov	r0, s16
 810be5c:	f001 f9e4 	bl	810d228 <__mcmp>
 810be60:	2800      	cmp	r0, #0
 810be62:	f73f adbb 	bgt.w	810b9dc <_dtoa_r+0x4b4>
 810be66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be68:	9d01      	ldr	r5, [sp, #4]
 810be6a:	43db      	mvns	r3, r3
 810be6c:	9300      	str	r3, [sp, #0]
 810be6e:	f04f 0800 	mov.w	r8, #0
 810be72:	4631      	mov	r1, r6
 810be74:	4620      	mov	r0, r4
 810be76:	f000 ff4b 	bl	810cd10 <_Bfree>
 810be7a:	2f00      	cmp	r7, #0
 810be7c:	f43f aea4 	beq.w	810bbc8 <_dtoa_r+0x6a0>
 810be80:	f1b8 0f00 	cmp.w	r8, #0
 810be84:	d005      	beq.n	810be92 <_dtoa_r+0x96a>
 810be86:	45b8      	cmp	r8, r7
 810be88:	d003      	beq.n	810be92 <_dtoa_r+0x96a>
 810be8a:	4641      	mov	r1, r8
 810be8c:	4620      	mov	r0, r4
 810be8e:	f000 ff3f 	bl	810cd10 <_Bfree>
 810be92:	4639      	mov	r1, r7
 810be94:	4620      	mov	r0, r4
 810be96:	f000 ff3b 	bl	810cd10 <_Bfree>
 810be9a:	e695      	b.n	810bbc8 <_dtoa_r+0x6a0>
 810be9c:	2600      	movs	r6, #0
 810be9e:	4637      	mov	r7, r6
 810bea0:	e7e1      	b.n	810be66 <_dtoa_r+0x93e>
 810bea2:	9700      	str	r7, [sp, #0]
 810bea4:	4637      	mov	r7, r6
 810bea6:	e599      	b.n	810b9dc <_dtoa_r+0x4b4>
 810bea8:	40240000 	.word	0x40240000
 810beac:	9b08      	ldr	r3, [sp, #32]
 810beae:	2b00      	cmp	r3, #0
 810beb0:	f000 80ca 	beq.w	810c048 <_dtoa_r+0xb20>
 810beb4:	9b03      	ldr	r3, [sp, #12]
 810beb6:	9302      	str	r3, [sp, #8]
 810beb8:	2d00      	cmp	r5, #0
 810beba:	dd05      	ble.n	810bec8 <_dtoa_r+0x9a0>
 810bebc:	4639      	mov	r1, r7
 810bebe:	462a      	mov	r2, r5
 810bec0:	4620      	mov	r0, r4
 810bec2:	f001 f941 	bl	810d148 <__lshift>
 810bec6:	4607      	mov	r7, r0
 810bec8:	f1b8 0f00 	cmp.w	r8, #0
 810becc:	d05b      	beq.n	810bf86 <_dtoa_r+0xa5e>
 810bece:	6879      	ldr	r1, [r7, #4]
 810bed0:	4620      	mov	r0, r4
 810bed2:	f000 fedd 	bl	810cc90 <_Balloc>
 810bed6:	4605      	mov	r5, r0
 810bed8:	b928      	cbnz	r0, 810bee6 <_dtoa_r+0x9be>
 810beda:	4b87      	ldr	r3, [pc, #540]	; (810c0f8 <_dtoa_r+0xbd0>)
 810bedc:	4602      	mov	r2, r0
 810bede:	f240 21ea 	movw	r1, #746	; 0x2ea
 810bee2:	f7ff bb3b 	b.w	810b55c <_dtoa_r+0x34>
 810bee6:	693a      	ldr	r2, [r7, #16]
 810bee8:	3202      	adds	r2, #2
 810beea:	0092      	lsls	r2, r2, #2
 810beec:	f107 010c 	add.w	r1, r7, #12
 810bef0:	300c      	adds	r0, #12
 810bef2:	f000 feb3 	bl	810cc5c <memcpy>
 810bef6:	2201      	movs	r2, #1
 810bef8:	4629      	mov	r1, r5
 810befa:	4620      	mov	r0, r4
 810befc:	f001 f924 	bl	810d148 <__lshift>
 810bf00:	9b01      	ldr	r3, [sp, #4]
 810bf02:	f103 0901 	add.w	r9, r3, #1
 810bf06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810bf0a:	4413      	add	r3, r2
 810bf0c:	9305      	str	r3, [sp, #20]
 810bf0e:	f00a 0301 	and.w	r3, sl, #1
 810bf12:	46b8      	mov	r8, r7
 810bf14:	9304      	str	r3, [sp, #16]
 810bf16:	4607      	mov	r7, r0
 810bf18:	4631      	mov	r1, r6
 810bf1a:	ee18 0a10 	vmov	r0, s16
 810bf1e:	f7ff fa75 	bl	810b40c <quorem>
 810bf22:	4641      	mov	r1, r8
 810bf24:	9002      	str	r0, [sp, #8]
 810bf26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810bf2a:	ee18 0a10 	vmov	r0, s16
 810bf2e:	f001 f97b 	bl	810d228 <__mcmp>
 810bf32:	463a      	mov	r2, r7
 810bf34:	9003      	str	r0, [sp, #12]
 810bf36:	4631      	mov	r1, r6
 810bf38:	4620      	mov	r0, r4
 810bf3a:	f001 f991 	bl	810d260 <__mdiff>
 810bf3e:	68c2      	ldr	r2, [r0, #12]
 810bf40:	f109 3bff 	add.w	fp, r9, #4294967295
 810bf44:	4605      	mov	r5, r0
 810bf46:	bb02      	cbnz	r2, 810bf8a <_dtoa_r+0xa62>
 810bf48:	4601      	mov	r1, r0
 810bf4a:	ee18 0a10 	vmov	r0, s16
 810bf4e:	f001 f96b 	bl	810d228 <__mcmp>
 810bf52:	4602      	mov	r2, r0
 810bf54:	4629      	mov	r1, r5
 810bf56:	4620      	mov	r0, r4
 810bf58:	9207      	str	r2, [sp, #28]
 810bf5a:	f000 fed9 	bl	810cd10 <_Bfree>
 810bf5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810bf62:	ea43 0102 	orr.w	r1, r3, r2
 810bf66:	9b04      	ldr	r3, [sp, #16]
 810bf68:	430b      	orrs	r3, r1
 810bf6a:	464d      	mov	r5, r9
 810bf6c:	d10f      	bne.n	810bf8e <_dtoa_r+0xa66>
 810bf6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810bf72:	d02a      	beq.n	810bfca <_dtoa_r+0xaa2>
 810bf74:	9b03      	ldr	r3, [sp, #12]
 810bf76:	2b00      	cmp	r3, #0
 810bf78:	dd02      	ble.n	810bf80 <_dtoa_r+0xa58>
 810bf7a:	9b02      	ldr	r3, [sp, #8]
 810bf7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810bf80:	f88b a000 	strb.w	sl, [fp]
 810bf84:	e775      	b.n	810be72 <_dtoa_r+0x94a>
 810bf86:	4638      	mov	r0, r7
 810bf88:	e7ba      	b.n	810bf00 <_dtoa_r+0x9d8>
 810bf8a:	2201      	movs	r2, #1
 810bf8c:	e7e2      	b.n	810bf54 <_dtoa_r+0xa2c>
 810bf8e:	9b03      	ldr	r3, [sp, #12]
 810bf90:	2b00      	cmp	r3, #0
 810bf92:	db04      	blt.n	810bf9e <_dtoa_r+0xa76>
 810bf94:	9906      	ldr	r1, [sp, #24]
 810bf96:	430b      	orrs	r3, r1
 810bf98:	9904      	ldr	r1, [sp, #16]
 810bf9a:	430b      	orrs	r3, r1
 810bf9c:	d122      	bne.n	810bfe4 <_dtoa_r+0xabc>
 810bf9e:	2a00      	cmp	r2, #0
 810bfa0:	ddee      	ble.n	810bf80 <_dtoa_r+0xa58>
 810bfa2:	ee18 1a10 	vmov	r1, s16
 810bfa6:	2201      	movs	r2, #1
 810bfa8:	4620      	mov	r0, r4
 810bfaa:	f001 f8cd 	bl	810d148 <__lshift>
 810bfae:	4631      	mov	r1, r6
 810bfb0:	ee08 0a10 	vmov	s16, r0
 810bfb4:	f001 f938 	bl	810d228 <__mcmp>
 810bfb8:	2800      	cmp	r0, #0
 810bfba:	dc03      	bgt.n	810bfc4 <_dtoa_r+0xa9c>
 810bfbc:	d1e0      	bne.n	810bf80 <_dtoa_r+0xa58>
 810bfbe:	f01a 0f01 	tst.w	sl, #1
 810bfc2:	d0dd      	beq.n	810bf80 <_dtoa_r+0xa58>
 810bfc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810bfc8:	d1d7      	bne.n	810bf7a <_dtoa_r+0xa52>
 810bfca:	2339      	movs	r3, #57	; 0x39
 810bfcc:	f88b 3000 	strb.w	r3, [fp]
 810bfd0:	462b      	mov	r3, r5
 810bfd2:	461d      	mov	r5, r3
 810bfd4:	3b01      	subs	r3, #1
 810bfd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810bfda:	2a39      	cmp	r2, #57	; 0x39
 810bfdc:	d071      	beq.n	810c0c2 <_dtoa_r+0xb9a>
 810bfde:	3201      	adds	r2, #1
 810bfe0:	701a      	strb	r2, [r3, #0]
 810bfe2:	e746      	b.n	810be72 <_dtoa_r+0x94a>
 810bfe4:	2a00      	cmp	r2, #0
 810bfe6:	dd07      	ble.n	810bff8 <_dtoa_r+0xad0>
 810bfe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810bfec:	d0ed      	beq.n	810bfca <_dtoa_r+0xaa2>
 810bfee:	f10a 0301 	add.w	r3, sl, #1
 810bff2:	f88b 3000 	strb.w	r3, [fp]
 810bff6:	e73c      	b.n	810be72 <_dtoa_r+0x94a>
 810bff8:	9b05      	ldr	r3, [sp, #20]
 810bffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 810bffe:	4599      	cmp	r9, r3
 810c000:	d047      	beq.n	810c092 <_dtoa_r+0xb6a>
 810c002:	ee18 1a10 	vmov	r1, s16
 810c006:	2300      	movs	r3, #0
 810c008:	220a      	movs	r2, #10
 810c00a:	4620      	mov	r0, r4
 810c00c:	f000 fea2 	bl	810cd54 <__multadd>
 810c010:	45b8      	cmp	r8, r7
 810c012:	ee08 0a10 	vmov	s16, r0
 810c016:	f04f 0300 	mov.w	r3, #0
 810c01a:	f04f 020a 	mov.w	r2, #10
 810c01e:	4641      	mov	r1, r8
 810c020:	4620      	mov	r0, r4
 810c022:	d106      	bne.n	810c032 <_dtoa_r+0xb0a>
 810c024:	f000 fe96 	bl	810cd54 <__multadd>
 810c028:	4680      	mov	r8, r0
 810c02a:	4607      	mov	r7, r0
 810c02c:	f109 0901 	add.w	r9, r9, #1
 810c030:	e772      	b.n	810bf18 <_dtoa_r+0x9f0>
 810c032:	f000 fe8f 	bl	810cd54 <__multadd>
 810c036:	4639      	mov	r1, r7
 810c038:	4680      	mov	r8, r0
 810c03a:	2300      	movs	r3, #0
 810c03c:	220a      	movs	r2, #10
 810c03e:	4620      	mov	r0, r4
 810c040:	f000 fe88 	bl	810cd54 <__multadd>
 810c044:	4607      	mov	r7, r0
 810c046:	e7f1      	b.n	810c02c <_dtoa_r+0xb04>
 810c048:	9b03      	ldr	r3, [sp, #12]
 810c04a:	9302      	str	r3, [sp, #8]
 810c04c:	9d01      	ldr	r5, [sp, #4]
 810c04e:	ee18 0a10 	vmov	r0, s16
 810c052:	4631      	mov	r1, r6
 810c054:	f7ff f9da 	bl	810b40c <quorem>
 810c058:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810c05c:	9b01      	ldr	r3, [sp, #4]
 810c05e:	f805 ab01 	strb.w	sl, [r5], #1
 810c062:	1aea      	subs	r2, r5, r3
 810c064:	9b02      	ldr	r3, [sp, #8]
 810c066:	4293      	cmp	r3, r2
 810c068:	dd09      	ble.n	810c07e <_dtoa_r+0xb56>
 810c06a:	ee18 1a10 	vmov	r1, s16
 810c06e:	2300      	movs	r3, #0
 810c070:	220a      	movs	r2, #10
 810c072:	4620      	mov	r0, r4
 810c074:	f000 fe6e 	bl	810cd54 <__multadd>
 810c078:	ee08 0a10 	vmov	s16, r0
 810c07c:	e7e7      	b.n	810c04e <_dtoa_r+0xb26>
 810c07e:	9b02      	ldr	r3, [sp, #8]
 810c080:	2b00      	cmp	r3, #0
 810c082:	bfc8      	it	gt
 810c084:	461d      	movgt	r5, r3
 810c086:	9b01      	ldr	r3, [sp, #4]
 810c088:	bfd8      	it	le
 810c08a:	2501      	movle	r5, #1
 810c08c:	441d      	add	r5, r3
 810c08e:	f04f 0800 	mov.w	r8, #0
 810c092:	ee18 1a10 	vmov	r1, s16
 810c096:	2201      	movs	r2, #1
 810c098:	4620      	mov	r0, r4
 810c09a:	f001 f855 	bl	810d148 <__lshift>
 810c09e:	4631      	mov	r1, r6
 810c0a0:	ee08 0a10 	vmov	s16, r0
 810c0a4:	f001 f8c0 	bl	810d228 <__mcmp>
 810c0a8:	2800      	cmp	r0, #0
 810c0aa:	dc91      	bgt.n	810bfd0 <_dtoa_r+0xaa8>
 810c0ac:	d102      	bne.n	810c0b4 <_dtoa_r+0xb8c>
 810c0ae:	f01a 0f01 	tst.w	sl, #1
 810c0b2:	d18d      	bne.n	810bfd0 <_dtoa_r+0xaa8>
 810c0b4:	462b      	mov	r3, r5
 810c0b6:	461d      	mov	r5, r3
 810c0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c0bc:	2a30      	cmp	r2, #48	; 0x30
 810c0be:	d0fa      	beq.n	810c0b6 <_dtoa_r+0xb8e>
 810c0c0:	e6d7      	b.n	810be72 <_dtoa_r+0x94a>
 810c0c2:	9a01      	ldr	r2, [sp, #4]
 810c0c4:	429a      	cmp	r2, r3
 810c0c6:	d184      	bne.n	810bfd2 <_dtoa_r+0xaaa>
 810c0c8:	9b00      	ldr	r3, [sp, #0]
 810c0ca:	3301      	adds	r3, #1
 810c0cc:	9300      	str	r3, [sp, #0]
 810c0ce:	2331      	movs	r3, #49	; 0x31
 810c0d0:	7013      	strb	r3, [r2, #0]
 810c0d2:	e6ce      	b.n	810be72 <_dtoa_r+0x94a>
 810c0d4:	4b09      	ldr	r3, [pc, #36]	; (810c0fc <_dtoa_r+0xbd4>)
 810c0d6:	f7ff ba95 	b.w	810b604 <_dtoa_r+0xdc>
 810c0da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c0dc:	2b00      	cmp	r3, #0
 810c0de:	f47f aa6e 	bne.w	810b5be <_dtoa_r+0x96>
 810c0e2:	4b07      	ldr	r3, [pc, #28]	; (810c100 <_dtoa_r+0xbd8>)
 810c0e4:	f7ff ba8e 	b.w	810b604 <_dtoa_r+0xdc>
 810c0e8:	9b02      	ldr	r3, [sp, #8]
 810c0ea:	2b00      	cmp	r3, #0
 810c0ec:	dcae      	bgt.n	810c04c <_dtoa_r+0xb24>
 810c0ee:	9b06      	ldr	r3, [sp, #24]
 810c0f0:	2b02      	cmp	r3, #2
 810c0f2:	f73f aea8 	bgt.w	810be46 <_dtoa_r+0x91e>
 810c0f6:	e7a9      	b.n	810c04c <_dtoa_r+0xb24>
 810c0f8:	0810e248 	.word	0x0810e248
 810c0fc:	0810e04c 	.word	0x0810e04c
 810c100:	0810e1c9 	.word	0x0810e1c9

0810c104 <__sflush_r>:
 810c104:	898a      	ldrh	r2, [r1, #12]
 810c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c10a:	4605      	mov	r5, r0
 810c10c:	0710      	lsls	r0, r2, #28
 810c10e:	460c      	mov	r4, r1
 810c110:	d458      	bmi.n	810c1c4 <__sflush_r+0xc0>
 810c112:	684b      	ldr	r3, [r1, #4]
 810c114:	2b00      	cmp	r3, #0
 810c116:	dc05      	bgt.n	810c124 <__sflush_r+0x20>
 810c118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c11a:	2b00      	cmp	r3, #0
 810c11c:	dc02      	bgt.n	810c124 <__sflush_r+0x20>
 810c11e:	2000      	movs	r0, #0
 810c120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c126:	2e00      	cmp	r6, #0
 810c128:	d0f9      	beq.n	810c11e <__sflush_r+0x1a>
 810c12a:	2300      	movs	r3, #0
 810c12c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c130:	682f      	ldr	r7, [r5, #0]
 810c132:	602b      	str	r3, [r5, #0]
 810c134:	d032      	beq.n	810c19c <__sflush_r+0x98>
 810c136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c138:	89a3      	ldrh	r3, [r4, #12]
 810c13a:	075a      	lsls	r2, r3, #29
 810c13c:	d505      	bpl.n	810c14a <__sflush_r+0x46>
 810c13e:	6863      	ldr	r3, [r4, #4]
 810c140:	1ac0      	subs	r0, r0, r3
 810c142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c144:	b10b      	cbz	r3, 810c14a <__sflush_r+0x46>
 810c146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c148:	1ac0      	subs	r0, r0, r3
 810c14a:	2300      	movs	r3, #0
 810c14c:	4602      	mov	r2, r0
 810c14e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c150:	6a21      	ldr	r1, [r4, #32]
 810c152:	4628      	mov	r0, r5
 810c154:	47b0      	blx	r6
 810c156:	1c43      	adds	r3, r0, #1
 810c158:	89a3      	ldrh	r3, [r4, #12]
 810c15a:	d106      	bne.n	810c16a <__sflush_r+0x66>
 810c15c:	6829      	ldr	r1, [r5, #0]
 810c15e:	291d      	cmp	r1, #29
 810c160:	d82c      	bhi.n	810c1bc <__sflush_r+0xb8>
 810c162:	4a2a      	ldr	r2, [pc, #168]	; (810c20c <__sflush_r+0x108>)
 810c164:	40ca      	lsrs	r2, r1
 810c166:	07d6      	lsls	r6, r2, #31
 810c168:	d528      	bpl.n	810c1bc <__sflush_r+0xb8>
 810c16a:	2200      	movs	r2, #0
 810c16c:	6062      	str	r2, [r4, #4]
 810c16e:	04d9      	lsls	r1, r3, #19
 810c170:	6922      	ldr	r2, [r4, #16]
 810c172:	6022      	str	r2, [r4, #0]
 810c174:	d504      	bpl.n	810c180 <__sflush_r+0x7c>
 810c176:	1c42      	adds	r2, r0, #1
 810c178:	d101      	bne.n	810c17e <__sflush_r+0x7a>
 810c17a:	682b      	ldr	r3, [r5, #0]
 810c17c:	b903      	cbnz	r3, 810c180 <__sflush_r+0x7c>
 810c17e:	6560      	str	r0, [r4, #84]	; 0x54
 810c180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c182:	602f      	str	r7, [r5, #0]
 810c184:	2900      	cmp	r1, #0
 810c186:	d0ca      	beq.n	810c11e <__sflush_r+0x1a>
 810c188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c18c:	4299      	cmp	r1, r3
 810c18e:	d002      	beq.n	810c196 <__sflush_r+0x92>
 810c190:	4628      	mov	r0, r5
 810c192:	f001 fa3f 	bl	810d614 <_free_r>
 810c196:	2000      	movs	r0, #0
 810c198:	6360      	str	r0, [r4, #52]	; 0x34
 810c19a:	e7c1      	b.n	810c120 <__sflush_r+0x1c>
 810c19c:	6a21      	ldr	r1, [r4, #32]
 810c19e:	2301      	movs	r3, #1
 810c1a0:	4628      	mov	r0, r5
 810c1a2:	47b0      	blx	r6
 810c1a4:	1c41      	adds	r1, r0, #1
 810c1a6:	d1c7      	bne.n	810c138 <__sflush_r+0x34>
 810c1a8:	682b      	ldr	r3, [r5, #0]
 810c1aa:	2b00      	cmp	r3, #0
 810c1ac:	d0c4      	beq.n	810c138 <__sflush_r+0x34>
 810c1ae:	2b1d      	cmp	r3, #29
 810c1b0:	d001      	beq.n	810c1b6 <__sflush_r+0xb2>
 810c1b2:	2b16      	cmp	r3, #22
 810c1b4:	d101      	bne.n	810c1ba <__sflush_r+0xb6>
 810c1b6:	602f      	str	r7, [r5, #0]
 810c1b8:	e7b1      	b.n	810c11e <__sflush_r+0x1a>
 810c1ba:	89a3      	ldrh	r3, [r4, #12]
 810c1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c1c0:	81a3      	strh	r3, [r4, #12]
 810c1c2:	e7ad      	b.n	810c120 <__sflush_r+0x1c>
 810c1c4:	690f      	ldr	r7, [r1, #16]
 810c1c6:	2f00      	cmp	r7, #0
 810c1c8:	d0a9      	beq.n	810c11e <__sflush_r+0x1a>
 810c1ca:	0793      	lsls	r3, r2, #30
 810c1cc:	680e      	ldr	r6, [r1, #0]
 810c1ce:	bf08      	it	eq
 810c1d0:	694b      	ldreq	r3, [r1, #20]
 810c1d2:	600f      	str	r7, [r1, #0]
 810c1d4:	bf18      	it	ne
 810c1d6:	2300      	movne	r3, #0
 810c1d8:	eba6 0807 	sub.w	r8, r6, r7
 810c1dc:	608b      	str	r3, [r1, #8]
 810c1de:	f1b8 0f00 	cmp.w	r8, #0
 810c1e2:	dd9c      	ble.n	810c11e <__sflush_r+0x1a>
 810c1e4:	6a21      	ldr	r1, [r4, #32]
 810c1e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c1e8:	4643      	mov	r3, r8
 810c1ea:	463a      	mov	r2, r7
 810c1ec:	4628      	mov	r0, r5
 810c1ee:	47b0      	blx	r6
 810c1f0:	2800      	cmp	r0, #0
 810c1f2:	dc06      	bgt.n	810c202 <__sflush_r+0xfe>
 810c1f4:	89a3      	ldrh	r3, [r4, #12]
 810c1f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c1fa:	81a3      	strh	r3, [r4, #12]
 810c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 810c200:	e78e      	b.n	810c120 <__sflush_r+0x1c>
 810c202:	4407      	add	r7, r0
 810c204:	eba8 0800 	sub.w	r8, r8, r0
 810c208:	e7e9      	b.n	810c1de <__sflush_r+0xda>
 810c20a:	bf00      	nop
 810c20c:	20400001 	.word	0x20400001

0810c210 <_fflush_r>:
 810c210:	b538      	push	{r3, r4, r5, lr}
 810c212:	690b      	ldr	r3, [r1, #16]
 810c214:	4605      	mov	r5, r0
 810c216:	460c      	mov	r4, r1
 810c218:	b913      	cbnz	r3, 810c220 <_fflush_r+0x10>
 810c21a:	2500      	movs	r5, #0
 810c21c:	4628      	mov	r0, r5
 810c21e:	bd38      	pop	{r3, r4, r5, pc}
 810c220:	b118      	cbz	r0, 810c22a <_fflush_r+0x1a>
 810c222:	6983      	ldr	r3, [r0, #24]
 810c224:	b90b      	cbnz	r3, 810c22a <_fflush_r+0x1a>
 810c226:	f000 f887 	bl	810c338 <__sinit>
 810c22a:	4b14      	ldr	r3, [pc, #80]	; (810c27c <_fflush_r+0x6c>)
 810c22c:	429c      	cmp	r4, r3
 810c22e:	d11b      	bne.n	810c268 <_fflush_r+0x58>
 810c230:	686c      	ldr	r4, [r5, #4]
 810c232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c236:	2b00      	cmp	r3, #0
 810c238:	d0ef      	beq.n	810c21a <_fflush_r+0xa>
 810c23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c23c:	07d0      	lsls	r0, r2, #31
 810c23e:	d404      	bmi.n	810c24a <_fflush_r+0x3a>
 810c240:	0599      	lsls	r1, r3, #22
 810c242:	d402      	bmi.n	810c24a <_fflush_r+0x3a>
 810c244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c246:	f000 fc88 	bl	810cb5a <__retarget_lock_acquire_recursive>
 810c24a:	4628      	mov	r0, r5
 810c24c:	4621      	mov	r1, r4
 810c24e:	f7ff ff59 	bl	810c104 <__sflush_r>
 810c252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c254:	07da      	lsls	r2, r3, #31
 810c256:	4605      	mov	r5, r0
 810c258:	d4e0      	bmi.n	810c21c <_fflush_r+0xc>
 810c25a:	89a3      	ldrh	r3, [r4, #12]
 810c25c:	059b      	lsls	r3, r3, #22
 810c25e:	d4dd      	bmi.n	810c21c <_fflush_r+0xc>
 810c260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c262:	f000 fc7b 	bl	810cb5c <__retarget_lock_release_recursive>
 810c266:	e7d9      	b.n	810c21c <_fflush_r+0xc>
 810c268:	4b05      	ldr	r3, [pc, #20]	; (810c280 <_fflush_r+0x70>)
 810c26a:	429c      	cmp	r4, r3
 810c26c:	d101      	bne.n	810c272 <_fflush_r+0x62>
 810c26e:	68ac      	ldr	r4, [r5, #8]
 810c270:	e7df      	b.n	810c232 <_fflush_r+0x22>
 810c272:	4b04      	ldr	r3, [pc, #16]	; (810c284 <_fflush_r+0x74>)
 810c274:	429c      	cmp	r4, r3
 810c276:	bf08      	it	eq
 810c278:	68ec      	ldreq	r4, [r5, #12]
 810c27a:	e7da      	b.n	810c232 <_fflush_r+0x22>
 810c27c:	0810e27c 	.word	0x0810e27c
 810c280:	0810e29c 	.word	0x0810e29c
 810c284:	0810e25c 	.word	0x0810e25c

0810c288 <std>:
 810c288:	2300      	movs	r3, #0
 810c28a:	b510      	push	{r4, lr}
 810c28c:	4604      	mov	r4, r0
 810c28e:	e9c0 3300 	strd	r3, r3, [r0]
 810c292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810c296:	6083      	str	r3, [r0, #8]
 810c298:	8181      	strh	r1, [r0, #12]
 810c29a:	6643      	str	r3, [r0, #100]	; 0x64
 810c29c:	81c2      	strh	r2, [r0, #14]
 810c29e:	6183      	str	r3, [r0, #24]
 810c2a0:	4619      	mov	r1, r3
 810c2a2:	2208      	movs	r2, #8
 810c2a4:	305c      	adds	r0, #92	; 0x5c
 810c2a6:	f7fd f951 	bl	810954c <memset>
 810c2aa:	4b05      	ldr	r3, [pc, #20]	; (810c2c0 <std+0x38>)
 810c2ac:	6263      	str	r3, [r4, #36]	; 0x24
 810c2ae:	4b05      	ldr	r3, [pc, #20]	; (810c2c4 <std+0x3c>)
 810c2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 810c2b2:	4b05      	ldr	r3, [pc, #20]	; (810c2c8 <std+0x40>)
 810c2b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 810c2b6:	4b05      	ldr	r3, [pc, #20]	; (810c2cc <std+0x44>)
 810c2b8:	6224      	str	r4, [r4, #32]
 810c2ba:	6323      	str	r3, [r4, #48]	; 0x30
 810c2bc:	bd10      	pop	{r4, pc}
 810c2be:	bf00      	nop
 810c2c0:	0810dc89 	.word	0x0810dc89
 810c2c4:	0810dcab 	.word	0x0810dcab
 810c2c8:	0810dce3 	.word	0x0810dce3
 810c2cc:	0810dd07 	.word	0x0810dd07

0810c2d0 <_cleanup_r>:
 810c2d0:	4901      	ldr	r1, [pc, #4]	; (810c2d8 <_cleanup_r+0x8>)
 810c2d2:	f000 b8af 	b.w	810c434 <_fwalk_reent>
 810c2d6:	bf00      	nop
 810c2d8:	0810c211 	.word	0x0810c211

0810c2dc <__sfmoreglue>:
 810c2dc:	b570      	push	{r4, r5, r6, lr}
 810c2de:	2268      	movs	r2, #104	; 0x68
 810c2e0:	1e4d      	subs	r5, r1, #1
 810c2e2:	4355      	muls	r5, r2
 810c2e4:	460e      	mov	r6, r1
 810c2e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810c2ea:	f7fd f96d 	bl	81095c8 <_malloc_r>
 810c2ee:	4604      	mov	r4, r0
 810c2f0:	b140      	cbz	r0, 810c304 <__sfmoreglue+0x28>
 810c2f2:	2100      	movs	r1, #0
 810c2f4:	e9c0 1600 	strd	r1, r6, [r0]
 810c2f8:	300c      	adds	r0, #12
 810c2fa:	60a0      	str	r0, [r4, #8]
 810c2fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810c300:	f7fd f924 	bl	810954c <memset>
 810c304:	4620      	mov	r0, r4
 810c306:	bd70      	pop	{r4, r5, r6, pc}

0810c308 <__sfp_lock_acquire>:
 810c308:	4801      	ldr	r0, [pc, #4]	; (810c310 <__sfp_lock_acquire+0x8>)
 810c30a:	f000 bc26 	b.w	810cb5a <__retarget_lock_acquire_recursive>
 810c30e:	bf00      	nop
 810c310:	10000531 	.word	0x10000531

0810c314 <__sfp_lock_release>:
 810c314:	4801      	ldr	r0, [pc, #4]	; (810c31c <__sfp_lock_release+0x8>)
 810c316:	f000 bc21 	b.w	810cb5c <__retarget_lock_release_recursive>
 810c31a:	bf00      	nop
 810c31c:	10000531 	.word	0x10000531

0810c320 <__sinit_lock_acquire>:
 810c320:	4801      	ldr	r0, [pc, #4]	; (810c328 <__sinit_lock_acquire+0x8>)
 810c322:	f000 bc1a 	b.w	810cb5a <__retarget_lock_acquire_recursive>
 810c326:	bf00      	nop
 810c328:	10000532 	.word	0x10000532

0810c32c <__sinit_lock_release>:
 810c32c:	4801      	ldr	r0, [pc, #4]	; (810c334 <__sinit_lock_release+0x8>)
 810c32e:	f000 bc15 	b.w	810cb5c <__retarget_lock_release_recursive>
 810c332:	bf00      	nop
 810c334:	10000532 	.word	0x10000532

0810c338 <__sinit>:
 810c338:	b510      	push	{r4, lr}
 810c33a:	4604      	mov	r4, r0
 810c33c:	f7ff fff0 	bl	810c320 <__sinit_lock_acquire>
 810c340:	69a3      	ldr	r3, [r4, #24]
 810c342:	b11b      	cbz	r3, 810c34c <__sinit+0x14>
 810c344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810c348:	f7ff bff0 	b.w	810c32c <__sinit_lock_release>
 810c34c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810c350:	6523      	str	r3, [r4, #80]	; 0x50
 810c352:	4b13      	ldr	r3, [pc, #76]	; (810c3a0 <__sinit+0x68>)
 810c354:	4a13      	ldr	r2, [pc, #76]	; (810c3a4 <__sinit+0x6c>)
 810c356:	681b      	ldr	r3, [r3, #0]
 810c358:	62a2      	str	r2, [r4, #40]	; 0x28
 810c35a:	42a3      	cmp	r3, r4
 810c35c:	bf04      	itt	eq
 810c35e:	2301      	moveq	r3, #1
 810c360:	61a3      	streq	r3, [r4, #24]
 810c362:	4620      	mov	r0, r4
 810c364:	f000 f820 	bl	810c3a8 <__sfp>
 810c368:	6060      	str	r0, [r4, #4]
 810c36a:	4620      	mov	r0, r4
 810c36c:	f000 f81c 	bl	810c3a8 <__sfp>
 810c370:	60a0      	str	r0, [r4, #8]
 810c372:	4620      	mov	r0, r4
 810c374:	f000 f818 	bl	810c3a8 <__sfp>
 810c378:	2200      	movs	r2, #0
 810c37a:	60e0      	str	r0, [r4, #12]
 810c37c:	2104      	movs	r1, #4
 810c37e:	6860      	ldr	r0, [r4, #4]
 810c380:	f7ff ff82 	bl	810c288 <std>
 810c384:	68a0      	ldr	r0, [r4, #8]
 810c386:	2201      	movs	r2, #1
 810c388:	2109      	movs	r1, #9
 810c38a:	f7ff ff7d 	bl	810c288 <std>
 810c38e:	68e0      	ldr	r0, [r4, #12]
 810c390:	2202      	movs	r2, #2
 810c392:	2112      	movs	r1, #18
 810c394:	f7ff ff78 	bl	810c288 <std>
 810c398:	2301      	movs	r3, #1
 810c39a:	61a3      	str	r3, [r4, #24]
 810c39c:	e7d2      	b.n	810c344 <__sinit+0xc>
 810c39e:	bf00      	nop
 810c3a0:	0810e038 	.word	0x0810e038
 810c3a4:	0810c2d1 	.word	0x0810c2d1

0810c3a8 <__sfp>:
 810c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c3aa:	4607      	mov	r7, r0
 810c3ac:	f7ff ffac 	bl	810c308 <__sfp_lock_acquire>
 810c3b0:	4b1e      	ldr	r3, [pc, #120]	; (810c42c <__sfp+0x84>)
 810c3b2:	681e      	ldr	r6, [r3, #0]
 810c3b4:	69b3      	ldr	r3, [r6, #24]
 810c3b6:	b913      	cbnz	r3, 810c3be <__sfp+0x16>
 810c3b8:	4630      	mov	r0, r6
 810c3ba:	f7ff ffbd 	bl	810c338 <__sinit>
 810c3be:	3648      	adds	r6, #72	; 0x48
 810c3c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810c3c4:	3b01      	subs	r3, #1
 810c3c6:	d503      	bpl.n	810c3d0 <__sfp+0x28>
 810c3c8:	6833      	ldr	r3, [r6, #0]
 810c3ca:	b30b      	cbz	r3, 810c410 <__sfp+0x68>
 810c3cc:	6836      	ldr	r6, [r6, #0]
 810c3ce:	e7f7      	b.n	810c3c0 <__sfp+0x18>
 810c3d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810c3d4:	b9d5      	cbnz	r5, 810c40c <__sfp+0x64>
 810c3d6:	4b16      	ldr	r3, [pc, #88]	; (810c430 <__sfp+0x88>)
 810c3d8:	60e3      	str	r3, [r4, #12]
 810c3da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810c3de:	6665      	str	r5, [r4, #100]	; 0x64
 810c3e0:	f000 fbba 	bl	810cb58 <__retarget_lock_init_recursive>
 810c3e4:	f7ff ff96 	bl	810c314 <__sfp_lock_release>
 810c3e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810c3ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810c3f0:	6025      	str	r5, [r4, #0]
 810c3f2:	61a5      	str	r5, [r4, #24]
 810c3f4:	2208      	movs	r2, #8
 810c3f6:	4629      	mov	r1, r5
 810c3f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810c3fc:	f7fd f8a6 	bl	810954c <memset>
 810c400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810c404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810c408:	4620      	mov	r0, r4
 810c40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c40c:	3468      	adds	r4, #104	; 0x68
 810c40e:	e7d9      	b.n	810c3c4 <__sfp+0x1c>
 810c410:	2104      	movs	r1, #4
 810c412:	4638      	mov	r0, r7
 810c414:	f7ff ff62 	bl	810c2dc <__sfmoreglue>
 810c418:	4604      	mov	r4, r0
 810c41a:	6030      	str	r0, [r6, #0]
 810c41c:	2800      	cmp	r0, #0
 810c41e:	d1d5      	bne.n	810c3cc <__sfp+0x24>
 810c420:	f7ff ff78 	bl	810c314 <__sfp_lock_release>
 810c424:	230c      	movs	r3, #12
 810c426:	603b      	str	r3, [r7, #0]
 810c428:	e7ee      	b.n	810c408 <__sfp+0x60>
 810c42a:	bf00      	nop
 810c42c:	0810e038 	.word	0x0810e038
 810c430:	ffff0001 	.word	0xffff0001

0810c434 <_fwalk_reent>:
 810c434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c438:	4606      	mov	r6, r0
 810c43a:	4688      	mov	r8, r1
 810c43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810c440:	2700      	movs	r7, #0
 810c442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810c446:	f1b9 0901 	subs.w	r9, r9, #1
 810c44a:	d505      	bpl.n	810c458 <_fwalk_reent+0x24>
 810c44c:	6824      	ldr	r4, [r4, #0]
 810c44e:	2c00      	cmp	r4, #0
 810c450:	d1f7      	bne.n	810c442 <_fwalk_reent+0xe>
 810c452:	4638      	mov	r0, r7
 810c454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c458:	89ab      	ldrh	r3, [r5, #12]
 810c45a:	2b01      	cmp	r3, #1
 810c45c:	d907      	bls.n	810c46e <_fwalk_reent+0x3a>
 810c45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810c462:	3301      	adds	r3, #1
 810c464:	d003      	beq.n	810c46e <_fwalk_reent+0x3a>
 810c466:	4629      	mov	r1, r5
 810c468:	4630      	mov	r0, r6
 810c46a:	47c0      	blx	r8
 810c46c:	4307      	orrs	r7, r0
 810c46e:	3568      	adds	r5, #104	; 0x68
 810c470:	e7e9      	b.n	810c446 <_fwalk_reent+0x12>

0810c472 <rshift>:
 810c472:	6903      	ldr	r3, [r0, #16]
 810c474:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810c478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c47c:	ea4f 1261 	mov.w	r2, r1, asr #5
 810c480:	f100 0414 	add.w	r4, r0, #20
 810c484:	dd45      	ble.n	810c512 <rshift+0xa0>
 810c486:	f011 011f 	ands.w	r1, r1, #31
 810c48a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810c48e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810c492:	d10c      	bne.n	810c4ae <rshift+0x3c>
 810c494:	f100 0710 	add.w	r7, r0, #16
 810c498:	4629      	mov	r1, r5
 810c49a:	42b1      	cmp	r1, r6
 810c49c:	d334      	bcc.n	810c508 <rshift+0x96>
 810c49e:	1a9b      	subs	r3, r3, r2
 810c4a0:	009b      	lsls	r3, r3, #2
 810c4a2:	1eea      	subs	r2, r5, #3
 810c4a4:	4296      	cmp	r6, r2
 810c4a6:	bf38      	it	cc
 810c4a8:	2300      	movcc	r3, #0
 810c4aa:	4423      	add	r3, r4
 810c4ac:	e015      	b.n	810c4da <rshift+0x68>
 810c4ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810c4b2:	f1c1 0820 	rsb	r8, r1, #32
 810c4b6:	40cf      	lsrs	r7, r1
 810c4b8:	f105 0e04 	add.w	lr, r5, #4
 810c4bc:	46a1      	mov	r9, r4
 810c4be:	4576      	cmp	r6, lr
 810c4c0:	46f4      	mov	ip, lr
 810c4c2:	d815      	bhi.n	810c4f0 <rshift+0x7e>
 810c4c4:	1a9a      	subs	r2, r3, r2
 810c4c6:	0092      	lsls	r2, r2, #2
 810c4c8:	3a04      	subs	r2, #4
 810c4ca:	3501      	adds	r5, #1
 810c4cc:	42ae      	cmp	r6, r5
 810c4ce:	bf38      	it	cc
 810c4d0:	2200      	movcc	r2, #0
 810c4d2:	18a3      	adds	r3, r4, r2
 810c4d4:	50a7      	str	r7, [r4, r2]
 810c4d6:	b107      	cbz	r7, 810c4da <rshift+0x68>
 810c4d8:	3304      	adds	r3, #4
 810c4da:	1b1a      	subs	r2, r3, r4
 810c4dc:	42a3      	cmp	r3, r4
 810c4de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810c4e2:	bf08      	it	eq
 810c4e4:	2300      	moveq	r3, #0
 810c4e6:	6102      	str	r2, [r0, #16]
 810c4e8:	bf08      	it	eq
 810c4ea:	6143      	streq	r3, [r0, #20]
 810c4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c4f0:	f8dc c000 	ldr.w	ip, [ip]
 810c4f4:	fa0c fc08 	lsl.w	ip, ip, r8
 810c4f8:	ea4c 0707 	orr.w	r7, ip, r7
 810c4fc:	f849 7b04 	str.w	r7, [r9], #4
 810c500:	f85e 7b04 	ldr.w	r7, [lr], #4
 810c504:	40cf      	lsrs	r7, r1
 810c506:	e7da      	b.n	810c4be <rshift+0x4c>
 810c508:	f851 cb04 	ldr.w	ip, [r1], #4
 810c50c:	f847 cf04 	str.w	ip, [r7, #4]!
 810c510:	e7c3      	b.n	810c49a <rshift+0x28>
 810c512:	4623      	mov	r3, r4
 810c514:	e7e1      	b.n	810c4da <rshift+0x68>

0810c516 <__hexdig_fun>:
 810c516:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810c51a:	2b09      	cmp	r3, #9
 810c51c:	d802      	bhi.n	810c524 <__hexdig_fun+0xe>
 810c51e:	3820      	subs	r0, #32
 810c520:	b2c0      	uxtb	r0, r0
 810c522:	4770      	bx	lr
 810c524:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810c528:	2b05      	cmp	r3, #5
 810c52a:	d801      	bhi.n	810c530 <__hexdig_fun+0x1a>
 810c52c:	3847      	subs	r0, #71	; 0x47
 810c52e:	e7f7      	b.n	810c520 <__hexdig_fun+0xa>
 810c530:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810c534:	2b05      	cmp	r3, #5
 810c536:	d801      	bhi.n	810c53c <__hexdig_fun+0x26>
 810c538:	3827      	subs	r0, #39	; 0x27
 810c53a:	e7f1      	b.n	810c520 <__hexdig_fun+0xa>
 810c53c:	2000      	movs	r0, #0
 810c53e:	4770      	bx	lr

0810c540 <__gethex>:
 810c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c544:	ed2d 8b02 	vpush	{d8}
 810c548:	b089      	sub	sp, #36	; 0x24
 810c54a:	ee08 0a10 	vmov	s16, r0
 810c54e:	9304      	str	r3, [sp, #16]
 810c550:	4bb4      	ldr	r3, [pc, #720]	; (810c824 <__gethex+0x2e4>)
 810c552:	681b      	ldr	r3, [r3, #0]
 810c554:	9301      	str	r3, [sp, #4]
 810c556:	4618      	mov	r0, r3
 810c558:	468b      	mov	fp, r1
 810c55a:	4690      	mov	r8, r2
 810c55c:	f7f3 fec0 	bl	81002e0 <strlen>
 810c560:	9b01      	ldr	r3, [sp, #4]
 810c562:	f8db 2000 	ldr.w	r2, [fp]
 810c566:	4403      	add	r3, r0
 810c568:	4682      	mov	sl, r0
 810c56a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810c56e:	9305      	str	r3, [sp, #20]
 810c570:	1c93      	adds	r3, r2, #2
 810c572:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810c576:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810c57a:	32fe      	adds	r2, #254	; 0xfe
 810c57c:	18d1      	adds	r1, r2, r3
 810c57e:	461f      	mov	r7, r3
 810c580:	f813 0b01 	ldrb.w	r0, [r3], #1
 810c584:	9100      	str	r1, [sp, #0]
 810c586:	2830      	cmp	r0, #48	; 0x30
 810c588:	d0f8      	beq.n	810c57c <__gethex+0x3c>
 810c58a:	f7ff ffc4 	bl	810c516 <__hexdig_fun>
 810c58e:	4604      	mov	r4, r0
 810c590:	2800      	cmp	r0, #0
 810c592:	d13a      	bne.n	810c60a <__gethex+0xca>
 810c594:	9901      	ldr	r1, [sp, #4]
 810c596:	4652      	mov	r2, sl
 810c598:	4638      	mov	r0, r7
 810c59a:	f001 fbb8 	bl	810dd0e <strncmp>
 810c59e:	4605      	mov	r5, r0
 810c5a0:	2800      	cmp	r0, #0
 810c5a2:	d168      	bne.n	810c676 <__gethex+0x136>
 810c5a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810c5a8:	eb07 060a 	add.w	r6, r7, sl
 810c5ac:	f7ff ffb3 	bl	810c516 <__hexdig_fun>
 810c5b0:	2800      	cmp	r0, #0
 810c5b2:	d062      	beq.n	810c67a <__gethex+0x13a>
 810c5b4:	4633      	mov	r3, r6
 810c5b6:	7818      	ldrb	r0, [r3, #0]
 810c5b8:	2830      	cmp	r0, #48	; 0x30
 810c5ba:	461f      	mov	r7, r3
 810c5bc:	f103 0301 	add.w	r3, r3, #1
 810c5c0:	d0f9      	beq.n	810c5b6 <__gethex+0x76>
 810c5c2:	f7ff ffa8 	bl	810c516 <__hexdig_fun>
 810c5c6:	2301      	movs	r3, #1
 810c5c8:	fab0 f480 	clz	r4, r0
 810c5cc:	0964      	lsrs	r4, r4, #5
 810c5ce:	4635      	mov	r5, r6
 810c5d0:	9300      	str	r3, [sp, #0]
 810c5d2:	463a      	mov	r2, r7
 810c5d4:	4616      	mov	r6, r2
 810c5d6:	3201      	adds	r2, #1
 810c5d8:	7830      	ldrb	r0, [r6, #0]
 810c5da:	f7ff ff9c 	bl	810c516 <__hexdig_fun>
 810c5de:	2800      	cmp	r0, #0
 810c5e0:	d1f8      	bne.n	810c5d4 <__gethex+0x94>
 810c5e2:	9901      	ldr	r1, [sp, #4]
 810c5e4:	4652      	mov	r2, sl
 810c5e6:	4630      	mov	r0, r6
 810c5e8:	f001 fb91 	bl	810dd0e <strncmp>
 810c5ec:	b980      	cbnz	r0, 810c610 <__gethex+0xd0>
 810c5ee:	b94d      	cbnz	r5, 810c604 <__gethex+0xc4>
 810c5f0:	eb06 050a 	add.w	r5, r6, sl
 810c5f4:	462a      	mov	r2, r5
 810c5f6:	4616      	mov	r6, r2
 810c5f8:	3201      	adds	r2, #1
 810c5fa:	7830      	ldrb	r0, [r6, #0]
 810c5fc:	f7ff ff8b 	bl	810c516 <__hexdig_fun>
 810c600:	2800      	cmp	r0, #0
 810c602:	d1f8      	bne.n	810c5f6 <__gethex+0xb6>
 810c604:	1bad      	subs	r5, r5, r6
 810c606:	00ad      	lsls	r5, r5, #2
 810c608:	e004      	b.n	810c614 <__gethex+0xd4>
 810c60a:	2400      	movs	r4, #0
 810c60c:	4625      	mov	r5, r4
 810c60e:	e7e0      	b.n	810c5d2 <__gethex+0x92>
 810c610:	2d00      	cmp	r5, #0
 810c612:	d1f7      	bne.n	810c604 <__gethex+0xc4>
 810c614:	7833      	ldrb	r3, [r6, #0]
 810c616:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810c61a:	2b50      	cmp	r3, #80	; 0x50
 810c61c:	d13b      	bne.n	810c696 <__gethex+0x156>
 810c61e:	7873      	ldrb	r3, [r6, #1]
 810c620:	2b2b      	cmp	r3, #43	; 0x2b
 810c622:	d02c      	beq.n	810c67e <__gethex+0x13e>
 810c624:	2b2d      	cmp	r3, #45	; 0x2d
 810c626:	d02e      	beq.n	810c686 <__gethex+0x146>
 810c628:	1c71      	adds	r1, r6, #1
 810c62a:	f04f 0900 	mov.w	r9, #0
 810c62e:	7808      	ldrb	r0, [r1, #0]
 810c630:	f7ff ff71 	bl	810c516 <__hexdig_fun>
 810c634:	1e43      	subs	r3, r0, #1
 810c636:	b2db      	uxtb	r3, r3
 810c638:	2b18      	cmp	r3, #24
 810c63a:	d82c      	bhi.n	810c696 <__gethex+0x156>
 810c63c:	f1a0 0210 	sub.w	r2, r0, #16
 810c640:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810c644:	f7ff ff67 	bl	810c516 <__hexdig_fun>
 810c648:	1e43      	subs	r3, r0, #1
 810c64a:	b2db      	uxtb	r3, r3
 810c64c:	2b18      	cmp	r3, #24
 810c64e:	d91d      	bls.n	810c68c <__gethex+0x14c>
 810c650:	f1b9 0f00 	cmp.w	r9, #0
 810c654:	d000      	beq.n	810c658 <__gethex+0x118>
 810c656:	4252      	negs	r2, r2
 810c658:	4415      	add	r5, r2
 810c65a:	f8cb 1000 	str.w	r1, [fp]
 810c65e:	b1e4      	cbz	r4, 810c69a <__gethex+0x15a>
 810c660:	9b00      	ldr	r3, [sp, #0]
 810c662:	2b00      	cmp	r3, #0
 810c664:	bf14      	ite	ne
 810c666:	2700      	movne	r7, #0
 810c668:	2706      	moveq	r7, #6
 810c66a:	4638      	mov	r0, r7
 810c66c:	b009      	add	sp, #36	; 0x24
 810c66e:	ecbd 8b02 	vpop	{d8}
 810c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c676:	463e      	mov	r6, r7
 810c678:	4625      	mov	r5, r4
 810c67a:	2401      	movs	r4, #1
 810c67c:	e7ca      	b.n	810c614 <__gethex+0xd4>
 810c67e:	f04f 0900 	mov.w	r9, #0
 810c682:	1cb1      	adds	r1, r6, #2
 810c684:	e7d3      	b.n	810c62e <__gethex+0xee>
 810c686:	f04f 0901 	mov.w	r9, #1
 810c68a:	e7fa      	b.n	810c682 <__gethex+0x142>
 810c68c:	230a      	movs	r3, #10
 810c68e:	fb03 0202 	mla	r2, r3, r2, r0
 810c692:	3a10      	subs	r2, #16
 810c694:	e7d4      	b.n	810c640 <__gethex+0x100>
 810c696:	4631      	mov	r1, r6
 810c698:	e7df      	b.n	810c65a <__gethex+0x11a>
 810c69a:	1bf3      	subs	r3, r6, r7
 810c69c:	3b01      	subs	r3, #1
 810c69e:	4621      	mov	r1, r4
 810c6a0:	2b07      	cmp	r3, #7
 810c6a2:	dc0b      	bgt.n	810c6bc <__gethex+0x17c>
 810c6a4:	ee18 0a10 	vmov	r0, s16
 810c6a8:	f000 faf2 	bl	810cc90 <_Balloc>
 810c6ac:	4604      	mov	r4, r0
 810c6ae:	b940      	cbnz	r0, 810c6c2 <__gethex+0x182>
 810c6b0:	4b5d      	ldr	r3, [pc, #372]	; (810c828 <__gethex+0x2e8>)
 810c6b2:	4602      	mov	r2, r0
 810c6b4:	21de      	movs	r1, #222	; 0xde
 810c6b6:	485d      	ldr	r0, [pc, #372]	; (810c82c <__gethex+0x2ec>)
 810c6b8:	f001 fb5c 	bl	810dd74 <__assert_func>
 810c6bc:	3101      	adds	r1, #1
 810c6be:	105b      	asrs	r3, r3, #1
 810c6c0:	e7ee      	b.n	810c6a0 <__gethex+0x160>
 810c6c2:	f100 0914 	add.w	r9, r0, #20
 810c6c6:	f04f 0b00 	mov.w	fp, #0
 810c6ca:	f1ca 0301 	rsb	r3, sl, #1
 810c6ce:	f8cd 9008 	str.w	r9, [sp, #8]
 810c6d2:	f8cd b000 	str.w	fp, [sp]
 810c6d6:	9306      	str	r3, [sp, #24]
 810c6d8:	42b7      	cmp	r7, r6
 810c6da:	d340      	bcc.n	810c75e <__gethex+0x21e>
 810c6dc:	9802      	ldr	r0, [sp, #8]
 810c6de:	9b00      	ldr	r3, [sp, #0]
 810c6e0:	f840 3b04 	str.w	r3, [r0], #4
 810c6e4:	eba0 0009 	sub.w	r0, r0, r9
 810c6e8:	1080      	asrs	r0, r0, #2
 810c6ea:	0146      	lsls	r6, r0, #5
 810c6ec:	6120      	str	r0, [r4, #16]
 810c6ee:	4618      	mov	r0, r3
 810c6f0:	f000 fbc0 	bl	810ce74 <__hi0bits>
 810c6f4:	1a30      	subs	r0, r6, r0
 810c6f6:	f8d8 6000 	ldr.w	r6, [r8]
 810c6fa:	42b0      	cmp	r0, r6
 810c6fc:	dd63      	ble.n	810c7c6 <__gethex+0x286>
 810c6fe:	1b87      	subs	r7, r0, r6
 810c700:	4639      	mov	r1, r7
 810c702:	4620      	mov	r0, r4
 810c704:	f000 ff64 	bl	810d5d0 <__any_on>
 810c708:	4682      	mov	sl, r0
 810c70a:	b1a8      	cbz	r0, 810c738 <__gethex+0x1f8>
 810c70c:	1e7b      	subs	r3, r7, #1
 810c70e:	1159      	asrs	r1, r3, #5
 810c710:	f003 021f 	and.w	r2, r3, #31
 810c714:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810c718:	f04f 0a01 	mov.w	sl, #1
 810c71c:	fa0a f202 	lsl.w	r2, sl, r2
 810c720:	420a      	tst	r2, r1
 810c722:	d009      	beq.n	810c738 <__gethex+0x1f8>
 810c724:	4553      	cmp	r3, sl
 810c726:	dd05      	ble.n	810c734 <__gethex+0x1f4>
 810c728:	1eb9      	subs	r1, r7, #2
 810c72a:	4620      	mov	r0, r4
 810c72c:	f000 ff50 	bl	810d5d0 <__any_on>
 810c730:	2800      	cmp	r0, #0
 810c732:	d145      	bne.n	810c7c0 <__gethex+0x280>
 810c734:	f04f 0a02 	mov.w	sl, #2
 810c738:	4639      	mov	r1, r7
 810c73a:	4620      	mov	r0, r4
 810c73c:	f7ff fe99 	bl	810c472 <rshift>
 810c740:	443d      	add	r5, r7
 810c742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c746:	42ab      	cmp	r3, r5
 810c748:	da4c      	bge.n	810c7e4 <__gethex+0x2a4>
 810c74a:	ee18 0a10 	vmov	r0, s16
 810c74e:	4621      	mov	r1, r4
 810c750:	f000 fade 	bl	810cd10 <_Bfree>
 810c754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c756:	2300      	movs	r3, #0
 810c758:	6013      	str	r3, [r2, #0]
 810c75a:	27a3      	movs	r7, #163	; 0xa3
 810c75c:	e785      	b.n	810c66a <__gethex+0x12a>
 810c75e:	1e73      	subs	r3, r6, #1
 810c760:	9a05      	ldr	r2, [sp, #20]
 810c762:	9303      	str	r3, [sp, #12]
 810c764:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810c768:	4293      	cmp	r3, r2
 810c76a:	d019      	beq.n	810c7a0 <__gethex+0x260>
 810c76c:	f1bb 0f20 	cmp.w	fp, #32
 810c770:	d107      	bne.n	810c782 <__gethex+0x242>
 810c772:	9b02      	ldr	r3, [sp, #8]
 810c774:	9a00      	ldr	r2, [sp, #0]
 810c776:	f843 2b04 	str.w	r2, [r3], #4
 810c77a:	9302      	str	r3, [sp, #8]
 810c77c:	2300      	movs	r3, #0
 810c77e:	9300      	str	r3, [sp, #0]
 810c780:	469b      	mov	fp, r3
 810c782:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810c786:	f7ff fec6 	bl	810c516 <__hexdig_fun>
 810c78a:	9b00      	ldr	r3, [sp, #0]
 810c78c:	f000 000f 	and.w	r0, r0, #15
 810c790:	fa00 f00b 	lsl.w	r0, r0, fp
 810c794:	4303      	orrs	r3, r0
 810c796:	9300      	str	r3, [sp, #0]
 810c798:	f10b 0b04 	add.w	fp, fp, #4
 810c79c:	9b03      	ldr	r3, [sp, #12]
 810c79e:	e00d      	b.n	810c7bc <__gethex+0x27c>
 810c7a0:	9b03      	ldr	r3, [sp, #12]
 810c7a2:	9a06      	ldr	r2, [sp, #24]
 810c7a4:	4413      	add	r3, r2
 810c7a6:	42bb      	cmp	r3, r7
 810c7a8:	d3e0      	bcc.n	810c76c <__gethex+0x22c>
 810c7aa:	4618      	mov	r0, r3
 810c7ac:	9901      	ldr	r1, [sp, #4]
 810c7ae:	9307      	str	r3, [sp, #28]
 810c7b0:	4652      	mov	r2, sl
 810c7b2:	f001 faac 	bl	810dd0e <strncmp>
 810c7b6:	9b07      	ldr	r3, [sp, #28]
 810c7b8:	2800      	cmp	r0, #0
 810c7ba:	d1d7      	bne.n	810c76c <__gethex+0x22c>
 810c7bc:	461e      	mov	r6, r3
 810c7be:	e78b      	b.n	810c6d8 <__gethex+0x198>
 810c7c0:	f04f 0a03 	mov.w	sl, #3
 810c7c4:	e7b8      	b.n	810c738 <__gethex+0x1f8>
 810c7c6:	da0a      	bge.n	810c7de <__gethex+0x29e>
 810c7c8:	1a37      	subs	r7, r6, r0
 810c7ca:	4621      	mov	r1, r4
 810c7cc:	ee18 0a10 	vmov	r0, s16
 810c7d0:	463a      	mov	r2, r7
 810c7d2:	f000 fcb9 	bl	810d148 <__lshift>
 810c7d6:	1bed      	subs	r5, r5, r7
 810c7d8:	4604      	mov	r4, r0
 810c7da:	f100 0914 	add.w	r9, r0, #20
 810c7de:	f04f 0a00 	mov.w	sl, #0
 810c7e2:	e7ae      	b.n	810c742 <__gethex+0x202>
 810c7e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810c7e8:	42a8      	cmp	r0, r5
 810c7ea:	dd72      	ble.n	810c8d2 <__gethex+0x392>
 810c7ec:	1b45      	subs	r5, r0, r5
 810c7ee:	42ae      	cmp	r6, r5
 810c7f0:	dc36      	bgt.n	810c860 <__gethex+0x320>
 810c7f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c7f6:	2b02      	cmp	r3, #2
 810c7f8:	d02a      	beq.n	810c850 <__gethex+0x310>
 810c7fa:	2b03      	cmp	r3, #3
 810c7fc:	d02c      	beq.n	810c858 <__gethex+0x318>
 810c7fe:	2b01      	cmp	r3, #1
 810c800:	d11c      	bne.n	810c83c <__gethex+0x2fc>
 810c802:	42ae      	cmp	r6, r5
 810c804:	d11a      	bne.n	810c83c <__gethex+0x2fc>
 810c806:	2e01      	cmp	r6, #1
 810c808:	d112      	bne.n	810c830 <__gethex+0x2f0>
 810c80a:	9a04      	ldr	r2, [sp, #16]
 810c80c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810c810:	6013      	str	r3, [r2, #0]
 810c812:	2301      	movs	r3, #1
 810c814:	6123      	str	r3, [r4, #16]
 810c816:	f8c9 3000 	str.w	r3, [r9]
 810c81a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c81c:	2762      	movs	r7, #98	; 0x62
 810c81e:	601c      	str	r4, [r3, #0]
 810c820:	e723      	b.n	810c66a <__gethex+0x12a>
 810c822:	bf00      	nop
 810c824:	0810e324 	.word	0x0810e324
 810c828:	0810e248 	.word	0x0810e248
 810c82c:	0810e2bc 	.word	0x0810e2bc
 810c830:	1e71      	subs	r1, r6, #1
 810c832:	4620      	mov	r0, r4
 810c834:	f000 fecc 	bl	810d5d0 <__any_on>
 810c838:	2800      	cmp	r0, #0
 810c83a:	d1e6      	bne.n	810c80a <__gethex+0x2ca>
 810c83c:	ee18 0a10 	vmov	r0, s16
 810c840:	4621      	mov	r1, r4
 810c842:	f000 fa65 	bl	810cd10 <_Bfree>
 810c846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c848:	2300      	movs	r3, #0
 810c84a:	6013      	str	r3, [r2, #0]
 810c84c:	2750      	movs	r7, #80	; 0x50
 810c84e:	e70c      	b.n	810c66a <__gethex+0x12a>
 810c850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c852:	2b00      	cmp	r3, #0
 810c854:	d1f2      	bne.n	810c83c <__gethex+0x2fc>
 810c856:	e7d8      	b.n	810c80a <__gethex+0x2ca>
 810c858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c85a:	2b00      	cmp	r3, #0
 810c85c:	d1d5      	bne.n	810c80a <__gethex+0x2ca>
 810c85e:	e7ed      	b.n	810c83c <__gethex+0x2fc>
 810c860:	1e6f      	subs	r7, r5, #1
 810c862:	f1ba 0f00 	cmp.w	sl, #0
 810c866:	d131      	bne.n	810c8cc <__gethex+0x38c>
 810c868:	b127      	cbz	r7, 810c874 <__gethex+0x334>
 810c86a:	4639      	mov	r1, r7
 810c86c:	4620      	mov	r0, r4
 810c86e:	f000 feaf 	bl	810d5d0 <__any_on>
 810c872:	4682      	mov	sl, r0
 810c874:	117b      	asrs	r3, r7, #5
 810c876:	2101      	movs	r1, #1
 810c878:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810c87c:	f007 071f 	and.w	r7, r7, #31
 810c880:	fa01 f707 	lsl.w	r7, r1, r7
 810c884:	421f      	tst	r7, r3
 810c886:	4629      	mov	r1, r5
 810c888:	4620      	mov	r0, r4
 810c88a:	bf18      	it	ne
 810c88c:	f04a 0a02 	orrne.w	sl, sl, #2
 810c890:	1b76      	subs	r6, r6, r5
 810c892:	f7ff fdee 	bl	810c472 <rshift>
 810c896:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810c89a:	2702      	movs	r7, #2
 810c89c:	f1ba 0f00 	cmp.w	sl, #0
 810c8a0:	d048      	beq.n	810c934 <__gethex+0x3f4>
 810c8a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c8a6:	2b02      	cmp	r3, #2
 810c8a8:	d015      	beq.n	810c8d6 <__gethex+0x396>
 810c8aa:	2b03      	cmp	r3, #3
 810c8ac:	d017      	beq.n	810c8de <__gethex+0x39e>
 810c8ae:	2b01      	cmp	r3, #1
 810c8b0:	d109      	bne.n	810c8c6 <__gethex+0x386>
 810c8b2:	f01a 0f02 	tst.w	sl, #2
 810c8b6:	d006      	beq.n	810c8c6 <__gethex+0x386>
 810c8b8:	f8d9 0000 	ldr.w	r0, [r9]
 810c8bc:	ea4a 0a00 	orr.w	sl, sl, r0
 810c8c0:	f01a 0f01 	tst.w	sl, #1
 810c8c4:	d10e      	bne.n	810c8e4 <__gethex+0x3a4>
 810c8c6:	f047 0710 	orr.w	r7, r7, #16
 810c8ca:	e033      	b.n	810c934 <__gethex+0x3f4>
 810c8cc:	f04f 0a01 	mov.w	sl, #1
 810c8d0:	e7d0      	b.n	810c874 <__gethex+0x334>
 810c8d2:	2701      	movs	r7, #1
 810c8d4:	e7e2      	b.n	810c89c <__gethex+0x35c>
 810c8d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8d8:	f1c3 0301 	rsb	r3, r3, #1
 810c8dc:	9315      	str	r3, [sp, #84]	; 0x54
 810c8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8e0:	2b00      	cmp	r3, #0
 810c8e2:	d0f0      	beq.n	810c8c6 <__gethex+0x386>
 810c8e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810c8e8:	f104 0314 	add.w	r3, r4, #20
 810c8ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810c8f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810c8f4:	f04f 0c00 	mov.w	ip, #0
 810c8f8:	4618      	mov	r0, r3
 810c8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 810c8fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 810c902:	d01c      	beq.n	810c93e <__gethex+0x3fe>
 810c904:	3201      	adds	r2, #1
 810c906:	6002      	str	r2, [r0, #0]
 810c908:	2f02      	cmp	r7, #2
 810c90a:	f104 0314 	add.w	r3, r4, #20
 810c90e:	d13f      	bne.n	810c990 <__gethex+0x450>
 810c910:	f8d8 2000 	ldr.w	r2, [r8]
 810c914:	3a01      	subs	r2, #1
 810c916:	42b2      	cmp	r2, r6
 810c918:	d10a      	bne.n	810c930 <__gethex+0x3f0>
 810c91a:	1171      	asrs	r1, r6, #5
 810c91c:	2201      	movs	r2, #1
 810c91e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810c922:	f006 061f 	and.w	r6, r6, #31
 810c926:	fa02 f606 	lsl.w	r6, r2, r6
 810c92a:	421e      	tst	r6, r3
 810c92c:	bf18      	it	ne
 810c92e:	4617      	movne	r7, r2
 810c930:	f047 0720 	orr.w	r7, r7, #32
 810c934:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c936:	601c      	str	r4, [r3, #0]
 810c938:	9b04      	ldr	r3, [sp, #16]
 810c93a:	601d      	str	r5, [r3, #0]
 810c93c:	e695      	b.n	810c66a <__gethex+0x12a>
 810c93e:	4299      	cmp	r1, r3
 810c940:	f843 cc04 	str.w	ip, [r3, #-4]
 810c944:	d8d8      	bhi.n	810c8f8 <__gethex+0x3b8>
 810c946:	68a3      	ldr	r3, [r4, #8]
 810c948:	459b      	cmp	fp, r3
 810c94a:	db19      	blt.n	810c980 <__gethex+0x440>
 810c94c:	6861      	ldr	r1, [r4, #4]
 810c94e:	ee18 0a10 	vmov	r0, s16
 810c952:	3101      	adds	r1, #1
 810c954:	f000 f99c 	bl	810cc90 <_Balloc>
 810c958:	4681      	mov	r9, r0
 810c95a:	b918      	cbnz	r0, 810c964 <__gethex+0x424>
 810c95c:	4b1a      	ldr	r3, [pc, #104]	; (810c9c8 <__gethex+0x488>)
 810c95e:	4602      	mov	r2, r0
 810c960:	2184      	movs	r1, #132	; 0x84
 810c962:	e6a8      	b.n	810c6b6 <__gethex+0x176>
 810c964:	6922      	ldr	r2, [r4, #16]
 810c966:	3202      	adds	r2, #2
 810c968:	f104 010c 	add.w	r1, r4, #12
 810c96c:	0092      	lsls	r2, r2, #2
 810c96e:	300c      	adds	r0, #12
 810c970:	f000 f974 	bl	810cc5c <memcpy>
 810c974:	4621      	mov	r1, r4
 810c976:	ee18 0a10 	vmov	r0, s16
 810c97a:	f000 f9c9 	bl	810cd10 <_Bfree>
 810c97e:	464c      	mov	r4, r9
 810c980:	6923      	ldr	r3, [r4, #16]
 810c982:	1c5a      	adds	r2, r3, #1
 810c984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810c988:	6122      	str	r2, [r4, #16]
 810c98a:	2201      	movs	r2, #1
 810c98c:	615a      	str	r2, [r3, #20]
 810c98e:	e7bb      	b.n	810c908 <__gethex+0x3c8>
 810c990:	6922      	ldr	r2, [r4, #16]
 810c992:	455a      	cmp	r2, fp
 810c994:	dd0b      	ble.n	810c9ae <__gethex+0x46e>
 810c996:	2101      	movs	r1, #1
 810c998:	4620      	mov	r0, r4
 810c99a:	f7ff fd6a 	bl	810c472 <rshift>
 810c99e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c9a2:	3501      	adds	r5, #1
 810c9a4:	42ab      	cmp	r3, r5
 810c9a6:	f6ff aed0 	blt.w	810c74a <__gethex+0x20a>
 810c9aa:	2701      	movs	r7, #1
 810c9ac:	e7c0      	b.n	810c930 <__gethex+0x3f0>
 810c9ae:	f016 061f 	ands.w	r6, r6, #31
 810c9b2:	d0fa      	beq.n	810c9aa <__gethex+0x46a>
 810c9b4:	4453      	add	r3, sl
 810c9b6:	f1c6 0620 	rsb	r6, r6, #32
 810c9ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810c9be:	f000 fa59 	bl	810ce74 <__hi0bits>
 810c9c2:	42b0      	cmp	r0, r6
 810c9c4:	dbe7      	blt.n	810c996 <__gethex+0x456>
 810c9c6:	e7f0      	b.n	810c9aa <__gethex+0x46a>
 810c9c8:	0810e248 	.word	0x0810e248

0810c9cc <L_shift>:
 810c9cc:	f1c2 0208 	rsb	r2, r2, #8
 810c9d0:	0092      	lsls	r2, r2, #2
 810c9d2:	b570      	push	{r4, r5, r6, lr}
 810c9d4:	f1c2 0620 	rsb	r6, r2, #32
 810c9d8:	6843      	ldr	r3, [r0, #4]
 810c9da:	6804      	ldr	r4, [r0, #0]
 810c9dc:	fa03 f506 	lsl.w	r5, r3, r6
 810c9e0:	432c      	orrs	r4, r5
 810c9e2:	40d3      	lsrs	r3, r2
 810c9e4:	6004      	str	r4, [r0, #0]
 810c9e6:	f840 3f04 	str.w	r3, [r0, #4]!
 810c9ea:	4288      	cmp	r0, r1
 810c9ec:	d3f4      	bcc.n	810c9d8 <L_shift+0xc>
 810c9ee:	bd70      	pop	{r4, r5, r6, pc}

0810c9f0 <__match>:
 810c9f0:	b530      	push	{r4, r5, lr}
 810c9f2:	6803      	ldr	r3, [r0, #0]
 810c9f4:	3301      	adds	r3, #1
 810c9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c9fa:	b914      	cbnz	r4, 810ca02 <__match+0x12>
 810c9fc:	6003      	str	r3, [r0, #0]
 810c9fe:	2001      	movs	r0, #1
 810ca00:	bd30      	pop	{r4, r5, pc}
 810ca02:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ca06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ca0a:	2d19      	cmp	r5, #25
 810ca0c:	bf98      	it	ls
 810ca0e:	3220      	addls	r2, #32
 810ca10:	42a2      	cmp	r2, r4
 810ca12:	d0f0      	beq.n	810c9f6 <__match+0x6>
 810ca14:	2000      	movs	r0, #0
 810ca16:	e7f3      	b.n	810ca00 <__match+0x10>

0810ca18 <__hexnan>:
 810ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ca1c:	680b      	ldr	r3, [r1, #0]
 810ca1e:	115e      	asrs	r6, r3, #5
 810ca20:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ca24:	f013 031f 	ands.w	r3, r3, #31
 810ca28:	b087      	sub	sp, #28
 810ca2a:	bf18      	it	ne
 810ca2c:	3604      	addne	r6, #4
 810ca2e:	2500      	movs	r5, #0
 810ca30:	1f37      	subs	r7, r6, #4
 810ca32:	4690      	mov	r8, r2
 810ca34:	6802      	ldr	r2, [r0, #0]
 810ca36:	9301      	str	r3, [sp, #4]
 810ca38:	4682      	mov	sl, r0
 810ca3a:	f846 5c04 	str.w	r5, [r6, #-4]
 810ca3e:	46b9      	mov	r9, r7
 810ca40:	463c      	mov	r4, r7
 810ca42:	9502      	str	r5, [sp, #8]
 810ca44:	46ab      	mov	fp, r5
 810ca46:	7851      	ldrb	r1, [r2, #1]
 810ca48:	1c53      	adds	r3, r2, #1
 810ca4a:	9303      	str	r3, [sp, #12]
 810ca4c:	b341      	cbz	r1, 810caa0 <__hexnan+0x88>
 810ca4e:	4608      	mov	r0, r1
 810ca50:	9205      	str	r2, [sp, #20]
 810ca52:	9104      	str	r1, [sp, #16]
 810ca54:	f7ff fd5f 	bl	810c516 <__hexdig_fun>
 810ca58:	2800      	cmp	r0, #0
 810ca5a:	d14f      	bne.n	810cafc <__hexnan+0xe4>
 810ca5c:	9904      	ldr	r1, [sp, #16]
 810ca5e:	9a05      	ldr	r2, [sp, #20]
 810ca60:	2920      	cmp	r1, #32
 810ca62:	d818      	bhi.n	810ca96 <__hexnan+0x7e>
 810ca64:	9b02      	ldr	r3, [sp, #8]
 810ca66:	459b      	cmp	fp, r3
 810ca68:	dd13      	ble.n	810ca92 <__hexnan+0x7a>
 810ca6a:	454c      	cmp	r4, r9
 810ca6c:	d206      	bcs.n	810ca7c <__hexnan+0x64>
 810ca6e:	2d07      	cmp	r5, #7
 810ca70:	dc04      	bgt.n	810ca7c <__hexnan+0x64>
 810ca72:	462a      	mov	r2, r5
 810ca74:	4649      	mov	r1, r9
 810ca76:	4620      	mov	r0, r4
 810ca78:	f7ff ffa8 	bl	810c9cc <L_shift>
 810ca7c:	4544      	cmp	r4, r8
 810ca7e:	d950      	bls.n	810cb22 <__hexnan+0x10a>
 810ca80:	2300      	movs	r3, #0
 810ca82:	f1a4 0904 	sub.w	r9, r4, #4
 810ca86:	f844 3c04 	str.w	r3, [r4, #-4]
 810ca8a:	f8cd b008 	str.w	fp, [sp, #8]
 810ca8e:	464c      	mov	r4, r9
 810ca90:	461d      	mov	r5, r3
 810ca92:	9a03      	ldr	r2, [sp, #12]
 810ca94:	e7d7      	b.n	810ca46 <__hexnan+0x2e>
 810ca96:	2929      	cmp	r1, #41	; 0x29
 810ca98:	d156      	bne.n	810cb48 <__hexnan+0x130>
 810ca9a:	3202      	adds	r2, #2
 810ca9c:	f8ca 2000 	str.w	r2, [sl]
 810caa0:	f1bb 0f00 	cmp.w	fp, #0
 810caa4:	d050      	beq.n	810cb48 <__hexnan+0x130>
 810caa6:	454c      	cmp	r4, r9
 810caa8:	d206      	bcs.n	810cab8 <__hexnan+0xa0>
 810caaa:	2d07      	cmp	r5, #7
 810caac:	dc04      	bgt.n	810cab8 <__hexnan+0xa0>
 810caae:	462a      	mov	r2, r5
 810cab0:	4649      	mov	r1, r9
 810cab2:	4620      	mov	r0, r4
 810cab4:	f7ff ff8a 	bl	810c9cc <L_shift>
 810cab8:	4544      	cmp	r4, r8
 810caba:	d934      	bls.n	810cb26 <__hexnan+0x10e>
 810cabc:	f1a8 0204 	sub.w	r2, r8, #4
 810cac0:	4623      	mov	r3, r4
 810cac2:	f853 1b04 	ldr.w	r1, [r3], #4
 810cac6:	f842 1f04 	str.w	r1, [r2, #4]!
 810caca:	429f      	cmp	r7, r3
 810cacc:	d2f9      	bcs.n	810cac2 <__hexnan+0xaa>
 810cace:	1b3b      	subs	r3, r7, r4
 810cad0:	f023 0303 	bic.w	r3, r3, #3
 810cad4:	3304      	adds	r3, #4
 810cad6:	3401      	adds	r4, #1
 810cad8:	3e03      	subs	r6, #3
 810cada:	42b4      	cmp	r4, r6
 810cadc:	bf88      	it	hi
 810cade:	2304      	movhi	r3, #4
 810cae0:	4443      	add	r3, r8
 810cae2:	2200      	movs	r2, #0
 810cae4:	f843 2b04 	str.w	r2, [r3], #4
 810cae8:	429f      	cmp	r7, r3
 810caea:	d2fb      	bcs.n	810cae4 <__hexnan+0xcc>
 810caec:	683b      	ldr	r3, [r7, #0]
 810caee:	b91b      	cbnz	r3, 810caf8 <__hexnan+0xe0>
 810caf0:	4547      	cmp	r7, r8
 810caf2:	d127      	bne.n	810cb44 <__hexnan+0x12c>
 810caf4:	2301      	movs	r3, #1
 810caf6:	603b      	str	r3, [r7, #0]
 810caf8:	2005      	movs	r0, #5
 810cafa:	e026      	b.n	810cb4a <__hexnan+0x132>
 810cafc:	3501      	adds	r5, #1
 810cafe:	2d08      	cmp	r5, #8
 810cb00:	f10b 0b01 	add.w	fp, fp, #1
 810cb04:	dd06      	ble.n	810cb14 <__hexnan+0xfc>
 810cb06:	4544      	cmp	r4, r8
 810cb08:	d9c3      	bls.n	810ca92 <__hexnan+0x7a>
 810cb0a:	2300      	movs	r3, #0
 810cb0c:	f844 3c04 	str.w	r3, [r4, #-4]
 810cb10:	2501      	movs	r5, #1
 810cb12:	3c04      	subs	r4, #4
 810cb14:	6822      	ldr	r2, [r4, #0]
 810cb16:	f000 000f 	and.w	r0, r0, #15
 810cb1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810cb1e:	6022      	str	r2, [r4, #0]
 810cb20:	e7b7      	b.n	810ca92 <__hexnan+0x7a>
 810cb22:	2508      	movs	r5, #8
 810cb24:	e7b5      	b.n	810ca92 <__hexnan+0x7a>
 810cb26:	9b01      	ldr	r3, [sp, #4]
 810cb28:	2b00      	cmp	r3, #0
 810cb2a:	d0df      	beq.n	810caec <__hexnan+0xd4>
 810cb2c:	f04f 32ff 	mov.w	r2, #4294967295
 810cb30:	f1c3 0320 	rsb	r3, r3, #32
 810cb34:	fa22 f303 	lsr.w	r3, r2, r3
 810cb38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810cb3c:	401a      	ands	r2, r3
 810cb3e:	f846 2c04 	str.w	r2, [r6, #-4]
 810cb42:	e7d3      	b.n	810caec <__hexnan+0xd4>
 810cb44:	3f04      	subs	r7, #4
 810cb46:	e7d1      	b.n	810caec <__hexnan+0xd4>
 810cb48:	2004      	movs	r0, #4
 810cb4a:	b007      	add	sp, #28
 810cb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cb50 <_localeconv_r>:
 810cb50:	4800      	ldr	r0, [pc, #0]	; (810cb54 <_localeconv_r+0x4>)
 810cb52:	4770      	bx	lr
 810cb54:	1000016c 	.word	0x1000016c

0810cb58 <__retarget_lock_init_recursive>:
 810cb58:	4770      	bx	lr

0810cb5a <__retarget_lock_acquire_recursive>:
 810cb5a:	4770      	bx	lr

0810cb5c <__retarget_lock_release_recursive>:
 810cb5c:	4770      	bx	lr

0810cb5e <__swhatbuf_r>:
 810cb5e:	b570      	push	{r4, r5, r6, lr}
 810cb60:	460e      	mov	r6, r1
 810cb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cb66:	2900      	cmp	r1, #0
 810cb68:	b096      	sub	sp, #88	; 0x58
 810cb6a:	4614      	mov	r4, r2
 810cb6c:	461d      	mov	r5, r3
 810cb6e:	da08      	bge.n	810cb82 <__swhatbuf_r+0x24>
 810cb70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810cb74:	2200      	movs	r2, #0
 810cb76:	602a      	str	r2, [r5, #0]
 810cb78:	061a      	lsls	r2, r3, #24
 810cb7a:	d410      	bmi.n	810cb9e <__swhatbuf_r+0x40>
 810cb7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810cb80:	e00e      	b.n	810cba0 <__swhatbuf_r+0x42>
 810cb82:	466a      	mov	r2, sp
 810cb84:	f001 f936 	bl	810ddf4 <_fstat_r>
 810cb88:	2800      	cmp	r0, #0
 810cb8a:	dbf1      	blt.n	810cb70 <__swhatbuf_r+0x12>
 810cb8c:	9a01      	ldr	r2, [sp, #4]
 810cb8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810cb92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810cb96:	425a      	negs	r2, r3
 810cb98:	415a      	adcs	r2, r3
 810cb9a:	602a      	str	r2, [r5, #0]
 810cb9c:	e7ee      	b.n	810cb7c <__swhatbuf_r+0x1e>
 810cb9e:	2340      	movs	r3, #64	; 0x40
 810cba0:	2000      	movs	r0, #0
 810cba2:	6023      	str	r3, [r4, #0]
 810cba4:	b016      	add	sp, #88	; 0x58
 810cba6:	bd70      	pop	{r4, r5, r6, pc}

0810cba8 <__smakebuf_r>:
 810cba8:	898b      	ldrh	r3, [r1, #12]
 810cbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810cbac:	079d      	lsls	r5, r3, #30
 810cbae:	4606      	mov	r6, r0
 810cbb0:	460c      	mov	r4, r1
 810cbb2:	d507      	bpl.n	810cbc4 <__smakebuf_r+0x1c>
 810cbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810cbb8:	6023      	str	r3, [r4, #0]
 810cbba:	6123      	str	r3, [r4, #16]
 810cbbc:	2301      	movs	r3, #1
 810cbbe:	6163      	str	r3, [r4, #20]
 810cbc0:	b002      	add	sp, #8
 810cbc2:	bd70      	pop	{r4, r5, r6, pc}
 810cbc4:	ab01      	add	r3, sp, #4
 810cbc6:	466a      	mov	r2, sp
 810cbc8:	f7ff ffc9 	bl	810cb5e <__swhatbuf_r>
 810cbcc:	9900      	ldr	r1, [sp, #0]
 810cbce:	4605      	mov	r5, r0
 810cbd0:	4630      	mov	r0, r6
 810cbd2:	f7fc fcf9 	bl	81095c8 <_malloc_r>
 810cbd6:	b948      	cbnz	r0, 810cbec <__smakebuf_r+0x44>
 810cbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810cbdc:	059a      	lsls	r2, r3, #22
 810cbde:	d4ef      	bmi.n	810cbc0 <__smakebuf_r+0x18>
 810cbe0:	f023 0303 	bic.w	r3, r3, #3
 810cbe4:	f043 0302 	orr.w	r3, r3, #2
 810cbe8:	81a3      	strh	r3, [r4, #12]
 810cbea:	e7e3      	b.n	810cbb4 <__smakebuf_r+0xc>
 810cbec:	4b0d      	ldr	r3, [pc, #52]	; (810cc24 <__smakebuf_r+0x7c>)
 810cbee:	62b3      	str	r3, [r6, #40]	; 0x28
 810cbf0:	89a3      	ldrh	r3, [r4, #12]
 810cbf2:	6020      	str	r0, [r4, #0]
 810cbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810cbf8:	81a3      	strh	r3, [r4, #12]
 810cbfa:	9b00      	ldr	r3, [sp, #0]
 810cbfc:	6163      	str	r3, [r4, #20]
 810cbfe:	9b01      	ldr	r3, [sp, #4]
 810cc00:	6120      	str	r0, [r4, #16]
 810cc02:	b15b      	cbz	r3, 810cc1c <__smakebuf_r+0x74>
 810cc04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810cc08:	4630      	mov	r0, r6
 810cc0a:	f001 f905 	bl	810de18 <_isatty_r>
 810cc0e:	b128      	cbz	r0, 810cc1c <__smakebuf_r+0x74>
 810cc10:	89a3      	ldrh	r3, [r4, #12]
 810cc12:	f023 0303 	bic.w	r3, r3, #3
 810cc16:	f043 0301 	orr.w	r3, r3, #1
 810cc1a:	81a3      	strh	r3, [r4, #12]
 810cc1c:	89a0      	ldrh	r0, [r4, #12]
 810cc1e:	4305      	orrs	r5, r0
 810cc20:	81a5      	strh	r5, [r4, #12]
 810cc22:	e7cd      	b.n	810cbc0 <__smakebuf_r+0x18>
 810cc24:	0810c2d1 	.word	0x0810c2d1

0810cc28 <malloc>:
 810cc28:	4b02      	ldr	r3, [pc, #8]	; (810cc34 <malloc+0xc>)
 810cc2a:	4601      	mov	r1, r0
 810cc2c:	6818      	ldr	r0, [r3, #0]
 810cc2e:	f7fc bccb 	b.w	81095c8 <_malloc_r>
 810cc32:	bf00      	nop
 810cc34:	10000014 	.word	0x10000014

0810cc38 <__ascii_mbtowc>:
 810cc38:	b082      	sub	sp, #8
 810cc3a:	b901      	cbnz	r1, 810cc3e <__ascii_mbtowc+0x6>
 810cc3c:	a901      	add	r1, sp, #4
 810cc3e:	b142      	cbz	r2, 810cc52 <__ascii_mbtowc+0x1a>
 810cc40:	b14b      	cbz	r3, 810cc56 <__ascii_mbtowc+0x1e>
 810cc42:	7813      	ldrb	r3, [r2, #0]
 810cc44:	600b      	str	r3, [r1, #0]
 810cc46:	7812      	ldrb	r2, [r2, #0]
 810cc48:	1e10      	subs	r0, r2, #0
 810cc4a:	bf18      	it	ne
 810cc4c:	2001      	movne	r0, #1
 810cc4e:	b002      	add	sp, #8
 810cc50:	4770      	bx	lr
 810cc52:	4610      	mov	r0, r2
 810cc54:	e7fb      	b.n	810cc4e <__ascii_mbtowc+0x16>
 810cc56:	f06f 0001 	mvn.w	r0, #1
 810cc5a:	e7f8      	b.n	810cc4e <__ascii_mbtowc+0x16>

0810cc5c <memcpy>:
 810cc5c:	440a      	add	r2, r1
 810cc5e:	4291      	cmp	r1, r2
 810cc60:	f100 33ff 	add.w	r3, r0, #4294967295
 810cc64:	d100      	bne.n	810cc68 <memcpy+0xc>
 810cc66:	4770      	bx	lr
 810cc68:	b510      	push	{r4, lr}
 810cc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810cc6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 810cc72:	4291      	cmp	r1, r2
 810cc74:	d1f9      	bne.n	810cc6a <memcpy+0xe>
 810cc76:	bd10      	pop	{r4, pc}

0810cc78 <__malloc_lock>:
 810cc78:	4801      	ldr	r0, [pc, #4]	; (810cc80 <__malloc_lock+0x8>)
 810cc7a:	f7ff bf6e 	b.w	810cb5a <__retarget_lock_acquire_recursive>
 810cc7e:	bf00      	nop
 810cc80:	10000530 	.word	0x10000530

0810cc84 <__malloc_unlock>:
 810cc84:	4801      	ldr	r0, [pc, #4]	; (810cc8c <__malloc_unlock+0x8>)
 810cc86:	f7ff bf69 	b.w	810cb5c <__retarget_lock_release_recursive>
 810cc8a:	bf00      	nop
 810cc8c:	10000530 	.word	0x10000530

0810cc90 <_Balloc>:
 810cc90:	b570      	push	{r4, r5, r6, lr}
 810cc92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810cc94:	4604      	mov	r4, r0
 810cc96:	460d      	mov	r5, r1
 810cc98:	b976      	cbnz	r6, 810ccb8 <_Balloc+0x28>
 810cc9a:	2010      	movs	r0, #16
 810cc9c:	f7ff ffc4 	bl	810cc28 <malloc>
 810cca0:	4602      	mov	r2, r0
 810cca2:	6260      	str	r0, [r4, #36]	; 0x24
 810cca4:	b920      	cbnz	r0, 810ccb0 <_Balloc+0x20>
 810cca6:	4b18      	ldr	r3, [pc, #96]	; (810cd08 <_Balloc+0x78>)
 810cca8:	4818      	ldr	r0, [pc, #96]	; (810cd0c <_Balloc+0x7c>)
 810ccaa:	2166      	movs	r1, #102	; 0x66
 810ccac:	f001 f862 	bl	810dd74 <__assert_func>
 810ccb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ccb4:	6006      	str	r6, [r0, #0]
 810ccb6:	60c6      	str	r6, [r0, #12]
 810ccb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810ccba:	68f3      	ldr	r3, [r6, #12]
 810ccbc:	b183      	cbz	r3, 810cce0 <_Balloc+0x50>
 810ccbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ccc0:	68db      	ldr	r3, [r3, #12]
 810ccc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810ccc6:	b9b8      	cbnz	r0, 810ccf8 <_Balloc+0x68>
 810ccc8:	2101      	movs	r1, #1
 810ccca:	fa01 f605 	lsl.w	r6, r1, r5
 810ccce:	1d72      	adds	r2, r6, #5
 810ccd0:	0092      	lsls	r2, r2, #2
 810ccd2:	4620      	mov	r0, r4
 810ccd4:	f7fc fc42 	bl	810955c <_calloc_r>
 810ccd8:	b160      	cbz	r0, 810ccf4 <_Balloc+0x64>
 810ccda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810ccde:	e00e      	b.n	810ccfe <_Balloc+0x6e>
 810cce0:	2221      	movs	r2, #33	; 0x21
 810cce2:	2104      	movs	r1, #4
 810cce4:	4620      	mov	r0, r4
 810cce6:	f7fc fc39 	bl	810955c <_calloc_r>
 810ccea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ccec:	60f0      	str	r0, [r6, #12]
 810ccee:	68db      	ldr	r3, [r3, #12]
 810ccf0:	2b00      	cmp	r3, #0
 810ccf2:	d1e4      	bne.n	810ccbe <_Balloc+0x2e>
 810ccf4:	2000      	movs	r0, #0
 810ccf6:	bd70      	pop	{r4, r5, r6, pc}
 810ccf8:	6802      	ldr	r2, [r0, #0]
 810ccfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810ccfe:	2300      	movs	r3, #0
 810cd00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810cd04:	e7f7      	b.n	810ccf6 <_Balloc+0x66>
 810cd06:	bf00      	nop
 810cd08:	0810e1d6 	.word	0x0810e1d6
 810cd0c:	0810e338 	.word	0x0810e338

0810cd10 <_Bfree>:
 810cd10:	b570      	push	{r4, r5, r6, lr}
 810cd12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810cd14:	4605      	mov	r5, r0
 810cd16:	460c      	mov	r4, r1
 810cd18:	b976      	cbnz	r6, 810cd38 <_Bfree+0x28>
 810cd1a:	2010      	movs	r0, #16
 810cd1c:	f7ff ff84 	bl	810cc28 <malloc>
 810cd20:	4602      	mov	r2, r0
 810cd22:	6268      	str	r0, [r5, #36]	; 0x24
 810cd24:	b920      	cbnz	r0, 810cd30 <_Bfree+0x20>
 810cd26:	4b09      	ldr	r3, [pc, #36]	; (810cd4c <_Bfree+0x3c>)
 810cd28:	4809      	ldr	r0, [pc, #36]	; (810cd50 <_Bfree+0x40>)
 810cd2a:	218a      	movs	r1, #138	; 0x8a
 810cd2c:	f001 f822 	bl	810dd74 <__assert_func>
 810cd30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810cd34:	6006      	str	r6, [r0, #0]
 810cd36:	60c6      	str	r6, [r0, #12]
 810cd38:	b13c      	cbz	r4, 810cd4a <_Bfree+0x3a>
 810cd3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810cd3c:	6862      	ldr	r2, [r4, #4]
 810cd3e:	68db      	ldr	r3, [r3, #12]
 810cd40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810cd44:	6021      	str	r1, [r4, #0]
 810cd46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810cd4a:	bd70      	pop	{r4, r5, r6, pc}
 810cd4c:	0810e1d6 	.word	0x0810e1d6
 810cd50:	0810e338 	.word	0x0810e338

0810cd54 <__multadd>:
 810cd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cd58:	690d      	ldr	r5, [r1, #16]
 810cd5a:	4607      	mov	r7, r0
 810cd5c:	460c      	mov	r4, r1
 810cd5e:	461e      	mov	r6, r3
 810cd60:	f101 0c14 	add.w	ip, r1, #20
 810cd64:	2000      	movs	r0, #0
 810cd66:	f8dc 3000 	ldr.w	r3, [ip]
 810cd6a:	b299      	uxth	r1, r3
 810cd6c:	fb02 6101 	mla	r1, r2, r1, r6
 810cd70:	0c1e      	lsrs	r6, r3, #16
 810cd72:	0c0b      	lsrs	r3, r1, #16
 810cd74:	fb02 3306 	mla	r3, r2, r6, r3
 810cd78:	b289      	uxth	r1, r1
 810cd7a:	3001      	adds	r0, #1
 810cd7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810cd80:	4285      	cmp	r5, r0
 810cd82:	f84c 1b04 	str.w	r1, [ip], #4
 810cd86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810cd8a:	dcec      	bgt.n	810cd66 <__multadd+0x12>
 810cd8c:	b30e      	cbz	r6, 810cdd2 <__multadd+0x7e>
 810cd8e:	68a3      	ldr	r3, [r4, #8]
 810cd90:	42ab      	cmp	r3, r5
 810cd92:	dc19      	bgt.n	810cdc8 <__multadd+0x74>
 810cd94:	6861      	ldr	r1, [r4, #4]
 810cd96:	4638      	mov	r0, r7
 810cd98:	3101      	adds	r1, #1
 810cd9a:	f7ff ff79 	bl	810cc90 <_Balloc>
 810cd9e:	4680      	mov	r8, r0
 810cda0:	b928      	cbnz	r0, 810cdae <__multadd+0x5a>
 810cda2:	4602      	mov	r2, r0
 810cda4:	4b0c      	ldr	r3, [pc, #48]	; (810cdd8 <__multadd+0x84>)
 810cda6:	480d      	ldr	r0, [pc, #52]	; (810cddc <__multadd+0x88>)
 810cda8:	21b5      	movs	r1, #181	; 0xb5
 810cdaa:	f000 ffe3 	bl	810dd74 <__assert_func>
 810cdae:	6922      	ldr	r2, [r4, #16]
 810cdb0:	3202      	adds	r2, #2
 810cdb2:	f104 010c 	add.w	r1, r4, #12
 810cdb6:	0092      	lsls	r2, r2, #2
 810cdb8:	300c      	adds	r0, #12
 810cdba:	f7ff ff4f 	bl	810cc5c <memcpy>
 810cdbe:	4621      	mov	r1, r4
 810cdc0:	4638      	mov	r0, r7
 810cdc2:	f7ff ffa5 	bl	810cd10 <_Bfree>
 810cdc6:	4644      	mov	r4, r8
 810cdc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810cdcc:	3501      	adds	r5, #1
 810cdce:	615e      	str	r6, [r3, #20]
 810cdd0:	6125      	str	r5, [r4, #16]
 810cdd2:	4620      	mov	r0, r4
 810cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cdd8:	0810e248 	.word	0x0810e248
 810cddc:	0810e338 	.word	0x0810e338

0810cde0 <__s2b>:
 810cde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cde4:	460c      	mov	r4, r1
 810cde6:	4615      	mov	r5, r2
 810cde8:	461f      	mov	r7, r3
 810cdea:	2209      	movs	r2, #9
 810cdec:	3308      	adds	r3, #8
 810cdee:	4606      	mov	r6, r0
 810cdf0:	fb93 f3f2 	sdiv	r3, r3, r2
 810cdf4:	2100      	movs	r1, #0
 810cdf6:	2201      	movs	r2, #1
 810cdf8:	429a      	cmp	r2, r3
 810cdfa:	db09      	blt.n	810ce10 <__s2b+0x30>
 810cdfc:	4630      	mov	r0, r6
 810cdfe:	f7ff ff47 	bl	810cc90 <_Balloc>
 810ce02:	b940      	cbnz	r0, 810ce16 <__s2b+0x36>
 810ce04:	4602      	mov	r2, r0
 810ce06:	4b19      	ldr	r3, [pc, #100]	; (810ce6c <__s2b+0x8c>)
 810ce08:	4819      	ldr	r0, [pc, #100]	; (810ce70 <__s2b+0x90>)
 810ce0a:	21ce      	movs	r1, #206	; 0xce
 810ce0c:	f000 ffb2 	bl	810dd74 <__assert_func>
 810ce10:	0052      	lsls	r2, r2, #1
 810ce12:	3101      	adds	r1, #1
 810ce14:	e7f0      	b.n	810cdf8 <__s2b+0x18>
 810ce16:	9b08      	ldr	r3, [sp, #32]
 810ce18:	6143      	str	r3, [r0, #20]
 810ce1a:	2d09      	cmp	r5, #9
 810ce1c:	f04f 0301 	mov.w	r3, #1
 810ce20:	6103      	str	r3, [r0, #16]
 810ce22:	dd16      	ble.n	810ce52 <__s2b+0x72>
 810ce24:	f104 0909 	add.w	r9, r4, #9
 810ce28:	46c8      	mov	r8, r9
 810ce2a:	442c      	add	r4, r5
 810ce2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ce30:	4601      	mov	r1, r0
 810ce32:	3b30      	subs	r3, #48	; 0x30
 810ce34:	220a      	movs	r2, #10
 810ce36:	4630      	mov	r0, r6
 810ce38:	f7ff ff8c 	bl	810cd54 <__multadd>
 810ce3c:	45a0      	cmp	r8, r4
 810ce3e:	d1f5      	bne.n	810ce2c <__s2b+0x4c>
 810ce40:	f1a5 0408 	sub.w	r4, r5, #8
 810ce44:	444c      	add	r4, r9
 810ce46:	1b2d      	subs	r5, r5, r4
 810ce48:	1963      	adds	r3, r4, r5
 810ce4a:	42bb      	cmp	r3, r7
 810ce4c:	db04      	blt.n	810ce58 <__s2b+0x78>
 810ce4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ce52:	340a      	adds	r4, #10
 810ce54:	2509      	movs	r5, #9
 810ce56:	e7f6      	b.n	810ce46 <__s2b+0x66>
 810ce58:	f814 3b01 	ldrb.w	r3, [r4], #1
 810ce5c:	4601      	mov	r1, r0
 810ce5e:	3b30      	subs	r3, #48	; 0x30
 810ce60:	220a      	movs	r2, #10
 810ce62:	4630      	mov	r0, r6
 810ce64:	f7ff ff76 	bl	810cd54 <__multadd>
 810ce68:	e7ee      	b.n	810ce48 <__s2b+0x68>
 810ce6a:	bf00      	nop
 810ce6c:	0810e248 	.word	0x0810e248
 810ce70:	0810e338 	.word	0x0810e338

0810ce74 <__hi0bits>:
 810ce74:	0c03      	lsrs	r3, r0, #16
 810ce76:	041b      	lsls	r3, r3, #16
 810ce78:	b9d3      	cbnz	r3, 810ceb0 <__hi0bits+0x3c>
 810ce7a:	0400      	lsls	r0, r0, #16
 810ce7c:	2310      	movs	r3, #16
 810ce7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810ce82:	bf04      	itt	eq
 810ce84:	0200      	lsleq	r0, r0, #8
 810ce86:	3308      	addeq	r3, #8
 810ce88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810ce8c:	bf04      	itt	eq
 810ce8e:	0100      	lsleq	r0, r0, #4
 810ce90:	3304      	addeq	r3, #4
 810ce92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ce96:	bf04      	itt	eq
 810ce98:	0080      	lsleq	r0, r0, #2
 810ce9a:	3302      	addeq	r3, #2
 810ce9c:	2800      	cmp	r0, #0
 810ce9e:	db05      	blt.n	810ceac <__hi0bits+0x38>
 810cea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810cea4:	f103 0301 	add.w	r3, r3, #1
 810cea8:	bf08      	it	eq
 810ceaa:	2320      	moveq	r3, #32
 810ceac:	4618      	mov	r0, r3
 810ceae:	4770      	bx	lr
 810ceb0:	2300      	movs	r3, #0
 810ceb2:	e7e4      	b.n	810ce7e <__hi0bits+0xa>

0810ceb4 <__lo0bits>:
 810ceb4:	6803      	ldr	r3, [r0, #0]
 810ceb6:	f013 0207 	ands.w	r2, r3, #7
 810ceba:	4601      	mov	r1, r0
 810cebc:	d00b      	beq.n	810ced6 <__lo0bits+0x22>
 810cebe:	07da      	lsls	r2, r3, #31
 810cec0:	d423      	bmi.n	810cf0a <__lo0bits+0x56>
 810cec2:	0798      	lsls	r0, r3, #30
 810cec4:	bf49      	itett	mi
 810cec6:	085b      	lsrmi	r3, r3, #1
 810cec8:	089b      	lsrpl	r3, r3, #2
 810ceca:	2001      	movmi	r0, #1
 810cecc:	600b      	strmi	r3, [r1, #0]
 810cece:	bf5c      	itt	pl
 810ced0:	600b      	strpl	r3, [r1, #0]
 810ced2:	2002      	movpl	r0, #2
 810ced4:	4770      	bx	lr
 810ced6:	b298      	uxth	r0, r3
 810ced8:	b9a8      	cbnz	r0, 810cf06 <__lo0bits+0x52>
 810ceda:	0c1b      	lsrs	r3, r3, #16
 810cedc:	2010      	movs	r0, #16
 810cede:	b2da      	uxtb	r2, r3
 810cee0:	b90a      	cbnz	r2, 810cee6 <__lo0bits+0x32>
 810cee2:	3008      	adds	r0, #8
 810cee4:	0a1b      	lsrs	r3, r3, #8
 810cee6:	071a      	lsls	r2, r3, #28
 810cee8:	bf04      	itt	eq
 810ceea:	091b      	lsreq	r3, r3, #4
 810ceec:	3004      	addeq	r0, #4
 810ceee:	079a      	lsls	r2, r3, #30
 810cef0:	bf04      	itt	eq
 810cef2:	089b      	lsreq	r3, r3, #2
 810cef4:	3002      	addeq	r0, #2
 810cef6:	07da      	lsls	r2, r3, #31
 810cef8:	d403      	bmi.n	810cf02 <__lo0bits+0x4e>
 810cefa:	085b      	lsrs	r3, r3, #1
 810cefc:	f100 0001 	add.w	r0, r0, #1
 810cf00:	d005      	beq.n	810cf0e <__lo0bits+0x5a>
 810cf02:	600b      	str	r3, [r1, #0]
 810cf04:	4770      	bx	lr
 810cf06:	4610      	mov	r0, r2
 810cf08:	e7e9      	b.n	810cede <__lo0bits+0x2a>
 810cf0a:	2000      	movs	r0, #0
 810cf0c:	4770      	bx	lr
 810cf0e:	2020      	movs	r0, #32
 810cf10:	4770      	bx	lr
	...

0810cf14 <__i2b>:
 810cf14:	b510      	push	{r4, lr}
 810cf16:	460c      	mov	r4, r1
 810cf18:	2101      	movs	r1, #1
 810cf1a:	f7ff feb9 	bl	810cc90 <_Balloc>
 810cf1e:	4602      	mov	r2, r0
 810cf20:	b928      	cbnz	r0, 810cf2e <__i2b+0x1a>
 810cf22:	4b05      	ldr	r3, [pc, #20]	; (810cf38 <__i2b+0x24>)
 810cf24:	4805      	ldr	r0, [pc, #20]	; (810cf3c <__i2b+0x28>)
 810cf26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810cf2a:	f000 ff23 	bl	810dd74 <__assert_func>
 810cf2e:	2301      	movs	r3, #1
 810cf30:	6144      	str	r4, [r0, #20]
 810cf32:	6103      	str	r3, [r0, #16]
 810cf34:	bd10      	pop	{r4, pc}
 810cf36:	bf00      	nop
 810cf38:	0810e248 	.word	0x0810e248
 810cf3c:	0810e338 	.word	0x0810e338

0810cf40 <__multiply>:
 810cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf44:	4691      	mov	r9, r2
 810cf46:	690a      	ldr	r2, [r1, #16]
 810cf48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cf4c:	429a      	cmp	r2, r3
 810cf4e:	bfb8      	it	lt
 810cf50:	460b      	movlt	r3, r1
 810cf52:	460c      	mov	r4, r1
 810cf54:	bfbc      	itt	lt
 810cf56:	464c      	movlt	r4, r9
 810cf58:	4699      	movlt	r9, r3
 810cf5a:	6927      	ldr	r7, [r4, #16]
 810cf5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810cf60:	68a3      	ldr	r3, [r4, #8]
 810cf62:	6861      	ldr	r1, [r4, #4]
 810cf64:	eb07 060a 	add.w	r6, r7, sl
 810cf68:	42b3      	cmp	r3, r6
 810cf6a:	b085      	sub	sp, #20
 810cf6c:	bfb8      	it	lt
 810cf6e:	3101      	addlt	r1, #1
 810cf70:	f7ff fe8e 	bl	810cc90 <_Balloc>
 810cf74:	b930      	cbnz	r0, 810cf84 <__multiply+0x44>
 810cf76:	4602      	mov	r2, r0
 810cf78:	4b44      	ldr	r3, [pc, #272]	; (810d08c <__multiply+0x14c>)
 810cf7a:	4845      	ldr	r0, [pc, #276]	; (810d090 <__multiply+0x150>)
 810cf7c:	f240 115d 	movw	r1, #349	; 0x15d
 810cf80:	f000 fef8 	bl	810dd74 <__assert_func>
 810cf84:	f100 0514 	add.w	r5, r0, #20
 810cf88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810cf8c:	462b      	mov	r3, r5
 810cf8e:	2200      	movs	r2, #0
 810cf90:	4543      	cmp	r3, r8
 810cf92:	d321      	bcc.n	810cfd8 <__multiply+0x98>
 810cf94:	f104 0314 	add.w	r3, r4, #20
 810cf98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810cf9c:	f109 0314 	add.w	r3, r9, #20
 810cfa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810cfa4:	9202      	str	r2, [sp, #8]
 810cfa6:	1b3a      	subs	r2, r7, r4
 810cfa8:	3a15      	subs	r2, #21
 810cfaa:	f022 0203 	bic.w	r2, r2, #3
 810cfae:	3204      	adds	r2, #4
 810cfb0:	f104 0115 	add.w	r1, r4, #21
 810cfb4:	428f      	cmp	r7, r1
 810cfb6:	bf38      	it	cc
 810cfb8:	2204      	movcc	r2, #4
 810cfba:	9201      	str	r2, [sp, #4]
 810cfbc:	9a02      	ldr	r2, [sp, #8]
 810cfbe:	9303      	str	r3, [sp, #12]
 810cfc0:	429a      	cmp	r2, r3
 810cfc2:	d80c      	bhi.n	810cfde <__multiply+0x9e>
 810cfc4:	2e00      	cmp	r6, #0
 810cfc6:	dd03      	ble.n	810cfd0 <__multiply+0x90>
 810cfc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810cfcc:	2b00      	cmp	r3, #0
 810cfce:	d05a      	beq.n	810d086 <__multiply+0x146>
 810cfd0:	6106      	str	r6, [r0, #16]
 810cfd2:	b005      	add	sp, #20
 810cfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cfd8:	f843 2b04 	str.w	r2, [r3], #4
 810cfdc:	e7d8      	b.n	810cf90 <__multiply+0x50>
 810cfde:	f8b3 a000 	ldrh.w	sl, [r3]
 810cfe2:	f1ba 0f00 	cmp.w	sl, #0
 810cfe6:	d024      	beq.n	810d032 <__multiply+0xf2>
 810cfe8:	f104 0e14 	add.w	lr, r4, #20
 810cfec:	46a9      	mov	r9, r5
 810cfee:	f04f 0c00 	mov.w	ip, #0
 810cff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 810cff6:	f8d9 1000 	ldr.w	r1, [r9]
 810cffa:	fa1f fb82 	uxth.w	fp, r2
 810cffe:	b289      	uxth	r1, r1
 810d000:	fb0a 110b 	mla	r1, sl, fp, r1
 810d004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810d008:	f8d9 2000 	ldr.w	r2, [r9]
 810d00c:	4461      	add	r1, ip
 810d00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810d012:	fb0a c20b 	mla	r2, sl, fp, ip
 810d016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810d01a:	b289      	uxth	r1, r1
 810d01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810d020:	4577      	cmp	r7, lr
 810d022:	f849 1b04 	str.w	r1, [r9], #4
 810d026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810d02a:	d8e2      	bhi.n	810cff2 <__multiply+0xb2>
 810d02c:	9a01      	ldr	r2, [sp, #4]
 810d02e:	f845 c002 	str.w	ip, [r5, r2]
 810d032:	9a03      	ldr	r2, [sp, #12]
 810d034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810d038:	3304      	adds	r3, #4
 810d03a:	f1b9 0f00 	cmp.w	r9, #0
 810d03e:	d020      	beq.n	810d082 <__multiply+0x142>
 810d040:	6829      	ldr	r1, [r5, #0]
 810d042:	f104 0c14 	add.w	ip, r4, #20
 810d046:	46ae      	mov	lr, r5
 810d048:	f04f 0a00 	mov.w	sl, #0
 810d04c:	f8bc b000 	ldrh.w	fp, [ip]
 810d050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810d054:	fb09 220b 	mla	r2, r9, fp, r2
 810d058:	4492      	add	sl, r2
 810d05a:	b289      	uxth	r1, r1
 810d05c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810d060:	f84e 1b04 	str.w	r1, [lr], #4
 810d064:	f85c 2b04 	ldr.w	r2, [ip], #4
 810d068:	f8be 1000 	ldrh.w	r1, [lr]
 810d06c:	0c12      	lsrs	r2, r2, #16
 810d06e:	fb09 1102 	mla	r1, r9, r2, r1
 810d072:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810d076:	4567      	cmp	r7, ip
 810d078:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810d07c:	d8e6      	bhi.n	810d04c <__multiply+0x10c>
 810d07e:	9a01      	ldr	r2, [sp, #4]
 810d080:	50a9      	str	r1, [r5, r2]
 810d082:	3504      	adds	r5, #4
 810d084:	e79a      	b.n	810cfbc <__multiply+0x7c>
 810d086:	3e01      	subs	r6, #1
 810d088:	e79c      	b.n	810cfc4 <__multiply+0x84>
 810d08a:	bf00      	nop
 810d08c:	0810e248 	.word	0x0810e248
 810d090:	0810e338 	.word	0x0810e338

0810d094 <__pow5mult>:
 810d094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d098:	4615      	mov	r5, r2
 810d09a:	f012 0203 	ands.w	r2, r2, #3
 810d09e:	4606      	mov	r6, r0
 810d0a0:	460f      	mov	r7, r1
 810d0a2:	d007      	beq.n	810d0b4 <__pow5mult+0x20>
 810d0a4:	4c25      	ldr	r4, [pc, #148]	; (810d13c <__pow5mult+0xa8>)
 810d0a6:	3a01      	subs	r2, #1
 810d0a8:	2300      	movs	r3, #0
 810d0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810d0ae:	f7ff fe51 	bl	810cd54 <__multadd>
 810d0b2:	4607      	mov	r7, r0
 810d0b4:	10ad      	asrs	r5, r5, #2
 810d0b6:	d03d      	beq.n	810d134 <__pow5mult+0xa0>
 810d0b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810d0ba:	b97c      	cbnz	r4, 810d0dc <__pow5mult+0x48>
 810d0bc:	2010      	movs	r0, #16
 810d0be:	f7ff fdb3 	bl	810cc28 <malloc>
 810d0c2:	4602      	mov	r2, r0
 810d0c4:	6270      	str	r0, [r6, #36]	; 0x24
 810d0c6:	b928      	cbnz	r0, 810d0d4 <__pow5mult+0x40>
 810d0c8:	4b1d      	ldr	r3, [pc, #116]	; (810d140 <__pow5mult+0xac>)
 810d0ca:	481e      	ldr	r0, [pc, #120]	; (810d144 <__pow5mult+0xb0>)
 810d0cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810d0d0:	f000 fe50 	bl	810dd74 <__assert_func>
 810d0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810d0d8:	6004      	str	r4, [r0, #0]
 810d0da:	60c4      	str	r4, [r0, #12]
 810d0dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810d0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810d0e4:	b94c      	cbnz	r4, 810d0fa <__pow5mult+0x66>
 810d0e6:	f240 2171 	movw	r1, #625	; 0x271
 810d0ea:	4630      	mov	r0, r6
 810d0ec:	f7ff ff12 	bl	810cf14 <__i2b>
 810d0f0:	2300      	movs	r3, #0
 810d0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 810d0f6:	4604      	mov	r4, r0
 810d0f8:	6003      	str	r3, [r0, #0]
 810d0fa:	f04f 0900 	mov.w	r9, #0
 810d0fe:	07eb      	lsls	r3, r5, #31
 810d100:	d50a      	bpl.n	810d118 <__pow5mult+0x84>
 810d102:	4639      	mov	r1, r7
 810d104:	4622      	mov	r2, r4
 810d106:	4630      	mov	r0, r6
 810d108:	f7ff ff1a 	bl	810cf40 <__multiply>
 810d10c:	4639      	mov	r1, r7
 810d10e:	4680      	mov	r8, r0
 810d110:	4630      	mov	r0, r6
 810d112:	f7ff fdfd 	bl	810cd10 <_Bfree>
 810d116:	4647      	mov	r7, r8
 810d118:	106d      	asrs	r5, r5, #1
 810d11a:	d00b      	beq.n	810d134 <__pow5mult+0xa0>
 810d11c:	6820      	ldr	r0, [r4, #0]
 810d11e:	b938      	cbnz	r0, 810d130 <__pow5mult+0x9c>
 810d120:	4622      	mov	r2, r4
 810d122:	4621      	mov	r1, r4
 810d124:	4630      	mov	r0, r6
 810d126:	f7ff ff0b 	bl	810cf40 <__multiply>
 810d12a:	6020      	str	r0, [r4, #0]
 810d12c:	f8c0 9000 	str.w	r9, [r0]
 810d130:	4604      	mov	r4, r0
 810d132:	e7e4      	b.n	810d0fe <__pow5mult+0x6a>
 810d134:	4638      	mov	r0, r7
 810d136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d13a:	bf00      	nop
 810d13c:	0810e488 	.word	0x0810e488
 810d140:	0810e1d6 	.word	0x0810e1d6
 810d144:	0810e338 	.word	0x0810e338

0810d148 <__lshift>:
 810d148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d14c:	460c      	mov	r4, r1
 810d14e:	6849      	ldr	r1, [r1, #4]
 810d150:	6923      	ldr	r3, [r4, #16]
 810d152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810d156:	68a3      	ldr	r3, [r4, #8]
 810d158:	4607      	mov	r7, r0
 810d15a:	4691      	mov	r9, r2
 810d15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810d160:	f108 0601 	add.w	r6, r8, #1
 810d164:	42b3      	cmp	r3, r6
 810d166:	db0b      	blt.n	810d180 <__lshift+0x38>
 810d168:	4638      	mov	r0, r7
 810d16a:	f7ff fd91 	bl	810cc90 <_Balloc>
 810d16e:	4605      	mov	r5, r0
 810d170:	b948      	cbnz	r0, 810d186 <__lshift+0x3e>
 810d172:	4602      	mov	r2, r0
 810d174:	4b2a      	ldr	r3, [pc, #168]	; (810d220 <__lshift+0xd8>)
 810d176:	482b      	ldr	r0, [pc, #172]	; (810d224 <__lshift+0xdc>)
 810d178:	f240 11d9 	movw	r1, #473	; 0x1d9
 810d17c:	f000 fdfa 	bl	810dd74 <__assert_func>
 810d180:	3101      	adds	r1, #1
 810d182:	005b      	lsls	r3, r3, #1
 810d184:	e7ee      	b.n	810d164 <__lshift+0x1c>
 810d186:	2300      	movs	r3, #0
 810d188:	f100 0114 	add.w	r1, r0, #20
 810d18c:	f100 0210 	add.w	r2, r0, #16
 810d190:	4618      	mov	r0, r3
 810d192:	4553      	cmp	r3, sl
 810d194:	db37      	blt.n	810d206 <__lshift+0xbe>
 810d196:	6920      	ldr	r0, [r4, #16]
 810d198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810d19c:	f104 0314 	add.w	r3, r4, #20
 810d1a0:	f019 091f 	ands.w	r9, r9, #31
 810d1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810d1a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810d1ac:	d02f      	beq.n	810d20e <__lshift+0xc6>
 810d1ae:	f1c9 0e20 	rsb	lr, r9, #32
 810d1b2:	468a      	mov	sl, r1
 810d1b4:	f04f 0c00 	mov.w	ip, #0
 810d1b8:	681a      	ldr	r2, [r3, #0]
 810d1ba:	fa02 f209 	lsl.w	r2, r2, r9
 810d1be:	ea42 020c 	orr.w	r2, r2, ip
 810d1c2:	f84a 2b04 	str.w	r2, [sl], #4
 810d1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 810d1ca:	4298      	cmp	r0, r3
 810d1cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 810d1d0:	d8f2      	bhi.n	810d1b8 <__lshift+0x70>
 810d1d2:	1b03      	subs	r3, r0, r4
 810d1d4:	3b15      	subs	r3, #21
 810d1d6:	f023 0303 	bic.w	r3, r3, #3
 810d1da:	3304      	adds	r3, #4
 810d1dc:	f104 0215 	add.w	r2, r4, #21
 810d1e0:	4290      	cmp	r0, r2
 810d1e2:	bf38      	it	cc
 810d1e4:	2304      	movcc	r3, #4
 810d1e6:	f841 c003 	str.w	ip, [r1, r3]
 810d1ea:	f1bc 0f00 	cmp.w	ip, #0
 810d1ee:	d001      	beq.n	810d1f4 <__lshift+0xac>
 810d1f0:	f108 0602 	add.w	r6, r8, #2
 810d1f4:	3e01      	subs	r6, #1
 810d1f6:	4638      	mov	r0, r7
 810d1f8:	612e      	str	r6, [r5, #16]
 810d1fa:	4621      	mov	r1, r4
 810d1fc:	f7ff fd88 	bl	810cd10 <_Bfree>
 810d200:	4628      	mov	r0, r5
 810d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d206:	f842 0f04 	str.w	r0, [r2, #4]!
 810d20a:	3301      	adds	r3, #1
 810d20c:	e7c1      	b.n	810d192 <__lshift+0x4a>
 810d20e:	3904      	subs	r1, #4
 810d210:	f853 2b04 	ldr.w	r2, [r3], #4
 810d214:	f841 2f04 	str.w	r2, [r1, #4]!
 810d218:	4298      	cmp	r0, r3
 810d21a:	d8f9      	bhi.n	810d210 <__lshift+0xc8>
 810d21c:	e7ea      	b.n	810d1f4 <__lshift+0xac>
 810d21e:	bf00      	nop
 810d220:	0810e248 	.word	0x0810e248
 810d224:	0810e338 	.word	0x0810e338

0810d228 <__mcmp>:
 810d228:	b530      	push	{r4, r5, lr}
 810d22a:	6902      	ldr	r2, [r0, #16]
 810d22c:	690c      	ldr	r4, [r1, #16]
 810d22e:	1b12      	subs	r2, r2, r4
 810d230:	d10e      	bne.n	810d250 <__mcmp+0x28>
 810d232:	f100 0314 	add.w	r3, r0, #20
 810d236:	3114      	adds	r1, #20
 810d238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810d23c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810d240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810d244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810d248:	42a5      	cmp	r5, r4
 810d24a:	d003      	beq.n	810d254 <__mcmp+0x2c>
 810d24c:	d305      	bcc.n	810d25a <__mcmp+0x32>
 810d24e:	2201      	movs	r2, #1
 810d250:	4610      	mov	r0, r2
 810d252:	bd30      	pop	{r4, r5, pc}
 810d254:	4283      	cmp	r3, r0
 810d256:	d3f3      	bcc.n	810d240 <__mcmp+0x18>
 810d258:	e7fa      	b.n	810d250 <__mcmp+0x28>
 810d25a:	f04f 32ff 	mov.w	r2, #4294967295
 810d25e:	e7f7      	b.n	810d250 <__mcmp+0x28>

0810d260 <__mdiff>:
 810d260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d264:	460c      	mov	r4, r1
 810d266:	4606      	mov	r6, r0
 810d268:	4611      	mov	r1, r2
 810d26a:	4620      	mov	r0, r4
 810d26c:	4690      	mov	r8, r2
 810d26e:	f7ff ffdb 	bl	810d228 <__mcmp>
 810d272:	1e05      	subs	r5, r0, #0
 810d274:	d110      	bne.n	810d298 <__mdiff+0x38>
 810d276:	4629      	mov	r1, r5
 810d278:	4630      	mov	r0, r6
 810d27a:	f7ff fd09 	bl	810cc90 <_Balloc>
 810d27e:	b930      	cbnz	r0, 810d28e <__mdiff+0x2e>
 810d280:	4b3a      	ldr	r3, [pc, #232]	; (810d36c <__mdiff+0x10c>)
 810d282:	4602      	mov	r2, r0
 810d284:	f240 2132 	movw	r1, #562	; 0x232
 810d288:	4839      	ldr	r0, [pc, #228]	; (810d370 <__mdiff+0x110>)
 810d28a:	f000 fd73 	bl	810dd74 <__assert_func>
 810d28e:	2301      	movs	r3, #1
 810d290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810d294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d298:	bfa4      	itt	ge
 810d29a:	4643      	movge	r3, r8
 810d29c:	46a0      	movge	r8, r4
 810d29e:	4630      	mov	r0, r6
 810d2a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810d2a4:	bfa6      	itte	ge
 810d2a6:	461c      	movge	r4, r3
 810d2a8:	2500      	movge	r5, #0
 810d2aa:	2501      	movlt	r5, #1
 810d2ac:	f7ff fcf0 	bl	810cc90 <_Balloc>
 810d2b0:	b920      	cbnz	r0, 810d2bc <__mdiff+0x5c>
 810d2b2:	4b2e      	ldr	r3, [pc, #184]	; (810d36c <__mdiff+0x10c>)
 810d2b4:	4602      	mov	r2, r0
 810d2b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 810d2ba:	e7e5      	b.n	810d288 <__mdiff+0x28>
 810d2bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810d2c0:	6926      	ldr	r6, [r4, #16]
 810d2c2:	60c5      	str	r5, [r0, #12]
 810d2c4:	f104 0914 	add.w	r9, r4, #20
 810d2c8:	f108 0514 	add.w	r5, r8, #20
 810d2cc:	f100 0e14 	add.w	lr, r0, #20
 810d2d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810d2d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810d2d8:	f108 0210 	add.w	r2, r8, #16
 810d2dc:	46f2      	mov	sl, lr
 810d2de:	2100      	movs	r1, #0
 810d2e0:	f859 3b04 	ldr.w	r3, [r9], #4
 810d2e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810d2e8:	fa1f f883 	uxth.w	r8, r3
 810d2ec:	fa11 f18b 	uxtah	r1, r1, fp
 810d2f0:	0c1b      	lsrs	r3, r3, #16
 810d2f2:	eba1 0808 	sub.w	r8, r1, r8
 810d2f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810d2fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810d2fe:	fa1f f888 	uxth.w	r8, r8
 810d302:	1419      	asrs	r1, r3, #16
 810d304:	454e      	cmp	r6, r9
 810d306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810d30a:	f84a 3b04 	str.w	r3, [sl], #4
 810d30e:	d8e7      	bhi.n	810d2e0 <__mdiff+0x80>
 810d310:	1b33      	subs	r3, r6, r4
 810d312:	3b15      	subs	r3, #21
 810d314:	f023 0303 	bic.w	r3, r3, #3
 810d318:	3304      	adds	r3, #4
 810d31a:	3415      	adds	r4, #21
 810d31c:	42a6      	cmp	r6, r4
 810d31e:	bf38      	it	cc
 810d320:	2304      	movcc	r3, #4
 810d322:	441d      	add	r5, r3
 810d324:	4473      	add	r3, lr
 810d326:	469e      	mov	lr, r3
 810d328:	462e      	mov	r6, r5
 810d32a:	4566      	cmp	r6, ip
 810d32c:	d30e      	bcc.n	810d34c <__mdiff+0xec>
 810d32e:	f10c 0203 	add.w	r2, ip, #3
 810d332:	1b52      	subs	r2, r2, r5
 810d334:	f022 0203 	bic.w	r2, r2, #3
 810d338:	3d03      	subs	r5, #3
 810d33a:	45ac      	cmp	ip, r5
 810d33c:	bf38      	it	cc
 810d33e:	2200      	movcc	r2, #0
 810d340:	441a      	add	r2, r3
 810d342:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810d346:	b17b      	cbz	r3, 810d368 <__mdiff+0x108>
 810d348:	6107      	str	r7, [r0, #16]
 810d34a:	e7a3      	b.n	810d294 <__mdiff+0x34>
 810d34c:	f856 8b04 	ldr.w	r8, [r6], #4
 810d350:	fa11 f288 	uxtah	r2, r1, r8
 810d354:	1414      	asrs	r4, r2, #16
 810d356:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810d35a:	b292      	uxth	r2, r2
 810d35c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810d360:	f84e 2b04 	str.w	r2, [lr], #4
 810d364:	1421      	asrs	r1, r4, #16
 810d366:	e7e0      	b.n	810d32a <__mdiff+0xca>
 810d368:	3f01      	subs	r7, #1
 810d36a:	e7ea      	b.n	810d342 <__mdiff+0xe2>
 810d36c:	0810e248 	.word	0x0810e248
 810d370:	0810e338 	.word	0x0810e338

0810d374 <__ulp>:
 810d374:	b082      	sub	sp, #8
 810d376:	ed8d 0b00 	vstr	d0, [sp]
 810d37a:	9b01      	ldr	r3, [sp, #4]
 810d37c:	4912      	ldr	r1, [pc, #72]	; (810d3c8 <__ulp+0x54>)
 810d37e:	4019      	ands	r1, r3
 810d380:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810d384:	2900      	cmp	r1, #0
 810d386:	dd05      	ble.n	810d394 <__ulp+0x20>
 810d388:	2200      	movs	r2, #0
 810d38a:	460b      	mov	r3, r1
 810d38c:	ec43 2b10 	vmov	d0, r2, r3
 810d390:	b002      	add	sp, #8
 810d392:	4770      	bx	lr
 810d394:	4249      	negs	r1, r1
 810d396:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810d39a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810d39e:	f04f 0200 	mov.w	r2, #0
 810d3a2:	f04f 0300 	mov.w	r3, #0
 810d3a6:	da04      	bge.n	810d3b2 <__ulp+0x3e>
 810d3a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810d3ac:	fa41 f300 	asr.w	r3, r1, r0
 810d3b0:	e7ec      	b.n	810d38c <__ulp+0x18>
 810d3b2:	f1a0 0114 	sub.w	r1, r0, #20
 810d3b6:	291e      	cmp	r1, #30
 810d3b8:	bfda      	itte	le
 810d3ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810d3be:	fa20 f101 	lsrle.w	r1, r0, r1
 810d3c2:	2101      	movgt	r1, #1
 810d3c4:	460a      	mov	r2, r1
 810d3c6:	e7e1      	b.n	810d38c <__ulp+0x18>
 810d3c8:	7ff00000 	.word	0x7ff00000

0810d3cc <__b2d>:
 810d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d3ce:	6905      	ldr	r5, [r0, #16]
 810d3d0:	f100 0714 	add.w	r7, r0, #20
 810d3d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810d3d8:	1f2e      	subs	r6, r5, #4
 810d3da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810d3de:	4620      	mov	r0, r4
 810d3e0:	f7ff fd48 	bl	810ce74 <__hi0bits>
 810d3e4:	f1c0 0320 	rsb	r3, r0, #32
 810d3e8:	280a      	cmp	r0, #10
 810d3ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810d468 <__b2d+0x9c>
 810d3ee:	600b      	str	r3, [r1, #0]
 810d3f0:	dc14      	bgt.n	810d41c <__b2d+0x50>
 810d3f2:	f1c0 0e0b 	rsb	lr, r0, #11
 810d3f6:	fa24 f10e 	lsr.w	r1, r4, lr
 810d3fa:	42b7      	cmp	r7, r6
 810d3fc:	ea41 030c 	orr.w	r3, r1, ip
 810d400:	bf34      	ite	cc
 810d402:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810d406:	2100      	movcs	r1, #0
 810d408:	3015      	adds	r0, #21
 810d40a:	fa04 f000 	lsl.w	r0, r4, r0
 810d40e:	fa21 f10e 	lsr.w	r1, r1, lr
 810d412:	ea40 0201 	orr.w	r2, r0, r1
 810d416:	ec43 2b10 	vmov	d0, r2, r3
 810d41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d41c:	42b7      	cmp	r7, r6
 810d41e:	bf3a      	itte	cc
 810d420:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810d424:	f1a5 0608 	subcc.w	r6, r5, #8
 810d428:	2100      	movcs	r1, #0
 810d42a:	380b      	subs	r0, #11
 810d42c:	d017      	beq.n	810d45e <__b2d+0x92>
 810d42e:	f1c0 0c20 	rsb	ip, r0, #32
 810d432:	fa04 f500 	lsl.w	r5, r4, r0
 810d436:	42be      	cmp	r6, r7
 810d438:	fa21 f40c 	lsr.w	r4, r1, ip
 810d43c:	ea45 0504 	orr.w	r5, r5, r4
 810d440:	bf8c      	ite	hi
 810d442:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810d446:	2400      	movls	r4, #0
 810d448:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810d44c:	fa01 f000 	lsl.w	r0, r1, r0
 810d450:	fa24 f40c 	lsr.w	r4, r4, ip
 810d454:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810d458:	ea40 0204 	orr.w	r2, r0, r4
 810d45c:	e7db      	b.n	810d416 <__b2d+0x4a>
 810d45e:	ea44 030c 	orr.w	r3, r4, ip
 810d462:	460a      	mov	r2, r1
 810d464:	e7d7      	b.n	810d416 <__b2d+0x4a>
 810d466:	bf00      	nop
 810d468:	3ff00000 	.word	0x3ff00000

0810d46c <__d2b>:
 810d46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810d470:	4689      	mov	r9, r1
 810d472:	2101      	movs	r1, #1
 810d474:	ec57 6b10 	vmov	r6, r7, d0
 810d478:	4690      	mov	r8, r2
 810d47a:	f7ff fc09 	bl	810cc90 <_Balloc>
 810d47e:	4604      	mov	r4, r0
 810d480:	b930      	cbnz	r0, 810d490 <__d2b+0x24>
 810d482:	4602      	mov	r2, r0
 810d484:	4b25      	ldr	r3, [pc, #148]	; (810d51c <__d2b+0xb0>)
 810d486:	4826      	ldr	r0, [pc, #152]	; (810d520 <__d2b+0xb4>)
 810d488:	f240 310a 	movw	r1, #778	; 0x30a
 810d48c:	f000 fc72 	bl	810dd74 <__assert_func>
 810d490:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810d494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810d498:	bb35      	cbnz	r5, 810d4e8 <__d2b+0x7c>
 810d49a:	2e00      	cmp	r6, #0
 810d49c:	9301      	str	r3, [sp, #4]
 810d49e:	d028      	beq.n	810d4f2 <__d2b+0x86>
 810d4a0:	4668      	mov	r0, sp
 810d4a2:	9600      	str	r6, [sp, #0]
 810d4a4:	f7ff fd06 	bl	810ceb4 <__lo0bits>
 810d4a8:	9900      	ldr	r1, [sp, #0]
 810d4aa:	b300      	cbz	r0, 810d4ee <__d2b+0x82>
 810d4ac:	9a01      	ldr	r2, [sp, #4]
 810d4ae:	f1c0 0320 	rsb	r3, r0, #32
 810d4b2:	fa02 f303 	lsl.w	r3, r2, r3
 810d4b6:	430b      	orrs	r3, r1
 810d4b8:	40c2      	lsrs	r2, r0
 810d4ba:	6163      	str	r3, [r4, #20]
 810d4bc:	9201      	str	r2, [sp, #4]
 810d4be:	9b01      	ldr	r3, [sp, #4]
 810d4c0:	61a3      	str	r3, [r4, #24]
 810d4c2:	2b00      	cmp	r3, #0
 810d4c4:	bf14      	ite	ne
 810d4c6:	2202      	movne	r2, #2
 810d4c8:	2201      	moveq	r2, #1
 810d4ca:	6122      	str	r2, [r4, #16]
 810d4cc:	b1d5      	cbz	r5, 810d504 <__d2b+0x98>
 810d4ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810d4d2:	4405      	add	r5, r0
 810d4d4:	f8c9 5000 	str.w	r5, [r9]
 810d4d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810d4dc:	f8c8 0000 	str.w	r0, [r8]
 810d4e0:	4620      	mov	r0, r4
 810d4e2:	b003      	add	sp, #12
 810d4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d4e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810d4ec:	e7d5      	b.n	810d49a <__d2b+0x2e>
 810d4ee:	6161      	str	r1, [r4, #20]
 810d4f0:	e7e5      	b.n	810d4be <__d2b+0x52>
 810d4f2:	a801      	add	r0, sp, #4
 810d4f4:	f7ff fcde 	bl	810ceb4 <__lo0bits>
 810d4f8:	9b01      	ldr	r3, [sp, #4]
 810d4fa:	6163      	str	r3, [r4, #20]
 810d4fc:	2201      	movs	r2, #1
 810d4fe:	6122      	str	r2, [r4, #16]
 810d500:	3020      	adds	r0, #32
 810d502:	e7e3      	b.n	810d4cc <__d2b+0x60>
 810d504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810d508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810d50c:	f8c9 0000 	str.w	r0, [r9]
 810d510:	6918      	ldr	r0, [r3, #16]
 810d512:	f7ff fcaf 	bl	810ce74 <__hi0bits>
 810d516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810d51a:	e7df      	b.n	810d4dc <__d2b+0x70>
 810d51c:	0810e248 	.word	0x0810e248
 810d520:	0810e338 	.word	0x0810e338

0810d524 <__ratio>:
 810d524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d528:	4688      	mov	r8, r1
 810d52a:	4669      	mov	r1, sp
 810d52c:	4681      	mov	r9, r0
 810d52e:	f7ff ff4d 	bl	810d3cc <__b2d>
 810d532:	a901      	add	r1, sp, #4
 810d534:	4640      	mov	r0, r8
 810d536:	ec55 4b10 	vmov	r4, r5, d0
 810d53a:	f7ff ff47 	bl	810d3cc <__b2d>
 810d53e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810d542:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810d546:	eba3 0c02 	sub.w	ip, r3, r2
 810d54a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d54e:	1a9b      	subs	r3, r3, r2
 810d550:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810d554:	ec51 0b10 	vmov	r0, r1, d0
 810d558:	2b00      	cmp	r3, #0
 810d55a:	bfd6      	itet	le
 810d55c:	460a      	movle	r2, r1
 810d55e:	462a      	movgt	r2, r5
 810d560:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810d564:	468b      	mov	fp, r1
 810d566:	462f      	mov	r7, r5
 810d568:	bfd4      	ite	le
 810d56a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810d56e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810d572:	4620      	mov	r0, r4
 810d574:	ee10 2a10 	vmov	r2, s0
 810d578:	465b      	mov	r3, fp
 810d57a:	4639      	mov	r1, r7
 810d57c:	f7f3 f9ee 	bl	810095c <__aeabi_ddiv>
 810d580:	ec41 0b10 	vmov	d0, r0, r1
 810d584:	b003      	add	sp, #12
 810d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810d58a <__copybits>:
 810d58a:	3901      	subs	r1, #1
 810d58c:	b570      	push	{r4, r5, r6, lr}
 810d58e:	1149      	asrs	r1, r1, #5
 810d590:	6914      	ldr	r4, [r2, #16]
 810d592:	3101      	adds	r1, #1
 810d594:	f102 0314 	add.w	r3, r2, #20
 810d598:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810d59c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810d5a0:	1f05      	subs	r5, r0, #4
 810d5a2:	42a3      	cmp	r3, r4
 810d5a4:	d30c      	bcc.n	810d5c0 <__copybits+0x36>
 810d5a6:	1aa3      	subs	r3, r4, r2
 810d5a8:	3b11      	subs	r3, #17
 810d5aa:	f023 0303 	bic.w	r3, r3, #3
 810d5ae:	3211      	adds	r2, #17
 810d5b0:	42a2      	cmp	r2, r4
 810d5b2:	bf88      	it	hi
 810d5b4:	2300      	movhi	r3, #0
 810d5b6:	4418      	add	r0, r3
 810d5b8:	2300      	movs	r3, #0
 810d5ba:	4288      	cmp	r0, r1
 810d5bc:	d305      	bcc.n	810d5ca <__copybits+0x40>
 810d5be:	bd70      	pop	{r4, r5, r6, pc}
 810d5c0:	f853 6b04 	ldr.w	r6, [r3], #4
 810d5c4:	f845 6f04 	str.w	r6, [r5, #4]!
 810d5c8:	e7eb      	b.n	810d5a2 <__copybits+0x18>
 810d5ca:	f840 3b04 	str.w	r3, [r0], #4
 810d5ce:	e7f4      	b.n	810d5ba <__copybits+0x30>

0810d5d0 <__any_on>:
 810d5d0:	f100 0214 	add.w	r2, r0, #20
 810d5d4:	6900      	ldr	r0, [r0, #16]
 810d5d6:	114b      	asrs	r3, r1, #5
 810d5d8:	4298      	cmp	r0, r3
 810d5da:	b510      	push	{r4, lr}
 810d5dc:	db11      	blt.n	810d602 <__any_on+0x32>
 810d5de:	dd0a      	ble.n	810d5f6 <__any_on+0x26>
 810d5e0:	f011 011f 	ands.w	r1, r1, #31
 810d5e4:	d007      	beq.n	810d5f6 <__any_on+0x26>
 810d5e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d5ea:	fa24 f001 	lsr.w	r0, r4, r1
 810d5ee:	fa00 f101 	lsl.w	r1, r0, r1
 810d5f2:	428c      	cmp	r4, r1
 810d5f4:	d10b      	bne.n	810d60e <__any_on+0x3e>
 810d5f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d5fa:	4293      	cmp	r3, r2
 810d5fc:	d803      	bhi.n	810d606 <__any_on+0x36>
 810d5fe:	2000      	movs	r0, #0
 810d600:	bd10      	pop	{r4, pc}
 810d602:	4603      	mov	r3, r0
 810d604:	e7f7      	b.n	810d5f6 <__any_on+0x26>
 810d606:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d60a:	2900      	cmp	r1, #0
 810d60c:	d0f5      	beq.n	810d5fa <__any_on+0x2a>
 810d60e:	2001      	movs	r0, #1
 810d610:	e7f6      	b.n	810d600 <__any_on+0x30>
	...

0810d614 <_free_r>:
 810d614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d616:	2900      	cmp	r1, #0
 810d618:	d044      	beq.n	810d6a4 <_free_r+0x90>
 810d61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d61e:	9001      	str	r0, [sp, #4]
 810d620:	2b00      	cmp	r3, #0
 810d622:	f1a1 0404 	sub.w	r4, r1, #4
 810d626:	bfb8      	it	lt
 810d628:	18e4      	addlt	r4, r4, r3
 810d62a:	f7ff fb25 	bl	810cc78 <__malloc_lock>
 810d62e:	4a1e      	ldr	r2, [pc, #120]	; (810d6a8 <_free_r+0x94>)
 810d630:	9801      	ldr	r0, [sp, #4]
 810d632:	6813      	ldr	r3, [r2, #0]
 810d634:	b933      	cbnz	r3, 810d644 <_free_r+0x30>
 810d636:	6063      	str	r3, [r4, #4]
 810d638:	6014      	str	r4, [r2, #0]
 810d63a:	b003      	add	sp, #12
 810d63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d640:	f7ff bb20 	b.w	810cc84 <__malloc_unlock>
 810d644:	42a3      	cmp	r3, r4
 810d646:	d908      	bls.n	810d65a <_free_r+0x46>
 810d648:	6825      	ldr	r5, [r4, #0]
 810d64a:	1961      	adds	r1, r4, r5
 810d64c:	428b      	cmp	r3, r1
 810d64e:	bf01      	itttt	eq
 810d650:	6819      	ldreq	r1, [r3, #0]
 810d652:	685b      	ldreq	r3, [r3, #4]
 810d654:	1949      	addeq	r1, r1, r5
 810d656:	6021      	streq	r1, [r4, #0]
 810d658:	e7ed      	b.n	810d636 <_free_r+0x22>
 810d65a:	461a      	mov	r2, r3
 810d65c:	685b      	ldr	r3, [r3, #4]
 810d65e:	b10b      	cbz	r3, 810d664 <_free_r+0x50>
 810d660:	42a3      	cmp	r3, r4
 810d662:	d9fa      	bls.n	810d65a <_free_r+0x46>
 810d664:	6811      	ldr	r1, [r2, #0]
 810d666:	1855      	adds	r5, r2, r1
 810d668:	42a5      	cmp	r5, r4
 810d66a:	d10b      	bne.n	810d684 <_free_r+0x70>
 810d66c:	6824      	ldr	r4, [r4, #0]
 810d66e:	4421      	add	r1, r4
 810d670:	1854      	adds	r4, r2, r1
 810d672:	42a3      	cmp	r3, r4
 810d674:	6011      	str	r1, [r2, #0]
 810d676:	d1e0      	bne.n	810d63a <_free_r+0x26>
 810d678:	681c      	ldr	r4, [r3, #0]
 810d67a:	685b      	ldr	r3, [r3, #4]
 810d67c:	6053      	str	r3, [r2, #4]
 810d67e:	4421      	add	r1, r4
 810d680:	6011      	str	r1, [r2, #0]
 810d682:	e7da      	b.n	810d63a <_free_r+0x26>
 810d684:	d902      	bls.n	810d68c <_free_r+0x78>
 810d686:	230c      	movs	r3, #12
 810d688:	6003      	str	r3, [r0, #0]
 810d68a:	e7d6      	b.n	810d63a <_free_r+0x26>
 810d68c:	6825      	ldr	r5, [r4, #0]
 810d68e:	1961      	adds	r1, r4, r5
 810d690:	428b      	cmp	r3, r1
 810d692:	bf04      	itt	eq
 810d694:	6819      	ldreq	r1, [r3, #0]
 810d696:	685b      	ldreq	r3, [r3, #4]
 810d698:	6063      	str	r3, [r4, #4]
 810d69a:	bf04      	itt	eq
 810d69c:	1949      	addeq	r1, r1, r5
 810d69e:	6021      	streq	r1, [r4, #0]
 810d6a0:	6054      	str	r4, [r2, #4]
 810d6a2:	e7ca      	b.n	810d63a <_free_r+0x26>
 810d6a4:	b003      	add	sp, #12
 810d6a6:	bd30      	pop	{r4, r5, pc}
 810d6a8:	10000528 	.word	0x10000528

0810d6ac <_realloc_r>:
 810d6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d6b0:	4680      	mov	r8, r0
 810d6b2:	4614      	mov	r4, r2
 810d6b4:	460e      	mov	r6, r1
 810d6b6:	b921      	cbnz	r1, 810d6c2 <_realloc_r+0x16>
 810d6b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d6bc:	4611      	mov	r1, r2
 810d6be:	f7fb bf83 	b.w	81095c8 <_malloc_r>
 810d6c2:	b92a      	cbnz	r2, 810d6d0 <_realloc_r+0x24>
 810d6c4:	f7ff ffa6 	bl	810d614 <_free_r>
 810d6c8:	4625      	mov	r5, r4
 810d6ca:	4628      	mov	r0, r5
 810d6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d6d0:	f000 fbde 	bl	810de90 <_malloc_usable_size_r>
 810d6d4:	4284      	cmp	r4, r0
 810d6d6:	4607      	mov	r7, r0
 810d6d8:	d802      	bhi.n	810d6e0 <_realloc_r+0x34>
 810d6da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d6de:	d812      	bhi.n	810d706 <_realloc_r+0x5a>
 810d6e0:	4621      	mov	r1, r4
 810d6e2:	4640      	mov	r0, r8
 810d6e4:	f7fb ff70 	bl	81095c8 <_malloc_r>
 810d6e8:	4605      	mov	r5, r0
 810d6ea:	2800      	cmp	r0, #0
 810d6ec:	d0ed      	beq.n	810d6ca <_realloc_r+0x1e>
 810d6ee:	42bc      	cmp	r4, r7
 810d6f0:	4622      	mov	r2, r4
 810d6f2:	4631      	mov	r1, r6
 810d6f4:	bf28      	it	cs
 810d6f6:	463a      	movcs	r2, r7
 810d6f8:	f7ff fab0 	bl	810cc5c <memcpy>
 810d6fc:	4631      	mov	r1, r6
 810d6fe:	4640      	mov	r0, r8
 810d700:	f7ff ff88 	bl	810d614 <_free_r>
 810d704:	e7e1      	b.n	810d6ca <_realloc_r+0x1e>
 810d706:	4635      	mov	r5, r6
 810d708:	e7df      	b.n	810d6ca <_realloc_r+0x1e>

0810d70a <__ssputs_r>:
 810d70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d70e:	688e      	ldr	r6, [r1, #8]
 810d710:	429e      	cmp	r6, r3
 810d712:	4682      	mov	sl, r0
 810d714:	460c      	mov	r4, r1
 810d716:	4690      	mov	r8, r2
 810d718:	461f      	mov	r7, r3
 810d71a:	d838      	bhi.n	810d78e <__ssputs_r+0x84>
 810d71c:	898a      	ldrh	r2, [r1, #12]
 810d71e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d722:	d032      	beq.n	810d78a <__ssputs_r+0x80>
 810d724:	6825      	ldr	r5, [r4, #0]
 810d726:	6909      	ldr	r1, [r1, #16]
 810d728:	eba5 0901 	sub.w	r9, r5, r1
 810d72c:	6965      	ldr	r5, [r4, #20]
 810d72e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d736:	3301      	adds	r3, #1
 810d738:	444b      	add	r3, r9
 810d73a:	106d      	asrs	r5, r5, #1
 810d73c:	429d      	cmp	r5, r3
 810d73e:	bf38      	it	cc
 810d740:	461d      	movcc	r5, r3
 810d742:	0553      	lsls	r3, r2, #21
 810d744:	d531      	bpl.n	810d7aa <__ssputs_r+0xa0>
 810d746:	4629      	mov	r1, r5
 810d748:	f7fb ff3e 	bl	81095c8 <_malloc_r>
 810d74c:	4606      	mov	r6, r0
 810d74e:	b950      	cbnz	r0, 810d766 <__ssputs_r+0x5c>
 810d750:	230c      	movs	r3, #12
 810d752:	f8ca 3000 	str.w	r3, [sl]
 810d756:	89a3      	ldrh	r3, [r4, #12]
 810d758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d75c:	81a3      	strh	r3, [r4, #12]
 810d75e:	f04f 30ff 	mov.w	r0, #4294967295
 810d762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d766:	6921      	ldr	r1, [r4, #16]
 810d768:	464a      	mov	r2, r9
 810d76a:	f7ff fa77 	bl	810cc5c <memcpy>
 810d76e:	89a3      	ldrh	r3, [r4, #12]
 810d770:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d778:	81a3      	strh	r3, [r4, #12]
 810d77a:	6126      	str	r6, [r4, #16]
 810d77c:	6165      	str	r5, [r4, #20]
 810d77e:	444e      	add	r6, r9
 810d780:	eba5 0509 	sub.w	r5, r5, r9
 810d784:	6026      	str	r6, [r4, #0]
 810d786:	60a5      	str	r5, [r4, #8]
 810d788:	463e      	mov	r6, r7
 810d78a:	42be      	cmp	r6, r7
 810d78c:	d900      	bls.n	810d790 <__ssputs_r+0x86>
 810d78e:	463e      	mov	r6, r7
 810d790:	6820      	ldr	r0, [r4, #0]
 810d792:	4632      	mov	r2, r6
 810d794:	4641      	mov	r1, r8
 810d796:	f000 fb61 	bl	810de5c <memmove>
 810d79a:	68a3      	ldr	r3, [r4, #8]
 810d79c:	1b9b      	subs	r3, r3, r6
 810d79e:	60a3      	str	r3, [r4, #8]
 810d7a0:	6823      	ldr	r3, [r4, #0]
 810d7a2:	4433      	add	r3, r6
 810d7a4:	6023      	str	r3, [r4, #0]
 810d7a6:	2000      	movs	r0, #0
 810d7a8:	e7db      	b.n	810d762 <__ssputs_r+0x58>
 810d7aa:	462a      	mov	r2, r5
 810d7ac:	f7ff ff7e 	bl	810d6ac <_realloc_r>
 810d7b0:	4606      	mov	r6, r0
 810d7b2:	2800      	cmp	r0, #0
 810d7b4:	d1e1      	bne.n	810d77a <__ssputs_r+0x70>
 810d7b6:	6921      	ldr	r1, [r4, #16]
 810d7b8:	4650      	mov	r0, sl
 810d7ba:	f7ff ff2b 	bl	810d614 <_free_r>
 810d7be:	e7c7      	b.n	810d750 <__ssputs_r+0x46>

0810d7c0 <_svfiprintf_r>:
 810d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d7c4:	4698      	mov	r8, r3
 810d7c6:	898b      	ldrh	r3, [r1, #12]
 810d7c8:	061b      	lsls	r3, r3, #24
 810d7ca:	b09d      	sub	sp, #116	; 0x74
 810d7cc:	4607      	mov	r7, r0
 810d7ce:	460d      	mov	r5, r1
 810d7d0:	4614      	mov	r4, r2
 810d7d2:	d50e      	bpl.n	810d7f2 <_svfiprintf_r+0x32>
 810d7d4:	690b      	ldr	r3, [r1, #16]
 810d7d6:	b963      	cbnz	r3, 810d7f2 <_svfiprintf_r+0x32>
 810d7d8:	2140      	movs	r1, #64	; 0x40
 810d7da:	f7fb fef5 	bl	81095c8 <_malloc_r>
 810d7de:	6028      	str	r0, [r5, #0]
 810d7e0:	6128      	str	r0, [r5, #16]
 810d7e2:	b920      	cbnz	r0, 810d7ee <_svfiprintf_r+0x2e>
 810d7e4:	230c      	movs	r3, #12
 810d7e6:	603b      	str	r3, [r7, #0]
 810d7e8:	f04f 30ff 	mov.w	r0, #4294967295
 810d7ec:	e0d1      	b.n	810d992 <_svfiprintf_r+0x1d2>
 810d7ee:	2340      	movs	r3, #64	; 0x40
 810d7f0:	616b      	str	r3, [r5, #20]
 810d7f2:	2300      	movs	r3, #0
 810d7f4:	9309      	str	r3, [sp, #36]	; 0x24
 810d7f6:	2320      	movs	r3, #32
 810d7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 810d800:	2330      	movs	r3, #48	; 0x30
 810d802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810d9ac <_svfiprintf_r+0x1ec>
 810d806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d80a:	f04f 0901 	mov.w	r9, #1
 810d80e:	4623      	mov	r3, r4
 810d810:	469a      	mov	sl, r3
 810d812:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d816:	b10a      	cbz	r2, 810d81c <_svfiprintf_r+0x5c>
 810d818:	2a25      	cmp	r2, #37	; 0x25
 810d81a:	d1f9      	bne.n	810d810 <_svfiprintf_r+0x50>
 810d81c:	ebba 0b04 	subs.w	fp, sl, r4
 810d820:	d00b      	beq.n	810d83a <_svfiprintf_r+0x7a>
 810d822:	465b      	mov	r3, fp
 810d824:	4622      	mov	r2, r4
 810d826:	4629      	mov	r1, r5
 810d828:	4638      	mov	r0, r7
 810d82a:	f7ff ff6e 	bl	810d70a <__ssputs_r>
 810d82e:	3001      	adds	r0, #1
 810d830:	f000 80aa 	beq.w	810d988 <_svfiprintf_r+0x1c8>
 810d834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d836:	445a      	add	r2, fp
 810d838:	9209      	str	r2, [sp, #36]	; 0x24
 810d83a:	f89a 3000 	ldrb.w	r3, [sl]
 810d83e:	2b00      	cmp	r3, #0
 810d840:	f000 80a2 	beq.w	810d988 <_svfiprintf_r+0x1c8>
 810d844:	2300      	movs	r3, #0
 810d846:	f04f 32ff 	mov.w	r2, #4294967295
 810d84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d84e:	f10a 0a01 	add.w	sl, sl, #1
 810d852:	9304      	str	r3, [sp, #16]
 810d854:	9307      	str	r3, [sp, #28]
 810d856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d85a:	931a      	str	r3, [sp, #104]	; 0x68
 810d85c:	4654      	mov	r4, sl
 810d85e:	2205      	movs	r2, #5
 810d860:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d864:	4851      	ldr	r0, [pc, #324]	; (810d9ac <_svfiprintf_r+0x1ec>)
 810d866:	f7f2 fd43 	bl	81002f0 <memchr>
 810d86a:	9a04      	ldr	r2, [sp, #16]
 810d86c:	b9d8      	cbnz	r0, 810d8a6 <_svfiprintf_r+0xe6>
 810d86e:	06d0      	lsls	r0, r2, #27
 810d870:	bf44      	itt	mi
 810d872:	2320      	movmi	r3, #32
 810d874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d878:	0711      	lsls	r1, r2, #28
 810d87a:	bf44      	itt	mi
 810d87c:	232b      	movmi	r3, #43	; 0x2b
 810d87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d882:	f89a 3000 	ldrb.w	r3, [sl]
 810d886:	2b2a      	cmp	r3, #42	; 0x2a
 810d888:	d015      	beq.n	810d8b6 <_svfiprintf_r+0xf6>
 810d88a:	9a07      	ldr	r2, [sp, #28]
 810d88c:	4654      	mov	r4, sl
 810d88e:	2000      	movs	r0, #0
 810d890:	f04f 0c0a 	mov.w	ip, #10
 810d894:	4621      	mov	r1, r4
 810d896:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d89a:	3b30      	subs	r3, #48	; 0x30
 810d89c:	2b09      	cmp	r3, #9
 810d89e:	d94e      	bls.n	810d93e <_svfiprintf_r+0x17e>
 810d8a0:	b1b0      	cbz	r0, 810d8d0 <_svfiprintf_r+0x110>
 810d8a2:	9207      	str	r2, [sp, #28]
 810d8a4:	e014      	b.n	810d8d0 <_svfiprintf_r+0x110>
 810d8a6:	eba0 0308 	sub.w	r3, r0, r8
 810d8aa:	fa09 f303 	lsl.w	r3, r9, r3
 810d8ae:	4313      	orrs	r3, r2
 810d8b0:	9304      	str	r3, [sp, #16]
 810d8b2:	46a2      	mov	sl, r4
 810d8b4:	e7d2      	b.n	810d85c <_svfiprintf_r+0x9c>
 810d8b6:	9b03      	ldr	r3, [sp, #12]
 810d8b8:	1d19      	adds	r1, r3, #4
 810d8ba:	681b      	ldr	r3, [r3, #0]
 810d8bc:	9103      	str	r1, [sp, #12]
 810d8be:	2b00      	cmp	r3, #0
 810d8c0:	bfbb      	ittet	lt
 810d8c2:	425b      	neglt	r3, r3
 810d8c4:	f042 0202 	orrlt.w	r2, r2, #2
 810d8c8:	9307      	strge	r3, [sp, #28]
 810d8ca:	9307      	strlt	r3, [sp, #28]
 810d8cc:	bfb8      	it	lt
 810d8ce:	9204      	strlt	r2, [sp, #16]
 810d8d0:	7823      	ldrb	r3, [r4, #0]
 810d8d2:	2b2e      	cmp	r3, #46	; 0x2e
 810d8d4:	d10c      	bne.n	810d8f0 <_svfiprintf_r+0x130>
 810d8d6:	7863      	ldrb	r3, [r4, #1]
 810d8d8:	2b2a      	cmp	r3, #42	; 0x2a
 810d8da:	d135      	bne.n	810d948 <_svfiprintf_r+0x188>
 810d8dc:	9b03      	ldr	r3, [sp, #12]
 810d8de:	1d1a      	adds	r2, r3, #4
 810d8e0:	681b      	ldr	r3, [r3, #0]
 810d8e2:	9203      	str	r2, [sp, #12]
 810d8e4:	2b00      	cmp	r3, #0
 810d8e6:	bfb8      	it	lt
 810d8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 810d8ec:	3402      	adds	r4, #2
 810d8ee:	9305      	str	r3, [sp, #20]
 810d8f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810d9bc <_svfiprintf_r+0x1fc>
 810d8f4:	7821      	ldrb	r1, [r4, #0]
 810d8f6:	2203      	movs	r2, #3
 810d8f8:	4650      	mov	r0, sl
 810d8fa:	f7f2 fcf9 	bl	81002f0 <memchr>
 810d8fe:	b140      	cbz	r0, 810d912 <_svfiprintf_r+0x152>
 810d900:	2340      	movs	r3, #64	; 0x40
 810d902:	eba0 000a 	sub.w	r0, r0, sl
 810d906:	fa03 f000 	lsl.w	r0, r3, r0
 810d90a:	9b04      	ldr	r3, [sp, #16]
 810d90c:	4303      	orrs	r3, r0
 810d90e:	3401      	adds	r4, #1
 810d910:	9304      	str	r3, [sp, #16]
 810d912:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d916:	4826      	ldr	r0, [pc, #152]	; (810d9b0 <_svfiprintf_r+0x1f0>)
 810d918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d91c:	2206      	movs	r2, #6
 810d91e:	f7f2 fce7 	bl	81002f0 <memchr>
 810d922:	2800      	cmp	r0, #0
 810d924:	d038      	beq.n	810d998 <_svfiprintf_r+0x1d8>
 810d926:	4b23      	ldr	r3, [pc, #140]	; (810d9b4 <_svfiprintf_r+0x1f4>)
 810d928:	bb1b      	cbnz	r3, 810d972 <_svfiprintf_r+0x1b2>
 810d92a:	9b03      	ldr	r3, [sp, #12]
 810d92c:	3307      	adds	r3, #7
 810d92e:	f023 0307 	bic.w	r3, r3, #7
 810d932:	3308      	adds	r3, #8
 810d934:	9303      	str	r3, [sp, #12]
 810d936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d938:	4433      	add	r3, r6
 810d93a:	9309      	str	r3, [sp, #36]	; 0x24
 810d93c:	e767      	b.n	810d80e <_svfiprintf_r+0x4e>
 810d93e:	fb0c 3202 	mla	r2, ip, r2, r3
 810d942:	460c      	mov	r4, r1
 810d944:	2001      	movs	r0, #1
 810d946:	e7a5      	b.n	810d894 <_svfiprintf_r+0xd4>
 810d948:	2300      	movs	r3, #0
 810d94a:	3401      	adds	r4, #1
 810d94c:	9305      	str	r3, [sp, #20]
 810d94e:	4619      	mov	r1, r3
 810d950:	f04f 0c0a 	mov.w	ip, #10
 810d954:	4620      	mov	r0, r4
 810d956:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d95a:	3a30      	subs	r2, #48	; 0x30
 810d95c:	2a09      	cmp	r2, #9
 810d95e:	d903      	bls.n	810d968 <_svfiprintf_r+0x1a8>
 810d960:	2b00      	cmp	r3, #0
 810d962:	d0c5      	beq.n	810d8f0 <_svfiprintf_r+0x130>
 810d964:	9105      	str	r1, [sp, #20]
 810d966:	e7c3      	b.n	810d8f0 <_svfiprintf_r+0x130>
 810d968:	fb0c 2101 	mla	r1, ip, r1, r2
 810d96c:	4604      	mov	r4, r0
 810d96e:	2301      	movs	r3, #1
 810d970:	e7f0      	b.n	810d954 <_svfiprintf_r+0x194>
 810d972:	ab03      	add	r3, sp, #12
 810d974:	9300      	str	r3, [sp, #0]
 810d976:	462a      	mov	r2, r5
 810d978:	4b0f      	ldr	r3, [pc, #60]	; (810d9b8 <_svfiprintf_r+0x1f8>)
 810d97a:	a904      	add	r1, sp, #16
 810d97c:	4638      	mov	r0, r7
 810d97e:	f7fb ff37 	bl	81097f0 <_printf_float>
 810d982:	1c42      	adds	r2, r0, #1
 810d984:	4606      	mov	r6, r0
 810d986:	d1d6      	bne.n	810d936 <_svfiprintf_r+0x176>
 810d988:	89ab      	ldrh	r3, [r5, #12]
 810d98a:	065b      	lsls	r3, r3, #25
 810d98c:	f53f af2c 	bmi.w	810d7e8 <_svfiprintf_r+0x28>
 810d990:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d992:	b01d      	add	sp, #116	; 0x74
 810d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d998:	ab03      	add	r3, sp, #12
 810d99a:	9300      	str	r3, [sp, #0]
 810d99c:	462a      	mov	r2, r5
 810d99e:	4b06      	ldr	r3, [pc, #24]	; (810d9b8 <_svfiprintf_r+0x1f8>)
 810d9a0:	a904      	add	r1, sp, #16
 810d9a2:	4638      	mov	r0, r7
 810d9a4:	f7fc f9c8 	bl	8109d38 <_printf_i>
 810d9a8:	e7eb      	b.n	810d982 <_svfiprintf_r+0x1c2>
 810d9aa:	bf00      	nop
 810d9ac:	0810e494 	.word	0x0810e494
 810d9b0:	0810e49e 	.word	0x0810e49e
 810d9b4:	081097f1 	.word	0x081097f1
 810d9b8:	0810d70b 	.word	0x0810d70b
 810d9bc:	0810e49a 	.word	0x0810e49a

0810d9c0 <__sfputc_r>:
 810d9c0:	6893      	ldr	r3, [r2, #8]
 810d9c2:	3b01      	subs	r3, #1
 810d9c4:	2b00      	cmp	r3, #0
 810d9c6:	b410      	push	{r4}
 810d9c8:	6093      	str	r3, [r2, #8]
 810d9ca:	da08      	bge.n	810d9de <__sfputc_r+0x1e>
 810d9cc:	6994      	ldr	r4, [r2, #24]
 810d9ce:	42a3      	cmp	r3, r4
 810d9d0:	db01      	blt.n	810d9d6 <__sfputc_r+0x16>
 810d9d2:	290a      	cmp	r1, #10
 810d9d4:	d103      	bne.n	810d9de <__sfputc_r+0x1e>
 810d9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d9da:	f7fd bc57 	b.w	810b28c <__swbuf_r>
 810d9de:	6813      	ldr	r3, [r2, #0]
 810d9e0:	1c58      	adds	r0, r3, #1
 810d9e2:	6010      	str	r0, [r2, #0]
 810d9e4:	7019      	strb	r1, [r3, #0]
 810d9e6:	4608      	mov	r0, r1
 810d9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d9ec:	4770      	bx	lr

0810d9ee <__sfputs_r>:
 810d9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d9f0:	4606      	mov	r6, r0
 810d9f2:	460f      	mov	r7, r1
 810d9f4:	4614      	mov	r4, r2
 810d9f6:	18d5      	adds	r5, r2, r3
 810d9f8:	42ac      	cmp	r4, r5
 810d9fa:	d101      	bne.n	810da00 <__sfputs_r+0x12>
 810d9fc:	2000      	movs	r0, #0
 810d9fe:	e007      	b.n	810da10 <__sfputs_r+0x22>
 810da00:	f814 1b01 	ldrb.w	r1, [r4], #1
 810da04:	463a      	mov	r2, r7
 810da06:	4630      	mov	r0, r6
 810da08:	f7ff ffda 	bl	810d9c0 <__sfputc_r>
 810da0c:	1c43      	adds	r3, r0, #1
 810da0e:	d1f3      	bne.n	810d9f8 <__sfputs_r+0xa>
 810da10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810da14 <_vfiprintf_r>:
 810da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810da18:	460d      	mov	r5, r1
 810da1a:	b09d      	sub	sp, #116	; 0x74
 810da1c:	4614      	mov	r4, r2
 810da1e:	4698      	mov	r8, r3
 810da20:	4606      	mov	r6, r0
 810da22:	b118      	cbz	r0, 810da2c <_vfiprintf_r+0x18>
 810da24:	6983      	ldr	r3, [r0, #24]
 810da26:	b90b      	cbnz	r3, 810da2c <_vfiprintf_r+0x18>
 810da28:	f7fe fc86 	bl	810c338 <__sinit>
 810da2c:	4b89      	ldr	r3, [pc, #548]	; (810dc54 <_vfiprintf_r+0x240>)
 810da2e:	429d      	cmp	r5, r3
 810da30:	d11b      	bne.n	810da6a <_vfiprintf_r+0x56>
 810da32:	6875      	ldr	r5, [r6, #4]
 810da34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810da36:	07d9      	lsls	r1, r3, #31
 810da38:	d405      	bmi.n	810da46 <_vfiprintf_r+0x32>
 810da3a:	89ab      	ldrh	r3, [r5, #12]
 810da3c:	059a      	lsls	r2, r3, #22
 810da3e:	d402      	bmi.n	810da46 <_vfiprintf_r+0x32>
 810da40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810da42:	f7ff f88a 	bl	810cb5a <__retarget_lock_acquire_recursive>
 810da46:	89ab      	ldrh	r3, [r5, #12]
 810da48:	071b      	lsls	r3, r3, #28
 810da4a:	d501      	bpl.n	810da50 <_vfiprintf_r+0x3c>
 810da4c:	692b      	ldr	r3, [r5, #16]
 810da4e:	b9eb      	cbnz	r3, 810da8c <_vfiprintf_r+0x78>
 810da50:	4629      	mov	r1, r5
 810da52:	4630      	mov	r0, r6
 810da54:	f7fd fc6c 	bl	810b330 <__swsetup_r>
 810da58:	b1c0      	cbz	r0, 810da8c <_vfiprintf_r+0x78>
 810da5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810da5c:	07dc      	lsls	r4, r3, #31
 810da5e:	d50e      	bpl.n	810da7e <_vfiprintf_r+0x6a>
 810da60:	f04f 30ff 	mov.w	r0, #4294967295
 810da64:	b01d      	add	sp, #116	; 0x74
 810da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810da6a:	4b7b      	ldr	r3, [pc, #492]	; (810dc58 <_vfiprintf_r+0x244>)
 810da6c:	429d      	cmp	r5, r3
 810da6e:	d101      	bne.n	810da74 <_vfiprintf_r+0x60>
 810da70:	68b5      	ldr	r5, [r6, #8]
 810da72:	e7df      	b.n	810da34 <_vfiprintf_r+0x20>
 810da74:	4b79      	ldr	r3, [pc, #484]	; (810dc5c <_vfiprintf_r+0x248>)
 810da76:	429d      	cmp	r5, r3
 810da78:	bf08      	it	eq
 810da7a:	68f5      	ldreq	r5, [r6, #12]
 810da7c:	e7da      	b.n	810da34 <_vfiprintf_r+0x20>
 810da7e:	89ab      	ldrh	r3, [r5, #12]
 810da80:	0598      	lsls	r0, r3, #22
 810da82:	d4ed      	bmi.n	810da60 <_vfiprintf_r+0x4c>
 810da84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810da86:	f7ff f869 	bl	810cb5c <__retarget_lock_release_recursive>
 810da8a:	e7e9      	b.n	810da60 <_vfiprintf_r+0x4c>
 810da8c:	2300      	movs	r3, #0
 810da8e:	9309      	str	r3, [sp, #36]	; 0x24
 810da90:	2320      	movs	r3, #32
 810da92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810da96:	f8cd 800c 	str.w	r8, [sp, #12]
 810da9a:	2330      	movs	r3, #48	; 0x30
 810da9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810dc60 <_vfiprintf_r+0x24c>
 810daa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810daa4:	f04f 0901 	mov.w	r9, #1
 810daa8:	4623      	mov	r3, r4
 810daaa:	469a      	mov	sl, r3
 810daac:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dab0:	b10a      	cbz	r2, 810dab6 <_vfiprintf_r+0xa2>
 810dab2:	2a25      	cmp	r2, #37	; 0x25
 810dab4:	d1f9      	bne.n	810daaa <_vfiprintf_r+0x96>
 810dab6:	ebba 0b04 	subs.w	fp, sl, r4
 810daba:	d00b      	beq.n	810dad4 <_vfiprintf_r+0xc0>
 810dabc:	465b      	mov	r3, fp
 810dabe:	4622      	mov	r2, r4
 810dac0:	4629      	mov	r1, r5
 810dac2:	4630      	mov	r0, r6
 810dac4:	f7ff ff93 	bl	810d9ee <__sfputs_r>
 810dac8:	3001      	adds	r0, #1
 810daca:	f000 80aa 	beq.w	810dc22 <_vfiprintf_r+0x20e>
 810dace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810dad0:	445a      	add	r2, fp
 810dad2:	9209      	str	r2, [sp, #36]	; 0x24
 810dad4:	f89a 3000 	ldrb.w	r3, [sl]
 810dad8:	2b00      	cmp	r3, #0
 810dada:	f000 80a2 	beq.w	810dc22 <_vfiprintf_r+0x20e>
 810dade:	2300      	movs	r3, #0
 810dae0:	f04f 32ff 	mov.w	r2, #4294967295
 810dae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810dae8:	f10a 0a01 	add.w	sl, sl, #1
 810daec:	9304      	str	r3, [sp, #16]
 810daee:	9307      	str	r3, [sp, #28]
 810daf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810daf4:	931a      	str	r3, [sp, #104]	; 0x68
 810daf6:	4654      	mov	r4, sl
 810daf8:	2205      	movs	r2, #5
 810dafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dafe:	4858      	ldr	r0, [pc, #352]	; (810dc60 <_vfiprintf_r+0x24c>)
 810db00:	f7f2 fbf6 	bl	81002f0 <memchr>
 810db04:	9a04      	ldr	r2, [sp, #16]
 810db06:	b9d8      	cbnz	r0, 810db40 <_vfiprintf_r+0x12c>
 810db08:	06d1      	lsls	r1, r2, #27
 810db0a:	bf44      	itt	mi
 810db0c:	2320      	movmi	r3, #32
 810db0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810db12:	0713      	lsls	r3, r2, #28
 810db14:	bf44      	itt	mi
 810db16:	232b      	movmi	r3, #43	; 0x2b
 810db18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810db1c:	f89a 3000 	ldrb.w	r3, [sl]
 810db20:	2b2a      	cmp	r3, #42	; 0x2a
 810db22:	d015      	beq.n	810db50 <_vfiprintf_r+0x13c>
 810db24:	9a07      	ldr	r2, [sp, #28]
 810db26:	4654      	mov	r4, sl
 810db28:	2000      	movs	r0, #0
 810db2a:	f04f 0c0a 	mov.w	ip, #10
 810db2e:	4621      	mov	r1, r4
 810db30:	f811 3b01 	ldrb.w	r3, [r1], #1
 810db34:	3b30      	subs	r3, #48	; 0x30
 810db36:	2b09      	cmp	r3, #9
 810db38:	d94e      	bls.n	810dbd8 <_vfiprintf_r+0x1c4>
 810db3a:	b1b0      	cbz	r0, 810db6a <_vfiprintf_r+0x156>
 810db3c:	9207      	str	r2, [sp, #28]
 810db3e:	e014      	b.n	810db6a <_vfiprintf_r+0x156>
 810db40:	eba0 0308 	sub.w	r3, r0, r8
 810db44:	fa09 f303 	lsl.w	r3, r9, r3
 810db48:	4313      	orrs	r3, r2
 810db4a:	9304      	str	r3, [sp, #16]
 810db4c:	46a2      	mov	sl, r4
 810db4e:	e7d2      	b.n	810daf6 <_vfiprintf_r+0xe2>
 810db50:	9b03      	ldr	r3, [sp, #12]
 810db52:	1d19      	adds	r1, r3, #4
 810db54:	681b      	ldr	r3, [r3, #0]
 810db56:	9103      	str	r1, [sp, #12]
 810db58:	2b00      	cmp	r3, #0
 810db5a:	bfbb      	ittet	lt
 810db5c:	425b      	neglt	r3, r3
 810db5e:	f042 0202 	orrlt.w	r2, r2, #2
 810db62:	9307      	strge	r3, [sp, #28]
 810db64:	9307      	strlt	r3, [sp, #28]
 810db66:	bfb8      	it	lt
 810db68:	9204      	strlt	r2, [sp, #16]
 810db6a:	7823      	ldrb	r3, [r4, #0]
 810db6c:	2b2e      	cmp	r3, #46	; 0x2e
 810db6e:	d10c      	bne.n	810db8a <_vfiprintf_r+0x176>
 810db70:	7863      	ldrb	r3, [r4, #1]
 810db72:	2b2a      	cmp	r3, #42	; 0x2a
 810db74:	d135      	bne.n	810dbe2 <_vfiprintf_r+0x1ce>
 810db76:	9b03      	ldr	r3, [sp, #12]
 810db78:	1d1a      	adds	r2, r3, #4
 810db7a:	681b      	ldr	r3, [r3, #0]
 810db7c:	9203      	str	r2, [sp, #12]
 810db7e:	2b00      	cmp	r3, #0
 810db80:	bfb8      	it	lt
 810db82:	f04f 33ff 	movlt.w	r3, #4294967295
 810db86:	3402      	adds	r4, #2
 810db88:	9305      	str	r3, [sp, #20]
 810db8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810dc70 <_vfiprintf_r+0x25c>
 810db8e:	7821      	ldrb	r1, [r4, #0]
 810db90:	2203      	movs	r2, #3
 810db92:	4650      	mov	r0, sl
 810db94:	f7f2 fbac 	bl	81002f0 <memchr>
 810db98:	b140      	cbz	r0, 810dbac <_vfiprintf_r+0x198>
 810db9a:	2340      	movs	r3, #64	; 0x40
 810db9c:	eba0 000a 	sub.w	r0, r0, sl
 810dba0:	fa03 f000 	lsl.w	r0, r3, r0
 810dba4:	9b04      	ldr	r3, [sp, #16]
 810dba6:	4303      	orrs	r3, r0
 810dba8:	3401      	adds	r4, #1
 810dbaa:	9304      	str	r3, [sp, #16]
 810dbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dbb0:	482c      	ldr	r0, [pc, #176]	; (810dc64 <_vfiprintf_r+0x250>)
 810dbb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810dbb6:	2206      	movs	r2, #6
 810dbb8:	f7f2 fb9a 	bl	81002f0 <memchr>
 810dbbc:	2800      	cmp	r0, #0
 810dbbe:	d03f      	beq.n	810dc40 <_vfiprintf_r+0x22c>
 810dbc0:	4b29      	ldr	r3, [pc, #164]	; (810dc68 <_vfiprintf_r+0x254>)
 810dbc2:	bb1b      	cbnz	r3, 810dc0c <_vfiprintf_r+0x1f8>
 810dbc4:	9b03      	ldr	r3, [sp, #12]
 810dbc6:	3307      	adds	r3, #7
 810dbc8:	f023 0307 	bic.w	r3, r3, #7
 810dbcc:	3308      	adds	r3, #8
 810dbce:	9303      	str	r3, [sp, #12]
 810dbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810dbd2:	443b      	add	r3, r7
 810dbd4:	9309      	str	r3, [sp, #36]	; 0x24
 810dbd6:	e767      	b.n	810daa8 <_vfiprintf_r+0x94>
 810dbd8:	fb0c 3202 	mla	r2, ip, r2, r3
 810dbdc:	460c      	mov	r4, r1
 810dbde:	2001      	movs	r0, #1
 810dbe0:	e7a5      	b.n	810db2e <_vfiprintf_r+0x11a>
 810dbe2:	2300      	movs	r3, #0
 810dbe4:	3401      	adds	r4, #1
 810dbe6:	9305      	str	r3, [sp, #20]
 810dbe8:	4619      	mov	r1, r3
 810dbea:	f04f 0c0a 	mov.w	ip, #10
 810dbee:	4620      	mov	r0, r4
 810dbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810dbf4:	3a30      	subs	r2, #48	; 0x30
 810dbf6:	2a09      	cmp	r2, #9
 810dbf8:	d903      	bls.n	810dc02 <_vfiprintf_r+0x1ee>
 810dbfa:	2b00      	cmp	r3, #0
 810dbfc:	d0c5      	beq.n	810db8a <_vfiprintf_r+0x176>
 810dbfe:	9105      	str	r1, [sp, #20]
 810dc00:	e7c3      	b.n	810db8a <_vfiprintf_r+0x176>
 810dc02:	fb0c 2101 	mla	r1, ip, r1, r2
 810dc06:	4604      	mov	r4, r0
 810dc08:	2301      	movs	r3, #1
 810dc0a:	e7f0      	b.n	810dbee <_vfiprintf_r+0x1da>
 810dc0c:	ab03      	add	r3, sp, #12
 810dc0e:	9300      	str	r3, [sp, #0]
 810dc10:	462a      	mov	r2, r5
 810dc12:	4b16      	ldr	r3, [pc, #88]	; (810dc6c <_vfiprintf_r+0x258>)
 810dc14:	a904      	add	r1, sp, #16
 810dc16:	4630      	mov	r0, r6
 810dc18:	f7fb fdea 	bl	81097f0 <_printf_float>
 810dc1c:	4607      	mov	r7, r0
 810dc1e:	1c78      	adds	r0, r7, #1
 810dc20:	d1d6      	bne.n	810dbd0 <_vfiprintf_r+0x1bc>
 810dc22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810dc24:	07d9      	lsls	r1, r3, #31
 810dc26:	d405      	bmi.n	810dc34 <_vfiprintf_r+0x220>
 810dc28:	89ab      	ldrh	r3, [r5, #12]
 810dc2a:	059a      	lsls	r2, r3, #22
 810dc2c:	d402      	bmi.n	810dc34 <_vfiprintf_r+0x220>
 810dc2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810dc30:	f7fe ff94 	bl	810cb5c <__retarget_lock_release_recursive>
 810dc34:	89ab      	ldrh	r3, [r5, #12]
 810dc36:	065b      	lsls	r3, r3, #25
 810dc38:	f53f af12 	bmi.w	810da60 <_vfiprintf_r+0x4c>
 810dc3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810dc3e:	e711      	b.n	810da64 <_vfiprintf_r+0x50>
 810dc40:	ab03      	add	r3, sp, #12
 810dc42:	9300      	str	r3, [sp, #0]
 810dc44:	462a      	mov	r2, r5
 810dc46:	4b09      	ldr	r3, [pc, #36]	; (810dc6c <_vfiprintf_r+0x258>)
 810dc48:	a904      	add	r1, sp, #16
 810dc4a:	4630      	mov	r0, r6
 810dc4c:	f7fc f874 	bl	8109d38 <_printf_i>
 810dc50:	e7e4      	b.n	810dc1c <_vfiprintf_r+0x208>
 810dc52:	bf00      	nop
 810dc54:	0810e27c 	.word	0x0810e27c
 810dc58:	0810e29c 	.word	0x0810e29c
 810dc5c:	0810e25c 	.word	0x0810e25c
 810dc60:	0810e494 	.word	0x0810e494
 810dc64:	0810e49e 	.word	0x0810e49e
 810dc68:	081097f1 	.word	0x081097f1
 810dc6c:	0810d9ef 	.word	0x0810d9ef
 810dc70:	0810e49a 	.word	0x0810e49a
 810dc74:	00000000 	.word	0x00000000

0810dc78 <nan>:
 810dc78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810dc80 <nan+0x8>
 810dc7c:	4770      	bx	lr
 810dc7e:	bf00      	nop
 810dc80:	00000000 	.word	0x00000000
 810dc84:	7ff80000 	.word	0x7ff80000

0810dc88 <__sread>:
 810dc88:	b510      	push	{r4, lr}
 810dc8a:	460c      	mov	r4, r1
 810dc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dc90:	f000 f906 	bl	810dea0 <_read_r>
 810dc94:	2800      	cmp	r0, #0
 810dc96:	bfab      	itete	ge
 810dc98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810dc9a:	89a3      	ldrhlt	r3, [r4, #12]
 810dc9c:	181b      	addge	r3, r3, r0
 810dc9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810dca2:	bfac      	ite	ge
 810dca4:	6563      	strge	r3, [r4, #84]	; 0x54
 810dca6:	81a3      	strhlt	r3, [r4, #12]
 810dca8:	bd10      	pop	{r4, pc}

0810dcaa <__swrite>:
 810dcaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dcae:	461f      	mov	r7, r3
 810dcb0:	898b      	ldrh	r3, [r1, #12]
 810dcb2:	05db      	lsls	r3, r3, #23
 810dcb4:	4605      	mov	r5, r0
 810dcb6:	460c      	mov	r4, r1
 810dcb8:	4616      	mov	r6, r2
 810dcba:	d505      	bpl.n	810dcc8 <__swrite+0x1e>
 810dcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dcc0:	2302      	movs	r3, #2
 810dcc2:	2200      	movs	r2, #0
 810dcc4:	f000 f8b8 	bl	810de38 <_lseek_r>
 810dcc8:	89a3      	ldrh	r3, [r4, #12]
 810dcca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810dcce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810dcd2:	81a3      	strh	r3, [r4, #12]
 810dcd4:	4632      	mov	r2, r6
 810dcd6:	463b      	mov	r3, r7
 810dcd8:	4628      	mov	r0, r5
 810dcda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810dcde:	f000 b837 	b.w	810dd50 <_write_r>

0810dce2 <__sseek>:
 810dce2:	b510      	push	{r4, lr}
 810dce4:	460c      	mov	r4, r1
 810dce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dcea:	f000 f8a5 	bl	810de38 <_lseek_r>
 810dcee:	1c43      	adds	r3, r0, #1
 810dcf0:	89a3      	ldrh	r3, [r4, #12]
 810dcf2:	bf15      	itete	ne
 810dcf4:	6560      	strne	r0, [r4, #84]	; 0x54
 810dcf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810dcfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810dcfe:	81a3      	strheq	r3, [r4, #12]
 810dd00:	bf18      	it	ne
 810dd02:	81a3      	strhne	r3, [r4, #12]
 810dd04:	bd10      	pop	{r4, pc}

0810dd06 <__sclose>:
 810dd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dd0a:	f000 b851 	b.w	810ddb0 <_close_r>

0810dd0e <strncmp>:
 810dd0e:	b510      	push	{r4, lr}
 810dd10:	b17a      	cbz	r2, 810dd32 <strncmp+0x24>
 810dd12:	4603      	mov	r3, r0
 810dd14:	3901      	subs	r1, #1
 810dd16:	1884      	adds	r4, r0, r2
 810dd18:	f813 0b01 	ldrb.w	r0, [r3], #1
 810dd1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810dd20:	4290      	cmp	r0, r2
 810dd22:	d101      	bne.n	810dd28 <strncmp+0x1a>
 810dd24:	42a3      	cmp	r3, r4
 810dd26:	d101      	bne.n	810dd2c <strncmp+0x1e>
 810dd28:	1a80      	subs	r0, r0, r2
 810dd2a:	bd10      	pop	{r4, pc}
 810dd2c:	2800      	cmp	r0, #0
 810dd2e:	d1f3      	bne.n	810dd18 <strncmp+0xa>
 810dd30:	e7fa      	b.n	810dd28 <strncmp+0x1a>
 810dd32:	4610      	mov	r0, r2
 810dd34:	e7f9      	b.n	810dd2a <strncmp+0x1c>

0810dd36 <__ascii_wctomb>:
 810dd36:	b149      	cbz	r1, 810dd4c <__ascii_wctomb+0x16>
 810dd38:	2aff      	cmp	r2, #255	; 0xff
 810dd3a:	bf85      	ittet	hi
 810dd3c:	238a      	movhi	r3, #138	; 0x8a
 810dd3e:	6003      	strhi	r3, [r0, #0]
 810dd40:	700a      	strbls	r2, [r1, #0]
 810dd42:	f04f 30ff 	movhi.w	r0, #4294967295
 810dd46:	bf98      	it	ls
 810dd48:	2001      	movls	r0, #1
 810dd4a:	4770      	bx	lr
 810dd4c:	4608      	mov	r0, r1
 810dd4e:	4770      	bx	lr

0810dd50 <_write_r>:
 810dd50:	b538      	push	{r3, r4, r5, lr}
 810dd52:	4d07      	ldr	r5, [pc, #28]	; (810dd70 <_write_r+0x20>)
 810dd54:	4604      	mov	r4, r0
 810dd56:	4608      	mov	r0, r1
 810dd58:	4611      	mov	r1, r2
 810dd5a:	2200      	movs	r2, #0
 810dd5c:	602a      	str	r2, [r5, #0]
 810dd5e:	461a      	mov	r2, r3
 810dd60:	f7f4 fad9 	bl	8102316 <_write>
 810dd64:	1c43      	adds	r3, r0, #1
 810dd66:	d102      	bne.n	810dd6e <_write_r+0x1e>
 810dd68:	682b      	ldr	r3, [r5, #0]
 810dd6a:	b103      	cbz	r3, 810dd6e <_write_r+0x1e>
 810dd6c:	6023      	str	r3, [r4, #0]
 810dd6e:	bd38      	pop	{r3, r4, r5, pc}
 810dd70:	10000534 	.word	0x10000534

0810dd74 <__assert_func>:
 810dd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810dd76:	4614      	mov	r4, r2
 810dd78:	461a      	mov	r2, r3
 810dd7a:	4b09      	ldr	r3, [pc, #36]	; (810dda0 <__assert_func+0x2c>)
 810dd7c:	681b      	ldr	r3, [r3, #0]
 810dd7e:	4605      	mov	r5, r0
 810dd80:	68d8      	ldr	r0, [r3, #12]
 810dd82:	b14c      	cbz	r4, 810dd98 <__assert_func+0x24>
 810dd84:	4b07      	ldr	r3, [pc, #28]	; (810dda4 <__assert_func+0x30>)
 810dd86:	9100      	str	r1, [sp, #0]
 810dd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810dd8c:	4906      	ldr	r1, [pc, #24]	; (810dda8 <__assert_func+0x34>)
 810dd8e:	462b      	mov	r3, r5
 810dd90:	f000 f81e 	bl	810ddd0 <fiprintf>
 810dd94:	f000 f896 	bl	810dec4 <abort>
 810dd98:	4b04      	ldr	r3, [pc, #16]	; (810ddac <__assert_func+0x38>)
 810dd9a:	461c      	mov	r4, r3
 810dd9c:	e7f3      	b.n	810dd86 <__assert_func+0x12>
 810dd9e:	bf00      	nop
 810dda0:	10000014 	.word	0x10000014
 810dda4:	0810e4a5 	.word	0x0810e4a5
 810dda8:	0810e4b2 	.word	0x0810e4b2
 810ddac:	0810e4e0 	.word	0x0810e4e0

0810ddb0 <_close_r>:
 810ddb0:	b538      	push	{r3, r4, r5, lr}
 810ddb2:	4d06      	ldr	r5, [pc, #24]	; (810ddcc <_close_r+0x1c>)
 810ddb4:	2300      	movs	r3, #0
 810ddb6:	4604      	mov	r4, r0
 810ddb8:	4608      	mov	r0, r1
 810ddba:	602b      	str	r3, [r5, #0]
 810ddbc:	f7f4 fac7 	bl	810234e <_close>
 810ddc0:	1c43      	adds	r3, r0, #1
 810ddc2:	d102      	bne.n	810ddca <_close_r+0x1a>
 810ddc4:	682b      	ldr	r3, [r5, #0]
 810ddc6:	b103      	cbz	r3, 810ddca <_close_r+0x1a>
 810ddc8:	6023      	str	r3, [r4, #0]
 810ddca:	bd38      	pop	{r3, r4, r5, pc}
 810ddcc:	10000534 	.word	0x10000534

0810ddd0 <fiprintf>:
 810ddd0:	b40e      	push	{r1, r2, r3}
 810ddd2:	b503      	push	{r0, r1, lr}
 810ddd4:	4601      	mov	r1, r0
 810ddd6:	ab03      	add	r3, sp, #12
 810ddd8:	4805      	ldr	r0, [pc, #20]	; (810ddf0 <fiprintf+0x20>)
 810ddda:	f853 2b04 	ldr.w	r2, [r3], #4
 810ddde:	6800      	ldr	r0, [r0, #0]
 810dde0:	9301      	str	r3, [sp, #4]
 810dde2:	f7ff fe17 	bl	810da14 <_vfiprintf_r>
 810dde6:	b002      	add	sp, #8
 810dde8:	f85d eb04 	ldr.w	lr, [sp], #4
 810ddec:	b003      	add	sp, #12
 810ddee:	4770      	bx	lr
 810ddf0:	10000014 	.word	0x10000014

0810ddf4 <_fstat_r>:
 810ddf4:	b538      	push	{r3, r4, r5, lr}
 810ddf6:	4d07      	ldr	r5, [pc, #28]	; (810de14 <_fstat_r+0x20>)
 810ddf8:	2300      	movs	r3, #0
 810ddfa:	4604      	mov	r4, r0
 810ddfc:	4608      	mov	r0, r1
 810ddfe:	4611      	mov	r1, r2
 810de00:	602b      	str	r3, [r5, #0]
 810de02:	f7f4 fab0 	bl	8102366 <_fstat>
 810de06:	1c43      	adds	r3, r0, #1
 810de08:	d102      	bne.n	810de10 <_fstat_r+0x1c>
 810de0a:	682b      	ldr	r3, [r5, #0]
 810de0c:	b103      	cbz	r3, 810de10 <_fstat_r+0x1c>
 810de0e:	6023      	str	r3, [r4, #0]
 810de10:	bd38      	pop	{r3, r4, r5, pc}
 810de12:	bf00      	nop
 810de14:	10000534 	.word	0x10000534

0810de18 <_isatty_r>:
 810de18:	b538      	push	{r3, r4, r5, lr}
 810de1a:	4d06      	ldr	r5, [pc, #24]	; (810de34 <_isatty_r+0x1c>)
 810de1c:	2300      	movs	r3, #0
 810de1e:	4604      	mov	r4, r0
 810de20:	4608      	mov	r0, r1
 810de22:	602b      	str	r3, [r5, #0]
 810de24:	f7f4 faaf 	bl	8102386 <_isatty>
 810de28:	1c43      	adds	r3, r0, #1
 810de2a:	d102      	bne.n	810de32 <_isatty_r+0x1a>
 810de2c:	682b      	ldr	r3, [r5, #0]
 810de2e:	b103      	cbz	r3, 810de32 <_isatty_r+0x1a>
 810de30:	6023      	str	r3, [r4, #0]
 810de32:	bd38      	pop	{r3, r4, r5, pc}
 810de34:	10000534 	.word	0x10000534

0810de38 <_lseek_r>:
 810de38:	b538      	push	{r3, r4, r5, lr}
 810de3a:	4d07      	ldr	r5, [pc, #28]	; (810de58 <_lseek_r+0x20>)
 810de3c:	4604      	mov	r4, r0
 810de3e:	4608      	mov	r0, r1
 810de40:	4611      	mov	r1, r2
 810de42:	2200      	movs	r2, #0
 810de44:	602a      	str	r2, [r5, #0]
 810de46:	461a      	mov	r2, r3
 810de48:	f7f4 faa8 	bl	810239c <_lseek>
 810de4c:	1c43      	adds	r3, r0, #1
 810de4e:	d102      	bne.n	810de56 <_lseek_r+0x1e>
 810de50:	682b      	ldr	r3, [r5, #0]
 810de52:	b103      	cbz	r3, 810de56 <_lseek_r+0x1e>
 810de54:	6023      	str	r3, [r4, #0]
 810de56:	bd38      	pop	{r3, r4, r5, pc}
 810de58:	10000534 	.word	0x10000534

0810de5c <memmove>:
 810de5c:	4288      	cmp	r0, r1
 810de5e:	b510      	push	{r4, lr}
 810de60:	eb01 0402 	add.w	r4, r1, r2
 810de64:	d902      	bls.n	810de6c <memmove+0x10>
 810de66:	4284      	cmp	r4, r0
 810de68:	4623      	mov	r3, r4
 810de6a:	d807      	bhi.n	810de7c <memmove+0x20>
 810de6c:	1e43      	subs	r3, r0, #1
 810de6e:	42a1      	cmp	r1, r4
 810de70:	d008      	beq.n	810de84 <memmove+0x28>
 810de72:	f811 2b01 	ldrb.w	r2, [r1], #1
 810de76:	f803 2f01 	strb.w	r2, [r3, #1]!
 810de7a:	e7f8      	b.n	810de6e <memmove+0x12>
 810de7c:	4402      	add	r2, r0
 810de7e:	4601      	mov	r1, r0
 810de80:	428a      	cmp	r2, r1
 810de82:	d100      	bne.n	810de86 <memmove+0x2a>
 810de84:	bd10      	pop	{r4, pc}
 810de86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810de8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810de8e:	e7f7      	b.n	810de80 <memmove+0x24>

0810de90 <_malloc_usable_size_r>:
 810de90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810de94:	1f18      	subs	r0, r3, #4
 810de96:	2b00      	cmp	r3, #0
 810de98:	bfbc      	itt	lt
 810de9a:	580b      	ldrlt	r3, [r1, r0]
 810de9c:	18c0      	addlt	r0, r0, r3
 810de9e:	4770      	bx	lr

0810dea0 <_read_r>:
 810dea0:	b538      	push	{r3, r4, r5, lr}
 810dea2:	4d07      	ldr	r5, [pc, #28]	; (810dec0 <_read_r+0x20>)
 810dea4:	4604      	mov	r4, r0
 810dea6:	4608      	mov	r0, r1
 810dea8:	4611      	mov	r1, r2
 810deaa:	2200      	movs	r2, #0
 810deac:	602a      	str	r2, [r5, #0]
 810deae:	461a      	mov	r2, r3
 810deb0:	f7f4 fa14 	bl	81022dc <_read>
 810deb4:	1c43      	adds	r3, r0, #1
 810deb6:	d102      	bne.n	810debe <_read_r+0x1e>
 810deb8:	682b      	ldr	r3, [r5, #0]
 810deba:	b103      	cbz	r3, 810debe <_read_r+0x1e>
 810debc:	6023      	str	r3, [r4, #0]
 810debe:	bd38      	pop	{r3, r4, r5, pc}
 810dec0:	10000534 	.word	0x10000534

0810dec4 <abort>:
 810dec4:	b508      	push	{r3, lr}
 810dec6:	2006      	movs	r0, #6
 810dec8:	f000 f82c 	bl	810df24 <raise>
 810decc:	2001      	movs	r0, #1
 810dece:	f7f4 f9fb 	bl	81022c8 <_exit>

0810ded2 <_raise_r>:
 810ded2:	291f      	cmp	r1, #31
 810ded4:	b538      	push	{r3, r4, r5, lr}
 810ded6:	4604      	mov	r4, r0
 810ded8:	460d      	mov	r5, r1
 810deda:	d904      	bls.n	810dee6 <_raise_r+0x14>
 810dedc:	2316      	movs	r3, #22
 810dede:	6003      	str	r3, [r0, #0]
 810dee0:	f04f 30ff 	mov.w	r0, #4294967295
 810dee4:	bd38      	pop	{r3, r4, r5, pc}
 810dee6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810dee8:	b112      	cbz	r2, 810def0 <_raise_r+0x1e>
 810deea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810deee:	b94b      	cbnz	r3, 810df04 <_raise_r+0x32>
 810def0:	4620      	mov	r0, r4
 810def2:	f000 f831 	bl	810df58 <_getpid_r>
 810def6:	462a      	mov	r2, r5
 810def8:	4601      	mov	r1, r0
 810defa:	4620      	mov	r0, r4
 810defc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810df00:	f000 b818 	b.w	810df34 <_kill_r>
 810df04:	2b01      	cmp	r3, #1
 810df06:	d00a      	beq.n	810df1e <_raise_r+0x4c>
 810df08:	1c59      	adds	r1, r3, #1
 810df0a:	d103      	bne.n	810df14 <_raise_r+0x42>
 810df0c:	2316      	movs	r3, #22
 810df0e:	6003      	str	r3, [r0, #0]
 810df10:	2001      	movs	r0, #1
 810df12:	e7e7      	b.n	810dee4 <_raise_r+0x12>
 810df14:	2400      	movs	r4, #0
 810df16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810df1a:	4628      	mov	r0, r5
 810df1c:	4798      	blx	r3
 810df1e:	2000      	movs	r0, #0
 810df20:	e7e0      	b.n	810dee4 <_raise_r+0x12>
	...

0810df24 <raise>:
 810df24:	4b02      	ldr	r3, [pc, #8]	; (810df30 <raise+0xc>)
 810df26:	4601      	mov	r1, r0
 810df28:	6818      	ldr	r0, [r3, #0]
 810df2a:	f7ff bfd2 	b.w	810ded2 <_raise_r>
 810df2e:	bf00      	nop
 810df30:	10000014 	.word	0x10000014

0810df34 <_kill_r>:
 810df34:	b538      	push	{r3, r4, r5, lr}
 810df36:	4d07      	ldr	r5, [pc, #28]	; (810df54 <_kill_r+0x20>)
 810df38:	2300      	movs	r3, #0
 810df3a:	4604      	mov	r4, r0
 810df3c:	4608      	mov	r0, r1
 810df3e:	4611      	mov	r1, r2
 810df40:	602b      	str	r3, [r5, #0]
 810df42:	f7f4 f9b1 	bl	81022a8 <_kill>
 810df46:	1c43      	adds	r3, r0, #1
 810df48:	d102      	bne.n	810df50 <_kill_r+0x1c>
 810df4a:	682b      	ldr	r3, [r5, #0]
 810df4c:	b103      	cbz	r3, 810df50 <_kill_r+0x1c>
 810df4e:	6023      	str	r3, [r4, #0]
 810df50:	bd38      	pop	{r3, r4, r5, pc}
 810df52:	bf00      	nop
 810df54:	10000534 	.word	0x10000534

0810df58 <_getpid_r>:
 810df58:	f7f4 b99e 	b.w	8102298 <_getpid>

0810df5c <_init>:
 810df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810df5e:	bf00      	nop
 810df60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810df62:	bc08      	pop	{r3}
 810df64:	469e      	mov	lr, r3
 810df66:	4770      	bx	lr

0810df68 <_fini>:
 810df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810df6a:	bf00      	nop
 810df6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810df6e:	bc08      	pop	{r3}
 810df70:	469e      	mov	lr, r3
 810df72:	4770      	bx	lr
