
Ballbot_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df34  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0810e1d8  0810e1d8  0001e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e75c  0810e75c  0001e75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e764  0810e764  0001e764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e768  0810e768  0001e768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  10000000  0810e76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000036c  100001f4  0810e960  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000560  0810e960  00020560  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ce93  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003175  00000000  00000000  0003d0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015b8  00000000  00000000  00040230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014a0  00000000  00000000  000417e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c5c8  00000000  00000000  00042c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001db41  00000000  00000000  0007f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018c1f3  00000000  00000000  0009cd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00228f84  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073c8  00000000  00000000  00228fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f4 	.word	0x100001f4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e1bc 	.word	0x0810e1bc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f8 	.word	0x100001f8
 81002dc:	0810e1bc 	.word	0x0810e1bc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <IMU_MPU6050_Init>:
//65.5 LSB/°/s for ± 500 °/s
float Acc_LSB_Sensitivity = 8192.0;
float Gyro_LSB_Sensitivity = 65.5;


int8_t IMU_MPU6050_Init (void){
 8101138:	b580      	push	{r7, lr}
 810113a:	b086      	sub	sp, #24
 810113c:	af04      	add	r7, sp, #16
	uint8_t Data;
	HAL_StatusTypeDef ret;

	//Double check I2C communication
	ret = HAL_I2C_IsDeviceReady (&hi2c1,MPU6050_ADDR, 2, 1000); //2 trials, 1000ms each
 810113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101142:	2202      	movs	r2, #2
 8101144:	21d0      	movs	r1, #208	; 0xd0
 8101146:	485f      	ldr	r0, [pc, #380]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101148:	f003 fdb8 	bl	8104cbc <HAL_I2C_IsDeviceReady>
 810114c:	4603      	mov	r3, r0
 810114e:	71fb      	strb	r3, [r7, #7]
	if(ret!=HAL_OK){
 8101150:	79fb      	ldrb	r3, [r7, #7]
 8101152:	2b00      	cmp	r3, #0
 8101154:	d002      	beq.n	810115c <IMU_MPU6050_Init+0x24>
		return -1;
 8101156:	f04f 33ff 	mov.w	r3, #4294967295
 810115a:	e0af      	b.n	81012bc <IMU_MPU6050_Init+0x184>
	}
	uint8_t check;
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 810115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101160:	9302      	str	r3, [sp, #8]
 8101162:	2301      	movs	r3, #1
 8101164:	9301      	str	r3, [sp, #4]
 8101166:	1d7b      	adds	r3, r7, #5
 8101168:	9300      	str	r3, [sp, #0]
 810116a:	2301      	movs	r3, #1
 810116c:	2275      	movs	r2, #117	; 0x75
 810116e:	21d0      	movs	r1, #208	; 0xd0
 8101170:	4854      	ldr	r0, [pc, #336]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101172:	f003 fc89 	bl	8104a88 <HAL_I2C_Mem_Read>
 8101176:	4603      	mov	r3, r0
 8101178:	71fb      	strb	r3, [r7, #7]
	if((ret!=HAL_OK) || (check!=0x68)){
 810117a:	79fb      	ldrb	r3, [r7, #7]
 810117c:	2b00      	cmp	r3, #0
 810117e:	d102      	bne.n	8101186 <IMU_MPU6050_Init+0x4e>
 8101180:	797b      	ldrb	r3, [r7, #5]
 8101182:	2b68      	cmp	r3, #104	; 0x68
 8101184:	d002      	beq.n	810118c <IMU_MPU6050_Init+0x54>
		return -1;
 8101186:	f04f 33ff 	mov.w	r3, #4294967295
 810118a:	e097      	b.n	81012bc <IMU_MPU6050_Init+0x184>

	//Initialize

	//Power Management 1 register
	//sensor's normal operation
	Data = 0;
 810118c:	2300      	movs	r3, #0
 810118e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8101190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101194:	9302      	str	r3, [sp, #8]
 8101196:	2301      	movs	r3, #1
 8101198:	9301      	str	r3, [sp, #4]
 810119a:	1dbb      	adds	r3, r7, #6
 810119c:	9300      	str	r3, [sp, #0]
 810119e:	2301      	movs	r3, #1
 81011a0:	226b      	movs	r2, #107	; 0x6b
 81011a2:	21d0      	movs	r1, #208	; 0xd0
 81011a4:	4847      	ldr	r0, [pc, #284]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011a6:	f003 fb5b 	bl	8104860 <HAL_I2C_Mem_Write>
 81011aa:	4603      	mov	r3, r0
 81011ac:	71fb      	strb	r3, [r7, #7]

	//Accelerometer Configuration register
	//set accelerometer's full scale range to ± 4g (AFS_SEL=1)
	//no self-test
	Data = 0x08;
 81011ae:	2308      	movs	r3, #8
 81011b0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 81011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011b6:	9302      	str	r3, [sp, #8]
 81011b8:	2301      	movs	r3, #1
 81011ba:	9301      	str	r3, [sp, #4]
 81011bc:	1dbb      	adds	r3, r7, #6
 81011be:	9300      	str	r3, [sp, #0]
 81011c0:	2301      	movs	r3, #1
 81011c2:	221c      	movs	r2, #28
 81011c4:	21d0      	movs	r1, #208	; 0xd0
 81011c6:	483f      	ldr	r0, [pc, #252]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011c8:	f003 fb4a 	bl	8104860 <HAL_I2C_Mem_Write>
 81011cc:	4603      	mov	r3, r0
 81011ce:	71fb      	strb	r3, [r7, #7]

	//Gyroscope Configuration register
	//set gyroscope's full scale range to ± 500 °/s (FS_SEL=1)
	//no self-test
	Data = 0x08;
 81011d0:	2308      	movs	r3, #8
 81011d2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 81011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011d8:	9302      	str	r3, [sp, #8]
 81011da:	2301      	movs	r3, #1
 81011dc:	9301      	str	r3, [sp, #4]
 81011de:	1dbb      	adds	r3, r7, #6
 81011e0:	9300      	str	r3, [sp, #0]
 81011e2:	2301      	movs	r3, #1
 81011e4:	221b      	movs	r2, #27
 81011e6:	21d0      	movs	r1, #208	; 0xd0
 81011e8:	4836      	ldr	r0, [pc, #216]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011ea:	f003 fb39 	bl	8104860 <HAL_I2C_Mem_Write>
	//enable Digital Low Pass Filter(DLPF) with the highest bandwidth (DLPF_CFG=1):
	//Acc: 184Hz bandwidth, 2.0ms delay
	//Gyro: 188Hz bandwidth, 1.9ms delay
	//Note with DLPF gyroscope frequency reduces to 1kHz
	//Note acc max frequency is 1KHz
	Data = 0x01;
 81011ee:	2301      	movs	r3, #1
 81011f0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 81011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011f6:	9302      	str	r3, [sp, #8]
 81011f8:	2301      	movs	r3, #1
 81011fa:	9301      	str	r3, [sp, #4]
 81011fc:	1dbb      	adds	r3, r7, #6
 81011fe:	9300      	str	r3, [sp, #0]
 8101200:	2301      	movs	r3, #1
 8101202:	221a      	movs	r2, #26
 8101204:	21d0      	movs	r1, #208	; 0xd0
 8101206:	482f      	ldr	r0, [pc, #188]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101208:	f003 fb2a 	bl	8104860 <HAL_I2C_Mem_Write>
 810120c:	4603      	mov	r3, r0
 810120e:	71fb      	strb	r3, [r7, #7]

	//Sample Rate Divider register
	//Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
	//set sample rate to 20Hz, 50ms (SMPLRT_DIV=49)
	Data = 0x31;
 8101210:	2331      	movs	r3, #49	; 0x31
 8101212:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8101214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101218:	9302      	str	r3, [sp, #8]
 810121a:	2301      	movs	r3, #1
 810121c:	9301      	str	r3, [sp, #4]
 810121e:	1dbb      	adds	r3, r7, #6
 8101220:	9300      	str	r3, [sp, #0]
 8101222:	2301      	movs	r3, #1
 8101224:	2219      	movs	r2, #25
 8101226:	21d0      	movs	r1, #208	; 0xd0
 8101228:	4826      	ldr	r0, [pc, #152]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810122a:	f003 fb19 	bl	8104860 <HAL_I2C_Mem_Write>
 810122e:	4603      	mov	r3, r0
 8101230:	71fb      	strb	r3, [r7, #7]

	//User Control register
	//enable FIFO buffer
	Data = 0x40;
 8101232:	2340      	movs	r3, #64	; 0x40
 8101234:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810123a:	9302      	str	r3, [sp, #8]
 810123c:	2301      	movs	r3, #1
 810123e:	9301      	str	r3, [sp, #4]
 8101240:	1dbb      	adds	r3, r7, #6
 8101242:	9300      	str	r3, [sp, #0]
 8101244:	2301      	movs	r3, #1
 8101246:	226a      	movs	r2, #106	; 0x6a
 8101248:	21d0      	movs	r1, #208	; 0xd0
 810124a:	481e      	ldr	r0, [pc, #120]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810124c:	f003 fb08 	bl	8104860 <HAL_I2C_Mem_Write>
 8101250:	4603      	mov	r3, r0
 8101252:	71fb      	strb	r3, [r7, #7]

	//FIFO Enable register
	//select accelerometer's and gyroscope's data for FIFO buffer
	Data = 0x78;
 8101254:	2378      	movs	r3, #120	; 0x78
 8101256:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8101258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810125c:	9302      	str	r3, [sp, #8]
 810125e:	2301      	movs	r3, #1
 8101260:	9301      	str	r3, [sp, #4]
 8101262:	1dbb      	adds	r3, r7, #6
 8101264:	9300      	str	r3, [sp, #0]
 8101266:	2301      	movs	r3, #1
 8101268:	2223      	movs	r2, #35	; 0x23
 810126a:	21d0      	movs	r1, #208	; 0xd0
 810126c:	4815      	ldr	r0, [pc, #84]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810126e:	f003 faf7 	bl	8104860 <HAL_I2C_Mem_Write>
 8101272:	4603      	mov	r3, r0
 8101274:	71fb      	strb	r3, [r7, #7]

	//INT Pin / Bypass Enable Configuration register
	//configure interrupt signal (default)
	Data = 0x00;
 8101276:	2300      	movs	r3, #0
 8101278:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 810127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810127e:	9302      	str	r3, [sp, #8]
 8101280:	2301      	movs	r3, #1
 8101282:	9301      	str	r3, [sp, #4]
 8101284:	1dbb      	adds	r3, r7, #6
 8101286:	9300      	str	r3, [sp, #0]
 8101288:	2301      	movs	r3, #1
 810128a:	2237      	movs	r2, #55	; 0x37
 810128c:	21d0      	movs	r1, #208	; 0xd0
 810128e:	480d      	ldr	r0, [pc, #52]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101290:	f003 fae6 	bl	8104860 <HAL_I2C_Mem_Write>
 8101294:	4603      	mov	r3, r0
 8101296:	71fb      	strb	r3, [r7, #7]

	//Interrupt Enable register
	//enable Data Ready interrupt (DATA_RDY_EN=1)
	//(write operation to all of the sensor registers has been completed)
	Data = 0x01;
 8101298:	2301      	movs	r3, #1
 810129a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, 1000);
 810129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012a0:	9302      	str	r3, [sp, #8]
 81012a2:	2301      	movs	r3, #1
 81012a4:	9301      	str	r3, [sp, #4]
 81012a6:	1dbb      	adds	r3, r7, #6
 81012a8:	9300      	str	r3, [sp, #0]
 81012aa:	2301      	movs	r3, #1
 81012ac:	2238      	movs	r2, #56	; 0x38
 81012ae:	21d0      	movs	r1, #208	; 0xd0
 81012b0:	4804      	ldr	r0, [pc, #16]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81012b2:	f003 fad5 	bl	8104860 <HAL_I2C_Mem_Write>
 81012b6:	4603      	mov	r3, r0
 81012b8:	71fb      	strb	r3, [r7, #7]

	return 0;
 81012ba:	2300      	movs	r3, #0
}
 81012bc:	4618      	mov	r0, r3
 81012be:	3708      	adds	r7, #8
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	10000218 	.word	0x10000218

081012c8 <IMU_MPU6050_Read_Acc_Gyro>:

void IMU_MPU6050_Read_Acc_Gyro(MPU6050_Data* y){
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b08c      	sub	sp, #48	; 0x30
 81012cc:	af04      	add	r7, sp, #16
 81012ce:	6078      	str	r0, [r7, #4]
	uint8_t Data[12]; //3acc,3vel, 2byte each

	uint16_t counts = Read_FIFO_Count();
 81012d0:	f000 f8d8 	bl	8101484 <Read_FIFO_Count>
 81012d4:	4603      	mov	r3, r0
 81012d6:	83fb      	strh	r3, [r7, #30]
	//printf("counts %d\r\n",counts);
	int16_t app = 0;
 81012d8:	2300      	movs	r3, #0
 81012da:	83bb      	strh	r3, [r7, #28]

	if(counts>=12){
 81012dc:	8bfb      	ldrh	r3, [r7, #30]
 81012de:	2b0b      	cmp	r3, #11
 81012e0:	f240 80bb 	bls.w	810145a <IMU_MPU6050_Read_Acc_Gyro+0x192>
		//Read 3acc, 3vel from FIFO buffer
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_R_W_REG, 1, Data, 12, 1000);
 81012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012e8:	9302      	str	r3, [sp, #8]
 81012ea:	230c      	movs	r3, #12
 81012ec:	9301      	str	r3, [sp, #4]
 81012ee:	f107 030c 	add.w	r3, r7, #12
 81012f2:	9300      	str	r3, [sp, #0]
 81012f4:	2301      	movs	r3, #1
 81012f6:	2274      	movs	r2, #116	; 0x74
 81012f8:	21d0      	movs	r1, #208	; 0xd0
 81012fa:	485a      	ldr	r0, [pc, #360]	; (8101464 <IMU_MPU6050_Read_Acc_Gyro+0x19c>)
 81012fc:	f003 fbc4 	bl	8104a88 <HAL_I2C_Mem_Read>
 8101300:	4603      	mov	r3, r0
 8101302:	76fb      	strb	r3, [r7, #27]
		if(ret==HAL_OK){
 8101304:	7efb      	ldrb	r3, [r7, #27]
 8101306:	2b00      	cmp	r3, #0
 8101308:	f040 808e 	bne.w	8101428 <IMU_MPU6050_Read_Acc_Gyro+0x160>
			//Store acquisitions in MPU6050_Data
			app = (int16_t) Data[0] << 8 | (int16_t) Data[1];
 810130c:	7b3b      	ldrb	r3, [r7, #12]
 810130e:	021b      	lsls	r3, r3, #8
 8101310:	b21a      	sxth	r2, r3
 8101312:	7b7b      	ldrb	r3, [r7, #13]
 8101314:	b21b      	sxth	r3, r3
 8101316:	4313      	orrs	r3, r2
 8101318:	83bb      	strh	r3, [r7, #28]
			y->Ax_raw = (app / Acc_LSB_Sensitivity) * g;
 810131a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 810131e:	ee07 3a90 	vmov	s15, r3
 8101322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101326:	4b50      	ldr	r3, [pc, #320]	; (8101468 <IMU_MPU6050_Read_Acc_Gyro+0x1a0>)
 8101328:	edd3 7a00 	vldr	s15, [r3]
 810132c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101330:	4b4e      	ldr	r3, [pc, #312]	; (810146c <IMU_MPU6050_Read_Acc_Gyro+0x1a4>)
 8101332:	edd3 7a00 	vldr	s15, [r3]
 8101336:	ee67 7a27 	vmul.f32	s15, s14, s15
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	edc3 7a00 	vstr	s15, [r3]
			app = (int16_t) Data[2] << 8 | (int16_t) Data[3];
 8101340:	7bbb      	ldrb	r3, [r7, #14]
 8101342:	021b      	lsls	r3, r3, #8
 8101344:	b21a      	sxth	r2, r3
 8101346:	7bfb      	ldrb	r3, [r7, #15]
 8101348:	b21b      	sxth	r3, r3
 810134a:	4313      	orrs	r3, r2
 810134c:	83bb      	strh	r3, [r7, #28]
			y->Ay_raw = (app / Acc_LSB_Sensitivity) * g;
 810134e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101352:	ee07 3a90 	vmov	s15, r3
 8101356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810135a:	4b43      	ldr	r3, [pc, #268]	; (8101468 <IMU_MPU6050_Read_Acc_Gyro+0x1a0>)
 810135c:	edd3 7a00 	vldr	s15, [r3]
 8101360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101364:	4b41      	ldr	r3, [pc, #260]	; (810146c <IMU_MPU6050_Read_Acc_Gyro+0x1a4>)
 8101366:	edd3 7a00 	vldr	s15, [r3]
 810136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	edc3 7a01 	vstr	s15, [r3, #4]
			app = (int16_t) Data[4] << 8 | (int16_t) Data[5];
 8101374:	7c3b      	ldrb	r3, [r7, #16]
 8101376:	021b      	lsls	r3, r3, #8
 8101378:	b21a      	sxth	r2, r3
 810137a:	7c7b      	ldrb	r3, [r7, #17]
 810137c:	b21b      	sxth	r3, r3
 810137e:	4313      	orrs	r3, r2
 8101380:	83bb      	strh	r3, [r7, #28]
			y->Az_raw = (app / Acc_LSB_Sensitivity) * g;
 8101382:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101386:	ee07 3a90 	vmov	s15, r3
 810138a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810138e:	4b36      	ldr	r3, [pc, #216]	; (8101468 <IMU_MPU6050_Read_Acc_Gyro+0x1a0>)
 8101390:	edd3 7a00 	vldr	s15, [r3]
 8101394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101398:	4b34      	ldr	r3, [pc, #208]	; (810146c <IMU_MPU6050_Read_Acc_Gyro+0x1a4>)
 810139a:	edd3 7a00 	vldr	s15, [r3]
 810139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	edc3 7a02 	vstr	s15, [r3, #8]

			app = (int16_t) Data[6] << 8 | (int16_t) Data[7];
 81013a8:	7cbb      	ldrb	r3, [r7, #18]
 81013aa:	021b      	lsls	r3, r3, #8
 81013ac:	b21a      	sxth	r2, r3
 81013ae:	7cfb      	ldrb	r3, [r7, #19]
 81013b0:	b21b      	sxth	r3, r3
 81013b2:	4313      	orrs	r3, r2
 81013b4:	83bb      	strh	r3, [r7, #28]
			y->Wx_raw = app / Gyro_LSB_Sensitivity;
 81013b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013ba:	ee07 3a90 	vmov	s15, r3
 81013be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013c2:	4b2b      	ldr	r3, [pc, #172]	; (8101470 <IMU_MPU6050_Read_Acc_Gyro+0x1a8>)
 81013c4:	ed93 7a00 	vldr	s14, [r3]
 81013c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	edc3 7a03 	vstr	s15, [r3, #12]
			app = (int16_t) Data[8] << 8 | (int16_t) Data[9];
 81013d2:	7d3b      	ldrb	r3, [r7, #20]
 81013d4:	021b      	lsls	r3, r3, #8
 81013d6:	b21a      	sxth	r2, r3
 81013d8:	7d7b      	ldrb	r3, [r7, #21]
 81013da:	b21b      	sxth	r3, r3
 81013dc:	4313      	orrs	r3, r2
 81013de:	83bb      	strh	r3, [r7, #28]
			y->Wy_raw = app / Gyro_LSB_Sensitivity;
 81013e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013e4:	ee07 3a90 	vmov	s15, r3
 81013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013ec:	4b20      	ldr	r3, [pc, #128]	; (8101470 <IMU_MPU6050_Read_Acc_Gyro+0x1a8>)
 81013ee:	ed93 7a00 	vldr	s14, [r3]
 81013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	edc3 7a04 	vstr	s15, [r3, #16]
			app = (int16_t) Data[10] << 8 | (int16_t) Data[11];
 81013fc:	7dbb      	ldrb	r3, [r7, #22]
 81013fe:	021b      	lsls	r3, r3, #8
 8101400:	b21a      	sxth	r2, r3
 8101402:	7dfb      	ldrb	r3, [r7, #23]
 8101404:	b21b      	sxth	r3, r3
 8101406:	4313      	orrs	r3, r2
 8101408:	83bb      	strh	r3, [r7, #28]
			y->Wz_raw = app / Gyro_LSB_Sensitivity;
 810140a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 810140e:	ee07 3a90 	vmov	s15, r3
 8101412:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101416:	4b16      	ldr	r3, [pc, #88]	; (8101470 <IMU_MPU6050_Read_Acc_Gyro+0x1a8>)
 8101418:	ed93 7a00 	vldr	s14, [r3]
 810141c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	edc3 7a05 	vstr	s15, [r3, #20]
			printf("Delay\r\n");
			printf("Reset FIFO buffer\r\n");
			Reset_Reable_FIFO();
		}*/
	}
}
 8101426:	e019      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
			printf("Error I2C\r\n");
 8101428:	4812      	ldr	r0, [pc, #72]	; (8101474 <IMU_MPU6050_Read_Acc_Gyro+0x1ac>)
 810142a:	f009 f91f 	bl	810a66c <puts>
			switch(ret){
 810142e:	7efb      	ldrb	r3, [r7, #27]
 8101430:	2b03      	cmp	r3, #3
 8101432:	d00e      	beq.n	8101452 <IMU_MPU6050_Read_Acc_Gyro+0x18a>
 8101434:	2b03      	cmp	r3, #3
 8101436:	dc11      	bgt.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
 8101438:	2b01      	cmp	r3, #1
 810143a:	d002      	beq.n	8101442 <IMU_MPU6050_Read_Acc_Gyro+0x17a>
 810143c:	2b02      	cmp	r3, #2
 810143e:	d004      	beq.n	810144a <IMU_MPU6050_Read_Acc_Gyro+0x182>
}
 8101440:	e00c      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
			case HAL_ERROR: printf("HAL_ERROR\r\n");break;
 8101442:	480d      	ldr	r0, [pc, #52]	; (8101478 <IMU_MPU6050_Read_Acc_Gyro+0x1b0>)
 8101444:	f009 f912 	bl	810a66c <puts>
 8101448:	e008      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
			case HAL_BUSY: printf("HAL_BUSY\r\n");break;
 810144a:	480c      	ldr	r0, [pc, #48]	; (810147c <IMU_MPU6050_Read_Acc_Gyro+0x1b4>)
 810144c:	f009 f90e 	bl	810a66c <puts>
 8101450:	e004      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
			case HAL_TIMEOUT: printf("HAL_TIMEOUT\r\n");break;
 8101452:	480b      	ldr	r0, [pc, #44]	; (8101480 <IMU_MPU6050_Read_Acc_Gyro+0x1b8>)
 8101454:	f009 f90a 	bl	810a66c <puts>
 8101458:	e000      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
		}
 810145a:	bf00      	nop
}
 810145c:	bf00      	nop
 810145e:	3720      	adds	r7, #32
 8101460:	46bd      	mov	sp, r7
 8101462:	bd80      	pop	{r7, pc}
 8101464:	10000218 	.word	0x10000218
 8101468:	1000000c 	.word	0x1000000c
 810146c:	10000008 	.word	0x10000008
 8101470:	10000010 	.word	0x10000010
 8101474:	0810e1d8 	.word	0x0810e1d8
 8101478:	0810e1e4 	.word	0x0810e1e4
 810147c:	0810e1f0 	.word	0x0810e1f0
 8101480:	0810e1fc 	.word	0x0810e1fc

08101484 <Read_FIFO_Count>:


//Read FIFO Count register
//Output : FIFO Count value (n byte)
uint16_t Read_FIFO_Count(){
 8101484:	b580      	push	{r7, lr}
 8101486:	b086      	sub	sp, #24
 8101488:	af04      	add	r7, sp, #16

	HAL_StatusTypeDef ret;
	uint16_t fifo_count = 0;
 810148a:	2300      	movs	r3, #0
 810148c:	80fb      	strh	r3, [r7, #6]
	uint8_t Rec_Data[2];

	//Read FIFO_COUNT_H
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_H_REG, 1, Rec_Data, 1, 1000);
 810148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101492:	9302      	str	r3, [sp, #8]
 8101494:	2301      	movs	r3, #1
 8101496:	9301      	str	r3, [sp, #4]
 8101498:	463b      	mov	r3, r7
 810149a:	9300      	str	r3, [sp, #0]
 810149c:	2301      	movs	r3, #1
 810149e:	2272      	movs	r2, #114	; 0x72
 81014a0:	21d0      	movs	r1, #208	; 0xd0
 81014a2:	4811      	ldr	r0, [pc, #68]	; (81014e8 <Read_FIFO_Count+0x64>)
 81014a4:	f003 faf0 	bl	8104a88 <HAL_I2C_Mem_Read>
 81014a8:	4603      	mov	r3, r0
 81014aa:	717b      	strb	r3, [r7, #5]

	//Read FIFO_COUNT_L
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_L_REG, 1, Rec_Data + 1, 1, 1000);
 81014ac:	463b      	mov	r3, r7
 81014ae:	3301      	adds	r3, #1
 81014b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 81014b4:	9202      	str	r2, [sp, #8]
 81014b6:	2201      	movs	r2, #1
 81014b8:	9201      	str	r2, [sp, #4]
 81014ba:	9300      	str	r3, [sp, #0]
 81014bc:	2301      	movs	r3, #1
 81014be:	2273      	movs	r2, #115	; 0x73
 81014c0:	21d0      	movs	r1, #208	; 0xd0
 81014c2:	4809      	ldr	r0, [pc, #36]	; (81014e8 <Read_FIFO_Count+0x64>)
 81014c4:	f003 fae0 	bl	8104a88 <HAL_I2C_Mem_Read>
 81014c8:	4603      	mov	r3, r0
 81014ca:	717b      	strb	r3, [r7, #5]

	//Get FIFO Count value
	fifo_count = (uint16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 81014cc:	783b      	ldrb	r3, [r7, #0]
 81014ce:	021b      	lsls	r3, r3, #8
 81014d0:	b21a      	sxth	r2, r3
 81014d2:	787b      	ldrb	r3, [r7, #1]
 81014d4:	b21b      	sxth	r3, r3
 81014d6:	4313      	orrs	r3, r2
 81014d8:	b21b      	sxth	r3, r3
 81014da:	80fb      	strh	r3, [r7, #6]

	return fifo_count;
 81014dc:	88fb      	ldrh	r3, [r7, #6]
}
 81014de:	4618      	mov	r0, r3
 81014e0:	3708      	adds	r7, #8
 81014e2:	46bd      	mov	sp, r7
 81014e4:	bd80      	pop	{r7, pc}
 81014e6:	bf00      	nop
 81014e8:	10000218 	.word	0x10000218

081014ec <json_init>:
void increment_last(int addend);




void json_init(){
 81014ec:	b580      	push	{r7, lr}
 81014ee:	af00      	add	r7, sp, #0
	// Dynamically allocate memory using calloc()
    ptr = (char*)calloc(initial_number, sizeof(char));
 81014f0:	4b0f      	ldr	r3, [pc, #60]	; (8101530 <json_init+0x44>)
 81014f2:	681b      	ldr	r3, [r3, #0]
 81014f4:	2101      	movs	r1, #1
 81014f6:	4618      	mov	r0, r3
 81014f8:	f008 f8aa 	bl	8109650 <calloc>
 81014fc:	4603      	mov	r3, r0
 81014fe:	461a      	mov	r2, r3
 8101500:	4b0c      	ldr	r3, [pc, #48]	; (8101534 <json_init+0x48>)
 8101502:	601a      	str	r2, [r3, #0]

    // Check if the memory has been successfully
	// allocated by malloc or not
	if (ptr == NULL) {
 8101504:	4b0b      	ldr	r3, [pc, #44]	; (8101534 <json_init+0x48>)
 8101506:	681b      	ldr	r3, [r3, #0]
 8101508:	2b00      	cmp	r3, #0
 810150a:	d105      	bne.n	8101518 <json_init+0x2c>
	   printf("Memory not allocated.\r\n");
 810150c:	480a      	ldr	r0, [pc, #40]	; (8101538 <json_init+0x4c>)
 810150e:	f009 f8ad 	bl	810a66c <puts>
	   exit(0);
 8101512:	2000      	movs	r0, #0
 8101514:	f008 f8aa 	bl	810966c <exit>
	}

	strcat(ptr, '{');
 8101518:	4b06      	ldr	r3, [pc, #24]	; (8101534 <json_init+0x48>)
 810151a:	681b      	ldr	r3, [r3, #0]
 810151c:	217b      	movs	r1, #123	; 0x7b
 810151e:	4618      	mov	r0, r3
 8101520:	f009 f8e2 	bl	810a6e8 <strcat>
	last = 2;
 8101524:	4b05      	ldr	r3, [pc, #20]	; (810153c <json_init+0x50>)
 8101526:	2202      	movs	r2, #2
 8101528:	601a      	str	r2, [r3, #0]
}
 810152a:	bf00      	nop
 810152c:	bd80      	pop	{r7, pc}
 810152e:	bf00      	nop
 8101530:	10000014 	.word	0x10000014
 8101534:	10000210 	.word	0x10000210
 8101538:	0810e20c 	.word	0x0810e20c
 810153c:	10000214 	.word	0x10000214

08101540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101540:	b580      	push	{r7, lr}
 8101542:	b08a      	sub	sp, #40	; 0x28
 8101544:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101546:	4b32      	ldr	r3, [pc, #200]	; (8101610 <main+0xd0>)
 8101548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810154c:	4a30      	ldr	r2, [pc, #192]	; (8101610 <main+0xd0>)
 810154e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101556:	4b2e      	ldr	r3, [pc, #184]	; (8101610 <main+0xd0>)
 8101558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101560:	603b      	str	r3, [r7, #0]
 8101562:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101564:	2001      	movs	r0, #1
 8101566:	f003 f8d9 	bl	810471c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810156a:	f004 f867 	bl	810563c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810156e:	2201      	movs	r2, #1
 8101570:	2102      	movs	r1, #2
 8101572:	2000      	movs	r0, #0
 8101574:	f003 ffe8 	bl	8105548 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101578:	4b26      	ldr	r3, [pc, #152]	; (8101614 <main+0xd4>)
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	091b      	lsrs	r3, r3, #4
 810157e:	f003 030f 	and.w	r3, r3, #15
 8101582:	2b07      	cmp	r3, #7
 8101584:	d108      	bne.n	8101598 <main+0x58>
 8101586:	4b24      	ldr	r3, [pc, #144]	; (8101618 <main+0xd8>)
 8101588:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810158c:	4a22      	ldr	r2, [pc, #136]	; (8101618 <main+0xd8>)
 810158e:	f043 0301 	orr.w	r3, r3, #1
 8101592:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101596:	e007      	b.n	81015a8 <main+0x68>
 8101598:	4b1f      	ldr	r3, [pc, #124]	; (8101618 <main+0xd8>)
 810159a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810159e:	4a1e      	ldr	r2, [pc, #120]	; (8101618 <main+0xd8>)
 81015a0:	f043 0301 	orr.w	r3, r3, #1
 81015a4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81015a8:	f001 f832 	bl	8102610 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81015ac:	f000 faf4 	bl	8101b98 <MX_GPIO_Init>
  MX_DMA_Init();
 81015b0:	f000 fad2 	bl	8101b58 <MX_DMA_Init>
  MX_USART3_UART_Init();
 81015b4:	f000 fa84 	bl	8101ac0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81015b8:	f000 f872 	bl	81016a0 <MX_TIM1_Init>
  MX_I2C1_Init();
 81015bc:	f000 f830 	bl	8101620 <MX_I2C1_Init>
  MX_TIM2_Init();
 81015c0:	f000 f932 	bl	8101828 <MX_TIM2_Init>
  MX_TIM3_Init();
 81015c4:	f000 f984 	bl	81018d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 81015c8:	f000 f9d8 	bl	810197c <MX_TIM4_Init>
  MX_UART4_Init();
 81015cc:	f000 fa2c 	bl	8101a28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

    // IMU SETTINGS
	IMU_MPU6050_Init();
 81015d0:	f7ff fdb2 	bl	8101138 <IMU_MPU6050_Init>

	//json init
	json_init();
 81015d4:	f7ff ff8a 	bl	81014ec <json_init>

	// TIMERS START
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81015d8:	2100      	movs	r1, #0
 81015da:	4810      	ldr	r0, [pc, #64]	; (810161c <main+0xdc>)
 81015dc:	f005 fe34 	bl	8107248 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 81015e0:	2104      	movs	r1, #4
 81015e2:	480e      	ldr	r0, [pc, #56]	; (810161c <main+0xdc>)
 81015e4:	f005 fe30 	bl	8107248 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 81015e8:	2108      	movs	r1, #8
 81015ea:	480c      	ldr	r0, [pc, #48]	; (810161c <main+0xdc>)
 81015ec:	f005 fe2c 	bl	8107248 <HAL_TIM_PWM_Start>

	/* UART 4 MSG INIT */
	uint8_t MSG[35] = {'\0'};
 81015f0:	2300      	movs	r3, #0
 81015f2:	607b      	str	r3, [r7, #4]
 81015f4:	f107 0308 	add.w	r3, r7, #8
 81015f8:	221f      	movs	r2, #31
 81015fa:	2100      	movs	r1, #0
 81015fc:	4618      	mov	r0, r3
 81015fe:	f008 f86d 	bl	81096dc <memset>
	uint8_t X = 0;
 8101602:	2300      	movs	r3, #0
 8101604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  //json_reset();
	  //printf(getJSON());

	  //HAL_Delay(2000);

	  readIMU();
 8101608:	f000 fbbc 	bl	8101d84 <readIMU>
 810160c:	e7fc      	b.n	8101608 <main+0xc8>
 810160e:	bf00      	nop
 8101610:	58024400 	.word	0x58024400
 8101614:	e000ed00 	.word	0xe000ed00
 8101618:	58026400 	.word	0x58026400
 810161c:	10000264 	.word	0x10000264

08101620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101620:	b580      	push	{r7, lr}
 8101622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101624:	4b1b      	ldr	r3, [pc, #108]	; (8101694 <MX_I2C1_Init+0x74>)
 8101626:	4a1c      	ldr	r2, [pc, #112]	; (8101698 <MX_I2C1_Init+0x78>)
 8101628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810162a:	4b1a      	ldr	r3, [pc, #104]	; (8101694 <MX_I2C1_Init+0x74>)
 810162c:	4a1b      	ldr	r2, [pc, #108]	; (810169c <MX_I2C1_Init+0x7c>)
 810162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101630:	4b18      	ldr	r3, [pc, #96]	; (8101694 <MX_I2C1_Init+0x74>)
 8101632:	2200      	movs	r2, #0
 8101634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101636:	4b17      	ldr	r3, [pc, #92]	; (8101694 <MX_I2C1_Init+0x74>)
 8101638:	2201      	movs	r2, #1
 810163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810163c:	4b15      	ldr	r3, [pc, #84]	; (8101694 <MX_I2C1_Init+0x74>)
 810163e:	2200      	movs	r2, #0
 8101640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101642:	4b14      	ldr	r3, [pc, #80]	; (8101694 <MX_I2C1_Init+0x74>)
 8101644:	2200      	movs	r2, #0
 8101646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101648:	4b12      	ldr	r3, [pc, #72]	; (8101694 <MX_I2C1_Init+0x74>)
 810164a:	2200      	movs	r2, #0
 810164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810164e:	4b11      	ldr	r3, [pc, #68]	; (8101694 <MX_I2C1_Init+0x74>)
 8101650:	2200      	movs	r2, #0
 8101652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101654:	4b0f      	ldr	r3, [pc, #60]	; (8101694 <MX_I2C1_Init+0x74>)
 8101656:	2200      	movs	r2, #0
 8101658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810165a:	480e      	ldr	r0, [pc, #56]	; (8101694 <MX_I2C1_Init+0x74>)
 810165c:	f003 f870 	bl	8104740 <HAL_I2C_Init>
 8101660:	4603      	mov	r3, r0
 8101662:	2b00      	cmp	r3, #0
 8101664:	d001      	beq.n	810166a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101666:	f000 fbe7 	bl	8101e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810166a:	2100      	movs	r1, #0
 810166c:	4809      	ldr	r0, [pc, #36]	; (8101694 <MX_I2C1_Init+0x74>)
 810166e:	f003 fed3 	bl	8105418 <HAL_I2CEx_ConfigAnalogFilter>
 8101672:	4603      	mov	r3, r0
 8101674:	2b00      	cmp	r3, #0
 8101676:	d001      	beq.n	810167c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101678:	f000 fbde 	bl	8101e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810167c:	2100      	movs	r1, #0
 810167e:	4805      	ldr	r0, [pc, #20]	; (8101694 <MX_I2C1_Init+0x74>)
 8101680:	f003 ff15 	bl	81054ae <HAL_I2CEx_ConfigDigitalFilter>
 8101684:	4603      	mov	r3, r0
 8101686:	2b00      	cmp	r3, #0
 8101688:	d001      	beq.n	810168e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810168a:	f000 fbd5 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810168e:	bf00      	nop
 8101690:	bd80      	pop	{r7, pc}
 8101692:	bf00      	nop
 8101694:	10000218 	.word	0x10000218
 8101698:	40005400 	.word	0x40005400
 810169c:	307075b1 	.word	0x307075b1

081016a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	b09a      	sub	sp, #104	; 0x68
 81016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81016a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81016aa:	2200      	movs	r2, #0
 81016ac:	601a      	str	r2, [r3, #0]
 81016ae:	605a      	str	r2, [r3, #4]
 81016b0:	609a      	str	r2, [r3, #8]
 81016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81016b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81016b8:	2200      	movs	r2, #0
 81016ba:	601a      	str	r2, [r3, #0]
 81016bc:	605a      	str	r2, [r3, #4]
 81016be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81016c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81016c4:	2200      	movs	r2, #0
 81016c6:	601a      	str	r2, [r3, #0]
 81016c8:	605a      	str	r2, [r3, #4]
 81016ca:	609a      	str	r2, [r3, #8]
 81016cc:	60da      	str	r2, [r3, #12]
 81016ce:	611a      	str	r2, [r3, #16]
 81016d0:	615a      	str	r2, [r3, #20]
 81016d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81016d4:	1d3b      	adds	r3, r7, #4
 81016d6:	222c      	movs	r2, #44	; 0x2c
 81016d8:	2100      	movs	r1, #0
 81016da:	4618      	mov	r0, r3
 81016dc:	f007 fffe 	bl	81096dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81016e0:	4b4f      	ldr	r3, [pc, #316]	; (8101820 <MX_TIM1_Init+0x180>)
 81016e2:	4a50      	ldr	r2, [pc, #320]	; (8101824 <MX_TIM1_Init+0x184>)
 81016e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81016e6:	4b4e      	ldr	r3, [pc, #312]	; (8101820 <MX_TIM1_Init+0x180>)
 81016e8:	22ef      	movs	r2, #239	; 0xef
 81016ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81016ec:	4b4c      	ldr	r3, [pc, #304]	; (8101820 <MX_TIM1_Init+0x180>)
 81016ee:	2200      	movs	r2, #0
 81016f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81016f2:	4b4b      	ldr	r3, [pc, #300]	; (8101820 <MX_TIM1_Init+0x180>)
 81016f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 81016f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81016fa:	4b49      	ldr	r3, [pc, #292]	; (8101820 <MX_TIM1_Init+0x180>)
 81016fc:	2200      	movs	r2, #0
 81016fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101700:	4b47      	ldr	r3, [pc, #284]	; (8101820 <MX_TIM1_Init+0x180>)
 8101702:	2200      	movs	r2, #0
 8101704:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101706:	4b46      	ldr	r3, [pc, #280]	; (8101820 <MX_TIM1_Init+0x180>)
 8101708:	2200      	movs	r2, #0
 810170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810170c:	4844      	ldr	r0, [pc, #272]	; (8101820 <MX_TIM1_Init+0x180>)
 810170e:	f005 fce3 	bl	81070d8 <HAL_TIM_Base_Init>
 8101712:	4603      	mov	r3, r0
 8101714:	2b00      	cmp	r3, #0
 8101716:	d001      	beq.n	810171c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101718:	f000 fb8e 	bl	8101e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810171c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101720:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101726:	4619      	mov	r1, r3
 8101728:	483d      	ldr	r0, [pc, #244]	; (8101820 <MX_TIM1_Init+0x180>)
 810172a:	f006 f855 	bl	81077d8 <HAL_TIM_ConfigClockSource>
 810172e:	4603      	mov	r3, r0
 8101730:	2b00      	cmp	r3, #0
 8101732:	d001      	beq.n	8101738 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101734:	f000 fb80 	bl	8101e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101738:	4839      	ldr	r0, [pc, #228]	; (8101820 <MX_TIM1_Init+0x180>)
 810173a:	f005 fd24 	bl	8107186 <HAL_TIM_PWM_Init>
 810173e:	4603      	mov	r3, r0
 8101740:	2b00      	cmp	r3, #0
 8101742:	d001      	beq.n	8101748 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101744:	f000 fb78 	bl	8101e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101748:	2300      	movs	r3, #0
 810174a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810174c:	2300      	movs	r3, #0
 810174e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101750:	2300      	movs	r3, #0
 8101752:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101754:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101758:	4619      	mov	r1, r3
 810175a:	4831      	ldr	r0, [pc, #196]	; (8101820 <MX_TIM1_Init+0x180>)
 810175c:	f006 fd66 	bl	810822c <HAL_TIMEx_MasterConfigSynchronization>
 8101760:	4603      	mov	r3, r0
 8101762:	2b00      	cmp	r3, #0
 8101764:	d001      	beq.n	810176a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101766:	f000 fb67 	bl	8101e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810176a:	2360      	movs	r3, #96	; 0x60
 810176c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 810176e:	2300      	movs	r3, #0
 8101770:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101772:	2300      	movs	r3, #0
 8101774:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101776:	2300      	movs	r3, #0
 8101778:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810177a:	2300      	movs	r3, #0
 810177c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810177e:	2300      	movs	r3, #0
 8101780:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101782:	2300      	movs	r3, #0
 8101784:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810178a:	2200      	movs	r2, #0
 810178c:	4619      	mov	r1, r3
 810178e:	4824      	ldr	r0, [pc, #144]	; (8101820 <MX_TIM1_Init+0x180>)
 8101790:	f005 ff0e 	bl	81075b0 <HAL_TIM_PWM_ConfigChannel>
 8101794:	4603      	mov	r3, r0
 8101796:	2b00      	cmp	r3, #0
 8101798:	d001      	beq.n	810179e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810179a:	f000 fb4d 	bl	8101e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810179e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81017a2:	2204      	movs	r2, #4
 81017a4:	4619      	mov	r1, r3
 81017a6:	481e      	ldr	r0, [pc, #120]	; (8101820 <MX_TIM1_Init+0x180>)
 81017a8:	f005 ff02 	bl	81075b0 <HAL_TIM_PWM_ConfigChannel>
 81017ac:	4603      	mov	r3, r0
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	d001      	beq.n	81017b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 81017b2:	f000 fb41 	bl	8101e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81017b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81017ba:	2208      	movs	r2, #8
 81017bc:	4619      	mov	r1, r3
 81017be:	4818      	ldr	r0, [pc, #96]	; (8101820 <MX_TIM1_Init+0x180>)
 81017c0:	f005 fef6 	bl	81075b0 <HAL_TIM_PWM_ConfigChannel>
 81017c4:	4603      	mov	r3, r0
 81017c6:	2b00      	cmp	r3, #0
 81017c8:	d001      	beq.n	81017ce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81017ca:	f000 fb35 	bl	8101e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81017ce:	2300      	movs	r3, #0
 81017d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81017d2:	2300      	movs	r3, #0
 81017d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81017d6:	2300      	movs	r3, #0
 81017d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81017da:	2300      	movs	r3, #0
 81017dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81017de:	2300      	movs	r3, #0
 81017e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81017e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81017e8:	2300      	movs	r3, #0
 81017ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81017ec:	2300      	movs	r3, #0
 81017ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81017f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81017f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81017f6:	2300      	movs	r3, #0
 81017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81017fa:	2300      	movs	r3, #0
 81017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81017fe:	1d3b      	adds	r3, r7, #4
 8101800:	4619      	mov	r1, r3
 8101802:	4807      	ldr	r0, [pc, #28]	; (8101820 <MX_TIM1_Init+0x180>)
 8101804:	f006 fda0 	bl	8108348 <HAL_TIMEx_ConfigBreakDeadTime>
 8101808:	4603      	mov	r3, r0
 810180a:	2b00      	cmp	r3, #0
 810180c:	d001      	beq.n	8101812 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 810180e:	f000 fb13 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101812:	4803      	ldr	r0, [pc, #12]	; (8101820 <MX_TIM1_Init+0x180>)
 8101814:	f000 fcb0 	bl	8102178 <HAL_TIM_MspPostInit>

}
 8101818:	bf00      	nop
 810181a:	3768      	adds	r7, #104	; 0x68
 810181c:	46bd      	mov	sp, r7
 810181e:	bd80      	pop	{r7, pc}
 8101820:	10000264 	.word	0x10000264
 8101824:	40010000 	.word	0x40010000

08101828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101828:	b580      	push	{r7, lr}
 810182a:	b08c      	sub	sp, #48	; 0x30
 810182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810182e:	f107 030c 	add.w	r3, r7, #12
 8101832:	2224      	movs	r2, #36	; 0x24
 8101834:	2100      	movs	r1, #0
 8101836:	4618      	mov	r0, r3
 8101838:	f007 ff50 	bl	81096dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810183c:	463b      	mov	r3, r7
 810183e:	2200      	movs	r2, #0
 8101840:	601a      	str	r2, [r3, #0]
 8101842:	605a      	str	r2, [r3, #4]
 8101844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101846:	4b21      	ldr	r3, [pc, #132]	; (81018cc <MX_TIM2_Init+0xa4>)
 8101848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810184c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 810184e:	4b1f      	ldr	r3, [pc, #124]	; (81018cc <MX_TIM2_Init+0xa4>)
 8101850:	2200      	movs	r2, #0
 8101852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101854:	4b1d      	ldr	r3, [pc, #116]	; (81018cc <MX_TIM2_Init+0xa4>)
 8101856:	2200      	movs	r2, #0
 8101858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2652 - 1;
 810185a:	4b1c      	ldr	r3, [pc, #112]	; (81018cc <MX_TIM2_Init+0xa4>)
 810185c:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101862:	4b1a      	ldr	r3, [pc, #104]	; (81018cc <MX_TIM2_Init+0xa4>)
 8101864:	2200      	movs	r2, #0
 8101866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101868:	4b18      	ldr	r3, [pc, #96]	; (81018cc <MX_TIM2_Init+0xa4>)
 810186a:	2200      	movs	r2, #0
 810186c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 810186e:	2303      	movs	r3, #3
 8101870:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101872:	2300      	movs	r3, #0
 8101874:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101876:	2301      	movs	r3, #1
 8101878:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810187a:	2300      	movs	r3, #0
 810187c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 810187e:	230a      	movs	r3, #10
 8101880:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101882:	2300      	movs	r3, #0
 8101884:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101886:	2301      	movs	r3, #1
 8101888:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810188a:	2300      	movs	r3, #0
 810188c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810188e:	2300      	movs	r3, #0
 8101890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8101892:	f107 030c 	add.w	r3, r7, #12
 8101896:	4619      	mov	r1, r3
 8101898:	480c      	ldr	r0, [pc, #48]	; (81018cc <MX_TIM2_Init+0xa4>)
 810189a:	f005 fde3 	bl	8107464 <HAL_TIM_Encoder_Init>
 810189e:	4603      	mov	r3, r0
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d001      	beq.n	81018a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 81018a4:	f000 fac8 	bl	8101e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81018a8:	2300      	movs	r3, #0
 81018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81018ac:	2300      	movs	r3, #0
 81018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81018b0:	463b      	mov	r3, r7
 81018b2:	4619      	mov	r1, r3
 81018b4:	4805      	ldr	r0, [pc, #20]	; (81018cc <MX_TIM2_Init+0xa4>)
 81018b6:	f006 fcb9 	bl	810822c <HAL_TIMEx_MasterConfigSynchronization>
 81018ba:	4603      	mov	r3, r0
 81018bc:	2b00      	cmp	r3, #0
 81018be:	d001      	beq.n	81018c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 81018c0:	f000 faba 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81018c4:	bf00      	nop
 81018c6:	3730      	adds	r7, #48	; 0x30
 81018c8:	46bd      	mov	sp, r7
 81018ca:	bd80      	pop	{r7, pc}
 81018cc:	100002b0 	.word	0x100002b0

081018d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81018d0:	b580      	push	{r7, lr}
 81018d2:	b08c      	sub	sp, #48	; 0x30
 81018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81018d6:	f107 030c 	add.w	r3, r7, #12
 81018da:	2224      	movs	r2, #36	; 0x24
 81018dc:	2100      	movs	r1, #0
 81018de:	4618      	mov	r0, r3
 81018e0:	f007 fefc 	bl	81096dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81018e4:	463b      	mov	r3, r7
 81018e6:	2200      	movs	r2, #0
 81018e8:	601a      	str	r2, [r3, #0]
 81018ea:	605a      	str	r2, [r3, #4]
 81018ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81018ee:	4b21      	ldr	r3, [pc, #132]	; (8101974 <MX_TIM3_Init+0xa4>)
 81018f0:	4a21      	ldr	r2, [pc, #132]	; (8101978 <MX_TIM3_Init+0xa8>)
 81018f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 81018f4:	4b1f      	ldr	r3, [pc, #124]	; (8101974 <MX_TIM3_Init+0xa4>)
 81018f6:	2200      	movs	r2, #0
 81018f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81018fa:	4b1e      	ldr	r3, [pc, #120]	; (8101974 <MX_TIM3_Init+0xa4>)
 81018fc:	2200      	movs	r2, #0
 81018fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2652 - 1;
 8101900:	4b1c      	ldr	r3, [pc, #112]	; (8101974 <MX_TIM3_Init+0xa4>)
 8101902:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101906:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101908:	4b1a      	ldr	r3, [pc, #104]	; (8101974 <MX_TIM3_Init+0xa4>)
 810190a:	2200      	movs	r2, #0
 810190c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810190e:	4b19      	ldr	r3, [pc, #100]	; (8101974 <MX_TIM3_Init+0xa4>)
 8101910:	2200      	movs	r2, #0
 8101912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101914:	2303      	movs	r3, #3
 8101916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101918:	2300      	movs	r3, #0
 810191a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810191c:	2301      	movs	r3, #1
 810191e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101920:	2300      	movs	r3, #0
 8101922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101924:	230a      	movs	r3, #10
 8101926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101928:	2300      	movs	r3, #0
 810192a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810192c:	2301      	movs	r3, #1
 810192e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101930:	2300      	movs	r3, #0
 8101932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101934:	2300      	movs	r3, #0
 8101936:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8101938:	f107 030c 	add.w	r3, r7, #12
 810193c:	4619      	mov	r1, r3
 810193e:	480d      	ldr	r0, [pc, #52]	; (8101974 <MX_TIM3_Init+0xa4>)
 8101940:	f005 fd90 	bl	8107464 <HAL_TIM_Encoder_Init>
 8101944:	4603      	mov	r3, r0
 8101946:	2b00      	cmp	r3, #0
 8101948:	d001      	beq.n	810194e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 810194a:	f000 fa75 	bl	8101e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810194e:	2300      	movs	r3, #0
 8101950:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101952:	2300      	movs	r3, #0
 8101954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101956:	463b      	mov	r3, r7
 8101958:	4619      	mov	r1, r3
 810195a:	4806      	ldr	r0, [pc, #24]	; (8101974 <MX_TIM3_Init+0xa4>)
 810195c:	f006 fc66 	bl	810822c <HAL_TIMEx_MasterConfigSynchronization>
 8101960:	4603      	mov	r3, r0
 8101962:	2b00      	cmp	r3, #0
 8101964:	d001      	beq.n	810196a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8101966:	f000 fa67 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 810196a:	bf00      	nop
 810196c:	3730      	adds	r7, #48	; 0x30
 810196e:	46bd      	mov	sp, r7
 8101970:	bd80      	pop	{r7, pc}
 8101972:	bf00      	nop
 8101974:	100002fc 	.word	0x100002fc
 8101978:	40000400 	.word	0x40000400

0810197c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 810197c:	b580      	push	{r7, lr}
 810197e:	b08c      	sub	sp, #48	; 0x30
 8101980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101982:	f107 030c 	add.w	r3, r7, #12
 8101986:	2224      	movs	r2, #36	; 0x24
 8101988:	2100      	movs	r1, #0
 810198a:	4618      	mov	r0, r3
 810198c:	f007 fea6 	bl	81096dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101990:	463b      	mov	r3, r7
 8101992:	2200      	movs	r2, #0
 8101994:	601a      	str	r2, [r3, #0]
 8101996:	605a      	str	r2, [r3, #4]
 8101998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810199a:	4b21      	ldr	r3, [pc, #132]	; (8101a20 <MX_TIM4_Init+0xa4>)
 810199c:	4a21      	ldr	r2, [pc, #132]	; (8101a24 <MX_TIM4_Init+0xa8>)
 810199e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81019a0:	4b1f      	ldr	r3, [pc, #124]	; (8101a20 <MX_TIM4_Init+0xa4>)
 81019a2:	2200      	movs	r2, #0
 81019a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019a6:	4b1e      	ldr	r3, [pc, #120]	; (8101a20 <MX_TIM4_Init+0xa4>)
 81019a8:	2200      	movs	r2, #0
 81019aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2652 - 1;
 81019ac:	4b1c      	ldr	r3, [pc, #112]	; (8101a20 <MX_TIM4_Init+0xa4>)
 81019ae:	f640 225b 	movw	r2, #2651	; 0xa5b
 81019b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81019b4:	4b1a      	ldr	r3, [pc, #104]	; (8101a20 <MX_TIM4_Init+0xa4>)
 81019b6:	2200      	movs	r2, #0
 81019b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81019ba:	4b19      	ldr	r3, [pc, #100]	; (8101a20 <MX_TIM4_Init+0xa4>)
 81019bc:	2200      	movs	r2, #0
 81019be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81019c0:	2303      	movs	r3, #3
 81019c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81019c4:	2300      	movs	r3, #0
 81019c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81019c8:	2301      	movs	r3, #1
 81019ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81019cc:	2300      	movs	r3, #0
 81019ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 81019d0:	230a      	movs	r3, #10
 81019d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81019d4:	2300      	movs	r3, #0
 81019d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81019d8:	2301      	movs	r3, #1
 81019da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81019dc:	2300      	movs	r3, #0
 81019de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 81019e0:	2300      	movs	r3, #0
 81019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 81019e4:	f107 030c 	add.w	r3, r7, #12
 81019e8:	4619      	mov	r1, r3
 81019ea:	480d      	ldr	r0, [pc, #52]	; (8101a20 <MX_TIM4_Init+0xa4>)
 81019ec:	f005 fd3a 	bl	8107464 <HAL_TIM_Encoder_Init>
 81019f0:	4603      	mov	r3, r0
 81019f2:	2b00      	cmp	r3, #0
 81019f4:	d001      	beq.n	81019fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 81019f6:	f000 fa1f 	bl	8101e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81019fa:	2300      	movs	r3, #0
 81019fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81019fe:	2300      	movs	r3, #0
 8101a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8101a02:	463b      	mov	r3, r7
 8101a04:	4619      	mov	r1, r3
 8101a06:	4806      	ldr	r0, [pc, #24]	; (8101a20 <MX_TIM4_Init+0xa4>)
 8101a08:	f006 fc10 	bl	810822c <HAL_TIMEx_MasterConfigSynchronization>
 8101a0c:	4603      	mov	r3, r0
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d001      	beq.n	8101a16 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8101a12:	f000 fa11 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8101a16:	bf00      	nop
 8101a18:	3730      	adds	r7, #48	; 0x30
 8101a1a:	46bd      	mov	sp, r7
 8101a1c:	bd80      	pop	{r7, pc}
 8101a1e:	bf00      	nop
 8101a20:	10000348 	.word	0x10000348
 8101a24:	40000800 	.word	0x40000800

08101a28 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8101a28:	b580      	push	{r7, lr}
 8101a2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8101a2c:	4b22      	ldr	r3, [pc, #136]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a2e:	4a23      	ldr	r2, [pc, #140]	; (8101abc <MX_UART4_Init+0x94>)
 8101a30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8101a32:	4b21      	ldr	r3, [pc, #132]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101a38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8101a3a:	4b1f      	ldr	r3, [pc, #124]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a3c:	2200      	movs	r2, #0
 8101a3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8101a40:	4b1d      	ldr	r3, [pc, #116]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a42:	2200      	movs	r2, #0
 8101a44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8101a46:	4b1c      	ldr	r3, [pc, #112]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a48:	2200      	movs	r2, #0
 8101a4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8101a4c:	4b1a      	ldr	r3, [pc, #104]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a4e:	220c      	movs	r2, #12
 8101a50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101a52:	4b19      	ldr	r3, [pc, #100]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a54:	2200      	movs	r2, #0
 8101a56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8101a58:	4b17      	ldr	r3, [pc, #92]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a5a:	2200      	movs	r2, #0
 8101a5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101a5e:	4b16      	ldr	r3, [pc, #88]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a60:	2200      	movs	r2, #0
 8101a62:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101a64:	4b14      	ldr	r3, [pc, #80]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a66:	2200      	movs	r2, #0
 8101a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101a6a:	4b13      	ldr	r3, [pc, #76]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a6c:	2200      	movs	r2, #0
 8101a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8101a70:	4811      	ldr	r0, [pc, #68]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a72:	f006 fce7 	bl	8108444 <HAL_UART_Init>
 8101a76:	4603      	mov	r3, r0
 8101a78:	2b00      	cmp	r3, #0
 8101a7a:	d001      	beq.n	8101a80 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8101a7c:	f000 f9dc 	bl	8101e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101a80:	2100      	movs	r1, #0
 8101a82:	480d      	ldr	r0, [pc, #52]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a84:	f007 fd1a 	bl	81094bc <HAL_UARTEx_SetTxFifoThreshold>
 8101a88:	4603      	mov	r3, r0
 8101a8a:	2b00      	cmp	r3, #0
 8101a8c:	d001      	beq.n	8101a92 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8101a8e:	f000 f9d3 	bl	8101e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101a92:	2100      	movs	r1, #0
 8101a94:	4808      	ldr	r0, [pc, #32]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101a96:	f007 fd4f 	bl	8109538 <HAL_UARTEx_SetRxFifoThreshold>
 8101a9a:	4603      	mov	r3, r0
 8101a9c:	2b00      	cmp	r3, #0
 8101a9e:	d001      	beq.n	8101aa4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8101aa0:	f000 f9ca 	bl	8101e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8101aa4:	4804      	ldr	r0, [pc, #16]	; (8101ab8 <MX_UART4_Init+0x90>)
 8101aa6:	f007 fcd0 	bl	810944a <HAL_UARTEx_DisableFifoMode>
 8101aaa:	4603      	mov	r3, r0
 8101aac:	2b00      	cmp	r3, #0
 8101aae:	d001      	beq.n	8101ab4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8101ab0:	f000 f9c2 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8101ab4:	bf00      	nop
 8101ab6:	bd80      	pop	{r7, pc}
 8101ab8:	10000394 	.word	0x10000394
 8101abc:	40004c00 	.word	0x40004c00

08101ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101ac0:	b580      	push	{r7, lr}
 8101ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101ac4:	4b22      	ldr	r3, [pc, #136]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101ac6:	4a23      	ldr	r2, [pc, #140]	; (8101b54 <MX_USART3_UART_Init+0x94>)
 8101ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101aca:	4b21      	ldr	r3, [pc, #132]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101ad2:	4b1f      	ldr	r3, [pc, #124]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101ad4:	2200      	movs	r2, #0
 8101ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101ad8:	4b1d      	ldr	r3, [pc, #116]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101ada:	2200      	movs	r2, #0
 8101adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101ade:	4b1c      	ldr	r3, [pc, #112]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101ae4:	4b1a      	ldr	r3, [pc, #104]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101ae6:	220c      	movs	r2, #12
 8101ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101aea:	4b19      	ldr	r3, [pc, #100]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101aec:	2200      	movs	r2, #0
 8101aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101af0:	4b17      	ldr	r3, [pc, #92]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101af2:	2200      	movs	r2, #0
 8101af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101af6:	4b16      	ldr	r3, [pc, #88]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101af8:	2200      	movs	r2, #0
 8101afa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101afc:	4b14      	ldr	r3, [pc, #80]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101afe:	2200      	movs	r2, #0
 8101b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b02:	4b13      	ldr	r3, [pc, #76]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101b04:	2200      	movs	r2, #0
 8101b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101b08:	4811      	ldr	r0, [pc, #68]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101b0a:	f006 fc9b 	bl	8108444 <HAL_UART_Init>
 8101b0e:	4603      	mov	r3, r0
 8101b10:	2b00      	cmp	r3, #0
 8101b12:	d001      	beq.n	8101b18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101b14:	f000 f990 	bl	8101e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b18:	2100      	movs	r1, #0
 8101b1a:	480d      	ldr	r0, [pc, #52]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101b1c:	f007 fcce 	bl	81094bc <HAL_UARTEx_SetTxFifoThreshold>
 8101b20:	4603      	mov	r3, r0
 8101b22:	2b00      	cmp	r3, #0
 8101b24:	d001      	beq.n	8101b2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101b26:	f000 f987 	bl	8101e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b2a:	2100      	movs	r1, #0
 8101b2c:	4808      	ldr	r0, [pc, #32]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101b2e:	f007 fd03 	bl	8109538 <HAL_UARTEx_SetRxFifoThreshold>
 8101b32:	4603      	mov	r3, r0
 8101b34:	2b00      	cmp	r3, #0
 8101b36:	d001      	beq.n	8101b3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101b38:	f000 f97e 	bl	8101e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101b3c:	4804      	ldr	r0, [pc, #16]	; (8101b50 <MX_USART3_UART_Init+0x90>)
 8101b3e:	f007 fc84 	bl	810944a <HAL_UARTEx_DisableFifoMode>
 8101b42:	4603      	mov	r3, r0
 8101b44:	2b00      	cmp	r3, #0
 8101b46:	d001      	beq.n	8101b4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101b48:	f000 f976 	bl	8101e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101b4c:	bf00      	nop
 8101b4e:	bd80      	pop	{r7, pc}
 8101b50:	10000424 	.word	0x10000424
 8101b54:	40004800 	.word	0x40004800

08101b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101b58:	b580      	push	{r7, lr}
 8101b5a:	b082      	sub	sp, #8
 8101b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101b5e:	4b0d      	ldr	r3, [pc, #52]	; (8101b94 <MX_DMA_Init+0x3c>)
 8101b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b64:	4a0b      	ldr	r2, [pc, #44]	; (8101b94 <MX_DMA_Init+0x3c>)
 8101b66:	f043 0301 	orr.w	r3, r3, #1
 8101b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b6e:	4b09      	ldr	r3, [pc, #36]	; (8101b94 <MX_DMA_Init+0x3c>)
 8101b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b74:	f003 0301 	and.w	r3, r3, #1
 8101b78:	607b      	str	r3, [r7, #4]
 8101b7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b7c:	2200      	movs	r2, #0
 8101b7e:	2100      	movs	r1, #0
 8101b80:	200b      	movs	r0, #11
 8101b82:	f000 fed4 	bl	810292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101b86:	200b      	movs	r0, #11
 8101b88:	f000 feeb 	bl	8102962 <HAL_NVIC_EnableIRQ>

}
 8101b8c:	bf00      	nop
 8101b8e:	3708      	adds	r7, #8
 8101b90:	46bd      	mov	sp, r7
 8101b92:	bd80      	pop	{r7, pc}
 8101b94:	58024400 	.word	0x58024400

08101b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101b98:	b580      	push	{r7, lr}
 8101b9a:	b08c      	sub	sp, #48	; 0x30
 8101b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b9e:	f107 031c 	add.w	r3, r7, #28
 8101ba2:	2200      	movs	r2, #0
 8101ba4:	601a      	str	r2, [r3, #0]
 8101ba6:	605a      	str	r2, [r3, #4]
 8101ba8:	609a      	str	r2, [r3, #8]
 8101baa:	60da      	str	r2, [r3, #12]
 8101bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101bae:	4b66      	ldr	r3, [pc, #408]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb4:	4a64      	ldr	r2, [pc, #400]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bb6:	f043 0304 	orr.w	r3, r3, #4
 8101bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bbe:	4b62      	ldr	r3, [pc, #392]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc4:	f003 0304 	and.w	r3, r3, #4
 8101bc8:	61bb      	str	r3, [r7, #24]
 8101bca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bcc:	4b5e      	ldr	r3, [pc, #376]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd2:	4a5d      	ldr	r2, [pc, #372]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bd4:	f043 0301 	orr.w	r3, r3, #1
 8101bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bdc:	4b5a      	ldr	r3, [pc, #360]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101be2:	f003 0301 	and.w	r3, r3, #1
 8101be6:	617b      	str	r3, [r7, #20]
 8101be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101bea:	4b57      	ldr	r3, [pc, #348]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf0:	4a55      	ldr	r2, [pc, #340]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bf2:	f043 0302 	orr.w	r3, r3, #2
 8101bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bfa:	4b53      	ldr	r3, [pc, #332]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c00:	f003 0302 	and.w	r3, r3, #2
 8101c04:	613b      	str	r3, [r7, #16]
 8101c06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101c08:	4b4f      	ldr	r3, [pc, #316]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c0e:	4a4e      	ldr	r2, [pc, #312]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c10:	f043 0310 	orr.w	r3, r3, #16
 8101c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c18:	4b4b      	ldr	r3, [pc, #300]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c1e:	f003 0310 	and.w	r3, r3, #16
 8101c22:	60fb      	str	r3, [r7, #12]
 8101c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c26:	4b48      	ldr	r3, [pc, #288]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c2c:	4a46      	ldr	r2, [pc, #280]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c2e:	f043 0308 	orr.w	r3, r3, #8
 8101c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c36:	4b44      	ldr	r3, [pc, #272]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c3c:	f003 0308 	and.w	r3, r3, #8
 8101c40:	60bb      	str	r3, [r7, #8]
 8101c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101c44:	4b40      	ldr	r3, [pc, #256]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c4a:	4a3f      	ldr	r2, [pc, #252]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c54:	4b3c      	ldr	r3, [pc, #240]	; (8101d48 <MX_GPIO_Init+0x1b0>)
 8101c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101c5e:	607b      	str	r3, [r7, #4]
 8101c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8101c62:	2200      	movs	r2, #0
 8101c64:	f244 0181 	movw	r1, #16513	; 0x4081
 8101c68:	4838      	ldr	r0, [pc, #224]	; (8101d4c <MX_GPIO_Init+0x1b4>)
 8101c6a:	f002 fd19 	bl	81046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_2_Pin|DIR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101c6e:	2200      	movs	r2, #0
 8101c70:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8101c74:	4836      	ldr	r0, [pc, #216]	; (8101d50 <MX_GPIO_Init+0x1b8>)
 8101c76:	f002 fd13 	bl	81046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8101c7a:	2200      	movs	r2, #0
 8101c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8101c80:	4834      	ldr	r0, [pc, #208]	; (8101d54 <MX_GPIO_Init+0x1bc>)
 8101c82:	f002 fd0d 	bl	81046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8101c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101c8c:	2300      	movs	r3, #0
 8101c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c90:	2300      	movs	r3, #0
 8101c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101c94:	f107 031c 	add.w	r3, r7, #28
 8101c98:	4619      	mov	r1, r3
 8101c9a:	482f      	ldr	r0, [pc, #188]	; (8101d58 <MX_GPIO_Init+0x1c0>)
 8101c9c:	f002 fb50 	bl	8104340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101ca0:	2301      	movs	r3, #1
 8101ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101ca4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101caa:	2300      	movs	r3, #0
 8101cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101cae:	f107 031c 	add.w	r3, r7, #28
 8101cb2:	4619      	mov	r1, r3
 8101cb4:	4828      	ldr	r0, [pc, #160]	; (8101d58 <MX_GPIO_Init+0x1c0>)
 8101cb6:	f002 fb43 	bl	8104340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8101cba:	f244 0381 	movw	r3, #16513	; 0x4081
 8101cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101cc0:	2301      	movs	r3, #1
 8101cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cc4:	2300      	movs	r3, #0
 8101cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cc8:	2300      	movs	r3, #0
 8101cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ccc:	f107 031c 	add.w	r3, r7, #28
 8101cd0:	4619      	mov	r1, r3
 8101cd2:	481e      	ldr	r0, [pc, #120]	; (8101d4c <MX_GPIO_Init+0x1b4>)
 8101cd4:	f002 fb34 	bl	8104340 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin DIR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|DIR_3_Pin|LD2_Pin;
 8101cd8:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8101cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101cde:	2301      	movs	r3, #1
 8101ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ce2:	2300      	movs	r3, #0
 8101ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ce6:	2300      	movs	r3, #0
 8101ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101cea:	f107 031c 	add.w	r3, r7, #28
 8101cee:	4619      	mov	r1, r3
 8101cf0:	4817      	ldr	r0, [pc, #92]	; (8101d50 <MX_GPIO_Init+0x1b8>)
 8101cf2:	f002 fb25 	bl	8104340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8101cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101cfc:	2301      	movs	r3, #1
 8101cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d00:	2300      	movs	r3, #0
 8101d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d04:	2300      	movs	r3, #0
 8101d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8101d08:	f107 031c 	add.w	r3, r7, #28
 8101d0c:	4619      	mov	r1, r3
 8101d0e:	4811      	ldr	r0, [pc, #68]	; (8101d54 <MX_GPIO_Init+0x1bc>)
 8101d10:	f002 fb16 	bl	8104340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8101d14:	2380      	movs	r3, #128	; 0x80
 8101d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101d18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d1e:	2300      	movs	r3, #0
 8101d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8101d22:	f107 031c 	add.w	r3, r7, #28
 8101d26:	4619      	mov	r1, r3
 8101d28:	480c      	ldr	r0, [pc, #48]	; (8101d5c <MX_GPIO_Init+0x1c4>)
 8101d2a:	f002 fb09 	bl	8104340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8101d2e:	2200      	movs	r2, #0
 8101d30:	2100      	movs	r1, #0
 8101d32:	2006      	movs	r0, #6
 8101d34:	f000 fdfb 	bl	810292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8101d38:	2006      	movs	r0, #6
 8101d3a:	f000 fe12 	bl	8102962 <HAL_NVIC_EnableIRQ>

}
 8101d3e:	bf00      	nop
 8101d40:	3730      	adds	r7, #48	; 0x30
 8101d42:	46bd      	mov	sp, r7
 8101d44:	bd80      	pop	{r7, pc}
 8101d46:	bf00      	nop
 8101d48:	58024400 	.word	0x58024400
 8101d4c:	58020400 	.word	0x58020400
 8101d50:	58021000 	.word	0x58021000
 8101d54:	58020c00 	.word	0x58020c00
 8101d58:	58020800 	.word	0x58020800
 8101d5c:	58021800 	.word	0x58021800

08101d60 <__io_putchar>:
	HAL_UART_Transmit(&huart4, output , strlen(output), 0xFFFF);
	return output;
}


int __io_putchar(int ch) {
 8101d60:	b580      	push	{r7, lr}
 8101d62:	b082      	sub	sp, #8
 8101d64:	af00      	add	r7, sp, #0
 8101d66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101d68:	1d39      	adds	r1, r7, #4
 8101d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101d6e:	2201      	movs	r2, #1
 8101d70:	4803      	ldr	r0, [pc, #12]	; (8101d80 <__io_putchar+0x20>)
 8101d72:	f006 fbb7 	bl	81084e4 <HAL_UART_Transmit>
	return ch;
 8101d76:	687b      	ldr	r3, [r7, #4]
}
 8101d78:	4618      	mov	r0, r3
 8101d7a:	3708      	adds	r7, #8
 8101d7c:	46bd      	mov	sp, r7
 8101d7e:	bd80      	pop	{r7, pc}
 8101d80:	10000424 	.word	0x10000424

08101d84 <readIMU>:
	if(GPIO_Pin == GPIO_PIN_0){
		flag_MPU6050_Data_Ready = 1;
	}
}
*/
void readIMU(){
 8101d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101d88:	b084      	sub	sp, #16
 8101d8a:	af04      	add	r7, sp, #16
	if(flag_MPU6050_Data_Ready==1){
 8101d8c:	4b26      	ldr	r3, [pc, #152]	; (8101e28 <readIMU+0xa4>)
 8101d8e:	781b      	ldrb	r3, [r3, #0]
 8101d90:	2b01      	cmp	r3, #1
 8101d92:	d144      	bne.n	8101e1e <readIMU+0x9a>
		flag_MPU6050_Data_Ready = 0;
 8101d94:	4b24      	ldr	r3, [pc, #144]	; (8101e28 <readIMU+0xa4>)
 8101d96:	2200      	movs	r2, #0
 8101d98:	701a      	strb	r2, [r3, #0]
		IMU_MPU6050_Read_Acc_Gyro(&y);
 8101d9a:	4824      	ldr	r0, [pc, #144]	; (8101e2c <readIMU+0xa8>)
 8101d9c:	f7ff fa94 	bl	81012c8 <IMU_MPU6050_Read_Acc_Gyro>
		printf("{\"Ax\":%f, \"Ay\":%f, \"Az\": %f,",y.Ax_raw,y.Ay_raw,y.Az_raw);
 8101da0:	4b22      	ldr	r3, [pc, #136]	; (8101e2c <readIMU+0xa8>)
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	4618      	mov	r0, r3
 8101da6:	f7fe fc57 	bl	8100658 <__aeabi_f2d>
 8101daa:	4680      	mov	r8, r0
 8101dac:	4689      	mov	r9, r1
 8101dae:	4b1f      	ldr	r3, [pc, #124]	; (8101e2c <readIMU+0xa8>)
 8101db0:	685b      	ldr	r3, [r3, #4]
 8101db2:	4618      	mov	r0, r3
 8101db4:	f7fe fc50 	bl	8100658 <__aeabi_f2d>
 8101db8:	4604      	mov	r4, r0
 8101dba:	460d      	mov	r5, r1
 8101dbc:	4b1b      	ldr	r3, [pc, #108]	; (8101e2c <readIMU+0xa8>)
 8101dbe:	689b      	ldr	r3, [r3, #8]
 8101dc0:	4618      	mov	r0, r3
 8101dc2:	f7fe fc49 	bl	8100658 <__aeabi_f2d>
 8101dc6:	4602      	mov	r2, r0
 8101dc8:	460b      	mov	r3, r1
 8101dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101dce:	e9cd 4500 	strd	r4, r5, [sp]
 8101dd2:	4642      	mov	r2, r8
 8101dd4:	464b      	mov	r3, r9
 8101dd6:	4816      	ldr	r0, [pc, #88]	; (8101e30 <readIMU+0xac>)
 8101dd8:	f008 fbac 	bl	810a534 <iprintf>
		printf("\"Gx\":%f, \"Gy\":%f,\"Gz\": %f}",y.Wx_raw,y.Wy_raw,y.Wz_raw);
 8101ddc:	4b13      	ldr	r3, [pc, #76]	; (8101e2c <readIMU+0xa8>)
 8101dde:	68db      	ldr	r3, [r3, #12]
 8101de0:	4618      	mov	r0, r3
 8101de2:	f7fe fc39 	bl	8100658 <__aeabi_f2d>
 8101de6:	4680      	mov	r8, r0
 8101de8:	4689      	mov	r9, r1
 8101dea:	4b10      	ldr	r3, [pc, #64]	; (8101e2c <readIMU+0xa8>)
 8101dec:	691b      	ldr	r3, [r3, #16]
 8101dee:	4618      	mov	r0, r3
 8101df0:	f7fe fc32 	bl	8100658 <__aeabi_f2d>
 8101df4:	4604      	mov	r4, r0
 8101df6:	460d      	mov	r5, r1
 8101df8:	4b0c      	ldr	r3, [pc, #48]	; (8101e2c <readIMU+0xa8>)
 8101dfa:	695b      	ldr	r3, [r3, #20]
 8101dfc:	4618      	mov	r0, r3
 8101dfe:	f7fe fc2b 	bl	8100658 <__aeabi_f2d>
 8101e02:	4602      	mov	r2, r0
 8101e04:	460b      	mov	r3, r1
 8101e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101e0a:	e9cd 4500 	strd	r4, r5, [sp]
 8101e0e:	4642      	mov	r2, r8
 8101e10:	464b      	mov	r3, r9
 8101e12:	4808      	ldr	r0, [pc, #32]	; (8101e34 <readIMU+0xb0>)
 8101e14:	f008 fb8e 	bl	810a534 <iprintf>
		//printf("Ax:%f, Ay:%f, Az: %f [m/s^2]\r\n",y.Ax_raw,y.Ay_raw,y.Az_raw);
		//printf("Gx:%f, Gy:%f, Gz: %f [degree/s]\r\n",y.Wx_raw,y.Wy_raw,y.Wz_raw);
		printf("\n");
 8101e18:	200a      	movs	r0, #10
 8101e1a:	f008 fba3 	bl	810a564 <putchar>
	}
}
 8101e1e:	bf00      	nop
 8101e20:	46bd      	mov	sp, r7
 8101e22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101e26:	bf00      	nop
 8101e28:	1000052c 	.word	0x1000052c
 8101e2c:	10000530 	.word	0x10000530
 8101e30:	0810e230 	.word	0x0810e230
 8101e34:	0810e250 	.word	0x0810e250

08101e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101e38:	b480      	push	{r7}
 8101e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101e3c:	b672      	cpsid	i
}
 8101e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101e40:	e7fe      	b.n	8101e40 <Error_Handler+0x8>
	...

08101e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101e44:	b480      	push	{r7}
 8101e46:	b083      	sub	sp, #12
 8101e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101e4a:	4b0a      	ldr	r3, [pc, #40]	; (8101e74 <HAL_MspInit+0x30>)
 8101e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e50:	4a08      	ldr	r2, [pc, #32]	; (8101e74 <HAL_MspInit+0x30>)
 8101e52:	f043 0302 	orr.w	r3, r3, #2
 8101e56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101e5a:	4b06      	ldr	r3, [pc, #24]	; (8101e74 <HAL_MspInit+0x30>)
 8101e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e60:	f003 0302 	and.w	r3, r3, #2
 8101e64:	607b      	str	r3, [r7, #4]
 8101e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101e68:	bf00      	nop
 8101e6a:	370c      	adds	r7, #12
 8101e6c:	46bd      	mov	sp, r7
 8101e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e72:	4770      	bx	lr
 8101e74:	58024400 	.word	0x58024400

08101e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101e78:	b580      	push	{r7, lr}
 8101e7a:	b0b8      	sub	sp, #224	; 0xe0
 8101e7c:	af00      	add	r7, sp, #0
 8101e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e84:	2200      	movs	r2, #0
 8101e86:	601a      	str	r2, [r3, #0]
 8101e88:	605a      	str	r2, [r3, #4]
 8101e8a:	609a      	str	r2, [r3, #8]
 8101e8c:	60da      	str	r2, [r3, #12]
 8101e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e90:	f107 0310 	add.w	r3, r7, #16
 8101e94:	22bc      	movs	r2, #188	; 0xbc
 8101e96:	2100      	movs	r1, #0
 8101e98:	4618      	mov	r0, r3
 8101e9a:	f007 fc1f 	bl	81096dc <memset>
  if(hi2c->Instance==I2C1)
 8101e9e:	687b      	ldr	r3, [r7, #4]
 8101ea0:	681b      	ldr	r3, [r3, #0]
 8101ea2:	4a25      	ldr	r2, [pc, #148]	; (8101f38 <HAL_I2C_MspInit+0xc0>)
 8101ea4:	4293      	cmp	r3, r2
 8101ea6:	d142      	bne.n	8101f2e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101ea8:	2308      	movs	r3, #8
 8101eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101eac:	2300      	movs	r3, #0
 8101eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101eb2:	f107 0310 	add.w	r3, r7, #16
 8101eb6:	4618      	mov	r0, r3
 8101eb8:	f003 fda6 	bl	8105a08 <HAL_RCCEx_PeriphCLKConfig>
 8101ebc:	4603      	mov	r3, r0
 8101ebe:	2b00      	cmp	r3, #0
 8101ec0:	d001      	beq.n	8101ec6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101ec2:	f7ff ffb9 	bl	8101e38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101ec6:	4b1d      	ldr	r3, [pc, #116]	; (8101f3c <HAL_I2C_MspInit+0xc4>)
 8101ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ecc:	4a1b      	ldr	r2, [pc, #108]	; (8101f3c <HAL_I2C_MspInit+0xc4>)
 8101ece:	f043 0302 	orr.w	r3, r3, #2
 8101ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ed6:	4b19      	ldr	r3, [pc, #100]	; (8101f3c <HAL_I2C_MspInit+0xc4>)
 8101ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101edc:	f003 0302 	and.w	r3, r3, #2
 8101ee0:	60fb      	str	r3, [r7, #12]
 8101ee2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8101ee4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8101ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101eec:	2312      	movs	r3, #18
 8101eee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ef2:	2300      	movs	r3, #0
 8101ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101efe:	2304      	movs	r3, #4
 8101f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101f08:	4619      	mov	r1, r3
 8101f0a:	480d      	ldr	r0, [pc, #52]	; (8101f40 <HAL_I2C_MspInit+0xc8>)
 8101f0c:	f002 fa18 	bl	8104340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101f10:	4b0a      	ldr	r3, [pc, #40]	; (8101f3c <HAL_I2C_MspInit+0xc4>)
 8101f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f16:	4a09      	ldr	r2, [pc, #36]	; (8101f3c <HAL_I2C_MspInit+0xc4>)
 8101f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101f1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f20:	4b06      	ldr	r3, [pc, #24]	; (8101f3c <HAL_I2C_MspInit+0xc4>)
 8101f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101f2a:	60bb      	str	r3, [r7, #8]
 8101f2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101f2e:	bf00      	nop
 8101f30:	37e0      	adds	r7, #224	; 0xe0
 8101f32:	46bd      	mov	sp, r7
 8101f34:	bd80      	pop	{r7, pc}
 8101f36:	bf00      	nop
 8101f38:	40005400 	.word	0x40005400
 8101f3c:	58024400 	.word	0x58024400
 8101f40:	58020400 	.word	0x58020400

08101f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101f44:	b480      	push	{r7}
 8101f46:	b085      	sub	sp, #20
 8101f48:	af00      	add	r7, sp, #0
 8101f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	4a0b      	ldr	r2, [pc, #44]	; (8101f80 <HAL_TIM_Base_MspInit+0x3c>)
 8101f52:	4293      	cmp	r3, r2
 8101f54:	d10e      	bne.n	8101f74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101f56:	4b0b      	ldr	r3, [pc, #44]	; (8101f84 <HAL_TIM_Base_MspInit+0x40>)
 8101f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101f5c:	4a09      	ldr	r2, [pc, #36]	; (8101f84 <HAL_TIM_Base_MspInit+0x40>)
 8101f5e:	f043 0301 	orr.w	r3, r3, #1
 8101f62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101f66:	4b07      	ldr	r3, [pc, #28]	; (8101f84 <HAL_TIM_Base_MspInit+0x40>)
 8101f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101f6c:	f003 0301 	and.w	r3, r3, #1
 8101f70:	60fb      	str	r3, [r7, #12]
 8101f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101f74:	bf00      	nop
 8101f76:	3714      	adds	r7, #20
 8101f78:	46bd      	mov	sp, r7
 8101f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7e:	4770      	bx	lr
 8101f80:	40010000 	.word	0x40010000
 8101f84:	58024400 	.word	0x58024400

08101f88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8101f88:	b580      	push	{r7, lr}
 8101f8a:	b090      	sub	sp, #64	; 0x40
 8101f8c:	af00      	add	r7, sp, #0
 8101f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101f94:	2200      	movs	r2, #0
 8101f96:	601a      	str	r2, [r3, #0]
 8101f98:	605a      	str	r2, [r3, #4]
 8101f9a:	609a      	str	r2, [r3, #8]
 8101f9c:	60da      	str	r2, [r3, #12]
 8101f9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	681b      	ldr	r3, [r3, #0]
 8101fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101fa8:	d14d      	bne.n	8102046 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101faa:	4b6c      	ldr	r3, [pc, #432]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fb0:	4a6a      	ldr	r2, [pc, #424]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fb2:	f043 0301 	orr.w	r3, r3, #1
 8101fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fba:	4b68      	ldr	r3, [pc, #416]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fc0:	f003 0301 	and.w	r3, r3, #1
 8101fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8101fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fc8:	4b64      	ldr	r3, [pc, #400]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fce:	4a63      	ldr	r2, [pc, #396]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fd0:	f043 0301 	orr.w	r3, r3, #1
 8101fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fd8:	4b60      	ldr	r3, [pc, #384]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fde:	f003 0301 	and.w	r3, r3, #1
 8101fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8101fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101fe6:	4b5d      	ldr	r3, [pc, #372]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fec:	4a5b      	ldr	r2, [pc, #364]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101fee:	f043 0302 	orr.w	r3, r3, #2
 8101ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ff6:	4b59      	ldr	r3, [pc, #356]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8101ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ffc:	f003 0302 	and.w	r3, r3, #2
 8102000:	623b      	str	r3, [r7, #32]
 8102002:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102004:	2301      	movs	r3, #1
 8102006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102008:	2302      	movs	r3, #2
 810200a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810200c:	2300      	movs	r3, #0
 810200e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102010:	2300      	movs	r3, #0
 8102012:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102014:	2301      	movs	r3, #1
 8102016:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 810201c:	4619      	mov	r1, r3
 810201e:	4850      	ldr	r0, [pc, #320]	; (8102160 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8102020:	f002 f98e 	bl	8104340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8102024:	2308      	movs	r3, #8
 8102026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102028:	2302      	movs	r3, #2
 810202a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810202c:	2300      	movs	r3, #0
 810202e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102030:	2300      	movs	r3, #0
 8102032:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102034:	2301      	movs	r3, #1
 8102036:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 810203c:	4619      	mov	r1, r3
 810203e:	4849      	ldr	r0, [pc, #292]	; (8102164 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8102040:	f002 f97e 	bl	8104340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8102044:	e086      	b.n	8102154 <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM3)
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	4a47      	ldr	r2, [pc, #284]	; (8102168 <HAL_TIM_Encoder_MspInit+0x1e0>)
 810204c:	4293      	cmp	r3, r2
 810204e:	d14d      	bne.n	81020ec <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102050:	4b42      	ldr	r3, [pc, #264]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102056:	4a41      	ldr	r2, [pc, #260]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102058:	f043 0302 	orr.w	r3, r3, #2
 810205c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102060:	4b3e      	ldr	r3, [pc, #248]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102066:	f003 0302 	and.w	r3, r3, #2
 810206a:	61fb      	str	r3, [r7, #28]
 810206c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810206e:	4b3b      	ldr	r3, [pc, #236]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102074:	4a39      	ldr	r2, [pc, #228]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102076:	f043 0301 	orr.w	r3, r3, #1
 810207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810207e:	4b37      	ldr	r3, [pc, #220]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102084:	f003 0301 	and.w	r3, r3, #1
 8102088:	61bb      	str	r3, [r7, #24]
 810208a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810208c:	4b33      	ldr	r3, [pc, #204]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 810208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102092:	4a32      	ldr	r2, [pc, #200]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102094:	f043 0304 	orr.w	r3, r3, #4
 8102098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810209c:	4b2f      	ldr	r3, [pc, #188]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 810209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020a2:	f003 0304 	and.w	r3, r3, #4
 81020a6:	617b      	str	r3, [r7, #20]
 81020a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81020aa:	2340      	movs	r3, #64	; 0x40
 81020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020ae:	2302      	movs	r3, #2
 81020b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020b2:	2300      	movs	r3, #0
 81020b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020b6:	2300      	movs	r3, #0
 81020b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81020ba:	2302      	movs	r3, #2
 81020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81020be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81020c2:	4619      	mov	r1, r3
 81020c4:	4826      	ldr	r0, [pc, #152]	; (8102160 <HAL_TIM_Encoder_MspInit+0x1d8>)
 81020c6:	f002 f93b 	bl	8104340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81020ca:	2380      	movs	r3, #128	; 0x80
 81020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020ce:	2302      	movs	r3, #2
 81020d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020d2:	2300      	movs	r3, #0
 81020d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020d6:	2300      	movs	r3, #0
 81020d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81020da:	2302      	movs	r3, #2
 81020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81020de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81020e2:	4619      	mov	r1, r3
 81020e4:	4821      	ldr	r0, [pc, #132]	; (810216c <HAL_TIM_Encoder_MspInit+0x1e4>)
 81020e6:	f002 f92b 	bl	8104340 <HAL_GPIO_Init>
}
 81020ea:	e033      	b.n	8102154 <HAL_TIM_Encoder_MspInit+0x1cc>
  else if(htim_encoder->Instance==TIM4)
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	681b      	ldr	r3, [r3, #0]
 81020f0:	4a1f      	ldr	r2, [pc, #124]	; (8102170 <HAL_TIM_Encoder_MspInit+0x1e8>)
 81020f2:	4293      	cmp	r3, r2
 81020f4:	d12e      	bne.n	8102154 <HAL_TIM_Encoder_MspInit+0x1cc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 81020f6:	4b19      	ldr	r3, [pc, #100]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 81020f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81020fc:	4a17      	ldr	r2, [pc, #92]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 81020fe:	f043 0304 	orr.w	r3, r3, #4
 8102102:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102106:	4b15      	ldr	r3, [pc, #84]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810210c:	f003 0304 	and.w	r3, r3, #4
 8102110:	613b      	str	r3, [r7, #16]
 8102112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102114:	4b11      	ldr	r3, [pc, #68]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810211a:	4a10      	ldr	r2, [pc, #64]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 810211c:	f043 0308 	orr.w	r3, r3, #8
 8102120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102124:	4b0d      	ldr	r3, [pc, #52]	; (810215c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8102126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810212a:	f003 0308 	and.w	r3, r3, #8
 810212e:	60fb      	str	r3, [r7, #12]
 8102130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102132:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102138:	2302      	movs	r3, #2
 810213a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810213c:	2300      	movs	r3, #0
 810213e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102140:	2300      	movs	r3, #0
 8102142:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102144:	2302      	movs	r3, #2
 8102146:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 810214c:	4619      	mov	r1, r3
 810214e:	4809      	ldr	r0, [pc, #36]	; (8102174 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8102150:	f002 f8f6 	bl	8104340 <HAL_GPIO_Init>
}
 8102154:	bf00      	nop
 8102156:	3740      	adds	r7, #64	; 0x40
 8102158:	46bd      	mov	sp, r7
 810215a:	bd80      	pop	{r7, pc}
 810215c:	58024400 	.word	0x58024400
 8102160:	58020000 	.word	0x58020000
 8102164:	58020400 	.word	0x58020400
 8102168:	40000400 	.word	0x40000400
 810216c:	58020800 	.word	0x58020800
 8102170:	40000800 	.word	0x40000800
 8102174:	58020c00 	.word	0x58020c00

08102178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102178:	b580      	push	{r7, lr}
 810217a:	b088      	sub	sp, #32
 810217c:	af00      	add	r7, sp, #0
 810217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102180:	f107 030c 	add.w	r3, r7, #12
 8102184:	2200      	movs	r2, #0
 8102186:	601a      	str	r2, [r3, #0]
 8102188:	605a      	str	r2, [r3, #4]
 810218a:	609a      	str	r2, [r3, #8]
 810218c:	60da      	str	r2, [r3, #12]
 810218e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	4a13      	ldr	r2, [pc, #76]	; (81021e4 <HAL_TIM_MspPostInit+0x6c>)
 8102196:	4293      	cmp	r3, r2
 8102198:	d11f      	bne.n	81021da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810219a:	4b13      	ldr	r3, [pc, #76]	; (81021e8 <HAL_TIM_MspPostInit+0x70>)
 810219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021a0:	4a11      	ldr	r2, [pc, #68]	; (81021e8 <HAL_TIM_MspPostInit+0x70>)
 81021a2:	f043 0310 	orr.w	r3, r3, #16
 81021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021aa:	4b0f      	ldr	r3, [pc, #60]	; (81021e8 <HAL_TIM_MspPostInit+0x70>)
 81021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021b0:	f003 0310 	and.w	r3, r3, #16
 81021b4:	60bb      	str	r3, [r7, #8]
 81021b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 81021b8:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 81021bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021be:	2302      	movs	r3, #2
 81021c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021c2:	2300      	movs	r3, #0
 81021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021c6:	2300      	movs	r3, #0
 81021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81021ca:	2301      	movs	r3, #1
 81021cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81021ce:	f107 030c 	add.w	r3, r7, #12
 81021d2:	4619      	mov	r1, r3
 81021d4:	4805      	ldr	r0, [pc, #20]	; (81021ec <HAL_TIM_MspPostInit+0x74>)
 81021d6:	f002 f8b3 	bl	8104340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 81021da:	bf00      	nop
 81021dc:	3720      	adds	r7, #32
 81021de:	46bd      	mov	sp, r7
 81021e0:	bd80      	pop	{r7, pc}
 81021e2:	bf00      	nop
 81021e4:	40010000 	.word	0x40010000
 81021e8:	58024400 	.word	0x58024400
 81021ec:	58021000 	.word	0x58021000

081021f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81021f0:	b580      	push	{r7, lr}
 81021f2:	b0ba      	sub	sp, #232	; 0xe8
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81021f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81021fc:	2200      	movs	r2, #0
 81021fe:	601a      	str	r2, [r3, #0]
 8102200:	605a      	str	r2, [r3, #4]
 8102202:	609a      	str	r2, [r3, #8]
 8102204:	60da      	str	r2, [r3, #12]
 8102206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102208:	f107 0318 	add.w	r3, r7, #24
 810220c:	22bc      	movs	r2, #188	; 0xbc
 810220e:	2100      	movs	r1, #0
 8102210:	4618      	mov	r0, r3
 8102212:	f007 fa63 	bl	81096dc <memset>
  if(huart->Instance==UART4)
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	681b      	ldr	r3, [r3, #0]
 810221a:	4a60      	ldr	r2, [pc, #384]	; (810239c <HAL_UART_MspInit+0x1ac>)
 810221c:	4293      	cmp	r3, r2
 810221e:	d170      	bne.n	8102302 <HAL_UART_MspInit+0x112>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8102220:	2302      	movs	r3, #2
 8102222:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102224:	2300      	movs	r3, #0
 8102226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810222a:	f107 0318 	add.w	r3, r7, #24
 810222e:	4618      	mov	r0, r3
 8102230:	f003 fbea 	bl	8105a08 <HAL_RCCEx_PeriphCLKConfig>
 8102234:	4603      	mov	r3, r0
 8102236:	2b00      	cmp	r3, #0
 8102238:	d001      	beq.n	810223e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810223a:	f7ff fdfd 	bl	8101e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 810223e:	4b58      	ldr	r3, [pc, #352]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 8102240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102244:	4a56      	ldr	r2, [pc, #344]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 8102246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810224a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810224e:	4b54      	ldr	r3, [pc, #336]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 8102250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102258:	617b      	str	r3, [r7, #20]
 810225a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 810225c:	4b50      	ldr	r3, [pc, #320]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 810225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102262:	4a4f      	ldr	r2, [pc, #316]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 8102264:	f043 0304 	orr.w	r3, r3, #4
 8102268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810226c:	4b4c      	ldr	r3, [pc, #304]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 810226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102272:	f003 0304 	and.w	r3, r3, #4
 8102276:	613b      	str	r3, [r7, #16]
 8102278:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 810227a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810227e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102282:	2302      	movs	r3, #2
 8102284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102288:	2300      	movs	r3, #0
 810228a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810228e:	2300      	movs	r3, #0
 8102290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8102294:	2308      	movs	r3, #8
 8102296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810229a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810229e:	4619      	mov	r1, r3
 81022a0:	4840      	ldr	r0, [pc, #256]	; (81023a4 <HAL_UART_MspInit+0x1b4>)
 81022a2:	f002 f84d 	bl	8104340 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 81022a6:	4b40      	ldr	r3, [pc, #256]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022a8:	4a40      	ldr	r2, [pc, #256]	; (81023ac <HAL_UART_MspInit+0x1bc>)
 81022aa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 81022ac:	4b3e      	ldr	r3, [pc, #248]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022ae:	2240      	movs	r2, #64	; 0x40
 81022b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81022b2:	4b3d      	ldr	r3, [pc, #244]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022b4:	2240      	movs	r2, #64	; 0x40
 81022b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81022b8:	4b3b      	ldr	r3, [pc, #236]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022ba:	2200      	movs	r2, #0
 81022bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 81022be:	4b3a      	ldr	r3, [pc, #232]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81022c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81022c6:	4b38      	ldr	r3, [pc, #224]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022c8:	2200      	movs	r2, #0
 81022ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81022cc:	4b36      	ldr	r3, [pc, #216]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022ce:	2200      	movs	r2, #0
 81022d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 81022d2:	4b35      	ldr	r3, [pc, #212]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022d4:	2200      	movs	r2, #0
 81022d6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 81022d8:	4b33      	ldr	r3, [pc, #204]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022da:	2200      	movs	r2, #0
 81022dc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81022de:	4b32      	ldr	r3, [pc, #200]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022e0:	2200      	movs	r2, #0
 81022e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 81022e4:	4830      	ldr	r0, [pc, #192]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022e6:	f000 fb6b 	bl	81029c0 <HAL_DMA_Init>
 81022ea:	4603      	mov	r3, r0
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d001      	beq.n	81022f4 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 81022f0:	f7ff fda2 	bl	8101e38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	4a2c      	ldr	r2, [pc, #176]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022f8:	679a      	str	r2, [r3, #120]	; 0x78
 81022fa:	4a2b      	ldr	r2, [pc, #172]	; (81023a8 <HAL_UART_MspInit+0x1b8>)
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102300:	e047      	b.n	8102392 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	681b      	ldr	r3, [r3, #0]
 8102306:	4a2a      	ldr	r2, [pc, #168]	; (81023b0 <HAL_UART_MspInit+0x1c0>)
 8102308:	4293      	cmp	r3, r2
 810230a:	d142      	bne.n	8102392 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810230c:	2302      	movs	r3, #2
 810230e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102310:	2300      	movs	r3, #0
 8102312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102316:	f107 0318 	add.w	r3, r7, #24
 810231a:	4618      	mov	r0, r3
 810231c:	f003 fb74 	bl	8105a08 <HAL_RCCEx_PeriphCLKConfig>
 8102320:	4603      	mov	r3, r0
 8102322:	2b00      	cmp	r3, #0
 8102324:	d001      	beq.n	810232a <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8102326:	f7ff fd87 	bl	8101e38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 810232a:	4b1d      	ldr	r3, [pc, #116]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 810232c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102330:	4a1b      	ldr	r2, [pc, #108]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 8102332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810233a:	4b19      	ldr	r3, [pc, #100]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 810233c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102344:	60fb      	str	r3, [r7, #12]
 8102346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102348:	4b15      	ldr	r3, [pc, #84]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 810234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810234e:	4a14      	ldr	r2, [pc, #80]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 8102350:	f043 0308 	orr.w	r3, r3, #8
 8102354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102358:	4b11      	ldr	r3, [pc, #68]	; (81023a0 <HAL_UART_MspInit+0x1b0>)
 810235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810235e:	f003 0308 	and.w	r3, r3, #8
 8102362:	60bb      	str	r3, [r7, #8]
 8102364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102366:	f44f 7340 	mov.w	r3, #768	; 0x300
 810236a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810236e:	2302      	movs	r3, #2
 8102370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102374:	2300      	movs	r3, #0
 8102376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810237a:	2300      	movs	r3, #0
 810237c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102380:	2307      	movs	r3, #7
 8102382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102386:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810238a:	4619      	mov	r1, r3
 810238c:	4809      	ldr	r0, [pc, #36]	; (81023b4 <HAL_UART_MspInit+0x1c4>)
 810238e:	f001 ffd7 	bl	8104340 <HAL_GPIO_Init>
}
 8102392:	bf00      	nop
 8102394:	37e8      	adds	r7, #232	; 0xe8
 8102396:	46bd      	mov	sp, r7
 8102398:	bd80      	pop	{r7, pc}
 810239a:	bf00      	nop
 810239c:	40004c00 	.word	0x40004c00
 81023a0:	58024400 	.word	0x58024400
 81023a4:	58020800 	.word	0x58020800
 81023a8:	100004b4 	.word	0x100004b4
 81023ac:	40020010 	.word	0x40020010
 81023b0:	40004800 	.word	0x40004800
 81023b4:	58020c00 	.word	0x58020c00

081023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81023b8:	b480      	push	{r7}
 81023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81023bc:	e7fe      	b.n	81023bc <NMI_Handler+0x4>

081023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81023be:	b480      	push	{r7}
 81023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81023c2:	e7fe      	b.n	81023c2 <HardFault_Handler+0x4>

081023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81023c4:	b480      	push	{r7}
 81023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81023c8:	e7fe      	b.n	81023c8 <MemManage_Handler+0x4>

081023ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81023ca:	b480      	push	{r7}
 81023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81023ce:	e7fe      	b.n	81023ce <BusFault_Handler+0x4>

081023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81023d0:	b480      	push	{r7}
 81023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81023d4:	e7fe      	b.n	81023d4 <UsageFault_Handler+0x4>

081023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81023d6:	b480      	push	{r7}
 81023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81023da:	bf00      	nop
 81023dc:	46bd      	mov	sp, r7
 81023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e2:	4770      	bx	lr

081023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81023e4:	b480      	push	{r7}
 81023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81023e8:	bf00      	nop
 81023ea:	46bd      	mov	sp, r7
 81023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023f0:	4770      	bx	lr

081023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81023f2:	b480      	push	{r7}
 81023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81023f6:	bf00      	nop
 81023f8:	46bd      	mov	sp, r7
 81023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023fe:	4770      	bx	lr

08102400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102400:	b580      	push	{r7, lr}
 8102402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102404:	f000 f998 	bl	8102738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102408:	bf00      	nop
 810240a:	bd80      	pop	{r7, pc}

0810240c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 810240c:	b580      	push	{r7, lr}
 810240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8102410:	2001      	movs	r0, #1
 8102412:	f002 f95e 	bl	81046d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8102416:	bf00      	nop
 8102418:	bd80      	pop	{r7, pc}
	...

0810241c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 810241c:	b580      	push	{r7, lr}
 810241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8102420:	4802      	ldr	r0, [pc, #8]	; (810242c <DMA1_Stream0_IRQHandler+0x10>)
 8102422:	f000 fe27 	bl	8103074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102426:	bf00      	nop
 8102428:	bd80      	pop	{r7, pc}
 810242a:	bf00      	nop
 810242c:	100004b4 	.word	0x100004b4

08102430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102430:	b480      	push	{r7}
 8102432:	af00      	add	r7, sp, #0
	return 1;
 8102434:	2301      	movs	r3, #1
}
 8102436:	4618      	mov	r0, r3
 8102438:	46bd      	mov	sp, r7
 810243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810243e:	4770      	bx	lr

08102440 <_kill>:

int _kill(int pid, int sig)
{
 8102440:	b580      	push	{r7, lr}
 8102442:	b082      	sub	sp, #8
 8102444:	af00      	add	r7, sp, #0
 8102446:	6078      	str	r0, [r7, #4]
 8102448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810244a:	f007 f909 	bl	8109660 <__errno>
 810244e:	4603      	mov	r3, r0
 8102450:	2216      	movs	r2, #22
 8102452:	601a      	str	r2, [r3, #0]
	return -1;
 8102454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102458:	4618      	mov	r0, r3
 810245a:	3708      	adds	r7, #8
 810245c:	46bd      	mov	sp, r7
 810245e:	bd80      	pop	{r7, pc}

08102460 <_exit>:

void _exit (int status)
{
 8102460:	b580      	push	{r7, lr}
 8102462:	b082      	sub	sp, #8
 8102464:	af00      	add	r7, sp, #0
 8102466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102468:	f04f 31ff 	mov.w	r1, #4294967295
 810246c:	6878      	ldr	r0, [r7, #4]
 810246e:	f7ff ffe7 	bl	8102440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8102472:	e7fe      	b.n	8102472 <_exit+0x12>

08102474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102474:	b580      	push	{r7, lr}
 8102476:	b086      	sub	sp, #24
 8102478:	af00      	add	r7, sp, #0
 810247a:	60f8      	str	r0, [r7, #12]
 810247c:	60b9      	str	r1, [r7, #8]
 810247e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102480:	2300      	movs	r3, #0
 8102482:	617b      	str	r3, [r7, #20]
 8102484:	e00a      	b.n	810249c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8102486:	f3af 8000 	nop.w
 810248a:	4601      	mov	r1, r0
 810248c:	68bb      	ldr	r3, [r7, #8]
 810248e:	1c5a      	adds	r2, r3, #1
 8102490:	60ba      	str	r2, [r7, #8]
 8102492:	b2ca      	uxtb	r2, r1
 8102494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102496:	697b      	ldr	r3, [r7, #20]
 8102498:	3301      	adds	r3, #1
 810249a:	617b      	str	r3, [r7, #20]
 810249c:	697a      	ldr	r2, [r7, #20]
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	429a      	cmp	r2, r3
 81024a2:	dbf0      	blt.n	8102486 <_read+0x12>
	}

return len;
 81024a4:	687b      	ldr	r3, [r7, #4]
}
 81024a6:	4618      	mov	r0, r3
 81024a8:	3718      	adds	r7, #24
 81024aa:	46bd      	mov	sp, r7
 81024ac:	bd80      	pop	{r7, pc}

081024ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81024ae:	b580      	push	{r7, lr}
 81024b0:	b086      	sub	sp, #24
 81024b2:	af00      	add	r7, sp, #0
 81024b4:	60f8      	str	r0, [r7, #12]
 81024b6:	60b9      	str	r1, [r7, #8]
 81024b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81024ba:	2300      	movs	r3, #0
 81024bc:	617b      	str	r3, [r7, #20]
 81024be:	e009      	b.n	81024d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81024c0:	68bb      	ldr	r3, [r7, #8]
 81024c2:	1c5a      	adds	r2, r3, #1
 81024c4:	60ba      	str	r2, [r7, #8]
 81024c6:	781b      	ldrb	r3, [r3, #0]
 81024c8:	4618      	mov	r0, r3
 81024ca:	f7ff fc49 	bl	8101d60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81024ce:	697b      	ldr	r3, [r7, #20]
 81024d0:	3301      	adds	r3, #1
 81024d2:	617b      	str	r3, [r7, #20]
 81024d4:	697a      	ldr	r2, [r7, #20]
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	429a      	cmp	r2, r3
 81024da:	dbf1      	blt.n	81024c0 <_write+0x12>
	}
	return len;
 81024dc:	687b      	ldr	r3, [r7, #4]
}
 81024de:	4618      	mov	r0, r3
 81024e0:	3718      	adds	r7, #24
 81024e2:	46bd      	mov	sp, r7
 81024e4:	bd80      	pop	{r7, pc}

081024e6 <_close>:

int _close(int file)
{
 81024e6:	b480      	push	{r7}
 81024e8:	b083      	sub	sp, #12
 81024ea:	af00      	add	r7, sp, #0
 81024ec:	6078      	str	r0, [r7, #4]
	return -1;
 81024ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 81024f2:	4618      	mov	r0, r3
 81024f4:	370c      	adds	r7, #12
 81024f6:	46bd      	mov	sp, r7
 81024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024fc:	4770      	bx	lr

081024fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 81024fe:	b480      	push	{r7}
 8102500:	b083      	sub	sp, #12
 8102502:	af00      	add	r7, sp, #0
 8102504:	6078      	str	r0, [r7, #4]
 8102506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102508:	683b      	ldr	r3, [r7, #0]
 810250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810250e:	605a      	str	r2, [r3, #4]
	return 0;
 8102510:	2300      	movs	r3, #0
}
 8102512:	4618      	mov	r0, r3
 8102514:	370c      	adds	r7, #12
 8102516:	46bd      	mov	sp, r7
 8102518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251c:	4770      	bx	lr

0810251e <_isatty>:

int _isatty(int file)
{
 810251e:	b480      	push	{r7}
 8102520:	b083      	sub	sp, #12
 8102522:	af00      	add	r7, sp, #0
 8102524:	6078      	str	r0, [r7, #4]
	return 1;
 8102526:	2301      	movs	r3, #1
}
 8102528:	4618      	mov	r0, r3
 810252a:	370c      	adds	r7, #12
 810252c:	46bd      	mov	sp, r7
 810252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102532:	4770      	bx	lr

08102534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102534:	b480      	push	{r7}
 8102536:	b085      	sub	sp, #20
 8102538:	af00      	add	r7, sp, #0
 810253a:	60f8      	str	r0, [r7, #12]
 810253c:	60b9      	str	r1, [r7, #8]
 810253e:	607a      	str	r2, [r7, #4]
	return 0;
 8102540:	2300      	movs	r3, #0
}
 8102542:	4618      	mov	r0, r3
 8102544:	3714      	adds	r7, #20
 8102546:	46bd      	mov	sp, r7
 8102548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810254c:	4770      	bx	lr
	...

08102550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102550:	b580      	push	{r7, lr}
 8102552:	b086      	sub	sp, #24
 8102554:	af00      	add	r7, sp, #0
 8102556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102558:	4a14      	ldr	r2, [pc, #80]	; (81025ac <_sbrk+0x5c>)
 810255a:	4b15      	ldr	r3, [pc, #84]	; (81025b0 <_sbrk+0x60>)
 810255c:	1ad3      	subs	r3, r2, r3
 810255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102560:	697b      	ldr	r3, [r7, #20]
 8102562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102564:	4b13      	ldr	r3, [pc, #76]	; (81025b4 <_sbrk+0x64>)
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	2b00      	cmp	r3, #0
 810256a:	d102      	bne.n	8102572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810256c:	4b11      	ldr	r3, [pc, #68]	; (81025b4 <_sbrk+0x64>)
 810256e:	4a12      	ldr	r2, [pc, #72]	; (81025b8 <_sbrk+0x68>)
 8102570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102572:	4b10      	ldr	r3, [pc, #64]	; (81025b4 <_sbrk+0x64>)
 8102574:	681a      	ldr	r2, [r3, #0]
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	4413      	add	r3, r2
 810257a:	693a      	ldr	r2, [r7, #16]
 810257c:	429a      	cmp	r2, r3
 810257e:	d207      	bcs.n	8102590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102580:	f007 f86e 	bl	8109660 <__errno>
 8102584:	4603      	mov	r3, r0
 8102586:	220c      	movs	r2, #12
 8102588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810258a:	f04f 33ff 	mov.w	r3, #4294967295
 810258e:	e009      	b.n	81025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102590:	4b08      	ldr	r3, [pc, #32]	; (81025b4 <_sbrk+0x64>)
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102596:	4b07      	ldr	r3, [pc, #28]	; (81025b4 <_sbrk+0x64>)
 8102598:	681a      	ldr	r2, [r3, #0]
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	4413      	add	r3, r2
 810259e:	4a05      	ldr	r2, [pc, #20]	; (81025b4 <_sbrk+0x64>)
 81025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81025a2:	68fb      	ldr	r3, [r7, #12]
}
 81025a4:	4618      	mov	r0, r3
 81025a6:	3718      	adds	r7, #24
 81025a8:	46bd      	mov	sp, r7
 81025aa:	bd80      	pop	{r7, pc}
 81025ac:	10048000 	.word	0x10048000
 81025b0:	00000400 	.word	0x00000400
 81025b4:	10000548 	.word	0x10000548
 81025b8:	10000560 	.word	0x10000560

081025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 81025f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81025c0:	f7fe fda2 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81025c4:	480c      	ldr	r0, [pc, #48]	; (81025f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81025c6:	490d      	ldr	r1, [pc, #52]	; (81025fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81025c8:	4a0d      	ldr	r2, [pc, #52]	; (8102600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81025ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81025cc:	e002      	b.n	81025d4 <LoopCopyDataInit>

081025ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81025ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81025d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81025d2:	3304      	adds	r3, #4

081025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81025d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81025d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81025d8:	d3f9      	bcc.n	81025ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81025da:	4a0a      	ldr	r2, [pc, #40]	; (8102604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81025dc:	4c0a      	ldr	r4, [pc, #40]	; (8102608 <LoopFillZerobss+0x22>)
  movs r3, #0
 81025de:	2300      	movs	r3, #0
  b LoopFillZerobss
 81025e0:	e001      	b.n	81025e6 <LoopFillZerobss>

081025e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81025e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81025e4:	3204      	adds	r2, #4

081025e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81025e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81025e8:	d3fb      	bcc.n	81025e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81025ea:	f007 f853 	bl	8109694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81025ee:	f7fe ffa7 	bl	8101540 <main>
  bx  lr
 81025f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81025f4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81025f8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81025fc:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 8102600:	0810e76c 	.word	0x0810e76c
  ldr r2, =_sbss
 8102604:	100001f4 	.word	0x100001f4
  ldr r4, =_ebss
 8102608:	10000560 	.word	0x10000560

0810260c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810260c:	e7fe      	b.n	810260c <ADC3_IRQHandler>
	...

08102610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102610:	b580      	push	{r7, lr}
 8102612:	b082      	sub	sp, #8
 8102614:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102616:	4b28      	ldr	r3, [pc, #160]	; (81026b8 <HAL_Init+0xa8>)
 8102618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810261c:	4a26      	ldr	r2, [pc, #152]	; (81026b8 <HAL_Init+0xa8>)
 810261e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102622:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102626:	4b24      	ldr	r3, [pc, #144]	; (81026b8 <HAL_Init+0xa8>)
 8102628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102630:	603b      	str	r3, [r7, #0]
 8102632:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102634:	4b21      	ldr	r3, [pc, #132]	; (81026bc <HAL_Init+0xac>)
 8102636:	681b      	ldr	r3, [r3, #0]
 8102638:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810263c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102640:	4a1e      	ldr	r2, [pc, #120]	; (81026bc <HAL_Init+0xac>)
 8102642:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102646:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102648:	4b1c      	ldr	r3, [pc, #112]	; (81026bc <HAL_Init+0xac>)
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	4a1b      	ldr	r2, [pc, #108]	; (81026bc <HAL_Init+0xac>)
 810264e:	f043 0301 	orr.w	r3, r3, #1
 8102652:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102654:	2003      	movs	r0, #3
 8102656:	f000 f95f 	bl	8102918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810265a:	f002 fffd 	bl	8105658 <HAL_RCC_GetSysClockFreq>
 810265e:	4602      	mov	r2, r0
 8102660:	4b15      	ldr	r3, [pc, #84]	; (81026b8 <HAL_Init+0xa8>)
 8102662:	699b      	ldr	r3, [r3, #24]
 8102664:	0a1b      	lsrs	r3, r3, #8
 8102666:	f003 030f 	and.w	r3, r3, #15
 810266a:	4915      	ldr	r1, [pc, #84]	; (81026c0 <HAL_Init+0xb0>)
 810266c:	5ccb      	ldrb	r3, [r1, r3]
 810266e:	f003 031f 	and.w	r3, r3, #31
 8102672:	fa22 f303 	lsr.w	r3, r2, r3
 8102676:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102678:	4b0f      	ldr	r3, [pc, #60]	; (81026b8 <HAL_Init+0xa8>)
 810267a:	699b      	ldr	r3, [r3, #24]
 810267c:	f003 030f 	and.w	r3, r3, #15
 8102680:	4a0f      	ldr	r2, [pc, #60]	; (81026c0 <HAL_Init+0xb0>)
 8102682:	5cd3      	ldrb	r3, [r2, r3]
 8102684:	f003 031f 	and.w	r3, r3, #31
 8102688:	687a      	ldr	r2, [r7, #4]
 810268a:	fa22 f303 	lsr.w	r3, r2, r3
 810268e:	4a0d      	ldr	r2, [pc, #52]	; (81026c4 <HAL_Init+0xb4>)
 8102690:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102692:	4b0c      	ldr	r3, [pc, #48]	; (81026c4 <HAL_Init+0xb4>)
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	4a0c      	ldr	r2, [pc, #48]	; (81026c8 <HAL_Init+0xb8>)
 8102698:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810269a:	2000      	movs	r0, #0
 810269c:	f000 f816 	bl	81026cc <HAL_InitTick>
 81026a0:	4603      	mov	r3, r0
 81026a2:	2b00      	cmp	r3, #0
 81026a4:	d001      	beq.n	81026aa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81026a6:	2301      	movs	r3, #1
 81026a8:	e002      	b.n	81026b0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81026aa:	f7ff fbcb 	bl	8101e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81026ae:	2300      	movs	r3, #0
}
 81026b0:	4618      	mov	r0, r3
 81026b2:	3708      	adds	r7, #8
 81026b4:	46bd      	mov	sp, r7
 81026b6:	bd80      	pop	{r7, pc}
 81026b8:	58024400 	.word	0x58024400
 81026bc:	40024400 	.word	0x40024400
 81026c0:	0810e26c 	.word	0x0810e26c
 81026c4:	10000004 	.word	0x10000004
 81026c8:	10000000 	.word	0x10000000

081026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81026cc:	b580      	push	{r7, lr}
 81026ce:	b082      	sub	sp, #8
 81026d0:	af00      	add	r7, sp, #0
 81026d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81026d4:	4b15      	ldr	r3, [pc, #84]	; (810272c <HAL_InitTick+0x60>)
 81026d6:	781b      	ldrb	r3, [r3, #0]
 81026d8:	2b00      	cmp	r3, #0
 81026da:	d101      	bne.n	81026e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81026dc:	2301      	movs	r3, #1
 81026de:	e021      	b.n	8102724 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81026e0:	4b13      	ldr	r3, [pc, #76]	; (8102730 <HAL_InitTick+0x64>)
 81026e2:	681a      	ldr	r2, [r3, #0]
 81026e4:	4b11      	ldr	r3, [pc, #68]	; (810272c <HAL_InitTick+0x60>)
 81026e6:	781b      	ldrb	r3, [r3, #0]
 81026e8:	4619      	mov	r1, r3
 81026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 81026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81026f6:	4618      	mov	r0, r3
 81026f8:	f000 f941 	bl	810297e <HAL_SYSTICK_Config>
 81026fc:	4603      	mov	r3, r0
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d001      	beq.n	8102706 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102702:	2301      	movs	r3, #1
 8102704:	e00e      	b.n	8102724 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	2b0f      	cmp	r3, #15
 810270a:	d80a      	bhi.n	8102722 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810270c:	2200      	movs	r2, #0
 810270e:	6879      	ldr	r1, [r7, #4]
 8102710:	f04f 30ff 	mov.w	r0, #4294967295
 8102714:	f000 f90b 	bl	810292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102718:	4a06      	ldr	r2, [pc, #24]	; (8102734 <HAL_InitTick+0x68>)
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810271e:	2300      	movs	r3, #0
 8102720:	e000      	b.n	8102724 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102722:	2301      	movs	r3, #1
}
 8102724:	4618      	mov	r0, r3
 8102726:	3708      	adds	r7, #8
 8102728:	46bd      	mov	sp, r7
 810272a:	bd80      	pop	{r7, pc}
 810272c:	1000001c 	.word	0x1000001c
 8102730:	10000000 	.word	0x10000000
 8102734:	10000018 	.word	0x10000018

08102738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102738:	b480      	push	{r7}
 810273a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810273c:	4b06      	ldr	r3, [pc, #24]	; (8102758 <HAL_IncTick+0x20>)
 810273e:	781b      	ldrb	r3, [r3, #0]
 8102740:	461a      	mov	r2, r3
 8102742:	4b06      	ldr	r3, [pc, #24]	; (810275c <HAL_IncTick+0x24>)
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	4413      	add	r3, r2
 8102748:	4a04      	ldr	r2, [pc, #16]	; (810275c <HAL_IncTick+0x24>)
 810274a:	6013      	str	r3, [r2, #0]
}
 810274c:	bf00      	nop
 810274e:	46bd      	mov	sp, r7
 8102750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102754:	4770      	bx	lr
 8102756:	bf00      	nop
 8102758:	1000001c 	.word	0x1000001c
 810275c:	1000054c 	.word	0x1000054c

08102760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102760:	b480      	push	{r7}
 8102762:	af00      	add	r7, sp, #0
  return uwTick;
 8102764:	4b03      	ldr	r3, [pc, #12]	; (8102774 <HAL_GetTick+0x14>)
 8102766:	681b      	ldr	r3, [r3, #0]
}
 8102768:	4618      	mov	r0, r3
 810276a:	46bd      	mov	sp, r7
 810276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102770:	4770      	bx	lr
 8102772:	bf00      	nop
 8102774:	1000054c 	.word	0x1000054c

08102778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102778:	b480      	push	{r7}
 810277a:	b085      	sub	sp, #20
 810277c:	af00      	add	r7, sp, #0
 810277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	f003 0307 	and.w	r3, r3, #7
 8102786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102788:	4b0c      	ldr	r3, [pc, #48]	; (81027bc <__NVIC_SetPriorityGrouping+0x44>)
 810278a:	68db      	ldr	r3, [r3, #12]
 810278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810278e:	68ba      	ldr	r2, [r7, #8]
 8102790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102794:	4013      	ands	r3, r2
 8102796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102798:	68fb      	ldr	r3, [r7, #12]
 810279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810279c:	68bb      	ldr	r3, [r7, #8]
 810279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81027aa:	4a04      	ldr	r2, [pc, #16]	; (81027bc <__NVIC_SetPriorityGrouping+0x44>)
 81027ac:	68bb      	ldr	r3, [r7, #8]
 81027ae:	60d3      	str	r3, [r2, #12]
}
 81027b0:	bf00      	nop
 81027b2:	3714      	adds	r7, #20
 81027b4:	46bd      	mov	sp, r7
 81027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ba:	4770      	bx	lr
 81027bc:	e000ed00 	.word	0xe000ed00

081027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81027c0:	b480      	push	{r7}
 81027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81027c4:	4b04      	ldr	r3, [pc, #16]	; (81027d8 <__NVIC_GetPriorityGrouping+0x18>)
 81027c6:	68db      	ldr	r3, [r3, #12]
 81027c8:	0a1b      	lsrs	r3, r3, #8
 81027ca:	f003 0307 	and.w	r3, r3, #7
}
 81027ce:	4618      	mov	r0, r3
 81027d0:	46bd      	mov	sp, r7
 81027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027d6:	4770      	bx	lr
 81027d8:	e000ed00 	.word	0xe000ed00

081027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81027dc:	b480      	push	{r7}
 81027de:	b083      	sub	sp, #12
 81027e0:	af00      	add	r7, sp, #0
 81027e2:	4603      	mov	r3, r0
 81027e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81027e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	db0b      	blt.n	8102806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81027ee:	88fb      	ldrh	r3, [r7, #6]
 81027f0:	f003 021f 	and.w	r2, r3, #31
 81027f4:	4907      	ldr	r1, [pc, #28]	; (8102814 <__NVIC_EnableIRQ+0x38>)
 81027f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027fa:	095b      	lsrs	r3, r3, #5
 81027fc:	2001      	movs	r0, #1
 81027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8102802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102806:	bf00      	nop
 8102808:	370c      	adds	r7, #12
 810280a:	46bd      	mov	sp, r7
 810280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102810:	4770      	bx	lr
 8102812:	bf00      	nop
 8102814:	e000e100 	.word	0xe000e100

08102818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102818:	b480      	push	{r7}
 810281a:	b083      	sub	sp, #12
 810281c:	af00      	add	r7, sp, #0
 810281e:	4603      	mov	r3, r0
 8102820:	6039      	str	r1, [r7, #0]
 8102822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102828:	2b00      	cmp	r3, #0
 810282a:	db0a      	blt.n	8102842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810282c:	683b      	ldr	r3, [r7, #0]
 810282e:	b2da      	uxtb	r2, r3
 8102830:	490c      	ldr	r1, [pc, #48]	; (8102864 <__NVIC_SetPriority+0x4c>)
 8102832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102836:	0112      	lsls	r2, r2, #4
 8102838:	b2d2      	uxtb	r2, r2
 810283a:	440b      	add	r3, r1
 810283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102840:	e00a      	b.n	8102858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102842:	683b      	ldr	r3, [r7, #0]
 8102844:	b2da      	uxtb	r2, r3
 8102846:	4908      	ldr	r1, [pc, #32]	; (8102868 <__NVIC_SetPriority+0x50>)
 8102848:	88fb      	ldrh	r3, [r7, #6]
 810284a:	f003 030f 	and.w	r3, r3, #15
 810284e:	3b04      	subs	r3, #4
 8102850:	0112      	lsls	r2, r2, #4
 8102852:	b2d2      	uxtb	r2, r2
 8102854:	440b      	add	r3, r1
 8102856:	761a      	strb	r2, [r3, #24]
}
 8102858:	bf00      	nop
 810285a:	370c      	adds	r7, #12
 810285c:	46bd      	mov	sp, r7
 810285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102862:	4770      	bx	lr
 8102864:	e000e100 	.word	0xe000e100
 8102868:	e000ed00 	.word	0xe000ed00

0810286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810286c:	b480      	push	{r7}
 810286e:	b089      	sub	sp, #36	; 0x24
 8102870:	af00      	add	r7, sp, #0
 8102872:	60f8      	str	r0, [r7, #12]
 8102874:	60b9      	str	r1, [r7, #8]
 8102876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102878:	68fb      	ldr	r3, [r7, #12]
 810287a:	f003 0307 	and.w	r3, r3, #7
 810287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102880:	69fb      	ldr	r3, [r7, #28]
 8102882:	f1c3 0307 	rsb	r3, r3, #7
 8102886:	2b04      	cmp	r3, #4
 8102888:	bf28      	it	cs
 810288a:	2304      	movcs	r3, #4
 810288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810288e:	69fb      	ldr	r3, [r7, #28]
 8102890:	3304      	adds	r3, #4
 8102892:	2b06      	cmp	r3, #6
 8102894:	d902      	bls.n	810289c <NVIC_EncodePriority+0x30>
 8102896:	69fb      	ldr	r3, [r7, #28]
 8102898:	3b03      	subs	r3, #3
 810289a:	e000      	b.n	810289e <NVIC_EncodePriority+0x32>
 810289c:	2300      	movs	r3, #0
 810289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028a0:	f04f 32ff 	mov.w	r2, #4294967295
 81028a4:	69bb      	ldr	r3, [r7, #24]
 81028a6:	fa02 f303 	lsl.w	r3, r2, r3
 81028aa:	43da      	mvns	r2, r3
 81028ac:	68bb      	ldr	r3, [r7, #8]
 81028ae:	401a      	ands	r2, r3
 81028b0:	697b      	ldr	r3, [r7, #20]
 81028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81028b4:	f04f 31ff 	mov.w	r1, #4294967295
 81028b8:	697b      	ldr	r3, [r7, #20]
 81028ba:	fa01 f303 	lsl.w	r3, r1, r3
 81028be:	43d9      	mvns	r1, r3
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028c4:	4313      	orrs	r3, r2
         );
}
 81028c6:	4618      	mov	r0, r3
 81028c8:	3724      	adds	r7, #36	; 0x24
 81028ca:	46bd      	mov	sp, r7
 81028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028d0:	4770      	bx	lr
	...

081028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81028d4:	b580      	push	{r7, lr}
 81028d6:	b082      	sub	sp, #8
 81028d8:	af00      	add	r7, sp, #0
 81028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	3b01      	subs	r3, #1
 81028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81028e4:	d301      	bcc.n	81028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81028e6:	2301      	movs	r3, #1
 81028e8:	e00f      	b.n	810290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81028ea:	4a0a      	ldr	r2, [pc, #40]	; (8102914 <SysTick_Config+0x40>)
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	3b01      	subs	r3, #1
 81028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81028f2:	210f      	movs	r1, #15
 81028f4:	f04f 30ff 	mov.w	r0, #4294967295
 81028f8:	f7ff ff8e 	bl	8102818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81028fc:	4b05      	ldr	r3, [pc, #20]	; (8102914 <SysTick_Config+0x40>)
 81028fe:	2200      	movs	r2, #0
 8102900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102902:	4b04      	ldr	r3, [pc, #16]	; (8102914 <SysTick_Config+0x40>)
 8102904:	2207      	movs	r2, #7
 8102906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102908:	2300      	movs	r3, #0
}
 810290a:	4618      	mov	r0, r3
 810290c:	3708      	adds	r7, #8
 810290e:	46bd      	mov	sp, r7
 8102910:	bd80      	pop	{r7, pc}
 8102912:	bf00      	nop
 8102914:	e000e010 	.word	0xe000e010

08102918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102918:	b580      	push	{r7, lr}
 810291a:	b082      	sub	sp, #8
 810291c:	af00      	add	r7, sp, #0
 810291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102920:	6878      	ldr	r0, [r7, #4]
 8102922:	f7ff ff29 	bl	8102778 <__NVIC_SetPriorityGrouping>
}
 8102926:	bf00      	nop
 8102928:	3708      	adds	r7, #8
 810292a:	46bd      	mov	sp, r7
 810292c:	bd80      	pop	{r7, pc}

0810292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810292e:	b580      	push	{r7, lr}
 8102930:	b086      	sub	sp, #24
 8102932:	af00      	add	r7, sp, #0
 8102934:	4603      	mov	r3, r0
 8102936:	60b9      	str	r1, [r7, #8]
 8102938:	607a      	str	r2, [r7, #4]
 810293a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810293c:	f7ff ff40 	bl	81027c0 <__NVIC_GetPriorityGrouping>
 8102940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102942:	687a      	ldr	r2, [r7, #4]
 8102944:	68b9      	ldr	r1, [r7, #8]
 8102946:	6978      	ldr	r0, [r7, #20]
 8102948:	f7ff ff90 	bl	810286c <NVIC_EncodePriority>
 810294c:	4602      	mov	r2, r0
 810294e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102952:	4611      	mov	r1, r2
 8102954:	4618      	mov	r0, r3
 8102956:	f7ff ff5f 	bl	8102818 <__NVIC_SetPriority>
}
 810295a:	bf00      	nop
 810295c:	3718      	adds	r7, #24
 810295e:	46bd      	mov	sp, r7
 8102960:	bd80      	pop	{r7, pc}

08102962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102962:	b580      	push	{r7, lr}
 8102964:	b082      	sub	sp, #8
 8102966:	af00      	add	r7, sp, #0
 8102968:	4603      	mov	r3, r0
 810296a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810296c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102970:	4618      	mov	r0, r3
 8102972:	f7ff ff33 	bl	81027dc <__NVIC_EnableIRQ>
}
 8102976:	bf00      	nop
 8102978:	3708      	adds	r7, #8
 810297a:	46bd      	mov	sp, r7
 810297c:	bd80      	pop	{r7, pc}

0810297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810297e:	b580      	push	{r7, lr}
 8102980:	b082      	sub	sp, #8
 8102982:	af00      	add	r7, sp, #0
 8102984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102986:	6878      	ldr	r0, [r7, #4]
 8102988:	f7ff ffa4 	bl	81028d4 <SysTick_Config>
 810298c:	4603      	mov	r3, r0
}
 810298e:	4618      	mov	r0, r3
 8102990:	3708      	adds	r7, #8
 8102992:	46bd      	mov	sp, r7
 8102994:	bd80      	pop	{r7, pc}
	...

08102998 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102998:	b480      	push	{r7}
 810299a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810299c:	4b07      	ldr	r3, [pc, #28]	; (81029bc <HAL_GetCurrentCPUID+0x24>)
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	091b      	lsrs	r3, r3, #4
 81029a2:	f003 030f 	and.w	r3, r3, #15
 81029a6:	2b07      	cmp	r3, #7
 81029a8:	d101      	bne.n	81029ae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81029aa:	2303      	movs	r3, #3
 81029ac:	e000      	b.n	81029b0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81029ae:	2301      	movs	r3, #1
  }
}
 81029b0:	4618      	mov	r0, r3
 81029b2:	46bd      	mov	sp, r7
 81029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b8:	4770      	bx	lr
 81029ba:	bf00      	nop
 81029bc:	e000ed00 	.word	0xe000ed00

081029c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81029c0:	b580      	push	{r7, lr}
 81029c2:	b086      	sub	sp, #24
 81029c4:	af00      	add	r7, sp, #0
 81029c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81029c8:	f7ff feca 	bl	8102760 <HAL_GetTick>
 81029cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d101      	bne.n	81029d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81029d4:	2301      	movs	r3, #1
 81029d6:	e314      	b.n	8103002 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	4a66      	ldr	r2, [pc, #408]	; (8102b78 <HAL_DMA_Init+0x1b8>)
 81029de:	4293      	cmp	r3, r2
 81029e0:	d04a      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	4a65      	ldr	r2, [pc, #404]	; (8102b7c <HAL_DMA_Init+0x1bc>)
 81029e8:	4293      	cmp	r3, r2
 81029ea:	d045      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	681b      	ldr	r3, [r3, #0]
 81029f0:	4a63      	ldr	r2, [pc, #396]	; (8102b80 <HAL_DMA_Init+0x1c0>)
 81029f2:	4293      	cmp	r3, r2
 81029f4:	d040      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	4a62      	ldr	r2, [pc, #392]	; (8102b84 <HAL_DMA_Init+0x1c4>)
 81029fc:	4293      	cmp	r3, r2
 81029fe:	d03b      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	4a60      	ldr	r2, [pc, #384]	; (8102b88 <HAL_DMA_Init+0x1c8>)
 8102a06:	4293      	cmp	r3, r2
 8102a08:	d036      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	4a5f      	ldr	r2, [pc, #380]	; (8102b8c <HAL_DMA_Init+0x1cc>)
 8102a10:	4293      	cmp	r3, r2
 8102a12:	d031      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	4a5d      	ldr	r2, [pc, #372]	; (8102b90 <HAL_DMA_Init+0x1d0>)
 8102a1a:	4293      	cmp	r3, r2
 8102a1c:	d02c      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	4a5c      	ldr	r2, [pc, #368]	; (8102b94 <HAL_DMA_Init+0x1d4>)
 8102a24:	4293      	cmp	r3, r2
 8102a26:	d027      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	4a5a      	ldr	r2, [pc, #360]	; (8102b98 <HAL_DMA_Init+0x1d8>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d022      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	4a59      	ldr	r2, [pc, #356]	; (8102b9c <HAL_DMA_Init+0x1dc>)
 8102a38:	4293      	cmp	r3, r2
 8102a3a:	d01d      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	4a57      	ldr	r2, [pc, #348]	; (8102ba0 <HAL_DMA_Init+0x1e0>)
 8102a42:	4293      	cmp	r3, r2
 8102a44:	d018      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	4a56      	ldr	r2, [pc, #344]	; (8102ba4 <HAL_DMA_Init+0x1e4>)
 8102a4c:	4293      	cmp	r3, r2
 8102a4e:	d013      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	4a54      	ldr	r2, [pc, #336]	; (8102ba8 <HAL_DMA_Init+0x1e8>)
 8102a56:	4293      	cmp	r3, r2
 8102a58:	d00e      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	4a53      	ldr	r2, [pc, #332]	; (8102bac <HAL_DMA_Init+0x1ec>)
 8102a60:	4293      	cmp	r3, r2
 8102a62:	d009      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	4a51      	ldr	r2, [pc, #324]	; (8102bb0 <HAL_DMA_Init+0x1f0>)
 8102a6a:	4293      	cmp	r3, r2
 8102a6c:	d004      	beq.n	8102a78 <HAL_DMA_Init+0xb8>
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	681b      	ldr	r3, [r3, #0]
 8102a72:	4a50      	ldr	r2, [pc, #320]	; (8102bb4 <HAL_DMA_Init+0x1f4>)
 8102a74:	4293      	cmp	r3, r2
 8102a76:	d101      	bne.n	8102a7c <HAL_DMA_Init+0xbc>
 8102a78:	2301      	movs	r3, #1
 8102a7a:	e000      	b.n	8102a7e <HAL_DMA_Init+0xbe>
 8102a7c:	2300      	movs	r3, #0
 8102a7e:	2b00      	cmp	r3, #0
 8102a80:	f000 813b 	beq.w	8102cfa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	2202      	movs	r2, #2
 8102a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	2200      	movs	r2, #0
 8102a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	4a37      	ldr	r2, [pc, #220]	; (8102b78 <HAL_DMA_Init+0x1b8>)
 8102a9a:	4293      	cmp	r3, r2
 8102a9c:	d04a      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	681b      	ldr	r3, [r3, #0]
 8102aa2:	4a36      	ldr	r2, [pc, #216]	; (8102b7c <HAL_DMA_Init+0x1bc>)
 8102aa4:	4293      	cmp	r3, r2
 8102aa6:	d045      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	4a34      	ldr	r2, [pc, #208]	; (8102b80 <HAL_DMA_Init+0x1c0>)
 8102aae:	4293      	cmp	r3, r2
 8102ab0:	d040      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102ab2:	687b      	ldr	r3, [r7, #4]
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	4a33      	ldr	r2, [pc, #204]	; (8102b84 <HAL_DMA_Init+0x1c4>)
 8102ab8:	4293      	cmp	r3, r2
 8102aba:	d03b      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	4a31      	ldr	r2, [pc, #196]	; (8102b88 <HAL_DMA_Init+0x1c8>)
 8102ac2:	4293      	cmp	r3, r2
 8102ac4:	d036      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	4a30      	ldr	r2, [pc, #192]	; (8102b8c <HAL_DMA_Init+0x1cc>)
 8102acc:	4293      	cmp	r3, r2
 8102ace:	d031      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	4a2e      	ldr	r2, [pc, #184]	; (8102b90 <HAL_DMA_Init+0x1d0>)
 8102ad6:	4293      	cmp	r3, r2
 8102ad8:	d02c      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	4a2d      	ldr	r2, [pc, #180]	; (8102b94 <HAL_DMA_Init+0x1d4>)
 8102ae0:	4293      	cmp	r3, r2
 8102ae2:	d027      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	4a2b      	ldr	r2, [pc, #172]	; (8102b98 <HAL_DMA_Init+0x1d8>)
 8102aea:	4293      	cmp	r3, r2
 8102aec:	d022      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	4a2a      	ldr	r2, [pc, #168]	; (8102b9c <HAL_DMA_Init+0x1dc>)
 8102af4:	4293      	cmp	r3, r2
 8102af6:	d01d      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	4a28      	ldr	r2, [pc, #160]	; (8102ba0 <HAL_DMA_Init+0x1e0>)
 8102afe:	4293      	cmp	r3, r2
 8102b00:	d018      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	4a27      	ldr	r2, [pc, #156]	; (8102ba4 <HAL_DMA_Init+0x1e4>)
 8102b08:	4293      	cmp	r3, r2
 8102b0a:	d013      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	4a25      	ldr	r2, [pc, #148]	; (8102ba8 <HAL_DMA_Init+0x1e8>)
 8102b12:	4293      	cmp	r3, r2
 8102b14:	d00e      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	681b      	ldr	r3, [r3, #0]
 8102b1a:	4a24      	ldr	r2, [pc, #144]	; (8102bac <HAL_DMA_Init+0x1ec>)
 8102b1c:	4293      	cmp	r3, r2
 8102b1e:	d009      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	681b      	ldr	r3, [r3, #0]
 8102b24:	4a22      	ldr	r2, [pc, #136]	; (8102bb0 <HAL_DMA_Init+0x1f0>)
 8102b26:	4293      	cmp	r3, r2
 8102b28:	d004      	beq.n	8102b34 <HAL_DMA_Init+0x174>
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	4a21      	ldr	r2, [pc, #132]	; (8102bb4 <HAL_DMA_Init+0x1f4>)
 8102b30:	4293      	cmp	r3, r2
 8102b32:	d108      	bne.n	8102b46 <HAL_DMA_Init+0x186>
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	681a      	ldr	r2, [r3, #0]
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	f022 0201 	bic.w	r2, r2, #1
 8102b42:	601a      	str	r2, [r3, #0]
 8102b44:	e007      	b.n	8102b56 <HAL_DMA_Init+0x196>
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	681a      	ldr	r2, [r3, #0]
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	f022 0201 	bic.w	r2, r2, #1
 8102b54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102b56:	e02f      	b.n	8102bb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102b58:	f7ff fe02 	bl	8102760 <HAL_GetTick>
 8102b5c:	4602      	mov	r2, r0
 8102b5e:	693b      	ldr	r3, [r7, #16]
 8102b60:	1ad3      	subs	r3, r2, r3
 8102b62:	2b05      	cmp	r3, #5
 8102b64:	d928      	bls.n	8102bb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	2220      	movs	r2, #32
 8102b6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	2203      	movs	r2, #3
 8102b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102b74:	2301      	movs	r3, #1
 8102b76:	e244      	b.n	8103002 <HAL_DMA_Init+0x642>
 8102b78:	40020010 	.word	0x40020010
 8102b7c:	40020028 	.word	0x40020028
 8102b80:	40020040 	.word	0x40020040
 8102b84:	40020058 	.word	0x40020058
 8102b88:	40020070 	.word	0x40020070
 8102b8c:	40020088 	.word	0x40020088
 8102b90:	400200a0 	.word	0x400200a0
 8102b94:	400200b8 	.word	0x400200b8
 8102b98:	40020410 	.word	0x40020410
 8102b9c:	40020428 	.word	0x40020428
 8102ba0:	40020440 	.word	0x40020440
 8102ba4:	40020458 	.word	0x40020458
 8102ba8:	40020470 	.word	0x40020470
 8102bac:	40020488 	.word	0x40020488
 8102bb0:	400204a0 	.word	0x400204a0
 8102bb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	f003 0301 	and.w	r3, r3, #1
 8102bc2:	2b00      	cmp	r3, #0
 8102bc4:	d1c8      	bne.n	8102b58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	681b      	ldr	r3, [r3, #0]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102bce:	697a      	ldr	r2, [r7, #20]
 8102bd0:	4b84      	ldr	r3, [pc, #528]	; (8102de4 <HAL_DMA_Init+0x424>)
 8102bd2:	4013      	ands	r3, r2
 8102bd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102bde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	691b      	ldr	r3, [r3, #16]
 8102be4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102bea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	699b      	ldr	r3, [r3, #24]
 8102bf0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102bf2:	687b      	ldr	r3, [r7, #4]
 8102bf4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102bf6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	6a1b      	ldr	r3, [r3, #32]
 8102bfc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102bfe:	697a      	ldr	r2, [r7, #20]
 8102c00:	4313      	orrs	r3, r2
 8102c02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102c08:	2b04      	cmp	r3, #4
 8102c0a:	d107      	bne.n	8102c1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c14:	4313      	orrs	r3, r2
 8102c16:	697a      	ldr	r2, [r7, #20]
 8102c18:	4313      	orrs	r3, r2
 8102c1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102c1c:	4b72      	ldr	r3, [pc, #456]	; (8102de8 <HAL_DMA_Init+0x428>)
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	0c1b      	lsrs	r3, r3, #16
 8102c22:	041b      	lsls	r3, r3, #16
 8102c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102c28:	d328      	bcc.n	8102c7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	685b      	ldr	r3, [r3, #4]
 8102c2e:	2b28      	cmp	r3, #40	; 0x28
 8102c30:	d903      	bls.n	8102c3a <HAL_DMA_Init+0x27a>
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	685b      	ldr	r3, [r3, #4]
 8102c36:	2b2e      	cmp	r3, #46	; 0x2e
 8102c38:	d917      	bls.n	8102c6a <HAL_DMA_Init+0x2aa>
 8102c3a:	687b      	ldr	r3, [r7, #4]
 8102c3c:	685b      	ldr	r3, [r3, #4]
 8102c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8102c40:	d903      	bls.n	8102c4a <HAL_DMA_Init+0x28a>
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	685b      	ldr	r3, [r3, #4]
 8102c46:	2b42      	cmp	r3, #66	; 0x42
 8102c48:	d90f      	bls.n	8102c6a <HAL_DMA_Init+0x2aa>
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	685b      	ldr	r3, [r3, #4]
 8102c4e:	2b46      	cmp	r3, #70	; 0x46
 8102c50:	d903      	bls.n	8102c5a <HAL_DMA_Init+0x29a>
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	685b      	ldr	r3, [r3, #4]
 8102c56:	2b48      	cmp	r3, #72	; 0x48
 8102c58:	d907      	bls.n	8102c6a <HAL_DMA_Init+0x2aa>
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	685b      	ldr	r3, [r3, #4]
 8102c5e:	2b4e      	cmp	r3, #78	; 0x4e
 8102c60:	d905      	bls.n	8102c6e <HAL_DMA_Init+0x2ae>
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	685b      	ldr	r3, [r3, #4]
 8102c66:	2b52      	cmp	r3, #82	; 0x52
 8102c68:	d801      	bhi.n	8102c6e <HAL_DMA_Init+0x2ae>
 8102c6a:	2301      	movs	r3, #1
 8102c6c:	e000      	b.n	8102c70 <HAL_DMA_Init+0x2b0>
 8102c6e:	2300      	movs	r3, #0
 8102c70:	2b00      	cmp	r3, #0
 8102c72:	d003      	beq.n	8102c7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102c74:	697b      	ldr	r3, [r7, #20]
 8102c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102c7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	697a      	ldr	r2, [r7, #20]
 8102c82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	695b      	ldr	r3, [r3, #20]
 8102c8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102c8c:	697b      	ldr	r3, [r7, #20]
 8102c8e:	f023 0307 	bic.w	r3, r3, #7
 8102c92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102c98:	697a      	ldr	r2, [r7, #20]
 8102c9a:	4313      	orrs	r3, r2
 8102c9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ca2:	2b04      	cmp	r3, #4
 8102ca4:	d117      	bne.n	8102cd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102ca6:	687b      	ldr	r3, [r7, #4]
 8102ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102caa:	697a      	ldr	r2, [r7, #20]
 8102cac:	4313      	orrs	r3, r2
 8102cae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	d00e      	beq.n	8102cd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102cb8:	6878      	ldr	r0, [r7, #4]
 8102cba:	f001 f9b7 	bl	810402c <DMA_CheckFifoParam>
 8102cbe:	4603      	mov	r3, r0
 8102cc0:	2b00      	cmp	r3, #0
 8102cc2:	d008      	beq.n	8102cd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	2240      	movs	r2, #64	; 0x40
 8102cc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	2201      	movs	r2, #1
 8102cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102cd2:	2301      	movs	r3, #1
 8102cd4:	e195      	b.n	8103002 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	681b      	ldr	r3, [r3, #0]
 8102cda:	697a      	ldr	r2, [r7, #20]
 8102cdc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102cde:	6878      	ldr	r0, [r7, #4]
 8102ce0:	f001 f8f2 	bl	8103ec8 <DMA_CalcBaseAndBitshift>
 8102ce4:	4603      	mov	r3, r0
 8102ce6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102cec:	f003 031f 	and.w	r3, r3, #31
 8102cf0:	223f      	movs	r2, #63	; 0x3f
 8102cf2:	409a      	lsls	r2, r3
 8102cf4:	68bb      	ldr	r3, [r7, #8]
 8102cf6:	609a      	str	r2, [r3, #8]
 8102cf8:	e0cb      	b.n	8102e92 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	4a3b      	ldr	r2, [pc, #236]	; (8102dec <HAL_DMA_Init+0x42c>)
 8102d00:	4293      	cmp	r3, r2
 8102d02:	d022      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a39      	ldr	r2, [pc, #228]	; (8102df0 <HAL_DMA_Init+0x430>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d01d      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a38      	ldr	r2, [pc, #224]	; (8102df4 <HAL_DMA_Init+0x434>)
 8102d14:	4293      	cmp	r3, r2
 8102d16:	d018      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4a36      	ldr	r2, [pc, #216]	; (8102df8 <HAL_DMA_Init+0x438>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d013      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a35      	ldr	r2, [pc, #212]	; (8102dfc <HAL_DMA_Init+0x43c>)
 8102d28:	4293      	cmp	r3, r2
 8102d2a:	d00e      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	4a33      	ldr	r2, [pc, #204]	; (8102e00 <HAL_DMA_Init+0x440>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d009      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a32      	ldr	r2, [pc, #200]	; (8102e04 <HAL_DMA_Init+0x444>)
 8102d3c:	4293      	cmp	r3, r2
 8102d3e:	d004      	beq.n	8102d4a <HAL_DMA_Init+0x38a>
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	4a30      	ldr	r2, [pc, #192]	; (8102e08 <HAL_DMA_Init+0x448>)
 8102d46:	4293      	cmp	r3, r2
 8102d48:	d101      	bne.n	8102d4e <HAL_DMA_Init+0x38e>
 8102d4a:	2301      	movs	r3, #1
 8102d4c:	e000      	b.n	8102d50 <HAL_DMA_Init+0x390>
 8102d4e:	2300      	movs	r3, #0
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	f000 8095 	beq.w	8102e80 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4a24      	ldr	r2, [pc, #144]	; (8102dec <HAL_DMA_Init+0x42c>)
 8102d5c:	4293      	cmp	r3, r2
 8102d5e:	d021      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	4a22      	ldr	r2, [pc, #136]	; (8102df0 <HAL_DMA_Init+0x430>)
 8102d66:	4293      	cmp	r3, r2
 8102d68:	d01c      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	4a21      	ldr	r2, [pc, #132]	; (8102df4 <HAL_DMA_Init+0x434>)
 8102d70:	4293      	cmp	r3, r2
 8102d72:	d017      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4a1f      	ldr	r2, [pc, #124]	; (8102df8 <HAL_DMA_Init+0x438>)
 8102d7a:	4293      	cmp	r3, r2
 8102d7c:	d012      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4a1e      	ldr	r2, [pc, #120]	; (8102dfc <HAL_DMA_Init+0x43c>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d00d      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	4a1c      	ldr	r2, [pc, #112]	; (8102e00 <HAL_DMA_Init+0x440>)
 8102d8e:	4293      	cmp	r3, r2
 8102d90:	d008      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	4a1b      	ldr	r2, [pc, #108]	; (8102e04 <HAL_DMA_Init+0x444>)
 8102d98:	4293      	cmp	r3, r2
 8102d9a:	d003      	beq.n	8102da4 <HAL_DMA_Init+0x3e4>
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	4a19      	ldr	r2, [pc, #100]	; (8102e08 <HAL_DMA_Init+0x448>)
 8102da2:	4293      	cmp	r3, r2
 8102da4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	2202      	movs	r2, #2
 8102daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	2200      	movs	r2, #0
 8102db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102dbe:	697b      	ldr	r3, [r7, #20]
 8102dc0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102dc4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102dc8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	689b      	ldr	r3, [r3, #8]
 8102dce:	2b40      	cmp	r3, #64	; 0x40
 8102dd0:	d01c      	beq.n	8102e0c <HAL_DMA_Init+0x44c>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	689b      	ldr	r3, [r3, #8]
 8102dd6:	2b80      	cmp	r3, #128	; 0x80
 8102dd8:	d102      	bne.n	8102de0 <HAL_DMA_Init+0x420>
 8102dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102dde:	e016      	b.n	8102e0e <HAL_DMA_Init+0x44e>
 8102de0:	2300      	movs	r3, #0
 8102de2:	e014      	b.n	8102e0e <HAL_DMA_Init+0x44e>
 8102de4:	fe10803f 	.word	0xfe10803f
 8102de8:	5c001000 	.word	0x5c001000
 8102dec:	58025408 	.word	0x58025408
 8102df0:	5802541c 	.word	0x5802541c
 8102df4:	58025430 	.word	0x58025430
 8102df8:	58025444 	.word	0x58025444
 8102dfc:	58025458 	.word	0x58025458
 8102e00:	5802546c 	.word	0x5802546c
 8102e04:	58025480 	.word	0x58025480
 8102e08:	58025494 	.word	0x58025494
 8102e0c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102e0e:	687a      	ldr	r2, [r7, #4]
 8102e10:	68d2      	ldr	r2, [r2, #12]
 8102e12:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102e14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	691b      	ldr	r3, [r3, #16]
 8102e1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102e1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	695b      	ldr	r3, [r3, #20]
 8102e22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102e24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	699b      	ldr	r3, [r3, #24]
 8102e2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102e2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	69db      	ldr	r3, [r3, #28]
 8102e32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	6a1b      	ldr	r3, [r3, #32]
 8102e3a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102e3c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102e3e:	697a      	ldr	r2, [r7, #20]
 8102e40:	4313      	orrs	r3, r2
 8102e42:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	697a      	ldr	r2, [r7, #20]
 8102e4a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	461a      	mov	r2, r3
 8102e52:	4b6e      	ldr	r3, [pc, #440]	; (810300c <HAL_DMA_Init+0x64c>)
 8102e54:	4413      	add	r3, r2
 8102e56:	4a6e      	ldr	r2, [pc, #440]	; (8103010 <HAL_DMA_Init+0x650>)
 8102e58:	fba2 2303 	umull	r2, r3, r2, r3
 8102e5c:	091b      	lsrs	r3, r3, #4
 8102e5e:	009a      	lsls	r2, r3, #2
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102e64:	6878      	ldr	r0, [r7, #4]
 8102e66:	f001 f82f 	bl	8103ec8 <DMA_CalcBaseAndBitshift>
 8102e6a:	4603      	mov	r3, r0
 8102e6c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e72:	f003 031f 	and.w	r3, r3, #31
 8102e76:	2201      	movs	r2, #1
 8102e78:	409a      	lsls	r2, r3
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	605a      	str	r2, [r3, #4]
 8102e7e:	e008      	b.n	8102e92 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	2240      	movs	r2, #64	; 0x40
 8102e84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	2203      	movs	r2, #3
 8102e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102e8e:	2301      	movs	r3, #1
 8102e90:	e0b7      	b.n	8103002 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	4a5f      	ldr	r2, [pc, #380]	; (8103014 <HAL_DMA_Init+0x654>)
 8102e98:	4293      	cmp	r3, r2
 8102e9a:	d072      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	4a5d      	ldr	r2, [pc, #372]	; (8103018 <HAL_DMA_Init+0x658>)
 8102ea2:	4293      	cmp	r3, r2
 8102ea4:	d06d      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	4a5c      	ldr	r2, [pc, #368]	; (810301c <HAL_DMA_Init+0x65c>)
 8102eac:	4293      	cmp	r3, r2
 8102eae:	d068      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	4a5a      	ldr	r2, [pc, #360]	; (8103020 <HAL_DMA_Init+0x660>)
 8102eb6:	4293      	cmp	r3, r2
 8102eb8:	d063      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	4a59      	ldr	r2, [pc, #356]	; (8103024 <HAL_DMA_Init+0x664>)
 8102ec0:	4293      	cmp	r3, r2
 8102ec2:	d05e      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	4a57      	ldr	r2, [pc, #348]	; (8103028 <HAL_DMA_Init+0x668>)
 8102eca:	4293      	cmp	r3, r2
 8102ecc:	d059      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	4a56      	ldr	r2, [pc, #344]	; (810302c <HAL_DMA_Init+0x66c>)
 8102ed4:	4293      	cmp	r3, r2
 8102ed6:	d054      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	4a54      	ldr	r2, [pc, #336]	; (8103030 <HAL_DMA_Init+0x670>)
 8102ede:	4293      	cmp	r3, r2
 8102ee0:	d04f      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	4a53      	ldr	r2, [pc, #332]	; (8103034 <HAL_DMA_Init+0x674>)
 8102ee8:	4293      	cmp	r3, r2
 8102eea:	d04a      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	4a51      	ldr	r2, [pc, #324]	; (8103038 <HAL_DMA_Init+0x678>)
 8102ef2:	4293      	cmp	r3, r2
 8102ef4:	d045      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	4a50      	ldr	r2, [pc, #320]	; (810303c <HAL_DMA_Init+0x67c>)
 8102efc:	4293      	cmp	r3, r2
 8102efe:	d040      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	4a4e      	ldr	r2, [pc, #312]	; (8103040 <HAL_DMA_Init+0x680>)
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d03b      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	4a4d      	ldr	r2, [pc, #308]	; (8103044 <HAL_DMA_Init+0x684>)
 8102f10:	4293      	cmp	r3, r2
 8102f12:	d036      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	4a4b      	ldr	r2, [pc, #300]	; (8103048 <HAL_DMA_Init+0x688>)
 8102f1a:	4293      	cmp	r3, r2
 8102f1c:	d031      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	4a4a      	ldr	r2, [pc, #296]	; (810304c <HAL_DMA_Init+0x68c>)
 8102f24:	4293      	cmp	r3, r2
 8102f26:	d02c      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	4a48      	ldr	r2, [pc, #288]	; (8103050 <HAL_DMA_Init+0x690>)
 8102f2e:	4293      	cmp	r3, r2
 8102f30:	d027      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4a47      	ldr	r2, [pc, #284]	; (8103054 <HAL_DMA_Init+0x694>)
 8102f38:	4293      	cmp	r3, r2
 8102f3a:	d022      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	681b      	ldr	r3, [r3, #0]
 8102f40:	4a45      	ldr	r2, [pc, #276]	; (8103058 <HAL_DMA_Init+0x698>)
 8102f42:	4293      	cmp	r3, r2
 8102f44:	d01d      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	4a44      	ldr	r2, [pc, #272]	; (810305c <HAL_DMA_Init+0x69c>)
 8102f4c:	4293      	cmp	r3, r2
 8102f4e:	d018      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	4a42      	ldr	r2, [pc, #264]	; (8103060 <HAL_DMA_Init+0x6a0>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d013      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	4a41      	ldr	r2, [pc, #260]	; (8103064 <HAL_DMA_Init+0x6a4>)
 8102f60:	4293      	cmp	r3, r2
 8102f62:	d00e      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	681b      	ldr	r3, [r3, #0]
 8102f68:	4a3f      	ldr	r2, [pc, #252]	; (8103068 <HAL_DMA_Init+0x6a8>)
 8102f6a:	4293      	cmp	r3, r2
 8102f6c:	d009      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	4a3e      	ldr	r2, [pc, #248]	; (810306c <HAL_DMA_Init+0x6ac>)
 8102f74:	4293      	cmp	r3, r2
 8102f76:	d004      	beq.n	8102f82 <HAL_DMA_Init+0x5c2>
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	4a3c      	ldr	r2, [pc, #240]	; (8103070 <HAL_DMA_Init+0x6b0>)
 8102f7e:	4293      	cmp	r3, r2
 8102f80:	d101      	bne.n	8102f86 <HAL_DMA_Init+0x5c6>
 8102f82:	2301      	movs	r3, #1
 8102f84:	e000      	b.n	8102f88 <HAL_DMA_Init+0x5c8>
 8102f86:	2300      	movs	r3, #0
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d032      	beq.n	8102ff2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102f8c:	6878      	ldr	r0, [r7, #4]
 8102f8e:	f001 f8c9 	bl	8104124 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	689b      	ldr	r3, [r3, #8]
 8102f96:	2b80      	cmp	r3, #128	; 0x80
 8102f98:	d102      	bne.n	8102fa0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	2200      	movs	r2, #0
 8102f9e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	685a      	ldr	r2, [r3, #4]
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102fa8:	b2d2      	uxtb	r2, r2
 8102faa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102fac:	687b      	ldr	r3, [r7, #4]
 8102fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102fb0:	687a      	ldr	r2, [r7, #4]
 8102fb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102fb4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	685b      	ldr	r3, [r3, #4]
 8102fba:	2b00      	cmp	r3, #0
 8102fbc:	d010      	beq.n	8102fe0 <HAL_DMA_Init+0x620>
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	685b      	ldr	r3, [r3, #4]
 8102fc2:	2b08      	cmp	r3, #8
 8102fc4:	d80c      	bhi.n	8102fe0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102fc6:	6878      	ldr	r0, [r7, #4]
 8102fc8:	f001 f946 	bl	8104258 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102fd0:	2200      	movs	r2, #0
 8102fd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102fd8:	687a      	ldr	r2, [r7, #4]
 8102fda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102fdc:	605a      	str	r2, [r3, #4]
 8102fde:	e008      	b.n	8102ff2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	2200      	movs	r2, #0
 8102fe4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	2200      	movs	r2, #0
 8102fea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	2200      	movs	r2, #0
 8102ff0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	2200      	movs	r2, #0
 8102ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	2201      	movs	r2, #1
 8102ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103000:	2300      	movs	r3, #0
}
 8103002:	4618      	mov	r0, r3
 8103004:	3718      	adds	r7, #24
 8103006:	46bd      	mov	sp, r7
 8103008:	bd80      	pop	{r7, pc}
 810300a:	bf00      	nop
 810300c:	a7fdabf8 	.word	0xa7fdabf8
 8103010:	cccccccd 	.word	0xcccccccd
 8103014:	40020010 	.word	0x40020010
 8103018:	40020028 	.word	0x40020028
 810301c:	40020040 	.word	0x40020040
 8103020:	40020058 	.word	0x40020058
 8103024:	40020070 	.word	0x40020070
 8103028:	40020088 	.word	0x40020088
 810302c:	400200a0 	.word	0x400200a0
 8103030:	400200b8 	.word	0x400200b8
 8103034:	40020410 	.word	0x40020410
 8103038:	40020428 	.word	0x40020428
 810303c:	40020440 	.word	0x40020440
 8103040:	40020458 	.word	0x40020458
 8103044:	40020470 	.word	0x40020470
 8103048:	40020488 	.word	0x40020488
 810304c:	400204a0 	.word	0x400204a0
 8103050:	400204b8 	.word	0x400204b8
 8103054:	58025408 	.word	0x58025408
 8103058:	5802541c 	.word	0x5802541c
 810305c:	58025430 	.word	0x58025430
 8103060:	58025444 	.word	0x58025444
 8103064:	58025458 	.word	0x58025458
 8103068:	5802546c 	.word	0x5802546c
 810306c:	58025480 	.word	0x58025480
 8103070:	58025494 	.word	0x58025494

08103074 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103074:	b580      	push	{r7, lr}
 8103076:	b08a      	sub	sp, #40	; 0x28
 8103078:	af00      	add	r7, sp, #0
 810307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 810307c:	2300      	movs	r3, #0
 810307e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103080:	4b67      	ldr	r3, [pc, #412]	; (8103220 <HAL_DMA_IRQHandler+0x1ac>)
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	4a67      	ldr	r2, [pc, #412]	; (8103224 <HAL_DMA_IRQHandler+0x1b0>)
 8103086:	fba2 2303 	umull	r2, r3, r2, r3
 810308a:	0a9b      	lsrs	r3, r3, #10
 810308c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103092:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103098:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810309a:	6a3b      	ldr	r3, [r7, #32]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81030a0:	69fb      	ldr	r3, [r7, #28]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	4a5f      	ldr	r2, [pc, #380]	; (8103228 <HAL_DMA_IRQHandler+0x1b4>)
 81030ac:	4293      	cmp	r3, r2
 81030ae:	d04a      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	4a5d      	ldr	r2, [pc, #372]	; (810322c <HAL_DMA_IRQHandler+0x1b8>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	d045      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	4a5c      	ldr	r2, [pc, #368]	; (8103230 <HAL_DMA_IRQHandler+0x1bc>)
 81030c0:	4293      	cmp	r3, r2
 81030c2:	d040      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	4a5a      	ldr	r2, [pc, #360]	; (8103234 <HAL_DMA_IRQHandler+0x1c0>)
 81030ca:	4293      	cmp	r3, r2
 81030cc:	d03b      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	681b      	ldr	r3, [r3, #0]
 81030d2:	4a59      	ldr	r2, [pc, #356]	; (8103238 <HAL_DMA_IRQHandler+0x1c4>)
 81030d4:	4293      	cmp	r3, r2
 81030d6:	d036      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	4a57      	ldr	r2, [pc, #348]	; (810323c <HAL_DMA_IRQHandler+0x1c8>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d031      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	4a56      	ldr	r2, [pc, #344]	; (8103240 <HAL_DMA_IRQHandler+0x1cc>)
 81030e8:	4293      	cmp	r3, r2
 81030ea:	d02c      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	4a54      	ldr	r2, [pc, #336]	; (8103244 <HAL_DMA_IRQHandler+0x1d0>)
 81030f2:	4293      	cmp	r3, r2
 81030f4:	d027      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	4a53      	ldr	r2, [pc, #332]	; (8103248 <HAL_DMA_IRQHandler+0x1d4>)
 81030fc:	4293      	cmp	r3, r2
 81030fe:	d022      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	4a51      	ldr	r2, [pc, #324]	; (810324c <HAL_DMA_IRQHandler+0x1d8>)
 8103106:	4293      	cmp	r3, r2
 8103108:	d01d      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a50      	ldr	r2, [pc, #320]	; (8103250 <HAL_DMA_IRQHandler+0x1dc>)
 8103110:	4293      	cmp	r3, r2
 8103112:	d018      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	4a4e      	ldr	r2, [pc, #312]	; (8103254 <HAL_DMA_IRQHandler+0x1e0>)
 810311a:	4293      	cmp	r3, r2
 810311c:	d013      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	4a4d      	ldr	r2, [pc, #308]	; (8103258 <HAL_DMA_IRQHandler+0x1e4>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d00e      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	4a4b      	ldr	r2, [pc, #300]	; (810325c <HAL_DMA_IRQHandler+0x1e8>)
 810312e:	4293      	cmp	r3, r2
 8103130:	d009      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	4a4a      	ldr	r2, [pc, #296]	; (8103260 <HAL_DMA_IRQHandler+0x1ec>)
 8103138:	4293      	cmp	r3, r2
 810313a:	d004      	beq.n	8103146 <HAL_DMA_IRQHandler+0xd2>
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	4a48      	ldr	r2, [pc, #288]	; (8103264 <HAL_DMA_IRQHandler+0x1f0>)
 8103142:	4293      	cmp	r3, r2
 8103144:	d101      	bne.n	810314a <HAL_DMA_IRQHandler+0xd6>
 8103146:	2301      	movs	r3, #1
 8103148:	e000      	b.n	810314c <HAL_DMA_IRQHandler+0xd8>
 810314a:	2300      	movs	r3, #0
 810314c:	2b00      	cmp	r3, #0
 810314e:	f000 842b 	beq.w	81039a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103156:	f003 031f 	and.w	r3, r3, #31
 810315a:	2208      	movs	r2, #8
 810315c:	409a      	lsls	r2, r3
 810315e:	69bb      	ldr	r3, [r7, #24]
 8103160:	4013      	ands	r3, r2
 8103162:	2b00      	cmp	r3, #0
 8103164:	f000 80a2 	beq.w	81032ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4a2e      	ldr	r2, [pc, #184]	; (8103228 <HAL_DMA_IRQHandler+0x1b4>)
 810316e:	4293      	cmp	r3, r2
 8103170:	d04a      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	4a2d      	ldr	r2, [pc, #180]	; (810322c <HAL_DMA_IRQHandler+0x1b8>)
 8103178:	4293      	cmp	r3, r2
 810317a:	d045      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	4a2b      	ldr	r2, [pc, #172]	; (8103230 <HAL_DMA_IRQHandler+0x1bc>)
 8103182:	4293      	cmp	r3, r2
 8103184:	d040      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	4a2a      	ldr	r2, [pc, #168]	; (8103234 <HAL_DMA_IRQHandler+0x1c0>)
 810318c:	4293      	cmp	r3, r2
 810318e:	d03b      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	4a28      	ldr	r2, [pc, #160]	; (8103238 <HAL_DMA_IRQHandler+0x1c4>)
 8103196:	4293      	cmp	r3, r2
 8103198:	d036      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	4a27      	ldr	r2, [pc, #156]	; (810323c <HAL_DMA_IRQHandler+0x1c8>)
 81031a0:	4293      	cmp	r3, r2
 81031a2:	d031      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	4a25      	ldr	r2, [pc, #148]	; (8103240 <HAL_DMA_IRQHandler+0x1cc>)
 81031aa:	4293      	cmp	r3, r2
 81031ac:	d02c      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	4a24      	ldr	r2, [pc, #144]	; (8103244 <HAL_DMA_IRQHandler+0x1d0>)
 81031b4:	4293      	cmp	r3, r2
 81031b6:	d027      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	681b      	ldr	r3, [r3, #0]
 81031bc:	4a22      	ldr	r2, [pc, #136]	; (8103248 <HAL_DMA_IRQHandler+0x1d4>)
 81031be:	4293      	cmp	r3, r2
 81031c0:	d022      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	681b      	ldr	r3, [r3, #0]
 81031c6:	4a21      	ldr	r2, [pc, #132]	; (810324c <HAL_DMA_IRQHandler+0x1d8>)
 81031c8:	4293      	cmp	r3, r2
 81031ca:	d01d      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	4a1f      	ldr	r2, [pc, #124]	; (8103250 <HAL_DMA_IRQHandler+0x1dc>)
 81031d2:	4293      	cmp	r3, r2
 81031d4:	d018      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	4a1e      	ldr	r2, [pc, #120]	; (8103254 <HAL_DMA_IRQHandler+0x1e0>)
 81031dc:	4293      	cmp	r3, r2
 81031de:	d013      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	4a1c      	ldr	r2, [pc, #112]	; (8103258 <HAL_DMA_IRQHandler+0x1e4>)
 81031e6:	4293      	cmp	r3, r2
 81031e8:	d00e      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	681b      	ldr	r3, [r3, #0]
 81031ee:	4a1b      	ldr	r2, [pc, #108]	; (810325c <HAL_DMA_IRQHandler+0x1e8>)
 81031f0:	4293      	cmp	r3, r2
 81031f2:	d009      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	681b      	ldr	r3, [r3, #0]
 81031f8:	4a19      	ldr	r2, [pc, #100]	; (8103260 <HAL_DMA_IRQHandler+0x1ec>)
 81031fa:	4293      	cmp	r3, r2
 81031fc:	d004      	beq.n	8103208 <HAL_DMA_IRQHandler+0x194>
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	681b      	ldr	r3, [r3, #0]
 8103202:	4a18      	ldr	r2, [pc, #96]	; (8103264 <HAL_DMA_IRQHandler+0x1f0>)
 8103204:	4293      	cmp	r3, r2
 8103206:	d12f      	bne.n	8103268 <HAL_DMA_IRQHandler+0x1f4>
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	f003 0304 	and.w	r3, r3, #4
 8103212:	2b00      	cmp	r3, #0
 8103214:	bf14      	ite	ne
 8103216:	2301      	movne	r3, #1
 8103218:	2300      	moveq	r3, #0
 810321a:	b2db      	uxtb	r3, r3
 810321c:	e02e      	b.n	810327c <HAL_DMA_IRQHandler+0x208>
 810321e:	bf00      	nop
 8103220:	10000000 	.word	0x10000000
 8103224:	1b4e81b5 	.word	0x1b4e81b5
 8103228:	40020010 	.word	0x40020010
 810322c:	40020028 	.word	0x40020028
 8103230:	40020040 	.word	0x40020040
 8103234:	40020058 	.word	0x40020058
 8103238:	40020070 	.word	0x40020070
 810323c:	40020088 	.word	0x40020088
 8103240:	400200a0 	.word	0x400200a0
 8103244:	400200b8 	.word	0x400200b8
 8103248:	40020410 	.word	0x40020410
 810324c:	40020428 	.word	0x40020428
 8103250:	40020440 	.word	0x40020440
 8103254:	40020458 	.word	0x40020458
 8103258:	40020470 	.word	0x40020470
 810325c:	40020488 	.word	0x40020488
 8103260:	400204a0 	.word	0x400204a0
 8103264:	400204b8 	.word	0x400204b8
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	f003 0308 	and.w	r3, r3, #8
 8103272:	2b00      	cmp	r3, #0
 8103274:	bf14      	ite	ne
 8103276:	2301      	movne	r3, #1
 8103278:	2300      	moveq	r3, #0
 810327a:	b2db      	uxtb	r3, r3
 810327c:	2b00      	cmp	r3, #0
 810327e:	d015      	beq.n	81032ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	681a      	ldr	r2, [r3, #0]
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	f022 0204 	bic.w	r2, r2, #4
 810328e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103294:	f003 031f 	and.w	r3, r3, #31
 8103298:	2208      	movs	r2, #8
 810329a:	409a      	lsls	r2, r3
 810329c:	6a3b      	ldr	r3, [r7, #32]
 810329e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032a4:	f043 0201 	orr.w	r2, r3, #1
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032b0:	f003 031f 	and.w	r3, r3, #31
 81032b4:	69ba      	ldr	r2, [r7, #24]
 81032b6:	fa22 f303 	lsr.w	r3, r2, r3
 81032ba:	f003 0301 	and.w	r3, r3, #1
 81032be:	2b00      	cmp	r3, #0
 81032c0:	d06e      	beq.n	81033a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4a69      	ldr	r2, [pc, #420]	; (810346c <HAL_DMA_IRQHandler+0x3f8>)
 81032c8:	4293      	cmp	r3, r2
 81032ca:	d04a      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	4a67      	ldr	r2, [pc, #412]	; (8103470 <HAL_DMA_IRQHandler+0x3fc>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d045      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	4a66      	ldr	r2, [pc, #408]	; (8103474 <HAL_DMA_IRQHandler+0x400>)
 81032dc:	4293      	cmp	r3, r2
 81032de:	d040      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a64      	ldr	r2, [pc, #400]	; (8103478 <HAL_DMA_IRQHandler+0x404>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d03b      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	4a63      	ldr	r2, [pc, #396]	; (810347c <HAL_DMA_IRQHandler+0x408>)
 81032f0:	4293      	cmp	r3, r2
 81032f2:	d036      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	4a61      	ldr	r2, [pc, #388]	; (8103480 <HAL_DMA_IRQHandler+0x40c>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d031      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4a60      	ldr	r2, [pc, #384]	; (8103484 <HAL_DMA_IRQHandler+0x410>)
 8103304:	4293      	cmp	r3, r2
 8103306:	d02c      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	4a5e      	ldr	r2, [pc, #376]	; (8103488 <HAL_DMA_IRQHandler+0x414>)
 810330e:	4293      	cmp	r3, r2
 8103310:	d027      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	4a5d      	ldr	r2, [pc, #372]	; (810348c <HAL_DMA_IRQHandler+0x418>)
 8103318:	4293      	cmp	r3, r2
 810331a:	d022      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4a5b      	ldr	r2, [pc, #364]	; (8103490 <HAL_DMA_IRQHandler+0x41c>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d01d      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	4a5a      	ldr	r2, [pc, #360]	; (8103494 <HAL_DMA_IRQHandler+0x420>)
 810332c:	4293      	cmp	r3, r2
 810332e:	d018      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	4a58      	ldr	r2, [pc, #352]	; (8103498 <HAL_DMA_IRQHandler+0x424>)
 8103336:	4293      	cmp	r3, r2
 8103338:	d013      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	681b      	ldr	r3, [r3, #0]
 810333e:	4a57      	ldr	r2, [pc, #348]	; (810349c <HAL_DMA_IRQHandler+0x428>)
 8103340:	4293      	cmp	r3, r2
 8103342:	d00e      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	4a55      	ldr	r2, [pc, #340]	; (81034a0 <HAL_DMA_IRQHandler+0x42c>)
 810334a:	4293      	cmp	r3, r2
 810334c:	d009      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	4a54      	ldr	r2, [pc, #336]	; (81034a4 <HAL_DMA_IRQHandler+0x430>)
 8103354:	4293      	cmp	r3, r2
 8103356:	d004      	beq.n	8103362 <HAL_DMA_IRQHandler+0x2ee>
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	4a52      	ldr	r2, [pc, #328]	; (81034a8 <HAL_DMA_IRQHandler+0x434>)
 810335e:	4293      	cmp	r3, r2
 8103360:	d10a      	bne.n	8103378 <HAL_DMA_IRQHandler+0x304>
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	695b      	ldr	r3, [r3, #20]
 8103368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810336c:	2b00      	cmp	r3, #0
 810336e:	bf14      	ite	ne
 8103370:	2301      	movne	r3, #1
 8103372:	2300      	moveq	r3, #0
 8103374:	b2db      	uxtb	r3, r3
 8103376:	e003      	b.n	8103380 <HAL_DMA_IRQHandler+0x30c>
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	2300      	movs	r3, #0
 8103380:	2b00      	cmp	r3, #0
 8103382:	d00d      	beq.n	81033a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103388:	f003 031f 	and.w	r3, r3, #31
 810338c:	2201      	movs	r2, #1
 810338e:	409a      	lsls	r2, r3
 8103390:	6a3b      	ldr	r3, [r7, #32]
 8103392:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103398:	f043 0202 	orr.w	r2, r3, #2
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033a4:	f003 031f 	and.w	r3, r3, #31
 81033a8:	2204      	movs	r2, #4
 81033aa:	409a      	lsls	r2, r3
 81033ac:	69bb      	ldr	r3, [r7, #24]
 81033ae:	4013      	ands	r3, r2
 81033b0:	2b00      	cmp	r3, #0
 81033b2:	f000 808f 	beq.w	81034d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4a2c      	ldr	r2, [pc, #176]	; (810346c <HAL_DMA_IRQHandler+0x3f8>)
 81033bc:	4293      	cmp	r3, r2
 81033be:	d04a      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a2a      	ldr	r2, [pc, #168]	; (8103470 <HAL_DMA_IRQHandler+0x3fc>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d045      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4a29      	ldr	r2, [pc, #164]	; (8103474 <HAL_DMA_IRQHandler+0x400>)
 81033d0:	4293      	cmp	r3, r2
 81033d2:	d040      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4a27      	ldr	r2, [pc, #156]	; (8103478 <HAL_DMA_IRQHandler+0x404>)
 81033da:	4293      	cmp	r3, r2
 81033dc:	d03b      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4a26      	ldr	r2, [pc, #152]	; (810347c <HAL_DMA_IRQHandler+0x408>)
 81033e4:	4293      	cmp	r3, r2
 81033e6:	d036      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	4a24      	ldr	r2, [pc, #144]	; (8103480 <HAL_DMA_IRQHandler+0x40c>)
 81033ee:	4293      	cmp	r3, r2
 81033f0:	d031      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	4a23      	ldr	r2, [pc, #140]	; (8103484 <HAL_DMA_IRQHandler+0x410>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d02c      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	4a21      	ldr	r2, [pc, #132]	; (8103488 <HAL_DMA_IRQHandler+0x414>)
 8103402:	4293      	cmp	r3, r2
 8103404:	d027      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	4a20      	ldr	r2, [pc, #128]	; (810348c <HAL_DMA_IRQHandler+0x418>)
 810340c:	4293      	cmp	r3, r2
 810340e:	d022      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	4a1e      	ldr	r2, [pc, #120]	; (8103490 <HAL_DMA_IRQHandler+0x41c>)
 8103416:	4293      	cmp	r3, r2
 8103418:	d01d      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	4a1d      	ldr	r2, [pc, #116]	; (8103494 <HAL_DMA_IRQHandler+0x420>)
 8103420:	4293      	cmp	r3, r2
 8103422:	d018      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	4a1b      	ldr	r2, [pc, #108]	; (8103498 <HAL_DMA_IRQHandler+0x424>)
 810342a:	4293      	cmp	r3, r2
 810342c:	d013      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	681b      	ldr	r3, [r3, #0]
 8103432:	4a1a      	ldr	r2, [pc, #104]	; (810349c <HAL_DMA_IRQHandler+0x428>)
 8103434:	4293      	cmp	r3, r2
 8103436:	d00e      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	4a18      	ldr	r2, [pc, #96]	; (81034a0 <HAL_DMA_IRQHandler+0x42c>)
 810343e:	4293      	cmp	r3, r2
 8103440:	d009      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	4a17      	ldr	r2, [pc, #92]	; (81034a4 <HAL_DMA_IRQHandler+0x430>)
 8103448:	4293      	cmp	r3, r2
 810344a:	d004      	beq.n	8103456 <HAL_DMA_IRQHandler+0x3e2>
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	4a15      	ldr	r2, [pc, #84]	; (81034a8 <HAL_DMA_IRQHandler+0x434>)
 8103452:	4293      	cmp	r3, r2
 8103454:	d12a      	bne.n	81034ac <HAL_DMA_IRQHandler+0x438>
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	f003 0302 	and.w	r3, r3, #2
 8103460:	2b00      	cmp	r3, #0
 8103462:	bf14      	ite	ne
 8103464:	2301      	movne	r3, #1
 8103466:	2300      	moveq	r3, #0
 8103468:	b2db      	uxtb	r3, r3
 810346a:	e023      	b.n	81034b4 <HAL_DMA_IRQHandler+0x440>
 810346c:	40020010 	.word	0x40020010
 8103470:	40020028 	.word	0x40020028
 8103474:	40020040 	.word	0x40020040
 8103478:	40020058 	.word	0x40020058
 810347c:	40020070 	.word	0x40020070
 8103480:	40020088 	.word	0x40020088
 8103484:	400200a0 	.word	0x400200a0
 8103488:	400200b8 	.word	0x400200b8
 810348c:	40020410 	.word	0x40020410
 8103490:	40020428 	.word	0x40020428
 8103494:	40020440 	.word	0x40020440
 8103498:	40020458 	.word	0x40020458
 810349c:	40020470 	.word	0x40020470
 81034a0:	40020488 	.word	0x40020488
 81034a4:	400204a0 	.word	0x400204a0
 81034a8:	400204b8 	.word	0x400204b8
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	681b      	ldr	r3, [r3, #0]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	2300      	movs	r3, #0
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	d00d      	beq.n	81034d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034bc:	f003 031f 	and.w	r3, r3, #31
 81034c0:	2204      	movs	r2, #4
 81034c2:	409a      	lsls	r2, r3
 81034c4:	6a3b      	ldr	r3, [r7, #32]
 81034c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034cc:	f043 0204 	orr.w	r2, r3, #4
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034d8:	f003 031f 	and.w	r3, r3, #31
 81034dc:	2210      	movs	r2, #16
 81034de:	409a      	lsls	r2, r3
 81034e0:	69bb      	ldr	r3, [r7, #24]
 81034e2:	4013      	ands	r3, r2
 81034e4:	2b00      	cmp	r3, #0
 81034e6:	f000 80a6 	beq.w	8103636 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	4a85      	ldr	r2, [pc, #532]	; (8103704 <HAL_DMA_IRQHandler+0x690>)
 81034f0:	4293      	cmp	r3, r2
 81034f2:	d04a      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a83      	ldr	r2, [pc, #524]	; (8103708 <HAL_DMA_IRQHandler+0x694>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d045      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a82      	ldr	r2, [pc, #520]	; (810370c <HAL_DMA_IRQHandler+0x698>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d040      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a80      	ldr	r2, [pc, #512]	; (8103710 <HAL_DMA_IRQHandler+0x69c>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d03b      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a7f      	ldr	r2, [pc, #508]	; (8103714 <HAL_DMA_IRQHandler+0x6a0>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d036      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a7d      	ldr	r2, [pc, #500]	; (8103718 <HAL_DMA_IRQHandler+0x6a4>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d031      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a7c      	ldr	r2, [pc, #496]	; (810371c <HAL_DMA_IRQHandler+0x6a8>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d02c      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a7a      	ldr	r2, [pc, #488]	; (8103720 <HAL_DMA_IRQHandler+0x6ac>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d027      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a79      	ldr	r2, [pc, #484]	; (8103724 <HAL_DMA_IRQHandler+0x6b0>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d022      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	4a77      	ldr	r2, [pc, #476]	; (8103728 <HAL_DMA_IRQHandler+0x6b4>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d01d      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	4a76      	ldr	r2, [pc, #472]	; (810372c <HAL_DMA_IRQHandler+0x6b8>)
 8103554:	4293      	cmp	r3, r2
 8103556:	d018      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	4a74      	ldr	r2, [pc, #464]	; (8103730 <HAL_DMA_IRQHandler+0x6bc>)
 810355e:	4293      	cmp	r3, r2
 8103560:	d013      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	4a73      	ldr	r2, [pc, #460]	; (8103734 <HAL_DMA_IRQHandler+0x6c0>)
 8103568:	4293      	cmp	r3, r2
 810356a:	d00e      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	4a71      	ldr	r2, [pc, #452]	; (8103738 <HAL_DMA_IRQHandler+0x6c4>)
 8103572:	4293      	cmp	r3, r2
 8103574:	d009      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	4a70      	ldr	r2, [pc, #448]	; (810373c <HAL_DMA_IRQHandler+0x6c8>)
 810357c:	4293      	cmp	r3, r2
 810357e:	d004      	beq.n	810358a <HAL_DMA_IRQHandler+0x516>
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	4a6e      	ldr	r2, [pc, #440]	; (8103740 <HAL_DMA_IRQHandler+0x6cc>)
 8103586:	4293      	cmp	r3, r2
 8103588:	d10a      	bne.n	81035a0 <HAL_DMA_IRQHandler+0x52c>
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	681b      	ldr	r3, [r3, #0]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	f003 0308 	and.w	r3, r3, #8
 8103594:	2b00      	cmp	r3, #0
 8103596:	bf14      	ite	ne
 8103598:	2301      	movne	r3, #1
 810359a:	2300      	moveq	r3, #0
 810359c:	b2db      	uxtb	r3, r3
 810359e:	e009      	b.n	81035b4 <HAL_DMA_IRQHandler+0x540>
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	f003 0304 	and.w	r3, r3, #4
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	bf14      	ite	ne
 81035ae:	2301      	movne	r3, #1
 81035b0:	2300      	moveq	r3, #0
 81035b2:	b2db      	uxtb	r3, r3
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	d03e      	beq.n	8103636 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81035bc:	f003 031f 	and.w	r3, r3, #31
 81035c0:	2210      	movs	r2, #16
 81035c2:	409a      	lsls	r2, r3
 81035c4:	6a3b      	ldr	r3, [r7, #32]
 81035c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d018      	beq.n	8103608 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	d108      	bne.n	81035f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	d024      	beq.n	8103636 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035f0:	6878      	ldr	r0, [r7, #4]
 81035f2:	4798      	blx	r3
 81035f4:	e01f      	b.n	8103636 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81035fa:	2b00      	cmp	r3, #0
 81035fc:	d01b      	beq.n	8103636 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103602:	6878      	ldr	r0, [r7, #4]
 8103604:	4798      	blx	r3
 8103606:	e016      	b.n	8103636 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103612:	2b00      	cmp	r3, #0
 8103614:	d107      	bne.n	8103626 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	681a      	ldr	r2, [r3, #0]
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	f022 0208 	bic.w	r2, r2, #8
 8103624:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810362a:	2b00      	cmp	r3, #0
 810362c:	d003      	beq.n	8103636 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103632:	6878      	ldr	r0, [r7, #4]
 8103634:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810363a:	f003 031f 	and.w	r3, r3, #31
 810363e:	2220      	movs	r2, #32
 8103640:	409a      	lsls	r2, r3
 8103642:	69bb      	ldr	r3, [r7, #24]
 8103644:	4013      	ands	r3, r2
 8103646:	2b00      	cmp	r3, #0
 8103648:	f000 8110 	beq.w	810386c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	4a2c      	ldr	r2, [pc, #176]	; (8103704 <HAL_DMA_IRQHandler+0x690>)
 8103652:	4293      	cmp	r3, r2
 8103654:	d04a      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	4a2b      	ldr	r2, [pc, #172]	; (8103708 <HAL_DMA_IRQHandler+0x694>)
 810365c:	4293      	cmp	r3, r2
 810365e:	d045      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	4a29      	ldr	r2, [pc, #164]	; (810370c <HAL_DMA_IRQHandler+0x698>)
 8103666:	4293      	cmp	r3, r2
 8103668:	d040      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	681b      	ldr	r3, [r3, #0]
 810366e:	4a28      	ldr	r2, [pc, #160]	; (8103710 <HAL_DMA_IRQHandler+0x69c>)
 8103670:	4293      	cmp	r3, r2
 8103672:	d03b      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	681b      	ldr	r3, [r3, #0]
 8103678:	4a26      	ldr	r2, [pc, #152]	; (8103714 <HAL_DMA_IRQHandler+0x6a0>)
 810367a:	4293      	cmp	r3, r2
 810367c:	d036      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	4a25      	ldr	r2, [pc, #148]	; (8103718 <HAL_DMA_IRQHandler+0x6a4>)
 8103684:	4293      	cmp	r3, r2
 8103686:	d031      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	4a23      	ldr	r2, [pc, #140]	; (810371c <HAL_DMA_IRQHandler+0x6a8>)
 810368e:	4293      	cmp	r3, r2
 8103690:	d02c      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	681b      	ldr	r3, [r3, #0]
 8103696:	4a22      	ldr	r2, [pc, #136]	; (8103720 <HAL_DMA_IRQHandler+0x6ac>)
 8103698:	4293      	cmp	r3, r2
 810369a:	d027      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	4a20      	ldr	r2, [pc, #128]	; (8103724 <HAL_DMA_IRQHandler+0x6b0>)
 81036a2:	4293      	cmp	r3, r2
 81036a4:	d022      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	4a1f      	ldr	r2, [pc, #124]	; (8103728 <HAL_DMA_IRQHandler+0x6b4>)
 81036ac:	4293      	cmp	r3, r2
 81036ae:	d01d      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	4a1d      	ldr	r2, [pc, #116]	; (810372c <HAL_DMA_IRQHandler+0x6b8>)
 81036b6:	4293      	cmp	r3, r2
 81036b8:	d018      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	681b      	ldr	r3, [r3, #0]
 81036be:	4a1c      	ldr	r2, [pc, #112]	; (8103730 <HAL_DMA_IRQHandler+0x6bc>)
 81036c0:	4293      	cmp	r3, r2
 81036c2:	d013      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	4a1a      	ldr	r2, [pc, #104]	; (8103734 <HAL_DMA_IRQHandler+0x6c0>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d00e      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	681b      	ldr	r3, [r3, #0]
 81036d2:	4a19      	ldr	r2, [pc, #100]	; (8103738 <HAL_DMA_IRQHandler+0x6c4>)
 81036d4:	4293      	cmp	r3, r2
 81036d6:	d009      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	4a17      	ldr	r2, [pc, #92]	; (810373c <HAL_DMA_IRQHandler+0x6c8>)
 81036de:	4293      	cmp	r3, r2
 81036e0:	d004      	beq.n	81036ec <HAL_DMA_IRQHandler+0x678>
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4a16      	ldr	r2, [pc, #88]	; (8103740 <HAL_DMA_IRQHandler+0x6cc>)
 81036e8:	4293      	cmp	r3, r2
 81036ea:	d12b      	bne.n	8103744 <HAL_DMA_IRQHandler+0x6d0>
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f003 0310 	and.w	r3, r3, #16
 81036f6:	2b00      	cmp	r3, #0
 81036f8:	bf14      	ite	ne
 81036fa:	2301      	movne	r3, #1
 81036fc:	2300      	moveq	r3, #0
 81036fe:	b2db      	uxtb	r3, r3
 8103700:	e02a      	b.n	8103758 <HAL_DMA_IRQHandler+0x6e4>
 8103702:	bf00      	nop
 8103704:	40020010 	.word	0x40020010
 8103708:	40020028 	.word	0x40020028
 810370c:	40020040 	.word	0x40020040
 8103710:	40020058 	.word	0x40020058
 8103714:	40020070 	.word	0x40020070
 8103718:	40020088 	.word	0x40020088
 810371c:	400200a0 	.word	0x400200a0
 8103720:	400200b8 	.word	0x400200b8
 8103724:	40020410 	.word	0x40020410
 8103728:	40020428 	.word	0x40020428
 810372c:	40020440 	.word	0x40020440
 8103730:	40020458 	.word	0x40020458
 8103734:	40020470 	.word	0x40020470
 8103738:	40020488 	.word	0x40020488
 810373c:	400204a0 	.word	0x400204a0
 8103740:	400204b8 	.word	0x400204b8
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	f003 0302 	and.w	r3, r3, #2
 810374e:	2b00      	cmp	r3, #0
 8103750:	bf14      	ite	ne
 8103752:	2301      	movne	r3, #1
 8103754:	2300      	moveq	r3, #0
 8103756:	b2db      	uxtb	r3, r3
 8103758:	2b00      	cmp	r3, #0
 810375a:	f000 8087 	beq.w	810386c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103762:	f003 031f 	and.w	r3, r3, #31
 8103766:	2220      	movs	r2, #32
 8103768:	409a      	lsls	r2, r3
 810376a:	6a3b      	ldr	r3, [r7, #32]
 810376c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103774:	b2db      	uxtb	r3, r3
 8103776:	2b04      	cmp	r3, #4
 8103778:	d139      	bne.n	81037ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	681a      	ldr	r2, [r3, #0]
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	f022 0216 	bic.w	r2, r2, #22
 8103788:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	695a      	ldr	r2, [r3, #20]
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103798:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d103      	bne.n	81037aa <HAL_DMA_IRQHandler+0x736>
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81037a6:	2b00      	cmp	r3, #0
 81037a8:	d007      	beq.n	81037ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	681a      	ldr	r2, [r3, #0]
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	f022 0208 	bic.w	r2, r2, #8
 81037b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037be:	f003 031f 	and.w	r3, r3, #31
 81037c2:	223f      	movs	r2, #63	; 0x3f
 81037c4:	409a      	lsls	r2, r3
 81037c6:	6a3b      	ldr	r3, [r7, #32]
 81037c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	2201      	movs	r2, #1
 81037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	2200      	movs	r2, #0
 81037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037de:	2b00      	cmp	r3, #0
 81037e0:	f000 834a 	beq.w	8103e78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037e8:	6878      	ldr	r0, [r7, #4]
 81037ea:	4798      	blx	r3
          }
          return;
 81037ec:	e344      	b.n	8103e78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	681b      	ldr	r3, [r3, #0]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81037f8:	2b00      	cmp	r3, #0
 81037fa:	d018      	beq.n	810382e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103806:	2b00      	cmp	r3, #0
 8103808:	d108      	bne.n	810381c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810380e:	2b00      	cmp	r3, #0
 8103810:	d02c      	beq.n	810386c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103816:	6878      	ldr	r0, [r7, #4]
 8103818:	4798      	blx	r3
 810381a:	e027      	b.n	810386c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103820:	2b00      	cmp	r3, #0
 8103822:	d023      	beq.n	810386c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103828:	6878      	ldr	r0, [r7, #4]
 810382a:	4798      	blx	r3
 810382c:	e01e      	b.n	810386c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	681b      	ldr	r3, [r3, #0]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103838:	2b00      	cmp	r3, #0
 810383a:	d10f      	bne.n	810385c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	681a      	ldr	r2, [r3, #0]
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	681b      	ldr	r3, [r3, #0]
 8103846:	f022 0210 	bic.w	r2, r2, #16
 810384a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	2201      	movs	r2, #1
 8103850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	2200      	movs	r2, #0
 8103858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103860:	2b00      	cmp	r3, #0
 8103862:	d003      	beq.n	810386c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103868:	6878      	ldr	r0, [r7, #4]
 810386a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103870:	2b00      	cmp	r3, #0
 8103872:	f000 8306 	beq.w	8103e82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810387a:	f003 0301 	and.w	r3, r3, #1
 810387e:	2b00      	cmp	r3, #0
 8103880:	f000 8088 	beq.w	8103994 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	2204      	movs	r2, #4
 8103888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	4a7a      	ldr	r2, [pc, #488]	; (8103a7c <HAL_DMA_IRQHandler+0xa08>)
 8103892:	4293      	cmp	r3, r2
 8103894:	d04a      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	4a79      	ldr	r2, [pc, #484]	; (8103a80 <HAL_DMA_IRQHandler+0xa0c>)
 810389c:	4293      	cmp	r3, r2
 810389e:	d045      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	4a77      	ldr	r2, [pc, #476]	; (8103a84 <HAL_DMA_IRQHandler+0xa10>)
 81038a6:	4293      	cmp	r3, r2
 81038a8:	d040      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	4a76      	ldr	r2, [pc, #472]	; (8103a88 <HAL_DMA_IRQHandler+0xa14>)
 81038b0:	4293      	cmp	r3, r2
 81038b2:	d03b      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	4a74      	ldr	r2, [pc, #464]	; (8103a8c <HAL_DMA_IRQHandler+0xa18>)
 81038ba:	4293      	cmp	r3, r2
 81038bc:	d036      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	681b      	ldr	r3, [r3, #0]
 81038c2:	4a73      	ldr	r2, [pc, #460]	; (8103a90 <HAL_DMA_IRQHandler+0xa1c>)
 81038c4:	4293      	cmp	r3, r2
 81038c6:	d031      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	4a71      	ldr	r2, [pc, #452]	; (8103a94 <HAL_DMA_IRQHandler+0xa20>)
 81038ce:	4293      	cmp	r3, r2
 81038d0:	d02c      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	681b      	ldr	r3, [r3, #0]
 81038d6:	4a70      	ldr	r2, [pc, #448]	; (8103a98 <HAL_DMA_IRQHandler+0xa24>)
 81038d8:	4293      	cmp	r3, r2
 81038da:	d027      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	681b      	ldr	r3, [r3, #0]
 81038e0:	4a6e      	ldr	r2, [pc, #440]	; (8103a9c <HAL_DMA_IRQHandler+0xa28>)
 81038e2:	4293      	cmp	r3, r2
 81038e4:	d022      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	681b      	ldr	r3, [r3, #0]
 81038ea:	4a6d      	ldr	r2, [pc, #436]	; (8103aa0 <HAL_DMA_IRQHandler+0xa2c>)
 81038ec:	4293      	cmp	r3, r2
 81038ee:	d01d      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	4a6b      	ldr	r2, [pc, #428]	; (8103aa4 <HAL_DMA_IRQHandler+0xa30>)
 81038f6:	4293      	cmp	r3, r2
 81038f8:	d018      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	4a6a      	ldr	r2, [pc, #424]	; (8103aa8 <HAL_DMA_IRQHandler+0xa34>)
 8103900:	4293      	cmp	r3, r2
 8103902:	d013      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	4a68      	ldr	r2, [pc, #416]	; (8103aac <HAL_DMA_IRQHandler+0xa38>)
 810390a:	4293      	cmp	r3, r2
 810390c:	d00e      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	681b      	ldr	r3, [r3, #0]
 8103912:	4a67      	ldr	r2, [pc, #412]	; (8103ab0 <HAL_DMA_IRQHandler+0xa3c>)
 8103914:	4293      	cmp	r3, r2
 8103916:	d009      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	681b      	ldr	r3, [r3, #0]
 810391c:	4a65      	ldr	r2, [pc, #404]	; (8103ab4 <HAL_DMA_IRQHandler+0xa40>)
 810391e:	4293      	cmp	r3, r2
 8103920:	d004      	beq.n	810392c <HAL_DMA_IRQHandler+0x8b8>
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	4a64      	ldr	r2, [pc, #400]	; (8103ab8 <HAL_DMA_IRQHandler+0xa44>)
 8103928:	4293      	cmp	r3, r2
 810392a:	d108      	bne.n	810393e <HAL_DMA_IRQHandler+0x8ca>
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	681a      	ldr	r2, [r3, #0]
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	f022 0201 	bic.w	r2, r2, #1
 810393a:	601a      	str	r2, [r3, #0]
 810393c:	e007      	b.n	810394e <HAL_DMA_IRQHandler+0x8da>
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	681a      	ldr	r2, [r3, #0]
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	f022 0201 	bic.w	r2, r2, #1
 810394c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810394e:	68fb      	ldr	r3, [r7, #12]
 8103950:	3301      	adds	r3, #1
 8103952:	60fb      	str	r3, [r7, #12]
 8103954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103956:	429a      	cmp	r2, r3
 8103958:	d307      	bcc.n	810396a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	f003 0301 	and.w	r3, r3, #1
 8103964:	2b00      	cmp	r3, #0
 8103966:	d1f2      	bne.n	810394e <HAL_DMA_IRQHandler+0x8da>
 8103968:	e000      	b.n	810396c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810396a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	f003 0301 	and.w	r3, r3, #1
 8103976:	2b00      	cmp	r3, #0
 8103978:	d004      	beq.n	8103984 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	2203      	movs	r2, #3
 810397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103982:	e003      	b.n	810398c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	2201      	movs	r2, #1
 8103988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	2200      	movs	r2, #0
 8103990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103998:	2b00      	cmp	r3, #0
 810399a:	f000 8272 	beq.w	8103e82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039a2:	6878      	ldr	r0, [r7, #4]
 81039a4:	4798      	blx	r3
 81039a6:	e26c      	b.n	8103e82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	4a43      	ldr	r2, [pc, #268]	; (8103abc <HAL_DMA_IRQHandler+0xa48>)
 81039ae:	4293      	cmp	r3, r2
 81039b0:	d022      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	4a42      	ldr	r2, [pc, #264]	; (8103ac0 <HAL_DMA_IRQHandler+0xa4c>)
 81039b8:	4293      	cmp	r3, r2
 81039ba:	d01d      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4a40      	ldr	r2, [pc, #256]	; (8103ac4 <HAL_DMA_IRQHandler+0xa50>)
 81039c2:	4293      	cmp	r3, r2
 81039c4:	d018      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	4a3f      	ldr	r2, [pc, #252]	; (8103ac8 <HAL_DMA_IRQHandler+0xa54>)
 81039cc:	4293      	cmp	r3, r2
 81039ce:	d013      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	4a3d      	ldr	r2, [pc, #244]	; (8103acc <HAL_DMA_IRQHandler+0xa58>)
 81039d6:	4293      	cmp	r3, r2
 81039d8:	d00e      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	4a3c      	ldr	r2, [pc, #240]	; (8103ad0 <HAL_DMA_IRQHandler+0xa5c>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	d009      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	4a3a      	ldr	r2, [pc, #232]	; (8103ad4 <HAL_DMA_IRQHandler+0xa60>)
 81039ea:	4293      	cmp	r3, r2
 81039ec:	d004      	beq.n	81039f8 <HAL_DMA_IRQHandler+0x984>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	4a39      	ldr	r2, [pc, #228]	; (8103ad8 <HAL_DMA_IRQHandler+0xa64>)
 81039f4:	4293      	cmp	r3, r2
 81039f6:	d101      	bne.n	81039fc <HAL_DMA_IRQHandler+0x988>
 81039f8:	2301      	movs	r3, #1
 81039fa:	e000      	b.n	81039fe <HAL_DMA_IRQHandler+0x98a>
 81039fc:	2300      	movs	r3, #0
 81039fe:	2b00      	cmp	r3, #0
 8103a00:	f000 823f 	beq.w	8103e82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	681b      	ldr	r3, [r3, #0]
 8103a0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a10:	f003 031f 	and.w	r3, r3, #31
 8103a14:	2204      	movs	r2, #4
 8103a16:	409a      	lsls	r2, r3
 8103a18:	697b      	ldr	r3, [r7, #20]
 8103a1a:	4013      	ands	r3, r2
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	f000 80cd 	beq.w	8103bbc <HAL_DMA_IRQHandler+0xb48>
 8103a22:	693b      	ldr	r3, [r7, #16]
 8103a24:	f003 0304 	and.w	r3, r3, #4
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	f000 80c7 	beq.w	8103bbc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a32:	f003 031f 	and.w	r3, r3, #31
 8103a36:	2204      	movs	r2, #4
 8103a38:	409a      	lsls	r2, r3
 8103a3a:	69fb      	ldr	r3, [r7, #28]
 8103a3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a3e:	693b      	ldr	r3, [r7, #16]
 8103a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103a44:	2b00      	cmp	r3, #0
 8103a46:	d049      	beq.n	8103adc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103a48:	693b      	ldr	r3, [r7, #16]
 8103a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103a4e:	2b00      	cmp	r3, #0
 8103a50:	d109      	bne.n	8103a66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	f000 8210 	beq.w	8103e7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a60:	6878      	ldr	r0, [r7, #4]
 8103a62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a64:	e20a      	b.n	8103e7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	f000 8206 	beq.w	8103e7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a74:	6878      	ldr	r0, [r7, #4]
 8103a76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a78:	e200      	b.n	8103e7c <HAL_DMA_IRQHandler+0xe08>
 8103a7a:	bf00      	nop
 8103a7c:	40020010 	.word	0x40020010
 8103a80:	40020028 	.word	0x40020028
 8103a84:	40020040 	.word	0x40020040
 8103a88:	40020058 	.word	0x40020058
 8103a8c:	40020070 	.word	0x40020070
 8103a90:	40020088 	.word	0x40020088
 8103a94:	400200a0 	.word	0x400200a0
 8103a98:	400200b8 	.word	0x400200b8
 8103a9c:	40020410 	.word	0x40020410
 8103aa0:	40020428 	.word	0x40020428
 8103aa4:	40020440 	.word	0x40020440
 8103aa8:	40020458 	.word	0x40020458
 8103aac:	40020470 	.word	0x40020470
 8103ab0:	40020488 	.word	0x40020488
 8103ab4:	400204a0 	.word	0x400204a0
 8103ab8:	400204b8 	.word	0x400204b8
 8103abc:	58025408 	.word	0x58025408
 8103ac0:	5802541c 	.word	0x5802541c
 8103ac4:	58025430 	.word	0x58025430
 8103ac8:	58025444 	.word	0x58025444
 8103acc:	58025458 	.word	0x58025458
 8103ad0:	5802546c 	.word	0x5802546c
 8103ad4:	58025480 	.word	0x58025480
 8103ad8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103adc:	693b      	ldr	r3, [r7, #16]
 8103ade:	f003 0320 	and.w	r3, r3, #32
 8103ae2:	2b00      	cmp	r3, #0
 8103ae4:	d160      	bne.n	8103ba8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a7f      	ldr	r2, [pc, #508]	; (8103ce8 <HAL_DMA_IRQHandler+0xc74>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d04a      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a7d      	ldr	r2, [pc, #500]	; (8103cec <HAL_DMA_IRQHandler+0xc78>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d045      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a7c      	ldr	r2, [pc, #496]	; (8103cf0 <HAL_DMA_IRQHandler+0xc7c>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d040      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4a7a      	ldr	r2, [pc, #488]	; (8103cf4 <HAL_DMA_IRQHandler+0xc80>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d03b      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	4a79      	ldr	r2, [pc, #484]	; (8103cf8 <HAL_DMA_IRQHandler+0xc84>)
 8103b14:	4293      	cmp	r3, r2
 8103b16:	d036      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	4a77      	ldr	r2, [pc, #476]	; (8103cfc <HAL_DMA_IRQHandler+0xc88>)
 8103b1e:	4293      	cmp	r3, r2
 8103b20:	d031      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	4a76      	ldr	r2, [pc, #472]	; (8103d00 <HAL_DMA_IRQHandler+0xc8c>)
 8103b28:	4293      	cmp	r3, r2
 8103b2a:	d02c      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4a74      	ldr	r2, [pc, #464]	; (8103d04 <HAL_DMA_IRQHandler+0xc90>)
 8103b32:	4293      	cmp	r3, r2
 8103b34:	d027      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4a73      	ldr	r2, [pc, #460]	; (8103d08 <HAL_DMA_IRQHandler+0xc94>)
 8103b3c:	4293      	cmp	r3, r2
 8103b3e:	d022      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	4a71      	ldr	r2, [pc, #452]	; (8103d0c <HAL_DMA_IRQHandler+0xc98>)
 8103b46:	4293      	cmp	r3, r2
 8103b48:	d01d      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	4a70      	ldr	r2, [pc, #448]	; (8103d10 <HAL_DMA_IRQHandler+0xc9c>)
 8103b50:	4293      	cmp	r3, r2
 8103b52:	d018      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	4a6e      	ldr	r2, [pc, #440]	; (8103d14 <HAL_DMA_IRQHandler+0xca0>)
 8103b5a:	4293      	cmp	r3, r2
 8103b5c:	d013      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	681b      	ldr	r3, [r3, #0]
 8103b62:	4a6d      	ldr	r2, [pc, #436]	; (8103d18 <HAL_DMA_IRQHandler+0xca4>)
 8103b64:	4293      	cmp	r3, r2
 8103b66:	d00e      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	681b      	ldr	r3, [r3, #0]
 8103b6c:	4a6b      	ldr	r2, [pc, #428]	; (8103d1c <HAL_DMA_IRQHandler+0xca8>)
 8103b6e:	4293      	cmp	r3, r2
 8103b70:	d009      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	681b      	ldr	r3, [r3, #0]
 8103b76:	4a6a      	ldr	r2, [pc, #424]	; (8103d20 <HAL_DMA_IRQHandler+0xcac>)
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d004      	beq.n	8103b86 <HAL_DMA_IRQHandler+0xb12>
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	4a68      	ldr	r2, [pc, #416]	; (8103d24 <HAL_DMA_IRQHandler+0xcb0>)
 8103b82:	4293      	cmp	r3, r2
 8103b84:	d108      	bne.n	8103b98 <HAL_DMA_IRQHandler+0xb24>
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	681b      	ldr	r3, [r3, #0]
 8103b8a:	681a      	ldr	r2, [r3, #0]
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	681b      	ldr	r3, [r3, #0]
 8103b90:	f022 0208 	bic.w	r2, r2, #8
 8103b94:	601a      	str	r2, [r3, #0]
 8103b96:	e007      	b.n	8103ba8 <HAL_DMA_IRQHandler+0xb34>
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	681a      	ldr	r2, [r3, #0]
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	f022 0204 	bic.w	r2, r2, #4
 8103ba6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103bac:	2b00      	cmp	r3, #0
 8103bae:	f000 8165 	beq.w	8103e7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103bb6:	6878      	ldr	r0, [r7, #4]
 8103bb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103bba:	e15f      	b.n	8103e7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bc0:	f003 031f 	and.w	r3, r3, #31
 8103bc4:	2202      	movs	r2, #2
 8103bc6:	409a      	lsls	r2, r3
 8103bc8:	697b      	ldr	r3, [r7, #20]
 8103bca:	4013      	ands	r3, r2
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	f000 80c5 	beq.w	8103d5c <HAL_DMA_IRQHandler+0xce8>
 8103bd2:	693b      	ldr	r3, [r7, #16]
 8103bd4:	f003 0302 	and.w	r3, r3, #2
 8103bd8:	2b00      	cmp	r3, #0
 8103bda:	f000 80bf 	beq.w	8103d5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103be2:	f003 031f 	and.w	r3, r3, #31
 8103be6:	2202      	movs	r2, #2
 8103be8:	409a      	lsls	r2, r3
 8103bea:	69fb      	ldr	r3, [r7, #28]
 8103bec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103bee:	693b      	ldr	r3, [r7, #16]
 8103bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103bf4:	2b00      	cmp	r3, #0
 8103bf6:	d018      	beq.n	8103c2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103bf8:	693b      	ldr	r3, [r7, #16]
 8103bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103bfe:	2b00      	cmp	r3, #0
 8103c00:	d109      	bne.n	8103c16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c06:	2b00      	cmp	r3, #0
 8103c08:	f000 813a 	beq.w	8103e80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c10:	6878      	ldr	r0, [r7, #4]
 8103c12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c14:	e134      	b.n	8103e80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c1a:	2b00      	cmp	r3, #0
 8103c1c:	f000 8130 	beq.w	8103e80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c24:	6878      	ldr	r0, [r7, #4]
 8103c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c28:	e12a      	b.n	8103e80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103c2a:	693b      	ldr	r3, [r7, #16]
 8103c2c:	f003 0320 	and.w	r3, r3, #32
 8103c30:	2b00      	cmp	r3, #0
 8103c32:	f040 8089 	bne.w	8103d48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a2b      	ldr	r2, [pc, #172]	; (8103ce8 <HAL_DMA_IRQHandler+0xc74>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d04a      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a29      	ldr	r2, [pc, #164]	; (8103cec <HAL_DMA_IRQHandler+0xc78>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d045      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a28      	ldr	r2, [pc, #160]	; (8103cf0 <HAL_DMA_IRQHandler+0xc7c>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d040      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a26      	ldr	r2, [pc, #152]	; (8103cf4 <HAL_DMA_IRQHandler+0xc80>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d03b      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a25      	ldr	r2, [pc, #148]	; (8103cf8 <HAL_DMA_IRQHandler+0xc84>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d036      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a23      	ldr	r2, [pc, #140]	; (8103cfc <HAL_DMA_IRQHandler+0xc88>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d031      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a22      	ldr	r2, [pc, #136]	; (8103d00 <HAL_DMA_IRQHandler+0xc8c>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d02c      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a20      	ldr	r2, [pc, #128]	; (8103d04 <HAL_DMA_IRQHandler+0xc90>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d027      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a1f      	ldr	r2, [pc, #124]	; (8103d08 <HAL_DMA_IRQHandler+0xc94>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d022      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	4a1d      	ldr	r2, [pc, #116]	; (8103d0c <HAL_DMA_IRQHandler+0xc98>)
 8103c96:	4293      	cmp	r3, r2
 8103c98:	d01d      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a1c      	ldr	r2, [pc, #112]	; (8103d10 <HAL_DMA_IRQHandler+0xc9c>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d018      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a1a      	ldr	r2, [pc, #104]	; (8103d14 <HAL_DMA_IRQHandler+0xca0>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d013      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	4a19      	ldr	r2, [pc, #100]	; (8103d18 <HAL_DMA_IRQHandler+0xca4>)
 8103cb4:	4293      	cmp	r3, r2
 8103cb6:	d00e      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	4a17      	ldr	r2, [pc, #92]	; (8103d1c <HAL_DMA_IRQHandler+0xca8>)
 8103cbe:	4293      	cmp	r3, r2
 8103cc0:	d009      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	4a16      	ldr	r2, [pc, #88]	; (8103d20 <HAL_DMA_IRQHandler+0xcac>)
 8103cc8:	4293      	cmp	r3, r2
 8103cca:	d004      	beq.n	8103cd6 <HAL_DMA_IRQHandler+0xc62>
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	4a14      	ldr	r2, [pc, #80]	; (8103d24 <HAL_DMA_IRQHandler+0xcb0>)
 8103cd2:	4293      	cmp	r3, r2
 8103cd4:	d128      	bne.n	8103d28 <HAL_DMA_IRQHandler+0xcb4>
 8103cd6:	687b      	ldr	r3, [r7, #4]
 8103cd8:	681b      	ldr	r3, [r3, #0]
 8103cda:	681a      	ldr	r2, [r3, #0]
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	f022 0214 	bic.w	r2, r2, #20
 8103ce4:	601a      	str	r2, [r3, #0]
 8103ce6:	e027      	b.n	8103d38 <HAL_DMA_IRQHandler+0xcc4>
 8103ce8:	40020010 	.word	0x40020010
 8103cec:	40020028 	.word	0x40020028
 8103cf0:	40020040 	.word	0x40020040
 8103cf4:	40020058 	.word	0x40020058
 8103cf8:	40020070 	.word	0x40020070
 8103cfc:	40020088 	.word	0x40020088
 8103d00:	400200a0 	.word	0x400200a0
 8103d04:	400200b8 	.word	0x400200b8
 8103d08:	40020410 	.word	0x40020410
 8103d0c:	40020428 	.word	0x40020428
 8103d10:	40020440 	.word	0x40020440
 8103d14:	40020458 	.word	0x40020458
 8103d18:	40020470 	.word	0x40020470
 8103d1c:	40020488 	.word	0x40020488
 8103d20:	400204a0 	.word	0x400204a0
 8103d24:	400204b8 	.word	0x400204b8
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	681a      	ldr	r2, [r3, #0]
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	f022 020a 	bic.w	r2, r2, #10
 8103d36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	2201      	movs	r2, #1
 8103d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	2200      	movs	r2, #0
 8103d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	f000 8097 	beq.w	8103e80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d56:	6878      	ldr	r0, [r7, #4]
 8103d58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d5a:	e091      	b.n	8103e80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d60:	f003 031f 	and.w	r3, r3, #31
 8103d64:	2208      	movs	r2, #8
 8103d66:	409a      	lsls	r2, r3
 8103d68:	697b      	ldr	r3, [r7, #20]
 8103d6a:	4013      	ands	r3, r2
 8103d6c:	2b00      	cmp	r3, #0
 8103d6e:	f000 8088 	beq.w	8103e82 <HAL_DMA_IRQHandler+0xe0e>
 8103d72:	693b      	ldr	r3, [r7, #16]
 8103d74:	f003 0308 	and.w	r3, r3, #8
 8103d78:	2b00      	cmp	r3, #0
 8103d7a:	f000 8082 	beq.w	8103e82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	4a41      	ldr	r2, [pc, #260]	; (8103e88 <HAL_DMA_IRQHandler+0xe14>)
 8103d84:	4293      	cmp	r3, r2
 8103d86:	d04a      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	4a3f      	ldr	r2, [pc, #252]	; (8103e8c <HAL_DMA_IRQHandler+0xe18>)
 8103d8e:	4293      	cmp	r3, r2
 8103d90:	d045      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	4a3e      	ldr	r2, [pc, #248]	; (8103e90 <HAL_DMA_IRQHandler+0xe1c>)
 8103d98:	4293      	cmp	r3, r2
 8103d9a:	d040      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	4a3c      	ldr	r2, [pc, #240]	; (8103e94 <HAL_DMA_IRQHandler+0xe20>)
 8103da2:	4293      	cmp	r3, r2
 8103da4:	d03b      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	4a3b      	ldr	r2, [pc, #236]	; (8103e98 <HAL_DMA_IRQHandler+0xe24>)
 8103dac:	4293      	cmp	r3, r2
 8103dae:	d036      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	4a39      	ldr	r2, [pc, #228]	; (8103e9c <HAL_DMA_IRQHandler+0xe28>)
 8103db6:	4293      	cmp	r3, r2
 8103db8:	d031      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	4a38      	ldr	r2, [pc, #224]	; (8103ea0 <HAL_DMA_IRQHandler+0xe2c>)
 8103dc0:	4293      	cmp	r3, r2
 8103dc2:	d02c      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	4a36      	ldr	r2, [pc, #216]	; (8103ea4 <HAL_DMA_IRQHandler+0xe30>)
 8103dca:	4293      	cmp	r3, r2
 8103dcc:	d027      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	4a35      	ldr	r2, [pc, #212]	; (8103ea8 <HAL_DMA_IRQHandler+0xe34>)
 8103dd4:	4293      	cmp	r3, r2
 8103dd6:	d022      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	681b      	ldr	r3, [r3, #0]
 8103ddc:	4a33      	ldr	r2, [pc, #204]	; (8103eac <HAL_DMA_IRQHandler+0xe38>)
 8103dde:	4293      	cmp	r3, r2
 8103de0:	d01d      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	4a32      	ldr	r2, [pc, #200]	; (8103eb0 <HAL_DMA_IRQHandler+0xe3c>)
 8103de8:	4293      	cmp	r3, r2
 8103dea:	d018      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	4a30      	ldr	r2, [pc, #192]	; (8103eb4 <HAL_DMA_IRQHandler+0xe40>)
 8103df2:	4293      	cmp	r3, r2
 8103df4:	d013      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	681b      	ldr	r3, [r3, #0]
 8103dfa:	4a2f      	ldr	r2, [pc, #188]	; (8103eb8 <HAL_DMA_IRQHandler+0xe44>)
 8103dfc:	4293      	cmp	r3, r2
 8103dfe:	d00e      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	4a2d      	ldr	r2, [pc, #180]	; (8103ebc <HAL_DMA_IRQHandler+0xe48>)
 8103e06:	4293      	cmp	r3, r2
 8103e08:	d009      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	4a2c      	ldr	r2, [pc, #176]	; (8103ec0 <HAL_DMA_IRQHandler+0xe4c>)
 8103e10:	4293      	cmp	r3, r2
 8103e12:	d004      	beq.n	8103e1e <HAL_DMA_IRQHandler+0xdaa>
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	4a2a      	ldr	r2, [pc, #168]	; (8103ec4 <HAL_DMA_IRQHandler+0xe50>)
 8103e1a:	4293      	cmp	r3, r2
 8103e1c:	d108      	bne.n	8103e30 <HAL_DMA_IRQHandler+0xdbc>
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	681a      	ldr	r2, [r3, #0]
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	f022 021c 	bic.w	r2, r2, #28
 8103e2c:	601a      	str	r2, [r3, #0]
 8103e2e:	e007      	b.n	8103e40 <HAL_DMA_IRQHandler+0xdcc>
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	681a      	ldr	r2, [r3, #0]
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	f022 020e 	bic.w	r2, r2, #14
 8103e3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e44:	f003 031f 	and.w	r3, r3, #31
 8103e48:	2201      	movs	r2, #1
 8103e4a:	409a      	lsls	r2, r3
 8103e4c:	69fb      	ldr	r3, [r7, #28]
 8103e4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	2201      	movs	r2, #1
 8103e54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	2201      	movs	r2, #1
 8103e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	2200      	movs	r2, #0
 8103e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e6a:	2b00      	cmp	r3, #0
 8103e6c:	d009      	beq.n	8103e82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103e6e:	687b      	ldr	r3, [r7, #4]
 8103e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e72:	6878      	ldr	r0, [r7, #4]
 8103e74:	4798      	blx	r3
 8103e76:	e004      	b.n	8103e82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103e78:	bf00      	nop
 8103e7a:	e002      	b.n	8103e82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e7c:	bf00      	nop
 8103e7e:	e000      	b.n	8103e82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103e82:	3728      	adds	r7, #40	; 0x28
 8103e84:	46bd      	mov	sp, r7
 8103e86:	bd80      	pop	{r7, pc}
 8103e88:	40020010 	.word	0x40020010
 8103e8c:	40020028 	.word	0x40020028
 8103e90:	40020040 	.word	0x40020040
 8103e94:	40020058 	.word	0x40020058
 8103e98:	40020070 	.word	0x40020070
 8103e9c:	40020088 	.word	0x40020088
 8103ea0:	400200a0 	.word	0x400200a0
 8103ea4:	400200b8 	.word	0x400200b8
 8103ea8:	40020410 	.word	0x40020410
 8103eac:	40020428 	.word	0x40020428
 8103eb0:	40020440 	.word	0x40020440
 8103eb4:	40020458 	.word	0x40020458
 8103eb8:	40020470 	.word	0x40020470
 8103ebc:	40020488 	.word	0x40020488
 8103ec0:	400204a0 	.word	0x400204a0
 8103ec4:	400204b8 	.word	0x400204b8

08103ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103ec8:	b480      	push	{r7}
 8103eca:	b085      	sub	sp, #20
 8103ecc:	af00      	add	r7, sp, #0
 8103ece:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	4a43      	ldr	r2, [pc, #268]	; (8103fe4 <DMA_CalcBaseAndBitshift+0x11c>)
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	d04a      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	4a42      	ldr	r2, [pc, #264]	; (8103fe8 <DMA_CalcBaseAndBitshift+0x120>)
 8103ee0:	4293      	cmp	r3, r2
 8103ee2:	d045      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	4a40      	ldr	r2, [pc, #256]	; (8103fec <DMA_CalcBaseAndBitshift+0x124>)
 8103eea:	4293      	cmp	r3, r2
 8103eec:	d040      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	4a3f      	ldr	r2, [pc, #252]	; (8103ff0 <DMA_CalcBaseAndBitshift+0x128>)
 8103ef4:	4293      	cmp	r3, r2
 8103ef6:	d03b      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	4a3d      	ldr	r2, [pc, #244]	; (8103ff4 <DMA_CalcBaseAndBitshift+0x12c>)
 8103efe:	4293      	cmp	r3, r2
 8103f00:	d036      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	4a3c      	ldr	r2, [pc, #240]	; (8103ff8 <DMA_CalcBaseAndBitshift+0x130>)
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d031      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	4a3a      	ldr	r2, [pc, #232]	; (8103ffc <DMA_CalcBaseAndBitshift+0x134>)
 8103f12:	4293      	cmp	r3, r2
 8103f14:	d02c      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	4a39      	ldr	r2, [pc, #228]	; (8104000 <DMA_CalcBaseAndBitshift+0x138>)
 8103f1c:	4293      	cmp	r3, r2
 8103f1e:	d027      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	4a37      	ldr	r2, [pc, #220]	; (8104004 <DMA_CalcBaseAndBitshift+0x13c>)
 8103f26:	4293      	cmp	r3, r2
 8103f28:	d022      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	4a36      	ldr	r2, [pc, #216]	; (8104008 <DMA_CalcBaseAndBitshift+0x140>)
 8103f30:	4293      	cmp	r3, r2
 8103f32:	d01d      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	4a34      	ldr	r2, [pc, #208]	; (810400c <DMA_CalcBaseAndBitshift+0x144>)
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d018      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	4a33      	ldr	r2, [pc, #204]	; (8104010 <DMA_CalcBaseAndBitshift+0x148>)
 8103f44:	4293      	cmp	r3, r2
 8103f46:	d013      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	4a31      	ldr	r2, [pc, #196]	; (8104014 <DMA_CalcBaseAndBitshift+0x14c>)
 8103f4e:	4293      	cmp	r3, r2
 8103f50:	d00e      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	681b      	ldr	r3, [r3, #0]
 8103f56:	4a30      	ldr	r2, [pc, #192]	; (8104018 <DMA_CalcBaseAndBitshift+0x150>)
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d009      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	4a2e      	ldr	r2, [pc, #184]	; (810401c <DMA_CalcBaseAndBitshift+0x154>)
 8103f62:	4293      	cmp	r3, r2
 8103f64:	d004      	beq.n	8103f70 <DMA_CalcBaseAndBitshift+0xa8>
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	4a2d      	ldr	r2, [pc, #180]	; (8104020 <DMA_CalcBaseAndBitshift+0x158>)
 8103f6c:	4293      	cmp	r3, r2
 8103f6e:	d101      	bne.n	8103f74 <DMA_CalcBaseAndBitshift+0xac>
 8103f70:	2301      	movs	r3, #1
 8103f72:	e000      	b.n	8103f76 <DMA_CalcBaseAndBitshift+0xae>
 8103f74:	2300      	movs	r3, #0
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	d026      	beq.n	8103fc8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	681b      	ldr	r3, [r3, #0]
 8103f7e:	b2db      	uxtb	r3, r3
 8103f80:	3b10      	subs	r3, #16
 8103f82:	4a28      	ldr	r2, [pc, #160]	; (8104024 <DMA_CalcBaseAndBitshift+0x15c>)
 8103f84:	fba2 2303 	umull	r2, r3, r2, r3
 8103f88:	091b      	lsrs	r3, r3, #4
 8103f8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	f003 0307 	and.w	r3, r3, #7
 8103f92:	4a25      	ldr	r2, [pc, #148]	; (8104028 <DMA_CalcBaseAndBitshift+0x160>)
 8103f94:	5cd3      	ldrb	r3, [r2, r3]
 8103f96:	461a      	mov	r2, r3
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	2b03      	cmp	r3, #3
 8103fa0:	d909      	bls.n	8103fb6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	681b      	ldr	r3, [r3, #0]
 8103fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103faa:	f023 0303 	bic.w	r3, r3, #3
 8103fae:	1d1a      	adds	r2, r3, #4
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	659a      	str	r2, [r3, #88]	; 0x58
 8103fb4:	e00e      	b.n	8103fd4 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	681b      	ldr	r3, [r3, #0]
 8103fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103fbe:	f023 0303 	bic.w	r3, r3, #3
 8103fc2:	687a      	ldr	r2, [r7, #4]
 8103fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8103fc6:	e005      	b.n	8103fd4 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103fd8:	4618      	mov	r0, r3
 8103fda:	3714      	adds	r7, #20
 8103fdc:	46bd      	mov	sp, r7
 8103fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe2:	4770      	bx	lr
 8103fe4:	40020010 	.word	0x40020010
 8103fe8:	40020028 	.word	0x40020028
 8103fec:	40020040 	.word	0x40020040
 8103ff0:	40020058 	.word	0x40020058
 8103ff4:	40020070 	.word	0x40020070
 8103ff8:	40020088 	.word	0x40020088
 8103ffc:	400200a0 	.word	0x400200a0
 8104000:	400200b8 	.word	0x400200b8
 8104004:	40020410 	.word	0x40020410
 8104008:	40020428 	.word	0x40020428
 810400c:	40020440 	.word	0x40020440
 8104010:	40020458 	.word	0x40020458
 8104014:	40020470 	.word	0x40020470
 8104018:	40020488 	.word	0x40020488
 810401c:	400204a0 	.word	0x400204a0
 8104020:	400204b8 	.word	0x400204b8
 8104024:	aaaaaaab 	.word	0xaaaaaaab
 8104028:	0810e27c 	.word	0x0810e27c

0810402c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 810402c:	b480      	push	{r7}
 810402e:	b085      	sub	sp, #20
 8104030:	af00      	add	r7, sp, #0
 8104032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104034:	2300      	movs	r3, #0
 8104036:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	699b      	ldr	r3, [r3, #24]
 810403c:	2b00      	cmp	r3, #0
 810403e:	d120      	bne.n	8104082 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104044:	2b03      	cmp	r3, #3
 8104046:	d858      	bhi.n	81040fa <DMA_CheckFifoParam+0xce>
 8104048:	a201      	add	r2, pc, #4	; (adr r2, 8104050 <DMA_CheckFifoParam+0x24>)
 810404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810404e:	bf00      	nop
 8104050:	08104061 	.word	0x08104061
 8104054:	08104073 	.word	0x08104073
 8104058:	08104061 	.word	0x08104061
 810405c:	081040fb 	.word	0x081040fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104068:	2b00      	cmp	r3, #0
 810406a:	d048      	beq.n	81040fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810406c:	2301      	movs	r3, #1
 810406e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104070:	e045      	b.n	81040fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810407a:	d142      	bne.n	8104102 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810407c:	2301      	movs	r3, #1
 810407e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104080:	e03f      	b.n	8104102 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	699b      	ldr	r3, [r3, #24]
 8104086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810408a:	d123      	bne.n	81040d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104090:	2b03      	cmp	r3, #3
 8104092:	d838      	bhi.n	8104106 <DMA_CheckFifoParam+0xda>
 8104094:	a201      	add	r2, pc, #4	; (adr r2, 810409c <DMA_CheckFifoParam+0x70>)
 8104096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810409a:	bf00      	nop
 810409c:	081040ad 	.word	0x081040ad
 81040a0:	081040b3 	.word	0x081040b3
 81040a4:	081040ad 	.word	0x081040ad
 81040a8:	081040c5 	.word	0x081040c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81040ac:	2301      	movs	r3, #1
 81040ae:	73fb      	strb	r3, [r7, #15]
        break;
 81040b0:	e030      	b.n	8104114 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81040b2:	687b      	ldr	r3, [r7, #4]
 81040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81040ba:	2b00      	cmp	r3, #0
 81040bc:	d025      	beq.n	810410a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81040be:	2301      	movs	r3, #1
 81040c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81040c2:	e022      	b.n	810410a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81040cc:	d11f      	bne.n	810410e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81040ce:	2301      	movs	r3, #1
 81040d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81040d2:	e01c      	b.n	810410e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040d8:	2b02      	cmp	r3, #2
 81040da:	d902      	bls.n	81040e2 <DMA_CheckFifoParam+0xb6>
 81040dc:	2b03      	cmp	r3, #3
 81040de:	d003      	beq.n	81040e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81040e0:	e018      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81040e2:	2301      	movs	r3, #1
 81040e4:	73fb      	strb	r3, [r7, #15]
        break;
 81040e6:	e015      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81040f0:	2b00      	cmp	r3, #0
 81040f2:	d00e      	beq.n	8104112 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81040f4:	2301      	movs	r3, #1
 81040f6:	73fb      	strb	r3, [r7, #15]
    break;
 81040f8:	e00b      	b.n	8104112 <DMA_CheckFifoParam+0xe6>
        break;
 81040fa:	bf00      	nop
 81040fc:	e00a      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        break;
 81040fe:	bf00      	nop
 8104100:	e008      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        break;
 8104102:	bf00      	nop
 8104104:	e006      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        break;
 8104106:	bf00      	nop
 8104108:	e004      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        break;
 810410a:	bf00      	nop
 810410c:	e002      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
        break;
 810410e:	bf00      	nop
 8104110:	e000      	b.n	8104114 <DMA_CheckFifoParam+0xe8>
    break;
 8104112:	bf00      	nop
    }
  }

  return status;
 8104114:	7bfb      	ldrb	r3, [r7, #15]
}
 8104116:	4618      	mov	r0, r3
 8104118:	3714      	adds	r7, #20
 810411a:	46bd      	mov	sp, r7
 810411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104120:	4770      	bx	lr
 8104122:	bf00      	nop

08104124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104124:	b480      	push	{r7}
 8104126:	b085      	sub	sp, #20
 8104128:	af00      	add	r7, sp, #0
 810412a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a3a      	ldr	r2, [pc, #232]	; (8104220 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d022      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a38      	ldr	r2, [pc, #224]	; (8104224 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d01d      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	4a37      	ldr	r2, [pc, #220]	; (8104228 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810414c:	4293      	cmp	r3, r2
 810414e:	d018      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	4a35      	ldr	r2, [pc, #212]	; (810422c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104156:	4293      	cmp	r3, r2
 8104158:	d013      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	4a34      	ldr	r2, [pc, #208]	; (8104230 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104160:	4293      	cmp	r3, r2
 8104162:	d00e      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	4a32      	ldr	r2, [pc, #200]	; (8104234 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810416a:	4293      	cmp	r3, r2
 810416c:	d009      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	4a31      	ldr	r2, [pc, #196]	; (8104238 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104174:	4293      	cmp	r3, r2
 8104176:	d004      	beq.n	8104182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	4a2f      	ldr	r2, [pc, #188]	; (810423c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810417e:	4293      	cmp	r3, r2
 8104180:	d101      	bne.n	8104186 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104182:	2301      	movs	r3, #1
 8104184:	e000      	b.n	8104188 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104186:	2300      	movs	r3, #0
 8104188:	2b00      	cmp	r3, #0
 810418a:	d01c      	beq.n	81041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	b2db      	uxtb	r3, r3
 8104192:	3b08      	subs	r3, #8
 8104194:	4a2a      	ldr	r2, [pc, #168]	; (8104240 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104196:	fba2 2303 	umull	r2, r3, r2, r3
 810419a:	091b      	lsrs	r3, r3, #4
 810419c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81041a4:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81041a8:	009b      	lsls	r3, r3, #2
 81041aa:	461a      	mov	r2, r3
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	4a24      	ldr	r2, [pc, #144]	; (8104244 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81041b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	f003 031f 	and.w	r3, r3, #31
 81041bc:	2201      	movs	r2, #1
 81041be:	409a      	lsls	r2, r3
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81041c4:	e026      	b.n	8104214 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	b2db      	uxtb	r3, r3
 81041cc:	3b10      	subs	r3, #16
 81041ce:	4a1e      	ldr	r2, [pc, #120]	; (8104248 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81041d0:	fba2 2303 	umull	r2, r3, r2, r3
 81041d4:	091b      	lsrs	r3, r3, #4
 81041d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81041d8:	68bb      	ldr	r3, [r7, #8]
 81041da:	4a1c      	ldr	r2, [pc, #112]	; (810424c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81041dc:	4293      	cmp	r3, r2
 81041de:	d806      	bhi.n	81041ee <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81041e0:	68bb      	ldr	r3, [r7, #8]
 81041e2:	4a1b      	ldr	r2, [pc, #108]	; (8104250 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81041e4:	4293      	cmp	r3, r2
 81041e6:	d902      	bls.n	81041ee <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81041e8:	68fb      	ldr	r3, [r7, #12]
 81041ea:	3308      	adds	r3, #8
 81041ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81041ee:	68fb      	ldr	r3, [r7, #12]
 81041f0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81041f4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81041f8:	009b      	lsls	r3, r3, #2
 81041fa:	461a      	mov	r2, r3
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	4a14      	ldr	r2, [pc, #80]	; (8104254 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104204:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	f003 031f 	and.w	r3, r3, #31
 810420c:	2201      	movs	r2, #1
 810420e:	409a      	lsls	r2, r3
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104214:	bf00      	nop
 8104216:	3714      	adds	r7, #20
 8104218:	46bd      	mov	sp, r7
 810421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810421e:	4770      	bx	lr
 8104220:	58025408 	.word	0x58025408
 8104224:	5802541c 	.word	0x5802541c
 8104228:	58025430 	.word	0x58025430
 810422c:	58025444 	.word	0x58025444
 8104230:	58025458 	.word	0x58025458
 8104234:	5802546c 	.word	0x5802546c
 8104238:	58025480 	.word	0x58025480
 810423c:	58025494 	.word	0x58025494
 8104240:	cccccccd 	.word	0xcccccccd
 8104244:	58025880 	.word	0x58025880
 8104248:	aaaaaaab 	.word	0xaaaaaaab
 810424c:	400204b8 	.word	0x400204b8
 8104250:	4002040f 	.word	0x4002040f
 8104254:	40020880 	.word	0x40020880

08104258 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104258:	b480      	push	{r7}
 810425a:	b085      	sub	sp, #20
 810425c:	af00      	add	r7, sp, #0
 810425e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	685b      	ldr	r3, [r3, #4]
 8104264:	b2db      	uxtb	r3, r3
 8104266:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	2b00      	cmp	r3, #0
 810426c:	d04a      	beq.n	8104304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810426e:	68fb      	ldr	r3, [r7, #12]
 8104270:	2b08      	cmp	r3, #8
 8104272:	d847      	bhi.n	8104304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	4a25      	ldr	r2, [pc, #148]	; (8104310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810427a:	4293      	cmp	r3, r2
 810427c:	d022      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	4a24      	ldr	r2, [pc, #144]	; (8104314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104284:	4293      	cmp	r3, r2
 8104286:	d01d      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	4a22      	ldr	r2, [pc, #136]	; (8104318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d018      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a21      	ldr	r2, [pc, #132]	; (810431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d013      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	4a1f      	ldr	r2, [pc, #124]	; (8104320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81042a2:	4293      	cmp	r3, r2
 81042a4:	d00e      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	4a1e      	ldr	r2, [pc, #120]	; (8104324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81042ac:	4293      	cmp	r3, r2
 81042ae:	d009      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	4a1c      	ldr	r2, [pc, #112]	; (8104328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81042b6:	4293      	cmp	r3, r2
 81042b8:	d004      	beq.n	81042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a1b      	ldr	r2, [pc, #108]	; (810432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d101      	bne.n	81042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81042c4:	2301      	movs	r3, #1
 81042c6:	e000      	b.n	81042ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81042c8:	2300      	movs	r3, #0
 81042ca:	2b00      	cmp	r3, #0
 81042cc:	d00a      	beq.n	81042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81042ce:	68fa      	ldr	r2, [r7, #12]
 81042d0:	4b17      	ldr	r3, [pc, #92]	; (8104330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81042d2:	4413      	add	r3, r2
 81042d4:	009b      	lsls	r3, r3, #2
 81042d6:	461a      	mov	r2, r3
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	4a15      	ldr	r2, [pc, #84]	; (8104334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81042e0:	671a      	str	r2, [r3, #112]	; 0x70
 81042e2:	e009      	b.n	81042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81042e4:	68fa      	ldr	r2, [r7, #12]
 81042e6:	4b14      	ldr	r3, [pc, #80]	; (8104338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81042e8:	4413      	add	r3, r2
 81042ea:	009b      	lsls	r3, r3, #2
 81042ec:	461a      	mov	r2, r3
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	4a11      	ldr	r2, [pc, #68]	; (810433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81042f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	3b01      	subs	r3, #1
 81042fc:	2201      	movs	r2, #1
 81042fe:	409a      	lsls	r2, r3
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104304:	bf00      	nop
 8104306:	3714      	adds	r7, #20
 8104308:	46bd      	mov	sp, r7
 810430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810430e:	4770      	bx	lr
 8104310:	58025408 	.word	0x58025408
 8104314:	5802541c 	.word	0x5802541c
 8104318:	58025430 	.word	0x58025430
 810431c:	58025444 	.word	0x58025444
 8104320:	58025458 	.word	0x58025458
 8104324:	5802546c 	.word	0x5802546c
 8104328:	58025480 	.word	0x58025480
 810432c:	58025494 	.word	0x58025494
 8104330:	1600963f 	.word	0x1600963f
 8104334:	58025940 	.word	0x58025940
 8104338:	1000823f 	.word	0x1000823f
 810433c:	40020940 	.word	0x40020940

08104340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104340:	b480      	push	{r7}
 8104342:	b089      	sub	sp, #36	; 0x24
 8104344:	af00      	add	r7, sp, #0
 8104346:	6078      	str	r0, [r7, #4]
 8104348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810434a:	2300      	movs	r3, #0
 810434c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810434e:	4b89      	ldr	r3, [pc, #548]	; (8104574 <HAL_GPIO_Init+0x234>)
 8104350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104352:	e194      	b.n	810467e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104354:	683b      	ldr	r3, [r7, #0]
 8104356:	681a      	ldr	r2, [r3, #0]
 8104358:	2101      	movs	r1, #1
 810435a:	69fb      	ldr	r3, [r7, #28]
 810435c:	fa01 f303 	lsl.w	r3, r1, r3
 8104360:	4013      	ands	r3, r2
 8104362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104364:	693b      	ldr	r3, [r7, #16]
 8104366:	2b00      	cmp	r3, #0
 8104368:	f000 8186 	beq.w	8104678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810436c:	683b      	ldr	r3, [r7, #0]
 810436e:	685b      	ldr	r3, [r3, #4]
 8104370:	f003 0303 	and.w	r3, r3, #3
 8104374:	2b01      	cmp	r3, #1
 8104376:	d005      	beq.n	8104384 <HAL_GPIO_Init+0x44>
 8104378:	683b      	ldr	r3, [r7, #0]
 810437a:	685b      	ldr	r3, [r3, #4]
 810437c:	f003 0303 	and.w	r3, r3, #3
 8104380:	2b02      	cmp	r3, #2
 8104382:	d130      	bne.n	81043e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	689b      	ldr	r3, [r3, #8]
 8104388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810438a:	69fb      	ldr	r3, [r7, #28]
 810438c:	005b      	lsls	r3, r3, #1
 810438e:	2203      	movs	r2, #3
 8104390:	fa02 f303 	lsl.w	r3, r2, r3
 8104394:	43db      	mvns	r3, r3
 8104396:	69ba      	ldr	r2, [r7, #24]
 8104398:	4013      	ands	r3, r2
 810439a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810439c:	683b      	ldr	r3, [r7, #0]
 810439e:	68da      	ldr	r2, [r3, #12]
 81043a0:	69fb      	ldr	r3, [r7, #28]
 81043a2:	005b      	lsls	r3, r3, #1
 81043a4:	fa02 f303 	lsl.w	r3, r2, r3
 81043a8:	69ba      	ldr	r2, [r7, #24]
 81043aa:	4313      	orrs	r3, r2
 81043ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	69ba      	ldr	r2, [r7, #24]
 81043b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	685b      	ldr	r3, [r3, #4]
 81043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81043ba:	2201      	movs	r2, #1
 81043bc:	69fb      	ldr	r3, [r7, #28]
 81043be:	fa02 f303 	lsl.w	r3, r2, r3
 81043c2:	43db      	mvns	r3, r3
 81043c4:	69ba      	ldr	r2, [r7, #24]
 81043c6:	4013      	ands	r3, r2
 81043c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81043ca:	683b      	ldr	r3, [r7, #0]
 81043cc:	685b      	ldr	r3, [r3, #4]
 81043ce:	091b      	lsrs	r3, r3, #4
 81043d0:	f003 0201 	and.w	r2, r3, #1
 81043d4:	69fb      	ldr	r3, [r7, #28]
 81043d6:	fa02 f303 	lsl.w	r3, r2, r3
 81043da:	69ba      	ldr	r2, [r7, #24]
 81043dc:	4313      	orrs	r3, r2
 81043de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	69ba      	ldr	r2, [r7, #24]
 81043e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81043e6:	683b      	ldr	r3, [r7, #0]
 81043e8:	685b      	ldr	r3, [r3, #4]
 81043ea:	f003 0303 	and.w	r3, r3, #3
 81043ee:	2b03      	cmp	r3, #3
 81043f0:	d017      	beq.n	8104422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	68db      	ldr	r3, [r3, #12]
 81043f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81043f8:	69fb      	ldr	r3, [r7, #28]
 81043fa:	005b      	lsls	r3, r3, #1
 81043fc:	2203      	movs	r2, #3
 81043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8104402:	43db      	mvns	r3, r3
 8104404:	69ba      	ldr	r2, [r7, #24]
 8104406:	4013      	ands	r3, r2
 8104408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810440a:	683b      	ldr	r3, [r7, #0]
 810440c:	689a      	ldr	r2, [r3, #8]
 810440e:	69fb      	ldr	r3, [r7, #28]
 8104410:	005b      	lsls	r3, r3, #1
 8104412:	fa02 f303 	lsl.w	r3, r2, r3
 8104416:	69ba      	ldr	r2, [r7, #24]
 8104418:	4313      	orrs	r3, r2
 810441a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	69ba      	ldr	r2, [r7, #24]
 8104420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104422:	683b      	ldr	r3, [r7, #0]
 8104424:	685b      	ldr	r3, [r3, #4]
 8104426:	f003 0303 	and.w	r3, r3, #3
 810442a:	2b02      	cmp	r3, #2
 810442c:	d123      	bne.n	8104476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810442e:	69fb      	ldr	r3, [r7, #28]
 8104430:	08da      	lsrs	r2, r3, #3
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	3208      	adds	r2, #8
 8104436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810443c:	69fb      	ldr	r3, [r7, #28]
 810443e:	f003 0307 	and.w	r3, r3, #7
 8104442:	009b      	lsls	r3, r3, #2
 8104444:	220f      	movs	r2, #15
 8104446:	fa02 f303 	lsl.w	r3, r2, r3
 810444a:	43db      	mvns	r3, r3
 810444c:	69ba      	ldr	r2, [r7, #24]
 810444e:	4013      	ands	r3, r2
 8104450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104452:	683b      	ldr	r3, [r7, #0]
 8104454:	691a      	ldr	r2, [r3, #16]
 8104456:	69fb      	ldr	r3, [r7, #28]
 8104458:	f003 0307 	and.w	r3, r3, #7
 810445c:	009b      	lsls	r3, r3, #2
 810445e:	fa02 f303 	lsl.w	r3, r2, r3
 8104462:	69ba      	ldr	r2, [r7, #24]
 8104464:	4313      	orrs	r3, r2
 8104466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104468:	69fb      	ldr	r3, [r7, #28]
 810446a:	08da      	lsrs	r2, r3, #3
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	3208      	adds	r2, #8
 8104470:	69b9      	ldr	r1, [r7, #24]
 8104472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810447c:	69fb      	ldr	r3, [r7, #28]
 810447e:	005b      	lsls	r3, r3, #1
 8104480:	2203      	movs	r2, #3
 8104482:	fa02 f303 	lsl.w	r3, r2, r3
 8104486:	43db      	mvns	r3, r3
 8104488:	69ba      	ldr	r2, [r7, #24]
 810448a:	4013      	ands	r3, r2
 810448c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810448e:	683b      	ldr	r3, [r7, #0]
 8104490:	685b      	ldr	r3, [r3, #4]
 8104492:	f003 0203 	and.w	r2, r3, #3
 8104496:	69fb      	ldr	r3, [r7, #28]
 8104498:	005b      	lsls	r3, r3, #1
 810449a:	fa02 f303 	lsl.w	r3, r2, r3
 810449e:	69ba      	ldr	r2, [r7, #24]
 81044a0:	4313      	orrs	r3, r2
 81044a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	69ba      	ldr	r2, [r7, #24]
 81044a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81044aa:	683b      	ldr	r3, [r7, #0]
 81044ac:	685b      	ldr	r3, [r3, #4]
 81044ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81044b2:	2b00      	cmp	r3, #0
 81044b4:	f000 80e0 	beq.w	8104678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81044b8:	4b2f      	ldr	r3, [pc, #188]	; (8104578 <HAL_GPIO_Init+0x238>)
 81044ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81044be:	4a2e      	ldr	r2, [pc, #184]	; (8104578 <HAL_GPIO_Init+0x238>)
 81044c0:	f043 0302 	orr.w	r3, r3, #2
 81044c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81044c8:	4b2b      	ldr	r3, [pc, #172]	; (8104578 <HAL_GPIO_Init+0x238>)
 81044ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81044ce:	f003 0302 	and.w	r3, r3, #2
 81044d2:	60fb      	str	r3, [r7, #12]
 81044d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81044d6:	4a29      	ldr	r2, [pc, #164]	; (810457c <HAL_GPIO_Init+0x23c>)
 81044d8:	69fb      	ldr	r3, [r7, #28]
 81044da:	089b      	lsrs	r3, r3, #2
 81044dc:	3302      	adds	r3, #2
 81044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81044e4:	69fb      	ldr	r3, [r7, #28]
 81044e6:	f003 0303 	and.w	r3, r3, #3
 81044ea:	009b      	lsls	r3, r3, #2
 81044ec:	220f      	movs	r2, #15
 81044ee:	fa02 f303 	lsl.w	r3, r2, r3
 81044f2:	43db      	mvns	r3, r3
 81044f4:	69ba      	ldr	r2, [r7, #24]
 81044f6:	4013      	ands	r3, r2
 81044f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	4a20      	ldr	r2, [pc, #128]	; (8104580 <HAL_GPIO_Init+0x240>)
 81044fe:	4293      	cmp	r3, r2
 8104500:	d052      	beq.n	81045a8 <HAL_GPIO_Init+0x268>
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	4a1f      	ldr	r2, [pc, #124]	; (8104584 <HAL_GPIO_Init+0x244>)
 8104506:	4293      	cmp	r3, r2
 8104508:	d031      	beq.n	810456e <HAL_GPIO_Init+0x22e>
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	4a1e      	ldr	r2, [pc, #120]	; (8104588 <HAL_GPIO_Init+0x248>)
 810450e:	4293      	cmp	r3, r2
 8104510:	d02b      	beq.n	810456a <HAL_GPIO_Init+0x22a>
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	4a1d      	ldr	r2, [pc, #116]	; (810458c <HAL_GPIO_Init+0x24c>)
 8104516:	4293      	cmp	r3, r2
 8104518:	d025      	beq.n	8104566 <HAL_GPIO_Init+0x226>
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	4a1c      	ldr	r2, [pc, #112]	; (8104590 <HAL_GPIO_Init+0x250>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d01f      	beq.n	8104562 <HAL_GPIO_Init+0x222>
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	4a1b      	ldr	r2, [pc, #108]	; (8104594 <HAL_GPIO_Init+0x254>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d019      	beq.n	810455e <HAL_GPIO_Init+0x21e>
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	4a1a      	ldr	r2, [pc, #104]	; (8104598 <HAL_GPIO_Init+0x258>)
 810452e:	4293      	cmp	r3, r2
 8104530:	d013      	beq.n	810455a <HAL_GPIO_Init+0x21a>
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	4a19      	ldr	r2, [pc, #100]	; (810459c <HAL_GPIO_Init+0x25c>)
 8104536:	4293      	cmp	r3, r2
 8104538:	d00d      	beq.n	8104556 <HAL_GPIO_Init+0x216>
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	4a18      	ldr	r2, [pc, #96]	; (81045a0 <HAL_GPIO_Init+0x260>)
 810453e:	4293      	cmp	r3, r2
 8104540:	d007      	beq.n	8104552 <HAL_GPIO_Init+0x212>
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	4a17      	ldr	r2, [pc, #92]	; (81045a4 <HAL_GPIO_Init+0x264>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d101      	bne.n	810454e <HAL_GPIO_Init+0x20e>
 810454a:	2309      	movs	r3, #9
 810454c:	e02d      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 810454e:	230a      	movs	r3, #10
 8104550:	e02b      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 8104552:	2308      	movs	r3, #8
 8104554:	e029      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 8104556:	2307      	movs	r3, #7
 8104558:	e027      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 810455a:	2306      	movs	r3, #6
 810455c:	e025      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 810455e:	2305      	movs	r3, #5
 8104560:	e023      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 8104562:	2304      	movs	r3, #4
 8104564:	e021      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 8104566:	2303      	movs	r3, #3
 8104568:	e01f      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 810456a:	2302      	movs	r3, #2
 810456c:	e01d      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 810456e:	2301      	movs	r3, #1
 8104570:	e01b      	b.n	81045aa <HAL_GPIO_Init+0x26a>
 8104572:	bf00      	nop
 8104574:	580000c0 	.word	0x580000c0
 8104578:	58024400 	.word	0x58024400
 810457c:	58000400 	.word	0x58000400
 8104580:	58020000 	.word	0x58020000
 8104584:	58020400 	.word	0x58020400
 8104588:	58020800 	.word	0x58020800
 810458c:	58020c00 	.word	0x58020c00
 8104590:	58021000 	.word	0x58021000
 8104594:	58021400 	.word	0x58021400
 8104598:	58021800 	.word	0x58021800
 810459c:	58021c00 	.word	0x58021c00
 81045a0:	58022000 	.word	0x58022000
 81045a4:	58022400 	.word	0x58022400
 81045a8:	2300      	movs	r3, #0
 81045aa:	69fa      	ldr	r2, [r7, #28]
 81045ac:	f002 0203 	and.w	r2, r2, #3
 81045b0:	0092      	lsls	r2, r2, #2
 81045b2:	4093      	lsls	r3, r2
 81045b4:	69ba      	ldr	r2, [r7, #24]
 81045b6:	4313      	orrs	r3, r2
 81045b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81045ba:	4938      	ldr	r1, [pc, #224]	; (810469c <HAL_GPIO_Init+0x35c>)
 81045bc:	69fb      	ldr	r3, [r7, #28]
 81045be:	089b      	lsrs	r3, r3, #2
 81045c0:	3302      	adds	r3, #2
 81045c2:	69ba      	ldr	r2, [r7, #24]
 81045c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81045d0:	693b      	ldr	r3, [r7, #16]
 81045d2:	43db      	mvns	r3, r3
 81045d4:	69ba      	ldr	r2, [r7, #24]
 81045d6:	4013      	ands	r3, r2
 81045d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81045da:	683b      	ldr	r3, [r7, #0]
 81045dc:	685b      	ldr	r3, [r3, #4]
 81045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81045e2:	2b00      	cmp	r3, #0
 81045e4:	d003      	beq.n	81045ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81045e6:	69ba      	ldr	r2, [r7, #24]
 81045e8:	693b      	ldr	r3, [r7, #16]
 81045ea:	4313      	orrs	r3, r2
 81045ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81045ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81045f2:	69bb      	ldr	r3, [r7, #24]
 81045f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81045f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81045fa:	685b      	ldr	r3, [r3, #4]
 81045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81045fe:	693b      	ldr	r3, [r7, #16]
 8104600:	43db      	mvns	r3, r3
 8104602:	69ba      	ldr	r2, [r7, #24]
 8104604:	4013      	ands	r3, r2
 8104606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104608:	683b      	ldr	r3, [r7, #0]
 810460a:	685b      	ldr	r3, [r3, #4]
 810460c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104610:	2b00      	cmp	r3, #0
 8104612:	d003      	beq.n	810461c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104614:	69ba      	ldr	r2, [r7, #24]
 8104616:	693b      	ldr	r3, [r7, #16]
 8104618:	4313      	orrs	r3, r2
 810461a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810461c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104620:	69bb      	ldr	r3, [r7, #24]
 8104622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104624:	697b      	ldr	r3, [r7, #20]
 8104626:	685b      	ldr	r3, [r3, #4]
 8104628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810462a:	693b      	ldr	r3, [r7, #16]
 810462c:	43db      	mvns	r3, r3
 810462e:	69ba      	ldr	r2, [r7, #24]
 8104630:	4013      	ands	r3, r2
 8104632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104634:	683b      	ldr	r3, [r7, #0]
 8104636:	685b      	ldr	r3, [r3, #4]
 8104638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810463c:	2b00      	cmp	r3, #0
 810463e:	d003      	beq.n	8104648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104640:	69ba      	ldr	r2, [r7, #24]
 8104642:	693b      	ldr	r3, [r7, #16]
 8104644:	4313      	orrs	r3, r2
 8104646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104648:	697b      	ldr	r3, [r7, #20]
 810464a:	69ba      	ldr	r2, [r7, #24]
 810464c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810464e:	697b      	ldr	r3, [r7, #20]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104654:	693b      	ldr	r3, [r7, #16]
 8104656:	43db      	mvns	r3, r3
 8104658:	69ba      	ldr	r2, [r7, #24]
 810465a:	4013      	ands	r3, r2
 810465c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810465e:	683b      	ldr	r3, [r7, #0]
 8104660:	685b      	ldr	r3, [r3, #4]
 8104662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104666:	2b00      	cmp	r3, #0
 8104668:	d003      	beq.n	8104672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810466a:	69ba      	ldr	r2, [r7, #24]
 810466c:	693b      	ldr	r3, [r7, #16]
 810466e:	4313      	orrs	r3, r2
 8104670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104672:	697b      	ldr	r3, [r7, #20]
 8104674:	69ba      	ldr	r2, [r7, #24]
 8104676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104678:	69fb      	ldr	r3, [r7, #28]
 810467a:	3301      	adds	r3, #1
 810467c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810467e:	683b      	ldr	r3, [r7, #0]
 8104680:	681a      	ldr	r2, [r3, #0]
 8104682:	69fb      	ldr	r3, [r7, #28]
 8104684:	fa22 f303 	lsr.w	r3, r2, r3
 8104688:	2b00      	cmp	r3, #0
 810468a:	f47f ae63 	bne.w	8104354 <HAL_GPIO_Init+0x14>
  }
}
 810468e:	bf00      	nop
 8104690:	bf00      	nop
 8104692:	3724      	adds	r7, #36	; 0x24
 8104694:	46bd      	mov	sp, r7
 8104696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810469a:	4770      	bx	lr
 810469c:	58000400 	.word	0x58000400

081046a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81046a0:	b480      	push	{r7}
 81046a2:	b083      	sub	sp, #12
 81046a4:	af00      	add	r7, sp, #0
 81046a6:	6078      	str	r0, [r7, #4]
 81046a8:	460b      	mov	r3, r1
 81046aa:	807b      	strh	r3, [r7, #2]
 81046ac:	4613      	mov	r3, r2
 81046ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81046b0:	787b      	ldrb	r3, [r7, #1]
 81046b2:	2b00      	cmp	r3, #0
 81046b4:	d003      	beq.n	81046be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81046b6:	887a      	ldrh	r2, [r7, #2]
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81046bc:	e003      	b.n	81046c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81046be:	887b      	ldrh	r3, [r7, #2]
 81046c0:	041a      	lsls	r2, r3, #16
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	619a      	str	r2, [r3, #24]
}
 81046c6:	bf00      	nop
 81046c8:	370c      	adds	r7, #12
 81046ca:	46bd      	mov	sp, r7
 81046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046d0:	4770      	bx	lr

081046d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81046d2:	b580      	push	{r7, lr}
 81046d4:	b082      	sub	sp, #8
 81046d6:	af00      	add	r7, sp, #0
 81046d8:	4603      	mov	r3, r0
 81046da:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81046dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81046e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81046e4:	88fb      	ldrh	r3, [r7, #6]
 81046e6:	4013      	ands	r3, r2
 81046e8:	2b00      	cmp	r3, #0
 81046ea:	d008      	beq.n	81046fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81046f0:	88fb      	ldrh	r3, [r7, #6]
 81046f2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81046f6:	88fb      	ldrh	r3, [r7, #6]
 81046f8:	4618      	mov	r0, r3
 81046fa:	f000 f804 	bl	8104706 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81046fe:	bf00      	nop
 8104700:	3708      	adds	r7, #8
 8104702:	46bd      	mov	sp, r7
 8104704:	bd80      	pop	{r7, pc}

08104706 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8104706:	b480      	push	{r7}
 8104708:	b083      	sub	sp, #12
 810470a:	af00      	add	r7, sp, #0
 810470c:	4603      	mov	r3, r0
 810470e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8104710:	bf00      	nop
 8104712:	370c      	adds	r7, #12
 8104714:	46bd      	mov	sp, r7
 8104716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810471a:	4770      	bx	lr

0810471c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810471c:	b480      	push	{r7}
 810471e:	b083      	sub	sp, #12
 8104720:	af00      	add	r7, sp, #0
 8104722:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104724:	4b05      	ldr	r3, [pc, #20]	; (810473c <HAL_HSEM_ActivateNotification+0x20>)
 8104726:	681a      	ldr	r2, [r3, #0]
 8104728:	4904      	ldr	r1, [pc, #16]	; (810473c <HAL_HSEM_ActivateNotification+0x20>)
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	4313      	orrs	r3, r2
 810472e:	600b      	str	r3, [r1, #0]
#endif
}
 8104730:	bf00      	nop
 8104732:	370c      	adds	r7, #12
 8104734:	46bd      	mov	sp, r7
 8104736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810473a:	4770      	bx	lr
 810473c:	58026510 	.word	0x58026510

08104740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104740:	b580      	push	{r7, lr}
 8104742:	b082      	sub	sp, #8
 8104744:	af00      	add	r7, sp, #0
 8104746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	2b00      	cmp	r3, #0
 810474c:	d101      	bne.n	8104752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810474e:	2301      	movs	r3, #1
 8104750:	e081      	b.n	8104856 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104752:	687b      	ldr	r3, [r7, #4]
 8104754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104758:	b2db      	uxtb	r3, r3
 810475a:	2b00      	cmp	r3, #0
 810475c:	d106      	bne.n	810476c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	2200      	movs	r2, #0
 8104762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104766:	6878      	ldr	r0, [r7, #4]
 8104768:	f7fd fb86 	bl	8101e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	2224      	movs	r2, #36	; 0x24
 8104770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	681b      	ldr	r3, [r3, #0]
 8104778:	681a      	ldr	r2, [r3, #0]
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	f022 0201 	bic.w	r2, r2, #1
 8104782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	685a      	ldr	r2, [r3, #4]
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	689a      	ldr	r2, [r3, #8]
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81047a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	68db      	ldr	r3, [r3, #12]
 81047a6:	2b01      	cmp	r3, #1
 81047a8:	d107      	bne.n	81047ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	689a      	ldr	r2, [r3, #8]
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81047b6:	609a      	str	r2, [r3, #8]
 81047b8:	e006      	b.n	81047c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	689a      	ldr	r2, [r3, #8]
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81047c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	68db      	ldr	r3, [r3, #12]
 81047cc:	2b02      	cmp	r3, #2
 81047ce:	d104      	bne.n	81047da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	681b      	ldr	r3, [r3, #0]
 81047d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81047d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	681b      	ldr	r3, [r3, #0]
 81047de:	685b      	ldr	r3, [r3, #4]
 81047e0:	687a      	ldr	r2, [r7, #4]
 81047e2:	6812      	ldr	r2, [r2, #0]
 81047e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81047ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	68da      	ldr	r2, [r3, #12]
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	681b      	ldr	r3, [r3, #0]
 81047f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81047fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	691a      	ldr	r2, [r3, #16]
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	695b      	ldr	r3, [r3, #20]
 8104806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	699b      	ldr	r3, [r3, #24]
 810480e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	430a      	orrs	r2, r1
 8104816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	69d9      	ldr	r1, [r3, #28]
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	6a1a      	ldr	r2, [r3, #32]
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	430a      	orrs	r2, r1
 8104826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	681a      	ldr	r2, [r3, #0]
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f042 0201 	orr.w	r2, r2, #1
 8104836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	2200      	movs	r2, #0
 810483c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	2220      	movs	r2, #32
 8104842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	2200      	movs	r2, #0
 810484a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	2200      	movs	r2, #0
 8104850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104854:	2300      	movs	r3, #0
}
 8104856:	4618      	mov	r0, r3
 8104858:	3708      	adds	r7, #8
 810485a:	46bd      	mov	sp, r7
 810485c:	bd80      	pop	{r7, pc}
	...

08104860 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104860:	b580      	push	{r7, lr}
 8104862:	b088      	sub	sp, #32
 8104864:	af02      	add	r7, sp, #8
 8104866:	60f8      	str	r0, [r7, #12]
 8104868:	4608      	mov	r0, r1
 810486a:	4611      	mov	r1, r2
 810486c:	461a      	mov	r2, r3
 810486e:	4603      	mov	r3, r0
 8104870:	817b      	strh	r3, [r7, #10]
 8104872:	460b      	mov	r3, r1
 8104874:	813b      	strh	r3, [r7, #8]
 8104876:	4613      	mov	r3, r2
 8104878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104880:	b2db      	uxtb	r3, r3
 8104882:	2b20      	cmp	r3, #32
 8104884:	f040 80f9 	bne.w	8104a7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104888:	6a3b      	ldr	r3, [r7, #32]
 810488a:	2b00      	cmp	r3, #0
 810488c:	d002      	beq.n	8104894 <HAL_I2C_Mem_Write+0x34>
 810488e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104890:	2b00      	cmp	r3, #0
 8104892:	d105      	bne.n	81048a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104894:	68fb      	ldr	r3, [r7, #12]
 8104896:	f44f 7200 	mov.w	r2, #512	; 0x200
 810489a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810489c:	2301      	movs	r3, #1
 810489e:	e0ed      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81048a6:	2b01      	cmp	r3, #1
 81048a8:	d101      	bne.n	81048ae <HAL_I2C_Mem_Write+0x4e>
 81048aa:	2302      	movs	r3, #2
 81048ac:	e0e6      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
 81048ae:	68fb      	ldr	r3, [r7, #12]
 81048b0:	2201      	movs	r2, #1
 81048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81048b6:	f7fd ff53 	bl	8102760 <HAL_GetTick>
 81048ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81048bc:	697b      	ldr	r3, [r7, #20]
 81048be:	9300      	str	r3, [sp, #0]
 81048c0:	2319      	movs	r3, #25
 81048c2:	2201      	movs	r2, #1
 81048c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81048c8:	68f8      	ldr	r0, [r7, #12]
 81048ca:	f000 fbcb 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 81048ce:	4603      	mov	r3, r0
 81048d0:	2b00      	cmp	r3, #0
 81048d2:	d001      	beq.n	81048d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81048d4:	2301      	movs	r3, #1
 81048d6:	e0d1      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81048d8:	68fb      	ldr	r3, [r7, #12]
 81048da:	2221      	movs	r2, #33	; 0x21
 81048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81048e0:	68fb      	ldr	r3, [r7, #12]
 81048e2:	2240      	movs	r2, #64	; 0x40
 81048e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81048e8:	68fb      	ldr	r3, [r7, #12]
 81048ea:	2200      	movs	r2, #0
 81048ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81048ee:	68fb      	ldr	r3, [r7, #12]
 81048f0:	6a3a      	ldr	r2, [r7, #32]
 81048f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81048f4:	68fb      	ldr	r3, [r7, #12]
 81048f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81048f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81048fa:	68fb      	ldr	r3, [r7, #12]
 81048fc:	2200      	movs	r2, #0
 81048fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104900:	88f8      	ldrh	r0, [r7, #6]
 8104902:	893a      	ldrh	r2, [r7, #8]
 8104904:	8979      	ldrh	r1, [r7, #10]
 8104906:	697b      	ldr	r3, [r7, #20]
 8104908:	9301      	str	r3, [sp, #4]
 810490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810490c:	9300      	str	r3, [sp, #0]
 810490e:	4603      	mov	r3, r0
 8104910:	68f8      	ldr	r0, [r7, #12]
 8104912:	f000 fadb 	bl	8104ecc <I2C_RequestMemoryWrite>
 8104916:	4603      	mov	r3, r0
 8104918:	2b00      	cmp	r3, #0
 810491a:	d005      	beq.n	8104928 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810491c:	68fb      	ldr	r3, [r7, #12]
 810491e:	2200      	movs	r2, #0
 8104920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104924:	2301      	movs	r3, #1
 8104926:	e0a9      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810492c:	b29b      	uxth	r3, r3
 810492e:	2bff      	cmp	r3, #255	; 0xff
 8104930:	d90e      	bls.n	8104950 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104932:	68fb      	ldr	r3, [r7, #12]
 8104934:	22ff      	movs	r2, #255	; 0xff
 8104936:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104938:	68fb      	ldr	r3, [r7, #12]
 810493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810493c:	b2da      	uxtb	r2, r3
 810493e:	8979      	ldrh	r1, [r7, #10]
 8104940:	2300      	movs	r3, #0
 8104942:	9300      	str	r3, [sp, #0]
 8104944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104948:	68f8      	ldr	r0, [r7, #12]
 810494a:	f000 fd33 	bl	81053b4 <I2C_TransferConfig>
 810494e:	e00f      	b.n	8104970 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104950:	68fb      	ldr	r3, [r7, #12]
 8104952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104954:	b29a      	uxth	r2, r3
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810495a:	68fb      	ldr	r3, [r7, #12]
 810495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810495e:	b2da      	uxtb	r2, r3
 8104960:	8979      	ldrh	r1, [r7, #10]
 8104962:	2300      	movs	r3, #0
 8104964:	9300      	str	r3, [sp, #0]
 8104966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810496a:	68f8      	ldr	r0, [r7, #12]
 810496c:	f000 fd22 	bl	81053b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104970:	697a      	ldr	r2, [r7, #20]
 8104972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104974:	68f8      	ldr	r0, [r7, #12]
 8104976:	f000 fbb5 	bl	81050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 810497a:	4603      	mov	r3, r0
 810497c:	2b00      	cmp	r3, #0
 810497e:	d001      	beq.n	8104984 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8104980:	2301      	movs	r3, #1
 8104982:	e07b      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104988:	781a      	ldrb	r2, [r3, #0]
 810498a:	68fb      	ldr	r3, [r7, #12]
 810498c:	681b      	ldr	r3, [r3, #0]
 810498e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104990:	68fb      	ldr	r3, [r7, #12]
 8104992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104994:	1c5a      	adds	r2, r3, #1
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810499a:	68fb      	ldr	r3, [r7, #12]
 810499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810499e:	b29b      	uxth	r3, r3
 81049a0:	3b01      	subs	r3, #1
 81049a2:	b29a      	uxth	r2, r3
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049ac:	3b01      	subs	r3, #1
 81049ae:	b29a      	uxth	r2, r3
 81049b0:	68fb      	ldr	r3, [r7, #12]
 81049b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81049b4:	68fb      	ldr	r3, [r7, #12]
 81049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049b8:	b29b      	uxth	r3, r3
 81049ba:	2b00      	cmp	r3, #0
 81049bc:	d034      	beq.n	8104a28 <HAL_I2C_Mem_Write+0x1c8>
 81049be:	68fb      	ldr	r3, [r7, #12]
 81049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	d130      	bne.n	8104a28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81049c6:	697b      	ldr	r3, [r7, #20]
 81049c8:	9300      	str	r3, [sp, #0]
 81049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81049cc:	2200      	movs	r2, #0
 81049ce:	2180      	movs	r1, #128	; 0x80
 81049d0:	68f8      	ldr	r0, [r7, #12]
 81049d2:	f000 fb47 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 81049d6:	4603      	mov	r3, r0
 81049d8:	2b00      	cmp	r3, #0
 81049da:	d001      	beq.n	81049e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81049dc:	2301      	movs	r3, #1
 81049de:	e04d      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049e4:	b29b      	uxth	r3, r3
 81049e6:	2bff      	cmp	r3, #255	; 0xff
 81049e8:	d90e      	bls.n	8104a08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81049ea:	68fb      	ldr	r3, [r7, #12]
 81049ec:	22ff      	movs	r2, #255	; 0xff
 81049ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81049f0:	68fb      	ldr	r3, [r7, #12]
 81049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049f4:	b2da      	uxtb	r2, r3
 81049f6:	8979      	ldrh	r1, [r7, #10]
 81049f8:	2300      	movs	r3, #0
 81049fa:	9300      	str	r3, [sp, #0]
 81049fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104a00:	68f8      	ldr	r0, [r7, #12]
 8104a02:	f000 fcd7 	bl	81053b4 <I2C_TransferConfig>
 8104a06:	e00f      	b.n	8104a28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104a08:	68fb      	ldr	r3, [r7, #12]
 8104a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a0c:	b29a      	uxth	r2, r3
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a16:	b2da      	uxtb	r2, r3
 8104a18:	8979      	ldrh	r1, [r7, #10]
 8104a1a:	2300      	movs	r3, #0
 8104a1c:	9300      	str	r3, [sp, #0]
 8104a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104a22:	68f8      	ldr	r0, [r7, #12]
 8104a24:	f000 fcc6 	bl	81053b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a2c:	b29b      	uxth	r3, r3
 8104a2e:	2b00      	cmp	r3, #0
 8104a30:	d19e      	bne.n	8104970 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104a32:	697a      	ldr	r2, [r7, #20]
 8104a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104a36:	68f8      	ldr	r0, [r7, #12]
 8104a38:	f000 fb94 	bl	8105164 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104a3c:	4603      	mov	r3, r0
 8104a3e:	2b00      	cmp	r3, #0
 8104a40:	d001      	beq.n	8104a46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104a42:	2301      	movs	r3, #1
 8104a44:	e01a      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	2220      	movs	r2, #32
 8104a4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104a4e:	68fb      	ldr	r3, [r7, #12]
 8104a50:	681b      	ldr	r3, [r3, #0]
 8104a52:	6859      	ldr	r1, [r3, #4]
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	681a      	ldr	r2, [r3, #0]
 8104a58:	4b0a      	ldr	r3, [pc, #40]	; (8104a84 <HAL_I2C_Mem_Write+0x224>)
 8104a5a:	400b      	ands	r3, r1
 8104a5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104a5e:	68fb      	ldr	r3, [r7, #12]
 8104a60:	2220      	movs	r2, #32
 8104a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	2200      	movs	r2, #0
 8104a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	2200      	movs	r2, #0
 8104a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104a76:	2300      	movs	r3, #0
 8104a78:	e000      	b.n	8104a7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104a7a:	2302      	movs	r3, #2
  }
}
 8104a7c:	4618      	mov	r0, r3
 8104a7e:	3718      	adds	r7, #24
 8104a80:	46bd      	mov	sp, r7
 8104a82:	bd80      	pop	{r7, pc}
 8104a84:	fe00e800 	.word	0xfe00e800

08104a88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104a88:	b580      	push	{r7, lr}
 8104a8a:	b088      	sub	sp, #32
 8104a8c:	af02      	add	r7, sp, #8
 8104a8e:	60f8      	str	r0, [r7, #12]
 8104a90:	4608      	mov	r0, r1
 8104a92:	4611      	mov	r1, r2
 8104a94:	461a      	mov	r2, r3
 8104a96:	4603      	mov	r3, r0
 8104a98:	817b      	strh	r3, [r7, #10]
 8104a9a:	460b      	mov	r3, r1
 8104a9c:	813b      	strh	r3, [r7, #8]
 8104a9e:	4613      	mov	r3, r2
 8104aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104aa2:	68fb      	ldr	r3, [r7, #12]
 8104aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104aa8:	b2db      	uxtb	r3, r3
 8104aaa:	2b20      	cmp	r3, #32
 8104aac:	f040 80fd 	bne.w	8104caa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8104ab0:	6a3b      	ldr	r3, [r7, #32]
 8104ab2:	2b00      	cmp	r3, #0
 8104ab4:	d002      	beq.n	8104abc <HAL_I2C_Mem_Read+0x34>
 8104ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104ab8:	2b00      	cmp	r3, #0
 8104aba:	d105      	bne.n	8104ac8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104abc:	68fb      	ldr	r3, [r7, #12]
 8104abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104ac2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104ac4:	2301      	movs	r3, #1
 8104ac6:	e0f1      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104ace:	2b01      	cmp	r3, #1
 8104ad0:	d101      	bne.n	8104ad6 <HAL_I2C_Mem_Read+0x4e>
 8104ad2:	2302      	movs	r3, #2
 8104ad4:	e0ea      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
 8104ad6:	68fb      	ldr	r3, [r7, #12]
 8104ad8:	2201      	movs	r2, #1
 8104ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104ade:	f7fd fe3f 	bl	8102760 <HAL_GetTick>
 8104ae2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104ae4:	697b      	ldr	r3, [r7, #20]
 8104ae6:	9300      	str	r3, [sp, #0]
 8104ae8:	2319      	movs	r3, #25
 8104aea:	2201      	movs	r2, #1
 8104aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104af0:	68f8      	ldr	r0, [r7, #12]
 8104af2:	f000 fab7 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104af6:	4603      	mov	r3, r0
 8104af8:	2b00      	cmp	r3, #0
 8104afa:	d001      	beq.n	8104b00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8104afc:	2301      	movs	r3, #1
 8104afe:	e0d5      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	2222      	movs	r2, #34	; 0x22
 8104b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104b08:	68fb      	ldr	r3, [r7, #12]
 8104b0a:	2240      	movs	r2, #64	; 0x40
 8104b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	2200      	movs	r2, #0
 8104b14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	6a3a      	ldr	r2, [r7, #32]
 8104b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104b1c:	68fb      	ldr	r3, [r7, #12]
 8104b1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104b22:	68fb      	ldr	r3, [r7, #12]
 8104b24:	2200      	movs	r2, #0
 8104b26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104b28:	88f8      	ldrh	r0, [r7, #6]
 8104b2a:	893a      	ldrh	r2, [r7, #8]
 8104b2c:	8979      	ldrh	r1, [r7, #10]
 8104b2e:	697b      	ldr	r3, [r7, #20]
 8104b30:	9301      	str	r3, [sp, #4]
 8104b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b34:	9300      	str	r3, [sp, #0]
 8104b36:	4603      	mov	r3, r0
 8104b38:	68f8      	ldr	r0, [r7, #12]
 8104b3a:	f000 fa1b 	bl	8104f74 <I2C_RequestMemoryRead>
 8104b3e:	4603      	mov	r3, r0
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d005      	beq.n	8104b50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	2200      	movs	r2, #0
 8104b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104b4c:	2301      	movs	r3, #1
 8104b4e:	e0ad      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104b54:	b29b      	uxth	r3, r3
 8104b56:	2bff      	cmp	r3, #255	; 0xff
 8104b58:	d90e      	bls.n	8104b78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104b5a:	68fb      	ldr	r3, [r7, #12]
 8104b5c:	22ff      	movs	r2, #255	; 0xff
 8104b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104b60:	68fb      	ldr	r3, [r7, #12]
 8104b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104b64:	b2da      	uxtb	r2, r3
 8104b66:	8979      	ldrh	r1, [r7, #10]
 8104b68:	4b52      	ldr	r3, [pc, #328]	; (8104cb4 <HAL_I2C_Mem_Read+0x22c>)
 8104b6a:	9300      	str	r3, [sp, #0]
 8104b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104b70:	68f8      	ldr	r0, [r7, #12]
 8104b72:	f000 fc1f 	bl	81053b4 <I2C_TransferConfig>
 8104b76:	e00f      	b.n	8104b98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104b78:	68fb      	ldr	r3, [r7, #12]
 8104b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104b7c:	b29a      	uxth	r2, r3
 8104b7e:	68fb      	ldr	r3, [r7, #12]
 8104b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104b82:	68fb      	ldr	r3, [r7, #12]
 8104b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104b86:	b2da      	uxtb	r2, r3
 8104b88:	8979      	ldrh	r1, [r7, #10]
 8104b8a:	4b4a      	ldr	r3, [pc, #296]	; (8104cb4 <HAL_I2C_Mem_Read+0x22c>)
 8104b8c:	9300      	str	r3, [sp, #0]
 8104b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104b92:	68f8      	ldr	r0, [r7, #12]
 8104b94:	f000 fc0e 	bl	81053b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104b98:	697b      	ldr	r3, [r7, #20]
 8104b9a:	9300      	str	r3, [sp, #0]
 8104b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b9e:	2200      	movs	r2, #0
 8104ba0:	2104      	movs	r1, #4
 8104ba2:	68f8      	ldr	r0, [r7, #12]
 8104ba4:	f000 fa5e 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104ba8:	4603      	mov	r3, r0
 8104baa:	2b00      	cmp	r3, #0
 8104bac:	d001      	beq.n	8104bb2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8104bae:	2301      	movs	r3, #1
 8104bb0:	e07c      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104bb2:	68fb      	ldr	r3, [r7, #12]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104bb8:	68fb      	ldr	r3, [r7, #12]
 8104bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104bbc:	b2d2      	uxtb	r2, r2
 8104bbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104bc4:	1c5a      	adds	r2, r3, #1
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104bca:	68fb      	ldr	r3, [r7, #12]
 8104bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bce:	3b01      	subs	r3, #1
 8104bd0:	b29a      	uxth	r2, r3
 8104bd2:	68fb      	ldr	r3, [r7, #12]
 8104bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104bd6:	68fb      	ldr	r3, [r7, #12]
 8104bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bda:	b29b      	uxth	r3, r3
 8104bdc:	3b01      	subs	r3, #1
 8104bde:	b29a      	uxth	r2, r3
 8104be0:	68fb      	ldr	r3, [r7, #12]
 8104be2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104be8:	b29b      	uxth	r3, r3
 8104bea:	2b00      	cmp	r3, #0
 8104bec:	d034      	beq.n	8104c58 <HAL_I2C_Mem_Read+0x1d0>
 8104bee:	68fb      	ldr	r3, [r7, #12]
 8104bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bf2:	2b00      	cmp	r3, #0
 8104bf4:	d130      	bne.n	8104c58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104bf6:	697b      	ldr	r3, [r7, #20]
 8104bf8:	9300      	str	r3, [sp, #0]
 8104bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104bfc:	2200      	movs	r2, #0
 8104bfe:	2180      	movs	r1, #128	; 0x80
 8104c00:	68f8      	ldr	r0, [r7, #12]
 8104c02:	f000 fa2f 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104c06:	4603      	mov	r3, r0
 8104c08:	2b00      	cmp	r3, #0
 8104c0a:	d001      	beq.n	8104c10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8104c0c:	2301      	movs	r3, #1
 8104c0e:	e04d      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c10:	68fb      	ldr	r3, [r7, #12]
 8104c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c14:	b29b      	uxth	r3, r3
 8104c16:	2bff      	cmp	r3, #255	; 0xff
 8104c18:	d90e      	bls.n	8104c38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	22ff      	movs	r2, #255	; 0xff
 8104c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c24:	b2da      	uxtb	r2, r3
 8104c26:	8979      	ldrh	r1, [r7, #10]
 8104c28:	2300      	movs	r3, #0
 8104c2a:	9300      	str	r3, [sp, #0]
 8104c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104c30:	68f8      	ldr	r0, [r7, #12]
 8104c32:	f000 fbbf 	bl	81053b4 <I2C_TransferConfig>
 8104c36:	e00f      	b.n	8104c58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c3c:	b29a      	uxth	r2, r3
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104c42:	68fb      	ldr	r3, [r7, #12]
 8104c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c46:	b2da      	uxtb	r2, r3
 8104c48:	8979      	ldrh	r1, [r7, #10]
 8104c4a:	2300      	movs	r3, #0
 8104c4c:	9300      	str	r3, [sp, #0]
 8104c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104c52:	68f8      	ldr	r0, [r7, #12]
 8104c54:	f000 fbae 	bl	81053b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104c58:	68fb      	ldr	r3, [r7, #12]
 8104c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c5c:	b29b      	uxth	r3, r3
 8104c5e:	2b00      	cmp	r3, #0
 8104c60:	d19a      	bne.n	8104b98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104c62:	697a      	ldr	r2, [r7, #20]
 8104c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104c66:	68f8      	ldr	r0, [r7, #12]
 8104c68:	f000 fa7c 	bl	8105164 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104c6c:	4603      	mov	r3, r0
 8104c6e:	2b00      	cmp	r3, #0
 8104c70:	d001      	beq.n	8104c76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8104c72:	2301      	movs	r3, #1
 8104c74:	e01a      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104c76:	68fb      	ldr	r3, [r7, #12]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	2220      	movs	r2, #32
 8104c7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104c7e:	68fb      	ldr	r3, [r7, #12]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	6859      	ldr	r1, [r3, #4]
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	681a      	ldr	r2, [r3, #0]
 8104c88:	4b0b      	ldr	r3, [pc, #44]	; (8104cb8 <HAL_I2C_Mem_Read+0x230>)
 8104c8a:	400b      	ands	r3, r1
 8104c8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104c8e:	68fb      	ldr	r3, [r7, #12]
 8104c90:	2220      	movs	r2, #32
 8104c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104c96:	68fb      	ldr	r3, [r7, #12]
 8104c98:	2200      	movs	r2, #0
 8104c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104c9e:	68fb      	ldr	r3, [r7, #12]
 8104ca0:	2200      	movs	r2, #0
 8104ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104ca6:	2300      	movs	r3, #0
 8104ca8:	e000      	b.n	8104cac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104caa:	2302      	movs	r3, #2
  }
}
 8104cac:	4618      	mov	r0, r3
 8104cae:	3718      	adds	r7, #24
 8104cb0:	46bd      	mov	sp, r7
 8104cb2:	bd80      	pop	{r7, pc}
 8104cb4:	80002400 	.word	0x80002400
 8104cb8:	fe00e800 	.word	0xfe00e800

08104cbc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8104cbc:	b580      	push	{r7, lr}
 8104cbe:	b08a      	sub	sp, #40	; 0x28
 8104cc0:	af02      	add	r7, sp, #8
 8104cc2:	60f8      	str	r0, [r7, #12]
 8104cc4:	607a      	str	r2, [r7, #4]
 8104cc6:	603b      	str	r3, [r7, #0]
 8104cc8:	460b      	mov	r3, r1
 8104cca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8104ccc:	2300      	movs	r3, #0
 8104cce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104cd0:	68fb      	ldr	r3, [r7, #12]
 8104cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104cd6:	b2db      	uxtb	r3, r3
 8104cd8:	2b20      	cmp	r3, #32
 8104cda:	f040 80f1 	bne.w	8104ec0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104cde:	68fb      	ldr	r3, [r7, #12]
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	699b      	ldr	r3, [r3, #24]
 8104ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104cec:	d101      	bne.n	8104cf2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8104cee:	2302      	movs	r3, #2
 8104cf0:	e0e7      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104cf2:	68fb      	ldr	r3, [r7, #12]
 8104cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104cf8:	2b01      	cmp	r3, #1
 8104cfa:	d101      	bne.n	8104d00 <HAL_I2C_IsDeviceReady+0x44>
 8104cfc:	2302      	movs	r3, #2
 8104cfe:	e0e0      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	2201      	movs	r2, #1
 8104d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	2224      	movs	r2, #36	; 0x24
 8104d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	2200      	movs	r2, #0
 8104d14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8104d16:	68fb      	ldr	r3, [r7, #12]
 8104d18:	68db      	ldr	r3, [r3, #12]
 8104d1a:	2b01      	cmp	r3, #1
 8104d1c:	d107      	bne.n	8104d2e <HAL_I2C_IsDeviceReady+0x72>
 8104d1e:	897b      	ldrh	r3, [r7, #10]
 8104d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104d2c:	e004      	b.n	8104d38 <HAL_I2C_IsDeviceReady+0x7c>
 8104d2e:	897b      	ldrh	r3, [r7, #10]
 8104d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104d34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8104d38:	68fa      	ldr	r2, [r7, #12]
 8104d3a:	6812      	ldr	r2, [r2, #0]
 8104d3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8104d3e:	f7fd fd0f 	bl	8102760 <HAL_GetTick>
 8104d42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104d44:	68fb      	ldr	r3, [r7, #12]
 8104d46:	681b      	ldr	r3, [r3, #0]
 8104d48:	699b      	ldr	r3, [r3, #24]
 8104d4a:	f003 0320 	and.w	r3, r3, #32
 8104d4e:	2b20      	cmp	r3, #32
 8104d50:	bf0c      	ite	eq
 8104d52:	2301      	moveq	r3, #1
 8104d54:	2300      	movne	r3, #0
 8104d56:	b2db      	uxtb	r3, r3
 8104d58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104d5a:	68fb      	ldr	r3, [r7, #12]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	699b      	ldr	r3, [r3, #24]
 8104d60:	f003 0310 	and.w	r3, r3, #16
 8104d64:	2b10      	cmp	r3, #16
 8104d66:	bf0c      	ite	eq
 8104d68:	2301      	moveq	r3, #1
 8104d6a:	2300      	movne	r3, #0
 8104d6c:	b2db      	uxtb	r3, r3
 8104d6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104d70:	e034      	b.n	8104ddc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8104d72:	683b      	ldr	r3, [r7, #0]
 8104d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d78:	d01a      	beq.n	8104db0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104d7a:	f7fd fcf1 	bl	8102760 <HAL_GetTick>
 8104d7e:	4602      	mov	r2, r0
 8104d80:	69bb      	ldr	r3, [r7, #24]
 8104d82:	1ad3      	subs	r3, r2, r3
 8104d84:	683a      	ldr	r2, [r7, #0]
 8104d86:	429a      	cmp	r2, r3
 8104d88:	d302      	bcc.n	8104d90 <HAL_I2C_IsDeviceReady+0xd4>
 8104d8a:	683b      	ldr	r3, [r7, #0]
 8104d8c:	2b00      	cmp	r3, #0
 8104d8e:	d10f      	bne.n	8104db0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8104d90:	68fb      	ldr	r3, [r7, #12]
 8104d92:	2220      	movs	r2, #32
 8104d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104d98:	68fb      	ldr	r3, [r7, #12]
 8104d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104d9c:	f043 0220 	orr.w	r2, r3, #32
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	2200      	movs	r2, #0
 8104da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8104dac:	2301      	movs	r3, #1
 8104dae:	e088      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104db0:	68fb      	ldr	r3, [r7, #12]
 8104db2:	681b      	ldr	r3, [r3, #0]
 8104db4:	699b      	ldr	r3, [r3, #24]
 8104db6:	f003 0320 	and.w	r3, r3, #32
 8104dba:	2b20      	cmp	r3, #32
 8104dbc:	bf0c      	ite	eq
 8104dbe:	2301      	moveq	r3, #1
 8104dc0:	2300      	movne	r3, #0
 8104dc2:	b2db      	uxtb	r3, r3
 8104dc4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104dc6:	68fb      	ldr	r3, [r7, #12]
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	699b      	ldr	r3, [r3, #24]
 8104dcc:	f003 0310 	and.w	r3, r3, #16
 8104dd0:	2b10      	cmp	r3, #16
 8104dd2:	bf0c      	ite	eq
 8104dd4:	2301      	moveq	r3, #1
 8104dd6:	2300      	movne	r3, #0
 8104dd8:	b2db      	uxtb	r3, r3
 8104dda:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104ddc:	7ffb      	ldrb	r3, [r7, #31]
 8104dde:	2b00      	cmp	r3, #0
 8104de0:	d102      	bne.n	8104de8 <HAL_I2C_IsDeviceReady+0x12c>
 8104de2:	7fbb      	ldrb	r3, [r7, #30]
 8104de4:	2b00      	cmp	r3, #0
 8104de6:	d0c4      	beq.n	8104d72 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8104de8:	68fb      	ldr	r3, [r7, #12]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	699b      	ldr	r3, [r3, #24]
 8104dee:	f003 0310 	and.w	r3, r3, #16
 8104df2:	2b10      	cmp	r3, #16
 8104df4:	d01a      	beq.n	8104e2c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104df6:	69bb      	ldr	r3, [r7, #24]
 8104df8:	9300      	str	r3, [sp, #0]
 8104dfa:	683b      	ldr	r3, [r7, #0]
 8104dfc:	2200      	movs	r2, #0
 8104dfe:	2120      	movs	r1, #32
 8104e00:	68f8      	ldr	r0, [r7, #12]
 8104e02:	f000 f92f 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104e06:	4603      	mov	r3, r0
 8104e08:	2b00      	cmp	r3, #0
 8104e0a:	d001      	beq.n	8104e10 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8104e0c:	2301      	movs	r3, #1
 8104e0e:	e058      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e10:	68fb      	ldr	r3, [r7, #12]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	2220      	movs	r2, #32
 8104e16:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	2220      	movs	r2, #32
 8104e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104e20:	68fb      	ldr	r3, [r7, #12]
 8104e22:	2200      	movs	r2, #0
 8104e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8104e28:	2300      	movs	r3, #0
 8104e2a:	e04a      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e2c:	69bb      	ldr	r3, [r7, #24]
 8104e2e:	9300      	str	r3, [sp, #0]
 8104e30:	683b      	ldr	r3, [r7, #0]
 8104e32:	2200      	movs	r2, #0
 8104e34:	2120      	movs	r1, #32
 8104e36:	68f8      	ldr	r0, [r7, #12]
 8104e38:	f000 f914 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104e3c:	4603      	mov	r3, r0
 8104e3e:	2b00      	cmp	r3, #0
 8104e40:	d001      	beq.n	8104e46 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8104e42:	2301      	movs	r3, #1
 8104e44:	e03d      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104e46:	68fb      	ldr	r3, [r7, #12]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	2210      	movs	r2, #16
 8104e4c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e4e:	68fb      	ldr	r3, [r7, #12]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	2220      	movs	r2, #32
 8104e54:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8104e56:	697b      	ldr	r3, [r7, #20]
 8104e58:	687a      	ldr	r2, [r7, #4]
 8104e5a:	429a      	cmp	r2, r3
 8104e5c:	d118      	bne.n	8104e90 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104e5e:	68fb      	ldr	r3, [r7, #12]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	685a      	ldr	r2, [r3, #4]
 8104e64:	68fb      	ldr	r3, [r7, #12]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104e6c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e6e:	69bb      	ldr	r3, [r7, #24]
 8104e70:	9300      	str	r3, [sp, #0]
 8104e72:	683b      	ldr	r3, [r7, #0]
 8104e74:	2200      	movs	r2, #0
 8104e76:	2120      	movs	r1, #32
 8104e78:	68f8      	ldr	r0, [r7, #12]
 8104e7a:	f000 f8f3 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104e7e:	4603      	mov	r3, r0
 8104e80:	2b00      	cmp	r3, #0
 8104e82:	d001      	beq.n	8104e88 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8104e84:	2301      	movs	r3, #1
 8104e86:	e01c      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e88:	68fb      	ldr	r3, [r7, #12]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	2220      	movs	r2, #32
 8104e8e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8104e90:	697b      	ldr	r3, [r7, #20]
 8104e92:	3301      	adds	r3, #1
 8104e94:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8104e96:	697b      	ldr	r3, [r7, #20]
 8104e98:	687a      	ldr	r2, [r7, #4]
 8104e9a:	429a      	cmp	r2, r3
 8104e9c:	f63f af3b 	bhi.w	8104d16 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8104ea0:	68fb      	ldr	r3, [r7, #12]
 8104ea2:	2220      	movs	r2, #32
 8104ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104eac:	f043 0220 	orr.w	r2, r3, #32
 8104eb0:	68fb      	ldr	r3, [r7, #12]
 8104eb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104eb4:	68fb      	ldr	r3, [r7, #12]
 8104eb6:	2200      	movs	r2, #0
 8104eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8104ebc:	2301      	movs	r3, #1
 8104ebe:	e000      	b.n	8104ec2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8104ec0:	2302      	movs	r3, #2
  }
}
 8104ec2:	4618      	mov	r0, r3
 8104ec4:	3720      	adds	r7, #32
 8104ec6:	46bd      	mov	sp, r7
 8104ec8:	bd80      	pop	{r7, pc}
	...

08104ecc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8104ecc:	b580      	push	{r7, lr}
 8104ece:	b086      	sub	sp, #24
 8104ed0:	af02      	add	r7, sp, #8
 8104ed2:	60f8      	str	r0, [r7, #12]
 8104ed4:	4608      	mov	r0, r1
 8104ed6:	4611      	mov	r1, r2
 8104ed8:	461a      	mov	r2, r3
 8104eda:	4603      	mov	r3, r0
 8104edc:	817b      	strh	r3, [r7, #10]
 8104ede:	460b      	mov	r3, r1
 8104ee0:	813b      	strh	r3, [r7, #8]
 8104ee2:	4613      	mov	r3, r2
 8104ee4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8104ee6:	88fb      	ldrh	r3, [r7, #6]
 8104ee8:	b2da      	uxtb	r2, r3
 8104eea:	8979      	ldrh	r1, [r7, #10]
 8104eec:	4b20      	ldr	r3, [pc, #128]	; (8104f70 <I2C_RequestMemoryWrite+0xa4>)
 8104eee:	9300      	str	r3, [sp, #0]
 8104ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104ef4:	68f8      	ldr	r0, [r7, #12]
 8104ef6:	f000 fa5d 	bl	81053b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104efa:	69fa      	ldr	r2, [r7, #28]
 8104efc:	69b9      	ldr	r1, [r7, #24]
 8104efe:	68f8      	ldr	r0, [r7, #12]
 8104f00:	f000 f8f0 	bl	81050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8104f04:	4603      	mov	r3, r0
 8104f06:	2b00      	cmp	r3, #0
 8104f08:	d001      	beq.n	8104f0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8104f0a:	2301      	movs	r3, #1
 8104f0c:	e02c      	b.n	8104f68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104f0e:	88fb      	ldrh	r3, [r7, #6]
 8104f10:	2b01      	cmp	r3, #1
 8104f12:	d105      	bne.n	8104f20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104f14:	893b      	ldrh	r3, [r7, #8]
 8104f16:	b2da      	uxtb	r2, r3
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	629a      	str	r2, [r3, #40]	; 0x28
 8104f1e:	e015      	b.n	8104f4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104f20:	893b      	ldrh	r3, [r7, #8]
 8104f22:	0a1b      	lsrs	r3, r3, #8
 8104f24:	b29b      	uxth	r3, r3
 8104f26:	b2da      	uxtb	r2, r3
 8104f28:	68fb      	ldr	r3, [r7, #12]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104f2e:	69fa      	ldr	r2, [r7, #28]
 8104f30:	69b9      	ldr	r1, [r7, #24]
 8104f32:	68f8      	ldr	r0, [r7, #12]
 8104f34:	f000 f8d6 	bl	81050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8104f38:	4603      	mov	r3, r0
 8104f3a:	2b00      	cmp	r3, #0
 8104f3c:	d001      	beq.n	8104f42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8104f3e:	2301      	movs	r3, #1
 8104f40:	e012      	b.n	8104f68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104f42:	893b      	ldrh	r3, [r7, #8]
 8104f44:	b2da      	uxtb	r2, r3
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8104f4c:	69fb      	ldr	r3, [r7, #28]
 8104f4e:	9300      	str	r3, [sp, #0]
 8104f50:	69bb      	ldr	r3, [r7, #24]
 8104f52:	2200      	movs	r2, #0
 8104f54:	2180      	movs	r1, #128	; 0x80
 8104f56:	68f8      	ldr	r0, [r7, #12]
 8104f58:	f000 f884 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8104f5c:	4603      	mov	r3, r0
 8104f5e:	2b00      	cmp	r3, #0
 8104f60:	d001      	beq.n	8104f66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8104f62:	2301      	movs	r3, #1
 8104f64:	e000      	b.n	8104f68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8104f66:	2300      	movs	r3, #0
}
 8104f68:	4618      	mov	r0, r3
 8104f6a:	3710      	adds	r7, #16
 8104f6c:	46bd      	mov	sp, r7
 8104f6e:	bd80      	pop	{r7, pc}
 8104f70:	80002000 	.word	0x80002000

08104f74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104f74:	b580      	push	{r7, lr}
 8104f76:	b086      	sub	sp, #24
 8104f78:	af02      	add	r7, sp, #8
 8104f7a:	60f8      	str	r0, [r7, #12]
 8104f7c:	4608      	mov	r0, r1
 8104f7e:	4611      	mov	r1, r2
 8104f80:	461a      	mov	r2, r3
 8104f82:	4603      	mov	r3, r0
 8104f84:	817b      	strh	r3, [r7, #10]
 8104f86:	460b      	mov	r3, r1
 8104f88:	813b      	strh	r3, [r7, #8]
 8104f8a:	4613      	mov	r3, r2
 8104f8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8104f8e:	88fb      	ldrh	r3, [r7, #6]
 8104f90:	b2da      	uxtb	r2, r3
 8104f92:	8979      	ldrh	r1, [r7, #10]
 8104f94:	4b20      	ldr	r3, [pc, #128]	; (8105018 <I2C_RequestMemoryRead+0xa4>)
 8104f96:	9300      	str	r3, [sp, #0]
 8104f98:	2300      	movs	r3, #0
 8104f9a:	68f8      	ldr	r0, [r7, #12]
 8104f9c:	f000 fa0a 	bl	81053b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104fa0:	69fa      	ldr	r2, [r7, #28]
 8104fa2:	69b9      	ldr	r1, [r7, #24]
 8104fa4:	68f8      	ldr	r0, [r7, #12]
 8104fa6:	f000 f89d 	bl	81050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8104faa:	4603      	mov	r3, r0
 8104fac:	2b00      	cmp	r3, #0
 8104fae:	d001      	beq.n	8104fb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104fb0:	2301      	movs	r3, #1
 8104fb2:	e02c      	b.n	810500e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104fb4:	88fb      	ldrh	r3, [r7, #6]
 8104fb6:	2b01      	cmp	r3, #1
 8104fb8:	d105      	bne.n	8104fc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104fba:	893b      	ldrh	r3, [r7, #8]
 8104fbc:	b2da      	uxtb	r2, r3
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8104fc4:	e015      	b.n	8104ff2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104fc6:	893b      	ldrh	r3, [r7, #8]
 8104fc8:	0a1b      	lsrs	r3, r3, #8
 8104fca:	b29b      	uxth	r3, r3
 8104fcc:	b2da      	uxtb	r2, r3
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104fd4:	69fa      	ldr	r2, [r7, #28]
 8104fd6:	69b9      	ldr	r1, [r7, #24]
 8104fd8:	68f8      	ldr	r0, [r7, #12]
 8104fda:	f000 f883 	bl	81050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8104fde:	4603      	mov	r3, r0
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	d001      	beq.n	8104fe8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104fe4:	2301      	movs	r3, #1
 8104fe6:	e012      	b.n	810500e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104fe8:	893b      	ldrh	r3, [r7, #8]
 8104fea:	b2da      	uxtb	r2, r3
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	681b      	ldr	r3, [r3, #0]
 8104ff0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8104ff2:	69fb      	ldr	r3, [r7, #28]
 8104ff4:	9300      	str	r3, [sp, #0]
 8104ff6:	69bb      	ldr	r3, [r7, #24]
 8104ff8:	2200      	movs	r2, #0
 8104ffa:	2140      	movs	r1, #64	; 0x40
 8104ffc:	68f8      	ldr	r0, [r7, #12]
 8104ffe:	f000 f831 	bl	8105064 <I2C_WaitOnFlagUntilTimeout>
 8105002:	4603      	mov	r3, r0
 8105004:	2b00      	cmp	r3, #0
 8105006:	d001      	beq.n	810500c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105008:	2301      	movs	r3, #1
 810500a:	e000      	b.n	810500e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810500c:	2300      	movs	r3, #0
}
 810500e:	4618      	mov	r0, r3
 8105010:	3710      	adds	r7, #16
 8105012:	46bd      	mov	sp, r7
 8105014:	bd80      	pop	{r7, pc}
 8105016:	bf00      	nop
 8105018:	80002000 	.word	0x80002000

0810501c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810501c:	b480      	push	{r7}
 810501e:	b083      	sub	sp, #12
 8105020:	af00      	add	r7, sp, #0
 8105022:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	699b      	ldr	r3, [r3, #24]
 810502a:	f003 0302 	and.w	r3, r3, #2
 810502e:	2b02      	cmp	r3, #2
 8105030:	d103      	bne.n	810503a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	2200      	movs	r2, #0
 8105038:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	681b      	ldr	r3, [r3, #0]
 810503e:	699b      	ldr	r3, [r3, #24]
 8105040:	f003 0301 	and.w	r3, r3, #1
 8105044:	2b01      	cmp	r3, #1
 8105046:	d007      	beq.n	8105058 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	699a      	ldr	r2, [r3, #24]
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	f042 0201 	orr.w	r2, r2, #1
 8105056:	619a      	str	r2, [r3, #24]
  }
}
 8105058:	bf00      	nop
 810505a:	370c      	adds	r7, #12
 810505c:	46bd      	mov	sp, r7
 810505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105062:	4770      	bx	lr

08105064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8105064:	b580      	push	{r7, lr}
 8105066:	b084      	sub	sp, #16
 8105068:	af00      	add	r7, sp, #0
 810506a:	60f8      	str	r0, [r7, #12]
 810506c:	60b9      	str	r1, [r7, #8]
 810506e:	603b      	str	r3, [r7, #0]
 8105070:	4613      	mov	r3, r2
 8105072:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105074:	e022      	b.n	81050bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105076:	683b      	ldr	r3, [r7, #0]
 8105078:	f1b3 3fff 	cmp.w	r3, #4294967295
 810507c:	d01e      	beq.n	81050bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810507e:	f7fd fb6f 	bl	8102760 <HAL_GetTick>
 8105082:	4602      	mov	r2, r0
 8105084:	69bb      	ldr	r3, [r7, #24]
 8105086:	1ad3      	subs	r3, r2, r3
 8105088:	683a      	ldr	r2, [r7, #0]
 810508a:	429a      	cmp	r2, r3
 810508c:	d302      	bcc.n	8105094 <I2C_WaitOnFlagUntilTimeout+0x30>
 810508e:	683b      	ldr	r3, [r7, #0]
 8105090:	2b00      	cmp	r3, #0
 8105092:	d113      	bne.n	81050bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105094:	68fb      	ldr	r3, [r7, #12]
 8105096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105098:	f043 0220 	orr.w	r2, r3, #32
 810509c:	68fb      	ldr	r3, [r7, #12]
 810509e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81050a0:	68fb      	ldr	r3, [r7, #12]
 81050a2:	2220      	movs	r2, #32
 81050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81050a8:	68fb      	ldr	r3, [r7, #12]
 81050aa:	2200      	movs	r2, #0
 81050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81050b0:	68fb      	ldr	r3, [r7, #12]
 81050b2:	2200      	movs	r2, #0
 81050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81050b8:	2301      	movs	r3, #1
 81050ba:	e00f      	b.n	81050dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81050bc:	68fb      	ldr	r3, [r7, #12]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	699a      	ldr	r2, [r3, #24]
 81050c2:	68bb      	ldr	r3, [r7, #8]
 81050c4:	4013      	ands	r3, r2
 81050c6:	68ba      	ldr	r2, [r7, #8]
 81050c8:	429a      	cmp	r2, r3
 81050ca:	bf0c      	ite	eq
 81050cc:	2301      	moveq	r3, #1
 81050ce:	2300      	movne	r3, #0
 81050d0:	b2db      	uxtb	r3, r3
 81050d2:	461a      	mov	r2, r3
 81050d4:	79fb      	ldrb	r3, [r7, #7]
 81050d6:	429a      	cmp	r2, r3
 81050d8:	d0cd      	beq.n	8105076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81050da:	2300      	movs	r3, #0
}
 81050dc:	4618      	mov	r0, r3
 81050de:	3710      	adds	r7, #16
 81050e0:	46bd      	mov	sp, r7
 81050e2:	bd80      	pop	{r7, pc}

081050e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81050e4:	b580      	push	{r7, lr}
 81050e6:	b084      	sub	sp, #16
 81050e8:	af00      	add	r7, sp, #0
 81050ea:	60f8      	str	r0, [r7, #12]
 81050ec:	60b9      	str	r1, [r7, #8]
 81050ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81050f0:	e02c      	b.n	810514c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81050f2:	687a      	ldr	r2, [r7, #4]
 81050f4:	68b9      	ldr	r1, [r7, #8]
 81050f6:	68f8      	ldr	r0, [r7, #12]
 81050f8:	f000 f870 	bl	81051dc <I2C_IsErrorOccurred>
 81050fc:	4603      	mov	r3, r0
 81050fe:	2b00      	cmp	r3, #0
 8105100:	d001      	beq.n	8105106 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105102:	2301      	movs	r3, #1
 8105104:	e02a      	b.n	810515c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105106:	68bb      	ldr	r3, [r7, #8]
 8105108:	f1b3 3fff 	cmp.w	r3, #4294967295
 810510c:	d01e      	beq.n	810514c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810510e:	f7fd fb27 	bl	8102760 <HAL_GetTick>
 8105112:	4602      	mov	r2, r0
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	1ad3      	subs	r3, r2, r3
 8105118:	68ba      	ldr	r2, [r7, #8]
 810511a:	429a      	cmp	r2, r3
 810511c:	d302      	bcc.n	8105124 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810511e:	68bb      	ldr	r3, [r7, #8]
 8105120:	2b00      	cmp	r3, #0
 8105122:	d113      	bne.n	810514c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105124:	68fb      	ldr	r3, [r7, #12]
 8105126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105128:	f043 0220 	orr.w	r2, r3, #32
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	2220      	movs	r2, #32
 8105134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105138:	68fb      	ldr	r3, [r7, #12]
 810513a:	2200      	movs	r2, #0
 810513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	2200      	movs	r2, #0
 8105144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105148:	2301      	movs	r3, #1
 810514a:	e007      	b.n	810515c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	699b      	ldr	r3, [r3, #24]
 8105152:	f003 0302 	and.w	r3, r3, #2
 8105156:	2b02      	cmp	r3, #2
 8105158:	d1cb      	bne.n	81050f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810515a:	2300      	movs	r3, #0
}
 810515c:	4618      	mov	r0, r3
 810515e:	3710      	adds	r7, #16
 8105160:	46bd      	mov	sp, r7
 8105162:	bd80      	pop	{r7, pc}

08105164 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105164:	b580      	push	{r7, lr}
 8105166:	b084      	sub	sp, #16
 8105168:	af00      	add	r7, sp, #0
 810516a:	60f8      	str	r0, [r7, #12]
 810516c:	60b9      	str	r1, [r7, #8]
 810516e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105170:	e028      	b.n	81051c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105172:	687a      	ldr	r2, [r7, #4]
 8105174:	68b9      	ldr	r1, [r7, #8]
 8105176:	68f8      	ldr	r0, [r7, #12]
 8105178:	f000 f830 	bl	81051dc <I2C_IsErrorOccurred>
 810517c:	4603      	mov	r3, r0
 810517e:	2b00      	cmp	r3, #0
 8105180:	d001      	beq.n	8105186 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105182:	2301      	movs	r3, #1
 8105184:	e026      	b.n	81051d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105186:	f7fd faeb 	bl	8102760 <HAL_GetTick>
 810518a:	4602      	mov	r2, r0
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	1ad3      	subs	r3, r2, r3
 8105190:	68ba      	ldr	r2, [r7, #8]
 8105192:	429a      	cmp	r2, r3
 8105194:	d302      	bcc.n	810519c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105196:	68bb      	ldr	r3, [r7, #8]
 8105198:	2b00      	cmp	r3, #0
 810519a:	d113      	bne.n	81051c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810519c:	68fb      	ldr	r3, [r7, #12]
 810519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81051a0:	f043 0220 	orr.w	r2, r3, #32
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81051a8:	68fb      	ldr	r3, [r7, #12]
 81051aa:	2220      	movs	r2, #32
 81051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81051b0:	68fb      	ldr	r3, [r7, #12]
 81051b2:	2200      	movs	r2, #0
 81051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	2200      	movs	r2, #0
 81051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81051c0:	2301      	movs	r3, #1
 81051c2:	e007      	b.n	81051d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	699b      	ldr	r3, [r3, #24]
 81051ca:	f003 0320 	and.w	r3, r3, #32
 81051ce:	2b20      	cmp	r3, #32
 81051d0:	d1cf      	bne.n	8105172 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81051d2:	2300      	movs	r3, #0
}
 81051d4:	4618      	mov	r0, r3
 81051d6:	3710      	adds	r7, #16
 81051d8:	46bd      	mov	sp, r7
 81051da:	bd80      	pop	{r7, pc}

081051dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81051dc:	b580      	push	{r7, lr}
 81051de:	b08a      	sub	sp, #40	; 0x28
 81051e0:	af00      	add	r7, sp, #0
 81051e2:	60f8      	str	r0, [r7, #12]
 81051e4:	60b9      	str	r1, [r7, #8]
 81051e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81051e8:	2300      	movs	r3, #0
 81051ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81051ee:	68fb      	ldr	r3, [r7, #12]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	699b      	ldr	r3, [r3, #24]
 81051f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81051f6:	2300      	movs	r3, #0
 81051f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81051fe:	69bb      	ldr	r3, [r7, #24]
 8105200:	f003 0310 	and.w	r3, r3, #16
 8105204:	2b00      	cmp	r3, #0
 8105206:	d075      	beq.n	81052f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	2210      	movs	r2, #16
 810520e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105210:	e056      	b.n	81052c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105212:	68bb      	ldr	r3, [r7, #8]
 8105214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105218:	d052      	beq.n	81052c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810521a:	f7fd faa1 	bl	8102760 <HAL_GetTick>
 810521e:	4602      	mov	r2, r0
 8105220:	69fb      	ldr	r3, [r7, #28]
 8105222:	1ad3      	subs	r3, r2, r3
 8105224:	68ba      	ldr	r2, [r7, #8]
 8105226:	429a      	cmp	r2, r3
 8105228:	d302      	bcc.n	8105230 <I2C_IsErrorOccurred+0x54>
 810522a:	68bb      	ldr	r3, [r7, #8]
 810522c:	2b00      	cmp	r3, #0
 810522e:	d147      	bne.n	81052c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	685b      	ldr	r3, [r3, #4]
 8105236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810523a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105242:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	699b      	ldr	r3, [r3, #24]
 810524a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105252:	d12e      	bne.n	81052b2 <I2C_IsErrorOccurred+0xd6>
 8105254:	697b      	ldr	r3, [r7, #20]
 8105256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810525a:	d02a      	beq.n	81052b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 810525c:	7cfb      	ldrb	r3, [r7, #19]
 810525e:	2b20      	cmp	r3, #32
 8105260:	d027      	beq.n	81052b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105262:	68fb      	ldr	r3, [r7, #12]
 8105264:	681b      	ldr	r3, [r3, #0]
 8105266:	685a      	ldr	r2, [r3, #4]
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105270:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8105272:	f7fd fa75 	bl	8102760 <HAL_GetTick>
 8105276:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105278:	e01b      	b.n	81052b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810527a:	f7fd fa71 	bl	8102760 <HAL_GetTick>
 810527e:	4602      	mov	r2, r0
 8105280:	69fb      	ldr	r3, [r7, #28]
 8105282:	1ad3      	subs	r3, r2, r3
 8105284:	2b19      	cmp	r3, #25
 8105286:	d914      	bls.n	81052b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105288:	68fb      	ldr	r3, [r7, #12]
 810528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810528c:	f043 0220 	orr.w	r2, r3, #32
 8105290:	68fb      	ldr	r3, [r7, #12]
 8105292:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8105294:	68fb      	ldr	r3, [r7, #12]
 8105296:	2220      	movs	r2, #32
 8105298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 810529c:	68fb      	ldr	r3, [r7, #12]
 810529e:	2200      	movs	r2, #0
 81052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	2200      	movs	r2, #0
 81052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 81052ac:	2301      	movs	r3, #1
 81052ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81052b2:	68fb      	ldr	r3, [r7, #12]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	699b      	ldr	r3, [r3, #24]
 81052b8:	f003 0320 	and.w	r3, r3, #32
 81052bc:	2b20      	cmp	r3, #32
 81052be:	d1dc      	bne.n	810527a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	681b      	ldr	r3, [r3, #0]
 81052c4:	699b      	ldr	r3, [r3, #24]
 81052c6:	f003 0320 	and.w	r3, r3, #32
 81052ca:	2b20      	cmp	r3, #32
 81052cc:	d003      	beq.n	81052d6 <I2C_IsErrorOccurred+0xfa>
 81052ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81052d2:	2b00      	cmp	r3, #0
 81052d4:	d09d      	beq.n	8105212 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81052d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81052da:	2b00      	cmp	r3, #0
 81052dc:	d103      	bne.n	81052e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81052de:	68fb      	ldr	r3, [r7, #12]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	2220      	movs	r2, #32
 81052e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81052e6:	6a3b      	ldr	r3, [r7, #32]
 81052e8:	f043 0304 	orr.w	r3, r3, #4
 81052ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81052ee:	2301      	movs	r3, #1
 81052f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81052f4:	68fb      	ldr	r3, [r7, #12]
 81052f6:	681b      	ldr	r3, [r3, #0]
 81052f8:	699b      	ldr	r3, [r3, #24]
 81052fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81052fc:	69bb      	ldr	r3, [r7, #24]
 81052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105302:	2b00      	cmp	r3, #0
 8105304:	d00b      	beq.n	810531e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105306:	6a3b      	ldr	r3, [r7, #32]
 8105308:	f043 0301 	orr.w	r3, r3, #1
 810530c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105318:	2301      	movs	r3, #1
 810531a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810531e:	69bb      	ldr	r3, [r7, #24]
 8105320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105324:	2b00      	cmp	r3, #0
 8105326:	d00b      	beq.n	8105340 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105328:	6a3b      	ldr	r3, [r7, #32]
 810532a:	f043 0308 	orr.w	r3, r3, #8
 810532e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105330:	68fb      	ldr	r3, [r7, #12]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8105338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810533a:	2301      	movs	r3, #1
 810533c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8105340:	69bb      	ldr	r3, [r7, #24]
 8105342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105346:	2b00      	cmp	r3, #0
 8105348:	d00b      	beq.n	8105362 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810534a:	6a3b      	ldr	r3, [r7, #32]
 810534c:	f043 0302 	orr.w	r3, r3, #2
 8105350:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	681b      	ldr	r3, [r3, #0]
 8105356:	f44f 7200 	mov.w	r2, #512	; 0x200
 810535a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810535c:	2301      	movs	r3, #1
 810535e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8105362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105366:	2b00      	cmp	r3, #0
 8105368:	d01c      	beq.n	81053a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810536a:	68f8      	ldr	r0, [r7, #12]
 810536c:	f7ff fe56 	bl	810501c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	6859      	ldr	r1, [r3, #4]
 8105376:	68fb      	ldr	r3, [r7, #12]
 8105378:	681a      	ldr	r2, [r3, #0]
 810537a:	4b0d      	ldr	r3, [pc, #52]	; (81053b0 <I2C_IsErrorOccurred+0x1d4>)
 810537c:	400b      	ands	r3, r1
 810537e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8105380:	68fb      	ldr	r3, [r7, #12]
 8105382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105384:	6a3b      	ldr	r3, [r7, #32]
 8105386:	431a      	orrs	r2, r3
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810538c:	68fb      	ldr	r3, [r7, #12]
 810538e:	2220      	movs	r2, #32
 8105390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	2200      	movs	r2, #0
 8105398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	2200      	movs	r2, #0
 81053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81053a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81053a8:	4618      	mov	r0, r3
 81053aa:	3728      	adds	r7, #40	; 0x28
 81053ac:	46bd      	mov	sp, r7
 81053ae:	bd80      	pop	{r7, pc}
 81053b0:	fe00e800 	.word	0xfe00e800

081053b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81053b4:	b480      	push	{r7}
 81053b6:	b087      	sub	sp, #28
 81053b8:	af00      	add	r7, sp, #0
 81053ba:	60f8      	str	r0, [r7, #12]
 81053bc:	607b      	str	r3, [r7, #4]
 81053be:	460b      	mov	r3, r1
 81053c0:	817b      	strh	r3, [r7, #10]
 81053c2:	4613      	mov	r3, r2
 81053c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81053c6:	897b      	ldrh	r3, [r7, #10]
 81053c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81053cc:	7a7b      	ldrb	r3, [r7, #9]
 81053ce:	041b      	lsls	r3, r3, #16
 81053d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81053d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81053da:	6a3b      	ldr	r3, [r7, #32]
 81053dc:	4313      	orrs	r3, r2
 81053de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81053e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	681b      	ldr	r3, [r3, #0]
 81053e8:	685a      	ldr	r2, [r3, #4]
 81053ea:	6a3b      	ldr	r3, [r7, #32]
 81053ec:	0d5b      	lsrs	r3, r3, #21
 81053ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81053f2:	4b08      	ldr	r3, [pc, #32]	; (8105414 <I2C_TransferConfig+0x60>)
 81053f4:	430b      	orrs	r3, r1
 81053f6:	43db      	mvns	r3, r3
 81053f8:	ea02 0103 	and.w	r1, r2, r3
 81053fc:	68fb      	ldr	r3, [r7, #12]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	697a      	ldr	r2, [r7, #20]
 8105402:	430a      	orrs	r2, r1
 8105404:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8105406:	bf00      	nop
 8105408:	371c      	adds	r7, #28
 810540a:	46bd      	mov	sp, r7
 810540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105410:	4770      	bx	lr
 8105412:	bf00      	nop
 8105414:	03ff63ff 	.word	0x03ff63ff

08105418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105418:	b480      	push	{r7}
 810541a:	b083      	sub	sp, #12
 810541c:	af00      	add	r7, sp, #0
 810541e:	6078      	str	r0, [r7, #4]
 8105420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105428:	b2db      	uxtb	r3, r3
 810542a:	2b20      	cmp	r3, #32
 810542c:	d138      	bne.n	81054a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105434:	2b01      	cmp	r3, #1
 8105436:	d101      	bne.n	810543c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105438:	2302      	movs	r3, #2
 810543a:	e032      	b.n	81054a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	2201      	movs	r2, #1
 8105440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	2224      	movs	r2, #36	; 0x24
 8105448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	681a      	ldr	r2, [r3, #0]
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	f022 0201 	bic.w	r2, r2, #1
 810545a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	681b      	ldr	r3, [r3, #0]
 8105460:	681a      	ldr	r2, [r3, #0]
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810546a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	6819      	ldr	r1, [r3, #0]
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	681b      	ldr	r3, [r3, #0]
 8105476:	683a      	ldr	r2, [r7, #0]
 8105478:	430a      	orrs	r2, r1
 810547a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	681a      	ldr	r2, [r3, #0]
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	f042 0201 	orr.w	r2, r2, #1
 810548a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	2220      	movs	r2, #32
 8105490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	2200      	movs	r2, #0
 8105498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810549c:	2300      	movs	r3, #0
 810549e:	e000      	b.n	81054a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81054a0:	2302      	movs	r3, #2
  }
}
 81054a2:	4618      	mov	r0, r3
 81054a4:	370c      	adds	r7, #12
 81054a6:	46bd      	mov	sp, r7
 81054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054ac:	4770      	bx	lr

081054ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81054ae:	b480      	push	{r7}
 81054b0:	b085      	sub	sp, #20
 81054b2:	af00      	add	r7, sp, #0
 81054b4:	6078      	str	r0, [r7, #4]
 81054b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81054be:	b2db      	uxtb	r3, r3
 81054c0:	2b20      	cmp	r3, #32
 81054c2:	d139      	bne.n	8105538 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81054ca:	2b01      	cmp	r3, #1
 81054cc:	d101      	bne.n	81054d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81054ce:	2302      	movs	r3, #2
 81054d0:	e033      	b.n	810553a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	2201      	movs	r2, #1
 81054d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	2224      	movs	r2, #36	; 0x24
 81054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	681b      	ldr	r3, [r3, #0]
 81054e6:	681a      	ldr	r2, [r3, #0]
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	f022 0201 	bic.w	r2, r2, #1
 81054f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	681b      	ldr	r3, [r3, #0]
 81054f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81054fa:	68fb      	ldr	r3, [r7, #12]
 81054fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105500:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105502:	683b      	ldr	r3, [r7, #0]
 8105504:	021b      	lsls	r3, r3, #8
 8105506:	68fa      	ldr	r2, [r7, #12]
 8105508:	4313      	orrs	r3, r2
 810550a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	68fa      	ldr	r2, [r7, #12]
 8105512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	681a      	ldr	r2, [r3, #0]
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	681b      	ldr	r3, [r3, #0]
 810551e:	f042 0201 	orr.w	r2, r2, #1
 8105522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	2220      	movs	r2, #32
 8105528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	2200      	movs	r2, #0
 8105530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105534:	2300      	movs	r3, #0
 8105536:	e000      	b.n	810553a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8105538:	2302      	movs	r3, #2
  }
}
 810553a:	4618      	mov	r0, r3
 810553c:	3714      	adds	r7, #20
 810553e:	46bd      	mov	sp, r7
 8105540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105544:	4770      	bx	lr
	...

08105548 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105548:	b580      	push	{r7, lr}
 810554a:	b084      	sub	sp, #16
 810554c:	af00      	add	r7, sp, #0
 810554e:	60f8      	str	r0, [r7, #12]
 8105550:	460b      	mov	r3, r1
 8105552:	607a      	str	r2, [r7, #4]
 8105554:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105556:	4b37      	ldr	r3, [pc, #220]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	f023 0201 	bic.w	r2, r3, #1
 810555e:	4935      	ldr	r1, [pc, #212]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	4313      	orrs	r3, r2
 8105564:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	2b00      	cmp	r3, #0
 810556a:	d123      	bne.n	81055b4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810556c:	f7fd fa14 	bl	8102998 <HAL_GetCurrentCPUID>
 8105570:	4603      	mov	r3, r0
 8105572:	2b03      	cmp	r3, #3
 8105574:	d158      	bne.n	8105628 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105576:	4b2f      	ldr	r3, [pc, #188]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105578:	691b      	ldr	r3, [r3, #16]
 810557a:	4a2e      	ldr	r2, [pc, #184]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 810557c:	f023 0301 	bic.w	r3, r3, #1
 8105580:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105582:	4b2d      	ldr	r3, [pc, #180]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105584:	691b      	ldr	r3, [r3, #16]
 8105586:	4a2c      	ldr	r2, [pc, #176]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105588:	f043 0304 	orr.w	r3, r3, #4
 810558c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810558e:	f3bf 8f4f 	dsb	sy
}
 8105592:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105594:	f3bf 8f6f 	isb	sy
}
 8105598:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810559a:	7afb      	ldrb	r3, [r7, #11]
 810559c:	2b01      	cmp	r3, #1
 810559e:	d101      	bne.n	81055a4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81055a0:	bf30      	wfi
 81055a2:	e000      	b.n	81055a6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81055a4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055a6:	4b24      	ldr	r3, [pc, #144]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055a8:	691b      	ldr	r3, [r3, #16]
 81055aa:	4a23      	ldr	r2, [pc, #140]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055ac:	f023 0304 	bic.w	r3, r3, #4
 81055b0:	6113      	str	r3, [r2, #16]
 81055b2:	e03c      	b.n	810562e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	2b01      	cmp	r3, #1
 81055b8:	d123      	bne.n	8105602 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81055ba:	f7fd f9ed 	bl	8102998 <HAL_GetCurrentCPUID>
 81055be:	4603      	mov	r3, r0
 81055c0:	2b01      	cmp	r3, #1
 81055c2:	d133      	bne.n	810562c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81055c4:	4b1b      	ldr	r3, [pc, #108]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055c6:	695b      	ldr	r3, [r3, #20]
 81055c8:	4a1a      	ldr	r2, [pc, #104]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055ca:	f023 0302 	bic.w	r3, r3, #2
 81055ce:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055d0:	4b19      	ldr	r3, [pc, #100]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055d2:	691b      	ldr	r3, [r3, #16]
 81055d4:	4a18      	ldr	r2, [pc, #96]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055d6:	f043 0304 	orr.w	r3, r3, #4
 81055da:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81055dc:	f3bf 8f4f 	dsb	sy
}
 81055e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81055e2:	f3bf 8f6f 	isb	sy
}
 81055e6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81055e8:	7afb      	ldrb	r3, [r7, #11]
 81055ea:	2b01      	cmp	r3, #1
 81055ec:	d101      	bne.n	81055f2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81055ee:	bf30      	wfi
 81055f0:	e000      	b.n	81055f4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81055f2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055f4:	4b10      	ldr	r3, [pc, #64]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055f6:	691b      	ldr	r3, [r3, #16]
 81055f8:	4a0f      	ldr	r2, [pc, #60]	; (8105638 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055fa:	f023 0304 	bic.w	r3, r3, #4
 81055fe:	6113      	str	r3, [r2, #16]
 8105600:	e015      	b.n	810562e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105602:	f7fd f9c9 	bl	8102998 <HAL_GetCurrentCPUID>
 8105606:	4603      	mov	r3, r0
 8105608:	2b03      	cmp	r3, #3
 810560a:	d106      	bne.n	810561a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810560c:	4b09      	ldr	r3, [pc, #36]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 810560e:	691b      	ldr	r3, [r3, #16]
 8105610:	4a08      	ldr	r2, [pc, #32]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105612:	f023 0304 	bic.w	r3, r3, #4
 8105616:	6113      	str	r3, [r2, #16]
 8105618:	e009      	b.n	810562e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810561a:	4b06      	ldr	r3, [pc, #24]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 810561c:	695b      	ldr	r3, [r3, #20]
 810561e:	4a05      	ldr	r2, [pc, #20]	; (8105634 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105620:	f023 0304 	bic.w	r3, r3, #4
 8105624:	6153      	str	r3, [r2, #20]
 8105626:	e002      	b.n	810562e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105628:	bf00      	nop
 810562a:	e000      	b.n	810562e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810562c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810562e:	3710      	adds	r7, #16
 8105630:	46bd      	mov	sp, r7
 8105632:	bd80      	pop	{r7, pc}
 8105634:	58024800 	.word	0x58024800
 8105638:	e000ed00 	.word	0xe000ed00

0810563c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810563c:	b580      	push	{r7, lr}
 810563e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105640:	f7fd f9aa 	bl	8102998 <HAL_GetCurrentCPUID>
 8105644:	4603      	mov	r3, r0
 8105646:	2b03      	cmp	r3, #3
 8105648:	d101      	bne.n	810564e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810564a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810564c:	e001      	b.n	8105652 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810564e:	bf40      	sev
    __WFE ();
 8105650:	bf20      	wfe
}
 8105652:	bf00      	nop
 8105654:	bd80      	pop	{r7, pc}
	...

08105658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105658:	b480      	push	{r7}
 810565a:	b089      	sub	sp, #36	; 0x24
 810565c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810565e:	4bb3      	ldr	r3, [pc, #716]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105660:	691b      	ldr	r3, [r3, #16]
 8105662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105666:	2b18      	cmp	r3, #24
 8105668:	f200 8155 	bhi.w	8105916 <HAL_RCC_GetSysClockFreq+0x2be>
 810566c:	a201      	add	r2, pc, #4	; (adr r2, 8105674 <HAL_RCC_GetSysClockFreq+0x1c>)
 810566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105672:	bf00      	nop
 8105674:	081056d9 	.word	0x081056d9
 8105678:	08105917 	.word	0x08105917
 810567c:	08105917 	.word	0x08105917
 8105680:	08105917 	.word	0x08105917
 8105684:	08105917 	.word	0x08105917
 8105688:	08105917 	.word	0x08105917
 810568c:	08105917 	.word	0x08105917
 8105690:	08105917 	.word	0x08105917
 8105694:	081056ff 	.word	0x081056ff
 8105698:	08105917 	.word	0x08105917
 810569c:	08105917 	.word	0x08105917
 81056a0:	08105917 	.word	0x08105917
 81056a4:	08105917 	.word	0x08105917
 81056a8:	08105917 	.word	0x08105917
 81056ac:	08105917 	.word	0x08105917
 81056b0:	08105917 	.word	0x08105917
 81056b4:	08105705 	.word	0x08105705
 81056b8:	08105917 	.word	0x08105917
 81056bc:	08105917 	.word	0x08105917
 81056c0:	08105917 	.word	0x08105917
 81056c4:	08105917 	.word	0x08105917
 81056c8:	08105917 	.word	0x08105917
 81056cc:	08105917 	.word	0x08105917
 81056d0:	08105917 	.word	0x08105917
 81056d4:	0810570b 	.word	0x0810570b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81056d8:	4b94      	ldr	r3, [pc, #592]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	f003 0320 	and.w	r3, r3, #32
 81056e0:	2b00      	cmp	r3, #0
 81056e2:	d009      	beq.n	81056f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81056e4:	4b91      	ldr	r3, [pc, #580]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056e6:	681b      	ldr	r3, [r3, #0]
 81056e8:	08db      	lsrs	r3, r3, #3
 81056ea:	f003 0303 	and.w	r3, r3, #3
 81056ee:	4a90      	ldr	r2, [pc, #576]	; (8105930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81056f0:	fa22 f303 	lsr.w	r3, r2, r3
 81056f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81056f6:	e111      	b.n	810591c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81056f8:	4b8d      	ldr	r3, [pc, #564]	; (8105930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81056fa:	61bb      	str	r3, [r7, #24]
    break;
 81056fc:	e10e      	b.n	810591c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81056fe:	4b8d      	ldr	r3, [pc, #564]	; (8105934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105700:	61bb      	str	r3, [r7, #24]
    break;
 8105702:	e10b      	b.n	810591c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105704:	4b8c      	ldr	r3, [pc, #560]	; (8105938 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105706:	61bb      	str	r3, [r7, #24]
    break;
 8105708:	e108      	b.n	810591c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810570a:	4b88      	ldr	r3, [pc, #544]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810570e:	f003 0303 	and.w	r3, r3, #3
 8105712:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105714:	4b85      	ldr	r3, [pc, #532]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105718:	091b      	lsrs	r3, r3, #4
 810571a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810571e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105720:	4b82      	ldr	r3, [pc, #520]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105724:	f003 0301 	and.w	r3, r3, #1
 8105728:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810572a:	4b80      	ldr	r3, [pc, #512]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810572e:	08db      	lsrs	r3, r3, #3
 8105730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105734:	68fa      	ldr	r2, [r7, #12]
 8105736:	fb02 f303 	mul.w	r3, r2, r3
 810573a:	ee07 3a90 	vmov	s15, r3
 810573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105742:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8105746:	693b      	ldr	r3, [r7, #16]
 8105748:	2b00      	cmp	r3, #0
 810574a:	f000 80e1 	beq.w	8105910 <HAL_RCC_GetSysClockFreq+0x2b8>
 810574e:	697b      	ldr	r3, [r7, #20]
 8105750:	2b02      	cmp	r3, #2
 8105752:	f000 8083 	beq.w	810585c <HAL_RCC_GetSysClockFreq+0x204>
 8105756:	697b      	ldr	r3, [r7, #20]
 8105758:	2b02      	cmp	r3, #2
 810575a:	f200 80a1 	bhi.w	81058a0 <HAL_RCC_GetSysClockFreq+0x248>
 810575e:	697b      	ldr	r3, [r7, #20]
 8105760:	2b00      	cmp	r3, #0
 8105762:	d003      	beq.n	810576c <HAL_RCC_GetSysClockFreq+0x114>
 8105764:	697b      	ldr	r3, [r7, #20]
 8105766:	2b01      	cmp	r3, #1
 8105768:	d056      	beq.n	8105818 <HAL_RCC_GetSysClockFreq+0x1c0>
 810576a:	e099      	b.n	81058a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810576c:	4b6f      	ldr	r3, [pc, #444]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810576e:	681b      	ldr	r3, [r3, #0]
 8105770:	f003 0320 	and.w	r3, r3, #32
 8105774:	2b00      	cmp	r3, #0
 8105776:	d02d      	beq.n	81057d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105778:	4b6c      	ldr	r3, [pc, #432]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810577a:	681b      	ldr	r3, [r3, #0]
 810577c:	08db      	lsrs	r3, r3, #3
 810577e:	f003 0303 	and.w	r3, r3, #3
 8105782:	4a6b      	ldr	r2, [pc, #428]	; (8105930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105784:	fa22 f303 	lsr.w	r3, r2, r3
 8105788:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	ee07 3a90 	vmov	s15, r3
 8105790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105794:	693b      	ldr	r3, [r7, #16]
 8105796:	ee07 3a90 	vmov	s15, r3
 810579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057a2:	4b62      	ldr	r3, [pc, #392]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057aa:	ee07 3a90 	vmov	s15, r3
 81057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81057b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810593c <HAL_RCC_GetSysClockFreq+0x2e4>
 81057ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81057d2:	e087      	b.n	81058e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81057d4:	693b      	ldr	r3, [r7, #16]
 81057d6:	ee07 3a90 	vmov	s15, r3
 81057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8105940 <HAL_RCC_GetSysClockFreq+0x2e8>
 81057e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057e6:	4b51      	ldr	r3, [pc, #324]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057ee:	ee07 3a90 	vmov	s15, r3
 81057f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81057fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 810593c <HAL_RCC_GetSysClockFreq+0x2e4>
 81057fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810580a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810580e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105816:	e065      	b.n	81058e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105818:	693b      	ldr	r3, [r7, #16]
 810581a:	ee07 3a90 	vmov	s15, r3
 810581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105822:	eddf 6a48 	vldr	s13, [pc, #288]	; 8105944 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810582a:	4b40      	ldr	r3, [pc, #256]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105832:	ee07 3a90 	vmov	s15, r3
 8105836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810583a:	ed97 6a02 	vldr	s12, [r7, #8]
 810583e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810593c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810584a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810584e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810585a:	e043      	b.n	81058e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810585c:	693b      	ldr	r3, [r7, #16]
 810585e:	ee07 3a90 	vmov	s15, r3
 8105862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105866:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105948 <HAL_RCC_GetSysClockFreq+0x2f0>
 810586a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810586e:	4b2f      	ldr	r3, [pc, #188]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105876:	ee07 3a90 	vmov	s15, r3
 810587a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810587e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105882:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810593c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810588a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810588e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105896:	ee67 7a27 	vmul.f32	s15, s14, s15
 810589a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810589e:	e021      	b.n	81058e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81058a0:	693b      	ldr	r3, [r7, #16]
 81058a2:	ee07 3a90 	vmov	s15, r3
 81058a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8105944 <HAL_RCC_GetSysClockFreq+0x2ec>
 81058ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058b2:	4b1e      	ldr	r3, [pc, #120]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ba:	ee07 3a90 	vmov	s15, r3
 81058be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81058c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810593c <HAL_RCC_GetSysClockFreq+0x2e4>
 81058ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81058e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81058e4:	4b11      	ldr	r3, [pc, #68]	; (810592c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058e8:	0a5b      	lsrs	r3, r3, #9
 81058ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81058ee:	3301      	adds	r3, #1
 81058f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81058f2:	683b      	ldr	r3, [r7, #0]
 81058f4:	ee07 3a90 	vmov	s15, r3
 81058f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81058fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105908:	ee17 3a90 	vmov	r3, s15
 810590c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810590e:	e005      	b.n	810591c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8105910:	2300      	movs	r3, #0
 8105912:	61bb      	str	r3, [r7, #24]
    break;
 8105914:	e002      	b.n	810591c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8105916:	4b07      	ldr	r3, [pc, #28]	; (8105934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105918:	61bb      	str	r3, [r7, #24]
    break;
 810591a:	bf00      	nop
  }

  return sysclockfreq;
 810591c:	69bb      	ldr	r3, [r7, #24]
}
 810591e:	4618      	mov	r0, r3
 8105920:	3724      	adds	r7, #36	; 0x24
 8105922:	46bd      	mov	sp, r7
 8105924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105928:	4770      	bx	lr
 810592a:	bf00      	nop
 810592c:	58024400 	.word	0x58024400
 8105930:	03d09000 	.word	0x03d09000
 8105934:	003d0900 	.word	0x003d0900
 8105938:	007a1200 	.word	0x007a1200
 810593c:	46000000 	.word	0x46000000
 8105940:	4c742400 	.word	0x4c742400
 8105944:	4a742400 	.word	0x4a742400
 8105948:	4af42400 	.word	0x4af42400

0810594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810594c:	b580      	push	{r7, lr}
 810594e:	b082      	sub	sp, #8
 8105950:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105952:	f7ff fe81 	bl	8105658 <HAL_RCC_GetSysClockFreq>
 8105956:	4602      	mov	r2, r0
 8105958:	4b11      	ldr	r3, [pc, #68]	; (81059a0 <HAL_RCC_GetHCLKFreq+0x54>)
 810595a:	699b      	ldr	r3, [r3, #24]
 810595c:	0a1b      	lsrs	r3, r3, #8
 810595e:	f003 030f 	and.w	r3, r3, #15
 8105962:	4910      	ldr	r1, [pc, #64]	; (81059a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8105964:	5ccb      	ldrb	r3, [r1, r3]
 8105966:	f003 031f 	and.w	r3, r3, #31
 810596a:	fa22 f303 	lsr.w	r3, r2, r3
 810596e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105970:	4b0b      	ldr	r3, [pc, #44]	; (81059a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8105972:	699b      	ldr	r3, [r3, #24]
 8105974:	f003 030f 	and.w	r3, r3, #15
 8105978:	4a0a      	ldr	r2, [pc, #40]	; (81059a4 <HAL_RCC_GetHCLKFreq+0x58>)
 810597a:	5cd3      	ldrb	r3, [r2, r3]
 810597c:	f003 031f 	and.w	r3, r3, #31
 8105980:	687a      	ldr	r2, [r7, #4]
 8105982:	fa22 f303 	lsr.w	r3, r2, r3
 8105986:	4a08      	ldr	r2, [pc, #32]	; (81059a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105988:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810598a:	4b07      	ldr	r3, [pc, #28]	; (81059a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 810598c:	681b      	ldr	r3, [r3, #0]
 810598e:	4a07      	ldr	r2, [pc, #28]	; (81059ac <HAL_RCC_GetHCLKFreq+0x60>)
 8105990:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105992:	4b05      	ldr	r3, [pc, #20]	; (81059a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105994:	681b      	ldr	r3, [r3, #0]
}
 8105996:	4618      	mov	r0, r3
 8105998:	3708      	adds	r7, #8
 810599a:	46bd      	mov	sp, r7
 810599c:	bd80      	pop	{r7, pc}
 810599e:	bf00      	nop
 81059a0:	58024400 	.word	0x58024400
 81059a4:	0810e26c 	.word	0x0810e26c
 81059a8:	10000004 	.word	0x10000004
 81059ac:	10000000 	.word	0x10000000

081059b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81059b0:	b580      	push	{r7, lr}
 81059b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81059b4:	f7ff ffca 	bl	810594c <HAL_RCC_GetHCLKFreq>
 81059b8:	4602      	mov	r2, r0
 81059ba:	4b06      	ldr	r3, [pc, #24]	; (81059d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 81059bc:	69db      	ldr	r3, [r3, #28]
 81059be:	091b      	lsrs	r3, r3, #4
 81059c0:	f003 0307 	and.w	r3, r3, #7
 81059c4:	4904      	ldr	r1, [pc, #16]	; (81059d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81059c6:	5ccb      	ldrb	r3, [r1, r3]
 81059c8:	f003 031f 	and.w	r3, r3, #31
 81059cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81059d0:	4618      	mov	r0, r3
 81059d2:	bd80      	pop	{r7, pc}
 81059d4:	58024400 	.word	0x58024400
 81059d8:	0810e26c 	.word	0x0810e26c

081059dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81059dc:	b580      	push	{r7, lr}
 81059de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81059e0:	f7ff ffb4 	bl	810594c <HAL_RCC_GetHCLKFreq>
 81059e4:	4602      	mov	r2, r0
 81059e6:	4b06      	ldr	r3, [pc, #24]	; (8105a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 81059e8:	69db      	ldr	r3, [r3, #28]
 81059ea:	0a1b      	lsrs	r3, r3, #8
 81059ec:	f003 0307 	and.w	r3, r3, #7
 81059f0:	4904      	ldr	r1, [pc, #16]	; (8105a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 81059f2:	5ccb      	ldrb	r3, [r1, r3]
 81059f4:	f003 031f 	and.w	r3, r3, #31
 81059f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81059fc:	4618      	mov	r0, r3
 81059fe:	bd80      	pop	{r7, pc}
 8105a00:	58024400 	.word	0x58024400
 8105a04:	0810e26c 	.word	0x0810e26c

08105a08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105a08:	b580      	push	{r7, lr}
 8105a0a:	b086      	sub	sp, #24
 8105a0c:	af00      	add	r7, sp, #0
 8105a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105a10:	2300      	movs	r3, #0
 8105a12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105a14:	2300      	movs	r3, #0
 8105a16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105a20:	2b00      	cmp	r3, #0
 8105a22:	d03f      	beq.n	8105aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105a2c:	d02a      	beq.n	8105a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105a2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105a32:	d824      	bhi.n	8105a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a38:	d018      	beq.n	8105a6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a3e:	d81e      	bhi.n	8105a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105a40:	2b00      	cmp	r3, #0
 8105a42:	d003      	beq.n	8105a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8105a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a48:	d007      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8105a4a:	e018      	b.n	8105a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a4c:	4ba3      	ldr	r3, [pc, #652]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a50:	4aa2      	ldr	r2, [pc, #648]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105a58:	e015      	b.n	8105a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	3304      	adds	r3, #4
 8105a5e:	2102      	movs	r1, #2
 8105a60:	4618      	mov	r0, r3
 8105a62:	f001 f9d5 	bl	8106e10 <RCCEx_PLL2_Config>
 8105a66:	4603      	mov	r3, r0
 8105a68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105a6a:	e00c      	b.n	8105a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	3324      	adds	r3, #36	; 0x24
 8105a70:	2102      	movs	r1, #2
 8105a72:	4618      	mov	r0, r3
 8105a74:	f001 fa7e 	bl	8106f74 <RCCEx_PLL3_Config>
 8105a78:	4603      	mov	r3, r0
 8105a7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105a7c:	e003      	b.n	8105a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105a7e:	2301      	movs	r3, #1
 8105a80:	75fb      	strb	r3, [r7, #23]
      break;
 8105a82:	e000      	b.n	8105a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8105a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a86:	7dfb      	ldrb	r3, [r7, #23]
 8105a88:	2b00      	cmp	r3, #0
 8105a8a:	d109      	bne.n	8105aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105a8c:	4b93      	ldr	r3, [pc, #588]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105a98:	4990      	ldr	r1, [pc, #576]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a9a:	4313      	orrs	r3, r2
 8105a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8105a9e:	e001      	b.n	8105aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105aa0:	7dfb      	ldrb	r3, [r7, #23]
 8105aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	681b      	ldr	r3, [r3, #0]
 8105aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105aac:	2b00      	cmp	r3, #0
 8105aae:	d03d      	beq.n	8105b2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ab4:	2b04      	cmp	r3, #4
 8105ab6:	d826      	bhi.n	8105b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8105ab8:	a201      	add	r2, pc, #4	; (adr r2, 8105ac0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8105aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105abe:	bf00      	nop
 8105ac0:	08105ad5 	.word	0x08105ad5
 8105ac4:	08105ae3 	.word	0x08105ae3
 8105ac8:	08105af5 	.word	0x08105af5
 8105acc:	08105b0d 	.word	0x08105b0d
 8105ad0:	08105b0d 	.word	0x08105b0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ad4:	4b81      	ldr	r3, [pc, #516]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ad8:	4a80      	ldr	r2, [pc, #512]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105ae0:	e015      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	3304      	adds	r3, #4
 8105ae6:	2100      	movs	r1, #0
 8105ae8:	4618      	mov	r0, r3
 8105aea:	f001 f991 	bl	8106e10 <RCCEx_PLL2_Config>
 8105aee:	4603      	mov	r3, r0
 8105af0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105af2:	e00c      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	3324      	adds	r3, #36	; 0x24
 8105af8:	2100      	movs	r1, #0
 8105afa:	4618      	mov	r0, r3
 8105afc:	f001 fa3a 	bl	8106f74 <RCCEx_PLL3_Config>
 8105b00:	4603      	mov	r3, r0
 8105b02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b04:	e003      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105b06:	2301      	movs	r3, #1
 8105b08:	75fb      	strb	r3, [r7, #23]
      break;
 8105b0a:	e000      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b0e:	7dfb      	ldrb	r3, [r7, #23]
 8105b10:	2b00      	cmp	r3, #0
 8105b12:	d109      	bne.n	8105b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105b14:	4b71      	ldr	r3, [pc, #452]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105b18:	f023 0207 	bic.w	r2, r3, #7
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b20:	496e      	ldr	r1, [pc, #440]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b22:	4313      	orrs	r3, r2
 8105b24:	650b      	str	r3, [r1, #80]	; 0x50
 8105b26:	e001      	b.n	8105b2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b28:	7dfb      	ldrb	r3, [r7, #23]
 8105b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	d042      	beq.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b40:	d02b      	beq.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8105b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b46:	d825      	bhi.n	8105b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105b48:	2bc0      	cmp	r3, #192	; 0xc0
 8105b4a:	d028      	beq.n	8105b9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105b4c:	2bc0      	cmp	r3, #192	; 0xc0
 8105b4e:	d821      	bhi.n	8105b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105b50:	2b80      	cmp	r3, #128	; 0x80
 8105b52:	d016      	beq.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8105b54:	2b80      	cmp	r3, #128	; 0x80
 8105b56:	d81d      	bhi.n	8105b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105b58:	2b00      	cmp	r3, #0
 8105b5a:	d002      	beq.n	8105b62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105b5c:	2b40      	cmp	r3, #64	; 0x40
 8105b5e:	d007      	beq.n	8105b70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105b60:	e018      	b.n	8105b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b62:	4b5e      	ldr	r3, [pc, #376]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b66:	4a5d      	ldr	r2, [pc, #372]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105b6e:	e017      	b.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	3304      	adds	r3, #4
 8105b74:	2100      	movs	r1, #0
 8105b76:	4618      	mov	r0, r3
 8105b78:	f001 f94a 	bl	8106e10 <RCCEx_PLL2_Config>
 8105b7c:	4603      	mov	r3, r0
 8105b7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105b80:	e00e      	b.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	3324      	adds	r3, #36	; 0x24
 8105b86:	2100      	movs	r1, #0
 8105b88:	4618      	mov	r0, r3
 8105b8a:	f001 f9f3 	bl	8106f74 <RCCEx_PLL3_Config>
 8105b8e:	4603      	mov	r3, r0
 8105b90:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105b92:	e005      	b.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105b94:	2301      	movs	r3, #1
 8105b96:	75fb      	strb	r3, [r7, #23]
      break;
 8105b98:	e002      	b.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105b9a:	bf00      	nop
 8105b9c:	e000      	b.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ba0:	7dfb      	ldrb	r3, [r7, #23]
 8105ba2:	2b00      	cmp	r3, #0
 8105ba4:	d109      	bne.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105ba6:	4b4d      	ldr	r3, [pc, #308]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105baa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bb2:	494a      	ldr	r1, [pc, #296]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bb4:	4313      	orrs	r3, r2
 8105bb6:	650b      	str	r3, [r1, #80]	; 0x50
 8105bb8:	e001      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bba:	7dfb      	ldrb	r3, [r7, #23]
 8105bbc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	681b      	ldr	r3, [r3, #0]
 8105bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105bc6:	2b00      	cmp	r3, #0
 8105bc8:	d049      	beq.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105bd4:	d030      	beq.n	8105c38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105bda:	d82a      	bhi.n	8105c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105bdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105be0:	d02c      	beq.n	8105c3c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105be2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105be6:	d824      	bhi.n	8105c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105bec:	d018      	beq.n	8105c20 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105bf2:	d81e      	bhi.n	8105c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d003      	beq.n	8105c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105bfc:	d007      	beq.n	8105c0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105bfe:	e018      	b.n	8105c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c00:	4b36      	ldr	r3, [pc, #216]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c04:	4a35      	ldr	r2, [pc, #212]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c0c:	e017      	b.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	3304      	adds	r3, #4
 8105c12:	2100      	movs	r1, #0
 8105c14:	4618      	mov	r0, r3
 8105c16:	f001 f8fb 	bl	8106e10 <RCCEx_PLL2_Config>
 8105c1a:	4603      	mov	r3, r0
 8105c1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105c1e:	e00e      	b.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	3324      	adds	r3, #36	; 0x24
 8105c24:	2100      	movs	r1, #0
 8105c26:	4618      	mov	r0, r3
 8105c28:	f001 f9a4 	bl	8106f74 <RCCEx_PLL3_Config>
 8105c2c:	4603      	mov	r3, r0
 8105c2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c30:	e005      	b.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105c32:	2301      	movs	r3, #1
 8105c34:	75fb      	strb	r3, [r7, #23]
      break;
 8105c36:	e002      	b.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105c38:	bf00      	nop
 8105c3a:	e000      	b.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c3e:	7dfb      	ldrb	r3, [r7, #23]
 8105c40:	2b00      	cmp	r3, #0
 8105c42:	d10a      	bne.n	8105c5a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105c44:	4b25      	ldr	r3, [pc, #148]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105c52:	4922      	ldr	r1, [pc, #136]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c54:	4313      	orrs	r3, r2
 8105c56:	658b      	str	r3, [r1, #88]	; 0x58
 8105c58:	e001      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c5a:	7dfb      	ldrb	r3, [r7, #23]
 8105c5c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d04b      	beq.n	8105d02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105c74:	d030      	beq.n	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105c7a:	d82a      	bhi.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105c7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105c80:	d02e      	beq.n	8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8105c82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105c86:	d824      	bhi.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105c8c:	d018      	beq.n	8105cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105c92:	d81e      	bhi.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	d003      	beq.n	8105ca0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105c9c:	d007      	beq.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105c9e:	e018      	b.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ca0:	4b0e      	ldr	r3, [pc, #56]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ca4:	4a0d      	ldr	r2, [pc, #52]	; (8105cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105cac:	e019      	b.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	3304      	adds	r3, #4
 8105cb2:	2100      	movs	r1, #0
 8105cb4:	4618      	mov	r0, r3
 8105cb6:	f001 f8ab 	bl	8106e10 <RCCEx_PLL2_Config>
 8105cba:	4603      	mov	r3, r0
 8105cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105cbe:	e010      	b.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	3324      	adds	r3, #36	; 0x24
 8105cc4:	2100      	movs	r1, #0
 8105cc6:	4618      	mov	r0, r3
 8105cc8:	f001 f954 	bl	8106f74 <RCCEx_PLL3_Config>
 8105ccc:	4603      	mov	r3, r0
 8105cce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105cd0:	e007      	b.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105cd2:	2301      	movs	r3, #1
 8105cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8105cd6:	e004      	b.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105cd8:	bf00      	nop
 8105cda:	e002      	b.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105cdc:	58024400 	.word	0x58024400
      break;
 8105ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ce2:	7dfb      	ldrb	r3, [r7, #23]
 8105ce4:	2b00      	cmp	r3, #0
 8105ce6:	d10a      	bne.n	8105cfe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105ce8:	4b99      	ldr	r3, [pc, #612]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105cec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105cf6:	4996      	ldr	r1, [pc, #600]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105cf8:	4313      	orrs	r3, r2
 8105cfa:	658b      	str	r3, [r1, #88]	; 0x58
 8105cfc:	e001      	b.n	8105d02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cfe:	7dfb      	ldrb	r3, [r7, #23]
 8105d00:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105d0a:	2b00      	cmp	r3, #0
 8105d0c:	d032      	beq.n	8105d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105d12:	2b30      	cmp	r3, #48	; 0x30
 8105d14:	d01c      	beq.n	8105d50 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105d16:	2b30      	cmp	r3, #48	; 0x30
 8105d18:	d817      	bhi.n	8105d4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105d1a:	2b20      	cmp	r3, #32
 8105d1c:	d00c      	beq.n	8105d38 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8105d1e:	2b20      	cmp	r3, #32
 8105d20:	d813      	bhi.n	8105d4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105d22:	2b00      	cmp	r3, #0
 8105d24:	d016      	beq.n	8105d54 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105d26:	2b10      	cmp	r3, #16
 8105d28:	d10f      	bne.n	8105d4a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d2a:	4b89      	ldr	r3, [pc, #548]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d2e:	4a88      	ldr	r2, [pc, #544]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105d36:	e00e      	b.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	3304      	adds	r3, #4
 8105d3c:	2102      	movs	r1, #2
 8105d3e:	4618      	mov	r0, r3
 8105d40:	f001 f866 	bl	8106e10 <RCCEx_PLL2_Config>
 8105d44:	4603      	mov	r3, r0
 8105d46:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105d48:	e005      	b.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105d4a:	2301      	movs	r3, #1
 8105d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8105d4e:	e002      	b.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105d50:	bf00      	nop
 8105d52:	e000      	b.n	8105d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d56:	7dfb      	ldrb	r3, [r7, #23]
 8105d58:	2b00      	cmp	r3, #0
 8105d5a:	d109      	bne.n	8105d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105d5c:	4b7c      	ldr	r3, [pc, #496]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105d68:	4979      	ldr	r1, [pc, #484]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d6a:	4313      	orrs	r3, r2
 8105d6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105d6e:	e001      	b.n	8105d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d70:	7dfb      	ldrb	r3, [r7, #23]
 8105d72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	681b      	ldr	r3, [r3, #0]
 8105d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105d7c:	2b00      	cmp	r3, #0
 8105d7e:	d047      	beq.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105d88:	d030      	beq.n	8105dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8105d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105d8e:	d82a      	bhi.n	8105de6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105d90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105d94:	d02c      	beq.n	8105df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8105d96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105d9a:	d824      	bhi.n	8105de6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105da0:	d018      	beq.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8105da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105da6:	d81e      	bhi.n	8105de6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105da8:	2b00      	cmp	r3, #0
 8105daa:	d003      	beq.n	8105db4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8105dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105db0:	d007      	beq.n	8105dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8105db2:	e018      	b.n	8105de6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105db4:	4b66      	ldr	r3, [pc, #408]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105db8:	4a65      	ldr	r2, [pc, #404]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105dc0:	e017      	b.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	3304      	adds	r3, #4
 8105dc6:	2100      	movs	r1, #0
 8105dc8:	4618      	mov	r0, r3
 8105dca:	f001 f821 	bl	8106e10 <RCCEx_PLL2_Config>
 8105dce:	4603      	mov	r3, r0
 8105dd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105dd2:	e00e      	b.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105dd4:	687b      	ldr	r3, [r7, #4]
 8105dd6:	3324      	adds	r3, #36	; 0x24
 8105dd8:	2100      	movs	r1, #0
 8105dda:	4618      	mov	r0, r3
 8105ddc:	f001 f8ca 	bl	8106f74 <RCCEx_PLL3_Config>
 8105de0:	4603      	mov	r3, r0
 8105de2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105de4:	e005      	b.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105de6:	2301      	movs	r3, #1
 8105de8:	75fb      	strb	r3, [r7, #23]
      break;
 8105dea:	e002      	b.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105dec:	bf00      	nop
 8105dee:	e000      	b.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105df2:	7dfb      	ldrb	r3, [r7, #23]
 8105df4:	2b00      	cmp	r3, #0
 8105df6:	d109      	bne.n	8105e0c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105df8:	4b55      	ldr	r3, [pc, #340]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105dfc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e04:	4952      	ldr	r1, [pc, #328]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e06:	4313      	orrs	r3, r2
 8105e08:	650b      	str	r3, [r1, #80]	; 0x50
 8105e0a:	e001      	b.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e0c:	7dfb      	ldrb	r3, [r7, #23]
 8105e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105e18:	2b00      	cmp	r3, #0
 8105e1a:	d049      	beq.n	8105eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105e24:	d02e      	beq.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105e2a:	d828      	bhi.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105e2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105e30:	d02a      	beq.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8105e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105e36:	d822      	bhi.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105e3c:	d026      	beq.n	8105e8c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8105e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105e42:	d81c      	bhi.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105e48:	d010      	beq.n	8105e6c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105e4e:	d816      	bhi.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105e50:	2b00      	cmp	r3, #0
 8105e52:	d01d      	beq.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105e58:	d111      	bne.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	3304      	adds	r3, #4
 8105e5e:	2101      	movs	r1, #1
 8105e60:	4618      	mov	r0, r3
 8105e62:	f000 ffd5 	bl	8106e10 <RCCEx_PLL2_Config>
 8105e66:	4603      	mov	r3, r0
 8105e68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105e6a:	e012      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	3324      	adds	r3, #36	; 0x24
 8105e70:	2101      	movs	r1, #1
 8105e72:	4618      	mov	r0, r3
 8105e74:	f001 f87e 	bl	8106f74 <RCCEx_PLL3_Config>
 8105e78:	4603      	mov	r3, r0
 8105e7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105e7c:	e009      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105e7e:	2301      	movs	r3, #1
 8105e80:	75fb      	strb	r3, [r7, #23]
      break;
 8105e82:	e006      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e84:	bf00      	nop
 8105e86:	e004      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e88:	bf00      	nop
 8105e8a:	e002      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e8c:	bf00      	nop
 8105e8e:	e000      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e92:	7dfb      	ldrb	r3, [r7, #23]
 8105e94:	2b00      	cmp	r3, #0
 8105e96:	d109      	bne.n	8105eac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105e98:	4b2d      	ldr	r3, [pc, #180]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105ea4:	492a      	ldr	r1, [pc, #168]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105ea6:	4313      	orrs	r3, r2
 8105ea8:	650b      	str	r3, [r1, #80]	; 0x50
 8105eaa:	e001      	b.n	8105eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105eac:	7dfb      	ldrb	r3, [r7, #23]
 8105eae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105eb8:	2b00      	cmp	r3, #0
 8105eba:	d04d      	beq.n	8105f58 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105ec6:	d02e      	beq.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8105ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105ecc:	d828      	bhi.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105ed2:	d02a      	beq.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8105ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105ed8:	d822      	bhi.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105eda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105ede:	d026      	beq.n	8105f2e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8105ee0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105ee4:	d81c      	bhi.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105eea:	d010      	beq.n	8105f0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8105eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ef0:	d816      	bhi.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105ef2:	2b00      	cmp	r3, #0
 8105ef4:	d01d      	beq.n	8105f32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8105ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105efa:	d111      	bne.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	3304      	adds	r3, #4
 8105f00:	2101      	movs	r1, #1
 8105f02:	4618      	mov	r0, r3
 8105f04:	f000 ff84 	bl	8106e10 <RCCEx_PLL2_Config>
 8105f08:	4603      	mov	r3, r0
 8105f0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105f0c:	e012      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	3324      	adds	r3, #36	; 0x24
 8105f12:	2101      	movs	r1, #1
 8105f14:	4618      	mov	r0, r3
 8105f16:	f001 f82d 	bl	8106f74 <RCCEx_PLL3_Config>
 8105f1a:	4603      	mov	r3, r0
 8105f1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105f1e:	e009      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105f20:	2301      	movs	r3, #1
 8105f22:	75fb      	strb	r3, [r7, #23]
      break;
 8105f24:	e006      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105f26:	bf00      	nop
 8105f28:	e004      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105f2a:	bf00      	nop
 8105f2c:	e002      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105f2e:	bf00      	nop
 8105f30:	e000      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105f34:	7dfb      	ldrb	r3, [r7, #23]
 8105f36:	2b00      	cmp	r3, #0
 8105f38:	d10c      	bne.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105f3a:	4b05      	ldr	r3, [pc, #20]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105f3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105f48:	4901      	ldr	r1, [pc, #4]	; (8105f50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f4a:	4313      	orrs	r3, r2
 8105f4c:	658b      	str	r3, [r1, #88]	; 0x58
 8105f4e:	e003      	b.n	8105f58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f54:	7dfb      	ldrb	r3, [r7, #23]
 8105f56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105f60:	2b00      	cmp	r3, #0
 8105f62:	d02f      	beq.n	8105fc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f6c:	d00e      	beq.n	8105f8c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8105f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f72:	d814      	bhi.n	8105f9e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d015      	beq.n	8105fa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8105f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105f7c:	d10f      	bne.n	8105f9e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f7e:	4bb0      	ldr	r3, [pc, #704]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f82:	4aaf      	ldr	r2, [pc, #700]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105f8a:	e00c      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	3304      	adds	r3, #4
 8105f90:	2101      	movs	r1, #1
 8105f92:	4618      	mov	r0, r3
 8105f94:	f000 ff3c 	bl	8106e10 <RCCEx_PLL2_Config>
 8105f98:	4603      	mov	r3, r0
 8105f9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105f9c:	e003      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105f9e:	2301      	movs	r3, #1
 8105fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8105fa2:	e000      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105fa6:	7dfb      	ldrb	r3, [r7, #23]
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	d109      	bne.n	8105fc0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105fac:	4ba4      	ldr	r3, [pc, #656]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105fb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105fb8:	49a1      	ldr	r1, [pc, #644]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fba:	4313      	orrs	r3, r2
 8105fbc:	650b      	str	r3, [r1, #80]	; 0x50
 8105fbe:	e001      	b.n	8105fc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fc0:	7dfb      	ldrb	r3, [r7, #23]
 8105fc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105fcc:	2b00      	cmp	r3, #0
 8105fce:	d032      	beq.n	8106036 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105fd4:	2b03      	cmp	r3, #3
 8105fd6:	d81b      	bhi.n	8106010 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8105fd8:	a201      	add	r2, pc, #4	; (adr r2, 8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8105fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fde:	bf00      	nop
 8105fe0:	08106017 	.word	0x08106017
 8105fe4:	08105ff1 	.word	0x08105ff1
 8105fe8:	08105fff 	.word	0x08105fff
 8105fec:	08106017 	.word	0x08106017
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ff0:	4b93      	ldr	r3, [pc, #588]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ff4:	4a92      	ldr	r2, [pc, #584]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105ffc:	e00c      	b.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	3304      	adds	r3, #4
 8106002:	2102      	movs	r1, #2
 8106004:	4618      	mov	r0, r3
 8106006:	f000 ff03 	bl	8106e10 <RCCEx_PLL2_Config>
 810600a:	4603      	mov	r3, r0
 810600c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810600e:	e003      	b.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106010:	2301      	movs	r3, #1
 8106012:	75fb      	strb	r3, [r7, #23]
      break;
 8106014:	e000      	b.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8106016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106018:	7dfb      	ldrb	r3, [r7, #23]
 810601a:	2b00      	cmp	r3, #0
 810601c:	d109      	bne.n	8106032 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810601e:	4b88      	ldr	r3, [pc, #544]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106022:	f023 0203 	bic.w	r2, r3, #3
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810602a:	4985      	ldr	r1, [pc, #532]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810602c:	4313      	orrs	r3, r2
 810602e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106030:	e001      	b.n	8106036 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106032:	7dfb      	ldrb	r3, [r7, #23]
 8106034:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810603e:	2b00      	cmp	r3, #0
 8106040:	f000 8088 	beq.w	8106154 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106044:	4b7f      	ldr	r3, [pc, #508]	; (8106244 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	4a7e      	ldr	r2, [pc, #504]	; (8106244 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810604e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106050:	f7fc fb86 	bl	8102760 <HAL_GetTick>
 8106054:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106056:	e009      	b.n	810606c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106058:	f7fc fb82 	bl	8102760 <HAL_GetTick>
 810605c:	4602      	mov	r2, r0
 810605e:	693b      	ldr	r3, [r7, #16]
 8106060:	1ad3      	subs	r3, r2, r3
 8106062:	2b64      	cmp	r3, #100	; 0x64
 8106064:	d902      	bls.n	810606c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8106066:	2303      	movs	r3, #3
 8106068:	75fb      	strb	r3, [r7, #23]
        break;
 810606a:	e005      	b.n	8106078 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810606c:	4b75      	ldr	r3, [pc, #468]	; (8106244 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106074:	2b00      	cmp	r3, #0
 8106076:	d0ef      	beq.n	8106058 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8106078:	7dfb      	ldrb	r3, [r7, #23]
 810607a:	2b00      	cmp	r3, #0
 810607c:	d168      	bne.n	8106150 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810607e:	4b70      	ldr	r3, [pc, #448]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106080:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106088:	4053      	eors	r3, r2
 810608a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810608e:	2b00      	cmp	r3, #0
 8106090:	d013      	beq.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106092:	4b6b      	ldr	r3, [pc, #428]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810609a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810609c:	4b68      	ldr	r3, [pc, #416]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060a0:	4a67      	ldr	r2, [pc, #412]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81060a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81060a8:	4b65      	ldr	r3, [pc, #404]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060ac:	4a64      	ldr	r2, [pc, #400]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81060b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81060b4:	4a62      	ldr	r2, [pc, #392]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060b6:	68fb      	ldr	r3, [r7, #12]
 81060b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81060c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81060c4:	d115      	bne.n	81060f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81060c6:	f7fc fb4b 	bl	8102760 <HAL_GetTick>
 81060ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81060cc:	e00b      	b.n	81060e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81060ce:	f7fc fb47 	bl	8102760 <HAL_GetTick>
 81060d2:	4602      	mov	r2, r0
 81060d4:	693b      	ldr	r3, [r7, #16]
 81060d6:	1ad3      	subs	r3, r2, r3
 81060d8:	f241 3288 	movw	r2, #5000	; 0x1388
 81060dc:	4293      	cmp	r3, r2
 81060de:	d902      	bls.n	81060e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81060e0:	2303      	movs	r3, #3
 81060e2:	75fb      	strb	r3, [r7, #23]
            break;
 81060e4:	e005      	b.n	81060f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81060e6:	4b56      	ldr	r3, [pc, #344]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060ea:	f003 0302 	and.w	r3, r3, #2
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	d0ed      	beq.n	81060ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81060f2:	7dfb      	ldrb	r3, [r7, #23]
 81060f4:	2b00      	cmp	r3, #0
 81060f6:	d128      	bne.n	810614a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81060fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106106:	d10f      	bne.n	8106128 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8106108:	4b4d      	ldr	r3, [pc, #308]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810610a:	691b      	ldr	r3, [r3, #16]
 810610c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106116:	091b      	lsrs	r3, r3, #4
 8106118:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810611c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106120:	4947      	ldr	r1, [pc, #284]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106122:	4313      	orrs	r3, r2
 8106124:	610b      	str	r3, [r1, #16]
 8106126:	e005      	b.n	8106134 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8106128:	4b45      	ldr	r3, [pc, #276]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810612a:	691b      	ldr	r3, [r3, #16]
 810612c:	4a44      	ldr	r2, [pc, #272]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810612e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106132:	6113      	str	r3, [r2, #16]
 8106134:	4b42      	ldr	r3, [pc, #264]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810613e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106142:	493f      	ldr	r1, [pc, #252]	; (8106240 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106144:	4313      	orrs	r3, r2
 8106146:	670b      	str	r3, [r1, #112]	; 0x70
 8106148:	e004      	b.n	8106154 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810614a:	7dfb      	ldrb	r3, [r7, #23]
 810614c:	75bb      	strb	r3, [r7, #22]
 810614e:	e001      	b.n	8106154 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106150:	7dfb      	ldrb	r3, [r7, #23]
 8106152:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	681b      	ldr	r3, [r3, #0]
 8106158:	f003 0301 	and.w	r3, r3, #1
 810615c:	2b00      	cmp	r3, #0
 810615e:	f000 8083 	beq.w	8106268 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106166:	2b28      	cmp	r3, #40	; 0x28
 8106168:	d866      	bhi.n	8106238 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810616a:	a201      	add	r2, pc, #4	; (adr r2, 8106170 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106170:	08106249 	.word	0x08106249
 8106174:	08106239 	.word	0x08106239
 8106178:	08106239 	.word	0x08106239
 810617c:	08106239 	.word	0x08106239
 8106180:	08106239 	.word	0x08106239
 8106184:	08106239 	.word	0x08106239
 8106188:	08106239 	.word	0x08106239
 810618c:	08106239 	.word	0x08106239
 8106190:	08106215 	.word	0x08106215
 8106194:	08106239 	.word	0x08106239
 8106198:	08106239 	.word	0x08106239
 810619c:	08106239 	.word	0x08106239
 81061a0:	08106239 	.word	0x08106239
 81061a4:	08106239 	.word	0x08106239
 81061a8:	08106239 	.word	0x08106239
 81061ac:	08106239 	.word	0x08106239
 81061b0:	08106227 	.word	0x08106227
 81061b4:	08106239 	.word	0x08106239
 81061b8:	08106239 	.word	0x08106239
 81061bc:	08106239 	.word	0x08106239
 81061c0:	08106239 	.word	0x08106239
 81061c4:	08106239 	.word	0x08106239
 81061c8:	08106239 	.word	0x08106239
 81061cc:	08106239 	.word	0x08106239
 81061d0:	08106249 	.word	0x08106249
 81061d4:	08106239 	.word	0x08106239
 81061d8:	08106239 	.word	0x08106239
 81061dc:	08106239 	.word	0x08106239
 81061e0:	08106239 	.word	0x08106239
 81061e4:	08106239 	.word	0x08106239
 81061e8:	08106239 	.word	0x08106239
 81061ec:	08106239 	.word	0x08106239
 81061f0:	08106249 	.word	0x08106249
 81061f4:	08106239 	.word	0x08106239
 81061f8:	08106239 	.word	0x08106239
 81061fc:	08106239 	.word	0x08106239
 8106200:	08106239 	.word	0x08106239
 8106204:	08106239 	.word	0x08106239
 8106208:	08106239 	.word	0x08106239
 810620c:	08106239 	.word	0x08106239
 8106210:	08106249 	.word	0x08106249
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	3304      	adds	r3, #4
 8106218:	2101      	movs	r1, #1
 810621a:	4618      	mov	r0, r3
 810621c:	f000 fdf8 	bl	8106e10 <RCCEx_PLL2_Config>
 8106220:	4603      	mov	r3, r0
 8106222:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106224:	e011      	b.n	810624a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	3324      	adds	r3, #36	; 0x24
 810622a:	2101      	movs	r1, #1
 810622c:	4618      	mov	r0, r3
 810622e:	f000 fea1 	bl	8106f74 <RCCEx_PLL3_Config>
 8106232:	4603      	mov	r3, r0
 8106234:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106236:	e008      	b.n	810624a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106238:	2301      	movs	r3, #1
 810623a:	75fb      	strb	r3, [r7, #23]
      break;
 810623c:	e005      	b.n	810624a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810623e:	bf00      	nop
 8106240:	58024400 	.word	0x58024400
 8106244:	58024800 	.word	0x58024800
      break;
 8106248:	bf00      	nop
    }

    if(ret == HAL_OK)
 810624a:	7dfb      	ldrb	r3, [r7, #23]
 810624c:	2b00      	cmp	r3, #0
 810624e:	d109      	bne.n	8106264 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106250:	4b96      	ldr	r3, [pc, #600]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106254:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810625c:	4993      	ldr	r1, [pc, #588]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810625e:	4313      	orrs	r3, r2
 8106260:	654b      	str	r3, [r1, #84]	; 0x54
 8106262:	e001      	b.n	8106268 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106264:	7dfb      	ldrb	r3, [r7, #23]
 8106266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	681b      	ldr	r3, [r3, #0]
 810626c:	f003 0302 	and.w	r3, r3, #2
 8106270:	2b00      	cmp	r3, #0
 8106272:	d038      	beq.n	81062e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106278:	2b05      	cmp	r3, #5
 810627a:	d821      	bhi.n	81062c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810627c:	a201      	add	r2, pc, #4	; (adr r2, 8106284 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106282:	bf00      	nop
 8106284:	081062c7 	.word	0x081062c7
 8106288:	0810629d 	.word	0x0810629d
 810628c:	081062af 	.word	0x081062af
 8106290:	081062c7 	.word	0x081062c7
 8106294:	081062c7 	.word	0x081062c7
 8106298:	081062c7 	.word	0x081062c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	3304      	adds	r3, #4
 81062a0:	2101      	movs	r1, #1
 81062a2:	4618      	mov	r0, r3
 81062a4:	f000 fdb4 	bl	8106e10 <RCCEx_PLL2_Config>
 81062a8:	4603      	mov	r3, r0
 81062aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81062ac:	e00c      	b.n	81062c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	3324      	adds	r3, #36	; 0x24
 81062b2:	2101      	movs	r1, #1
 81062b4:	4618      	mov	r0, r3
 81062b6:	f000 fe5d 	bl	8106f74 <RCCEx_PLL3_Config>
 81062ba:	4603      	mov	r3, r0
 81062bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81062be:	e003      	b.n	81062c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81062c0:	2301      	movs	r3, #1
 81062c2:	75fb      	strb	r3, [r7, #23]
      break;
 81062c4:	e000      	b.n	81062c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81062c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81062c8:	7dfb      	ldrb	r3, [r7, #23]
 81062ca:	2b00      	cmp	r3, #0
 81062cc:	d109      	bne.n	81062e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81062ce:	4b77      	ldr	r3, [pc, #476]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81062d2:	f023 0207 	bic.w	r2, r3, #7
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81062da:	4974      	ldr	r1, [pc, #464]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81062dc:	4313      	orrs	r3, r2
 81062de:	654b      	str	r3, [r1, #84]	; 0x54
 81062e0:	e001      	b.n	81062e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062e2:	7dfb      	ldrb	r3, [r7, #23]
 81062e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81062e6:	687b      	ldr	r3, [r7, #4]
 81062e8:	681b      	ldr	r3, [r3, #0]
 81062ea:	f003 0304 	and.w	r3, r3, #4
 81062ee:	2b00      	cmp	r3, #0
 81062f0:	d03a      	beq.n	8106368 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81062f8:	2b05      	cmp	r3, #5
 81062fa:	d821      	bhi.n	8106340 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81062fc:	a201      	add	r2, pc, #4	; (adr r2, 8106304 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106302:	bf00      	nop
 8106304:	08106347 	.word	0x08106347
 8106308:	0810631d 	.word	0x0810631d
 810630c:	0810632f 	.word	0x0810632f
 8106310:	08106347 	.word	0x08106347
 8106314:	08106347 	.word	0x08106347
 8106318:	08106347 	.word	0x08106347
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	3304      	adds	r3, #4
 8106320:	2101      	movs	r1, #1
 8106322:	4618      	mov	r0, r3
 8106324:	f000 fd74 	bl	8106e10 <RCCEx_PLL2_Config>
 8106328:	4603      	mov	r3, r0
 810632a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810632c:	e00c      	b.n	8106348 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810632e:	687b      	ldr	r3, [r7, #4]
 8106330:	3324      	adds	r3, #36	; 0x24
 8106332:	2101      	movs	r1, #1
 8106334:	4618      	mov	r0, r3
 8106336:	f000 fe1d 	bl	8106f74 <RCCEx_PLL3_Config>
 810633a:	4603      	mov	r3, r0
 810633c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810633e:	e003      	b.n	8106348 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106340:	2301      	movs	r3, #1
 8106342:	75fb      	strb	r3, [r7, #23]
      break;
 8106344:	e000      	b.n	8106348 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8106346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106348:	7dfb      	ldrb	r3, [r7, #23]
 810634a:	2b00      	cmp	r3, #0
 810634c:	d10a      	bne.n	8106364 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810634e:	4b57      	ldr	r3, [pc, #348]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106352:	f023 0207 	bic.w	r2, r3, #7
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810635c:	4953      	ldr	r1, [pc, #332]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810635e:	4313      	orrs	r3, r2
 8106360:	658b      	str	r3, [r1, #88]	; 0x58
 8106362:	e001      	b.n	8106368 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106364:	7dfb      	ldrb	r3, [r7, #23]
 8106366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	f003 0320 	and.w	r3, r3, #32
 8106370:	2b00      	cmp	r3, #0
 8106372:	d04b      	beq.n	810640c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810637a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810637e:	d02e      	beq.n	81063de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8106380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106384:	d828      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810638a:	d02a      	beq.n	81063e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810638c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106390:	d822      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106396:	d026      	beq.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106398:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810639c:	d81c      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810639e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81063a2:	d010      	beq.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81063a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81063a8:	d816      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81063aa:	2b00      	cmp	r3, #0
 81063ac:	d01d      	beq.n	81063ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81063ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81063b2:	d111      	bne.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	3304      	adds	r3, #4
 81063b8:	2100      	movs	r1, #0
 81063ba:	4618      	mov	r0, r3
 81063bc:	f000 fd28 	bl	8106e10 <RCCEx_PLL2_Config>
 81063c0:	4603      	mov	r3, r0
 81063c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81063c4:	e012      	b.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	3324      	adds	r3, #36	; 0x24
 81063ca:	2102      	movs	r1, #2
 81063cc:	4618      	mov	r0, r3
 81063ce:	f000 fdd1 	bl	8106f74 <RCCEx_PLL3_Config>
 81063d2:	4603      	mov	r3, r0
 81063d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81063d6:	e009      	b.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81063d8:	2301      	movs	r3, #1
 81063da:	75fb      	strb	r3, [r7, #23]
      break;
 81063dc:	e006      	b.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81063de:	bf00      	nop
 81063e0:	e004      	b.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81063e2:	bf00      	nop
 81063e4:	e002      	b.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81063e6:	bf00      	nop
 81063e8:	e000      	b.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81063ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063ec:	7dfb      	ldrb	r3, [r7, #23]
 81063ee:	2b00      	cmp	r3, #0
 81063f0:	d10a      	bne.n	8106408 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81063f2:	4b2e      	ldr	r3, [pc, #184]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106400:	492a      	ldr	r1, [pc, #168]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106402:	4313      	orrs	r3, r2
 8106404:	654b      	str	r3, [r1, #84]	; 0x54
 8106406:	e001      	b.n	810640c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106408:	7dfb      	ldrb	r3, [r7, #23]
 810640a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106414:	2b00      	cmp	r3, #0
 8106416:	d04d      	beq.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810641e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106422:	d02e      	beq.n	8106482 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8106424:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106428:	d828      	bhi.n	810647c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810642a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810642e:	d02a      	beq.n	8106486 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8106430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106434:	d822      	bhi.n	810647c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8106436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810643a:	d026      	beq.n	810648a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810643c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106440:	d81c      	bhi.n	810647c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8106442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106446:	d010      	beq.n	810646a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8106448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810644c:	d816      	bhi.n	810647c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810644e:	2b00      	cmp	r3, #0
 8106450:	d01d      	beq.n	810648e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8106452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106456:	d111      	bne.n	810647c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	3304      	adds	r3, #4
 810645c:	2100      	movs	r1, #0
 810645e:	4618      	mov	r0, r3
 8106460:	f000 fcd6 	bl	8106e10 <RCCEx_PLL2_Config>
 8106464:	4603      	mov	r3, r0
 8106466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8106468:	e012      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	3324      	adds	r3, #36	; 0x24
 810646e:	2102      	movs	r1, #2
 8106470:	4618      	mov	r0, r3
 8106472:	f000 fd7f 	bl	8106f74 <RCCEx_PLL3_Config>
 8106476:	4603      	mov	r3, r0
 8106478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810647a:	e009      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810647c:	2301      	movs	r3, #1
 810647e:	75fb      	strb	r3, [r7, #23]
      break;
 8106480:	e006      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8106482:	bf00      	nop
 8106484:	e004      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8106486:	bf00      	nop
 8106488:	e002      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810648a:	bf00      	nop
 810648c:	e000      	b.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106490:	7dfb      	ldrb	r3, [r7, #23]
 8106492:	2b00      	cmp	r3, #0
 8106494:	d10c      	bne.n	81064b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106496:	4b05      	ldr	r3, [pc, #20]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810649a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81064a4:	4901      	ldr	r1, [pc, #4]	; (81064ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81064a6:	4313      	orrs	r3, r2
 81064a8:	658b      	str	r3, [r1, #88]	; 0x58
 81064aa:	e003      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81064ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064b0:	7dfb      	ldrb	r3, [r7, #23]
 81064b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81064bc:	2b00      	cmp	r3, #0
 81064be:	d04b      	beq.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81064c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81064ca:	d02e      	beq.n	810652a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81064cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81064d0:	d828      	bhi.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81064d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81064d6:	d02a      	beq.n	810652e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81064d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81064dc:	d822      	bhi.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81064de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81064e2:	d026      	beq.n	8106532 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81064e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81064e8:	d81c      	bhi.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81064ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81064ee:	d010      	beq.n	8106512 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81064f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81064f4:	d816      	bhi.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81064f6:	2b00      	cmp	r3, #0
 81064f8:	d01d      	beq.n	8106536 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81064fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81064fe:	d111      	bne.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	3304      	adds	r3, #4
 8106504:	2100      	movs	r1, #0
 8106506:	4618      	mov	r0, r3
 8106508:	f000 fc82 	bl	8106e10 <RCCEx_PLL2_Config>
 810650c:	4603      	mov	r3, r0
 810650e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106510:	e012      	b.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	3324      	adds	r3, #36	; 0x24
 8106516:	2102      	movs	r1, #2
 8106518:	4618      	mov	r0, r3
 810651a:	f000 fd2b 	bl	8106f74 <RCCEx_PLL3_Config>
 810651e:	4603      	mov	r3, r0
 8106520:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106522:	e009      	b.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106524:	2301      	movs	r3, #1
 8106526:	75fb      	strb	r3, [r7, #23]
      break;
 8106528:	e006      	b.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810652a:	bf00      	nop
 810652c:	e004      	b.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810652e:	bf00      	nop
 8106530:	e002      	b.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106532:	bf00      	nop
 8106534:	e000      	b.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106538:	7dfb      	ldrb	r3, [r7, #23]
 810653a:	2b00      	cmp	r3, #0
 810653c:	d10a      	bne.n	8106554 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810653e:	4b9d      	ldr	r3, [pc, #628]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810654c:	4999      	ldr	r1, [pc, #612]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810654e:	4313      	orrs	r3, r2
 8106550:	658b      	str	r3, [r1, #88]	; 0x58
 8106552:	e001      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106554:	7dfb      	ldrb	r3, [r7, #23]
 8106556:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	f003 0308 	and.w	r3, r3, #8
 8106560:	2b00      	cmp	r3, #0
 8106562:	d01a      	beq.n	810659a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810656e:	d10a      	bne.n	8106586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	3324      	adds	r3, #36	; 0x24
 8106574:	2102      	movs	r1, #2
 8106576:	4618      	mov	r0, r3
 8106578:	f000 fcfc 	bl	8106f74 <RCCEx_PLL3_Config>
 810657c:	4603      	mov	r3, r0
 810657e:	2b00      	cmp	r3, #0
 8106580:	d001      	beq.n	8106586 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8106582:	2301      	movs	r3, #1
 8106584:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106586:	4b8b      	ldr	r3, [pc, #556]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810658a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106594:	4987      	ldr	r1, [pc, #540]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106596:	4313      	orrs	r3, r2
 8106598:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	681b      	ldr	r3, [r3, #0]
 810659e:	f003 0310 	and.w	r3, r3, #16
 81065a2:	2b00      	cmp	r3, #0
 81065a4:	d01a      	beq.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81065ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81065b0:	d10a      	bne.n	81065c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	3324      	adds	r3, #36	; 0x24
 81065b6:	2102      	movs	r1, #2
 81065b8:	4618      	mov	r0, r3
 81065ba:	f000 fcdb 	bl	8106f74 <RCCEx_PLL3_Config>
 81065be:	4603      	mov	r3, r0
 81065c0:	2b00      	cmp	r3, #0
 81065c2:	d001      	beq.n	81065c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81065c4:	2301      	movs	r3, #1
 81065c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81065c8:	4b7a      	ldr	r3, [pc, #488]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81065d6:	4977      	ldr	r1, [pc, #476]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81065d8:	4313      	orrs	r3, r2
 81065da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81065e4:	2b00      	cmp	r3, #0
 81065e6:	d034      	beq.n	8106652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81065ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065f2:	d01d      	beq.n	8106630 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81065f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065f8:	d817      	bhi.n	810662a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81065fa:	2b00      	cmp	r3, #0
 81065fc:	d003      	beq.n	8106606 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106602:	d009      	beq.n	8106618 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8106604:	e011      	b.n	810662a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	3304      	adds	r3, #4
 810660a:	2100      	movs	r1, #0
 810660c:	4618      	mov	r0, r3
 810660e:	f000 fbff 	bl	8106e10 <RCCEx_PLL2_Config>
 8106612:	4603      	mov	r3, r0
 8106614:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106616:	e00c      	b.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	3324      	adds	r3, #36	; 0x24
 810661c:	2102      	movs	r1, #2
 810661e:	4618      	mov	r0, r3
 8106620:	f000 fca8 	bl	8106f74 <RCCEx_PLL3_Config>
 8106624:	4603      	mov	r3, r0
 8106626:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106628:	e003      	b.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810662a:	2301      	movs	r3, #1
 810662c:	75fb      	strb	r3, [r7, #23]
      break;
 810662e:	e000      	b.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8106630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106632:	7dfb      	ldrb	r3, [r7, #23]
 8106634:	2b00      	cmp	r3, #0
 8106636:	d10a      	bne.n	810664e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106638:	4b5e      	ldr	r3, [pc, #376]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810663c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106646:	495b      	ldr	r1, [pc, #364]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106648:	4313      	orrs	r3, r2
 810664a:	658b      	str	r3, [r1, #88]	; 0x58
 810664c:	e001      	b.n	8106652 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810664e:	7dfb      	ldrb	r3, [r7, #23]
 8106650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810665a:	2b00      	cmp	r3, #0
 810665c:	d033      	beq.n	81066c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106668:	d01c      	beq.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810666a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810666e:	d816      	bhi.n	810669e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8106670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106674:	d003      	beq.n	810667e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8106676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810667a:	d007      	beq.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810667c:	e00f      	b.n	810669e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810667e:	4b4d      	ldr	r3, [pc, #308]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106682:	4a4c      	ldr	r2, [pc, #304]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810668a:	e00c      	b.n	81066a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	3324      	adds	r3, #36	; 0x24
 8106690:	2101      	movs	r1, #1
 8106692:	4618      	mov	r0, r3
 8106694:	f000 fc6e 	bl	8106f74 <RCCEx_PLL3_Config>
 8106698:	4603      	mov	r3, r0
 810669a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810669c:	e003      	b.n	81066a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810669e:	2301      	movs	r3, #1
 81066a0:	75fb      	strb	r3, [r7, #23]
      break;
 81066a2:	e000      	b.n	81066a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81066a6:	7dfb      	ldrb	r3, [r7, #23]
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d10a      	bne.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81066ac:	4b41      	ldr	r3, [pc, #260]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81066ba:	493e      	ldr	r1, [pc, #248]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066bc:	4313      	orrs	r3, r2
 81066be:	654b      	str	r3, [r1, #84]	; 0x54
 81066c0:	e001      	b.n	81066c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066c2:	7dfb      	ldrb	r3, [r7, #23]
 81066c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	681b      	ldr	r3, [r3, #0]
 81066ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	d029      	beq.n	8106726 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81066d6:	2b00      	cmp	r3, #0
 81066d8:	d003      	beq.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81066da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81066de:	d007      	beq.n	81066f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81066e0:	e00f      	b.n	8106702 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81066e2:	4b34      	ldr	r3, [pc, #208]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066e6:	4a33      	ldr	r2, [pc, #204]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81066ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81066ee:	e00b      	b.n	8106708 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	3304      	adds	r3, #4
 81066f4:	2102      	movs	r1, #2
 81066f6:	4618      	mov	r0, r3
 81066f8:	f000 fb8a 	bl	8106e10 <RCCEx_PLL2_Config>
 81066fc:	4603      	mov	r3, r0
 81066fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106700:	e002      	b.n	8106708 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8106702:	2301      	movs	r3, #1
 8106704:	75fb      	strb	r3, [r7, #23]
      break;
 8106706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106708:	7dfb      	ldrb	r3, [r7, #23]
 810670a:	2b00      	cmp	r3, #0
 810670c:	d109      	bne.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810670e:	4b29      	ldr	r3, [pc, #164]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106716:	687b      	ldr	r3, [r7, #4]
 8106718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810671a:	4926      	ldr	r1, [pc, #152]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810671c:	4313      	orrs	r3, r2
 810671e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106720:	e001      	b.n	8106726 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106722:	7dfb      	ldrb	r3, [r7, #23]
 8106724:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810672e:	2b00      	cmp	r3, #0
 8106730:	d00a      	beq.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8106732:	687b      	ldr	r3, [r7, #4]
 8106734:	3324      	adds	r3, #36	; 0x24
 8106736:	2102      	movs	r1, #2
 8106738:	4618      	mov	r0, r3
 810673a:	f000 fc1b 	bl	8106f74 <RCCEx_PLL3_Config>
 810673e:	4603      	mov	r3, r0
 8106740:	2b00      	cmp	r3, #0
 8106742:	d001      	beq.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8106744:	2301      	movs	r3, #1
 8106746:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106750:	2b00      	cmp	r3, #0
 8106752:	d033      	beq.n	81067bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810675c:	d017      	beq.n	810678e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810675e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106762:	d811      	bhi.n	8106788 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8106764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106768:	d013      	beq.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810676a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810676e:	d80b      	bhi.n	8106788 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8106770:	2b00      	cmp	r3, #0
 8106772:	d010      	beq.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8106774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106778:	d106      	bne.n	8106788 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810677a:	4b0e      	ldr	r3, [pc, #56]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810677e:	4a0d      	ldr	r2, [pc, #52]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8106786:	e007      	b.n	8106798 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106788:	2301      	movs	r3, #1
 810678a:	75fb      	strb	r3, [r7, #23]
      break;
 810678c:	e004      	b.n	8106798 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810678e:	bf00      	nop
 8106790:	e002      	b.n	8106798 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8106792:	bf00      	nop
 8106794:	e000      	b.n	8106798 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8106796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106798:	7dfb      	ldrb	r3, [r7, #23]
 810679a:	2b00      	cmp	r3, #0
 810679c:	d10c      	bne.n	81067b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810679e:	4b05      	ldr	r3, [pc, #20]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81067aa:	4902      	ldr	r1, [pc, #8]	; (81067b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067ac:	4313      	orrs	r3, r2
 81067ae:	654b      	str	r3, [r1, #84]	; 0x54
 81067b0:	e004      	b.n	81067bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81067b2:	bf00      	nop
 81067b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067b8:	7dfb      	ldrb	r3, [r7, #23]
 81067ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81067c4:	2b00      	cmp	r3, #0
 81067c6:	d008      	beq.n	81067da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81067c8:	4b31      	ldr	r3, [pc, #196]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067d4:	492e      	ldr	r1, [pc, #184]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067d6:	4313      	orrs	r3, r2
 81067d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	681b      	ldr	r3, [r3, #0]
 81067de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81067e2:	2b00      	cmp	r3, #0
 81067e4:	d009      	beq.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81067e6:	4b2a      	ldr	r3, [pc, #168]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067e8:	691b      	ldr	r3, [r3, #16]
 81067ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81067f4:	4926      	ldr	r1, [pc, #152]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067f6:	4313      	orrs	r3, r2
 81067f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106802:	2b00      	cmp	r3, #0
 8106804:	d008      	beq.n	8106818 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106806:	4b22      	ldr	r3, [pc, #136]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810680a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106812:	491f      	ldr	r1, [pc, #124]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106814:	4313      	orrs	r3, r2
 8106816:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106820:	2b00      	cmp	r3, #0
 8106822:	d00d      	beq.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106824:	4b1a      	ldr	r3, [pc, #104]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106826:	691b      	ldr	r3, [r3, #16]
 8106828:	4a19      	ldr	r2, [pc, #100]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810682a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810682e:	6113      	str	r3, [r2, #16]
 8106830:	4b17      	ldr	r3, [pc, #92]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106832:	691a      	ldr	r2, [r3, #16]
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810683a:	4915      	ldr	r1, [pc, #84]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810683c:	4313      	orrs	r3, r2
 810683e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	2b00      	cmp	r3, #0
 8106846:	da08      	bge.n	810685a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106848:	4b11      	ldr	r3, [pc, #68]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810684a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810684c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106854:	490e      	ldr	r1, [pc, #56]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106856:	4313      	orrs	r3, r2
 8106858:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106862:	2b00      	cmp	r3, #0
 8106864:	d009      	beq.n	810687a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106866:	4b0a      	ldr	r3, [pc, #40]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810686a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106874:	4906      	ldr	r1, [pc, #24]	; (8106890 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106876:	4313      	orrs	r3, r2
 8106878:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810687a:	7dbb      	ldrb	r3, [r7, #22]
 810687c:	2b00      	cmp	r3, #0
 810687e:	d101      	bne.n	8106884 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8106880:	2300      	movs	r3, #0
 8106882:	e000      	b.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8106884:	2301      	movs	r3, #1
}
 8106886:	4618      	mov	r0, r3
 8106888:	3718      	adds	r7, #24
 810688a:	46bd      	mov	sp, r7
 810688c:	bd80      	pop	{r7, pc}
 810688e:	bf00      	nop
 8106890:	58024400 	.word	0x58024400

08106894 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106894:	b580      	push	{r7, lr}
 8106896:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106898:	f7ff f858 	bl	810594c <HAL_RCC_GetHCLKFreq>
 810689c:	4602      	mov	r2, r0
 810689e:	4b06      	ldr	r3, [pc, #24]	; (81068b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81068a0:	6a1b      	ldr	r3, [r3, #32]
 81068a2:	091b      	lsrs	r3, r3, #4
 81068a4:	f003 0307 	and.w	r3, r3, #7
 81068a8:	4904      	ldr	r1, [pc, #16]	; (81068bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81068aa:	5ccb      	ldrb	r3, [r1, r3]
 81068ac:	f003 031f 	and.w	r3, r3, #31
 81068b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81068b4:	4618      	mov	r0, r3
 81068b6:	bd80      	pop	{r7, pc}
 81068b8:	58024400 	.word	0x58024400
 81068bc:	0810e26c 	.word	0x0810e26c

081068c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81068c0:	b480      	push	{r7}
 81068c2:	b089      	sub	sp, #36	; 0x24
 81068c4:	af00      	add	r7, sp, #0
 81068c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81068c8:	4ba1      	ldr	r3, [pc, #644]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068cc:	f003 0303 	and.w	r3, r3, #3
 81068d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81068d2:	4b9f      	ldr	r3, [pc, #636]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068d6:	0b1b      	lsrs	r3, r3, #12
 81068d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81068dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81068de:	4b9c      	ldr	r3, [pc, #624]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068e2:	091b      	lsrs	r3, r3, #4
 81068e4:	f003 0301 	and.w	r3, r3, #1
 81068e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81068ea:	4b99      	ldr	r3, [pc, #612]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81068ee:	08db      	lsrs	r3, r3, #3
 81068f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81068f4:	693a      	ldr	r2, [r7, #16]
 81068f6:	fb02 f303 	mul.w	r3, r2, r3
 81068fa:	ee07 3a90 	vmov	s15, r3
 81068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106906:	697b      	ldr	r3, [r7, #20]
 8106908:	2b00      	cmp	r3, #0
 810690a:	f000 8111 	beq.w	8106b30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810690e:	69bb      	ldr	r3, [r7, #24]
 8106910:	2b02      	cmp	r3, #2
 8106912:	f000 8083 	beq.w	8106a1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106916:	69bb      	ldr	r3, [r7, #24]
 8106918:	2b02      	cmp	r3, #2
 810691a:	f200 80a1 	bhi.w	8106a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810691e:	69bb      	ldr	r3, [r7, #24]
 8106920:	2b00      	cmp	r3, #0
 8106922:	d003      	beq.n	810692c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106924:	69bb      	ldr	r3, [r7, #24]
 8106926:	2b01      	cmp	r3, #1
 8106928:	d056      	beq.n	81069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810692a:	e099      	b.n	8106a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810692c:	4b88      	ldr	r3, [pc, #544]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	f003 0320 	and.w	r3, r3, #32
 8106934:	2b00      	cmp	r3, #0
 8106936:	d02d      	beq.n	8106994 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106938:	4b85      	ldr	r3, [pc, #532]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810693a:	681b      	ldr	r3, [r3, #0]
 810693c:	08db      	lsrs	r3, r3, #3
 810693e:	f003 0303 	and.w	r3, r3, #3
 8106942:	4a84      	ldr	r2, [pc, #528]	; (8106b54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106944:	fa22 f303 	lsr.w	r3, r2, r3
 8106948:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810694a:	68bb      	ldr	r3, [r7, #8]
 810694c:	ee07 3a90 	vmov	s15, r3
 8106950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106954:	697b      	ldr	r3, [r7, #20]
 8106956:	ee07 3a90 	vmov	s15, r3
 810695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106962:	4b7b      	ldr	r3, [pc, #492]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810696a:	ee07 3a90 	vmov	s15, r3
 810696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106972:	ed97 6a03 	vldr	s12, [r7, #12]
 8106976:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810698e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106992:	e087      	b.n	8106aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106994:	697b      	ldr	r3, [r7, #20]
 8106996:	ee07 3a90 	vmov	s15, r3
 810699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810699e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106b5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069a6:	4b6a      	ldr	r3, [pc, #424]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069ae:	ee07 3a90 	vmov	s15, r3
 81069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81069ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81069d6:	e065      	b.n	8106aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81069d8:	697b      	ldr	r3, [r7, #20]
 81069da:	ee07 3a90 	vmov	s15, r3
 81069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069ea:	4b59      	ldr	r3, [pc, #356]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069f2:	ee07 3a90 	vmov	s15, r3
 81069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 81069fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a1a:	e043      	b.n	8106aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106a1c:	697b      	ldr	r3, [r7, #20]
 8106a1e:	ee07 3a90 	vmov	s15, r3
 8106a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a2e:	4b48      	ldr	r3, [pc, #288]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a36:	ee07 3a90 	vmov	s15, r3
 8106a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a5e:	e021      	b.n	8106aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106a60:	697b      	ldr	r3, [r7, #20]
 8106a62:	ee07 3a90 	vmov	s15, r3
 8106a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a72:	4b37      	ldr	r3, [pc, #220]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a7a:	ee07 3a90 	vmov	s15, r3
 8106a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106aa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106aa4:	4b2a      	ldr	r3, [pc, #168]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106aa8:	0a5b      	lsrs	r3, r3, #9
 8106aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106aae:	ee07 3a90 	vmov	s15, r3
 8106ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8106ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106aca:	ee17 2a90 	vmov	r2, s15
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106ad2:	4b1f      	ldr	r3, [pc, #124]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ad6:	0c1b      	lsrs	r3, r3, #16
 8106ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106adc:	ee07 3a90 	vmov	s15, r3
 8106ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8106af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106af8:	ee17 2a90 	vmov	r2, s15
 8106afc:	687b      	ldr	r3, [r7, #4]
 8106afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106b00:	4b13      	ldr	r3, [pc, #76]	; (8106b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b04:	0e1b      	lsrs	r3, r3, #24
 8106b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b0a:	ee07 3a90 	vmov	s15, r3
 8106b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b26:	ee17 2a90 	vmov	r2, s15
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106b2e:	e008      	b.n	8106b42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	2200      	movs	r2, #0
 8106b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	2200      	movs	r2, #0
 8106b3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	2200      	movs	r2, #0
 8106b40:	609a      	str	r2, [r3, #8]
}
 8106b42:	bf00      	nop
 8106b44:	3724      	adds	r7, #36	; 0x24
 8106b46:	46bd      	mov	sp, r7
 8106b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b4c:	4770      	bx	lr
 8106b4e:	bf00      	nop
 8106b50:	58024400 	.word	0x58024400
 8106b54:	03d09000 	.word	0x03d09000
 8106b58:	46000000 	.word	0x46000000
 8106b5c:	4c742400 	.word	0x4c742400
 8106b60:	4a742400 	.word	0x4a742400
 8106b64:	4af42400 	.word	0x4af42400

08106b68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8106b68:	b480      	push	{r7}
 8106b6a:	b089      	sub	sp, #36	; 0x24
 8106b6c:	af00      	add	r7, sp, #0
 8106b6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106b70:	4ba1      	ldr	r3, [pc, #644]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b74:	f003 0303 	and.w	r3, r3, #3
 8106b78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8106b7a:	4b9f      	ldr	r3, [pc, #636]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b7e:	0d1b      	lsrs	r3, r3, #20
 8106b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106b84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106b86:	4b9c      	ldr	r3, [pc, #624]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b8a:	0a1b      	lsrs	r3, r3, #8
 8106b8c:	f003 0301 	and.w	r3, r3, #1
 8106b90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106b92:	4b99      	ldr	r3, [pc, #612]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106b96:	08db      	lsrs	r3, r3, #3
 8106b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106b9c:	693a      	ldr	r2, [r7, #16]
 8106b9e:	fb02 f303 	mul.w	r3, r2, r3
 8106ba2:	ee07 3a90 	vmov	s15, r3
 8106ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106bae:	697b      	ldr	r3, [r7, #20]
 8106bb0:	2b00      	cmp	r3, #0
 8106bb2:	f000 8111 	beq.w	8106dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106bb6:	69bb      	ldr	r3, [r7, #24]
 8106bb8:	2b02      	cmp	r3, #2
 8106bba:	f000 8083 	beq.w	8106cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106bbe:	69bb      	ldr	r3, [r7, #24]
 8106bc0:	2b02      	cmp	r3, #2
 8106bc2:	f200 80a1 	bhi.w	8106d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106bc6:	69bb      	ldr	r3, [r7, #24]
 8106bc8:	2b00      	cmp	r3, #0
 8106bca:	d003      	beq.n	8106bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106bcc:	69bb      	ldr	r3, [r7, #24]
 8106bce:	2b01      	cmp	r3, #1
 8106bd0:	d056      	beq.n	8106c80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106bd2:	e099      	b.n	8106d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106bd4:	4b88      	ldr	r3, [pc, #544]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	f003 0320 	and.w	r3, r3, #32
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d02d      	beq.n	8106c3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106be0:	4b85      	ldr	r3, [pc, #532]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	08db      	lsrs	r3, r3, #3
 8106be6:	f003 0303 	and.w	r3, r3, #3
 8106bea:	4a84      	ldr	r2, [pc, #528]	; (8106dfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106bec:	fa22 f303 	lsr.w	r3, r2, r3
 8106bf0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106bf2:	68bb      	ldr	r3, [r7, #8]
 8106bf4:	ee07 3a90 	vmov	s15, r3
 8106bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bfc:	697b      	ldr	r3, [r7, #20]
 8106bfe:	ee07 3a90 	vmov	s15, r3
 8106c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c0a:	4b7b      	ldr	r3, [pc, #492]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c12:	ee07 3a90 	vmov	s15, r3
 8106c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106c3a:	e087      	b.n	8106d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106c3c:	697b      	ldr	r3, [r7, #20]
 8106c3e:	ee07 3a90 	vmov	s15, r3
 8106c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106e04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c4e:	4b6a      	ldr	r3, [pc, #424]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c56:	ee07 3a90 	vmov	s15, r3
 8106c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106c7e:	e065      	b.n	8106d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106c80:	697b      	ldr	r3, [r7, #20]
 8106c82:	ee07 3a90 	vmov	s15, r3
 8106c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c92:	4b59      	ldr	r3, [pc, #356]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c9a:	ee07 3a90 	vmov	s15, r3
 8106c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ca6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106cc2:	e043      	b.n	8106d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106cc4:	697b      	ldr	r3, [r7, #20]
 8106cc6:	ee07 3a90 	vmov	s15, r3
 8106cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cd6:	4b48      	ldr	r3, [pc, #288]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106cde:	ee07 3a90 	vmov	s15, r3
 8106ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106cea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106d06:	e021      	b.n	8106d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106d08:	697b      	ldr	r3, [r7, #20]
 8106d0a:	ee07 3a90 	vmov	s15, r3
 8106d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d1a:	4b37      	ldr	r3, [pc, #220]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d22:	ee07 3a90 	vmov	s15, r3
 8106d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106d4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106d4c:	4b2a      	ldr	r3, [pc, #168]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d50:	0a5b      	lsrs	r3, r3, #9
 8106d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106d56:	ee07 3a90 	vmov	s15, r3
 8106d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8106d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106d72:	ee17 2a90 	vmov	r2, s15
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106d7a:	4b1f      	ldr	r3, [pc, #124]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d7e:	0c1b      	lsrs	r3, r3, #16
 8106d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106d84:	ee07 3a90 	vmov	s15, r3
 8106d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8106d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106da0:	ee17 2a90 	vmov	r2, s15
 8106da4:	687b      	ldr	r3, [r7, #4]
 8106da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106da8:	4b13      	ldr	r3, [pc, #76]	; (8106df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106dac:	0e1b      	lsrs	r3, r3, #24
 8106dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106db2:	ee07 3a90 	vmov	s15, r3
 8106db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8106dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106dce:	ee17 2a90 	vmov	r2, s15
 8106dd2:	687b      	ldr	r3, [r7, #4]
 8106dd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106dd6:	e008      	b.n	8106dea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106dd8:	687b      	ldr	r3, [r7, #4]
 8106dda:	2200      	movs	r2, #0
 8106ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106dde:	687b      	ldr	r3, [r7, #4]
 8106de0:	2200      	movs	r2, #0
 8106de2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	2200      	movs	r2, #0
 8106de8:	609a      	str	r2, [r3, #8]
}
 8106dea:	bf00      	nop
 8106dec:	3724      	adds	r7, #36	; 0x24
 8106dee:	46bd      	mov	sp, r7
 8106df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106df4:	4770      	bx	lr
 8106df6:	bf00      	nop
 8106df8:	58024400 	.word	0x58024400
 8106dfc:	03d09000 	.word	0x03d09000
 8106e00:	46000000 	.word	0x46000000
 8106e04:	4c742400 	.word	0x4c742400
 8106e08:	4a742400 	.word	0x4a742400
 8106e0c:	4af42400 	.word	0x4af42400

08106e10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106e10:	b580      	push	{r7, lr}
 8106e12:	b084      	sub	sp, #16
 8106e14:	af00      	add	r7, sp, #0
 8106e16:	6078      	str	r0, [r7, #4]
 8106e18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106e1a:	2300      	movs	r3, #0
 8106e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106e1e:	4b54      	ldr	r3, [pc, #336]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106e22:	f003 0303 	and.w	r3, r3, #3
 8106e26:	2b03      	cmp	r3, #3
 8106e28:	d101      	bne.n	8106e2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106e2a:	2301      	movs	r3, #1
 8106e2c:	e09b      	b.n	8106f66 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106e2e:	4b50      	ldr	r3, [pc, #320]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106e30:	681b      	ldr	r3, [r3, #0]
 8106e32:	4a4f      	ldr	r2, [pc, #316]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106e34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106e3a:	f7fb fc91 	bl	8102760 <HAL_GetTick>
 8106e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106e40:	e008      	b.n	8106e54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106e42:	f7fb fc8d 	bl	8102760 <HAL_GetTick>
 8106e46:	4602      	mov	r2, r0
 8106e48:	68bb      	ldr	r3, [r7, #8]
 8106e4a:	1ad3      	subs	r3, r2, r3
 8106e4c:	2b02      	cmp	r3, #2
 8106e4e:	d901      	bls.n	8106e54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106e50:	2303      	movs	r3, #3
 8106e52:	e088      	b.n	8106f66 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106e54:	4b46      	ldr	r3, [pc, #280]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106e56:	681b      	ldr	r3, [r3, #0]
 8106e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106e5c:	2b00      	cmp	r3, #0
 8106e5e:	d1f0      	bne.n	8106e42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106e60:	4b43      	ldr	r3, [pc, #268]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106e64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	681b      	ldr	r3, [r3, #0]
 8106e6c:	031b      	lsls	r3, r3, #12
 8106e6e:	4940      	ldr	r1, [pc, #256]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106e70:	4313      	orrs	r3, r2
 8106e72:	628b      	str	r3, [r1, #40]	; 0x28
 8106e74:	687b      	ldr	r3, [r7, #4]
 8106e76:	685b      	ldr	r3, [r3, #4]
 8106e78:	3b01      	subs	r3, #1
 8106e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	689b      	ldr	r3, [r3, #8]
 8106e82:	3b01      	subs	r3, #1
 8106e84:	025b      	lsls	r3, r3, #9
 8106e86:	b29b      	uxth	r3, r3
 8106e88:	431a      	orrs	r2, r3
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	68db      	ldr	r3, [r3, #12]
 8106e8e:	3b01      	subs	r3, #1
 8106e90:	041b      	lsls	r3, r3, #16
 8106e92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106e96:	431a      	orrs	r2, r3
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	691b      	ldr	r3, [r3, #16]
 8106e9c:	3b01      	subs	r3, #1
 8106e9e:	061b      	lsls	r3, r3, #24
 8106ea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106ea4:	4932      	ldr	r1, [pc, #200]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106ea6:	4313      	orrs	r3, r2
 8106ea8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106eaa:	4b31      	ldr	r3, [pc, #196]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106eae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	695b      	ldr	r3, [r3, #20]
 8106eb6:	492e      	ldr	r1, [pc, #184]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106eb8:	4313      	orrs	r3, r2
 8106eba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106ebc:	4b2c      	ldr	r3, [pc, #176]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ec0:	f023 0220 	bic.w	r2, r3, #32
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	699b      	ldr	r3, [r3, #24]
 8106ec8:	4929      	ldr	r1, [pc, #164]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106eca:	4313      	orrs	r3, r2
 8106ecc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106ece:	4b28      	ldr	r3, [pc, #160]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ed2:	4a27      	ldr	r2, [pc, #156]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106ed4:	f023 0310 	bic.w	r3, r3, #16
 8106ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106eda:	4b25      	ldr	r3, [pc, #148]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106ee2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106ee6:	687a      	ldr	r2, [r7, #4]
 8106ee8:	69d2      	ldr	r2, [r2, #28]
 8106eea:	00d2      	lsls	r2, r2, #3
 8106eec:	4920      	ldr	r1, [pc, #128]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106eee:	4313      	orrs	r3, r2
 8106ef0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106ef2:	4b1f      	ldr	r3, [pc, #124]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ef6:	4a1e      	ldr	r2, [pc, #120]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106ef8:	f043 0310 	orr.w	r3, r3, #16
 8106efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106efe:	683b      	ldr	r3, [r7, #0]
 8106f00:	2b00      	cmp	r3, #0
 8106f02:	d106      	bne.n	8106f12 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106f04:	4b1a      	ldr	r3, [pc, #104]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f08:	4a19      	ldr	r2, [pc, #100]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106f10:	e00f      	b.n	8106f32 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106f12:	683b      	ldr	r3, [r7, #0]
 8106f14:	2b01      	cmp	r3, #1
 8106f16:	d106      	bne.n	8106f26 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106f18:	4b15      	ldr	r3, [pc, #84]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f1c:	4a14      	ldr	r2, [pc, #80]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106f22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106f24:	e005      	b.n	8106f32 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106f26:	4b12      	ldr	r3, [pc, #72]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f2a:	4a11      	ldr	r2, [pc, #68]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106f30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106f32:	4b0f      	ldr	r3, [pc, #60]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f34:	681b      	ldr	r3, [r3, #0]
 8106f36:	4a0e      	ldr	r2, [pc, #56]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106f3e:	f7fb fc0f 	bl	8102760 <HAL_GetTick>
 8106f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106f44:	e008      	b.n	8106f58 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106f46:	f7fb fc0b 	bl	8102760 <HAL_GetTick>
 8106f4a:	4602      	mov	r2, r0
 8106f4c:	68bb      	ldr	r3, [r7, #8]
 8106f4e:	1ad3      	subs	r3, r2, r3
 8106f50:	2b02      	cmp	r3, #2
 8106f52:	d901      	bls.n	8106f58 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106f54:	2303      	movs	r3, #3
 8106f56:	e006      	b.n	8106f66 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106f58:	4b05      	ldr	r3, [pc, #20]	; (8106f70 <RCCEx_PLL2_Config+0x160>)
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f60:	2b00      	cmp	r3, #0
 8106f62:	d0f0      	beq.n	8106f46 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8106f66:	4618      	mov	r0, r3
 8106f68:	3710      	adds	r7, #16
 8106f6a:	46bd      	mov	sp, r7
 8106f6c:	bd80      	pop	{r7, pc}
 8106f6e:	bf00      	nop
 8106f70:	58024400 	.word	0x58024400

08106f74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106f74:	b580      	push	{r7, lr}
 8106f76:	b084      	sub	sp, #16
 8106f78:	af00      	add	r7, sp, #0
 8106f7a:	6078      	str	r0, [r7, #4]
 8106f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106f7e:	2300      	movs	r3, #0
 8106f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106f82:	4b54      	ldr	r3, [pc, #336]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8106f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f86:	f003 0303 	and.w	r3, r3, #3
 8106f8a:	2b03      	cmp	r3, #3
 8106f8c:	d101      	bne.n	8106f92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106f8e:	2301      	movs	r3, #1
 8106f90:	e09b      	b.n	81070ca <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106f92:	4b50      	ldr	r3, [pc, #320]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8106f94:	681b      	ldr	r3, [r3, #0]
 8106f96:	4a4f      	ldr	r2, [pc, #316]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8106f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106f9e:	f7fb fbdf 	bl	8102760 <HAL_GetTick>
 8106fa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106fa4:	e008      	b.n	8106fb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106fa6:	f7fb fbdb 	bl	8102760 <HAL_GetTick>
 8106faa:	4602      	mov	r2, r0
 8106fac:	68bb      	ldr	r3, [r7, #8]
 8106fae:	1ad3      	subs	r3, r2, r3
 8106fb0:	2b02      	cmp	r3, #2
 8106fb2:	d901      	bls.n	8106fb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106fb4:	2303      	movs	r3, #3
 8106fb6:	e088      	b.n	81070ca <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106fb8:	4b46      	ldr	r3, [pc, #280]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106fc0:	2b00      	cmp	r3, #0
 8106fc2:	d1f0      	bne.n	8106fa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106fc4:	4b43      	ldr	r3, [pc, #268]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8106fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	051b      	lsls	r3, r3, #20
 8106fd2:	4940      	ldr	r1, [pc, #256]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8106fd4:	4313      	orrs	r3, r2
 8106fd6:	628b      	str	r3, [r1, #40]	; 0x28
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	685b      	ldr	r3, [r3, #4]
 8106fdc:	3b01      	subs	r3, #1
 8106fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	689b      	ldr	r3, [r3, #8]
 8106fe6:	3b01      	subs	r3, #1
 8106fe8:	025b      	lsls	r3, r3, #9
 8106fea:	b29b      	uxth	r3, r3
 8106fec:	431a      	orrs	r2, r3
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	68db      	ldr	r3, [r3, #12]
 8106ff2:	3b01      	subs	r3, #1
 8106ff4:	041b      	lsls	r3, r3, #16
 8106ff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106ffa:	431a      	orrs	r2, r3
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	691b      	ldr	r3, [r3, #16]
 8107000:	3b01      	subs	r3, #1
 8107002:	061b      	lsls	r3, r3, #24
 8107004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107008:	4932      	ldr	r1, [pc, #200]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810700a:	4313      	orrs	r3, r2
 810700c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810700e:	4b31      	ldr	r3, [pc, #196]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107012:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	695b      	ldr	r3, [r3, #20]
 810701a:	492e      	ldr	r1, [pc, #184]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810701c:	4313      	orrs	r3, r2
 810701e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107020:	4b2c      	ldr	r3, [pc, #176]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107024:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	699b      	ldr	r3, [r3, #24]
 810702c:	4929      	ldr	r1, [pc, #164]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810702e:	4313      	orrs	r3, r2
 8107030:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107032:	4b28      	ldr	r3, [pc, #160]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107036:	4a27      	ldr	r2, [pc, #156]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810703c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810703e:	4b25      	ldr	r3, [pc, #148]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107046:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810704a:	687a      	ldr	r2, [r7, #4]
 810704c:	69d2      	ldr	r2, [r2, #28]
 810704e:	00d2      	lsls	r2, r2, #3
 8107050:	4920      	ldr	r1, [pc, #128]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107052:	4313      	orrs	r3, r2
 8107054:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107056:	4b1f      	ldr	r3, [pc, #124]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810705a:	4a1e      	ldr	r2, [pc, #120]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810705c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107062:	683b      	ldr	r3, [r7, #0]
 8107064:	2b00      	cmp	r3, #0
 8107066:	d106      	bne.n	8107076 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107068:	4b1a      	ldr	r3, [pc, #104]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810706c:	4a19      	ldr	r2, [pc, #100]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810706e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107074:	e00f      	b.n	8107096 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107076:	683b      	ldr	r3, [r7, #0]
 8107078:	2b01      	cmp	r3, #1
 810707a:	d106      	bne.n	810708a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810707c:	4b15      	ldr	r3, [pc, #84]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107080:	4a14      	ldr	r2, [pc, #80]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107088:	e005      	b.n	8107096 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810708a:	4b12      	ldr	r3, [pc, #72]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810708e:	4a11      	ldr	r2, [pc, #68]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107094:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107096:	4b0f      	ldr	r3, [pc, #60]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 8107098:	681b      	ldr	r3, [r3, #0]
 810709a:	4a0e      	ldr	r2, [pc, #56]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 810709c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81070a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81070a2:	f7fb fb5d 	bl	8102760 <HAL_GetTick>
 81070a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81070a8:	e008      	b.n	81070bc <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81070aa:	f7fb fb59 	bl	8102760 <HAL_GetTick>
 81070ae:	4602      	mov	r2, r0
 81070b0:	68bb      	ldr	r3, [r7, #8]
 81070b2:	1ad3      	subs	r3, r2, r3
 81070b4:	2b02      	cmp	r3, #2
 81070b6:	d901      	bls.n	81070bc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81070b8:	2303      	movs	r3, #3
 81070ba:	e006      	b.n	81070ca <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81070bc:	4b05      	ldr	r3, [pc, #20]	; (81070d4 <RCCEx_PLL3_Config+0x160>)
 81070be:	681b      	ldr	r3, [r3, #0]
 81070c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81070c4:	2b00      	cmp	r3, #0
 81070c6:	d0f0      	beq.n	81070aa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 81070ca:	4618      	mov	r0, r3
 81070cc:	3710      	adds	r7, #16
 81070ce:	46bd      	mov	sp, r7
 81070d0:	bd80      	pop	{r7, pc}
 81070d2:	bf00      	nop
 81070d4:	58024400 	.word	0x58024400

081070d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81070d8:	b580      	push	{r7, lr}
 81070da:	b082      	sub	sp, #8
 81070dc:	af00      	add	r7, sp, #0
 81070de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81070e0:	687b      	ldr	r3, [r7, #4]
 81070e2:	2b00      	cmp	r3, #0
 81070e4:	d101      	bne.n	81070ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81070e6:	2301      	movs	r3, #1
 81070e8:	e049      	b.n	810717e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81070ea:	687b      	ldr	r3, [r7, #4]
 81070ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81070f0:	b2db      	uxtb	r3, r3
 81070f2:	2b00      	cmp	r3, #0
 81070f4:	d106      	bne.n	8107104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	2200      	movs	r2, #0
 81070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81070fe:	6878      	ldr	r0, [r7, #4]
 8107100:	f7fa ff20 	bl	8101f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107104:	687b      	ldr	r3, [r7, #4]
 8107106:	2202      	movs	r2, #2
 8107108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	681a      	ldr	r2, [r3, #0]
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	3304      	adds	r3, #4
 8107114:	4619      	mov	r1, r3
 8107116:	4610      	mov	r0, r2
 8107118:	f000 fc56 	bl	81079c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	2201      	movs	r2, #1
 8107120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	2201      	movs	r2, #1
 8107128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	2201      	movs	r2, #1
 8107130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	2201      	movs	r2, #1
 8107138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	2201      	movs	r2, #1
 8107140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	2201      	movs	r2, #1
 8107148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	2201      	movs	r2, #1
 8107150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	2201      	movs	r2, #1
 8107158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810715c:	687b      	ldr	r3, [r7, #4]
 810715e:	2201      	movs	r2, #1
 8107160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	2201      	movs	r2, #1
 8107168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	2201      	movs	r2, #1
 8107170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	2201      	movs	r2, #1
 8107178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810717c:	2300      	movs	r3, #0
}
 810717e:	4618      	mov	r0, r3
 8107180:	3708      	adds	r7, #8
 8107182:	46bd      	mov	sp, r7
 8107184:	bd80      	pop	{r7, pc}

08107186 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8107186:	b580      	push	{r7, lr}
 8107188:	b082      	sub	sp, #8
 810718a:	af00      	add	r7, sp, #0
 810718c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	2b00      	cmp	r3, #0
 8107192:	d101      	bne.n	8107198 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8107194:	2301      	movs	r3, #1
 8107196:	e049      	b.n	810722c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810719e:	b2db      	uxtb	r3, r3
 81071a0:	2b00      	cmp	r3, #0
 81071a2:	d106      	bne.n	81071b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	2200      	movs	r2, #0
 81071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81071ac:	6878      	ldr	r0, [r7, #4]
 81071ae:	f000 f841 	bl	8107234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	2202      	movs	r2, #2
 81071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	681a      	ldr	r2, [r3, #0]
 81071be:	687b      	ldr	r3, [r7, #4]
 81071c0:	3304      	adds	r3, #4
 81071c2:	4619      	mov	r1, r3
 81071c4:	4610      	mov	r0, r2
 81071c6:	f000 fbff 	bl	81079c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	2201      	movs	r2, #1
 81071ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81071d2:	687b      	ldr	r3, [r7, #4]
 81071d4:	2201      	movs	r2, #1
 81071d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81071da:	687b      	ldr	r3, [r7, #4]
 81071dc:	2201      	movs	r2, #1
 81071de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81071e2:	687b      	ldr	r3, [r7, #4]
 81071e4:	2201      	movs	r2, #1
 81071e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	2201      	movs	r2, #1
 81071ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	2201      	movs	r2, #1
 81071f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	2201      	movs	r2, #1
 81071fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	2201      	movs	r2, #1
 8107206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	2201      	movs	r2, #1
 810720e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	2201      	movs	r2, #1
 8107216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	2201      	movs	r2, #1
 810721e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107222:	687b      	ldr	r3, [r7, #4]
 8107224:	2201      	movs	r2, #1
 8107226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810722a:	2300      	movs	r3, #0
}
 810722c:	4618      	mov	r0, r3
 810722e:	3708      	adds	r7, #8
 8107230:	46bd      	mov	sp, r7
 8107232:	bd80      	pop	{r7, pc}

08107234 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8107234:	b480      	push	{r7}
 8107236:	b083      	sub	sp, #12
 8107238:	af00      	add	r7, sp, #0
 810723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810723c:	bf00      	nop
 810723e:	370c      	adds	r7, #12
 8107240:	46bd      	mov	sp, r7
 8107242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107246:	4770      	bx	lr

08107248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107248:	b580      	push	{r7, lr}
 810724a:	b084      	sub	sp, #16
 810724c:	af00      	add	r7, sp, #0
 810724e:	6078      	str	r0, [r7, #4]
 8107250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8107252:	683b      	ldr	r3, [r7, #0]
 8107254:	2b00      	cmp	r3, #0
 8107256:	d109      	bne.n	810726c <HAL_TIM_PWM_Start+0x24>
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810725e:	b2db      	uxtb	r3, r3
 8107260:	2b01      	cmp	r3, #1
 8107262:	bf14      	ite	ne
 8107264:	2301      	movne	r3, #1
 8107266:	2300      	moveq	r3, #0
 8107268:	b2db      	uxtb	r3, r3
 810726a:	e03c      	b.n	81072e6 <HAL_TIM_PWM_Start+0x9e>
 810726c:	683b      	ldr	r3, [r7, #0]
 810726e:	2b04      	cmp	r3, #4
 8107270:	d109      	bne.n	8107286 <HAL_TIM_PWM_Start+0x3e>
 8107272:	687b      	ldr	r3, [r7, #4]
 8107274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8107278:	b2db      	uxtb	r3, r3
 810727a:	2b01      	cmp	r3, #1
 810727c:	bf14      	ite	ne
 810727e:	2301      	movne	r3, #1
 8107280:	2300      	moveq	r3, #0
 8107282:	b2db      	uxtb	r3, r3
 8107284:	e02f      	b.n	81072e6 <HAL_TIM_PWM_Start+0x9e>
 8107286:	683b      	ldr	r3, [r7, #0]
 8107288:	2b08      	cmp	r3, #8
 810728a:	d109      	bne.n	81072a0 <HAL_TIM_PWM_Start+0x58>
 810728c:	687b      	ldr	r3, [r7, #4]
 810728e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107292:	b2db      	uxtb	r3, r3
 8107294:	2b01      	cmp	r3, #1
 8107296:	bf14      	ite	ne
 8107298:	2301      	movne	r3, #1
 810729a:	2300      	moveq	r3, #0
 810729c:	b2db      	uxtb	r3, r3
 810729e:	e022      	b.n	81072e6 <HAL_TIM_PWM_Start+0x9e>
 81072a0:	683b      	ldr	r3, [r7, #0]
 81072a2:	2b0c      	cmp	r3, #12
 81072a4:	d109      	bne.n	81072ba <HAL_TIM_PWM_Start+0x72>
 81072a6:	687b      	ldr	r3, [r7, #4]
 81072a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81072ac:	b2db      	uxtb	r3, r3
 81072ae:	2b01      	cmp	r3, #1
 81072b0:	bf14      	ite	ne
 81072b2:	2301      	movne	r3, #1
 81072b4:	2300      	moveq	r3, #0
 81072b6:	b2db      	uxtb	r3, r3
 81072b8:	e015      	b.n	81072e6 <HAL_TIM_PWM_Start+0x9e>
 81072ba:	683b      	ldr	r3, [r7, #0]
 81072bc:	2b10      	cmp	r3, #16
 81072be:	d109      	bne.n	81072d4 <HAL_TIM_PWM_Start+0x8c>
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81072c6:	b2db      	uxtb	r3, r3
 81072c8:	2b01      	cmp	r3, #1
 81072ca:	bf14      	ite	ne
 81072cc:	2301      	movne	r3, #1
 81072ce:	2300      	moveq	r3, #0
 81072d0:	b2db      	uxtb	r3, r3
 81072d2:	e008      	b.n	81072e6 <HAL_TIM_PWM_Start+0x9e>
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81072da:	b2db      	uxtb	r3, r3
 81072dc:	2b01      	cmp	r3, #1
 81072de:	bf14      	ite	ne
 81072e0:	2301      	movne	r3, #1
 81072e2:	2300      	moveq	r3, #0
 81072e4:	b2db      	uxtb	r3, r3
 81072e6:	2b00      	cmp	r3, #0
 81072e8:	d001      	beq.n	81072ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81072ea:	2301      	movs	r3, #1
 81072ec:	e0a1      	b.n	8107432 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81072ee:	683b      	ldr	r3, [r7, #0]
 81072f0:	2b00      	cmp	r3, #0
 81072f2:	d104      	bne.n	81072fe <HAL_TIM_PWM_Start+0xb6>
 81072f4:	687b      	ldr	r3, [r7, #4]
 81072f6:	2202      	movs	r2, #2
 81072f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81072fc:	e023      	b.n	8107346 <HAL_TIM_PWM_Start+0xfe>
 81072fe:	683b      	ldr	r3, [r7, #0]
 8107300:	2b04      	cmp	r3, #4
 8107302:	d104      	bne.n	810730e <HAL_TIM_PWM_Start+0xc6>
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	2202      	movs	r2, #2
 8107308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810730c:	e01b      	b.n	8107346 <HAL_TIM_PWM_Start+0xfe>
 810730e:	683b      	ldr	r3, [r7, #0]
 8107310:	2b08      	cmp	r3, #8
 8107312:	d104      	bne.n	810731e <HAL_TIM_PWM_Start+0xd6>
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	2202      	movs	r2, #2
 8107318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810731c:	e013      	b.n	8107346 <HAL_TIM_PWM_Start+0xfe>
 810731e:	683b      	ldr	r3, [r7, #0]
 8107320:	2b0c      	cmp	r3, #12
 8107322:	d104      	bne.n	810732e <HAL_TIM_PWM_Start+0xe6>
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	2202      	movs	r2, #2
 8107328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810732c:	e00b      	b.n	8107346 <HAL_TIM_PWM_Start+0xfe>
 810732e:	683b      	ldr	r3, [r7, #0]
 8107330:	2b10      	cmp	r3, #16
 8107332:	d104      	bne.n	810733e <HAL_TIM_PWM_Start+0xf6>
 8107334:	687b      	ldr	r3, [r7, #4]
 8107336:	2202      	movs	r2, #2
 8107338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810733c:	e003      	b.n	8107346 <HAL_TIM_PWM_Start+0xfe>
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	2202      	movs	r2, #2
 8107342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	681b      	ldr	r3, [r3, #0]
 810734a:	2201      	movs	r2, #1
 810734c:	6839      	ldr	r1, [r7, #0]
 810734e:	4618      	mov	r0, r3
 8107350:	f000 ff46 	bl	81081e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	4a38      	ldr	r2, [pc, #224]	; (810743c <HAL_TIM_PWM_Start+0x1f4>)
 810735a:	4293      	cmp	r3, r2
 810735c:	d013      	beq.n	8107386 <HAL_TIM_PWM_Start+0x13e>
 810735e:	687b      	ldr	r3, [r7, #4]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	4a37      	ldr	r2, [pc, #220]	; (8107440 <HAL_TIM_PWM_Start+0x1f8>)
 8107364:	4293      	cmp	r3, r2
 8107366:	d00e      	beq.n	8107386 <HAL_TIM_PWM_Start+0x13e>
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	4a35      	ldr	r2, [pc, #212]	; (8107444 <HAL_TIM_PWM_Start+0x1fc>)
 810736e:	4293      	cmp	r3, r2
 8107370:	d009      	beq.n	8107386 <HAL_TIM_PWM_Start+0x13e>
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	4a34      	ldr	r2, [pc, #208]	; (8107448 <HAL_TIM_PWM_Start+0x200>)
 8107378:	4293      	cmp	r3, r2
 810737a:	d004      	beq.n	8107386 <HAL_TIM_PWM_Start+0x13e>
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	4a32      	ldr	r2, [pc, #200]	; (810744c <HAL_TIM_PWM_Start+0x204>)
 8107382:	4293      	cmp	r3, r2
 8107384:	d101      	bne.n	810738a <HAL_TIM_PWM_Start+0x142>
 8107386:	2301      	movs	r3, #1
 8107388:	e000      	b.n	810738c <HAL_TIM_PWM_Start+0x144>
 810738a:	2300      	movs	r3, #0
 810738c:	2b00      	cmp	r3, #0
 810738e:	d007      	beq.n	81073a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	681b      	ldr	r3, [r3, #0]
 810739a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810739e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	681b      	ldr	r3, [r3, #0]
 81073a4:	4a25      	ldr	r2, [pc, #148]	; (810743c <HAL_TIM_PWM_Start+0x1f4>)
 81073a6:	4293      	cmp	r3, r2
 81073a8:	d022      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	681b      	ldr	r3, [r3, #0]
 81073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073b2:	d01d      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	681b      	ldr	r3, [r3, #0]
 81073b8:	4a25      	ldr	r2, [pc, #148]	; (8107450 <HAL_TIM_PWM_Start+0x208>)
 81073ba:	4293      	cmp	r3, r2
 81073bc:	d018      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073be:	687b      	ldr	r3, [r7, #4]
 81073c0:	681b      	ldr	r3, [r3, #0]
 81073c2:	4a24      	ldr	r2, [pc, #144]	; (8107454 <HAL_TIM_PWM_Start+0x20c>)
 81073c4:	4293      	cmp	r3, r2
 81073c6:	d013      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073c8:	687b      	ldr	r3, [r7, #4]
 81073ca:	681b      	ldr	r3, [r3, #0]
 81073cc:	4a22      	ldr	r2, [pc, #136]	; (8107458 <HAL_TIM_PWM_Start+0x210>)
 81073ce:	4293      	cmp	r3, r2
 81073d0:	d00e      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	4a1a      	ldr	r2, [pc, #104]	; (8107440 <HAL_TIM_PWM_Start+0x1f8>)
 81073d8:	4293      	cmp	r3, r2
 81073da:	d009      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073dc:	687b      	ldr	r3, [r7, #4]
 81073de:	681b      	ldr	r3, [r3, #0]
 81073e0:	4a1e      	ldr	r2, [pc, #120]	; (810745c <HAL_TIM_PWM_Start+0x214>)
 81073e2:	4293      	cmp	r3, r2
 81073e4:	d004      	beq.n	81073f0 <HAL_TIM_PWM_Start+0x1a8>
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	681b      	ldr	r3, [r3, #0]
 81073ea:	4a16      	ldr	r2, [pc, #88]	; (8107444 <HAL_TIM_PWM_Start+0x1fc>)
 81073ec:	4293      	cmp	r3, r2
 81073ee:	d115      	bne.n	810741c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	689a      	ldr	r2, [r3, #8]
 81073f6:	4b1a      	ldr	r3, [pc, #104]	; (8107460 <HAL_TIM_PWM_Start+0x218>)
 81073f8:	4013      	ands	r3, r2
 81073fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81073fc:	68fb      	ldr	r3, [r7, #12]
 81073fe:	2b06      	cmp	r3, #6
 8107400:	d015      	beq.n	810742e <HAL_TIM_PWM_Start+0x1e6>
 8107402:	68fb      	ldr	r3, [r7, #12]
 8107404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107408:	d011      	beq.n	810742e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	681a      	ldr	r2, [r3, #0]
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	f042 0201 	orr.w	r2, r2, #1
 8107418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810741a:	e008      	b.n	810742e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810741c:	687b      	ldr	r3, [r7, #4]
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	681a      	ldr	r2, [r3, #0]
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	681b      	ldr	r3, [r3, #0]
 8107426:	f042 0201 	orr.w	r2, r2, #1
 810742a:	601a      	str	r2, [r3, #0]
 810742c:	e000      	b.n	8107430 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810742e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107430:	2300      	movs	r3, #0
}
 8107432:	4618      	mov	r0, r3
 8107434:	3710      	adds	r7, #16
 8107436:	46bd      	mov	sp, r7
 8107438:	bd80      	pop	{r7, pc}
 810743a:	bf00      	nop
 810743c:	40010000 	.word	0x40010000
 8107440:	40010400 	.word	0x40010400
 8107444:	40014000 	.word	0x40014000
 8107448:	40014400 	.word	0x40014400
 810744c:	40014800 	.word	0x40014800
 8107450:	40000400 	.word	0x40000400
 8107454:	40000800 	.word	0x40000800
 8107458:	40000c00 	.word	0x40000c00
 810745c:	40001800 	.word	0x40001800
 8107460:	00010007 	.word	0x00010007

08107464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8107464:	b580      	push	{r7, lr}
 8107466:	b086      	sub	sp, #24
 8107468:	af00      	add	r7, sp, #0
 810746a:	6078      	str	r0, [r7, #4]
 810746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810746e:	687b      	ldr	r3, [r7, #4]
 8107470:	2b00      	cmp	r3, #0
 8107472:	d101      	bne.n	8107478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8107474:	2301      	movs	r3, #1
 8107476:	e097      	b.n	81075a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810747e:	b2db      	uxtb	r3, r3
 8107480:	2b00      	cmp	r3, #0
 8107482:	d106      	bne.n	8107492 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	2200      	movs	r2, #0
 8107488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810748c:	6878      	ldr	r0, [r7, #4]
 810748e:	f7fa fd7b 	bl	8101f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107492:	687b      	ldr	r3, [r7, #4]
 8107494:	2202      	movs	r2, #2
 8107496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	681b      	ldr	r3, [r3, #0]
 810749e:	689b      	ldr	r3, [r3, #8]
 81074a0:	687a      	ldr	r2, [r7, #4]
 81074a2:	6812      	ldr	r2, [r2, #0]
 81074a4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 81074a8:	f023 0307 	bic.w	r3, r3, #7
 81074ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	681a      	ldr	r2, [r3, #0]
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	3304      	adds	r3, #4
 81074b6:	4619      	mov	r1, r3
 81074b8:	4610      	mov	r0, r2
 81074ba:	f000 fa85 	bl	81079c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81074be:	687b      	ldr	r3, [r7, #4]
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	689b      	ldr	r3, [r3, #8]
 81074c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 81074c6:	687b      	ldr	r3, [r7, #4]
 81074c8:	681b      	ldr	r3, [r3, #0]
 81074ca:	699b      	ldr	r3, [r3, #24]
 81074cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	6a1b      	ldr	r3, [r3, #32]
 81074d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 81074d6:	683b      	ldr	r3, [r7, #0]
 81074d8:	681b      	ldr	r3, [r3, #0]
 81074da:	697a      	ldr	r2, [r7, #20]
 81074dc:	4313      	orrs	r3, r2
 81074de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81074e0:	693b      	ldr	r3, [r7, #16]
 81074e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81074e6:	f023 0303 	bic.w	r3, r3, #3
 81074ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 81074ec:	683b      	ldr	r3, [r7, #0]
 81074ee:	689a      	ldr	r2, [r3, #8]
 81074f0:	683b      	ldr	r3, [r7, #0]
 81074f2:	699b      	ldr	r3, [r3, #24]
 81074f4:	021b      	lsls	r3, r3, #8
 81074f6:	4313      	orrs	r3, r2
 81074f8:	693a      	ldr	r2, [r7, #16]
 81074fa:	4313      	orrs	r3, r2
 81074fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 81074fe:	693b      	ldr	r3, [r7, #16]
 8107500:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8107504:	f023 030c 	bic.w	r3, r3, #12
 8107508:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810750a:	693b      	ldr	r3, [r7, #16]
 810750c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8107516:	683b      	ldr	r3, [r7, #0]
 8107518:	68da      	ldr	r2, [r3, #12]
 810751a:	683b      	ldr	r3, [r7, #0]
 810751c:	69db      	ldr	r3, [r3, #28]
 810751e:	021b      	lsls	r3, r3, #8
 8107520:	4313      	orrs	r3, r2
 8107522:	693a      	ldr	r2, [r7, #16]
 8107524:	4313      	orrs	r3, r2
 8107526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8107528:	683b      	ldr	r3, [r7, #0]
 810752a:	691b      	ldr	r3, [r3, #16]
 810752c:	011a      	lsls	r2, r3, #4
 810752e:	683b      	ldr	r3, [r7, #0]
 8107530:	6a1b      	ldr	r3, [r3, #32]
 8107532:	031b      	lsls	r3, r3, #12
 8107534:	4313      	orrs	r3, r2
 8107536:	693a      	ldr	r2, [r7, #16]
 8107538:	4313      	orrs	r3, r2
 810753a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810753c:	68fb      	ldr	r3, [r7, #12]
 810753e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8107542:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8107544:	68fb      	ldr	r3, [r7, #12]
 8107546:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 810754a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 810754c:	683b      	ldr	r3, [r7, #0]
 810754e:	685a      	ldr	r2, [r3, #4]
 8107550:	683b      	ldr	r3, [r7, #0]
 8107552:	695b      	ldr	r3, [r3, #20]
 8107554:	011b      	lsls	r3, r3, #4
 8107556:	4313      	orrs	r3, r2
 8107558:	68fa      	ldr	r2, [r7, #12]
 810755a:	4313      	orrs	r3, r2
 810755c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810755e:	687b      	ldr	r3, [r7, #4]
 8107560:	681b      	ldr	r3, [r3, #0]
 8107562:	697a      	ldr	r2, [r7, #20]
 8107564:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	681b      	ldr	r3, [r3, #0]
 810756a:	693a      	ldr	r2, [r7, #16]
 810756c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	68fa      	ldr	r2, [r7, #12]
 8107574:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	2201      	movs	r2, #1
 810757a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	2201      	movs	r2, #1
 8107582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	2201      	movs	r2, #1
 810758a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	2201      	movs	r2, #1
 8107592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	2201      	movs	r2, #1
 810759a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810759e:	687b      	ldr	r3, [r7, #4]
 81075a0:	2201      	movs	r2, #1
 81075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81075a6:	2300      	movs	r3, #0
}
 81075a8:	4618      	mov	r0, r3
 81075aa:	3718      	adds	r7, #24
 81075ac:	46bd      	mov	sp, r7
 81075ae:	bd80      	pop	{r7, pc}

081075b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81075b0:	b580      	push	{r7, lr}
 81075b2:	b086      	sub	sp, #24
 81075b4:	af00      	add	r7, sp, #0
 81075b6:	60f8      	str	r0, [r7, #12]
 81075b8:	60b9      	str	r1, [r7, #8]
 81075ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81075bc:	2300      	movs	r3, #0
 81075be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81075c6:	2b01      	cmp	r3, #1
 81075c8:	d101      	bne.n	81075ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 81075ca:	2302      	movs	r3, #2
 81075cc:	e0ff      	b.n	81077ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 81075ce:	68fb      	ldr	r3, [r7, #12]
 81075d0:	2201      	movs	r2, #1
 81075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	2b14      	cmp	r3, #20
 81075da:	f200 80f0 	bhi.w	81077be <HAL_TIM_PWM_ConfigChannel+0x20e>
 81075de:	a201      	add	r2, pc, #4	; (adr r2, 81075e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075e4:	08107639 	.word	0x08107639
 81075e8:	081077bf 	.word	0x081077bf
 81075ec:	081077bf 	.word	0x081077bf
 81075f0:	081077bf 	.word	0x081077bf
 81075f4:	08107679 	.word	0x08107679
 81075f8:	081077bf 	.word	0x081077bf
 81075fc:	081077bf 	.word	0x081077bf
 8107600:	081077bf 	.word	0x081077bf
 8107604:	081076bb 	.word	0x081076bb
 8107608:	081077bf 	.word	0x081077bf
 810760c:	081077bf 	.word	0x081077bf
 8107610:	081077bf 	.word	0x081077bf
 8107614:	081076fb 	.word	0x081076fb
 8107618:	081077bf 	.word	0x081077bf
 810761c:	081077bf 	.word	0x081077bf
 8107620:	081077bf 	.word	0x081077bf
 8107624:	0810773d 	.word	0x0810773d
 8107628:	081077bf 	.word	0x081077bf
 810762c:	081077bf 	.word	0x081077bf
 8107630:	081077bf 	.word	0x081077bf
 8107634:	0810777d 	.word	0x0810777d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107638:	68fb      	ldr	r3, [r7, #12]
 810763a:	681b      	ldr	r3, [r3, #0]
 810763c:	68b9      	ldr	r1, [r7, #8]
 810763e:	4618      	mov	r0, r3
 8107640:	f000 fa5c 	bl	8107afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107644:	68fb      	ldr	r3, [r7, #12]
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	699a      	ldr	r2, [r3, #24]
 810764a:	68fb      	ldr	r3, [r7, #12]
 810764c:	681b      	ldr	r3, [r3, #0]
 810764e:	f042 0208 	orr.w	r2, r2, #8
 8107652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107654:	68fb      	ldr	r3, [r7, #12]
 8107656:	681b      	ldr	r3, [r3, #0]
 8107658:	699a      	ldr	r2, [r3, #24]
 810765a:	68fb      	ldr	r3, [r7, #12]
 810765c:	681b      	ldr	r3, [r3, #0]
 810765e:	f022 0204 	bic.w	r2, r2, #4
 8107662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107664:	68fb      	ldr	r3, [r7, #12]
 8107666:	681b      	ldr	r3, [r3, #0]
 8107668:	6999      	ldr	r1, [r3, #24]
 810766a:	68bb      	ldr	r3, [r7, #8]
 810766c:	691a      	ldr	r2, [r3, #16]
 810766e:	68fb      	ldr	r3, [r7, #12]
 8107670:	681b      	ldr	r3, [r3, #0]
 8107672:	430a      	orrs	r2, r1
 8107674:	619a      	str	r2, [r3, #24]
      break;
 8107676:	e0a5      	b.n	81077c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	681b      	ldr	r3, [r3, #0]
 810767c:	68b9      	ldr	r1, [r7, #8]
 810767e:	4618      	mov	r0, r3
 8107680:	f000 facc 	bl	8107c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	681b      	ldr	r3, [r3, #0]
 8107688:	699a      	ldr	r2, [r3, #24]
 810768a:	68fb      	ldr	r3, [r7, #12]
 810768c:	681b      	ldr	r3, [r3, #0]
 810768e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107694:	68fb      	ldr	r3, [r7, #12]
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	699a      	ldr	r2, [r3, #24]
 810769a:	68fb      	ldr	r3, [r7, #12]
 810769c:	681b      	ldr	r3, [r3, #0]
 810769e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81076a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81076a4:	68fb      	ldr	r3, [r7, #12]
 81076a6:	681b      	ldr	r3, [r3, #0]
 81076a8:	6999      	ldr	r1, [r3, #24]
 81076aa:	68bb      	ldr	r3, [r7, #8]
 81076ac:	691b      	ldr	r3, [r3, #16]
 81076ae:	021a      	lsls	r2, r3, #8
 81076b0:	68fb      	ldr	r3, [r7, #12]
 81076b2:	681b      	ldr	r3, [r3, #0]
 81076b4:	430a      	orrs	r2, r1
 81076b6:	619a      	str	r2, [r3, #24]
      break;
 81076b8:	e084      	b.n	81077c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81076ba:	68fb      	ldr	r3, [r7, #12]
 81076bc:	681b      	ldr	r3, [r3, #0]
 81076be:	68b9      	ldr	r1, [r7, #8]
 81076c0:	4618      	mov	r0, r3
 81076c2:	f000 fb35 	bl	8107d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81076c6:	68fb      	ldr	r3, [r7, #12]
 81076c8:	681b      	ldr	r3, [r3, #0]
 81076ca:	69da      	ldr	r2, [r3, #28]
 81076cc:	68fb      	ldr	r3, [r7, #12]
 81076ce:	681b      	ldr	r3, [r3, #0]
 81076d0:	f042 0208 	orr.w	r2, r2, #8
 81076d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81076d6:	68fb      	ldr	r3, [r7, #12]
 81076d8:	681b      	ldr	r3, [r3, #0]
 81076da:	69da      	ldr	r2, [r3, #28]
 81076dc:	68fb      	ldr	r3, [r7, #12]
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	f022 0204 	bic.w	r2, r2, #4
 81076e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81076e6:	68fb      	ldr	r3, [r7, #12]
 81076e8:	681b      	ldr	r3, [r3, #0]
 81076ea:	69d9      	ldr	r1, [r3, #28]
 81076ec:	68bb      	ldr	r3, [r7, #8]
 81076ee:	691a      	ldr	r2, [r3, #16]
 81076f0:	68fb      	ldr	r3, [r7, #12]
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	430a      	orrs	r2, r1
 81076f6:	61da      	str	r2, [r3, #28]
      break;
 81076f8:	e064      	b.n	81077c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81076fa:	68fb      	ldr	r3, [r7, #12]
 81076fc:	681b      	ldr	r3, [r3, #0]
 81076fe:	68b9      	ldr	r1, [r7, #8]
 8107700:	4618      	mov	r0, r3
 8107702:	f000 fb9d 	bl	8107e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8107706:	68fb      	ldr	r3, [r7, #12]
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	69da      	ldr	r2, [r3, #28]
 810770c:	68fb      	ldr	r3, [r7, #12]
 810770e:	681b      	ldr	r3, [r3, #0]
 8107710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107716:	68fb      	ldr	r3, [r7, #12]
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	69da      	ldr	r2, [r3, #28]
 810771c:	68fb      	ldr	r3, [r7, #12]
 810771e:	681b      	ldr	r3, [r3, #0]
 8107720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107726:	68fb      	ldr	r3, [r7, #12]
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	69d9      	ldr	r1, [r3, #28]
 810772c:	68bb      	ldr	r3, [r7, #8]
 810772e:	691b      	ldr	r3, [r3, #16]
 8107730:	021a      	lsls	r2, r3, #8
 8107732:	68fb      	ldr	r3, [r7, #12]
 8107734:	681b      	ldr	r3, [r3, #0]
 8107736:	430a      	orrs	r2, r1
 8107738:	61da      	str	r2, [r3, #28]
      break;
 810773a:	e043      	b.n	81077c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810773c:	68fb      	ldr	r3, [r7, #12]
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	68b9      	ldr	r1, [r7, #8]
 8107742:	4618      	mov	r0, r3
 8107744:	f000 fbe6 	bl	8107f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107748:	68fb      	ldr	r3, [r7, #12]
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810774e:	68fb      	ldr	r3, [r7, #12]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	f042 0208 	orr.w	r2, r2, #8
 8107756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107758:	68fb      	ldr	r3, [r7, #12]
 810775a:	681b      	ldr	r3, [r3, #0]
 810775c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810775e:	68fb      	ldr	r3, [r7, #12]
 8107760:	681b      	ldr	r3, [r3, #0]
 8107762:	f022 0204 	bic.w	r2, r2, #4
 8107766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107768:	68fb      	ldr	r3, [r7, #12]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810776e:	68bb      	ldr	r3, [r7, #8]
 8107770:	691a      	ldr	r2, [r3, #16]
 8107772:	68fb      	ldr	r3, [r7, #12]
 8107774:	681b      	ldr	r3, [r3, #0]
 8107776:	430a      	orrs	r2, r1
 8107778:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810777a:	e023      	b.n	81077c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810777c:	68fb      	ldr	r3, [r7, #12]
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	68b9      	ldr	r1, [r7, #8]
 8107782:	4618      	mov	r0, r3
 8107784:	f000 fc2a 	bl	8107fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107788:	68fb      	ldr	r3, [r7, #12]
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810778e:	68fb      	ldr	r3, [r7, #12]
 8107790:	681b      	ldr	r3, [r3, #0]
 8107792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107798:	68fb      	ldr	r3, [r7, #12]
 810779a:	681b      	ldr	r3, [r3, #0]
 810779c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810779e:	68fb      	ldr	r3, [r7, #12]
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81077a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81077a8:	68fb      	ldr	r3, [r7, #12]
 81077aa:	681b      	ldr	r3, [r3, #0]
 81077ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81077ae:	68bb      	ldr	r3, [r7, #8]
 81077b0:	691b      	ldr	r3, [r3, #16]
 81077b2:	021a      	lsls	r2, r3, #8
 81077b4:	68fb      	ldr	r3, [r7, #12]
 81077b6:	681b      	ldr	r3, [r3, #0]
 81077b8:	430a      	orrs	r2, r1
 81077ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81077bc:	e002      	b.n	81077c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81077be:	2301      	movs	r3, #1
 81077c0:	75fb      	strb	r3, [r7, #23]
      break;
 81077c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81077c4:	68fb      	ldr	r3, [r7, #12]
 81077c6:	2200      	movs	r2, #0
 81077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81077cc:	7dfb      	ldrb	r3, [r7, #23]
}
 81077ce:	4618      	mov	r0, r3
 81077d0:	3718      	adds	r7, #24
 81077d2:	46bd      	mov	sp, r7
 81077d4:	bd80      	pop	{r7, pc}
 81077d6:	bf00      	nop

081077d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81077d8:	b580      	push	{r7, lr}
 81077da:	b084      	sub	sp, #16
 81077dc:	af00      	add	r7, sp, #0
 81077de:	6078      	str	r0, [r7, #4]
 81077e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81077e2:	2300      	movs	r3, #0
 81077e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81077ec:	2b01      	cmp	r3, #1
 81077ee:	d101      	bne.n	81077f4 <HAL_TIM_ConfigClockSource+0x1c>
 81077f0:	2302      	movs	r3, #2
 81077f2:	e0de      	b.n	81079b2 <HAL_TIM_ConfigClockSource+0x1da>
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	2201      	movs	r2, #1
 81077f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81077fc:	687b      	ldr	r3, [r7, #4]
 81077fe:	2202      	movs	r2, #2
 8107800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	681b      	ldr	r3, [r3, #0]
 8107808:	689b      	ldr	r3, [r3, #8]
 810780a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810780c:	68bb      	ldr	r3, [r7, #8]
 810780e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8107812:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8107816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107818:	68bb      	ldr	r3, [r7, #8]
 810781a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810781e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	68ba      	ldr	r2, [r7, #8]
 8107826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8107828:	683b      	ldr	r3, [r7, #0]
 810782a:	681b      	ldr	r3, [r3, #0]
 810782c:	4a63      	ldr	r2, [pc, #396]	; (81079bc <HAL_TIM_ConfigClockSource+0x1e4>)
 810782e:	4293      	cmp	r3, r2
 8107830:	f000 80a9 	beq.w	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 8107834:	4a61      	ldr	r2, [pc, #388]	; (81079bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8107836:	4293      	cmp	r3, r2
 8107838:	f200 80ae 	bhi.w	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 810783c:	4a60      	ldr	r2, [pc, #384]	; (81079c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 810783e:	4293      	cmp	r3, r2
 8107840:	f000 80a1 	beq.w	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 8107844:	4a5e      	ldr	r2, [pc, #376]	; (81079c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8107846:	4293      	cmp	r3, r2
 8107848:	f200 80a6 	bhi.w	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 810784c:	4a5d      	ldr	r2, [pc, #372]	; (81079c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 810784e:	4293      	cmp	r3, r2
 8107850:	f000 8099 	beq.w	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 8107854:	4a5b      	ldr	r2, [pc, #364]	; (81079c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8107856:	4293      	cmp	r3, r2
 8107858:	f200 809e 	bhi.w	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 810785c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107860:	f000 8091 	beq.w	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 8107864:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107868:	f200 8096 	bhi.w	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 810786c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107870:	f000 8089 	beq.w	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 8107874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107878:	f200 808e 	bhi.w	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 810787c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107880:	d03e      	beq.n	8107900 <HAL_TIM_ConfigClockSource+0x128>
 8107882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107886:	f200 8087 	bhi.w	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 810788a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810788e:	f000 8086 	beq.w	810799e <HAL_TIM_ConfigClockSource+0x1c6>
 8107892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107896:	d87f      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 8107898:	2b70      	cmp	r3, #112	; 0x70
 810789a:	d01a      	beq.n	81078d2 <HAL_TIM_ConfigClockSource+0xfa>
 810789c:	2b70      	cmp	r3, #112	; 0x70
 810789e:	d87b      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 81078a0:	2b60      	cmp	r3, #96	; 0x60
 81078a2:	d050      	beq.n	8107946 <HAL_TIM_ConfigClockSource+0x16e>
 81078a4:	2b60      	cmp	r3, #96	; 0x60
 81078a6:	d877      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 81078a8:	2b50      	cmp	r3, #80	; 0x50
 81078aa:	d03c      	beq.n	8107926 <HAL_TIM_ConfigClockSource+0x14e>
 81078ac:	2b50      	cmp	r3, #80	; 0x50
 81078ae:	d873      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 81078b0:	2b40      	cmp	r3, #64	; 0x40
 81078b2:	d058      	beq.n	8107966 <HAL_TIM_ConfigClockSource+0x18e>
 81078b4:	2b40      	cmp	r3, #64	; 0x40
 81078b6:	d86f      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 81078b8:	2b30      	cmp	r3, #48	; 0x30
 81078ba:	d064      	beq.n	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 81078bc:	2b30      	cmp	r3, #48	; 0x30
 81078be:	d86b      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 81078c0:	2b20      	cmp	r3, #32
 81078c2:	d060      	beq.n	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 81078c4:	2b20      	cmp	r3, #32
 81078c6:	d867      	bhi.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
 81078c8:	2b00      	cmp	r3, #0
 81078ca:	d05c      	beq.n	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 81078cc:	2b10      	cmp	r3, #16
 81078ce:	d05a      	beq.n	8107986 <HAL_TIM_ConfigClockSource+0x1ae>
 81078d0:	e062      	b.n	8107998 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	6818      	ldr	r0, [r3, #0]
 81078d6:	683b      	ldr	r3, [r7, #0]
 81078d8:	6899      	ldr	r1, [r3, #8]
 81078da:	683b      	ldr	r3, [r7, #0]
 81078dc:	685a      	ldr	r2, [r3, #4]
 81078de:	683b      	ldr	r3, [r7, #0]
 81078e0:	68db      	ldr	r3, [r3, #12]
 81078e2:	f000 fc5d 	bl	81081a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	689b      	ldr	r3, [r3, #8]
 81078ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81078ee:	68bb      	ldr	r3, [r7, #8]
 81078f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81078f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	681b      	ldr	r3, [r3, #0]
 81078fa:	68ba      	ldr	r2, [r7, #8]
 81078fc:	609a      	str	r2, [r3, #8]
      break;
 81078fe:	e04f      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	6818      	ldr	r0, [r3, #0]
 8107904:	683b      	ldr	r3, [r7, #0]
 8107906:	6899      	ldr	r1, [r3, #8]
 8107908:	683b      	ldr	r3, [r7, #0]
 810790a:	685a      	ldr	r2, [r3, #4]
 810790c:	683b      	ldr	r3, [r7, #0]
 810790e:	68db      	ldr	r3, [r3, #12]
 8107910:	f000 fc46 	bl	81081a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	681b      	ldr	r3, [r3, #0]
 8107918:	689a      	ldr	r2, [r3, #8]
 810791a:	687b      	ldr	r3, [r7, #4]
 810791c:	681b      	ldr	r3, [r3, #0]
 810791e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8107922:	609a      	str	r2, [r3, #8]
      break;
 8107924:	e03c      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	6818      	ldr	r0, [r3, #0]
 810792a:	683b      	ldr	r3, [r7, #0]
 810792c:	6859      	ldr	r1, [r3, #4]
 810792e:	683b      	ldr	r3, [r7, #0]
 8107930:	68db      	ldr	r3, [r3, #12]
 8107932:	461a      	mov	r2, r3
 8107934:	f000 fbb8 	bl	81080a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	2150      	movs	r1, #80	; 0x50
 810793e:	4618      	mov	r0, r3
 8107940:	f000 fc11 	bl	8108166 <TIM_ITRx_SetConfig>
      break;
 8107944:	e02c      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	6818      	ldr	r0, [r3, #0]
 810794a:	683b      	ldr	r3, [r7, #0]
 810794c:	6859      	ldr	r1, [r3, #4]
 810794e:	683b      	ldr	r3, [r7, #0]
 8107950:	68db      	ldr	r3, [r3, #12]
 8107952:	461a      	mov	r2, r3
 8107954:	f000 fbd7 	bl	8108106 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	681b      	ldr	r3, [r3, #0]
 810795c:	2160      	movs	r1, #96	; 0x60
 810795e:	4618      	mov	r0, r3
 8107960:	f000 fc01 	bl	8108166 <TIM_ITRx_SetConfig>
      break;
 8107964:	e01c      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	6818      	ldr	r0, [r3, #0]
 810796a:	683b      	ldr	r3, [r7, #0]
 810796c:	6859      	ldr	r1, [r3, #4]
 810796e:	683b      	ldr	r3, [r7, #0]
 8107970:	68db      	ldr	r3, [r3, #12]
 8107972:	461a      	mov	r2, r3
 8107974:	f000 fb98 	bl	81080a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	681b      	ldr	r3, [r3, #0]
 810797c:	2140      	movs	r1, #64	; 0x40
 810797e:	4618      	mov	r0, r3
 8107980:	f000 fbf1 	bl	8108166 <TIM_ITRx_SetConfig>
      break;
 8107984:	e00c      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	681a      	ldr	r2, [r3, #0]
 810798a:	683b      	ldr	r3, [r7, #0]
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	4619      	mov	r1, r3
 8107990:	4610      	mov	r0, r2
 8107992:	f000 fbe8 	bl	8108166 <TIM_ITRx_SetConfig>
      break;
 8107996:	e003      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8107998:	2301      	movs	r3, #1
 810799a:	73fb      	strb	r3, [r7, #15]
      break;
 810799c:	e000      	b.n	81079a0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810799e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81079a0:	687b      	ldr	r3, [r7, #4]
 81079a2:	2201      	movs	r2, #1
 81079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	2200      	movs	r2, #0
 81079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 81079b2:	4618      	mov	r0, r3
 81079b4:	3710      	adds	r7, #16
 81079b6:	46bd      	mov	sp, r7
 81079b8:	bd80      	pop	{r7, pc}
 81079ba:	bf00      	nop
 81079bc:	00100040 	.word	0x00100040
 81079c0:	00100030 	.word	0x00100030
 81079c4:	00100020 	.word	0x00100020

081079c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81079c8:	b480      	push	{r7}
 81079ca:	b085      	sub	sp, #20
 81079cc:	af00      	add	r7, sp, #0
 81079ce:	6078      	str	r0, [r7, #4]
 81079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	681b      	ldr	r3, [r3, #0]
 81079d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	4a40      	ldr	r2, [pc, #256]	; (8107adc <TIM_Base_SetConfig+0x114>)
 81079dc:	4293      	cmp	r3, r2
 81079de:	d013      	beq.n	8107a08 <TIM_Base_SetConfig+0x40>
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81079e6:	d00f      	beq.n	8107a08 <TIM_Base_SetConfig+0x40>
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	4a3d      	ldr	r2, [pc, #244]	; (8107ae0 <TIM_Base_SetConfig+0x118>)
 81079ec:	4293      	cmp	r3, r2
 81079ee:	d00b      	beq.n	8107a08 <TIM_Base_SetConfig+0x40>
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	4a3c      	ldr	r2, [pc, #240]	; (8107ae4 <TIM_Base_SetConfig+0x11c>)
 81079f4:	4293      	cmp	r3, r2
 81079f6:	d007      	beq.n	8107a08 <TIM_Base_SetConfig+0x40>
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	4a3b      	ldr	r2, [pc, #236]	; (8107ae8 <TIM_Base_SetConfig+0x120>)
 81079fc:	4293      	cmp	r3, r2
 81079fe:	d003      	beq.n	8107a08 <TIM_Base_SetConfig+0x40>
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	4a3a      	ldr	r2, [pc, #232]	; (8107aec <TIM_Base_SetConfig+0x124>)
 8107a04:	4293      	cmp	r3, r2
 8107a06:	d108      	bne.n	8107a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107a08:	68fb      	ldr	r3, [r7, #12]
 8107a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107a10:	683b      	ldr	r3, [r7, #0]
 8107a12:	685b      	ldr	r3, [r3, #4]
 8107a14:	68fa      	ldr	r2, [r7, #12]
 8107a16:	4313      	orrs	r3, r2
 8107a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	4a2f      	ldr	r2, [pc, #188]	; (8107adc <TIM_Base_SetConfig+0x114>)
 8107a1e:	4293      	cmp	r3, r2
 8107a20:	d01f      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107a28:	d01b      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a2a:	687b      	ldr	r3, [r7, #4]
 8107a2c:	4a2c      	ldr	r2, [pc, #176]	; (8107ae0 <TIM_Base_SetConfig+0x118>)
 8107a2e:	4293      	cmp	r3, r2
 8107a30:	d017      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	4a2b      	ldr	r2, [pc, #172]	; (8107ae4 <TIM_Base_SetConfig+0x11c>)
 8107a36:	4293      	cmp	r3, r2
 8107a38:	d013      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a3a:	687b      	ldr	r3, [r7, #4]
 8107a3c:	4a2a      	ldr	r2, [pc, #168]	; (8107ae8 <TIM_Base_SetConfig+0x120>)
 8107a3e:	4293      	cmp	r3, r2
 8107a40:	d00f      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a42:	687b      	ldr	r3, [r7, #4]
 8107a44:	4a29      	ldr	r2, [pc, #164]	; (8107aec <TIM_Base_SetConfig+0x124>)
 8107a46:	4293      	cmp	r3, r2
 8107a48:	d00b      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	4a28      	ldr	r2, [pc, #160]	; (8107af0 <TIM_Base_SetConfig+0x128>)
 8107a4e:	4293      	cmp	r3, r2
 8107a50:	d007      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a52:	687b      	ldr	r3, [r7, #4]
 8107a54:	4a27      	ldr	r2, [pc, #156]	; (8107af4 <TIM_Base_SetConfig+0x12c>)
 8107a56:	4293      	cmp	r3, r2
 8107a58:	d003      	beq.n	8107a62 <TIM_Base_SetConfig+0x9a>
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	4a26      	ldr	r2, [pc, #152]	; (8107af8 <TIM_Base_SetConfig+0x130>)
 8107a5e:	4293      	cmp	r3, r2
 8107a60:	d108      	bne.n	8107a74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107a62:	68fb      	ldr	r3, [r7, #12]
 8107a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107a6a:	683b      	ldr	r3, [r7, #0]
 8107a6c:	68db      	ldr	r3, [r3, #12]
 8107a6e:	68fa      	ldr	r2, [r7, #12]
 8107a70:	4313      	orrs	r3, r2
 8107a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107a74:	68fb      	ldr	r3, [r7, #12]
 8107a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107a7a:	683b      	ldr	r3, [r7, #0]
 8107a7c:	695b      	ldr	r3, [r3, #20]
 8107a7e:	4313      	orrs	r3, r2
 8107a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	68fa      	ldr	r2, [r7, #12]
 8107a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107a88:	683b      	ldr	r3, [r7, #0]
 8107a8a:	689a      	ldr	r2, [r3, #8]
 8107a8c:	687b      	ldr	r3, [r7, #4]
 8107a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107a90:	683b      	ldr	r3, [r7, #0]
 8107a92:	681a      	ldr	r2, [r3, #0]
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107a98:	687b      	ldr	r3, [r7, #4]
 8107a9a:	4a10      	ldr	r2, [pc, #64]	; (8107adc <TIM_Base_SetConfig+0x114>)
 8107a9c:	4293      	cmp	r3, r2
 8107a9e:	d00f      	beq.n	8107ac0 <TIM_Base_SetConfig+0xf8>
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	4a12      	ldr	r2, [pc, #72]	; (8107aec <TIM_Base_SetConfig+0x124>)
 8107aa4:	4293      	cmp	r3, r2
 8107aa6:	d00b      	beq.n	8107ac0 <TIM_Base_SetConfig+0xf8>
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	4a11      	ldr	r2, [pc, #68]	; (8107af0 <TIM_Base_SetConfig+0x128>)
 8107aac:	4293      	cmp	r3, r2
 8107aae:	d007      	beq.n	8107ac0 <TIM_Base_SetConfig+0xf8>
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	4a10      	ldr	r2, [pc, #64]	; (8107af4 <TIM_Base_SetConfig+0x12c>)
 8107ab4:	4293      	cmp	r3, r2
 8107ab6:	d003      	beq.n	8107ac0 <TIM_Base_SetConfig+0xf8>
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	4a0f      	ldr	r2, [pc, #60]	; (8107af8 <TIM_Base_SetConfig+0x130>)
 8107abc:	4293      	cmp	r3, r2
 8107abe:	d103      	bne.n	8107ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107ac0:	683b      	ldr	r3, [r7, #0]
 8107ac2:	691a      	ldr	r2, [r3, #16]
 8107ac4:	687b      	ldr	r3, [r7, #4]
 8107ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	2201      	movs	r2, #1
 8107acc:	615a      	str	r2, [r3, #20]
}
 8107ace:	bf00      	nop
 8107ad0:	3714      	adds	r7, #20
 8107ad2:	46bd      	mov	sp, r7
 8107ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ad8:	4770      	bx	lr
 8107ada:	bf00      	nop
 8107adc:	40010000 	.word	0x40010000
 8107ae0:	40000400 	.word	0x40000400
 8107ae4:	40000800 	.word	0x40000800
 8107ae8:	40000c00 	.word	0x40000c00
 8107aec:	40010400 	.word	0x40010400
 8107af0:	40014000 	.word	0x40014000
 8107af4:	40014400 	.word	0x40014400
 8107af8:	40014800 	.word	0x40014800

08107afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107afc:	b480      	push	{r7}
 8107afe:	b087      	sub	sp, #28
 8107b00:	af00      	add	r7, sp, #0
 8107b02:	6078      	str	r0, [r7, #4]
 8107b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	6a1b      	ldr	r3, [r3, #32]
 8107b0a:	f023 0201 	bic.w	r2, r3, #1
 8107b0e:	687b      	ldr	r3, [r7, #4]
 8107b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	6a1b      	ldr	r3, [r3, #32]
 8107b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	685b      	ldr	r3, [r3, #4]
 8107b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107b1e:	687b      	ldr	r3, [r7, #4]
 8107b20:	699b      	ldr	r3, [r3, #24]
 8107b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107b24:	68fb      	ldr	r3, [r7, #12]
 8107b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107b30:	68fb      	ldr	r3, [r7, #12]
 8107b32:	f023 0303 	bic.w	r3, r3, #3
 8107b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107b38:	683b      	ldr	r3, [r7, #0]
 8107b3a:	681b      	ldr	r3, [r3, #0]
 8107b3c:	68fa      	ldr	r2, [r7, #12]
 8107b3e:	4313      	orrs	r3, r2
 8107b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107b42:	697b      	ldr	r3, [r7, #20]
 8107b44:	f023 0302 	bic.w	r3, r3, #2
 8107b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107b4a:	683b      	ldr	r3, [r7, #0]
 8107b4c:	689b      	ldr	r3, [r3, #8]
 8107b4e:	697a      	ldr	r2, [r7, #20]
 8107b50:	4313      	orrs	r3, r2
 8107b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	4a2c      	ldr	r2, [pc, #176]	; (8107c08 <TIM_OC1_SetConfig+0x10c>)
 8107b58:	4293      	cmp	r3, r2
 8107b5a:	d00f      	beq.n	8107b7c <TIM_OC1_SetConfig+0x80>
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	4a2b      	ldr	r2, [pc, #172]	; (8107c0c <TIM_OC1_SetConfig+0x110>)
 8107b60:	4293      	cmp	r3, r2
 8107b62:	d00b      	beq.n	8107b7c <TIM_OC1_SetConfig+0x80>
 8107b64:	687b      	ldr	r3, [r7, #4]
 8107b66:	4a2a      	ldr	r2, [pc, #168]	; (8107c10 <TIM_OC1_SetConfig+0x114>)
 8107b68:	4293      	cmp	r3, r2
 8107b6a:	d007      	beq.n	8107b7c <TIM_OC1_SetConfig+0x80>
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	4a29      	ldr	r2, [pc, #164]	; (8107c14 <TIM_OC1_SetConfig+0x118>)
 8107b70:	4293      	cmp	r3, r2
 8107b72:	d003      	beq.n	8107b7c <TIM_OC1_SetConfig+0x80>
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	4a28      	ldr	r2, [pc, #160]	; (8107c18 <TIM_OC1_SetConfig+0x11c>)
 8107b78:	4293      	cmp	r3, r2
 8107b7a:	d10c      	bne.n	8107b96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107b7c:	697b      	ldr	r3, [r7, #20]
 8107b7e:	f023 0308 	bic.w	r3, r3, #8
 8107b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107b84:	683b      	ldr	r3, [r7, #0]
 8107b86:	68db      	ldr	r3, [r3, #12]
 8107b88:	697a      	ldr	r2, [r7, #20]
 8107b8a:	4313      	orrs	r3, r2
 8107b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107b8e:	697b      	ldr	r3, [r7, #20]
 8107b90:	f023 0304 	bic.w	r3, r3, #4
 8107b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	4a1b      	ldr	r2, [pc, #108]	; (8107c08 <TIM_OC1_SetConfig+0x10c>)
 8107b9a:	4293      	cmp	r3, r2
 8107b9c:	d00f      	beq.n	8107bbe <TIM_OC1_SetConfig+0xc2>
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	4a1a      	ldr	r2, [pc, #104]	; (8107c0c <TIM_OC1_SetConfig+0x110>)
 8107ba2:	4293      	cmp	r3, r2
 8107ba4:	d00b      	beq.n	8107bbe <TIM_OC1_SetConfig+0xc2>
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	4a19      	ldr	r2, [pc, #100]	; (8107c10 <TIM_OC1_SetConfig+0x114>)
 8107baa:	4293      	cmp	r3, r2
 8107bac:	d007      	beq.n	8107bbe <TIM_OC1_SetConfig+0xc2>
 8107bae:	687b      	ldr	r3, [r7, #4]
 8107bb0:	4a18      	ldr	r2, [pc, #96]	; (8107c14 <TIM_OC1_SetConfig+0x118>)
 8107bb2:	4293      	cmp	r3, r2
 8107bb4:	d003      	beq.n	8107bbe <TIM_OC1_SetConfig+0xc2>
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	4a17      	ldr	r2, [pc, #92]	; (8107c18 <TIM_OC1_SetConfig+0x11c>)
 8107bba:	4293      	cmp	r3, r2
 8107bbc:	d111      	bne.n	8107be2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107bbe:	693b      	ldr	r3, [r7, #16]
 8107bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107bc6:	693b      	ldr	r3, [r7, #16]
 8107bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107bce:	683b      	ldr	r3, [r7, #0]
 8107bd0:	695b      	ldr	r3, [r3, #20]
 8107bd2:	693a      	ldr	r2, [r7, #16]
 8107bd4:	4313      	orrs	r3, r2
 8107bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107bd8:	683b      	ldr	r3, [r7, #0]
 8107bda:	699b      	ldr	r3, [r3, #24]
 8107bdc:	693a      	ldr	r2, [r7, #16]
 8107bde:	4313      	orrs	r3, r2
 8107be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	693a      	ldr	r2, [r7, #16]
 8107be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	68fa      	ldr	r2, [r7, #12]
 8107bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107bee:	683b      	ldr	r3, [r7, #0]
 8107bf0:	685a      	ldr	r2, [r3, #4]
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	697a      	ldr	r2, [r7, #20]
 8107bfa:	621a      	str	r2, [r3, #32]
}
 8107bfc:	bf00      	nop
 8107bfe:	371c      	adds	r7, #28
 8107c00:	46bd      	mov	sp, r7
 8107c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c06:	4770      	bx	lr
 8107c08:	40010000 	.word	0x40010000
 8107c0c:	40010400 	.word	0x40010400
 8107c10:	40014000 	.word	0x40014000
 8107c14:	40014400 	.word	0x40014400
 8107c18:	40014800 	.word	0x40014800

08107c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107c1c:	b480      	push	{r7}
 8107c1e:	b087      	sub	sp, #28
 8107c20:	af00      	add	r7, sp, #0
 8107c22:	6078      	str	r0, [r7, #4]
 8107c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	6a1b      	ldr	r3, [r3, #32]
 8107c2a:	f023 0210 	bic.w	r2, r3, #16
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	6a1b      	ldr	r3, [r3, #32]
 8107c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	685b      	ldr	r3, [r3, #4]
 8107c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	699b      	ldr	r3, [r3, #24]
 8107c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107c44:	68fb      	ldr	r3, [r7, #12]
 8107c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107c50:	68fb      	ldr	r3, [r7, #12]
 8107c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107c58:	683b      	ldr	r3, [r7, #0]
 8107c5a:	681b      	ldr	r3, [r3, #0]
 8107c5c:	021b      	lsls	r3, r3, #8
 8107c5e:	68fa      	ldr	r2, [r7, #12]
 8107c60:	4313      	orrs	r3, r2
 8107c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107c64:	697b      	ldr	r3, [r7, #20]
 8107c66:	f023 0320 	bic.w	r3, r3, #32
 8107c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107c6c:	683b      	ldr	r3, [r7, #0]
 8107c6e:	689b      	ldr	r3, [r3, #8]
 8107c70:	011b      	lsls	r3, r3, #4
 8107c72:	697a      	ldr	r2, [r7, #20]
 8107c74:	4313      	orrs	r3, r2
 8107c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	4a28      	ldr	r2, [pc, #160]	; (8107d1c <TIM_OC2_SetConfig+0x100>)
 8107c7c:	4293      	cmp	r3, r2
 8107c7e:	d003      	beq.n	8107c88 <TIM_OC2_SetConfig+0x6c>
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	4a27      	ldr	r2, [pc, #156]	; (8107d20 <TIM_OC2_SetConfig+0x104>)
 8107c84:	4293      	cmp	r3, r2
 8107c86:	d10d      	bne.n	8107ca4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107c88:	697b      	ldr	r3, [r7, #20]
 8107c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107c90:	683b      	ldr	r3, [r7, #0]
 8107c92:	68db      	ldr	r3, [r3, #12]
 8107c94:	011b      	lsls	r3, r3, #4
 8107c96:	697a      	ldr	r2, [r7, #20]
 8107c98:	4313      	orrs	r3, r2
 8107c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107c9c:	697b      	ldr	r3, [r7, #20]
 8107c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107ca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	4a1d      	ldr	r2, [pc, #116]	; (8107d1c <TIM_OC2_SetConfig+0x100>)
 8107ca8:	4293      	cmp	r3, r2
 8107caa:	d00f      	beq.n	8107ccc <TIM_OC2_SetConfig+0xb0>
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	4a1c      	ldr	r2, [pc, #112]	; (8107d20 <TIM_OC2_SetConfig+0x104>)
 8107cb0:	4293      	cmp	r3, r2
 8107cb2:	d00b      	beq.n	8107ccc <TIM_OC2_SetConfig+0xb0>
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	4a1b      	ldr	r2, [pc, #108]	; (8107d24 <TIM_OC2_SetConfig+0x108>)
 8107cb8:	4293      	cmp	r3, r2
 8107cba:	d007      	beq.n	8107ccc <TIM_OC2_SetConfig+0xb0>
 8107cbc:	687b      	ldr	r3, [r7, #4]
 8107cbe:	4a1a      	ldr	r2, [pc, #104]	; (8107d28 <TIM_OC2_SetConfig+0x10c>)
 8107cc0:	4293      	cmp	r3, r2
 8107cc2:	d003      	beq.n	8107ccc <TIM_OC2_SetConfig+0xb0>
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	4a19      	ldr	r2, [pc, #100]	; (8107d2c <TIM_OC2_SetConfig+0x110>)
 8107cc8:	4293      	cmp	r3, r2
 8107cca:	d113      	bne.n	8107cf4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107ccc:	693b      	ldr	r3, [r7, #16]
 8107cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107cd4:	693b      	ldr	r3, [r7, #16]
 8107cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107cdc:	683b      	ldr	r3, [r7, #0]
 8107cde:	695b      	ldr	r3, [r3, #20]
 8107ce0:	009b      	lsls	r3, r3, #2
 8107ce2:	693a      	ldr	r2, [r7, #16]
 8107ce4:	4313      	orrs	r3, r2
 8107ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107ce8:	683b      	ldr	r3, [r7, #0]
 8107cea:	699b      	ldr	r3, [r3, #24]
 8107cec:	009b      	lsls	r3, r3, #2
 8107cee:	693a      	ldr	r2, [r7, #16]
 8107cf0:	4313      	orrs	r3, r2
 8107cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107cf4:	687b      	ldr	r3, [r7, #4]
 8107cf6:	693a      	ldr	r2, [r7, #16]
 8107cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	68fa      	ldr	r2, [r7, #12]
 8107cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107d00:	683b      	ldr	r3, [r7, #0]
 8107d02:	685a      	ldr	r2, [r3, #4]
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	697a      	ldr	r2, [r7, #20]
 8107d0c:	621a      	str	r2, [r3, #32]
}
 8107d0e:	bf00      	nop
 8107d10:	371c      	adds	r7, #28
 8107d12:	46bd      	mov	sp, r7
 8107d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d18:	4770      	bx	lr
 8107d1a:	bf00      	nop
 8107d1c:	40010000 	.word	0x40010000
 8107d20:	40010400 	.word	0x40010400
 8107d24:	40014000 	.word	0x40014000
 8107d28:	40014400 	.word	0x40014400
 8107d2c:	40014800 	.word	0x40014800

08107d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107d30:	b480      	push	{r7}
 8107d32:	b087      	sub	sp, #28
 8107d34:	af00      	add	r7, sp, #0
 8107d36:	6078      	str	r0, [r7, #4]
 8107d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	6a1b      	ldr	r3, [r3, #32]
 8107d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	6a1b      	ldr	r3, [r3, #32]
 8107d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d4c:	687b      	ldr	r3, [r7, #4]
 8107d4e:	685b      	ldr	r3, [r3, #4]
 8107d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	69db      	ldr	r3, [r3, #28]
 8107d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107d58:	68fb      	ldr	r3, [r7, #12]
 8107d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107d64:	68fb      	ldr	r3, [r7, #12]
 8107d66:	f023 0303 	bic.w	r3, r3, #3
 8107d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107d6c:	683b      	ldr	r3, [r7, #0]
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	68fa      	ldr	r2, [r7, #12]
 8107d72:	4313      	orrs	r3, r2
 8107d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107d76:	697b      	ldr	r3, [r7, #20]
 8107d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107d7e:	683b      	ldr	r3, [r7, #0]
 8107d80:	689b      	ldr	r3, [r3, #8]
 8107d82:	021b      	lsls	r3, r3, #8
 8107d84:	697a      	ldr	r2, [r7, #20]
 8107d86:	4313      	orrs	r3, r2
 8107d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107d8a:	687b      	ldr	r3, [r7, #4]
 8107d8c:	4a27      	ldr	r2, [pc, #156]	; (8107e2c <TIM_OC3_SetConfig+0xfc>)
 8107d8e:	4293      	cmp	r3, r2
 8107d90:	d003      	beq.n	8107d9a <TIM_OC3_SetConfig+0x6a>
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	4a26      	ldr	r2, [pc, #152]	; (8107e30 <TIM_OC3_SetConfig+0x100>)
 8107d96:	4293      	cmp	r3, r2
 8107d98:	d10d      	bne.n	8107db6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107d9a:	697b      	ldr	r3, [r7, #20]
 8107d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107da2:	683b      	ldr	r3, [r7, #0]
 8107da4:	68db      	ldr	r3, [r3, #12]
 8107da6:	021b      	lsls	r3, r3, #8
 8107da8:	697a      	ldr	r2, [r7, #20]
 8107daa:	4313      	orrs	r3, r2
 8107dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107dae:	697b      	ldr	r3, [r7, #20]
 8107db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	4a1c      	ldr	r2, [pc, #112]	; (8107e2c <TIM_OC3_SetConfig+0xfc>)
 8107dba:	4293      	cmp	r3, r2
 8107dbc:	d00f      	beq.n	8107dde <TIM_OC3_SetConfig+0xae>
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	4a1b      	ldr	r2, [pc, #108]	; (8107e30 <TIM_OC3_SetConfig+0x100>)
 8107dc2:	4293      	cmp	r3, r2
 8107dc4:	d00b      	beq.n	8107dde <TIM_OC3_SetConfig+0xae>
 8107dc6:	687b      	ldr	r3, [r7, #4]
 8107dc8:	4a1a      	ldr	r2, [pc, #104]	; (8107e34 <TIM_OC3_SetConfig+0x104>)
 8107dca:	4293      	cmp	r3, r2
 8107dcc:	d007      	beq.n	8107dde <TIM_OC3_SetConfig+0xae>
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	4a19      	ldr	r2, [pc, #100]	; (8107e38 <TIM_OC3_SetConfig+0x108>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d003      	beq.n	8107dde <TIM_OC3_SetConfig+0xae>
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	4a18      	ldr	r2, [pc, #96]	; (8107e3c <TIM_OC3_SetConfig+0x10c>)
 8107dda:	4293      	cmp	r3, r2
 8107ddc:	d113      	bne.n	8107e06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107dde:	693b      	ldr	r3, [r7, #16]
 8107de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107de6:	693b      	ldr	r3, [r7, #16]
 8107de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107dee:	683b      	ldr	r3, [r7, #0]
 8107df0:	695b      	ldr	r3, [r3, #20]
 8107df2:	011b      	lsls	r3, r3, #4
 8107df4:	693a      	ldr	r2, [r7, #16]
 8107df6:	4313      	orrs	r3, r2
 8107df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107dfa:	683b      	ldr	r3, [r7, #0]
 8107dfc:	699b      	ldr	r3, [r3, #24]
 8107dfe:	011b      	lsls	r3, r3, #4
 8107e00:	693a      	ldr	r2, [r7, #16]
 8107e02:	4313      	orrs	r3, r2
 8107e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	693a      	ldr	r2, [r7, #16]
 8107e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	68fa      	ldr	r2, [r7, #12]
 8107e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107e12:	683b      	ldr	r3, [r7, #0]
 8107e14:	685a      	ldr	r2, [r3, #4]
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	697a      	ldr	r2, [r7, #20]
 8107e1e:	621a      	str	r2, [r3, #32]
}
 8107e20:	bf00      	nop
 8107e22:	371c      	adds	r7, #28
 8107e24:	46bd      	mov	sp, r7
 8107e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e2a:	4770      	bx	lr
 8107e2c:	40010000 	.word	0x40010000
 8107e30:	40010400 	.word	0x40010400
 8107e34:	40014000 	.word	0x40014000
 8107e38:	40014400 	.word	0x40014400
 8107e3c:	40014800 	.word	0x40014800

08107e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107e40:	b480      	push	{r7}
 8107e42:	b087      	sub	sp, #28
 8107e44:	af00      	add	r7, sp, #0
 8107e46:	6078      	str	r0, [r7, #4]
 8107e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107e4a:	687b      	ldr	r3, [r7, #4]
 8107e4c:	6a1b      	ldr	r3, [r3, #32]
 8107e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107e52:	687b      	ldr	r3, [r7, #4]
 8107e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	6a1b      	ldr	r3, [r3, #32]
 8107e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	685b      	ldr	r3, [r3, #4]
 8107e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	69db      	ldr	r3, [r3, #28]
 8107e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107e68:	68fb      	ldr	r3, [r7, #12]
 8107e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107e74:	68fb      	ldr	r3, [r7, #12]
 8107e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107e7c:	683b      	ldr	r3, [r7, #0]
 8107e7e:	681b      	ldr	r3, [r3, #0]
 8107e80:	021b      	lsls	r3, r3, #8
 8107e82:	68fa      	ldr	r2, [r7, #12]
 8107e84:	4313      	orrs	r3, r2
 8107e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107e88:	693b      	ldr	r3, [r7, #16]
 8107e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107e90:	683b      	ldr	r3, [r7, #0]
 8107e92:	689b      	ldr	r3, [r3, #8]
 8107e94:	031b      	lsls	r3, r3, #12
 8107e96:	693a      	ldr	r2, [r7, #16]
 8107e98:	4313      	orrs	r3, r2
 8107e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107e9c:	687b      	ldr	r3, [r7, #4]
 8107e9e:	4a18      	ldr	r2, [pc, #96]	; (8107f00 <TIM_OC4_SetConfig+0xc0>)
 8107ea0:	4293      	cmp	r3, r2
 8107ea2:	d00f      	beq.n	8107ec4 <TIM_OC4_SetConfig+0x84>
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	4a17      	ldr	r2, [pc, #92]	; (8107f04 <TIM_OC4_SetConfig+0xc4>)
 8107ea8:	4293      	cmp	r3, r2
 8107eaa:	d00b      	beq.n	8107ec4 <TIM_OC4_SetConfig+0x84>
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	4a16      	ldr	r2, [pc, #88]	; (8107f08 <TIM_OC4_SetConfig+0xc8>)
 8107eb0:	4293      	cmp	r3, r2
 8107eb2:	d007      	beq.n	8107ec4 <TIM_OC4_SetConfig+0x84>
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	4a15      	ldr	r2, [pc, #84]	; (8107f0c <TIM_OC4_SetConfig+0xcc>)
 8107eb8:	4293      	cmp	r3, r2
 8107eba:	d003      	beq.n	8107ec4 <TIM_OC4_SetConfig+0x84>
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	4a14      	ldr	r2, [pc, #80]	; (8107f10 <TIM_OC4_SetConfig+0xd0>)
 8107ec0:	4293      	cmp	r3, r2
 8107ec2:	d109      	bne.n	8107ed8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107ec4:	697b      	ldr	r3, [r7, #20]
 8107ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107ecc:	683b      	ldr	r3, [r7, #0]
 8107ece:	695b      	ldr	r3, [r3, #20]
 8107ed0:	019b      	lsls	r3, r3, #6
 8107ed2:	697a      	ldr	r2, [r7, #20]
 8107ed4:	4313      	orrs	r3, r2
 8107ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	697a      	ldr	r2, [r7, #20]
 8107edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107ede:	687b      	ldr	r3, [r7, #4]
 8107ee0:	68fa      	ldr	r2, [r7, #12]
 8107ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107ee4:	683b      	ldr	r3, [r7, #0]
 8107ee6:	685a      	ldr	r2, [r3, #4]
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	693a      	ldr	r2, [r7, #16]
 8107ef0:	621a      	str	r2, [r3, #32]
}
 8107ef2:	bf00      	nop
 8107ef4:	371c      	adds	r7, #28
 8107ef6:	46bd      	mov	sp, r7
 8107ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107efc:	4770      	bx	lr
 8107efe:	bf00      	nop
 8107f00:	40010000 	.word	0x40010000
 8107f04:	40010400 	.word	0x40010400
 8107f08:	40014000 	.word	0x40014000
 8107f0c:	40014400 	.word	0x40014400
 8107f10:	40014800 	.word	0x40014800

08107f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107f14:	b480      	push	{r7}
 8107f16:	b087      	sub	sp, #28
 8107f18:	af00      	add	r7, sp, #0
 8107f1a:	6078      	str	r0, [r7, #4]
 8107f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107f1e:	687b      	ldr	r3, [r7, #4]
 8107f20:	6a1b      	ldr	r3, [r3, #32]
 8107f22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107f26:	687b      	ldr	r3, [r7, #4]
 8107f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	6a1b      	ldr	r3, [r3, #32]
 8107f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	685b      	ldr	r3, [r3, #4]
 8107f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107f3c:	68fb      	ldr	r3, [r7, #12]
 8107f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107f48:	683b      	ldr	r3, [r7, #0]
 8107f4a:	681b      	ldr	r3, [r3, #0]
 8107f4c:	68fa      	ldr	r2, [r7, #12]
 8107f4e:	4313      	orrs	r3, r2
 8107f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107f52:	693b      	ldr	r3, [r7, #16]
 8107f54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107f58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107f5a:	683b      	ldr	r3, [r7, #0]
 8107f5c:	689b      	ldr	r3, [r3, #8]
 8107f5e:	041b      	lsls	r3, r3, #16
 8107f60:	693a      	ldr	r2, [r7, #16]
 8107f62:	4313      	orrs	r3, r2
 8107f64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107f66:	687b      	ldr	r3, [r7, #4]
 8107f68:	4a17      	ldr	r2, [pc, #92]	; (8107fc8 <TIM_OC5_SetConfig+0xb4>)
 8107f6a:	4293      	cmp	r3, r2
 8107f6c:	d00f      	beq.n	8107f8e <TIM_OC5_SetConfig+0x7a>
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	4a16      	ldr	r2, [pc, #88]	; (8107fcc <TIM_OC5_SetConfig+0xb8>)
 8107f72:	4293      	cmp	r3, r2
 8107f74:	d00b      	beq.n	8107f8e <TIM_OC5_SetConfig+0x7a>
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	4a15      	ldr	r2, [pc, #84]	; (8107fd0 <TIM_OC5_SetConfig+0xbc>)
 8107f7a:	4293      	cmp	r3, r2
 8107f7c:	d007      	beq.n	8107f8e <TIM_OC5_SetConfig+0x7a>
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	4a14      	ldr	r2, [pc, #80]	; (8107fd4 <TIM_OC5_SetConfig+0xc0>)
 8107f82:	4293      	cmp	r3, r2
 8107f84:	d003      	beq.n	8107f8e <TIM_OC5_SetConfig+0x7a>
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	4a13      	ldr	r2, [pc, #76]	; (8107fd8 <TIM_OC5_SetConfig+0xc4>)
 8107f8a:	4293      	cmp	r3, r2
 8107f8c:	d109      	bne.n	8107fa2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107f8e:	697b      	ldr	r3, [r7, #20]
 8107f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107f94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107f96:	683b      	ldr	r3, [r7, #0]
 8107f98:	695b      	ldr	r3, [r3, #20]
 8107f9a:	021b      	lsls	r3, r3, #8
 8107f9c:	697a      	ldr	r2, [r7, #20]
 8107f9e:	4313      	orrs	r3, r2
 8107fa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	697a      	ldr	r2, [r7, #20]
 8107fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	68fa      	ldr	r2, [r7, #12]
 8107fac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107fae:	683b      	ldr	r3, [r7, #0]
 8107fb0:	685a      	ldr	r2, [r3, #4]
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	693a      	ldr	r2, [r7, #16]
 8107fba:	621a      	str	r2, [r3, #32]
}
 8107fbc:	bf00      	nop
 8107fbe:	371c      	adds	r7, #28
 8107fc0:	46bd      	mov	sp, r7
 8107fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fc6:	4770      	bx	lr
 8107fc8:	40010000 	.word	0x40010000
 8107fcc:	40010400 	.word	0x40010400
 8107fd0:	40014000 	.word	0x40014000
 8107fd4:	40014400 	.word	0x40014400
 8107fd8:	40014800 	.word	0x40014800

08107fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107fdc:	b480      	push	{r7}
 8107fde:	b087      	sub	sp, #28
 8107fe0:	af00      	add	r7, sp, #0
 8107fe2:	6078      	str	r0, [r7, #4]
 8107fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6a1b      	ldr	r3, [r3, #32]
 8107fea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	6a1b      	ldr	r3, [r3, #32]
 8107ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	685b      	ldr	r3, [r3, #4]
 8107ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8108004:	68fb      	ldr	r3, [r7, #12]
 8108006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810800a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810800e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108010:	683b      	ldr	r3, [r7, #0]
 8108012:	681b      	ldr	r3, [r3, #0]
 8108014:	021b      	lsls	r3, r3, #8
 8108016:	68fa      	ldr	r2, [r7, #12]
 8108018:	4313      	orrs	r3, r2
 810801a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810801c:	693b      	ldr	r3, [r7, #16]
 810801e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8108024:	683b      	ldr	r3, [r7, #0]
 8108026:	689b      	ldr	r3, [r3, #8]
 8108028:	051b      	lsls	r3, r3, #20
 810802a:	693a      	ldr	r2, [r7, #16]
 810802c:	4313      	orrs	r3, r2
 810802e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	4a18      	ldr	r2, [pc, #96]	; (8108094 <TIM_OC6_SetConfig+0xb8>)
 8108034:	4293      	cmp	r3, r2
 8108036:	d00f      	beq.n	8108058 <TIM_OC6_SetConfig+0x7c>
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	4a17      	ldr	r2, [pc, #92]	; (8108098 <TIM_OC6_SetConfig+0xbc>)
 810803c:	4293      	cmp	r3, r2
 810803e:	d00b      	beq.n	8108058 <TIM_OC6_SetConfig+0x7c>
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	4a16      	ldr	r2, [pc, #88]	; (810809c <TIM_OC6_SetConfig+0xc0>)
 8108044:	4293      	cmp	r3, r2
 8108046:	d007      	beq.n	8108058 <TIM_OC6_SetConfig+0x7c>
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	4a15      	ldr	r2, [pc, #84]	; (81080a0 <TIM_OC6_SetConfig+0xc4>)
 810804c:	4293      	cmp	r3, r2
 810804e:	d003      	beq.n	8108058 <TIM_OC6_SetConfig+0x7c>
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	4a14      	ldr	r2, [pc, #80]	; (81080a4 <TIM_OC6_SetConfig+0xc8>)
 8108054:	4293      	cmp	r3, r2
 8108056:	d109      	bne.n	810806c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108058:	697b      	ldr	r3, [r7, #20]
 810805a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810805e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108060:	683b      	ldr	r3, [r7, #0]
 8108062:	695b      	ldr	r3, [r3, #20]
 8108064:	029b      	lsls	r3, r3, #10
 8108066:	697a      	ldr	r2, [r7, #20]
 8108068:	4313      	orrs	r3, r2
 810806a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	697a      	ldr	r2, [r7, #20]
 8108070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	68fa      	ldr	r2, [r7, #12]
 8108076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108078:	683b      	ldr	r3, [r7, #0]
 810807a:	685a      	ldr	r2, [r3, #4]
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	693a      	ldr	r2, [r7, #16]
 8108084:	621a      	str	r2, [r3, #32]
}
 8108086:	bf00      	nop
 8108088:	371c      	adds	r7, #28
 810808a:	46bd      	mov	sp, r7
 810808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108090:	4770      	bx	lr
 8108092:	bf00      	nop
 8108094:	40010000 	.word	0x40010000
 8108098:	40010400 	.word	0x40010400
 810809c:	40014000 	.word	0x40014000
 81080a0:	40014400 	.word	0x40014400
 81080a4:	40014800 	.word	0x40014800

081080a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81080a8:	b480      	push	{r7}
 81080aa:	b087      	sub	sp, #28
 81080ac:	af00      	add	r7, sp, #0
 81080ae:	60f8      	str	r0, [r7, #12]
 81080b0:	60b9      	str	r1, [r7, #8]
 81080b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81080b4:	68fb      	ldr	r3, [r7, #12]
 81080b6:	6a1b      	ldr	r3, [r3, #32]
 81080b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81080ba:	68fb      	ldr	r3, [r7, #12]
 81080bc:	6a1b      	ldr	r3, [r3, #32]
 81080be:	f023 0201 	bic.w	r2, r3, #1
 81080c2:	68fb      	ldr	r3, [r7, #12]
 81080c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81080c6:	68fb      	ldr	r3, [r7, #12]
 81080c8:	699b      	ldr	r3, [r3, #24]
 81080ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81080cc:	693b      	ldr	r3, [r7, #16]
 81080ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81080d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	011b      	lsls	r3, r3, #4
 81080d8:	693a      	ldr	r2, [r7, #16]
 81080da:	4313      	orrs	r3, r2
 81080dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81080de:	697b      	ldr	r3, [r7, #20]
 81080e0:	f023 030a 	bic.w	r3, r3, #10
 81080e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81080e6:	697a      	ldr	r2, [r7, #20]
 81080e8:	68bb      	ldr	r3, [r7, #8]
 81080ea:	4313      	orrs	r3, r2
 81080ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81080ee:	68fb      	ldr	r3, [r7, #12]
 81080f0:	693a      	ldr	r2, [r7, #16]
 81080f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81080f4:	68fb      	ldr	r3, [r7, #12]
 81080f6:	697a      	ldr	r2, [r7, #20]
 81080f8:	621a      	str	r2, [r3, #32]
}
 81080fa:	bf00      	nop
 81080fc:	371c      	adds	r7, #28
 81080fe:	46bd      	mov	sp, r7
 8108100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108104:	4770      	bx	lr

08108106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108106:	b480      	push	{r7}
 8108108:	b087      	sub	sp, #28
 810810a:	af00      	add	r7, sp, #0
 810810c:	60f8      	str	r0, [r7, #12]
 810810e:	60b9      	str	r1, [r7, #8]
 8108110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108112:	68fb      	ldr	r3, [r7, #12]
 8108114:	6a1b      	ldr	r3, [r3, #32]
 8108116:	f023 0210 	bic.w	r2, r3, #16
 810811a:	68fb      	ldr	r3, [r7, #12]
 810811c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810811e:	68fb      	ldr	r3, [r7, #12]
 8108120:	699b      	ldr	r3, [r3, #24]
 8108122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8108124:	68fb      	ldr	r3, [r7, #12]
 8108126:	6a1b      	ldr	r3, [r3, #32]
 8108128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810812a:	697b      	ldr	r3, [r7, #20]
 810812c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108132:	687b      	ldr	r3, [r7, #4]
 8108134:	031b      	lsls	r3, r3, #12
 8108136:	697a      	ldr	r2, [r7, #20]
 8108138:	4313      	orrs	r3, r2
 810813a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810813c:	693b      	ldr	r3, [r7, #16]
 810813e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8108142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8108144:	68bb      	ldr	r3, [r7, #8]
 8108146:	011b      	lsls	r3, r3, #4
 8108148:	693a      	ldr	r2, [r7, #16]
 810814a:	4313      	orrs	r3, r2
 810814c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810814e:	68fb      	ldr	r3, [r7, #12]
 8108150:	697a      	ldr	r2, [r7, #20]
 8108152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108154:	68fb      	ldr	r3, [r7, #12]
 8108156:	693a      	ldr	r2, [r7, #16]
 8108158:	621a      	str	r2, [r3, #32]
}
 810815a:	bf00      	nop
 810815c:	371c      	adds	r7, #28
 810815e:	46bd      	mov	sp, r7
 8108160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108164:	4770      	bx	lr

08108166 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8108166:	b480      	push	{r7}
 8108168:	b085      	sub	sp, #20
 810816a:	af00      	add	r7, sp, #0
 810816c:	6078      	str	r0, [r7, #4]
 810816e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	689b      	ldr	r3, [r3, #8]
 8108174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8108176:	68fb      	ldr	r3, [r7, #12]
 8108178:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810817c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8108182:	683a      	ldr	r2, [r7, #0]
 8108184:	68fb      	ldr	r3, [r7, #12]
 8108186:	4313      	orrs	r3, r2
 8108188:	f043 0307 	orr.w	r3, r3, #7
 810818c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	68fa      	ldr	r2, [r7, #12]
 8108192:	609a      	str	r2, [r3, #8]
}
 8108194:	bf00      	nop
 8108196:	3714      	adds	r7, #20
 8108198:	46bd      	mov	sp, r7
 810819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810819e:	4770      	bx	lr

081081a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81081a0:	b480      	push	{r7}
 81081a2:	b087      	sub	sp, #28
 81081a4:	af00      	add	r7, sp, #0
 81081a6:	60f8      	str	r0, [r7, #12]
 81081a8:	60b9      	str	r1, [r7, #8]
 81081aa:	607a      	str	r2, [r7, #4]
 81081ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81081ae:	68fb      	ldr	r3, [r7, #12]
 81081b0:	689b      	ldr	r3, [r3, #8]
 81081b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81081b4:	697b      	ldr	r3, [r7, #20]
 81081b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81081ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81081bc:	683b      	ldr	r3, [r7, #0]
 81081be:	021a      	lsls	r2, r3, #8
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	431a      	orrs	r2, r3
 81081c4:	68bb      	ldr	r3, [r7, #8]
 81081c6:	4313      	orrs	r3, r2
 81081c8:	697a      	ldr	r2, [r7, #20]
 81081ca:	4313      	orrs	r3, r2
 81081cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81081ce:	68fb      	ldr	r3, [r7, #12]
 81081d0:	697a      	ldr	r2, [r7, #20]
 81081d2:	609a      	str	r2, [r3, #8]
}
 81081d4:	bf00      	nop
 81081d6:	371c      	adds	r7, #28
 81081d8:	46bd      	mov	sp, r7
 81081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081de:	4770      	bx	lr

081081e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81081e0:	b480      	push	{r7}
 81081e2:	b087      	sub	sp, #28
 81081e4:	af00      	add	r7, sp, #0
 81081e6:	60f8      	str	r0, [r7, #12]
 81081e8:	60b9      	str	r1, [r7, #8]
 81081ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81081ec:	68bb      	ldr	r3, [r7, #8]
 81081ee:	f003 031f 	and.w	r3, r3, #31
 81081f2:	2201      	movs	r2, #1
 81081f4:	fa02 f303 	lsl.w	r3, r2, r3
 81081f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81081fa:	68fb      	ldr	r3, [r7, #12]
 81081fc:	6a1a      	ldr	r2, [r3, #32]
 81081fe:	697b      	ldr	r3, [r7, #20]
 8108200:	43db      	mvns	r3, r3
 8108202:	401a      	ands	r2, r3
 8108204:	68fb      	ldr	r3, [r7, #12]
 8108206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108208:	68fb      	ldr	r3, [r7, #12]
 810820a:	6a1a      	ldr	r2, [r3, #32]
 810820c:	68bb      	ldr	r3, [r7, #8]
 810820e:	f003 031f 	and.w	r3, r3, #31
 8108212:	6879      	ldr	r1, [r7, #4]
 8108214:	fa01 f303 	lsl.w	r3, r1, r3
 8108218:	431a      	orrs	r2, r3
 810821a:	68fb      	ldr	r3, [r7, #12]
 810821c:	621a      	str	r2, [r3, #32]
}
 810821e:	bf00      	nop
 8108220:	371c      	adds	r7, #28
 8108222:	46bd      	mov	sp, r7
 8108224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108228:	4770      	bx	lr
	...

0810822c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810822c:	b480      	push	{r7}
 810822e:	b085      	sub	sp, #20
 8108230:	af00      	add	r7, sp, #0
 8108232:	6078      	str	r0, [r7, #4]
 8108234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810823c:	2b01      	cmp	r3, #1
 810823e:	d101      	bne.n	8108244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108240:	2302      	movs	r3, #2
 8108242:	e06d      	b.n	8108320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8108244:	687b      	ldr	r3, [r7, #4]
 8108246:	2201      	movs	r2, #1
 8108248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810824c:	687b      	ldr	r3, [r7, #4]
 810824e:	2202      	movs	r2, #2
 8108250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108254:	687b      	ldr	r3, [r7, #4]
 8108256:	681b      	ldr	r3, [r3, #0]
 8108258:	685b      	ldr	r3, [r3, #4]
 810825a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	681b      	ldr	r3, [r3, #0]
 8108260:	689b      	ldr	r3, [r3, #8]
 8108262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8108264:	687b      	ldr	r3, [r7, #4]
 8108266:	681b      	ldr	r3, [r3, #0]
 8108268:	4a30      	ldr	r2, [pc, #192]	; (810832c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810826a:	4293      	cmp	r3, r2
 810826c:	d004      	beq.n	8108278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	4a2f      	ldr	r2, [pc, #188]	; (8108330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108274:	4293      	cmp	r3, r2
 8108276:	d108      	bne.n	810828a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108278:	68fb      	ldr	r3, [r7, #12]
 810827a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810827e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108280:	683b      	ldr	r3, [r7, #0]
 8108282:	685b      	ldr	r3, [r3, #4]
 8108284:	68fa      	ldr	r2, [r7, #12]
 8108286:	4313      	orrs	r3, r2
 8108288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810828a:	68fb      	ldr	r3, [r7, #12]
 810828c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108292:	683b      	ldr	r3, [r7, #0]
 8108294:	681b      	ldr	r3, [r3, #0]
 8108296:	68fa      	ldr	r2, [r7, #12]
 8108298:	4313      	orrs	r3, r2
 810829a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810829c:	687b      	ldr	r3, [r7, #4]
 810829e:	681b      	ldr	r3, [r3, #0]
 81082a0:	68fa      	ldr	r2, [r7, #12]
 81082a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	4a20      	ldr	r2, [pc, #128]	; (810832c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81082aa:	4293      	cmp	r3, r2
 81082ac:	d022      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	681b      	ldr	r3, [r3, #0]
 81082b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81082b6:	d01d      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	681b      	ldr	r3, [r3, #0]
 81082bc:	4a1d      	ldr	r2, [pc, #116]	; (8108334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81082be:	4293      	cmp	r3, r2
 81082c0:	d018      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	681b      	ldr	r3, [r3, #0]
 81082c6:	4a1c      	ldr	r2, [pc, #112]	; (8108338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81082c8:	4293      	cmp	r3, r2
 81082ca:	d013      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	681b      	ldr	r3, [r3, #0]
 81082d0:	4a1a      	ldr	r2, [pc, #104]	; (810833c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81082d2:	4293      	cmp	r3, r2
 81082d4:	d00e      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	681b      	ldr	r3, [r3, #0]
 81082da:	4a15      	ldr	r2, [pc, #84]	; (8108330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81082dc:	4293      	cmp	r3, r2
 81082de:	d009      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082e0:	687b      	ldr	r3, [r7, #4]
 81082e2:	681b      	ldr	r3, [r3, #0]
 81082e4:	4a16      	ldr	r2, [pc, #88]	; (8108340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81082e6:	4293      	cmp	r3, r2
 81082e8:	d004      	beq.n	81082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81082ea:	687b      	ldr	r3, [r7, #4]
 81082ec:	681b      	ldr	r3, [r3, #0]
 81082ee:	4a15      	ldr	r2, [pc, #84]	; (8108344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81082f0:	4293      	cmp	r3, r2
 81082f2:	d10c      	bne.n	810830e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81082f4:	68bb      	ldr	r3, [r7, #8]
 81082f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81082fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81082fc:	683b      	ldr	r3, [r7, #0]
 81082fe:	689b      	ldr	r3, [r3, #8]
 8108300:	68ba      	ldr	r2, [r7, #8]
 8108302:	4313      	orrs	r3, r2
 8108304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	681b      	ldr	r3, [r3, #0]
 810830a:	68ba      	ldr	r2, [r7, #8]
 810830c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810830e:	687b      	ldr	r3, [r7, #4]
 8108310:	2201      	movs	r2, #1
 8108312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8108316:	687b      	ldr	r3, [r7, #4]
 8108318:	2200      	movs	r2, #0
 810831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810831e:	2300      	movs	r3, #0
}
 8108320:	4618      	mov	r0, r3
 8108322:	3714      	adds	r7, #20
 8108324:	46bd      	mov	sp, r7
 8108326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810832a:	4770      	bx	lr
 810832c:	40010000 	.word	0x40010000
 8108330:	40010400 	.word	0x40010400
 8108334:	40000400 	.word	0x40000400
 8108338:	40000800 	.word	0x40000800
 810833c:	40000c00 	.word	0x40000c00
 8108340:	40001800 	.word	0x40001800
 8108344:	40014000 	.word	0x40014000

08108348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8108348:	b480      	push	{r7}
 810834a:	b085      	sub	sp, #20
 810834c:	af00      	add	r7, sp, #0
 810834e:	6078      	str	r0, [r7, #4]
 8108350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8108352:	2300      	movs	r3, #0
 8108354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8108356:	687b      	ldr	r3, [r7, #4]
 8108358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810835c:	2b01      	cmp	r3, #1
 810835e:	d101      	bne.n	8108364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8108360:	2302      	movs	r3, #2
 8108362:	e065      	b.n	8108430 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8108364:	687b      	ldr	r3, [r7, #4]
 8108366:	2201      	movs	r2, #1
 8108368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810836c:	68fb      	ldr	r3, [r7, #12]
 810836e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8108372:	683b      	ldr	r3, [r7, #0]
 8108374:	68db      	ldr	r3, [r3, #12]
 8108376:	4313      	orrs	r3, r2
 8108378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810837a:	68fb      	ldr	r3, [r7, #12]
 810837c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8108380:	683b      	ldr	r3, [r7, #0]
 8108382:	689b      	ldr	r3, [r3, #8]
 8108384:	4313      	orrs	r3, r2
 8108386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8108388:	68fb      	ldr	r3, [r7, #12]
 810838a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810838e:	683b      	ldr	r3, [r7, #0]
 8108390:	685b      	ldr	r3, [r3, #4]
 8108392:	4313      	orrs	r3, r2
 8108394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810839c:	683b      	ldr	r3, [r7, #0]
 810839e:	681b      	ldr	r3, [r3, #0]
 81083a0:	4313      	orrs	r3, r2
 81083a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 81083a4:	68fb      	ldr	r3, [r7, #12]
 81083a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81083aa:	683b      	ldr	r3, [r7, #0]
 81083ac:	691b      	ldr	r3, [r3, #16]
 81083ae:	4313      	orrs	r3, r2
 81083b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81083b2:	68fb      	ldr	r3, [r7, #12]
 81083b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81083b8:	683b      	ldr	r3, [r7, #0]
 81083ba:	695b      	ldr	r3, [r3, #20]
 81083bc:	4313      	orrs	r3, r2
 81083be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81083c0:	68fb      	ldr	r3, [r7, #12]
 81083c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81083c6:	683b      	ldr	r3, [r7, #0]
 81083c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81083ca:	4313      	orrs	r3, r2
 81083cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81083ce:	68fb      	ldr	r3, [r7, #12]
 81083d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 81083d4:	683b      	ldr	r3, [r7, #0]
 81083d6:	699b      	ldr	r3, [r3, #24]
 81083d8:	041b      	lsls	r3, r3, #16
 81083da:	4313      	orrs	r3, r2
 81083dc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81083de:	687b      	ldr	r3, [r7, #4]
 81083e0:	681b      	ldr	r3, [r3, #0]
 81083e2:	4a16      	ldr	r2, [pc, #88]	; (810843c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81083e4:	4293      	cmp	r3, r2
 81083e6:	d004      	beq.n	81083f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	681b      	ldr	r3, [r3, #0]
 81083ec:	4a14      	ldr	r2, [pc, #80]	; (8108440 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81083ee:	4293      	cmp	r3, r2
 81083f0:	d115      	bne.n	810841e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81083f2:	68fb      	ldr	r3, [r7, #12]
 81083f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81083f8:	683b      	ldr	r3, [r7, #0]
 81083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81083fc:	051b      	lsls	r3, r3, #20
 81083fe:	4313      	orrs	r3, r2
 8108400:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8108402:	68fb      	ldr	r3, [r7, #12]
 8108404:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8108408:	683b      	ldr	r3, [r7, #0]
 810840a:	69db      	ldr	r3, [r3, #28]
 810840c:	4313      	orrs	r3, r2
 810840e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8108410:	68fb      	ldr	r3, [r7, #12]
 8108412:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8108416:	683b      	ldr	r3, [r7, #0]
 8108418:	6a1b      	ldr	r3, [r3, #32]
 810841a:	4313      	orrs	r3, r2
 810841c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810841e:	687b      	ldr	r3, [r7, #4]
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	68fa      	ldr	r2, [r7, #12]
 8108424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	2200      	movs	r2, #0
 810842a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810842e:	2300      	movs	r3, #0
}
 8108430:	4618      	mov	r0, r3
 8108432:	3714      	adds	r7, #20
 8108434:	46bd      	mov	sp, r7
 8108436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810843a:	4770      	bx	lr
 810843c:	40010000 	.word	0x40010000
 8108440:	40010400 	.word	0x40010400

08108444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108444:	b580      	push	{r7, lr}
 8108446:	b082      	sub	sp, #8
 8108448:	af00      	add	r7, sp, #0
 810844a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810844c:	687b      	ldr	r3, [r7, #4]
 810844e:	2b00      	cmp	r3, #0
 8108450:	d101      	bne.n	8108456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108452:	2301      	movs	r3, #1
 8108454:	e042      	b.n	81084dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108456:	687b      	ldr	r3, [r7, #4]
 8108458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810845c:	2b00      	cmp	r3, #0
 810845e:	d106      	bne.n	810846e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	2200      	movs	r2, #0
 8108464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108468:	6878      	ldr	r0, [r7, #4]
 810846a:	f7f9 fec1 	bl	81021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810846e:	687b      	ldr	r3, [r7, #4]
 8108470:	2224      	movs	r2, #36	; 0x24
 8108472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8108476:	687b      	ldr	r3, [r7, #4]
 8108478:	681b      	ldr	r3, [r3, #0]
 810847a:	681a      	ldr	r2, [r3, #0]
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	f022 0201 	bic.w	r2, r2, #1
 8108484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108486:	6878      	ldr	r0, [r7, #4]
 8108488:	f000 f8c2 	bl	8108610 <UART_SetConfig>
 810848c:	4603      	mov	r3, r0
 810848e:	2b01      	cmp	r3, #1
 8108490:	d101      	bne.n	8108496 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8108492:	2301      	movs	r3, #1
 8108494:	e022      	b.n	81084dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810849a:	2b00      	cmp	r3, #0
 810849c:	d002      	beq.n	81084a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810849e:	6878      	ldr	r0, [r7, #4]
 81084a0:	f000 fe1e 	bl	81090e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81084a4:	687b      	ldr	r3, [r7, #4]
 81084a6:	681b      	ldr	r3, [r3, #0]
 81084a8:	685a      	ldr	r2, [r3, #4]
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	681b      	ldr	r3, [r3, #0]
 81084ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81084b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	689a      	ldr	r2, [r3, #8]
 81084ba:	687b      	ldr	r3, [r7, #4]
 81084bc:	681b      	ldr	r3, [r3, #0]
 81084be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81084c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81084c4:	687b      	ldr	r3, [r7, #4]
 81084c6:	681b      	ldr	r3, [r3, #0]
 81084c8:	681a      	ldr	r2, [r3, #0]
 81084ca:	687b      	ldr	r3, [r7, #4]
 81084cc:	681b      	ldr	r3, [r3, #0]
 81084ce:	f042 0201 	orr.w	r2, r2, #1
 81084d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81084d4:	6878      	ldr	r0, [r7, #4]
 81084d6:	f000 fea5 	bl	8109224 <UART_CheckIdleState>
 81084da:	4603      	mov	r3, r0
}
 81084dc:	4618      	mov	r0, r3
 81084de:	3708      	adds	r7, #8
 81084e0:	46bd      	mov	sp, r7
 81084e2:	bd80      	pop	{r7, pc}

081084e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81084e4:	b580      	push	{r7, lr}
 81084e6:	b08a      	sub	sp, #40	; 0x28
 81084e8:	af02      	add	r7, sp, #8
 81084ea:	60f8      	str	r0, [r7, #12]
 81084ec:	60b9      	str	r1, [r7, #8]
 81084ee:	603b      	str	r3, [r7, #0]
 81084f0:	4613      	mov	r3, r2
 81084f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81084f4:	68fb      	ldr	r3, [r7, #12]
 81084f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81084fa:	2b20      	cmp	r3, #32
 81084fc:	f040 8083 	bne.w	8108606 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8108500:	68bb      	ldr	r3, [r7, #8]
 8108502:	2b00      	cmp	r3, #0
 8108504:	d002      	beq.n	810850c <HAL_UART_Transmit+0x28>
 8108506:	88fb      	ldrh	r3, [r7, #6]
 8108508:	2b00      	cmp	r3, #0
 810850a:	d101      	bne.n	8108510 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810850c:	2301      	movs	r3, #1
 810850e:	e07b      	b.n	8108608 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8108510:	68fb      	ldr	r3, [r7, #12]
 8108512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108516:	2b01      	cmp	r3, #1
 8108518:	d101      	bne.n	810851e <HAL_UART_Transmit+0x3a>
 810851a:	2302      	movs	r3, #2
 810851c:	e074      	b.n	8108608 <HAL_UART_Transmit+0x124>
 810851e:	68fb      	ldr	r3, [r7, #12]
 8108520:	2201      	movs	r2, #1
 8108522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108526:	68fb      	ldr	r3, [r7, #12]
 8108528:	2200      	movs	r2, #0
 810852a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810852e:	68fb      	ldr	r3, [r7, #12]
 8108530:	2221      	movs	r2, #33	; 0x21
 8108532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108536:	f7fa f913 	bl	8102760 <HAL_GetTick>
 810853a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810853c:	68fb      	ldr	r3, [r7, #12]
 810853e:	88fa      	ldrh	r2, [r7, #6]
 8108540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8108544:	68fb      	ldr	r3, [r7, #12]
 8108546:	88fa      	ldrh	r2, [r7, #6]
 8108548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810854c:	68fb      	ldr	r3, [r7, #12]
 810854e:	689b      	ldr	r3, [r3, #8]
 8108550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108554:	d108      	bne.n	8108568 <HAL_UART_Transmit+0x84>
 8108556:	68fb      	ldr	r3, [r7, #12]
 8108558:	691b      	ldr	r3, [r3, #16]
 810855a:	2b00      	cmp	r3, #0
 810855c:	d104      	bne.n	8108568 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810855e:	2300      	movs	r3, #0
 8108560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108562:	68bb      	ldr	r3, [r7, #8]
 8108564:	61bb      	str	r3, [r7, #24]
 8108566:	e003      	b.n	8108570 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8108568:	68bb      	ldr	r3, [r7, #8]
 810856a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810856c:	2300      	movs	r3, #0
 810856e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8108570:	68fb      	ldr	r3, [r7, #12]
 8108572:	2200      	movs	r2, #0
 8108574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8108578:	e02c      	b.n	81085d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810857a:	683b      	ldr	r3, [r7, #0]
 810857c:	9300      	str	r3, [sp, #0]
 810857e:	697b      	ldr	r3, [r7, #20]
 8108580:	2200      	movs	r2, #0
 8108582:	2180      	movs	r1, #128	; 0x80
 8108584:	68f8      	ldr	r0, [r7, #12]
 8108586:	f000 fe98 	bl	81092ba <UART_WaitOnFlagUntilTimeout>
 810858a:	4603      	mov	r3, r0
 810858c:	2b00      	cmp	r3, #0
 810858e:	d001      	beq.n	8108594 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8108590:	2303      	movs	r3, #3
 8108592:	e039      	b.n	8108608 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8108594:	69fb      	ldr	r3, [r7, #28]
 8108596:	2b00      	cmp	r3, #0
 8108598:	d10b      	bne.n	81085b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810859a:	69bb      	ldr	r3, [r7, #24]
 810859c:	881b      	ldrh	r3, [r3, #0]
 810859e:	461a      	mov	r2, r3
 81085a0:	68fb      	ldr	r3, [r7, #12]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81085a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81085aa:	69bb      	ldr	r3, [r7, #24]
 81085ac:	3302      	adds	r3, #2
 81085ae:	61bb      	str	r3, [r7, #24]
 81085b0:	e007      	b.n	81085c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81085b2:	69fb      	ldr	r3, [r7, #28]
 81085b4:	781a      	ldrb	r2, [r3, #0]
 81085b6:	68fb      	ldr	r3, [r7, #12]
 81085b8:	681b      	ldr	r3, [r3, #0]
 81085ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81085bc:	69fb      	ldr	r3, [r7, #28]
 81085be:	3301      	adds	r3, #1
 81085c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81085c2:	68fb      	ldr	r3, [r7, #12]
 81085c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81085c8:	b29b      	uxth	r3, r3
 81085ca:	3b01      	subs	r3, #1
 81085cc:	b29a      	uxth	r2, r3
 81085ce:	68fb      	ldr	r3, [r7, #12]
 81085d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81085d4:	68fb      	ldr	r3, [r7, #12]
 81085d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81085da:	b29b      	uxth	r3, r3
 81085dc:	2b00      	cmp	r3, #0
 81085de:	d1cc      	bne.n	810857a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81085e0:	683b      	ldr	r3, [r7, #0]
 81085e2:	9300      	str	r3, [sp, #0]
 81085e4:	697b      	ldr	r3, [r7, #20]
 81085e6:	2200      	movs	r2, #0
 81085e8:	2140      	movs	r1, #64	; 0x40
 81085ea:	68f8      	ldr	r0, [r7, #12]
 81085ec:	f000 fe65 	bl	81092ba <UART_WaitOnFlagUntilTimeout>
 81085f0:	4603      	mov	r3, r0
 81085f2:	2b00      	cmp	r3, #0
 81085f4:	d001      	beq.n	81085fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81085f6:	2303      	movs	r3, #3
 81085f8:	e006      	b.n	8108608 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81085fa:	68fb      	ldr	r3, [r7, #12]
 81085fc:	2220      	movs	r2, #32
 81085fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8108602:	2300      	movs	r3, #0
 8108604:	e000      	b.n	8108608 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8108606:	2302      	movs	r3, #2
  }
}
 8108608:	4618      	mov	r0, r3
 810860a:	3720      	adds	r7, #32
 810860c:	46bd      	mov	sp, r7
 810860e:	bd80      	pop	{r7, pc}

08108610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108614:	b092      	sub	sp, #72	; 0x48
 8108616:	af00      	add	r7, sp, #0
 8108618:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810861a:	2300      	movs	r3, #0
 810861c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108620:	697b      	ldr	r3, [r7, #20]
 8108622:	689a      	ldr	r2, [r3, #8]
 8108624:	697b      	ldr	r3, [r7, #20]
 8108626:	691b      	ldr	r3, [r3, #16]
 8108628:	431a      	orrs	r2, r3
 810862a:	697b      	ldr	r3, [r7, #20]
 810862c:	695b      	ldr	r3, [r3, #20]
 810862e:	431a      	orrs	r2, r3
 8108630:	697b      	ldr	r3, [r7, #20]
 8108632:	69db      	ldr	r3, [r3, #28]
 8108634:	4313      	orrs	r3, r2
 8108636:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108638:	697b      	ldr	r3, [r7, #20]
 810863a:	681b      	ldr	r3, [r3, #0]
 810863c:	681a      	ldr	r2, [r3, #0]
 810863e:	4bbd      	ldr	r3, [pc, #756]	; (8108934 <UART_SetConfig+0x324>)
 8108640:	4013      	ands	r3, r2
 8108642:	697a      	ldr	r2, [r7, #20]
 8108644:	6812      	ldr	r2, [r2, #0]
 8108646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108648:	430b      	orrs	r3, r1
 810864a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810864c:	697b      	ldr	r3, [r7, #20]
 810864e:	681b      	ldr	r3, [r3, #0]
 8108650:	685b      	ldr	r3, [r3, #4]
 8108652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108656:	697b      	ldr	r3, [r7, #20]
 8108658:	68da      	ldr	r2, [r3, #12]
 810865a:	697b      	ldr	r3, [r7, #20]
 810865c:	681b      	ldr	r3, [r3, #0]
 810865e:	430a      	orrs	r2, r1
 8108660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108662:	697b      	ldr	r3, [r7, #20]
 8108664:	699b      	ldr	r3, [r3, #24]
 8108666:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108668:	697b      	ldr	r3, [r7, #20]
 810866a:	681b      	ldr	r3, [r3, #0]
 810866c:	4ab2      	ldr	r2, [pc, #712]	; (8108938 <UART_SetConfig+0x328>)
 810866e:	4293      	cmp	r3, r2
 8108670:	d004      	beq.n	810867c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108672:	697b      	ldr	r3, [r7, #20]
 8108674:	6a1b      	ldr	r3, [r3, #32]
 8108676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108678:	4313      	orrs	r3, r2
 810867a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810867c:	697b      	ldr	r3, [r7, #20]
 810867e:	681b      	ldr	r3, [r3, #0]
 8108680:	689b      	ldr	r3, [r3, #8]
 8108682:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108686:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810868a:	697a      	ldr	r2, [r7, #20]
 810868c:	6812      	ldr	r2, [r2, #0]
 810868e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108690:	430b      	orrs	r3, r1
 8108692:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108694:	697b      	ldr	r3, [r7, #20]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810869a:	f023 010f 	bic.w	r1, r3, #15
 810869e:	697b      	ldr	r3, [r7, #20]
 81086a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81086a2:	697b      	ldr	r3, [r7, #20]
 81086a4:	681b      	ldr	r3, [r3, #0]
 81086a6:	430a      	orrs	r2, r1
 81086a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81086aa:	697b      	ldr	r3, [r7, #20]
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	4aa3      	ldr	r2, [pc, #652]	; (810893c <UART_SetConfig+0x32c>)
 81086b0:	4293      	cmp	r3, r2
 81086b2:	d177      	bne.n	81087a4 <UART_SetConfig+0x194>
 81086b4:	4ba2      	ldr	r3, [pc, #648]	; (8108940 <UART_SetConfig+0x330>)
 81086b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81086b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81086bc:	2b28      	cmp	r3, #40	; 0x28
 81086be:	d86d      	bhi.n	810879c <UART_SetConfig+0x18c>
 81086c0:	a201      	add	r2, pc, #4	; (adr r2, 81086c8 <UART_SetConfig+0xb8>)
 81086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81086c6:	bf00      	nop
 81086c8:	0810876d 	.word	0x0810876d
 81086cc:	0810879d 	.word	0x0810879d
 81086d0:	0810879d 	.word	0x0810879d
 81086d4:	0810879d 	.word	0x0810879d
 81086d8:	0810879d 	.word	0x0810879d
 81086dc:	0810879d 	.word	0x0810879d
 81086e0:	0810879d 	.word	0x0810879d
 81086e4:	0810879d 	.word	0x0810879d
 81086e8:	08108775 	.word	0x08108775
 81086ec:	0810879d 	.word	0x0810879d
 81086f0:	0810879d 	.word	0x0810879d
 81086f4:	0810879d 	.word	0x0810879d
 81086f8:	0810879d 	.word	0x0810879d
 81086fc:	0810879d 	.word	0x0810879d
 8108700:	0810879d 	.word	0x0810879d
 8108704:	0810879d 	.word	0x0810879d
 8108708:	0810877d 	.word	0x0810877d
 810870c:	0810879d 	.word	0x0810879d
 8108710:	0810879d 	.word	0x0810879d
 8108714:	0810879d 	.word	0x0810879d
 8108718:	0810879d 	.word	0x0810879d
 810871c:	0810879d 	.word	0x0810879d
 8108720:	0810879d 	.word	0x0810879d
 8108724:	0810879d 	.word	0x0810879d
 8108728:	08108785 	.word	0x08108785
 810872c:	0810879d 	.word	0x0810879d
 8108730:	0810879d 	.word	0x0810879d
 8108734:	0810879d 	.word	0x0810879d
 8108738:	0810879d 	.word	0x0810879d
 810873c:	0810879d 	.word	0x0810879d
 8108740:	0810879d 	.word	0x0810879d
 8108744:	0810879d 	.word	0x0810879d
 8108748:	0810878d 	.word	0x0810878d
 810874c:	0810879d 	.word	0x0810879d
 8108750:	0810879d 	.word	0x0810879d
 8108754:	0810879d 	.word	0x0810879d
 8108758:	0810879d 	.word	0x0810879d
 810875c:	0810879d 	.word	0x0810879d
 8108760:	0810879d 	.word	0x0810879d
 8108764:	0810879d 	.word	0x0810879d
 8108768:	08108795 	.word	0x08108795
 810876c:	2301      	movs	r3, #1
 810876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108772:	e220      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108774:	2304      	movs	r3, #4
 8108776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810877a:	e21c      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810877c:	2308      	movs	r3, #8
 810877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108782:	e218      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108784:	2310      	movs	r3, #16
 8108786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810878a:	e214      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810878c:	2320      	movs	r3, #32
 810878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108792:	e210      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108794:	2340      	movs	r3, #64	; 0x40
 8108796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810879a:	e20c      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810879c:	2380      	movs	r3, #128	; 0x80
 810879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087a2:	e208      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81087a4:	697b      	ldr	r3, [r7, #20]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	4a66      	ldr	r2, [pc, #408]	; (8108944 <UART_SetConfig+0x334>)
 81087aa:	4293      	cmp	r3, r2
 81087ac:	d130      	bne.n	8108810 <UART_SetConfig+0x200>
 81087ae:	4b64      	ldr	r3, [pc, #400]	; (8108940 <UART_SetConfig+0x330>)
 81087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81087b2:	f003 0307 	and.w	r3, r3, #7
 81087b6:	2b05      	cmp	r3, #5
 81087b8:	d826      	bhi.n	8108808 <UART_SetConfig+0x1f8>
 81087ba:	a201      	add	r2, pc, #4	; (adr r2, 81087c0 <UART_SetConfig+0x1b0>)
 81087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087c0:	081087d9 	.word	0x081087d9
 81087c4:	081087e1 	.word	0x081087e1
 81087c8:	081087e9 	.word	0x081087e9
 81087cc:	081087f1 	.word	0x081087f1
 81087d0:	081087f9 	.word	0x081087f9
 81087d4:	08108801 	.word	0x08108801
 81087d8:	2300      	movs	r3, #0
 81087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087de:	e1ea      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81087e0:	2304      	movs	r3, #4
 81087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087e6:	e1e6      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81087e8:	2308      	movs	r3, #8
 81087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087ee:	e1e2      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81087f0:	2310      	movs	r3, #16
 81087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087f6:	e1de      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81087f8:	2320      	movs	r3, #32
 81087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087fe:	e1da      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108800:	2340      	movs	r3, #64	; 0x40
 8108802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108806:	e1d6      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108808:	2380      	movs	r3, #128	; 0x80
 810880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810880e:	e1d2      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108810:	697b      	ldr	r3, [r7, #20]
 8108812:	681b      	ldr	r3, [r3, #0]
 8108814:	4a4c      	ldr	r2, [pc, #304]	; (8108948 <UART_SetConfig+0x338>)
 8108816:	4293      	cmp	r3, r2
 8108818:	d130      	bne.n	810887c <UART_SetConfig+0x26c>
 810881a:	4b49      	ldr	r3, [pc, #292]	; (8108940 <UART_SetConfig+0x330>)
 810881c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810881e:	f003 0307 	and.w	r3, r3, #7
 8108822:	2b05      	cmp	r3, #5
 8108824:	d826      	bhi.n	8108874 <UART_SetConfig+0x264>
 8108826:	a201      	add	r2, pc, #4	; (adr r2, 810882c <UART_SetConfig+0x21c>)
 8108828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810882c:	08108845 	.word	0x08108845
 8108830:	0810884d 	.word	0x0810884d
 8108834:	08108855 	.word	0x08108855
 8108838:	0810885d 	.word	0x0810885d
 810883c:	08108865 	.word	0x08108865
 8108840:	0810886d 	.word	0x0810886d
 8108844:	2300      	movs	r3, #0
 8108846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810884a:	e1b4      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810884c:	2304      	movs	r3, #4
 810884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108852:	e1b0      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108854:	2308      	movs	r3, #8
 8108856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810885a:	e1ac      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810885c:	2310      	movs	r3, #16
 810885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108862:	e1a8      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108864:	2320      	movs	r3, #32
 8108866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810886a:	e1a4      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810886c:	2340      	movs	r3, #64	; 0x40
 810886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108872:	e1a0      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108874:	2380      	movs	r3, #128	; 0x80
 8108876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810887a:	e19c      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810887c:	697b      	ldr	r3, [r7, #20]
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	4a32      	ldr	r2, [pc, #200]	; (810894c <UART_SetConfig+0x33c>)
 8108882:	4293      	cmp	r3, r2
 8108884:	d130      	bne.n	81088e8 <UART_SetConfig+0x2d8>
 8108886:	4b2e      	ldr	r3, [pc, #184]	; (8108940 <UART_SetConfig+0x330>)
 8108888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810888a:	f003 0307 	and.w	r3, r3, #7
 810888e:	2b05      	cmp	r3, #5
 8108890:	d826      	bhi.n	81088e0 <UART_SetConfig+0x2d0>
 8108892:	a201      	add	r2, pc, #4	; (adr r2, 8108898 <UART_SetConfig+0x288>)
 8108894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108898:	081088b1 	.word	0x081088b1
 810889c:	081088b9 	.word	0x081088b9
 81088a0:	081088c1 	.word	0x081088c1
 81088a4:	081088c9 	.word	0x081088c9
 81088a8:	081088d1 	.word	0x081088d1
 81088ac:	081088d9 	.word	0x081088d9
 81088b0:	2300      	movs	r3, #0
 81088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088b6:	e17e      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088b8:	2304      	movs	r3, #4
 81088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088be:	e17a      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088c0:	2308      	movs	r3, #8
 81088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088c6:	e176      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088c8:	2310      	movs	r3, #16
 81088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088ce:	e172      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088d0:	2320      	movs	r3, #32
 81088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088d6:	e16e      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088d8:	2340      	movs	r3, #64	; 0x40
 81088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088de:	e16a      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088e0:	2380      	movs	r3, #128	; 0x80
 81088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088e6:	e166      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 81088e8:	697b      	ldr	r3, [r7, #20]
 81088ea:	681b      	ldr	r3, [r3, #0]
 81088ec:	4a18      	ldr	r2, [pc, #96]	; (8108950 <UART_SetConfig+0x340>)
 81088ee:	4293      	cmp	r3, r2
 81088f0:	d140      	bne.n	8108974 <UART_SetConfig+0x364>
 81088f2:	4b13      	ldr	r3, [pc, #76]	; (8108940 <UART_SetConfig+0x330>)
 81088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088f6:	f003 0307 	and.w	r3, r3, #7
 81088fa:	2b05      	cmp	r3, #5
 81088fc:	d836      	bhi.n	810896c <UART_SetConfig+0x35c>
 81088fe:	a201      	add	r2, pc, #4	; (adr r2, 8108904 <UART_SetConfig+0x2f4>)
 8108900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108904:	0810891d 	.word	0x0810891d
 8108908:	08108925 	.word	0x08108925
 810890c:	0810892d 	.word	0x0810892d
 8108910:	08108955 	.word	0x08108955
 8108914:	0810895d 	.word	0x0810895d
 8108918:	08108965 	.word	0x08108965
 810891c:	2300      	movs	r3, #0
 810891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108922:	e148      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108924:	2304      	movs	r3, #4
 8108926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810892a:	e144      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810892c:	2308      	movs	r3, #8
 810892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108932:	e140      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108934:	cfff69f3 	.word	0xcfff69f3
 8108938:	58000c00 	.word	0x58000c00
 810893c:	40011000 	.word	0x40011000
 8108940:	58024400 	.word	0x58024400
 8108944:	40004400 	.word	0x40004400
 8108948:	40004800 	.word	0x40004800
 810894c:	40004c00 	.word	0x40004c00
 8108950:	40005000 	.word	0x40005000
 8108954:	2310      	movs	r3, #16
 8108956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810895a:	e12c      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810895c:	2320      	movs	r3, #32
 810895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108962:	e128      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108964:	2340      	movs	r3, #64	; 0x40
 8108966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810896a:	e124      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 810896c:	2380      	movs	r3, #128	; 0x80
 810896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108972:	e120      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108974:	697b      	ldr	r3, [r7, #20]
 8108976:	681b      	ldr	r3, [r3, #0]
 8108978:	4acb      	ldr	r2, [pc, #812]	; (8108ca8 <UART_SetConfig+0x698>)
 810897a:	4293      	cmp	r3, r2
 810897c:	d176      	bne.n	8108a6c <UART_SetConfig+0x45c>
 810897e:	4bcb      	ldr	r3, [pc, #812]	; (8108cac <UART_SetConfig+0x69c>)
 8108980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108986:	2b28      	cmp	r3, #40	; 0x28
 8108988:	d86c      	bhi.n	8108a64 <UART_SetConfig+0x454>
 810898a:	a201      	add	r2, pc, #4	; (adr r2, 8108990 <UART_SetConfig+0x380>)
 810898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108990:	08108a35 	.word	0x08108a35
 8108994:	08108a65 	.word	0x08108a65
 8108998:	08108a65 	.word	0x08108a65
 810899c:	08108a65 	.word	0x08108a65
 81089a0:	08108a65 	.word	0x08108a65
 81089a4:	08108a65 	.word	0x08108a65
 81089a8:	08108a65 	.word	0x08108a65
 81089ac:	08108a65 	.word	0x08108a65
 81089b0:	08108a3d 	.word	0x08108a3d
 81089b4:	08108a65 	.word	0x08108a65
 81089b8:	08108a65 	.word	0x08108a65
 81089bc:	08108a65 	.word	0x08108a65
 81089c0:	08108a65 	.word	0x08108a65
 81089c4:	08108a65 	.word	0x08108a65
 81089c8:	08108a65 	.word	0x08108a65
 81089cc:	08108a65 	.word	0x08108a65
 81089d0:	08108a45 	.word	0x08108a45
 81089d4:	08108a65 	.word	0x08108a65
 81089d8:	08108a65 	.word	0x08108a65
 81089dc:	08108a65 	.word	0x08108a65
 81089e0:	08108a65 	.word	0x08108a65
 81089e4:	08108a65 	.word	0x08108a65
 81089e8:	08108a65 	.word	0x08108a65
 81089ec:	08108a65 	.word	0x08108a65
 81089f0:	08108a4d 	.word	0x08108a4d
 81089f4:	08108a65 	.word	0x08108a65
 81089f8:	08108a65 	.word	0x08108a65
 81089fc:	08108a65 	.word	0x08108a65
 8108a00:	08108a65 	.word	0x08108a65
 8108a04:	08108a65 	.word	0x08108a65
 8108a08:	08108a65 	.word	0x08108a65
 8108a0c:	08108a65 	.word	0x08108a65
 8108a10:	08108a55 	.word	0x08108a55
 8108a14:	08108a65 	.word	0x08108a65
 8108a18:	08108a65 	.word	0x08108a65
 8108a1c:	08108a65 	.word	0x08108a65
 8108a20:	08108a65 	.word	0x08108a65
 8108a24:	08108a65 	.word	0x08108a65
 8108a28:	08108a65 	.word	0x08108a65
 8108a2c:	08108a65 	.word	0x08108a65
 8108a30:	08108a5d 	.word	0x08108a5d
 8108a34:	2301      	movs	r3, #1
 8108a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a3a:	e0bc      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a3c:	2304      	movs	r3, #4
 8108a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a42:	e0b8      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a44:	2308      	movs	r3, #8
 8108a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a4a:	e0b4      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a4c:	2310      	movs	r3, #16
 8108a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a52:	e0b0      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a54:	2320      	movs	r3, #32
 8108a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a5a:	e0ac      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a5c:	2340      	movs	r3, #64	; 0x40
 8108a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a62:	e0a8      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a64:	2380      	movs	r3, #128	; 0x80
 8108a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a6a:	e0a4      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108a6c:	697b      	ldr	r3, [r7, #20]
 8108a6e:	681b      	ldr	r3, [r3, #0]
 8108a70:	4a8f      	ldr	r2, [pc, #572]	; (8108cb0 <UART_SetConfig+0x6a0>)
 8108a72:	4293      	cmp	r3, r2
 8108a74:	d130      	bne.n	8108ad8 <UART_SetConfig+0x4c8>
 8108a76:	4b8d      	ldr	r3, [pc, #564]	; (8108cac <UART_SetConfig+0x69c>)
 8108a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a7a:	f003 0307 	and.w	r3, r3, #7
 8108a7e:	2b05      	cmp	r3, #5
 8108a80:	d826      	bhi.n	8108ad0 <UART_SetConfig+0x4c0>
 8108a82:	a201      	add	r2, pc, #4	; (adr r2, 8108a88 <UART_SetConfig+0x478>)
 8108a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a88:	08108aa1 	.word	0x08108aa1
 8108a8c:	08108aa9 	.word	0x08108aa9
 8108a90:	08108ab1 	.word	0x08108ab1
 8108a94:	08108ab9 	.word	0x08108ab9
 8108a98:	08108ac1 	.word	0x08108ac1
 8108a9c:	08108ac9 	.word	0x08108ac9
 8108aa0:	2300      	movs	r3, #0
 8108aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108aa6:	e086      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108aa8:	2304      	movs	r3, #4
 8108aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108aae:	e082      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ab0:	2308      	movs	r3, #8
 8108ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ab6:	e07e      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ab8:	2310      	movs	r3, #16
 8108aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108abe:	e07a      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ac0:	2320      	movs	r3, #32
 8108ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ac6:	e076      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ac8:	2340      	movs	r3, #64	; 0x40
 8108aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ace:	e072      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ad0:	2380      	movs	r3, #128	; 0x80
 8108ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ad6:	e06e      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ad8:	697b      	ldr	r3, [r7, #20]
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	4a75      	ldr	r2, [pc, #468]	; (8108cb4 <UART_SetConfig+0x6a4>)
 8108ade:	4293      	cmp	r3, r2
 8108ae0:	d130      	bne.n	8108b44 <UART_SetConfig+0x534>
 8108ae2:	4b72      	ldr	r3, [pc, #456]	; (8108cac <UART_SetConfig+0x69c>)
 8108ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ae6:	f003 0307 	and.w	r3, r3, #7
 8108aea:	2b05      	cmp	r3, #5
 8108aec:	d826      	bhi.n	8108b3c <UART_SetConfig+0x52c>
 8108aee:	a201      	add	r2, pc, #4	; (adr r2, 8108af4 <UART_SetConfig+0x4e4>)
 8108af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108af4:	08108b0d 	.word	0x08108b0d
 8108af8:	08108b15 	.word	0x08108b15
 8108afc:	08108b1d 	.word	0x08108b1d
 8108b00:	08108b25 	.word	0x08108b25
 8108b04:	08108b2d 	.word	0x08108b2d
 8108b08:	08108b35 	.word	0x08108b35
 8108b0c:	2300      	movs	r3, #0
 8108b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b12:	e050      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b14:	2304      	movs	r3, #4
 8108b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b1a:	e04c      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b1c:	2308      	movs	r3, #8
 8108b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b22:	e048      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b24:	2310      	movs	r3, #16
 8108b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b2a:	e044      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b2c:	2320      	movs	r3, #32
 8108b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b32:	e040      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b34:	2340      	movs	r3, #64	; 0x40
 8108b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b3a:	e03c      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b3c:	2380      	movs	r3, #128	; 0x80
 8108b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b42:	e038      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b44:	697b      	ldr	r3, [r7, #20]
 8108b46:	681b      	ldr	r3, [r3, #0]
 8108b48:	4a5b      	ldr	r2, [pc, #364]	; (8108cb8 <UART_SetConfig+0x6a8>)
 8108b4a:	4293      	cmp	r3, r2
 8108b4c:	d130      	bne.n	8108bb0 <UART_SetConfig+0x5a0>
 8108b4e:	4b57      	ldr	r3, [pc, #348]	; (8108cac <UART_SetConfig+0x69c>)
 8108b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108b52:	f003 0307 	and.w	r3, r3, #7
 8108b56:	2b05      	cmp	r3, #5
 8108b58:	d826      	bhi.n	8108ba8 <UART_SetConfig+0x598>
 8108b5a:	a201      	add	r2, pc, #4	; (adr r2, 8108b60 <UART_SetConfig+0x550>)
 8108b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b60:	08108b79 	.word	0x08108b79
 8108b64:	08108b81 	.word	0x08108b81
 8108b68:	08108b89 	.word	0x08108b89
 8108b6c:	08108b91 	.word	0x08108b91
 8108b70:	08108b99 	.word	0x08108b99
 8108b74:	08108ba1 	.word	0x08108ba1
 8108b78:	2302      	movs	r3, #2
 8108b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b7e:	e01a      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b80:	2304      	movs	r3, #4
 8108b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b86:	e016      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b88:	2308      	movs	r3, #8
 8108b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b8e:	e012      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b90:	2310      	movs	r3, #16
 8108b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b96:	e00e      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108b98:	2320      	movs	r3, #32
 8108b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b9e:	e00a      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ba0:	2340      	movs	r3, #64	; 0x40
 8108ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ba6:	e006      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108ba8:	2380      	movs	r3, #128	; 0x80
 8108baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bae:	e002      	b.n	8108bb6 <UART_SetConfig+0x5a6>
 8108bb0:	2380      	movs	r3, #128	; 0x80
 8108bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108bb6:	697b      	ldr	r3, [r7, #20]
 8108bb8:	681b      	ldr	r3, [r3, #0]
 8108bba:	4a3f      	ldr	r2, [pc, #252]	; (8108cb8 <UART_SetConfig+0x6a8>)
 8108bbc:	4293      	cmp	r3, r2
 8108bbe:	f040 80f8 	bne.w	8108db2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108bc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108bc6:	2b20      	cmp	r3, #32
 8108bc8:	dc46      	bgt.n	8108c58 <UART_SetConfig+0x648>
 8108bca:	2b02      	cmp	r3, #2
 8108bcc:	f2c0 8082 	blt.w	8108cd4 <UART_SetConfig+0x6c4>
 8108bd0:	3b02      	subs	r3, #2
 8108bd2:	2b1e      	cmp	r3, #30
 8108bd4:	d87e      	bhi.n	8108cd4 <UART_SetConfig+0x6c4>
 8108bd6:	a201      	add	r2, pc, #4	; (adr r2, 8108bdc <UART_SetConfig+0x5cc>)
 8108bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108bdc:	08108c5f 	.word	0x08108c5f
 8108be0:	08108cd5 	.word	0x08108cd5
 8108be4:	08108c67 	.word	0x08108c67
 8108be8:	08108cd5 	.word	0x08108cd5
 8108bec:	08108cd5 	.word	0x08108cd5
 8108bf0:	08108cd5 	.word	0x08108cd5
 8108bf4:	08108c77 	.word	0x08108c77
 8108bf8:	08108cd5 	.word	0x08108cd5
 8108bfc:	08108cd5 	.word	0x08108cd5
 8108c00:	08108cd5 	.word	0x08108cd5
 8108c04:	08108cd5 	.word	0x08108cd5
 8108c08:	08108cd5 	.word	0x08108cd5
 8108c0c:	08108cd5 	.word	0x08108cd5
 8108c10:	08108cd5 	.word	0x08108cd5
 8108c14:	08108c87 	.word	0x08108c87
 8108c18:	08108cd5 	.word	0x08108cd5
 8108c1c:	08108cd5 	.word	0x08108cd5
 8108c20:	08108cd5 	.word	0x08108cd5
 8108c24:	08108cd5 	.word	0x08108cd5
 8108c28:	08108cd5 	.word	0x08108cd5
 8108c2c:	08108cd5 	.word	0x08108cd5
 8108c30:	08108cd5 	.word	0x08108cd5
 8108c34:	08108cd5 	.word	0x08108cd5
 8108c38:	08108cd5 	.word	0x08108cd5
 8108c3c:	08108cd5 	.word	0x08108cd5
 8108c40:	08108cd5 	.word	0x08108cd5
 8108c44:	08108cd5 	.word	0x08108cd5
 8108c48:	08108cd5 	.word	0x08108cd5
 8108c4c:	08108cd5 	.word	0x08108cd5
 8108c50:	08108cd5 	.word	0x08108cd5
 8108c54:	08108cc7 	.word	0x08108cc7
 8108c58:	2b40      	cmp	r3, #64	; 0x40
 8108c5a:	d037      	beq.n	8108ccc <UART_SetConfig+0x6bc>
 8108c5c:	e03a      	b.n	8108cd4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108c5e:	f7fd fe19 	bl	8106894 <HAL_RCCEx_GetD3PCLK1Freq>
 8108c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108c64:	e03c      	b.n	8108ce0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108c6a:	4618      	mov	r0, r3
 8108c6c:	f7fd fe28 	bl	81068c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108c74:	e034      	b.n	8108ce0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108c76:	f107 0318 	add.w	r3, r7, #24
 8108c7a:	4618      	mov	r0, r3
 8108c7c:	f7fd ff74 	bl	8106b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108c80:	69fb      	ldr	r3, [r7, #28]
 8108c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108c84:	e02c      	b.n	8108ce0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108c86:	4b09      	ldr	r3, [pc, #36]	; (8108cac <UART_SetConfig+0x69c>)
 8108c88:	681b      	ldr	r3, [r3, #0]
 8108c8a:	f003 0320 	and.w	r3, r3, #32
 8108c8e:	2b00      	cmp	r3, #0
 8108c90:	d016      	beq.n	8108cc0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108c92:	4b06      	ldr	r3, [pc, #24]	; (8108cac <UART_SetConfig+0x69c>)
 8108c94:	681b      	ldr	r3, [r3, #0]
 8108c96:	08db      	lsrs	r3, r3, #3
 8108c98:	f003 0303 	and.w	r3, r3, #3
 8108c9c:	4a07      	ldr	r2, [pc, #28]	; (8108cbc <UART_SetConfig+0x6ac>)
 8108c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8108ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108ca4:	e01c      	b.n	8108ce0 <UART_SetConfig+0x6d0>
 8108ca6:	bf00      	nop
 8108ca8:	40011400 	.word	0x40011400
 8108cac:	58024400 	.word	0x58024400
 8108cb0:	40007800 	.word	0x40007800
 8108cb4:	40007c00 	.word	0x40007c00
 8108cb8:	58000c00 	.word	0x58000c00
 8108cbc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108cc0:	4b9d      	ldr	r3, [pc, #628]	; (8108f38 <UART_SetConfig+0x928>)
 8108cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108cc4:	e00c      	b.n	8108ce0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108cc6:	4b9d      	ldr	r3, [pc, #628]	; (8108f3c <UART_SetConfig+0x92c>)
 8108cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108cca:	e009      	b.n	8108ce0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108cd2:	e005      	b.n	8108ce0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108cd4:	2300      	movs	r3, #0
 8108cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108cd8:	2301      	movs	r3, #1
 8108cda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108cde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ce2:	2b00      	cmp	r3, #0
 8108ce4:	f000 81de 	beq.w	81090a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108ce8:	697b      	ldr	r3, [r7, #20]
 8108cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108cec:	4a94      	ldr	r2, [pc, #592]	; (8108f40 <UART_SetConfig+0x930>)
 8108cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108cf2:	461a      	mov	r2, r3
 8108cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8108cfa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108cfc:	697b      	ldr	r3, [r7, #20]
 8108cfe:	685a      	ldr	r2, [r3, #4]
 8108d00:	4613      	mov	r3, r2
 8108d02:	005b      	lsls	r3, r3, #1
 8108d04:	4413      	add	r3, r2
 8108d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108d08:	429a      	cmp	r2, r3
 8108d0a:	d305      	bcc.n	8108d18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108d0c:	697b      	ldr	r3, [r7, #20]
 8108d0e:	685b      	ldr	r3, [r3, #4]
 8108d10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108d14:	429a      	cmp	r2, r3
 8108d16:	d903      	bls.n	8108d20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108d18:	2301      	movs	r3, #1
 8108d1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108d1e:	e1c1      	b.n	81090a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108d22:	2200      	movs	r2, #0
 8108d24:	60bb      	str	r3, [r7, #8]
 8108d26:	60fa      	str	r2, [r7, #12]
 8108d28:	697b      	ldr	r3, [r7, #20]
 8108d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d2c:	4a84      	ldr	r2, [pc, #528]	; (8108f40 <UART_SetConfig+0x930>)
 8108d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108d32:	b29b      	uxth	r3, r3
 8108d34:	2200      	movs	r2, #0
 8108d36:	603b      	str	r3, [r7, #0]
 8108d38:	607a      	str	r2, [r7, #4]
 8108d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108d42:	f7f8 f829 	bl	8100d98 <__aeabi_uldivmod>
 8108d46:	4602      	mov	r2, r0
 8108d48:	460b      	mov	r3, r1
 8108d4a:	4610      	mov	r0, r2
 8108d4c:	4619      	mov	r1, r3
 8108d4e:	f04f 0200 	mov.w	r2, #0
 8108d52:	f04f 0300 	mov.w	r3, #0
 8108d56:	020b      	lsls	r3, r1, #8
 8108d58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108d5c:	0202      	lsls	r2, r0, #8
 8108d5e:	6979      	ldr	r1, [r7, #20]
 8108d60:	6849      	ldr	r1, [r1, #4]
 8108d62:	0849      	lsrs	r1, r1, #1
 8108d64:	2000      	movs	r0, #0
 8108d66:	460c      	mov	r4, r1
 8108d68:	4605      	mov	r5, r0
 8108d6a:	eb12 0804 	adds.w	r8, r2, r4
 8108d6e:	eb43 0905 	adc.w	r9, r3, r5
 8108d72:	697b      	ldr	r3, [r7, #20]
 8108d74:	685b      	ldr	r3, [r3, #4]
 8108d76:	2200      	movs	r2, #0
 8108d78:	469a      	mov	sl, r3
 8108d7a:	4693      	mov	fp, r2
 8108d7c:	4652      	mov	r2, sl
 8108d7e:	465b      	mov	r3, fp
 8108d80:	4640      	mov	r0, r8
 8108d82:	4649      	mov	r1, r9
 8108d84:	f7f8 f808 	bl	8100d98 <__aeabi_uldivmod>
 8108d88:	4602      	mov	r2, r0
 8108d8a:	460b      	mov	r3, r1
 8108d8c:	4613      	mov	r3, r2
 8108d8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108d96:	d308      	bcc.n	8108daa <UART_SetConfig+0x79a>
 8108d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108d9e:	d204      	bcs.n	8108daa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108da0:	697b      	ldr	r3, [r7, #20]
 8108da2:	681b      	ldr	r3, [r3, #0]
 8108da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108da6:	60da      	str	r2, [r3, #12]
 8108da8:	e17c      	b.n	81090a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108daa:	2301      	movs	r3, #1
 8108dac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108db0:	e178      	b.n	81090a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108db2:	697b      	ldr	r3, [r7, #20]
 8108db4:	69db      	ldr	r3, [r3, #28]
 8108db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108dba:	f040 80c5 	bne.w	8108f48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108dbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108dc2:	2b20      	cmp	r3, #32
 8108dc4:	dc48      	bgt.n	8108e58 <UART_SetConfig+0x848>
 8108dc6:	2b00      	cmp	r3, #0
 8108dc8:	db7b      	blt.n	8108ec2 <UART_SetConfig+0x8b2>
 8108dca:	2b20      	cmp	r3, #32
 8108dcc:	d879      	bhi.n	8108ec2 <UART_SetConfig+0x8b2>
 8108dce:	a201      	add	r2, pc, #4	; (adr r2, 8108dd4 <UART_SetConfig+0x7c4>)
 8108dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108dd4:	08108e5f 	.word	0x08108e5f
 8108dd8:	08108e67 	.word	0x08108e67
 8108ddc:	08108ec3 	.word	0x08108ec3
 8108de0:	08108ec3 	.word	0x08108ec3
 8108de4:	08108e6f 	.word	0x08108e6f
 8108de8:	08108ec3 	.word	0x08108ec3
 8108dec:	08108ec3 	.word	0x08108ec3
 8108df0:	08108ec3 	.word	0x08108ec3
 8108df4:	08108e7f 	.word	0x08108e7f
 8108df8:	08108ec3 	.word	0x08108ec3
 8108dfc:	08108ec3 	.word	0x08108ec3
 8108e00:	08108ec3 	.word	0x08108ec3
 8108e04:	08108ec3 	.word	0x08108ec3
 8108e08:	08108ec3 	.word	0x08108ec3
 8108e0c:	08108ec3 	.word	0x08108ec3
 8108e10:	08108ec3 	.word	0x08108ec3
 8108e14:	08108e8f 	.word	0x08108e8f
 8108e18:	08108ec3 	.word	0x08108ec3
 8108e1c:	08108ec3 	.word	0x08108ec3
 8108e20:	08108ec3 	.word	0x08108ec3
 8108e24:	08108ec3 	.word	0x08108ec3
 8108e28:	08108ec3 	.word	0x08108ec3
 8108e2c:	08108ec3 	.word	0x08108ec3
 8108e30:	08108ec3 	.word	0x08108ec3
 8108e34:	08108ec3 	.word	0x08108ec3
 8108e38:	08108ec3 	.word	0x08108ec3
 8108e3c:	08108ec3 	.word	0x08108ec3
 8108e40:	08108ec3 	.word	0x08108ec3
 8108e44:	08108ec3 	.word	0x08108ec3
 8108e48:	08108ec3 	.word	0x08108ec3
 8108e4c:	08108ec3 	.word	0x08108ec3
 8108e50:	08108ec3 	.word	0x08108ec3
 8108e54:	08108eb5 	.word	0x08108eb5
 8108e58:	2b40      	cmp	r3, #64	; 0x40
 8108e5a:	d02e      	beq.n	8108eba <UART_SetConfig+0x8aa>
 8108e5c:	e031      	b.n	8108ec2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108e5e:	f7fc fda7 	bl	81059b0 <HAL_RCC_GetPCLK1Freq>
 8108e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108e64:	e033      	b.n	8108ece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108e66:	f7fc fdb9 	bl	81059dc <HAL_RCC_GetPCLK2Freq>
 8108e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108e6c:	e02f      	b.n	8108ece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108e72:	4618      	mov	r0, r3
 8108e74:	f7fd fd24 	bl	81068c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108e7c:	e027      	b.n	8108ece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108e7e:	f107 0318 	add.w	r3, r7, #24
 8108e82:	4618      	mov	r0, r3
 8108e84:	f7fd fe70 	bl	8106b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108e88:	69fb      	ldr	r3, [r7, #28]
 8108e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108e8c:	e01f      	b.n	8108ece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108e8e:	4b2d      	ldr	r3, [pc, #180]	; (8108f44 <UART_SetConfig+0x934>)
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	f003 0320 	and.w	r3, r3, #32
 8108e96:	2b00      	cmp	r3, #0
 8108e98:	d009      	beq.n	8108eae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108e9a:	4b2a      	ldr	r3, [pc, #168]	; (8108f44 <UART_SetConfig+0x934>)
 8108e9c:	681b      	ldr	r3, [r3, #0]
 8108e9e:	08db      	lsrs	r3, r3, #3
 8108ea0:	f003 0303 	and.w	r3, r3, #3
 8108ea4:	4a24      	ldr	r2, [pc, #144]	; (8108f38 <UART_SetConfig+0x928>)
 8108ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8108eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108eac:	e00f      	b.n	8108ece <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108eae:	4b22      	ldr	r3, [pc, #136]	; (8108f38 <UART_SetConfig+0x928>)
 8108eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108eb2:	e00c      	b.n	8108ece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108eb4:	4b21      	ldr	r3, [pc, #132]	; (8108f3c <UART_SetConfig+0x92c>)
 8108eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108eb8:	e009      	b.n	8108ece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108ec0:	e005      	b.n	8108ece <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108ec2:	2300      	movs	r3, #0
 8108ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108ec6:	2301      	movs	r3, #1
 8108ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ed0:	2b00      	cmp	r3, #0
 8108ed2:	f000 80e7 	beq.w	81090a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108ed6:	697b      	ldr	r3, [r7, #20]
 8108ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108eda:	4a19      	ldr	r2, [pc, #100]	; (8108f40 <UART_SetConfig+0x930>)
 8108edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108ee0:	461a      	mov	r2, r3
 8108ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8108ee8:	005a      	lsls	r2, r3, #1
 8108eea:	697b      	ldr	r3, [r7, #20]
 8108eec:	685b      	ldr	r3, [r3, #4]
 8108eee:	085b      	lsrs	r3, r3, #1
 8108ef0:	441a      	add	r2, r3
 8108ef2:	697b      	ldr	r3, [r7, #20]
 8108ef4:	685b      	ldr	r3, [r3, #4]
 8108ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8108efa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108efe:	2b0f      	cmp	r3, #15
 8108f00:	d916      	bls.n	8108f30 <UART_SetConfig+0x920>
 8108f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108f08:	d212      	bcs.n	8108f30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f0c:	b29b      	uxth	r3, r3
 8108f0e:	f023 030f 	bic.w	r3, r3, #15
 8108f12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f16:	085b      	lsrs	r3, r3, #1
 8108f18:	b29b      	uxth	r3, r3
 8108f1a:	f003 0307 	and.w	r3, r3, #7
 8108f1e:	b29a      	uxth	r2, r3
 8108f20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108f22:	4313      	orrs	r3, r2
 8108f24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8108f26:	697b      	ldr	r3, [r7, #20]
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108f2c:	60da      	str	r2, [r3, #12]
 8108f2e:	e0b9      	b.n	81090a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108f30:	2301      	movs	r3, #1
 8108f32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108f36:	e0b5      	b.n	81090a4 <UART_SetConfig+0xa94>
 8108f38:	03d09000 	.word	0x03d09000
 8108f3c:	003d0900 	.word	0x003d0900
 8108f40:	0810e284 	.word	0x0810e284
 8108f44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108f48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108f4c:	2b20      	cmp	r3, #32
 8108f4e:	dc49      	bgt.n	8108fe4 <UART_SetConfig+0x9d4>
 8108f50:	2b00      	cmp	r3, #0
 8108f52:	db7c      	blt.n	810904e <UART_SetConfig+0xa3e>
 8108f54:	2b20      	cmp	r3, #32
 8108f56:	d87a      	bhi.n	810904e <UART_SetConfig+0xa3e>
 8108f58:	a201      	add	r2, pc, #4	; (adr r2, 8108f60 <UART_SetConfig+0x950>)
 8108f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f5e:	bf00      	nop
 8108f60:	08108feb 	.word	0x08108feb
 8108f64:	08108ff3 	.word	0x08108ff3
 8108f68:	0810904f 	.word	0x0810904f
 8108f6c:	0810904f 	.word	0x0810904f
 8108f70:	08108ffb 	.word	0x08108ffb
 8108f74:	0810904f 	.word	0x0810904f
 8108f78:	0810904f 	.word	0x0810904f
 8108f7c:	0810904f 	.word	0x0810904f
 8108f80:	0810900b 	.word	0x0810900b
 8108f84:	0810904f 	.word	0x0810904f
 8108f88:	0810904f 	.word	0x0810904f
 8108f8c:	0810904f 	.word	0x0810904f
 8108f90:	0810904f 	.word	0x0810904f
 8108f94:	0810904f 	.word	0x0810904f
 8108f98:	0810904f 	.word	0x0810904f
 8108f9c:	0810904f 	.word	0x0810904f
 8108fa0:	0810901b 	.word	0x0810901b
 8108fa4:	0810904f 	.word	0x0810904f
 8108fa8:	0810904f 	.word	0x0810904f
 8108fac:	0810904f 	.word	0x0810904f
 8108fb0:	0810904f 	.word	0x0810904f
 8108fb4:	0810904f 	.word	0x0810904f
 8108fb8:	0810904f 	.word	0x0810904f
 8108fbc:	0810904f 	.word	0x0810904f
 8108fc0:	0810904f 	.word	0x0810904f
 8108fc4:	0810904f 	.word	0x0810904f
 8108fc8:	0810904f 	.word	0x0810904f
 8108fcc:	0810904f 	.word	0x0810904f
 8108fd0:	0810904f 	.word	0x0810904f
 8108fd4:	0810904f 	.word	0x0810904f
 8108fd8:	0810904f 	.word	0x0810904f
 8108fdc:	0810904f 	.word	0x0810904f
 8108fe0:	08109041 	.word	0x08109041
 8108fe4:	2b40      	cmp	r3, #64	; 0x40
 8108fe6:	d02e      	beq.n	8109046 <UART_SetConfig+0xa36>
 8108fe8:	e031      	b.n	810904e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108fea:	f7fc fce1 	bl	81059b0 <HAL_RCC_GetPCLK1Freq>
 8108fee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108ff0:	e033      	b.n	810905a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108ff2:	f7fc fcf3 	bl	81059dc <HAL_RCC_GetPCLK2Freq>
 8108ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108ff8:	e02f      	b.n	810905a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108ffe:	4618      	mov	r0, r3
 8109000:	f7fd fc5e 	bl	81068c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109008:	e027      	b.n	810905a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810900a:	f107 0318 	add.w	r3, r7, #24
 810900e:	4618      	mov	r0, r3
 8109010:	f7fd fdaa 	bl	8106b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109014:	69fb      	ldr	r3, [r7, #28]
 8109016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109018:	e01f      	b.n	810905a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810901a:	4b2d      	ldr	r3, [pc, #180]	; (81090d0 <UART_SetConfig+0xac0>)
 810901c:	681b      	ldr	r3, [r3, #0]
 810901e:	f003 0320 	and.w	r3, r3, #32
 8109022:	2b00      	cmp	r3, #0
 8109024:	d009      	beq.n	810903a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109026:	4b2a      	ldr	r3, [pc, #168]	; (81090d0 <UART_SetConfig+0xac0>)
 8109028:	681b      	ldr	r3, [r3, #0]
 810902a:	08db      	lsrs	r3, r3, #3
 810902c:	f003 0303 	and.w	r3, r3, #3
 8109030:	4a28      	ldr	r2, [pc, #160]	; (81090d4 <UART_SetConfig+0xac4>)
 8109032:	fa22 f303 	lsr.w	r3, r2, r3
 8109036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109038:	e00f      	b.n	810905a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810903a:	4b26      	ldr	r3, [pc, #152]	; (81090d4 <UART_SetConfig+0xac4>)
 810903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810903e:	e00c      	b.n	810905a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109040:	4b25      	ldr	r3, [pc, #148]	; (81090d8 <UART_SetConfig+0xac8>)
 8109042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109044:	e009      	b.n	810905a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810904a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810904c:	e005      	b.n	810905a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810904e:	2300      	movs	r3, #0
 8109050:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109052:	2301      	movs	r3, #1
 8109054:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109058:	bf00      	nop
    }

    if (pclk != 0U)
 810905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810905c:	2b00      	cmp	r3, #0
 810905e:	d021      	beq.n	81090a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109060:	697b      	ldr	r3, [r7, #20]
 8109062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109064:	4a1d      	ldr	r2, [pc, #116]	; (81090dc <UART_SetConfig+0xacc>)
 8109066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810906a:	461a      	mov	r2, r3
 810906c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810906e:	fbb3 f2f2 	udiv	r2, r3, r2
 8109072:	697b      	ldr	r3, [r7, #20]
 8109074:	685b      	ldr	r3, [r3, #4]
 8109076:	085b      	lsrs	r3, r3, #1
 8109078:	441a      	add	r2, r3
 810907a:	697b      	ldr	r3, [r7, #20]
 810907c:	685b      	ldr	r3, [r3, #4]
 810907e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109082:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109086:	2b0f      	cmp	r3, #15
 8109088:	d909      	bls.n	810909e <UART_SetConfig+0xa8e>
 810908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810908c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109090:	d205      	bcs.n	810909e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109094:	b29a      	uxth	r2, r3
 8109096:	697b      	ldr	r3, [r7, #20]
 8109098:	681b      	ldr	r3, [r3, #0]
 810909a:	60da      	str	r2, [r3, #12]
 810909c:	e002      	b.n	81090a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810909e:	2301      	movs	r3, #1
 81090a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81090a4:	697b      	ldr	r3, [r7, #20]
 81090a6:	2201      	movs	r2, #1
 81090a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81090ac:	697b      	ldr	r3, [r7, #20]
 81090ae:	2201      	movs	r2, #1
 81090b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81090b4:	697b      	ldr	r3, [r7, #20]
 81090b6:	2200      	movs	r2, #0
 81090b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81090ba:	697b      	ldr	r3, [r7, #20]
 81090bc:	2200      	movs	r2, #0
 81090be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81090c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81090c4:	4618      	mov	r0, r3
 81090c6:	3748      	adds	r7, #72	; 0x48
 81090c8:	46bd      	mov	sp, r7
 81090ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81090ce:	bf00      	nop
 81090d0:	58024400 	.word	0x58024400
 81090d4:	03d09000 	.word	0x03d09000
 81090d8:	003d0900 	.word	0x003d0900
 81090dc:	0810e284 	.word	0x0810e284

081090e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81090e0:	b480      	push	{r7}
 81090e2:	b083      	sub	sp, #12
 81090e4:	af00      	add	r7, sp, #0
 81090e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81090e8:	687b      	ldr	r3, [r7, #4]
 81090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81090ec:	f003 0301 	and.w	r3, r3, #1
 81090f0:	2b00      	cmp	r3, #0
 81090f2:	d00a      	beq.n	810910a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81090f4:	687b      	ldr	r3, [r7, #4]
 81090f6:	681b      	ldr	r3, [r3, #0]
 81090f8:	685b      	ldr	r3, [r3, #4]
 81090fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81090fe:	687b      	ldr	r3, [r7, #4]
 8109100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	681b      	ldr	r3, [r3, #0]
 8109106:	430a      	orrs	r2, r1
 8109108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810910a:	687b      	ldr	r3, [r7, #4]
 810910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810910e:	f003 0302 	and.w	r3, r3, #2
 8109112:	2b00      	cmp	r3, #0
 8109114:	d00a      	beq.n	810912c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	681b      	ldr	r3, [r3, #0]
 810911a:	685b      	ldr	r3, [r3, #4]
 810911c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	681b      	ldr	r3, [r3, #0]
 8109128:	430a      	orrs	r2, r1
 810912a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109130:	f003 0304 	and.w	r3, r3, #4
 8109134:	2b00      	cmp	r3, #0
 8109136:	d00a      	beq.n	810914e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109138:	687b      	ldr	r3, [r7, #4]
 810913a:	681b      	ldr	r3, [r3, #0]
 810913c:	685b      	ldr	r3, [r3, #4]
 810913e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109146:	687b      	ldr	r3, [r7, #4]
 8109148:	681b      	ldr	r3, [r3, #0]
 810914a:	430a      	orrs	r2, r1
 810914c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810914e:	687b      	ldr	r3, [r7, #4]
 8109150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109152:	f003 0308 	and.w	r3, r3, #8
 8109156:	2b00      	cmp	r3, #0
 8109158:	d00a      	beq.n	8109170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810915a:	687b      	ldr	r3, [r7, #4]
 810915c:	681b      	ldr	r3, [r3, #0]
 810915e:	685b      	ldr	r3, [r3, #4]
 8109160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109168:	687b      	ldr	r3, [r7, #4]
 810916a:	681b      	ldr	r3, [r3, #0]
 810916c:	430a      	orrs	r2, r1
 810916e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109170:	687b      	ldr	r3, [r7, #4]
 8109172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109174:	f003 0310 	and.w	r3, r3, #16
 8109178:	2b00      	cmp	r3, #0
 810917a:	d00a      	beq.n	8109192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	689b      	ldr	r3, [r3, #8]
 8109182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810918a:	687b      	ldr	r3, [r7, #4]
 810918c:	681b      	ldr	r3, [r3, #0]
 810918e:	430a      	orrs	r2, r1
 8109190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8109192:	687b      	ldr	r3, [r7, #4]
 8109194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109196:	f003 0320 	and.w	r3, r3, #32
 810919a:	2b00      	cmp	r3, #0
 810919c:	d00a      	beq.n	81091b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810919e:	687b      	ldr	r3, [r7, #4]
 81091a0:	681b      	ldr	r3, [r3, #0]
 81091a2:	689b      	ldr	r3, [r3, #8]
 81091a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	681b      	ldr	r3, [r3, #0]
 81091b0:	430a      	orrs	r2, r1
 81091b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81091bc:	2b00      	cmp	r3, #0
 81091be:	d01a      	beq.n	81091f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	681b      	ldr	r3, [r3, #0]
 81091c4:	685b      	ldr	r3, [r3, #4]
 81091c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81091ce:	687b      	ldr	r3, [r7, #4]
 81091d0:	681b      	ldr	r3, [r3, #0]
 81091d2:	430a      	orrs	r2, r1
 81091d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81091d6:	687b      	ldr	r3, [r7, #4]
 81091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81091da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81091de:	d10a      	bne.n	81091f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	681b      	ldr	r3, [r3, #0]
 81091e4:	685b      	ldr	r3, [r3, #4]
 81091e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	681b      	ldr	r3, [r3, #0]
 81091f2:	430a      	orrs	r2, r1
 81091f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81091fe:	2b00      	cmp	r3, #0
 8109200:	d00a      	beq.n	8109218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8109202:	687b      	ldr	r3, [r7, #4]
 8109204:	681b      	ldr	r3, [r3, #0]
 8109206:	685b      	ldr	r3, [r3, #4]
 8109208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810920c:	687b      	ldr	r3, [r7, #4]
 810920e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	430a      	orrs	r2, r1
 8109216:	605a      	str	r2, [r3, #4]
  }
}
 8109218:	bf00      	nop
 810921a:	370c      	adds	r7, #12
 810921c:	46bd      	mov	sp, r7
 810921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109222:	4770      	bx	lr

08109224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109224:	b580      	push	{r7, lr}
 8109226:	b086      	sub	sp, #24
 8109228:	af02      	add	r7, sp, #8
 810922a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	2200      	movs	r2, #0
 8109230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8109234:	f7f9 fa94 	bl	8102760 <HAL_GetTick>
 8109238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	681b      	ldr	r3, [r3, #0]
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	f003 0308 	and.w	r3, r3, #8
 8109244:	2b08      	cmp	r3, #8
 8109246:	d10e      	bne.n	8109266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810924c:	9300      	str	r3, [sp, #0]
 810924e:	68fb      	ldr	r3, [r7, #12]
 8109250:	2200      	movs	r2, #0
 8109252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8109256:	6878      	ldr	r0, [r7, #4]
 8109258:	f000 f82f 	bl	81092ba <UART_WaitOnFlagUntilTimeout>
 810925c:	4603      	mov	r3, r0
 810925e:	2b00      	cmp	r3, #0
 8109260:	d001      	beq.n	8109266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109262:	2303      	movs	r3, #3
 8109264:	e025      	b.n	81092b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	681b      	ldr	r3, [r3, #0]
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	f003 0304 	and.w	r3, r3, #4
 8109270:	2b04      	cmp	r3, #4
 8109272:	d10e      	bne.n	8109292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109278:	9300      	str	r3, [sp, #0]
 810927a:	68fb      	ldr	r3, [r7, #12]
 810927c:	2200      	movs	r2, #0
 810927e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8109282:	6878      	ldr	r0, [r7, #4]
 8109284:	f000 f819 	bl	81092ba <UART_WaitOnFlagUntilTimeout>
 8109288:	4603      	mov	r3, r0
 810928a:	2b00      	cmp	r3, #0
 810928c:	d001      	beq.n	8109292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810928e:	2303      	movs	r3, #3
 8109290:	e00f      	b.n	81092b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	2220      	movs	r2, #32
 8109296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	2220      	movs	r2, #32
 810929e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	2200      	movs	r2, #0
 81092a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	2200      	movs	r2, #0
 81092ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81092b0:	2300      	movs	r3, #0
}
 81092b2:	4618      	mov	r0, r3
 81092b4:	3710      	adds	r7, #16
 81092b6:	46bd      	mov	sp, r7
 81092b8:	bd80      	pop	{r7, pc}

081092ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81092ba:	b580      	push	{r7, lr}
 81092bc:	b09c      	sub	sp, #112	; 0x70
 81092be:	af00      	add	r7, sp, #0
 81092c0:	60f8      	str	r0, [r7, #12]
 81092c2:	60b9      	str	r1, [r7, #8]
 81092c4:	603b      	str	r3, [r7, #0]
 81092c6:	4613      	mov	r3, r2
 81092c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81092ca:	e0a9      	b.n	8109420 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81092cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81092d2:	f000 80a5 	beq.w	8109420 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81092d6:	f7f9 fa43 	bl	8102760 <HAL_GetTick>
 81092da:	4602      	mov	r2, r0
 81092dc:	683b      	ldr	r3, [r7, #0]
 81092de:	1ad3      	subs	r3, r2, r3
 81092e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81092e2:	429a      	cmp	r2, r3
 81092e4:	d302      	bcc.n	81092ec <UART_WaitOnFlagUntilTimeout+0x32>
 81092e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81092e8:	2b00      	cmp	r3, #0
 81092ea:	d140      	bne.n	810936e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81092ec:	68fb      	ldr	r3, [r7, #12]
 81092ee:	681b      	ldr	r3, [r3, #0]
 81092f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81092f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81092f4:	e853 3f00 	ldrex	r3, [r3]
 81092f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 81092fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81092fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109300:	667b      	str	r3, [r7, #100]	; 0x64
 8109302:	68fb      	ldr	r3, [r7, #12]
 8109304:	681b      	ldr	r3, [r3, #0]
 8109306:	461a      	mov	r2, r3
 8109308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810930a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810930c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810930e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8109310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8109312:	e841 2300 	strex	r3, r2, [r1]
 8109316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8109318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810931a:	2b00      	cmp	r3, #0
 810931c:	d1e6      	bne.n	81092ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810931e:	68fb      	ldr	r3, [r7, #12]
 8109320:	681b      	ldr	r3, [r3, #0]
 8109322:	3308      	adds	r3, #8
 8109324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109328:	e853 3f00 	ldrex	r3, [r3]
 810932c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109330:	f023 0301 	bic.w	r3, r3, #1
 8109334:	663b      	str	r3, [r7, #96]	; 0x60
 8109336:	68fb      	ldr	r3, [r7, #12]
 8109338:	681b      	ldr	r3, [r3, #0]
 810933a:	3308      	adds	r3, #8
 810933c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810933e:	64ba      	str	r2, [r7, #72]	; 0x48
 8109340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8109346:	e841 2300 	strex	r3, r2, [r1]
 810934a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810934e:	2b00      	cmp	r3, #0
 8109350:	d1e5      	bne.n	810931e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8109352:	68fb      	ldr	r3, [r7, #12]
 8109354:	2220      	movs	r2, #32
 8109356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810935a:	68fb      	ldr	r3, [r7, #12]
 810935c:	2220      	movs	r2, #32
 810935e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8109362:	68fb      	ldr	r3, [r7, #12]
 8109364:	2200      	movs	r2, #0
 8109366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810936a:	2303      	movs	r3, #3
 810936c:	e069      	b.n	8109442 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810936e:	68fb      	ldr	r3, [r7, #12]
 8109370:	681b      	ldr	r3, [r3, #0]
 8109372:	681b      	ldr	r3, [r3, #0]
 8109374:	f003 0304 	and.w	r3, r3, #4
 8109378:	2b00      	cmp	r3, #0
 810937a:	d051      	beq.n	8109420 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810937c:	68fb      	ldr	r3, [r7, #12]
 810937e:	681b      	ldr	r3, [r3, #0]
 8109380:	69db      	ldr	r3, [r3, #28]
 8109382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810938a:	d149      	bne.n	8109420 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810938c:	68fb      	ldr	r3, [r7, #12]
 810938e:	681b      	ldr	r3, [r3, #0]
 8109390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109394:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8109396:	68fb      	ldr	r3, [r7, #12]
 8109398:	681b      	ldr	r3, [r3, #0]
 810939a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810939e:	e853 3f00 	ldrex	r3, [r3]
 81093a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81093aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 81093ac:	68fb      	ldr	r3, [r7, #12]
 81093ae:	681b      	ldr	r3, [r3, #0]
 81093b0:	461a      	mov	r2, r3
 81093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81093b4:	637b      	str	r3, [r7, #52]	; 0x34
 81093b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81093b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81093ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81093bc:	e841 2300 	strex	r3, r2, [r1]
 81093c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81093c4:	2b00      	cmp	r3, #0
 81093c6:	d1e6      	bne.n	8109396 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81093c8:	68fb      	ldr	r3, [r7, #12]
 81093ca:	681b      	ldr	r3, [r3, #0]
 81093cc:	3308      	adds	r3, #8
 81093ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81093d0:	697b      	ldr	r3, [r7, #20]
 81093d2:	e853 3f00 	ldrex	r3, [r3]
 81093d6:	613b      	str	r3, [r7, #16]
   return(result);
 81093d8:	693b      	ldr	r3, [r7, #16]
 81093da:	f023 0301 	bic.w	r3, r3, #1
 81093de:	66bb      	str	r3, [r7, #104]	; 0x68
 81093e0:	68fb      	ldr	r3, [r7, #12]
 81093e2:	681b      	ldr	r3, [r3, #0]
 81093e4:	3308      	adds	r3, #8
 81093e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81093e8:	623a      	str	r2, [r7, #32]
 81093ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81093ec:	69f9      	ldr	r1, [r7, #28]
 81093ee:	6a3a      	ldr	r2, [r7, #32]
 81093f0:	e841 2300 	strex	r3, r2, [r1]
 81093f4:	61bb      	str	r3, [r7, #24]
   return(result);
 81093f6:	69bb      	ldr	r3, [r7, #24]
 81093f8:	2b00      	cmp	r3, #0
 81093fa:	d1e5      	bne.n	81093c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 81093fc:	68fb      	ldr	r3, [r7, #12]
 81093fe:	2220      	movs	r2, #32
 8109400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8109404:	68fb      	ldr	r3, [r7, #12]
 8109406:	2220      	movs	r2, #32
 8109408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810940c:	68fb      	ldr	r3, [r7, #12]
 810940e:	2220      	movs	r2, #32
 8109410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109414:	68fb      	ldr	r3, [r7, #12]
 8109416:	2200      	movs	r2, #0
 8109418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810941c:	2303      	movs	r3, #3
 810941e:	e010      	b.n	8109442 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109420:	68fb      	ldr	r3, [r7, #12]
 8109422:	681b      	ldr	r3, [r3, #0]
 8109424:	69da      	ldr	r2, [r3, #28]
 8109426:	68bb      	ldr	r3, [r7, #8]
 8109428:	4013      	ands	r3, r2
 810942a:	68ba      	ldr	r2, [r7, #8]
 810942c:	429a      	cmp	r2, r3
 810942e:	bf0c      	ite	eq
 8109430:	2301      	moveq	r3, #1
 8109432:	2300      	movne	r3, #0
 8109434:	b2db      	uxtb	r3, r3
 8109436:	461a      	mov	r2, r3
 8109438:	79fb      	ldrb	r3, [r7, #7]
 810943a:	429a      	cmp	r2, r3
 810943c:	f43f af46 	beq.w	81092cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109440:	2300      	movs	r3, #0
}
 8109442:	4618      	mov	r0, r3
 8109444:	3770      	adds	r7, #112	; 0x70
 8109446:	46bd      	mov	sp, r7
 8109448:	bd80      	pop	{r7, pc}

0810944a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810944a:	b480      	push	{r7}
 810944c:	b085      	sub	sp, #20
 810944e:	af00      	add	r7, sp, #0
 8109450:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109452:	687b      	ldr	r3, [r7, #4]
 8109454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109458:	2b01      	cmp	r3, #1
 810945a:	d101      	bne.n	8109460 <HAL_UARTEx_DisableFifoMode+0x16>
 810945c:	2302      	movs	r3, #2
 810945e:	e027      	b.n	81094b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	2201      	movs	r2, #1
 8109464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109468:	687b      	ldr	r3, [r7, #4]
 810946a:	2224      	movs	r2, #36	; 0x24
 810946c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	681b      	ldr	r3, [r3, #0]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	681b      	ldr	r3, [r3, #0]
 810947c:	681a      	ldr	r2, [r3, #0]
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	681b      	ldr	r3, [r3, #0]
 8109482:	f022 0201 	bic.w	r2, r2, #1
 8109486:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109488:	68fb      	ldr	r3, [r7, #12]
 810948a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810948e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	2200      	movs	r2, #0
 8109494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109496:	687b      	ldr	r3, [r7, #4]
 8109498:	681b      	ldr	r3, [r3, #0]
 810949a:	68fa      	ldr	r2, [r7, #12]
 810949c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	2220      	movs	r2, #32
 81094a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81094a6:	687b      	ldr	r3, [r7, #4]
 81094a8:	2200      	movs	r2, #0
 81094aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81094ae:	2300      	movs	r3, #0
}
 81094b0:	4618      	mov	r0, r3
 81094b2:	3714      	adds	r7, #20
 81094b4:	46bd      	mov	sp, r7
 81094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ba:	4770      	bx	lr

081094bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81094bc:	b580      	push	{r7, lr}
 81094be:	b084      	sub	sp, #16
 81094c0:	af00      	add	r7, sp, #0
 81094c2:	6078      	str	r0, [r7, #4]
 81094c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81094cc:	2b01      	cmp	r3, #1
 81094ce:	d101      	bne.n	81094d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81094d0:	2302      	movs	r3, #2
 81094d2:	e02d      	b.n	8109530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	2201      	movs	r2, #1
 81094d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81094dc:	687b      	ldr	r3, [r7, #4]
 81094de:	2224      	movs	r2, #36	; 0x24
 81094e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	681b      	ldr	r3, [r3, #0]
 81094e8:	681b      	ldr	r3, [r3, #0]
 81094ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81094ec:	687b      	ldr	r3, [r7, #4]
 81094ee:	681b      	ldr	r3, [r3, #0]
 81094f0:	681a      	ldr	r2, [r3, #0]
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	681b      	ldr	r3, [r3, #0]
 81094f6:	f022 0201 	bic.w	r2, r2, #1
 81094fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	681b      	ldr	r3, [r3, #0]
 8109500:	689b      	ldr	r3, [r3, #8]
 8109502:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	681b      	ldr	r3, [r3, #0]
 810950a:	683a      	ldr	r2, [r7, #0]
 810950c:	430a      	orrs	r2, r1
 810950e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109510:	6878      	ldr	r0, [r7, #4]
 8109512:	f000 f84f 	bl	81095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	681b      	ldr	r3, [r3, #0]
 810951a:	68fa      	ldr	r2, [r7, #12]
 810951c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810951e:	687b      	ldr	r3, [r7, #4]
 8109520:	2220      	movs	r2, #32
 8109522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	2200      	movs	r2, #0
 810952a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810952e:	2300      	movs	r3, #0
}
 8109530:	4618      	mov	r0, r3
 8109532:	3710      	adds	r7, #16
 8109534:	46bd      	mov	sp, r7
 8109536:	bd80      	pop	{r7, pc}

08109538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109538:	b580      	push	{r7, lr}
 810953a:	b084      	sub	sp, #16
 810953c:	af00      	add	r7, sp, #0
 810953e:	6078      	str	r0, [r7, #4]
 8109540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109542:	687b      	ldr	r3, [r7, #4]
 8109544:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109548:	2b01      	cmp	r3, #1
 810954a:	d101      	bne.n	8109550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810954c:	2302      	movs	r3, #2
 810954e:	e02d      	b.n	81095ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	2201      	movs	r2, #1
 8109554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	2224      	movs	r2, #36	; 0x24
 810955c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109560:	687b      	ldr	r3, [r7, #4]
 8109562:	681b      	ldr	r3, [r3, #0]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	681b      	ldr	r3, [r3, #0]
 810956c:	681a      	ldr	r2, [r3, #0]
 810956e:	687b      	ldr	r3, [r7, #4]
 8109570:	681b      	ldr	r3, [r3, #0]
 8109572:	f022 0201 	bic.w	r2, r2, #1
 8109576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	681b      	ldr	r3, [r3, #0]
 810957c:	689b      	ldr	r3, [r3, #8]
 810957e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	681b      	ldr	r3, [r3, #0]
 8109586:	683a      	ldr	r2, [r7, #0]
 8109588:	430a      	orrs	r2, r1
 810958a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810958c:	6878      	ldr	r0, [r7, #4]
 810958e:	f000 f811 	bl	81095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	681b      	ldr	r3, [r3, #0]
 8109596:	68fa      	ldr	r2, [r7, #12]
 8109598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	2220      	movs	r2, #32
 810959e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81095a2:	687b      	ldr	r3, [r7, #4]
 81095a4:	2200      	movs	r2, #0
 81095a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81095aa:	2300      	movs	r3, #0
}
 81095ac:	4618      	mov	r0, r3
 81095ae:	3710      	adds	r7, #16
 81095b0:	46bd      	mov	sp, r7
 81095b2:	bd80      	pop	{r7, pc}

081095b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81095b4:	b480      	push	{r7}
 81095b6:	b085      	sub	sp, #20
 81095b8:	af00      	add	r7, sp, #0
 81095ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81095c0:	2b00      	cmp	r3, #0
 81095c2:	d108      	bne.n	81095d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	2201      	movs	r2, #1
 81095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	2201      	movs	r2, #1
 81095d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81095d4:	e031      	b.n	810963a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81095d6:	2310      	movs	r3, #16
 81095d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81095da:	2310      	movs	r3, #16
 81095dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81095de:	687b      	ldr	r3, [r7, #4]
 81095e0:	681b      	ldr	r3, [r3, #0]
 81095e2:	689b      	ldr	r3, [r3, #8]
 81095e4:	0e5b      	lsrs	r3, r3, #25
 81095e6:	b2db      	uxtb	r3, r3
 81095e8:	f003 0307 	and.w	r3, r3, #7
 81095ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81095ee:	687b      	ldr	r3, [r7, #4]
 81095f0:	681b      	ldr	r3, [r3, #0]
 81095f2:	689b      	ldr	r3, [r3, #8]
 81095f4:	0f5b      	lsrs	r3, r3, #29
 81095f6:	b2db      	uxtb	r3, r3
 81095f8:	f003 0307 	and.w	r3, r3, #7
 81095fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81095fe:	7bbb      	ldrb	r3, [r7, #14]
 8109600:	7b3a      	ldrb	r2, [r7, #12]
 8109602:	4911      	ldr	r1, [pc, #68]	; (8109648 <UARTEx_SetNbDataToProcess+0x94>)
 8109604:	5c8a      	ldrb	r2, [r1, r2]
 8109606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810960a:	7b3a      	ldrb	r2, [r7, #12]
 810960c:	490f      	ldr	r1, [pc, #60]	; (810964c <UARTEx_SetNbDataToProcess+0x98>)
 810960e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109610:	fb93 f3f2 	sdiv	r3, r3, r2
 8109614:	b29a      	uxth	r2, r3
 8109616:	687b      	ldr	r3, [r7, #4]
 8109618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810961c:	7bfb      	ldrb	r3, [r7, #15]
 810961e:	7b7a      	ldrb	r2, [r7, #13]
 8109620:	4909      	ldr	r1, [pc, #36]	; (8109648 <UARTEx_SetNbDataToProcess+0x94>)
 8109622:	5c8a      	ldrb	r2, [r1, r2]
 8109624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109628:	7b7a      	ldrb	r2, [r7, #13]
 810962a:	4908      	ldr	r1, [pc, #32]	; (810964c <UARTEx_SetNbDataToProcess+0x98>)
 810962c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810962e:	fb93 f3f2 	sdiv	r3, r3, r2
 8109632:	b29a      	uxth	r2, r3
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810963a:	bf00      	nop
 810963c:	3714      	adds	r7, #20
 810963e:	46bd      	mov	sp, r7
 8109640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109644:	4770      	bx	lr
 8109646:	bf00      	nop
 8109648:	0810e29c 	.word	0x0810e29c
 810964c:	0810e2a4 	.word	0x0810e2a4

08109650 <calloc>:
 8109650:	4b02      	ldr	r3, [pc, #8]	; (810965c <calloc+0xc>)
 8109652:	460a      	mov	r2, r1
 8109654:	4601      	mov	r1, r0
 8109656:	6818      	ldr	r0, [r3, #0]
 8109658:	f000 b848 	b.w	81096ec <_calloc_r>
 810965c:	10000020 	.word	0x10000020

08109660 <__errno>:
 8109660:	4b01      	ldr	r3, [pc, #4]	; (8109668 <__errno+0x8>)
 8109662:	6818      	ldr	r0, [r3, #0]
 8109664:	4770      	bx	lr
 8109666:	bf00      	nop
 8109668:	10000020 	.word	0x10000020

0810966c <exit>:
 810966c:	b508      	push	{r3, lr}
 810966e:	4b07      	ldr	r3, [pc, #28]	; (810968c <exit+0x20>)
 8109670:	4604      	mov	r4, r0
 8109672:	b113      	cbz	r3, 810967a <exit+0xe>
 8109674:	2100      	movs	r1, #0
 8109676:	f3af 8000 	nop.w
 810967a:	4b05      	ldr	r3, [pc, #20]	; (8109690 <exit+0x24>)
 810967c:	6818      	ldr	r0, [r3, #0]
 810967e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8109680:	b103      	cbz	r3, 8109684 <exit+0x18>
 8109682:	4798      	blx	r3
 8109684:	4620      	mov	r0, r4
 8109686:	f7f8 feeb 	bl	8102460 <_exit>
 810968a:	bf00      	nop
 810968c:	00000000 	.word	0x00000000
 8109690:	0810e2ac 	.word	0x0810e2ac

08109694 <__libc_init_array>:
 8109694:	b570      	push	{r4, r5, r6, lr}
 8109696:	4d0d      	ldr	r5, [pc, #52]	; (81096cc <__libc_init_array+0x38>)
 8109698:	4c0d      	ldr	r4, [pc, #52]	; (81096d0 <__libc_init_array+0x3c>)
 810969a:	1b64      	subs	r4, r4, r5
 810969c:	10a4      	asrs	r4, r4, #2
 810969e:	2600      	movs	r6, #0
 81096a0:	42a6      	cmp	r6, r4
 81096a2:	d109      	bne.n	81096b8 <__libc_init_array+0x24>
 81096a4:	4d0b      	ldr	r5, [pc, #44]	; (81096d4 <__libc_init_array+0x40>)
 81096a6:	4c0c      	ldr	r4, [pc, #48]	; (81096d8 <__libc_init_array+0x44>)
 81096a8:	f004 fd88 	bl	810e1bc <_init>
 81096ac:	1b64      	subs	r4, r4, r5
 81096ae:	10a4      	asrs	r4, r4, #2
 81096b0:	2600      	movs	r6, #0
 81096b2:	42a6      	cmp	r6, r4
 81096b4:	d105      	bne.n	81096c2 <__libc_init_array+0x2e>
 81096b6:	bd70      	pop	{r4, r5, r6, pc}
 81096b8:	f855 3b04 	ldr.w	r3, [r5], #4
 81096bc:	4798      	blx	r3
 81096be:	3601      	adds	r6, #1
 81096c0:	e7ee      	b.n	81096a0 <__libc_init_array+0xc>
 81096c2:	f855 3b04 	ldr.w	r3, [r5], #4
 81096c6:	4798      	blx	r3
 81096c8:	3601      	adds	r6, #1
 81096ca:	e7f2      	b.n	81096b2 <__libc_init_array+0x1e>
 81096cc:	0810e764 	.word	0x0810e764
 81096d0:	0810e764 	.word	0x0810e764
 81096d4:	0810e764 	.word	0x0810e764
 81096d8:	0810e768 	.word	0x0810e768

081096dc <memset>:
 81096dc:	4402      	add	r2, r0
 81096de:	4603      	mov	r3, r0
 81096e0:	4293      	cmp	r3, r2
 81096e2:	d100      	bne.n	81096e6 <memset+0xa>
 81096e4:	4770      	bx	lr
 81096e6:	f803 1b01 	strb.w	r1, [r3], #1
 81096ea:	e7f9      	b.n	81096e0 <memset+0x4>

081096ec <_calloc_r>:
 81096ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81096ee:	fba1 2402 	umull	r2, r4, r1, r2
 81096f2:	b94c      	cbnz	r4, 8109708 <_calloc_r+0x1c>
 81096f4:	4611      	mov	r1, r2
 81096f6:	9201      	str	r2, [sp, #4]
 81096f8:	f000 f82e 	bl	8109758 <_malloc_r>
 81096fc:	9a01      	ldr	r2, [sp, #4]
 81096fe:	4605      	mov	r5, r0
 8109700:	b930      	cbnz	r0, 8109710 <_calloc_r+0x24>
 8109702:	4628      	mov	r0, r5
 8109704:	b003      	add	sp, #12
 8109706:	bd30      	pop	{r4, r5, pc}
 8109708:	220c      	movs	r2, #12
 810970a:	6002      	str	r2, [r0, #0]
 810970c:	2500      	movs	r5, #0
 810970e:	e7f8      	b.n	8109702 <_calloc_r+0x16>
 8109710:	4621      	mov	r1, r4
 8109712:	f7ff ffe3 	bl	81096dc <memset>
 8109716:	e7f4      	b.n	8109702 <_calloc_r+0x16>

08109718 <sbrk_aligned>:
 8109718:	b570      	push	{r4, r5, r6, lr}
 810971a:	4e0e      	ldr	r6, [pc, #56]	; (8109754 <sbrk_aligned+0x3c>)
 810971c:	460c      	mov	r4, r1
 810971e:	6831      	ldr	r1, [r6, #0]
 8109720:	4605      	mov	r5, r0
 8109722:	b911      	cbnz	r1, 810972a <sbrk_aligned+0x12>
 8109724:	f000 ffaa 	bl	810a67c <_sbrk_r>
 8109728:	6030      	str	r0, [r6, #0]
 810972a:	4621      	mov	r1, r4
 810972c:	4628      	mov	r0, r5
 810972e:	f000 ffa5 	bl	810a67c <_sbrk_r>
 8109732:	1c43      	adds	r3, r0, #1
 8109734:	d00a      	beq.n	810974c <sbrk_aligned+0x34>
 8109736:	1cc4      	adds	r4, r0, #3
 8109738:	f024 0403 	bic.w	r4, r4, #3
 810973c:	42a0      	cmp	r0, r4
 810973e:	d007      	beq.n	8109750 <sbrk_aligned+0x38>
 8109740:	1a21      	subs	r1, r4, r0
 8109742:	4628      	mov	r0, r5
 8109744:	f000 ff9a 	bl	810a67c <_sbrk_r>
 8109748:	3001      	adds	r0, #1
 810974a:	d101      	bne.n	8109750 <sbrk_aligned+0x38>
 810974c:	f04f 34ff 	mov.w	r4, #4294967295
 8109750:	4620      	mov	r0, r4
 8109752:	bd70      	pop	{r4, r5, r6, pc}
 8109754:	10000554 	.word	0x10000554

08109758 <_malloc_r>:
 8109758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810975c:	1ccd      	adds	r5, r1, #3
 810975e:	f025 0503 	bic.w	r5, r5, #3
 8109762:	3508      	adds	r5, #8
 8109764:	2d0c      	cmp	r5, #12
 8109766:	bf38      	it	cc
 8109768:	250c      	movcc	r5, #12
 810976a:	2d00      	cmp	r5, #0
 810976c:	4607      	mov	r7, r0
 810976e:	db01      	blt.n	8109774 <_malloc_r+0x1c>
 8109770:	42a9      	cmp	r1, r5
 8109772:	d905      	bls.n	8109780 <_malloc_r+0x28>
 8109774:	230c      	movs	r3, #12
 8109776:	603b      	str	r3, [r7, #0]
 8109778:	2600      	movs	r6, #0
 810977a:	4630      	mov	r0, r6
 810977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109780:	4e2e      	ldr	r6, [pc, #184]	; (810983c <_malloc_r+0xe4>)
 8109782:	f003 fb61 	bl	810ce48 <__malloc_lock>
 8109786:	6833      	ldr	r3, [r6, #0]
 8109788:	461c      	mov	r4, r3
 810978a:	bb34      	cbnz	r4, 81097da <_malloc_r+0x82>
 810978c:	4629      	mov	r1, r5
 810978e:	4638      	mov	r0, r7
 8109790:	f7ff ffc2 	bl	8109718 <sbrk_aligned>
 8109794:	1c43      	adds	r3, r0, #1
 8109796:	4604      	mov	r4, r0
 8109798:	d14d      	bne.n	8109836 <_malloc_r+0xde>
 810979a:	6834      	ldr	r4, [r6, #0]
 810979c:	4626      	mov	r6, r4
 810979e:	2e00      	cmp	r6, #0
 81097a0:	d140      	bne.n	8109824 <_malloc_r+0xcc>
 81097a2:	6823      	ldr	r3, [r4, #0]
 81097a4:	4631      	mov	r1, r6
 81097a6:	4638      	mov	r0, r7
 81097a8:	eb04 0803 	add.w	r8, r4, r3
 81097ac:	f000 ff66 	bl	810a67c <_sbrk_r>
 81097b0:	4580      	cmp	r8, r0
 81097b2:	d13a      	bne.n	810982a <_malloc_r+0xd2>
 81097b4:	6821      	ldr	r1, [r4, #0]
 81097b6:	3503      	adds	r5, #3
 81097b8:	1a6d      	subs	r5, r5, r1
 81097ba:	f025 0503 	bic.w	r5, r5, #3
 81097be:	3508      	adds	r5, #8
 81097c0:	2d0c      	cmp	r5, #12
 81097c2:	bf38      	it	cc
 81097c4:	250c      	movcc	r5, #12
 81097c6:	4629      	mov	r1, r5
 81097c8:	4638      	mov	r0, r7
 81097ca:	f7ff ffa5 	bl	8109718 <sbrk_aligned>
 81097ce:	3001      	adds	r0, #1
 81097d0:	d02b      	beq.n	810982a <_malloc_r+0xd2>
 81097d2:	6823      	ldr	r3, [r4, #0]
 81097d4:	442b      	add	r3, r5
 81097d6:	6023      	str	r3, [r4, #0]
 81097d8:	e00e      	b.n	81097f8 <_malloc_r+0xa0>
 81097da:	6822      	ldr	r2, [r4, #0]
 81097dc:	1b52      	subs	r2, r2, r5
 81097de:	d41e      	bmi.n	810981e <_malloc_r+0xc6>
 81097e0:	2a0b      	cmp	r2, #11
 81097e2:	d916      	bls.n	8109812 <_malloc_r+0xba>
 81097e4:	1961      	adds	r1, r4, r5
 81097e6:	42a3      	cmp	r3, r4
 81097e8:	6025      	str	r5, [r4, #0]
 81097ea:	bf18      	it	ne
 81097ec:	6059      	strne	r1, [r3, #4]
 81097ee:	6863      	ldr	r3, [r4, #4]
 81097f0:	bf08      	it	eq
 81097f2:	6031      	streq	r1, [r6, #0]
 81097f4:	5162      	str	r2, [r4, r5]
 81097f6:	604b      	str	r3, [r1, #4]
 81097f8:	4638      	mov	r0, r7
 81097fa:	f104 060b 	add.w	r6, r4, #11
 81097fe:	f003 fb29 	bl	810ce54 <__malloc_unlock>
 8109802:	f026 0607 	bic.w	r6, r6, #7
 8109806:	1d23      	adds	r3, r4, #4
 8109808:	1af2      	subs	r2, r6, r3
 810980a:	d0b6      	beq.n	810977a <_malloc_r+0x22>
 810980c:	1b9b      	subs	r3, r3, r6
 810980e:	50a3      	str	r3, [r4, r2]
 8109810:	e7b3      	b.n	810977a <_malloc_r+0x22>
 8109812:	6862      	ldr	r2, [r4, #4]
 8109814:	42a3      	cmp	r3, r4
 8109816:	bf0c      	ite	eq
 8109818:	6032      	streq	r2, [r6, #0]
 810981a:	605a      	strne	r2, [r3, #4]
 810981c:	e7ec      	b.n	81097f8 <_malloc_r+0xa0>
 810981e:	4623      	mov	r3, r4
 8109820:	6864      	ldr	r4, [r4, #4]
 8109822:	e7b2      	b.n	810978a <_malloc_r+0x32>
 8109824:	4634      	mov	r4, r6
 8109826:	6876      	ldr	r6, [r6, #4]
 8109828:	e7b9      	b.n	810979e <_malloc_r+0x46>
 810982a:	230c      	movs	r3, #12
 810982c:	603b      	str	r3, [r7, #0]
 810982e:	4638      	mov	r0, r7
 8109830:	f003 fb10 	bl	810ce54 <__malloc_unlock>
 8109834:	e7a1      	b.n	810977a <_malloc_r+0x22>
 8109836:	6025      	str	r5, [r4, #0]
 8109838:	e7de      	b.n	81097f8 <_malloc_r+0xa0>
 810983a:	bf00      	nop
 810983c:	10000550 	.word	0x10000550

08109840 <__cvt>:
 8109840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109844:	ec55 4b10 	vmov	r4, r5, d0
 8109848:	2d00      	cmp	r5, #0
 810984a:	460e      	mov	r6, r1
 810984c:	4619      	mov	r1, r3
 810984e:	462b      	mov	r3, r5
 8109850:	bfbb      	ittet	lt
 8109852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8109856:	461d      	movlt	r5, r3
 8109858:	2300      	movge	r3, #0
 810985a:	232d      	movlt	r3, #45	; 0x2d
 810985c:	700b      	strb	r3, [r1, #0]
 810985e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8109864:	4691      	mov	r9, r2
 8109866:	f023 0820 	bic.w	r8, r3, #32
 810986a:	bfbc      	itt	lt
 810986c:	4622      	movlt	r2, r4
 810986e:	4614      	movlt	r4, r2
 8109870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109874:	d005      	beq.n	8109882 <__cvt+0x42>
 8109876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810987a:	d100      	bne.n	810987e <__cvt+0x3e>
 810987c:	3601      	adds	r6, #1
 810987e:	2102      	movs	r1, #2
 8109880:	e000      	b.n	8109884 <__cvt+0x44>
 8109882:	2103      	movs	r1, #3
 8109884:	ab03      	add	r3, sp, #12
 8109886:	9301      	str	r3, [sp, #4]
 8109888:	ab02      	add	r3, sp, #8
 810988a:	9300      	str	r3, [sp, #0]
 810988c:	ec45 4b10 	vmov	d0, r4, r5
 8109890:	4653      	mov	r3, sl
 8109892:	4632      	mov	r2, r6
 8109894:	f001 ff30 	bl	810b6f8 <_dtoa_r>
 8109898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810989c:	4607      	mov	r7, r0
 810989e:	d102      	bne.n	81098a6 <__cvt+0x66>
 81098a0:	f019 0f01 	tst.w	r9, #1
 81098a4:	d022      	beq.n	81098ec <__cvt+0xac>
 81098a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81098aa:	eb07 0906 	add.w	r9, r7, r6
 81098ae:	d110      	bne.n	81098d2 <__cvt+0x92>
 81098b0:	783b      	ldrb	r3, [r7, #0]
 81098b2:	2b30      	cmp	r3, #48	; 0x30
 81098b4:	d10a      	bne.n	81098cc <__cvt+0x8c>
 81098b6:	2200      	movs	r2, #0
 81098b8:	2300      	movs	r3, #0
 81098ba:	4620      	mov	r0, r4
 81098bc:	4629      	mov	r1, r5
 81098be:	f7f7 f98b 	bl	8100bd8 <__aeabi_dcmpeq>
 81098c2:	b918      	cbnz	r0, 81098cc <__cvt+0x8c>
 81098c4:	f1c6 0601 	rsb	r6, r6, #1
 81098c8:	f8ca 6000 	str.w	r6, [sl]
 81098cc:	f8da 3000 	ldr.w	r3, [sl]
 81098d0:	4499      	add	r9, r3
 81098d2:	2200      	movs	r2, #0
 81098d4:	2300      	movs	r3, #0
 81098d6:	4620      	mov	r0, r4
 81098d8:	4629      	mov	r1, r5
 81098da:	f7f7 f97d 	bl	8100bd8 <__aeabi_dcmpeq>
 81098de:	b108      	cbz	r0, 81098e4 <__cvt+0xa4>
 81098e0:	f8cd 900c 	str.w	r9, [sp, #12]
 81098e4:	2230      	movs	r2, #48	; 0x30
 81098e6:	9b03      	ldr	r3, [sp, #12]
 81098e8:	454b      	cmp	r3, r9
 81098ea:	d307      	bcc.n	81098fc <__cvt+0xbc>
 81098ec:	9b03      	ldr	r3, [sp, #12]
 81098ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81098f0:	1bdb      	subs	r3, r3, r7
 81098f2:	4638      	mov	r0, r7
 81098f4:	6013      	str	r3, [r2, #0]
 81098f6:	b004      	add	sp, #16
 81098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81098fc:	1c59      	adds	r1, r3, #1
 81098fe:	9103      	str	r1, [sp, #12]
 8109900:	701a      	strb	r2, [r3, #0]
 8109902:	e7f0      	b.n	81098e6 <__cvt+0xa6>

08109904 <__exponent>:
 8109904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109906:	4603      	mov	r3, r0
 8109908:	2900      	cmp	r1, #0
 810990a:	bfb8      	it	lt
 810990c:	4249      	neglt	r1, r1
 810990e:	f803 2b02 	strb.w	r2, [r3], #2
 8109912:	bfb4      	ite	lt
 8109914:	222d      	movlt	r2, #45	; 0x2d
 8109916:	222b      	movge	r2, #43	; 0x2b
 8109918:	2909      	cmp	r1, #9
 810991a:	7042      	strb	r2, [r0, #1]
 810991c:	dd2a      	ble.n	8109974 <__exponent+0x70>
 810991e:	f10d 0407 	add.w	r4, sp, #7
 8109922:	46a4      	mov	ip, r4
 8109924:	270a      	movs	r7, #10
 8109926:	46a6      	mov	lr, r4
 8109928:	460a      	mov	r2, r1
 810992a:	fb91 f6f7 	sdiv	r6, r1, r7
 810992e:	fb07 1516 	mls	r5, r7, r6, r1
 8109932:	3530      	adds	r5, #48	; 0x30
 8109934:	2a63      	cmp	r2, #99	; 0x63
 8109936:	f104 34ff 	add.w	r4, r4, #4294967295
 810993a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810993e:	4631      	mov	r1, r6
 8109940:	dcf1      	bgt.n	8109926 <__exponent+0x22>
 8109942:	3130      	adds	r1, #48	; 0x30
 8109944:	f1ae 0502 	sub.w	r5, lr, #2
 8109948:	f804 1c01 	strb.w	r1, [r4, #-1]
 810994c:	1c44      	adds	r4, r0, #1
 810994e:	4629      	mov	r1, r5
 8109950:	4561      	cmp	r1, ip
 8109952:	d30a      	bcc.n	810996a <__exponent+0x66>
 8109954:	f10d 0209 	add.w	r2, sp, #9
 8109958:	eba2 020e 	sub.w	r2, r2, lr
 810995c:	4565      	cmp	r5, ip
 810995e:	bf88      	it	hi
 8109960:	2200      	movhi	r2, #0
 8109962:	4413      	add	r3, r2
 8109964:	1a18      	subs	r0, r3, r0
 8109966:	b003      	add	sp, #12
 8109968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810996a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810996e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8109972:	e7ed      	b.n	8109950 <__exponent+0x4c>
 8109974:	2330      	movs	r3, #48	; 0x30
 8109976:	3130      	adds	r1, #48	; 0x30
 8109978:	7083      	strb	r3, [r0, #2]
 810997a:	70c1      	strb	r1, [r0, #3]
 810997c:	1d03      	adds	r3, r0, #4
 810997e:	e7f1      	b.n	8109964 <__exponent+0x60>

08109980 <_printf_float>:
 8109980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109984:	ed2d 8b02 	vpush	{d8}
 8109988:	b08d      	sub	sp, #52	; 0x34
 810998a:	460c      	mov	r4, r1
 810998c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109990:	4616      	mov	r6, r2
 8109992:	461f      	mov	r7, r3
 8109994:	4605      	mov	r5, r0
 8109996:	f003 f9c3 	bl	810cd20 <_localeconv_r>
 810999a:	f8d0 a000 	ldr.w	sl, [r0]
 810999e:	4650      	mov	r0, sl
 81099a0:	f7f6 fc9e 	bl	81002e0 <strlen>
 81099a4:	2300      	movs	r3, #0
 81099a6:	930a      	str	r3, [sp, #40]	; 0x28
 81099a8:	6823      	ldr	r3, [r4, #0]
 81099aa:	9305      	str	r3, [sp, #20]
 81099ac:	f8d8 3000 	ldr.w	r3, [r8]
 81099b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 81099b4:	3307      	adds	r3, #7
 81099b6:	f023 0307 	bic.w	r3, r3, #7
 81099ba:	f103 0208 	add.w	r2, r3, #8
 81099be:	f8c8 2000 	str.w	r2, [r8]
 81099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81099ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81099ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81099d2:	9307      	str	r3, [sp, #28]
 81099d4:	f8cd 8018 	str.w	r8, [sp, #24]
 81099d8:	ee08 0a10 	vmov	s16, r0
 81099dc:	4b9f      	ldr	r3, [pc, #636]	; (8109c5c <_printf_float+0x2dc>)
 81099de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81099e2:	f04f 32ff 	mov.w	r2, #4294967295
 81099e6:	f7f7 f929 	bl	8100c3c <__aeabi_dcmpun>
 81099ea:	bb88      	cbnz	r0, 8109a50 <_printf_float+0xd0>
 81099ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81099f0:	4b9a      	ldr	r3, [pc, #616]	; (8109c5c <_printf_float+0x2dc>)
 81099f2:	f04f 32ff 	mov.w	r2, #4294967295
 81099f6:	f7f7 f903 	bl	8100c00 <__aeabi_dcmple>
 81099fa:	bb48      	cbnz	r0, 8109a50 <_printf_float+0xd0>
 81099fc:	2200      	movs	r2, #0
 81099fe:	2300      	movs	r3, #0
 8109a00:	4640      	mov	r0, r8
 8109a02:	4649      	mov	r1, r9
 8109a04:	f7f7 f8f2 	bl	8100bec <__aeabi_dcmplt>
 8109a08:	b110      	cbz	r0, 8109a10 <_printf_float+0x90>
 8109a0a:	232d      	movs	r3, #45	; 0x2d
 8109a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109a10:	4b93      	ldr	r3, [pc, #588]	; (8109c60 <_printf_float+0x2e0>)
 8109a12:	4894      	ldr	r0, [pc, #592]	; (8109c64 <_printf_float+0x2e4>)
 8109a14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8109a18:	bf94      	ite	ls
 8109a1a:	4698      	movls	r8, r3
 8109a1c:	4680      	movhi	r8, r0
 8109a1e:	2303      	movs	r3, #3
 8109a20:	6123      	str	r3, [r4, #16]
 8109a22:	9b05      	ldr	r3, [sp, #20]
 8109a24:	f023 0204 	bic.w	r2, r3, #4
 8109a28:	6022      	str	r2, [r4, #0]
 8109a2a:	f04f 0900 	mov.w	r9, #0
 8109a2e:	9700      	str	r7, [sp, #0]
 8109a30:	4633      	mov	r3, r6
 8109a32:	aa0b      	add	r2, sp, #44	; 0x2c
 8109a34:	4621      	mov	r1, r4
 8109a36:	4628      	mov	r0, r5
 8109a38:	f000 f9d8 	bl	8109dec <_printf_common>
 8109a3c:	3001      	adds	r0, #1
 8109a3e:	f040 8090 	bne.w	8109b62 <_printf_float+0x1e2>
 8109a42:	f04f 30ff 	mov.w	r0, #4294967295
 8109a46:	b00d      	add	sp, #52	; 0x34
 8109a48:	ecbd 8b02 	vpop	{d8}
 8109a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a50:	4642      	mov	r2, r8
 8109a52:	464b      	mov	r3, r9
 8109a54:	4640      	mov	r0, r8
 8109a56:	4649      	mov	r1, r9
 8109a58:	f7f7 f8f0 	bl	8100c3c <__aeabi_dcmpun>
 8109a5c:	b140      	cbz	r0, 8109a70 <_printf_float+0xf0>
 8109a5e:	464b      	mov	r3, r9
 8109a60:	2b00      	cmp	r3, #0
 8109a62:	bfbc      	itt	lt
 8109a64:	232d      	movlt	r3, #45	; 0x2d
 8109a66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8109a6a:	487f      	ldr	r0, [pc, #508]	; (8109c68 <_printf_float+0x2e8>)
 8109a6c:	4b7f      	ldr	r3, [pc, #508]	; (8109c6c <_printf_float+0x2ec>)
 8109a6e:	e7d1      	b.n	8109a14 <_printf_float+0x94>
 8109a70:	6863      	ldr	r3, [r4, #4]
 8109a72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8109a76:	9206      	str	r2, [sp, #24]
 8109a78:	1c5a      	adds	r2, r3, #1
 8109a7a:	d13f      	bne.n	8109afc <_printf_float+0x17c>
 8109a7c:	2306      	movs	r3, #6
 8109a7e:	6063      	str	r3, [r4, #4]
 8109a80:	9b05      	ldr	r3, [sp, #20]
 8109a82:	6861      	ldr	r1, [r4, #4]
 8109a84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109a88:	2300      	movs	r3, #0
 8109a8a:	9303      	str	r3, [sp, #12]
 8109a8c:	ab0a      	add	r3, sp, #40	; 0x28
 8109a8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109a92:	ab09      	add	r3, sp, #36	; 0x24
 8109a94:	ec49 8b10 	vmov	d0, r8, r9
 8109a98:	9300      	str	r3, [sp, #0]
 8109a9a:	6022      	str	r2, [r4, #0]
 8109a9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109aa0:	4628      	mov	r0, r5
 8109aa2:	f7ff fecd 	bl	8109840 <__cvt>
 8109aa6:	9b06      	ldr	r3, [sp, #24]
 8109aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109aaa:	2b47      	cmp	r3, #71	; 0x47
 8109aac:	4680      	mov	r8, r0
 8109aae:	d108      	bne.n	8109ac2 <_printf_float+0x142>
 8109ab0:	1cc8      	adds	r0, r1, #3
 8109ab2:	db02      	blt.n	8109aba <_printf_float+0x13a>
 8109ab4:	6863      	ldr	r3, [r4, #4]
 8109ab6:	4299      	cmp	r1, r3
 8109ab8:	dd41      	ble.n	8109b3e <_printf_float+0x1be>
 8109aba:	f1ab 0b02 	sub.w	fp, fp, #2
 8109abe:	fa5f fb8b 	uxtb.w	fp, fp
 8109ac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109ac6:	d820      	bhi.n	8109b0a <_printf_float+0x18a>
 8109ac8:	3901      	subs	r1, #1
 8109aca:	465a      	mov	r2, fp
 8109acc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8109ad2:	f7ff ff17 	bl	8109904 <__exponent>
 8109ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109ad8:	1813      	adds	r3, r2, r0
 8109ada:	2a01      	cmp	r2, #1
 8109adc:	4681      	mov	r9, r0
 8109ade:	6123      	str	r3, [r4, #16]
 8109ae0:	dc02      	bgt.n	8109ae8 <_printf_float+0x168>
 8109ae2:	6822      	ldr	r2, [r4, #0]
 8109ae4:	07d2      	lsls	r2, r2, #31
 8109ae6:	d501      	bpl.n	8109aec <_printf_float+0x16c>
 8109ae8:	3301      	adds	r3, #1
 8109aea:	6123      	str	r3, [r4, #16]
 8109aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109af0:	2b00      	cmp	r3, #0
 8109af2:	d09c      	beq.n	8109a2e <_printf_float+0xae>
 8109af4:	232d      	movs	r3, #45	; 0x2d
 8109af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109afa:	e798      	b.n	8109a2e <_printf_float+0xae>
 8109afc:	9a06      	ldr	r2, [sp, #24]
 8109afe:	2a47      	cmp	r2, #71	; 0x47
 8109b00:	d1be      	bne.n	8109a80 <_printf_float+0x100>
 8109b02:	2b00      	cmp	r3, #0
 8109b04:	d1bc      	bne.n	8109a80 <_printf_float+0x100>
 8109b06:	2301      	movs	r3, #1
 8109b08:	e7b9      	b.n	8109a7e <_printf_float+0xfe>
 8109b0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8109b0e:	d118      	bne.n	8109b42 <_printf_float+0x1c2>
 8109b10:	2900      	cmp	r1, #0
 8109b12:	6863      	ldr	r3, [r4, #4]
 8109b14:	dd0b      	ble.n	8109b2e <_printf_float+0x1ae>
 8109b16:	6121      	str	r1, [r4, #16]
 8109b18:	b913      	cbnz	r3, 8109b20 <_printf_float+0x1a0>
 8109b1a:	6822      	ldr	r2, [r4, #0]
 8109b1c:	07d0      	lsls	r0, r2, #31
 8109b1e:	d502      	bpl.n	8109b26 <_printf_float+0x1a6>
 8109b20:	3301      	adds	r3, #1
 8109b22:	440b      	add	r3, r1
 8109b24:	6123      	str	r3, [r4, #16]
 8109b26:	65a1      	str	r1, [r4, #88]	; 0x58
 8109b28:	f04f 0900 	mov.w	r9, #0
 8109b2c:	e7de      	b.n	8109aec <_printf_float+0x16c>
 8109b2e:	b913      	cbnz	r3, 8109b36 <_printf_float+0x1b6>
 8109b30:	6822      	ldr	r2, [r4, #0]
 8109b32:	07d2      	lsls	r2, r2, #31
 8109b34:	d501      	bpl.n	8109b3a <_printf_float+0x1ba>
 8109b36:	3302      	adds	r3, #2
 8109b38:	e7f4      	b.n	8109b24 <_printf_float+0x1a4>
 8109b3a:	2301      	movs	r3, #1
 8109b3c:	e7f2      	b.n	8109b24 <_printf_float+0x1a4>
 8109b3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8109b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109b44:	4299      	cmp	r1, r3
 8109b46:	db05      	blt.n	8109b54 <_printf_float+0x1d4>
 8109b48:	6823      	ldr	r3, [r4, #0]
 8109b4a:	6121      	str	r1, [r4, #16]
 8109b4c:	07d8      	lsls	r0, r3, #31
 8109b4e:	d5ea      	bpl.n	8109b26 <_printf_float+0x1a6>
 8109b50:	1c4b      	adds	r3, r1, #1
 8109b52:	e7e7      	b.n	8109b24 <_printf_float+0x1a4>
 8109b54:	2900      	cmp	r1, #0
 8109b56:	bfd4      	ite	le
 8109b58:	f1c1 0202 	rsble	r2, r1, #2
 8109b5c:	2201      	movgt	r2, #1
 8109b5e:	4413      	add	r3, r2
 8109b60:	e7e0      	b.n	8109b24 <_printf_float+0x1a4>
 8109b62:	6823      	ldr	r3, [r4, #0]
 8109b64:	055a      	lsls	r2, r3, #21
 8109b66:	d407      	bmi.n	8109b78 <_printf_float+0x1f8>
 8109b68:	6923      	ldr	r3, [r4, #16]
 8109b6a:	4642      	mov	r2, r8
 8109b6c:	4631      	mov	r1, r6
 8109b6e:	4628      	mov	r0, r5
 8109b70:	47b8      	blx	r7
 8109b72:	3001      	adds	r0, #1
 8109b74:	d12c      	bne.n	8109bd0 <_printf_float+0x250>
 8109b76:	e764      	b.n	8109a42 <_printf_float+0xc2>
 8109b78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109b7c:	f240 80e0 	bls.w	8109d40 <_printf_float+0x3c0>
 8109b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109b84:	2200      	movs	r2, #0
 8109b86:	2300      	movs	r3, #0
 8109b88:	f7f7 f826 	bl	8100bd8 <__aeabi_dcmpeq>
 8109b8c:	2800      	cmp	r0, #0
 8109b8e:	d034      	beq.n	8109bfa <_printf_float+0x27a>
 8109b90:	4a37      	ldr	r2, [pc, #220]	; (8109c70 <_printf_float+0x2f0>)
 8109b92:	2301      	movs	r3, #1
 8109b94:	4631      	mov	r1, r6
 8109b96:	4628      	mov	r0, r5
 8109b98:	47b8      	blx	r7
 8109b9a:	3001      	adds	r0, #1
 8109b9c:	f43f af51 	beq.w	8109a42 <_printf_float+0xc2>
 8109ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109ba4:	429a      	cmp	r2, r3
 8109ba6:	db02      	blt.n	8109bae <_printf_float+0x22e>
 8109ba8:	6823      	ldr	r3, [r4, #0]
 8109baa:	07d8      	lsls	r0, r3, #31
 8109bac:	d510      	bpl.n	8109bd0 <_printf_float+0x250>
 8109bae:	ee18 3a10 	vmov	r3, s16
 8109bb2:	4652      	mov	r2, sl
 8109bb4:	4631      	mov	r1, r6
 8109bb6:	4628      	mov	r0, r5
 8109bb8:	47b8      	blx	r7
 8109bba:	3001      	adds	r0, #1
 8109bbc:	f43f af41 	beq.w	8109a42 <_printf_float+0xc2>
 8109bc0:	f04f 0800 	mov.w	r8, #0
 8109bc4:	f104 091a 	add.w	r9, r4, #26
 8109bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109bca:	3b01      	subs	r3, #1
 8109bcc:	4543      	cmp	r3, r8
 8109bce:	dc09      	bgt.n	8109be4 <_printf_float+0x264>
 8109bd0:	6823      	ldr	r3, [r4, #0]
 8109bd2:	079b      	lsls	r3, r3, #30
 8109bd4:	f100 8105 	bmi.w	8109de2 <_printf_float+0x462>
 8109bd8:	68e0      	ldr	r0, [r4, #12]
 8109bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109bdc:	4298      	cmp	r0, r3
 8109bde:	bfb8      	it	lt
 8109be0:	4618      	movlt	r0, r3
 8109be2:	e730      	b.n	8109a46 <_printf_float+0xc6>
 8109be4:	2301      	movs	r3, #1
 8109be6:	464a      	mov	r2, r9
 8109be8:	4631      	mov	r1, r6
 8109bea:	4628      	mov	r0, r5
 8109bec:	47b8      	blx	r7
 8109bee:	3001      	adds	r0, #1
 8109bf0:	f43f af27 	beq.w	8109a42 <_printf_float+0xc2>
 8109bf4:	f108 0801 	add.w	r8, r8, #1
 8109bf8:	e7e6      	b.n	8109bc8 <_printf_float+0x248>
 8109bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109bfc:	2b00      	cmp	r3, #0
 8109bfe:	dc39      	bgt.n	8109c74 <_printf_float+0x2f4>
 8109c00:	4a1b      	ldr	r2, [pc, #108]	; (8109c70 <_printf_float+0x2f0>)
 8109c02:	2301      	movs	r3, #1
 8109c04:	4631      	mov	r1, r6
 8109c06:	4628      	mov	r0, r5
 8109c08:	47b8      	blx	r7
 8109c0a:	3001      	adds	r0, #1
 8109c0c:	f43f af19 	beq.w	8109a42 <_printf_float+0xc2>
 8109c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109c14:	4313      	orrs	r3, r2
 8109c16:	d102      	bne.n	8109c1e <_printf_float+0x29e>
 8109c18:	6823      	ldr	r3, [r4, #0]
 8109c1a:	07d9      	lsls	r1, r3, #31
 8109c1c:	d5d8      	bpl.n	8109bd0 <_printf_float+0x250>
 8109c1e:	ee18 3a10 	vmov	r3, s16
 8109c22:	4652      	mov	r2, sl
 8109c24:	4631      	mov	r1, r6
 8109c26:	4628      	mov	r0, r5
 8109c28:	47b8      	blx	r7
 8109c2a:	3001      	adds	r0, #1
 8109c2c:	f43f af09 	beq.w	8109a42 <_printf_float+0xc2>
 8109c30:	f04f 0900 	mov.w	r9, #0
 8109c34:	f104 0a1a 	add.w	sl, r4, #26
 8109c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109c3a:	425b      	negs	r3, r3
 8109c3c:	454b      	cmp	r3, r9
 8109c3e:	dc01      	bgt.n	8109c44 <_printf_float+0x2c4>
 8109c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109c42:	e792      	b.n	8109b6a <_printf_float+0x1ea>
 8109c44:	2301      	movs	r3, #1
 8109c46:	4652      	mov	r2, sl
 8109c48:	4631      	mov	r1, r6
 8109c4a:	4628      	mov	r0, r5
 8109c4c:	47b8      	blx	r7
 8109c4e:	3001      	adds	r0, #1
 8109c50:	f43f aef7 	beq.w	8109a42 <_printf_float+0xc2>
 8109c54:	f109 0901 	add.w	r9, r9, #1
 8109c58:	e7ee      	b.n	8109c38 <_printf_float+0x2b8>
 8109c5a:	bf00      	nop
 8109c5c:	7fefffff 	.word	0x7fefffff
 8109c60:	0810e2b0 	.word	0x0810e2b0
 8109c64:	0810e2b4 	.word	0x0810e2b4
 8109c68:	0810e2bc 	.word	0x0810e2bc
 8109c6c:	0810e2b8 	.word	0x0810e2b8
 8109c70:	0810e2c0 	.word	0x0810e2c0
 8109c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109c78:	429a      	cmp	r2, r3
 8109c7a:	bfa8      	it	ge
 8109c7c:	461a      	movge	r2, r3
 8109c7e:	2a00      	cmp	r2, #0
 8109c80:	4691      	mov	r9, r2
 8109c82:	dc37      	bgt.n	8109cf4 <_printf_float+0x374>
 8109c84:	f04f 0b00 	mov.w	fp, #0
 8109c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109c8c:	f104 021a 	add.w	r2, r4, #26
 8109c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109c92:	9305      	str	r3, [sp, #20]
 8109c94:	eba3 0309 	sub.w	r3, r3, r9
 8109c98:	455b      	cmp	r3, fp
 8109c9a:	dc33      	bgt.n	8109d04 <_printf_float+0x384>
 8109c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109ca0:	429a      	cmp	r2, r3
 8109ca2:	db3b      	blt.n	8109d1c <_printf_float+0x39c>
 8109ca4:	6823      	ldr	r3, [r4, #0]
 8109ca6:	07da      	lsls	r2, r3, #31
 8109ca8:	d438      	bmi.n	8109d1c <_printf_float+0x39c>
 8109caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109cac:	9a05      	ldr	r2, [sp, #20]
 8109cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109cb0:	1a9a      	subs	r2, r3, r2
 8109cb2:	eba3 0901 	sub.w	r9, r3, r1
 8109cb6:	4591      	cmp	r9, r2
 8109cb8:	bfa8      	it	ge
 8109cba:	4691      	movge	r9, r2
 8109cbc:	f1b9 0f00 	cmp.w	r9, #0
 8109cc0:	dc35      	bgt.n	8109d2e <_printf_float+0x3ae>
 8109cc2:	f04f 0800 	mov.w	r8, #0
 8109cc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109cca:	f104 0a1a 	add.w	sl, r4, #26
 8109cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109cd2:	1a9b      	subs	r3, r3, r2
 8109cd4:	eba3 0309 	sub.w	r3, r3, r9
 8109cd8:	4543      	cmp	r3, r8
 8109cda:	f77f af79 	ble.w	8109bd0 <_printf_float+0x250>
 8109cde:	2301      	movs	r3, #1
 8109ce0:	4652      	mov	r2, sl
 8109ce2:	4631      	mov	r1, r6
 8109ce4:	4628      	mov	r0, r5
 8109ce6:	47b8      	blx	r7
 8109ce8:	3001      	adds	r0, #1
 8109cea:	f43f aeaa 	beq.w	8109a42 <_printf_float+0xc2>
 8109cee:	f108 0801 	add.w	r8, r8, #1
 8109cf2:	e7ec      	b.n	8109cce <_printf_float+0x34e>
 8109cf4:	4613      	mov	r3, r2
 8109cf6:	4631      	mov	r1, r6
 8109cf8:	4642      	mov	r2, r8
 8109cfa:	4628      	mov	r0, r5
 8109cfc:	47b8      	blx	r7
 8109cfe:	3001      	adds	r0, #1
 8109d00:	d1c0      	bne.n	8109c84 <_printf_float+0x304>
 8109d02:	e69e      	b.n	8109a42 <_printf_float+0xc2>
 8109d04:	2301      	movs	r3, #1
 8109d06:	4631      	mov	r1, r6
 8109d08:	4628      	mov	r0, r5
 8109d0a:	9205      	str	r2, [sp, #20]
 8109d0c:	47b8      	blx	r7
 8109d0e:	3001      	adds	r0, #1
 8109d10:	f43f ae97 	beq.w	8109a42 <_printf_float+0xc2>
 8109d14:	9a05      	ldr	r2, [sp, #20]
 8109d16:	f10b 0b01 	add.w	fp, fp, #1
 8109d1a:	e7b9      	b.n	8109c90 <_printf_float+0x310>
 8109d1c:	ee18 3a10 	vmov	r3, s16
 8109d20:	4652      	mov	r2, sl
 8109d22:	4631      	mov	r1, r6
 8109d24:	4628      	mov	r0, r5
 8109d26:	47b8      	blx	r7
 8109d28:	3001      	adds	r0, #1
 8109d2a:	d1be      	bne.n	8109caa <_printf_float+0x32a>
 8109d2c:	e689      	b.n	8109a42 <_printf_float+0xc2>
 8109d2e:	9a05      	ldr	r2, [sp, #20]
 8109d30:	464b      	mov	r3, r9
 8109d32:	4442      	add	r2, r8
 8109d34:	4631      	mov	r1, r6
 8109d36:	4628      	mov	r0, r5
 8109d38:	47b8      	blx	r7
 8109d3a:	3001      	adds	r0, #1
 8109d3c:	d1c1      	bne.n	8109cc2 <_printf_float+0x342>
 8109d3e:	e680      	b.n	8109a42 <_printf_float+0xc2>
 8109d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109d42:	2a01      	cmp	r2, #1
 8109d44:	dc01      	bgt.n	8109d4a <_printf_float+0x3ca>
 8109d46:	07db      	lsls	r3, r3, #31
 8109d48:	d538      	bpl.n	8109dbc <_printf_float+0x43c>
 8109d4a:	2301      	movs	r3, #1
 8109d4c:	4642      	mov	r2, r8
 8109d4e:	4631      	mov	r1, r6
 8109d50:	4628      	mov	r0, r5
 8109d52:	47b8      	blx	r7
 8109d54:	3001      	adds	r0, #1
 8109d56:	f43f ae74 	beq.w	8109a42 <_printf_float+0xc2>
 8109d5a:	ee18 3a10 	vmov	r3, s16
 8109d5e:	4652      	mov	r2, sl
 8109d60:	4631      	mov	r1, r6
 8109d62:	4628      	mov	r0, r5
 8109d64:	47b8      	blx	r7
 8109d66:	3001      	adds	r0, #1
 8109d68:	f43f ae6b 	beq.w	8109a42 <_printf_float+0xc2>
 8109d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109d70:	2200      	movs	r2, #0
 8109d72:	2300      	movs	r3, #0
 8109d74:	f7f6 ff30 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d78:	b9d8      	cbnz	r0, 8109db2 <_printf_float+0x432>
 8109d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109d7c:	f108 0201 	add.w	r2, r8, #1
 8109d80:	3b01      	subs	r3, #1
 8109d82:	4631      	mov	r1, r6
 8109d84:	4628      	mov	r0, r5
 8109d86:	47b8      	blx	r7
 8109d88:	3001      	adds	r0, #1
 8109d8a:	d10e      	bne.n	8109daa <_printf_float+0x42a>
 8109d8c:	e659      	b.n	8109a42 <_printf_float+0xc2>
 8109d8e:	2301      	movs	r3, #1
 8109d90:	4652      	mov	r2, sl
 8109d92:	4631      	mov	r1, r6
 8109d94:	4628      	mov	r0, r5
 8109d96:	47b8      	blx	r7
 8109d98:	3001      	adds	r0, #1
 8109d9a:	f43f ae52 	beq.w	8109a42 <_printf_float+0xc2>
 8109d9e:	f108 0801 	add.w	r8, r8, #1
 8109da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109da4:	3b01      	subs	r3, #1
 8109da6:	4543      	cmp	r3, r8
 8109da8:	dcf1      	bgt.n	8109d8e <_printf_float+0x40e>
 8109daa:	464b      	mov	r3, r9
 8109dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109db0:	e6dc      	b.n	8109b6c <_printf_float+0x1ec>
 8109db2:	f04f 0800 	mov.w	r8, #0
 8109db6:	f104 0a1a 	add.w	sl, r4, #26
 8109dba:	e7f2      	b.n	8109da2 <_printf_float+0x422>
 8109dbc:	2301      	movs	r3, #1
 8109dbe:	4642      	mov	r2, r8
 8109dc0:	e7df      	b.n	8109d82 <_printf_float+0x402>
 8109dc2:	2301      	movs	r3, #1
 8109dc4:	464a      	mov	r2, r9
 8109dc6:	4631      	mov	r1, r6
 8109dc8:	4628      	mov	r0, r5
 8109dca:	47b8      	blx	r7
 8109dcc:	3001      	adds	r0, #1
 8109dce:	f43f ae38 	beq.w	8109a42 <_printf_float+0xc2>
 8109dd2:	f108 0801 	add.w	r8, r8, #1
 8109dd6:	68e3      	ldr	r3, [r4, #12]
 8109dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8109dda:	1a5b      	subs	r3, r3, r1
 8109ddc:	4543      	cmp	r3, r8
 8109dde:	dcf0      	bgt.n	8109dc2 <_printf_float+0x442>
 8109de0:	e6fa      	b.n	8109bd8 <_printf_float+0x258>
 8109de2:	f04f 0800 	mov.w	r8, #0
 8109de6:	f104 0919 	add.w	r9, r4, #25
 8109dea:	e7f4      	b.n	8109dd6 <_printf_float+0x456>

08109dec <_printf_common>:
 8109dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109df0:	4616      	mov	r6, r2
 8109df2:	4699      	mov	r9, r3
 8109df4:	688a      	ldr	r2, [r1, #8]
 8109df6:	690b      	ldr	r3, [r1, #16]
 8109df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109dfc:	4293      	cmp	r3, r2
 8109dfe:	bfb8      	it	lt
 8109e00:	4613      	movlt	r3, r2
 8109e02:	6033      	str	r3, [r6, #0]
 8109e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109e08:	4607      	mov	r7, r0
 8109e0a:	460c      	mov	r4, r1
 8109e0c:	b10a      	cbz	r2, 8109e12 <_printf_common+0x26>
 8109e0e:	3301      	adds	r3, #1
 8109e10:	6033      	str	r3, [r6, #0]
 8109e12:	6823      	ldr	r3, [r4, #0]
 8109e14:	0699      	lsls	r1, r3, #26
 8109e16:	bf42      	ittt	mi
 8109e18:	6833      	ldrmi	r3, [r6, #0]
 8109e1a:	3302      	addmi	r3, #2
 8109e1c:	6033      	strmi	r3, [r6, #0]
 8109e1e:	6825      	ldr	r5, [r4, #0]
 8109e20:	f015 0506 	ands.w	r5, r5, #6
 8109e24:	d106      	bne.n	8109e34 <_printf_common+0x48>
 8109e26:	f104 0a19 	add.w	sl, r4, #25
 8109e2a:	68e3      	ldr	r3, [r4, #12]
 8109e2c:	6832      	ldr	r2, [r6, #0]
 8109e2e:	1a9b      	subs	r3, r3, r2
 8109e30:	42ab      	cmp	r3, r5
 8109e32:	dc26      	bgt.n	8109e82 <_printf_common+0x96>
 8109e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109e38:	1e13      	subs	r3, r2, #0
 8109e3a:	6822      	ldr	r2, [r4, #0]
 8109e3c:	bf18      	it	ne
 8109e3e:	2301      	movne	r3, #1
 8109e40:	0692      	lsls	r2, r2, #26
 8109e42:	d42b      	bmi.n	8109e9c <_printf_common+0xb0>
 8109e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109e48:	4649      	mov	r1, r9
 8109e4a:	4638      	mov	r0, r7
 8109e4c:	47c0      	blx	r8
 8109e4e:	3001      	adds	r0, #1
 8109e50:	d01e      	beq.n	8109e90 <_printf_common+0xa4>
 8109e52:	6823      	ldr	r3, [r4, #0]
 8109e54:	68e5      	ldr	r5, [r4, #12]
 8109e56:	6832      	ldr	r2, [r6, #0]
 8109e58:	f003 0306 	and.w	r3, r3, #6
 8109e5c:	2b04      	cmp	r3, #4
 8109e5e:	bf08      	it	eq
 8109e60:	1aad      	subeq	r5, r5, r2
 8109e62:	68a3      	ldr	r3, [r4, #8]
 8109e64:	6922      	ldr	r2, [r4, #16]
 8109e66:	bf0c      	ite	eq
 8109e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109e6c:	2500      	movne	r5, #0
 8109e6e:	4293      	cmp	r3, r2
 8109e70:	bfc4      	itt	gt
 8109e72:	1a9b      	subgt	r3, r3, r2
 8109e74:	18ed      	addgt	r5, r5, r3
 8109e76:	2600      	movs	r6, #0
 8109e78:	341a      	adds	r4, #26
 8109e7a:	42b5      	cmp	r5, r6
 8109e7c:	d11a      	bne.n	8109eb4 <_printf_common+0xc8>
 8109e7e:	2000      	movs	r0, #0
 8109e80:	e008      	b.n	8109e94 <_printf_common+0xa8>
 8109e82:	2301      	movs	r3, #1
 8109e84:	4652      	mov	r2, sl
 8109e86:	4649      	mov	r1, r9
 8109e88:	4638      	mov	r0, r7
 8109e8a:	47c0      	blx	r8
 8109e8c:	3001      	adds	r0, #1
 8109e8e:	d103      	bne.n	8109e98 <_printf_common+0xac>
 8109e90:	f04f 30ff 	mov.w	r0, #4294967295
 8109e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109e98:	3501      	adds	r5, #1
 8109e9a:	e7c6      	b.n	8109e2a <_printf_common+0x3e>
 8109e9c:	18e1      	adds	r1, r4, r3
 8109e9e:	1c5a      	adds	r2, r3, #1
 8109ea0:	2030      	movs	r0, #48	; 0x30
 8109ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109ea6:	4422      	add	r2, r4
 8109ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109eb0:	3302      	adds	r3, #2
 8109eb2:	e7c7      	b.n	8109e44 <_printf_common+0x58>
 8109eb4:	2301      	movs	r3, #1
 8109eb6:	4622      	mov	r2, r4
 8109eb8:	4649      	mov	r1, r9
 8109eba:	4638      	mov	r0, r7
 8109ebc:	47c0      	blx	r8
 8109ebe:	3001      	adds	r0, #1
 8109ec0:	d0e6      	beq.n	8109e90 <_printf_common+0xa4>
 8109ec2:	3601      	adds	r6, #1
 8109ec4:	e7d9      	b.n	8109e7a <_printf_common+0x8e>
	...

08109ec8 <_printf_i>:
 8109ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109ecc:	7e0f      	ldrb	r7, [r1, #24]
 8109ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109ed0:	2f78      	cmp	r7, #120	; 0x78
 8109ed2:	4691      	mov	r9, r2
 8109ed4:	4680      	mov	r8, r0
 8109ed6:	460c      	mov	r4, r1
 8109ed8:	469a      	mov	sl, r3
 8109eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109ede:	d807      	bhi.n	8109ef0 <_printf_i+0x28>
 8109ee0:	2f62      	cmp	r7, #98	; 0x62
 8109ee2:	d80a      	bhi.n	8109efa <_printf_i+0x32>
 8109ee4:	2f00      	cmp	r7, #0
 8109ee6:	f000 80d8 	beq.w	810a09a <_printf_i+0x1d2>
 8109eea:	2f58      	cmp	r7, #88	; 0x58
 8109eec:	f000 80a3 	beq.w	810a036 <_printf_i+0x16e>
 8109ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109ef8:	e03a      	b.n	8109f70 <_printf_i+0xa8>
 8109efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109efe:	2b15      	cmp	r3, #21
 8109f00:	d8f6      	bhi.n	8109ef0 <_printf_i+0x28>
 8109f02:	a101      	add	r1, pc, #4	; (adr r1, 8109f08 <_printf_i+0x40>)
 8109f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109f08:	08109f61 	.word	0x08109f61
 8109f0c:	08109f75 	.word	0x08109f75
 8109f10:	08109ef1 	.word	0x08109ef1
 8109f14:	08109ef1 	.word	0x08109ef1
 8109f18:	08109ef1 	.word	0x08109ef1
 8109f1c:	08109ef1 	.word	0x08109ef1
 8109f20:	08109f75 	.word	0x08109f75
 8109f24:	08109ef1 	.word	0x08109ef1
 8109f28:	08109ef1 	.word	0x08109ef1
 8109f2c:	08109ef1 	.word	0x08109ef1
 8109f30:	08109ef1 	.word	0x08109ef1
 8109f34:	0810a081 	.word	0x0810a081
 8109f38:	08109fa5 	.word	0x08109fa5
 8109f3c:	0810a063 	.word	0x0810a063
 8109f40:	08109ef1 	.word	0x08109ef1
 8109f44:	08109ef1 	.word	0x08109ef1
 8109f48:	0810a0a3 	.word	0x0810a0a3
 8109f4c:	08109ef1 	.word	0x08109ef1
 8109f50:	08109fa5 	.word	0x08109fa5
 8109f54:	08109ef1 	.word	0x08109ef1
 8109f58:	08109ef1 	.word	0x08109ef1
 8109f5c:	0810a06b 	.word	0x0810a06b
 8109f60:	682b      	ldr	r3, [r5, #0]
 8109f62:	1d1a      	adds	r2, r3, #4
 8109f64:	681b      	ldr	r3, [r3, #0]
 8109f66:	602a      	str	r2, [r5, #0]
 8109f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109f70:	2301      	movs	r3, #1
 8109f72:	e0a3      	b.n	810a0bc <_printf_i+0x1f4>
 8109f74:	6820      	ldr	r0, [r4, #0]
 8109f76:	6829      	ldr	r1, [r5, #0]
 8109f78:	0606      	lsls	r6, r0, #24
 8109f7a:	f101 0304 	add.w	r3, r1, #4
 8109f7e:	d50a      	bpl.n	8109f96 <_printf_i+0xce>
 8109f80:	680e      	ldr	r6, [r1, #0]
 8109f82:	602b      	str	r3, [r5, #0]
 8109f84:	2e00      	cmp	r6, #0
 8109f86:	da03      	bge.n	8109f90 <_printf_i+0xc8>
 8109f88:	232d      	movs	r3, #45	; 0x2d
 8109f8a:	4276      	negs	r6, r6
 8109f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109f90:	485e      	ldr	r0, [pc, #376]	; (810a10c <_printf_i+0x244>)
 8109f92:	230a      	movs	r3, #10
 8109f94:	e019      	b.n	8109fca <_printf_i+0x102>
 8109f96:	680e      	ldr	r6, [r1, #0]
 8109f98:	602b      	str	r3, [r5, #0]
 8109f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8109f9e:	bf18      	it	ne
 8109fa0:	b236      	sxthne	r6, r6
 8109fa2:	e7ef      	b.n	8109f84 <_printf_i+0xbc>
 8109fa4:	682b      	ldr	r3, [r5, #0]
 8109fa6:	6820      	ldr	r0, [r4, #0]
 8109fa8:	1d19      	adds	r1, r3, #4
 8109faa:	6029      	str	r1, [r5, #0]
 8109fac:	0601      	lsls	r1, r0, #24
 8109fae:	d501      	bpl.n	8109fb4 <_printf_i+0xec>
 8109fb0:	681e      	ldr	r6, [r3, #0]
 8109fb2:	e002      	b.n	8109fba <_printf_i+0xf2>
 8109fb4:	0646      	lsls	r6, r0, #25
 8109fb6:	d5fb      	bpl.n	8109fb0 <_printf_i+0xe8>
 8109fb8:	881e      	ldrh	r6, [r3, #0]
 8109fba:	4854      	ldr	r0, [pc, #336]	; (810a10c <_printf_i+0x244>)
 8109fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8109fbe:	bf0c      	ite	eq
 8109fc0:	2308      	moveq	r3, #8
 8109fc2:	230a      	movne	r3, #10
 8109fc4:	2100      	movs	r1, #0
 8109fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109fca:	6865      	ldr	r5, [r4, #4]
 8109fcc:	60a5      	str	r5, [r4, #8]
 8109fce:	2d00      	cmp	r5, #0
 8109fd0:	bfa2      	ittt	ge
 8109fd2:	6821      	ldrge	r1, [r4, #0]
 8109fd4:	f021 0104 	bicge.w	r1, r1, #4
 8109fd8:	6021      	strge	r1, [r4, #0]
 8109fda:	b90e      	cbnz	r6, 8109fe0 <_printf_i+0x118>
 8109fdc:	2d00      	cmp	r5, #0
 8109fde:	d04d      	beq.n	810a07c <_printf_i+0x1b4>
 8109fe0:	4615      	mov	r5, r2
 8109fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8109fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8109fea:	5dc7      	ldrb	r7, [r0, r7]
 8109fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109ff0:	4637      	mov	r7, r6
 8109ff2:	42bb      	cmp	r3, r7
 8109ff4:	460e      	mov	r6, r1
 8109ff6:	d9f4      	bls.n	8109fe2 <_printf_i+0x11a>
 8109ff8:	2b08      	cmp	r3, #8
 8109ffa:	d10b      	bne.n	810a014 <_printf_i+0x14c>
 8109ffc:	6823      	ldr	r3, [r4, #0]
 8109ffe:	07de      	lsls	r6, r3, #31
 810a000:	d508      	bpl.n	810a014 <_printf_i+0x14c>
 810a002:	6923      	ldr	r3, [r4, #16]
 810a004:	6861      	ldr	r1, [r4, #4]
 810a006:	4299      	cmp	r1, r3
 810a008:	bfde      	ittt	le
 810a00a:	2330      	movle	r3, #48	; 0x30
 810a00c:	f805 3c01 	strble.w	r3, [r5, #-1]
 810a010:	f105 35ff 	addle.w	r5, r5, #4294967295
 810a014:	1b52      	subs	r2, r2, r5
 810a016:	6122      	str	r2, [r4, #16]
 810a018:	f8cd a000 	str.w	sl, [sp]
 810a01c:	464b      	mov	r3, r9
 810a01e:	aa03      	add	r2, sp, #12
 810a020:	4621      	mov	r1, r4
 810a022:	4640      	mov	r0, r8
 810a024:	f7ff fee2 	bl	8109dec <_printf_common>
 810a028:	3001      	adds	r0, #1
 810a02a:	d14c      	bne.n	810a0c6 <_printf_i+0x1fe>
 810a02c:	f04f 30ff 	mov.w	r0, #4294967295
 810a030:	b004      	add	sp, #16
 810a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a036:	4835      	ldr	r0, [pc, #212]	; (810a10c <_printf_i+0x244>)
 810a038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810a03c:	6829      	ldr	r1, [r5, #0]
 810a03e:	6823      	ldr	r3, [r4, #0]
 810a040:	f851 6b04 	ldr.w	r6, [r1], #4
 810a044:	6029      	str	r1, [r5, #0]
 810a046:	061d      	lsls	r5, r3, #24
 810a048:	d514      	bpl.n	810a074 <_printf_i+0x1ac>
 810a04a:	07df      	lsls	r7, r3, #31
 810a04c:	bf44      	itt	mi
 810a04e:	f043 0320 	orrmi.w	r3, r3, #32
 810a052:	6023      	strmi	r3, [r4, #0]
 810a054:	b91e      	cbnz	r6, 810a05e <_printf_i+0x196>
 810a056:	6823      	ldr	r3, [r4, #0]
 810a058:	f023 0320 	bic.w	r3, r3, #32
 810a05c:	6023      	str	r3, [r4, #0]
 810a05e:	2310      	movs	r3, #16
 810a060:	e7b0      	b.n	8109fc4 <_printf_i+0xfc>
 810a062:	6823      	ldr	r3, [r4, #0]
 810a064:	f043 0320 	orr.w	r3, r3, #32
 810a068:	6023      	str	r3, [r4, #0]
 810a06a:	2378      	movs	r3, #120	; 0x78
 810a06c:	4828      	ldr	r0, [pc, #160]	; (810a110 <_printf_i+0x248>)
 810a06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810a072:	e7e3      	b.n	810a03c <_printf_i+0x174>
 810a074:	0659      	lsls	r1, r3, #25
 810a076:	bf48      	it	mi
 810a078:	b2b6      	uxthmi	r6, r6
 810a07a:	e7e6      	b.n	810a04a <_printf_i+0x182>
 810a07c:	4615      	mov	r5, r2
 810a07e:	e7bb      	b.n	8109ff8 <_printf_i+0x130>
 810a080:	682b      	ldr	r3, [r5, #0]
 810a082:	6826      	ldr	r6, [r4, #0]
 810a084:	6961      	ldr	r1, [r4, #20]
 810a086:	1d18      	adds	r0, r3, #4
 810a088:	6028      	str	r0, [r5, #0]
 810a08a:	0635      	lsls	r5, r6, #24
 810a08c:	681b      	ldr	r3, [r3, #0]
 810a08e:	d501      	bpl.n	810a094 <_printf_i+0x1cc>
 810a090:	6019      	str	r1, [r3, #0]
 810a092:	e002      	b.n	810a09a <_printf_i+0x1d2>
 810a094:	0670      	lsls	r0, r6, #25
 810a096:	d5fb      	bpl.n	810a090 <_printf_i+0x1c8>
 810a098:	8019      	strh	r1, [r3, #0]
 810a09a:	2300      	movs	r3, #0
 810a09c:	6123      	str	r3, [r4, #16]
 810a09e:	4615      	mov	r5, r2
 810a0a0:	e7ba      	b.n	810a018 <_printf_i+0x150>
 810a0a2:	682b      	ldr	r3, [r5, #0]
 810a0a4:	1d1a      	adds	r2, r3, #4
 810a0a6:	602a      	str	r2, [r5, #0]
 810a0a8:	681d      	ldr	r5, [r3, #0]
 810a0aa:	6862      	ldr	r2, [r4, #4]
 810a0ac:	2100      	movs	r1, #0
 810a0ae:	4628      	mov	r0, r5
 810a0b0:	f7f6 f91e 	bl	81002f0 <memchr>
 810a0b4:	b108      	cbz	r0, 810a0ba <_printf_i+0x1f2>
 810a0b6:	1b40      	subs	r0, r0, r5
 810a0b8:	6060      	str	r0, [r4, #4]
 810a0ba:	6863      	ldr	r3, [r4, #4]
 810a0bc:	6123      	str	r3, [r4, #16]
 810a0be:	2300      	movs	r3, #0
 810a0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a0c4:	e7a8      	b.n	810a018 <_printf_i+0x150>
 810a0c6:	6923      	ldr	r3, [r4, #16]
 810a0c8:	462a      	mov	r2, r5
 810a0ca:	4649      	mov	r1, r9
 810a0cc:	4640      	mov	r0, r8
 810a0ce:	47d0      	blx	sl
 810a0d0:	3001      	adds	r0, #1
 810a0d2:	d0ab      	beq.n	810a02c <_printf_i+0x164>
 810a0d4:	6823      	ldr	r3, [r4, #0]
 810a0d6:	079b      	lsls	r3, r3, #30
 810a0d8:	d413      	bmi.n	810a102 <_printf_i+0x23a>
 810a0da:	68e0      	ldr	r0, [r4, #12]
 810a0dc:	9b03      	ldr	r3, [sp, #12]
 810a0de:	4298      	cmp	r0, r3
 810a0e0:	bfb8      	it	lt
 810a0e2:	4618      	movlt	r0, r3
 810a0e4:	e7a4      	b.n	810a030 <_printf_i+0x168>
 810a0e6:	2301      	movs	r3, #1
 810a0e8:	4632      	mov	r2, r6
 810a0ea:	4649      	mov	r1, r9
 810a0ec:	4640      	mov	r0, r8
 810a0ee:	47d0      	blx	sl
 810a0f0:	3001      	adds	r0, #1
 810a0f2:	d09b      	beq.n	810a02c <_printf_i+0x164>
 810a0f4:	3501      	adds	r5, #1
 810a0f6:	68e3      	ldr	r3, [r4, #12]
 810a0f8:	9903      	ldr	r1, [sp, #12]
 810a0fa:	1a5b      	subs	r3, r3, r1
 810a0fc:	42ab      	cmp	r3, r5
 810a0fe:	dcf2      	bgt.n	810a0e6 <_printf_i+0x21e>
 810a100:	e7eb      	b.n	810a0da <_printf_i+0x212>
 810a102:	2500      	movs	r5, #0
 810a104:	f104 0619 	add.w	r6, r4, #25
 810a108:	e7f5      	b.n	810a0f6 <_printf_i+0x22e>
 810a10a:	bf00      	nop
 810a10c:	0810e2c2 	.word	0x0810e2c2
 810a110:	0810e2d3 	.word	0x0810e2d3

0810a114 <_scanf_float>:
 810a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a118:	b087      	sub	sp, #28
 810a11a:	4617      	mov	r7, r2
 810a11c:	9303      	str	r3, [sp, #12]
 810a11e:	688b      	ldr	r3, [r1, #8]
 810a120:	1e5a      	subs	r2, r3, #1
 810a122:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810a126:	bf83      	ittte	hi
 810a128:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810a12c:	195b      	addhi	r3, r3, r5
 810a12e:	9302      	strhi	r3, [sp, #8]
 810a130:	2300      	movls	r3, #0
 810a132:	bf86      	itte	hi
 810a134:	f240 135d 	movwhi	r3, #349	; 0x15d
 810a138:	608b      	strhi	r3, [r1, #8]
 810a13a:	9302      	strls	r3, [sp, #8]
 810a13c:	680b      	ldr	r3, [r1, #0]
 810a13e:	468b      	mov	fp, r1
 810a140:	2500      	movs	r5, #0
 810a142:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810a146:	f84b 3b1c 	str.w	r3, [fp], #28
 810a14a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810a14e:	4680      	mov	r8, r0
 810a150:	460c      	mov	r4, r1
 810a152:	465e      	mov	r6, fp
 810a154:	46aa      	mov	sl, r5
 810a156:	46a9      	mov	r9, r5
 810a158:	9501      	str	r5, [sp, #4]
 810a15a:	68a2      	ldr	r2, [r4, #8]
 810a15c:	b152      	cbz	r2, 810a174 <_scanf_float+0x60>
 810a15e:	683b      	ldr	r3, [r7, #0]
 810a160:	781b      	ldrb	r3, [r3, #0]
 810a162:	2b4e      	cmp	r3, #78	; 0x4e
 810a164:	d864      	bhi.n	810a230 <_scanf_float+0x11c>
 810a166:	2b40      	cmp	r3, #64	; 0x40
 810a168:	d83c      	bhi.n	810a1e4 <_scanf_float+0xd0>
 810a16a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810a16e:	b2c8      	uxtb	r0, r1
 810a170:	280e      	cmp	r0, #14
 810a172:	d93a      	bls.n	810a1ea <_scanf_float+0xd6>
 810a174:	f1b9 0f00 	cmp.w	r9, #0
 810a178:	d003      	beq.n	810a182 <_scanf_float+0x6e>
 810a17a:	6823      	ldr	r3, [r4, #0]
 810a17c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a180:	6023      	str	r3, [r4, #0]
 810a182:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a186:	f1ba 0f01 	cmp.w	sl, #1
 810a18a:	f200 8113 	bhi.w	810a3b4 <_scanf_float+0x2a0>
 810a18e:	455e      	cmp	r6, fp
 810a190:	f200 8105 	bhi.w	810a39e <_scanf_float+0x28a>
 810a194:	2501      	movs	r5, #1
 810a196:	4628      	mov	r0, r5
 810a198:	b007      	add	sp, #28
 810a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a19e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810a1a2:	2a0d      	cmp	r2, #13
 810a1a4:	d8e6      	bhi.n	810a174 <_scanf_float+0x60>
 810a1a6:	a101      	add	r1, pc, #4	; (adr r1, 810a1ac <_scanf_float+0x98>)
 810a1a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a1ac:	0810a2eb 	.word	0x0810a2eb
 810a1b0:	0810a175 	.word	0x0810a175
 810a1b4:	0810a175 	.word	0x0810a175
 810a1b8:	0810a175 	.word	0x0810a175
 810a1bc:	0810a34b 	.word	0x0810a34b
 810a1c0:	0810a323 	.word	0x0810a323
 810a1c4:	0810a175 	.word	0x0810a175
 810a1c8:	0810a175 	.word	0x0810a175
 810a1cc:	0810a2f9 	.word	0x0810a2f9
 810a1d0:	0810a175 	.word	0x0810a175
 810a1d4:	0810a175 	.word	0x0810a175
 810a1d8:	0810a175 	.word	0x0810a175
 810a1dc:	0810a175 	.word	0x0810a175
 810a1e0:	0810a2b1 	.word	0x0810a2b1
 810a1e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810a1e8:	e7db      	b.n	810a1a2 <_scanf_float+0x8e>
 810a1ea:	290e      	cmp	r1, #14
 810a1ec:	d8c2      	bhi.n	810a174 <_scanf_float+0x60>
 810a1ee:	a001      	add	r0, pc, #4	; (adr r0, 810a1f4 <_scanf_float+0xe0>)
 810a1f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a1f4:	0810a2a3 	.word	0x0810a2a3
 810a1f8:	0810a175 	.word	0x0810a175
 810a1fc:	0810a2a3 	.word	0x0810a2a3
 810a200:	0810a337 	.word	0x0810a337
 810a204:	0810a175 	.word	0x0810a175
 810a208:	0810a251 	.word	0x0810a251
 810a20c:	0810a28d 	.word	0x0810a28d
 810a210:	0810a28d 	.word	0x0810a28d
 810a214:	0810a28d 	.word	0x0810a28d
 810a218:	0810a28d 	.word	0x0810a28d
 810a21c:	0810a28d 	.word	0x0810a28d
 810a220:	0810a28d 	.word	0x0810a28d
 810a224:	0810a28d 	.word	0x0810a28d
 810a228:	0810a28d 	.word	0x0810a28d
 810a22c:	0810a28d 	.word	0x0810a28d
 810a230:	2b6e      	cmp	r3, #110	; 0x6e
 810a232:	d809      	bhi.n	810a248 <_scanf_float+0x134>
 810a234:	2b60      	cmp	r3, #96	; 0x60
 810a236:	d8b2      	bhi.n	810a19e <_scanf_float+0x8a>
 810a238:	2b54      	cmp	r3, #84	; 0x54
 810a23a:	d077      	beq.n	810a32c <_scanf_float+0x218>
 810a23c:	2b59      	cmp	r3, #89	; 0x59
 810a23e:	d199      	bne.n	810a174 <_scanf_float+0x60>
 810a240:	2d07      	cmp	r5, #7
 810a242:	d197      	bne.n	810a174 <_scanf_float+0x60>
 810a244:	2508      	movs	r5, #8
 810a246:	e029      	b.n	810a29c <_scanf_float+0x188>
 810a248:	2b74      	cmp	r3, #116	; 0x74
 810a24a:	d06f      	beq.n	810a32c <_scanf_float+0x218>
 810a24c:	2b79      	cmp	r3, #121	; 0x79
 810a24e:	e7f6      	b.n	810a23e <_scanf_float+0x12a>
 810a250:	6821      	ldr	r1, [r4, #0]
 810a252:	05c8      	lsls	r0, r1, #23
 810a254:	d51a      	bpl.n	810a28c <_scanf_float+0x178>
 810a256:	9b02      	ldr	r3, [sp, #8]
 810a258:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810a25c:	6021      	str	r1, [r4, #0]
 810a25e:	f109 0901 	add.w	r9, r9, #1
 810a262:	b11b      	cbz	r3, 810a26c <_scanf_float+0x158>
 810a264:	3b01      	subs	r3, #1
 810a266:	3201      	adds	r2, #1
 810a268:	9302      	str	r3, [sp, #8]
 810a26a:	60a2      	str	r2, [r4, #8]
 810a26c:	68a3      	ldr	r3, [r4, #8]
 810a26e:	3b01      	subs	r3, #1
 810a270:	60a3      	str	r3, [r4, #8]
 810a272:	6923      	ldr	r3, [r4, #16]
 810a274:	3301      	adds	r3, #1
 810a276:	6123      	str	r3, [r4, #16]
 810a278:	687b      	ldr	r3, [r7, #4]
 810a27a:	3b01      	subs	r3, #1
 810a27c:	2b00      	cmp	r3, #0
 810a27e:	607b      	str	r3, [r7, #4]
 810a280:	f340 8084 	ble.w	810a38c <_scanf_float+0x278>
 810a284:	683b      	ldr	r3, [r7, #0]
 810a286:	3301      	adds	r3, #1
 810a288:	603b      	str	r3, [r7, #0]
 810a28a:	e766      	b.n	810a15a <_scanf_float+0x46>
 810a28c:	eb1a 0f05 	cmn.w	sl, r5
 810a290:	f47f af70 	bne.w	810a174 <_scanf_float+0x60>
 810a294:	6822      	ldr	r2, [r4, #0]
 810a296:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810a29a:	6022      	str	r2, [r4, #0]
 810a29c:	f806 3b01 	strb.w	r3, [r6], #1
 810a2a0:	e7e4      	b.n	810a26c <_scanf_float+0x158>
 810a2a2:	6822      	ldr	r2, [r4, #0]
 810a2a4:	0610      	lsls	r0, r2, #24
 810a2a6:	f57f af65 	bpl.w	810a174 <_scanf_float+0x60>
 810a2aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810a2ae:	e7f4      	b.n	810a29a <_scanf_float+0x186>
 810a2b0:	f1ba 0f00 	cmp.w	sl, #0
 810a2b4:	d10e      	bne.n	810a2d4 <_scanf_float+0x1c0>
 810a2b6:	f1b9 0f00 	cmp.w	r9, #0
 810a2ba:	d10e      	bne.n	810a2da <_scanf_float+0x1c6>
 810a2bc:	6822      	ldr	r2, [r4, #0]
 810a2be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a2c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a2c6:	d108      	bne.n	810a2da <_scanf_float+0x1c6>
 810a2c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a2cc:	6022      	str	r2, [r4, #0]
 810a2ce:	f04f 0a01 	mov.w	sl, #1
 810a2d2:	e7e3      	b.n	810a29c <_scanf_float+0x188>
 810a2d4:	f1ba 0f02 	cmp.w	sl, #2
 810a2d8:	d055      	beq.n	810a386 <_scanf_float+0x272>
 810a2da:	2d01      	cmp	r5, #1
 810a2dc:	d002      	beq.n	810a2e4 <_scanf_float+0x1d0>
 810a2de:	2d04      	cmp	r5, #4
 810a2e0:	f47f af48 	bne.w	810a174 <_scanf_float+0x60>
 810a2e4:	3501      	adds	r5, #1
 810a2e6:	b2ed      	uxtb	r5, r5
 810a2e8:	e7d8      	b.n	810a29c <_scanf_float+0x188>
 810a2ea:	f1ba 0f01 	cmp.w	sl, #1
 810a2ee:	f47f af41 	bne.w	810a174 <_scanf_float+0x60>
 810a2f2:	f04f 0a02 	mov.w	sl, #2
 810a2f6:	e7d1      	b.n	810a29c <_scanf_float+0x188>
 810a2f8:	b97d      	cbnz	r5, 810a31a <_scanf_float+0x206>
 810a2fa:	f1b9 0f00 	cmp.w	r9, #0
 810a2fe:	f47f af3c 	bne.w	810a17a <_scanf_float+0x66>
 810a302:	6822      	ldr	r2, [r4, #0]
 810a304:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a308:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a30c:	f47f af39 	bne.w	810a182 <_scanf_float+0x6e>
 810a310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a314:	6022      	str	r2, [r4, #0]
 810a316:	2501      	movs	r5, #1
 810a318:	e7c0      	b.n	810a29c <_scanf_float+0x188>
 810a31a:	2d03      	cmp	r5, #3
 810a31c:	d0e2      	beq.n	810a2e4 <_scanf_float+0x1d0>
 810a31e:	2d05      	cmp	r5, #5
 810a320:	e7de      	b.n	810a2e0 <_scanf_float+0x1cc>
 810a322:	2d02      	cmp	r5, #2
 810a324:	f47f af26 	bne.w	810a174 <_scanf_float+0x60>
 810a328:	2503      	movs	r5, #3
 810a32a:	e7b7      	b.n	810a29c <_scanf_float+0x188>
 810a32c:	2d06      	cmp	r5, #6
 810a32e:	f47f af21 	bne.w	810a174 <_scanf_float+0x60>
 810a332:	2507      	movs	r5, #7
 810a334:	e7b2      	b.n	810a29c <_scanf_float+0x188>
 810a336:	6822      	ldr	r2, [r4, #0]
 810a338:	0591      	lsls	r1, r2, #22
 810a33a:	f57f af1b 	bpl.w	810a174 <_scanf_float+0x60>
 810a33e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810a342:	6022      	str	r2, [r4, #0]
 810a344:	f8cd 9004 	str.w	r9, [sp, #4]
 810a348:	e7a8      	b.n	810a29c <_scanf_float+0x188>
 810a34a:	6822      	ldr	r2, [r4, #0]
 810a34c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810a350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810a354:	d006      	beq.n	810a364 <_scanf_float+0x250>
 810a356:	0550      	lsls	r0, r2, #21
 810a358:	f57f af0c 	bpl.w	810a174 <_scanf_float+0x60>
 810a35c:	f1b9 0f00 	cmp.w	r9, #0
 810a360:	f43f af0f 	beq.w	810a182 <_scanf_float+0x6e>
 810a364:	0591      	lsls	r1, r2, #22
 810a366:	bf58      	it	pl
 810a368:	9901      	ldrpl	r1, [sp, #4]
 810a36a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a36e:	bf58      	it	pl
 810a370:	eba9 0101 	subpl.w	r1, r9, r1
 810a374:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810a378:	bf58      	it	pl
 810a37a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a37e:	6022      	str	r2, [r4, #0]
 810a380:	f04f 0900 	mov.w	r9, #0
 810a384:	e78a      	b.n	810a29c <_scanf_float+0x188>
 810a386:	f04f 0a03 	mov.w	sl, #3
 810a38a:	e787      	b.n	810a29c <_scanf_float+0x188>
 810a38c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810a390:	4639      	mov	r1, r7
 810a392:	4640      	mov	r0, r8
 810a394:	4798      	blx	r3
 810a396:	2800      	cmp	r0, #0
 810a398:	f43f aedf 	beq.w	810a15a <_scanf_float+0x46>
 810a39c:	e6ea      	b.n	810a174 <_scanf_float+0x60>
 810a39e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a3a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a3a6:	463a      	mov	r2, r7
 810a3a8:	4640      	mov	r0, r8
 810a3aa:	4798      	blx	r3
 810a3ac:	6923      	ldr	r3, [r4, #16]
 810a3ae:	3b01      	subs	r3, #1
 810a3b0:	6123      	str	r3, [r4, #16]
 810a3b2:	e6ec      	b.n	810a18e <_scanf_float+0x7a>
 810a3b4:	1e6b      	subs	r3, r5, #1
 810a3b6:	2b06      	cmp	r3, #6
 810a3b8:	d825      	bhi.n	810a406 <_scanf_float+0x2f2>
 810a3ba:	2d02      	cmp	r5, #2
 810a3bc:	d836      	bhi.n	810a42c <_scanf_float+0x318>
 810a3be:	455e      	cmp	r6, fp
 810a3c0:	f67f aee8 	bls.w	810a194 <_scanf_float+0x80>
 810a3c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a3c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a3cc:	463a      	mov	r2, r7
 810a3ce:	4640      	mov	r0, r8
 810a3d0:	4798      	blx	r3
 810a3d2:	6923      	ldr	r3, [r4, #16]
 810a3d4:	3b01      	subs	r3, #1
 810a3d6:	6123      	str	r3, [r4, #16]
 810a3d8:	e7f1      	b.n	810a3be <_scanf_float+0x2aa>
 810a3da:	9802      	ldr	r0, [sp, #8]
 810a3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a3e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810a3e4:	9002      	str	r0, [sp, #8]
 810a3e6:	463a      	mov	r2, r7
 810a3e8:	4640      	mov	r0, r8
 810a3ea:	4798      	blx	r3
 810a3ec:	6923      	ldr	r3, [r4, #16]
 810a3ee:	3b01      	subs	r3, #1
 810a3f0:	6123      	str	r3, [r4, #16]
 810a3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a3f6:	fa5f fa8a 	uxtb.w	sl, sl
 810a3fa:	f1ba 0f02 	cmp.w	sl, #2
 810a3fe:	d1ec      	bne.n	810a3da <_scanf_float+0x2c6>
 810a400:	3d03      	subs	r5, #3
 810a402:	b2ed      	uxtb	r5, r5
 810a404:	1b76      	subs	r6, r6, r5
 810a406:	6823      	ldr	r3, [r4, #0]
 810a408:	05da      	lsls	r2, r3, #23
 810a40a:	d52f      	bpl.n	810a46c <_scanf_float+0x358>
 810a40c:	055b      	lsls	r3, r3, #21
 810a40e:	d510      	bpl.n	810a432 <_scanf_float+0x31e>
 810a410:	455e      	cmp	r6, fp
 810a412:	f67f aebf 	bls.w	810a194 <_scanf_float+0x80>
 810a416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a41a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a41e:	463a      	mov	r2, r7
 810a420:	4640      	mov	r0, r8
 810a422:	4798      	blx	r3
 810a424:	6923      	ldr	r3, [r4, #16]
 810a426:	3b01      	subs	r3, #1
 810a428:	6123      	str	r3, [r4, #16]
 810a42a:	e7f1      	b.n	810a410 <_scanf_float+0x2fc>
 810a42c:	46aa      	mov	sl, r5
 810a42e:	9602      	str	r6, [sp, #8]
 810a430:	e7df      	b.n	810a3f2 <_scanf_float+0x2de>
 810a432:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a436:	6923      	ldr	r3, [r4, #16]
 810a438:	2965      	cmp	r1, #101	; 0x65
 810a43a:	f103 33ff 	add.w	r3, r3, #4294967295
 810a43e:	f106 35ff 	add.w	r5, r6, #4294967295
 810a442:	6123      	str	r3, [r4, #16]
 810a444:	d00c      	beq.n	810a460 <_scanf_float+0x34c>
 810a446:	2945      	cmp	r1, #69	; 0x45
 810a448:	d00a      	beq.n	810a460 <_scanf_float+0x34c>
 810a44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a44e:	463a      	mov	r2, r7
 810a450:	4640      	mov	r0, r8
 810a452:	4798      	blx	r3
 810a454:	6923      	ldr	r3, [r4, #16]
 810a456:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a45a:	3b01      	subs	r3, #1
 810a45c:	1eb5      	subs	r5, r6, #2
 810a45e:	6123      	str	r3, [r4, #16]
 810a460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a464:	463a      	mov	r2, r7
 810a466:	4640      	mov	r0, r8
 810a468:	4798      	blx	r3
 810a46a:	462e      	mov	r6, r5
 810a46c:	6825      	ldr	r5, [r4, #0]
 810a46e:	f015 0510 	ands.w	r5, r5, #16
 810a472:	d159      	bne.n	810a528 <_scanf_float+0x414>
 810a474:	7035      	strb	r5, [r6, #0]
 810a476:	6823      	ldr	r3, [r4, #0]
 810a478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810a47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a480:	d11b      	bne.n	810a4ba <_scanf_float+0x3a6>
 810a482:	9b01      	ldr	r3, [sp, #4]
 810a484:	454b      	cmp	r3, r9
 810a486:	eba3 0209 	sub.w	r2, r3, r9
 810a48a:	d123      	bne.n	810a4d4 <_scanf_float+0x3c0>
 810a48c:	2200      	movs	r2, #0
 810a48e:	4659      	mov	r1, fp
 810a490:	4640      	mov	r0, r8
 810a492:	f000 ff5b 	bl	810b34c <_strtod_r>
 810a496:	6822      	ldr	r2, [r4, #0]
 810a498:	9b03      	ldr	r3, [sp, #12]
 810a49a:	f012 0f02 	tst.w	r2, #2
 810a49e:	ec57 6b10 	vmov	r6, r7, d0
 810a4a2:	681b      	ldr	r3, [r3, #0]
 810a4a4:	d021      	beq.n	810a4ea <_scanf_float+0x3d6>
 810a4a6:	9903      	ldr	r1, [sp, #12]
 810a4a8:	1d1a      	adds	r2, r3, #4
 810a4aa:	600a      	str	r2, [r1, #0]
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	e9c3 6700 	strd	r6, r7, [r3]
 810a4b2:	68e3      	ldr	r3, [r4, #12]
 810a4b4:	3301      	adds	r3, #1
 810a4b6:	60e3      	str	r3, [r4, #12]
 810a4b8:	e66d      	b.n	810a196 <_scanf_float+0x82>
 810a4ba:	9b04      	ldr	r3, [sp, #16]
 810a4bc:	2b00      	cmp	r3, #0
 810a4be:	d0e5      	beq.n	810a48c <_scanf_float+0x378>
 810a4c0:	9905      	ldr	r1, [sp, #20]
 810a4c2:	230a      	movs	r3, #10
 810a4c4:	462a      	mov	r2, r5
 810a4c6:	3101      	adds	r1, #1
 810a4c8:	4640      	mov	r0, r8
 810a4ca:	f000 ffc7 	bl	810b45c <_strtol_r>
 810a4ce:	9b04      	ldr	r3, [sp, #16]
 810a4d0:	9e05      	ldr	r6, [sp, #20]
 810a4d2:	1ac2      	subs	r2, r0, r3
 810a4d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810a4d8:	429e      	cmp	r6, r3
 810a4da:	bf28      	it	cs
 810a4dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810a4e0:	4912      	ldr	r1, [pc, #72]	; (810a52c <_scanf_float+0x418>)
 810a4e2:	4630      	mov	r0, r6
 810a4e4:	f000 f8e0 	bl	810a6a8 <siprintf>
 810a4e8:	e7d0      	b.n	810a48c <_scanf_float+0x378>
 810a4ea:	9903      	ldr	r1, [sp, #12]
 810a4ec:	f012 0f04 	tst.w	r2, #4
 810a4f0:	f103 0204 	add.w	r2, r3, #4
 810a4f4:	600a      	str	r2, [r1, #0]
 810a4f6:	d1d9      	bne.n	810a4ac <_scanf_float+0x398>
 810a4f8:	f8d3 8000 	ldr.w	r8, [r3]
 810a4fc:	ee10 2a10 	vmov	r2, s0
 810a500:	ee10 0a10 	vmov	r0, s0
 810a504:	463b      	mov	r3, r7
 810a506:	4639      	mov	r1, r7
 810a508:	f7f6 fb98 	bl	8100c3c <__aeabi_dcmpun>
 810a50c:	b128      	cbz	r0, 810a51a <_scanf_float+0x406>
 810a50e:	4808      	ldr	r0, [pc, #32]	; (810a530 <_scanf_float+0x41c>)
 810a510:	f000 f8c4 	bl	810a69c <nanf>
 810a514:	ed88 0a00 	vstr	s0, [r8]
 810a518:	e7cb      	b.n	810a4b2 <_scanf_float+0x39e>
 810a51a:	4630      	mov	r0, r6
 810a51c:	4639      	mov	r1, r7
 810a51e:	f7f6 fbeb 	bl	8100cf8 <__aeabi_d2f>
 810a522:	f8c8 0000 	str.w	r0, [r8]
 810a526:	e7c4      	b.n	810a4b2 <_scanf_float+0x39e>
 810a528:	2500      	movs	r5, #0
 810a52a:	e634      	b.n	810a196 <_scanf_float+0x82>
 810a52c:	0810e2e4 	.word	0x0810e2e4
 810a530:	0810e758 	.word	0x0810e758

0810a534 <iprintf>:
 810a534:	b40f      	push	{r0, r1, r2, r3}
 810a536:	4b0a      	ldr	r3, [pc, #40]	; (810a560 <iprintf+0x2c>)
 810a538:	b513      	push	{r0, r1, r4, lr}
 810a53a:	681c      	ldr	r4, [r3, #0]
 810a53c:	b124      	cbz	r4, 810a548 <iprintf+0x14>
 810a53e:	69a3      	ldr	r3, [r4, #24]
 810a540:	b913      	cbnz	r3, 810a548 <iprintf+0x14>
 810a542:	4620      	mov	r0, r4
 810a544:	f001 ffe0 	bl	810c508 <__sinit>
 810a548:	ab05      	add	r3, sp, #20
 810a54a:	9a04      	ldr	r2, [sp, #16]
 810a54c:	68a1      	ldr	r1, [r4, #8]
 810a54e:	9301      	str	r3, [sp, #4]
 810a550:	4620      	mov	r0, r4
 810a552:	f003 fb47 	bl	810dbe4 <_vfiprintf_r>
 810a556:	b002      	add	sp, #8
 810a558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a55c:	b004      	add	sp, #16
 810a55e:	4770      	bx	lr
 810a560:	10000020 	.word	0x10000020

0810a564 <putchar>:
 810a564:	4b09      	ldr	r3, [pc, #36]	; (810a58c <putchar+0x28>)
 810a566:	b513      	push	{r0, r1, r4, lr}
 810a568:	681c      	ldr	r4, [r3, #0]
 810a56a:	4601      	mov	r1, r0
 810a56c:	b134      	cbz	r4, 810a57c <putchar+0x18>
 810a56e:	69a3      	ldr	r3, [r4, #24]
 810a570:	b923      	cbnz	r3, 810a57c <putchar+0x18>
 810a572:	9001      	str	r0, [sp, #4]
 810a574:	4620      	mov	r0, r4
 810a576:	f001 ffc7 	bl	810c508 <__sinit>
 810a57a:	9901      	ldr	r1, [sp, #4]
 810a57c:	68a2      	ldr	r2, [r4, #8]
 810a57e:	4620      	mov	r0, r4
 810a580:	b002      	add	sp, #8
 810a582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a586:	f003 bc5d 	b.w	810de44 <_putc_r>
 810a58a:	bf00      	nop
 810a58c:	10000020 	.word	0x10000020

0810a590 <_puts_r>:
 810a590:	b570      	push	{r4, r5, r6, lr}
 810a592:	460e      	mov	r6, r1
 810a594:	4605      	mov	r5, r0
 810a596:	b118      	cbz	r0, 810a5a0 <_puts_r+0x10>
 810a598:	6983      	ldr	r3, [r0, #24]
 810a59a:	b90b      	cbnz	r3, 810a5a0 <_puts_r+0x10>
 810a59c:	f001 ffb4 	bl	810c508 <__sinit>
 810a5a0:	69ab      	ldr	r3, [r5, #24]
 810a5a2:	68ac      	ldr	r4, [r5, #8]
 810a5a4:	b913      	cbnz	r3, 810a5ac <_puts_r+0x1c>
 810a5a6:	4628      	mov	r0, r5
 810a5a8:	f001 ffae 	bl	810c508 <__sinit>
 810a5ac:	4b2c      	ldr	r3, [pc, #176]	; (810a660 <_puts_r+0xd0>)
 810a5ae:	429c      	cmp	r4, r3
 810a5b0:	d120      	bne.n	810a5f4 <_puts_r+0x64>
 810a5b2:	686c      	ldr	r4, [r5, #4]
 810a5b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a5b6:	07db      	lsls	r3, r3, #31
 810a5b8:	d405      	bmi.n	810a5c6 <_puts_r+0x36>
 810a5ba:	89a3      	ldrh	r3, [r4, #12]
 810a5bc:	0598      	lsls	r0, r3, #22
 810a5be:	d402      	bmi.n	810a5c6 <_puts_r+0x36>
 810a5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a5c2:	f002 fbb2 	bl	810cd2a <__retarget_lock_acquire_recursive>
 810a5c6:	89a3      	ldrh	r3, [r4, #12]
 810a5c8:	0719      	lsls	r1, r3, #28
 810a5ca:	d51d      	bpl.n	810a608 <_puts_r+0x78>
 810a5cc:	6923      	ldr	r3, [r4, #16]
 810a5ce:	b1db      	cbz	r3, 810a608 <_puts_r+0x78>
 810a5d0:	3e01      	subs	r6, #1
 810a5d2:	68a3      	ldr	r3, [r4, #8]
 810a5d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a5d8:	3b01      	subs	r3, #1
 810a5da:	60a3      	str	r3, [r4, #8]
 810a5dc:	bb39      	cbnz	r1, 810a62e <_puts_r+0x9e>
 810a5de:	2b00      	cmp	r3, #0
 810a5e0:	da38      	bge.n	810a654 <_puts_r+0xc4>
 810a5e2:	4622      	mov	r2, r4
 810a5e4:	210a      	movs	r1, #10
 810a5e6:	4628      	mov	r0, r5
 810a5e8:	f000 ff3a 	bl	810b460 <__swbuf_r>
 810a5ec:	3001      	adds	r0, #1
 810a5ee:	d011      	beq.n	810a614 <_puts_r+0x84>
 810a5f0:	250a      	movs	r5, #10
 810a5f2:	e011      	b.n	810a618 <_puts_r+0x88>
 810a5f4:	4b1b      	ldr	r3, [pc, #108]	; (810a664 <_puts_r+0xd4>)
 810a5f6:	429c      	cmp	r4, r3
 810a5f8:	d101      	bne.n	810a5fe <_puts_r+0x6e>
 810a5fa:	68ac      	ldr	r4, [r5, #8]
 810a5fc:	e7da      	b.n	810a5b4 <_puts_r+0x24>
 810a5fe:	4b1a      	ldr	r3, [pc, #104]	; (810a668 <_puts_r+0xd8>)
 810a600:	429c      	cmp	r4, r3
 810a602:	bf08      	it	eq
 810a604:	68ec      	ldreq	r4, [r5, #12]
 810a606:	e7d5      	b.n	810a5b4 <_puts_r+0x24>
 810a608:	4621      	mov	r1, r4
 810a60a:	4628      	mov	r0, r5
 810a60c:	f000 ff7a 	bl	810b504 <__swsetup_r>
 810a610:	2800      	cmp	r0, #0
 810a612:	d0dd      	beq.n	810a5d0 <_puts_r+0x40>
 810a614:	f04f 35ff 	mov.w	r5, #4294967295
 810a618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a61a:	07da      	lsls	r2, r3, #31
 810a61c:	d405      	bmi.n	810a62a <_puts_r+0x9a>
 810a61e:	89a3      	ldrh	r3, [r4, #12]
 810a620:	059b      	lsls	r3, r3, #22
 810a622:	d402      	bmi.n	810a62a <_puts_r+0x9a>
 810a624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a626:	f002 fb81 	bl	810cd2c <__retarget_lock_release_recursive>
 810a62a:	4628      	mov	r0, r5
 810a62c:	bd70      	pop	{r4, r5, r6, pc}
 810a62e:	2b00      	cmp	r3, #0
 810a630:	da04      	bge.n	810a63c <_puts_r+0xac>
 810a632:	69a2      	ldr	r2, [r4, #24]
 810a634:	429a      	cmp	r2, r3
 810a636:	dc06      	bgt.n	810a646 <_puts_r+0xb6>
 810a638:	290a      	cmp	r1, #10
 810a63a:	d004      	beq.n	810a646 <_puts_r+0xb6>
 810a63c:	6823      	ldr	r3, [r4, #0]
 810a63e:	1c5a      	adds	r2, r3, #1
 810a640:	6022      	str	r2, [r4, #0]
 810a642:	7019      	strb	r1, [r3, #0]
 810a644:	e7c5      	b.n	810a5d2 <_puts_r+0x42>
 810a646:	4622      	mov	r2, r4
 810a648:	4628      	mov	r0, r5
 810a64a:	f000 ff09 	bl	810b460 <__swbuf_r>
 810a64e:	3001      	adds	r0, #1
 810a650:	d1bf      	bne.n	810a5d2 <_puts_r+0x42>
 810a652:	e7df      	b.n	810a614 <_puts_r+0x84>
 810a654:	6823      	ldr	r3, [r4, #0]
 810a656:	250a      	movs	r5, #10
 810a658:	1c5a      	adds	r2, r3, #1
 810a65a:	6022      	str	r2, [r4, #0]
 810a65c:	701d      	strb	r5, [r3, #0]
 810a65e:	e7db      	b.n	810a618 <_puts_r+0x88>
 810a660:	0810e4f4 	.word	0x0810e4f4
 810a664:	0810e514 	.word	0x0810e514
 810a668:	0810e4d4 	.word	0x0810e4d4

0810a66c <puts>:
 810a66c:	4b02      	ldr	r3, [pc, #8]	; (810a678 <puts+0xc>)
 810a66e:	4601      	mov	r1, r0
 810a670:	6818      	ldr	r0, [r3, #0]
 810a672:	f7ff bf8d 	b.w	810a590 <_puts_r>
 810a676:	bf00      	nop
 810a678:	10000020 	.word	0x10000020

0810a67c <_sbrk_r>:
 810a67c:	b538      	push	{r3, r4, r5, lr}
 810a67e:	4d06      	ldr	r5, [pc, #24]	; (810a698 <_sbrk_r+0x1c>)
 810a680:	2300      	movs	r3, #0
 810a682:	4604      	mov	r4, r0
 810a684:	4608      	mov	r0, r1
 810a686:	602b      	str	r3, [r5, #0]
 810a688:	f7f7 ff62 	bl	8102550 <_sbrk>
 810a68c:	1c43      	adds	r3, r0, #1
 810a68e:	d102      	bne.n	810a696 <_sbrk_r+0x1a>
 810a690:	682b      	ldr	r3, [r5, #0]
 810a692:	b103      	cbz	r3, 810a696 <_sbrk_r+0x1a>
 810a694:	6023      	str	r3, [r4, #0]
 810a696:	bd38      	pop	{r3, r4, r5, pc}
 810a698:	1000055c 	.word	0x1000055c

0810a69c <nanf>:
 810a69c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810a6a4 <nanf+0x8>
 810a6a0:	4770      	bx	lr
 810a6a2:	bf00      	nop
 810a6a4:	7fc00000 	.word	0x7fc00000

0810a6a8 <siprintf>:
 810a6a8:	b40e      	push	{r1, r2, r3}
 810a6aa:	b500      	push	{lr}
 810a6ac:	b09c      	sub	sp, #112	; 0x70
 810a6ae:	ab1d      	add	r3, sp, #116	; 0x74
 810a6b0:	9002      	str	r0, [sp, #8]
 810a6b2:	9006      	str	r0, [sp, #24]
 810a6b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810a6b8:	4809      	ldr	r0, [pc, #36]	; (810a6e0 <siprintf+0x38>)
 810a6ba:	9107      	str	r1, [sp, #28]
 810a6bc:	9104      	str	r1, [sp, #16]
 810a6be:	4909      	ldr	r1, [pc, #36]	; (810a6e4 <siprintf+0x3c>)
 810a6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 810a6c4:	9105      	str	r1, [sp, #20]
 810a6c6:	6800      	ldr	r0, [r0, #0]
 810a6c8:	9301      	str	r3, [sp, #4]
 810a6ca:	a902      	add	r1, sp, #8
 810a6cc:	f003 f960 	bl	810d990 <_svfiprintf_r>
 810a6d0:	9b02      	ldr	r3, [sp, #8]
 810a6d2:	2200      	movs	r2, #0
 810a6d4:	701a      	strb	r2, [r3, #0]
 810a6d6:	b01c      	add	sp, #112	; 0x70
 810a6d8:	f85d eb04 	ldr.w	lr, [sp], #4
 810a6dc:	b003      	add	sp, #12
 810a6de:	4770      	bx	lr
 810a6e0:	10000020 	.word	0x10000020
 810a6e4:	ffff0208 	.word	0xffff0208

0810a6e8 <strcat>:
 810a6e8:	b510      	push	{r4, lr}
 810a6ea:	4602      	mov	r2, r0
 810a6ec:	7814      	ldrb	r4, [r2, #0]
 810a6ee:	4613      	mov	r3, r2
 810a6f0:	3201      	adds	r2, #1
 810a6f2:	2c00      	cmp	r4, #0
 810a6f4:	d1fa      	bne.n	810a6ec <strcat+0x4>
 810a6f6:	3b01      	subs	r3, #1
 810a6f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a6fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 810a700:	2a00      	cmp	r2, #0
 810a702:	d1f9      	bne.n	810a6f8 <strcat+0x10>
 810a704:	bd10      	pop	{r4, pc}

0810a706 <sulp>:
 810a706:	b570      	push	{r4, r5, r6, lr}
 810a708:	4604      	mov	r4, r0
 810a70a:	460d      	mov	r5, r1
 810a70c:	ec45 4b10 	vmov	d0, r4, r5
 810a710:	4616      	mov	r6, r2
 810a712:	f002 ff17 	bl	810d544 <__ulp>
 810a716:	ec51 0b10 	vmov	r0, r1, d0
 810a71a:	b17e      	cbz	r6, 810a73c <sulp+0x36>
 810a71c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810a720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a724:	2b00      	cmp	r3, #0
 810a726:	dd09      	ble.n	810a73c <sulp+0x36>
 810a728:	051b      	lsls	r3, r3, #20
 810a72a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810a72e:	2400      	movs	r4, #0
 810a730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810a734:	4622      	mov	r2, r4
 810a736:	462b      	mov	r3, r5
 810a738:	f7f5 ffe6 	bl	8100708 <__aeabi_dmul>
 810a73c:	bd70      	pop	{r4, r5, r6, pc}
	...

0810a740 <_strtod_l>:
 810a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a744:	ed2d 8b02 	vpush	{d8}
 810a748:	b09d      	sub	sp, #116	; 0x74
 810a74a:	461f      	mov	r7, r3
 810a74c:	2300      	movs	r3, #0
 810a74e:	9318      	str	r3, [sp, #96]	; 0x60
 810a750:	4ba2      	ldr	r3, [pc, #648]	; (810a9dc <_strtod_l+0x29c>)
 810a752:	9213      	str	r2, [sp, #76]	; 0x4c
 810a754:	681b      	ldr	r3, [r3, #0]
 810a756:	9305      	str	r3, [sp, #20]
 810a758:	4604      	mov	r4, r0
 810a75a:	4618      	mov	r0, r3
 810a75c:	4688      	mov	r8, r1
 810a75e:	f7f5 fdbf 	bl	81002e0 <strlen>
 810a762:	f04f 0a00 	mov.w	sl, #0
 810a766:	4605      	mov	r5, r0
 810a768:	f04f 0b00 	mov.w	fp, #0
 810a76c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a772:	781a      	ldrb	r2, [r3, #0]
 810a774:	2a2b      	cmp	r2, #43	; 0x2b
 810a776:	d04e      	beq.n	810a816 <_strtod_l+0xd6>
 810a778:	d83b      	bhi.n	810a7f2 <_strtod_l+0xb2>
 810a77a:	2a0d      	cmp	r2, #13
 810a77c:	d834      	bhi.n	810a7e8 <_strtod_l+0xa8>
 810a77e:	2a08      	cmp	r2, #8
 810a780:	d834      	bhi.n	810a7ec <_strtod_l+0xac>
 810a782:	2a00      	cmp	r2, #0
 810a784:	d03e      	beq.n	810a804 <_strtod_l+0xc4>
 810a786:	2300      	movs	r3, #0
 810a788:	930a      	str	r3, [sp, #40]	; 0x28
 810a78a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a78c:	7833      	ldrb	r3, [r6, #0]
 810a78e:	2b30      	cmp	r3, #48	; 0x30
 810a790:	f040 80b0 	bne.w	810a8f4 <_strtod_l+0x1b4>
 810a794:	7873      	ldrb	r3, [r6, #1]
 810a796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a79a:	2b58      	cmp	r3, #88	; 0x58
 810a79c:	d168      	bne.n	810a870 <_strtod_l+0x130>
 810a79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a7a0:	9301      	str	r3, [sp, #4]
 810a7a2:	ab18      	add	r3, sp, #96	; 0x60
 810a7a4:	9702      	str	r7, [sp, #8]
 810a7a6:	9300      	str	r3, [sp, #0]
 810a7a8:	4a8d      	ldr	r2, [pc, #564]	; (810a9e0 <_strtod_l+0x2a0>)
 810a7aa:	ab19      	add	r3, sp, #100	; 0x64
 810a7ac:	a917      	add	r1, sp, #92	; 0x5c
 810a7ae:	4620      	mov	r0, r4
 810a7b0:	f001 ffae 	bl	810c710 <__gethex>
 810a7b4:	f010 0707 	ands.w	r7, r0, #7
 810a7b8:	4605      	mov	r5, r0
 810a7ba:	d005      	beq.n	810a7c8 <_strtod_l+0x88>
 810a7bc:	2f06      	cmp	r7, #6
 810a7be:	d12c      	bne.n	810a81a <_strtod_l+0xda>
 810a7c0:	3601      	adds	r6, #1
 810a7c2:	2300      	movs	r3, #0
 810a7c4:	9617      	str	r6, [sp, #92]	; 0x5c
 810a7c6:	930a      	str	r3, [sp, #40]	; 0x28
 810a7c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a7ca:	2b00      	cmp	r3, #0
 810a7cc:	f040 8590 	bne.w	810b2f0 <_strtod_l+0xbb0>
 810a7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a7d2:	b1eb      	cbz	r3, 810a810 <_strtod_l+0xd0>
 810a7d4:	4652      	mov	r2, sl
 810a7d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a7da:	ec43 2b10 	vmov	d0, r2, r3
 810a7de:	b01d      	add	sp, #116	; 0x74
 810a7e0:	ecbd 8b02 	vpop	{d8}
 810a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a7e8:	2a20      	cmp	r2, #32
 810a7ea:	d1cc      	bne.n	810a786 <_strtod_l+0x46>
 810a7ec:	3301      	adds	r3, #1
 810a7ee:	9317      	str	r3, [sp, #92]	; 0x5c
 810a7f0:	e7be      	b.n	810a770 <_strtod_l+0x30>
 810a7f2:	2a2d      	cmp	r2, #45	; 0x2d
 810a7f4:	d1c7      	bne.n	810a786 <_strtod_l+0x46>
 810a7f6:	2201      	movs	r2, #1
 810a7f8:	920a      	str	r2, [sp, #40]	; 0x28
 810a7fa:	1c5a      	adds	r2, r3, #1
 810a7fc:	9217      	str	r2, [sp, #92]	; 0x5c
 810a7fe:	785b      	ldrb	r3, [r3, #1]
 810a800:	2b00      	cmp	r3, #0
 810a802:	d1c2      	bne.n	810a78a <_strtod_l+0x4a>
 810a804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a806:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a80a:	2b00      	cmp	r3, #0
 810a80c:	f040 856e 	bne.w	810b2ec <_strtod_l+0xbac>
 810a810:	4652      	mov	r2, sl
 810a812:	465b      	mov	r3, fp
 810a814:	e7e1      	b.n	810a7da <_strtod_l+0x9a>
 810a816:	2200      	movs	r2, #0
 810a818:	e7ee      	b.n	810a7f8 <_strtod_l+0xb8>
 810a81a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a81c:	b13a      	cbz	r2, 810a82e <_strtod_l+0xee>
 810a81e:	2135      	movs	r1, #53	; 0x35
 810a820:	a81a      	add	r0, sp, #104	; 0x68
 810a822:	f002 ff9a 	bl	810d75a <__copybits>
 810a826:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a828:	4620      	mov	r0, r4
 810a82a:	f002 fb59 	bl	810cee0 <_Bfree>
 810a82e:	3f01      	subs	r7, #1
 810a830:	2f04      	cmp	r7, #4
 810a832:	d806      	bhi.n	810a842 <_strtod_l+0x102>
 810a834:	e8df f007 	tbb	[pc, r7]
 810a838:	1714030a 	.word	0x1714030a
 810a83c:	0a          	.byte	0x0a
 810a83d:	00          	.byte	0x00
 810a83e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810a842:	0728      	lsls	r0, r5, #28
 810a844:	d5c0      	bpl.n	810a7c8 <_strtod_l+0x88>
 810a846:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810a84a:	e7bd      	b.n	810a7c8 <_strtod_l+0x88>
 810a84c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810a850:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810a852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a856:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a85a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810a85e:	e7f0      	b.n	810a842 <_strtod_l+0x102>
 810a860:	f8df b180 	ldr.w	fp, [pc, #384]	; 810a9e4 <_strtod_l+0x2a4>
 810a864:	e7ed      	b.n	810a842 <_strtod_l+0x102>
 810a866:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810a86a:	f04f 3aff 	mov.w	sl, #4294967295
 810a86e:	e7e8      	b.n	810a842 <_strtod_l+0x102>
 810a870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a872:	1c5a      	adds	r2, r3, #1
 810a874:	9217      	str	r2, [sp, #92]	; 0x5c
 810a876:	785b      	ldrb	r3, [r3, #1]
 810a878:	2b30      	cmp	r3, #48	; 0x30
 810a87a:	d0f9      	beq.n	810a870 <_strtod_l+0x130>
 810a87c:	2b00      	cmp	r3, #0
 810a87e:	d0a3      	beq.n	810a7c8 <_strtod_l+0x88>
 810a880:	2301      	movs	r3, #1
 810a882:	f04f 0900 	mov.w	r9, #0
 810a886:	9304      	str	r3, [sp, #16]
 810a888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a88a:	9308      	str	r3, [sp, #32]
 810a88c:	f8cd 901c 	str.w	r9, [sp, #28]
 810a890:	464f      	mov	r7, r9
 810a892:	220a      	movs	r2, #10
 810a894:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810a896:	7806      	ldrb	r6, [r0, #0]
 810a898:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a89c:	b2d9      	uxtb	r1, r3
 810a89e:	2909      	cmp	r1, #9
 810a8a0:	d92a      	bls.n	810a8f8 <_strtod_l+0x1b8>
 810a8a2:	9905      	ldr	r1, [sp, #20]
 810a8a4:	462a      	mov	r2, r5
 810a8a6:	f003 fb62 	bl	810df6e <strncmp>
 810a8aa:	b398      	cbz	r0, 810a914 <_strtod_l+0x1d4>
 810a8ac:	2000      	movs	r0, #0
 810a8ae:	4632      	mov	r2, r6
 810a8b0:	463d      	mov	r5, r7
 810a8b2:	9005      	str	r0, [sp, #20]
 810a8b4:	4603      	mov	r3, r0
 810a8b6:	2a65      	cmp	r2, #101	; 0x65
 810a8b8:	d001      	beq.n	810a8be <_strtod_l+0x17e>
 810a8ba:	2a45      	cmp	r2, #69	; 0x45
 810a8bc:	d118      	bne.n	810a8f0 <_strtod_l+0x1b0>
 810a8be:	b91d      	cbnz	r5, 810a8c8 <_strtod_l+0x188>
 810a8c0:	9a04      	ldr	r2, [sp, #16]
 810a8c2:	4302      	orrs	r2, r0
 810a8c4:	d09e      	beq.n	810a804 <_strtod_l+0xc4>
 810a8c6:	2500      	movs	r5, #0
 810a8c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810a8cc:	f108 0201 	add.w	r2, r8, #1
 810a8d0:	9217      	str	r2, [sp, #92]	; 0x5c
 810a8d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 810a8d6:	2a2b      	cmp	r2, #43	; 0x2b
 810a8d8:	d075      	beq.n	810a9c6 <_strtod_l+0x286>
 810a8da:	2a2d      	cmp	r2, #45	; 0x2d
 810a8dc:	d07b      	beq.n	810a9d6 <_strtod_l+0x296>
 810a8de:	f04f 0c00 	mov.w	ip, #0
 810a8e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a8e6:	2909      	cmp	r1, #9
 810a8e8:	f240 8082 	bls.w	810a9f0 <_strtod_l+0x2b0>
 810a8ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a8f0:	2600      	movs	r6, #0
 810a8f2:	e09d      	b.n	810aa30 <_strtod_l+0x2f0>
 810a8f4:	2300      	movs	r3, #0
 810a8f6:	e7c4      	b.n	810a882 <_strtod_l+0x142>
 810a8f8:	2f08      	cmp	r7, #8
 810a8fa:	bfd8      	it	le
 810a8fc:	9907      	ldrle	r1, [sp, #28]
 810a8fe:	f100 0001 	add.w	r0, r0, #1
 810a902:	bfda      	itte	le
 810a904:	fb02 3301 	mlale	r3, r2, r1, r3
 810a908:	9307      	strle	r3, [sp, #28]
 810a90a:	fb02 3909 	mlagt	r9, r2, r9, r3
 810a90e:	3701      	adds	r7, #1
 810a910:	9017      	str	r0, [sp, #92]	; 0x5c
 810a912:	e7bf      	b.n	810a894 <_strtod_l+0x154>
 810a914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a916:	195a      	adds	r2, r3, r5
 810a918:	9217      	str	r2, [sp, #92]	; 0x5c
 810a91a:	5d5a      	ldrb	r2, [r3, r5]
 810a91c:	2f00      	cmp	r7, #0
 810a91e:	d037      	beq.n	810a990 <_strtod_l+0x250>
 810a920:	9005      	str	r0, [sp, #20]
 810a922:	463d      	mov	r5, r7
 810a924:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a928:	2b09      	cmp	r3, #9
 810a92a:	d912      	bls.n	810a952 <_strtod_l+0x212>
 810a92c:	2301      	movs	r3, #1
 810a92e:	e7c2      	b.n	810a8b6 <_strtod_l+0x176>
 810a930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a932:	1c5a      	adds	r2, r3, #1
 810a934:	9217      	str	r2, [sp, #92]	; 0x5c
 810a936:	785a      	ldrb	r2, [r3, #1]
 810a938:	3001      	adds	r0, #1
 810a93a:	2a30      	cmp	r2, #48	; 0x30
 810a93c:	d0f8      	beq.n	810a930 <_strtod_l+0x1f0>
 810a93e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a942:	2b08      	cmp	r3, #8
 810a944:	f200 84d9 	bhi.w	810b2fa <_strtod_l+0xbba>
 810a948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a94a:	9005      	str	r0, [sp, #20]
 810a94c:	2000      	movs	r0, #0
 810a94e:	9308      	str	r3, [sp, #32]
 810a950:	4605      	mov	r5, r0
 810a952:	3a30      	subs	r2, #48	; 0x30
 810a954:	f100 0301 	add.w	r3, r0, #1
 810a958:	d014      	beq.n	810a984 <_strtod_l+0x244>
 810a95a:	9905      	ldr	r1, [sp, #20]
 810a95c:	4419      	add	r1, r3
 810a95e:	9105      	str	r1, [sp, #20]
 810a960:	462b      	mov	r3, r5
 810a962:	eb00 0e05 	add.w	lr, r0, r5
 810a966:	210a      	movs	r1, #10
 810a968:	4573      	cmp	r3, lr
 810a96a:	d113      	bne.n	810a994 <_strtod_l+0x254>
 810a96c:	182b      	adds	r3, r5, r0
 810a96e:	2b08      	cmp	r3, #8
 810a970:	f105 0501 	add.w	r5, r5, #1
 810a974:	4405      	add	r5, r0
 810a976:	dc1c      	bgt.n	810a9b2 <_strtod_l+0x272>
 810a978:	9907      	ldr	r1, [sp, #28]
 810a97a:	230a      	movs	r3, #10
 810a97c:	fb03 2301 	mla	r3, r3, r1, r2
 810a980:	9307      	str	r3, [sp, #28]
 810a982:	2300      	movs	r3, #0
 810a984:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a986:	1c51      	adds	r1, r2, #1
 810a988:	9117      	str	r1, [sp, #92]	; 0x5c
 810a98a:	7852      	ldrb	r2, [r2, #1]
 810a98c:	4618      	mov	r0, r3
 810a98e:	e7c9      	b.n	810a924 <_strtod_l+0x1e4>
 810a990:	4638      	mov	r0, r7
 810a992:	e7d2      	b.n	810a93a <_strtod_l+0x1fa>
 810a994:	2b08      	cmp	r3, #8
 810a996:	dc04      	bgt.n	810a9a2 <_strtod_l+0x262>
 810a998:	9e07      	ldr	r6, [sp, #28]
 810a99a:	434e      	muls	r6, r1
 810a99c:	9607      	str	r6, [sp, #28]
 810a99e:	3301      	adds	r3, #1
 810a9a0:	e7e2      	b.n	810a968 <_strtod_l+0x228>
 810a9a2:	f103 0c01 	add.w	ip, r3, #1
 810a9a6:	f1bc 0f10 	cmp.w	ip, #16
 810a9aa:	bfd8      	it	le
 810a9ac:	fb01 f909 	mulle.w	r9, r1, r9
 810a9b0:	e7f5      	b.n	810a99e <_strtod_l+0x25e>
 810a9b2:	2d10      	cmp	r5, #16
 810a9b4:	bfdc      	itt	le
 810a9b6:	230a      	movle	r3, #10
 810a9b8:	fb03 2909 	mlale	r9, r3, r9, r2
 810a9bc:	e7e1      	b.n	810a982 <_strtod_l+0x242>
 810a9be:	2300      	movs	r3, #0
 810a9c0:	9305      	str	r3, [sp, #20]
 810a9c2:	2301      	movs	r3, #1
 810a9c4:	e77c      	b.n	810a8c0 <_strtod_l+0x180>
 810a9c6:	f04f 0c00 	mov.w	ip, #0
 810a9ca:	f108 0202 	add.w	r2, r8, #2
 810a9ce:	9217      	str	r2, [sp, #92]	; 0x5c
 810a9d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 810a9d4:	e785      	b.n	810a8e2 <_strtod_l+0x1a2>
 810a9d6:	f04f 0c01 	mov.w	ip, #1
 810a9da:	e7f6      	b.n	810a9ca <_strtod_l+0x28a>
 810a9dc:	0810e59c 	.word	0x0810e59c
 810a9e0:	0810e2ec 	.word	0x0810e2ec
 810a9e4:	7ff00000 	.word	0x7ff00000
 810a9e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a9ea:	1c51      	adds	r1, r2, #1
 810a9ec:	9117      	str	r1, [sp, #92]	; 0x5c
 810a9ee:	7852      	ldrb	r2, [r2, #1]
 810a9f0:	2a30      	cmp	r2, #48	; 0x30
 810a9f2:	d0f9      	beq.n	810a9e8 <_strtod_l+0x2a8>
 810a9f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a9f8:	2908      	cmp	r1, #8
 810a9fa:	f63f af79 	bhi.w	810a8f0 <_strtod_l+0x1b0>
 810a9fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810aa02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810aa04:	9206      	str	r2, [sp, #24]
 810aa06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810aa08:	1c51      	adds	r1, r2, #1
 810aa0a:	9117      	str	r1, [sp, #92]	; 0x5c
 810aa0c:	7852      	ldrb	r2, [r2, #1]
 810aa0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810aa12:	2e09      	cmp	r6, #9
 810aa14:	d937      	bls.n	810aa86 <_strtod_l+0x346>
 810aa16:	9e06      	ldr	r6, [sp, #24]
 810aa18:	1b89      	subs	r1, r1, r6
 810aa1a:	2908      	cmp	r1, #8
 810aa1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810aa20:	dc02      	bgt.n	810aa28 <_strtod_l+0x2e8>
 810aa22:	4576      	cmp	r6, lr
 810aa24:	bfa8      	it	ge
 810aa26:	4676      	movge	r6, lr
 810aa28:	f1bc 0f00 	cmp.w	ip, #0
 810aa2c:	d000      	beq.n	810aa30 <_strtod_l+0x2f0>
 810aa2e:	4276      	negs	r6, r6
 810aa30:	2d00      	cmp	r5, #0
 810aa32:	d14d      	bne.n	810aad0 <_strtod_l+0x390>
 810aa34:	9904      	ldr	r1, [sp, #16]
 810aa36:	4301      	orrs	r1, r0
 810aa38:	f47f aec6 	bne.w	810a7c8 <_strtod_l+0x88>
 810aa3c:	2b00      	cmp	r3, #0
 810aa3e:	f47f aee1 	bne.w	810a804 <_strtod_l+0xc4>
 810aa42:	2a69      	cmp	r2, #105	; 0x69
 810aa44:	d027      	beq.n	810aa96 <_strtod_l+0x356>
 810aa46:	dc24      	bgt.n	810aa92 <_strtod_l+0x352>
 810aa48:	2a49      	cmp	r2, #73	; 0x49
 810aa4a:	d024      	beq.n	810aa96 <_strtod_l+0x356>
 810aa4c:	2a4e      	cmp	r2, #78	; 0x4e
 810aa4e:	f47f aed9 	bne.w	810a804 <_strtod_l+0xc4>
 810aa52:	499f      	ldr	r1, [pc, #636]	; (810acd0 <_strtod_l+0x590>)
 810aa54:	a817      	add	r0, sp, #92	; 0x5c
 810aa56:	f002 f8b3 	bl	810cbc0 <__match>
 810aa5a:	2800      	cmp	r0, #0
 810aa5c:	f43f aed2 	beq.w	810a804 <_strtod_l+0xc4>
 810aa60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810aa62:	781b      	ldrb	r3, [r3, #0]
 810aa64:	2b28      	cmp	r3, #40	; 0x28
 810aa66:	d12d      	bne.n	810aac4 <_strtod_l+0x384>
 810aa68:	499a      	ldr	r1, [pc, #616]	; (810acd4 <_strtod_l+0x594>)
 810aa6a:	aa1a      	add	r2, sp, #104	; 0x68
 810aa6c:	a817      	add	r0, sp, #92	; 0x5c
 810aa6e:	f002 f8bb 	bl	810cbe8 <__hexnan>
 810aa72:	2805      	cmp	r0, #5
 810aa74:	d126      	bne.n	810aac4 <_strtod_l+0x384>
 810aa76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810aa78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810aa7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810aa80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810aa84:	e6a0      	b.n	810a7c8 <_strtod_l+0x88>
 810aa86:	210a      	movs	r1, #10
 810aa88:	fb01 2e0e 	mla	lr, r1, lr, r2
 810aa8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810aa90:	e7b9      	b.n	810aa06 <_strtod_l+0x2c6>
 810aa92:	2a6e      	cmp	r2, #110	; 0x6e
 810aa94:	e7db      	b.n	810aa4e <_strtod_l+0x30e>
 810aa96:	4990      	ldr	r1, [pc, #576]	; (810acd8 <_strtod_l+0x598>)
 810aa98:	a817      	add	r0, sp, #92	; 0x5c
 810aa9a:	f002 f891 	bl	810cbc0 <__match>
 810aa9e:	2800      	cmp	r0, #0
 810aaa0:	f43f aeb0 	beq.w	810a804 <_strtod_l+0xc4>
 810aaa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810aaa6:	498d      	ldr	r1, [pc, #564]	; (810acdc <_strtod_l+0x59c>)
 810aaa8:	3b01      	subs	r3, #1
 810aaaa:	a817      	add	r0, sp, #92	; 0x5c
 810aaac:	9317      	str	r3, [sp, #92]	; 0x5c
 810aaae:	f002 f887 	bl	810cbc0 <__match>
 810aab2:	b910      	cbnz	r0, 810aaba <_strtod_l+0x37a>
 810aab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810aab6:	3301      	adds	r3, #1
 810aab8:	9317      	str	r3, [sp, #92]	; 0x5c
 810aaba:	f8df b230 	ldr.w	fp, [pc, #560]	; 810acec <_strtod_l+0x5ac>
 810aabe:	f04f 0a00 	mov.w	sl, #0
 810aac2:	e681      	b.n	810a7c8 <_strtod_l+0x88>
 810aac4:	4886      	ldr	r0, [pc, #536]	; (810ace0 <_strtod_l+0x5a0>)
 810aac6:	f003 fa07 	bl	810ded8 <nan>
 810aaca:	ec5b ab10 	vmov	sl, fp, d0
 810aace:	e67b      	b.n	810a7c8 <_strtod_l+0x88>
 810aad0:	9b05      	ldr	r3, [sp, #20]
 810aad2:	9807      	ldr	r0, [sp, #28]
 810aad4:	1af3      	subs	r3, r6, r3
 810aad6:	2f00      	cmp	r7, #0
 810aad8:	bf08      	it	eq
 810aada:	462f      	moveq	r7, r5
 810aadc:	2d10      	cmp	r5, #16
 810aade:	9306      	str	r3, [sp, #24]
 810aae0:	46a8      	mov	r8, r5
 810aae2:	bfa8      	it	ge
 810aae4:	f04f 0810 	movge.w	r8, #16
 810aae8:	f7f5 fd94 	bl	8100614 <__aeabi_ui2d>
 810aaec:	2d09      	cmp	r5, #9
 810aaee:	4682      	mov	sl, r0
 810aaf0:	468b      	mov	fp, r1
 810aaf2:	dd13      	ble.n	810ab1c <_strtod_l+0x3dc>
 810aaf4:	4b7b      	ldr	r3, [pc, #492]	; (810ace4 <_strtod_l+0x5a4>)
 810aaf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810aafa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810aafe:	f7f5 fe03 	bl	8100708 <__aeabi_dmul>
 810ab02:	4682      	mov	sl, r0
 810ab04:	4648      	mov	r0, r9
 810ab06:	468b      	mov	fp, r1
 810ab08:	f7f5 fd84 	bl	8100614 <__aeabi_ui2d>
 810ab0c:	4602      	mov	r2, r0
 810ab0e:	460b      	mov	r3, r1
 810ab10:	4650      	mov	r0, sl
 810ab12:	4659      	mov	r1, fp
 810ab14:	f7f5 fc42 	bl	810039c <__adddf3>
 810ab18:	4682      	mov	sl, r0
 810ab1a:	468b      	mov	fp, r1
 810ab1c:	2d0f      	cmp	r5, #15
 810ab1e:	dc38      	bgt.n	810ab92 <_strtod_l+0x452>
 810ab20:	9b06      	ldr	r3, [sp, #24]
 810ab22:	2b00      	cmp	r3, #0
 810ab24:	f43f ae50 	beq.w	810a7c8 <_strtod_l+0x88>
 810ab28:	dd24      	ble.n	810ab74 <_strtod_l+0x434>
 810ab2a:	2b16      	cmp	r3, #22
 810ab2c:	dc0b      	bgt.n	810ab46 <_strtod_l+0x406>
 810ab2e:	496d      	ldr	r1, [pc, #436]	; (810ace4 <_strtod_l+0x5a4>)
 810ab30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810ab34:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ab38:	4652      	mov	r2, sl
 810ab3a:	465b      	mov	r3, fp
 810ab3c:	f7f5 fde4 	bl	8100708 <__aeabi_dmul>
 810ab40:	4682      	mov	sl, r0
 810ab42:	468b      	mov	fp, r1
 810ab44:	e640      	b.n	810a7c8 <_strtod_l+0x88>
 810ab46:	9a06      	ldr	r2, [sp, #24]
 810ab48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810ab4c:	4293      	cmp	r3, r2
 810ab4e:	db20      	blt.n	810ab92 <_strtod_l+0x452>
 810ab50:	4c64      	ldr	r4, [pc, #400]	; (810ace4 <_strtod_l+0x5a4>)
 810ab52:	f1c5 050f 	rsb	r5, r5, #15
 810ab56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810ab5a:	4652      	mov	r2, sl
 810ab5c:	465b      	mov	r3, fp
 810ab5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ab62:	f7f5 fdd1 	bl	8100708 <__aeabi_dmul>
 810ab66:	9b06      	ldr	r3, [sp, #24]
 810ab68:	1b5d      	subs	r5, r3, r5
 810ab6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810ab6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 810ab72:	e7e3      	b.n	810ab3c <_strtod_l+0x3fc>
 810ab74:	9b06      	ldr	r3, [sp, #24]
 810ab76:	3316      	adds	r3, #22
 810ab78:	db0b      	blt.n	810ab92 <_strtod_l+0x452>
 810ab7a:	9b05      	ldr	r3, [sp, #20]
 810ab7c:	1b9e      	subs	r6, r3, r6
 810ab7e:	4b59      	ldr	r3, [pc, #356]	; (810ace4 <_strtod_l+0x5a4>)
 810ab80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810ab84:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ab88:	4650      	mov	r0, sl
 810ab8a:	4659      	mov	r1, fp
 810ab8c:	f7f5 fee6 	bl	810095c <__aeabi_ddiv>
 810ab90:	e7d6      	b.n	810ab40 <_strtod_l+0x400>
 810ab92:	9b06      	ldr	r3, [sp, #24]
 810ab94:	eba5 0808 	sub.w	r8, r5, r8
 810ab98:	4498      	add	r8, r3
 810ab9a:	f1b8 0f00 	cmp.w	r8, #0
 810ab9e:	dd74      	ble.n	810ac8a <_strtod_l+0x54a>
 810aba0:	f018 030f 	ands.w	r3, r8, #15
 810aba4:	d00a      	beq.n	810abbc <_strtod_l+0x47c>
 810aba6:	494f      	ldr	r1, [pc, #316]	; (810ace4 <_strtod_l+0x5a4>)
 810aba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810abac:	4652      	mov	r2, sl
 810abae:	465b      	mov	r3, fp
 810abb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810abb4:	f7f5 fda8 	bl	8100708 <__aeabi_dmul>
 810abb8:	4682      	mov	sl, r0
 810abba:	468b      	mov	fp, r1
 810abbc:	f038 080f 	bics.w	r8, r8, #15
 810abc0:	d04f      	beq.n	810ac62 <_strtod_l+0x522>
 810abc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810abc6:	dd22      	ble.n	810ac0e <_strtod_l+0x4ce>
 810abc8:	2500      	movs	r5, #0
 810abca:	462e      	mov	r6, r5
 810abcc:	9507      	str	r5, [sp, #28]
 810abce:	9505      	str	r5, [sp, #20]
 810abd0:	2322      	movs	r3, #34	; 0x22
 810abd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 810acec <_strtod_l+0x5ac>
 810abd6:	6023      	str	r3, [r4, #0]
 810abd8:	f04f 0a00 	mov.w	sl, #0
 810abdc:	9b07      	ldr	r3, [sp, #28]
 810abde:	2b00      	cmp	r3, #0
 810abe0:	f43f adf2 	beq.w	810a7c8 <_strtod_l+0x88>
 810abe4:	9918      	ldr	r1, [sp, #96]	; 0x60
 810abe6:	4620      	mov	r0, r4
 810abe8:	f002 f97a 	bl	810cee0 <_Bfree>
 810abec:	9905      	ldr	r1, [sp, #20]
 810abee:	4620      	mov	r0, r4
 810abf0:	f002 f976 	bl	810cee0 <_Bfree>
 810abf4:	4631      	mov	r1, r6
 810abf6:	4620      	mov	r0, r4
 810abf8:	f002 f972 	bl	810cee0 <_Bfree>
 810abfc:	9907      	ldr	r1, [sp, #28]
 810abfe:	4620      	mov	r0, r4
 810ac00:	f002 f96e 	bl	810cee0 <_Bfree>
 810ac04:	4629      	mov	r1, r5
 810ac06:	4620      	mov	r0, r4
 810ac08:	f002 f96a 	bl	810cee0 <_Bfree>
 810ac0c:	e5dc      	b.n	810a7c8 <_strtod_l+0x88>
 810ac0e:	4b36      	ldr	r3, [pc, #216]	; (810ace8 <_strtod_l+0x5a8>)
 810ac10:	9304      	str	r3, [sp, #16]
 810ac12:	2300      	movs	r3, #0
 810ac14:	ea4f 1828 	mov.w	r8, r8, asr #4
 810ac18:	4650      	mov	r0, sl
 810ac1a:	4659      	mov	r1, fp
 810ac1c:	4699      	mov	r9, r3
 810ac1e:	f1b8 0f01 	cmp.w	r8, #1
 810ac22:	dc21      	bgt.n	810ac68 <_strtod_l+0x528>
 810ac24:	b10b      	cbz	r3, 810ac2a <_strtod_l+0x4ea>
 810ac26:	4682      	mov	sl, r0
 810ac28:	468b      	mov	fp, r1
 810ac2a:	4b2f      	ldr	r3, [pc, #188]	; (810ace8 <_strtod_l+0x5a8>)
 810ac2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810ac30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810ac34:	4652      	mov	r2, sl
 810ac36:	465b      	mov	r3, fp
 810ac38:	e9d9 0100 	ldrd	r0, r1, [r9]
 810ac3c:	f7f5 fd64 	bl	8100708 <__aeabi_dmul>
 810ac40:	4b2a      	ldr	r3, [pc, #168]	; (810acec <_strtod_l+0x5ac>)
 810ac42:	460a      	mov	r2, r1
 810ac44:	400b      	ands	r3, r1
 810ac46:	492a      	ldr	r1, [pc, #168]	; (810acf0 <_strtod_l+0x5b0>)
 810ac48:	428b      	cmp	r3, r1
 810ac4a:	4682      	mov	sl, r0
 810ac4c:	d8bc      	bhi.n	810abc8 <_strtod_l+0x488>
 810ac4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810ac52:	428b      	cmp	r3, r1
 810ac54:	bf86      	itte	hi
 810ac56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810acf4 <_strtod_l+0x5b4>
 810ac5a:	f04f 3aff 	movhi.w	sl, #4294967295
 810ac5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810ac62:	2300      	movs	r3, #0
 810ac64:	9304      	str	r3, [sp, #16]
 810ac66:	e084      	b.n	810ad72 <_strtod_l+0x632>
 810ac68:	f018 0f01 	tst.w	r8, #1
 810ac6c:	d005      	beq.n	810ac7a <_strtod_l+0x53a>
 810ac6e:	9b04      	ldr	r3, [sp, #16]
 810ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac74:	f7f5 fd48 	bl	8100708 <__aeabi_dmul>
 810ac78:	2301      	movs	r3, #1
 810ac7a:	9a04      	ldr	r2, [sp, #16]
 810ac7c:	3208      	adds	r2, #8
 810ac7e:	f109 0901 	add.w	r9, r9, #1
 810ac82:	ea4f 0868 	mov.w	r8, r8, asr #1
 810ac86:	9204      	str	r2, [sp, #16]
 810ac88:	e7c9      	b.n	810ac1e <_strtod_l+0x4de>
 810ac8a:	d0ea      	beq.n	810ac62 <_strtod_l+0x522>
 810ac8c:	f1c8 0800 	rsb	r8, r8, #0
 810ac90:	f018 020f 	ands.w	r2, r8, #15
 810ac94:	d00a      	beq.n	810acac <_strtod_l+0x56c>
 810ac96:	4b13      	ldr	r3, [pc, #76]	; (810ace4 <_strtod_l+0x5a4>)
 810ac98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ac9c:	4650      	mov	r0, sl
 810ac9e:	4659      	mov	r1, fp
 810aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aca4:	f7f5 fe5a 	bl	810095c <__aeabi_ddiv>
 810aca8:	4682      	mov	sl, r0
 810acaa:	468b      	mov	fp, r1
 810acac:	ea5f 1828 	movs.w	r8, r8, asr #4
 810acb0:	d0d7      	beq.n	810ac62 <_strtod_l+0x522>
 810acb2:	f1b8 0f1f 	cmp.w	r8, #31
 810acb6:	dd1f      	ble.n	810acf8 <_strtod_l+0x5b8>
 810acb8:	2500      	movs	r5, #0
 810acba:	462e      	mov	r6, r5
 810acbc:	9507      	str	r5, [sp, #28]
 810acbe:	9505      	str	r5, [sp, #20]
 810acc0:	2322      	movs	r3, #34	; 0x22
 810acc2:	f04f 0a00 	mov.w	sl, #0
 810acc6:	f04f 0b00 	mov.w	fp, #0
 810acca:	6023      	str	r3, [r4, #0]
 810accc:	e786      	b.n	810abdc <_strtod_l+0x49c>
 810acce:	bf00      	nop
 810acd0:	0810e2bd 	.word	0x0810e2bd
 810acd4:	0810e300 	.word	0x0810e300
 810acd8:	0810e2b5 	.word	0x0810e2b5
 810acdc:	0810e444 	.word	0x0810e444
 810ace0:	0810e758 	.word	0x0810e758
 810ace4:	0810e638 	.word	0x0810e638
 810ace8:	0810e610 	.word	0x0810e610
 810acec:	7ff00000 	.word	0x7ff00000
 810acf0:	7ca00000 	.word	0x7ca00000
 810acf4:	7fefffff 	.word	0x7fefffff
 810acf8:	f018 0310 	ands.w	r3, r8, #16
 810acfc:	bf18      	it	ne
 810acfe:	236a      	movne	r3, #106	; 0x6a
 810ad00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810b0b0 <_strtod_l+0x970>
 810ad04:	9304      	str	r3, [sp, #16]
 810ad06:	4650      	mov	r0, sl
 810ad08:	4659      	mov	r1, fp
 810ad0a:	2300      	movs	r3, #0
 810ad0c:	f018 0f01 	tst.w	r8, #1
 810ad10:	d004      	beq.n	810ad1c <_strtod_l+0x5dc>
 810ad12:	e9d9 2300 	ldrd	r2, r3, [r9]
 810ad16:	f7f5 fcf7 	bl	8100708 <__aeabi_dmul>
 810ad1a:	2301      	movs	r3, #1
 810ad1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 810ad20:	f109 0908 	add.w	r9, r9, #8
 810ad24:	d1f2      	bne.n	810ad0c <_strtod_l+0x5cc>
 810ad26:	b10b      	cbz	r3, 810ad2c <_strtod_l+0x5ec>
 810ad28:	4682      	mov	sl, r0
 810ad2a:	468b      	mov	fp, r1
 810ad2c:	9b04      	ldr	r3, [sp, #16]
 810ad2e:	b1c3      	cbz	r3, 810ad62 <_strtod_l+0x622>
 810ad30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810ad34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810ad38:	2b00      	cmp	r3, #0
 810ad3a:	4659      	mov	r1, fp
 810ad3c:	dd11      	ble.n	810ad62 <_strtod_l+0x622>
 810ad3e:	2b1f      	cmp	r3, #31
 810ad40:	f340 8124 	ble.w	810af8c <_strtod_l+0x84c>
 810ad44:	2b34      	cmp	r3, #52	; 0x34
 810ad46:	bfde      	ittt	le
 810ad48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810ad4c:	f04f 33ff 	movle.w	r3, #4294967295
 810ad50:	fa03 f202 	lslle.w	r2, r3, r2
 810ad54:	f04f 0a00 	mov.w	sl, #0
 810ad58:	bfcc      	ite	gt
 810ad5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810ad5e:	ea02 0b01 	andle.w	fp, r2, r1
 810ad62:	2200      	movs	r2, #0
 810ad64:	2300      	movs	r3, #0
 810ad66:	4650      	mov	r0, sl
 810ad68:	4659      	mov	r1, fp
 810ad6a:	f7f5 ff35 	bl	8100bd8 <__aeabi_dcmpeq>
 810ad6e:	2800      	cmp	r0, #0
 810ad70:	d1a2      	bne.n	810acb8 <_strtod_l+0x578>
 810ad72:	9b07      	ldr	r3, [sp, #28]
 810ad74:	9300      	str	r3, [sp, #0]
 810ad76:	9908      	ldr	r1, [sp, #32]
 810ad78:	462b      	mov	r3, r5
 810ad7a:	463a      	mov	r2, r7
 810ad7c:	4620      	mov	r0, r4
 810ad7e:	f002 f917 	bl	810cfb0 <__s2b>
 810ad82:	9007      	str	r0, [sp, #28]
 810ad84:	2800      	cmp	r0, #0
 810ad86:	f43f af1f 	beq.w	810abc8 <_strtod_l+0x488>
 810ad8a:	9b05      	ldr	r3, [sp, #20]
 810ad8c:	1b9e      	subs	r6, r3, r6
 810ad8e:	9b06      	ldr	r3, [sp, #24]
 810ad90:	2b00      	cmp	r3, #0
 810ad92:	bfb4      	ite	lt
 810ad94:	4633      	movlt	r3, r6
 810ad96:	2300      	movge	r3, #0
 810ad98:	930c      	str	r3, [sp, #48]	; 0x30
 810ad9a:	9b06      	ldr	r3, [sp, #24]
 810ad9c:	2500      	movs	r5, #0
 810ad9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810ada2:	9312      	str	r3, [sp, #72]	; 0x48
 810ada4:	462e      	mov	r6, r5
 810ada6:	9b07      	ldr	r3, [sp, #28]
 810ada8:	4620      	mov	r0, r4
 810adaa:	6859      	ldr	r1, [r3, #4]
 810adac:	f002 f858 	bl	810ce60 <_Balloc>
 810adb0:	9005      	str	r0, [sp, #20]
 810adb2:	2800      	cmp	r0, #0
 810adb4:	f43f af0c 	beq.w	810abd0 <_strtod_l+0x490>
 810adb8:	9b07      	ldr	r3, [sp, #28]
 810adba:	691a      	ldr	r2, [r3, #16]
 810adbc:	3202      	adds	r2, #2
 810adbe:	f103 010c 	add.w	r1, r3, #12
 810adc2:	0092      	lsls	r2, r2, #2
 810adc4:	300c      	adds	r0, #12
 810adc6:	f002 f831 	bl	810ce2c <memcpy>
 810adca:	ec4b ab10 	vmov	d0, sl, fp
 810adce:	aa1a      	add	r2, sp, #104	; 0x68
 810add0:	a919      	add	r1, sp, #100	; 0x64
 810add2:	4620      	mov	r0, r4
 810add4:	f002 fc32 	bl	810d63c <__d2b>
 810add8:	ec4b ab18 	vmov	d8, sl, fp
 810addc:	9018      	str	r0, [sp, #96]	; 0x60
 810adde:	2800      	cmp	r0, #0
 810ade0:	f43f aef6 	beq.w	810abd0 <_strtod_l+0x490>
 810ade4:	2101      	movs	r1, #1
 810ade6:	4620      	mov	r0, r4
 810ade8:	f002 f97c 	bl	810d0e4 <__i2b>
 810adec:	4606      	mov	r6, r0
 810adee:	2800      	cmp	r0, #0
 810adf0:	f43f aeee 	beq.w	810abd0 <_strtod_l+0x490>
 810adf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810adf6:	9904      	ldr	r1, [sp, #16]
 810adf8:	2b00      	cmp	r3, #0
 810adfa:	bfab      	itete	ge
 810adfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810adfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810ae00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810ae02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810ae06:	bfac      	ite	ge
 810ae08:	eb03 0902 	addge.w	r9, r3, r2
 810ae0c:	1ad7      	sublt	r7, r2, r3
 810ae0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810ae10:	eba3 0801 	sub.w	r8, r3, r1
 810ae14:	4490      	add	r8, r2
 810ae16:	4ba1      	ldr	r3, [pc, #644]	; (810b09c <_strtod_l+0x95c>)
 810ae18:	f108 38ff 	add.w	r8, r8, #4294967295
 810ae1c:	4598      	cmp	r8, r3
 810ae1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810ae22:	f280 80c7 	bge.w	810afb4 <_strtod_l+0x874>
 810ae26:	eba3 0308 	sub.w	r3, r3, r8
 810ae2a:	2b1f      	cmp	r3, #31
 810ae2c:	eba2 0203 	sub.w	r2, r2, r3
 810ae30:	f04f 0101 	mov.w	r1, #1
 810ae34:	f300 80b1 	bgt.w	810af9a <_strtod_l+0x85a>
 810ae38:	fa01 f303 	lsl.w	r3, r1, r3
 810ae3c:	930d      	str	r3, [sp, #52]	; 0x34
 810ae3e:	2300      	movs	r3, #0
 810ae40:	9308      	str	r3, [sp, #32]
 810ae42:	eb09 0802 	add.w	r8, r9, r2
 810ae46:	9b04      	ldr	r3, [sp, #16]
 810ae48:	45c1      	cmp	r9, r8
 810ae4a:	4417      	add	r7, r2
 810ae4c:	441f      	add	r7, r3
 810ae4e:	464b      	mov	r3, r9
 810ae50:	bfa8      	it	ge
 810ae52:	4643      	movge	r3, r8
 810ae54:	42bb      	cmp	r3, r7
 810ae56:	bfa8      	it	ge
 810ae58:	463b      	movge	r3, r7
 810ae5a:	2b00      	cmp	r3, #0
 810ae5c:	bfc2      	ittt	gt
 810ae5e:	eba8 0803 	subgt.w	r8, r8, r3
 810ae62:	1aff      	subgt	r7, r7, r3
 810ae64:	eba9 0903 	subgt.w	r9, r9, r3
 810ae68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810ae6a:	2b00      	cmp	r3, #0
 810ae6c:	dd17      	ble.n	810ae9e <_strtod_l+0x75e>
 810ae6e:	4631      	mov	r1, r6
 810ae70:	461a      	mov	r2, r3
 810ae72:	4620      	mov	r0, r4
 810ae74:	f002 f9f6 	bl	810d264 <__pow5mult>
 810ae78:	4606      	mov	r6, r0
 810ae7a:	2800      	cmp	r0, #0
 810ae7c:	f43f aea8 	beq.w	810abd0 <_strtod_l+0x490>
 810ae80:	4601      	mov	r1, r0
 810ae82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810ae84:	4620      	mov	r0, r4
 810ae86:	f002 f943 	bl	810d110 <__multiply>
 810ae8a:	900b      	str	r0, [sp, #44]	; 0x2c
 810ae8c:	2800      	cmp	r0, #0
 810ae8e:	f43f ae9f 	beq.w	810abd0 <_strtod_l+0x490>
 810ae92:	9918      	ldr	r1, [sp, #96]	; 0x60
 810ae94:	4620      	mov	r0, r4
 810ae96:	f002 f823 	bl	810cee0 <_Bfree>
 810ae9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ae9c:	9318      	str	r3, [sp, #96]	; 0x60
 810ae9e:	f1b8 0f00 	cmp.w	r8, #0
 810aea2:	f300 808c 	bgt.w	810afbe <_strtod_l+0x87e>
 810aea6:	9b06      	ldr	r3, [sp, #24]
 810aea8:	2b00      	cmp	r3, #0
 810aeaa:	dd08      	ble.n	810aebe <_strtod_l+0x77e>
 810aeac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810aeae:	9905      	ldr	r1, [sp, #20]
 810aeb0:	4620      	mov	r0, r4
 810aeb2:	f002 f9d7 	bl	810d264 <__pow5mult>
 810aeb6:	9005      	str	r0, [sp, #20]
 810aeb8:	2800      	cmp	r0, #0
 810aeba:	f43f ae89 	beq.w	810abd0 <_strtod_l+0x490>
 810aebe:	2f00      	cmp	r7, #0
 810aec0:	dd08      	ble.n	810aed4 <_strtod_l+0x794>
 810aec2:	9905      	ldr	r1, [sp, #20]
 810aec4:	463a      	mov	r2, r7
 810aec6:	4620      	mov	r0, r4
 810aec8:	f002 fa26 	bl	810d318 <__lshift>
 810aecc:	9005      	str	r0, [sp, #20]
 810aece:	2800      	cmp	r0, #0
 810aed0:	f43f ae7e 	beq.w	810abd0 <_strtod_l+0x490>
 810aed4:	f1b9 0f00 	cmp.w	r9, #0
 810aed8:	dd08      	ble.n	810aeec <_strtod_l+0x7ac>
 810aeda:	4631      	mov	r1, r6
 810aedc:	464a      	mov	r2, r9
 810aede:	4620      	mov	r0, r4
 810aee0:	f002 fa1a 	bl	810d318 <__lshift>
 810aee4:	4606      	mov	r6, r0
 810aee6:	2800      	cmp	r0, #0
 810aee8:	f43f ae72 	beq.w	810abd0 <_strtod_l+0x490>
 810aeec:	9a05      	ldr	r2, [sp, #20]
 810aeee:	9918      	ldr	r1, [sp, #96]	; 0x60
 810aef0:	4620      	mov	r0, r4
 810aef2:	f002 fa9d 	bl	810d430 <__mdiff>
 810aef6:	4605      	mov	r5, r0
 810aef8:	2800      	cmp	r0, #0
 810aefa:	f43f ae69 	beq.w	810abd0 <_strtod_l+0x490>
 810aefe:	68c3      	ldr	r3, [r0, #12]
 810af00:	930b      	str	r3, [sp, #44]	; 0x2c
 810af02:	2300      	movs	r3, #0
 810af04:	60c3      	str	r3, [r0, #12]
 810af06:	4631      	mov	r1, r6
 810af08:	f002 fa76 	bl	810d3f8 <__mcmp>
 810af0c:	2800      	cmp	r0, #0
 810af0e:	da60      	bge.n	810afd2 <_strtod_l+0x892>
 810af10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810af12:	ea53 030a 	orrs.w	r3, r3, sl
 810af16:	f040 8082 	bne.w	810b01e <_strtod_l+0x8de>
 810af1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810af1e:	2b00      	cmp	r3, #0
 810af20:	d17d      	bne.n	810b01e <_strtod_l+0x8de>
 810af22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810af26:	0d1b      	lsrs	r3, r3, #20
 810af28:	051b      	lsls	r3, r3, #20
 810af2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810af2e:	d976      	bls.n	810b01e <_strtod_l+0x8de>
 810af30:	696b      	ldr	r3, [r5, #20]
 810af32:	b913      	cbnz	r3, 810af3a <_strtod_l+0x7fa>
 810af34:	692b      	ldr	r3, [r5, #16]
 810af36:	2b01      	cmp	r3, #1
 810af38:	dd71      	ble.n	810b01e <_strtod_l+0x8de>
 810af3a:	4629      	mov	r1, r5
 810af3c:	2201      	movs	r2, #1
 810af3e:	4620      	mov	r0, r4
 810af40:	f002 f9ea 	bl	810d318 <__lshift>
 810af44:	4631      	mov	r1, r6
 810af46:	4605      	mov	r5, r0
 810af48:	f002 fa56 	bl	810d3f8 <__mcmp>
 810af4c:	2800      	cmp	r0, #0
 810af4e:	dd66      	ble.n	810b01e <_strtod_l+0x8de>
 810af50:	9904      	ldr	r1, [sp, #16]
 810af52:	4a53      	ldr	r2, [pc, #332]	; (810b0a0 <_strtod_l+0x960>)
 810af54:	465b      	mov	r3, fp
 810af56:	2900      	cmp	r1, #0
 810af58:	f000 8081 	beq.w	810b05e <_strtod_l+0x91e>
 810af5c:	ea02 010b 	and.w	r1, r2, fp
 810af60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810af64:	dc7b      	bgt.n	810b05e <_strtod_l+0x91e>
 810af66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810af6a:	f77f aea9 	ble.w	810acc0 <_strtod_l+0x580>
 810af6e:	4b4d      	ldr	r3, [pc, #308]	; (810b0a4 <_strtod_l+0x964>)
 810af70:	4650      	mov	r0, sl
 810af72:	4659      	mov	r1, fp
 810af74:	2200      	movs	r2, #0
 810af76:	f7f5 fbc7 	bl	8100708 <__aeabi_dmul>
 810af7a:	460b      	mov	r3, r1
 810af7c:	4303      	orrs	r3, r0
 810af7e:	bf08      	it	eq
 810af80:	2322      	moveq	r3, #34	; 0x22
 810af82:	4682      	mov	sl, r0
 810af84:	468b      	mov	fp, r1
 810af86:	bf08      	it	eq
 810af88:	6023      	streq	r3, [r4, #0]
 810af8a:	e62b      	b.n	810abe4 <_strtod_l+0x4a4>
 810af8c:	f04f 32ff 	mov.w	r2, #4294967295
 810af90:	fa02 f303 	lsl.w	r3, r2, r3
 810af94:	ea03 0a0a 	and.w	sl, r3, sl
 810af98:	e6e3      	b.n	810ad62 <_strtod_l+0x622>
 810af9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810af9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810afa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810afa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810afaa:	fa01 f308 	lsl.w	r3, r1, r8
 810afae:	9308      	str	r3, [sp, #32]
 810afb0:	910d      	str	r1, [sp, #52]	; 0x34
 810afb2:	e746      	b.n	810ae42 <_strtod_l+0x702>
 810afb4:	2300      	movs	r3, #0
 810afb6:	9308      	str	r3, [sp, #32]
 810afb8:	2301      	movs	r3, #1
 810afba:	930d      	str	r3, [sp, #52]	; 0x34
 810afbc:	e741      	b.n	810ae42 <_strtod_l+0x702>
 810afbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 810afc0:	4642      	mov	r2, r8
 810afc2:	4620      	mov	r0, r4
 810afc4:	f002 f9a8 	bl	810d318 <__lshift>
 810afc8:	9018      	str	r0, [sp, #96]	; 0x60
 810afca:	2800      	cmp	r0, #0
 810afcc:	f47f af6b 	bne.w	810aea6 <_strtod_l+0x766>
 810afd0:	e5fe      	b.n	810abd0 <_strtod_l+0x490>
 810afd2:	465f      	mov	r7, fp
 810afd4:	d16e      	bne.n	810b0b4 <_strtod_l+0x974>
 810afd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810afd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810afdc:	b342      	cbz	r2, 810b030 <_strtod_l+0x8f0>
 810afde:	4a32      	ldr	r2, [pc, #200]	; (810b0a8 <_strtod_l+0x968>)
 810afe0:	4293      	cmp	r3, r2
 810afe2:	d128      	bne.n	810b036 <_strtod_l+0x8f6>
 810afe4:	9b04      	ldr	r3, [sp, #16]
 810afe6:	4651      	mov	r1, sl
 810afe8:	b1eb      	cbz	r3, 810b026 <_strtod_l+0x8e6>
 810afea:	4b2d      	ldr	r3, [pc, #180]	; (810b0a0 <_strtod_l+0x960>)
 810afec:	403b      	ands	r3, r7
 810afee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810aff2:	f04f 32ff 	mov.w	r2, #4294967295
 810aff6:	d819      	bhi.n	810b02c <_strtod_l+0x8ec>
 810aff8:	0d1b      	lsrs	r3, r3, #20
 810affa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810affe:	fa02 f303 	lsl.w	r3, r2, r3
 810b002:	4299      	cmp	r1, r3
 810b004:	d117      	bne.n	810b036 <_strtod_l+0x8f6>
 810b006:	4b29      	ldr	r3, [pc, #164]	; (810b0ac <_strtod_l+0x96c>)
 810b008:	429f      	cmp	r7, r3
 810b00a:	d102      	bne.n	810b012 <_strtod_l+0x8d2>
 810b00c:	3101      	adds	r1, #1
 810b00e:	f43f addf 	beq.w	810abd0 <_strtod_l+0x490>
 810b012:	4b23      	ldr	r3, [pc, #140]	; (810b0a0 <_strtod_l+0x960>)
 810b014:	403b      	ands	r3, r7
 810b016:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810b01a:	f04f 0a00 	mov.w	sl, #0
 810b01e:	9b04      	ldr	r3, [sp, #16]
 810b020:	2b00      	cmp	r3, #0
 810b022:	d1a4      	bne.n	810af6e <_strtod_l+0x82e>
 810b024:	e5de      	b.n	810abe4 <_strtod_l+0x4a4>
 810b026:	f04f 33ff 	mov.w	r3, #4294967295
 810b02a:	e7ea      	b.n	810b002 <_strtod_l+0x8c2>
 810b02c:	4613      	mov	r3, r2
 810b02e:	e7e8      	b.n	810b002 <_strtod_l+0x8c2>
 810b030:	ea53 030a 	orrs.w	r3, r3, sl
 810b034:	d08c      	beq.n	810af50 <_strtod_l+0x810>
 810b036:	9b08      	ldr	r3, [sp, #32]
 810b038:	b1db      	cbz	r3, 810b072 <_strtod_l+0x932>
 810b03a:	423b      	tst	r3, r7
 810b03c:	d0ef      	beq.n	810b01e <_strtod_l+0x8de>
 810b03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b040:	9a04      	ldr	r2, [sp, #16]
 810b042:	4650      	mov	r0, sl
 810b044:	4659      	mov	r1, fp
 810b046:	b1c3      	cbz	r3, 810b07a <_strtod_l+0x93a>
 810b048:	f7ff fb5d 	bl	810a706 <sulp>
 810b04c:	4602      	mov	r2, r0
 810b04e:	460b      	mov	r3, r1
 810b050:	ec51 0b18 	vmov	r0, r1, d8
 810b054:	f7f5 f9a2 	bl	810039c <__adddf3>
 810b058:	4682      	mov	sl, r0
 810b05a:	468b      	mov	fp, r1
 810b05c:	e7df      	b.n	810b01e <_strtod_l+0x8de>
 810b05e:	4013      	ands	r3, r2
 810b060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810b064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810b068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810b06c:	f04f 3aff 	mov.w	sl, #4294967295
 810b070:	e7d5      	b.n	810b01e <_strtod_l+0x8de>
 810b072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b074:	ea13 0f0a 	tst.w	r3, sl
 810b078:	e7e0      	b.n	810b03c <_strtod_l+0x8fc>
 810b07a:	f7ff fb44 	bl	810a706 <sulp>
 810b07e:	4602      	mov	r2, r0
 810b080:	460b      	mov	r3, r1
 810b082:	ec51 0b18 	vmov	r0, r1, d8
 810b086:	f7f5 f987 	bl	8100398 <__aeabi_dsub>
 810b08a:	2200      	movs	r2, #0
 810b08c:	2300      	movs	r3, #0
 810b08e:	4682      	mov	sl, r0
 810b090:	468b      	mov	fp, r1
 810b092:	f7f5 fda1 	bl	8100bd8 <__aeabi_dcmpeq>
 810b096:	2800      	cmp	r0, #0
 810b098:	d0c1      	beq.n	810b01e <_strtod_l+0x8de>
 810b09a:	e611      	b.n	810acc0 <_strtod_l+0x580>
 810b09c:	fffffc02 	.word	0xfffffc02
 810b0a0:	7ff00000 	.word	0x7ff00000
 810b0a4:	39500000 	.word	0x39500000
 810b0a8:	000fffff 	.word	0x000fffff
 810b0ac:	7fefffff 	.word	0x7fefffff
 810b0b0:	0810e318 	.word	0x0810e318
 810b0b4:	4631      	mov	r1, r6
 810b0b6:	4628      	mov	r0, r5
 810b0b8:	f002 fb1c 	bl	810d6f4 <__ratio>
 810b0bc:	ec59 8b10 	vmov	r8, r9, d0
 810b0c0:	ee10 0a10 	vmov	r0, s0
 810b0c4:	2200      	movs	r2, #0
 810b0c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810b0ca:	4649      	mov	r1, r9
 810b0cc:	f7f5 fd98 	bl	8100c00 <__aeabi_dcmple>
 810b0d0:	2800      	cmp	r0, #0
 810b0d2:	d07a      	beq.n	810b1ca <_strtod_l+0xa8a>
 810b0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b0d6:	2b00      	cmp	r3, #0
 810b0d8:	d04a      	beq.n	810b170 <_strtod_l+0xa30>
 810b0da:	4b95      	ldr	r3, [pc, #596]	; (810b330 <_strtod_l+0xbf0>)
 810b0dc:	2200      	movs	r2, #0
 810b0de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810b0e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810b330 <_strtod_l+0xbf0>
 810b0e6:	f04f 0800 	mov.w	r8, #0
 810b0ea:	4b92      	ldr	r3, [pc, #584]	; (810b334 <_strtod_l+0xbf4>)
 810b0ec:	403b      	ands	r3, r7
 810b0ee:	930d      	str	r3, [sp, #52]	; 0x34
 810b0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b0f2:	4b91      	ldr	r3, [pc, #580]	; (810b338 <_strtod_l+0xbf8>)
 810b0f4:	429a      	cmp	r2, r3
 810b0f6:	f040 80b0 	bne.w	810b25a <_strtod_l+0xb1a>
 810b0fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810b0fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810b102:	ec4b ab10 	vmov	d0, sl, fp
 810b106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810b10a:	f002 fa1b 	bl	810d544 <__ulp>
 810b10e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810b112:	ec53 2b10 	vmov	r2, r3, d0
 810b116:	f7f5 faf7 	bl	8100708 <__aeabi_dmul>
 810b11a:	4652      	mov	r2, sl
 810b11c:	465b      	mov	r3, fp
 810b11e:	f7f5 f93d 	bl	810039c <__adddf3>
 810b122:	460b      	mov	r3, r1
 810b124:	4983      	ldr	r1, [pc, #524]	; (810b334 <_strtod_l+0xbf4>)
 810b126:	4a85      	ldr	r2, [pc, #532]	; (810b33c <_strtod_l+0xbfc>)
 810b128:	4019      	ands	r1, r3
 810b12a:	4291      	cmp	r1, r2
 810b12c:	4682      	mov	sl, r0
 810b12e:	d960      	bls.n	810b1f2 <_strtod_l+0xab2>
 810b130:	ee18 3a90 	vmov	r3, s17
 810b134:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810b138:	4293      	cmp	r3, r2
 810b13a:	d104      	bne.n	810b146 <_strtod_l+0xa06>
 810b13c:	ee18 3a10 	vmov	r3, s16
 810b140:	3301      	adds	r3, #1
 810b142:	f43f ad45 	beq.w	810abd0 <_strtod_l+0x490>
 810b146:	f8df b200 	ldr.w	fp, [pc, #512]	; 810b348 <_strtod_l+0xc08>
 810b14a:	f04f 3aff 	mov.w	sl, #4294967295
 810b14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810b150:	4620      	mov	r0, r4
 810b152:	f001 fec5 	bl	810cee0 <_Bfree>
 810b156:	9905      	ldr	r1, [sp, #20]
 810b158:	4620      	mov	r0, r4
 810b15a:	f001 fec1 	bl	810cee0 <_Bfree>
 810b15e:	4631      	mov	r1, r6
 810b160:	4620      	mov	r0, r4
 810b162:	f001 febd 	bl	810cee0 <_Bfree>
 810b166:	4629      	mov	r1, r5
 810b168:	4620      	mov	r0, r4
 810b16a:	f001 feb9 	bl	810cee0 <_Bfree>
 810b16e:	e61a      	b.n	810ada6 <_strtod_l+0x666>
 810b170:	f1ba 0f00 	cmp.w	sl, #0
 810b174:	d11b      	bne.n	810b1ae <_strtod_l+0xa6e>
 810b176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b17a:	b9f3      	cbnz	r3, 810b1ba <_strtod_l+0xa7a>
 810b17c:	4b6c      	ldr	r3, [pc, #432]	; (810b330 <_strtod_l+0xbf0>)
 810b17e:	2200      	movs	r2, #0
 810b180:	4640      	mov	r0, r8
 810b182:	4649      	mov	r1, r9
 810b184:	f7f5 fd32 	bl	8100bec <__aeabi_dcmplt>
 810b188:	b9d0      	cbnz	r0, 810b1c0 <_strtod_l+0xa80>
 810b18a:	4640      	mov	r0, r8
 810b18c:	4649      	mov	r1, r9
 810b18e:	4b6c      	ldr	r3, [pc, #432]	; (810b340 <_strtod_l+0xc00>)
 810b190:	2200      	movs	r2, #0
 810b192:	f7f5 fab9 	bl	8100708 <__aeabi_dmul>
 810b196:	4680      	mov	r8, r0
 810b198:	4689      	mov	r9, r1
 810b19a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810b19e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810b1a2:	9315      	str	r3, [sp, #84]	; 0x54
 810b1a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810b1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810b1ac:	e79d      	b.n	810b0ea <_strtod_l+0x9aa>
 810b1ae:	f1ba 0f01 	cmp.w	sl, #1
 810b1b2:	d102      	bne.n	810b1ba <_strtod_l+0xa7a>
 810b1b4:	2f00      	cmp	r7, #0
 810b1b6:	f43f ad83 	beq.w	810acc0 <_strtod_l+0x580>
 810b1ba:	4b62      	ldr	r3, [pc, #392]	; (810b344 <_strtod_l+0xc04>)
 810b1bc:	2200      	movs	r2, #0
 810b1be:	e78e      	b.n	810b0de <_strtod_l+0x99e>
 810b1c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810b340 <_strtod_l+0xc00>
 810b1c4:	f04f 0800 	mov.w	r8, #0
 810b1c8:	e7e7      	b.n	810b19a <_strtod_l+0xa5a>
 810b1ca:	4b5d      	ldr	r3, [pc, #372]	; (810b340 <_strtod_l+0xc00>)
 810b1cc:	4640      	mov	r0, r8
 810b1ce:	4649      	mov	r1, r9
 810b1d0:	2200      	movs	r2, #0
 810b1d2:	f7f5 fa99 	bl	8100708 <__aeabi_dmul>
 810b1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b1d8:	4680      	mov	r8, r0
 810b1da:	4689      	mov	r9, r1
 810b1dc:	b933      	cbnz	r3, 810b1ec <_strtod_l+0xaac>
 810b1de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b1e2:	900e      	str	r0, [sp, #56]	; 0x38
 810b1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 810b1e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810b1ea:	e7dd      	b.n	810b1a8 <_strtod_l+0xa68>
 810b1ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810b1f0:	e7f9      	b.n	810b1e6 <_strtod_l+0xaa6>
 810b1f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810b1f6:	9b04      	ldr	r3, [sp, #16]
 810b1f8:	2b00      	cmp	r3, #0
 810b1fa:	d1a8      	bne.n	810b14e <_strtod_l+0xa0e>
 810b1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810b200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b202:	0d1b      	lsrs	r3, r3, #20
 810b204:	051b      	lsls	r3, r3, #20
 810b206:	429a      	cmp	r2, r3
 810b208:	d1a1      	bne.n	810b14e <_strtod_l+0xa0e>
 810b20a:	4640      	mov	r0, r8
 810b20c:	4649      	mov	r1, r9
 810b20e:	f7f5 fddb 	bl	8100dc8 <__aeabi_d2lz>
 810b212:	f7f5 fa4b 	bl	81006ac <__aeabi_l2d>
 810b216:	4602      	mov	r2, r0
 810b218:	460b      	mov	r3, r1
 810b21a:	4640      	mov	r0, r8
 810b21c:	4649      	mov	r1, r9
 810b21e:	f7f5 f8bb 	bl	8100398 <__aeabi_dsub>
 810b222:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810b224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b228:	ea43 030a 	orr.w	r3, r3, sl
 810b22c:	4313      	orrs	r3, r2
 810b22e:	4680      	mov	r8, r0
 810b230:	4689      	mov	r9, r1
 810b232:	d055      	beq.n	810b2e0 <_strtod_l+0xba0>
 810b234:	a336      	add	r3, pc, #216	; (adr r3, 810b310 <_strtod_l+0xbd0>)
 810b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b23a:	f7f5 fcd7 	bl	8100bec <__aeabi_dcmplt>
 810b23e:	2800      	cmp	r0, #0
 810b240:	f47f acd0 	bne.w	810abe4 <_strtod_l+0x4a4>
 810b244:	a334      	add	r3, pc, #208	; (adr r3, 810b318 <_strtod_l+0xbd8>)
 810b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b24a:	4640      	mov	r0, r8
 810b24c:	4649      	mov	r1, r9
 810b24e:	f7f5 fceb 	bl	8100c28 <__aeabi_dcmpgt>
 810b252:	2800      	cmp	r0, #0
 810b254:	f43f af7b 	beq.w	810b14e <_strtod_l+0xa0e>
 810b258:	e4c4      	b.n	810abe4 <_strtod_l+0x4a4>
 810b25a:	9b04      	ldr	r3, [sp, #16]
 810b25c:	b333      	cbz	r3, 810b2ac <_strtod_l+0xb6c>
 810b25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b260:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810b264:	d822      	bhi.n	810b2ac <_strtod_l+0xb6c>
 810b266:	a32e      	add	r3, pc, #184	; (adr r3, 810b320 <_strtod_l+0xbe0>)
 810b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b26c:	4640      	mov	r0, r8
 810b26e:	4649      	mov	r1, r9
 810b270:	f7f5 fcc6 	bl	8100c00 <__aeabi_dcmple>
 810b274:	b1a0      	cbz	r0, 810b2a0 <_strtod_l+0xb60>
 810b276:	4649      	mov	r1, r9
 810b278:	4640      	mov	r0, r8
 810b27a:	f7f5 fd1d 	bl	8100cb8 <__aeabi_d2uiz>
 810b27e:	2801      	cmp	r0, #1
 810b280:	bf38      	it	cc
 810b282:	2001      	movcc	r0, #1
 810b284:	f7f5 f9c6 	bl	8100614 <__aeabi_ui2d>
 810b288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b28a:	4680      	mov	r8, r0
 810b28c:	4689      	mov	r9, r1
 810b28e:	bb23      	cbnz	r3, 810b2da <_strtod_l+0xb9a>
 810b290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b294:	9010      	str	r0, [sp, #64]	; 0x40
 810b296:	9311      	str	r3, [sp, #68]	; 0x44
 810b298:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810b29c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810b2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b2a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b2a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810b2a8:	1a9b      	subs	r3, r3, r2
 810b2aa:	9309      	str	r3, [sp, #36]	; 0x24
 810b2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810b2b0:	eeb0 0a48 	vmov.f32	s0, s16
 810b2b4:	eef0 0a68 	vmov.f32	s1, s17
 810b2b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810b2bc:	f002 f942 	bl	810d544 <__ulp>
 810b2c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810b2c4:	ec53 2b10 	vmov	r2, r3, d0
 810b2c8:	f7f5 fa1e 	bl	8100708 <__aeabi_dmul>
 810b2cc:	ec53 2b18 	vmov	r2, r3, d8
 810b2d0:	f7f5 f864 	bl	810039c <__adddf3>
 810b2d4:	4682      	mov	sl, r0
 810b2d6:	468b      	mov	fp, r1
 810b2d8:	e78d      	b.n	810b1f6 <_strtod_l+0xab6>
 810b2da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810b2de:	e7db      	b.n	810b298 <_strtod_l+0xb58>
 810b2e0:	a311      	add	r3, pc, #68	; (adr r3, 810b328 <_strtod_l+0xbe8>)
 810b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2e6:	f7f5 fc81 	bl	8100bec <__aeabi_dcmplt>
 810b2ea:	e7b2      	b.n	810b252 <_strtod_l+0xb12>
 810b2ec:	2300      	movs	r3, #0
 810b2ee:	930a      	str	r3, [sp, #40]	; 0x28
 810b2f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810b2f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810b2f4:	6013      	str	r3, [r2, #0]
 810b2f6:	f7ff ba6b 	b.w	810a7d0 <_strtod_l+0x90>
 810b2fa:	2a65      	cmp	r2, #101	; 0x65
 810b2fc:	f43f ab5f 	beq.w	810a9be <_strtod_l+0x27e>
 810b300:	2a45      	cmp	r2, #69	; 0x45
 810b302:	f43f ab5c 	beq.w	810a9be <_strtod_l+0x27e>
 810b306:	2301      	movs	r3, #1
 810b308:	f7ff bb94 	b.w	810aa34 <_strtod_l+0x2f4>
 810b30c:	f3af 8000 	nop.w
 810b310:	94a03595 	.word	0x94a03595
 810b314:	3fdfffff 	.word	0x3fdfffff
 810b318:	35afe535 	.word	0x35afe535
 810b31c:	3fe00000 	.word	0x3fe00000
 810b320:	ffc00000 	.word	0xffc00000
 810b324:	41dfffff 	.word	0x41dfffff
 810b328:	94a03595 	.word	0x94a03595
 810b32c:	3fcfffff 	.word	0x3fcfffff
 810b330:	3ff00000 	.word	0x3ff00000
 810b334:	7ff00000 	.word	0x7ff00000
 810b338:	7fe00000 	.word	0x7fe00000
 810b33c:	7c9fffff 	.word	0x7c9fffff
 810b340:	3fe00000 	.word	0x3fe00000
 810b344:	bff00000 	.word	0xbff00000
 810b348:	7fefffff 	.word	0x7fefffff

0810b34c <_strtod_r>:
 810b34c:	4b01      	ldr	r3, [pc, #4]	; (810b354 <_strtod_r+0x8>)
 810b34e:	f7ff b9f7 	b.w	810a740 <_strtod_l>
 810b352:	bf00      	nop
 810b354:	10000088 	.word	0x10000088

0810b358 <_strtol_l.constprop.0>:
 810b358:	2b01      	cmp	r3, #1
 810b35a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b35e:	d001      	beq.n	810b364 <_strtol_l.constprop.0+0xc>
 810b360:	2b24      	cmp	r3, #36	; 0x24
 810b362:	d906      	bls.n	810b372 <_strtol_l.constprop.0+0x1a>
 810b364:	f7fe f97c 	bl	8109660 <__errno>
 810b368:	2316      	movs	r3, #22
 810b36a:	6003      	str	r3, [r0, #0]
 810b36c:	2000      	movs	r0, #0
 810b36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b372:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810b458 <_strtol_l.constprop.0+0x100>
 810b376:	460d      	mov	r5, r1
 810b378:	462e      	mov	r6, r5
 810b37a:	f815 4b01 	ldrb.w	r4, [r5], #1
 810b37e:	f814 700c 	ldrb.w	r7, [r4, ip]
 810b382:	f017 0708 	ands.w	r7, r7, #8
 810b386:	d1f7      	bne.n	810b378 <_strtol_l.constprop.0+0x20>
 810b388:	2c2d      	cmp	r4, #45	; 0x2d
 810b38a:	d132      	bne.n	810b3f2 <_strtol_l.constprop.0+0x9a>
 810b38c:	782c      	ldrb	r4, [r5, #0]
 810b38e:	2701      	movs	r7, #1
 810b390:	1cb5      	adds	r5, r6, #2
 810b392:	2b00      	cmp	r3, #0
 810b394:	d05b      	beq.n	810b44e <_strtol_l.constprop.0+0xf6>
 810b396:	2b10      	cmp	r3, #16
 810b398:	d109      	bne.n	810b3ae <_strtol_l.constprop.0+0x56>
 810b39a:	2c30      	cmp	r4, #48	; 0x30
 810b39c:	d107      	bne.n	810b3ae <_strtol_l.constprop.0+0x56>
 810b39e:	782c      	ldrb	r4, [r5, #0]
 810b3a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810b3a4:	2c58      	cmp	r4, #88	; 0x58
 810b3a6:	d14d      	bne.n	810b444 <_strtol_l.constprop.0+0xec>
 810b3a8:	786c      	ldrb	r4, [r5, #1]
 810b3aa:	2310      	movs	r3, #16
 810b3ac:	3502      	adds	r5, #2
 810b3ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810b3b2:	f108 38ff 	add.w	r8, r8, #4294967295
 810b3b6:	f04f 0c00 	mov.w	ip, #0
 810b3ba:	fbb8 f9f3 	udiv	r9, r8, r3
 810b3be:	4666      	mov	r6, ip
 810b3c0:	fb03 8a19 	mls	sl, r3, r9, r8
 810b3c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810b3c8:	f1be 0f09 	cmp.w	lr, #9
 810b3cc:	d816      	bhi.n	810b3fc <_strtol_l.constprop.0+0xa4>
 810b3ce:	4674      	mov	r4, lr
 810b3d0:	42a3      	cmp	r3, r4
 810b3d2:	dd24      	ble.n	810b41e <_strtol_l.constprop.0+0xc6>
 810b3d4:	f1bc 0f00 	cmp.w	ip, #0
 810b3d8:	db1e      	blt.n	810b418 <_strtol_l.constprop.0+0xc0>
 810b3da:	45b1      	cmp	r9, r6
 810b3dc:	d31c      	bcc.n	810b418 <_strtol_l.constprop.0+0xc0>
 810b3de:	d101      	bne.n	810b3e4 <_strtol_l.constprop.0+0x8c>
 810b3e0:	45a2      	cmp	sl, r4
 810b3e2:	db19      	blt.n	810b418 <_strtol_l.constprop.0+0xc0>
 810b3e4:	fb06 4603 	mla	r6, r6, r3, r4
 810b3e8:	f04f 0c01 	mov.w	ip, #1
 810b3ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 810b3f0:	e7e8      	b.n	810b3c4 <_strtol_l.constprop.0+0x6c>
 810b3f2:	2c2b      	cmp	r4, #43	; 0x2b
 810b3f4:	bf04      	itt	eq
 810b3f6:	782c      	ldrbeq	r4, [r5, #0]
 810b3f8:	1cb5      	addeq	r5, r6, #2
 810b3fa:	e7ca      	b.n	810b392 <_strtol_l.constprop.0+0x3a>
 810b3fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810b400:	f1be 0f19 	cmp.w	lr, #25
 810b404:	d801      	bhi.n	810b40a <_strtol_l.constprop.0+0xb2>
 810b406:	3c37      	subs	r4, #55	; 0x37
 810b408:	e7e2      	b.n	810b3d0 <_strtol_l.constprop.0+0x78>
 810b40a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810b40e:	f1be 0f19 	cmp.w	lr, #25
 810b412:	d804      	bhi.n	810b41e <_strtol_l.constprop.0+0xc6>
 810b414:	3c57      	subs	r4, #87	; 0x57
 810b416:	e7db      	b.n	810b3d0 <_strtol_l.constprop.0+0x78>
 810b418:	f04f 3cff 	mov.w	ip, #4294967295
 810b41c:	e7e6      	b.n	810b3ec <_strtol_l.constprop.0+0x94>
 810b41e:	f1bc 0f00 	cmp.w	ip, #0
 810b422:	da05      	bge.n	810b430 <_strtol_l.constprop.0+0xd8>
 810b424:	2322      	movs	r3, #34	; 0x22
 810b426:	6003      	str	r3, [r0, #0]
 810b428:	4646      	mov	r6, r8
 810b42a:	b942      	cbnz	r2, 810b43e <_strtol_l.constprop.0+0xe6>
 810b42c:	4630      	mov	r0, r6
 810b42e:	e79e      	b.n	810b36e <_strtol_l.constprop.0+0x16>
 810b430:	b107      	cbz	r7, 810b434 <_strtol_l.constprop.0+0xdc>
 810b432:	4276      	negs	r6, r6
 810b434:	2a00      	cmp	r2, #0
 810b436:	d0f9      	beq.n	810b42c <_strtol_l.constprop.0+0xd4>
 810b438:	f1bc 0f00 	cmp.w	ip, #0
 810b43c:	d000      	beq.n	810b440 <_strtol_l.constprop.0+0xe8>
 810b43e:	1e69      	subs	r1, r5, #1
 810b440:	6011      	str	r1, [r2, #0]
 810b442:	e7f3      	b.n	810b42c <_strtol_l.constprop.0+0xd4>
 810b444:	2430      	movs	r4, #48	; 0x30
 810b446:	2b00      	cmp	r3, #0
 810b448:	d1b1      	bne.n	810b3ae <_strtol_l.constprop.0+0x56>
 810b44a:	2308      	movs	r3, #8
 810b44c:	e7af      	b.n	810b3ae <_strtol_l.constprop.0+0x56>
 810b44e:	2c30      	cmp	r4, #48	; 0x30
 810b450:	d0a5      	beq.n	810b39e <_strtol_l.constprop.0+0x46>
 810b452:	230a      	movs	r3, #10
 810b454:	e7ab      	b.n	810b3ae <_strtol_l.constprop.0+0x56>
 810b456:	bf00      	nop
 810b458:	0810e341 	.word	0x0810e341

0810b45c <_strtol_r>:
 810b45c:	f7ff bf7c 	b.w	810b358 <_strtol_l.constprop.0>

0810b460 <__swbuf_r>:
 810b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b462:	460e      	mov	r6, r1
 810b464:	4614      	mov	r4, r2
 810b466:	4605      	mov	r5, r0
 810b468:	b118      	cbz	r0, 810b472 <__swbuf_r+0x12>
 810b46a:	6983      	ldr	r3, [r0, #24]
 810b46c:	b90b      	cbnz	r3, 810b472 <__swbuf_r+0x12>
 810b46e:	f001 f84b 	bl	810c508 <__sinit>
 810b472:	4b21      	ldr	r3, [pc, #132]	; (810b4f8 <__swbuf_r+0x98>)
 810b474:	429c      	cmp	r4, r3
 810b476:	d12b      	bne.n	810b4d0 <__swbuf_r+0x70>
 810b478:	686c      	ldr	r4, [r5, #4]
 810b47a:	69a3      	ldr	r3, [r4, #24]
 810b47c:	60a3      	str	r3, [r4, #8]
 810b47e:	89a3      	ldrh	r3, [r4, #12]
 810b480:	071a      	lsls	r2, r3, #28
 810b482:	d52f      	bpl.n	810b4e4 <__swbuf_r+0x84>
 810b484:	6923      	ldr	r3, [r4, #16]
 810b486:	b36b      	cbz	r3, 810b4e4 <__swbuf_r+0x84>
 810b488:	6923      	ldr	r3, [r4, #16]
 810b48a:	6820      	ldr	r0, [r4, #0]
 810b48c:	1ac0      	subs	r0, r0, r3
 810b48e:	6963      	ldr	r3, [r4, #20]
 810b490:	b2f6      	uxtb	r6, r6
 810b492:	4283      	cmp	r3, r0
 810b494:	4637      	mov	r7, r6
 810b496:	dc04      	bgt.n	810b4a2 <__swbuf_r+0x42>
 810b498:	4621      	mov	r1, r4
 810b49a:	4628      	mov	r0, r5
 810b49c:	f000 ffa0 	bl	810c3e0 <_fflush_r>
 810b4a0:	bb30      	cbnz	r0, 810b4f0 <__swbuf_r+0x90>
 810b4a2:	68a3      	ldr	r3, [r4, #8]
 810b4a4:	3b01      	subs	r3, #1
 810b4a6:	60a3      	str	r3, [r4, #8]
 810b4a8:	6823      	ldr	r3, [r4, #0]
 810b4aa:	1c5a      	adds	r2, r3, #1
 810b4ac:	6022      	str	r2, [r4, #0]
 810b4ae:	701e      	strb	r6, [r3, #0]
 810b4b0:	6963      	ldr	r3, [r4, #20]
 810b4b2:	3001      	adds	r0, #1
 810b4b4:	4283      	cmp	r3, r0
 810b4b6:	d004      	beq.n	810b4c2 <__swbuf_r+0x62>
 810b4b8:	89a3      	ldrh	r3, [r4, #12]
 810b4ba:	07db      	lsls	r3, r3, #31
 810b4bc:	d506      	bpl.n	810b4cc <__swbuf_r+0x6c>
 810b4be:	2e0a      	cmp	r6, #10
 810b4c0:	d104      	bne.n	810b4cc <__swbuf_r+0x6c>
 810b4c2:	4621      	mov	r1, r4
 810b4c4:	4628      	mov	r0, r5
 810b4c6:	f000 ff8b 	bl	810c3e0 <_fflush_r>
 810b4ca:	b988      	cbnz	r0, 810b4f0 <__swbuf_r+0x90>
 810b4cc:	4638      	mov	r0, r7
 810b4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b4d0:	4b0a      	ldr	r3, [pc, #40]	; (810b4fc <__swbuf_r+0x9c>)
 810b4d2:	429c      	cmp	r4, r3
 810b4d4:	d101      	bne.n	810b4da <__swbuf_r+0x7a>
 810b4d6:	68ac      	ldr	r4, [r5, #8]
 810b4d8:	e7cf      	b.n	810b47a <__swbuf_r+0x1a>
 810b4da:	4b09      	ldr	r3, [pc, #36]	; (810b500 <__swbuf_r+0xa0>)
 810b4dc:	429c      	cmp	r4, r3
 810b4de:	bf08      	it	eq
 810b4e0:	68ec      	ldreq	r4, [r5, #12]
 810b4e2:	e7ca      	b.n	810b47a <__swbuf_r+0x1a>
 810b4e4:	4621      	mov	r1, r4
 810b4e6:	4628      	mov	r0, r5
 810b4e8:	f000 f80c 	bl	810b504 <__swsetup_r>
 810b4ec:	2800      	cmp	r0, #0
 810b4ee:	d0cb      	beq.n	810b488 <__swbuf_r+0x28>
 810b4f0:	f04f 37ff 	mov.w	r7, #4294967295
 810b4f4:	e7ea      	b.n	810b4cc <__swbuf_r+0x6c>
 810b4f6:	bf00      	nop
 810b4f8:	0810e4f4 	.word	0x0810e4f4
 810b4fc:	0810e514 	.word	0x0810e514
 810b500:	0810e4d4 	.word	0x0810e4d4

0810b504 <__swsetup_r>:
 810b504:	4b32      	ldr	r3, [pc, #200]	; (810b5d0 <__swsetup_r+0xcc>)
 810b506:	b570      	push	{r4, r5, r6, lr}
 810b508:	681d      	ldr	r5, [r3, #0]
 810b50a:	4606      	mov	r6, r0
 810b50c:	460c      	mov	r4, r1
 810b50e:	b125      	cbz	r5, 810b51a <__swsetup_r+0x16>
 810b510:	69ab      	ldr	r3, [r5, #24]
 810b512:	b913      	cbnz	r3, 810b51a <__swsetup_r+0x16>
 810b514:	4628      	mov	r0, r5
 810b516:	f000 fff7 	bl	810c508 <__sinit>
 810b51a:	4b2e      	ldr	r3, [pc, #184]	; (810b5d4 <__swsetup_r+0xd0>)
 810b51c:	429c      	cmp	r4, r3
 810b51e:	d10f      	bne.n	810b540 <__swsetup_r+0x3c>
 810b520:	686c      	ldr	r4, [r5, #4]
 810b522:	89a3      	ldrh	r3, [r4, #12]
 810b524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b528:	0719      	lsls	r1, r3, #28
 810b52a:	d42c      	bmi.n	810b586 <__swsetup_r+0x82>
 810b52c:	06dd      	lsls	r5, r3, #27
 810b52e:	d411      	bmi.n	810b554 <__swsetup_r+0x50>
 810b530:	2309      	movs	r3, #9
 810b532:	6033      	str	r3, [r6, #0]
 810b534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b538:	81a3      	strh	r3, [r4, #12]
 810b53a:	f04f 30ff 	mov.w	r0, #4294967295
 810b53e:	e03e      	b.n	810b5be <__swsetup_r+0xba>
 810b540:	4b25      	ldr	r3, [pc, #148]	; (810b5d8 <__swsetup_r+0xd4>)
 810b542:	429c      	cmp	r4, r3
 810b544:	d101      	bne.n	810b54a <__swsetup_r+0x46>
 810b546:	68ac      	ldr	r4, [r5, #8]
 810b548:	e7eb      	b.n	810b522 <__swsetup_r+0x1e>
 810b54a:	4b24      	ldr	r3, [pc, #144]	; (810b5dc <__swsetup_r+0xd8>)
 810b54c:	429c      	cmp	r4, r3
 810b54e:	bf08      	it	eq
 810b550:	68ec      	ldreq	r4, [r5, #12]
 810b552:	e7e6      	b.n	810b522 <__swsetup_r+0x1e>
 810b554:	0758      	lsls	r0, r3, #29
 810b556:	d512      	bpl.n	810b57e <__swsetup_r+0x7a>
 810b558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b55a:	b141      	cbz	r1, 810b56e <__swsetup_r+0x6a>
 810b55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b560:	4299      	cmp	r1, r3
 810b562:	d002      	beq.n	810b56a <__swsetup_r+0x66>
 810b564:	4630      	mov	r0, r6
 810b566:	f002 f93d 	bl	810d7e4 <_free_r>
 810b56a:	2300      	movs	r3, #0
 810b56c:	6363      	str	r3, [r4, #52]	; 0x34
 810b56e:	89a3      	ldrh	r3, [r4, #12]
 810b570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b574:	81a3      	strh	r3, [r4, #12]
 810b576:	2300      	movs	r3, #0
 810b578:	6063      	str	r3, [r4, #4]
 810b57a:	6923      	ldr	r3, [r4, #16]
 810b57c:	6023      	str	r3, [r4, #0]
 810b57e:	89a3      	ldrh	r3, [r4, #12]
 810b580:	f043 0308 	orr.w	r3, r3, #8
 810b584:	81a3      	strh	r3, [r4, #12]
 810b586:	6923      	ldr	r3, [r4, #16]
 810b588:	b94b      	cbnz	r3, 810b59e <__swsetup_r+0x9a>
 810b58a:	89a3      	ldrh	r3, [r4, #12]
 810b58c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b594:	d003      	beq.n	810b59e <__swsetup_r+0x9a>
 810b596:	4621      	mov	r1, r4
 810b598:	4630      	mov	r0, r6
 810b59a:	f001 fbed 	bl	810cd78 <__smakebuf_r>
 810b59e:	89a0      	ldrh	r0, [r4, #12]
 810b5a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b5a4:	f010 0301 	ands.w	r3, r0, #1
 810b5a8:	d00a      	beq.n	810b5c0 <__swsetup_r+0xbc>
 810b5aa:	2300      	movs	r3, #0
 810b5ac:	60a3      	str	r3, [r4, #8]
 810b5ae:	6963      	ldr	r3, [r4, #20]
 810b5b0:	425b      	negs	r3, r3
 810b5b2:	61a3      	str	r3, [r4, #24]
 810b5b4:	6923      	ldr	r3, [r4, #16]
 810b5b6:	b943      	cbnz	r3, 810b5ca <__swsetup_r+0xc6>
 810b5b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b5bc:	d1ba      	bne.n	810b534 <__swsetup_r+0x30>
 810b5be:	bd70      	pop	{r4, r5, r6, pc}
 810b5c0:	0781      	lsls	r1, r0, #30
 810b5c2:	bf58      	it	pl
 810b5c4:	6963      	ldrpl	r3, [r4, #20]
 810b5c6:	60a3      	str	r3, [r4, #8]
 810b5c8:	e7f4      	b.n	810b5b4 <__swsetup_r+0xb0>
 810b5ca:	2000      	movs	r0, #0
 810b5cc:	e7f7      	b.n	810b5be <__swsetup_r+0xba>
 810b5ce:	bf00      	nop
 810b5d0:	10000020 	.word	0x10000020
 810b5d4:	0810e4f4 	.word	0x0810e4f4
 810b5d8:	0810e514 	.word	0x0810e514
 810b5dc:	0810e4d4 	.word	0x0810e4d4

0810b5e0 <quorem>:
 810b5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b5e4:	6903      	ldr	r3, [r0, #16]
 810b5e6:	690c      	ldr	r4, [r1, #16]
 810b5e8:	42a3      	cmp	r3, r4
 810b5ea:	4607      	mov	r7, r0
 810b5ec:	f2c0 8081 	blt.w	810b6f2 <quorem+0x112>
 810b5f0:	3c01      	subs	r4, #1
 810b5f2:	f101 0814 	add.w	r8, r1, #20
 810b5f6:	f100 0514 	add.w	r5, r0, #20
 810b5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b5fe:	9301      	str	r3, [sp, #4]
 810b600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810b604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b608:	3301      	adds	r3, #1
 810b60a:	429a      	cmp	r2, r3
 810b60c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810b610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810b614:	fbb2 f6f3 	udiv	r6, r2, r3
 810b618:	d331      	bcc.n	810b67e <quorem+0x9e>
 810b61a:	f04f 0e00 	mov.w	lr, #0
 810b61e:	4640      	mov	r0, r8
 810b620:	46ac      	mov	ip, r5
 810b622:	46f2      	mov	sl, lr
 810b624:	f850 2b04 	ldr.w	r2, [r0], #4
 810b628:	b293      	uxth	r3, r2
 810b62a:	fb06 e303 	mla	r3, r6, r3, lr
 810b62e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810b632:	b29b      	uxth	r3, r3
 810b634:	ebaa 0303 	sub.w	r3, sl, r3
 810b638:	f8dc a000 	ldr.w	sl, [ip]
 810b63c:	0c12      	lsrs	r2, r2, #16
 810b63e:	fa13 f38a 	uxtah	r3, r3, sl
 810b642:	fb06 e202 	mla	r2, r6, r2, lr
 810b646:	9300      	str	r3, [sp, #0]
 810b648:	9b00      	ldr	r3, [sp, #0]
 810b64a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810b64e:	b292      	uxth	r2, r2
 810b650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810b654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b658:	f8bd 3000 	ldrh.w	r3, [sp]
 810b65c:	4581      	cmp	r9, r0
 810b65e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b662:	f84c 3b04 	str.w	r3, [ip], #4
 810b666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810b66a:	d2db      	bcs.n	810b624 <quorem+0x44>
 810b66c:	f855 300b 	ldr.w	r3, [r5, fp]
 810b670:	b92b      	cbnz	r3, 810b67e <quorem+0x9e>
 810b672:	9b01      	ldr	r3, [sp, #4]
 810b674:	3b04      	subs	r3, #4
 810b676:	429d      	cmp	r5, r3
 810b678:	461a      	mov	r2, r3
 810b67a:	d32e      	bcc.n	810b6da <quorem+0xfa>
 810b67c:	613c      	str	r4, [r7, #16]
 810b67e:	4638      	mov	r0, r7
 810b680:	f001 feba 	bl	810d3f8 <__mcmp>
 810b684:	2800      	cmp	r0, #0
 810b686:	db24      	blt.n	810b6d2 <quorem+0xf2>
 810b688:	3601      	adds	r6, #1
 810b68a:	4628      	mov	r0, r5
 810b68c:	f04f 0c00 	mov.w	ip, #0
 810b690:	f858 2b04 	ldr.w	r2, [r8], #4
 810b694:	f8d0 e000 	ldr.w	lr, [r0]
 810b698:	b293      	uxth	r3, r2
 810b69a:	ebac 0303 	sub.w	r3, ip, r3
 810b69e:	0c12      	lsrs	r2, r2, #16
 810b6a0:	fa13 f38e 	uxtah	r3, r3, lr
 810b6a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810b6a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b6ac:	b29b      	uxth	r3, r3
 810b6ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b6b2:	45c1      	cmp	r9, r8
 810b6b4:	f840 3b04 	str.w	r3, [r0], #4
 810b6b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810b6bc:	d2e8      	bcs.n	810b690 <quorem+0xb0>
 810b6be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b6c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b6c6:	b922      	cbnz	r2, 810b6d2 <quorem+0xf2>
 810b6c8:	3b04      	subs	r3, #4
 810b6ca:	429d      	cmp	r5, r3
 810b6cc:	461a      	mov	r2, r3
 810b6ce:	d30a      	bcc.n	810b6e6 <quorem+0x106>
 810b6d0:	613c      	str	r4, [r7, #16]
 810b6d2:	4630      	mov	r0, r6
 810b6d4:	b003      	add	sp, #12
 810b6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b6da:	6812      	ldr	r2, [r2, #0]
 810b6dc:	3b04      	subs	r3, #4
 810b6de:	2a00      	cmp	r2, #0
 810b6e0:	d1cc      	bne.n	810b67c <quorem+0x9c>
 810b6e2:	3c01      	subs	r4, #1
 810b6e4:	e7c7      	b.n	810b676 <quorem+0x96>
 810b6e6:	6812      	ldr	r2, [r2, #0]
 810b6e8:	3b04      	subs	r3, #4
 810b6ea:	2a00      	cmp	r2, #0
 810b6ec:	d1f0      	bne.n	810b6d0 <quorem+0xf0>
 810b6ee:	3c01      	subs	r4, #1
 810b6f0:	e7eb      	b.n	810b6ca <quorem+0xea>
 810b6f2:	2000      	movs	r0, #0
 810b6f4:	e7ee      	b.n	810b6d4 <quorem+0xf4>
	...

0810b6f8 <_dtoa_r>:
 810b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b6fc:	ed2d 8b04 	vpush	{d8-d9}
 810b700:	ec57 6b10 	vmov	r6, r7, d0
 810b704:	b093      	sub	sp, #76	; 0x4c
 810b706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810b708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810b70c:	9106      	str	r1, [sp, #24]
 810b70e:	ee10 aa10 	vmov	sl, s0
 810b712:	4604      	mov	r4, r0
 810b714:	9209      	str	r2, [sp, #36]	; 0x24
 810b716:	930c      	str	r3, [sp, #48]	; 0x30
 810b718:	46bb      	mov	fp, r7
 810b71a:	b975      	cbnz	r5, 810b73a <_dtoa_r+0x42>
 810b71c:	2010      	movs	r0, #16
 810b71e:	f001 fb6b 	bl	810cdf8 <malloc>
 810b722:	4602      	mov	r2, r0
 810b724:	6260      	str	r0, [r4, #36]	; 0x24
 810b726:	b920      	cbnz	r0, 810b732 <_dtoa_r+0x3a>
 810b728:	4ba7      	ldr	r3, [pc, #668]	; (810b9c8 <_dtoa_r+0x2d0>)
 810b72a:	21ea      	movs	r1, #234	; 0xea
 810b72c:	48a7      	ldr	r0, [pc, #668]	; (810b9cc <_dtoa_r+0x2d4>)
 810b72e:	f002 fc51 	bl	810dfd4 <__assert_func>
 810b732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810b736:	6005      	str	r5, [r0, #0]
 810b738:	60c5      	str	r5, [r0, #12]
 810b73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b73c:	6819      	ldr	r1, [r3, #0]
 810b73e:	b151      	cbz	r1, 810b756 <_dtoa_r+0x5e>
 810b740:	685a      	ldr	r2, [r3, #4]
 810b742:	604a      	str	r2, [r1, #4]
 810b744:	2301      	movs	r3, #1
 810b746:	4093      	lsls	r3, r2
 810b748:	608b      	str	r3, [r1, #8]
 810b74a:	4620      	mov	r0, r4
 810b74c:	f001 fbc8 	bl	810cee0 <_Bfree>
 810b750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b752:	2200      	movs	r2, #0
 810b754:	601a      	str	r2, [r3, #0]
 810b756:	1e3b      	subs	r3, r7, #0
 810b758:	bfaa      	itet	ge
 810b75a:	2300      	movge	r3, #0
 810b75c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810b760:	f8c8 3000 	strge.w	r3, [r8]
 810b764:	4b9a      	ldr	r3, [pc, #616]	; (810b9d0 <_dtoa_r+0x2d8>)
 810b766:	bfbc      	itt	lt
 810b768:	2201      	movlt	r2, #1
 810b76a:	f8c8 2000 	strlt.w	r2, [r8]
 810b76e:	ea33 030b 	bics.w	r3, r3, fp
 810b772:	d11b      	bne.n	810b7ac <_dtoa_r+0xb4>
 810b774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810b776:	f242 730f 	movw	r3, #9999	; 0x270f
 810b77a:	6013      	str	r3, [r2, #0]
 810b77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b780:	4333      	orrs	r3, r6
 810b782:	f000 8592 	beq.w	810c2aa <_dtoa_r+0xbb2>
 810b786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b788:	b963      	cbnz	r3, 810b7a4 <_dtoa_r+0xac>
 810b78a:	4b92      	ldr	r3, [pc, #584]	; (810b9d4 <_dtoa_r+0x2dc>)
 810b78c:	e022      	b.n	810b7d4 <_dtoa_r+0xdc>
 810b78e:	4b92      	ldr	r3, [pc, #584]	; (810b9d8 <_dtoa_r+0x2e0>)
 810b790:	9301      	str	r3, [sp, #4]
 810b792:	3308      	adds	r3, #8
 810b794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b796:	6013      	str	r3, [r2, #0]
 810b798:	9801      	ldr	r0, [sp, #4]
 810b79a:	b013      	add	sp, #76	; 0x4c
 810b79c:	ecbd 8b04 	vpop	{d8-d9}
 810b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b7a4:	4b8b      	ldr	r3, [pc, #556]	; (810b9d4 <_dtoa_r+0x2dc>)
 810b7a6:	9301      	str	r3, [sp, #4]
 810b7a8:	3303      	adds	r3, #3
 810b7aa:	e7f3      	b.n	810b794 <_dtoa_r+0x9c>
 810b7ac:	2200      	movs	r2, #0
 810b7ae:	2300      	movs	r3, #0
 810b7b0:	4650      	mov	r0, sl
 810b7b2:	4659      	mov	r1, fp
 810b7b4:	f7f5 fa10 	bl	8100bd8 <__aeabi_dcmpeq>
 810b7b8:	ec4b ab19 	vmov	d9, sl, fp
 810b7bc:	4680      	mov	r8, r0
 810b7be:	b158      	cbz	r0, 810b7d8 <_dtoa_r+0xe0>
 810b7c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810b7c2:	2301      	movs	r3, #1
 810b7c4:	6013      	str	r3, [r2, #0]
 810b7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b7c8:	2b00      	cmp	r3, #0
 810b7ca:	f000 856b 	beq.w	810c2a4 <_dtoa_r+0xbac>
 810b7ce:	4883      	ldr	r0, [pc, #524]	; (810b9dc <_dtoa_r+0x2e4>)
 810b7d0:	6018      	str	r0, [r3, #0]
 810b7d2:	1e43      	subs	r3, r0, #1
 810b7d4:	9301      	str	r3, [sp, #4]
 810b7d6:	e7df      	b.n	810b798 <_dtoa_r+0xa0>
 810b7d8:	ec4b ab10 	vmov	d0, sl, fp
 810b7dc:	aa10      	add	r2, sp, #64	; 0x40
 810b7de:	a911      	add	r1, sp, #68	; 0x44
 810b7e0:	4620      	mov	r0, r4
 810b7e2:	f001 ff2b 	bl	810d63c <__d2b>
 810b7e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810b7ea:	ee08 0a10 	vmov	s16, r0
 810b7ee:	2d00      	cmp	r5, #0
 810b7f0:	f000 8084 	beq.w	810b8fc <_dtoa_r+0x204>
 810b7f4:	ee19 3a90 	vmov	r3, s19
 810b7f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b7fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810b800:	4656      	mov	r6, sl
 810b802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810b806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810b80a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810b80e:	4b74      	ldr	r3, [pc, #464]	; (810b9e0 <_dtoa_r+0x2e8>)
 810b810:	2200      	movs	r2, #0
 810b812:	4630      	mov	r0, r6
 810b814:	4639      	mov	r1, r7
 810b816:	f7f4 fdbf 	bl	8100398 <__aeabi_dsub>
 810b81a:	a365      	add	r3, pc, #404	; (adr r3, 810b9b0 <_dtoa_r+0x2b8>)
 810b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b820:	f7f4 ff72 	bl	8100708 <__aeabi_dmul>
 810b824:	a364      	add	r3, pc, #400	; (adr r3, 810b9b8 <_dtoa_r+0x2c0>)
 810b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b82a:	f7f4 fdb7 	bl	810039c <__adddf3>
 810b82e:	4606      	mov	r6, r0
 810b830:	4628      	mov	r0, r5
 810b832:	460f      	mov	r7, r1
 810b834:	f7f4 fefe 	bl	8100634 <__aeabi_i2d>
 810b838:	a361      	add	r3, pc, #388	; (adr r3, 810b9c0 <_dtoa_r+0x2c8>)
 810b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b83e:	f7f4 ff63 	bl	8100708 <__aeabi_dmul>
 810b842:	4602      	mov	r2, r0
 810b844:	460b      	mov	r3, r1
 810b846:	4630      	mov	r0, r6
 810b848:	4639      	mov	r1, r7
 810b84a:	f7f4 fda7 	bl	810039c <__adddf3>
 810b84e:	4606      	mov	r6, r0
 810b850:	460f      	mov	r7, r1
 810b852:	f7f5 fa09 	bl	8100c68 <__aeabi_d2iz>
 810b856:	2200      	movs	r2, #0
 810b858:	9000      	str	r0, [sp, #0]
 810b85a:	2300      	movs	r3, #0
 810b85c:	4630      	mov	r0, r6
 810b85e:	4639      	mov	r1, r7
 810b860:	f7f5 f9c4 	bl	8100bec <__aeabi_dcmplt>
 810b864:	b150      	cbz	r0, 810b87c <_dtoa_r+0x184>
 810b866:	9800      	ldr	r0, [sp, #0]
 810b868:	f7f4 fee4 	bl	8100634 <__aeabi_i2d>
 810b86c:	4632      	mov	r2, r6
 810b86e:	463b      	mov	r3, r7
 810b870:	f7f5 f9b2 	bl	8100bd8 <__aeabi_dcmpeq>
 810b874:	b910      	cbnz	r0, 810b87c <_dtoa_r+0x184>
 810b876:	9b00      	ldr	r3, [sp, #0]
 810b878:	3b01      	subs	r3, #1
 810b87a:	9300      	str	r3, [sp, #0]
 810b87c:	9b00      	ldr	r3, [sp, #0]
 810b87e:	2b16      	cmp	r3, #22
 810b880:	d85a      	bhi.n	810b938 <_dtoa_r+0x240>
 810b882:	9a00      	ldr	r2, [sp, #0]
 810b884:	4b57      	ldr	r3, [pc, #348]	; (810b9e4 <_dtoa_r+0x2ec>)
 810b886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b88e:	ec51 0b19 	vmov	r0, r1, d9
 810b892:	f7f5 f9ab 	bl	8100bec <__aeabi_dcmplt>
 810b896:	2800      	cmp	r0, #0
 810b898:	d050      	beq.n	810b93c <_dtoa_r+0x244>
 810b89a:	9b00      	ldr	r3, [sp, #0]
 810b89c:	3b01      	subs	r3, #1
 810b89e:	9300      	str	r3, [sp, #0]
 810b8a0:	2300      	movs	r3, #0
 810b8a2:	930b      	str	r3, [sp, #44]	; 0x2c
 810b8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b8a6:	1b5d      	subs	r5, r3, r5
 810b8a8:	1e6b      	subs	r3, r5, #1
 810b8aa:	9305      	str	r3, [sp, #20]
 810b8ac:	bf45      	ittet	mi
 810b8ae:	f1c5 0301 	rsbmi	r3, r5, #1
 810b8b2:	9304      	strmi	r3, [sp, #16]
 810b8b4:	2300      	movpl	r3, #0
 810b8b6:	2300      	movmi	r3, #0
 810b8b8:	bf4c      	ite	mi
 810b8ba:	9305      	strmi	r3, [sp, #20]
 810b8bc:	9304      	strpl	r3, [sp, #16]
 810b8be:	9b00      	ldr	r3, [sp, #0]
 810b8c0:	2b00      	cmp	r3, #0
 810b8c2:	db3d      	blt.n	810b940 <_dtoa_r+0x248>
 810b8c4:	9b05      	ldr	r3, [sp, #20]
 810b8c6:	9a00      	ldr	r2, [sp, #0]
 810b8c8:	920a      	str	r2, [sp, #40]	; 0x28
 810b8ca:	4413      	add	r3, r2
 810b8cc:	9305      	str	r3, [sp, #20]
 810b8ce:	2300      	movs	r3, #0
 810b8d0:	9307      	str	r3, [sp, #28]
 810b8d2:	9b06      	ldr	r3, [sp, #24]
 810b8d4:	2b09      	cmp	r3, #9
 810b8d6:	f200 8089 	bhi.w	810b9ec <_dtoa_r+0x2f4>
 810b8da:	2b05      	cmp	r3, #5
 810b8dc:	bfc4      	itt	gt
 810b8de:	3b04      	subgt	r3, #4
 810b8e0:	9306      	strgt	r3, [sp, #24]
 810b8e2:	9b06      	ldr	r3, [sp, #24]
 810b8e4:	f1a3 0302 	sub.w	r3, r3, #2
 810b8e8:	bfcc      	ite	gt
 810b8ea:	2500      	movgt	r5, #0
 810b8ec:	2501      	movle	r5, #1
 810b8ee:	2b03      	cmp	r3, #3
 810b8f0:	f200 8087 	bhi.w	810ba02 <_dtoa_r+0x30a>
 810b8f4:	e8df f003 	tbb	[pc, r3]
 810b8f8:	59383a2d 	.word	0x59383a2d
 810b8fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b900:	441d      	add	r5, r3
 810b902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b906:	2b20      	cmp	r3, #32
 810b908:	bfc1      	itttt	gt
 810b90a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b90e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810b912:	fa0b f303 	lslgt.w	r3, fp, r3
 810b916:	fa26 f000 	lsrgt.w	r0, r6, r0
 810b91a:	bfda      	itte	le
 810b91c:	f1c3 0320 	rsble	r3, r3, #32
 810b920:	fa06 f003 	lslle.w	r0, r6, r3
 810b924:	4318      	orrgt	r0, r3
 810b926:	f7f4 fe75 	bl	8100614 <__aeabi_ui2d>
 810b92a:	2301      	movs	r3, #1
 810b92c:	4606      	mov	r6, r0
 810b92e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810b932:	3d01      	subs	r5, #1
 810b934:	930e      	str	r3, [sp, #56]	; 0x38
 810b936:	e76a      	b.n	810b80e <_dtoa_r+0x116>
 810b938:	2301      	movs	r3, #1
 810b93a:	e7b2      	b.n	810b8a2 <_dtoa_r+0x1aa>
 810b93c:	900b      	str	r0, [sp, #44]	; 0x2c
 810b93e:	e7b1      	b.n	810b8a4 <_dtoa_r+0x1ac>
 810b940:	9b04      	ldr	r3, [sp, #16]
 810b942:	9a00      	ldr	r2, [sp, #0]
 810b944:	1a9b      	subs	r3, r3, r2
 810b946:	9304      	str	r3, [sp, #16]
 810b948:	4253      	negs	r3, r2
 810b94a:	9307      	str	r3, [sp, #28]
 810b94c:	2300      	movs	r3, #0
 810b94e:	930a      	str	r3, [sp, #40]	; 0x28
 810b950:	e7bf      	b.n	810b8d2 <_dtoa_r+0x1da>
 810b952:	2300      	movs	r3, #0
 810b954:	9308      	str	r3, [sp, #32]
 810b956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b958:	2b00      	cmp	r3, #0
 810b95a:	dc55      	bgt.n	810ba08 <_dtoa_r+0x310>
 810b95c:	2301      	movs	r3, #1
 810b95e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b962:	461a      	mov	r2, r3
 810b964:	9209      	str	r2, [sp, #36]	; 0x24
 810b966:	e00c      	b.n	810b982 <_dtoa_r+0x28a>
 810b968:	2301      	movs	r3, #1
 810b96a:	e7f3      	b.n	810b954 <_dtoa_r+0x25c>
 810b96c:	2300      	movs	r3, #0
 810b96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b970:	9308      	str	r3, [sp, #32]
 810b972:	9b00      	ldr	r3, [sp, #0]
 810b974:	4413      	add	r3, r2
 810b976:	9302      	str	r3, [sp, #8]
 810b978:	3301      	adds	r3, #1
 810b97a:	2b01      	cmp	r3, #1
 810b97c:	9303      	str	r3, [sp, #12]
 810b97e:	bfb8      	it	lt
 810b980:	2301      	movlt	r3, #1
 810b982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810b984:	2200      	movs	r2, #0
 810b986:	6042      	str	r2, [r0, #4]
 810b988:	2204      	movs	r2, #4
 810b98a:	f102 0614 	add.w	r6, r2, #20
 810b98e:	429e      	cmp	r6, r3
 810b990:	6841      	ldr	r1, [r0, #4]
 810b992:	d93d      	bls.n	810ba10 <_dtoa_r+0x318>
 810b994:	4620      	mov	r0, r4
 810b996:	f001 fa63 	bl	810ce60 <_Balloc>
 810b99a:	9001      	str	r0, [sp, #4]
 810b99c:	2800      	cmp	r0, #0
 810b99e:	d13b      	bne.n	810ba18 <_dtoa_r+0x320>
 810b9a0:	4b11      	ldr	r3, [pc, #68]	; (810b9e8 <_dtoa_r+0x2f0>)
 810b9a2:	4602      	mov	r2, r0
 810b9a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810b9a8:	e6c0      	b.n	810b72c <_dtoa_r+0x34>
 810b9aa:	2301      	movs	r3, #1
 810b9ac:	e7df      	b.n	810b96e <_dtoa_r+0x276>
 810b9ae:	bf00      	nop
 810b9b0:	636f4361 	.word	0x636f4361
 810b9b4:	3fd287a7 	.word	0x3fd287a7
 810b9b8:	8b60c8b3 	.word	0x8b60c8b3
 810b9bc:	3fc68a28 	.word	0x3fc68a28
 810b9c0:	509f79fb 	.word	0x509f79fb
 810b9c4:	3fd34413 	.word	0x3fd34413
 810b9c8:	0810e44e 	.word	0x0810e44e
 810b9cc:	0810e465 	.word	0x0810e465
 810b9d0:	7ff00000 	.word	0x7ff00000
 810b9d4:	0810e44a 	.word	0x0810e44a
 810b9d8:	0810e441 	.word	0x0810e441
 810b9dc:	0810e2c1 	.word	0x0810e2c1
 810b9e0:	3ff80000 	.word	0x3ff80000
 810b9e4:	0810e638 	.word	0x0810e638
 810b9e8:	0810e4c0 	.word	0x0810e4c0
 810b9ec:	2501      	movs	r5, #1
 810b9ee:	2300      	movs	r3, #0
 810b9f0:	9306      	str	r3, [sp, #24]
 810b9f2:	9508      	str	r5, [sp, #32]
 810b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 810b9f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b9fc:	2200      	movs	r2, #0
 810b9fe:	2312      	movs	r3, #18
 810ba00:	e7b0      	b.n	810b964 <_dtoa_r+0x26c>
 810ba02:	2301      	movs	r3, #1
 810ba04:	9308      	str	r3, [sp, #32]
 810ba06:	e7f5      	b.n	810b9f4 <_dtoa_r+0x2fc>
 810ba08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ba0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810ba0e:	e7b8      	b.n	810b982 <_dtoa_r+0x28a>
 810ba10:	3101      	adds	r1, #1
 810ba12:	6041      	str	r1, [r0, #4]
 810ba14:	0052      	lsls	r2, r2, #1
 810ba16:	e7b8      	b.n	810b98a <_dtoa_r+0x292>
 810ba18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ba1a:	9a01      	ldr	r2, [sp, #4]
 810ba1c:	601a      	str	r2, [r3, #0]
 810ba1e:	9b03      	ldr	r3, [sp, #12]
 810ba20:	2b0e      	cmp	r3, #14
 810ba22:	f200 809d 	bhi.w	810bb60 <_dtoa_r+0x468>
 810ba26:	2d00      	cmp	r5, #0
 810ba28:	f000 809a 	beq.w	810bb60 <_dtoa_r+0x468>
 810ba2c:	9b00      	ldr	r3, [sp, #0]
 810ba2e:	2b00      	cmp	r3, #0
 810ba30:	dd32      	ble.n	810ba98 <_dtoa_r+0x3a0>
 810ba32:	4ab7      	ldr	r2, [pc, #732]	; (810bd10 <_dtoa_r+0x618>)
 810ba34:	f003 030f 	and.w	r3, r3, #15
 810ba38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810ba3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810ba40:	9b00      	ldr	r3, [sp, #0]
 810ba42:	05d8      	lsls	r0, r3, #23
 810ba44:	ea4f 1723 	mov.w	r7, r3, asr #4
 810ba48:	d516      	bpl.n	810ba78 <_dtoa_r+0x380>
 810ba4a:	4bb2      	ldr	r3, [pc, #712]	; (810bd14 <_dtoa_r+0x61c>)
 810ba4c:	ec51 0b19 	vmov	r0, r1, d9
 810ba50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810ba54:	f7f4 ff82 	bl	810095c <__aeabi_ddiv>
 810ba58:	f007 070f 	and.w	r7, r7, #15
 810ba5c:	4682      	mov	sl, r0
 810ba5e:	468b      	mov	fp, r1
 810ba60:	2503      	movs	r5, #3
 810ba62:	4eac      	ldr	r6, [pc, #688]	; (810bd14 <_dtoa_r+0x61c>)
 810ba64:	b957      	cbnz	r7, 810ba7c <_dtoa_r+0x384>
 810ba66:	4642      	mov	r2, r8
 810ba68:	464b      	mov	r3, r9
 810ba6a:	4650      	mov	r0, sl
 810ba6c:	4659      	mov	r1, fp
 810ba6e:	f7f4 ff75 	bl	810095c <__aeabi_ddiv>
 810ba72:	4682      	mov	sl, r0
 810ba74:	468b      	mov	fp, r1
 810ba76:	e028      	b.n	810baca <_dtoa_r+0x3d2>
 810ba78:	2502      	movs	r5, #2
 810ba7a:	e7f2      	b.n	810ba62 <_dtoa_r+0x36a>
 810ba7c:	07f9      	lsls	r1, r7, #31
 810ba7e:	d508      	bpl.n	810ba92 <_dtoa_r+0x39a>
 810ba80:	4640      	mov	r0, r8
 810ba82:	4649      	mov	r1, r9
 810ba84:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ba88:	f7f4 fe3e 	bl	8100708 <__aeabi_dmul>
 810ba8c:	3501      	adds	r5, #1
 810ba8e:	4680      	mov	r8, r0
 810ba90:	4689      	mov	r9, r1
 810ba92:	107f      	asrs	r7, r7, #1
 810ba94:	3608      	adds	r6, #8
 810ba96:	e7e5      	b.n	810ba64 <_dtoa_r+0x36c>
 810ba98:	f000 809b 	beq.w	810bbd2 <_dtoa_r+0x4da>
 810ba9c:	9b00      	ldr	r3, [sp, #0]
 810ba9e:	4f9d      	ldr	r7, [pc, #628]	; (810bd14 <_dtoa_r+0x61c>)
 810baa0:	425e      	negs	r6, r3
 810baa2:	4b9b      	ldr	r3, [pc, #620]	; (810bd10 <_dtoa_r+0x618>)
 810baa4:	f006 020f 	and.w	r2, r6, #15
 810baa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bab0:	ec51 0b19 	vmov	r0, r1, d9
 810bab4:	f7f4 fe28 	bl	8100708 <__aeabi_dmul>
 810bab8:	1136      	asrs	r6, r6, #4
 810baba:	4682      	mov	sl, r0
 810babc:	468b      	mov	fp, r1
 810babe:	2300      	movs	r3, #0
 810bac0:	2502      	movs	r5, #2
 810bac2:	2e00      	cmp	r6, #0
 810bac4:	d17a      	bne.n	810bbbc <_dtoa_r+0x4c4>
 810bac6:	2b00      	cmp	r3, #0
 810bac8:	d1d3      	bne.n	810ba72 <_dtoa_r+0x37a>
 810baca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bacc:	2b00      	cmp	r3, #0
 810bace:	f000 8082 	beq.w	810bbd6 <_dtoa_r+0x4de>
 810bad2:	4b91      	ldr	r3, [pc, #580]	; (810bd18 <_dtoa_r+0x620>)
 810bad4:	2200      	movs	r2, #0
 810bad6:	4650      	mov	r0, sl
 810bad8:	4659      	mov	r1, fp
 810bada:	f7f5 f887 	bl	8100bec <__aeabi_dcmplt>
 810bade:	2800      	cmp	r0, #0
 810bae0:	d079      	beq.n	810bbd6 <_dtoa_r+0x4de>
 810bae2:	9b03      	ldr	r3, [sp, #12]
 810bae4:	2b00      	cmp	r3, #0
 810bae6:	d076      	beq.n	810bbd6 <_dtoa_r+0x4de>
 810bae8:	9b02      	ldr	r3, [sp, #8]
 810baea:	2b00      	cmp	r3, #0
 810baec:	dd36      	ble.n	810bb5c <_dtoa_r+0x464>
 810baee:	9b00      	ldr	r3, [sp, #0]
 810baf0:	4650      	mov	r0, sl
 810baf2:	4659      	mov	r1, fp
 810baf4:	1e5f      	subs	r7, r3, #1
 810baf6:	2200      	movs	r2, #0
 810baf8:	4b88      	ldr	r3, [pc, #544]	; (810bd1c <_dtoa_r+0x624>)
 810bafa:	f7f4 fe05 	bl	8100708 <__aeabi_dmul>
 810bafe:	9e02      	ldr	r6, [sp, #8]
 810bb00:	4682      	mov	sl, r0
 810bb02:	468b      	mov	fp, r1
 810bb04:	3501      	adds	r5, #1
 810bb06:	4628      	mov	r0, r5
 810bb08:	f7f4 fd94 	bl	8100634 <__aeabi_i2d>
 810bb0c:	4652      	mov	r2, sl
 810bb0e:	465b      	mov	r3, fp
 810bb10:	f7f4 fdfa 	bl	8100708 <__aeabi_dmul>
 810bb14:	4b82      	ldr	r3, [pc, #520]	; (810bd20 <_dtoa_r+0x628>)
 810bb16:	2200      	movs	r2, #0
 810bb18:	f7f4 fc40 	bl	810039c <__adddf3>
 810bb1c:	46d0      	mov	r8, sl
 810bb1e:	46d9      	mov	r9, fp
 810bb20:	4682      	mov	sl, r0
 810bb22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810bb26:	2e00      	cmp	r6, #0
 810bb28:	d158      	bne.n	810bbdc <_dtoa_r+0x4e4>
 810bb2a:	4b7e      	ldr	r3, [pc, #504]	; (810bd24 <_dtoa_r+0x62c>)
 810bb2c:	2200      	movs	r2, #0
 810bb2e:	4640      	mov	r0, r8
 810bb30:	4649      	mov	r1, r9
 810bb32:	f7f4 fc31 	bl	8100398 <__aeabi_dsub>
 810bb36:	4652      	mov	r2, sl
 810bb38:	465b      	mov	r3, fp
 810bb3a:	4680      	mov	r8, r0
 810bb3c:	4689      	mov	r9, r1
 810bb3e:	f7f5 f873 	bl	8100c28 <__aeabi_dcmpgt>
 810bb42:	2800      	cmp	r0, #0
 810bb44:	f040 8295 	bne.w	810c072 <_dtoa_r+0x97a>
 810bb48:	4652      	mov	r2, sl
 810bb4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810bb4e:	4640      	mov	r0, r8
 810bb50:	4649      	mov	r1, r9
 810bb52:	f7f5 f84b 	bl	8100bec <__aeabi_dcmplt>
 810bb56:	2800      	cmp	r0, #0
 810bb58:	f040 8289 	bne.w	810c06e <_dtoa_r+0x976>
 810bb5c:	ec5b ab19 	vmov	sl, fp, d9
 810bb60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810bb62:	2b00      	cmp	r3, #0
 810bb64:	f2c0 8148 	blt.w	810bdf8 <_dtoa_r+0x700>
 810bb68:	9a00      	ldr	r2, [sp, #0]
 810bb6a:	2a0e      	cmp	r2, #14
 810bb6c:	f300 8144 	bgt.w	810bdf8 <_dtoa_r+0x700>
 810bb70:	4b67      	ldr	r3, [pc, #412]	; (810bd10 <_dtoa_r+0x618>)
 810bb72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bb76:	e9d3 8900 	ldrd	r8, r9, [r3]
 810bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bb7c:	2b00      	cmp	r3, #0
 810bb7e:	f280 80d5 	bge.w	810bd2c <_dtoa_r+0x634>
 810bb82:	9b03      	ldr	r3, [sp, #12]
 810bb84:	2b00      	cmp	r3, #0
 810bb86:	f300 80d1 	bgt.w	810bd2c <_dtoa_r+0x634>
 810bb8a:	f040 826f 	bne.w	810c06c <_dtoa_r+0x974>
 810bb8e:	4b65      	ldr	r3, [pc, #404]	; (810bd24 <_dtoa_r+0x62c>)
 810bb90:	2200      	movs	r2, #0
 810bb92:	4640      	mov	r0, r8
 810bb94:	4649      	mov	r1, r9
 810bb96:	f7f4 fdb7 	bl	8100708 <__aeabi_dmul>
 810bb9a:	4652      	mov	r2, sl
 810bb9c:	465b      	mov	r3, fp
 810bb9e:	f7f5 f839 	bl	8100c14 <__aeabi_dcmpge>
 810bba2:	9e03      	ldr	r6, [sp, #12]
 810bba4:	4637      	mov	r7, r6
 810bba6:	2800      	cmp	r0, #0
 810bba8:	f040 8245 	bne.w	810c036 <_dtoa_r+0x93e>
 810bbac:	9d01      	ldr	r5, [sp, #4]
 810bbae:	2331      	movs	r3, #49	; 0x31
 810bbb0:	f805 3b01 	strb.w	r3, [r5], #1
 810bbb4:	9b00      	ldr	r3, [sp, #0]
 810bbb6:	3301      	adds	r3, #1
 810bbb8:	9300      	str	r3, [sp, #0]
 810bbba:	e240      	b.n	810c03e <_dtoa_r+0x946>
 810bbbc:	07f2      	lsls	r2, r6, #31
 810bbbe:	d505      	bpl.n	810bbcc <_dtoa_r+0x4d4>
 810bbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bbc4:	f7f4 fda0 	bl	8100708 <__aeabi_dmul>
 810bbc8:	3501      	adds	r5, #1
 810bbca:	2301      	movs	r3, #1
 810bbcc:	1076      	asrs	r6, r6, #1
 810bbce:	3708      	adds	r7, #8
 810bbd0:	e777      	b.n	810bac2 <_dtoa_r+0x3ca>
 810bbd2:	2502      	movs	r5, #2
 810bbd4:	e779      	b.n	810baca <_dtoa_r+0x3d2>
 810bbd6:	9f00      	ldr	r7, [sp, #0]
 810bbd8:	9e03      	ldr	r6, [sp, #12]
 810bbda:	e794      	b.n	810bb06 <_dtoa_r+0x40e>
 810bbdc:	9901      	ldr	r1, [sp, #4]
 810bbde:	4b4c      	ldr	r3, [pc, #304]	; (810bd10 <_dtoa_r+0x618>)
 810bbe0:	4431      	add	r1, r6
 810bbe2:	910d      	str	r1, [sp, #52]	; 0x34
 810bbe4:	9908      	ldr	r1, [sp, #32]
 810bbe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810bbea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810bbee:	2900      	cmp	r1, #0
 810bbf0:	d043      	beq.n	810bc7a <_dtoa_r+0x582>
 810bbf2:	494d      	ldr	r1, [pc, #308]	; (810bd28 <_dtoa_r+0x630>)
 810bbf4:	2000      	movs	r0, #0
 810bbf6:	f7f4 feb1 	bl	810095c <__aeabi_ddiv>
 810bbfa:	4652      	mov	r2, sl
 810bbfc:	465b      	mov	r3, fp
 810bbfe:	f7f4 fbcb 	bl	8100398 <__aeabi_dsub>
 810bc02:	9d01      	ldr	r5, [sp, #4]
 810bc04:	4682      	mov	sl, r0
 810bc06:	468b      	mov	fp, r1
 810bc08:	4649      	mov	r1, r9
 810bc0a:	4640      	mov	r0, r8
 810bc0c:	f7f5 f82c 	bl	8100c68 <__aeabi_d2iz>
 810bc10:	4606      	mov	r6, r0
 810bc12:	f7f4 fd0f 	bl	8100634 <__aeabi_i2d>
 810bc16:	4602      	mov	r2, r0
 810bc18:	460b      	mov	r3, r1
 810bc1a:	4640      	mov	r0, r8
 810bc1c:	4649      	mov	r1, r9
 810bc1e:	f7f4 fbbb 	bl	8100398 <__aeabi_dsub>
 810bc22:	3630      	adds	r6, #48	; 0x30
 810bc24:	f805 6b01 	strb.w	r6, [r5], #1
 810bc28:	4652      	mov	r2, sl
 810bc2a:	465b      	mov	r3, fp
 810bc2c:	4680      	mov	r8, r0
 810bc2e:	4689      	mov	r9, r1
 810bc30:	f7f4 ffdc 	bl	8100bec <__aeabi_dcmplt>
 810bc34:	2800      	cmp	r0, #0
 810bc36:	d163      	bne.n	810bd00 <_dtoa_r+0x608>
 810bc38:	4642      	mov	r2, r8
 810bc3a:	464b      	mov	r3, r9
 810bc3c:	4936      	ldr	r1, [pc, #216]	; (810bd18 <_dtoa_r+0x620>)
 810bc3e:	2000      	movs	r0, #0
 810bc40:	f7f4 fbaa 	bl	8100398 <__aeabi_dsub>
 810bc44:	4652      	mov	r2, sl
 810bc46:	465b      	mov	r3, fp
 810bc48:	f7f4 ffd0 	bl	8100bec <__aeabi_dcmplt>
 810bc4c:	2800      	cmp	r0, #0
 810bc4e:	f040 80b5 	bne.w	810bdbc <_dtoa_r+0x6c4>
 810bc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810bc54:	429d      	cmp	r5, r3
 810bc56:	d081      	beq.n	810bb5c <_dtoa_r+0x464>
 810bc58:	4b30      	ldr	r3, [pc, #192]	; (810bd1c <_dtoa_r+0x624>)
 810bc5a:	2200      	movs	r2, #0
 810bc5c:	4650      	mov	r0, sl
 810bc5e:	4659      	mov	r1, fp
 810bc60:	f7f4 fd52 	bl	8100708 <__aeabi_dmul>
 810bc64:	4b2d      	ldr	r3, [pc, #180]	; (810bd1c <_dtoa_r+0x624>)
 810bc66:	4682      	mov	sl, r0
 810bc68:	468b      	mov	fp, r1
 810bc6a:	4640      	mov	r0, r8
 810bc6c:	4649      	mov	r1, r9
 810bc6e:	2200      	movs	r2, #0
 810bc70:	f7f4 fd4a 	bl	8100708 <__aeabi_dmul>
 810bc74:	4680      	mov	r8, r0
 810bc76:	4689      	mov	r9, r1
 810bc78:	e7c6      	b.n	810bc08 <_dtoa_r+0x510>
 810bc7a:	4650      	mov	r0, sl
 810bc7c:	4659      	mov	r1, fp
 810bc7e:	f7f4 fd43 	bl	8100708 <__aeabi_dmul>
 810bc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810bc84:	9d01      	ldr	r5, [sp, #4]
 810bc86:	930f      	str	r3, [sp, #60]	; 0x3c
 810bc88:	4682      	mov	sl, r0
 810bc8a:	468b      	mov	fp, r1
 810bc8c:	4649      	mov	r1, r9
 810bc8e:	4640      	mov	r0, r8
 810bc90:	f7f4 ffea 	bl	8100c68 <__aeabi_d2iz>
 810bc94:	4606      	mov	r6, r0
 810bc96:	f7f4 fccd 	bl	8100634 <__aeabi_i2d>
 810bc9a:	3630      	adds	r6, #48	; 0x30
 810bc9c:	4602      	mov	r2, r0
 810bc9e:	460b      	mov	r3, r1
 810bca0:	4640      	mov	r0, r8
 810bca2:	4649      	mov	r1, r9
 810bca4:	f7f4 fb78 	bl	8100398 <__aeabi_dsub>
 810bca8:	f805 6b01 	strb.w	r6, [r5], #1
 810bcac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810bcae:	429d      	cmp	r5, r3
 810bcb0:	4680      	mov	r8, r0
 810bcb2:	4689      	mov	r9, r1
 810bcb4:	f04f 0200 	mov.w	r2, #0
 810bcb8:	d124      	bne.n	810bd04 <_dtoa_r+0x60c>
 810bcba:	4b1b      	ldr	r3, [pc, #108]	; (810bd28 <_dtoa_r+0x630>)
 810bcbc:	4650      	mov	r0, sl
 810bcbe:	4659      	mov	r1, fp
 810bcc0:	f7f4 fb6c 	bl	810039c <__adddf3>
 810bcc4:	4602      	mov	r2, r0
 810bcc6:	460b      	mov	r3, r1
 810bcc8:	4640      	mov	r0, r8
 810bcca:	4649      	mov	r1, r9
 810bccc:	f7f4 ffac 	bl	8100c28 <__aeabi_dcmpgt>
 810bcd0:	2800      	cmp	r0, #0
 810bcd2:	d173      	bne.n	810bdbc <_dtoa_r+0x6c4>
 810bcd4:	4652      	mov	r2, sl
 810bcd6:	465b      	mov	r3, fp
 810bcd8:	4913      	ldr	r1, [pc, #76]	; (810bd28 <_dtoa_r+0x630>)
 810bcda:	2000      	movs	r0, #0
 810bcdc:	f7f4 fb5c 	bl	8100398 <__aeabi_dsub>
 810bce0:	4602      	mov	r2, r0
 810bce2:	460b      	mov	r3, r1
 810bce4:	4640      	mov	r0, r8
 810bce6:	4649      	mov	r1, r9
 810bce8:	f7f4 ff80 	bl	8100bec <__aeabi_dcmplt>
 810bcec:	2800      	cmp	r0, #0
 810bcee:	f43f af35 	beq.w	810bb5c <_dtoa_r+0x464>
 810bcf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810bcf4:	1e6b      	subs	r3, r5, #1
 810bcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 810bcf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810bcfc:	2b30      	cmp	r3, #48	; 0x30
 810bcfe:	d0f8      	beq.n	810bcf2 <_dtoa_r+0x5fa>
 810bd00:	9700      	str	r7, [sp, #0]
 810bd02:	e049      	b.n	810bd98 <_dtoa_r+0x6a0>
 810bd04:	4b05      	ldr	r3, [pc, #20]	; (810bd1c <_dtoa_r+0x624>)
 810bd06:	f7f4 fcff 	bl	8100708 <__aeabi_dmul>
 810bd0a:	4680      	mov	r8, r0
 810bd0c:	4689      	mov	r9, r1
 810bd0e:	e7bd      	b.n	810bc8c <_dtoa_r+0x594>
 810bd10:	0810e638 	.word	0x0810e638
 810bd14:	0810e610 	.word	0x0810e610
 810bd18:	3ff00000 	.word	0x3ff00000
 810bd1c:	40240000 	.word	0x40240000
 810bd20:	401c0000 	.word	0x401c0000
 810bd24:	40140000 	.word	0x40140000
 810bd28:	3fe00000 	.word	0x3fe00000
 810bd2c:	9d01      	ldr	r5, [sp, #4]
 810bd2e:	4656      	mov	r6, sl
 810bd30:	465f      	mov	r7, fp
 810bd32:	4642      	mov	r2, r8
 810bd34:	464b      	mov	r3, r9
 810bd36:	4630      	mov	r0, r6
 810bd38:	4639      	mov	r1, r7
 810bd3a:	f7f4 fe0f 	bl	810095c <__aeabi_ddiv>
 810bd3e:	f7f4 ff93 	bl	8100c68 <__aeabi_d2iz>
 810bd42:	4682      	mov	sl, r0
 810bd44:	f7f4 fc76 	bl	8100634 <__aeabi_i2d>
 810bd48:	4642      	mov	r2, r8
 810bd4a:	464b      	mov	r3, r9
 810bd4c:	f7f4 fcdc 	bl	8100708 <__aeabi_dmul>
 810bd50:	4602      	mov	r2, r0
 810bd52:	460b      	mov	r3, r1
 810bd54:	4630      	mov	r0, r6
 810bd56:	4639      	mov	r1, r7
 810bd58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810bd5c:	f7f4 fb1c 	bl	8100398 <__aeabi_dsub>
 810bd60:	f805 6b01 	strb.w	r6, [r5], #1
 810bd64:	9e01      	ldr	r6, [sp, #4]
 810bd66:	9f03      	ldr	r7, [sp, #12]
 810bd68:	1bae      	subs	r6, r5, r6
 810bd6a:	42b7      	cmp	r7, r6
 810bd6c:	4602      	mov	r2, r0
 810bd6e:	460b      	mov	r3, r1
 810bd70:	d135      	bne.n	810bdde <_dtoa_r+0x6e6>
 810bd72:	f7f4 fb13 	bl	810039c <__adddf3>
 810bd76:	4642      	mov	r2, r8
 810bd78:	464b      	mov	r3, r9
 810bd7a:	4606      	mov	r6, r0
 810bd7c:	460f      	mov	r7, r1
 810bd7e:	f7f4 ff53 	bl	8100c28 <__aeabi_dcmpgt>
 810bd82:	b9d0      	cbnz	r0, 810bdba <_dtoa_r+0x6c2>
 810bd84:	4642      	mov	r2, r8
 810bd86:	464b      	mov	r3, r9
 810bd88:	4630      	mov	r0, r6
 810bd8a:	4639      	mov	r1, r7
 810bd8c:	f7f4 ff24 	bl	8100bd8 <__aeabi_dcmpeq>
 810bd90:	b110      	cbz	r0, 810bd98 <_dtoa_r+0x6a0>
 810bd92:	f01a 0f01 	tst.w	sl, #1
 810bd96:	d110      	bne.n	810bdba <_dtoa_r+0x6c2>
 810bd98:	4620      	mov	r0, r4
 810bd9a:	ee18 1a10 	vmov	r1, s16
 810bd9e:	f001 f89f 	bl	810cee0 <_Bfree>
 810bda2:	2300      	movs	r3, #0
 810bda4:	9800      	ldr	r0, [sp, #0]
 810bda6:	702b      	strb	r3, [r5, #0]
 810bda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bdaa:	3001      	adds	r0, #1
 810bdac:	6018      	str	r0, [r3, #0]
 810bdae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bdb0:	2b00      	cmp	r3, #0
 810bdb2:	f43f acf1 	beq.w	810b798 <_dtoa_r+0xa0>
 810bdb6:	601d      	str	r5, [r3, #0]
 810bdb8:	e4ee      	b.n	810b798 <_dtoa_r+0xa0>
 810bdba:	9f00      	ldr	r7, [sp, #0]
 810bdbc:	462b      	mov	r3, r5
 810bdbe:	461d      	mov	r5, r3
 810bdc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810bdc4:	2a39      	cmp	r2, #57	; 0x39
 810bdc6:	d106      	bne.n	810bdd6 <_dtoa_r+0x6de>
 810bdc8:	9a01      	ldr	r2, [sp, #4]
 810bdca:	429a      	cmp	r2, r3
 810bdcc:	d1f7      	bne.n	810bdbe <_dtoa_r+0x6c6>
 810bdce:	9901      	ldr	r1, [sp, #4]
 810bdd0:	2230      	movs	r2, #48	; 0x30
 810bdd2:	3701      	adds	r7, #1
 810bdd4:	700a      	strb	r2, [r1, #0]
 810bdd6:	781a      	ldrb	r2, [r3, #0]
 810bdd8:	3201      	adds	r2, #1
 810bdda:	701a      	strb	r2, [r3, #0]
 810bddc:	e790      	b.n	810bd00 <_dtoa_r+0x608>
 810bdde:	4ba6      	ldr	r3, [pc, #664]	; (810c078 <_dtoa_r+0x980>)
 810bde0:	2200      	movs	r2, #0
 810bde2:	f7f4 fc91 	bl	8100708 <__aeabi_dmul>
 810bde6:	2200      	movs	r2, #0
 810bde8:	2300      	movs	r3, #0
 810bdea:	4606      	mov	r6, r0
 810bdec:	460f      	mov	r7, r1
 810bdee:	f7f4 fef3 	bl	8100bd8 <__aeabi_dcmpeq>
 810bdf2:	2800      	cmp	r0, #0
 810bdf4:	d09d      	beq.n	810bd32 <_dtoa_r+0x63a>
 810bdf6:	e7cf      	b.n	810bd98 <_dtoa_r+0x6a0>
 810bdf8:	9a08      	ldr	r2, [sp, #32]
 810bdfa:	2a00      	cmp	r2, #0
 810bdfc:	f000 80d7 	beq.w	810bfae <_dtoa_r+0x8b6>
 810be00:	9a06      	ldr	r2, [sp, #24]
 810be02:	2a01      	cmp	r2, #1
 810be04:	f300 80ba 	bgt.w	810bf7c <_dtoa_r+0x884>
 810be08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810be0a:	2a00      	cmp	r2, #0
 810be0c:	f000 80b2 	beq.w	810bf74 <_dtoa_r+0x87c>
 810be10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810be14:	9e07      	ldr	r6, [sp, #28]
 810be16:	9d04      	ldr	r5, [sp, #16]
 810be18:	9a04      	ldr	r2, [sp, #16]
 810be1a:	441a      	add	r2, r3
 810be1c:	9204      	str	r2, [sp, #16]
 810be1e:	9a05      	ldr	r2, [sp, #20]
 810be20:	2101      	movs	r1, #1
 810be22:	441a      	add	r2, r3
 810be24:	4620      	mov	r0, r4
 810be26:	9205      	str	r2, [sp, #20]
 810be28:	f001 f95c 	bl	810d0e4 <__i2b>
 810be2c:	4607      	mov	r7, r0
 810be2e:	2d00      	cmp	r5, #0
 810be30:	dd0c      	ble.n	810be4c <_dtoa_r+0x754>
 810be32:	9b05      	ldr	r3, [sp, #20]
 810be34:	2b00      	cmp	r3, #0
 810be36:	dd09      	ble.n	810be4c <_dtoa_r+0x754>
 810be38:	42ab      	cmp	r3, r5
 810be3a:	9a04      	ldr	r2, [sp, #16]
 810be3c:	bfa8      	it	ge
 810be3e:	462b      	movge	r3, r5
 810be40:	1ad2      	subs	r2, r2, r3
 810be42:	9204      	str	r2, [sp, #16]
 810be44:	9a05      	ldr	r2, [sp, #20]
 810be46:	1aed      	subs	r5, r5, r3
 810be48:	1ad3      	subs	r3, r2, r3
 810be4a:	9305      	str	r3, [sp, #20]
 810be4c:	9b07      	ldr	r3, [sp, #28]
 810be4e:	b31b      	cbz	r3, 810be98 <_dtoa_r+0x7a0>
 810be50:	9b08      	ldr	r3, [sp, #32]
 810be52:	2b00      	cmp	r3, #0
 810be54:	f000 80af 	beq.w	810bfb6 <_dtoa_r+0x8be>
 810be58:	2e00      	cmp	r6, #0
 810be5a:	dd13      	ble.n	810be84 <_dtoa_r+0x78c>
 810be5c:	4639      	mov	r1, r7
 810be5e:	4632      	mov	r2, r6
 810be60:	4620      	mov	r0, r4
 810be62:	f001 f9ff 	bl	810d264 <__pow5mult>
 810be66:	ee18 2a10 	vmov	r2, s16
 810be6a:	4601      	mov	r1, r0
 810be6c:	4607      	mov	r7, r0
 810be6e:	4620      	mov	r0, r4
 810be70:	f001 f94e 	bl	810d110 <__multiply>
 810be74:	ee18 1a10 	vmov	r1, s16
 810be78:	4680      	mov	r8, r0
 810be7a:	4620      	mov	r0, r4
 810be7c:	f001 f830 	bl	810cee0 <_Bfree>
 810be80:	ee08 8a10 	vmov	s16, r8
 810be84:	9b07      	ldr	r3, [sp, #28]
 810be86:	1b9a      	subs	r2, r3, r6
 810be88:	d006      	beq.n	810be98 <_dtoa_r+0x7a0>
 810be8a:	ee18 1a10 	vmov	r1, s16
 810be8e:	4620      	mov	r0, r4
 810be90:	f001 f9e8 	bl	810d264 <__pow5mult>
 810be94:	ee08 0a10 	vmov	s16, r0
 810be98:	2101      	movs	r1, #1
 810be9a:	4620      	mov	r0, r4
 810be9c:	f001 f922 	bl	810d0e4 <__i2b>
 810bea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bea2:	2b00      	cmp	r3, #0
 810bea4:	4606      	mov	r6, r0
 810bea6:	f340 8088 	ble.w	810bfba <_dtoa_r+0x8c2>
 810beaa:	461a      	mov	r2, r3
 810beac:	4601      	mov	r1, r0
 810beae:	4620      	mov	r0, r4
 810beb0:	f001 f9d8 	bl	810d264 <__pow5mult>
 810beb4:	9b06      	ldr	r3, [sp, #24]
 810beb6:	2b01      	cmp	r3, #1
 810beb8:	4606      	mov	r6, r0
 810beba:	f340 8081 	ble.w	810bfc0 <_dtoa_r+0x8c8>
 810bebe:	f04f 0800 	mov.w	r8, #0
 810bec2:	6933      	ldr	r3, [r6, #16]
 810bec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810bec8:	6918      	ldr	r0, [r3, #16]
 810beca:	f001 f8bb 	bl	810d044 <__hi0bits>
 810bece:	f1c0 0020 	rsb	r0, r0, #32
 810bed2:	9b05      	ldr	r3, [sp, #20]
 810bed4:	4418      	add	r0, r3
 810bed6:	f010 001f 	ands.w	r0, r0, #31
 810beda:	f000 8092 	beq.w	810c002 <_dtoa_r+0x90a>
 810bede:	f1c0 0320 	rsb	r3, r0, #32
 810bee2:	2b04      	cmp	r3, #4
 810bee4:	f340 808a 	ble.w	810bffc <_dtoa_r+0x904>
 810bee8:	f1c0 001c 	rsb	r0, r0, #28
 810beec:	9b04      	ldr	r3, [sp, #16]
 810beee:	4403      	add	r3, r0
 810bef0:	9304      	str	r3, [sp, #16]
 810bef2:	9b05      	ldr	r3, [sp, #20]
 810bef4:	4403      	add	r3, r0
 810bef6:	4405      	add	r5, r0
 810bef8:	9305      	str	r3, [sp, #20]
 810befa:	9b04      	ldr	r3, [sp, #16]
 810befc:	2b00      	cmp	r3, #0
 810befe:	dd07      	ble.n	810bf10 <_dtoa_r+0x818>
 810bf00:	ee18 1a10 	vmov	r1, s16
 810bf04:	461a      	mov	r2, r3
 810bf06:	4620      	mov	r0, r4
 810bf08:	f001 fa06 	bl	810d318 <__lshift>
 810bf0c:	ee08 0a10 	vmov	s16, r0
 810bf10:	9b05      	ldr	r3, [sp, #20]
 810bf12:	2b00      	cmp	r3, #0
 810bf14:	dd05      	ble.n	810bf22 <_dtoa_r+0x82a>
 810bf16:	4631      	mov	r1, r6
 810bf18:	461a      	mov	r2, r3
 810bf1a:	4620      	mov	r0, r4
 810bf1c:	f001 f9fc 	bl	810d318 <__lshift>
 810bf20:	4606      	mov	r6, r0
 810bf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bf24:	2b00      	cmp	r3, #0
 810bf26:	d06e      	beq.n	810c006 <_dtoa_r+0x90e>
 810bf28:	ee18 0a10 	vmov	r0, s16
 810bf2c:	4631      	mov	r1, r6
 810bf2e:	f001 fa63 	bl	810d3f8 <__mcmp>
 810bf32:	2800      	cmp	r0, #0
 810bf34:	da67      	bge.n	810c006 <_dtoa_r+0x90e>
 810bf36:	9b00      	ldr	r3, [sp, #0]
 810bf38:	3b01      	subs	r3, #1
 810bf3a:	ee18 1a10 	vmov	r1, s16
 810bf3e:	9300      	str	r3, [sp, #0]
 810bf40:	220a      	movs	r2, #10
 810bf42:	2300      	movs	r3, #0
 810bf44:	4620      	mov	r0, r4
 810bf46:	f000 ffed 	bl	810cf24 <__multadd>
 810bf4a:	9b08      	ldr	r3, [sp, #32]
 810bf4c:	ee08 0a10 	vmov	s16, r0
 810bf50:	2b00      	cmp	r3, #0
 810bf52:	f000 81b1 	beq.w	810c2b8 <_dtoa_r+0xbc0>
 810bf56:	2300      	movs	r3, #0
 810bf58:	4639      	mov	r1, r7
 810bf5a:	220a      	movs	r2, #10
 810bf5c:	4620      	mov	r0, r4
 810bf5e:	f000 ffe1 	bl	810cf24 <__multadd>
 810bf62:	9b02      	ldr	r3, [sp, #8]
 810bf64:	2b00      	cmp	r3, #0
 810bf66:	4607      	mov	r7, r0
 810bf68:	f300 808e 	bgt.w	810c088 <_dtoa_r+0x990>
 810bf6c:	9b06      	ldr	r3, [sp, #24]
 810bf6e:	2b02      	cmp	r3, #2
 810bf70:	dc51      	bgt.n	810c016 <_dtoa_r+0x91e>
 810bf72:	e089      	b.n	810c088 <_dtoa_r+0x990>
 810bf74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bf76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810bf7a:	e74b      	b.n	810be14 <_dtoa_r+0x71c>
 810bf7c:	9b03      	ldr	r3, [sp, #12]
 810bf7e:	1e5e      	subs	r6, r3, #1
 810bf80:	9b07      	ldr	r3, [sp, #28]
 810bf82:	42b3      	cmp	r3, r6
 810bf84:	bfbf      	itttt	lt
 810bf86:	9b07      	ldrlt	r3, [sp, #28]
 810bf88:	9607      	strlt	r6, [sp, #28]
 810bf8a:	1af2      	sublt	r2, r6, r3
 810bf8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810bf8e:	bfb6      	itet	lt
 810bf90:	189b      	addlt	r3, r3, r2
 810bf92:	1b9e      	subge	r6, r3, r6
 810bf94:	930a      	strlt	r3, [sp, #40]	; 0x28
 810bf96:	9b03      	ldr	r3, [sp, #12]
 810bf98:	bfb8      	it	lt
 810bf9a:	2600      	movlt	r6, #0
 810bf9c:	2b00      	cmp	r3, #0
 810bf9e:	bfb7      	itett	lt
 810bfa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810bfa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810bfa8:	1a9d      	sublt	r5, r3, r2
 810bfaa:	2300      	movlt	r3, #0
 810bfac:	e734      	b.n	810be18 <_dtoa_r+0x720>
 810bfae:	9e07      	ldr	r6, [sp, #28]
 810bfb0:	9d04      	ldr	r5, [sp, #16]
 810bfb2:	9f08      	ldr	r7, [sp, #32]
 810bfb4:	e73b      	b.n	810be2e <_dtoa_r+0x736>
 810bfb6:	9a07      	ldr	r2, [sp, #28]
 810bfb8:	e767      	b.n	810be8a <_dtoa_r+0x792>
 810bfba:	9b06      	ldr	r3, [sp, #24]
 810bfbc:	2b01      	cmp	r3, #1
 810bfbe:	dc18      	bgt.n	810bff2 <_dtoa_r+0x8fa>
 810bfc0:	f1ba 0f00 	cmp.w	sl, #0
 810bfc4:	d115      	bne.n	810bff2 <_dtoa_r+0x8fa>
 810bfc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810bfca:	b993      	cbnz	r3, 810bff2 <_dtoa_r+0x8fa>
 810bfcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810bfd0:	0d1b      	lsrs	r3, r3, #20
 810bfd2:	051b      	lsls	r3, r3, #20
 810bfd4:	b183      	cbz	r3, 810bff8 <_dtoa_r+0x900>
 810bfd6:	9b04      	ldr	r3, [sp, #16]
 810bfd8:	3301      	adds	r3, #1
 810bfda:	9304      	str	r3, [sp, #16]
 810bfdc:	9b05      	ldr	r3, [sp, #20]
 810bfde:	3301      	adds	r3, #1
 810bfe0:	9305      	str	r3, [sp, #20]
 810bfe2:	f04f 0801 	mov.w	r8, #1
 810bfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bfe8:	2b00      	cmp	r3, #0
 810bfea:	f47f af6a 	bne.w	810bec2 <_dtoa_r+0x7ca>
 810bfee:	2001      	movs	r0, #1
 810bff0:	e76f      	b.n	810bed2 <_dtoa_r+0x7da>
 810bff2:	f04f 0800 	mov.w	r8, #0
 810bff6:	e7f6      	b.n	810bfe6 <_dtoa_r+0x8ee>
 810bff8:	4698      	mov	r8, r3
 810bffa:	e7f4      	b.n	810bfe6 <_dtoa_r+0x8ee>
 810bffc:	f43f af7d 	beq.w	810befa <_dtoa_r+0x802>
 810c000:	4618      	mov	r0, r3
 810c002:	301c      	adds	r0, #28
 810c004:	e772      	b.n	810beec <_dtoa_r+0x7f4>
 810c006:	9b03      	ldr	r3, [sp, #12]
 810c008:	2b00      	cmp	r3, #0
 810c00a:	dc37      	bgt.n	810c07c <_dtoa_r+0x984>
 810c00c:	9b06      	ldr	r3, [sp, #24]
 810c00e:	2b02      	cmp	r3, #2
 810c010:	dd34      	ble.n	810c07c <_dtoa_r+0x984>
 810c012:	9b03      	ldr	r3, [sp, #12]
 810c014:	9302      	str	r3, [sp, #8]
 810c016:	9b02      	ldr	r3, [sp, #8]
 810c018:	b96b      	cbnz	r3, 810c036 <_dtoa_r+0x93e>
 810c01a:	4631      	mov	r1, r6
 810c01c:	2205      	movs	r2, #5
 810c01e:	4620      	mov	r0, r4
 810c020:	f000 ff80 	bl	810cf24 <__multadd>
 810c024:	4601      	mov	r1, r0
 810c026:	4606      	mov	r6, r0
 810c028:	ee18 0a10 	vmov	r0, s16
 810c02c:	f001 f9e4 	bl	810d3f8 <__mcmp>
 810c030:	2800      	cmp	r0, #0
 810c032:	f73f adbb 	bgt.w	810bbac <_dtoa_r+0x4b4>
 810c036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c038:	9d01      	ldr	r5, [sp, #4]
 810c03a:	43db      	mvns	r3, r3
 810c03c:	9300      	str	r3, [sp, #0]
 810c03e:	f04f 0800 	mov.w	r8, #0
 810c042:	4631      	mov	r1, r6
 810c044:	4620      	mov	r0, r4
 810c046:	f000 ff4b 	bl	810cee0 <_Bfree>
 810c04a:	2f00      	cmp	r7, #0
 810c04c:	f43f aea4 	beq.w	810bd98 <_dtoa_r+0x6a0>
 810c050:	f1b8 0f00 	cmp.w	r8, #0
 810c054:	d005      	beq.n	810c062 <_dtoa_r+0x96a>
 810c056:	45b8      	cmp	r8, r7
 810c058:	d003      	beq.n	810c062 <_dtoa_r+0x96a>
 810c05a:	4641      	mov	r1, r8
 810c05c:	4620      	mov	r0, r4
 810c05e:	f000 ff3f 	bl	810cee0 <_Bfree>
 810c062:	4639      	mov	r1, r7
 810c064:	4620      	mov	r0, r4
 810c066:	f000 ff3b 	bl	810cee0 <_Bfree>
 810c06a:	e695      	b.n	810bd98 <_dtoa_r+0x6a0>
 810c06c:	2600      	movs	r6, #0
 810c06e:	4637      	mov	r7, r6
 810c070:	e7e1      	b.n	810c036 <_dtoa_r+0x93e>
 810c072:	9700      	str	r7, [sp, #0]
 810c074:	4637      	mov	r7, r6
 810c076:	e599      	b.n	810bbac <_dtoa_r+0x4b4>
 810c078:	40240000 	.word	0x40240000
 810c07c:	9b08      	ldr	r3, [sp, #32]
 810c07e:	2b00      	cmp	r3, #0
 810c080:	f000 80ca 	beq.w	810c218 <_dtoa_r+0xb20>
 810c084:	9b03      	ldr	r3, [sp, #12]
 810c086:	9302      	str	r3, [sp, #8]
 810c088:	2d00      	cmp	r5, #0
 810c08a:	dd05      	ble.n	810c098 <_dtoa_r+0x9a0>
 810c08c:	4639      	mov	r1, r7
 810c08e:	462a      	mov	r2, r5
 810c090:	4620      	mov	r0, r4
 810c092:	f001 f941 	bl	810d318 <__lshift>
 810c096:	4607      	mov	r7, r0
 810c098:	f1b8 0f00 	cmp.w	r8, #0
 810c09c:	d05b      	beq.n	810c156 <_dtoa_r+0xa5e>
 810c09e:	6879      	ldr	r1, [r7, #4]
 810c0a0:	4620      	mov	r0, r4
 810c0a2:	f000 fedd 	bl	810ce60 <_Balloc>
 810c0a6:	4605      	mov	r5, r0
 810c0a8:	b928      	cbnz	r0, 810c0b6 <_dtoa_r+0x9be>
 810c0aa:	4b87      	ldr	r3, [pc, #540]	; (810c2c8 <_dtoa_r+0xbd0>)
 810c0ac:	4602      	mov	r2, r0
 810c0ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 810c0b2:	f7ff bb3b 	b.w	810b72c <_dtoa_r+0x34>
 810c0b6:	693a      	ldr	r2, [r7, #16]
 810c0b8:	3202      	adds	r2, #2
 810c0ba:	0092      	lsls	r2, r2, #2
 810c0bc:	f107 010c 	add.w	r1, r7, #12
 810c0c0:	300c      	adds	r0, #12
 810c0c2:	f000 feb3 	bl	810ce2c <memcpy>
 810c0c6:	2201      	movs	r2, #1
 810c0c8:	4629      	mov	r1, r5
 810c0ca:	4620      	mov	r0, r4
 810c0cc:	f001 f924 	bl	810d318 <__lshift>
 810c0d0:	9b01      	ldr	r3, [sp, #4]
 810c0d2:	f103 0901 	add.w	r9, r3, #1
 810c0d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810c0da:	4413      	add	r3, r2
 810c0dc:	9305      	str	r3, [sp, #20]
 810c0de:	f00a 0301 	and.w	r3, sl, #1
 810c0e2:	46b8      	mov	r8, r7
 810c0e4:	9304      	str	r3, [sp, #16]
 810c0e6:	4607      	mov	r7, r0
 810c0e8:	4631      	mov	r1, r6
 810c0ea:	ee18 0a10 	vmov	r0, s16
 810c0ee:	f7ff fa77 	bl	810b5e0 <quorem>
 810c0f2:	4641      	mov	r1, r8
 810c0f4:	9002      	str	r0, [sp, #8]
 810c0f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810c0fa:	ee18 0a10 	vmov	r0, s16
 810c0fe:	f001 f97b 	bl	810d3f8 <__mcmp>
 810c102:	463a      	mov	r2, r7
 810c104:	9003      	str	r0, [sp, #12]
 810c106:	4631      	mov	r1, r6
 810c108:	4620      	mov	r0, r4
 810c10a:	f001 f991 	bl	810d430 <__mdiff>
 810c10e:	68c2      	ldr	r2, [r0, #12]
 810c110:	f109 3bff 	add.w	fp, r9, #4294967295
 810c114:	4605      	mov	r5, r0
 810c116:	bb02      	cbnz	r2, 810c15a <_dtoa_r+0xa62>
 810c118:	4601      	mov	r1, r0
 810c11a:	ee18 0a10 	vmov	r0, s16
 810c11e:	f001 f96b 	bl	810d3f8 <__mcmp>
 810c122:	4602      	mov	r2, r0
 810c124:	4629      	mov	r1, r5
 810c126:	4620      	mov	r0, r4
 810c128:	9207      	str	r2, [sp, #28]
 810c12a:	f000 fed9 	bl	810cee0 <_Bfree>
 810c12e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810c132:	ea43 0102 	orr.w	r1, r3, r2
 810c136:	9b04      	ldr	r3, [sp, #16]
 810c138:	430b      	orrs	r3, r1
 810c13a:	464d      	mov	r5, r9
 810c13c:	d10f      	bne.n	810c15e <_dtoa_r+0xa66>
 810c13e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810c142:	d02a      	beq.n	810c19a <_dtoa_r+0xaa2>
 810c144:	9b03      	ldr	r3, [sp, #12]
 810c146:	2b00      	cmp	r3, #0
 810c148:	dd02      	ble.n	810c150 <_dtoa_r+0xa58>
 810c14a:	9b02      	ldr	r3, [sp, #8]
 810c14c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810c150:	f88b a000 	strb.w	sl, [fp]
 810c154:	e775      	b.n	810c042 <_dtoa_r+0x94a>
 810c156:	4638      	mov	r0, r7
 810c158:	e7ba      	b.n	810c0d0 <_dtoa_r+0x9d8>
 810c15a:	2201      	movs	r2, #1
 810c15c:	e7e2      	b.n	810c124 <_dtoa_r+0xa2c>
 810c15e:	9b03      	ldr	r3, [sp, #12]
 810c160:	2b00      	cmp	r3, #0
 810c162:	db04      	blt.n	810c16e <_dtoa_r+0xa76>
 810c164:	9906      	ldr	r1, [sp, #24]
 810c166:	430b      	orrs	r3, r1
 810c168:	9904      	ldr	r1, [sp, #16]
 810c16a:	430b      	orrs	r3, r1
 810c16c:	d122      	bne.n	810c1b4 <_dtoa_r+0xabc>
 810c16e:	2a00      	cmp	r2, #0
 810c170:	ddee      	ble.n	810c150 <_dtoa_r+0xa58>
 810c172:	ee18 1a10 	vmov	r1, s16
 810c176:	2201      	movs	r2, #1
 810c178:	4620      	mov	r0, r4
 810c17a:	f001 f8cd 	bl	810d318 <__lshift>
 810c17e:	4631      	mov	r1, r6
 810c180:	ee08 0a10 	vmov	s16, r0
 810c184:	f001 f938 	bl	810d3f8 <__mcmp>
 810c188:	2800      	cmp	r0, #0
 810c18a:	dc03      	bgt.n	810c194 <_dtoa_r+0xa9c>
 810c18c:	d1e0      	bne.n	810c150 <_dtoa_r+0xa58>
 810c18e:	f01a 0f01 	tst.w	sl, #1
 810c192:	d0dd      	beq.n	810c150 <_dtoa_r+0xa58>
 810c194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810c198:	d1d7      	bne.n	810c14a <_dtoa_r+0xa52>
 810c19a:	2339      	movs	r3, #57	; 0x39
 810c19c:	f88b 3000 	strb.w	r3, [fp]
 810c1a0:	462b      	mov	r3, r5
 810c1a2:	461d      	mov	r5, r3
 810c1a4:	3b01      	subs	r3, #1
 810c1a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810c1aa:	2a39      	cmp	r2, #57	; 0x39
 810c1ac:	d071      	beq.n	810c292 <_dtoa_r+0xb9a>
 810c1ae:	3201      	adds	r2, #1
 810c1b0:	701a      	strb	r2, [r3, #0]
 810c1b2:	e746      	b.n	810c042 <_dtoa_r+0x94a>
 810c1b4:	2a00      	cmp	r2, #0
 810c1b6:	dd07      	ble.n	810c1c8 <_dtoa_r+0xad0>
 810c1b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810c1bc:	d0ed      	beq.n	810c19a <_dtoa_r+0xaa2>
 810c1be:	f10a 0301 	add.w	r3, sl, #1
 810c1c2:	f88b 3000 	strb.w	r3, [fp]
 810c1c6:	e73c      	b.n	810c042 <_dtoa_r+0x94a>
 810c1c8:	9b05      	ldr	r3, [sp, #20]
 810c1ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 810c1ce:	4599      	cmp	r9, r3
 810c1d0:	d047      	beq.n	810c262 <_dtoa_r+0xb6a>
 810c1d2:	ee18 1a10 	vmov	r1, s16
 810c1d6:	2300      	movs	r3, #0
 810c1d8:	220a      	movs	r2, #10
 810c1da:	4620      	mov	r0, r4
 810c1dc:	f000 fea2 	bl	810cf24 <__multadd>
 810c1e0:	45b8      	cmp	r8, r7
 810c1e2:	ee08 0a10 	vmov	s16, r0
 810c1e6:	f04f 0300 	mov.w	r3, #0
 810c1ea:	f04f 020a 	mov.w	r2, #10
 810c1ee:	4641      	mov	r1, r8
 810c1f0:	4620      	mov	r0, r4
 810c1f2:	d106      	bne.n	810c202 <_dtoa_r+0xb0a>
 810c1f4:	f000 fe96 	bl	810cf24 <__multadd>
 810c1f8:	4680      	mov	r8, r0
 810c1fa:	4607      	mov	r7, r0
 810c1fc:	f109 0901 	add.w	r9, r9, #1
 810c200:	e772      	b.n	810c0e8 <_dtoa_r+0x9f0>
 810c202:	f000 fe8f 	bl	810cf24 <__multadd>
 810c206:	4639      	mov	r1, r7
 810c208:	4680      	mov	r8, r0
 810c20a:	2300      	movs	r3, #0
 810c20c:	220a      	movs	r2, #10
 810c20e:	4620      	mov	r0, r4
 810c210:	f000 fe88 	bl	810cf24 <__multadd>
 810c214:	4607      	mov	r7, r0
 810c216:	e7f1      	b.n	810c1fc <_dtoa_r+0xb04>
 810c218:	9b03      	ldr	r3, [sp, #12]
 810c21a:	9302      	str	r3, [sp, #8]
 810c21c:	9d01      	ldr	r5, [sp, #4]
 810c21e:	ee18 0a10 	vmov	r0, s16
 810c222:	4631      	mov	r1, r6
 810c224:	f7ff f9dc 	bl	810b5e0 <quorem>
 810c228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810c22c:	9b01      	ldr	r3, [sp, #4]
 810c22e:	f805 ab01 	strb.w	sl, [r5], #1
 810c232:	1aea      	subs	r2, r5, r3
 810c234:	9b02      	ldr	r3, [sp, #8]
 810c236:	4293      	cmp	r3, r2
 810c238:	dd09      	ble.n	810c24e <_dtoa_r+0xb56>
 810c23a:	ee18 1a10 	vmov	r1, s16
 810c23e:	2300      	movs	r3, #0
 810c240:	220a      	movs	r2, #10
 810c242:	4620      	mov	r0, r4
 810c244:	f000 fe6e 	bl	810cf24 <__multadd>
 810c248:	ee08 0a10 	vmov	s16, r0
 810c24c:	e7e7      	b.n	810c21e <_dtoa_r+0xb26>
 810c24e:	9b02      	ldr	r3, [sp, #8]
 810c250:	2b00      	cmp	r3, #0
 810c252:	bfc8      	it	gt
 810c254:	461d      	movgt	r5, r3
 810c256:	9b01      	ldr	r3, [sp, #4]
 810c258:	bfd8      	it	le
 810c25a:	2501      	movle	r5, #1
 810c25c:	441d      	add	r5, r3
 810c25e:	f04f 0800 	mov.w	r8, #0
 810c262:	ee18 1a10 	vmov	r1, s16
 810c266:	2201      	movs	r2, #1
 810c268:	4620      	mov	r0, r4
 810c26a:	f001 f855 	bl	810d318 <__lshift>
 810c26e:	4631      	mov	r1, r6
 810c270:	ee08 0a10 	vmov	s16, r0
 810c274:	f001 f8c0 	bl	810d3f8 <__mcmp>
 810c278:	2800      	cmp	r0, #0
 810c27a:	dc91      	bgt.n	810c1a0 <_dtoa_r+0xaa8>
 810c27c:	d102      	bne.n	810c284 <_dtoa_r+0xb8c>
 810c27e:	f01a 0f01 	tst.w	sl, #1
 810c282:	d18d      	bne.n	810c1a0 <_dtoa_r+0xaa8>
 810c284:	462b      	mov	r3, r5
 810c286:	461d      	mov	r5, r3
 810c288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c28c:	2a30      	cmp	r2, #48	; 0x30
 810c28e:	d0fa      	beq.n	810c286 <_dtoa_r+0xb8e>
 810c290:	e6d7      	b.n	810c042 <_dtoa_r+0x94a>
 810c292:	9a01      	ldr	r2, [sp, #4]
 810c294:	429a      	cmp	r2, r3
 810c296:	d184      	bne.n	810c1a2 <_dtoa_r+0xaaa>
 810c298:	9b00      	ldr	r3, [sp, #0]
 810c29a:	3301      	adds	r3, #1
 810c29c:	9300      	str	r3, [sp, #0]
 810c29e:	2331      	movs	r3, #49	; 0x31
 810c2a0:	7013      	strb	r3, [r2, #0]
 810c2a2:	e6ce      	b.n	810c042 <_dtoa_r+0x94a>
 810c2a4:	4b09      	ldr	r3, [pc, #36]	; (810c2cc <_dtoa_r+0xbd4>)
 810c2a6:	f7ff ba95 	b.w	810b7d4 <_dtoa_r+0xdc>
 810c2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c2ac:	2b00      	cmp	r3, #0
 810c2ae:	f47f aa6e 	bne.w	810b78e <_dtoa_r+0x96>
 810c2b2:	4b07      	ldr	r3, [pc, #28]	; (810c2d0 <_dtoa_r+0xbd8>)
 810c2b4:	f7ff ba8e 	b.w	810b7d4 <_dtoa_r+0xdc>
 810c2b8:	9b02      	ldr	r3, [sp, #8]
 810c2ba:	2b00      	cmp	r3, #0
 810c2bc:	dcae      	bgt.n	810c21c <_dtoa_r+0xb24>
 810c2be:	9b06      	ldr	r3, [sp, #24]
 810c2c0:	2b02      	cmp	r3, #2
 810c2c2:	f73f aea8 	bgt.w	810c016 <_dtoa_r+0x91e>
 810c2c6:	e7a9      	b.n	810c21c <_dtoa_r+0xb24>
 810c2c8:	0810e4c0 	.word	0x0810e4c0
 810c2cc:	0810e2c0 	.word	0x0810e2c0
 810c2d0:	0810e441 	.word	0x0810e441

0810c2d4 <__sflush_r>:
 810c2d4:	898a      	ldrh	r2, [r1, #12]
 810c2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c2da:	4605      	mov	r5, r0
 810c2dc:	0710      	lsls	r0, r2, #28
 810c2de:	460c      	mov	r4, r1
 810c2e0:	d458      	bmi.n	810c394 <__sflush_r+0xc0>
 810c2e2:	684b      	ldr	r3, [r1, #4]
 810c2e4:	2b00      	cmp	r3, #0
 810c2e6:	dc05      	bgt.n	810c2f4 <__sflush_r+0x20>
 810c2e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c2ea:	2b00      	cmp	r3, #0
 810c2ec:	dc02      	bgt.n	810c2f4 <__sflush_r+0x20>
 810c2ee:	2000      	movs	r0, #0
 810c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c2f6:	2e00      	cmp	r6, #0
 810c2f8:	d0f9      	beq.n	810c2ee <__sflush_r+0x1a>
 810c2fa:	2300      	movs	r3, #0
 810c2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c300:	682f      	ldr	r7, [r5, #0]
 810c302:	602b      	str	r3, [r5, #0]
 810c304:	d032      	beq.n	810c36c <__sflush_r+0x98>
 810c306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c308:	89a3      	ldrh	r3, [r4, #12]
 810c30a:	075a      	lsls	r2, r3, #29
 810c30c:	d505      	bpl.n	810c31a <__sflush_r+0x46>
 810c30e:	6863      	ldr	r3, [r4, #4]
 810c310:	1ac0      	subs	r0, r0, r3
 810c312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c314:	b10b      	cbz	r3, 810c31a <__sflush_r+0x46>
 810c316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c318:	1ac0      	subs	r0, r0, r3
 810c31a:	2300      	movs	r3, #0
 810c31c:	4602      	mov	r2, r0
 810c31e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c320:	6a21      	ldr	r1, [r4, #32]
 810c322:	4628      	mov	r0, r5
 810c324:	47b0      	blx	r6
 810c326:	1c43      	adds	r3, r0, #1
 810c328:	89a3      	ldrh	r3, [r4, #12]
 810c32a:	d106      	bne.n	810c33a <__sflush_r+0x66>
 810c32c:	6829      	ldr	r1, [r5, #0]
 810c32e:	291d      	cmp	r1, #29
 810c330:	d82c      	bhi.n	810c38c <__sflush_r+0xb8>
 810c332:	4a2a      	ldr	r2, [pc, #168]	; (810c3dc <__sflush_r+0x108>)
 810c334:	40ca      	lsrs	r2, r1
 810c336:	07d6      	lsls	r6, r2, #31
 810c338:	d528      	bpl.n	810c38c <__sflush_r+0xb8>
 810c33a:	2200      	movs	r2, #0
 810c33c:	6062      	str	r2, [r4, #4]
 810c33e:	04d9      	lsls	r1, r3, #19
 810c340:	6922      	ldr	r2, [r4, #16]
 810c342:	6022      	str	r2, [r4, #0]
 810c344:	d504      	bpl.n	810c350 <__sflush_r+0x7c>
 810c346:	1c42      	adds	r2, r0, #1
 810c348:	d101      	bne.n	810c34e <__sflush_r+0x7a>
 810c34a:	682b      	ldr	r3, [r5, #0]
 810c34c:	b903      	cbnz	r3, 810c350 <__sflush_r+0x7c>
 810c34e:	6560      	str	r0, [r4, #84]	; 0x54
 810c350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c352:	602f      	str	r7, [r5, #0]
 810c354:	2900      	cmp	r1, #0
 810c356:	d0ca      	beq.n	810c2ee <__sflush_r+0x1a>
 810c358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c35c:	4299      	cmp	r1, r3
 810c35e:	d002      	beq.n	810c366 <__sflush_r+0x92>
 810c360:	4628      	mov	r0, r5
 810c362:	f001 fa3f 	bl	810d7e4 <_free_r>
 810c366:	2000      	movs	r0, #0
 810c368:	6360      	str	r0, [r4, #52]	; 0x34
 810c36a:	e7c1      	b.n	810c2f0 <__sflush_r+0x1c>
 810c36c:	6a21      	ldr	r1, [r4, #32]
 810c36e:	2301      	movs	r3, #1
 810c370:	4628      	mov	r0, r5
 810c372:	47b0      	blx	r6
 810c374:	1c41      	adds	r1, r0, #1
 810c376:	d1c7      	bne.n	810c308 <__sflush_r+0x34>
 810c378:	682b      	ldr	r3, [r5, #0]
 810c37a:	2b00      	cmp	r3, #0
 810c37c:	d0c4      	beq.n	810c308 <__sflush_r+0x34>
 810c37e:	2b1d      	cmp	r3, #29
 810c380:	d001      	beq.n	810c386 <__sflush_r+0xb2>
 810c382:	2b16      	cmp	r3, #22
 810c384:	d101      	bne.n	810c38a <__sflush_r+0xb6>
 810c386:	602f      	str	r7, [r5, #0]
 810c388:	e7b1      	b.n	810c2ee <__sflush_r+0x1a>
 810c38a:	89a3      	ldrh	r3, [r4, #12]
 810c38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c390:	81a3      	strh	r3, [r4, #12]
 810c392:	e7ad      	b.n	810c2f0 <__sflush_r+0x1c>
 810c394:	690f      	ldr	r7, [r1, #16]
 810c396:	2f00      	cmp	r7, #0
 810c398:	d0a9      	beq.n	810c2ee <__sflush_r+0x1a>
 810c39a:	0793      	lsls	r3, r2, #30
 810c39c:	680e      	ldr	r6, [r1, #0]
 810c39e:	bf08      	it	eq
 810c3a0:	694b      	ldreq	r3, [r1, #20]
 810c3a2:	600f      	str	r7, [r1, #0]
 810c3a4:	bf18      	it	ne
 810c3a6:	2300      	movne	r3, #0
 810c3a8:	eba6 0807 	sub.w	r8, r6, r7
 810c3ac:	608b      	str	r3, [r1, #8]
 810c3ae:	f1b8 0f00 	cmp.w	r8, #0
 810c3b2:	dd9c      	ble.n	810c2ee <__sflush_r+0x1a>
 810c3b4:	6a21      	ldr	r1, [r4, #32]
 810c3b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c3b8:	4643      	mov	r3, r8
 810c3ba:	463a      	mov	r2, r7
 810c3bc:	4628      	mov	r0, r5
 810c3be:	47b0      	blx	r6
 810c3c0:	2800      	cmp	r0, #0
 810c3c2:	dc06      	bgt.n	810c3d2 <__sflush_r+0xfe>
 810c3c4:	89a3      	ldrh	r3, [r4, #12]
 810c3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c3ca:	81a3      	strh	r3, [r4, #12]
 810c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 810c3d0:	e78e      	b.n	810c2f0 <__sflush_r+0x1c>
 810c3d2:	4407      	add	r7, r0
 810c3d4:	eba8 0800 	sub.w	r8, r8, r0
 810c3d8:	e7e9      	b.n	810c3ae <__sflush_r+0xda>
 810c3da:	bf00      	nop
 810c3dc:	20400001 	.word	0x20400001

0810c3e0 <_fflush_r>:
 810c3e0:	b538      	push	{r3, r4, r5, lr}
 810c3e2:	690b      	ldr	r3, [r1, #16]
 810c3e4:	4605      	mov	r5, r0
 810c3e6:	460c      	mov	r4, r1
 810c3e8:	b913      	cbnz	r3, 810c3f0 <_fflush_r+0x10>
 810c3ea:	2500      	movs	r5, #0
 810c3ec:	4628      	mov	r0, r5
 810c3ee:	bd38      	pop	{r3, r4, r5, pc}
 810c3f0:	b118      	cbz	r0, 810c3fa <_fflush_r+0x1a>
 810c3f2:	6983      	ldr	r3, [r0, #24]
 810c3f4:	b90b      	cbnz	r3, 810c3fa <_fflush_r+0x1a>
 810c3f6:	f000 f887 	bl	810c508 <__sinit>
 810c3fa:	4b14      	ldr	r3, [pc, #80]	; (810c44c <_fflush_r+0x6c>)
 810c3fc:	429c      	cmp	r4, r3
 810c3fe:	d11b      	bne.n	810c438 <_fflush_r+0x58>
 810c400:	686c      	ldr	r4, [r5, #4]
 810c402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c406:	2b00      	cmp	r3, #0
 810c408:	d0ef      	beq.n	810c3ea <_fflush_r+0xa>
 810c40a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c40c:	07d0      	lsls	r0, r2, #31
 810c40e:	d404      	bmi.n	810c41a <_fflush_r+0x3a>
 810c410:	0599      	lsls	r1, r3, #22
 810c412:	d402      	bmi.n	810c41a <_fflush_r+0x3a>
 810c414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c416:	f000 fc88 	bl	810cd2a <__retarget_lock_acquire_recursive>
 810c41a:	4628      	mov	r0, r5
 810c41c:	4621      	mov	r1, r4
 810c41e:	f7ff ff59 	bl	810c2d4 <__sflush_r>
 810c422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c424:	07da      	lsls	r2, r3, #31
 810c426:	4605      	mov	r5, r0
 810c428:	d4e0      	bmi.n	810c3ec <_fflush_r+0xc>
 810c42a:	89a3      	ldrh	r3, [r4, #12]
 810c42c:	059b      	lsls	r3, r3, #22
 810c42e:	d4dd      	bmi.n	810c3ec <_fflush_r+0xc>
 810c430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c432:	f000 fc7b 	bl	810cd2c <__retarget_lock_release_recursive>
 810c436:	e7d9      	b.n	810c3ec <_fflush_r+0xc>
 810c438:	4b05      	ldr	r3, [pc, #20]	; (810c450 <_fflush_r+0x70>)
 810c43a:	429c      	cmp	r4, r3
 810c43c:	d101      	bne.n	810c442 <_fflush_r+0x62>
 810c43e:	68ac      	ldr	r4, [r5, #8]
 810c440:	e7df      	b.n	810c402 <_fflush_r+0x22>
 810c442:	4b04      	ldr	r3, [pc, #16]	; (810c454 <_fflush_r+0x74>)
 810c444:	429c      	cmp	r4, r3
 810c446:	bf08      	it	eq
 810c448:	68ec      	ldreq	r4, [r5, #12]
 810c44a:	e7da      	b.n	810c402 <_fflush_r+0x22>
 810c44c:	0810e4f4 	.word	0x0810e4f4
 810c450:	0810e514 	.word	0x0810e514
 810c454:	0810e4d4 	.word	0x0810e4d4

0810c458 <std>:
 810c458:	2300      	movs	r3, #0
 810c45a:	b510      	push	{r4, lr}
 810c45c:	4604      	mov	r4, r0
 810c45e:	e9c0 3300 	strd	r3, r3, [r0]
 810c462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810c466:	6083      	str	r3, [r0, #8]
 810c468:	8181      	strh	r1, [r0, #12]
 810c46a:	6643      	str	r3, [r0, #100]	; 0x64
 810c46c:	81c2      	strh	r2, [r0, #14]
 810c46e:	6183      	str	r3, [r0, #24]
 810c470:	4619      	mov	r1, r3
 810c472:	2208      	movs	r2, #8
 810c474:	305c      	adds	r0, #92	; 0x5c
 810c476:	f7fd f931 	bl	81096dc <memset>
 810c47a:	4b05      	ldr	r3, [pc, #20]	; (810c490 <std+0x38>)
 810c47c:	6263      	str	r3, [r4, #36]	; 0x24
 810c47e:	4b05      	ldr	r3, [pc, #20]	; (810c494 <std+0x3c>)
 810c480:	62a3      	str	r3, [r4, #40]	; 0x28
 810c482:	4b05      	ldr	r3, [pc, #20]	; (810c498 <std+0x40>)
 810c484:	62e3      	str	r3, [r4, #44]	; 0x2c
 810c486:	4b05      	ldr	r3, [pc, #20]	; (810c49c <std+0x44>)
 810c488:	6224      	str	r4, [r4, #32]
 810c48a:	6323      	str	r3, [r4, #48]	; 0x30
 810c48c:	bd10      	pop	{r4, pc}
 810c48e:	bf00      	nop
 810c490:	0810dee9 	.word	0x0810dee9
 810c494:	0810df0b 	.word	0x0810df0b
 810c498:	0810df43 	.word	0x0810df43
 810c49c:	0810df67 	.word	0x0810df67

0810c4a0 <_cleanup_r>:
 810c4a0:	4901      	ldr	r1, [pc, #4]	; (810c4a8 <_cleanup_r+0x8>)
 810c4a2:	f000 b8af 	b.w	810c604 <_fwalk_reent>
 810c4a6:	bf00      	nop
 810c4a8:	0810c3e1 	.word	0x0810c3e1

0810c4ac <__sfmoreglue>:
 810c4ac:	b570      	push	{r4, r5, r6, lr}
 810c4ae:	2268      	movs	r2, #104	; 0x68
 810c4b0:	1e4d      	subs	r5, r1, #1
 810c4b2:	4355      	muls	r5, r2
 810c4b4:	460e      	mov	r6, r1
 810c4b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810c4ba:	f7fd f94d 	bl	8109758 <_malloc_r>
 810c4be:	4604      	mov	r4, r0
 810c4c0:	b140      	cbz	r0, 810c4d4 <__sfmoreglue+0x28>
 810c4c2:	2100      	movs	r1, #0
 810c4c4:	e9c0 1600 	strd	r1, r6, [r0]
 810c4c8:	300c      	adds	r0, #12
 810c4ca:	60a0      	str	r0, [r4, #8]
 810c4cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810c4d0:	f7fd f904 	bl	81096dc <memset>
 810c4d4:	4620      	mov	r0, r4
 810c4d6:	bd70      	pop	{r4, r5, r6, pc}

0810c4d8 <__sfp_lock_acquire>:
 810c4d8:	4801      	ldr	r0, [pc, #4]	; (810c4e0 <__sfp_lock_acquire+0x8>)
 810c4da:	f000 bc26 	b.w	810cd2a <__retarget_lock_acquire_recursive>
 810c4de:	bf00      	nop
 810c4e0:	10000559 	.word	0x10000559

0810c4e4 <__sfp_lock_release>:
 810c4e4:	4801      	ldr	r0, [pc, #4]	; (810c4ec <__sfp_lock_release+0x8>)
 810c4e6:	f000 bc21 	b.w	810cd2c <__retarget_lock_release_recursive>
 810c4ea:	bf00      	nop
 810c4ec:	10000559 	.word	0x10000559

0810c4f0 <__sinit_lock_acquire>:
 810c4f0:	4801      	ldr	r0, [pc, #4]	; (810c4f8 <__sinit_lock_acquire+0x8>)
 810c4f2:	f000 bc1a 	b.w	810cd2a <__retarget_lock_acquire_recursive>
 810c4f6:	bf00      	nop
 810c4f8:	1000055a 	.word	0x1000055a

0810c4fc <__sinit_lock_release>:
 810c4fc:	4801      	ldr	r0, [pc, #4]	; (810c504 <__sinit_lock_release+0x8>)
 810c4fe:	f000 bc15 	b.w	810cd2c <__retarget_lock_release_recursive>
 810c502:	bf00      	nop
 810c504:	1000055a 	.word	0x1000055a

0810c508 <__sinit>:
 810c508:	b510      	push	{r4, lr}
 810c50a:	4604      	mov	r4, r0
 810c50c:	f7ff fff0 	bl	810c4f0 <__sinit_lock_acquire>
 810c510:	69a3      	ldr	r3, [r4, #24]
 810c512:	b11b      	cbz	r3, 810c51c <__sinit+0x14>
 810c514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810c518:	f7ff bff0 	b.w	810c4fc <__sinit_lock_release>
 810c51c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810c520:	6523      	str	r3, [r4, #80]	; 0x50
 810c522:	4b13      	ldr	r3, [pc, #76]	; (810c570 <__sinit+0x68>)
 810c524:	4a13      	ldr	r2, [pc, #76]	; (810c574 <__sinit+0x6c>)
 810c526:	681b      	ldr	r3, [r3, #0]
 810c528:	62a2      	str	r2, [r4, #40]	; 0x28
 810c52a:	42a3      	cmp	r3, r4
 810c52c:	bf04      	itt	eq
 810c52e:	2301      	moveq	r3, #1
 810c530:	61a3      	streq	r3, [r4, #24]
 810c532:	4620      	mov	r0, r4
 810c534:	f000 f820 	bl	810c578 <__sfp>
 810c538:	6060      	str	r0, [r4, #4]
 810c53a:	4620      	mov	r0, r4
 810c53c:	f000 f81c 	bl	810c578 <__sfp>
 810c540:	60a0      	str	r0, [r4, #8]
 810c542:	4620      	mov	r0, r4
 810c544:	f000 f818 	bl	810c578 <__sfp>
 810c548:	2200      	movs	r2, #0
 810c54a:	60e0      	str	r0, [r4, #12]
 810c54c:	2104      	movs	r1, #4
 810c54e:	6860      	ldr	r0, [r4, #4]
 810c550:	f7ff ff82 	bl	810c458 <std>
 810c554:	68a0      	ldr	r0, [r4, #8]
 810c556:	2201      	movs	r2, #1
 810c558:	2109      	movs	r1, #9
 810c55a:	f7ff ff7d 	bl	810c458 <std>
 810c55e:	68e0      	ldr	r0, [r4, #12]
 810c560:	2202      	movs	r2, #2
 810c562:	2112      	movs	r1, #18
 810c564:	f7ff ff78 	bl	810c458 <std>
 810c568:	2301      	movs	r3, #1
 810c56a:	61a3      	str	r3, [r4, #24]
 810c56c:	e7d2      	b.n	810c514 <__sinit+0xc>
 810c56e:	bf00      	nop
 810c570:	0810e2ac 	.word	0x0810e2ac
 810c574:	0810c4a1 	.word	0x0810c4a1

0810c578 <__sfp>:
 810c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c57a:	4607      	mov	r7, r0
 810c57c:	f7ff ffac 	bl	810c4d8 <__sfp_lock_acquire>
 810c580:	4b1e      	ldr	r3, [pc, #120]	; (810c5fc <__sfp+0x84>)
 810c582:	681e      	ldr	r6, [r3, #0]
 810c584:	69b3      	ldr	r3, [r6, #24]
 810c586:	b913      	cbnz	r3, 810c58e <__sfp+0x16>
 810c588:	4630      	mov	r0, r6
 810c58a:	f7ff ffbd 	bl	810c508 <__sinit>
 810c58e:	3648      	adds	r6, #72	; 0x48
 810c590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810c594:	3b01      	subs	r3, #1
 810c596:	d503      	bpl.n	810c5a0 <__sfp+0x28>
 810c598:	6833      	ldr	r3, [r6, #0]
 810c59a:	b30b      	cbz	r3, 810c5e0 <__sfp+0x68>
 810c59c:	6836      	ldr	r6, [r6, #0]
 810c59e:	e7f7      	b.n	810c590 <__sfp+0x18>
 810c5a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810c5a4:	b9d5      	cbnz	r5, 810c5dc <__sfp+0x64>
 810c5a6:	4b16      	ldr	r3, [pc, #88]	; (810c600 <__sfp+0x88>)
 810c5a8:	60e3      	str	r3, [r4, #12]
 810c5aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810c5ae:	6665      	str	r5, [r4, #100]	; 0x64
 810c5b0:	f000 fbba 	bl	810cd28 <__retarget_lock_init_recursive>
 810c5b4:	f7ff ff96 	bl	810c4e4 <__sfp_lock_release>
 810c5b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810c5bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810c5c0:	6025      	str	r5, [r4, #0]
 810c5c2:	61a5      	str	r5, [r4, #24]
 810c5c4:	2208      	movs	r2, #8
 810c5c6:	4629      	mov	r1, r5
 810c5c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810c5cc:	f7fd f886 	bl	81096dc <memset>
 810c5d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810c5d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810c5d8:	4620      	mov	r0, r4
 810c5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c5dc:	3468      	adds	r4, #104	; 0x68
 810c5de:	e7d9      	b.n	810c594 <__sfp+0x1c>
 810c5e0:	2104      	movs	r1, #4
 810c5e2:	4638      	mov	r0, r7
 810c5e4:	f7ff ff62 	bl	810c4ac <__sfmoreglue>
 810c5e8:	4604      	mov	r4, r0
 810c5ea:	6030      	str	r0, [r6, #0]
 810c5ec:	2800      	cmp	r0, #0
 810c5ee:	d1d5      	bne.n	810c59c <__sfp+0x24>
 810c5f0:	f7ff ff78 	bl	810c4e4 <__sfp_lock_release>
 810c5f4:	230c      	movs	r3, #12
 810c5f6:	603b      	str	r3, [r7, #0]
 810c5f8:	e7ee      	b.n	810c5d8 <__sfp+0x60>
 810c5fa:	bf00      	nop
 810c5fc:	0810e2ac 	.word	0x0810e2ac
 810c600:	ffff0001 	.word	0xffff0001

0810c604 <_fwalk_reent>:
 810c604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c608:	4606      	mov	r6, r0
 810c60a:	4688      	mov	r8, r1
 810c60c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810c610:	2700      	movs	r7, #0
 810c612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810c616:	f1b9 0901 	subs.w	r9, r9, #1
 810c61a:	d505      	bpl.n	810c628 <_fwalk_reent+0x24>
 810c61c:	6824      	ldr	r4, [r4, #0]
 810c61e:	2c00      	cmp	r4, #0
 810c620:	d1f7      	bne.n	810c612 <_fwalk_reent+0xe>
 810c622:	4638      	mov	r0, r7
 810c624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c628:	89ab      	ldrh	r3, [r5, #12]
 810c62a:	2b01      	cmp	r3, #1
 810c62c:	d907      	bls.n	810c63e <_fwalk_reent+0x3a>
 810c62e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810c632:	3301      	adds	r3, #1
 810c634:	d003      	beq.n	810c63e <_fwalk_reent+0x3a>
 810c636:	4629      	mov	r1, r5
 810c638:	4630      	mov	r0, r6
 810c63a:	47c0      	blx	r8
 810c63c:	4307      	orrs	r7, r0
 810c63e:	3568      	adds	r5, #104	; 0x68
 810c640:	e7e9      	b.n	810c616 <_fwalk_reent+0x12>

0810c642 <rshift>:
 810c642:	6903      	ldr	r3, [r0, #16]
 810c644:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810c648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c64c:	ea4f 1261 	mov.w	r2, r1, asr #5
 810c650:	f100 0414 	add.w	r4, r0, #20
 810c654:	dd45      	ble.n	810c6e2 <rshift+0xa0>
 810c656:	f011 011f 	ands.w	r1, r1, #31
 810c65a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810c65e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810c662:	d10c      	bne.n	810c67e <rshift+0x3c>
 810c664:	f100 0710 	add.w	r7, r0, #16
 810c668:	4629      	mov	r1, r5
 810c66a:	42b1      	cmp	r1, r6
 810c66c:	d334      	bcc.n	810c6d8 <rshift+0x96>
 810c66e:	1a9b      	subs	r3, r3, r2
 810c670:	009b      	lsls	r3, r3, #2
 810c672:	1eea      	subs	r2, r5, #3
 810c674:	4296      	cmp	r6, r2
 810c676:	bf38      	it	cc
 810c678:	2300      	movcc	r3, #0
 810c67a:	4423      	add	r3, r4
 810c67c:	e015      	b.n	810c6aa <rshift+0x68>
 810c67e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810c682:	f1c1 0820 	rsb	r8, r1, #32
 810c686:	40cf      	lsrs	r7, r1
 810c688:	f105 0e04 	add.w	lr, r5, #4
 810c68c:	46a1      	mov	r9, r4
 810c68e:	4576      	cmp	r6, lr
 810c690:	46f4      	mov	ip, lr
 810c692:	d815      	bhi.n	810c6c0 <rshift+0x7e>
 810c694:	1a9a      	subs	r2, r3, r2
 810c696:	0092      	lsls	r2, r2, #2
 810c698:	3a04      	subs	r2, #4
 810c69a:	3501      	adds	r5, #1
 810c69c:	42ae      	cmp	r6, r5
 810c69e:	bf38      	it	cc
 810c6a0:	2200      	movcc	r2, #0
 810c6a2:	18a3      	adds	r3, r4, r2
 810c6a4:	50a7      	str	r7, [r4, r2]
 810c6a6:	b107      	cbz	r7, 810c6aa <rshift+0x68>
 810c6a8:	3304      	adds	r3, #4
 810c6aa:	1b1a      	subs	r2, r3, r4
 810c6ac:	42a3      	cmp	r3, r4
 810c6ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810c6b2:	bf08      	it	eq
 810c6b4:	2300      	moveq	r3, #0
 810c6b6:	6102      	str	r2, [r0, #16]
 810c6b8:	bf08      	it	eq
 810c6ba:	6143      	streq	r3, [r0, #20]
 810c6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c6c0:	f8dc c000 	ldr.w	ip, [ip]
 810c6c4:	fa0c fc08 	lsl.w	ip, ip, r8
 810c6c8:	ea4c 0707 	orr.w	r7, ip, r7
 810c6cc:	f849 7b04 	str.w	r7, [r9], #4
 810c6d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 810c6d4:	40cf      	lsrs	r7, r1
 810c6d6:	e7da      	b.n	810c68e <rshift+0x4c>
 810c6d8:	f851 cb04 	ldr.w	ip, [r1], #4
 810c6dc:	f847 cf04 	str.w	ip, [r7, #4]!
 810c6e0:	e7c3      	b.n	810c66a <rshift+0x28>
 810c6e2:	4623      	mov	r3, r4
 810c6e4:	e7e1      	b.n	810c6aa <rshift+0x68>

0810c6e6 <__hexdig_fun>:
 810c6e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810c6ea:	2b09      	cmp	r3, #9
 810c6ec:	d802      	bhi.n	810c6f4 <__hexdig_fun+0xe>
 810c6ee:	3820      	subs	r0, #32
 810c6f0:	b2c0      	uxtb	r0, r0
 810c6f2:	4770      	bx	lr
 810c6f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810c6f8:	2b05      	cmp	r3, #5
 810c6fa:	d801      	bhi.n	810c700 <__hexdig_fun+0x1a>
 810c6fc:	3847      	subs	r0, #71	; 0x47
 810c6fe:	e7f7      	b.n	810c6f0 <__hexdig_fun+0xa>
 810c700:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810c704:	2b05      	cmp	r3, #5
 810c706:	d801      	bhi.n	810c70c <__hexdig_fun+0x26>
 810c708:	3827      	subs	r0, #39	; 0x27
 810c70a:	e7f1      	b.n	810c6f0 <__hexdig_fun+0xa>
 810c70c:	2000      	movs	r0, #0
 810c70e:	4770      	bx	lr

0810c710 <__gethex>:
 810c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c714:	ed2d 8b02 	vpush	{d8}
 810c718:	b089      	sub	sp, #36	; 0x24
 810c71a:	ee08 0a10 	vmov	s16, r0
 810c71e:	9304      	str	r3, [sp, #16]
 810c720:	4bb4      	ldr	r3, [pc, #720]	; (810c9f4 <__gethex+0x2e4>)
 810c722:	681b      	ldr	r3, [r3, #0]
 810c724:	9301      	str	r3, [sp, #4]
 810c726:	4618      	mov	r0, r3
 810c728:	468b      	mov	fp, r1
 810c72a:	4690      	mov	r8, r2
 810c72c:	f7f3 fdd8 	bl	81002e0 <strlen>
 810c730:	9b01      	ldr	r3, [sp, #4]
 810c732:	f8db 2000 	ldr.w	r2, [fp]
 810c736:	4403      	add	r3, r0
 810c738:	4682      	mov	sl, r0
 810c73a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810c73e:	9305      	str	r3, [sp, #20]
 810c740:	1c93      	adds	r3, r2, #2
 810c742:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810c746:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810c74a:	32fe      	adds	r2, #254	; 0xfe
 810c74c:	18d1      	adds	r1, r2, r3
 810c74e:	461f      	mov	r7, r3
 810c750:	f813 0b01 	ldrb.w	r0, [r3], #1
 810c754:	9100      	str	r1, [sp, #0]
 810c756:	2830      	cmp	r0, #48	; 0x30
 810c758:	d0f8      	beq.n	810c74c <__gethex+0x3c>
 810c75a:	f7ff ffc4 	bl	810c6e6 <__hexdig_fun>
 810c75e:	4604      	mov	r4, r0
 810c760:	2800      	cmp	r0, #0
 810c762:	d13a      	bne.n	810c7da <__gethex+0xca>
 810c764:	9901      	ldr	r1, [sp, #4]
 810c766:	4652      	mov	r2, sl
 810c768:	4638      	mov	r0, r7
 810c76a:	f001 fc00 	bl	810df6e <strncmp>
 810c76e:	4605      	mov	r5, r0
 810c770:	2800      	cmp	r0, #0
 810c772:	d168      	bne.n	810c846 <__gethex+0x136>
 810c774:	f817 000a 	ldrb.w	r0, [r7, sl]
 810c778:	eb07 060a 	add.w	r6, r7, sl
 810c77c:	f7ff ffb3 	bl	810c6e6 <__hexdig_fun>
 810c780:	2800      	cmp	r0, #0
 810c782:	d062      	beq.n	810c84a <__gethex+0x13a>
 810c784:	4633      	mov	r3, r6
 810c786:	7818      	ldrb	r0, [r3, #0]
 810c788:	2830      	cmp	r0, #48	; 0x30
 810c78a:	461f      	mov	r7, r3
 810c78c:	f103 0301 	add.w	r3, r3, #1
 810c790:	d0f9      	beq.n	810c786 <__gethex+0x76>
 810c792:	f7ff ffa8 	bl	810c6e6 <__hexdig_fun>
 810c796:	2301      	movs	r3, #1
 810c798:	fab0 f480 	clz	r4, r0
 810c79c:	0964      	lsrs	r4, r4, #5
 810c79e:	4635      	mov	r5, r6
 810c7a0:	9300      	str	r3, [sp, #0]
 810c7a2:	463a      	mov	r2, r7
 810c7a4:	4616      	mov	r6, r2
 810c7a6:	3201      	adds	r2, #1
 810c7a8:	7830      	ldrb	r0, [r6, #0]
 810c7aa:	f7ff ff9c 	bl	810c6e6 <__hexdig_fun>
 810c7ae:	2800      	cmp	r0, #0
 810c7b0:	d1f8      	bne.n	810c7a4 <__gethex+0x94>
 810c7b2:	9901      	ldr	r1, [sp, #4]
 810c7b4:	4652      	mov	r2, sl
 810c7b6:	4630      	mov	r0, r6
 810c7b8:	f001 fbd9 	bl	810df6e <strncmp>
 810c7bc:	b980      	cbnz	r0, 810c7e0 <__gethex+0xd0>
 810c7be:	b94d      	cbnz	r5, 810c7d4 <__gethex+0xc4>
 810c7c0:	eb06 050a 	add.w	r5, r6, sl
 810c7c4:	462a      	mov	r2, r5
 810c7c6:	4616      	mov	r6, r2
 810c7c8:	3201      	adds	r2, #1
 810c7ca:	7830      	ldrb	r0, [r6, #0]
 810c7cc:	f7ff ff8b 	bl	810c6e6 <__hexdig_fun>
 810c7d0:	2800      	cmp	r0, #0
 810c7d2:	d1f8      	bne.n	810c7c6 <__gethex+0xb6>
 810c7d4:	1bad      	subs	r5, r5, r6
 810c7d6:	00ad      	lsls	r5, r5, #2
 810c7d8:	e004      	b.n	810c7e4 <__gethex+0xd4>
 810c7da:	2400      	movs	r4, #0
 810c7dc:	4625      	mov	r5, r4
 810c7de:	e7e0      	b.n	810c7a2 <__gethex+0x92>
 810c7e0:	2d00      	cmp	r5, #0
 810c7e2:	d1f7      	bne.n	810c7d4 <__gethex+0xc4>
 810c7e4:	7833      	ldrb	r3, [r6, #0]
 810c7e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810c7ea:	2b50      	cmp	r3, #80	; 0x50
 810c7ec:	d13b      	bne.n	810c866 <__gethex+0x156>
 810c7ee:	7873      	ldrb	r3, [r6, #1]
 810c7f0:	2b2b      	cmp	r3, #43	; 0x2b
 810c7f2:	d02c      	beq.n	810c84e <__gethex+0x13e>
 810c7f4:	2b2d      	cmp	r3, #45	; 0x2d
 810c7f6:	d02e      	beq.n	810c856 <__gethex+0x146>
 810c7f8:	1c71      	adds	r1, r6, #1
 810c7fa:	f04f 0900 	mov.w	r9, #0
 810c7fe:	7808      	ldrb	r0, [r1, #0]
 810c800:	f7ff ff71 	bl	810c6e6 <__hexdig_fun>
 810c804:	1e43      	subs	r3, r0, #1
 810c806:	b2db      	uxtb	r3, r3
 810c808:	2b18      	cmp	r3, #24
 810c80a:	d82c      	bhi.n	810c866 <__gethex+0x156>
 810c80c:	f1a0 0210 	sub.w	r2, r0, #16
 810c810:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810c814:	f7ff ff67 	bl	810c6e6 <__hexdig_fun>
 810c818:	1e43      	subs	r3, r0, #1
 810c81a:	b2db      	uxtb	r3, r3
 810c81c:	2b18      	cmp	r3, #24
 810c81e:	d91d      	bls.n	810c85c <__gethex+0x14c>
 810c820:	f1b9 0f00 	cmp.w	r9, #0
 810c824:	d000      	beq.n	810c828 <__gethex+0x118>
 810c826:	4252      	negs	r2, r2
 810c828:	4415      	add	r5, r2
 810c82a:	f8cb 1000 	str.w	r1, [fp]
 810c82e:	b1e4      	cbz	r4, 810c86a <__gethex+0x15a>
 810c830:	9b00      	ldr	r3, [sp, #0]
 810c832:	2b00      	cmp	r3, #0
 810c834:	bf14      	ite	ne
 810c836:	2700      	movne	r7, #0
 810c838:	2706      	moveq	r7, #6
 810c83a:	4638      	mov	r0, r7
 810c83c:	b009      	add	sp, #36	; 0x24
 810c83e:	ecbd 8b02 	vpop	{d8}
 810c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c846:	463e      	mov	r6, r7
 810c848:	4625      	mov	r5, r4
 810c84a:	2401      	movs	r4, #1
 810c84c:	e7ca      	b.n	810c7e4 <__gethex+0xd4>
 810c84e:	f04f 0900 	mov.w	r9, #0
 810c852:	1cb1      	adds	r1, r6, #2
 810c854:	e7d3      	b.n	810c7fe <__gethex+0xee>
 810c856:	f04f 0901 	mov.w	r9, #1
 810c85a:	e7fa      	b.n	810c852 <__gethex+0x142>
 810c85c:	230a      	movs	r3, #10
 810c85e:	fb03 0202 	mla	r2, r3, r2, r0
 810c862:	3a10      	subs	r2, #16
 810c864:	e7d4      	b.n	810c810 <__gethex+0x100>
 810c866:	4631      	mov	r1, r6
 810c868:	e7df      	b.n	810c82a <__gethex+0x11a>
 810c86a:	1bf3      	subs	r3, r6, r7
 810c86c:	3b01      	subs	r3, #1
 810c86e:	4621      	mov	r1, r4
 810c870:	2b07      	cmp	r3, #7
 810c872:	dc0b      	bgt.n	810c88c <__gethex+0x17c>
 810c874:	ee18 0a10 	vmov	r0, s16
 810c878:	f000 faf2 	bl	810ce60 <_Balloc>
 810c87c:	4604      	mov	r4, r0
 810c87e:	b940      	cbnz	r0, 810c892 <__gethex+0x182>
 810c880:	4b5d      	ldr	r3, [pc, #372]	; (810c9f8 <__gethex+0x2e8>)
 810c882:	4602      	mov	r2, r0
 810c884:	21de      	movs	r1, #222	; 0xde
 810c886:	485d      	ldr	r0, [pc, #372]	; (810c9fc <__gethex+0x2ec>)
 810c888:	f001 fba4 	bl	810dfd4 <__assert_func>
 810c88c:	3101      	adds	r1, #1
 810c88e:	105b      	asrs	r3, r3, #1
 810c890:	e7ee      	b.n	810c870 <__gethex+0x160>
 810c892:	f100 0914 	add.w	r9, r0, #20
 810c896:	f04f 0b00 	mov.w	fp, #0
 810c89a:	f1ca 0301 	rsb	r3, sl, #1
 810c89e:	f8cd 9008 	str.w	r9, [sp, #8]
 810c8a2:	f8cd b000 	str.w	fp, [sp]
 810c8a6:	9306      	str	r3, [sp, #24]
 810c8a8:	42b7      	cmp	r7, r6
 810c8aa:	d340      	bcc.n	810c92e <__gethex+0x21e>
 810c8ac:	9802      	ldr	r0, [sp, #8]
 810c8ae:	9b00      	ldr	r3, [sp, #0]
 810c8b0:	f840 3b04 	str.w	r3, [r0], #4
 810c8b4:	eba0 0009 	sub.w	r0, r0, r9
 810c8b8:	1080      	asrs	r0, r0, #2
 810c8ba:	0146      	lsls	r6, r0, #5
 810c8bc:	6120      	str	r0, [r4, #16]
 810c8be:	4618      	mov	r0, r3
 810c8c0:	f000 fbc0 	bl	810d044 <__hi0bits>
 810c8c4:	1a30      	subs	r0, r6, r0
 810c8c6:	f8d8 6000 	ldr.w	r6, [r8]
 810c8ca:	42b0      	cmp	r0, r6
 810c8cc:	dd63      	ble.n	810c996 <__gethex+0x286>
 810c8ce:	1b87      	subs	r7, r0, r6
 810c8d0:	4639      	mov	r1, r7
 810c8d2:	4620      	mov	r0, r4
 810c8d4:	f000 ff64 	bl	810d7a0 <__any_on>
 810c8d8:	4682      	mov	sl, r0
 810c8da:	b1a8      	cbz	r0, 810c908 <__gethex+0x1f8>
 810c8dc:	1e7b      	subs	r3, r7, #1
 810c8de:	1159      	asrs	r1, r3, #5
 810c8e0:	f003 021f 	and.w	r2, r3, #31
 810c8e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810c8e8:	f04f 0a01 	mov.w	sl, #1
 810c8ec:	fa0a f202 	lsl.w	r2, sl, r2
 810c8f0:	420a      	tst	r2, r1
 810c8f2:	d009      	beq.n	810c908 <__gethex+0x1f8>
 810c8f4:	4553      	cmp	r3, sl
 810c8f6:	dd05      	ble.n	810c904 <__gethex+0x1f4>
 810c8f8:	1eb9      	subs	r1, r7, #2
 810c8fa:	4620      	mov	r0, r4
 810c8fc:	f000 ff50 	bl	810d7a0 <__any_on>
 810c900:	2800      	cmp	r0, #0
 810c902:	d145      	bne.n	810c990 <__gethex+0x280>
 810c904:	f04f 0a02 	mov.w	sl, #2
 810c908:	4639      	mov	r1, r7
 810c90a:	4620      	mov	r0, r4
 810c90c:	f7ff fe99 	bl	810c642 <rshift>
 810c910:	443d      	add	r5, r7
 810c912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c916:	42ab      	cmp	r3, r5
 810c918:	da4c      	bge.n	810c9b4 <__gethex+0x2a4>
 810c91a:	ee18 0a10 	vmov	r0, s16
 810c91e:	4621      	mov	r1, r4
 810c920:	f000 fade 	bl	810cee0 <_Bfree>
 810c924:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c926:	2300      	movs	r3, #0
 810c928:	6013      	str	r3, [r2, #0]
 810c92a:	27a3      	movs	r7, #163	; 0xa3
 810c92c:	e785      	b.n	810c83a <__gethex+0x12a>
 810c92e:	1e73      	subs	r3, r6, #1
 810c930:	9a05      	ldr	r2, [sp, #20]
 810c932:	9303      	str	r3, [sp, #12]
 810c934:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810c938:	4293      	cmp	r3, r2
 810c93a:	d019      	beq.n	810c970 <__gethex+0x260>
 810c93c:	f1bb 0f20 	cmp.w	fp, #32
 810c940:	d107      	bne.n	810c952 <__gethex+0x242>
 810c942:	9b02      	ldr	r3, [sp, #8]
 810c944:	9a00      	ldr	r2, [sp, #0]
 810c946:	f843 2b04 	str.w	r2, [r3], #4
 810c94a:	9302      	str	r3, [sp, #8]
 810c94c:	2300      	movs	r3, #0
 810c94e:	9300      	str	r3, [sp, #0]
 810c950:	469b      	mov	fp, r3
 810c952:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810c956:	f7ff fec6 	bl	810c6e6 <__hexdig_fun>
 810c95a:	9b00      	ldr	r3, [sp, #0]
 810c95c:	f000 000f 	and.w	r0, r0, #15
 810c960:	fa00 f00b 	lsl.w	r0, r0, fp
 810c964:	4303      	orrs	r3, r0
 810c966:	9300      	str	r3, [sp, #0]
 810c968:	f10b 0b04 	add.w	fp, fp, #4
 810c96c:	9b03      	ldr	r3, [sp, #12]
 810c96e:	e00d      	b.n	810c98c <__gethex+0x27c>
 810c970:	9b03      	ldr	r3, [sp, #12]
 810c972:	9a06      	ldr	r2, [sp, #24]
 810c974:	4413      	add	r3, r2
 810c976:	42bb      	cmp	r3, r7
 810c978:	d3e0      	bcc.n	810c93c <__gethex+0x22c>
 810c97a:	4618      	mov	r0, r3
 810c97c:	9901      	ldr	r1, [sp, #4]
 810c97e:	9307      	str	r3, [sp, #28]
 810c980:	4652      	mov	r2, sl
 810c982:	f001 faf4 	bl	810df6e <strncmp>
 810c986:	9b07      	ldr	r3, [sp, #28]
 810c988:	2800      	cmp	r0, #0
 810c98a:	d1d7      	bne.n	810c93c <__gethex+0x22c>
 810c98c:	461e      	mov	r6, r3
 810c98e:	e78b      	b.n	810c8a8 <__gethex+0x198>
 810c990:	f04f 0a03 	mov.w	sl, #3
 810c994:	e7b8      	b.n	810c908 <__gethex+0x1f8>
 810c996:	da0a      	bge.n	810c9ae <__gethex+0x29e>
 810c998:	1a37      	subs	r7, r6, r0
 810c99a:	4621      	mov	r1, r4
 810c99c:	ee18 0a10 	vmov	r0, s16
 810c9a0:	463a      	mov	r2, r7
 810c9a2:	f000 fcb9 	bl	810d318 <__lshift>
 810c9a6:	1bed      	subs	r5, r5, r7
 810c9a8:	4604      	mov	r4, r0
 810c9aa:	f100 0914 	add.w	r9, r0, #20
 810c9ae:	f04f 0a00 	mov.w	sl, #0
 810c9b2:	e7ae      	b.n	810c912 <__gethex+0x202>
 810c9b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810c9b8:	42a8      	cmp	r0, r5
 810c9ba:	dd72      	ble.n	810caa2 <__gethex+0x392>
 810c9bc:	1b45      	subs	r5, r0, r5
 810c9be:	42ae      	cmp	r6, r5
 810c9c0:	dc36      	bgt.n	810ca30 <__gethex+0x320>
 810c9c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c9c6:	2b02      	cmp	r3, #2
 810c9c8:	d02a      	beq.n	810ca20 <__gethex+0x310>
 810c9ca:	2b03      	cmp	r3, #3
 810c9cc:	d02c      	beq.n	810ca28 <__gethex+0x318>
 810c9ce:	2b01      	cmp	r3, #1
 810c9d0:	d11c      	bne.n	810ca0c <__gethex+0x2fc>
 810c9d2:	42ae      	cmp	r6, r5
 810c9d4:	d11a      	bne.n	810ca0c <__gethex+0x2fc>
 810c9d6:	2e01      	cmp	r6, #1
 810c9d8:	d112      	bne.n	810ca00 <__gethex+0x2f0>
 810c9da:	9a04      	ldr	r2, [sp, #16]
 810c9dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810c9e0:	6013      	str	r3, [r2, #0]
 810c9e2:	2301      	movs	r3, #1
 810c9e4:	6123      	str	r3, [r4, #16]
 810c9e6:	f8c9 3000 	str.w	r3, [r9]
 810c9ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c9ec:	2762      	movs	r7, #98	; 0x62
 810c9ee:	601c      	str	r4, [r3, #0]
 810c9f0:	e723      	b.n	810c83a <__gethex+0x12a>
 810c9f2:	bf00      	nop
 810c9f4:	0810e59c 	.word	0x0810e59c
 810c9f8:	0810e4c0 	.word	0x0810e4c0
 810c9fc:	0810e534 	.word	0x0810e534
 810ca00:	1e71      	subs	r1, r6, #1
 810ca02:	4620      	mov	r0, r4
 810ca04:	f000 fecc 	bl	810d7a0 <__any_on>
 810ca08:	2800      	cmp	r0, #0
 810ca0a:	d1e6      	bne.n	810c9da <__gethex+0x2ca>
 810ca0c:	ee18 0a10 	vmov	r0, s16
 810ca10:	4621      	mov	r1, r4
 810ca12:	f000 fa65 	bl	810cee0 <_Bfree>
 810ca16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810ca18:	2300      	movs	r3, #0
 810ca1a:	6013      	str	r3, [r2, #0]
 810ca1c:	2750      	movs	r7, #80	; 0x50
 810ca1e:	e70c      	b.n	810c83a <__gethex+0x12a>
 810ca20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ca22:	2b00      	cmp	r3, #0
 810ca24:	d1f2      	bne.n	810ca0c <__gethex+0x2fc>
 810ca26:	e7d8      	b.n	810c9da <__gethex+0x2ca>
 810ca28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ca2a:	2b00      	cmp	r3, #0
 810ca2c:	d1d5      	bne.n	810c9da <__gethex+0x2ca>
 810ca2e:	e7ed      	b.n	810ca0c <__gethex+0x2fc>
 810ca30:	1e6f      	subs	r7, r5, #1
 810ca32:	f1ba 0f00 	cmp.w	sl, #0
 810ca36:	d131      	bne.n	810ca9c <__gethex+0x38c>
 810ca38:	b127      	cbz	r7, 810ca44 <__gethex+0x334>
 810ca3a:	4639      	mov	r1, r7
 810ca3c:	4620      	mov	r0, r4
 810ca3e:	f000 feaf 	bl	810d7a0 <__any_on>
 810ca42:	4682      	mov	sl, r0
 810ca44:	117b      	asrs	r3, r7, #5
 810ca46:	2101      	movs	r1, #1
 810ca48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810ca4c:	f007 071f 	and.w	r7, r7, #31
 810ca50:	fa01 f707 	lsl.w	r7, r1, r7
 810ca54:	421f      	tst	r7, r3
 810ca56:	4629      	mov	r1, r5
 810ca58:	4620      	mov	r0, r4
 810ca5a:	bf18      	it	ne
 810ca5c:	f04a 0a02 	orrne.w	sl, sl, #2
 810ca60:	1b76      	subs	r6, r6, r5
 810ca62:	f7ff fdee 	bl	810c642 <rshift>
 810ca66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810ca6a:	2702      	movs	r7, #2
 810ca6c:	f1ba 0f00 	cmp.w	sl, #0
 810ca70:	d048      	beq.n	810cb04 <__gethex+0x3f4>
 810ca72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810ca76:	2b02      	cmp	r3, #2
 810ca78:	d015      	beq.n	810caa6 <__gethex+0x396>
 810ca7a:	2b03      	cmp	r3, #3
 810ca7c:	d017      	beq.n	810caae <__gethex+0x39e>
 810ca7e:	2b01      	cmp	r3, #1
 810ca80:	d109      	bne.n	810ca96 <__gethex+0x386>
 810ca82:	f01a 0f02 	tst.w	sl, #2
 810ca86:	d006      	beq.n	810ca96 <__gethex+0x386>
 810ca88:	f8d9 0000 	ldr.w	r0, [r9]
 810ca8c:	ea4a 0a00 	orr.w	sl, sl, r0
 810ca90:	f01a 0f01 	tst.w	sl, #1
 810ca94:	d10e      	bne.n	810cab4 <__gethex+0x3a4>
 810ca96:	f047 0710 	orr.w	r7, r7, #16
 810ca9a:	e033      	b.n	810cb04 <__gethex+0x3f4>
 810ca9c:	f04f 0a01 	mov.w	sl, #1
 810caa0:	e7d0      	b.n	810ca44 <__gethex+0x334>
 810caa2:	2701      	movs	r7, #1
 810caa4:	e7e2      	b.n	810ca6c <__gethex+0x35c>
 810caa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810caa8:	f1c3 0301 	rsb	r3, r3, #1
 810caac:	9315      	str	r3, [sp, #84]	; 0x54
 810caae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810cab0:	2b00      	cmp	r3, #0
 810cab2:	d0f0      	beq.n	810ca96 <__gethex+0x386>
 810cab4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810cab8:	f104 0314 	add.w	r3, r4, #20
 810cabc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810cac0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810cac4:	f04f 0c00 	mov.w	ip, #0
 810cac8:	4618      	mov	r0, r3
 810caca:	f853 2b04 	ldr.w	r2, [r3], #4
 810cace:	f1b2 3fff 	cmp.w	r2, #4294967295
 810cad2:	d01c      	beq.n	810cb0e <__gethex+0x3fe>
 810cad4:	3201      	adds	r2, #1
 810cad6:	6002      	str	r2, [r0, #0]
 810cad8:	2f02      	cmp	r7, #2
 810cada:	f104 0314 	add.w	r3, r4, #20
 810cade:	d13f      	bne.n	810cb60 <__gethex+0x450>
 810cae0:	f8d8 2000 	ldr.w	r2, [r8]
 810cae4:	3a01      	subs	r2, #1
 810cae6:	42b2      	cmp	r2, r6
 810cae8:	d10a      	bne.n	810cb00 <__gethex+0x3f0>
 810caea:	1171      	asrs	r1, r6, #5
 810caec:	2201      	movs	r2, #1
 810caee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810caf2:	f006 061f 	and.w	r6, r6, #31
 810caf6:	fa02 f606 	lsl.w	r6, r2, r6
 810cafa:	421e      	tst	r6, r3
 810cafc:	bf18      	it	ne
 810cafe:	4617      	movne	r7, r2
 810cb00:	f047 0720 	orr.w	r7, r7, #32
 810cb04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810cb06:	601c      	str	r4, [r3, #0]
 810cb08:	9b04      	ldr	r3, [sp, #16]
 810cb0a:	601d      	str	r5, [r3, #0]
 810cb0c:	e695      	b.n	810c83a <__gethex+0x12a>
 810cb0e:	4299      	cmp	r1, r3
 810cb10:	f843 cc04 	str.w	ip, [r3, #-4]
 810cb14:	d8d8      	bhi.n	810cac8 <__gethex+0x3b8>
 810cb16:	68a3      	ldr	r3, [r4, #8]
 810cb18:	459b      	cmp	fp, r3
 810cb1a:	db19      	blt.n	810cb50 <__gethex+0x440>
 810cb1c:	6861      	ldr	r1, [r4, #4]
 810cb1e:	ee18 0a10 	vmov	r0, s16
 810cb22:	3101      	adds	r1, #1
 810cb24:	f000 f99c 	bl	810ce60 <_Balloc>
 810cb28:	4681      	mov	r9, r0
 810cb2a:	b918      	cbnz	r0, 810cb34 <__gethex+0x424>
 810cb2c:	4b1a      	ldr	r3, [pc, #104]	; (810cb98 <__gethex+0x488>)
 810cb2e:	4602      	mov	r2, r0
 810cb30:	2184      	movs	r1, #132	; 0x84
 810cb32:	e6a8      	b.n	810c886 <__gethex+0x176>
 810cb34:	6922      	ldr	r2, [r4, #16]
 810cb36:	3202      	adds	r2, #2
 810cb38:	f104 010c 	add.w	r1, r4, #12
 810cb3c:	0092      	lsls	r2, r2, #2
 810cb3e:	300c      	adds	r0, #12
 810cb40:	f000 f974 	bl	810ce2c <memcpy>
 810cb44:	4621      	mov	r1, r4
 810cb46:	ee18 0a10 	vmov	r0, s16
 810cb4a:	f000 f9c9 	bl	810cee0 <_Bfree>
 810cb4e:	464c      	mov	r4, r9
 810cb50:	6923      	ldr	r3, [r4, #16]
 810cb52:	1c5a      	adds	r2, r3, #1
 810cb54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810cb58:	6122      	str	r2, [r4, #16]
 810cb5a:	2201      	movs	r2, #1
 810cb5c:	615a      	str	r2, [r3, #20]
 810cb5e:	e7bb      	b.n	810cad8 <__gethex+0x3c8>
 810cb60:	6922      	ldr	r2, [r4, #16]
 810cb62:	455a      	cmp	r2, fp
 810cb64:	dd0b      	ble.n	810cb7e <__gethex+0x46e>
 810cb66:	2101      	movs	r1, #1
 810cb68:	4620      	mov	r0, r4
 810cb6a:	f7ff fd6a 	bl	810c642 <rshift>
 810cb6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810cb72:	3501      	adds	r5, #1
 810cb74:	42ab      	cmp	r3, r5
 810cb76:	f6ff aed0 	blt.w	810c91a <__gethex+0x20a>
 810cb7a:	2701      	movs	r7, #1
 810cb7c:	e7c0      	b.n	810cb00 <__gethex+0x3f0>
 810cb7e:	f016 061f 	ands.w	r6, r6, #31
 810cb82:	d0fa      	beq.n	810cb7a <__gethex+0x46a>
 810cb84:	4453      	add	r3, sl
 810cb86:	f1c6 0620 	rsb	r6, r6, #32
 810cb8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810cb8e:	f000 fa59 	bl	810d044 <__hi0bits>
 810cb92:	42b0      	cmp	r0, r6
 810cb94:	dbe7      	blt.n	810cb66 <__gethex+0x456>
 810cb96:	e7f0      	b.n	810cb7a <__gethex+0x46a>
 810cb98:	0810e4c0 	.word	0x0810e4c0

0810cb9c <L_shift>:
 810cb9c:	f1c2 0208 	rsb	r2, r2, #8
 810cba0:	0092      	lsls	r2, r2, #2
 810cba2:	b570      	push	{r4, r5, r6, lr}
 810cba4:	f1c2 0620 	rsb	r6, r2, #32
 810cba8:	6843      	ldr	r3, [r0, #4]
 810cbaa:	6804      	ldr	r4, [r0, #0]
 810cbac:	fa03 f506 	lsl.w	r5, r3, r6
 810cbb0:	432c      	orrs	r4, r5
 810cbb2:	40d3      	lsrs	r3, r2
 810cbb4:	6004      	str	r4, [r0, #0]
 810cbb6:	f840 3f04 	str.w	r3, [r0, #4]!
 810cbba:	4288      	cmp	r0, r1
 810cbbc:	d3f4      	bcc.n	810cba8 <L_shift+0xc>
 810cbbe:	bd70      	pop	{r4, r5, r6, pc}

0810cbc0 <__match>:
 810cbc0:	b530      	push	{r4, r5, lr}
 810cbc2:	6803      	ldr	r3, [r0, #0]
 810cbc4:	3301      	adds	r3, #1
 810cbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810cbca:	b914      	cbnz	r4, 810cbd2 <__match+0x12>
 810cbcc:	6003      	str	r3, [r0, #0]
 810cbce:	2001      	movs	r0, #1
 810cbd0:	bd30      	pop	{r4, r5, pc}
 810cbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810cbd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810cbda:	2d19      	cmp	r5, #25
 810cbdc:	bf98      	it	ls
 810cbde:	3220      	addls	r2, #32
 810cbe0:	42a2      	cmp	r2, r4
 810cbe2:	d0f0      	beq.n	810cbc6 <__match+0x6>
 810cbe4:	2000      	movs	r0, #0
 810cbe6:	e7f3      	b.n	810cbd0 <__match+0x10>

0810cbe8 <__hexnan>:
 810cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cbec:	680b      	ldr	r3, [r1, #0]
 810cbee:	115e      	asrs	r6, r3, #5
 810cbf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810cbf4:	f013 031f 	ands.w	r3, r3, #31
 810cbf8:	b087      	sub	sp, #28
 810cbfa:	bf18      	it	ne
 810cbfc:	3604      	addne	r6, #4
 810cbfe:	2500      	movs	r5, #0
 810cc00:	1f37      	subs	r7, r6, #4
 810cc02:	4690      	mov	r8, r2
 810cc04:	6802      	ldr	r2, [r0, #0]
 810cc06:	9301      	str	r3, [sp, #4]
 810cc08:	4682      	mov	sl, r0
 810cc0a:	f846 5c04 	str.w	r5, [r6, #-4]
 810cc0e:	46b9      	mov	r9, r7
 810cc10:	463c      	mov	r4, r7
 810cc12:	9502      	str	r5, [sp, #8]
 810cc14:	46ab      	mov	fp, r5
 810cc16:	7851      	ldrb	r1, [r2, #1]
 810cc18:	1c53      	adds	r3, r2, #1
 810cc1a:	9303      	str	r3, [sp, #12]
 810cc1c:	b341      	cbz	r1, 810cc70 <__hexnan+0x88>
 810cc1e:	4608      	mov	r0, r1
 810cc20:	9205      	str	r2, [sp, #20]
 810cc22:	9104      	str	r1, [sp, #16]
 810cc24:	f7ff fd5f 	bl	810c6e6 <__hexdig_fun>
 810cc28:	2800      	cmp	r0, #0
 810cc2a:	d14f      	bne.n	810cccc <__hexnan+0xe4>
 810cc2c:	9904      	ldr	r1, [sp, #16]
 810cc2e:	9a05      	ldr	r2, [sp, #20]
 810cc30:	2920      	cmp	r1, #32
 810cc32:	d818      	bhi.n	810cc66 <__hexnan+0x7e>
 810cc34:	9b02      	ldr	r3, [sp, #8]
 810cc36:	459b      	cmp	fp, r3
 810cc38:	dd13      	ble.n	810cc62 <__hexnan+0x7a>
 810cc3a:	454c      	cmp	r4, r9
 810cc3c:	d206      	bcs.n	810cc4c <__hexnan+0x64>
 810cc3e:	2d07      	cmp	r5, #7
 810cc40:	dc04      	bgt.n	810cc4c <__hexnan+0x64>
 810cc42:	462a      	mov	r2, r5
 810cc44:	4649      	mov	r1, r9
 810cc46:	4620      	mov	r0, r4
 810cc48:	f7ff ffa8 	bl	810cb9c <L_shift>
 810cc4c:	4544      	cmp	r4, r8
 810cc4e:	d950      	bls.n	810ccf2 <__hexnan+0x10a>
 810cc50:	2300      	movs	r3, #0
 810cc52:	f1a4 0904 	sub.w	r9, r4, #4
 810cc56:	f844 3c04 	str.w	r3, [r4, #-4]
 810cc5a:	f8cd b008 	str.w	fp, [sp, #8]
 810cc5e:	464c      	mov	r4, r9
 810cc60:	461d      	mov	r5, r3
 810cc62:	9a03      	ldr	r2, [sp, #12]
 810cc64:	e7d7      	b.n	810cc16 <__hexnan+0x2e>
 810cc66:	2929      	cmp	r1, #41	; 0x29
 810cc68:	d156      	bne.n	810cd18 <__hexnan+0x130>
 810cc6a:	3202      	adds	r2, #2
 810cc6c:	f8ca 2000 	str.w	r2, [sl]
 810cc70:	f1bb 0f00 	cmp.w	fp, #0
 810cc74:	d050      	beq.n	810cd18 <__hexnan+0x130>
 810cc76:	454c      	cmp	r4, r9
 810cc78:	d206      	bcs.n	810cc88 <__hexnan+0xa0>
 810cc7a:	2d07      	cmp	r5, #7
 810cc7c:	dc04      	bgt.n	810cc88 <__hexnan+0xa0>
 810cc7e:	462a      	mov	r2, r5
 810cc80:	4649      	mov	r1, r9
 810cc82:	4620      	mov	r0, r4
 810cc84:	f7ff ff8a 	bl	810cb9c <L_shift>
 810cc88:	4544      	cmp	r4, r8
 810cc8a:	d934      	bls.n	810ccf6 <__hexnan+0x10e>
 810cc8c:	f1a8 0204 	sub.w	r2, r8, #4
 810cc90:	4623      	mov	r3, r4
 810cc92:	f853 1b04 	ldr.w	r1, [r3], #4
 810cc96:	f842 1f04 	str.w	r1, [r2, #4]!
 810cc9a:	429f      	cmp	r7, r3
 810cc9c:	d2f9      	bcs.n	810cc92 <__hexnan+0xaa>
 810cc9e:	1b3b      	subs	r3, r7, r4
 810cca0:	f023 0303 	bic.w	r3, r3, #3
 810cca4:	3304      	adds	r3, #4
 810cca6:	3401      	adds	r4, #1
 810cca8:	3e03      	subs	r6, #3
 810ccaa:	42b4      	cmp	r4, r6
 810ccac:	bf88      	it	hi
 810ccae:	2304      	movhi	r3, #4
 810ccb0:	4443      	add	r3, r8
 810ccb2:	2200      	movs	r2, #0
 810ccb4:	f843 2b04 	str.w	r2, [r3], #4
 810ccb8:	429f      	cmp	r7, r3
 810ccba:	d2fb      	bcs.n	810ccb4 <__hexnan+0xcc>
 810ccbc:	683b      	ldr	r3, [r7, #0]
 810ccbe:	b91b      	cbnz	r3, 810ccc8 <__hexnan+0xe0>
 810ccc0:	4547      	cmp	r7, r8
 810ccc2:	d127      	bne.n	810cd14 <__hexnan+0x12c>
 810ccc4:	2301      	movs	r3, #1
 810ccc6:	603b      	str	r3, [r7, #0]
 810ccc8:	2005      	movs	r0, #5
 810ccca:	e026      	b.n	810cd1a <__hexnan+0x132>
 810cccc:	3501      	adds	r5, #1
 810ccce:	2d08      	cmp	r5, #8
 810ccd0:	f10b 0b01 	add.w	fp, fp, #1
 810ccd4:	dd06      	ble.n	810cce4 <__hexnan+0xfc>
 810ccd6:	4544      	cmp	r4, r8
 810ccd8:	d9c3      	bls.n	810cc62 <__hexnan+0x7a>
 810ccda:	2300      	movs	r3, #0
 810ccdc:	f844 3c04 	str.w	r3, [r4, #-4]
 810cce0:	2501      	movs	r5, #1
 810cce2:	3c04      	subs	r4, #4
 810cce4:	6822      	ldr	r2, [r4, #0]
 810cce6:	f000 000f 	and.w	r0, r0, #15
 810ccea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810ccee:	6022      	str	r2, [r4, #0]
 810ccf0:	e7b7      	b.n	810cc62 <__hexnan+0x7a>
 810ccf2:	2508      	movs	r5, #8
 810ccf4:	e7b5      	b.n	810cc62 <__hexnan+0x7a>
 810ccf6:	9b01      	ldr	r3, [sp, #4]
 810ccf8:	2b00      	cmp	r3, #0
 810ccfa:	d0df      	beq.n	810ccbc <__hexnan+0xd4>
 810ccfc:	f04f 32ff 	mov.w	r2, #4294967295
 810cd00:	f1c3 0320 	rsb	r3, r3, #32
 810cd04:	fa22 f303 	lsr.w	r3, r2, r3
 810cd08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810cd0c:	401a      	ands	r2, r3
 810cd0e:	f846 2c04 	str.w	r2, [r6, #-4]
 810cd12:	e7d3      	b.n	810ccbc <__hexnan+0xd4>
 810cd14:	3f04      	subs	r7, #4
 810cd16:	e7d1      	b.n	810ccbc <__hexnan+0xd4>
 810cd18:	2004      	movs	r0, #4
 810cd1a:	b007      	add	sp, #28
 810cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cd20 <_localeconv_r>:
 810cd20:	4800      	ldr	r0, [pc, #0]	; (810cd24 <_localeconv_r+0x4>)
 810cd22:	4770      	bx	lr
 810cd24:	10000178 	.word	0x10000178

0810cd28 <__retarget_lock_init_recursive>:
 810cd28:	4770      	bx	lr

0810cd2a <__retarget_lock_acquire_recursive>:
 810cd2a:	4770      	bx	lr

0810cd2c <__retarget_lock_release_recursive>:
 810cd2c:	4770      	bx	lr

0810cd2e <__swhatbuf_r>:
 810cd2e:	b570      	push	{r4, r5, r6, lr}
 810cd30:	460e      	mov	r6, r1
 810cd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cd36:	2900      	cmp	r1, #0
 810cd38:	b096      	sub	sp, #88	; 0x58
 810cd3a:	4614      	mov	r4, r2
 810cd3c:	461d      	mov	r5, r3
 810cd3e:	da08      	bge.n	810cd52 <__swhatbuf_r+0x24>
 810cd40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810cd44:	2200      	movs	r2, #0
 810cd46:	602a      	str	r2, [r5, #0]
 810cd48:	061a      	lsls	r2, r3, #24
 810cd4a:	d410      	bmi.n	810cd6e <__swhatbuf_r+0x40>
 810cd4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810cd50:	e00e      	b.n	810cd70 <__swhatbuf_r+0x42>
 810cd52:	466a      	mov	r2, sp
 810cd54:	f001 f97e 	bl	810e054 <_fstat_r>
 810cd58:	2800      	cmp	r0, #0
 810cd5a:	dbf1      	blt.n	810cd40 <__swhatbuf_r+0x12>
 810cd5c:	9a01      	ldr	r2, [sp, #4]
 810cd5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810cd62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810cd66:	425a      	negs	r2, r3
 810cd68:	415a      	adcs	r2, r3
 810cd6a:	602a      	str	r2, [r5, #0]
 810cd6c:	e7ee      	b.n	810cd4c <__swhatbuf_r+0x1e>
 810cd6e:	2340      	movs	r3, #64	; 0x40
 810cd70:	2000      	movs	r0, #0
 810cd72:	6023      	str	r3, [r4, #0]
 810cd74:	b016      	add	sp, #88	; 0x58
 810cd76:	bd70      	pop	{r4, r5, r6, pc}

0810cd78 <__smakebuf_r>:
 810cd78:	898b      	ldrh	r3, [r1, #12]
 810cd7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810cd7c:	079d      	lsls	r5, r3, #30
 810cd7e:	4606      	mov	r6, r0
 810cd80:	460c      	mov	r4, r1
 810cd82:	d507      	bpl.n	810cd94 <__smakebuf_r+0x1c>
 810cd84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810cd88:	6023      	str	r3, [r4, #0]
 810cd8a:	6123      	str	r3, [r4, #16]
 810cd8c:	2301      	movs	r3, #1
 810cd8e:	6163      	str	r3, [r4, #20]
 810cd90:	b002      	add	sp, #8
 810cd92:	bd70      	pop	{r4, r5, r6, pc}
 810cd94:	ab01      	add	r3, sp, #4
 810cd96:	466a      	mov	r2, sp
 810cd98:	f7ff ffc9 	bl	810cd2e <__swhatbuf_r>
 810cd9c:	9900      	ldr	r1, [sp, #0]
 810cd9e:	4605      	mov	r5, r0
 810cda0:	4630      	mov	r0, r6
 810cda2:	f7fc fcd9 	bl	8109758 <_malloc_r>
 810cda6:	b948      	cbnz	r0, 810cdbc <__smakebuf_r+0x44>
 810cda8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810cdac:	059a      	lsls	r2, r3, #22
 810cdae:	d4ef      	bmi.n	810cd90 <__smakebuf_r+0x18>
 810cdb0:	f023 0303 	bic.w	r3, r3, #3
 810cdb4:	f043 0302 	orr.w	r3, r3, #2
 810cdb8:	81a3      	strh	r3, [r4, #12]
 810cdba:	e7e3      	b.n	810cd84 <__smakebuf_r+0xc>
 810cdbc:	4b0d      	ldr	r3, [pc, #52]	; (810cdf4 <__smakebuf_r+0x7c>)
 810cdbe:	62b3      	str	r3, [r6, #40]	; 0x28
 810cdc0:	89a3      	ldrh	r3, [r4, #12]
 810cdc2:	6020      	str	r0, [r4, #0]
 810cdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810cdc8:	81a3      	strh	r3, [r4, #12]
 810cdca:	9b00      	ldr	r3, [sp, #0]
 810cdcc:	6163      	str	r3, [r4, #20]
 810cdce:	9b01      	ldr	r3, [sp, #4]
 810cdd0:	6120      	str	r0, [r4, #16]
 810cdd2:	b15b      	cbz	r3, 810cdec <__smakebuf_r+0x74>
 810cdd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810cdd8:	4630      	mov	r0, r6
 810cdda:	f001 f94d 	bl	810e078 <_isatty_r>
 810cdde:	b128      	cbz	r0, 810cdec <__smakebuf_r+0x74>
 810cde0:	89a3      	ldrh	r3, [r4, #12]
 810cde2:	f023 0303 	bic.w	r3, r3, #3
 810cde6:	f043 0301 	orr.w	r3, r3, #1
 810cdea:	81a3      	strh	r3, [r4, #12]
 810cdec:	89a0      	ldrh	r0, [r4, #12]
 810cdee:	4305      	orrs	r5, r0
 810cdf0:	81a5      	strh	r5, [r4, #12]
 810cdf2:	e7cd      	b.n	810cd90 <__smakebuf_r+0x18>
 810cdf4:	0810c4a1 	.word	0x0810c4a1

0810cdf8 <malloc>:
 810cdf8:	4b02      	ldr	r3, [pc, #8]	; (810ce04 <malloc+0xc>)
 810cdfa:	4601      	mov	r1, r0
 810cdfc:	6818      	ldr	r0, [r3, #0]
 810cdfe:	f7fc bcab 	b.w	8109758 <_malloc_r>
 810ce02:	bf00      	nop
 810ce04:	10000020 	.word	0x10000020

0810ce08 <__ascii_mbtowc>:
 810ce08:	b082      	sub	sp, #8
 810ce0a:	b901      	cbnz	r1, 810ce0e <__ascii_mbtowc+0x6>
 810ce0c:	a901      	add	r1, sp, #4
 810ce0e:	b142      	cbz	r2, 810ce22 <__ascii_mbtowc+0x1a>
 810ce10:	b14b      	cbz	r3, 810ce26 <__ascii_mbtowc+0x1e>
 810ce12:	7813      	ldrb	r3, [r2, #0]
 810ce14:	600b      	str	r3, [r1, #0]
 810ce16:	7812      	ldrb	r2, [r2, #0]
 810ce18:	1e10      	subs	r0, r2, #0
 810ce1a:	bf18      	it	ne
 810ce1c:	2001      	movne	r0, #1
 810ce1e:	b002      	add	sp, #8
 810ce20:	4770      	bx	lr
 810ce22:	4610      	mov	r0, r2
 810ce24:	e7fb      	b.n	810ce1e <__ascii_mbtowc+0x16>
 810ce26:	f06f 0001 	mvn.w	r0, #1
 810ce2a:	e7f8      	b.n	810ce1e <__ascii_mbtowc+0x16>

0810ce2c <memcpy>:
 810ce2c:	440a      	add	r2, r1
 810ce2e:	4291      	cmp	r1, r2
 810ce30:	f100 33ff 	add.w	r3, r0, #4294967295
 810ce34:	d100      	bne.n	810ce38 <memcpy+0xc>
 810ce36:	4770      	bx	lr
 810ce38:	b510      	push	{r4, lr}
 810ce3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ce3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ce42:	4291      	cmp	r1, r2
 810ce44:	d1f9      	bne.n	810ce3a <memcpy+0xe>
 810ce46:	bd10      	pop	{r4, pc}

0810ce48 <__malloc_lock>:
 810ce48:	4801      	ldr	r0, [pc, #4]	; (810ce50 <__malloc_lock+0x8>)
 810ce4a:	f7ff bf6e 	b.w	810cd2a <__retarget_lock_acquire_recursive>
 810ce4e:	bf00      	nop
 810ce50:	10000558 	.word	0x10000558

0810ce54 <__malloc_unlock>:
 810ce54:	4801      	ldr	r0, [pc, #4]	; (810ce5c <__malloc_unlock+0x8>)
 810ce56:	f7ff bf69 	b.w	810cd2c <__retarget_lock_release_recursive>
 810ce5a:	bf00      	nop
 810ce5c:	10000558 	.word	0x10000558

0810ce60 <_Balloc>:
 810ce60:	b570      	push	{r4, r5, r6, lr}
 810ce62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ce64:	4604      	mov	r4, r0
 810ce66:	460d      	mov	r5, r1
 810ce68:	b976      	cbnz	r6, 810ce88 <_Balloc+0x28>
 810ce6a:	2010      	movs	r0, #16
 810ce6c:	f7ff ffc4 	bl	810cdf8 <malloc>
 810ce70:	4602      	mov	r2, r0
 810ce72:	6260      	str	r0, [r4, #36]	; 0x24
 810ce74:	b920      	cbnz	r0, 810ce80 <_Balloc+0x20>
 810ce76:	4b18      	ldr	r3, [pc, #96]	; (810ced8 <_Balloc+0x78>)
 810ce78:	4818      	ldr	r0, [pc, #96]	; (810cedc <_Balloc+0x7c>)
 810ce7a:	2166      	movs	r1, #102	; 0x66
 810ce7c:	f001 f8aa 	bl	810dfd4 <__assert_func>
 810ce80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ce84:	6006      	str	r6, [r0, #0]
 810ce86:	60c6      	str	r6, [r0, #12]
 810ce88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810ce8a:	68f3      	ldr	r3, [r6, #12]
 810ce8c:	b183      	cbz	r3, 810ceb0 <_Balloc+0x50>
 810ce8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ce90:	68db      	ldr	r3, [r3, #12]
 810ce92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810ce96:	b9b8      	cbnz	r0, 810cec8 <_Balloc+0x68>
 810ce98:	2101      	movs	r1, #1
 810ce9a:	fa01 f605 	lsl.w	r6, r1, r5
 810ce9e:	1d72      	adds	r2, r6, #5
 810cea0:	0092      	lsls	r2, r2, #2
 810cea2:	4620      	mov	r0, r4
 810cea4:	f7fc fc22 	bl	81096ec <_calloc_r>
 810cea8:	b160      	cbz	r0, 810cec4 <_Balloc+0x64>
 810ceaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810ceae:	e00e      	b.n	810cece <_Balloc+0x6e>
 810ceb0:	2221      	movs	r2, #33	; 0x21
 810ceb2:	2104      	movs	r1, #4
 810ceb4:	4620      	mov	r0, r4
 810ceb6:	f7fc fc19 	bl	81096ec <_calloc_r>
 810ceba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cebc:	60f0      	str	r0, [r6, #12]
 810cebe:	68db      	ldr	r3, [r3, #12]
 810cec0:	2b00      	cmp	r3, #0
 810cec2:	d1e4      	bne.n	810ce8e <_Balloc+0x2e>
 810cec4:	2000      	movs	r0, #0
 810cec6:	bd70      	pop	{r4, r5, r6, pc}
 810cec8:	6802      	ldr	r2, [r0, #0]
 810ceca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810cece:	2300      	movs	r3, #0
 810ced0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810ced4:	e7f7      	b.n	810cec6 <_Balloc+0x66>
 810ced6:	bf00      	nop
 810ced8:	0810e44e 	.word	0x0810e44e
 810cedc:	0810e5b0 	.word	0x0810e5b0

0810cee0 <_Bfree>:
 810cee0:	b570      	push	{r4, r5, r6, lr}
 810cee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810cee4:	4605      	mov	r5, r0
 810cee6:	460c      	mov	r4, r1
 810cee8:	b976      	cbnz	r6, 810cf08 <_Bfree+0x28>
 810ceea:	2010      	movs	r0, #16
 810ceec:	f7ff ff84 	bl	810cdf8 <malloc>
 810cef0:	4602      	mov	r2, r0
 810cef2:	6268      	str	r0, [r5, #36]	; 0x24
 810cef4:	b920      	cbnz	r0, 810cf00 <_Bfree+0x20>
 810cef6:	4b09      	ldr	r3, [pc, #36]	; (810cf1c <_Bfree+0x3c>)
 810cef8:	4809      	ldr	r0, [pc, #36]	; (810cf20 <_Bfree+0x40>)
 810cefa:	218a      	movs	r1, #138	; 0x8a
 810cefc:	f001 f86a 	bl	810dfd4 <__assert_func>
 810cf00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810cf04:	6006      	str	r6, [r0, #0]
 810cf06:	60c6      	str	r6, [r0, #12]
 810cf08:	b13c      	cbz	r4, 810cf1a <_Bfree+0x3a>
 810cf0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810cf0c:	6862      	ldr	r2, [r4, #4]
 810cf0e:	68db      	ldr	r3, [r3, #12]
 810cf10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810cf14:	6021      	str	r1, [r4, #0]
 810cf16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810cf1a:	bd70      	pop	{r4, r5, r6, pc}
 810cf1c:	0810e44e 	.word	0x0810e44e
 810cf20:	0810e5b0 	.word	0x0810e5b0

0810cf24 <__multadd>:
 810cf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cf28:	690d      	ldr	r5, [r1, #16]
 810cf2a:	4607      	mov	r7, r0
 810cf2c:	460c      	mov	r4, r1
 810cf2e:	461e      	mov	r6, r3
 810cf30:	f101 0c14 	add.w	ip, r1, #20
 810cf34:	2000      	movs	r0, #0
 810cf36:	f8dc 3000 	ldr.w	r3, [ip]
 810cf3a:	b299      	uxth	r1, r3
 810cf3c:	fb02 6101 	mla	r1, r2, r1, r6
 810cf40:	0c1e      	lsrs	r6, r3, #16
 810cf42:	0c0b      	lsrs	r3, r1, #16
 810cf44:	fb02 3306 	mla	r3, r2, r6, r3
 810cf48:	b289      	uxth	r1, r1
 810cf4a:	3001      	adds	r0, #1
 810cf4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810cf50:	4285      	cmp	r5, r0
 810cf52:	f84c 1b04 	str.w	r1, [ip], #4
 810cf56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810cf5a:	dcec      	bgt.n	810cf36 <__multadd+0x12>
 810cf5c:	b30e      	cbz	r6, 810cfa2 <__multadd+0x7e>
 810cf5e:	68a3      	ldr	r3, [r4, #8]
 810cf60:	42ab      	cmp	r3, r5
 810cf62:	dc19      	bgt.n	810cf98 <__multadd+0x74>
 810cf64:	6861      	ldr	r1, [r4, #4]
 810cf66:	4638      	mov	r0, r7
 810cf68:	3101      	adds	r1, #1
 810cf6a:	f7ff ff79 	bl	810ce60 <_Balloc>
 810cf6e:	4680      	mov	r8, r0
 810cf70:	b928      	cbnz	r0, 810cf7e <__multadd+0x5a>
 810cf72:	4602      	mov	r2, r0
 810cf74:	4b0c      	ldr	r3, [pc, #48]	; (810cfa8 <__multadd+0x84>)
 810cf76:	480d      	ldr	r0, [pc, #52]	; (810cfac <__multadd+0x88>)
 810cf78:	21b5      	movs	r1, #181	; 0xb5
 810cf7a:	f001 f82b 	bl	810dfd4 <__assert_func>
 810cf7e:	6922      	ldr	r2, [r4, #16]
 810cf80:	3202      	adds	r2, #2
 810cf82:	f104 010c 	add.w	r1, r4, #12
 810cf86:	0092      	lsls	r2, r2, #2
 810cf88:	300c      	adds	r0, #12
 810cf8a:	f7ff ff4f 	bl	810ce2c <memcpy>
 810cf8e:	4621      	mov	r1, r4
 810cf90:	4638      	mov	r0, r7
 810cf92:	f7ff ffa5 	bl	810cee0 <_Bfree>
 810cf96:	4644      	mov	r4, r8
 810cf98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810cf9c:	3501      	adds	r5, #1
 810cf9e:	615e      	str	r6, [r3, #20]
 810cfa0:	6125      	str	r5, [r4, #16]
 810cfa2:	4620      	mov	r0, r4
 810cfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cfa8:	0810e4c0 	.word	0x0810e4c0
 810cfac:	0810e5b0 	.word	0x0810e5b0

0810cfb0 <__s2b>:
 810cfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cfb4:	460c      	mov	r4, r1
 810cfb6:	4615      	mov	r5, r2
 810cfb8:	461f      	mov	r7, r3
 810cfba:	2209      	movs	r2, #9
 810cfbc:	3308      	adds	r3, #8
 810cfbe:	4606      	mov	r6, r0
 810cfc0:	fb93 f3f2 	sdiv	r3, r3, r2
 810cfc4:	2100      	movs	r1, #0
 810cfc6:	2201      	movs	r2, #1
 810cfc8:	429a      	cmp	r2, r3
 810cfca:	db09      	blt.n	810cfe0 <__s2b+0x30>
 810cfcc:	4630      	mov	r0, r6
 810cfce:	f7ff ff47 	bl	810ce60 <_Balloc>
 810cfd2:	b940      	cbnz	r0, 810cfe6 <__s2b+0x36>
 810cfd4:	4602      	mov	r2, r0
 810cfd6:	4b19      	ldr	r3, [pc, #100]	; (810d03c <__s2b+0x8c>)
 810cfd8:	4819      	ldr	r0, [pc, #100]	; (810d040 <__s2b+0x90>)
 810cfda:	21ce      	movs	r1, #206	; 0xce
 810cfdc:	f000 fffa 	bl	810dfd4 <__assert_func>
 810cfe0:	0052      	lsls	r2, r2, #1
 810cfe2:	3101      	adds	r1, #1
 810cfe4:	e7f0      	b.n	810cfc8 <__s2b+0x18>
 810cfe6:	9b08      	ldr	r3, [sp, #32]
 810cfe8:	6143      	str	r3, [r0, #20]
 810cfea:	2d09      	cmp	r5, #9
 810cfec:	f04f 0301 	mov.w	r3, #1
 810cff0:	6103      	str	r3, [r0, #16]
 810cff2:	dd16      	ble.n	810d022 <__s2b+0x72>
 810cff4:	f104 0909 	add.w	r9, r4, #9
 810cff8:	46c8      	mov	r8, r9
 810cffa:	442c      	add	r4, r5
 810cffc:	f818 3b01 	ldrb.w	r3, [r8], #1
 810d000:	4601      	mov	r1, r0
 810d002:	3b30      	subs	r3, #48	; 0x30
 810d004:	220a      	movs	r2, #10
 810d006:	4630      	mov	r0, r6
 810d008:	f7ff ff8c 	bl	810cf24 <__multadd>
 810d00c:	45a0      	cmp	r8, r4
 810d00e:	d1f5      	bne.n	810cffc <__s2b+0x4c>
 810d010:	f1a5 0408 	sub.w	r4, r5, #8
 810d014:	444c      	add	r4, r9
 810d016:	1b2d      	subs	r5, r5, r4
 810d018:	1963      	adds	r3, r4, r5
 810d01a:	42bb      	cmp	r3, r7
 810d01c:	db04      	blt.n	810d028 <__s2b+0x78>
 810d01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d022:	340a      	adds	r4, #10
 810d024:	2509      	movs	r5, #9
 810d026:	e7f6      	b.n	810d016 <__s2b+0x66>
 810d028:	f814 3b01 	ldrb.w	r3, [r4], #1
 810d02c:	4601      	mov	r1, r0
 810d02e:	3b30      	subs	r3, #48	; 0x30
 810d030:	220a      	movs	r2, #10
 810d032:	4630      	mov	r0, r6
 810d034:	f7ff ff76 	bl	810cf24 <__multadd>
 810d038:	e7ee      	b.n	810d018 <__s2b+0x68>
 810d03a:	bf00      	nop
 810d03c:	0810e4c0 	.word	0x0810e4c0
 810d040:	0810e5b0 	.word	0x0810e5b0

0810d044 <__hi0bits>:
 810d044:	0c03      	lsrs	r3, r0, #16
 810d046:	041b      	lsls	r3, r3, #16
 810d048:	b9d3      	cbnz	r3, 810d080 <__hi0bits+0x3c>
 810d04a:	0400      	lsls	r0, r0, #16
 810d04c:	2310      	movs	r3, #16
 810d04e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810d052:	bf04      	itt	eq
 810d054:	0200      	lsleq	r0, r0, #8
 810d056:	3308      	addeq	r3, #8
 810d058:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810d05c:	bf04      	itt	eq
 810d05e:	0100      	lsleq	r0, r0, #4
 810d060:	3304      	addeq	r3, #4
 810d062:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810d066:	bf04      	itt	eq
 810d068:	0080      	lsleq	r0, r0, #2
 810d06a:	3302      	addeq	r3, #2
 810d06c:	2800      	cmp	r0, #0
 810d06e:	db05      	blt.n	810d07c <__hi0bits+0x38>
 810d070:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810d074:	f103 0301 	add.w	r3, r3, #1
 810d078:	bf08      	it	eq
 810d07a:	2320      	moveq	r3, #32
 810d07c:	4618      	mov	r0, r3
 810d07e:	4770      	bx	lr
 810d080:	2300      	movs	r3, #0
 810d082:	e7e4      	b.n	810d04e <__hi0bits+0xa>

0810d084 <__lo0bits>:
 810d084:	6803      	ldr	r3, [r0, #0]
 810d086:	f013 0207 	ands.w	r2, r3, #7
 810d08a:	4601      	mov	r1, r0
 810d08c:	d00b      	beq.n	810d0a6 <__lo0bits+0x22>
 810d08e:	07da      	lsls	r2, r3, #31
 810d090:	d423      	bmi.n	810d0da <__lo0bits+0x56>
 810d092:	0798      	lsls	r0, r3, #30
 810d094:	bf49      	itett	mi
 810d096:	085b      	lsrmi	r3, r3, #1
 810d098:	089b      	lsrpl	r3, r3, #2
 810d09a:	2001      	movmi	r0, #1
 810d09c:	600b      	strmi	r3, [r1, #0]
 810d09e:	bf5c      	itt	pl
 810d0a0:	600b      	strpl	r3, [r1, #0]
 810d0a2:	2002      	movpl	r0, #2
 810d0a4:	4770      	bx	lr
 810d0a6:	b298      	uxth	r0, r3
 810d0a8:	b9a8      	cbnz	r0, 810d0d6 <__lo0bits+0x52>
 810d0aa:	0c1b      	lsrs	r3, r3, #16
 810d0ac:	2010      	movs	r0, #16
 810d0ae:	b2da      	uxtb	r2, r3
 810d0b0:	b90a      	cbnz	r2, 810d0b6 <__lo0bits+0x32>
 810d0b2:	3008      	adds	r0, #8
 810d0b4:	0a1b      	lsrs	r3, r3, #8
 810d0b6:	071a      	lsls	r2, r3, #28
 810d0b8:	bf04      	itt	eq
 810d0ba:	091b      	lsreq	r3, r3, #4
 810d0bc:	3004      	addeq	r0, #4
 810d0be:	079a      	lsls	r2, r3, #30
 810d0c0:	bf04      	itt	eq
 810d0c2:	089b      	lsreq	r3, r3, #2
 810d0c4:	3002      	addeq	r0, #2
 810d0c6:	07da      	lsls	r2, r3, #31
 810d0c8:	d403      	bmi.n	810d0d2 <__lo0bits+0x4e>
 810d0ca:	085b      	lsrs	r3, r3, #1
 810d0cc:	f100 0001 	add.w	r0, r0, #1
 810d0d0:	d005      	beq.n	810d0de <__lo0bits+0x5a>
 810d0d2:	600b      	str	r3, [r1, #0]
 810d0d4:	4770      	bx	lr
 810d0d6:	4610      	mov	r0, r2
 810d0d8:	e7e9      	b.n	810d0ae <__lo0bits+0x2a>
 810d0da:	2000      	movs	r0, #0
 810d0dc:	4770      	bx	lr
 810d0de:	2020      	movs	r0, #32
 810d0e0:	4770      	bx	lr
	...

0810d0e4 <__i2b>:
 810d0e4:	b510      	push	{r4, lr}
 810d0e6:	460c      	mov	r4, r1
 810d0e8:	2101      	movs	r1, #1
 810d0ea:	f7ff feb9 	bl	810ce60 <_Balloc>
 810d0ee:	4602      	mov	r2, r0
 810d0f0:	b928      	cbnz	r0, 810d0fe <__i2b+0x1a>
 810d0f2:	4b05      	ldr	r3, [pc, #20]	; (810d108 <__i2b+0x24>)
 810d0f4:	4805      	ldr	r0, [pc, #20]	; (810d10c <__i2b+0x28>)
 810d0f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810d0fa:	f000 ff6b 	bl	810dfd4 <__assert_func>
 810d0fe:	2301      	movs	r3, #1
 810d100:	6144      	str	r4, [r0, #20]
 810d102:	6103      	str	r3, [r0, #16]
 810d104:	bd10      	pop	{r4, pc}
 810d106:	bf00      	nop
 810d108:	0810e4c0 	.word	0x0810e4c0
 810d10c:	0810e5b0 	.word	0x0810e5b0

0810d110 <__multiply>:
 810d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d114:	4691      	mov	r9, r2
 810d116:	690a      	ldr	r2, [r1, #16]
 810d118:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810d11c:	429a      	cmp	r2, r3
 810d11e:	bfb8      	it	lt
 810d120:	460b      	movlt	r3, r1
 810d122:	460c      	mov	r4, r1
 810d124:	bfbc      	itt	lt
 810d126:	464c      	movlt	r4, r9
 810d128:	4699      	movlt	r9, r3
 810d12a:	6927      	ldr	r7, [r4, #16]
 810d12c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810d130:	68a3      	ldr	r3, [r4, #8]
 810d132:	6861      	ldr	r1, [r4, #4]
 810d134:	eb07 060a 	add.w	r6, r7, sl
 810d138:	42b3      	cmp	r3, r6
 810d13a:	b085      	sub	sp, #20
 810d13c:	bfb8      	it	lt
 810d13e:	3101      	addlt	r1, #1
 810d140:	f7ff fe8e 	bl	810ce60 <_Balloc>
 810d144:	b930      	cbnz	r0, 810d154 <__multiply+0x44>
 810d146:	4602      	mov	r2, r0
 810d148:	4b44      	ldr	r3, [pc, #272]	; (810d25c <__multiply+0x14c>)
 810d14a:	4845      	ldr	r0, [pc, #276]	; (810d260 <__multiply+0x150>)
 810d14c:	f240 115d 	movw	r1, #349	; 0x15d
 810d150:	f000 ff40 	bl	810dfd4 <__assert_func>
 810d154:	f100 0514 	add.w	r5, r0, #20
 810d158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810d15c:	462b      	mov	r3, r5
 810d15e:	2200      	movs	r2, #0
 810d160:	4543      	cmp	r3, r8
 810d162:	d321      	bcc.n	810d1a8 <__multiply+0x98>
 810d164:	f104 0314 	add.w	r3, r4, #20
 810d168:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810d16c:	f109 0314 	add.w	r3, r9, #20
 810d170:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810d174:	9202      	str	r2, [sp, #8]
 810d176:	1b3a      	subs	r2, r7, r4
 810d178:	3a15      	subs	r2, #21
 810d17a:	f022 0203 	bic.w	r2, r2, #3
 810d17e:	3204      	adds	r2, #4
 810d180:	f104 0115 	add.w	r1, r4, #21
 810d184:	428f      	cmp	r7, r1
 810d186:	bf38      	it	cc
 810d188:	2204      	movcc	r2, #4
 810d18a:	9201      	str	r2, [sp, #4]
 810d18c:	9a02      	ldr	r2, [sp, #8]
 810d18e:	9303      	str	r3, [sp, #12]
 810d190:	429a      	cmp	r2, r3
 810d192:	d80c      	bhi.n	810d1ae <__multiply+0x9e>
 810d194:	2e00      	cmp	r6, #0
 810d196:	dd03      	ble.n	810d1a0 <__multiply+0x90>
 810d198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810d19c:	2b00      	cmp	r3, #0
 810d19e:	d05a      	beq.n	810d256 <__multiply+0x146>
 810d1a0:	6106      	str	r6, [r0, #16]
 810d1a2:	b005      	add	sp, #20
 810d1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d1a8:	f843 2b04 	str.w	r2, [r3], #4
 810d1ac:	e7d8      	b.n	810d160 <__multiply+0x50>
 810d1ae:	f8b3 a000 	ldrh.w	sl, [r3]
 810d1b2:	f1ba 0f00 	cmp.w	sl, #0
 810d1b6:	d024      	beq.n	810d202 <__multiply+0xf2>
 810d1b8:	f104 0e14 	add.w	lr, r4, #20
 810d1bc:	46a9      	mov	r9, r5
 810d1be:	f04f 0c00 	mov.w	ip, #0
 810d1c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 810d1c6:	f8d9 1000 	ldr.w	r1, [r9]
 810d1ca:	fa1f fb82 	uxth.w	fp, r2
 810d1ce:	b289      	uxth	r1, r1
 810d1d0:	fb0a 110b 	mla	r1, sl, fp, r1
 810d1d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810d1d8:	f8d9 2000 	ldr.w	r2, [r9]
 810d1dc:	4461      	add	r1, ip
 810d1de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810d1e2:	fb0a c20b 	mla	r2, sl, fp, ip
 810d1e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810d1ea:	b289      	uxth	r1, r1
 810d1ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810d1f0:	4577      	cmp	r7, lr
 810d1f2:	f849 1b04 	str.w	r1, [r9], #4
 810d1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810d1fa:	d8e2      	bhi.n	810d1c2 <__multiply+0xb2>
 810d1fc:	9a01      	ldr	r2, [sp, #4]
 810d1fe:	f845 c002 	str.w	ip, [r5, r2]
 810d202:	9a03      	ldr	r2, [sp, #12]
 810d204:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810d208:	3304      	adds	r3, #4
 810d20a:	f1b9 0f00 	cmp.w	r9, #0
 810d20e:	d020      	beq.n	810d252 <__multiply+0x142>
 810d210:	6829      	ldr	r1, [r5, #0]
 810d212:	f104 0c14 	add.w	ip, r4, #20
 810d216:	46ae      	mov	lr, r5
 810d218:	f04f 0a00 	mov.w	sl, #0
 810d21c:	f8bc b000 	ldrh.w	fp, [ip]
 810d220:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810d224:	fb09 220b 	mla	r2, r9, fp, r2
 810d228:	4492      	add	sl, r2
 810d22a:	b289      	uxth	r1, r1
 810d22c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810d230:	f84e 1b04 	str.w	r1, [lr], #4
 810d234:	f85c 2b04 	ldr.w	r2, [ip], #4
 810d238:	f8be 1000 	ldrh.w	r1, [lr]
 810d23c:	0c12      	lsrs	r2, r2, #16
 810d23e:	fb09 1102 	mla	r1, r9, r2, r1
 810d242:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810d246:	4567      	cmp	r7, ip
 810d248:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810d24c:	d8e6      	bhi.n	810d21c <__multiply+0x10c>
 810d24e:	9a01      	ldr	r2, [sp, #4]
 810d250:	50a9      	str	r1, [r5, r2]
 810d252:	3504      	adds	r5, #4
 810d254:	e79a      	b.n	810d18c <__multiply+0x7c>
 810d256:	3e01      	subs	r6, #1
 810d258:	e79c      	b.n	810d194 <__multiply+0x84>
 810d25a:	bf00      	nop
 810d25c:	0810e4c0 	.word	0x0810e4c0
 810d260:	0810e5b0 	.word	0x0810e5b0

0810d264 <__pow5mult>:
 810d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d268:	4615      	mov	r5, r2
 810d26a:	f012 0203 	ands.w	r2, r2, #3
 810d26e:	4606      	mov	r6, r0
 810d270:	460f      	mov	r7, r1
 810d272:	d007      	beq.n	810d284 <__pow5mult+0x20>
 810d274:	4c25      	ldr	r4, [pc, #148]	; (810d30c <__pow5mult+0xa8>)
 810d276:	3a01      	subs	r2, #1
 810d278:	2300      	movs	r3, #0
 810d27a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810d27e:	f7ff fe51 	bl	810cf24 <__multadd>
 810d282:	4607      	mov	r7, r0
 810d284:	10ad      	asrs	r5, r5, #2
 810d286:	d03d      	beq.n	810d304 <__pow5mult+0xa0>
 810d288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810d28a:	b97c      	cbnz	r4, 810d2ac <__pow5mult+0x48>
 810d28c:	2010      	movs	r0, #16
 810d28e:	f7ff fdb3 	bl	810cdf8 <malloc>
 810d292:	4602      	mov	r2, r0
 810d294:	6270      	str	r0, [r6, #36]	; 0x24
 810d296:	b928      	cbnz	r0, 810d2a4 <__pow5mult+0x40>
 810d298:	4b1d      	ldr	r3, [pc, #116]	; (810d310 <__pow5mult+0xac>)
 810d29a:	481e      	ldr	r0, [pc, #120]	; (810d314 <__pow5mult+0xb0>)
 810d29c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810d2a0:	f000 fe98 	bl	810dfd4 <__assert_func>
 810d2a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810d2a8:	6004      	str	r4, [r0, #0]
 810d2aa:	60c4      	str	r4, [r0, #12]
 810d2ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810d2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810d2b4:	b94c      	cbnz	r4, 810d2ca <__pow5mult+0x66>
 810d2b6:	f240 2171 	movw	r1, #625	; 0x271
 810d2ba:	4630      	mov	r0, r6
 810d2bc:	f7ff ff12 	bl	810d0e4 <__i2b>
 810d2c0:	2300      	movs	r3, #0
 810d2c2:	f8c8 0008 	str.w	r0, [r8, #8]
 810d2c6:	4604      	mov	r4, r0
 810d2c8:	6003      	str	r3, [r0, #0]
 810d2ca:	f04f 0900 	mov.w	r9, #0
 810d2ce:	07eb      	lsls	r3, r5, #31
 810d2d0:	d50a      	bpl.n	810d2e8 <__pow5mult+0x84>
 810d2d2:	4639      	mov	r1, r7
 810d2d4:	4622      	mov	r2, r4
 810d2d6:	4630      	mov	r0, r6
 810d2d8:	f7ff ff1a 	bl	810d110 <__multiply>
 810d2dc:	4639      	mov	r1, r7
 810d2de:	4680      	mov	r8, r0
 810d2e0:	4630      	mov	r0, r6
 810d2e2:	f7ff fdfd 	bl	810cee0 <_Bfree>
 810d2e6:	4647      	mov	r7, r8
 810d2e8:	106d      	asrs	r5, r5, #1
 810d2ea:	d00b      	beq.n	810d304 <__pow5mult+0xa0>
 810d2ec:	6820      	ldr	r0, [r4, #0]
 810d2ee:	b938      	cbnz	r0, 810d300 <__pow5mult+0x9c>
 810d2f0:	4622      	mov	r2, r4
 810d2f2:	4621      	mov	r1, r4
 810d2f4:	4630      	mov	r0, r6
 810d2f6:	f7ff ff0b 	bl	810d110 <__multiply>
 810d2fa:	6020      	str	r0, [r4, #0]
 810d2fc:	f8c0 9000 	str.w	r9, [r0]
 810d300:	4604      	mov	r4, r0
 810d302:	e7e4      	b.n	810d2ce <__pow5mult+0x6a>
 810d304:	4638      	mov	r0, r7
 810d306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d30a:	bf00      	nop
 810d30c:	0810e700 	.word	0x0810e700
 810d310:	0810e44e 	.word	0x0810e44e
 810d314:	0810e5b0 	.word	0x0810e5b0

0810d318 <__lshift>:
 810d318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d31c:	460c      	mov	r4, r1
 810d31e:	6849      	ldr	r1, [r1, #4]
 810d320:	6923      	ldr	r3, [r4, #16]
 810d322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810d326:	68a3      	ldr	r3, [r4, #8]
 810d328:	4607      	mov	r7, r0
 810d32a:	4691      	mov	r9, r2
 810d32c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810d330:	f108 0601 	add.w	r6, r8, #1
 810d334:	42b3      	cmp	r3, r6
 810d336:	db0b      	blt.n	810d350 <__lshift+0x38>
 810d338:	4638      	mov	r0, r7
 810d33a:	f7ff fd91 	bl	810ce60 <_Balloc>
 810d33e:	4605      	mov	r5, r0
 810d340:	b948      	cbnz	r0, 810d356 <__lshift+0x3e>
 810d342:	4602      	mov	r2, r0
 810d344:	4b2a      	ldr	r3, [pc, #168]	; (810d3f0 <__lshift+0xd8>)
 810d346:	482b      	ldr	r0, [pc, #172]	; (810d3f4 <__lshift+0xdc>)
 810d348:	f240 11d9 	movw	r1, #473	; 0x1d9
 810d34c:	f000 fe42 	bl	810dfd4 <__assert_func>
 810d350:	3101      	adds	r1, #1
 810d352:	005b      	lsls	r3, r3, #1
 810d354:	e7ee      	b.n	810d334 <__lshift+0x1c>
 810d356:	2300      	movs	r3, #0
 810d358:	f100 0114 	add.w	r1, r0, #20
 810d35c:	f100 0210 	add.w	r2, r0, #16
 810d360:	4618      	mov	r0, r3
 810d362:	4553      	cmp	r3, sl
 810d364:	db37      	blt.n	810d3d6 <__lshift+0xbe>
 810d366:	6920      	ldr	r0, [r4, #16]
 810d368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810d36c:	f104 0314 	add.w	r3, r4, #20
 810d370:	f019 091f 	ands.w	r9, r9, #31
 810d374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810d378:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810d37c:	d02f      	beq.n	810d3de <__lshift+0xc6>
 810d37e:	f1c9 0e20 	rsb	lr, r9, #32
 810d382:	468a      	mov	sl, r1
 810d384:	f04f 0c00 	mov.w	ip, #0
 810d388:	681a      	ldr	r2, [r3, #0]
 810d38a:	fa02 f209 	lsl.w	r2, r2, r9
 810d38e:	ea42 020c 	orr.w	r2, r2, ip
 810d392:	f84a 2b04 	str.w	r2, [sl], #4
 810d396:	f853 2b04 	ldr.w	r2, [r3], #4
 810d39a:	4298      	cmp	r0, r3
 810d39c:	fa22 fc0e 	lsr.w	ip, r2, lr
 810d3a0:	d8f2      	bhi.n	810d388 <__lshift+0x70>
 810d3a2:	1b03      	subs	r3, r0, r4
 810d3a4:	3b15      	subs	r3, #21
 810d3a6:	f023 0303 	bic.w	r3, r3, #3
 810d3aa:	3304      	adds	r3, #4
 810d3ac:	f104 0215 	add.w	r2, r4, #21
 810d3b0:	4290      	cmp	r0, r2
 810d3b2:	bf38      	it	cc
 810d3b4:	2304      	movcc	r3, #4
 810d3b6:	f841 c003 	str.w	ip, [r1, r3]
 810d3ba:	f1bc 0f00 	cmp.w	ip, #0
 810d3be:	d001      	beq.n	810d3c4 <__lshift+0xac>
 810d3c0:	f108 0602 	add.w	r6, r8, #2
 810d3c4:	3e01      	subs	r6, #1
 810d3c6:	4638      	mov	r0, r7
 810d3c8:	612e      	str	r6, [r5, #16]
 810d3ca:	4621      	mov	r1, r4
 810d3cc:	f7ff fd88 	bl	810cee0 <_Bfree>
 810d3d0:	4628      	mov	r0, r5
 810d3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d3d6:	f842 0f04 	str.w	r0, [r2, #4]!
 810d3da:	3301      	adds	r3, #1
 810d3dc:	e7c1      	b.n	810d362 <__lshift+0x4a>
 810d3de:	3904      	subs	r1, #4
 810d3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 810d3e4:	f841 2f04 	str.w	r2, [r1, #4]!
 810d3e8:	4298      	cmp	r0, r3
 810d3ea:	d8f9      	bhi.n	810d3e0 <__lshift+0xc8>
 810d3ec:	e7ea      	b.n	810d3c4 <__lshift+0xac>
 810d3ee:	bf00      	nop
 810d3f0:	0810e4c0 	.word	0x0810e4c0
 810d3f4:	0810e5b0 	.word	0x0810e5b0

0810d3f8 <__mcmp>:
 810d3f8:	b530      	push	{r4, r5, lr}
 810d3fa:	6902      	ldr	r2, [r0, #16]
 810d3fc:	690c      	ldr	r4, [r1, #16]
 810d3fe:	1b12      	subs	r2, r2, r4
 810d400:	d10e      	bne.n	810d420 <__mcmp+0x28>
 810d402:	f100 0314 	add.w	r3, r0, #20
 810d406:	3114      	adds	r1, #20
 810d408:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810d40c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810d410:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810d414:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810d418:	42a5      	cmp	r5, r4
 810d41a:	d003      	beq.n	810d424 <__mcmp+0x2c>
 810d41c:	d305      	bcc.n	810d42a <__mcmp+0x32>
 810d41e:	2201      	movs	r2, #1
 810d420:	4610      	mov	r0, r2
 810d422:	bd30      	pop	{r4, r5, pc}
 810d424:	4283      	cmp	r3, r0
 810d426:	d3f3      	bcc.n	810d410 <__mcmp+0x18>
 810d428:	e7fa      	b.n	810d420 <__mcmp+0x28>
 810d42a:	f04f 32ff 	mov.w	r2, #4294967295
 810d42e:	e7f7      	b.n	810d420 <__mcmp+0x28>

0810d430 <__mdiff>:
 810d430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d434:	460c      	mov	r4, r1
 810d436:	4606      	mov	r6, r0
 810d438:	4611      	mov	r1, r2
 810d43a:	4620      	mov	r0, r4
 810d43c:	4690      	mov	r8, r2
 810d43e:	f7ff ffdb 	bl	810d3f8 <__mcmp>
 810d442:	1e05      	subs	r5, r0, #0
 810d444:	d110      	bne.n	810d468 <__mdiff+0x38>
 810d446:	4629      	mov	r1, r5
 810d448:	4630      	mov	r0, r6
 810d44a:	f7ff fd09 	bl	810ce60 <_Balloc>
 810d44e:	b930      	cbnz	r0, 810d45e <__mdiff+0x2e>
 810d450:	4b3a      	ldr	r3, [pc, #232]	; (810d53c <__mdiff+0x10c>)
 810d452:	4602      	mov	r2, r0
 810d454:	f240 2132 	movw	r1, #562	; 0x232
 810d458:	4839      	ldr	r0, [pc, #228]	; (810d540 <__mdiff+0x110>)
 810d45a:	f000 fdbb 	bl	810dfd4 <__assert_func>
 810d45e:	2301      	movs	r3, #1
 810d460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810d464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d468:	bfa4      	itt	ge
 810d46a:	4643      	movge	r3, r8
 810d46c:	46a0      	movge	r8, r4
 810d46e:	4630      	mov	r0, r6
 810d470:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810d474:	bfa6      	itte	ge
 810d476:	461c      	movge	r4, r3
 810d478:	2500      	movge	r5, #0
 810d47a:	2501      	movlt	r5, #1
 810d47c:	f7ff fcf0 	bl	810ce60 <_Balloc>
 810d480:	b920      	cbnz	r0, 810d48c <__mdiff+0x5c>
 810d482:	4b2e      	ldr	r3, [pc, #184]	; (810d53c <__mdiff+0x10c>)
 810d484:	4602      	mov	r2, r0
 810d486:	f44f 7110 	mov.w	r1, #576	; 0x240
 810d48a:	e7e5      	b.n	810d458 <__mdiff+0x28>
 810d48c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810d490:	6926      	ldr	r6, [r4, #16]
 810d492:	60c5      	str	r5, [r0, #12]
 810d494:	f104 0914 	add.w	r9, r4, #20
 810d498:	f108 0514 	add.w	r5, r8, #20
 810d49c:	f100 0e14 	add.w	lr, r0, #20
 810d4a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810d4a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810d4a8:	f108 0210 	add.w	r2, r8, #16
 810d4ac:	46f2      	mov	sl, lr
 810d4ae:	2100      	movs	r1, #0
 810d4b0:	f859 3b04 	ldr.w	r3, [r9], #4
 810d4b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810d4b8:	fa1f f883 	uxth.w	r8, r3
 810d4bc:	fa11 f18b 	uxtah	r1, r1, fp
 810d4c0:	0c1b      	lsrs	r3, r3, #16
 810d4c2:	eba1 0808 	sub.w	r8, r1, r8
 810d4c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810d4ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810d4ce:	fa1f f888 	uxth.w	r8, r8
 810d4d2:	1419      	asrs	r1, r3, #16
 810d4d4:	454e      	cmp	r6, r9
 810d4d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810d4da:	f84a 3b04 	str.w	r3, [sl], #4
 810d4de:	d8e7      	bhi.n	810d4b0 <__mdiff+0x80>
 810d4e0:	1b33      	subs	r3, r6, r4
 810d4e2:	3b15      	subs	r3, #21
 810d4e4:	f023 0303 	bic.w	r3, r3, #3
 810d4e8:	3304      	adds	r3, #4
 810d4ea:	3415      	adds	r4, #21
 810d4ec:	42a6      	cmp	r6, r4
 810d4ee:	bf38      	it	cc
 810d4f0:	2304      	movcc	r3, #4
 810d4f2:	441d      	add	r5, r3
 810d4f4:	4473      	add	r3, lr
 810d4f6:	469e      	mov	lr, r3
 810d4f8:	462e      	mov	r6, r5
 810d4fa:	4566      	cmp	r6, ip
 810d4fc:	d30e      	bcc.n	810d51c <__mdiff+0xec>
 810d4fe:	f10c 0203 	add.w	r2, ip, #3
 810d502:	1b52      	subs	r2, r2, r5
 810d504:	f022 0203 	bic.w	r2, r2, #3
 810d508:	3d03      	subs	r5, #3
 810d50a:	45ac      	cmp	ip, r5
 810d50c:	bf38      	it	cc
 810d50e:	2200      	movcc	r2, #0
 810d510:	441a      	add	r2, r3
 810d512:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810d516:	b17b      	cbz	r3, 810d538 <__mdiff+0x108>
 810d518:	6107      	str	r7, [r0, #16]
 810d51a:	e7a3      	b.n	810d464 <__mdiff+0x34>
 810d51c:	f856 8b04 	ldr.w	r8, [r6], #4
 810d520:	fa11 f288 	uxtah	r2, r1, r8
 810d524:	1414      	asrs	r4, r2, #16
 810d526:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810d52a:	b292      	uxth	r2, r2
 810d52c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810d530:	f84e 2b04 	str.w	r2, [lr], #4
 810d534:	1421      	asrs	r1, r4, #16
 810d536:	e7e0      	b.n	810d4fa <__mdiff+0xca>
 810d538:	3f01      	subs	r7, #1
 810d53a:	e7ea      	b.n	810d512 <__mdiff+0xe2>
 810d53c:	0810e4c0 	.word	0x0810e4c0
 810d540:	0810e5b0 	.word	0x0810e5b0

0810d544 <__ulp>:
 810d544:	b082      	sub	sp, #8
 810d546:	ed8d 0b00 	vstr	d0, [sp]
 810d54a:	9b01      	ldr	r3, [sp, #4]
 810d54c:	4912      	ldr	r1, [pc, #72]	; (810d598 <__ulp+0x54>)
 810d54e:	4019      	ands	r1, r3
 810d550:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810d554:	2900      	cmp	r1, #0
 810d556:	dd05      	ble.n	810d564 <__ulp+0x20>
 810d558:	2200      	movs	r2, #0
 810d55a:	460b      	mov	r3, r1
 810d55c:	ec43 2b10 	vmov	d0, r2, r3
 810d560:	b002      	add	sp, #8
 810d562:	4770      	bx	lr
 810d564:	4249      	negs	r1, r1
 810d566:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810d56a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810d56e:	f04f 0200 	mov.w	r2, #0
 810d572:	f04f 0300 	mov.w	r3, #0
 810d576:	da04      	bge.n	810d582 <__ulp+0x3e>
 810d578:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810d57c:	fa41 f300 	asr.w	r3, r1, r0
 810d580:	e7ec      	b.n	810d55c <__ulp+0x18>
 810d582:	f1a0 0114 	sub.w	r1, r0, #20
 810d586:	291e      	cmp	r1, #30
 810d588:	bfda      	itte	le
 810d58a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810d58e:	fa20 f101 	lsrle.w	r1, r0, r1
 810d592:	2101      	movgt	r1, #1
 810d594:	460a      	mov	r2, r1
 810d596:	e7e1      	b.n	810d55c <__ulp+0x18>
 810d598:	7ff00000 	.word	0x7ff00000

0810d59c <__b2d>:
 810d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d59e:	6905      	ldr	r5, [r0, #16]
 810d5a0:	f100 0714 	add.w	r7, r0, #20
 810d5a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810d5a8:	1f2e      	subs	r6, r5, #4
 810d5aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810d5ae:	4620      	mov	r0, r4
 810d5b0:	f7ff fd48 	bl	810d044 <__hi0bits>
 810d5b4:	f1c0 0320 	rsb	r3, r0, #32
 810d5b8:	280a      	cmp	r0, #10
 810d5ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810d638 <__b2d+0x9c>
 810d5be:	600b      	str	r3, [r1, #0]
 810d5c0:	dc14      	bgt.n	810d5ec <__b2d+0x50>
 810d5c2:	f1c0 0e0b 	rsb	lr, r0, #11
 810d5c6:	fa24 f10e 	lsr.w	r1, r4, lr
 810d5ca:	42b7      	cmp	r7, r6
 810d5cc:	ea41 030c 	orr.w	r3, r1, ip
 810d5d0:	bf34      	ite	cc
 810d5d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810d5d6:	2100      	movcs	r1, #0
 810d5d8:	3015      	adds	r0, #21
 810d5da:	fa04 f000 	lsl.w	r0, r4, r0
 810d5de:	fa21 f10e 	lsr.w	r1, r1, lr
 810d5e2:	ea40 0201 	orr.w	r2, r0, r1
 810d5e6:	ec43 2b10 	vmov	d0, r2, r3
 810d5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d5ec:	42b7      	cmp	r7, r6
 810d5ee:	bf3a      	itte	cc
 810d5f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810d5f4:	f1a5 0608 	subcc.w	r6, r5, #8
 810d5f8:	2100      	movcs	r1, #0
 810d5fa:	380b      	subs	r0, #11
 810d5fc:	d017      	beq.n	810d62e <__b2d+0x92>
 810d5fe:	f1c0 0c20 	rsb	ip, r0, #32
 810d602:	fa04 f500 	lsl.w	r5, r4, r0
 810d606:	42be      	cmp	r6, r7
 810d608:	fa21 f40c 	lsr.w	r4, r1, ip
 810d60c:	ea45 0504 	orr.w	r5, r5, r4
 810d610:	bf8c      	ite	hi
 810d612:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810d616:	2400      	movls	r4, #0
 810d618:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810d61c:	fa01 f000 	lsl.w	r0, r1, r0
 810d620:	fa24 f40c 	lsr.w	r4, r4, ip
 810d624:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810d628:	ea40 0204 	orr.w	r2, r0, r4
 810d62c:	e7db      	b.n	810d5e6 <__b2d+0x4a>
 810d62e:	ea44 030c 	orr.w	r3, r4, ip
 810d632:	460a      	mov	r2, r1
 810d634:	e7d7      	b.n	810d5e6 <__b2d+0x4a>
 810d636:	bf00      	nop
 810d638:	3ff00000 	.word	0x3ff00000

0810d63c <__d2b>:
 810d63c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810d640:	4689      	mov	r9, r1
 810d642:	2101      	movs	r1, #1
 810d644:	ec57 6b10 	vmov	r6, r7, d0
 810d648:	4690      	mov	r8, r2
 810d64a:	f7ff fc09 	bl	810ce60 <_Balloc>
 810d64e:	4604      	mov	r4, r0
 810d650:	b930      	cbnz	r0, 810d660 <__d2b+0x24>
 810d652:	4602      	mov	r2, r0
 810d654:	4b25      	ldr	r3, [pc, #148]	; (810d6ec <__d2b+0xb0>)
 810d656:	4826      	ldr	r0, [pc, #152]	; (810d6f0 <__d2b+0xb4>)
 810d658:	f240 310a 	movw	r1, #778	; 0x30a
 810d65c:	f000 fcba 	bl	810dfd4 <__assert_func>
 810d660:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810d664:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810d668:	bb35      	cbnz	r5, 810d6b8 <__d2b+0x7c>
 810d66a:	2e00      	cmp	r6, #0
 810d66c:	9301      	str	r3, [sp, #4]
 810d66e:	d028      	beq.n	810d6c2 <__d2b+0x86>
 810d670:	4668      	mov	r0, sp
 810d672:	9600      	str	r6, [sp, #0]
 810d674:	f7ff fd06 	bl	810d084 <__lo0bits>
 810d678:	9900      	ldr	r1, [sp, #0]
 810d67a:	b300      	cbz	r0, 810d6be <__d2b+0x82>
 810d67c:	9a01      	ldr	r2, [sp, #4]
 810d67e:	f1c0 0320 	rsb	r3, r0, #32
 810d682:	fa02 f303 	lsl.w	r3, r2, r3
 810d686:	430b      	orrs	r3, r1
 810d688:	40c2      	lsrs	r2, r0
 810d68a:	6163      	str	r3, [r4, #20]
 810d68c:	9201      	str	r2, [sp, #4]
 810d68e:	9b01      	ldr	r3, [sp, #4]
 810d690:	61a3      	str	r3, [r4, #24]
 810d692:	2b00      	cmp	r3, #0
 810d694:	bf14      	ite	ne
 810d696:	2202      	movne	r2, #2
 810d698:	2201      	moveq	r2, #1
 810d69a:	6122      	str	r2, [r4, #16]
 810d69c:	b1d5      	cbz	r5, 810d6d4 <__d2b+0x98>
 810d69e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810d6a2:	4405      	add	r5, r0
 810d6a4:	f8c9 5000 	str.w	r5, [r9]
 810d6a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810d6ac:	f8c8 0000 	str.w	r0, [r8]
 810d6b0:	4620      	mov	r0, r4
 810d6b2:	b003      	add	sp, #12
 810d6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d6b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810d6bc:	e7d5      	b.n	810d66a <__d2b+0x2e>
 810d6be:	6161      	str	r1, [r4, #20]
 810d6c0:	e7e5      	b.n	810d68e <__d2b+0x52>
 810d6c2:	a801      	add	r0, sp, #4
 810d6c4:	f7ff fcde 	bl	810d084 <__lo0bits>
 810d6c8:	9b01      	ldr	r3, [sp, #4]
 810d6ca:	6163      	str	r3, [r4, #20]
 810d6cc:	2201      	movs	r2, #1
 810d6ce:	6122      	str	r2, [r4, #16]
 810d6d0:	3020      	adds	r0, #32
 810d6d2:	e7e3      	b.n	810d69c <__d2b+0x60>
 810d6d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810d6d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810d6dc:	f8c9 0000 	str.w	r0, [r9]
 810d6e0:	6918      	ldr	r0, [r3, #16]
 810d6e2:	f7ff fcaf 	bl	810d044 <__hi0bits>
 810d6e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810d6ea:	e7df      	b.n	810d6ac <__d2b+0x70>
 810d6ec:	0810e4c0 	.word	0x0810e4c0
 810d6f0:	0810e5b0 	.word	0x0810e5b0

0810d6f4 <__ratio>:
 810d6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d6f8:	4688      	mov	r8, r1
 810d6fa:	4669      	mov	r1, sp
 810d6fc:	4681      	mov	r9, r0
 810d6fe:	f7ff ff4d 	bl	810d59c <__b2d>
 810d702:	a901      	add	r1, sp, #4
 810d704:	4640      	mov	r0, r8
 810d706:	ec55 4b10 	vmov	r4, r5, d0
 810d70a:	f7ff ff47 	bl	810d59c <__b2d>
 810d70e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810d712:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810d716:	eba3 0c02 	sub.w	ip, r3, r2
 810d71a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d71e:	1a9b      	subs	r3, r3, r2
 810d720:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810d724:	ec51 0b10 	vmov	r0, r1, d0
 810d728:	2b00      	cmp	r3, #0
 810d72a:	bfd6      	itet	le
 810d72c:	460a      	movle	r2, r1
 810d72e:	462a      	movgt	r2, r5
 810d730:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810d734:	468b      	mov	fp, r1
 810d736:	462f      	mov	r7, r5
 810d738:	bfd4      	ite	le
 810d73a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810d73e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810d742:	4620      	mov	r0, r4
 810d744:	ee10 2a10 	vmov	r2, s0
 810d748:	465b      	mov	r3, fp
 810d74a:	4639      	mov	r1, r7
 810d74c:	f7f3 f906 	bl	810095c <__aeabi_ddiv>
 810d750:	ec41 0b10 	vmov	d0, r0, r1
 810d754:	b003      	add	sp, #12
 810d756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810d75a <__copybits>:
 810d75a:	3901      	subs	r1, #1
 810d75c:	b570      	push	{r4, r5, r6, lr}
 810d75e:	1149      	asrs	r1, r1, #5
 810d760:	6914      	ldr	r4, [r2, #16]
 810d762:	3101      	adds	r1, #1
 810d764:	f102 0314 	add.w	r3, r2, #20
 810d768:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810d76c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810d770:	1f05      	subs	r5, r0, #4
 810d772:	42a3      	cmp	r3, r4
 810d774:	d30c      	bcc.n	810d790 <__copybits+0x36>
 810d776:	1aa3      	subs	r3, r4, r2
 810d778:	3b11      	subs	r3, #17
 810d77a:	f023 0303 	bic.w	r3, r3, #3
 810d77e:	3211      	adds	r2, #17
 810d780:	42a2      	cmp	r2, r4
 810d782:	bf88      	it	hi
 810d784:	2300      	movhi	r3, #0
 810d786:	4418      	add	r0, r3
 810d788:	2300      	movs	r3, #0
 810d78a:	4288      	cmp	r0, r1
 810d78c:	d305      	bcc.n	810d79a <__copybits+0x40>
 810d78e:	bd70      	pop	{r4, r5, r6, pc}
 810d790:	f853 6b04 	ldr.w	r6, [r3], #4
 810d794:	f845 6f04 	str.w	r6, [r5, #4]!
 810d798:	e7eb      	b.n	810d772 <__copybits+0x18>
 810d79a:	f840 3b04 	str.w	r3, [r0], #4
 810d79e:	e7f4      	b.n	810d78a <__copybits+0x30>

0810d7a0 <__any_on>:
 810d7a0:	f100 0214 	add.w	r2, r0, #20
 810d7a4:	6900      	ldr	r0, [r0, #16]
 810d7a6:	114b      	asrs	r3, r1, #5
 810d7a8:	4298      	cmp	r0, r3
 810d7aa:	b510      	push	{r4, lr}
 810d7ac:	db11      	blt.n	810d7d2 <__any_on+0x32>
 810d7ae:	dd0a      	ble.n	810d7c6 <__any_on+0x26>
 810d7b0:	f011 011f 	ands.w	r1, r1, #31
 810d7b4:	d007      	beq.n	810d7c6 <__any_on+0x26>
 810d7b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d7ba:	fa24 f001 	lsr.w	r0, r4, r1
 810d7be:	fa00 f101 	lsl.w	r1, r0, r1
 810d7c2:	428c      	cmp	r4, r1
 810d7c4:	d10b      	bne.n	810d7de <__any_on+0x3e>
 810d7c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d7ca:	4293      	cmp	r3, r2
 810d7cc:	d803      	bhi.n	810d7d6 <__any_on+0x36>
 810d7ce:	2000      	movs	r0, #0
 810d7d0:	bd10      	pop	{r4, pc}
 810d7d2:	4603      	mov	r3, r0
 810d7d4:	e7f7      	b.n	810d7c6 <__any_on+0x26>
 810d7d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d7da:	2900      	cmp	r1, #0
 810d7dc:	d0f5      	beq.n	810d7ca <__any_on+0x2a>
 810d7de:	2001      	movs	r0, #1
 810d7e0:	e7f6      	b.n	810d7d0 <__any_on+0x30>
	...

0810d7e4 <_free_r>:
 810d7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d7e6:	2900      	cmp	r1, #0
 810d7e8:	d044      	beq.n	810d874 <_free_r+0x90>
 810d7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d7ee:	9001      	str	r0, [sp, #4]
 810d7f0:	2b00      	cmp	r3, #0
 810d7f2:	f1a1 0404 	sub.w	r4, r1, #4
 810d7f6:	bfb8      	it	lt
 810d7f8:	18e4      	addlt	r4, r4, r3
 810d7fa:	f7ff fb25 	bl	810ce48 <__malloc_lock>
 810d7fe:	4a1e      	ldr	r2, [pc, #120]	; (810d878 <_free_r+0x94>)
 810d800:	9801      	ldr	r0, [sp, #4]
 810d802:	6813      	ldr	r3, [r2, #0]
 810d804:	b933      	cbnz	r3, 810d814 <_free_r+0x30>
 810d806:	6063      	str	r3, [r4, #4]
 810d808:	6014      	str	r4, [r2, #0]
 810d80a:	b003      	add	sp, #12
 810d80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d810:	f7ff bb20 	b.w	810ce54 <__malloc_unlock>
 810d814:	42a3      	cmp	r3, r4
 810d816:	d908      	bls.n	810d82a <_free_r+0x46>
 810d818:	6825      	ldr	r5, [r4, #0]
 810d81a:	1961      	adds	r1, r4, r5
 810d81c:	428b      	cmp	r3, r1
 810d81e:	bf01      	itttt	eq
 810d820:	6819      	ldreq	r1, [r3, #0]
 810d822:	685b      	ldreq	r3, [r3, #4]
 810d824:	1949      	addeq	r1, r1, r5
 810d826:	6021      	streq	r1, [r4, #0]
 810d828:	e7ed      	b.n	810d806 <_free_r+0x22>
 810d82a:	461a      	mov	r2, r3
 810d82c:	685b      	ldr	r3, [r3, #4]
 810d82e:	b10b      	cbz	r3, 810d834 <_free_r+0x50>
 810d830:	42a3      	cmp	r3, r4
 810d832:	d9fa      	bls.n	810d82a <_free_r+0x46>
 810d834:	6811      	ldr	r1, [r2, #0]
 810d836:	1855      	adds	r5, r2, r1
 810d838:	42a5      	cmp	r5, r4
 810d83a:	d10b      	bne.n	810d854 <_free_r+0x70>
 810d83c:	6824      	ldr	r4, [r4, #0]
 810d83e:	4421      	add	r1, r4
 810d840:	1854      	adds	r4, r2, r1
 810d842:	42a3      	cmp	r3, r4
 810d844:	6011      	str	r1, [r2, #0]
 810d846:	d1e0      	bne.n	810d80a <_free_r+0x26>
 810d848:	681c      	ldr	r4, [r3, #0]
 810d84a:	685b      	ldr	r3, [r3, #4]
 810d84c:	6053      	str	r3, [r2, #4]
 810d84e:	4421      	add	r1, r4
 810d850:	6011      	str	r1, [r2, #0]
 810d852:	e7da      	b.n	810d80a <_free_r+0x26>
 810d854:	d902      	bls.n	810d85c <_free_r+0x78>
 810d856:	230c      	movs	r3, #12
 810d858:	6003      	str	r3, [r0, #0]
 810d85a:	e7d6      	b.n	810d80a <_free_r+0x26>
 810d85c:	6825      	ldr	r5, [r4, #0]
 810d85e:	1961      	adds	r1, r4, r5
 810d860:	428b      	cmp	r3, r1
 810d862:	bf04      	itt	eq
 810d864:	6819      	ldreq	r1, [r3, #0]
 810d866:	685b      	ldreq	r3, [r3, #4]
 810d868:	6063      	str	r3, [r4, #4]
 810d86a:	bf04      	itt	eq
 810d86c:	1949      	addeq	r1, r1, r5
 810d86e:	6021      	streq	r1, [r4, #0]
 810d870:	6054      	str	r4, [r2, #4]
 810d872:	e7ca      	b.n	810d80a <_free_r+0x26>
 810d874:	b003      	add	sp, #12
 810d876:	bd30      	pop	{r4, r5, pc}
 810d878:	10000550 	.word	0x10000550

0810d87c <_realloc_r>:
 810d87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d880:	4680      	mov	r8, r0
 810d882:	4614      	mov	r4, r2
 810d884:	460e      	mov	r6, r1
 810d886:	b921      	cbnz	r1, 810d892 <_realloc_r+0x16>
 810d888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d88c:	4611      	mov	r1, r2
 810d88e:	f7fb bf63 	b.w	8109758 <_malloc_r>
 810d892:	b92a      	cbnz	r2, 810d8a0 <_realloc_r+0x24>
 810d894:	f7ff ffa6 	bl	810d7e4 <_free_r>
 810d898:	4625      	mov	r5, r4
 810d89a:	4628      	mov	r0, r5
 810d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d8a0:	f000 fc26 	bl	810e0f0 <_malloc_usable_size_r>
 810d8a4:	4284      	cmp	r4, r0
 810d8a6:	4607      	mov	r7, r0
 810d8a8:	d802      	bhi.n	810d8b0 <_realloc_r+0x34>
 810d8aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d8ae:	d812      	bhi.n	810d8d6 <_realloc_r+0x5a>
 810d8b0:	4621      	mov	r1, r4
 810d8b2:	4640      	mov	r0, r8
 810d8b4:	f7fb ff50 	bl	8109758 <_malloc_r>
 810d8b8:	4605      	mov	r5, r0
 810d8ba:	2800      	cmp	r0, #0
 810d8bc:	d0ed      	beq.n	810d89a <_realloc_r+0x1e>
 810d8be:	42bc      	cmp	r4, r7
 810d8c0:	4622      	mov	r2, r4
 810d8c2:	4631      	mov	r1, r6
 810d8c4:	bf28      	it	cs
 810d8c6:	463a      	movcs	r2, r7
 810d8c8:	f7ff fab0 	bl	810ce2c <memcpy>
 810d8cc:	4631      	mov	r1, r6
 810d8ce:	4640      	mov	r0, r8
 810d8d0:	f7ff ff88 	bl	810d7e4 <_free_r>
 810d8d4:	e7e1      	b.n	810d89a <_realloc_r+0x1e>
 810d8d6:	4635      	mov	r5, r6
 810d8d8:	e7df      	b.n	810d89a <_realloc_r+0x1e>

0810d8da <__ssputs_r>:
 810d8da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d8de:	688e      	ldr	r6, [r1, #8]
 810d8e0:	429e      	cmp	r6, r3
 810d8e2:	4682      	mov	sl, r0
 810d8e4:	460c      	mov	r4, r1
 810d8e6:	4690      	mov	r8, r2
 810d8e8:	461f      	mov	r7, r3
 810d8ea:	d838      	bhi.n	810d95e <__ssputs_r+0x84>
 810d8ec:	898a      	ldrh	r2, [r1, #12]
 810d8ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d8f2:	d032      	beq.n	810d95a <__ssputs_r+0x80>
 810d8f4:	6825      	ldr	r5, [r4, #0]
 810d8f6:	6909      	ldr	r1, [r1, #16]
 810d8f8:	eba5 0901 	sub.w	r9, r5, r1
 810d8fc:	6965      	ldr	r5, [r4, #20]
 810d8fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d902:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d906:	3301      	adds	r3, #1
 810d908:	444b      	add	r3, r9
 810d90a:	106d      	asrs	r5, r5, #1
 810d90c:	429d      	cmp	r5, r3
 810d90e:	bf38      	it	cc
 810d910:	461d      	movcc	r5, r3
 810d912:	0553      	lsls	r3, r2, #21
 810d914:	d531      	bpl.n	810d97a <__ssputs_r+0xa0>
 810d916:	4629      	mov	r1, r5
 810d918:	f7fb ff1e 	bl	8109758 <_malloc_r>
 810d91c:	4606      	mov	r6, r0
 810d91e:	b950      	cbnz	r0, 810d936 <__ssputs_r+0x5c>
 810d920:	230c      	movs	r3, #12
 810d922:	f8ca 3000 	str.w	r3, [sl]
 810d926:	89a3      	ldrh	r3, [r4, #12]
 810d928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d92c:	81a3      	strh	r3, [r4, #12]
 810d92e:	f04f 30ff 	mov.w	r0, #4294967295
 810d932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d936:	6921      	ldr	r1, [r4, #16]
 810d938:	464a      	mov	r2, r9
 810d93a:	f7ff fa77 	bl	810ce2c <memcpy>
 810d93e:	89a3      	ldrh	r3, [r4, #12]
 810d940:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d948:	81a3      	strh	r3, [r4, #12]
 810d94a:	6126      	str	r6, [r4, #16]
 810d94c:	6165      	str	r5, [r4, #20]
 810d94e:	444e      	add	r6, r9
 810d950:	eba5 0509 	sub.w	r5, r5, r9
 810d954:	6026      	str	r6, [r4, #0]
 810d956:	60a5      	str	r5, [r4, #8]
 810d958:	463e      	mov	r6, r7
 810d95a:	42be      	cmp	r6, r7
 810d95c:	d900      	bls.n	810d960 <__ssputs_r+0x86>
 810d95e:	463e      	mov	r6, r7
 810d960:	6820      	ldr	r0, [r4, #0]
 810d962:	4632      	mov	r2, r6
 810d964:	4641      	mov	r1, r8
 810d966:	f000 fba9 	bl	810e0bc <memmove>
 810d96a:	68a3      	ldr	r3, [r4, #8]
 810d96c:	1b9b      	subs	r3, r3, r6
 810d96e:	60a3      	str	r3, [r4, #8]
 810d970:	6823      	ldr	r3, [r4, #0]
 810d972:	4433      	add	r3, r6
 810d974:	6023      	str	r3, [r4, #0]
 810d976:	2000      	movs	r0, #0
 810d978:	e7db      	b.n	810d932 <__ssputs_r+0x58>
 810d97a:	462a      	mov	r2, r5
 810d97c:	f7ff ff7e 	bl	810d87c <_realloc_r>
 810d980:	4606      	mov	r6, r0
 810d982:	2800      	cmp	r0, #0
 810d984:	d1e1      	bne.n	810d94a <__ssputs_r+0x70>
 810d986:	6921      	ldr	r1, [r4, #16]
 810d988:	4650      	mov	r0, sl
 810d98a:	f7ff ff2b 	bl	810d7e4 <_free_r>
 810d98e:	e7c7      	b.n	810d920 <__ssputs_r+0x46>

0810d990 <_svfiprintf_r>:
 810d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d994:	4698      	mov	r8, r3
 810d996:	898b      	ldrh	r3, [r1, #12]
 810d998:	061b      	lsls	r3, r3, #24
 810d99a:	b09d      	sub	sp, #116	; 0x74
 810d99c:	4607      	mov	r7, r0
 810d99e:	460d      	mov	r5, r1
 810d9a0:	4614      	mov	r4, r2
 810d9a2:	d50e      	bpl.n	810d9c2 <_svfiprintf_r+0x32>
 810d9a4:	690b      	ldr	r3, [r1, #16]
 810d9a6:	b963      	cbnz	r3, 810d9c2 <_svfiprintf_r+0x32>
 810d9a8:	2140      	movs	r1, #64	; 0x40
 810d9aa:	f7fb fed5 	bl	8109758 <_malloc_r>
 810d9ae:	6028      	str	r0, [r5, #0]
 810d9b0:	6128      	str	r0, [r5, #16]
 810d9b2:	b920      	cbnz	r0, 810d9be <_svfiprintf_r+0x2e>
 810d9b4:	230c      	movs	r3, #12
 810d9b6:	603b      	str	r3, [r7, #0]
 810d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 810d9bc:	e0d1      	b.n	810db62 <_svfiprintf_r+0x1d2>
 810d9be:	2340      	movs	r3, #64	; 0x40
 810d9c0:	616b      	str	r3, [r5, #20]
 810d9c2:	2300      	movs	r3, #0
 810d9c4:	9309      	str	r3, [sp, #36]	; 0x24
 810d9c6:	2320      	movs	r3, #32
 810d9c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d9cc:	f8cd 800c 	str.w	r8, [sp, #12]
 810d9d0:	2330      	movs	r3, #48	; 0x30
 810d9d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810db7c <_svfiprintf_r+0x1ec>
 810d9d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d9da:	f04f 0901 	mov.w	r9, #1
 810d9de:	4623      	mov	r3, r4
 810d9e0:	469a      	mov	sl, r3
 810d9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d9e6:	b10a      	cbz	r2, 810d9ec <_svfiprintf_r+0x5c>
 810d9e8:	2a25      	cmp	r2, #37	; 0x25
 810d9ea:	d1f9      	bne.n	810d9e0 <_svfiprintf_r+0x50>
 810d9ec:	ebba 0b04 	subs.w	fp, sl, r4
 810d9f0:	d00b      	beq.n	810da0a <_svfiprintf_r+0x7a>
 810d9f2:	465b      	mov	r3, fp
 810d9f4:	4622      	mov	r2, r4
 810d9f6:	4629      	mov	r1, r5
 810d9f8:	4638      	mov	r0, r7
 810d9fa:	f7ff ff6e 	bl	810d8da <__ssputs_r>
 810d9fe:	3001      	adds	r0, #1
 810da00:	f000 80aa 	beq.w	810db58 <_svfiprintf_r+0x1c8>
 810da04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810da06:	445a      	add	r2, fp
 810da08:	9209      	str	r2, [sp, #36]	; 0x24
 810da0a:	f89a 3000 	ldrb.w	r3, [sl]
 810da0e:	2b00      	cmp	r3, #0
 810da10:	f000 80a2 	beq.w	810db58 <_svfiprintf_r+0x1c8>
 810da14:	2300      	movs	r3, #0
 810da16:	f04f 32ff 	mov.w	r2, #4294967295
 810da1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810da1e:	f10a 0a01 	add.w	sl, sl, #1
 810da22:	9304      	str	r3, [sp, #16]
 810da24:	9307      	str	r3, [sp, #28]
 810da26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810da2a:	931a      	str	r3, [sp, #104]	; 0x68
 810da2c:	4654      	mov	r4, sl
 810da2e:	2205      	movs	r2, #5
 810da30:	f814 1b01 	ldrb.w	r1, [r4], #1
 810da34:	4851      	ldr	r0, [pc, #324]	; (810db7c <_svfiprintf_r+0x1ec>)
 810da36:	f7f2 fc5b 	bl	81002f0 <memchr>
 810da3a:	9a04      	ldr	r2, [sp, #16]
 810da3c:	b9d8      	cbnz	r0, 810da76 <_svfiprintf_r+0xe6>
 810da3e:	06d0      	lsls	r0, r2, #27
 810da40:	bf44      	itt	mi
 810da42:	2320      	movmi	r3, #32
 810da44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810da48:	0711      	lsls	r1, r2, #28
 810da4a:	bf44      	itt	mi
 810da4c:	232b      	movmi	r3, #43	; 0x2b
 810da4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810da52:	f89a 3000 	ldrb.w	r3, [sl]
 810da56:	2b2a      	cmp	r3, #42	; 0x2a
 810da58:	d015      	beq.n	810da86 <_svfiprintf_r+0xf6>
 810da5a:	9a07      	ldr	r2, [sp, #28]
 810da5c:	4654      	mov	r4, sl
 810da5e:	2000      	movs	r0, #0
 810da60:	f04f 0c0a 	mov.w	ip, #10
 810da64:	4621      	mov	r1, r4
 810da66:	f811 3b01 	ldrb.w	r3, [r1], #1
 810da6a:	3b30      	subs	r3, #48	; 0x30
 810da6c:	2b09      	cmp	r3, #9
 810da6e:	d94e      	bls.n	810db0e <_svfiprintf_r+0x17e>
 810da70:	b1b0      	cbz	r0, 810daa0 <_svfiprintf_r+0x110>
 810da72:	9207      	str	r2, [sp, #28]
 810da74:	e014      	b.n	810daa0 <_svfiprintf_r+0x110>
 810da76:	eba0 0308 	sub.w	r3, r0, r8
 810da7a:	fa09 f303 	lsl.w	r3, r9, r3
 810da7e:	4313      	orrs	r3, r2
 810da80:	9304      	str	r3, [sp, #16]
 810da82:	46a2      	mov	sl, r4
 810da84:	e7d2      	b.n	810da2c <_svfiprintf_r+0x9c>
 810da86:	9b03      	ldr	r3, [sp, #12]
 810da88:	1d19      	adds	r1, r3, #4
 810da8a:	681b      	ldr	r3, [r3, #0]
 810da8c:	9103      	str	r1, [sp, #12]
 810da8e:	2b00      	cmp	r3, #0
 810da90:	bfbb      	ittet	lt
 810da92:	425b      	neglt	r3, r3
 810da94:	f042 0202 	orrlt.w	r2, r2, #2
 810da98:	9307      	strge	r3, [sp, #28]
 810da9a:	9307      	strlt	r3, [sp, #28]
 810da9c:	bfb8      	it	lt
 810da9e:	9204      	strlt	r2, [sp, #16]
 810daa0:	7823      	ldrb	r3, [r4, #0]
 810daa2:	2b2e      	cmp	r3, #46	; 0x2e
 810daa4:	d10c      	bne.n	810dac0 <_svfiprintf_r+0x130>
 810daa6:	7863      	ldrb	r3, [r4, #1]
 810daa8:	2b2a      	cmp	r3, #42	; 0x2a
 810daaa:	d135      	bne.n	810db18 <_svfiprintf_r+0x188>
 810daac:	9b03      	ldr	r3, [sp, #12]
 810daae:	1d1a      	adds	r2, r3, #4
 810dab0:	681b      	ldr	r3, [r3, #0]
 810dab2:	9203      	str	r2, [sp, #12]
 810dab4:	2b00      	cmp	r3, #0
 810dab6:	bfb8      	it	lt
 810dab8:	f04f 33ff 	movlt.w	r3, #4294967295
 810dabc:	3402      	adds	r4, #2
 810dabe:	9305      	str	r3, [sp, #20]
 810dac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810db8c <_svfiprintf_r+0x1fc>
 810dac4:	7821      	ldrb	r1, [r4, #0]
 810dac6:	2203      	movs	r2, #3
 810dac8:	4650      	mov	r0, sl
 810daca:	f7f2 fc11 	bl	81002f0 <memchr>
 810dace:	b140      	cbz	r0, 810dae2 <_svfiprintf_r+0x152>
 810dad0:	2340      	movs	r3, #64	; 0x40
 810dad2:	eba0 000a 	sub.w	r0, r0, sl
 810dad6:	fa03 f000 	lsl.w	r0, r3, r0
 810dada:	9b04      	ldr	r3, [sp, #16]
 810dadc:	4303      	orrs	r3, r0
 810dade:	3401      	adds	r4, #1
 810dae0:	9304      	str	r3, [sp, #16]
 810dae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dae6:	4826      	ldr	r0, [pc, #152]	; (810db80 <_svfiprintf_r+0x1f0>)
 810dae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810daec:	2206      	movs	r2, #6
 810daee:	f7f2 fbff 	bl	81002f0 <memchr>
 810daf2:	2800      	cmp	r0, #0
 810daf4:	d038      	beq.n	810db68 <_svfiprintf_r+0x1d8>
 810daf6:	4b23      	ldr	r3, [pc, #140]	; (810db84 <_svfiprintf_r+0x1f4>)
 810daf8:	bb1b      	cbnz	r3, 810db42 <_svfiprintf_r+0x1b2>
 810dafa:	9b03      	ldr	r3, [sp, #12]
 810dafc:	3307      	adds	r3, #7
 810dafe:	f023 0307 	bic.w	r3, r3, #7
 810db02:	3308      	adds	r3, #8
 810db04:	9303      	str	r3, [sp, #12]
 810db06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810db08:	4433      	add	r3, r6
 810db0a:	9309      	str	r3, [sp, #36]	; 0x24
 810db0c:	e767      	b.n	810d9de <_svfiprintf_r+0x4e>
 810db0e:	fb0c 3202 	mla	r2, ip, r2, r3
 810db12:	460c      	mov	r4, r1
 810db14:	2001      	movs	r0, #1
 810db16:	e7a5      	b.n	810da64 <_svfiprintf_r+0xd4>
 810db18:	2300      	movs	r3, #0
 810db1a:	3401      	adds	r4, #1
 810db1c:	9305      	str	r3, [sp, #20]
 810db1e:	4619      	mov	r1, r3
 810db20:	f04f 0c0a 	mov.w	ip, #10
 810db24:	4620      	mov	r0, r4
 810db26:	f810 2b01 	ldrb.w	r2, [r0], #1
 810db2a:	3a30      	subs	r2, #48	; 0x30
 810db2c:	2a09      	cmp	r2, #9
 810db2e:	d903      	bls.n	810db38 <_svfiprintf_r+0x1a8>
 810db30:	2b00      	cmp	r3, #0
 810db32:	d0c5      	beq.n	810dac0 <_svfiprintf_r+0x130>
 810db34:	9105      	str	r1, [sp, #20]
 810db36:	e7c3      	b.n	810dac0 <_svfiprintf_r+0x130>
 810db38:	fb0c 2101 	mla	r1, ip, r1, r2
 810db3c:	4604      	mov	r4, r0
 810db3e:	2301      	movs	r3, #1
 810db40:	e7f0      	b.n	810db24 <_svfiprintf_r+0x194>
 810db42:	ab03      	add	r3, sp, #12
 810db44:	9300      	str	r3, [sp, #0]
 810db46:	462a      	mov	r2, r5
 810db48:	4b0f      	ldr	r3, [pc, #60]	; (810db88 <_svfiprintf_r+0x1f8>)
 810db4a:	a904      	add	r1, sp, #16
 810db4c:	4638      	mov	r0, r7
 810db4e:	f7fb ff17 	bl	8109980 <_printf_float>
 810db52:	1c42      	adds	r2, r0, #1
 810db54:	4606      	mov	r6, r0
 810db56:	d1d6      	bne.n	810db06 <_svfiprintf_r+0x176>
 810db58:	89ab      	ldrh	r3, [r5, #12]
 810db5a:	065b      	lsls	r3, r3, #25
 810db5c:	f53f af2c 	bmi.w	810d9b8 <_svfiprintf_r+0x28>
 810db60:	9809      	ldr	r0, [sp, #36]	; 0x24
 810db62:	b01d      	add	sp, #116	; 0x74
 810db64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810db68:	ab03      	add	r3, sp, #12
 810db6a:	9300      	str	r3, [sp, #0]
 810db6c:	462a      	mov	r2, r5
 810db6e:	4b06      	ldr	r3, [pc, #24]	; (810db88 <_svfiprintf_r+0x1f8>)
 810db70:	a904      	add	r1, sp, #16
 810db72:	4638      	mov	r0, r7
 810db74:	f7fc f9a8 	bl	8109ec8 <_printf_i>
 810db78:	e7eb      	b.n	810db52 <_svfiprintf_r+0x1c2>
 810db7a:	bf00      	nop
 810db7c:	0810e70c 	.word	0x0810e70c
 810db80:	0810e716 	.word	0x0810e716
 810db84:	08109981 	.word	0x08109981
 810db88:	0810d8db 	.word	0x0810d8db
 810db8c:	0810e712 	.word	0x0810e712

0810db90 <__sfputc_r>:
 810db90:	6893      	ldr	r3, [r2, #8]
 810db92:	3b01      	subs	r3, #1
 810db94:	2b00      	cmp	r3, #0
 810db96:	b410      	push	{r4}
 810db98:	6093      	str	r3, [r2, #8]
 810db9a:	da08      	bge.n	810dbae <__sfputc_r+0x1e>
 810db9c:	6994      	ldr	r4, [r2, #24]
 810db9e:	42a3      	cmp	r3, r4
 810dba0:	db01      	blt.n	810dba6 <__sfputc_r+0x16>
 810dba2:	290a      	cmp	r1, #10
 810dba4:	d103      	bne.n	810dbae <__sfputc_r+0x1e>
 810dba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 810dbaa:	f7fd bc59 	b.w	810b460 <__swbuf_r>
 810dbae:	6813      	ldr	r3, [r2, #0]
 810dbb0:	1c58      	adds	r0, r3, #1
 810dbb2:	6010      	str	r0, [r2, #0]
 810dbb4:	7019      	strb	r1, [r3, #0]
 810dbb6:	4608      	mov	r0, r1
 810dbb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 810dbbc:	4770      	bx	lr

0810dbbe <__sfputs_r>:
 810dbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dbc0:	4606      	mov	r6, r0
 810dbc2:	460f      	mov	r7, r1
 810dbc4:	4614      	mov	r4, r2
 810dbc6:	18d5      	adds	r5, r2, r3
 810dbc8:	42ac      	cmp	r4, r5
 810dbca:	d101      	bne.n	810dbd0 <__sfputs_r+0x12>
 810dbcc:	2000      	movs	r0, #0
 810dbce:	e007      	b.n	810dbe0 <__sfputs_r+0x22>
 810dbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dbd4:	463a      	mov	r2, r7
 810dbd6:	4630      	mov	r0, r6
 810dbd8:	f7ff ffda 	bl	810db90 <__sfputc_r>
 810dbdc:	1c43      	adds	r3, r0, #1
 810dbde:	d1f3      	bne.n	810dbc8 <__sfputs_r+0xa>
 810dbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810dbe4 <_vfiprintf_r>:
 810dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dbe8:	460d      	mov	r5, r1
 810dbea:	b09d      	sub	sp, #116	; 0x74
 810dbec:	4614      	mov	r4, r2
 810dbee:	4698      	mov	r8, r3
 810dbf0:	4606      	mov	r6, r0
 810dbf2:	b118      	cbz	r0, 810dbfc <_vfiprintf_r+0x18>
 810dbf4:	6983      	ldr	r3, [r0, #24]
 810dbf6:	b90b      	cbnz	r3, 810dbfc <_vfiprintf_r+0x18>
 810dbf8:	f7fe fc86 	bl	810c508 <__sinit>
 810dbfc:	4b89      	ldr	r3, [pc, #548]	; (810de24 <_vfiprintf_r+0x240>)
 810dbfe:	429d      	cmp	r5, r3
 810dc00:	d11b      	bne.n	810dc3a <_vfiprintf_r+0x56>
 810dc02:	6875      	ldr	r5, [r6, #4]
 810dc04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810dc06:	07d9      	lsls	r1, r3, #31
 810dc08:	d405      	bmi.n	810dc16 <_vfiprintf_r+0x32>
 810dc0a:	89ab      	ldrh	r3, [r5, #12]
 810dc0c:	059a      	lsls	r2, r3, #22
 810dc0e:	d402      	bmi.n	810dc16 <_vfiprintf_r+0x32>
 810dc10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810dc12:	f7ff f88a 	bl	810cd2a <__retarget_lock_acquire_recursive>
 810dc16:	89ab      	ldrh	r3, [r5, #12]
 810dc18:	071b      	lsls	r3, r3, #28
 810dc1a:	d501      	bpl.n	810dc20 <_vfiprintf_r+0x3c>
 810dc1c:	692b      	ldr	r3, [r5, #16]
 810dc1e:	b9eb      	cbnz	r3, 810dc5c <_vfiprintf_r+0x78>
 810dc20:	4629      	mov	r1, r5
 810dc22:	4630      	mov	r0, r6
 810dc24:	f7fd fc6e 	bl	810b504 <__swsetup_r>
 810dc28:	b1c0      	cbz	r0, 810dc5c <_vfiprintf_r+0x78>
 810dc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810dc2c:	07dc      	lsls	r4, r3, #31
 810dc2e:	d50e      	bpl.n	810dc4e <_vfiprintf_r+0x6a>
 810dc30:	f04f 30ff 	mov.w	r0, #4294967295
 810dc34:	b01d      	add	sp, #116	; 0x74
 810dc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dc3a:	4b7b      	ldr	r3, [pc, #492]	; (810de28 <_vfiprintf_r+0x244>)
 810dc3c:	429d      	cmp	r5, r3
 810dc3e:	d101      	bne.n	810dc44 <_vfiprintf_r+0x60>
 810dc40:	68b5      	ldr	r5, [r6, #8]
 810dc42:	e7df      	b.n	810dc04 <_vfiprintf_r+0x20>
 810dc44:	4b79      	ldr	r3, [pc, #484]	; (810de2c <_vfiprintf_r+0x248>)
 810dc46:	429d      	cmp	r5, r3
 810dc48:	bf08      	it	eq
 810dc4a:	68f5      	ldreq	r5, [r6, #12]
 810dc4c:	e7da      	b.n	810dc04 <_vfiprintf_r+0x20>
 810dc4e:	89ab      	ldrh	r3, [r5, #12]
 810dc50:	0598      	lsls	r0, r3, #22
 810dc52:	d4ed      	bmi.n	810dc30 <_vfiprintf_r+0x4c>
 810dc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810dc56:	f7ff f869 	bl	810cd2c <__retarget_lock_release_recursive>
 810dc5a:	e7e9      	b.n	810dc30 <_vfiprintf_r+0x4c>
 810dc5c:	2300      	movs	r3, #0
 810dc5e:	9309      	str	r3, [sp, #36]	; 0x24
 810dc60:	2320      	movs	r3, #32
 810dc62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810dc66:	f8cd 800c 	str.w	r8, [sp, #12]
 810dc6a:	2330      	movs	r3, #48	; 0x30
 810dc6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810de30 <_vfiprintf_r+0x24c>
 810dc70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810dc74:	f04f 0901 	mov.w	r9, #1
 810dc78:	4623      	mov	r3, r4
 810dc7a:	469a      	mov	sl, r3
 810dc7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dc80:	b10a      	cbz	r2, 810dc86 <_vfiprintf_r+0xa2>
 810dc82:	2a25      	cmp	r2, #37	; 0x25
 810dc84:	d1f9      	bne.n	810dc7a <_vfiprintf_r+0x96>
 810dc86:	ebba 0b04 	subs.w	fp, sl, r4
 810dc8a:	d00b      	beq.n	810dca4 <_vfiprintf_r+0xc0>
 810dc8c:	465b      	mov	r3, fp
 810dc8e:	4622      	mov	r2, r4
 810dc90:	4629      	mov	r1, r5
 810dc92:	4630      	mov	r0, r6
 810dc94:	f7ff ff93 	bl	810dbbe <__sfputs_r>
 810dc98:	3001      	adds	r0, #1
 810dc9a:	f000 80aa 	beq.w	810ddf2 <_vfiprintf_r+0x20e>
 810dc9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810dca0:	445a      	add	r2, fp
 810dca2:	9209      	str	r2, [sp, #36]	; 0x24
 810dca4:	f89a 3000 	ldrb.w	r3, [sl]
 810dca8:	2b00      	cmp	r3, #0
 810dcaa:	f000 80a2 	beq.w	810ddf2 <_vfiprintf_r+0x20e>
 810dcae:	2300      	movs	r3, #0
 810dcb0:	f04f 32ff 	mov.w	r2, #4294967295
 810dcb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810dcb8:	f10a 0a01 	add.w	sl, sl, #1
 810dcbc:	9304      	str	r3, [sp, #16]
 810dcbe:	9307      	str	r3, [sp, #28]
 810dcc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810dcc4:	931a      	str	r3, [sp, #104]	; 0x68
 810dcc6:	4654      	mov	r4, sl
 810dcc8:	2205      	movs	r2, #5
 810dcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dcce:	4858      	ldr	r0, [pc, #352]	; (810de30 <_vfiprintf_r+0x24c>)
 810dcd0:	f7f2 fb0e 	bl	81002f0 <memchr>
 810dcd4:	9a04      	ldr	r2, [sp, #16]
 810dcd6:	b9d8      	cbnz	r0, 810dd10 <_vfiprintf_r+0x12c>
 810dcd8:	06d1      	lsls	r1, r2, #27
 810dcda:	bf44      	itt	mi
 810dcdc:	2320      	movmi	r3, #32
 810dcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810dce2:	0713      	lsls	r3, r2, #28
 810dce4:	bf44      	itt	mi
 810dce6:	232b      	movmi	r3, #43	; 0x2b
 810dce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810dcec:	f89a 3000 	ldrb.w	r3, [sl]
 810dcf0:	2b2a      	cmp	r3, #42	; 0x2a
 810dcf2:	d015      	beq.n	810dd20 <_vfiprintf_r+0x13c>
 810dcf4:	9a07      	ldr	r2, [sp, #28]
 810dcf6:	4654      	mov	r4, sl
 810dcf8:	2000      	movs	r0, #0
 810dcfa:	f04f 0c0a 	mov.w	ip, #10
 810dcfe:	4621      	mov	r1, r4
 810dd00:	f811 3b01 	ldrb.w	r3, [r1], #1
 810dd04:	3b30      	subs	r3, #48	; 0x30
 810dd06:	2b09      	cmp	r3, #9
 810dd08:	d94e      	bls.n	810dda8 <_vfiprintf_r+0x1c4>
 810dd0a:	b1b0      	cbz	r0, 810dd3a <_vfiprintf_r+0x156>
 810dd0c:	9207      	str	r2, [sp, #28]
 810dd0e:	e014      	b.n	810dd3a <_vfiprintf_r+0x156>
 810dd10:	eba0 0308 	sub.w	r3, r0, r8
 810dd14:	fa09 f303 	lsl.w	r3, r9, r3
 810dd18:	4313      	orrs	r3, r2
 810dd1a:	9304      	str	r3, [sp, #16]
 810dd1c:	46a2      	mov	sl, r4
 810dd1e:	e7d2      	b.n	810dcc6 <_vfiprintf_r+0xe2>
 810dd20:	9b03      	ldr	r3, [sp, #12]
 810dd22:	1d19      	adds	r1, r3, #4
 810dd24:	681b      	ldr	r3, [r3, #0]
 810dd26:	9103      	str	r1, [sp, #12]
 810dd28:	2b00      	cmp	r3, #0
 810dd2a:	bfbb      	ittet	lt
 810dd2c:	425b      	neglt	r3, r3
 810dd2e:	f042 0202 	orrlt.w	r2, r2, #2
 810dd32:	9307      	strge	r3, [sp, #28]
 810dd34:	9307      	strlt	r3, [sp, #28]
 810dd36:	bfb8      	it	lt
 810dd38:	9204      	strlt	r2, [sp, #16]
 810dd3a:	7823      	ldrb	r3, [r4, #0]
 810dd3c:	2b2e      	cmp	r3, #46	; 0x2e
 810dd3e:	d10c      	bne.n	810dd5a <_vfiprintf_r+0x176>
 810dd40:	7863      	ldrb	r3, [r4, #1]
 810dd42:	2b2a      	cmp	r3, #42	; 0x2a
 810dd44:	d135      	bne.n	810ddb2 <_vfiprintf_r+0x1ce>
 810dd46:	9b03      	ldr	r3, [sp, #12]
 810dd48:	1d1a      	adds	r2, r3, #4
 810dd4a:	681b      	ldr	r3, [r3, #0]
 810dd4c:	9203      	str	r2, [sp, #12]
 810dd4e:	2b00      	cmp	r3, #0
 810dd50:	bfb8      	it	lt
 810dd52:	f04f 33ff 	movlt.w	r3, #4294967295
 810dd56:	3402      	adds	r4, #2
 810dd58:	9305      	str	r3, [sp, #20]
 810dd5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810de40 <_vfiprintf_r+0x25c>
 810dd5e:	7821      	ldrb	r1, [r4, #0]
 810dd60:	2203      	movs	r2, #3
 810dd62:	4650      	mov	r0, sl
 810dd64:	f7f2 fac4 	bl	81002f0 <memchr>
 810dd68:	b140      	cbz	r0, 810dd7c <_vfiprintf_r+0x198>
 810dd6a:	2340      	movs	r3, #64	; 0x40
 810dd6c:	eba0 000a 	sub.w	r0, r0, sl
 810dd70:	fa03 f000 	lsl.w	r0, r3, r0
 810dd74:	9b04      	ldr	r3, [sp, #16]
 810dd76:	4303      	orrs	r3, r0
 810dd78:	3401      	adds	r4, #1
 810dd7a:	9304      	str	r3, [sp, #16]
 810dd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dd80:	482c      	ldr	r0, [pc, #176]	; (810de34 <_vfiprintf_r+0x250>)
 810dd82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810dd86:	2206      	movs	r2, #6
 810dd88:	f7f2 fab2 	bl	81002f0 <memchr>
 810dd8c:	2800      	cmp	r0, #0
 810dd8e:	d03f      	beq.n	810de10 <_vfiprintf_r+0x22c>
 810dd90:	4b29      	ldr	r3, [pc, #164]	; (810de38 <_vfiprintf_r+0x254>)
 810dd92:	bb1b      	cbnz	r3, 810dddc <_vfiprintf_r+0x1f8>
 810dd94:	9b03      	ldr	r3, [sp, #12]
 810dd96:	3307      	adds	r3, #7
 810dd98:	f023 0307 	bic.w	r3, r3, #7
 810dd9c:	3308      	adds	r3, #8
 810dd9e:	9303      	str	r3, [sp, #12]
 810dda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810dda2:	443b      	add	r3, r7
 810dda4:	9309      	str	r3, [sp, #36]	; 0x24
 810dda6:	e767      	b.n	810dc78 <_vfiprintf_r+0x94>
 810dda8:	fb0c 3202 	mla	r2, ip, r2, r3
 810ddac:	460c      	mov	r4, r1
 810ddae:	2001      	movs	r0, #1
 810ddb0:	e7a5      	b.n	810dcfe <_vfiprintf_r+0x11a>
 810ddb2:	2300      	movs	r3, #0
 810ddb4:	3401      	adds	r4, #1
 810ddb6:	9305      	str	r3, [sp, #20]
 810ddb8:	4619      	mov	r1, r3
 810ddba:	f04f 0c0a 	mov.w	ip, #10
 810ddbe:	4620      	mov	r0, r4
 810ddc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ddc4:	3a30      	subs	r2, #48	; 0x30
 810ddc6:	2a09      	cmp	r2, #9
 810ddc8:	d903      	bls.n	810ddd2 <_vfiprintf_r+0x1ee>
 810ddca:	2b00      	cmp	r3, #0
 810ddcc:	d0c5      	beq.n	810dd5a <_vfiprintf_r+0x176>
 810ddce:	9105      	str	r1, [sp, #20]
 810ddd0:	e7c3      	b.n	810dd5a <_vfiprintf_r+0x176>
 810ddd2:	fb0c 2101 	mla	r1, ip, r1, r2
 810ddd6:	4604      	mov	r4, r0
 810ddd8:	2301      	movs	r3, #1
 810ddda:	e7f0      	b.n	810ddbe <_vfiprintf_r+0x1da>
 810dddc:	ab03      	add	r3, sp, #12
 810ddde:	9300      	str	r3, [sp, #0]
 810dde0:	462a      	mov	r2, r5
 810dde2:	4b16      	ldr	r3, [pc, #88]	; (810de3c <_vfiprintf_r+0x258>)
 810dde4:	a904      	add	r1, sp, #16
 810dde6:	4630      	mov	r0, r6
 810dde8:	f7fb fdca 	bl	8109980 <_printf_float>
 810ddec:	4607      	mov	r7, r0
 810ddee:	1c78      	adds	r0, r7, #1
 810ddf0:	d1d6      	bne.n	810dda0 <_vfiprintf_r+0x1bc>
 810ddf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810ddf4:	07d9      	lsls	r1, r3, #31
 810ddf6:	d405      	bmi.n	810de04 <_vfiprintf_r+0x220>
 810ddf8:	89ab      	ldrh	r3, [r5, #12]
 810ddfa:	059a      	lsls	r2, r3, #22
 810ddfc:	d402      	bmi.n	810de04 <_vfiprintf_r+0x220>
 810ddfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810de00:	f7fe ff94 	bl	810cd2c <__retarget_lock_release_recursive>
 810de04:	89ab      	ldrh	r3, [r5, #12]
 810de06:	065b      	lsls	r3, r3, #25
 810de08:	f53f af12 	bmi.w	810dc30 <_vfiprintf_r+0x4c>
 810de0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810de0e:	e711      	b.n	810dc34 <_vfiprintf_r+0x50>
 810de10:	ab03      	add	r3, sp, #12
 810de12:	9300      	str	r3, [sp, #0]
 810de14:	462a      	mov	r2, r5
 810de16:	4b09      	ldr	r3, [pc, #36]	; (810de3c <_vfiprintf_r+0x258>)
 810de18:	a904      	add	r1, sp, #16
 810de1a:	4630      	mov	r0, r6
 810de1c:	f7fc f854 	bl	8109ec8 <_printf_i>
 810de20:	e7e4      	b.n	810ddec <_vfiprintf_r+0x208>
 810de22:	bf00      	nop
 810de24:	0810e4f4 	.word	0x0810e4f4
 810de28:	0810e514 	.word	0x0810e514
 810de2c:	0810e4d4 	.word	0x0810e4d4
 810de30:	0810e70c 	.word	0x0810e70c
 810de34:	0810e716 	.word	0x0810e716
 810de38:	08109981 	.word	0x08109981
 810de3c:	0810dbbf 	.word	0x0810dbbf
 810de40:	0810e712 	.word	0x0810e712

0810de44 <_putc_r>:
 810de44:	b570      	push	{r4, r5, r6, lr}
 810de46:	460d      	mov	r5, r1
 810de48:	4614      	mov	r4, r2
 810de4a:	4606      	mov	r6, r0
 810de4c:	b118      	cbz	r0, 810de56 <_putc_r+0x12>
 810de4e:	6983      	ldr	r3, [r0, #24]
 810de50:	b90b      	cbnz	r3, 810de56 <_putc_r+0x12>
 810de52:	f7fe fb59 	bl	810c508 <__sinit>
 810de56:	4b1c      	ldr	r3, [pc, #112]	; (810dec8 <_putc_r+0x84>)
 810de58:	429c      	cmp	r4, r3
 810de5a:	d124      	bne.n	810dea6 <_putc_r+0x62>
 810de5c:	6874      	ldr	r4, [r6, #4]
 810de5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810de60:	07d8      	lsls	r0, r3, #31
 810de62:	d405      	bmi.n	810de70 <_putc_r+0x2c>
 810de64:	89a3      	ldrh	r3, [r4, #12]
 810de66:	0599      	lsls	r1, r3, #22
 810de68:	d402      	bmi.n	810de70 <_putc_r+0x2c>
 810de6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810de6c:	f7fe ff5d 	bl	810cd2a <__retarget_lock_acquire_recursive>
 810de70:	68a3      	ldr	r3, [r4, #8]
 810de72:	3b01      	subs	r3, #1
 810de74:	2b00      	cmp	r3, #0
 810de76:	60a3      	str	r3, [r4, #8]
 810de78:	da05      	bge.n	810de86 <_putc_r+0x42>
 810de7a:	69a2      	ldr	r2, [r4, #24]
 810de7c:	4293      	cmp	r3, r2
 810de7e:	db1c      	blt.n	810deba <_putc_r+0x76>
 810de80:	b2eb      	uxtb	r3, r5
 810de82:	2b0a      	cmp	r3, #10
 810de84:	d019      	beq.n	810deba <_putc_r+0x76>
 810de86:	6823      	ldr	r3, [r4, #0]
 810de88:	1c5a      	adds	r2, r3, #1
 810de8a:	6022      	str	r2, [r4, #0]
 810de8c:	701d      	strb	r5, [r3, #0]
 810de8e:	b2ed      	uxtb	r5, r5
 810de90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810de92:	07da      	lsls	r2, r3, #31
 810de94:	d405      	bmi.n	810dea2 <_putc_r+0x5e>
 810de96:	89a3      	ldrh	r3, [r4, #12]
 810de98:	059b      	lsls	r3, r3, #22
 810de9a:	d402      	bmi.n	810dea2 <_putc_r+0x5e>
 810de9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810de9e:	f7fe ff45 	bl	810cd2c <__retarget_lock_release_recursive>
 810dea2:	4628      	mov	r0, r5
 810dea4:	bd70      	pop	{r4, r5, r6, pc}
 810dea6:	4b09      	ldr	r3, [pc, #36]	; (810decc <_putc_r+0x88>)
 810dea8:	429c      	cmp	r4, r3
 810deaa:	d101      	bne.n	810deb0 <_putc_r+0x6c>
 810deac:	68b4      	ldr	r4, [r6, #8]
 810deae:	e7d6      	b.n	810de5e <_putc_r+0x1a>
 810deb0:	4b07      	ldr	r3, [pc, #28]	; (810ded0 <_putc_r+0x8c>)
 810deb2:	429c      	cmp	r4, r3
 810deb4:	bf08      	it	eq
 810deb6:	68f4      	ldreq	r4, [r6, #12]
 810deb8:	e7d1      	b.n	810de5e <_putc_r+0x1a>
 810deba:	4629      	mov	r1, r5
 810debc:	4622      	mov	r2, r4
 810debe:	4630      	mov	r0, r6
 810dec0:	f7fd face 	bl	810b460 <__swbuf_r>
 810dec4:	4605      	mov	r5, r0
 810dec6:	e7e3      	b.n	810de90 <_putc_r+0x4c>
 810dec8:	0810e4f4 	.word	0x0810e4f4
 810decc:	0810e514 	.word	0x0810e514
 810ded0:	0810e4d4 	.word	0x0810e4d4
 810ded4:	00000000 	.word	0x00000000

0810ded8 <nan>:
 810ded8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810dee0 <nan+0x8>
 810dedc:	4770      	bx	lr
 810dede:	bf00      	nop
 810dee0:	00000000 	.word	0x00000000
 810dee4:	7ff80000 	.word	0x7ff80000

0810dee8 <__sread>:
 810dee8:	b510      	push	{r4, lr}
 810deea:	460c      	mov	r4, r1
 810deec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810def0:	f000 f906 	bl	810e100 <_read_r>
 810def4:	2800      	cmp	r0, #0
 810def6:	bfab      	itete	ge
 810def8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810defa:	89a3      	ldrhlt	r3, [r4, #12]
 810defc:	181b      	addge	r3, r3, r0
 810defe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810df02:	bfac      	ite	ge
 810df04:	6563      	strge	r3, [r4, #84]	; 0x54
 810df06:	81a3      	strhlt	r3, [r4, #12]
 810df08:	bd10      	pop	{r4, pc}

0810df0a <__swrite>:
 810df0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810df0e:	461f      	mov	r7, r3
 810df10:	898b      	ldrh	r3, [r1, #12]
 810df12:	05db      	lsls	r3, r3, #23
 810df14:	4605      	mov	r5, r0
 810df16:	460c      	mov	r4, r1
 810df18:	4616      	mov	r6, r2
 810df1a:	d505      	bpl.n	810df28 <__swrite+0x1e>
 810df1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810df20:	2302      	movs	r3, #2
 810df22:	2200      	movs	r2, #0
 810df24:	f000 f8b8 	bl	810e098 <_lseek_r>
 810df28:	89a3      	ldrh	r3, [r4, #12]
 810df2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810df2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810df32:	81a3      	strh	r3, [r4, #12]
 810df34:	4632      	mov	r2, r6
 810df36:	463b      	mov	r3, r7
 810df38:	4628      	mov	r0, r5
 810df3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810df3e:	f000 b837 	b.w	810dfb0 <_write_r>

0810df42 <__sseek>:
 810df42:	b510      	push	{r4, lr}
 810df44:	460c      	mov	r4, r1
 810df46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810df4a:	f000 f8a5 	bl	810e098 <_lseek_r>
 810df4e:	1c43      	adds	r3, r0, #1
 810df50:	89a3      	ldrh	r3, [r4, #12]
 810df52:	bf15      	itete	ne
 810df54:	6560      	strne	r0, [r4, #84]	; 0x54
 810df56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810df5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810df5e:	81a3      	strheq	r3, [r4, #12]
 810df60:	bf18      	it	ne
 810df62:	81a3      	strhne	r3, [r4, #12]
 810df64:	bd10      	pop	{r4, pc}

0810df66 <__sclose>:
 810df66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810df6a:	f000 b851 	b.w	810e010 <_close_r>

0810df6e <strncmp>:
 810df6e:	b510      	push	{r4, lr}
 810df70:	b17a      	cbz	r2, 810df92 <strncmp+0x24>
 810df72:	4603      	mov	r3, r0
 810df74:	3901      	subs	r1, #1
 810df76:	1884      	adds	r4, r0, r2
 810df78:	f813 0b01 	ldrb.w	r0, [r3], #1
 810df7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810df80:	4290      	cmp	r0, r2
 810df82:	d101      	bne.n	810df88 <strncmp+0x1a>
 810df84:	42a3      	cmp	r3, r4
 810df86:	d101      	bne.n	810df8c <strncmp+0x1e>
 810df88:	1a80      	subs	r0, r0, r2
 810df8a:	bd10      	pop	{r4, pc}
 810df8c:	2800      	cmp	r0, #0
 810df8e:	d1f3      	bne.n	810df78 <strncmp+0xa>
 810df90:	e7fa      	b.n	810df88 <strncmp+0x1a>
 810df92:	4610      	mov	r0, r2
 810df94:	e7f9      	b.n	810df8a <strncmp+0x1c>

0810df96 <__ascii_wctomb>:
 810df96:	b149      	cbz	r1, 810dfac <__ascii_wctomb+0x16>
 810df98:	2aff      	cmp	r2, #255	; 0xff
 810df9a:	bf85      	ittet	hi
 810df9c:	238a      	movhi	r3, #138	; 0x8a
 810df9e:	6003      	strhi	r3, [r0, #0]
 810dfa0:	700a      	strbls	r2, [r1, #0]
 810dfa2:	f04f 30ff 	movhi.w	r0, #4294967295
 810dfa6:	bf98      	it	ls
 810dfa8:	2001      	movls	r0, #1
 810dfaa:	4770      	bx	lr
 810dfac:	4608      	mov	r0, r1
 810dfae:	4770      	bx	lr

0810dfb0 <_write_r>:
 810dfb0:	b538      	push	{r3, r4, r5, lr}
 810dfb2:	4d07      	ldr	r5, [pc, #28]	; (810dfd0 <_write_r+0x20>)
 810dfb4:	4604      	mov	r4, r0
 810dfb6:	4608      	mov	r0, r1
 810dfb8:	4611      	mov	r1, r2
 810dfba:	2200      	movs	r2, #0
 810dfbc:	602a      	str	r2, [r5, #0]
 810dfbe:	461a      	mov	r2, r3
 810dfc0:	f7f4 fa75 	bl	81024ae <_write>
 810dfc4:	1c43      	adds	r3, r0, #1
 810dfc6:	d102      	bne.n	810dfce <_write_r+0x1e>
 810dfc8:	682b      	ldr	r3, [r5, #0]
 810dfca:	b103      	cbz	r3, 810dfce <_write_r+0x1e>
 810dfcc:	6023      	str	r3, [r4, #0]
 810dfce:	bd38      	pop	{r3, r4, r5, pc}
 810dfd0:	1000055c 	.word	0x1000055c

0810dfd4 <__assert_func>:
 810dfd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810dfd6:	4614      	mov	r4, r2
 810dfd8:	461a      	mov	r2, r3
 810dfda:	4b09      	ldr	r3, [pc, #36]	; (810e000 <__assert_func+0x2c>)
 810dfdc:	681b      	ldr	r3, [r3, #0]
 810dfde:	4605      	mov	r5, r0
 810dfe0:	68d8      	ldr	r0, [r3, #12]
 810dfe2:	b14c      	cbz	r4, 810dff8 <__assert_func+0x24>
 810dfe4:	4b07      	ldr	r3, [pc, #28]	; (810e004 <__assert_func+0x30>)
 810dfe6:	9100      	str	r1, [sp, #0]
 810dfe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810dfec:	4906      	ldr	r1, [pc, #24]	; (810e008 <__assert_func+0x34>)
 810dfee:	462b      	mov	r3, r5
 810dff0:	f000 f81e 	bl	810e030 <fiprintf>
 810dff4:	f000 f896 	bl	810e124 <abort>
 810dff8:	4b04      	ldr	r3, [pc, #16]	; (810e00c <__assert_func+0x38>)
 810dffa:	461c      	mov	r4, r3
 810dffc:	e7f3      	b.n	810dfe6 <__assert_func+0x12>
 810dffe:	bf00      	nop
 810e000:	10000020 	.word	0x10000020
 810e004:	0810e71d 	.word	0x0810e71d
 810e008:	0810e72a 	.word	0x0810e72a
 810e00c:	0810e758 	.word	0x0810e758

0810e010 <_close_r>:
 810e010:	b538      	push	{r3, r4, r5, lr}
 810e012:	4d06      	ldr	r5, [pc, #24]	; (810e02c <_close_r+0x1c>)
 810e014:	2300      	movs	r3, #0
 810e016:	4604      	mov	r4, r0
 810e018:	4608      	mov	r0, r1
 810e01a:	602b      	str	r3, [r5, #0]
 810e01c:	f7f4 fa63 	bl	81024e6 <_close>
 810e020:	1c43      	adds	r3, r0, #1
 810e022:	d102      	bne.n	810e02a <_close_r+0x1a>
 810e024:	682b      	ldr	r3, [r5, #0]
 810e026:	b103      	cbz	r3, 810e02a <_close_r+0x1a>
 810e028:	6023      	str	r3, [r4, #0]
 810e02a:	bd38      	pop	{r3, r4, r5, pc}
 810e02c:	1000055c 	.word	0x1000055c

0810e030 <fiprintf>:
 810e030:	b40e      	push	{r1, r2, r3}
 810e032:	b503      	push	{r0, r1, lr}
 810e034:	4601      	mov	r1, r0
 810e036:	ab03      	add	r3, sp, #12
 810e038:	4805      	ldr	r0, [pc, #20]	; (810e050 <fiprintf+0x20>)
 810e03a:	f853 2b04 	ldr.w	r2, [r3], #4
 810e03e:	6800      	ldr	r0, [r0, #0]
 810e040:	9301      	str	r3, [sp, #4]
 810e042:	f7ff fdcf 	bl	810dbe4 <_vfiprintf_r>
 810e046:	b002      	add	sp, #8
 810e048:	f85d eb04 	ldr.w	lr, [sp], #4
 810e04c:	b003      	add	sp, #12
 810e04e:	4770      	bx	lr
 810e050:	10000020 	.word	0x10000020

0810e054 <_fstat_r>:
 810e054:	b538      	push	{r3, r4, r5, lr}
 810e056:	4d07      	ldr	r5, [pc, #28]	; (810e074 <_fstat_r+0x20>)
 810e058:	2300      	movs	r3, #0
 810e05a:	4604      	mov	r4, r0
 810e05c:	4608      	mov	r0, r1
 810e05e:	4611      	mov	r1, r2
 810e060:	602b      	str	r3, [r5, #0]
 810e062:	f7f4 fa4c 	bl	81024fe <_fstat>
 810e066:	1c43      	adds	r3, r0, #1
 810e068:	d102      	bne.n	810e070 <_fstat_r+0x1c>
 810e06a:	682b      	ldr	r3, [r5, #0]
 810e06c:	b103      	cbz	r3, 810e070 <_fstat_r+0x1c>
 810e06e:	6023      	str	r3, [r4, #0]
 810e070:	bd38      	pop	{r3, r4, r5, pc}
 810e072:	bf00      	nop
 810e074:	1000055c 	.word	0x1000055c

0810e078 <_isatty_r>:
 810e078:	b538      	push	{r3, r4, r5, lr}
 810e07a:	4d06      	ldr	r5, [pc, #24]	; (810e094 <_isatty_r+0x1c>)
 810e07c:	2300      	movs	r3, #0
 810e07e:	4604      	mov	r4, r0
 810e080:	4608      	mov	r0, r1
 810e082:	602b      	str	r3, [r5, #0]
 810e084:	f7f4 fa4b 	bl	810251e <_isatty>
 810e088:	1c43      	adds	r3, r0, #1
 810e08a:	d102      	bne.n	810e092 <_isatty_r+0x1a>
 810e08c:	682b      	ldr	r3, [r5, #0]
 810e08e:	b103      	cbz	r3, 810e092 <_isatty_r+0x1a>
 810e090:	6023      	str	r3, [r4, #0]
 810e092:	bd38      	pop	{r3, r4, r5, pc}
 810e094:	1000055c 	.word	0x1000055c

0810e098 <_lseek_r>:
 810e098:	b538      	push	{r3, r4, r5, lr}
 810e09a:	4d07      	ldr	r5, [pc, #28]	; (810e0b8 <_lseek_r+0x20>)
 810e09c:	4604      	mov	r4, r0
 810e09e:	4608      	mov	r0, r1
 810e0a0:	4611      	mov	r1, r2
 810e0a2:	2200      	movs	r2, #0
 810e0a4:	602a      	str	r2, [r5, #0]
 810e0a6:	461a      	mov	r2, r3
 810e0a8:	f7f4 fa44 	bl	8102534 <_lseek>
 810e0ac:	1c43      	adds	r3, r0, #1
 810e0ae:	d102      	bne.n	810e0b6 <_lseek_r+0x1e>
 810e0b0:	682b      	ldr	r3, [r5, #0]
 810e0b2:	b103      	cbz	r3, 810e0b6 <_lseek_r+0x1e>
 810e0b4:	6023      	str	r3, [r4, #0]
 810e0b6:	bd38      	pop	{r3, r4, r5, pc}
 810e0b8:	1000055c 	.word	0x1000055c

0810e0bc <memmove>:
 810e0bc:	4288      	cmp	r0, r1
 810e0be:	b510      	push	{r4, lr}
 810e0c0:	eb01 0402 	add.w	r4, r1, r2
 810e0c4:	d902      	bls.n	810e0cc <memmove+0x10>
 810e0c6:	4284      	cmp	r4, r0
 810e0c8:	4623      	mov	r3, r4
 810e0ca:	d807      	bhi.n	810e0dc <memmove+0x20>
 810e0cc:	1e43      	subs	r3, r0, #1
 810e0ce:	42a1      	cmp	r1, r4
 810e0d0:	d008      	beq.n	810e0e4 <memmove+0x28>
 810e0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810e0d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810e0da:	e7f8      	b.n	810e0ce <memmove+0x12>
 810e0dc:	4402      	add	r2, r0
 810e0de:	4601      	mov	r1, r0
 810e0e0:	428a      	cmp	r2, r1
 810e0e2:	d100      	bne.n	810e0e6 <memmove+0x2a>
 810e0e4:	bd10      	pop	{r4, pc}
 810e0e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810e0ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810e0ee:	e7f7      	b.n	810e0e0 <memmove+0x24>

0810e0f0 <_malloc_usable_size_r>:
 810e0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e0f4:	1f18      	subs	r0, r3, #4
 810e0f6:	2b00      	cmp	r3, #0
 810e0f8:	bfbc      	itt	lt
 810e0fa:	580b      	ldrlt	r3, [r1, r0]
 810e0fc:	18c0      	addlt	r0, r0, r3
 810e0fe:	4770      	bx	lr

0810e100 <_read_r>:
 810e100:	b538      	push	{r3, r4, r5, lr}
 810e102:	4d07      	ldr	r5, [pc, #28]	; (810e120 <_read_r+0x20>)
 810e104:	4604      	mov	r4, r0
 810e106:	4608      	mov	r0, r1
 810e108:	4611      	mov	r1, r2
 810e10a:	2200      	movs	r2, #0
 810e10c:	602a      	str	r2, [r5, #0]
 810e10e:	461a      	mov	r2, r3
 810e110:	f7f4 f9b0 	bl	8102474 <_read>
 810e114:	1c43      	adds	r3, r0, #1
 810e116:	d102      	bne.n	810e11e <_read_r+0x1e>
 810e118:	682b      	ldr	r3, [r5, #0]
 810e11a:	b103      	cbz	r3, 810e11e <_read_r+0x1e>
 810e11c:	6023      	str	r3, [r4, #0]
 810e11e:	bd38      	pop	{r3, r4, r5, pc}
 810e120:	1000055c 	.word	0x1000055c

0810e124 <abort>:
 810e124:	b508      	push	{r3, lr}
 810e126:	2006      	movs	r0, #6
 810e128:	f000 f82c 	bl	810e184 <raise>
 810e12c:	2001      	movs	r0, #1
 810e12e:	f7f4 f997 	bl	8102460 <_exit>

0810e132 <_raise_r>:
 810e132:	291f      	cmp	r1, #31
 810e134:	b538      	push	{r3, r4, r5, lr}
 810e136:	4604      	mov	r4, r0
 810e138:	460d      	mov	r5, r1
 810e13a:	d904      	bls.n	810e146 <_raise_r+0x14>
 810e13c:	2316      	movs	r3, #22
 810e13e:	6003      	str	r3, [r0, #0]
 810e140:	f04f 30ff 	mov.w	r0, #4294967295
 810e144:	bd38      	pop	{r3, r4, r5, pc}
 810e146:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810e148:	b112      	cbz	r2, 810e150 <_raise_r+0x1e>
 810e14a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e14e:	b94b      	cbnz	r3, 810e164 <_raise_r+0x32>
 810e150:	4620      	mov	r0, r4
 810e152:	f000 f831 	bl	810e1b8 <_getpid_r>
 810e156:	462a      	mov	r2, r5
 810e158:	4601      	mov	r1, r0
 810e15a:	4620      	mov	r0, r4
 810e15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e160:	f000 b818 	b.w	810e194 <_kill_r>
 810e164:	2b01      	cmp	r3, #1
 810e166:	d00a      	beq.n	810e17e <_raise_r+0x4c>
 810e168:	1c59      	adds	r1, r3, #1
 810e16a:	d103      	bne.n	810e174 <_raise_r+0x42>
 810e16c:	2316      	movs	r3, #22
 810e16e:	6003      	str	r3, [r0, #0]
 810e170:	2001      	movs	r0, #1
 810e172:	e7e7      	b.n	810e144 <_raise_r+0x12>
 810e174:	2400      	movs	r4, #0
 810e176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810e17a:	4628      	mov	r0, r5
 810e17c:	4798      	blx	r3
 810e17e:	2000      	movs	r0, #0
 810e180:	e7e0      	b.n	810e144 <_raise_r+0x12>
	...

0810e184 <raise>:
 810e184:	4b02      	ldr	r3, [pc, #8]	; (810e190 <raise+0xc>)
 810e186:	4601      	mov	r1, r0
 810e188:	6818      	ldr	r0, [r3, #0]
 810e18a:	f7ff bfd2 	b.w	810e132 <_raise_r>
 810e18e:	bf00      	nop
 810e190:	10000020 	.word	0x10000020

0810e194 <_kill_r>:
 810e194:	b538      	push	{r3, r4, r5, lr}
 810e196:	4d07      	ldr	r5, [pc, #28]	; (810e1b4 <_kill_r+0x20>)
 810e198:	2300      	movs	r3, #0
 810e19a:	4604      	mov	r4, r0
 810e19c:	4608      	mov	r0, r1
 810e19e:	4611      	mov	r1, r2
 810e1a0:	602b      	str	r3, [r5, #0]
 810e1a2:	f7f4 f94d 	bl	8102440 <_kill>
 810e1a6:	1c43      	adds	r3, r0, #1
 810e1a8:	d102      	bne.n	810e1b0 <_kill_r+0x1c>
 810e1aa:	682b      	ldr	r3, [r5, #0]
 810e1ac:	b103      	cbz	r3, 810e1b0 <_kill_r+0x1c>
 810e1ae:	6023      	str	r3, [r4, #0]
 810e1b0:	bd38      	pop	{r3, r4, r5, pc}
 810e1b2:	bf00      	nop
 810e1b4:	1000055c 	.word	0x1000055c

0810e1b8 <_getpid_r>:
 810e1b8:	f7f4 b93a 	b.w	8102430 <_getpid>

0810e1bc <_init>:
 810e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e1be:	bf00      	nop
 810e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e1c2:	bc08      	pop	{r3}
 810e1c4:	469e      	mov	lr, r3
 810e1c6:	4770      	bx	lr

0810e1c8 <_fini>:
 810e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e1ca:	bf00      	nop
 810e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e1ce:	bc08      	pop	{r3}
 810e1d0:	469e      	mov	lr, r3
 810e1d2:	4770      	bx	lr
